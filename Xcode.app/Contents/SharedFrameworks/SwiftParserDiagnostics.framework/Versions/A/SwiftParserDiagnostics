editor placeholder in source file
'=' must have consistent whitespace on both sides
hexadecimal floating point literal must end with an exponent
expected '}' in \u{...} escape sequence
expected a digit in floating point exponent
expected hexadecimal code in \u{...} escape sequence
expected hexadecimal digit (0-9, A-F) in integer literal
invalid character in source file
invalid escape sequence in literal
an identifier cannot begin with this character
\u{...} escape sequence expects between 1 and 8 hex digits
invalid UTF-8 found in source file
the lexer discovered an error in this token but was not able to represent its offset due to overflow; please split the token
source control conflict marker in source file
unexpected end of block comment
unicode curly quote found; use '"' instead
bare slash regex literal may not start with space
bare slash regex literal may not end with space
multi-line regex closing delimiter must appear on new line
unprintable ASCII character found in source file
unterminated '/*' comment
non-breaking space (U+00A0) used instead of regular space
nul character embedded in middle of file
generic where clause
generic parameter clause
trailing closures
trailing closure
called expression
inheritance clause
declaration name
primary associated type clause
precedence group
macro definition
parameter reference
constrained type
function signature
parameter pack specifier
associated values
_TtC25IDESwiftParserDiagnostics22PresentMakingFormatter
SwiftParserDiagnostics.PresentMakingFormatter
init(indentationWidth:initialIndentation:viewMode:)
extraneous whitespace before '
' is not permitted
extraneous whitespace after '
' is not a valid first character in floating point exponent
' is not a valid digit in floating point exponent
' is not a valid hexadecimal digit (0-9, A-F) in integer literal
' is not a valid digit in integer literal
' is not a valid octal digit (0-7) in integer literal
' is not a valid binary digit (0 or 1) in integer literal
; this is an error in Swift 6
remove whitespace
removeExtraneousWhitespace
insert whitespace
insertWhitespace
replace curly quotes with '"'
replaceCurlyQuoteByNormalQuote
replace non-breaking space with ' '
replaceNonBreakingSpaceBySpace
to match this opening '
_TtC25IDESwiftParserDiagnostics16NoNewlinesFormat
_TtC25IDESwiftParserDiagnosticsP33_D814B2AFEC72B63D6ADAFD28B2DCE30C15HasTokenChecker
hasToken
if this name is unavoidable, use backticks to escape it
multi-line string literal closing delimiter must begin on a new line
multiLineStringLiteralMustHaveClosingDelimiterOnNewLine
multi-line string literal content must begin on a new line
multiLineStringLiteralMustBeginOnNewLine
expected additional '#' characters in closing delimiter
tooFewClosingPoundDelimiters
insert additional closing '#' delimiters
insertExtraClosingPounds
remove extraneous delimiters
removeExtraneousDelimiters
too many '#' characters in closing delimiter
tooManyClosingPoundDelimiters
too many '#' characters to start string interpolation
tooManyRawStringDelimitersToStartInterpolation
_TtC25IDESwiftParserDiagnostics53MultiLineStringLiteralIndentationDiagnosticsGenerator
closeQuote
finishedDiagnostics
inProgressDiagnostic
SwiftParserDiagnostics.MultiLineStringLiteralIndentationDiagnosticsGenerator
should match indentation here
shouldMatchIndentationOfClosingQuote
change indentation of this line to match closing delimiter
changeIndentationToMatchClosingDelimiter
join the identifiers together
join the identifiers together with camel-case
joinIdentifiersWithCamelCase
unexpected ';' separator
unexpectedSemicolon
parsing has exceeded the maximum nesting level
maximumNestingLevelOverflow
unexpected ']' in type; did you mean to write an array type?
extraRightBracket
insert attribute argument
insertAttributeArguments
version comparison not needed
versionComparisonNotNeeded
editorPlaceholderInSourceFile
'case' can only appear inside a 'switch' statement or 'enum' declaration
caseOutsideOfSwitchOrEnum
'default' label can only appear inside a 'switch' statement
defaultOutsideOfSwitch
standalone ';' statements are not allowed
standaloneSemicolonStatement
consecutive statements on a line must be separated by newline or ';'
consecutiveStatementsOnSameLine
expected ',' to separate the requirements of this 'where' clause
expectedCommaInWhereClause
deinitializers cannot throw
deinitCannotThrow
expected Sequence expression for for-each loop
expectedSequenceExpressionInForEachLoop
C-style for statement has been removed in Swift 3
ellipsis operator cannot be used with a type parameter pack
typeParameterPackEllipsis
generic signature cannot be declared in enum 'case'
genericParamCantBeUsedInEnumCaseDecl
extra tokens following conditional compilation directive
extraTokensFollowingConditionalCompilationDirective
unexpected 'if' keyword following '#else' conditional compilation directive; did you mean '#elseif'?
unexpectedPoundElseSpaceIf
expected '{' or 'if' after 'else'
expectedLeftBraceOrIfAfterElse
expected '=' instead of '==' to assign default value for parameter
expectedAssignmentInsteadOfComparisonOperator
initializers cannot have a name
initializerCannotHaveName
consecutive declarations on a line must be separated by newline or ';'
consecutiveDeclarationsOnSameLine
operator should not be declared with body
operatorShouldBeDeclaredWithoutBody
remove operator body
removeOperatorBody
operator must be declared as 'prefix', 'postfix', or 'infix'
missingFixityInOperatorDeclaration
extra tokens following the #sourceLocation directive
extraTokensAtTheEndOfSourceLocationDirective
expected 'true' or 'false' after 'assignment'
invalidFlagAfterPrecedenceGroupAssignment
Expected 'none', 'left', or 'right' after 'associativity'
invalidPrecedenceGroupAssociativity
expected ':' or '==' to indicate a conformance or same-type requirement
missingConformanceRequirement
argument cannot be an extended escaping string literal
forbiddenExtendedEscapingString
argument cannot be an interpolated string literal
forbiddenInterpolatedString
escaped newline at the last line of a multi-line string literal is not allowed
escapedNewlineAtLastLineOfMultiLineStringLiteralNotAllowed
Single-quoted string literal found, use '"'
singleQuoteStringLiteral
string literals in Swift are not preceded by an '@' sign
stringLiteralAtSign
subscripts cannot have a name
subscriptsCannotHaveNames
all statements inside a switch must be covered by a 'case' or 'default' label
allStatementsInSwitchMustBeCoveredByCase
'default' cannot be used with a 'where' guard expression
defaultCannotBeUsedWithWhere
expected expression after 'try'
expectedExpressionAfterTry
expected ':' to begin inheritance clause
expectedColonClass
expected ':' after '? ...' in ternary expression
missingColonInTernaryExpr
expected ':' and expression after '? ...' in ternary expression
missingColonAndExprInTernaryExpr
SwiftParserDiagnostics.ParseDiagnosticsGenerator
_TtC25IDESwiftParserDiagnostics25ParseDiagnosticsGenerator
diagnostics
handledNodes
suppressRemainingDiagnostics
'try' must be placed on the initial value expression
tryOnInitialValueExpression
expected async specifier; did you mean 'async'?
expected throwing specifier; did you mean 'throws'?
misspelledThrows
'try' must be placed on the thrown expression
tryMustBePlacedOnThrownExpr
'try' must be placed on the produced expression
tryMustBePlacedOnThenExpr
'try' must be placed on the returned expression
tryMustBePlacedOnReturnedExpr
unexpected initializer in pattern; did you mean to use '='?
initializerInPattern
'class' constraint can only appear on protocol declarations
classConstraintCanOnlyBeUsedInProtocol
expected ',' joining parts of a multi-clause condition
joinConditionsUsingComma
expected ',' joining platforms in availability condition
joinPlatformsUsingComma
associated types cannot be variadic
associatedTypeCannotUsePack
StaticParserError.
 cannot be used as an expression, did you mean to use '
 cannot be used in an expression, only as a condition of 'if' or 'guard'
cannot parse version component 
deinitializers cannot have 
 conflicts with 
 has already been specified
 must precede '->'
 is considered an identifier and must not appear within an operator name
' is not a valid floating point literal; it must be written '0.
' is not a valid identifier
' cannot be used as an identifier here
 can only start with a letter or underscore, not a number
unexpected tab in indentation
 lines in multi-line string literal
unexpected space in indentation
insufficient indentation
 of line in multi-line string literal
expected argument for '@
 to be surrounded by '"'
missing condition in statement
missing condition in 
expected expression in statement
expected expression in 
 cannot be used in an expression; did you mean 
 before a parameter name is not allowed
 is not allowed in operator names
trailing components of version 
'try' cannot be used with '
use of unknown directive 
unknown parameter '
; valid parameters are 
StaticParserNote.
StaticParserFixIt.
 in front of type
remove redundant 
InsertTokenFixIt
MatchingOpeningTokenNote
MissingNodesError
found an unexpected second identifier; is there an accidental break?
found an unexpected second identifier in 
; is there an accidental break?
_TtC25IDESwiftParserDiagnostics18PresentNodeChecker
hasPresentToken
_TtC25IDESwiftParserDiagnostics12MissingMaker
SwiftParserDiagnostics.MissingMaker
init(viewMode:)
'yield' statement
wildcard pattern
'while' statement
value binding pattern
ternary operator
@_private argument
@_unavailableFromAsync argument
effect specifiers
typealias declaration
'try' expression
'throw' statement
'then' statement
ternay expression
'switch' statement
suppressed type conformance
attribute argument
availability entry
argument to '@_specialize
simple string literal
same type requirement
'return' statement
'repeat' statement
'relation' property of precedencegroup
'associativity' property of precedencegroup
'assignment' property of precedencegroup
'#sourceLocation' directive
'#sourceLocation' arguments
postfix expression
version restriction
variadic expansion
@_originallyDefinedIn arguments
optional chaining
optional binding
operator declaration
opaque return type arguments
Objective-C selector piece
Objective-C selector
named opaque return type
pattern matching
lifetime specifier
layout requirement
labeled statement
key path subscript component
key path property component
key path optional component
key path component
inout expression
implicitly unwrapped optional type
@_implements arguemnts
conditional compilation block
conditional compilation clause
'guard' statement
generic parameter
generic argument
generic argument clause
parameter clause
floating literal
'fallthrough' statement
@_expose arguments
@_effects arguments
editor placeholder
@_dynamicReplacement argument
@_documentation argument
@_documentation arguments
'discard' statement
'@differentiable' arguments
'@differentiable' argument
differentiability arguments
differentiability argument
differentiability parameters
dictionary element
attribute arguments
'defer' statement
'copy' expression
@convention(...) arguments for witness methods
@convention(...) arguments
'continue' statement
'consume' expression
conformance requirement
type composition
closure signature
closure parameter
closure capture specifier
closure capture clause
'canImport' expression
'break' statement
'_borrow' expression
'@backDeployed' arguments
'await' expression
availability argument
availability condition
'@availability' arguments
associatedtype declaration
accessor specifiers
extended delimiter
raw string delimiter
postfix operator
dollar identifier
$sSY
$s25IDESwiftParserDiagnostics10TokenErrorP
$s25IDESwiftParserDiagnostics12TokenWarningP
ySSG
10diagnostic_Say
G12handledNodestG
10diagnostic_Say
G12handledNodest
ySnySiGG
SaySSG
ySSG
10diagnostic_Say
G12handledNodestG
_pSg
_pSg
10diagnostic_Say
G12handledNodestSg
SbIegnr_
Sg_yyc
_pSg
$s25IDESwiftParserDiagnostics0B5ErrorP
$s25IDESwiftParserDiagnostics0B4NoteP
$s25IDESwiftParserDiagnostics0B5FixItP
IDESwiftParserDiagnostics
PresentMakingFormatter
MultiNodeChange
StaticTokenError
StaticTokenWarning
IDESwiftParserDiagnostics
TokenError
TokenWarning
ExtraneousLeadingWhitespaceError
ExtraneousTrailingWhitespaceError
InvalidFloatingPointExponentDigit
Kind
InvalidDigitInIntegerLiteral
ErrorToWarningDowngrade
IDESwiftParserDiagnostics
NoNewlinesFormat
HasTokenChecker
MissingNodesError
MatchingOpeningTokenNote
InsertTokenFixIt
NodesDescriptionPart
IDESwiftParserDiagnostics
MultiLineStringLiteralIndentationDiagnosticsGenerator
InProgressDiagnostic
IDESwiftParserDiagnostics
ParseDiagnosticsGenerator
IDESwiftParserDiagnostics
ParserError
ParserNote
ParserFixIt
StaticParserError
AsyncMustPrecedeThrows
AvailabilityConditionAsExpression
AvailabilityConditionInExpression
CannotParseVersionTuple
DeinitializerSignatureError
DuplicateEffectSpecifiers
EffectsSpecifierAfterArrow
ExtraneousCodeAtTopLevel
ExtraneousWhitespace
IdentifierNotAllowedInOperatorName
InvalidFloatLiteralMissingLeadingZero
InvalidIdentifierError
InvalidIndentationInMultiLineStringLiteralError
Kind
MissingAttributeArgument
MissingBothStringQuotesOfStringSegments
MissingConditionInStatement
MissingExpressionInStatement
NegatedAvailabilityCondition
SpaceSeparatedIdentifiersError
SpecifierOnParameterName
TokensNotAllowedInOperatorName
TrailingVersionAreIgnored
TryCannotBeUsed
UnexpectedNodesError
UnknownDirectiveError
UnknownParameterError
EffectSpecifierDeclaredHere
StaticParserNote
StaticParserFixIt
InsertFixIt
MoveTokensAfterFixIt
MoveTokensInFrontOfFixIt
MoveTokensInFrontOfTypeFixIt
RemoveRedundantFixIt
RemoveNodesFixIt
ReplaceTokensFixIt
IDESwiftParserDiagnostics
PresentNodeChecker
MissingMaker
primitiveChanges
RawValue
editorPlaceholder
equalMustHaveConsistentWhitespaceOnBothSides
expectedBinaryExponentInHexFloatLiteral
expectedClosingBraceInUnicodeEscape
expectedDigitInFloatLiteral
expectedHexCodeInUnicodeEscape
expectedHexDigitInHexLiteral
invalidCharacter
invalidEscapeSequenceInStringLiteral
invalidIdentifierStartCharacter
invalidNumberOfHexDigitsInUnicodeEscape
invalidUtf8
tokenDiagnosticOffsetOverflow
sourceConflictMarker
unexpectedBlockCommentEnd
unicodeCurlyQuote
spaceAtStartOfRegexLiteral
spaceAtEndOfRegexLiteral
multilineRegexClosingNotOnNewline
unprintableAsciiCharacter
unterminatedBlockComment
nonBreakingSpace
nulCharacter
tokenText
kind
digit
character
binary
octal
decimal
error
hasToken
missingNodes
openingToken
tokensWithDefaultText
tokenWithoutDefaultText
node
closeQuote
finishedDiagnostics
inProgressDiagnostic
anchor
position
kind
lines
changes
handledNodes
diagnostics
handledNodes
suppressRemainingDiagnostics
message
messageID
asyncKeywords
throwsKeyword
availabilityToken
negatedAvailabilityToken
availabilityCondition
versionTuple
name
params
returnClause
correctSpecifier
unexpectedSpecifier
effectsSpecifiersAfterArrow
extraneousCode
tokenWithWhitespace
identifier
decimalDigits
invalidIdentifier
missingIdentifier
kind
lines
insufficientIndentation
unexpectedSpace
unexpectedTab
attributeName
stringSegments
node
negatedAvailabilityKeyword
firstToken
additionalTokens
misplacedSpecifiers
tokens
major
components
severity
nextToken
unexpectedNodes
unexpected
parameter
validParameters
specifier
tokenToBeInserted
movedTokens
after
inFrontOf
removeTokens
nodesToRemove
replaceTokens
replacements
hasPresentToken
editor placeholder in source file
'=' must have consistent whitespace on both sides
hexadecimal floating point literal must end with an exponent
expected '}' in \u{...} escape sequence
expected a digit in floating point exponent
expected hexadecimal code in \u{...} escape sequence
expected hexadecimal digit (0-9, A-F) in integer literal
invalid character in source file
invalid escape sequence in literal
an identifier cannot begin with this character
\u{...} escape sequence expects between 1 and 8 hex digits
invalid UTF-8 found in source file
the lexer discovered an error in this token but was not able to represent its offset due to overflow; please split the token
source control conflict marker in source file
unexpected end of block comment
unicode curly quote found; use '"' instead
bare slash regex literal may not start with space
bare slash regex literal may not end with space
multi-line regex closing delimiter must appear on new line
unprintable ASCII character found in source file
unterminated '/*' comment
non-breaking space (U+00A0) used instead of regular space
nul character embedded in middle of file
generic where clause
generic parameter clause
trailing closures
trailing closure
called expression
inheritance clause
declaration name
primary associated type clause
precedence group
macro definition
parameter reference
constrained type
function signature
parameter pack specifier
associated values
_TtC25IDESwiftParserDiagnostics22PresentMakingFormatter
SwiftParserDiagnostics.PresentMakingFormatter
init(indentationWidth:initialIndentation:viewMode:)
extraneous whitespace before '
' is not permitted
extraneous whitespace after '
' is not a valid first character in floating point exponent
' is not a valid digit in floating point exponent
' is not a valid hexadecimal digit (0-9, A-F) in integer literal
' is not a valid digit in integer literal
' is not a valid octal digit (0-7) in integer literal
' is not a valid binary digit (0 or 1) in integer literal
; this is an error in Swift 6
remove whitespace
removeExtraneousWhitespace
insert whitespace
insertWhitespace
replace curly quotes with '"'
replaceCurlyQuoteByNormalQuote
replace non-breaking space with ' '
replaceNonBreakingSpaceBySpace
to match this opening '
_TtC25IDESwiftParserDiagnostics16NoNewlinesFormat
_TtC25IDESwiftParserDiagnosticsP33_D814B2AFEC72B63D6ADAFD28B2DCE30C15HasTokenChecker
hasToken
if this name is unavoidable, use backticks to escape it
multi-line string literal closing delimiter must begin on a new line
multiLineStringLiteralMustHaveClosingDelimiterOnNewLine
multi-line string literal content must begin on a new line
multiLineStringLiteralMustBeginOnNewLine
expected additional '#' characters in closing delimiter
tooFewClosingPoundDelimiters
insert additional closing '#' delimiters
insertExtraClosingPounds
remove extraneous delimiters
removeExtraneousDelimiters
too many '#' characters in closing delimiter
tooManyClosingPoundDelimiters
too many '#' characters to start string interpolation
tooManyRawStringDelimitersToStartInterpolation
_TtC25IDESwiftParserDiagnostics53MultiLineStringLiteralIndentationDiagnosticsGenerator
closeQuote
finishedDiagnostics
inProgressDiagnostic
SwiftParserDiagnostics.MultiLineStringLiteralIndentationDiagnosticsGenerator
should match indentation here
shouldMatchIndentationOfClosingQuote
change indentation of this line to match closing delimiter
changeIndentationToMatchClosingDelimiter
join the identifiers together
join the identifiers together with camel-case
joinIdentifiersWithCamelCase
unexpected ';' separator
unexpectedSemicolon
parsing has exceeded the maximum nesting level
maximumNestingLevelOverflow
unexpected ']' in type; did you mean to write an array type?
extraRightBracket
insert attribute argument
insertAttributeArguments
version comparison not needed
versionComparisonNotNeeded
editorPlaceholderInSourceFile
'case' can only appear inside a 'switch' statement or 'enum' declaration
caseOutsideOfSwitchOrEnum
'default' label can only appear inside a 'switch' statement
defaultOutsideOfSwitch
standalone ';' statements are not allowed
standaloneSemicolonStatement
consecutive statements on a line must be separated by newline or ';'
consecutiveStatementsOnSameLine
expected ',' to separate the requirements of this 'where' clause
expectedCommaInWhereClause
deinitializers cannot throw
deinitCannotThrow
expected Sequence expression for for-each loop
expectedSequenceExpressionInForEachLoop
C-style for statement has been removed in Swift 3
ellipsis operator cannot be used with a type parameter pack
typeParameterPackEllipsis
generic signature cannot be declared in enum 'case'
genericParamCantBeUsedInEnumCaseDecl
extra tokens following conditional compilation directive
extraTokensFollowingConditionalCompilationDirective
unexpected 'if' keyword following '#else' conditional compilation directive; did you mean '#elseif'?
unexpectedPoundElseSpaceIf
expected '{' or 'if' after 'else'
expectedLeftBraceOrIfAfterElse
expected '=' instead of '==' to assign default value for parameter
expectedAssignmentInsteadOfComparisonOperator
initializers cannot have a name
initializerCannotHaveName
consecutive declarations on a line must be separated by newline or ';'
consecutiveDeclarationsOnSameLine
operator should not be declared with body
operatorShouldBeDeclaredWithoutBody
remove operator body
removeOperatorBody
operator must be declared as 'prefix', 'postfix', or 'infix'
missingFixityInOperatorDeclaration
extra tokens following the #sourceLocation directive
extraTokensAtTheEndOfSourceLocationDirective
expected 'true' or 'false' after 'assignment'
invalidFlagAfterPrecedenceGroupAssignment
Expected 'none', 'left', or 'right' after 'associativity'
invalidPrecedenceGroupAssociativity
expected ':' or '==' to indicate a conformance or same-type requirement
missingConformanceRequirement
argument cannot be an extended escaping string literal
forbiddenExtendedEscapingString
argument cannot be an interpolated string literal
forbiddenInterpolatedString
escaped newline at the last line of a multi-line string literal is not allowed
escapedNewlineAtLastLineOfMultiLineStringLiteralNotAllowed
Single-quoted string literal found, use '"'
singleQuoteStringLiteral
string literals in Swift are not preceded by an '@' sign
stringLiteralAtSign
subscripts cannot have a name
subscriptsCannotHaveNames
all statements inside a switch must be covered by a 'case' or 'default' label
allStatementsInSwitchMustBeCoveredByCase
'default' cannot be used with a 'where' guard expression
defaultCannotBeUsedWithWhere
expected expression after 'try'
expectedExpressionAfterTry
expected ':' to begin inheritance clause
expectedColonClass
expected ':' after '? ...' in ternary expression
missingColonInTernaryExpr
expected ':' and expression after '? ...' in ternary expression
missingColonAndExprInTernaryExpr
SwiftParserDiagnostics.ParseDiagnosticsGenerator
_TtC25IDESwiftParserDiagnostics25ParseDiagnosticsGenerator
diagnostics
handledNodes
suppressRemainingDiagnostics
'try' must be placed on the initial value expression
tryOnInitialValueExpression
expected async specifier; did you mean 'async'?
expected throwing specifier; did you mean 'throws'?
misspelledThrows
'try' must be placed on the thrown expression
tryMustBePlacedOnThrownExpr
'try' must be placed on the produced expression
tryMustBePlacedOnThenExpr
'try' must be placed on the returned expression
tryMustBePlacedOnReturnedExpr
unexpected initializer in pattern; did you mean to use '='?
initializerInPattern
'class' constraint can only appear on protocol declarations
classConstraintCanOnlyBeUsedInProtocol
expected ',' joining parts of a multi-clause condition
joinConditionsUsingComma
expected ',' joining platforms in availability condition
joinPlatformsUsingComma
associated types cannot be variadic
associatedTypeCannotUsePack
StaticParserError.
 cannot be used as an expression, did you mean to use '
 cannot be used in an expression, only as a condition of 'if' or 'guard'
cannot parse version component 
deinitializers cannot have 
 conflicts with 
 has already been specified
 must precede '->'
 is considered an identifier and must not appear within an operator name
' is not a valid floating point literal; it must be written '0.
' is not a valid identifier
' cannot be used as an identifier here
 can only start with a letter or underscore, not a number
unexpected tab in indentation
 lines in multi-line string literal
unexpected space in indentation
insufficient indentation
 of line in multi-line string literal
expected argument for '@
 to be surrounded by '"'
missing condition in statement
missing condition in 
expected expression in statement
expected expression in 
 cannot be used in an expression; did you mean 
 before a parameter name is not allowed
 is not allowed in operator names
trailing components of version 
'try' cannot be used with '
use of unknown directive 
unknown parameter '
; valid parameters are 
StaticParserNote.
StaticParserFixIt.
 in front of type
remove redundant 
InsertTokenFixIt
MatchingOpeningTokenNote
MissingNodesError
found an unexpected second identifier; is there an accidental break?
found an unexpected second identifier in 
; is there an accidental break?
_TtC25IDESwiftParserDiagnostics18PresentNodeChecker
hasPresentToken
_TtC25IDESwiftParserDiagnostics12MissingMaker
SwiftParserDiagnostics.MissingMaker
init(viewMode:)
'yield' statement
wildcard pattern
'while' statement
value binding pattern
ternary operator
@_private argument
@_unavailableFromAsync argument
effect specifiers
typealias declaration
'try' expression
'throw' statement
'then' statement
ternay expression
'switch' statement
suppressed type conformance
attribute argument
availability entry
argument to '@_specialize
simple string literal
same type requirement
'return' statement
'repeat' statement
'relation' property of precedencegroup
'associativity' property of precedencegroup
'assignment' property of precedencegroup
'#sourceLocation' directive
'#sourceLocation' arguments
postfix expression
version restriction
variadic expansion
@_originallyDefinedIn arguments
optional chaining
optional binding
operator declaration
opaque return type arguments
Objective-C selector piece
Objective-C selector
named opaque return type
pattern matching
lifetime specifier
layout requirement
labeled statement
key path subscript component
key path property component
key path optional component
key path component
inout expression
implicitly unwrapped optional type
@_implements arguemnts
conditional compilation block
conditional compilation clause
'guard' statement
generic parameter
generic argument
generic argument clause
parameter clause
floating literal
'fallthrough' statement
@_expose arguments
@_effects arguments
editor placeholder
@_dynamicReplacement argument
@_documentation argument
@_documentation arguments
'discard' statement
'@differentiable' arguments
'@differentiable' argument
differentiability arguments
differentiability argument
differentiability parameters
dictionary element
attribute arguments
'defer' statement
'copy' expression
@convention(...) arguments for witness methods
@convention(...) arguments
'continue' statement
'consume' expression
conformance requirement
type composition
closure signature
closure parameter
closure capture specifier
closure capture clause
'canImport' expression
'break' statement
'_borrow' expression
'@backDeployed' arguments
'await' expression
availability argument
availability condition
'@availability' arguments
associatedtype declaration
accessor specifiers
extended delimiter
raw string delimiter
postfix operator
dollar identifier
$sSY
$s25IDESwiftParserDiagnostics10TokenErrorP
$s25IDESwiftParserDiagnostics12TokenWarningP
ySSG
10diagnostic_Say
G12handledNodestG
10diagnostic_Say
G12handledNodest
ySnySiGG
SaySSG
ySSG
10diagnostic_Say
G12handledNodestG
_pSg
_pSg
10diagnostic_Say
G12handledNodestSg
SbIegnr_
Sg_yyc
_pSg
$s25IDESwiftParserDiagnostics0B5ErrorP
$s25IDESwiftParserDiagnostics0B4NoteP
$s25IDESwiftParserDiagnostics0B5FixItP
IDESwiftParserDiagnostics
PresentMakingFormatter
MultiNodeChange
#'.26:>BFJN
StaticTokenError
StaticTokenWarning
IDESwiftParserDiagnostics
TokenError
TokenWarning
ExtraneousLeadingWhitespaceError
ExtraneousTrailingWhitespaceError
InvalidFloatingPointExponentDigit
Kind
InvalidDigitInIntegerLiteral
ErrorToWarningDowngrade
IDESwiftParserDiagnostics
NoNewlinesFormat
HasTokenChecker
MissingNodesError
MatchingOpeningTokenNote
InsertTokenFixIt
NodesDescriptionPart
JJJJJJJ- JJJJJJJJJJJJ:J>
IDESwiftParserDiagnostics
MultiLineStringLiteralIndentationDiagnosticsGenerator
InProgressDiagnostic
IDESwiftParserDiagnostics
ParseDiagnosticsGenerator
88888888.!
IDESwiftParserDiagnostics
ParserError
ParserNote
ParserFixIt
StaticParserError
AsyncMustPrecedeThrows
AvailabilityConditionAsExpression
AvailabilityConditionInExpression
CannotParseVersionTuple
DeinitializerSignatureError
DuplicateEffectSpecifiers
EffectsSpecifierAfterArrow
ExtraneousCodeAtTopLevel
ExtraneousWhitespace
IdentifierNotAllowedInOperatorName
InvalidFloatLiteralMissingLeadingZero
InvalidIdentifierError
InvalidIndentationInMultiLineStringLiteralError
Kind
MissingAttributeArgument
MissingBothStringQuotesOfStringSegments
MissingConditionInStatement
MissingExpressionInStatement
NegatedAvailabilityCondition
SpaceSeparatedIdentifiersError
SpecifierOnParameterName
TokensNotAllowedInOperatorName
TrailingVersionAreIgnored
TryCannotBeUsed
UnexpectedNodesError
UnknownDirectiveError
UnknownParameterError
EffectSpecifierDeclaredHere
StaticParserNote
StaticParserFixIt
InsertFixIt
MoveTokensAfterFixIt
MoveTokensInFrontOfFixIt
MoveTokensInFrontOfTypeFixIt
RemoveRedundantFixIt
RemoveNodesFixIt
ReplaceTokensFixIt
IDESwiftParserDiagnostics
PresentNodeChecker
MissingMaker
!(/4:CKQZ_
jmpsvy}
primitiveChanges
RawValue
editorPlaceholder
equalMustHaveConsistentWhitespaceOnBothSides
expectedBinaryExponentInHexFloatLiteral
expectedClosingBraceInUnicodeEscape
expectedDigitInFloatLiteral
expectedHexCodeInUnicodeEscape
expectedHexDigitInHexLiteral
invalidCharacter
invalidEscapeSequenceInStringLiteral
invalidIdentifierStartCharacter
invalidNumberOfHexDigitsInUnicodeEscape
invalidUtf8
tokenDiagnosticOffsetOverflow
sourceConflictMarker
unexpectedBlockCommentEnd
unicodeCurlyQuote
spaceAtStartOfRegexLiteral
spaceAtEndOfRegexLiteral
multilineRegexClosingNotOnNewline
unprintableAsciiCharacter
unterminatedBlockComment
nonBreakingSpace
nulCharacter
tokenText
kind
digit
character
binary
octal
decimal
error
hasToken
missingNodes
openingToken
tokensWithDefaultText
tokenWithoutDefaultText
node
closeQuote
finishedDiagnostics
inProgressDiagnostic
anchor
position
kind
lines
changes
handledNodes
diagnostics
handledNodes
suppressRemainingDiagnostics
message
messageID
asyncKeywords
throwsKeyword
availabilityToken
negatedAvailabilityToken
availabilityCondition
versionTuple
name
params
returnClause
correctSpecifier
unexpectedSpecifier
effectsSpecifiersAfterArrow
extraneousCode
tokenWithWhitespace
identifier
decimalDigits
invalidIdentifier
missingIdentifier
kind
lines
insufficientIndentation
unexpectedSpace
unexpectedTab
attributeName
stringSegments
node
negatedAvailabilityKeyword
firstToken
additionalTokens
misplacedSpecifiers
tokens
major
components
severity
nextToken
unexpectedNodes
unexpected
parameter
validParameters
specifier
tokenToBeInserted
movedTokens
after
inFrontOf
removeTokens
nodesToRemove
replaceTokens
replacements
hasPresentToken
