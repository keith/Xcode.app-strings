%#
% #
%"#
%$#
%&#
%(#
%*#
%,#
%v#
%< #
%> #
%@ #
%J #
%L #
%N #
%h #
%r #
% !#
%"!#
%$!#
%N"#
%^##
%`##
%b##
%d##
%f##
%h##
%j##
%l##
%n##
%p##
%r##
%t##
%v##
%$%#
%.%#
%H%#
%J%#
%T%#
%n%#
%p%#
%z%#
%"&#
%$&#
%&&#
%(&#
%*&#
%,&#
%.&#
%0&#
%2&#
%4&#
%6&#
%8&#
%:&#
%<&#
%>&#
%@&#
%B&#
%D&#
%F&#
%H&#
%J&#
%L&#
%N&#
%P&#
%R&#
%T&#
%V&#
%X&#
%Z&#
%\&#
%^&#
%`&#
%b&#
%d&#
%f&#
%h&#
%j&#
%l&#
%n&#
%p&#
%r&#
%t&#
%v&#
%x&#
%z&#
%|&#
%~&#
%'#
% '#
%"'#
%$'#
%&'#
%('#
%*'#
%,'#
%.'#
%0'#
%2'#
%4'#
%>'#
%@'#
%B'#
%D'#
%F'#
%H'#
%J'#
%L'#
%N'#
%P'#
%R'#
%T'#
%V'#
%X'#
%Z'#
%\'#
%^'#
%`'#
%b'#
%d'#
%f'#
%h'#
%j'#
%l'#
%n'#
%p'#
%r'#
%t'#
%v'#
%x'#
%z'#
%|'#
%~'#
% (#
%"(#
%$(#
%&(#
%((#
%*(#
%,(#
%.(#
%0(#
%2(#
%4(#
%6(#
%8(#
%:(#
%<(#
%>(#
%@(#
%B(#
%D(#
%F(#
%H(#
%J(#
%L(#
%N(#
%P(#
%R(#
%T(#
%V(#
%X(#
%Z(#
%\(#
%^(#
%`(#
%b(#
%d(#
%f(#
%h(#
%j(#
%l(#
%n(#
%p(#
%r(#
%t(#
%v(#
%x(#
%z(#
%|(#
%~(#
%6)#
%8)#
%:)#
%<)#
%>)#
%H)#
%J)#
%L)#
%N)#
%h)#
%`+#
%b+#
%d+#
%f+#
%h+#
%j+#
%l+#
%~+#
%(,#
%*,#
%,,#
%>,#
%@,#
%J,#
%L,#
%N,#
%P,#
%b,#
%|,#
%~,#
%-#
% -#
%"-#
%$-#
%&-#
%(-#
%*-#
%,-#
%.-#
%0-#
%2-#
%4-#
%6-#
%8-#
%:-#
%<-#
%>-#
%@-#
%B-#
%D-#
%F-#
%H-#
%J-#
%L-#
%N-#
%P-#
%R-#
%T-#
%V-#
%X-#
%Z-#
%\-#
%^-#
% 0#
%"0#
%$0#
%&0#
%(0#
%*0#
%,0#
%.0#
%00#
%20#
%40#
%60#
%80#
%:0#
%<0#
%>0#
%@0#
%B0#
%D0#
%F0#
%H0#
%J0#
%L0#
%N0#
%P0#
%R0#
%T0#
%V0#
%X0#
%Z0#
%\0#
%^0#
%`0#
%b0#
%d0#
%f0#
%h0#
%j0#
%l0#
%n0#
%p0#
%r0#
%t0#
%v0#
%x0#
%z0#
%|0#
%~0#
%1#
% 1#
%"1#
%$1#
%&1#
%(1#
%*1#
%,1#
%.1#
%01#
%21#
%41#
%61#
%@1#
%B1#
%D1#
%F1#
%H1#
%J1#
%L1#
%N1#
%P1#
%R1#
%T1#
%V1#
%X1#
%Z1#
%\1#
%^1#
%`1#
%b1#
%d1#
%f1#
%h1#
%j1#
%l1#
%n1#
%p1#
%r1#
%t1#
%v1#
%x1#
%z1#
%|1#
%~1#
@(#)PROGRAM:VFX  PROJECT:vfx-184.0.16
w8>F
P?(~
 ?oK$>
8.>[
4==
L,?)|
[?5c
p>1]
?VI?c+
J?opX=
c?|aB?
Y?5b
)?1]
d>wJ
L,?Q
<1|@?
==wJ
r?c+
x>dt
Un=#
AJ>s
n8Qh
|>heQ=
w8>B
6?h 
:?i/
*?)x
>heQ=
zJ=jO
!?+,@;
@=jl
q?)x
h>@k
79h 
=heQ=
d?eMr;T
b?5c
M?-$
w);9
=VID?jl
;+,@;
>c+
<|aB?
=heQ=
i?Qh
??J6<
L,?h
nj?y
w);0
n?wJ
,>VI?
nj?)'
?opX={
$??J6<
>VI?
ky?T
P=?J6<S\U>(~
?1|@?
>?J6<
3?1|@?
>VID?9
=1|@?
AJ>p
4>h 
'?)x
rX;i
=VI?
=oK$>
3F?G
)=6x
t>5c
-?VID?[
zJ=-$
\<eMr;
)=)x
==opX=
C%?heQ=
p?CT
0?oK$>
>S\U>
>S\U>
7|aB?
b?1]
W?i/
<h{O<
s?5c
>opX=
l>"p
{?dt
[*<eMr;
?|aB?Z
(7??
>heQ=
Un=F
(?VI?
Q>YO
f=h{O<
z?>F
L>N*
=|aB?
S5?dt
?heQ=
<?wJ
E?CT
vj<YO
(7?$
;eMr;
#=1|@?5c
vj<oK$>
L,?i
G?5c
+?6x
B<5b
rX;6x
?+,@;
}?+,@;
u=5b
>oK$>
t?1]
zJ=6
|?jl
zJ=h
L,?O
!>5b
l>dt
?h{O<
?w?T
>S\U>
rX;eMr;h 
@=5c
zJ=Q
=+,@;
.?heQ=
5>5c
Y?S\U>
@>1|@?Z
b?-$
>f?y
?oK$>T
B?eMr;
)d?@k
>oK$>
R?VID?|
w8>f
>VID?
<VID?
0=N*
|6=-
*>6x
-?-$
[*<+
(7?S\U>
*?wJ
;>?J6<x
"Y>E
X>)|
>?J6<
;+,@;b
R:CT
w8>heQ=
 ??J6<
Z?c+
!?$
[?heQ=-
:?1]
f="p
(>6x
>h{O<
l?5c
!>"p
`?h{O<
vj<b
>opX=
=VI?
t?YO
P>VI?
>eMr;
>1|@?
l>|aB?
(?)|
>h{O<
L,?s
>?J6<
S5?b
 H?y
>S\U>
>1|@?p
r?|aB?
=oK$>
<VID?
T>@k
f?opX=
?VID?CT
N?h{O<
=+,@;
"Y>%
X?i/
t>heQ=
L?5b
F>wJ
4=)'
<>|aB?&
>oK$>
<opX=
>1|@?
>1|@?
P?heQ=G
>S\U>=
O?N*
.?6x
z?>Q
>h{O<E
Y?Qh
?w?+,@;
"Y>=
C%?\
:1|@?
>oK$>6x
"Y>(~
VI?
(?)|
>VI?Z
=?J6<
 H?T
[*<~
>h{O<Q
;S\U>
9?i/
rX;eMr;
<opX=
>?J6<
L>+,@;
:??J6<
d>YO
=1|@?
4?|aB?
S?)'
`=jl
>opX=
>VI?O
(?+,@;
>f?Q
5>eMr;
Z?$
4=?J6<
4=x
6S\U>$
ky?Qh
:opX=
?VID?opX=
t>opX=
<VI?`
'?)|
2?eMr;
1?c+
u?h{O<
<>+,@;
`>h{O<
?YO
#=YO
>S\U>
C%?C
H?VID?5c
K':`
8.>G
z?>oK$>
>?|aB?
C%?$
!?YO
?S\U>
79+,@;
8.>jl
'>5b
;oK$>
zJ=%
y?VI?
 >YO
AJ>V
4=O
'?$
ky?|
<VID?
\>eMr;
4?5b
?h{O<B
>|aB?
'?|aB?Z
7?eMr;2
t>Qh
K':VID?
x<dt
Q?jO
z?>9
D?D07@
MbP?
fff?
?fff?fff?
L>fff?
i\)7.
blnOq
sy2-
i\)7.
blnOq
sy2-
q$?94M
94M?
VFX-SSAO
?qxs?
>333?
>fff?
=333?333?333?
fff?
>333?
fff?
fff?
>333?
?fff?333?
zDq=
_,b?_,b?_,b?
k?_,b?w
HAfff?
?fff?fff?fff?
?333333
@333?5
333?
333?
 VFX-Depth-Linear
p]?UUUUUU
8?Sx
tWxCE
'7(knN
77777777
00000000
UUUUUU
VFX-Floor-color
VFX-Floor-depth
?BxM@
?A.}?
\\CR+
?b]\BR+
!BR+
?rF\AR+
;A9)
!A '
,>I
u^@Jb
?p[M@8g
g&X=b
!!J=
fl(=7
)z =;
?pA6
7R6<<
yj?%
Mh?Z
#=;
xC%]
/A%]
|@%]
/@%]
|?5]
P?%]
/?%]
?hQ;A6
@!@F
g>h]
@>1^
?@%@!:D
?#,*
 {}=
u?|`G
#q<A
?`vo?
lI<U
nj?v
?MMf?
b?0b
~?cC[Cw
B[Bw
!A@
~?op
/[A^
~?lh
~?vl]@\U
L@e4
ywt>n
W'7>
!\!>
n=9{
?o*r?
?^Lo?
JDx<4
y;B<
5h?'
CGv}?
DCGv}?
DBGv}?
AGv}?
DAGv}?g*
@Gv}?QNZBC
@Gv}?Mc BC
@Gv}?/
D@Gv}?
@Gv}?v(
?Wv}?+
?Wv}?
?Wv}?
?hv}?
I Ae
?hv}?
_~_?yv}?
v}?oG
-?!w}?
y}?%x
w}??+
x}?T
=@)>
-AV>
SXI>
~?g|
>k+~?
>S@~?
?MKl
cCw=
K;5=
?sex?X
l? Aq
?6;j?
4f?}
?2td?
|?V4
|?^;
|?AM
+nA@
|?WF
|?:&
X?A|?
-?75|?D4
|?(`[@
.@u:
>hA|?
>-y|?
B[^>
}?m6
0>l$}?,
&>9G}?B
~?[C
=G;~?
=Qg~?
R||=eR
?SYl?
?Igd?
58D@Pz?\
C@Pz?q
B@Pz?
B@Pz?%
A@Pz?
-;A@Pz?
A@Pz?%b
@@Pz?
@@Pz?9
og@PPz?
&;@PPz?
@aPz?
@rPz?
Pz?+
?]Qz?
f?d[z?0v
lz?@
?XVz?
\z?.
?*pz?:wI@
:@s,
-@:"
z??T"@C
}_>I
{?=H
.8S>
<>^K|?
>&8}?
w}?@
j~?%Z
?!g
~?kI
?!;{?
8ho=
?G=t?2
n?Dj
?> l?
g?C9Q
f?hz
Rd?r7
Gx?f
Gx?<
t3@(Hx?
@IHx?
@kHx?^
Hx?3
Ix?k
Lx?r
?%\x?
A*q?e
G<5?DQx?
%?:[x?
cX@m
yx?\
x?K?9@G
>,ay?
>Y3z?
pz?c
tg>[
5^Z>e
M>=H{?
{?6!
=|?gC
|?4f
&~?A
=&m~?
~?F#w?~
?K:n?
?5Ad?;
u?nK
u?jP
RH+A
@#fF
u?za
Bv?{I
w?ZJv?W\
%a?a5v?c
v?%$i@9
<v?\
?J]v?
@xC:
v?eT@
>q<w?Zg
?c^'
%x?k
>lvx?
OZx>
~y?l
y??p
/3\>RHz?
A>2 {?
%\(>T
>#h|?mX
}?%]
~?Xps?
N&n=
?Swi?
Rs?h
jV?B
Rs?Z
BB%^
Ss?i
@.Ss?
AG ^
@PSs?
cyAv
IG?@
"@~Ts?
x}@
Us?y
@S@Z
\{?L
f@:w[
}s?ccT@L
N|A?%
`s2?_
s?h!)@b
@x*P
Ht?3
>`tu?E
>F}v?
>Ww?
y?m7
XVJ>
CU<>w
.>t}{?
=`=~?
m?zq"
`=0f
@k?`
,,8=W
?W]g?
e?UlL
ip?Q
ip?@
ip?u
@]jp?
R@Hkp?n^0Aj
@t|t
?Cpp?28
?Oyp?
p?{ 
p?A+d@W[q
,aU?
A@pCl
5$6?8,q?/3'@v
q?hz
q?dw
?)#r?$
qr?_
>yxs?bJ
?`ZD
t?F
du?p
5]_>
|z?J
Q|?v
|?t}?K
u?ZI
=tD~?
o?y\T
j?tF
?_%g?
?1{e?
cb? 
8m?Y
8m?`WLC
8m?n
A"9m?H
@u9m?
9m?a
@`:m?
;m?s
;m?Z
(@2=m?
>m?W
@-Bm?
?/Qm?
m?p\?@m
n?[|
?9}m
o?((
?SXi
p?*W
>)uq?
?1|4
>zru?
8v?h
w?;8
YR>shy?
>[@|?
u?>y
}?WCr?
l?->E
}X/=V
?8Ke?
r%<n
?RDb?
WICz5
6lxB;
VIB+4
oAt'
~+A7
?(Fj?a
?GVj?pP
?gCj?
aL@jk
<@#J
"@Y5
9?Idk?
?T:l?
?*ow
n?G9
?\tR
?uv2
av?I+
Sw?E
>x?f
9aR>
f11>
L|?l
x?B\
~?${l?v
~?ZJj?
|r=II
?l[h?
J='
e?p_
?B%b?j
f?q&FC
f?;!FB2
f?>{
M*@'
@EKf?
}f?M
f?d>I@
9@oF
[,@U
if?yYg?F\ @
jG?]
Hh?9
?-|i?
?[j?
?9*w
m?]1
n?=c
?FzQ
s?C7
?C86
6u>?
y?1~
y?Q/
"5->
w|?r
=$)}?
q?pa
=/P~?n
l?mTg
?vmc?
t@PA
BA7o
N5@2
@Zeb?1
E@2:
?v7c?<
&ru?K
$:?f
e?]R
ze?|+
f?bg
?;og?
?J)h?
>@jo?
?jL8
Mhr>7
9>%$z?
{?gdt?
q}?,En?
k?Q/x
\=bf
Gc?*
]?t`BL
a_\A
]?$ZcA
F\@C
@K>^?
@Mh^?
MB@HO
5_?<
&@>=
o`?\
M/E?
$?!;c?B
k?jK
?6!-
u?dv
2x?b
E>Yy?
pz?yxw?n
>]O|?
Yk?_
g~?8,i?
~?.Wg?H5,
duk=
rQ-=
?fld?-z
`"^<
a?RI
_Y?{
_Y?=:;C
1B `Y?,
A1`Y?:8;B
LA$cY?
gY?A1;A
g@zrY?
&Z?C~
?gCZ?U3v@
Z?vo>@
,0@v
[#@0
?BZ[?d 
S[~?{
[?h$
W\?~V
O?t]?
ByC?
&8?)
?[^y
j?% 
?g|o
>Zl?Q
>74q?0d
?H67
O |>
e>37w?/
 B<>
v?|(
{?8gp?
y=i:
?>xe?
L8=y
17C0
T?]+7B-
T?O=
hU?i
@V?of:@
W?h^
Z?p]Y?
Ig,?
?! _?
a?of
>]Oh?
uo?y
?w1M
0s><2v?
dx\>
Cz? $s?k
>Va{?
<}?_
`h?L8t
c? 
?->a?Z
9()
O?+X
2B6"
N}Al
O?)}
O?~{
&8}@l
P?{i
nQ?]
E@d\
^R?9
S?R&
AV?l
U?)"
y J?
*?Q1Z?
?5}^?
a?l\
? }c
`s?_B
>u"u?{/~?
gh>"
Q>(Hx??Tv?
l?%t
|?o.j?@
=Sz~?
8f?\TK
d?2r
M= y
^b?(
J?<t
hnID0
hICA
J?Gp{B
J?Qg{A
J?PE
hK?3
R@9^
?(,M?
?_AN?{
4G?|
dY?,F
?OYm
?:ZE
N~[>
az?4/o?
Pl?]
=&R~?5
O!W=<k
E6rE?
cPDGrE?ER
`PCGrE?
BXrE?
w_PB
sE?<
vE?}(
yE?|
A(}E?
`JAk
dF?$Q
`@80
?8.G?
?%xG?
G?aR-@cc
H?nR
?kfI?'i
K?;R
L?u;
N?|`O?
@R?0
i6'?
b? )
>)wg?k
Al?Gq
n?)_
t?T5y?&W!
voe>g
v?6ru?HR
]x?8
>j.{?
S}?G:g?
=R)~?wge?
a%C}
@?'(nB
@?N!nA
Ap>
@[%@?
@y<A?
<B?@
6@5z
?`WC?Y
?{gD?
?VHE?
o~?2ZG?
xCb?
&V?x
\?I
>jKe?z
>t~j?
do?@
q?F"|?it7
<>TTy?
3%>i
j=3N
RcEd
E8e:?
\D8e:?+
\CIe:?
BZe:?Q
e:?1&gB`
B4f:?
AAg:?7
i:?q
k:?3
o:?D.gA
t:?;
|:?l
U{@I
S;?+O
#@p"
>?31
?`;@?l=
?ULA?'J
? zB?
ui?!"E?~S
Q?l!H?M
o/=?
N?OW
TP?Z
>A+`?
>,gk?l?
GD>`
Zz?Q
~?;5c?
?m6b?
_?RI
_\ESX
 bC'
4?!N
4?\*9A
763@&
 @9'6?
PM@.
?|d7?
f8?!u
8?l[
>?pA
bJp?
i@?q
c}'?
'O?9
W?Aa
q?oHw?l@4
J&g>jNv?n
K>}<x?
|m?~
.?XY
.?\E
%p6A
%3AP
.??G
.??D
i/?)
iog@m
K!M@
yy$@\r0?
J1?R
W2?/
5?Bz
d=?;4
S?jKA?O
$?;pN?
tQ?P
e?*o
?-@{
>h"h?Z
>b,k?
p?+lv?
%8>c{y?
4j?*
`e?m
=-|}?
=Dj~?UOb?-]A
?W]_?{i
LkDY
h%kB
SQBY
UQAHm
-A~Q
(?/b
@g))?
s:@l>*?
GS@7
j0?s
1B|?b
LTc?
:?` 
<KD?
?`#U?
X?1C
>f.\?/
_?5$
>o)c?
f?mU~?
r?l>.
=XS}?
=sL~?]
,`?;
FEen
yA9B
"?q"A
@_)#?
zz@)
f=@wI$?7Pa@
JF*@Y
J)?lC
?5+?Ve
?aq,?
h?t%6?M
o??9
/6?&9D?
z$?4
?/PR?9
Y?>{
]?/0
Ph?]Qz?
x?\;i?d
=[$}?
ia?{JN
oAMe
o Ak,
?@cD
2@@L
A#@:
@zo ?f
?o+!?
$?c+
?g'?
PnW?
:?,}@?
W?~5
>W|[?
d{?J
>sLj?
p?9Cq?hA8
9J>K!x?
!f?d
c?jP
|?)#b?
?Mg_?
E^?A
>tD;:
+UtC~:
LtB6;
S:Be
LKtA=I
AA&R
?)]:AO
,Y@2
A@T6
-`.@
?,b ?
}#?J
%?S]
}?X;*?
rq?0
('f?
~s[?,
2?8e
cY?<
>2wa?H
y?O=
>gce?
o>aUu?
>9`{?
c`?g,Z
rSC=M
c\Ap
eyBA
?Sxx@
$@-w
"?>>
`%?y
-(?V
K_? _.?k
uwU?
Q9?v
=?c_
y\0?
?W^N?z6
z}?n
OW?p
y?lC
_?Z)x?
c?@1v?*
8t?+
o?FDA
*u>~
U>;5w?
g7>uXy?^
e?Zb
> ${?
_?F&`
H=J{
^?!w
p]?()
=_wC%
|^wB!
*BBC
n?:
x?9{#?h
E?$c5?rS
GG?(
L|?
z?/j
Jy?D
>dvb?
s?KXk
gj??6q?
8q?K[l?
2V{>w.t?
{d?(
z?wKb?
^?>v
M=%t
?Y) E
?7I~C
xCM1
@~B2
wB{2
?7H~A
CAeR
b@'P
J@sf
i8E@
5%@)Z
p?="?Eh
3nR?*
-6?`
:?nR}?GU
D?%yz?p_
BN?4
S?(*w?fO
>UPe?K
>;Vi?
Sv?;pf?
>8H|?
^?Xtk
>tBs@
W@81
Hj1@
?o~?
ms?y
p$L?DO.?j
Qz?z
Pu?b
q?ZI
>QNh?
8l?_
m?1&M
xze>
2D>%Xx?
|{W=ge
hUwCj
eBEF
ZswB*
PcwA
a5A%
isCA
t\@'
>yW7@
"1@V
$D @D
wk?6r
#s?N
)O?*:r?
j?wI<
|r?q
g?Kw'
i>;qu?
Re?>
)>A-z?rm`?
?^f\?d>
z[?8
O9()
aYDq
#RvD
>Z7YC
aUw@B'
>.:B@
-@3k
D@0g
j0@s
}?:A
l#Z?<
C=Q?
e'?m
#H?hw,?
p?Ec
8.??U
KY6?
T5-?
k<?F
W?\Xo?_^
n?}=
j?HQk?BxT
hn?,Fi?
g?NE*
P}?p
\?i7z
Z?0e
TtDT
v]tC
MtB!
%@/@
?kz?5
?(~?
r?|c
?vnn?
RS?}
$?"6l?
q=J?@M)?B>l?
{8?cF4?
Hm?D
m?x^
?R_V?_|m?
i?TWj?
^q?@Pf?,F-
c?|E
bw?vka?&W
{?5@]?\
[?O?(
d=HQ
?4/[?
Rq?{O
z?B|?
#k?Y5
q?s*
[i?0d
g?d!
?Ich? D
^?LT
Fg?`!
iL?6;&?
Cg?@
DNC?
1?{gh?
1?$|7?S
x(?5c=?!
?bfC?
j?B$
/k?M
?;TO?p[k?
xk?6
z_?m
k?+m
>qVd?
 j?>
PS>(
y?qs^?-
>R}{?
`~?c
Z?AD*
4Cro
GlAPT
4A[B
>S>O@l
Yjp@
>r4"@2
>@S@
>h=l?
e?h$
B#|?YL
gr?6<
h?gb
V?;q
]c?UN
T:<?1(/?j
Gt3?
e?pB
K;?K
`A?%
tc?X
>\!h?-
hb?t
>2V{?=
.Z?3O.
u*kD}x
kC%y
%AR@
DN)@p?
z?,
>o-c?
]?I,
U4j?/
[?('
>vO?
M ?Ii^?
G?tz&?
t_?z
`?]5
c?AJ
E?/5f?R
Ig?g
?k'R?i
{]?k-h?
Y~>Xps?
[Y>$
\?#1
>b,{?W
=kF~?
mY?xE0
o=%>
?)$Y?
TX?Ug59
fD5y
fCcz
v?j.
#]?S
>2!V?-
U?. 
B$k?
Ib?@
4X?+
?H?
??_\*?
v6?P
f7?3
V?||f?
>k?]
>O[o?Fc?
S9>m
{?l]Z?
Psr=
0bD[
Q5bCE
>A`>
oH5@
qW#@-
O?7Q
?&rQ?o
<S?g
B!R?
?`#U?
[?p%
_?Af
B?t\a?
2I? 
c?[C
[?*7e?
PS;>
[?Sw
z?d\Y?1
|?2>X?: 
)~?o
\D76
\C"7
N~.A
M@hu
^@lZ
~;1@<
>34z?
d?%\
vH?k
?tzJ?
4/S?
U?ys
lA?k*_?Q2
H?x
T?,cc?
d?Qkz
^r?F
uw=>}zx?
YW?#
<x=0,
U?M.F9{i
VA9c
y#@r
Tqv@
4Y@:x
@?[#
{?XW
A?IG
?~9G?$
I?zQ
S?PQ
+kK?
?vmO?s
#?_\R?
W?nl
Z?ca
uM?v
`?Xq
c_?[
d?8Nb?(Ig
ta?p]Q
>D0n?
c>:yu?
[?9G
|?_{V?>
E28j>.
.PD28j>
apPC
:j>(
B.=j>
Ej>9
OlPAc
q@[]
y;@u
r?J_
>?UY?
W8?*T
>Zg8?
>Eg9?
;?0G
g|k?
c?Jb
!B?Q
\!\?4
IcT?
1?KW0?n
>?hyZ?
Ga?w
#d?^+a?
k`?v
e>NFu?
/x?^
vU?*
|=h#
T?w,
nIDK U>
pICd"U>
kIBs.U>
A2uW>er[@
[>%\
G`>l
 L@;9c>
?_\z>
o?t~
3?/k
P1?:
3?,+
5?29
Dc?q8
@?s-
-CD?
+O?Qi
.?=IR?
rQ)?cD6?
U?x%
*?5
?EGR?
9^?/
T^?Z
_?R(k
Xm?8
>|}q?%
u?B{Y?4
x?]5W?
q|?{gT?
#|Dg&
Am:B>
@cGC>
jD>[#'@
7_@F`L>$
@>%W>
1k?1
C?6t
>*o'?
'?p}
>+Q*?T
d,?Z
2?[&
H5?e
5`T?
?of@?
?)<D?
nH?D
><?t`%?
9E3?
O?we
O=*?M
l<? 
Z?ip
>Qjc?hu^?Uik
]?P9V
 >{iz?
T?X7
g|?tbS?
R?y]
EG8->
=->Q
:B|G->
]->~O
:AI+.>
2@tb
1>8J
@"U4>
Su@l
2WV@
>9>b
Dm(@
@>Ig
?bhU>
G?qq
? cn>h
>h[)?:
M1o?}<
S?yv
<?<2
@L? 
*?_~3?
1\!?
;;?O
S?v3
cW?(H\?>
w]?b
c?W@]?
>*8h?
AE>K
&">WCz?
>Oy@@
j@36$>|
K>3Q,?
?Dku>x
I*{?2W
cat?q
>"U$?W
+?*o
4?oI
R?kH?tA9?
uYD?H
?I+B?
"?7RF?
8*?V
T?J@
?9)P?nRY?
[?-@k
>v6|?
eP?Z
@D% 
3z\A
Y*@%
@4C@
!u?`
|!>O
J?(c
:?.q
 Z> 
?-!
1l?=G
~#?1\
e?4f
6#_?
$1?.
?(|:?
?d:H?
?$aO?
Z?h\
X?X:?
j>k~t?a
3E>J
>^0|?
}?_DO?
O?u"
?:>N?
*-D&
b^PA,
=x%8@[_
t@DN
>o/q?
>kcX?Pn
>EID?vq
?nn,>
YY>m
?1h>
Vx>kD
JEW?b
-?,~
P?*p
2?kJ
7?Kr
?6\<?
);?K
H63?-])?.UE?
U"?{k8?
P?<J
X?dxl
>wig?TUX?
p?YnU?
aE>
O?>>
lN?G
L?0b
LIBB
=>iIA`
CA,
|,?p"
\>B%
Zy?w
?. 
-\?1#
?^g/?F
`H?j
lA?y
C?B`
M?T6T?
ra?kdW?k
.T?4
'P?FA
>S>|?u"M?
L?B@>
4L?H
FK?I
+Ce6
l,B\8
=Fu,Az5
AOy
{@q9
]4:@i
2L?u
?Nd&>
mb>2
?&nu>
Hkp?
>io?/
o`?1
]Z?ZF
HkT?
TVG?
!Y@?%v
mE?5'
?;9G?
(p?a
F>h]w?@
5|?:\K?
*gA
F]G@
E?Cs
?y=(>Re
?f3G>D
}?Tt
%h?i
bL?!
[?1T?+
S?BxD
@kn>
BO?@
iy=y;
Bmuy=)
@Y@x_u
TAFx{=
~=y;
>RF|
->lv
x?I,
j?`>
`?Di
[?XU
N)W?
?j4!?/
?~T'?
-?Yl
=?8j
RH6?N
8?>]
$G&?j
wA?9
,I?&
[L?;
[?-&R?
>]Ra?
>_@k?*VQ?
hs?J
qG>V
H?tB
G?K;
B['^
Ao.^
@b-^
AR(K=
K=ur.@
~?YR^
S?Tr^
r'@5
>Lkc
>LRi
]}?W
^>_$
]x?C
s?5}
o?@j
2^?B%
I?2Y
*?x(
W0?[
e??'
^G?$
?6!I?
{V?s
(b?^
)p?k(M?L
s?!VK?
}?cAE?J
Q*+BH
9!=~
5<wA
n+Amp"=
/$=^
Z&=S
F~y@
?O@w
>whH
>gDI
>\WL
?O#m=
>>\R
>c'\
{?Z)D>
v?LmY>
zpo?
g?2u
`? `
[?EH
":?t
]o+?
v8?4
u=?rp
I?3QH?z
b?7qN?
L?3P9
B>rjw?u?G?
+4 >J
%D?wh
mB?6[
QA?:
o@VJ/
@0,/
?n1/
?I=D
>]P?
>XtK
Pq?XrU>V
g?rR
c?}x
?{K
O?*6
bK?O<
, ?{
C??H
L8?~
,?p|
1?LU"?
/1?-
B?$BC?
-J?g}F?
!Q?|
Tm?k
gq?~
>Vfz?
=Ed|?
B?,G
0@W'
2?RG
w>A(
?S[*=
-c>n
=&Se>
>3Qd
;p~?
iWy?
;h?6
e?y 
M?5}
\;I?h
vo=?
\6?
*?vl4?
N ?EJ3?g
?RC;?
=?GW
gJ?taD?
>DoQ?
c?K>J?
m?<OH?
q?p{F?0
\>h[u?
9>GTx?
?.v;?
X}<`
X}<6t
3tA{2
<pB]?
<|ds>
&=`t9>
<>_%
I>W`8
<fx?
Xt?YN
Y?((
]oS?a
E?!#
54?U4
q-?SB
<^?%
H?XSY
tY>r
u?9bA?
75>n
z?Mj<?
};?8.c
=1_~?
[Z=Ee
r"<*
I$DB
#<@1
8G? $
@>"&<
f:<b1
!F<bIY>82
?,go<
.=nm!>
(>HR"
<X>K
=zpg>
|Eg?
=Umw>k
b?SA%>7m
Q>IM
M.2?
P,?#
"?-!+?.r
4?V,
[;?,a9?=C
XJ?f2@?
EQ?1
FE?}
h?h=D?L
B?Bv.
su?9
<?vp
1>Pqx?g
z?`x9?
|?tF8?
7?wf
5?9&
tR:D
6)<G
I<RF
E}?*
k#=y
mD=y
+>dw1
d?LP
Q1b?
{;>G
P4W?
-@W?
lCU?
<jT?d
<?d\
)!0?
tD*?
6?'1
=?=I
??n2
>QfW?.
A?dx\
>D5m?
Z=?G
(S>k
|?}v4?
=b1~?}
 1?E
_#'C)
AE/#;
8R>u
%L;s
GI<R
?rk?
&U? 
 :>%>G
PnS?6Y
$T?I
v7S?
Q?29U>.
S?g{
K?0e
6wH?
j.?=
 ? &
&?S!
2?Tq/?
:?14?
B?:>6?
?^JI?
=?sK
Rb?*
(8?MM"
S6?q
3>/jw?
74? 
2?p[
+?=C
rSyC
#:g&,@
@@QY:\
hxw?
8$=N
kGm?%
_=~p~
_\^?
jhS?
N?F_
. =%Z
$^J?r
C=gG
1[J?`:
(eJ?
^*J?
=By?>
>UMP>
*>1xx>j
!L?e
zpK?
/A?5
B/?\Y
2'?H
1?TU
?{0A?6;2?
.9?N
x8?4
f[?>
>7?N
mf?i
>_)k?Z
}>p_o?
zX>W#s?F
7>[av?
,?em
=PS{?
;.VT
t?zl
<O<'
/4o?
;RcB=
T=nl
1?5_
+k3?
p=xC
1??S
8?d[
MI:?
F<?z
,>Ovc>7
KY>?
Z>|B
@?Ab
e??.
98?G
,4?Q
0?EG
"?Id
*?o-
?(G9?
?/N@?
|_?*
.?~tZ
ji?z
1*?'
Z>V~q?.u0?
u?->)?
+|?iR"?F?
Pr@_\z?
?BxM@m
>@,dv?
@(Gq?
?=ae?
?8hC?
?%#3?
?A.}?
r?9B
j?}[
Vh?L
d?fk
h\AX
Pr@d[z?
?5|M@
1@'1t?
?D0R?
?tM?
?w0>?
?#/3?
?5Dy?Q
r?9B
d?;m
?6}\B
k\Ai
@/Pn?
?5~M?
?u"}?p
Cy?T
?3Qh?:"
i\A&
@D2|?
Pr@zRz?
?cDb?
?YnM?
??:y?7
yj?B
?\}\B
@cc~?
@Xs|?
?XSM?
?! 3?
?o/y?
o?GX
?Xuj?
?gEh?|{
If?'
@p&~?
Tr@\>z?
?]NM?
?seH?
?8j-?
u?kG
>h?E
?ud?
?-h\A~
@fN{?
@t~z?
@<ln?
?K>b?
?u[V?
?fg-?
|?I.
?}]r?
vo? 
?M0h?
6f?&
?/md?
@Xuz?
?<k1@
@3lp?
@oEn?
?>"b?
?Qg^?
y?Gs
?!Wj?d
?Z+f?[{
?>Zd?
?'hr@
?<g1@
@/Rp?
?*Re?
?"S^?
?>$H?
?vl8?
xu?M
Hr?3
?[`o?-|
Lj?3
?"m1@Z
?Y3Z?
?-Ar?
?9Bj?
?Fe\A
j1@D
@JDp?
@AGk?
@{kh?
?$%e?
?|D8?
x?Y
d?ys
?Kg\A
@%\|?
>@l>v?
@L8p?
?V~a?
cu?U3
?4,r?!
?}#j?
g?t~
?Lf\A
@-y|?
?>%_@
M@~ow?
?>]a?
?x_=?
?_au?G
?p}l?
j?QN
?S%b?
f\AL
@!V{?
+_@9Dx?
M@cGw?
? }%@
@y"p?
?{hG?
?h^B?
?i8=?
?du'?
a?"r
@nR}?
`r@s
?o/_@
`1@E.t?
?c{%@
?&4Y?
?%g\A
?kf1@+
@1_j?
@HQg?
?<k'?
r?DR
o?(}
ue?b
?,~c?
?he\AI
@lZ}?
@sG{?
_@R+x?
>@p]u?
n1@<
?}y%@O
@B@j?
?P92?
?[`'?
|?>Y
?ZGu?
?zSe?S
?iUc?
ra?RI
?3e\A
@<L{?
^@S>x?
?!#N@
?1x%@y
?(d7?
?z9?
?rMu?B
n?9&
i?_y
Rg?U
?Dh\A
@UK~?
?6u%@'jq?
?&o?
?Hh\A
@=E~?
@0K{?
N@GZv?
?2r1@0
?A+<?
?CV'?
y?$b
Fu?Ho
ii?0
?:i\A
@S<~?
@%=|?
@ZE{?
?@uYt?
?>z1@
?>y%@
@HNf?
?{2_?
?]m}?
?t&y?
?1Eu?
?mVi?y
`?#,
~\B7
h\A5
@hB{?
~%@C
@Efn?
?/1J?
?+Ny?
?kfu?bL
n?,D
?w1i?
f?GX
?}v\C
@j/~?
@{2{?
%@r3p?
?~Qb?
}?hx
?Miy?
n?hw
i?Ym
?~~\C
?]~\B
?9}^@#Ix?
>@>$t?
@ywh?
@Ife?
?dvV?
?N*N?
?e6@?
?Sw1?
1~?K
ju?~r
?<hf?
?Ti\A
@S!~?
M@;Uv?
%@~so?
?Y6;?
?c_6?
?Nc'?
y?1$
n?p%
h?cd
?l>f?
?5]_?
?Kh\A
@wj~?
@[^}?
?Sv^@
v1@w
z?_$
?~pn?`
?ock?
h\A!
?is^@`
?Na1@
@YPl?
?cdY?
?E.D?
?sI1?
Mz?Y
u?O?
?MLk?
?YQc?(
^?r3
|\BL
"At^
@5{|?
q@"9y?
s^@0
?ur%@
@XWi?
?QO??
?Tp,?
?K>n?
?!>h?
e?)#
?)B^?
?@~\C
?F~\B;
"AB?
@}[|?
@tb{?
?+k^@
~M@D
91@} q?
?R`%@
?x`P?
?,.n?[y
h?Ig
?UM`?
?${\B
h\A+
?Pr^@.Sw?
}M@0
?pw>@'ls?
?nM%@
@I-h?
@nme?
@/ob?
?&6_?
?+kG?
?)z,?
Ov?-
n?%]
?+m]?
@R~~?
@;m}?
?Sw^@j
>@S s?
!1@;
?G9%@3
?H2[?
?@1:?
? &1?
?|{#?
Rv?/
d?is
?jg\A
q@1]x?
?e5%@|
?b0S?
?gG>?
?;71?
?+5{?^
v?#2
m?LT
?huj?B
jd?w
|\B?
i\A>
!"A,
@.:}?
@1{y?
^@mpv?
?}x>@
?d"%@
@?9j?
?$^V?
?4L1?
?Bx(?
Ha?8f
;A33
@LO|?
?&8Y?
?B!R?
?HRN?
?;QF?
?1`1?
{?Qk
`?O 
?_z[?
?&p\AN
@C7{?
@p&z?
r@XYw?
@% f?
?t{5?
?px1?
?dsm?
?XYc?>
?Sx`?
?s~\B3
%"Ai
@#g}?
?#2r@
@k'b?
?B]T?
?%<!?
?1\m?
?Bwi?P
/]?g}
?{JZ?
?("A
A|e~?
@xD}?
@=(x?
Lr@%
%@@jk?
?8HP?
~\B7
+"As
AbL~?
@Hp{?
M@$Gr?
!1@G
?BBL?
?`".?
?]Q*?
Oe?%Y
^?+j
?6H\C
@;9w?
>@|`o?
%@@1j?
?J|2?
?Xo|?
v?u
?Hkh?s
?2wa?fJ
?AJX?_
0"AU
@oe}?
?_D_@
$@}ui?
?`>A?
?.=:?
?%>/?
? }+?
?nn ?
q?~6
l?5y
?[x\C
?X:"A
@Gt{?
?.u_@
?[A1@
l?\8
?2p\C
?3 <A
@82w?
?AGN@Dio?
?P:1@
}|?)
v?D5
.g?9|
?5Fc?
2Y?X
?2}\B
?)%<A
?3["A
3%@Y
@T8^?
?JE'?
f?`u
]X?c{
?>0<A.s~?
AY0}?
@%X|?
@tyw?
M%@.
@xFc?
@Ae`?
@BzZ?
?W"T?
?2!>?
?=H;?
?h#/?
?]7%?
x|? ]
Bf?D
b?e7
H^?~
D<Aj/~?
r"AV
@(cx?
?p>?@
?'l%@
@&Vb?
??sJ?
?NDG?
?J{#?
}|?73
?Iiv?
?Crj?/R?
"ANa}?
@N+y?
?J`?@
1@uvf?
@2Xa?
?<j(?
?8/v?S
d??n
z`?Z-
Q?`X
h<AT
Ad>|?
#t@/
N@b-j?
1@AIe?
@%][?
?:>V?
?MLK?
?^fH?
u?ip
?Umo?
qT?SX
?i~\B
]A_&~?
@REy?
`@.8k?
?&4&@
@k`_?
?l|N?
?*tF?
?x(>?
?q9&?
?S?#?
{?k(
?:WdE
?3s[C
?|0]A
AxB{?
@yx?
?t}t@l!l?
?uUO@
@o,\?
?B!J?
?'3b?$
h\BJ
`@$Eh?
}O@;
?^i@@
@KuY?
?`sF?
?oK<?
?;n4?
?k2?
?WB{?
?x%m?
?uXa?S
OX?|
L?i5
.\C~
?fV\B
?Ac]Ac`}?
@:Wx?
O@Wwd?
?G!@
?t)R?
?<KP?
?8eN?
?o~C?
?NC4?
{?&r%?
9`?R~
g[?a
?v3O?
|\BL
?Wj#Aw
@K9w?
tA@'
~4@h
@!@Z?
?2uC?
?rN<?
?H27?
?I0-?
?t(s?A
k?^c#?
M?]5
I?Ul
?hG)E
A7n}?
]A@i|?
?hU=A
@W_q?
?urQ@
?<g??
?9}5?
?TSr?
?]kc?ob$?
O?cD
=Aq=z?
@IHt?
@kdo?
@ Dj?
?Iev@
C@,d^?
?[y!@!
?Yn9?
?40R?;
I?l@
?4~^B
?f0"B
Ak+~?
?aP$A/
@erj?
E@W_]?
-@Wx[?
s#@2
@?6Y?
?%?V?
?SXU?
?O@O?
?]jH?
?9cD?
?1x`?k
DP?M
?r."BS
A}\{?
@-#m?
?eU;@k
?P8W?
?${D?
?[@@?
?(av?:u9?
]X?[
?|FN?
E?U4&?
?|CA?
\B$a
?]OY@*
?Lm3@
@HRZ?
?lAW?
?aPV?
?kGI?
?0fC?
}?2XA?
t?X:??
?zlG?
A&5|?
AhAx?
?H1`A&
?]}?A
?qV%A
@Wzi?
@HPd?
@UN_?
@u[^?
?]jB@9
?BB\?
?@j[?
?=eQ?
r?LqE?
i?x|C?
S?,e=?
N?EJ;?
H?l$9?
?;nD?
?-z;?
?&|!B
A5`x?
?qN%A
A=bh?
?!\r@s
?-]T@
rG@{
;@7R^?
?-@1@
?V~]?
?J%\?
dJ?~9C?
E?XWA?
Au:x?
?Rf%A
@^I^?
i@]P_?
?\qa?
?a3\?
rR?C
?R'L?f-M?
=?TtH?
u8?>
3?V-E?
?gtdB
O@AZ
@6V^?
@R}_?
r@t)b?
?_@V@
R)@U
@)ye?
@;me?
?B'd?
=?%YS?
"/?yxO?
G^Cc
AKYf?
KdAZc`?
,AF}^?
@`ta?
@sHf?
1o@r
F@y=h?
@M/i?
@EHi?
@zSi?
@@Qi?
?cAi?
?l$i?
?P7h?
?X f?
?w.|?
?0.q?C
?r1Z?T
R?F\`?
?(|J?
63?r3\?
?OgyCi
@l&g?
?T9P@
9@I,m?
@xzm?
?4gm?
?P:m?
?5*l?
?H5x?7mj?
?y"`?5
V?CXi?
?G!M?
>?t#h?
`2?JEg?
 "?~
?+l1B.
sC0*m?
?\:iA
A0.q?
?]F+ADPq?
AUgq?
?8fs@_
?Ii'@
av?'
N?p|q?
D?Jyq?
?]66?
?zS1?Doq?
?p}$?
?Adq?
?c`q?
lF~?33s?
@----
ARGB
AfGR
333333
?333333
>$9Y>{
.?)\
H@,*
ThrottledInvocation
Parameter
TimeThrottledInvocation
MTLColorWriteMask
MTLPrimitiveTopologyClass
RGTextureReferenceDescriptor
CVDisplayLink
NCVDisplayLinkRef
MTLVertexFormat
OSLogType
Nos_log_type_t
CFRunLoopSource
NCFRunLoopSourceRef
CFRunLoop
NCFRunLoopRef
_opaque_pthread_t
simd_float4x4
MTLDepthClipMode
MTLTriangleFillMode
MTLIndexType
MTLPrimitiveType
EventType
NNSEventType
RGBuilder
RGContext
vfx_counters
_opaque_pthread_mutex_t
CFXWorld
NCFXWorldRef
holographic_display_calibration
IOSurfaceRef
CMSampleBuffer
NCMSampleBufferRef
CVMetalTextureCache
NCVMetalTextureCacheRef
CMTime
CGSize
MTLLoadAction
vfx_memory_entry_t
simd_quatf
Variant
MTLTextureSwizzleChannels
MTLHazardTrackingMode
MTLCPUCacheMode
MTLTextureUsage
MTLStorageMode
MTLResourceOptions
MTLTextureType
MTLClearColor
MTLDataType
external_entity_constants
external_scene_buffers
external_scene_constants
global_constants
VFXTriggerType
ForceFieldCullMode
ForceFieldShape
ForceFieldScope
ForceFieldType
MTLPixelFormat
__vfx_sampler3d
__vfx_sampler2d
MTLCompareFunction
MTLTextureSwizzle
MTLWinding
MTLCullMode
VFXQuiltSettings
VFXCameraToneMappingMode
VFXCameraLensBlurFilterQuality
VFXCameraFillMode
VFXCameraProjectionDirection
VFXForceFieldType
Metal
RGResource
RGPass
RGExecutionPhase
CGColor
NCGColorRef
CGRect
VFXLightProbeType
VFXColorMask
VFXShadingModel
holographic_quilt_settings
NSKeyValueChangeKey
particle_primitive_material_constants
particle_quad_material_constants
particle_set_size_uniforms
Option
NMTKTextureLoaderOption
particle_orientation_over_velocity_uniforms
particle_set_color_uniforms
pbr_material_constants
URLResourceKey
NNSURLResourceKey
pointcache_spawner_uniforms
emitter_pointcache_uniforms
particle_wrap_around_camera_perspective_uniforms
particle_wrap_around_camera_orthographic_uniforms
LoadingOption
NSCNSceneSourceLoadingOption
particle_set_angular_velocity_uniforms
particle_set_velocity_uniforms
particle_plane_collider_uniforms
particle_sphere_collider_uniforms
particle_aabb_collider_uniforms
particle_obb_collider_uniforms
particle_cylinder_collider_uniforms
particle_sdf_collider_uniforms
particle_drag_uniforms
VFXWorldLoaderOption
VFXFilterMode
VFXWrapMode
CGColorSpace
NCGColorSpaceRef
particle_set_pivot_uniforms
VFXForceFieldCullMode
VFXForceFieldScope
VFXForceFieldShape
VFXParametricModelType
VFXLightType
particle_integrate_uniforms
particle_force_uniforms
particle_set_life_uniforms
particle_textureframe_evolution_uniforms
VFXMeshSourceSemantic
VFXMeshPrimitiveType
particle_set_angle_uniforms
particle_set_angle_velocity_uniforms
vfx_vertex_attribute
particle_noise_uniforms
particle_set_texture_frame_uniforms
emitter_shape_uniforms
particle_color_over_life_uniforms
view_constants
MTLRenderStages
indirect_draw_arguments_uniforms
indirect_draw_mesh_arguments_uniforms
particle_attach_uniforms
simd_double3x3
simd_double4x4
pbr_lighting_parameters
__C_Synthesized
MTLLibraryError
particle_set_float3_generic_uniforms
particle_set_orientation_uniforms
particle_set_mass_uniforms
emitter_killshape_uniforms
MTLBlendOperation
MTLBlendFactor
particle_size_over_life_uniforms
MTLViewport
particle_force_field_uniforms
VFXHitTestOption
frame_constants
__vfx_sampler1d
simd_float2x2
simd_float2x3
simd_float2x4
simd_float3x2
simd_float3x3
simd_float3x4
simd_float4x2
simd_float4x3
CGImage
NCGImageRef
MTLTessellationFactorStepFunction
MTLTessellationControlPointIndexType
MTLTessellationPartitionMode
__darwin_pthread_handler_rec
TextureDescriptor
NRGTextureDescriptor
os_unfair_recursive_lock_s
CVBuffer
NCVBufferRef
CMTimeFlags
vfx_frustum
ForceFieldSettings
ShaderStatistics
os_unfair_lock_s
REVFXClippingIndexSlice
CoreGraphics
SceneKit
Foundation
MetalKit
VFXRenderGraph
particle_ribbon_material_constants
particle_line_material_constants
particle_box_material_constants
particle_point_material_constants
particle_decal_material_constants
Code
NMTLLibraryError
RGPassAndOutputs
CGPoint
PBR1
PBR4
vfx_scale_bias
vfx_float_range
composition_t
argument_buffer_index
MTLSize
MTLStencilOperation
MTLBindingType
MTLTextureCompressionType
vfx_plane
EventContextProtocol
Parameter
EventGuard
?333?
VFXSceneLightType
VFXSceneLightParameters
UTF8Initializable
RotateActionSystem
SineMoveSystem
SineYWaveSystem
TypedArraySnippet
CodingKeys
UnsafeFixedBitSet
GPUHelper
Diff
VFXObjectScriptsDiff
GraphComponent
TypeRegistry
TypeInfo
Deallocable
ProjectorSystem
ProjectorParameters
CodingKeys
Position
CodingKeys
Normal
BindingImpl
VFXBindingType
VFXMemorySerialization
VFXBindingSemantic
NSObject
ScopeLevelProtocol
ScopeLevel
ScopeLevelProvider
MappingRewriter
ComponentsDataChunk
PackedRewriter
AttributeArray
VFXAttribute
AnimationComputeLocalTimeSystem
BasicAnimationSystem
KeyframeAnimationSystem
ContextDescriptorType
ContextDescriptorProtocol
_ContextDescriptorProtocol
_ClassContextDescriptor
_StructContextDescriptor
ContextDescriptor
WeakReference
Library
FunctionSet
CodingKeys
ff&?ff&?ff&?
BindingPropertyDescription
ComponentMeta
DynamicComponentMeta
ComponentMetaCamera
ComponentMetaTexture
ComponentMetaParticleSpawn
ComponentMetaParticleInit
ComponentMetaParticleUpdate
ComponentMetaParticleCollider
ComponentMetaParticleRender
EnumMeta
BindingInfo
KernelReference
WeakReference
TexturePlaceholder
TextureCGImage
TextureClient
CodingKeys
QuaternionFCoder
AssetManagerInstance
CPUScriptRunnerSystem
GraphScriptRunner
GPUScriptRunner
TriggerParameterCallable
TriggerEvent
TriggerScriptRunnerSystem
IncommingTickedEventsComponent
KeyboardParams
TriggerParam
MouseParams
TriggerOSEvent
TickedEventsComponent
TriggerListComponent
TickedEvent
CodeSnippet
SerializationInfo
CodingKeys
AuthoringSubGraphNode
SubGraphNode
SubGraphEndpointNode
SubGraphEnterNode
SubGraphReturnNode
CodingKeys
DataValue
ShaderCache
FunctionWrapper
SpecializedFunction
ShaderCompilationTrigger
Stats
PipelineStatistics
CacheEntry
ComputePipeline
RenderPipeline
Status
Library
ShaderCacheWeakReference
ShaderError
ForceFieldSystem
CPUSystem
GPUSystem
ForceFieldRuntime
ForceField
ParticleForceField
CodingKeys
ForceField_LEGACY
FallOff
Direction
Kind
Orientation
CodingKeys
System
ParticleIntegrateOrientation
ScriptCodeGen
MetalScriptCodeGen
CScriptCodeGen
SwiftScriptCodeGen
FunctionKind
ParticleSphereRenderer
ShaderLibrary
System
ParticleFloatInit
CodingKeys
VFXRemotePreviewEndpoint
EffectsRegistry
ScriptKeyPathProvider
ScriptKeyPathReference
ScriptKeyPath
ScriptKeyPathMigration
RenderPassFormat
EntitySnapshot
System
ParticlePositionOverTexture
CodingKeys
ParticleFluidSolver2DEmitterSystem
ParticleFluidSolver2DSolverData
ParticleFluidSolver2DSolverSystem
ParticleFluidSolver2DSolver
ParticleFluidSolver2DEmitter
ParticleGlobalFluidSolver2DSolver
ParticleGlobalFluidSolver2DEmitter
ParticleAffectedByGlobalFluidSolver2DEmitter
CodingKeys
ParticleAffectedByGlobalFluidSolver2DSolver
Description
Property
VFXSaver
Layout
System
ParticleSizeOverTexture
CodingKeys
RenderOutput
CAMetalLayerRenderOutput
MTLTextureRenderOutput
MockRenderOutput
Renderer
RendererPostUpdateSystem
StripDesc
CurrentRenderContext
Options
UnscheduledCommandBuffer
StereoMode
MetalDeviceFeatures
SerializationBaseTypeRegitry
SerializationError
MetadataType
NameAndType
Struct
Metadata
Class
_Struct
_Metadata
_Class
System
ParticleGenerateGrid
VideoCaptureSession
VideoCaptureSystem
IOSurfaceWrapper
MovieSystem
AudioPlayer
AudioSystem
AudioAnalyzer
AudioPlayerComponent
AudioController
AudioFileAsset
MovieRuntime
MovieFileAsset
VideoCaptureRuntime
VideoCapture
CodingKeys
AudioSpectrum
CALayerFileAsset
OrientationMode
AudioMeter
CustomCodeSnippet
VariableSnippet
VariableReferenceSnippet
CodingKeys
_GraphProtocol
_Node _DeletedNode
DeletedNode
_PlaceholderNode
TraversalTag
MappingMode
GraphCursor
InputFilter
TraversalOrder
StaticSwitchSnippet
CodingKeys
LegacyParticleRenderSystem
LegacyParticleEmitterSystem
Authoring
SubEntity
ParticleAffectedByGlobalForce
ParticleLegacyRenderer
ParticleGlobalForce
CodingKeys
System
GPUSystem
ParticleSizeOverLife
CodingKeys
Entity
EntityInstance
Allocator
FrameAllocator
HeapAllocator
StackAllocator
ScriptCodeGenNode
GraphCodeGen
CFGNode
CFGNoop
CFGProcedure
CFGMultiProcedure
CFGBranch
CodeGenAtom
FormattingOptions
Language
CodeGenParameter
Node
CodableNode
Typing
Port
Signature
ParticleVoxelRenderer
CodingKeys
QueryCursorProtocol
BufferSource
QueryCursor
ChunkQueryCursor
ParticleAOSphereRenderer
CodingKeys
ParticleGaussianRenderer
CodingKeys
FunctionDescriptor
XcodeInfo
XcodeCommandBuilder
SkyboxSystem
Skybox
CodingKeys
ImageResizingMode
CenterCodingKeys
StretchCodingKeys
SizeToFillCodingKeys
SizeToFitCodingKeys
GraphDiagnostics
GraphTypeResolver
GraphTypeInference
GraphError
Kind
System
OrientationConstraint
Mode
CodingKeys
PostProcessSystem
CPUSystem
GPUSystem
ParticleKillable
KillShape
Shape
CodingKeys
Deallocator
BufferAllocator
QueryResultN
ChunkResult
QueryResult
AABB
CodingKeys
ColorU8
AngleF
Torus
Cylinder
Sphere
DefaultValueProvider
OptionalProtocolDetector
SourceInfoProvider
PropertyDescription
BaseValueAccessors
EntityRemapper
ValueAccessors
EntityGetSetAny
EntityGetSet
EntityValueAccessors
Flags
Semantic
InvalidKeyPathStruct
WakeUpEvent
GraphAuthoringSystem
MainGraphScriptGroup
GraphScriptGroup
GraphEntityComponentPropertyReferences
GraphDebuggingComponent
CodingKeys
Mode
CodeGenerationInitialized
CodeGenerationComponent
ScriptArg
ScriptInfo
EvaluationMode
GraphScriptingConfig
EntityComponentPropertyLite
Reference
ExportedDirectPropertyAssignment
DirectPropertyAssignment
DebugValuesKey
@0@?
HolographicDisplayKind
HolographicDisplay
GenericLookingGlassDisplay
RegularDisplay
ChangeKind
GraphicsNode
EvaluateCurveNode
EvaluateColorRampNode
SetColorNode
RGBAToHSBANode
RGBToHSBNode
HSBAToRGBANode
HSBToRGBNode
sRGBAToLinearNode
sRGBToLinearNode
LinearTosRGBANode
LinearTosRGBNode
AlphaPremultipliedNode
SamplerNode
SampleNode
PixelFormatDepth
VFXScene
LoadOptions
ScriptFunction
DebugUIOptions
Float2x2Coder
Float2x3Coder
Float2x4Coder
Float3x2Coder
Float3x3Coder
Float3x4Coder
Float4x2Coder
Float4x3Coder
Float4x4Coder
ProjectionDirection
MatrixCodingKeys_pre2005
ParticleStoredDataSet
ParticleStoredData
ParticlePlaneCollider
ParticleQuadRenderer
Shape
FieldRecord
_FieldRecord
System
GPUSystem
ParticleMassInit
CodingKeys
RGGraphTranslator
Reference
LoadResourceInfo
GraphTranslateResult
MetalScriptData
InputEvent
InputClearSystem
Modifiers
Phase
State
EventType
InputStream
FunctionConstant
CodingKeys
ParticleComponentSpawner
ParticleContinousSpawnSystem
ParticleSpawnOverDistanceSystem
ParticleVariableSpawnSystem
ParticleBurstSpawnSystem
ParticlePeriodicBurstSpawnSystem
ParticleSubSpawnAddStateSystem
ParticleSubSpawnSystem
ParticleSubSpawnSystemPostUpdate
ParticleSubSpawnSystemPostInit
State
ParticleSubSpawn
ParticleSpawnOverDistance
ParticleSpawnState
CodingKeys
ParticleContinuousSpawn
ParticleVariableSpawn
ParticleBurstSpawn
ParticlePeriodicBurstSpawn
ParticleSpawnDuration
ParticleSpawnDelay
ParticleRespawn
Mode
ParticleRibbonTrailsSystem
ParticleRibbonTrails
CodingKeys
ChunksStorage
FilteredChunk
ClassComponentStorage
System
TriggerScript
ShaderScript
MetalFunctionScript
SimpleScript
EmitterScript
ParticleUpdateScript
ParticleInitScript
ScriptLocation
TextureType
ScriptParameter
ParticleScriptRuntime
GraphScript
ScriptsHolder
Info
BuiltinProperty
VertexOutProperty
CodingKeys
DirectCodingKeys
PathCodingKeys
CurrentCodingKeys
texture
half4
half3
half2
half
ShaderScriptRuntime
FunctionType
ShaderScriptParameter
EntityLocator
ScriptAccess
vfx_virtual
FragmentOutProperty
FragmentInProperty
VertexProperty
Resources
System
GPUSystem
ParticleOrientationInit
CodingKeys
Value
EnumInfo
Visibility
Bindings
CodingKeys
ResourceUsageSystem
System
GPUSystem
ParticleFloat3Init
CodingKeys
QueryBuffer
QueryProtocol
QueryHeader
QueryScope
Scope
AccessControl
Field
DirtyReadPolicy
QueryOptions
(knN(knN(knN
Storage
EmitterPrepareRuntime
EmitterWarmup
ParticleEmitterTransport
EmitterRuntime
EmitterDescription
CodingKeys
EmitterReference
Seed
PhysicsSimulation
DebuggingOptions
ScriptCompilerSystem
Builder
CachedBuildResults
Result
CompilationStatus
CompilationHandle
ScriptingConfiguration
ScriptError
System
GPUSystem
Attach
CodingKeys
VFXEntityObject
PrivateHeap
BufferPool
PaddedConstantBuffer
BufferSlice
ParticleSurfaceRenderer
CodingKeys
ParticleRenderer
ParticleRendererWithSystem
ParticleDefaultRendererable
ParticleDefaultRenderSystem
System
ParticleRibbonLengthUpdate
ParticleDefaultRendererableCodingKeys
FluidRenderer
ParticleOrientationMode
ParticleAnimationMode
CodingKeys
Query
Anchored
ParticleAnchored
CodingKeys
MaterialParametersProvider
MaterialSystem
Material
CodingKeys
Layer
Kind
TypeConstraint
SelfBuildInfo
ParticlePointRenderer
ContextExit
ChunkFilters
EventSourceProtocol
Parameter
EventSource
DelegateEventSource
Cancellable
CancelTuple
CancelList
EventProtocol
Parameter
}?,47?}cZ>
?(E=>
ColorRampInput
System
GPUSystem
ParticleColorOverLife
CodingKeys
SceneAssetRegistry
SceneAssetRegistryEntry
SceneAssetRegistryInstance
ParticleAffectedByGravity
ParticleGravityForce
CodingKeys
System
ComponentSystem
GenericComponentSystem
ImGuiSystem
SystemStage
VFXError
ResizingMode
VFXViewLegacy
VFXViewDelagate
UpdateWorldAABBSystem
SceneWorldAABB
KernelScriptReflectionSystem
ShaderFileSystem
MetalFunctionReflection
ShaderFileAsset
MetalScriptReflection
CodingKeys
Features
ParticleBoxCollider
OBBFeature
AABBFeature
ParticleBoxRenderer
RandomSeedNode
RandomNode
RandomTypedNode
Random01Node
RandomUnitVectorNode
RandomInRangeNode
RandomPositionInsideSphereNode
RandomPositionInsideCubeNode
PerlinNoiseFloatNode
PerlinNoiseFloat2Node
PerlinNoiseFloat3Node
PerlinNoiseFloat4Node
ParticleSphereCollider
AssetManagerPathResolver
AssetManager
AssetFileManager
Bitset
BitsetIterator
AnimationTiming
Animation
AnimationTarget
KeyframeAnimation
AnimationTimeSource
CodingKeys
KeyframeAnimationRuntime
BasicAnimation
BasicAnimationRuntime
Interpolation
EasingFunction
FillMode
DrawCall
DrawCallDisposeSystem
DrawCallComponent
DrawCallLayer
DrawCallEntityClassesContext
DrawCallEntityClasses
DrawCallPool
RenderingOrder
DrawCallGenerationContext
IndexedArray
CodingKeys
Opaque
Transpar
@CPUSystem
GPUSystem
EmitterShape
Direction
EmissionOrder
ShapeDistribution
Shape
MotionDistribution
CodingKeys
ParticleCylinderCollider
WorldReferenceKind
AssetReferenceKind
AnyType
#<ff
yDParticleFlockingAlignOrientationSystem
ParticleFlockingAlignVelocityOnPlaneSystem
ParticleFlockingConstrainToAreaSystem
ParticleFlockingConstrainToPlaneSystem
ParticleFlockingFlyTowardsAreaSystem
ParticleFlockingSolverData
ParticleFlockingSolverSystem
ParticleFlockingSpeedControlSystem
Grid
FlockingParticle
ParticleFlockingAlignOrientation
ParticleFlockingAlignVelocityOnPlane
ParticleFlockingConstrainToArea
ParticleFlockingConstrainToPlane
ParticleFlockingFlyTowardsArea
ParticleFlockingSolver
ParticleFlockingSpeedControl
Cell
CodingKeys
System
GPUSystem
ParticleTextureFrameInit
CodingKeys
RemappableNode
ECSNode
TimeNode
DeltaTimeNode
IsFirstFrameNode
_ECSValueNode
SetECSValueNode
InspectorSetECSValueNode
GetECSValueNode
_ParticleValueNode
SetParticleValueNode
GetParticleValueNode
_OnNode
OnUpdateNode
OnFirstFrameNode
OnParticleStageNode
OnTriggerNode
OnMouseTriggerNode
OnKeyTriggerNode
OnTickTriggerNode
LogDebugPassthroughNode
LogDebugNode
ECSStorageNode
CurveTextureNode
ColorRampTextureNode
EntityAssetNode
ImplicitEntityAssetNode
ImportErrorNode
StateNode
ImplicitStateNode
SetStateNode
TickNode
VFXStage
GraphSideStorage
CodingKeys
PrepareLightsSystem
AmbientLight
SpotLight
PointLight
DirectionalLight
RectAreaLight
CodingKeys
LightsUniforms
GPUSystem
ParticleNoiseSystem
NoiseParameters
ParticleNoise
NoiseGlobalTexture
CodingKeys
EntityManagerActor
EntityManager
State
ActiveState
EntityEntry
GroupSet
Iterator
VFXBidirectionalRemapTable
Selected
IterableOptionSet
EnumerableOptionSet
OptionSetIterator
SubContext
LODSystem
GenericLODSystem
MetalIOData
Access
FullscreenQuadResource
KernelScriptResource
Context
GenerationData
ErrorInfo
GenerationSettings
AssignmentInfo
CodingKeys
MetadataSet
Metadata
Custom
MetadataType
CodingKeys
RandomNumberGeneratorXoshiroWithSeed
type
name
code
CameraSystem
PreUpdateCameraSystem
PreRenderCameraSystem
PrepareUpdateSystem
PrepareRenderSystem
DebugSelectedCamera
REFrameConfiguration
FrameConstantsStorage
ConstantStorage
CodingKeys
VertexLayoutDescriptor
AttributeTable
Mesh
MeshBinaryData
MeshPart
VertexLayout
Attribute
Buffer
MeshBuffer
CodingKeys
Error
ComputePipelineDescriptor
ContextEntry
TypeMeta
EntityKeyPath
ComponentProperty
CodingKeys_pre2002
CodingKeys
EntityComponentProperty
SmoothMotionSystem
SmoothMotion
CodingKeys
ReplicationEntityRemapper
ReplicationRemappable
AnyComponentValueWriter
AnyComponentWriter
ReplicationDelegate
ReplicationStreamSystem
ReplicationStream
BidirectionalRemapTable
DefaultRemapper
ReplicationEvent
ReplicationStreamBuilder
ExistentialComponentWriter
ComponentWriter
ComponentValueWriter
EntityClass
WorldCounterable
WorldCounters
System
ParticleLocalBoxCollider
CodingKeys
BindingCopyAction
VFXREREnderer
VFXREScene
System
GPUSystem
ParticleAngleVelocityInit
CodingKeys
ColorRampSystem
ColorRampCache
ColorRampComponent
ColorRampRuntime
CodingKeys
ColorRampsState
ParticleLineRenderer
VFXCoreViewDelegate
VFXCoreView
ParticleEmitterSystem
ParticleComponentRequirement
ParticleComponentSystemProcessable
ParticleAttribute
ParticleAttributeWithoutRequirement
ParticleAttributeConstantRequirement
ParticleAttributeWithoutSystem
ParticleEmitterGPUSystem
ParticleComponentGPUProcessable
EmitterCullingSystem
IsSubEntityOf
WorldFromScene
ParticleIDToIndexTable
ParticleComponentSystemParameter
ParticleAngleEvolutionSystem
ParticleAngleEvolution
CodingKeys
EasingNode
EasingFloatNode
CubicEaseInNode
CubicEaseOutNode
CubicEaseInOutNode
QuadraticEaseInNode
QuadraticEaseOutNode
QuadraticEaseInOutNode
QuarticEaseInNode
QuarticEaseOutNode
QuarticEaseInOutNode
QuinticEaseInNode
QuinticEaseOutNode
QuinticEaseInOutNode
SinEaseInNode
SinEaseOutNode
SinEaseInOutNode
ExponentialEaseNode
PhysicalEaseNode
PowerEaseNode
BounceEaseNode
UnsafeHashTable
HandleTable
HandleArray
UnsafeArray
BufferAndStart
UnsafeArrayIterator
UnsafeDynamicArray
UnsafeSparseMutableBufferPointer
ParticleCopyDataSystem
ParticleCopyData
CodingKeys
ParticleVolumetricRenderer
CodingKeys
System
GPUSystem
ParticleAngleInit
CodingKeys
System
GPUSystem
ParticleOpacityOverLife
CodingKeys
BlendMode
Dumper
StringDumper
RuntimeThread
vfx_script_emitter
CachedLocationMapping
ScriptingMappingTimestamps
LocationMapping
MappingInvalidationTrigger
MappedLocation
PointerLocation
TableLocation
ExternalConstantsCopyEncoder
Destination
StartCaptureSystem
StopCaptureSystem
RenderImGUISystem
System
ParticleColorOverVelocity
CodingKeys
ClampBoxSystem
GlobalClampBoxSystem
ClampBox
CodingKeys
LogicNode
SelectNode
UnaryBoolOperatorNode
NotNode
IsOddNode
IsEvenNode
BinaryLogicOperatorNode
OrNode
AndNode
NandNode
NorNode
IsGreaterNode
IsGreaterOrEqualNode
IsLesserNode
IsLesserOrEqualNode
IsEqualNode
IsNotEqualNode
PrimitiveGeneratorSystem
PrimitiveGenerator
CodingKeys
SimpleFontDescription
PrimitiveType
Static
SpaceOverride
LastFrameWorldTransform
Parent
InverseWorldTransform
WorldTransform
ParentedToScene
Depth
CodingKeys
Beamed
Fixed
Children
NotInHierarchy
EntitySpace
kClusteringSystem
kCluster
kClusterState
ExternalDataTable
RenderContext
DummyCodable
CodingKeys
QueryManager
QueryInfo
RunloopThread
Thread
GPUSystem
ParticleTextureFrameEvolutionSystem
ParticleTextureFrameEvolution
CodingKeys
RenderArguments
ArgumentScope
BindingRequirement
SamplerArgument
TextureArgument
BufferArgument
GlobalsSystem
BindError
MathNode
ArithmeticOperatorNode
ArithmeticBinaryOperatorNode
AddNode
SubNode
MulNode
DivNode
RemainderNode
QuotientNode
FModNode
MinNode
MaxNode
PowNode
ATan2Node
StepNode
DistanceNode
DistanceSquaredNode
IsAlmostEqualNode
CrossProductNode
DotProductNode
LengthSquaredNode
ArithmeticTernaryOperatorNode
Min3Node
Max3Node
SmoothStepNode
MulAddNode
ClampNode
ArithmeticUnaryOperatorNode
ToRadiansNode
ToDegreesNode
SqrtNode
FractNode
OneMinusNode
Pow2Node
Pow3Node
RoundNode
SignNode
AbsNode
FloorNode
LogNode
ExpNode
Exp2Node
Exp10Node
CosNode
SinNode
ASinNode
ACosNode
CeilNode
TanNode
ATanNode
LengthNode
IsAlmostZeroNode
SaturateNode
SignedSaturateNode
NormalizedNode
QNormalizedNode
ConjugateNode
QLnNode
QExpNode
EulerAnglesNode
AxisAngleNode
AxisNode
QAngleNode
NormalAxisNode
ReduceSumNode
ReduceMulNode
OrthonormalBasisNode
MixNode
QTransformNode
QLengthNode
InverseNode
QInverseNode
TransposeNode
TransformNormalNode
TransformPosition3Node
TransformPosition4Node
TransformNode
TranslateMatrix3Node
TranslateMatrix4Node
ScaleMatrix3Node
ScaleMatrix4Node
ProjectPositionNode
TransformDirection3Node
TransformDirection4Node
TRSNode
GetTranslation3Node
GetTranslation4Node
GetRotationNode
RotationNode
GetScale3Node
GetScale4Node
RotateVectorNode
QPowNode
LookAtNode
SlerpNode
SlerpLongestNode
SquadNode
BezierNode
RotationBetweenNode
RotationBetweenFastNode
IsIdentityNode
AngleNode
Remap01Node
RemapNode
IsInClosedRange
CodeSourceSnippet
Parameter
CodingKeys
CullingSystem
MainCullGroup
ParticleMeshCollider
PointerType
Pointee
Error
Argument
Token
ParsedScriptParameter
TokenKind
ScriptParser
Lexer
Cursor
System
ParticleLifeAndDeath
BinaryDecoder
_BinaryDecoder
DataSource
DataStream
KeyedStore
UnkeyedStore
KeyedSources
Options
_BinaryKeyedDecodingContainer
_BinaryUnkeyedDecodingContainer
SingleValueStore
_BinarySingleValueDecodingContainer
D?D07@
LensBlurPassSystem
AnyExtensions
Extensions
System
GPUSystem
ParticleLifeInit
CodingKeys
WorkerComponentStorage
RewriteContext
VFXBridgingRemapAndResolveContext
CollectReferencesContext
RemapContext
PrivateCommandQueue
Stats
Operation
DirtyPropagation
ReferenceOptions
CommandQueue
IterationContext
ComponentBuffer
CastNode
AutoCastNode
BinaryEncoder
_BinaryEncoder
DataDestination
DataStoring
DataStore
SingleValueDataStore
KeyedStore
UnkeyedStore
Options
_BinaryKeyedEncodingContainer
_BinaryUnkeyedEncodingContainer
_BinarySingleValueEncodingContainer
LogOptions
Logger
OSLogger
ThreadLogger
DoubleBufferAllocator
PredefinedConstantNode
PiNode
TwoPiNode
HalfPiNode
EpsilonNode
Identity2x2Node
Identity3x3Node
Identity4x4Node
IdentityQuaternionNode
TargetDataKind
SourceDataKind
FlockingLocalAxis
FlockingSizeMode
Operation
Composition
ScaleMode
NoiseKind
TextureChannel
FluidSolver2DSolverBorderType
FluidSolver2DSolverSetupType
BinaryCodingTypeRegistry
FloatingPointBitPattern
BitPattern
_BinaryKey
ParallelCoder
_KeyBox
BinaryCoding
ArrayNode
GetArraySizeNode
GetArrayElementNode
System
GPUSystem
ParticleSetID
CodingKeys
SceneComponentStorage
DefaultInitializable
DebugUIDrawable
Component
EntityComponent
ClassComponent
WorkerComponent
SceneComponent
NotCodable
Tombstone
TypeCoder_pre2035
TypeCoder
ClassSettings
MonoChunk
UnstableOrdering
AnonymousEntity
PropagateDirtiness
NullEntityComponent
CodingKeys
Target
Architecture
Platform
BloomPassSystem
Deleter
TextureAllocator
TexturePool
KeyframeTimelineRuntime
KeyframeTimeline
CodingKeys
RenderStates
MaterialRuntime
ParticleDecalRenderer
CodingKeys
MDLImporter
Error
FutureResultProtocol
Value
FutureProtocol
Result
Future
Promise
FutureResult
FutureStorage
FutureState
Section
CPUSystem
GPUSystem
ParticleForce
CodingKeys
LookAtSystem
LookAt
CodingKeys
System
GPUSystem
ParticleIntegrate
VFXEffect
Graph
?Clock
HolographicRendererProtocol
HolographicSession
LightfieldRenderSettings
VFXREBindingMeshData
VFXREDrawCall
VFXMaterialType
REExternalDataTable
VFXDrawCallHandler
VFXCoreImporter
AnimationInfo
VFXImporterContext
NodeTransformController
NodeVisibilityController
ParametricModelController
MorpherController
ForceFieldsController
PhysicsBodyController
CameraController
CameraEffectToneMappingController
CameraEffectMotionBlurController
CameraEffectSSAOController
CameraEffectDoughnutBokehController
CameraEffectChromaticTransformController
CameraEffectExposureController
CameraEffectBloomController
CameraEffectLensBlurController
CameraEffectGrainController
CameraEffectDepthOfFieldController
MaterialController
WorldBackgroundController
WorldIBLController
WorldPhysicsController
WorldFogController
VFXNode
VFXCoreAsset
VFXMaterial
VFXModel
VFXWorld
Bridgeable
BridgeComponent
ShadableShaderModifierObserver
VFXBridgeableReference
LightController
ModelController
ScriptCompileAttempt
DiagnosticsFormat
ScriptDiagnostic
Kind
SourceLocation
CustomParameters
ShaderArguments
ShaderParameter
ShaderArgument
CodingKeys
PerStageShaderArguments
Desc
TextureDesc
BufferDesc
Shape
ParticlePrimitiveRenderer
VectorRenderSystemRenderPipelineStates
VectorRenderSystem
Shadow2D
StrokeWidth
StrokeColor
RoundedRectShape
DiscShape
Rect2D
HZOrder
ZOrder
Velocity2D
CodingKeys
ParticleAOBoxRenderer
CodingKeys
CodingKeys
FilterMode
AddressMode
type
name
code
System
ParticleTargetFromPositionInit
CodingKeys
FluidSpheresRenderSystem
FluidAbsorbRenderSystem
FluidBlurRenderSystem
FluidCompositeRenderSystem
FluidRenderSystemState
DisplayClock
OptionalStrongReference
Element
TextureCache
CacheEntry
State
TextureKey
AsyncGroupRequestState
Texture
WeakStorage
Loading
StorageKind
System
ParticleTargetFromPosition
CodingKeys
System
GPUSystem
ParticlePivotInit
CodingKeys
BaseObject
GraphV1CodeGeneration
Type
CodingKeys
SceneFileSystem
MeshFileSystem
MeshReferenceSystem
MeshReferenceAsset
VertexLayoutCollection
MeshFileAsset
SceneFileAsset
ImportOptions
MeshImportOptions
CodingKeys
Loader
ParticleSDFCollider
FairRecursiveLock
UnfairRecursiveLock
UnfairLock
GPUSystem
ParticleDragSystem
ParticleDrag
CodingKeys
DistanceConstraintSystem
DistanceConstraint
CodingKeys
TesselationDescriptor
RenderPipelineDescriptor
System
ParticleColorOverTexture
CodingKeys
AnyCoder
CodingKeys
Name
BuiltinNode
NilNode
ImplicitNilNode
NoopReturnNode
NoopReturnAnyNode
NoopActionNode
ConstantNode
ImplicitConstantNode
DotNode
_ComposeNode
ComposeNode
ImplicitComposeNode
DecomposeNode
ImplicitDecomposeNode
PartialComposeNode
ImplicitPartialComposeNode
FlowControlNode
DoNode
ImplicitDoNode
IfNode
NoopNode
ImplicitNoopNode
EnumConstantNode
ImplicitEnumConstantNode
AnyValue
VFXTag
DoNotSave
EmbeddedAssets
VFXParentAsset
VFXBridgeTag
VFXObjectTag
VFXAssetTag
DoNotExport
Scheduling
Prefab
CodingKeys
3ScriptingSupport
URLWatcher
Presenter
DebugCullingSystem
DebugVFXSystem
DebugInfoSystem
DebugDrawingSystem
DebugInfoDrawer
Item
WireframeLayerSystem
DebugDrawingState
DebugCullingSystemState
DebugInfoViewDependant
DebugInfoState
DebugInfoA
DebugInfoB
DebugInfoPrimitive
DebugInfoColor
DebugInfoWireframePrimitive
DebugAPI
CodingKeys
ArrowHead
VFXWorld
VFXNode
VFXLight
VFXForceField
VFXPhysicsBody
VFXModel
VFXMaterial
VFXCamera
VFXCameraEffectBloom
VFXCameraEffectDepthOfField
VFXCameraEffectColorGrading
VFXCameraEffectExposure
VFXCameraEffectToneMapping
VFXCameraEffectColorFringe
VFXCameraEffectMotionBlur
VFXCameraEffectVignetting
VFXCameraEffectGrain
VFXCameraEffectLensBlur
VFXCameraEffectChromaticTransform
VFXCameraEffectDoughnutBokeh
enabled
radius
maskEnabled
maskCenter
maskRadius
camera.doughnutBokeh
sampleCount
intensity
center
fromZ
fromAngle
fromShift
toAngle
toShift
color1
color2
color3
unMultBlending
camera.chromaticTransform
filterQuality
camera.lensBlur
scale
colored
camera.grain
anamorphic
softness
camera.vignetting
camera.motionBlur
strength
camera.colorFringe
mode
toeStrength
toeLength
shoulderStrength
shoulderLength
shoulderAngle
gamma
camera.toneMapping
value
camera.exposure
saturation
contrast
whiteBalanceTemperature
whiteBalanceTint
liftColor
liftOffset
gammaColor
gammaOffset
gainColor
gainOffset
camera.colorGrading
fStop
apertureBladeCount
focalBlurSampleCount
camera.depthOfField
threshold
thresholdSmoothness
iterationCount
useHighQuality
colorFilter
camera.bloom
usesOrthographicProjection
wantsHDR
focalLength
fieldOfView
sensorHeight
fillMode
zNear
zFar
categoryBitMask
filmOffset
focusDistance
camera
shadingModel
alphaCutoff
colorBufferWriteMask
writesToDepthBuffer
readsFromDepthBuffer
diffuse
metalness
roughness
specular
normal
reflective
transparent
ambientOcclusion
selfIllumination
emission
multiply
clearCoat
clearCoatNormal
clearCoatRoughness
subsurface
subsurfaceRadius
displacement
minificationFilter
magnificationFilter
mipFilter
wrapS
wrapT
mappingChannel
maxAnisotropy
contentsTransform
subdivisionLevel
parametricType
width
height
length
chamferRadius
primitiveType
widthSegmentCount
heightSegmentCount
lengthSegmentCount
chamferSegmentCount
model
friction
restitution
damping
angularDamping
rollingFriction
charge
affectedByGravity
centerOfMassOffset
velocityFactor
angularVelocityFactor
continuousCollisionDetectionThreshold
collisionBitMask
contactTestBitMask
allowsResting
linearRestingThreshold
angularRestingThreshold
physicsBody
fieldType
active
falloffExponent
offset
shape
cullMode
forceField
type
color
temperature
attenuationDistance
castsShadow
spotInnerAngle
spotOuterAngle
gobo.contents
areaExtents
drawsArea
doubleSided
IESProfile
probeType
light
hidden
position
eulerAngles
worldTransform
opacity
renderingOrder
self
physicsWorld.gravity
physicsWorld.speed
fogStartDistance
fogEndDistance
wantsScreenSpaceReflection
lightingEnvironment.contents
background.contents
fogColor
VFXDiagnosticsTracking
DiagnosticsTrackerInstance
ScriptStatus
ScriptHandle
System
ParticleColorOverPosition
GradientMode
CodingKeys
VFXEmitter
EventStream
ParameterBase
ParameterIn
ParameterOut
System
ParticleOpacityOverVelocity
CodingKeys
VFXHolographicRenderer
OrderedDictionary
RelationComponent
RelationStorage
RelationsCoder
RelationPair
ParticleCollidable
CPUSystem
GPUSystem
ParticleCollide
ParticleCollisionEvent
CollisionHandler
CollisionProperties
ParticleCollidableCodingKeys
CollisionLayerSet
KTXLoadingError
?RenderFunctions
ShadowSystem
Shadow
CodingKeys
ShadowRenderingCommand
ShadowState
CodeLoader
SwiftCodeLoader
CCodeLoader
MetalToolchainCodeLoader
MetalAPICodeLoader
Language
Error
Scale3
Scale
Scale2
Scale1
HalfSizeLegacyPatch
Velocity
AngularVelocity
CodingKeys
CompositeSystem
CVortexSystem
Vortex
CodingKeys
ParticlePrepareGPUSystem
ParticlePostInitGPUSystem
ParticleGPUDownload
FloatGenerator
SkeletonData
SkeletonAnimation
SkeletonAnimationSystem
SkeletonSystem
SkinningSystem
SkinnedMeshBinding
Skeleton
SkeletalAnimationPlayer
QuatfArrayAnimation
Float3ArrayAnimation
System
GPUSystem
ParticleVelocityInit
CodingKeys
Scheduler
Event
JobQueue
SystemRegistrationOptions
Action
System
GPUSystem
ParticleAngularVelocityInit
CodingKeys
ParticleOpacityEvolutionSystem
ParticleOpacityEvolution
EvolutionMode
CodingKeys
System
ParticleIntegrateAngle
CSVFileAsset
Locked
System
ParticleGrowEmitter
GrowEmitterRuntime
CodingKeys
SceneKitAssetSystem
SceneKitSystem
SceneKitRenderer
SceneKitAssetInstance
SceneKitAsset
CodingKeys
ParticleSortSystem
Iterator
ParticleSortModeSet
ParticleSortMode
RenderGraph
RenderGraphSystemCleanup
RenderGraphSystem
RenderTargetDesc
RenderTarget
Features
RenderSettings
CodingKeys
SetActiveSystem
HiddenSystem
EffectiveHiddenState
SetActive
SerializationContext
AnyDecoder
AnyEncoder
EntityManagerCoder
ValueCodingKeys
DecodeOrNil
EntityCoder
VersionedContainer
EntityComponentReference
FastDictCoder
StringCodingKeys
EntityTableEntryCoder
CodingKeys
ComponentCoder
CodingKeys_pre2000
WorldReferencingNode
_WorldValueNode
SetWorldValueNode
InspectorSetWorldValueNode
GetWorldValueNode
WorldReferenceNode
ImplicitWorldReferenceNode
RenderGraphDiagnostics
RenderGraphNode
RenderWorldNode
PublishTextureNode
PresentNode
BlurNode
BloomNode
ResolveResolutionNode
RenderGraphTextureNode
TextureDescriptorNode
CustomFunctionNode
ComputeShaderNode
FullscreenQuadNode
TexturePreview
RendererInfo
ResourceSemantic
MaterialParameters
CodingKeys
SineMoveAction
RotateAction
CodingKeys
SineYAction
TransientPushSystem
TransientOriginScale
TransientOriginColor
TemplateSet
Category
Template
CodingKeys
System
GPUSystem
WrapAroundCamera
CodingKeys
PointCacheGeneratorSystem
System
GPUSystem
PointCacheFromModel
PointCacheFileAsset
PointCacheGenerator
REMeshAssetPointCache
PointCacheSpawner
PointCacheEmitter
CodingKeys
PointCacheError
TypedBufferSlice
PCacheError
PointCacheRuntime
BakingOptions
PointCache
Distribution
PointCacheProperty
WorldAABB
LocalAABB
MigrationPhase
MigrationInfo
RenderCommandEncoder
VFXRendererLegacy
RERendererConfiguration
RenderPipelineFactory
Flags
PipelineCompilationContext
NSObject
DynamicPropertyStoring
System
ParticleSizeOverVelocity
CodingKeys
HeapTextureAllocator
SectionArray
ParticleRibbonProfile
ParticleRibbonTextureMode
ParticleRibbonRenderer
ScopeChecker
CFGScopeInfo
GraphScheduling
ParticleSizeOperation
HierarchySystem
SimplifiedHierarchySystem
LastFrameWorldTransformSystem
LastFrameWorldTransformSystem_vfx1
StaticToFixedSystem
Animatable
CurveObject
Curve
ColorRamp
CodingKeys
CurveInterpolationMode
CurveTangents
InterpolationMode
MathTransformNode
QuaternionFromNormalNode
QuaternionFromFloat3AxisAngleNode
QuaternionFromFloat4AxisAngleNode
QuaternionFromEulerAnglesNode
QuaternionXNode
QuaternionYNode
QuaternionZNode
QuaternionFromRotationMatrix3x3Node
QuaternionFromRotationMatrix4x4Node
RotationMatrixFromEulerAngleNode
RotationMatrix3x3FromQuaternionNode
RotationMatrix4x4FromQuaternionNode
RotationMatrixAroundCenterNode
TRSFloat3x3MatrixNode
TRSFloat4x4MatrixNode
TransformBucket
RenderBuckets
MeshRenderSystem
OpaqueRenderPass
TransparentRenderPass
MeshBatch
MeshModel
ModelRenderer
MeshRenderSystemState
CodingKeys
CurveSystem
CurveCache
CurveRuntime
CurveComponent
CodingKeys
CurvesState
AuthoringNode
Port
GraphNodeLibrary
NodeCategory
Entry
position
hidden
eulerAngles
scale
worldTransform
opacity
renderingOrder
castsShadow
categoryBitMask
Flags
Script
ScriptCustomState
ScriptComponent
ScriptIndex
ScriptRuntime
ScriptScheduling
GeneratedScriptCode
ScriptCompileOptions
CodableVoid
ScriptStateRestoration
CodingKeys
AssetPathResolver
BundleResolver
AbsolutePathStorage
FileAssetEntityComponent
TextureSystem
TextureDownloadSystem
TextureDiscardSystem
TextureClientPlaceholderSystem
TextureRequireCPURepresentation
TextureGPURuntime
TextureRenderTarget
TextureRequireGPURepresentation
TextureFileData
TextureArrayFileAsset
TextureLoadingOptions
TextureRequireAnimationRepresentation
TextureFileAsset
TextureShaderAsset
TextureCPURuntime
TextureRequireSizeLimit
UnmanagedFileAsset
TextureSource
TextureDescriptorCoder
Parameter
CodingKeys
VirtualFileAsset
TextureError
FileWatcher
StorageOptions
TextureGPURepresentationDoNotUpload
PostTypeCodingError
LoadPolicyMode
TextureRequireNonSRGB
TextureRequireCubemap
TextureRequireMipmapGeneration
TextureRequirePremultiplyWithLinearAlpha
SizeModification
TextureRequireUnpremultiply
TextureLoadRequestGPU
TextureFallback
TextureLoadRequestCPU
TextureRequireMipmap
RenderGraphTextureTarget
TextureRequireMask
TextureRequireIOSurface
TextureLoadPolicy
Slice
MipmapGeneration
TextureOptions
Kind
Asset
CodingKeys_pre2019
ComponentPropertyRewriter
PointOfView
OrthographicCamera
PerspectiveCamera
ProjectionMatrix
CodingKeys
CameraDepthOfField
CameraBloom
CameraLensBlur
CameraToneMapping
CameraVignetting
CameraColorGrading
LensBlurQuality
ToneMappingOperator
HiddenOrHasHiddenAncestor
Opacity
CodingKeys
Hidden
DeferredRendering
VFXLoader
EffectID
InitializePhases
BundleInfo
CodingKeys
DecodingErrorNode
AuthoringGraphCoder
AuthoringNodeCoder
CodingKeys
EdgeCoder
DepthStencilCache
Default
DepthStencilDescriptor
StencilDescriptor
RandomNumberGeneratorXoshiro
PrelitParameters
CodingKeys
DefaultMaterialInstance
_NodeProtocol
_This
EventDisposeSystem
NewEvent
OldEvent
CodingKeys
PBRParameters
PBRScalarProperty
PBRColorProperty
CodingKeys
TextureMipFilterMode
TextureSampler
ShaderRegistry
ParticleLifetime
ParticleTextureFrame
Color
ParticleAge
CodingKeys
ParticleGPU
ParticleRibbonLength
ParticleCustomEmitter
ParticleParentID
Particle
ParticleRoughness
ParticleMetalness
ParticleEmission
ParticleAngle
ParticleAngleVelocity
ParticleID
Mass
LinearFactor
AngularFactor
ParticleTarget
UserData1
UserData2
UserData3
UserData4
NeighborCount
ParticlePivot
ParticleSphereAttractor
ParticleSDFAttractor
SDFFileSystem
SDFGeneratorSystem
SDFFileAsset
SDFTextureGenerator
CodingKeys
SDFRuntimeData
System
GPUSystem
ParticleColorInit
Mode
CodingKeys
AuthoringGraph
ParticleMeshRenderer
CodingKeys
NavigationConfiguration
FlyModeKeys
_Navigation
CodingKeys
Navigation
NavigationRotationMode
ScrollMode
System
GPUSystem
OrientationOverVelocity
DirectionAxis
CodingKeys
AssetCatalogSystem
TextureNamedAsset
CodingKeys
AssetCatalog
Code
CodeEmitter
PipelineScriptCoder
VertexDescriptorCoder
ColorAttachmentsCoder
CodingKeys
FunctionConstantCoder
SpecializedFunctionCoder
LibrariesCodingKeys
PipelineCodingKeys
AttributeCodingKeys
LayoutCodingKeys
ValueCodingKeys
BlendingStates
System
ParticleUpdateAABB
ArraySequenceSnippet
CodingKeys
(knN
LODResource
Variation
LODState
LODRenderer
PointOfCulling
CodingKeys
FrustumCulled
GenericLOD
LODCulled
CanvasMetadataNode
CanvasItemNode
CanvasStickyNode
CanvasStickyGroupNode
ColorScheme
CodingKeys
OrangeCodingKeys
YellowCodingKeys
GreenCodingKeys
BlueCodingKeys
PurpleCodingKeys
PinkCodingKeys
GrayCodingKeys
NoHeapTextureAllocator
UnusedTexture
System
GPUSystem
ParticleSizeInit
CodingKeys
KeyValueMap
DepthPrepareSystem
EntityFamily
ParticleClassSpawnID
ParticleSpawnID
CodingKeys
RenderVariant
RenderVariantDescriptor
RenderPass
Dimension
IBLGeneratorSystem
IBLGenerator
IBLRuntime
CodingKeys
VFXCoreCameraProjectionDirection
VFXCoreCamera
ComponentStorageLayout
ComponentLayout
FixedArray10
FixedArray8
__FixedArrayCodableStorage10
@4a 
__FixedArrayCodableStorage8
@\a 
CodingKeys
 @Ta 
Query6
@|_ 
Query5
Query4
Query3
@` 
Query1
@<` 
Query2
@l` 
QueryResult1
@Tb 
QueryResult2
@|b 
QueryResult3
QueryResult4
Sc?y
9$(y
jG7&
RGBufferSlice
`>9?
`>9?
8-0?
8-0?
Z&>X
Z&>X
fff?
?333?
?333?
US]CQ
^(BM
kZ;&
CGColor
.cxx_destruct
MTLTextureCache
CGContext
GPUEndTime
T@"<MTLHeap>",R
IESProfile
T@"AVAudioNode",R,N,V_audioNode
JSONObjectWithData:options:error:
T@"MTLRenderPassDescriptor",R,N
NSSize
T@"NSArray",C,N
REMeshAssetBindings
T@"NSColor",C,N
T#,R
T@"VFXCameraEffectExposure",&,N
T,N,Vcenter
T@"VFXMesh",&,N
T,N,Vmin
T@"VFXNode",&,N
T:,N,V_didEndSelector
T@"VFXNode",W,N
T@"<MDLObjectContainerComponent>",R,&,N
T@"VFXView",&,N
T@"<MTLBinding>",&,N,V_binding
T@,N,V_delegate
T@"<MTLBuffer>",R
T@?,C,N
T@"<MTLBuffer>",R,N,V_buffer
TQ,N,V_freeAxes
T@"<MTLCommandBuffer>",&,N,V_commandBuffer
Tc,N,GisColored
T@"<MTLCommandQueue>",&,N,V_clientCommandQueue
Tc,N,GisPlaying
T@"<MTLComputeCommandEncoder>",R,N
Tc,N,V_canceled
T@"<MTLDevice>",R,N
Tc,N,V_rawQuilt
T@"<MTLFunction>",&,N,V_vertexFunction
Tc,N,V_succeded
T@"<MTLLibrary>",R,N,V_library
Tf,N,V_progress
T@"<MTLRenderCommandEncoder>",&,N,V_clientRenderCommandEncoder
Tq,N,VmaterialModificationCount
T@"<MTLRenderPipelineState>",&,N,V_state
T{?=},N
T@"<MTLTexture>",&,N
VFXMatrix4Value
T@"<MTLTexture>",R,N
VFX_Description
T@"<VFXAuthoringEnvironmentDelegate>",N,V_delegate
__light
T@"<VFXCameraControlConfiguration>",R,N
__wantsSeparateGeometryElements
T@"<VFXCameraNavigationControllerDelegate>",N,V_delegate
_active
T@"<VFXMTLRenderContextCommandBufferStatusMonitor>",W,N,V_commandBufferStatusMonitor
_affineUpToDate
T@"<VFXMaterialPropertyTextureProvider>",&,N
_allowsCreation
T@"<VFXProgramDelegate>",N
_animationsLock
T@"<VFXTextureAttachmentProvider>",&,N
_applyOverrides
T@"<VFXWorldRendererDelegate>",W,N
_availableCompiledLibrariesLock
T@"AVAudioEngine",R,N
_bindingAdaptor
T@"AVAudioPlayerNode",R,V_audioPlayer
_buffer
T@"AVPlayer",&,N
_cachedContents
T@"CALayer",&,N,V_layer
_cameraGeometry
T@"CAMediaTimingFunction",&
_captureStarted
T@"CAMediaTimingFunction",C,N
_chamferProfile
T@"CFXVFXRenderTargetInfo",R,N
_collisionShape
T@"MTLRenderPassDescriptor",&,N,V_clientRenderPassDescriptor
_color2
T@"MTLStageInputOutputDescriptor",R,N
_commandBufferCompletedHandlers
T@"MTLVertexDescriptor",C,N,V_vertexDescriptor
_componentCount
T@"NSArray",&,N,V_states
_currentInitResourceBlitEncoder
T@"NSArray",&,N,V_viewpoints
_debugUIOptions
T@"NSArray",C,N,V_frameBufferBindings
_defaultProgram
T@"NSArray",C,N,V_nodeBufferBindings
_deformDataKind
T@"NSArray",C,N,V_shadableBufferBindings
_device
T@"NSArray",R
_didTriggerRedrawWhileRendering
T@"NSButton",&,N,Vadd
_drawMeshElement:instanceCount:
T@"NSData",&,N,V_radianceData
_effectGeometry
T@"NSData",R,N
_endListeningToOtherMouseEvents
T@"NSDictionary",&,N,V_context
_expand
T@"NSDictionary",&,N,VconstantToString
_fadeInDuration
T@"NSDictionary",?,C,N
_fogEndDistance
T@"NSDictionary",C,N,Voptions
_frozen
T@"NSError",&,N,V_error
_gimbalLockMode
T@"NSFont",&,N
_height
T@"NSMutableDictionary",R,N
_inertiaRunning
T@"NSNumber",?,&,N
_innerLayerNode
T@"NSObject<OS_dispatch_queue>",R,N
_irradianceData
T@"NSOrderedSet",&,N
_isInLiveResize
T@"NSString",&,N
_iterationCount
T@"NSString",&,N,V_lookUpKey
_layout
T@"NSString",&,N,VkeyPathDst
_legacyUniforms
T@"NSString",&,N,Vname
_levelsOfDetail
T@"NSString",&,N,Vtype
_loadSourceCode
T@"NSString",C
_mappingChannel
T@"NSString",C,N,V_name
_nextUpdateDate
T@"NSString",R,C
_normal
T@"NSString",R,N,V_effectiveModifier
_nsView
T@"NSString",R,N,V_message
_onInertiaTimer
T@"NSTableView",&,N,Vtable
_orange
T@"NSURL",&,N,V_documentURL
_outerLayerNode
T@"NSURL",R,N
_panSensitivity
T@"NSValue",R,N,V_value
_passDescriptor
T@"VFXAnimation",R,N,V_animation
_physicsContact
T@"VFXAudioSource",R,N,V_audioSource
_pointOfCulling
T@"VFXBehaviorGraph",&,N
_prefab
T@"VFXCamera",&,N
_radius
T@"VFXCameraController",R,N,V_cameraController
_referenceCount
T@"VFXCameraEffectColorFringe",&,N
_renderPassDesc
T@"VFXCameraEffectDepthOfField",&,N
_renderingOrder
T@"VFXCameraEffectMotionBlur",&,N
_replicateScale
T@"VFXCameraEffectVignetting",&,N
T@"VFXEntityObject",R,N
_setAttributes:
T@"VFXLight",&,N
_setTransforms:
T@"VFXMTLResourceManager",R,N,V_resourceManager
_shoulderLength
T@"VFXMaterial",&,N
_snapToAlignOnX
T@"VFXMaterialProperty",R,N
_snapToAlignOnZ
T@"VFXMeshSource",&,N
_sourceChannels
T@"VFXModel",&,N
_spotInnerAngle
T@"VFXModelTessellator",&,N
_states
T@"VFXMorpher",R,N
_string
T@"VFXNode",&,N,Vdestination
_syncNode:with:
T@"VFXNode",&,N,Vsource
_target
T@"VFXNode",R
_textureOptions
T@"VFXNode",R,W,N
_timingFunction
T@"VFXParticleEmitter",&,N
_triggerManager
T@"VFXPhysicsBody",R,N
_unMultBlending
T@"VFXPhysicsWorld",R,N
_updateCorrectivesAndInBetween:
T@"VFXProgram",?,&,N
_updateRotation
T@"VFXRenderer",&,N,V_renderer
_userAttributes
T@"VFXState",&,N
_vertexFunction
T@"VFXState",R,N,V_targetState
_vertexTextures
T@"VFXTimingFunction",&,N
_volatileMeshes
T@"VFXView",N,V_parentView
_weight
T@"VFXView",R
_worldDidChange
T@"VFXWorld",&,N,V_world
_yellow
T@"_TtC3VFX8VFXScene",&,N
_zFlags
T@,&
accessInstanceVariablesDirectly
T@,&,N,V_lookUpFoundInstance
T@,&,N,V_texture
addFileWrapper:
T@,&,N,VrepresentedObject
addReverseItem:
T@,&,N,Vtarget
allCameraNamed:
T@,C,N,V_bindBlock
anchorA
T@,N,V_dataSource
angularVelocity
T@,R,N
animationNamed:
T@,W,N,Vdelegate
areaLightPrecomputedDataTexture
T@,W,N,Vtarget
attributeNamed:
T@?,C,N,VwillStartPlayback
TB,N,V_invView
backgroundColor
TI,R,N
blendInDuration
bloomSaturation
TQ,?,R,N
bufferAlignment
TQ,N,V_antialiasingMode
byValue
TQ,N,V_debugOptions
cameraDidChange
TQ,N,VelementIndex
cancelSelection
TQ,R
categoryBitMask
TQ,R,N,V_bufferSize
ciImage
TQ,R,N,V_type
clearInBetweens
T^v,R,N,V_frameTexturePool
colorWithCalibratedWhite:alpha:
T^{CGColorSpace=},R,N
commitImmediate
T^{CGPath=}
compressionType
T^{VFXMTLComputeCommandEncoder=@@^{VFXMTLBufferPool}I},R,N
conformsToType:
T^{__CFXWorld=},R,V_world
contactDelegate
containsString:
Tc,GisAdditive
context
Tc,GisRemovedOnCompletion
coordinateSpace
Tc,N,GisActive
createCFXObject
Tc,N,GisAdditive
currentDrawable
Tc,N,GisAppliedOnCompletion
currentViewport
Tc,N,GisDoubleSided
damping
Tc,N,GisHemispheric
dataWithLength:
Tc,N,GisIncremental
Tc,N,GisLitPerPixel
delegateWillDie
Tc,N,GisPaused
didModifyRange:
Tc,N,GisPositional,Vpositional
dispatchOnVertices:vertexCount:
Tc,N,GisScreenSpace
dollyBy:onScreenPoint:viewport:
Tc,N,GisVideoMirrored
edgeCreaseCount
Tc,N,V_automaticTarget
elementPosition
Tc,N,V_enableARMode
enclosingPrefab
Tc,N,V_graphicalSelectionEnabled
enqueue
Tc,N,V_requireLoadFinalTexture
enterForeground
Tc,N,V_shouldPresentAfterMinimumDuration
falloff
Tc,N,V_shouldSnapToAlign
filters
Tc,N,V_simulateCommandBufferFailure
flyModeVelocity
Tc,N,V_syncTimeWithCoreAnimation
fresnelExponent
Tc,N,Vreadonly
geometrySourceWithColorData:colorSpace:vectorCount:floatComponents:componentsPerVector:bytesPerComponent:dataOffset:dataStride:
Tc,R
getBoundingSphereCenter:radius:
Tc,R,GisLoaded
graphController
Tc,R,N
halfExtentValue
Tc,R,N,GisInertiaRunning
hasDefaultShape
Tc,R,V_customAudioNode
inBetweenCounts
Tc,V_drawableResizesAsynchronously
inertiaFriction
Td,N
initTransformInWorld:withBlock:
Td,N,V_startTime
initWithDouble:
Td,R,N
initWithFileNamed:entityObject:
Tf,N
initWithLength:
Tf,N,V_continuousCollisionDetectionThreshold
initWithResult:
Tf,N,V_flyModeVelocity
initWithString:
Tf,N,V_pitch
initialVelocity
Tf,N,V_speed
interactionMode
Tf,N,V_superSamplingFactor
invView
Tf,N,V_truckSensitivity
isEventInImGUI:
Tf,N,Vradius
isGroup
Tf,N,VreverbBlend
isLocal
Tf,R
isPremultiplied
Tf,R,N,V_gridUnit
isTextureKnown:
Ti,N,V_ri
isValid
Ti,R,N
isolate
Tq,N,V_action
keyCode
Tq,N,V_frequency
keyPathsForValuesAffectingScale
Tq,N,V_loadingPolicy
layouts
Tq,N,V_selectionTransformMode
libraryForFile:
Tq,N,V_xAlignment
localRightValue
Tq,N,V_zAlignment
lookAt:
Tq,N,Vheight
lowercaseString
Tq,N,VinputsCount
manager
Tq,N,Vtype
Tq,R
matrix4
Tq,R,N,V_line
maxBufferLength
Tq,V_usedCount
maxTransferRate
T{?=CCCC},R,N
maximumExposure
T{?=[4]},N
meshDescription
T{?=[4]},N,V_projectionMatrix
meshRef
T{?=[4]},N,Vtransform
metalDescriptor
T{?=[4]},R,N
T{?={?=[4]}{?=[4]}{?=[4]}},R,N
minimumDistance
T{CGRect={CGPoint=dd}{CGSize=dd}}
momentOfInertia
T{CGRect={CGPoint=dd}{CGSize=dd}},R,N
moveToPosition:
T{CGSize=dd},N
newBuffer:type:
T{CGSize=dd},R,N
newComputePipelineStateWithDescriptor:options:reflection:error:
T{VFXClockTimeRange=dd},N,V_replayLoopRange
newIndirectCommandBufferWithDescriptor:maxCommandCount:options:
URLByAppendingPathComponent:
newRenderPipelineStateWithDescriptor:options:completionHandler:
URLByDeletingLastPathComponent
nodeRef
URLByResolvingSymlinksInPath
numberWithBool:
URLForDirectory:inDomain:appropriateForURL:create:error:
numberWithLong:
URLForResource:withExtension:subdirectory:
observedKeyPath
URLWithString:
options
URLsForResourcesWithExtension:subdirectory:
particleEmitter
UUID
performMouseUp:
VFXFixDPI
playing
VFXFloat3Value
prepareObject:shouldAbortBlock:
VFXJSExportProtocol
presentedSubitemDidAppearAtURL:
VFXPixelsHigh
primitiveRanges
VFXSerializedBufferSize:type:
profile
VFXUID_classForElementOfArray:
program
VFXUID_creationOptions
pushDebugGroup:
VFXUID_instanciateWithOption:
VFXUID_propertyOrdering
recycle
VFXUID_viewForProperty:
registerPlayer:
VFX_CGPointValue
reload:options:
VFX_displayLinkCallback:
removeAllChilds
VFX_numberOfChannels
removeFromScene
VFX_setupDisplayLinkWithQueue:screen:policy:
removeObserver:
VFX_valueWithCGPoint:
renderInGBuffer
_IESProfile
rendererOptions
__CFObject
replayLoopRange
__antialiasingMode
replicatorConstraintWithTarget:
__camera
requiredOutputs
__didChangePointOfView
resourceManager
__engineStats
restart
__removeAnimation:forKey:
rollingFriction
__renderLayerUsingMetal:withCARenderer:engineContext:viewport:atTime:
screenTransform
__renderingQueue
scrollingDeltaY
__shadableHelper
__swift_objectForKeyedSubscript:
setAdd:
__updateMutableMesh:withMetalMesh:
setAlphaCutoff:
__viewport
setAreaExtents:
_accumulatedDrag
setAverageGray:
_activate
setBlendFactor:
_activeStateName
setBoundingBox:
_adaptationMaximum
setCastsShadow:
_adaptativeEndFrame
setChamferMode:
_adaptativeState0
setColorFilter:
_addGPUFrameCompletedHandler:
setConstantValue:type:withName:
_addGPUFrameScheduledHandler:
setControlSize:
_addToPhysicsWorld:
setDepthCleared
_additiveWritesToAlpha
setDestinationAlphaBlendFactor:
_alignmentMode
setDocumentURL:
_allTargetsFromAnimCodec
setEnvironment:
_allocatorLock
setFieldOfView:
_allowGPUBackgroundExecution
setFloat3Value:
_allowRemoteEdition
setFocalLength:
_allowsResting
setForceAsyncShaderCompilation:
_alphaCutoff
setGammaOffset:
_ambientOcclusion
setGroundColor:
_angularRestingThreshold
setHighDynamicRangeCompression:
_angularVelocityFactor
setIndexBuffer:
_animationDidStart
setInputHeight:
_animationEvents
setIsAuthoring:
_animationRef
setLookupTable:
_antialiasingMode
setMax:
_appendFocusableNodesInRect:ofView:toFocusItems:
setMaxVertexAmplificationCount:
_applyOnCompletion
setMin:
_applyUnsharing:alreadyShared:
setNextKeyView:
_arcHandleXY
setObjectClass:
_arcHandleYZ
setOffsetValue:
_arcball
setOutputWidth:
_areaLightPrecomputedDataTexture
setPixelBuffer:
_areaType
setPointOfView:
_arguments
setReloadBlock:
_arrayLength
setRenderPipelineState:atIndex:
_arrowIndicesOffset
setRestitution:
_asset
setSampleCount:
_assetRegistry
setScaleFactor:
_assetWriterInput
setScissorRect:
_associate:with:
setScreenSpaceReflectionStride:
_attachmentProvider
setSpeedFactor:
_attenuationDistance
setStoreAction:
_audioBuffer
setStringValue:
_audioName
setTemperature:
_audioPlayer
setTessellator:
_audioSource
setTileSamplerStates:withRange:
_authEnv2
setToeStrength:
_authoringEnvironment2
setTransitions:
_autoSwitchToFreeCamera
setVertexBuffer:offset:atIndex:
_automaticTarget
setViewMatrix1:
_automaticallyAdjustsZRange
setWithObjects:
_avAdaptor
set_commandBufferStatusMonitor:
_availableColorMatchingComputePipelines
setupAsTemplate
_availableComputePipelines
shaderModifiers
_availableDeformerStacks
shapeWithModel:
_availableImageProxy
showsStatistics
_availableIrradianceTextures
skipFramesIfNoDrawableAvailable
_availableLightingSystemReflectionProbeTextures
standardizedURL
_availableMeshSources
stopProcessingRendererElements:
_availableMorphDeformerReadOnlyBuffers
stringByAppendingPathComponent:
_availablePipelineStates
stringByResolvingSymlinksInPath
_availableRadianceTextures
stringFromDate:
_availableSamplers
supportsFamily:
_availableShadablesSearchKey
supportsWritableArrayOfTextures
_availableStageDescriptors
synchronizeTexture:slice:level:
_availableWireframeMaterials
tailSizeInBytes
_avoidsOverLighting
targets
_background
textureDataType
_backgroundColor
textureProvider
_backgroundDidChange
timingFunctions
_backgroundVideoProgram
toShift
_backingSize
_bakeSphericalHamonicsBasedIrradianceTexture:forEnvironmentTexture:renderContext:applySH:
triggerBindings
_baked
unbind:
_barycentricCoordsBuffer
unprojectPoint:
_baseGeometry
updateFieldNode:withSourceNode:
_baseNormalDataType
uppercaseString
_baseState
useHeaps:count:
_beginFrame
valueWithRange:
_beginMouseMovedTracking
vector3
_beginTranslateAtLocation:
version
_billboard
wakeUpAllBodies
_binding
weakRef
_bindingMode
winding
_bindingsGenerator
worldDidChange:
_blendDensePipeline
worldNamed:inDirectory:options:
_blendSparsePipeline
worldUp
_bloom
worldWithSceneKitScene:options:
_body
writeDouble:to:
_bodyB
writeSIMD2F:to:
_boldTextInfo
writeSIMD3F:to:
_boneIndicesBuffer
writeSIMD4F:to:
_bonesAndIndicesCompression
writeUInt16:to:
_browseMode
writeUInt64:to:
_browseScaleFactor
zoomBy:animate:
.cxx_construct
CGImage
CATransform3DValue
CGImageForProposedRect:context:hints:
T@"<MTLBlitCommandEncoder>",R,N
GPUStartTime
T@"<VFXPhysicsContactDelegate>"
IESProfileURL
T@"CALayer",&,N,V_nsWindowLayer
MTLTexture
T@"NSArray",&,N
NSView
T@"NSArray",R,N
T#,&,N,VobjectClass
T@"NSData",&,N,V_irradianceData
T,N,V__renderTargetSize
T@"VFXDrawableDescriptor",R,&,N
T,N,Vmax
T@"VFXMesh",R,N
T,R,N
T@"VFXNode",R,N
T:,N,Vaction
T@"VFXPrefabAsset",&,N,V_source
T@"<MTLArgumentEncoder>",&,N,V_argumentEncoder
T@,&,N,V_source
T@"<MTLBuffer>",&,N,V_buffer
T@,W,N,VweakRef
T@"<MTLBuffer>",R,N
T@?,C,N,V_block
T@"<MTLCommandBuffer>",&,N,V_clientCommandBuffer
T^v,R,N
T@"<MTLCommandBuffer>",R,N
Tc,N,GisEnabled
T@"<MTLCommandQueue>",R,N
Tc,N,GisWrapped
T@"<MTLDevice>",R
Tc,N,V_isOpaque
T@"<MTLFunction>",&,N,V_fragmentFunction
Tc,N,V_readonly
T@"<MTLLibrary>",&,N
Tc,R,N,GisGroup
T@"<MTLRasterizationRateMap>",&,N,V_rasterizationRateMap
Tq,N,VgeometryModificationCount
T@"<MTLRenderCommandEncoder>",R,N
Tq,N,Voperation
T@"<MTLResource>",R
T@"<MTLTexture>",R
VFXUI_unbindAll
T@"<VFXAsset>",R,N
_3dView
T@"<VFXAvoidOccluderConstraintDelegate>",N
__model
T@"<VFXCameraControllerDelegate>",N,V_delegate
_action
T@"<VFXEditorViewDelegate>",W,N,V_selectionDelegate
_adaptationDarkeningSpeedFactor
T@"<VFXMTLRenderContextResourceManagerMonitor>",W,N,V_resourceManagerMonitor
_allowHotReload
T@"<VFXPhysicsContactDelegate>",W
_angularDamping
T@"<VFXShadable>",R,N,V_shadable
_applicationDidEnterBackground:
T@"<VFXWorldRenderer>",R
_authoringGraph
T@"<_TtP3VFX10VFXBinding_>",&,N,Vbinding
T@"AVAudioEnvironmentNode",R,N
_btShapeWrapper
T@"AVCaptureDevice",&,N
_bufferBindings
T@"CAAnimation",R,N
_camera
T@"CALayer",&,N,V_rootLayer
_captureSession
T@"CAMediaTimingFunction",&,N
_center
T@"CAMetalLayer",R,N
_charge
T@"MDLAnimatedScalarArray",R,N
_color1
T@"MTLRenderPassDescriptor",N,V_descriptor
_color3
T@"MTLTextureDescriptor",R,N
_commandBufferScheduledHandlers
T@"NSArray",&,N,V_allTargetsFromAnimCodec
_copyImage:toTexture:desc:textureOptions:needsMipMapGeneration:
T@"NSArray",&,N,V_transitions
_custom
T@"NSArray",C
_defaultLibrary
T@"NSArray",C,N,V_lightBufferBindings
_defaultTexture
T@"NSArray",C,N,V_passBufferBindings
_deindexedToOriginalTableBuffer
T@"NSArray",N
_didEndSelector
T@"NSBezierPath",C,N
_drawAtTimeLock
T@"NSButton",&,N,Vremove
_drawShadowMaps
T@"NSData",R,C,N
_encodeNodePropertiesWithCoder:
T@"NSDictionary",&,N,V_attributes
_enumerateChildNodesUsingBlock:
T@"NSDictionary",&,N,V_options
_extrusionDepth
T@"NSDictionary",&,N,Voptions
_finishedExport
T@"NSDictionary",C,N
_fragmentShader
T@"NSDictionary",R,N
_geometryShader
T@"NSError",R,N,V_warnings
_handle
T@"NSMutableArray",R,N
_hidden
T@"NSNumber",&,N
_innerBindingSpaceVectorsBuffer
T@"NSObject<OS_dispatch_group>",R,N
_inputs
T@"NSObjectController",W,N,V_objectController
_isFocusableOrHasFocusableChild
T@"NSPathControl",&,N,VstackControl
_isolateProgram
T@"NSString",&,N,V_generatedTexturePath
_lastUpdateTime
T@"NSString",&,N,V_name
_legacyRenderer
T@"NSString",&,N,VkeyPathSrc
_length
T@"NSString",&,N,Vtag
_libraryManager
T@"NSString",?,R,C
_loaded
T@"NSString",C,N
_margin
T@"NSString",C,N,V_semantic
_noColorProgram
T@"NSString",R,N
_normalTextInfo
T@"NSString",R,N,V_entryPoint
_offset
T@"NSString",R,N,Videntifier
_opaque
T@"NSURL",&,N
_outerBindingSpaceVectorsBuffer
T@"NSURL",&,N,V_outputURL
_owners
T@"NSUUID",R,N,V_documentUUID
_parent
T@"NSWindow",&,N,V_nsWindow
_paused
T@"VFXAssetNode",R,N
_player
T@"VFXAuthoringEnvironment",R
_positionOffset
T@"VFXBehaviorGraph",&,N,V_behaviorGraph
_primitiveCount
T@"VFXCameraController",R,N
_rasterizationRateMapDataBuffer
T@"VFXCameraEffectBloom",&,N
_render
T@"VFXCameraEffectColorGrading",&,N
_renderableCopy
T@"VFXCameraEffectGrain",&,N
_renderingQueue
T@"VFXCameraEffectToneMapping",&,N
_result
T@"VFXClock",R,N
_samplerIndices
T@"VFXForceField",&,N
_setQuaternion:
T@"VFXLight",R,N
_shadableHelper
T@"VFXManipulator",R,N
_showStatistics
T@"VFXMaterial",R,N
_snapToAlignOnY
T@"VFXMeshElement",&,N
_source
T@"VFXMeshSource",R,N
_spheregeodesic
T@"VFXModel",R
_spotOuterAngle
T@"VFXMorpher",&,N
_statisticsInfo
T@"VFXNode",&,N,V_pointOfView
_symbolToBinder
T@"VFXNode",&,N,Vnode
_syncObjCModel:
T@"VFXNode",N,Vjoint
_targetDistance
T@"VFXNode",R,N,V_freeViewCameraNode
_textureSampler
T@"VFXNodeComponent",&,N,Vnext
_translateInCameraSpaceByX:Y:Z:
T@"VFXPhysicsBody",&,N
_truncationMode
T@"VFXPhysicsShape",&,N
T@"VFXProgram",&,N
_updateMaterialTextureProvider:
T@"VFXRenderGraph",&,N
_useHighQuality
T@"VFXSkinner",&,N
_velocityFactor
T@"VFXState",R,N,V_sourceState
_vertexSamplers
T@"VFXStateManager",W,N,V_manager
_volatileBuffer
T@"VFXView",N
_wantsWideGamut
T@"VFXView",N,V_view
_windowOcclusionStateDidChange:
T@"VFXWorld",&,N
_worlds
T@"VFXWorld",R,N
_zArrow
T@"_TtC3VFX9VFXEffect",&,N
T@,&,N
activeStateName
T@,&,N,V_session
addAudioPlayer:
T@,&,N,Vcomponent
addLibraryWithDescriptor:error:
T@,&,N,VsourceObject
addUIForStringProperty:ofClass:
T@,C,N
allKeys
T@,N
anchorB
T@,R
animationEvents
T@,W,N,Vcomponent
archive:propertiesForEntryName:
T@,W,N,VmlDelegate
argumentEncoder
T@?,C,N,VdidFinishPlayback
automaticTarget
TB,N
backFaceStencil
TC,R,N
binding
TIFFRepresentation
bloomBlurRadius
TQ,?,R
btShape
TQ,N
bundleForClass:
TQ,N,V_coordinateSpace
calculationMode
TQ,N,V_offset
cameras
TQ,N,VpixelFormat
capSegmentCount
TQ,R,N
channelEncoding
TQ,R,N,V_elementSize
clearCoatNormal
T^v,N,V_userInfo
clickedPathItem
T^v,R,N,V_renderEncoder
colored
T^{CGImage=},N
completionBlock
T^{VFXMTLBlitCommandEncoder=@@},R,N
computeFunction
T^{__CFXEngineContext=},R,N
connectToProxy:
T^{__IOSurface=},R
containsObject:
Tc,?,R
content
Tc,GisCumulative
convertTransformValue:fromNode:
Tc,N
copyTo:
Tc,N,GisAdaptive
createSnapshot:
Tc,N,GisAffectedByGravity
currentProgress
Tc,N,GisCumulative
customAudioNode
Tc,N,GisGeodesic
dataWithDouble:
Tc,N,GisHidden
dataWithString:
Tc,N,GisJitteringEnabled
dealloc
Tc,N,GisOpaque
depthAttachment
Tc,N,GisPaused,V_paused
diffuse
Tc,N,GisRemovedOnCompletion
display
Tc,N,GisTemporalAntialiasingEnabled
dstNormalBuffer
Tc,N,V_autoSwitchToFreeCamera
effects
Tc,N,V_canRecycleParticleBuffers
enabled
Tc,N,V_enableFreeCamera
endTime
Tc,N,V_loops
enterBackground
Tc,N,V_shouldDelegateARCompositing
fadeOutDuration
Tc,N,V_shouldSnapOnGrid
falloffExponent
Tc,N,V_shouldStream
floatComponents
Tc,N,V_surroundToSelect
framebufferOnly
Tc,N,V_waitUntilCompleted
Tc,N,VskipMorphTargets
geometrySources
Tc,R,GisFramebufferOnly
getReturnValue:
Tc,R,GisShareable
gravity
Tc,R,N,GhasInterleavedIndicesChannels
hasDebugOption:
Tc,R,N,GisPrecompiled,V_precompiled
hasGobo
Tc,V_completed
indexBufferSize
influenceFactor
Td,N,V_endTime
initWithDevice:
Td,N,V_time
initWithDrivingNode:parameters:
initWithFormat:
Tf,N,V_center
initWithMatrix:
Tf,N,V_displayAspect
initWithSource:
Tf,N,V_panSensitivity
initWithTarget:
Tf,N,V_rotationSensitivity
insertChildNode:parent:atIndex:
Tf,N,V_subp
interleavedCopy
Tf,N,V_tilt
isBaked
Tf,N,VmaxAllowedRotationAngle
isGizmo
Tf,N,Vrate
isJoint
Tf,N,Vvolume
isMuted
Tf,R,N
isProxy
Ti,N,V_bi
isTextureSource
Ti,N,Vtype
isVideoMirrored
Tq,N
kernelStartTime
Tq,N,V_editingSpace
keyPath
Tq,N,V_interactionMode
latlongTextureForCubemap:pixelFormat:renderContext:needsMipmap:
Tq,N,V_referenceCount
library
Tq,N,V_timeStamp
localFrontValue
Tq,N,V_yAlignment
localUp
Tq,N,VbufferSize
lookAtLocation:
Tq,N,Vindex
makeReverseItem
Tq,N,VsemanticsCount
manipulatorNode
Tq,N,Vwidth
materialPropertyCreateIfNeeded:
Tq,R,N
Tq,R,N,V_version
maxTotalThreadgroupsPerMeshGrid
Ts,N,Vtype
maximumDistance
T{?=[2]},N
members
T{?=[4]},N,V_draggedTransform
meshElementWithData:primitiveType:primitiveCount:bytesPerIndex:
T{?=[4]},N,V_viewMatrix
message
T{?=[4]},R
metalLibraryURL
T{?=dddddd},N
minConstantBufferAlignmentBytes
T{AVAudio3DPoint=fff},N
minimumExposure
T{CGRect={CGPoint=dd}{CGSize=dd}},N
morpher
T{CGSize=dd}
mtkView:drawableSizeWillChange:
T{CGSize=dd},N,V_size
newCommandQueue
T{MTLResourceID=Q},R
newDynamicLibraryWithURL:error:
T{_NSRange=QQ},N
newRenderPipelineStateWithDesc:
URLByAppendingPathExtension:
newSharedTextureWithDescriptor:
URLByDeletingPathExtension
URLByStandardizingPath
numberWithChar:
URLForResource:withExtension:
objects
URLValue
opacity
URLsForDirectory:inDomains:
otherMouseDown:
UTF8String
peerPid
UUIDString
pixelBufferPool
VFXFloat2Value
prepare
VFXFloat4Value
present
VFXMutableDeepCopy
presentedSubitemDidChangeAtURL:
VFXPixelsWide
probeUpdateType
VFXUID_additionalProperties
profileWithURL:
VFXUID_constantToStringForProperty:
programHashCode
VFXUID_enumForProperty:
pyramidWithWidth:height:length:
VFXUID_propertiesToFilterOut
recompilePasses
VFXUID_rangeForFloatProperty:min:max:
reflectionResolutionScaleFactor
VFXUI_name
release
VFX_compactMapObjectsUsingBlock:
remove:
VFX_evaluateAtTime:reverse:to:
removeBehavior:
VFX_safeHash
removeMaterial:
VFX_valueForKey:
removeSourceRenderersForSource:
_3DConnexionIsPressed
renderer:didRenderWorld:atTime:
_VFXWorldRendererMainPassCustomPostProcessSupportDrawSceneBackgroundUsingEncoder:commandBuffer:renderPassDescriptor:
rendererWithMTLTexture:options:
__allocateContentTransformIfNeeded
replicatesScale
__aspectRatio
representations
__createCFObject
reshape
__drawableSafeAreaInsets
resourceOptions
__morpher
rightMouseDown:
__removeObjectFromChildNodesAtIndex:
screenSpaceAmbientOcclusionBias
__renderTargetSize
scrollingDeltaX
__runtimeResolvedURL
session
__skinner
setActiveState:
__swift_setObject:forKeyedSubscript:
setAdditionalCompilerArguments:
__updateTextureWithLayer:texture:engineContext:sampler:
setAnchorPoint:
__willChangePointOfView
setArrayLength:
_actionData
setBindingName:
_activeState
setBool:forKey:
_adaptationBrighteningSpeedFactor
setBufferIndex:
_adaptationMinimum
setCenterValue:
_adaptativeFrameDuration
setClientTextureWithId:texture:
_adaptive
setColorFringe:
_addGPUFramePresentedHandler:
setConstraints:
_addSkinnerWithMDLMesh:worldNodes:
setCurrentTime:
_additive
setDestination:
_adjustBackingLayerPixelFormat
setDisplayLink:
_allSymbolsWithVFXSemantic
setDoubleSided:
_allocateElement
setEulerAngles:
_allowDecodingCyclesInSecureMode
setFloat2Value:
_allowGhostObjects
setFloat4Value:
_allowsDefaultLightingEnvironmentFallback
setFogColor_linearExtendedSRGB:
_allowsTranslation
setFrameOrigin:
_alternateMode
setGeometryRef:
_anamorphic
setHemispheric:
_angularVelocity
setIncremental:
_animation
setInnerRadius:
_animationDidStop
setInputsCount:
_animationPathForKey:
setLitPerPixel:
_animations
setMaskEnabled:
_apertureBladeCount
setMaxConcurrentOperationCount:
_applicationWillEnterForeground:
setMeshSamplerStates:withRange:
_applyOverride:forKeyPath:
setNeedsDisplay
_applyWithEvent:
setObjectBuffer:offset:atIndex:
_arcHandleXZ
setObstruction:
_arcHandles
setOrientation:
_areaExtents
setPhysicsBody:
_areaPolygonVertices
setPixelFormat:
_argumentEncoder
setProbeOffset:
_arrayController
setRenderGraph:
_arrowIndicesCount
setRepeatCount:
_aspectRatio
setReverbBlend:
_assetPathResolver
setSampleDistributedShadowMaps:
_assetWriter
setScaleOffset:
_assignComponent:toContainerWithType:
setScreenSpace:
_attachmentCount
setShouldDelegateARCompositing:
_attachments
setStorageMode:
_attributes
setStringArray:
_audioFile
setTag:
_audioNode
setTemporalAntialiasingEnabled:
_audioPlayers
setTextureType:
_audioURL
setToZ:
_authoringEnvironment
setToneMapping:
_autoCameraTarget
setUrl:
_automaticCameraTargetUpToDate
setViewMatrix0:
_automaticallyAdjustsShadowProjection
setVisibilityResultMode:offset:
_autoreverses
set_bonesAndIndicesCompression:
_availableBuffers
set_legacyView:
_availableCompiledLibraries
setupLegacyView
_availableComputePipelinesWithStageDescriptor
shadowIntensity
_availableIESTextures
sharedWorkspace
_availableImages
skinner
_availableLibraries
srcNormalBuffer
_availableMeshElements
stateController
_availableMeshes
stopReplication
_availableOpenSubdivComputeEvaluators
stringByAppendingPathExtension:
_availablePipelineStatesLock
stringFromByteCount:countStyle:
_availableRasterizerStates
submeshWithUniquedIndexData:andVFXModelElement:bufferAllocator:
_availableShadables
supportsMemorylessRenderTargets
_availableSkinDeformerReadOnlyBuffers
swizzle
_availableTessellators
_averageGray
targetDirection
_axis
texture
_background2DProgram
textureForName:
_backgroundCubeProgram
timeSampleCount
_backgroundRasterizerStates
toAngle
_backingLayer
toValue
_bakeNodes:folderPath:inVertex:bakeAO:quality:attenuation:geomSetter:terminateSetter:
torusWithRingRadius:pipeRadius:
_bakeStochasticIrradianceTexture:forEnvironmentTexture:mipmapLevelForSampling:renderContext:
triggersEnabled
_ballSocketConstraint
unlinkCustomPropertyWithParent:
_baseBufferForComputeKernel
update:
_baseMesh
updateLightNode:withSourceNode:
_basePositionDataType
useHeap:stages:
_baseVertexCount
valueWithPoint:
_beginListeningToOtherMouseEvents
vector2
_beginTime
vector4
_behaviorGraph
vignettingPower
_bindBlock
wantsAdaptation
_bindingData
weights
_bindings
withPointerToValueAtPath:block:
_blendDenseIndexedPipeline
worldFrontValue
_blendMode
worldRightValue
_block
worldWillChange
_blue
wrapped
_bodyA
writeSIMD2D:to:
_boldLogsInfo
writeSIMD3D:to:
_boneIndexSize
writeSIMD4D:to:
_boneWeightsBuffer
writeString:to:
_boundsSize
writeUInt32:to:
_browseScale
zoomBy:
_btWorld
_bufferForData:bytesPerIndex:
_bufferForMTLBuffer:
_bufferPool
_bufferSize
_buffers
_buffersUsageMask
_buildMipmaps:
_bytesPerIndex
_caAnimationCache
_caReady
_cache
_cachedTessellator
_calculationMode
_callbackWithTime:
_cameraController
_cameraEffect
_cameraFocusPlaneGeometry
_cameraFrustumGeometry
_cameraIsManipulated
_cameraLoaded
_cameraNearPlaneGeometry
_cameraOriginalFieldOfView
_cameraOrthographicFrustumGeometry
_cameraRoot
_cameraTarget
_cameraTargetComputed
_camerasDictionary
_canJitter
_canRecycleParticleBuffers
_cancelMouseMovedTracking
_canceled
_capOrientationAnglesToMaximum
_capSegmentCount
_cappedTranslationDelta:
_captureDevice
_cascadeDebugFactor
_castsShadow
_categoryBitMask
_centerOfMassOffset
_cfxAnimation
_cfxBackgroundColor
_cfxBackgroundColorDidChange
_cfxImage
_cfxShaderModifierCache
_chainRootNode
_chamferMode
_chamferRadius
_chamferSegmentCount
_checkAndUpdateDisplayLinkStateIfNeeded
_checkForAssociatedSamplerOnBinding:argument:
_checkSettingsConsistency
_childNodes
_childNodesPassingTest:recursively:output:
_childNodesWithAttribute:output:recursively:
_children
_chromaticTransform
_ciImage
_clearBackBuffer
_clearCFXCache
_clearCoat
_clearCoatNormal
_clearCoatRoughness
_clearContents
_clearRenderCaches
_clearUnusedBindingPoints
_clearWorldRef
_clickOrigin
_clientCommandBuffer
_clientCommandQueue
_clientRenderCommandEncoder
_clientRenderPassDescriptor
_clients
_clock
_cloneSet
_cloneSharable:remap:
_cloneWithOption:remapTable:
_cloning
_clusterInfo
_coalescingSource
_collectCompilationErrors
_collisionBitMask
_collisionImpulse
_color
_colorAndTextureProgram
_colorBufferWriteMask
_colorFilter
_colorFringe
_colorGrading
_colorManaged
_colorOnlyProgram
_colorSpace
_colorTextures
_commandBuffer
_commandBufferStatusMonitor
_commandQueue
_commonInit
_commonInit:
_commonProfileBuffersAllocator
_commonProfileCacheLibrary
_commonProfileConditioner
_commonProfileIORange
_commonProfilePrecompiledFunctions
_compilationErrors
_compilationIssues
_compileRenderGraphIfNeeded
_completed
_componentType
_components
_compositeRendering
_computeACMR
_computeAutomaticTargetPointIfNeeded
_computeBoundingSphereOmittingFloorsForNode:sphere:
_computeEvaluator
_computeFunction
_computeNextFrameTime
_computePipeline
_computePipelineStateForKernel:constants:constantsHash:threadGroupSizeIsMultipleOfThreadExecutionWidth:
_computeStickyAxisIfNeeded:
_computeTranslationOrigin3DFromPoint:
_computeUsageForBindings:function:
_computedLightingEnvironmentMapsPath
_configureComputePipeline:withDescriptor:
_consoleLineCount
_constantBufferPools
_constraint
_constraintRef
_contact
_contactDelegate
_contactNormal
_contactPoint
_contactTestBitMask
_contactWithManifold:index:
_containsAlpha
_contentScaleFactor
_contentTransform
_contentType
_contents
_contentsScaleFactor
_context
_contextIsDoubleBuffered
_continuousCollisionDetectionThreshold
_contrast
_controller
_controllers
_convertRotationFromWorldToPointOfView:
_convertToCA
_coordinateSpace
_copyAnimationsFrom:
_copyAttributes:
_copyAttributesTo:
_copyBaseBufferPipeline
_copyCFXImageFromImageData:typeID:
_copyImageFromCFXImage:
_copyPerformanceStatistics
_copyRecursively:remapOut:
_copySnapshot:
_copyWithOptions:to:remap:
_coreEntityManager
_coreHandle
_cornerSegmentCount
_correctiveDriverCounts
_correctiveDriverIndices
_correctiveInBetweenCounts
_correctiveInBetweenInfluenceWeights
_correctivesAndInBetweens
_counters
_createBackgroundColorImageWithSize:
_createBody
_createConstraint
_createDisplayLinkIfNeeded
_createDynamicWorldIfNeeded
_createOffscreenFramebufferIfNeeded
_createPipelineStateWithDescriptor:desc:pipeline:
_createResourceCommandBufferIfNeeded
_createSkinnerWithCompressedData:bonesCount:vertexCount:
_createSkinnerWithVertexCount:bones:boneWeights:boneIndices:baseMesh:
_createSnapshotWithSize:error:
_cullMode
_cumulative
_current
_currentAllocatorPage
_currentCommandBuffer
_currentFrameHash
_currentFrameIndex
_currentFrustumInfo
_currentInitDeformer
_currentInitRenderContext
_currentRenderContext
_currentRenderPassDescriptor
_currentResourceManager
_currentSeekStep
_currentStickyAxis
_currentStreamBufferIndices
_currentSystemTime
_currentTransforms
_currentUpdateBuffers
_currentUpdateComputeCommandEncoder
_currentUpdateComputeEncoder
_currentUpdateComputeEncoderProvider
_currentUpdateFrustumInfo
_currentUpdateRenderContext
_currentUpdateTransforms
_customAudioNode
_customContainerFrame
_customDecodingOfVFXAudioSource:
_customDecodingOfVFXAvoidOccluderConstraint:
_customDecodingOfVFXDistanceConstraint:
_customDecodingOfVFXFloor:
_customDecodingOfVFXIKConstraint:
_customDecodingOfVFXLight:
_customDecodingOfVFXLookAtConstraint:
_customDecodingOfVFXMaterial:
_customDecodingOfVFXMaterialProperty:
_customDecodingOfVFXModel:
_customDecodingOfVFXMorpher:
_customDecodingOfVFXNode:
_customDecodingOfVFXPhysicsShape:
_customDecodingOfVFXProgram:
_customDecodingOfVFXReplicatorConstraint:
_customDecodingOfVFXShape:
_customDecodingOfVFXText:
_customDeformerToInstances
_customEncodingOfVFXAudioSource:
_customEncodingOfVFXAvoidOccluderConstraint:
_customEncodingOfVFXCamera:
_customEncodingOfVFXDistanceConstraint:
_customEncodingOfVFXIKConstraint:
_customEncodingOfVFXLOD:
_customEncodingOfVFXLight:
_customEncodingOfVFXLookAtConstraint:
_customEncodingOfVFXMaterial:
_customEncodingOfVFXMaterialProperty:
_customEncodingOfVFXModel:
_customEncodingOfVFXMorpher:
_customEncodingOfVFXNode:usePresentationObject:
_customEncodingOfVFXPhysicsShape:
_customEncodingOfVFXProgram:
_customEncodingOfVFXReplicatorConstraint:
_customEncodingOfVFXShadableHelper:
_customEncodingOfVFXShape:
_customEncodingOfVFXText:
_customMainPassProcessUsesExtraRenderTargetForRenderer:pixelFormat:
_customMaterialProperty
_customMaterialPropertyName
_customRenderGraphEnabled
_cvDisplayLink
_cyan
_damping
_data
_dataKind
_dataKindForComputeKernel
_dataOffset
_dataSource
_dataStride
_debug
_debugDrawer
_debugOptions
_decelerationDistance
_deepCloneWithRemapTableOut:
_defaultBackgroundColor
_defaultCubeTexture
_defaultDepthStencilState
_defaultLightingEnvironmentIrradianceTexture
_defaultLightingEnvironmentRadianceTexture
_defaultPOVForWorld:
_defaultProgramForTessellation
_defaultRenderGraph
_defaultSamplerState
_defaultShape
_defaultTargetForWorld:
_defaultTexture1D
_defaultTexture3D
_defaultVehicleRayCaster
_definition
_deformNormalBuffer
_deformNormalStageInputOutputDescriptorInfo
_deformPositionBuffer
_deformPositionStageInputOutputDescriptorInfo
_deformTangentBuffer
_deformTangentStageInputOutputDescriptorInfo
_deformedNode
_deformedToDrivingBindingTransform
_deformer
_deformerInstances
_deformerStackDidChange:
_deformerStackWillDie:
_deformers
_deindexedToFirstDeindexedTableBuffer
_deindexedToFirstDeindexedTableBufferIndexSize
_deindexedToOriginalTableBufferIndexSize
_delegate
_delegationConformance
_deleteOriginalData
_deltaTime
_depthAndStencilStateWithReadWriteDepthDisabled
_depthOfField
_depthOffCullOffStates
_depthOffCullOnStates
_depthOnCullOffStates
_depthOnCullOnStates
_depthOnly
_depthPrePass
_depthTextures
_desc
_description
_descriptor
_destination
_deviceQueue
_diagnostics
_dictionaryForFrequency:
_didDecodeVFXCamera:
_didDecodeVFXIKConstraint:
_didDecodeVFXLOD:
_didDecodeVFXMaterialProperty:
_didDecodeVFXMorpher:
_didDecodeVFXNode:
_didDragTo:
_didEverFocusNode
_didMutate
_didRenderWorld:
_didUpdateBackingSize
_diffNode:with:path:
_diffObject:with:path:
_diffuse
_directionForScreenPoint:viewport:
_discardOriginalTopology
_discardTextures
_discretizedStraightLineMaxLength
_displacement
_displayAspect
_displayID
_displayLink
_displayLinkCreationRequested
_displayLinkStatsTack
_displayLinkStatsTick
_displayScaleFactor
_distance
_documentURL
_documentUUID
_doubleSided
_doughnutBokeh
_downSamplePipeline
_draggedTransform
_drawAtTime:
_drawDebugInAuthoringEnvironment:
_drawForJittering
_drawFullScreenTexture:
_drawInRenderingQueueWithDrawable:renderPassDescriptor:
_drawIndexedPrimitivesIndirectBuffer
_drawIndexedPrimitivesIndirectBufferOffset
_drawOnMainThreadPending
_drawPBRTextures
_drawPatchForMeshElement:instanceCount:
_drawScale
_drawable
_drawableDescriptor
_drawablePresentedHandlers
_drawableResizesAsynchronously
_drawableSafeAreaInsets
_drawsArea
_drivenBydefaultNavigationCameraController
_dstAssociatedNode:
_dstHasAssociatedNode:
_dstToSrc
_dump:
_dumpNodeTree:tab:
_dumpToDisk
_dumpTree
_duration
_dynamicLinesInfo
_dynamicLinesNoDepthTestInfo
_dynamicTrianglesInfo
_edgeCreasesElement
_edgeCreasesSource
_edgeTessellationFactor
_editingSpace
_editorLocked
_effectRoot
_effectiveFeatures
_effectiveIndexCount
_effectiveIndexOffset
_effectiveModifier
_effectiveStickyAxis
_effectsDictionary
_elapsedTime
_elementData
_elementSize
_elements
_emission
_emulateStereo
_enableARMode
_enableFreeCamera
_enabled
_enabledTypes
_encodeCustomMainPassProcessForRenderer:atTime:helper:
_encodeDataAsHalf
_encoder
_endDraggingWithVelocity:
_endFrame
_endImGuiFrameAndRender
_endTime
_engineContext
_enqueueCopyFromTexture:toTexture:blitEncoder:generateMipMaps:
_entityHandle
_entityObject
_entryPoint
_enumerateDependencyNodesUsingBlock:
_environment
_error
_euler
_eventBlock
_eventTime
_executeDrawCommand:
_expandItem:
_explicitMomentOfInertia
_exportAsMovieOperationWithDestinationURL:size:attributes:delegate:didEndSelector:userInfo:
_exposure
_fStop
_fadeOutDuration
_falloff
_features
_fetchMesh
_fieldGeometry
_fieldOfView
_fieldOfViewZoomFactor
_filename
_fillBackward
_fillForward
_fillMode
_fillNodeA:nodeB:
_fillNodeA:nodeB:contactPoint:collisionImpulse:distance:hitFraction:
_fillVertexDescriptor:withMeshSource:semantic:inputSet:bufferIndex:
_fillVertexDescriptor:withSemantic:inputSet:bufferIndex:vertexFormat:offset:stride:
_filmOffset
_filterQuality
_finalAttachementIdentifier
_finalDataKind
_finalMesh
_finalMeshDataKind
_finalMeshVertexCount
_finalNormalBuffer
_finalPositionBuffer
_finalRenderTexture
_finalTangentBuffer
_findAssociatedNode:inSubtree:ignoring:
_findChild:inChildrenOf:index:
_findComponentWithType:
_firstDrawDone
_firstMaterial
_firstSimulationDone
_fixedBoundingBoxExtrema
_flatness
_flattened
_flyModeVelocity
_focalBlurSampleCount
_focalLength
_focusBehavior
_focusDistance
_focusFrameInView:
_fogColor
_fogDensityExponent
_fogStartDistance
_font
_forceAsyncShaderCompilation
_forceField
_forceFieldsDictionary
_forceFieldsRoot
_forcesBackFaceCasters
_fraction
_fragmentBuffers
_fragmentFunction
_fragmentFunctionName
_fragmentSamplers
_fragmentTextures
_frameBindings
_frameBufferBindings
_frameConstantBufferPool
_frameTexturePool
_frameUniforms
_frameVolatileBufferPool
_framebuffer
_framebufferInfo
_framebufferSize
_frameworkLibrary
_freeAxes
_freeCameraActivated
_freeIndices
_freeViewCameraNode
_freeVolatileMeshElements
_frequency
_fresnelExponent
_friction
_fromAngle
_fromShift
_fromZ
_gainColor
_gainOffset
_gamma
_gammaColor
_gammaOffset
_generateDefaultShapeForNode:
_generateLock
_generatedTexturePath
_geometry
_geometryByRemovingSkinnerSources
_geometryByUnifyingNormalsWithCreaseThreshold:
_geometryByWeldingVerticesWithThreshold:normalThreshold:
_getDeformedMeshBoundingBox:
_ghostPairCallback
_gimbalLockEnabled
_gobo
_grain
_graph
_graphicalSelectionEnabled
_gravity
_grayDark
_grayLight
_grayMedium
_green
_grid
_gridUnit
_handleIfAny
_handleKeyDownToSwitchCamera:
_handlingInteraction
_hasAutomaticCameraTarget
_hasComponentBitmask
_hasDefaultValues
_hasFixedBoundingBoxExtrema
_hasLighting
_hasPivot
_heightSegmentCount
_hidManager
_highlightNode
_hingeHandle
_hitTest:viewport:options:
_identifier
_iesInfo
_ignoreGravity
_ikTarget
_image
_imageProxyWillDie:
_imageWillDie:
_imguiFrameStarted
_imguiHandleMouseDown
_importOptions
_inBetweenCounts
_inBetweenInfluenceWeights
_inFlightSemaphore
_inRenderQueueForLayerBackedGLRendering
_incremental
_incrementalAddPipeline
_incrementalInitPipeline
_index
_indexBuffer
_indexCount
_indexOfRefraction
_indexPathForNode:
_indexType
_indices
_indicesChannelCount
_inertia
_inertiaVelocity
_influenceFactor
_infoHangle
_initChildNodesArray
_initRendererWithOptions:
_initWithDevice:options:isPrivateRenderer:privateRendererOwner:clearsOnDraw:
_initWithEngineContext:
_initialBuffersStageInputDescriptor
_initialInputLocation
_initialMatrix
_initialNormalBuffer
_initialNormalStageInputOutputDescriptorInfo
_initialPoint
_initialPointOfViewWorldPosition
_initialPositionBuffer
_initialPositionStageInputOutputDescriptorInfo
_initialSelection
_initialTangentBuffer
_initialTangentStageInputOutputDescriptorInfo
_initialZoom
_injectionPointRanges
_innerBindingOffsetsBuffer
_innerLayerInfluencesBuffer
_innerRadius
_inputLocation
_insideTessellationFactor
_inspector
_installFreeViewCameraIfNeeded
_installViewport
_instance
_instanceCount
_integrateModelKitComputedMaps:withGeometry:node:texturePathProvider:vertexAttributeNamed:materialPropertyNamed:filePath:
_intensity
_interactionMode
_interleavedIndicesChannels
_invView
_invalidateFramebuffer
_invalidated
_isAReference
_isAnimating
_isAuthoring
_isColored
_isCommonProfileProperty
_isDefault
_isEditor
_isEffectivelyHidden
_isFront
_isGizmo
_isGroup
_isHidden
_isInertiaRunning
_isInvalidated
_isJoint
_isLayerBacked
_isLegacySingleLayerDeformer
_isLocationValid:inViewport:
_isMetalSupported
_isMouseDown
_isNameUnique:
_isNodeInsideFrustum:withPointOfView:viewport:
_isOpaque
_isOrbiting
_isPartOfSelection:
_isPoint:insideFrustumForView:
_isPresentationObject
_isPrivateRenderer
_isRunningInExtension
_isTargetFromHitTest
_isTextureSource
_isUsingSparseTargets
_isValid
_isValidationEnabled
_isViewPrivateRenderer
_isViewedObjectSphereComputed
_isWorldBoundingSphereComputed
_iteration
_jitterAtStep:updateMainFramebuffer:redisplay:jitterer:
_jitterRedisplay
_jitterer
_jitteringEnabled
_jointsPerNode
_keepTargetDirection
_keyPath
_keyValues
_keyboard
_keys
_kvoKeysForwardedToRenderer
_lastDisplayLinkTime
_lastDragLocation
_lastDragTime
_lastFramePositionBuffer
_lastFrameTime
_lastGridDistance
_lastInputLocation
_lastKeyInputTime
_lastModifierFlags
_lastMorpherIncrementalPassState
_lastRenderedTime
_lastRotationAngle
_lastSimulationTime
_lastUpdate
_lastWorldTime
_layer
_layerDidChange:
_layerRoot
_layerRootNode
_layerTarget
_layerTreeDidUpdate
_layoutLocked
_legacyAdditiveWritesToAlpha
_legacyDeformedNodeUVChannel
_legacyDrivingNode
_legacyDrivingNodeUVChannel
_legacyOffsetsOrTransformsBuffer
_legacyView
_lengthSegmentCount
_lensBlur
_library
_libraryURL
_liftColor
_liftOffset
_light
_lightBindings
_lightBufferBindings
_lightGeometry
_lightLoaded
_lightProbesInfo
_lightProbesProgram
_lightRoot
_lighting
_lightingInjectionPointRanges
_lightsDictionary
_line
_linearRestingThreshold
_litPerPixel
_load
_loadReferencedWorldWithURL:
_loadURL:into:options:statusHandler:error:
_loadURLWithBundle:
_loadWithNode:fromURL:
_loadWithURL:
_loadingPolicy
_localFront
_lock
_lod
_logLightingInformation
_logicalHeight
_logicalWidth
_logsInfo
_lookUpFoundInstance
_lookUpKey
_lookupTable
_loops
_lowLatency
_magnificationFilter
_mainTargetNamesToIndexes
_mainTargets
_mainTargetsAndInBetweens
_makeReverseItem
_manager
_manipulableTransform
_manipulator
_manipulatorEvent
_mapToSphere:inViewport:
_maskCenter
_maskEnabled
_maskRadius
_mass
_material
_materialPropertyClass
_materialWillDie:
_materialWithName:
_materials
_maxAnisotropy
_maxInFlightFrameCount
_maximumAngles
_maximumDirectionAngle
_maximumDistance
_maximumEdgeLength
_maximumLinearAcceleration
_maximumLinearVelocity
_maximumPointScreenSpaceRadius
_maximumShadowDistance
_mesh
_meshByRemovingSkinnerSources
_meshByUnifyingNormalsWithCreaseThreshold:
_meshByWeldingVerticesWithThreshold:normalThreshold:
_meshChanged
_meshElement
_meshElementWillDie:
_meshSource
_meshSourceWillDie:
_meshWillDie:
_message
_metalness
_minificationFilter
_minimumAngles
_minimumDistance
_minimumLanguageVersion
_minimumPointScreenSpaceRadius
_mipFilter
_mirrored
_mkSemantic
_mode
_modeSensitivity
_model
_modelLoaded
_modelPath
_modelPathComponents
_modelSourceWithData:semantic:vectorCount:componentType:componentCount:dataOffset:dataStride:
_modelSourceWithSource:vertexFormat:
_modelToPresentationRemapTable
_modelWillDie:
_momentOfInertia
_morphDeformer
_morphKind
_morphNormals
_morphTargetCount
_morphTargetNormalDataType
_morphTargetPositionDataType
_morphTargets
_morphTargetsSparseIndicesBuffer
_morphTargetsVertexBuffer
_morphWillDie:
_morpher
_morpherLoaded
_motionBlur
_mouseClickCount
_mouseDown
_mouseDownLocation
_mouseDragged
_mouseUpLocation
_msaaColorTextures
_msaaDepthTextures
_mtkTextureLoader
_mtkView
_mtlBuffer
_mtlTexture
_mtlTextureCache
_mtlVertexFormat
_multiply
_mutabilityTimestamp
_mutex
_name
_names
_navigationCameraController
_needSuperSampling
_needsRedraw
_needsRedrawAsap
_needsRenderResource
_needsRepetitiveRedraw
_newComputeDescriptorForPipelineDesc:library:
_newMTLBufferFromPoolWithLength:
_newProgramWithHashCode:engineContext:introspectionDataPtr:
_newSubBuffer
_nextFrameTime
_node
_nodeA
_nodeB
_nodeBindings
_nodeBufferBindings
_nodeRef
_nodeScale
_nodeUniforms
_nodeWithIndexPath:
_nodesInsideFrustumWithPointOfView:viewport:
_notifyModelChanged
_nsWindow
_nsWindowLayer
_objectController
_occluder
_offScreenFramebuffer
_opacity
_operateOnDataUsingCompressionAlgorithm:operation:
_operations
_optimizeKeyframesWithTarget:
_optimizeTriangleIndices
_optimizedmodelElementWithData:primitiveType:primitiveCount:bytesPerIndex:
_options
_optionsForSymbol:
_orbitAtPoint:forView:globalBoundingSphere:
_orientationForMode
_orientationOffset
_orientationState
_originalData
_originalDataCount
_originalFocal
_originalFov
_originalLightingSourceCode
_originalMouseLocation
_originalOrthoScale
_originalRenderPassDescriptor
_originalSourceCode
_originalToFirstDeindexedTableBuffer
_originalToFirstDeindexedTableBufferIndexSize
_originalTransform
_orthographicScale
_orthographicScaleForZoomFactor:
_orthographicViewSpaceTranslationForZoomAtScreenPoint:scaleDelta:viewport:
_orthographicZoomFactor
_orthographicZoomFactorForProposedZoomFactor:
_otherMouseEventMonitor
_outerBindingOffsetsBuffer
_outputURL
_overlayDynamicLinesInfo
_overlayDynamicTriangleInfo
_overlayLayerRoot
_overrides
_ownedCommandQueue
_owner
_ownerWillDie
_pages
_paleBlue
_paleGreen
_panel
_parallaxCenterOffset
_parallaxCorrectionEnabled
_parallaxExtentsFactor
_parameters
_parentPage
_parentView
_parseAndSetShaderModifier:
_parseBindings:function:renderPipeline:
_partitionMode
_pass
_passBindings
_passBufferBindings
_passWillDie:
_path
_pauseAnimation:forKey:pausedByNode:
_pausedByInheritance
_pendingAllocationListener
_pendingGPUFrameCount
_pendingMoveEvent
_perVertexTrianglesIndices
_perVertexTrianglesOffsets
_physicsBodies
_physicsBodiesLock
_physicsJoints
_physicsShape
_physicsWorld
_physicsWorldCreateIfNeeded:
_pinchShouldMoveCamera
_pink
_pipeRadius
_pipeSegmentCount
_pipeline
_pipelineStateHashForMeshElement:patchType:
_pitch
_pixelBuffer
_pixelFormat
_planarTranslationHandleXY
_planarTranslationHandleXZ
_planarTranslationHandleYZ
_planarTranslationHandles
_planarTranslationLayout
_playerRef
_pointIndicesBuffer
_pointOfView
_pointOfViewIsSelected
_pointOfViewOrthographicScale
_pointOfViewUsesOrthographicProjection
_pointOfViewWasSet
_pointSize
_pointsOfViewRoot
_position
_postCommandWithBlock:
_postProjectionTransformScale
_postProjectionTransformTranslation
_preTick:
_precompiled
_precomputedLightingEnvironmentWillDie:
_preferredFramePerSeconds
_preferredFrameRate
_preloadRenderer
_prepareFreeViewCamera
_prepareMaterialTextures:
_prepareRenderTarget
_prepareSnapToAlignData:minOffset:maxOffset:
_prepareUpdate
_presentFramebuffer
_presentationItemsLock
_presentationMappingChannel
_presentationNodeTransforms
_presentationObject
_presentationWeightForTargetAtIndex:token:
_preserveScale
_preventWarmup
_primitiveRanges
_primitiveType
_printData
_privateRendererOwner
_privateRendererOwnerDelegationConformance
_probeEnvironment
_probeExtents
_probeOffset
_probeType
_probeUpdateType
_processingContext
_profile
_program
_programDidChange:
_programHashCodeWillDie:
_programMutex
_programWillDie:
_progress
_projectPoint:viewport:
_projectPoints:count:viewport:
_projectionMatrix
_projectionTransform
_properties
_property:
_propertyType
_provider
_proximityHidden:
_quadrantIndicesCount
_quadrantIndicesOffset
_quadrantRingIndicesCount
_quadrantRingIndicesOffset
_quaternion
_queue
_queuedFrameCount
_radialSegmentCount
_radialSpan
_radianceData
_rasterizationRateMap
_rasterizationRateMapBlitPipeline
_rasterizerStateDidDie:
_rate
_rawQuilt
_rayTestWithSegmentFromPoint:toPoint:options:
_reSyncModelTree
_readSubdivCacheForHash:
_readonly
_readsFromDepthBuffer
_rebuildRasterizationRateMap
_rebuildTextures
_recordingPointOfViewEvents
_recycleMTLBufferToPool:
_red
_reduceStatsOfConstantBuffer:
_referenceNode
_referenceObject
_referenceURL
_reflectionCategoryBitMask
_reflectionFalloffEnd
_reflectionFalloffStart
_reflectionProbeArrayTexture
_reflectionResolutionScaleFactor
_reflectionSampleCount
_reflective
_reflectivity
_registerAsObserver
_registerPhysicsJoints
_registeredBodies
_registry
_releaseCachedSourcesAndElements
_reliesOnFrustum
_reliesOnTransforms
_remoteEditionEndpoint
_remotePreviewDelegate
_removeAllMaterials
_removeButton
_removeChild:
_removeComponentWithType:
_removeConstraint
_removeFromParentNodeWithoutRemovingWorldReference
_removeMatchingProgram:pass:
_removeOwner
_removedOnCompletion
_renderContext
_renderContextMetal
_renderEncoder
_renderGraph
_renderMode
_renderPassParameters
_renderSize
_renderTargetInfo
_renderTargetSize
_renderThreadPriority
_renderWithViewport:encoder:passDescriptor:commandQueue:commandBuffer:
_renderWorldWithEngineContext:
_renderer
_renderer:didApplyAnimationsAtTime:
_renderer:didApplyConstraintsAtTime:
_renderer:didBuildSubdivDataForHash:dataProvider:
_renderer:didRenderWorld:atTime:
_renderer:didSimulatePhysicsAtTime:
_renderer:inputTimeForCurrentFrameWithTime:
_renderer:subdivDataForHash:
_renderer:updateAtTime:
_renderer:willRenderWorld:atTime:
_rendererKind
_renderingSnapshot
_rendersContinuously
_rendersIntoMaterial
_repeatCount
_replayLoopRange
_replicateOrientation
_replicatePosition
_requireLoadFinalTexture
_reserved
_reserved2
_reset
_resetBrowseScaleFactor
_resetContentsScaleFactor
_resetFreeViewCamera
_resetLightAuthoringWithContainerNode:source:light:
_resetOrientationState
_reshape
_resizeLayer:toSize:updateLayer:updateTransform:caRenderer:
_resolveURL
_resourceBlitEncoder
_resourceCommandBuffer
_resourceComputeEncoder
_resourceGroup
_resourceManager
_resourceManagerMonitor
_resourceQueue
_restartSource
_restartSourceIsSuspended
_restitution
_resyncObjCModelOfPerTypeParametersWithOldType:
_reverseActiveState
_rollingFriction
_root
_rootDst
_rootLayer
_rootNode
_rootSrc
_rotateByX:Y:
_rotateWithDrag:mode:stickyAxis:
_rotation
_rotationHandles
_rotationRepresentation
_rotationSensitivity
_roughness
_runFPSTestWithDuration:
_runningInExtension
_runningLock
_runtimeResolvedURL
_sampleCount
_sampleDistributedShadowMaps
_samplerInput
_samplersUsageMask
_saturation
_saveOriginalData
_scale
_scaleNode
_scaleOffset
_scaleWorldBy:
_sceneDidEnterBackground:
_sceneWillEnterForeground:
_screenSize
_screenSpace
_screenSpaceReflectionMaxRayDistance
_screenSpaceReflectionSampleCount
_screenSpaceReflectionStride
_screenSpaceRotation
_screenTransform
_scrollWheelModifiers
_scrollWheelMultiplier
_searchBindings:forArgumentNamed:type:
_seed
_segmentCount
_selectedAxis
_selectedNodes
_selecting
_selection
_selectionBoundingSphere:
_selectionDelegate
_selectionIsReadonly
_selectionP0
_selectionP1
_selectionTransformMode
_selfDelegationConformance
_selfIllumination
_selfIlluminationOcclusion
_semantic
_semanticInfos
_semantics
_sensorSize
_session
_setAnimation:
_setAnimationRef:
_setAntialiasingMode:forcingReset:
_setAuthoringEnvironment:
_setBackingSize:
_setBaseMesh:
_setBtShape:
_setCFXImageRef:
_setCFXProgram
_setCFXProgramDelegate
_setColor:
_setComponent:withType:
_setContentsScaleFactor:
_setDisplayScaleFactor:
_setEngineStats:
_setGeometryRef:
_setHasFocusableChild
_setImagePath:withResolvedURL:
_setInertiaRunning:
_setLegacyAdditiveWritesToAlpha:
_setMeshBuffers:
_setNeedsDisplay
_setNodeScale:
_setOwner:
_setParent:
_setPausedOrPausedByInheritance:
_setPhysicsShape:
_setPointOfViewOrthographicScale:
_setPosition:
_setReflectionProbeArrayTexture:
_setRootNode:immediate:
_setScale:
_setSkeleton:
_setValue:forKeyPath:
_setWorldBufferAtVertexIndex:fragmentIndex:
_settings
_setupAuthoringEnv2:
_setupContentsFromCFXImage
_setupFrom:
_setupMaterialProperty:
_setupMeshElements
_setupMeshSources
_setupMovieToWritableFile:
_setupObjCModelFrom:
_setupOffscreenRendererWithSize:
_setupShadableHelperIfNeeded
_setupUpVector
_setupWithModel:thresholdMode:value:
_shadable
_shadableBindings
_shadableBufferBindings
_shadableSetValue:forUndefinedKey:
_shaderCompilationGroup
_shaderModifiers
_shaders
_shadingModel
_shadowBias
_shadowCascadeCount
_shadowCascadeDebugFactor
_shadowCascadeSplittingFactor
_shadowIntensity
_shadowKernelBuffer
_shadowMapSize
_shadowRadius
_shadowSampleCount
_shape
_shapeHandle:
_sharedIndexBufferOffset
_shininess
_shouldBakeDirectLighting
_shouldBakeIndirectLighting
_shouldCaptureNextFrame
_shouldDelegateARCompositing
_shouldDeleteFramebuffer
_shouldForwardWorldRendererDelegationMessagesToPrivateRendererOwner
_shouldForwardWorldRendererDelegationMessagesToSelf
_shouldHandleOtherMouseButtonDrag
_shouldIgnoreMomentumEvents
_shouldInheritContentsScale:
_shouldPostUpdate
_shouldPresentAfterMinimumDuration
_shouldPresentWithTransaction
_shouldRecycle
_shouldSnapOnGrid
_shouldSnapToAlign
_shouldStream
_shouldUpdateTarget
_shoulderAngle
_shoulderStrength
_showAuthoringEnvironment
_showsAuthoringEnvironment
_simulateCommandBufferFailure
_size
_sizeCache
_skeleton
_skinDeformer
_skinNormals
_skinTangents
_skinWillDie:
_skinner
_skinnerLoaded
_skipFramesIfNoDrawableAvailable
_slice
_sliceTextures
_sliderHandle
_smoothNormalsDeformer
_smoothNormalsPipeline
_smoothingMode
_snapLock
_snapPositionToAlign:original:unit:axisMove:rayStart:rayDir:didSnap:snapIndexes:
_snapToAlignCount
_snapXIndexes
_snapYIndexes
_snapZIndexes
_snapshotImageData
_snapshotImageDataLength
_snapshotRenderer
_softness
_sourceDocumentURL
_sourceFile
_sourceState
_sources
_specular
_specularDFGDiffuseHammonTexture
_speed
_sphereType
_spherehemispheric
_sphericalHarmonics
_splatDeformedToFinalPipeline
_splatPipeline
_splatUniforms
_spotFalloffExponent
_srcAssociatedNode:
_srcToDst
_ssao
_stack
_stageDescriptor
_stageDescriptorsLock
_stageInputOutputDescriptors
_startBrowsingIfNeeded:
_startObservingProgram
_startTime
_state
_stateController
_stateItems
_stateLock
_stateManager
_statisticsTimeStamp
_step:
_stickyAxis
_stickyDirection
_stickyMove
_stopInertia
_stopObservingProgram
_strength
_subdividedCopyWithSubdivisionLevel:
_subdivisionIsAdaptive
_subdivisionLevel
_subdivisionSettings
_subnodeFromIndexPath:
_subp
_subsurface
_subsurfaceRadius
_succeded
_superSamplingFactor
_supersampling
_supportsJitteringSyncRedraw
_surroundToSelect
_switchToFreeViewCamera
_symbolToUnbinder
_syncEntityObjCModel
_syncObjCAnimations
_syncObjCModel
_syncTimeWithCoreAnimation
_systemTime
_systemTimeAnimationStarted:
_tag
_targetDirection
_targetOffset
_targetRelativeToPointOfViewParent
_targetState
_targetedFrameInterval
_targets
_targetsProxy
_tempLoadedJoints
_temperature
_temporalAntialiasingEnabled
_tessellationControlShader
_tessellationEvaluationShader
_tessellationFactorBuffer
_tessellationFactorScale
_tessellationVertexDescriptor
_tessellationVertexDescriptorHash
_tessellator
_tessellatorValueForGeometry:
_textInfo
_texture
_textureCache
_textureComponents
_textureDescriptorFromImage:needsMipMap:textureOptions:
_textureID
_texturePixelFormat
_textureProvider
_textureTarget
_texturesUsageMask
_threshold
_thresholdSmoothness
_tilt
_time
_timeOffset
_timeStamp
_timeStep
_timedRecordingBuffer
_timedRecordingBufferEnd
_timedRecordingBufferStart
_timedRecordingExpirationTime
_toAngle
_toShift
_toZ
_toeLength
_toeStrength
_toneMapping
_topRadius
_totalDragWithInertia
_trackedResourcesToHashcode
_transform
_transformUpToDate
_transforms
_transitions
_translateHandles
_translateTo:
_translateToViewPoint:
_translationAllowed
_translationCoef
_translationOrigin
_transparencyMode
_transparent
_triggersEnabled
_truckSensitivity
_twistHandle
_type
_uniforms
_unifyNormal
_uninterleaveData:count:srcOffset:srcStride:dstStride:
_unprojectPoint:viewport:
_upDir
_upDirIsSet
_upVector
_updateActionWithEvent:
_updateAffine
_updateArcballOrientation
_updateAssociatedVFXNodeWithGeometrySetter:texturePathProvider:vertexAttributeNamed:materialPropertyNamed:
_updateBackingSize
_updateCFXImageWithContents:
_updateCloneStateWithEvent:
_updateCollisionShape
_updateContentsScaleFactor
_updateContraintAndAddToWorld:
_updateCount
_updateEngineCallbacks
_updateFieldOfView
_updateFocalLength
_updateFocusableCache
_updateInertiaAtTime:
_updateMaterialAVPlayer:
_updateMaterialAsset:
_updateMaterialCaptureDevice:
_updateMaterialCaptureDeviceOutputConsumerSource:
_updateMaterialColor:
_updateMaterialFilters
_updateMaterialImage:
_updateMaterialLayer:
_updateMaterialMTLTexture:
_updateMaterialNumber:
_updateMaterialPropertyTransform:
_updateMaterialUIComponent:
_updateOpacity
_updatePrecomputedLightingEnvironment:
_updateProbeStamp
_updateProbes:progress:
_updateProbes:progress:completionHandler:
_updateProjectionMatrixForOrthographicSkyboxRenderingIfNeeded:
_updateRuntimeItems
_updateScale
_updateSelectionWithSelectionFrame:
_updateSphereType
_updateTargetsAndInBetween:
_updateTransform
_updateUISelection:
_updateVFXCorePause
_updateVFXCoreSpeedFactor
_updateVFXCoreTime:
_updateWithAbsoluteTime:usingLoopRange:
_updateWithManifold:index:point:
_url
_useCustomContainerFrame
_useFallbackCopyKernel
_useSparseTargets
_usedCount
_usedResources
_usedVolatileMeshElements
_userAnimation
_userInfo
_userInfoLock
_usesAbsoluteTime
_usesCustomColorSpace
_usesCustomPixelFormat
_usesCustomScaleFactor
_usesIOSurface
_usesLayeredRendering
_usesMultipleViewportRendering
_usesOrthographicProjection
_usesSpecificMainPassClearColorForRenderer:clearColor:
_value
_valueForKey
_valueForKeyLock
_valueForKeyPath:world:
_valueForSimdVectorKeyPath:
_valueTransformer
_valuesForUndefinedKeys
_valuesForUndefinedKeysLock
_vectorCount
_vehicleRayCaster
_velocity
_version
_vertexBuffers
_vertexCount
_vertexCountForComputeKernel
_vertexDescriptor
_vertexDescriptorHash
_vertexFunctionName
_vertexShader
_vertexWeightIndexSize
_vertexWeightIndicesBuffer
_vfxAnimationForKey:
_vfxBindings
_vfxCoreViewConstants
_vfxCoreViewports
_vfxWorld
_videoOutput
_videoSourceFormat
_view
_viewIsOffscreen
_viewLocked
_viewMatrix
_viewMatrix0
_viewMatrix1
_viewedObjectSphere
_viewpointCoordinateSpace
_viewpoints
_viewport
_viewportDidChange
_vignetting
_visibleAndCanBecomeKeyLimitedOK:
_volatileBufferPools
_waitUntilCompleted
_wantsAdaptation
_wantsCustomMainPassProcessForRenderer:
_wantsHDR
_wantsScreenSpaceReflection
_wantsSeparateGeometryElements
_wantsWorldRendererDelegationMessages
_warnings
_wasPaused
_weightCount
_weightIndexForTargetNamed:
_weights
_white
_whiteBalanceTemperature
_whiteBalanceTint
_whitePoint
_width
_widthSegmentCount
_willBeginInteraction
_willRemoveFromPhysicsWorld:
_willRenderWorld:
_windowBackingDidChange:
_windowPreparing
_windowReady
_windowWillClose:
_wireframeProgram
_wireframeRenderer
_world
_worldBoundingSphere
_worldBuffer
_worldDidUpdate:
_worldGraph
_worldInitialMatrix
_worldMatrix
_worldReferenceCounter
_worldRenderer
_worldRendererIsVFXView
_worldUniforms
_wrapS
_wrapT
_wrapped
_writeSubdivCacheForHash:dataProvider:
_writesToDepthBuffer
_xAlignment
_xAxisToZAxisTransform
_xyPlaneToXZPlaneTransform
_xyPlaneToYZPlaneTransform
_yAlignment
_yAxisToZAxisTransform
_zAlignment
_zFar
_zFarForSkyboxRenderingProjectionMatrix:defaultZFar:
_zNear
_zoomFactor
absolutePath
absoluteString
absoluteURLForAssetPath:
accelerationConstraint
accelerationStructureCommandEncoder
accelerationStructureCommandEncoderWithDescriptor:
accelerationStructureSizesWithDescriptor:
acceptsFirstMouse:
acceptsFirstResponder
access
accessibilityDescription
accommodatePresentedItemDeletionWithCompletionHandler:
accommodatePresentedItemEvictionWithCompletionHandler:
accommodatePresentedSubitemDeletionAtURL:completionHandler:
action
activateBackground:
activateFreeCamera
activatePhysicsJoint:
active
activeState
adaptationBrighteningSpeedFactor
adaptationDarkeningSpeedFactor
adaptationMaximum
adaptationMinimum
adaptativeFrameRate
adaptive
add:
add::
addAnimation:
addAnimation:forKey:
addAnimation:to:keyPath:
addAnimationPlayer:forKey:
addBehavior:
addCameraNode:
addChild:
addChildNode:
addClient:
addClonesToWorld
addCollisionPlaneWithCenter:extents:transform:
addCollisionPlaneWithExtents:transform:
addCommandBufferCompletedHandler:
addCommandBufferScheduledHandler:
addCompletedHandler:
addComputePipelineFunctionsWithDescriptor:error:
addDebugMarker:range:
addDrawablePresentedHandler:
addEffectFrom:error:
addEffectFromTemplate:
addEffectNode:
addEffectWithEffectID:
addEntityObject:
addEntriesFromDictionary:
addFilePresenter:
addForceFieldNode:
addFunctionWithDescriptor:library:error:
addGenericRenderGraphErrorWithMessage:
addIndex:
addIndexes:
addInput:
addItemWithTitle:
addItemWithTitle:action:keyEquivalent:
addItems:toWorld:
addLightNode:
addLightWithType:
addLocalMonitorForEventsMatchingMask:handler:
addMeshRenderPipelineFunctionsWithDescriptor:error:
addNormalsWithAttributeNamed:creaseThreshold:
addObject:
addObjectsFromArray:
addObserver:forKeyPath:options:context:
addObserver:selector:name:object:
addOperation:src:dst:
addOperationWithBlock:
addOrthTanBasisForTextureCoordinateAttributeNamed:normalAttributeNamed:tangentAttributeNamed:
addOutput:
addOverride:forKeyPath:
addPassResourceBindingsForArgument:
addPhysicsBody:nodeRef:colGroup:colMask:colTest:
addPhysicsJoint:
addPresentedHandler:
addRenderPipelineFunctionsWithDescriptor:error:
addRepresentation:
addResidencySet:
addResidencySets:count:
addResourceBindingsForArgument:frequency:needsRenderResource:block:
addScheduledHandler:
addSplitHandler:
addState:
addStateItem:
addSubview:
addTileRenderPipelineFunctionsWithDescriptor:error:
addTo:
addTrackingArea:
addTransition:
addUIForArrayProperty:ofClass:
addUIForBoolProperty:
addUIForColorProperty:
addUIForContentsProperty:
addUIForFloatProperty:ofClass:
addUIForImageProperty:
addUIForIntProperty:ofClass:
addUIForMat4Property:
addUIForObjectProperty:
addUIForProperty:ofClass:instance:
addUIForVec2Property:
addUIForVec3Property:
addUIForVec4Property:
addUpdateRect:
addWorldReference:
addedNode:
additive
additiveWritesToAlpha
affectedByGravity
alignment
alignmentMode
allBehaviors
allObjects
allTargetsFromAnimCodec
allValues
allocWithZone:
allocateRegistry
allocatedSize
allocationMenuForClass:propertyName:
allocator
allowGPUOptimizedContents
allowLoadingFromFuture
allowRemoteEdition
allowedClasses
allowsCameraControl
allowsCreation
allowsResting
allowsReverseTransformation
allowsTranslation
alphaComponent
alphaCutoff
alternateTitle
ambientOcclusion
anamorphic
anchorAValue
anchorBValue
anchorPoint
angularDamping
angularRestingThreshold
angularSleepingThreshold
angularVelocityFactor
angularVelocityFactorValue
angularVelocityValue
animation
animationDidStart
animationDidStart:
animationDidStop
animationDidStop:finished:
animationDuration
animationEventWithKeyTime:block:
animationForKey:
animationFromWorld:
animationKeys
animationManager
animationPlayerForKey:
animationPlayerRef
animationPlayerWithAnimation:
animationPlayerWithAnimationPlayerRef:
animationPlayerWithVFXAnimation:
animationRef
animationTimingFunction
animationWithCAAnimation:
animationWithCFXAnimation:
animationWithContentsOfURL:
animationWithKeyPath:
animationWithMDLTransform:
animationWithVFXAnimation:
animations
antialiasingLevels
antialiasingMode
anyObject
aperture
apertureBladeCount
appendBytes:length:
appendData:
appendFormat:
appendImage:withPresentationTime:usingAdaptor:
appendPixelBuffer:withPresentationTime:
appendString:
appendWithTrigger:event:view:inWorld:
applicationDidEnterBackground
applicationWillEnterForeground
appliedOnCompletion
apply
applyBlock:
applyChangedStates
applyDiff:
applyForce:atPosition:impulse:
applyForce:impulse:
applyForceValue:atPosition:impulse:
applyForceValue:impulse:
applyFunction:withContext:
applyTorque:impulse:
applyTorqueValue:impulse:
applyType:
architecture
archive:contentsForEntryName:
archive:streamForEntryName:
archiveData
archiveStream
archiveToDesktop:
archivedDataWithRootObject:options:
archivedDataWithRootObject:requiringSecureCoding:error:
areBarycentricCoordsSupported
areProgrammableSamplePositionsSupported
areRasterOrderGroupsSupported
areaExtents
areaPolygonVertices
areaType
argumentBuffersSupport
argumentIndex
array
array:didSelect:atIndex:
arrayByAddingObjectsFromArray:
arrayEditor
arrayLength
arrayOwnerPath
arrayType
arrayWithCapacity:
arrayWithObject:
arrayWithObjects:
arrayWithObjects:count:
asset
assetManager
assetNodeWithAsset:
assetPathResolver
assetRegistry
assetValue
assetWithEntityObject:
assetWithURL:
assetWithVFXNode:
assetWithVFXNode:bufferAllocator:
assetWithVFXWorld:
assetWithVFXWorld:bufferAllocator:
associateNodeTree:withNodeTree:root:
asyncRuntimeLock
attachNode:
attachmentProvider
attachments
attenuationDistance
attenuationEndDistance
attribute:atIndex:effectiveRange:
attributeIndex
attributes
attributesOfItemAtPath:error:
audioBuffer
audioBufferFormat
audioEngine
audioEnvironmentNode
audioFile
audioListener
audioNode
audioPlayer
audioPlayerWithAVAudioNode:
audioPlayerWithSource:
audioPlayers
audioSource
audioSourceNamed:
audioSourceWithAVAudioPCMBuffer:
authoringCamera:
authoringCameraNodes
authoringCameraType
authoringEnvironment
authoringEnvironment2
authoringEnvironment:didCloneSelection:
authoringEnvironment:didMoveItems:fromTransform:
authoringEnvironment:selectionDidUpdateWithProposedSelection:
authoringEnvironmentForWorld:
authoringEnvironmentForWorld:createIfNeeded:
authoringEnvironmentForWorldRenderer:
authoringEnvironmentForWorldRenderer:createIfNeeded:
authoringGraph
authoringLayer
authoringOverlayLayer
authoringTargetNode
autoAdjustCamera
autoSwitchToFreeCamera
autoenablesDefaultLighting
automaticCameraTarget
automaticallyAdjustsShadowProjection
automaticallyAdjustsVideoMirroring
automaticallyAdjustsZRange
automaticallyNotifiesObserversForKey:
automaticallyPrepareScene
autoplacementForNewObject
autorelease
autoreverses
avPlayer
availableData
averageGray
avoidOccluderConstraint
avoidOccluderConstraint:didAvoidOccluder:forNode:
avoidOccluderConstraint:shouldAvoidOccluder:forNode:
avoidOccluderConstraintWithTarget:
avoidsOverLighting
axisA
axisAValue
axisB
axisBValue
backFaceTest
backReferenceValue
background
backingScaleFactor
backingSizeForBoundSize:
ballSocketWithBody:anchor:
ballSocketWithBodyA:anchorA:bodyB:anchorB:
baseColor
baseGeometry
baseGeometryBindTransform
baseMesh
baseMeshBindTransform
baseState
baseState:on:
becomeCurrentWithPendingUnitCount:
becomeFirstResponder
begin
beginConfiguration
beginEditingNodes:
beginFrame:
beginFrameAtTime:timeStamp:
beginImgUIFrameWithViewportSize:backingScaleFactor:
beginInteraction:withViewport:
beginOrbiting
beginRenderPass:renderEncoder:
beginRenderPass:renderEncoder:parameters:
beginTime
beginTransaction:
behaviorGraph
behaviorGraphWithEntityObject:
benchResult
bezierPath
bezierPathWithOvalInRect:
bias
biasValues
billboardConstraint
bind:toObject:withKeyPath:options:
bindAnimatablePath:toObject:withKeyPath:options:
bindBlock
bindTo:withKeyPath:valueTransformerName:
bindingMode
bindingName
bindingOf:named:
bindingValueForKey:
bindingWith:named:
bindings
blackColor
blendFactor
blendMode
blendOutDuration
blitCommandEncoder
blitCommandEncoderWithDescriptor:
block
bloom
bloomColorFilter
bloomContrast
bloomIntensity
bloomIterationCount
bloomIterationSpread
bloomThreshold
bloomThresholdSmoothness
bloomUseHighQuality
blueComponent
bodyA
bodyB
bodyWithType:shape:
boneIndices
boneInverseBindTransforms
boneNode
boneWeights
bones
boolForKey:
boolValue
boundingBox
boundingBoxMax
boundingBoxMin
bounds
bridgedComponentNames
brightness
buffer
buffer::::
bufferAtIndices:
bufferBytesPerRow
bufferDataSize
bufferDataType
bufferIndex
bufferOffset
bufferPointerType
bufferSize
bufferStructType
buildAccelerationStructure:descriptor:scratchBuffer:scratchBufferOffset:
buildAccelerationStructureDescriptorsWithEntity:
buildIdentifierRemapTable
buildTessellationVertexDescriptorIfNeeded
builtinEffectIdentifiers
builtinProperties
bundleIdentifier
bundlePath
bundleURL
bundleWithIdentifier:
buttonNumber
bytes
bytesPerComponent
bytesPerIndex
cStringUsingEncoding:
caAnimation
cachedTextureWithURL:token:
cachedTextureWithURL:token:didFallbackToDefaultTexture:
callStackSymbols
camera
cameraAutomaticTargetPoint
cameraControlConfiguration
cameraController
cameraFocusPlaneGeometry
cameraFrustumGeometry
cameraGeometry
cameraInertiaDidEndForController:
cameraInertiaWillStartForController:
cameraNearPlaneGeometry
cameraOrthographicFrustumGeometry
cameraRef
cameraRotationDidEndForController:
cameraRotationWillStartForController:
cameraTarget
cameraWillChange
cameraWithCameraRef:
cameraWithMDLCamera:
cameraWithVFXCamera:
canAddChildNode:
canAddOutput:
canBecomeFocused
canBecomeKeyWindow
canBecomeMainWindow
canDrawConcurrently
canImportFileExtension:
canImportFileUTI:
canRecycleParticleBuffers
canRepresentDisplayGamut:
cancel
cancelEdition
cancelPreviousPerformRequestsWithTarget:
canceled
capsuleWithCapRadius:height:
capsuleWithRadius:height:options:
capture:
captureDevice
captureDeviceOutputConsumer
captureDeviceOutputConsumerSource
captureDeviceOutputConsumerWithOptions:
captureNextFrame
captureOutput:didDropSampleBuffer:fromConnection:
captureOutput:didOutputSampleBuffer:fromConnection:
castsShadow
catchException:error:
cell
center
centerOfMassOffset
centerValue
cfxAnimation
cfxObject
cfxTimingFunction
chainRootNode
chamferMode
chamferProfile
chamferRadius
chamferSegmentCount
changeColor:
channelTargetCounts
channelTargetWeights
charValue
characterAtIndex:
characterIsMember:
characters
charactersIgnoringModifiers
charge
checkBounds:
checkResourceIsReachableAndReturnError:
checkUncommittedTransactions
childNodeWithAssetName:
childNodeWithName:
childNodeWithName:recursively:
childNodes
childNodesPassingTest:
childNodesPassingTest:recursively:
childNodesWithAttribute:recursively:
children
chromaticTransform
class
className
classNamed:
cleanCollisionCache
clear
clearAllForces
clearCaches
clearCoat
clearCoatRoughness
clearColor
clearCompiledLibraries
clearCorrectives
clearDepth
clearRoll
clearRuntimeItems
clearSnapIndexes
clearValue
clickCount
clientCGImage
clientCommandBuffer
clientCommandQueue
clientID
clientRenderCommandEncoder
clientRenderPassDescriptor
clientTexture
clientWillDie:
clipWithAnimation:name:
clock
clone
cloneAndSetupReplicationWithModelWorld:
cloneForManipulators
cloneModelToPresentationAndStartReplicationStream
cloneWithOption:
close
close:
closePath
collectOrphanNodes:dst:
collectOverrides
collectShaderForProgram:hashCode:newVertexFunctionName:newFragmentFunctionName:sourceCodeBlock:additionalFileBlock:
collectedShadersForPid:
collectsCompilationErrors
collideOutsidePlaneWithId:
collisionBitMask
collisionCategoryBitMask
collisionImpulse
color
color1
color2
color3
color4
color::::
colorAttachments
colorBufferWriteMask
colorChanged:
colorFilter
colorFringe
colorFringeIntensity
colorFringeStrength
colorGrading
colorMatchBiPlanarPixelBufferWithFormatType:pixelBufferYCbCrMatrix:pixelBufferColorPrimaries:pixelBufferTransferFunction:sourceTextureY:sourceTextureCbCr:sourceColorSpace:destinationColorSpace:destinationTexture:renderContext:
colorMatchSourceTexture:sourceColorSpace:destinationColorSpace:destinationTexture:renderContext:
colorMatchingComputePipelineStateForBiPlanarPixelBufferWithFormatType:pixelBufferYCbCrMatrix:pixelBufferColorPrimaries:pixelBufferTransferFunction:sourceColorSpace:destinationColorSpace:renderContext:
colorMatchingComputePipelineStateForSourceColorSpace:destinationColorSpace:renderContext:
colorPixelFormat
colorPixelFormatAtIndex:
colorSpace
colorUsingColorSpace:
colorWithAlphaComponent:
colorWithCGColor:
colorWithRed:green:blue:alpha:
colorspace
comboBox:objectValueForItemAtIndex:
commandBuffer
commandBufferDidCompleteWithError:
commandBufferStatusMonitor
commandBufferWithDescriptor:
commandBufferWithUnretainedReferences
commandQueue
commit
commitConfiguration
commitsOnCompletion
commonInit
commonProfile
commonProfileCacheLibrary
compare:
compilationErrors
completed
completedUnitCount
component
componentConformingToProtocol:
components
components:fromDate:
componentsJoinedByString:
componentsPerVector
componentsSeparatedByString:
componentsWithURL:resolvingAgainstBaseURL:
computeAutomaticTargetPoint
computeBoundingSphereOmittingFloorsForNode:sphere:
computeCommandEncoder
computeCommandEncoderWithDescriptor:
computeCommandEncoderWithDispatchType:
computeEvaluatorWithContext:srcDesc:dstDesc:duDesc:dvDesc:
computePipelineStateForKernel:
computePipelineStateForKernel:constants:constantsHash:
computePipelineStateForKernel:threadGroupSizeIsMultipleOfThreadExecutionWidth:
computePipelineStateForKernel:withStageDescriptor:stageDescriptorUpdateBlock:constants:constantsHash:
coneWithHeight:topRadius:bottomRadius:options:
coneWithTopRadius:bottomRadius:height:
configureStageInputOutputDescriptor:withDeformerFunction:
conformsToProtocol:
connect:to:format:
connectionWithMediaType:
constantData:
constantDataAtIndex:
constantOffsetAndSize::::
constantPopupChanged:
constantScaleConstraint
constantToString
constrainedEdgeLengthTessellationDrawMeshElement:forMesh:instanceCount:renderContext:
constraintRef
constraints
contactNormal
contactNormalValue
contactPoint
contactPointValue
contactTestBetweenBody:andBody:options:
contactTestBitMask
contactTestWithBody:options:
containerFrame
containsAlpha
containsValueForKey:
contentLayer
contentScaleFactor
contentView
contents
contentsAbsoluteURL
contentsAsCGImage
contentsChanged:
contentsForEntryName:
contentsOfDirectoryAtPath:error:
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
contentsScale
contentsTransform
continueInteraction:withViewport:sensitivity:
continuityValues
continuousCollisionDetection
continuousCollisionDetectionThreshold
contrast
controller
convertPoint:fromView:
convertPointToBacking:
convertPosition:fromNode:
convertPosition:toNode:
convertPositionValue:fromNode:
convertPositionValue:toNode:
convertSparsePixelRegions:toTileRegions:withTileSize:alignmentMode:numRegions:
convertSparseTileRegions:toPixelRegions:withTileSize:numRegions:
convertTime:fromLayer:
convertToAdditiveWithBaseMesh:
convertToSparseWithBaseMesh:
convertTransform:fromNode:
convertTransform:toNode:
convertTransformValue:toNode:
convertVector:fromNode:
convertVector:toNode:
convertVectorValue:fromNode:
convertVectorValue:toNode:
convexSweepTestWithShape:fromTransform:toTransform:options:
copy
copyAnimationChannelForKeyPath:animation:
copyAnimationChannelForKeyPath:property:
copyAnimationPathForKeyPath:animation:
copyBindingValueWithObjectName:bindingName:action:storageGetterBlock:
copyBitmap
copyCFXImageFromImage:
copyCFXImageFromImage:textureOptions:
copyCFXImageFromImage:textureOptions:wasCached:
copyFrom:
copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:
copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:
copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:
copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:
copyFromTexture:toTexture:
copyImageFromCFXImage:
copyIndirectCommandBuffer:sourceRange:destination:destinationIndex:
copyItemAtPath:toPath:error:
copyJointBindTransformsInto:maxCount:
copyModifiersFrom:
copyParameterDataToBuffer:offset:
copyPixelBufferForItemTime:itemTimeForDisplay:
copyPropertiesFrom:
copyShaderModifiersAndLanguageVersionFrom:
copyTextureByConvertingToCubeMapIfApplicable:engineContext:needsMipmap:
copyWeakRef
copyWithFilename:
copyWithOptions:
copyWithOptions:to:
copyWithZone:
coreEntityHandle
coreEntityHandleRef
cornerRadius
cornerSegmentCount
correctiveDriverCountForCorrectiveAtIndex:
correctiveDriverCounts
correctiveDriverIndices
correctiveDriverIndicesForCorrectiveAtIndex:
correctiveInBetweenCounts
correctiveInBetweenWeights
correctives
correctivesAndInBetween
count
countByEnumeratingWithState:objects:count:
countOfAudioPlayers
countOfChildNodes
countOfMaterials
counterSets
counterStorage
cpuCacheMode
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
createREMeshDataBinding
createSkinnerWithBaseMesh:bones:boneWeights:boneIndices:
createSkyboxWithParameters:
createSparseIndicesBufferForMorphTarget:withSetupTarget:indicesBuffer:indicesBufferOffset:indexSize:originalToFirstDeindexedTable:computeContext:
createVertexBufferForMorphTarget:withSetupTarget:vertexBuffer:vertexBufferOffset:indicesBuffer:indicesBufferOffset:indexSize:originalToFirstDeindexedTable:computeContext:
createVolatileMeshElementOfType:primitiveCount:bytesPerIndex:
cubeArrayTypeIfSupported
cubeWithWidth:height:length:chamferRadius:
cubeWithWidth:height:length:cornerRadius:options:
cullMode
cumulative
currentAllocatedSize
currentBlitEncoder
currentCommandBuffer
currentComputeEncoder
currentContext
currentEvent
currentFrameHash
currentFrameIndex
currentHandler
currentItem
currentPoint
currentRenderCommandEncoder
currentRenderPassDescriptor
currentState
currentThread
currentTime
currentTransforms
curveToPoint:controlPoint1:controlPoint2:
customHandler
customMaterialAttributeNames
customMaterialAttributes
customMaterialProperties
customMaterialPropertyNames
cylinderWithRadius:height:
cylinderWithRadius:height:options:
data
dataByConvertingColorData:colorSpace:newColorSpace:vectorCount:componentsPerVector:bytesPerComponent:dataOffset:dataStride:newDataOffset:newDataStride:
dataByConvertingDoublesToFloats:count:
dataForType:
dataNoCopy
dataOffset
dataRepresentationWithOptions:
dataSize
dataSource
dataStart
dataStride
dataType
dataUsingEncoding:
dataWithBytes:length:
dataWithBytesNoCopy:length:
dataWithBytesNoCopy:length:freeWhenDone:
dataWithCapacity:
dataWithContentsOfFile:options:error:
dataWithContentsOfURL:
dataWithContentsOfURL:options:error:
dataWithInt:
dataWithJSONObject:options:error:
dataWithPointArray:count:bytesPerComponent:
dataWithToken:
dataWithVector3Array:count:bytesPerComponent:
date
deactivatePhysicsJoint:
deallocateElementAtOffset:
deallocateRegistry
debugDescription
debugKeyDown:
debugOptions
debugOptionsDidChange:
debugQuickLookData
debugQuickLookObject
debugQuickLookObjectWithAssetPathResolver:
debugQuickLookObjectWithPointOfView:
debugUIOptions
decelerationDistance
decimalDigitCharacterSet
decodeAnimation:
decodeArrayOfObjectsOfClass:forKey:
decodeArrayOfObjectsOfClasses:forKey:
decodeBoolForKey:
decodeBytesForKey:returnedLength:
decodeBytesWithReturnedLength:
decodeDictionaryWithKeysOfClass:objectsOfClass:forKey:
decodeDictionaryWithKeysOfClasses:objectsOfClasses:forKey:
decodeDoubleForKey:
decodeFloatForKey:
decodeInt32ForKey:
decodeIntForKey:
decodeIntegerForKey:
decodeMeshWithCoder:
decodeObjectOfClass:forKey:
decodeObjectOfClasses:forKey:
decodePropertyListForKey:
decodeValueOfObjCType:at:
decrementUsedCount
deepClone
deepCopy
defaultCStringEncoding
defaultCameraController
defaultCenter
defaultCubeTexture
defaultDeviceWithMediaType:
defaultLibrary
defaultLightingEnvironmentIrradianceTexture
defaultLightingEnvironmentRadianceTexture
defaultManager
defaultProgramUsingTessellation:
defaultRenderGraph
defaultShapeForGeometry:
defaultTexture
defaultTexture1D
defaultTexture3D
defaultTextureForTextureType:
defaultUICatalogForBundle:
deferredBindingEnabled
deformedMeshReliesOnFrustum
deformedMeshReliesOnTransforms
deformer
deformers
deindexedToFirstDeindexedTableBufferWithBlitEncoder:indexSizeOut:
deindexedToOriginalTableBufferWithBlitEncoder:indexSizeOut:
delegate
deltaTime
deltaX
deltaY
dependency0NormalBuffer
dependency0PositionBuffer
dependency0TangentBuffer
dependency1NormalBuffer
dependency1PositionBuffer
dependency1TangentBuffer
dependencyBufferForInput:dependencyMesh:
dependencyBufferForInput:dependencyStack:
dependencyNodeAtIndex:
depth
depthCompareFunction
depthFailureOperation
depthOfField
depthOnly
depthPixelFormat
depthPlane
depthStencilPassOperation
depthStencilPixelFormat
depthTexture
description
descriptor
destination
destinationReplicationDelegate
destroyObject:
detachNode:
device
deviceDescription
deviceForOptions:
deviceQueue
deviceRef
diagnostics
dictionary
dictionaryWithCapacity:
dictionaryWithContentsOfURL:
dictionaryWithDictionary:
dictionaryWithObject:forKey:
dictionaryWithObjects:forKeys:count:
dictionaryWithObjectsAndKeys:
didAddToPhysicsBody:
didAttachToWorld:
didChange
didChangePointOfView
didChangeValueForKey:
didDetachFromWorld:
didEndSelector
didFinishPlayback
didInstanciateNewElementInArray:
didRemoveFromPhysicsBody:
didSetEntityObject
diffOld:withNew:options:
dimensions
dipatchEventToImGui:view:
disableActions
discardVideoData
disconnectNodeInput:
disconnectNodeOutput:
discretizedStraightLineMaxLength
dispatch:onTexture2D:
dispatch:threadgroups:threadsPerThreadgroup:
dispatch:threadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:
dispatchEventToVFXCore:
dispatchOnTexture2D:
dispatchOnTexture2DWithoutOptimizedThreadGroupPerGrid:
dispatchOnTexture3D:
dispatchOnTextureCube:
dispatchOne:
dispatchThreadgroups:threadsPerThreadgroup:
dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:
dispatchThreads:threadsPerThreadgroup:
dispatchThreadsPerTile:
dispatchThreadsPerTile:inRegion:
dispatchThreadsPerTile:inRegion:withRenderTargetArrayIndex:
dispatchThreadsPerTile:withCondition:
dispatchType
displacement
displayAspect
displayIDDidChange:
displayLink
displayLinkCallbackShouldReturnImmediately
displayLinkPolicy
displayOptions
distanceConstraint
distanceConstraintWithTarget:
distantFuture
doNotClearRenderOutput
documentEnclosingURL
documentURL
documentUUID
doesNotRecognizeSelector:
dollyToTarget:
doubleClick:
doubleSided
doubleValue
doughnutBokeh
drag
dragField
draggedTransform
draggingEntered:
draggingLocation
draggingPasteboard
draggingUpdated:
drain
draw:
drawAtPoint:
drawAtPoint:fromRect:operation:fraction:
drawCallCount
drawFullScreenQuadForPass:
drawInMTKView:
drawInRect:
drawIndexedPatches:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:indirectBuffer:indirectBufferOffset:
drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:
drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:
drawLineFromPoint:toPoint:color:
drawMeshThreadgroups:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:
drawMeshThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:
drawMeshThreads:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:
drawPatches:patchIndexBuffer:patchIndexBufferOffset:indirectBuffer:indirectBufferOffset:
drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:
drawPrimitives:indirectBuffer:indirectBufferOffset:
drawPrimitives:vertexStart:vertexCount:
drawPrimitives:vertexStart:vertexCount:instanceCount:
drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:
drawRect:
drawRenderElement:withPass:
drawStatisticsIfNeeded
drawString:atPoint:color:
drawWireframeOverlayForElements:range:store:passInstance:
drawWithFrame:inView:
drawableAttachment
drawableDescriptor
drawableResizesAsynchronously
drawableSize
drawsArea
drawsForBlur
drivenByDefaultNavigationCameraController
drivingNode
dstPositionBuffer
dstTangentBuffer
dump
duration
dvt_supportedTypesForPropertyContents
dynamicBody
edgeCreaseIndices
edgeCreases
edgeCreasesElement
edgeCreasesSource
edgeTessellationFactor
editingSpace
editingSpaceChanged
editorLocked
editorView:didChangeFocalFrom:to:
editorView:didDrop:onNode:modelElementIndex:
editorView:didMovePointOfViewFrom:to:
editorView:didSelectNode:modelElementIndex:event:
editorView:shouldAcceptDrop:
editorViewDidRequestFocusOnSelectedNodes:
editorViewDidStopInteraction:
editorViewWillStartInteraction:atPoint:
effect
effectDidRestart:
effectGeometry
effectiveEditingSpace
effectiveModifier
electricField
elementArrayType
elementAtIndex:associatedPoints:
elementCount
elementIndex
elementIsArgumentBuffer
elementSize
elementStructType
elementType
emission
emitterIdentifier
emptyShaderCache
enableARMode
enableBreakthrough
enableClipping
enableDeferredRendering
enableFreeCamera
enableInertia
enableNearFieldVignetting
enableNullBufferBinds:
enableParallelDecoding
enableRuntimeScriptCompilation
enableTriggerTypes:
enableVBL:
enclosingScrollView
encodeAnimation:
encodeAuthoringWithEncoder:colorFormat:depthStencilFormat:sampleCount:
encodeBool:forKey:
encodeBytes:length:
encodeBytes:length:forKey:
encodeDouble:forKey:
encodeFloat:forKey:
encodeInt32:forKey:
encodeInt:forKey:
encodeInteger:forKey:
encodeObject:forKey:
encodeSignalEvent:value:
encodeToCommandBuffer:
encodeToCommandBuffer:sourceTexture:destinationTexture:
encodeValueOfObjCType:at:
encodeWaitForEvent:value:
encodeWithCoder:
encodeWithCommandBuffer:
encodedData
encodedLength
endDragging
endDraggingWithVelocity:
endEncoding
endEncodingAndRetrieveProgramAddressTable
endFrame
endFrameWaitingUntilCompleted:status:error:
endFrameWorldSpecifics
endImgUIFrame
endImgUIFrameWithCommandBuffer:encoder:renderPassDescriptor:
endInteraction:withViewport:velocity:
endOrbiting
endRenderPass
endTransaction
engine
engineContext
engineNotificationQueue
enqueueCommandForObject:immediateTransactionBlock:
entityObject
entityTag
entityWithTag:
entryNames
entryPoint
enumCases
enumName
enumerateBodiesUsingBlock:
enumerateBuffers:
enumerateChildNodesUsingBlock:
enumerateDependencies:
enumerateDrawCall:
enumerateHierarchyUsingBlock:
enumerateIndexes:
enumerateKeysAndObjectsUsingBlock:
enumerateLinesUsingBlock:
enumerateObjectsUsingBlock:
enumerateTextures:
enumeratorAtPath:
environment
error
errorOptions
errorWithDomain:code:userInfo:
eulerAngles
eulerAnglesValue
eval:
evaluateForceFieldsAtPosition:velocity:mass:charge:time:dt:categoryMask:
eventBlock
eventHandler
eventHandlerWantsRedraw
eventNumber
executablePath
executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:
executeCommandsInBuffer:withRange:
expandItem:
exportAs:
exportAsMovieOperationWithDestinationURL:size:attributes:delegate:didEndSelector:userInfo:
exportAssetToURL:error:
exposure
exposureAdaptationBrighteningSpeedFactor
exposureAdaptationDarkeningSpeedFactor
exposureOffset
extendedLinearSRGBColor
extendedSRGBColorSpace
extraLayerMeshesWithDrivingMesh0:drivingMesh1:
extrusionDepth
fStop
fStopAnimation
faceCount
faceIndex
faceIndexing
faceTopology
fadeInDuration
fadeOpacity
farVisibilityDistance
features
fetchClientTextureIDWithNamed:
fetchEntityObjectWithTag:
field
fieldGeometry
fieldOfView
fieldType
fileExistsAtPath:
fileFormat
fileHandleForReading
fileName
fileSystemRepresentation
fileURLWithPath:
fileURLWithPath:isDirectory:
fileWrappers
filename
fill
fillBuffer:range:value:
fillData:offset:
fillMode
fillsBackward
fillsForward
filmOffset
filterPropertyName:ofClass:
filterQuality
finalizeDecodeConstraint:
finalizeEncoding
finishDecoding
finishEncoding
finishWritingWithCompletionHandler:
firstBindingWithName:
firstIndex
firstMatchInString:options:range:
firstMaterial
firstMipmapInTail
firstObject
firstResponder
flagAsActive:
flagsChanged:
flatness
flattened
flattenedClone
flattenedCopy
flipTextureCoordinatesInAttributeNamed:
float3Value
float4Value
floatChannelData
floatForKey:
floatValue
floor
floorRef
floorWithOptions:
flush
flushGraphics
focalBlurSampleCount
focalDistanceAnimation
focalLength
focalLengthAnimation
focusBehavior
focusDistance
focusNode:
focusNodes:
fogColor
fogColor_linearExtendedSRGB
fogDensityExponent
fogEndDistance
fogStartDistance
font
fontDescriptorWithName:size:
fontName
fontWithDescriptor:size:
fontWithName:size:
forceAsyncShaderCompilation
forceField
forceFieldWithForceFieldRef:
forcesBackFaceCasters
format
fractionCompleted
fragmentBindings
fragmentBufferBoundAt:
fragmentFunction
fragmentFunctionName
fragmentLinkedFunctions
fragmentShader
frame
frameA
frameB
frameBufferBindings
frameBufferFeatures
frameConstantBufferPool
frameLength
frameNodes:
frameRate
frameTexturePool
frameworkLibrary
freeAxes
freeCamera
freezeButton
frequency
friction
fromAngle
fromShift
fromValue
fromZ
frontFaceStencil
frontFaceTest
frontFacingWinding
frontReferenceValue
frontVector
frontVectorWithPointOfView:
frozen
functionConstantsDictionary
functionDescriptor
functionHandleWithFunction:
functionHandleWithFunction:stage:
functionNames
functionType
functionWithCAMediaTimingFunction:
functionWithControlPoints::::
functionWithName:
gainColor
gainOffset
gamma
gammaColor
gammaOffset
generateAmbientOcclusionTextureWithQuality:attenuationFactor:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:
generateAmbientOcclusionVertexColorsWithQuality:attenuationFactor:objectsToConsider:vertexAttributeNamed:
generateBindingsForPipeline:withReflection:program:material:geometry:pass:
generateLightMapTextureWithQuality:lightsToConsider:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:
generateLightMapVertexColorsWithLightsToConsider:objectsToConsider:vertexAttributeNamed:
generateMaterialsAndReturnError:
generateMipmapsForTexture:
generatedTexturePath
generatorWithProfile:allowingHotReload:
geodesic
geometry
geometryBindTransform
geometryElementWithMeshElementRef:
geometryElements
geometryForLightType:
geometryIndex
geometryModificationCount
geometryRef
geometryShader
geometrySourceChannels
geometrySourceWithColorComponents:count:hasAlpha:colorSpace:
geometrySourceWithMDLVertexAttribute:mesh:
geometrySourceWithMeshSourceRef:
geometryType
getBackgroundGPUPriority
getBoundingBox
getBoundingBoxMin:max:
getBoundingSphere
getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:
getBytes:bytesPerRow:fromRegion:mipmapLevel:
getCFXImageRef
getControlPointAtIndex:values:
getCurrentPassHash
getCurrentPassMaterial
getDefaultSamplePositions:count:
getDouble4x4Array:maxCount:
getEncoderAndResetCache
getFloat3Array:maxCount:
getFloat4x4Array:maxCount:
getFloatArray:maxCount:
getFloatArray:maxCount:atTime:
getFloatQuaternionArray:maxCount:
getFrustum:withViewport:
getObjects:range:
getREMeshAssetPath:
getRed:green:blue:alpha:
getTextureAccessCounters:region:mipLevel:slice:resetCounters:countersBuffer:countersBufferOffset:
getTimes:maxCount:
getUniqueStageDescriptor:
getValue:size:
gimbalLockEnabled
gimbalLockMode
globalObject
gobo
gpuAddress
gpuResourceID
grain
grainIntensity
grainIsColored
grainScale
graph
graphController:
graphicalSelectionEnabled
graphicsContextWithBitmapImageRep:
graphicsContextWithCGContext:flipped:
gravityValue
greenComponent
gridUnit
groundAlbedo
groundColor
group
halfExtent
handle
handleBindingOfBufferNamed:frequency:usingBlock:
handleFailureInMethod:object:file:lineNumber:description:
handleKeyDown:
handleReport:data:
handleWithEntityObject:
hardwareFilter
harmonicField
hasAncestor:
hasCommonProfilePrecompiledFunctions
hasCustomHandler
hasCustomProjectionTransform
hasFreeElementsLeft
hasImGuiFrameStarted
hasInterleavedIndicesChannels
hasLightingEnabled
hasNewPixelBufferForItemTime:
hasPhysicBody
hasPreciseScrollingDeltas
hasPrefix:
hasRenderableObjects
hasSuffix:
hasUnifiedMemory
hash
hashCodeForSource:macros:
hazardTrackingMode
heap
heapAccelerationStructureSizeAndAlignWithDescriptor:
heapAccelerationStructureSizeAndAlignWithSize:
heapBufferSizeAndAlignWithLength:options:
heapOffset
heapTextureSizeAndAlignWithDescriptor:
height
heightSegmentCount
hemispheric
hidden
highDynamicRangeCompression
hingeWithBody:axis:anchor:
hingeWithBodyA:axisA:anchorA:bodyB:axisB:anchorB:
hitTest:
hitTest:options:
hitTestResultsFromHitTestResultRef:
hitTestWithSegmentFrom:toPoint:options:
hitTestWithSegmentFromPoint:toPoint:options:
horizonElevation
horizontalMaximumAngle
horizontalSampleStorage
hotReloadableLibrary
hour
identifier
iesTextureForProfile:renderContext:
imGUIEnabled
image
imageContentsWithPasteboard:
imageFromTexture
imageNamed:
imageRepWithCIImage:
imageRepWithData:
imageToEncodeForProposedImage:userInfo:
imageWithPath:
imageWithURL:
imageblockMemoryLengthForDimensions:
imageblockSampleLength
immediateMode
immediateModeRestrictedContext
inBetweenTargetsForCorrectiveAtIndex:
inBetweenTargetsForTargetAtIndex:
inBetweenWeights
inBetweenWeightsForCorrectiveAtIndex:
inBetweenWeightsForTargetAtIndex:
incrementUsedCount
incremental
index
indexAtPosition:
indexBuffer
indexBufferIndex
indexBufferOffset
indexCount
indexGreaterThanIndex:
indexOfChildNode:
indexOfObject:
indexOfObjectPassingTest:
indexOfRefraction
indexOfSelectedItem
indexSet
indexSetWithIndex:
indexType
indexesOfObjectsPassingTest:
indicesChannelCount
inertiaEnabled
inertiaRunning
infoDictionary
infoWithSemantic:options:
init
init:privateEntityManager:
init:sharedEntityManager:
initAllowingHotReload:
initByReferencingFile:
initByReferencingURL:
initDirectoryWithFileWrappers:
initForEngineNamed:
initForJavascript:
initForReading:error:
initForReadingFromData:error:
initForReadingWithData:secure:
initForWritingWithMutableData:
initOrientationInWorldSpace:withBlock:
initParametersIfNeededForDeformedNode:
initParametersIfNeededWithDrivingNodeRef:deformedNodeRef:
initParametersIfNeededWithInnerLayerNodeRef:outerLayerNodeRef:deformedNodeRef:
initPositionInWorld:withBlock:
initPresentationBehaviorGraphWithCoreEntityHandle:
initPresentationCameraEffectWithCameraEffectRef:
initPresentationCameraWithCameraRef:
initPresentationForceFieldWithForceFieldRef:
initPresentationLightWithLightRef:
initPresentationMaterialPropertyWithModelProperty:
initPresentationMaterialWithMaterialRef:
initPresentationModelWithGeometryRef:
initPresentationMorpherWithMorphRef:
initPresentationNodeWithNodeRef:
initPresentationParametricModelWithParametricGeometryRef:
initPresentationShapeGeometryWithShapeGeometryRef:
initPresentationTextGeometryWithTextGeometryRef:
initRegularFileWithContents:
initRequiringSecureCoding:
initStandardFormatWithSampleRate:channels:
initThroughSCNKitBridgeWithURL:options:error:
initThroughSCNKitBridgeWithURL:preserveTopology:error:
initUninitialized
initWithAVAudioNode:
initWithAVAudioPCMBuffer:
initWithAction:target:keyPath:value:parent:index:
initWithAnimationPlayerRef:
initWithArray:
initWithAsset:
initWithAssetWriterInput:sourcePixelBufferAttributes:
initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:
initWithBlock:frequency:needsRenderResource:
initWithBody:anchor:
initWithBody:axis:anchor:
initWithBody:frame:
initWithBodyA:anchorA:bodyB:anchorB:
initWithBodyA:axisA:anchorA:bodyB:axisB:anchorB:
initWithBodyA:frameA:bodyB:frameB:
initWithBool:
initWithBuffer:elementSize:
initWithBuffer:primitiveType:primitiveCount:indicesChannelCount:interleavedIndicesChannels:bytesPerIndex:
initWithBuffer:vertexFormat:semantic:vertexCount:dataOffset:dataStride:
initWithBufferAllocator:
initWithBytes:length:encoding:
initWithBytesNoCopy:length:
initWithBytesNoCopy:length:freeWhenDone:
initWithCAAnimation:
initWithCFXAnimation:
initWithCGImage:
initWithCGImage:size:
initWithCString:encoding:
initWithCalendarIdentifier:
initWithCameraRef:
initWithCapacity:
initWithChainRootNode:
initWithCoder:
initWithCommandQueue:
initWithCommandQueue:model:options:
initWithContent:
initWithContentRect:styleMask:backing:defer:
initWithContentsOf:commandQueue:options:error:
initWithContentsOf:error:
initWithContentsOf:options:error:
initWithContentsOfURL:options:error:
initWithCoreEntityHandle:
initWithData:
initWithData:options:error:
initWithData:primitiveType:primitiveCount:indicesChannelCount:interleavedIndicesChannels:bytesPerIndex:
initWithData:semantic:colorSpace:vectorCount:floatComponents:componentsPerVector:bytesPerComponent:dataOffset:dataStride:
initWithData:semantic:vectorCount:componentType:componentCount:dataOffset:dataStride:
initWithData:topLeftOrigin:name:dimensions:rowStride:channelCount:channelEncoding:isCube:
initWithDefaultMaterial
initWithDelegate:
initWithDescription:size:arrayLength:
initWithDevice:contentsOf:error:
initWithDevice:engineContext:
initWithDevice:error:
initWithDevice:fixedSizeElement:buffersize:name:
initWithDevice:model:
initWithDevice:model:options:
initWithDevice:options:
initWithDevice:sigma:
initWithDeviceRef:
initWithDictionary:copyItems:
initWithDomain:code:userInfo:
initWithDrivingNode:deformedNode:bindingMode:bindingTransform:drivingNodeUVChannel:deformedNodeUVChannel:
initWithEncoder:
initWithEntityObject:
initWithEntryNames:contents:properties:options:
initWithEntryNames:dataProvider:options:
initWithFieldType:
initWithFileNamed:
initWithFileNamed:inBundle:
initWithFloat:
initWithFloorGeometryRef:
initWithForceFieldRef:
initWithFormat:arguments:
initWithFrame:
initWithFrame:options:
initWithGeometry:resourceManager:
initWithGeometryRef:
initWithIdentifier:error:
initWithIndexes:length:
initWithIndexesInRange:
initWithInnerLayerNode:outerLayerNode:deformedNode:bindingMode:bindingTransform:
initWithInnerLayerNode:outerLayerNode:parameters:
initWithInt:
initWithKeyOptions:valueOptions:capacity:
initWithLayer:
initWithLightRef:
initWithLongLong:
initWithMTKView:options:
initWithMTLTexture:options:
initWithMaterialRef:
initWithMediaType:outputSettings:
initWithMeshElement:
initWithMeshRef:
initWithMeshSource:
initWithModel:thresholdMode:lod:
initWithModel:thresholdMode:thresholdValue:
initWithMorphRef:
initWithName:
initWithName:channelEncoding:textureDimensions:turbidity:sunElevation:upperAtmosphereScattering:groundAlbedo:
initWithName:indexBuffer:indexCount:indexType:geometryType:material:topology:
initWithName:scatteringFunction:
initWithName:semantic:
initWithNibName:bundle:
initWithNode:
initWithNodeRef:
initWithObjects:
initWithObjects:count:
initWithObjectsAndKeys:
initWithOptions:
initWithOwner:
initWithPCMFormat:frameCapacity:
initWithPage:allocator:
initWithParent:andCustomName:
initWithParent:propertyType:
initWithPasteboard:
initWithPath:
initWithPath:manager:
initWithPath:options:error:
initWithPattern:options:error:
initWithPixelBufferAttributes:
initWithPlayerItem:
initWithQueue:screen:policy:block:
initWithRect:options:owner:userInfo:
initWithRenderer:size:attributes:outputURL:
initWithSampleCount:
initWithSerializedVFXBindingDataPointer:
initWithShape:
initWithShapeGeometryRef:
initWithSize:
initWithSkinnerRef:
initWithSource:andTarget:
initWithStateManager:
initWithString:attributes:
initWithTag:
initWithTextGeometryRef:
initWithTexture:
initWithTimingFunctionRef:
initWithTitle:
initWithTitle:action:keyEquivalent:
initWithToken:
initWithType:
initWithType:component:
initWithType:data:
initWithType:intensity:color:
initWithType:shape:
initWithURL:
initWithURL:fileType:error:
initWithURL:offset:length:
initWithURL:options:error:
initWithURL:resolvingAgainstBaseURL:
initWithURL:vertexDescriptor:bufferAllocator:
initWithUTF8String:
initWithUnsignedInteger:
initWithVFXAnimation:
initWithVertexBuffers:vertexCount:descriptor:submeshes:
initWithView:
initWithWorld:
initWithWorldRef:
initialize
initializeAssetManagerWithBundleURL:
initializeCoreEntityManagerWithInfo:error:
initializeDraggedTransform
innerConeAngle
innerRadius
inputHeight
inputStreamWithData:
inputWidth
inputsCount
insertChildNode:atIndex:
insertDebugCaptureBoundary
insertDebugSignpost:
insertMaterial:atIndex:
insertObject:atIndex:
insertObject:inAudioPlayersAtIndex:
insertObject:inChildNodesAtIndex:
insertObject:inMaterialsAtIndex:
insertString:atIndex:
insideTessellationFactor
inspectCamera:
installName
installTapOnBus:bufferSize:format:block:
instance
instanceCount
instanceDidChange
instanceMethodSignatureForSelector:
instanceNewElementInArray:withPropertyName:
instanceWillChange
instancesRespondToSelector:
intValue
integerForKey:
integerValue
intensity
interleavedIndicesChannels
internalPixelFormat
internalPixelFormatDepth
intersectionFunctions
invalidate
invalidateCachedScriptParams
invalidateCameraTarget
invalidateCompiledGraph
invalidateDisplayLink
inverseKinematicsConstraintWithChainRootNode:
invocationWithMethodSignature:
invokeWithTarget:
iosurface
iosurfacePlane
irradianceData
irradianceTextureForEnvironmentTexture:renderContext:applySH:
irradianceTextureForMaterialProperty:
irradianceTextureForPrecomputedLightingEnvironment:
isARepeat
isASTCPixelFormatsSupported
isAborting
isAbsolutePath
isActive
isAdaptive
isAdditive
isAffectedByGravity
isAliasable
isAnimated
isAppliedOnCompletion
isArgument
isAsynchronous
isAuthoring
isAuthoringWorld
isCancelled
isColorManaged
isColored
isCube
isCullModeLocked
isCumulative
isDepth24Stencil8PixelFormatSupported
isDepthOnly
isDepthTexture
isDepthWriteEnabled
isDirectionInvertedFromDevice
isDoubleSided
isDragging
isDrawableAvailable
isDrawingBlur
isDrawingDepthOnly
isEditingSubComponent
isEditorViewRecordingUserInteractions:
isEmulatingStereo
isEnabled
isEnabled:
isEncoding
isEqual:
isEqualTo:
isEqualToString:
isEventInImGUIWindow:view:
isFileURL
isFillModeLocked
isFocusInteractionEnabled
isFramebufferOnly
isFrozen
isFull
isGeodesic
isHandlingKeyboard
isHeadless
isHemispheric
isHidden
isHiddenOrHasHiddenAncestor
isHittable
isIncremental
isInertiaRunning
isJitteringEnabled
isKeyWindow
isKindOfClass:
isLayeredRendering
isLitPerPixel
isLoaded
isLowPower
isMainThread
isMainWindow
isMemberOfClass:
isMemorylessRender
isNodeInsideFrustum:withPointOfView:
isOpaque
isOrthographic
isPaused
isPausedOrPausedByInheritance
isPlaying
isPositional
isPrecompiled
isPrefab
isPresentationObject
isReadableFileAtPath:
isReadyForMoreMediaData
isRemovable
isRemovedOnCompletion
isResting
isRunning
isScreenSpace
isShareable
isSparse
isSubclassOfClass:
isTargetFromHitTest
isTemporalAntialiasingEnabled
isTombstoned
isUndefined
isUsed
isVFX2
isVertexAmplificationEnabled
isVideoMirroringSupported
isVideoOrientationSupported
isVirtualEnvironmentNode
isVisible
isWrapped
isolate:
issueWithShadable:entryPoint:effectiveModifier:message:line:type:
itemArray
itemAtRow:
itemMatching:
itemTimeForHostTime:
iterationCount
jitter
jitteringEnabled
joint
jointAnimation
jointBindTransforms
jointForNode:
jointPaths
jointRestTransforms
jointWithBody:anchor:
jointWithBody:axis:anchor:
jointWithBody:frame:
jointWithBodyA:anchorA:bodyB:anchorB:
jointWithBodyA:axisA:anchorA:bodyB:axisB:anchorB:
jointWithBodyA:frameA:bodyB:frameB:
joints
jsChildNodesWithAttribute:
jsConstructor
keepTargetDirection
kernelEndTime
keyDown:
keyForNodeAttributes
keyPathDst
keyPathSrc
keyPathsForValuesAffectingEulerAngles
keyPathsForValuesAffectingFieldOfView
keyPathsForValuesAffectingFocalLength
keyPathsForValuesAffectingOrientation
keyPathsForValuesAffectingPosition
keyPathsForValuesAffectingRotation
keyPathsForValuesAffectingTransform
keyPathsForValuesAffectingValueForKey:
keyTimes
keyUp:
keys
killParticles
kinematicBody
label
lastFrameTime
lastFrameWorldTransform
lastItem
lastObject
lastPathComponent
launch
launchImagePicker
layer
layer:shouldInheritContentsScale:fromWindow:
layerContentsScaleFactor
layerCount
layerSizeInPixels
layerTarget
layerToFocusForRenderedLayer:
layout
legacyRenderer
legacyView
length
lengthOfBytesUsingEncoding:
lengthSegmentCount
lensBlur
lensShift
level
levelOfDetailWithModel:screenSpaceRadius:
levelOfDetailWithModel:worldSpaceDistance:
levelsOfDetail
libraryForProgramDesc:completionHandler:
libraryForSourceCode:options:
liftColor
liftOffset
light
lightBufferBindings
lightProbeWithVFXLight:node:
lightRef
lightType
lightWithLightRef:
lightWithMDLLight:
lightWithMDLLightProbe:
lightWithVFXLight:
lightingEnvironment
lightingModelName
line
lineToPoint:
linearExtendedSRGBColor
linearField
linearRestingThreshold
linearSleepingThreshold
linkCustomPropertyWithParent:andCustomName:
litPerPixel
load
load:options:error:
loadAction
loadBindingsMetadata
loadCoreEntityManagerFromURL:options:infoOut:error:
loadData:into:options:statusHandler:error:
loadIfNeeded
loadMDLAsset:options:context:
loadNibNamed:owner:topLevelObjects:
loadNonNativeFormatAt:into:options:statusHandler:error:
loadSCN:options:error:
loadTextures
loadURL:into:options:statusHandler:error:
loadWithCommandBuffer:label:
loadWithCommandBuffer:renderPassDescriptor:
loadWithUrl:loadingForAuthoring:infoOut:presentationScene:error:
loadWorldDescriptionAt:into:options:compressed:statusHandler:error:
loadWorldDescriptionFromData:into:options:compressed:sourceURL:statusHandler:error:
loaded
loader
loadingPolicy
localCoordinates
localFront
localNormal
localRight
localRotateBy:
localRotateByValue:
localTranslateBy:
localTranslateByValue:
localUpValue
localizedDescription
localizedStringForKey:value:table:
location
locationInWindow
locationNumber
lock
lockLayout
lockSnapGuides
logs
lookAt:up:localFront:
lookAtConstraintWithTarget:
lookAtLocation:up:localFront:
lookAtWith:target:
lookUpFoundInstance
lookUpKey
lookingGlassRendererWithDevice:quiltSettings:calibration:options:
lookupObjectIDByName:
lookupTable
loops
lowLatency
magFilter
magneticField
magnification
magnificationFilter
magnifyWithEvent:
main
mainBundle
mainMixerNode
mainQueue
mainScreen
makeAliasable
makeBackingLayer
makeDefaultCamera
makeFirstResponder:
makeKeyAndOrderFront:
makeKeyWindow
makeReadOnlyBuffersWithBaseGeometry:baseMesh:blitEncoder:
makeReverseStates
makeUniqueID
manipulator
mapVolatileMesh:verticesCount:
mappingChannel
margin
markAsFinished
maskCenter
maskEnabled
maskRadius
mass
matchesDescription:size:arrayLength:
matchesInString:options:range:
matchesRenderPassDescriptor:
material
materialFace
materialIdentifier
materialModificationCount
materialProperty
materialPropertyName
materialPropertyWithContents:
materialRef
materialRefCreateIfNeeded
materialType
materialWithColor:
materialWithContents:
materialWithMDLMaterial:
materialWithMDLMaterial:options:
materialWithMaterialRef:
materialWithName:
materialWithVFXMaterial:
materials
matrix
matrixWithNoRoll:
maxAllowedRotationAngle
maxAllowedRotationAngleForJoint:
maxAnisotropy
maxArgumentBufferSamplerCount
maxAvailableSizeWithAlignment:
maxTessellationFactor
maxTextureHeight2D
maxTextureWidth2D
maxThreadgroupMemoryLength
maxThreadsPerThreadgroup
maxTotalThreadsPerMeshThreadgroup
maxTotalThreadsPerObjectThreadgroup
maxTotalThreadsPerThreadgroup
maxValue
maxViewportCount
maximumAngularLimit
maximumAngularLimit1
maximumAngularLimit2
maximumConcurrentCompilationTaskCount
maximumDrawableCount
maximumEdgeLength
maximumHorizontalAngle
maximumLinearAcceleration
maximumLinearLimit
maximumLinearVelocity
maximumPointScreenSpaceRadius
maximumShadowDistance
maximumTime
maximumTwistAngle
maximumVerticalAngle
memoryBarrierWithResources:count:
memoryBarrierWithResources:count:afterStages:beforeStages:
memoryBarrierWithScope:
memoryBarrierWithScope:afterStages:beforeStages:
menu
menuItemForInstance:propertyName:
mesh
meshBindTransform
meshElement
meshElementAtIndex:
meshElementCount
meshElementWithBuffer:primitiveType:primitiveCount:bytesPerIndex:
meshElementWithBuffer:primitiveType:primitiveCount:indicesChannelCount:interleavedIndicesChannels:bytesPerIndex:
meshElementWithData:primitiveType:primitiveCount:indicesChannelCount:interleavedIndicesChannels:bytesPerIndex:
meshElements
meshForDeformedTopology
meshSource
meshSourceChannels
meshSourceWithBuffer:vertexFormat:semantic:vertexCount:dataOffset:dataStride:
meshSourceWithData:semantic:vectorCount:floatComponents:componentsPerVector:bytesPerComponent:dataOffset:dataStride:
meshSourceWithNormals:count:
meshSourceWithTextureCoordinates:count:
meshSourceWithVertices:count:
meshSources
meshSourcesForSemantic:
meshThreadExecutionWidth
meshWithMeshRef:
meshWithSources:elements:
meshWithSources:elements:sourceChannels:
meshWithVFXModel:
meshWithVFXModel:bufferAllocator:
metalBinaryArchiveURLs
metalDevice
metalLayer
metalTextureWithEngineContext:textureSampler:nextFrameTime:status:
metallic
metalness
migrateCoreEntityManagerWithInfo:error:
minFilter
minValue
minificationFilter
minimumAngularLimit
minimumHorizontalAngle
minimumLanguageVersion
minimumLinearLimit
minimumLinearTextureAlignmentForPixelFormat:
minimumPointScreenSpaceRadius
minimumTextureBufferAlignmentForPixelFormat:
minimumTime
minimumVerticalAngle
minute
mipFilter
mipmapLevelCount
mkSemantic
mlDelegate
mode
model
modelChanged
modelDescription
modelElementAtIndex:
modelElementCount
modelElementWithMDLSubmesh:
modelElements
modelSourceChannels
modelSources
modelSourcesForSemantic:
modelTessellator
modelTransform
modelWithGeometryRef:
modelWithMDLMesh:
modelWithMDLMesh:options:context:
modelWithMDLMesh:submesh:options:
modelWithMesh:
modelWithSources:elements:
modelWithSources:elements:sourceChannels:
modifierFlags
momentOfInertiaValue
momentumPhase
monospacedSystemFontOfSize:weight:
month
morphIncrementallyWithComputeContext:positions:normals:
morphRef
morphSparseWithComputeContext:positions:normals:
morpherWithMDLMesh:
morpherWithMorphRef:
motionBlur
motionBlurIntensity
motorMaximumForce
motorMaximumTorque
motorTargetAngularVelocity
motorTargetLinearVelocity
mouseDown:
mouseDragged:
mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:
mouseLocation
mouseLocationOutsideOfEventStream
mouseMoved:
mouseUp:
moveItemAtPath:toPath:error:
moveItemAtURL:toURL:error:
moveToPoint:
moveToTransform:
mtlTexture
multiply
mutableBytes
mutableChildNodes
mutableCopy
mutableData
mutableMaterials
mutex
name
namedTextureWithName:scaleFactor:
navigationCameraController
nearVisibilityDistance
neededModelsAndReturnError:
needsCollisionPlanes
needsLinearDepth
needsRenderResource
newAccelerationStructureWithDescriptor:
newAccelerationStructureWithDescriptor:offset:
newAccelerationStructureWithSize:
newAccelerationStructureWithSize:offset:
newArgumentEncoderForBufferAtIndex:
newArgumentEncoderWithArguments:
newArgumentEncoderWithBufferBinding:
newArgumentEncoderWithBufferIndex:
newArgumentEncoderWithBufferIndex:reflection:
newBinaryArchiveWithDescriptor:error:
newBufferForDataKind:meshSource:dataType:forStageInputOutputDescriptor:usePrivateStorageMode:outStride:
newBufferForDataKind:positionSource:normalSource:positionDataType:normalDataType:forStageInputOutputDescriptor:usePrivateStorageMode:outStride:outPositionOffset:outNormalOffset:
newBufferWithBytes:length:options:
newBufferWithBytesNoCopy:length:options:deallocator:
newBufferWithData:type:
newBufferWithLength:options:
newBufferWithLength:options:offset:
newCommandQueueWithDescriptor:
newCommandQueueWithMaxCommandBufferCount:
newComputePipelineStateForDesc:library:
newComputePipelineStateWithAdditionalBinaryFunctions:error:
newComputePipelineStateWithDescriptor:options:completionHandler:
newComputePipelineStateWithFunction:completionHandler:
newComputePipelineStateWithFunction:error:
newComputePipelineStateWithFunction:options:completionHandler:
newComputePipelineStateWithFunction:options:reflection:error:
newComputePipelineStateWithFunctionName:
newComputePipelineStateWithFunctionName:constantValues:
newComputePipelineStateWithFunctionName:constantValues:linkedFunctions:
newComputePipelineStateWithFunctionName:library:
newComputePipelineStateWithFunctionName:library:constantValues:linkedFunctions:
newCounterSampleBufferWithDescriptor:error:
newCubemapTextureForLatlongTexture:pixelFormat:engineContext:needsMipmap:
newDefaultLibrary
newDefaultLibraryWithBundle:error:
newDeformerInstanceForNode:outputs:computeVertexCount:context:
newDepthStencilStateWithDescriptor:
newDynamicLibrary:error:
newEvent
newFence
newFunctionWithDescriptor:completionHandler:
newFunctionWithDescriptor:error:
newFunctionWithName:
newFunctionWithName:constantValues:completionHandler:
newFunctionWithName:constantValues:error:
newFunctionWithName:constants:library:
newHeapWithDescriptor:
newIOCommandQueueWithDescriptor:error:
newIOFileHandleWithURL:compressionMethod:error:
newIOFileHandleWithURL:error:
newIOHandleWithURL:compressionMethod:error:
newIOHandleWithURL:error:
newInstanceMenuClicked:
newIntersectionFunctionTableWithDescriptor:
newIntersectionFunctionTableWithDescriptor:stage:
newIntersectionFunctionWithDescriptor:completionHandler:
newIntersectionFunctionWithDescriptor:error:
newLibraryWithData:error:
newLibraryWithFile:error:
newLibraryWithSource:options:completionHandler:
newLibraryWithSource:options:error:
newLibraryWithSource:options:warnings:error:
newLibraryWithStitchedDescriptor:completionHandler:
newLibraryWithStitchedDescriptor:error:
newLibraryWithURL:error:
newLogStateWithDescriptor:error:
newNodeAtPath:type:
newObject
newPipelineStateConfiguratorForMeshElement:patchType:device:
newPropertyWithName:type:role:
newRadianceTextureForEnvironmentTexture:engineContext:cpuAccessible:commandBuffer:
newRasterizationRateMapWithDescriptor:
newRemoteBufferViewForDevice:
newRemoteTextureViewForDevice:
newRenderPipelineStateWithAdditionalBinaryFunctions:error:
newRenderPipelineStateWithDescriptor:completionHandler:
newRenderPipelineStateWithDescriptor:error:
newRenderPipelineStateWithDescriptor:options:reflection:error:
newRenderPipelineStateWithMeshDescriptor:options:completionHandler:
newRenderPipelineStateWithMeshDescriptor:options:reflection:error:
newRenderPipelineStateWithTileDescriptor:options:completionHandler:
newRenderPipelineStateWithTileDescriptor:options:reflection:error:
newResidencySetWithDescriptor:error:
newSamplerStateWithDescriptor:
newSceneWithURL:
newSharedEvent
newSharedEventWithHandle:
newSharedTextureHandle
newSharedTextureWithHandle:
newSubBufferForAllocator:
newSubBufferWithBytes:length:renderContext:
newSubmeshWithGeometryData:indexBufferLength:interleaved:channelCount:channelIdx:bytesPerIndex:indexType:geometryType:allocator:indexCount:topology:
newSubmeshWithUniquedIndexData:andVFXModelElement:bufferAllocator:
newSubmeshWithVFXModelElement:bufferAllocator:
newSubmeshWithVFXModelElement:bufferAllocator:positionSourceChannel:
newTemporalScalerWithDevice:
newTextureForDevice:
newTextureUsingMTKTextureLoaderWithData:options:
newTextureUsingMTKTextureLoaderWithURL:options:
newTextureViewWithPixelFormat:
newTextureViewWithPixelFormat:textureType:levels:slices:
newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:
newTextureWithContentsOfURL:options:error:
newTextureWithData:options:error:
newTextureWithDescriptor:
newTextureWithDescriptor:iosurface:plane:
newTextureWithDescriptor:offset:
newTextureWithDescriptor:offset:bytesPerRow:
newTextureWithName:scaleFactor:bundle:options:error:
newVisibleFunctionTableWithDescriptor:
newVisibleFunctionTableWithDescriptor:stage:
next
nextDrawable
nextEventMatchingMask:untilDate:inMode:dequeue:
nextFrameTime
nextKeyView
node
node:propertyWithName:type:role:
nodeA
nodeB
nodeBufferBindings
nodeManipulatorItemWithNode:screenSize:
nodeWithMDLAsset:
nodeWithMDLObject:
nodeWithMDLObject:masterObjects:worldNodes:skinnedMeshes:skelNodesMap:asset:options:context:
nodeWithMDLObject:options:context:
nodeWithModel:
nodeWithNodeRef:
nodeWithSceneKitNode:options:
nodesInsideFrustumWithPointOfView:
noiseFieldWithSmoothness:animationSpeed:
normal
nsWindow
nsWindowLayer
null
nullMaterial
numberOfItemsInComboBox:
numberOfRows
numberWithDouble:
numberWithFloat:
numberWithInt:
numberWithInteger:
numberWithUnsignedChar:
numberWithUnsignedInt:
numberWithUnsignedInteger:
numberWithUnsignedLong:
numberWithUnsignedLongLong:
numberWithUnsignedShort:
objCType
object
objectAtIndex:
objectAtIndexedSubscript:
objectClass
objectController
objectForKey:
objectForKeyedSubscript:
objectHandleClicked:
objectID
objectInAllJointsAtIndex:
objectInAudioPlayersAtIndex:
objectInChildNodesAtIndex:
objectInChildNodesWithAttribute:firstOnly:
objectInChildNodesWithName:
objectInMaterialsAtIndex:
objectName
objectPathWithString:
objectThreadExecutionWidth
objectWithVFXNode:
objectWithVFXNode:bufferAllocator:
observeValueForKeyPath:ofObject:change:context:
observedPresentedItemUbiquityAttributes
observer
obstruction
occluderCategoryBitMask
occlusion
occlusionState
offset
offsetValue
opaque
opaqueECS
opaqueEntityManager
open
openURL:
operatingSystemVersion
operation
optimizeContentsForCPUAccess:
optimizeContentsForCPUAccess:slice:level:
optimizeContentsForGPUAccess:
optimizeContentsForGPUAccess:slice:level:
optimizeIndirectCommandBuffer:withRange:
orangeColor
orderFront:
orderFrontColorPanel:
orderedSet
orderedSetWithCapacity:
orderedSetWithObject:
orientation
orientationConstraintInWorldSpace:withBlock:
orientationOffset
orientationValue
originalToFirstDeindexedTableBufferWithBlitEncoder:indexSizeOut:
orthographicScale
otherMouseDragged:
otherMouseUp:
outerConeAngle
outlineView:child:ofItem:
outlineView:isItemExpandable:
outlineView:numberOfChildrenOfItem:
outlineView:objectValueForTableColumn:byItem:
outlineView:setObjectValue:forTableColumn:byItem:
outlineView:shouldSelectItem:
outputURL
outputsNormal
overrides
owner
ownerWillDie
packageWithContentsOfURL:type:options:error:
panSensitivity
panel
parallaxCenterOffset
parallaxCorrectionEnabled
parallaxExtentsFactor
parallelRenderCommandEncoderWithDescriptor:
parameterBufferSizeAndAlign
parameterOf:named:
parameterOf:named:type:with:
parameterOf:named:with:
parametricType
params
parent
parentItem
parentNode
parentRelativeLevel
parentRelativeSlice
parentTexture
parentView
parentWillDie:
parseSpecialKey:withPath:intoDestination:
parseSpecialKey:withPath:intoDestination:remainingPath:
particleCollider
particleColliderWithEntityObject:
particleDataBuffer
particleDataBufferOffset
particleEmitterWithEntityObject:
particleHeaderBuffer
particleHeaderBufferOffset
passBufferBindings
passDescriptor
patchControlPointCount
patchFont:
patchType
path
pathByAppendingPropertyComponent:
pathComponents
pathControlClicked:
pathControlItemForInstance:
pathExtension
pathForResource:ofType:
pathForResource:ofType:inDirectory:
pathItems
pause:
pauseAnimationForKey:
pauseDisplayLink
paused
peerCount
peerGroupID
peerIndex
peerTaskIdentity
pendingGPUFrameCount
penetrationDistance
performDragOperation:
performMouseDown:
performPresentationObjectQueriesInWorld:usingBlock:
performSelector:
performSelector:withObject:
performSelector:withObject:afterDelay:
performSelector:withObject:withObject:
performTransaction:
performanceStatistics
performanceStatisticsForPid:
phase
physicalSizeForLayer:
physicsBody
physicsJoints
physicsShape
physicsWorld
physicsWorld:didBeginContact:
physicsWorld:didEndContact:
physicsWorld:didUpdateContact:
pipeRadius
pipeSegmentCount
pipelineStateHashForMeshElement:patchType:
pitch
pivot
pivotValue
pixelFormat
pixelsHigh
pixelsWide
planeWithWidth:height:
planeWithWidth:height:options:
play
play:
playbackSpeed
player
pointOfCulling
pointOfCullingComboBox
pointOfView
pointOfViewComboBox
pointSize
pointSourceInHeadMode
pointValue
pointerType
pointerValue
popDebugGroup
popUpContextMenu:withEvent:forView:
popupChanged:
portalClippingMode
position
positionConstraintInWorldSpace:withBlock:
positionOffset
positionValue
positional
postCommandWithContext:object:applyBlock:
postCommandWithContext:object:key:applyBlock:
postCommandWithContext:object:key:subscriptIndex:derivedKeyPath:applyBlock:
postCommandWithContext:object:key:subscriptKey:derivedKeyPath:applyBlock:
postCommandWithContext:object:keyPath:applyBlock:
postNotificationName:object:
postNotificationName:object:userInfo:
postProjectionTransform
postRenderCallback
precompiled
precomputedLightingEnvironment
precomputedLightingEnvironmentContentsWithData:error:
precomputedLightingEnvironmentContentsWithURL:error:
precomputedLightingEnvironmentDataForContents:device:error:
prefab
prefabWithAsset:
prefabWithRootNode:
preferredFilenameExtension
preferredFrameRate
preferredFramesPerSecond
prepareContentOfPopUpButton
prepareForDragOperation:
prepareForRenderer:progressHandler:
prepareObjects:withCompletionHandler:
prepareSnapToAlignData
prepareSnapToAlignDataIfNeeded
prepareWindowIfNeeded
prepareWithTarget:implicitDuration:
prepareWorld:
preprocessorMacros
presentAfterMinimumDuration:
presentDrawable:
presentDrawable:afterMinimumDuration:
presentDrawable:atTime:
presentationBehaviorGraph
presentationBehaviorGraphWithCoreEntityHandleRef:
presentationCamera
presentationCameraEffectWithCameraEffectRef:
presentationCameraWithCameraRef:
presentationEntityFromModel:
presentationForceFieldWithForceFieldRef:
presentationLight
presentationLightWithLightRef:
presentationMaterial
presentationMaterialProperty
presentationModel
presentationModelWithGeometryRef:
presentationMorpher
presentationMorpherWithMorpherRef:
presentationNode
presentationObject
presentationParticleColliderWithCoreEntityHandleRef:
presentationParticleEmitterWithCoreEntityHandleRef:
presentationScene
presentedItemDidChange
presentedItemDidChangeUbiquityAttributes:
presentedItemDidGainVersion:
presentedItemDidLoseVersion:
presentedItemDidMoveToURL:
presentedItemDidResolveConflictVersion:
presentedItemOperationQueue
presentedItemURL
presentedSubitemAtURL:didGainVersion:
presentedSubitemAtURL:didLoseVersion:
presentedSubitemAtURL:didMoveToURL:
presentedSubitemAtURL:didResolveConflictVersion:
presentedTime
presentsWithTransaction
preserveScale
pressure
primaryPresentedItemURL
primitiveCount
primitiveRange
primitiveType
privateRendererOwner
probeEnvironment
probeExtents
probeOffset
probeType
processInfo
processName
processRendererElements:count:engineIterationContext:
processingFormat
processorCount
programWithHashCode:engineContext:trackedResource:introspectionDataPtr:
programWithLibrary:
programWithNode:withMaterial:
progress
progressWithTotalUnitCount:
projectPoint:
projectPoints:count:
projection
projectionDirection
projectionMatrix
projectionTransform
projectionTransformWithViewportSize:
properties
propertiesForEntryName:
propertyListWithData:options:format:error:
propertyName
propertyNamed:
propertyType
propertyWithName:
propertyWithSemantic:
pvrtcData
pyramidWithWidth:height:length:options:
quaternion
query
queryItems
queuedFrameCount
radialField
radialSegmentCount
radialSpan
radianceData
radianceTextureForEnvironmentTexture:engineContext:commandBuffer:
radianceTextureForMaterialProperty:
radianceTextureForPrecomputedLightingEnvironment:
radius
raise:format:
range
rangeAtIndex:
rangeOfString:
rangeOfString:options:
rangeOfString:options:range:
rangeValue
rasterizationRateMap
rate
rawFloat2ForKey:value:
rawFloat3ForKey:value:
rawFloat4ForKey:value:
rawQuilt
rawValue
rayTestWithSegmentFrom:to:options:
rayTestWithSegmentFromPoint:toPoint:options:
readBool:
readDouble:
readFloat:
readInt16:
readInt32:
readInt64:
readInt8:
readInt:
readIntoBuffer:error:
readKeyframeAnimation:
readMask
readSIMD2D:
readSIMD2F:
readSIMD3D:
readSIMD3F:
readSIMD3x3D:
readSIMD3x3F:
readSIMD4D:
readSIMD4F:
readSIMD4x4D:
readSIMD4x4F:
readString:
readUInt16:
readUInt32:
readUInt64:
readUInt8:
readWriteTextureSupport
readonly
readsFromDepthBuffer
reason
recommendedMaxWorkingSetSize
reconfigureIfNeededWithContext:programHashCodeRequirements:
recordGraph
recordGraph:
recordedMetalBinaryArchiveURL
rectValue
recycleBuffersGetCompletion
redComponent
referenceCount
referenceURL
referencedNode
reflectionCategoryBitMask
reflectionFalloffEnd
reflectionFalloffStart
reflectionSampleCount
reflective
reflectivity
registerArgument:frequency:block:
registerArgument:frequency:needsRenderResource:block:
registerBindings
registerForDraggedTypes:
registerSemantic:withBlock:
registerShadableArgumentBindingBlockForBuffers:textures:samplers:
registerUserBlockTrampoline:
registerVFX2AuthoringSystems:
registerWithTriggerManager:inWorld:
registry
registryID
regularExpressionWithPattern:options:error:
regularFileContents
rejectFirstResponder
relativePath
releaseProgramForResource:
relinquishPresentedItemToReader:
relinquishPresentedItemToWriter:
reloadBlock
reloadData
reloadFromURL:error:
reloadPipelinesIfNeeded
reloadWorld:withUpdatedWorldAtURL:
remapEntityReferences:
remapTable
remoteEditionEndpoint
remotePreviewDelegate
remoteStorageBuffer
remoteStorageTexture
remove
removeAllAnimations
removeAllAnimationsWithBlendOutDuration:
removeAllAudioPlayers
removeAllBehaviors
removeAllBindings
removeAllDebugMarkers
removeAllEffects
removeAllIndexes
removeAllMaterials
removeAllObjects
removeAllOverrides
removeAnimationForKey:
removeAnimationForKey:blendOutDuration:
removeAnimationFrom:keyPath:
removeAudioPlayer:
removeButton
removeCameraNode:
removeClient:
removeClonesFromWorld
removeCollisionPlaneWithId:
removeEffect:
removeEffectNode:
removeEntityObject:
removeFilePresenter:
removeFileWrapper:
removeForKeyPath:
removeForceFieldNode:
removeFromParent
removeFromParentNode
removeFromSuperview
removeIndex:
removeIndexes:
removeItemAtPath:error:
removeItemAtURL:error:
removeItemsFromWorld:
removeLastObject
removeLightNode:
removeLightWithId:
removeMaterialAtIndex:
removeMonitor:
removeNode:
removeObject:
removeObjectAtIndex:
removeObjectClicked:
removeObjectForKey:
removeObjectFromAudioPlayersAtIndex:
removeObjectFromChildNodesAtIndex:
removeObjectFromMaterialsAtIndex:
removeObjectsAtIndexes:
removeObserver:forKeyPath:
removeObserver:forKeyPath:context:
removeObserver:name:object:
removeOutput:
removePhysicsBody:handle:
removePhysicsJoint:
removeResidencySet:
removeResidencySets:count:
removeReverseItem:
removeSkyboxes
removeState:
removeStateItem:
removeTrackingArea:
removeTransitionFrom:to:
removeWorldReference:
removedNode:
removedOnCompletion
render
renderAndAppendWithPresentationTime:usingAdaptor:metalTextureCache:cvQueue:completionBlock:
renderAtTime:
renderAtTime:viewport:encoder:passDescriptor:commandQueue:
renderBackground:engineContext:passInstance:
renderBufferFormat
renderCommandEncoder
renderCommandEncoderWithDescriptor:
renderContext:commandBufferDidCompleteWithError:
renderContext:didFallbackToDefaultTextureForSource:message:
renderDebugOptions
renderEncoder
renderForBlur
renderGraph
renderGraphDescriptionWithSCNTechniqueDescription:
renderGraphUtils
renderMesh:meshElement:withProgram:engineContext:transform:color:rasterizerStates:blendState:texture:depthBias:
renderMode
renderMovieToURL:size:antialiasingMode:attributes:error:
renderPassDescriptor
renderPassIdentifier
renderPassName
renderResourceForAsset:withEngineContext:entityCache:isFallback:isDynamic:
renderResourceForDeformerStack:node:dataKind:
renderResourceForImage:sampler:options:engineContext:didFallbackToDefaultTexture:
renderResourceForImageProxy:sampler:engineContext:didFallbackToDefaultTexture:
renderResourceForMaterialProperty:withEngineContext:didFallbackToDefaultTexture:isDynamic:
renderResourceForMorpher:baseMesh:dataKind:provider:
renderResourceForProgramDesc:renderPassDescriptor:
renderResourceForSkinner:baseMesh:dataKind:provider:
renderSize
renderTargetArrayLength
renderTargetInfo
renderTargetSize
renderTime
renderToTexture:
renderToTexture:commandBuffer:
renderToTexture:computeCommandHandler:blitCommandHandler:completionHandler:helper:
renderToTexture:options:
renderVideoBackground:engineContext:materialProperty:
renderWithCommandBuffer:viewPoints:mode:
renderWithCompletion:
renderWithEngineContext:textureSampler:nextFrameTime:
renderWithEngineContext:textureSampler:nextFrameTime:status:
renderWithPresentWithTransaction:completion:
renderWithTextureAttachmentProvider:options:
renderWithViewport:commandBuffer:passDescriptor:
renderer
renderer:commandBufferDidCompleteWithError:
renderer:didApplyAnimationsAtTime:
renderer:didApplyConstraintsAtTime:
renderer:didFallbackToDefaultTextureForSource:message:
renderer:didSimulatePhysicsAtTime:
renderer:updateAtTime:
renderer:willRenderWorld:atTime:
rendererClass
rendererDidChange:
rendererForWorldRenderer:
rendererKind
rendererOptionsPanelForView:
rendererWithDevice:options:
renderingAlgorithm
renderingOrder
rendersContinuously
rendersIntoMaterial
repeatCount
repeatDuration
replaceBytesInRange:withBytes:
replaceCharactersInRange:withString:
replaceChildNode:with:
replaceMaterial:with:
replaceMaterialAtIndex:withMaterial:
replaceObjectAtIndex:withObject:
replaceObjectInAudioPlayerAtIndex:withObject:
replaceObjectInChildNodesAtIndex:withObject:
replaceObjectInMaterialsAtIndex:withObject:
replaceOccurrencesOfString:withString:options:range:
replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:
replaceRegion:mipmapLevel:withBytes:bytesPerRow:
replaces:
replicateToRuntimeAndStartReplicationWithOptions:
replicatesOrientation
replicatesPosition
replicatorConstraint
representationUsingType:properties:
representedObject
requestMediaDataWhenReadyOnQueue:usingBlock:
requireLoadFinalTexture
required
requiredInputs
requiresMainThreadUpdates
requiresSecureCoding
reset
resetCache
resetCommandsInBuffer:withRange:
resetTextureAccessCounters:region:mipLevel:slice:
resetTileCondition
resetToTransform:
resetTransform
resetUsingDescriptor:
resetVolatileMeshElements
resetVolatileMeshes
resignCurrent
resignFirstResponder
resizingMode
resolveCounters:inRange:destinationBuffer:destinationOffset:
resolveDepthPlane
resolveInsideArchiveWithAssetNamed:
resolveLevel
resolveObjectReferencesWithRemapTableWithWorld:objectsByIdentifier:
resolveSlice
resolveTag:remap:
resolveTexture
resolveVFXCoreAndTagReferences
resolvedBackgroundColorDidChange:
resolver
resolverWithFolderURL:
resourceBlitEncoder
resourceCommandBuffer
resourceComputeEncoder
resourceGroup
resourceManagerMonitor
resourcePath
resourceQueue
resourceStateCommandEncoder
resourceStateCommandEncoderWithDescriptor:
resourceURL
respondsToSelector:
restitution
restoreGraphicsState
resumeAnimationForKey:
resumeDisplayLink
retain
retainCount
retainedReferences
retargetWithRemapTable:
reverbBlend
reverseObjectEnumerator
reverseTransformedValue:
reverseZ
rg_setLineWidth:
rightMouseDragged:
rightMouseUp:
rollAroundTarget:
rollBy:aroundScreenPoint:viewport:
rollCameraSpaceBy:withPoint:viewport:
root
rootLayer
rootNode
rootNodeForLayer:
rootObjectID
rootResource
rotateBy:around:
rotateBy:aroundTarget:
rotateByX:Y:
rotateOf:
rotateToAxisAngle:
rotateWithEvent:
rotateWithVector:mode:
rotation
rotationMode
rotationRepresentation
rotationSensitivity
rotationValue
rotations
roughness
rowForItem:
runBench:
runModal
sRGBColorSpace
sRGBTexture
sWrapMode
safe_children
sampleCount
sampleCountersInBuffer:atSampleIndex:withBarrier:
sampleDistributedShadowMaps
sampleRate
sampleTimestamps:gpuTimestamp:
sampler::
samplerAtIndices:
saturation
save
saveAndCreateUSDZPackageWithURL:
saveGraphicsState
saveInitialSelection
savePanel
savePresentedItemChangesWithCompletionHandler:
scale
scaleFactor
scaleOffset
scaleValue
scales
scatteringFunction
scene
sceneScale
sceneWithURL:options:error:
scheduleBuffer:atTime:options:completionHandler:
scheduleFile:atTime:completionHandler:
scheduledTimerWithTimeInterval:repeats:block:
scheme
scope
screen
screenSize
screenSpace
screenSpaceAdaptiveTessellationDrawMeshElement:forMesh:instanceCount:renderContext:
screenSpaceAmbientOcclusionDepthThreshold
screenSpaceAmbientOcclusionIntensity
screenSpaceAmbientOcclusionNormalThreshold
screenSpaceAmbientOcclusionRadius
screenSpaceRadius
screenSpaceReflectionDepthThreshold
screenSpaceReflectionMaximumDistance
screenSpaceReflectionSampleCount
screenSpaceReflectionStride
scrollPoint:
scrollRowToVisible:
scrollWheel:
second
seekSlider
seekStep
seekStepper
seekToTime:toleranceBefore:toleranceAfter:
segmentCount
selectAuthoringDisplayMask:
selectCamera:
selectInstance:propertyName:
selectItemAtIndex:
selectNodes:
selectObject:selected:
selectPointOfCulling:
selectRenderingDebugOptions:
selectRowIndexes:byExtendingSelection:
selectedItem
selectedItems
selectedNode
selectedNodes
selectedRow
selecting
selection
selectionDelegate
selectionDidChange:
selectionIsReadonly
selectionTransformMode
selectionWillChange
self
selfIllumination
selfIlluminationOcclusion
semantic
semanticForSymbol:
semanticsCount
sendAction:to:
sensorHeight
sensorSize
sensorVerticalAperture
serializeToURL:error:
serializedVFXBindingData
serializedVFXBindingSize
setAccelerationStructure:atBufferIndex:
setAccelerationStructure:atIndex:
setAccessibilityDescription:
setAction:
setActive:
setActiveStateName:
setAdaptationBrighteningSpeedFactor:
setAdaptationDarkeningSpeedFactor:
setAdaptationMaximum:
setAdaptationMinimum:
setAdaptativeFrameRate:
setAdaptive:
setAdditive:
setAdditiveWritesToAlpha:
setAffectedByGravity:
setAlignment:
setAlignmentMode:
setAllTargetsFromAnimCodec:
setAllowGPUOptimizedContents:
setAllowLoadingFromFuture:
setAllowRemoteEdition:
setAllowedContentTypes:
setAllowsBrowsing:
setAllowsCameraControl:
setAllowsCreation:
setAllowsResting:
setAllowsTickMarkValuesOnly:
setAllowsTranslation:
setAlphaBlendOperation:
setAlphaTestReferenceValue:
setAlternateMode:
setAlternateTitle:
setAlwaysDiscardsLateVideoFrames:
setAnamorphic:
setAnchorA:
setAnchorAValue:
setAnchorB:
setAnchorBValue:
setAngularDamping:
setAngularRestingThreshold:
setAngularSleepingThreshold:
setAngularVelocity:
setAngularVelocityFactor:
setAngularVelocityFactorValue:
setAngularVelocityValue:
setAnimationDidStart:
setAnimationDidStop:
setAnimationDuration:
setAnimationEvents:
setAnimationTimingFunction:
setAnimations:
setAntialiasingLevel:
setAntialiasingMode:
setApertureBladeCount:
setAppliedOnCompletion:
setAreaLightParametersWithExtents:doubleSided:
setAreaPolygonVertices:
setAreaType:
setArgument:atIndex:
setArgumentBuffer:offset:
setArgumentBuffer:startOffset:arrayElement:
setArgumentEncoder:
setArguments:
setArray:
setAssetManager:
setAssetPathResolver:
setAssetValue:
setAsyncRuntimeLock:
setAsynchronousLoading:
setAttachmentProvider:
setAttenuationDistance:
setAttenuationEndDistance:
setAttenuationFalloffExponent:
setAttenuationRadius:
setAttenuationStartDistance:
setAttributedTitle:
setAttributes:
setAudioListener:
setAuthoringCamera:forView:
setAuthoringCameraType:
setAuthoringEnvironment2:
setAuthoringGraph:
setAuthoringTargetNode:
setAutoAdjustCamera:
setAutoExposureEnabled:
setAutoSwitchToFreeCamera:
setAutoenablesDefaultLighting:
setAutomaticCameraTarget:
setAutomaticTarget:
setAutomaticallyAdjustsShadowProjection:
setAutomaticallyAdjustsVideoMirroring:
setAutomaticallyAdjustsZRange:
setAutomaticallyPrepareScene:
setAutoresizingMask:
setAutoreverses:
setAvPlayer:
setAvoidsOverLighting:
setAxisA:
setAxisAValue:
setAxisB:
setAxisBValue:
setBackFaceStencil:
setBackgroundColor:
setBackgroundGPUPriority:
setBaked:
setBaseMeshBindTransform:
setBaseState:
setBeamed
setBeginTime:
setBehaviorGraph:
setBezelStyle:
setBi:
setBias:
setBiasValues:
setBinaryArchives:
setBindBlock:
setBinding:
setBindingValue:forKey:
setBlendColorRed:green:blue:alpha:
setBlendInDuration:
setBlendMode:
setBlendOutDuration:
setBlendingEnabled:
setBlock:
setBloom:
setBloomBlurRadius:
setBloomColorFilter:
setBloomContrast:
setBloomIntensity:
setBloomIterationCount:
setBloomIterationSpread:
setBloomSaturation:
setBloomThreshold:
setBloomThresholdSmoothness:
setBloomUseHighQuality:
setBodyA:
setBodyB:
setBoneInverseBindTransforms:
setBones:
setBoolValue:
setBordered:
setBoundingBoxBuffer:
setBoundingBoxBufferOffset:
setBoundingBoxCount:
setBoundingBoxMin:max:
setBoundingBoxStride:
setBounds:
setBoundsSize:
setBoxType:
setBrightness:
setBuffer:
setBuffer:offset:atIndex:
setBuffer:offset:attributeStride:atIndex:
setBufferOffset:atIndex:
setBufferOffset:attributeStride:atIndex:
setBufferSize:
setBuffers:offsets:attributeStrides:withRange:
setBuffers:offsets:withRange:
setBuiltinEffectIdentifiers:
setButtonType:
setByAddingObject:
setByAddingObjectsFromArray:
setByAddingObjectsFromSet:
setByValue:
setBytes:length:atIndex:
setBytes:length:attributeStride:atIndex:
setCGImage:
setCalculationMode:
setCamera:
setCameraEntityTransformProjection:::::::
setCameraTarget:
setCanDrawConcurrently:
setCanRecycleParticleBuffers:
setCanceled:
setCapSegmentCount:
setCaptureDevice:
setCaptureDeviceOutputConsumerSource:
setCaptureObject:
setCategoryBitMask:
setCenter:
setCenterOfMassOffset:
setCfxAnimation:
setChainRootNode:
setChamferProfile:
setChamferRadius:
setChamferSegmentCount:
setChannelTargetCounts:
setChannelTargetWeights:
setCharge:
setChildNodes:
setChromaticTransform:
setClearColor:
setClearDepth:
setClearStencil:
setClientCGImage:
setClientCommandBuffer:
setClientCommandQueue:
setClientID:
setClientRenderCommandEncoder:
setClientRenderPassDescriptor:
setClientTexture:
setClipPlane:p2:p3:p4:atIndex:
setClipsToBounds:
setCollectsCompilationErrors:
setCollisionBitMask:
setCollisionCategoryBitMask:
setColor1:
setColor2:
setColor3:
setColor:
setColorBufferWriteMask:
setColorFringeIntensity:
setColorFringeStrength:
setColorGrading:
setColorManaged:
setColorPixelFormat:
setColorResolveTexture:slice:depthPlane:level:atIndex:
setColorResolveTexture:slice:depthPlane:level:yInvert:atIndex:
setColorSpace:
setColorStoreAction:atIndex:
setColorStoreActionOptions:atIndex:
setColorTexture:
setColorTextureFormat:
setColored:
setColorspace:
setCommandBuffer:
setCommandBufferStatusMonitor:
setCommandDataCorruptModeSPI:
setCommandQueue:
setCommitsOnCompletion:
setCompleted:
setCompletedUnitCount:
setCompletionBlock:
setComponent:
setCompressionType:
setComputeFunction:
setComputePipelineState:
setComputePipelineState:atIndex:
setComputePipelineStates:withRange:
setConnectionWithTargetPaths:
setConstantToString:
setConstantValue:type:atIndex:
setConstantValues:
setConstraintRef:
setContactDelegate:
setContactTestBitMask:
setContainerFrame:
setContent:
setContentScaleFactor:
setContents:
setContentsGravity:
setContentsScale:
setContentsTransform:
setContext:
setContinuityValues:
setContinuousCollisionDetectionThreshold:
setContrast:
setController:
setCoordinateSpace:
setCornerRadius:
setCornerSegmentCount:
setCountStyle:
setCounterStorage:
setCounters:
setCpuCacheMode:
setCullMode:
setCumulative:
setCurrentContext:
setCurrentPassHash:
setCurrentPassMaterial:
setCurrentThreadImmediateMode:
setDamping:
setData:
setDataSource:
setDateFormat:
setDebugOptions:
setDebugUIOptions:
setDecelerationDistance:
setDecodingFailurePolicy:
setDefaultRenderGraph:
setDeferredBindingEnabled:
setDeformers:
setDelegate:
setDepth:
setDepthAttachmentPixelFormat:
setDepthBias:slopeScale:clamp:
setDepthClipMode:
setDepthClipModeSPI:
setDepthCompareFunction:
setDepthFailureOperation:
setDepthOfField:
setDepthPixelFormat:
setDepthPlane:
setDepthResolveFilter:
setDepthResolveTexture:slice:depthPlane:level:
setDepthResolveTexture:slice:depthPlane:level:yInvert:
setDepthReversed:
setDepthStencilPassOperation:
setDepthStencilState:
setDepthStoreAction:
setDepthStoreActionOptions:
setDepthTestMinBound:maxBound:
setDepthTexture:
setDepthTextureFormat:
setDepthWriteEnabled:
setDescriptor:
setDestinationRGBBlendFactor:
setDestinationReplicationDelegate:
setDevice:
setDictionaryMetadataWithKey:dictionaryKey:value:
setDidEndSelector:
setDidFinishPlayback:
setDirectionalLightUniformOverridesOn:world:proj:
setDirectionalParametersWithScale:zNear:zFar:
setDisableActions:
setDiscretizedStraightLineMaxLength:
setDisplayAspect:
setDisplaySyncEnabled:
setDisplaysWhenScreenProfileChanges:
setDoNotClearRenderOutput:
setDouble3Value:
setDouble4x4Array:count:
setDouble4x4Value:
setDouble4x4Value:atTime:
setDoubleAction:
setDoughnutBokeh:
setDraggedTransform:
setDrawableResizesAsynchronously:
setDrawableSize:
setDrawsArea:
setDrivenByDefaultNavigationCameraController:
setDuration:
setEdgeCreasesElement:
setEdgeCreasesSource:
setEdgeTessellationFactor:
setEditable:
setEditingSpace:
setEditorLocked:
setEffect:
setEffects:
setElementIndex:
setEmitterIdentifier:
setEmulateStereo:
setEnableARMode:
setEnableDeferredRendering:
setEnableFreeCamera:
setEnableInertia:
setEnableParallelDecoding:
setEnableRuntimeScriptCompilation:
setEnabled:
setEnabled:enabled:
setEncoder:
setEncoder:alreadyUsed:
setEndTime:
setEngineNotificationQueue:
setEntityHandle:
setEnumCases:
setEnumName:
setError:
setErrorOptions:
setEulerAnglesValue:
setEventBlock:
setEventHandler:
setExecutableURL:
setExpectsMediaDataInRealTime:
setExposure:
setExposureAdaptationBrighteningSpeedFactor:
setExposureAdaptationDarkeningSpeedFactor:
setExposureOffset:
setExtendedLinearSRGBColor:
setExtrusionDepth:
setFStop:
setFaceCount:
setFaceTopology:
setFadeInDuration:
setFadeOutDuration:
setFalloff:
setFalloffExponent:
setFarVisibilityDistance:
setFastMathEnabled:
setFeatures:
setFieldType:
setFillMode:
setFillsBackward:
setFillsForward:
setFilmOffset:
setFilterQuality:
setFilters:
setFirstMaterial:
setFlatness:
setFlattened:
setFloat2Array:count:
setFloat3Array:count:
setFloat3Array:count:atTime:
setFloat3Value:atTime:
setFloatArray:count:
setFloatArray:count:atTime:
setFloatValue:
setFloatValue:atTime:
setFlyModeVelocity:
setFocalBlurSampleCount:
setFocusBehavior:
setFocusDistance:
setFogColor:
setFogDensityExponent:
setFogEndDistance:
setFogStartDistance:
setFont:
setForceField:
setForcesBackFaceCasters:
setFormat:
setFormatter:
setFragmentAccelerationStructure:atBufferIndex:
setFragmentBuffer:offset:atIndex:
setFragmentBufferOffset:atIndex:
setFragmentBuffers:offsets:withRange:
setFragmentBytes:length:atIndex:
setFragmentFunction:
setFragmentFunctionName:
setFragmentIntersectionFunctionTable:atBufferIndex:
setFragmentIntersectionFunctionTables:withBufferRange:
setFragmentSamplerState:atIndex:
setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setFragmentSamplerState:lodMinClamp:lodMaxClamp:lodBias:atIndex:
setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setFragmentSamplerStates:withRange:
setFragmentShader:
setFragmentTexture:atIndex:
setFragmentTexture:atTextureIndex:samplerState:atSamplerIndex:
setFragmentTextures:withRange:
setFragmentVisibleFunctionTable:atBufferIndex:
setFragmentVisibleFunctionTables:withBufferRange:
setFrame:
setFrame:display:
setFrameA:
setFrameB:
setFrameBufferBindings:
setFrameConfigurationWithImmersiveEnvironmentCurves:
setFrameRate:
setFrameSize:
setFramebufferOnly:
setFreeAxes:
setFrequency:
setFresnelExponent:
setFriction:
setFromAngle:
setFromShift:
setFromValue:
setFromZ:
setFrontFaceStencil:
setFrontFacingWinding:
setFrozen:
setFunction:atIndex:
setFunctionCount:
setFunctions:
setGainColor:
setGainOffset:
setGamma:
setGammaColor:
setGeneratedTexturePath:
setGeodesic:
setGeometryDescriptors:
setGeometryModificationCount:
setGeometryShader:
setGimbalLockEnabled:
setGimbalLockMode:
setGizmo:
setGrain:
setGrainIntensity:
setGrainIsColored:
setGrainScale:
setGraphicalSelectionEnabled:
setGravity:
setGravityValue:
setHalfExtent:
setHalfExtentValue:
setHazardTrackingMode:
setHeight:
setHeightSegmentCount:
setHidden:
setHittable:
setHorizonElevation:
setHorizontalMaximumAngle:
setIBLParametersWithEntity:
setIBLParametersWithTag:
setIBLParametersWithUrl:texture:
setIESProfile:
setIESProfileURL:
setIdentifier:
setImGUIEnabled:
setImage:
setImageFrameStyle:
setImageblockWidth:height:
setImmediateMode:
setImmediateModeRestrictedContext:
setIndex:
setIndexBufferOffset:
setIndexOfRefraction:
setIndexType:
setIndirectCommandBuffer:atIndex:
setIndirectCommandBuffers:withRange:
setInertiaEnabled:
setInertiaFriction:
setInfluenceFactor:
setInnerConeAngle:
setInputPrimitiveTopology:
setInputWidth:
setInsideTessellationFactor:
setInstance:
setInstanceCount:
setInstanceDescriptorBuffer:
setInstancedAccelerationStructures:
setIntArray:count:
setIntensity:
setInteractionMode:
setInternalPixelFormat:
setInternalPixelFormatDepth:
setIntersectionFunctionTable:atBufferIndex:
setIntersectionFunctionTable:atIndex:
setIntersectionFunctionTableOffset:
setIntersectionFunctionTables:withBufferRange:
setIntersectionFunctionTables:withRange:
setInvView:
setIrradianceData:
setIsAuthoringWorld:
setIsEnabled:
setIsFrozen:
setIsJoint:
setIsOpaque:
setIsOrthographic:
setIsPlaying:
setIsTargetFromHitTest:
setIsTextureSource:
setIsTombstoned:
setIsVFX2:
setIterationCount:
setJitterOffsetX:
setJitterOffsetY:
setJitteringEnabled:
setJoint:
setKeepTargetDirection:
setKeyCodeConfiguration:
setKeyPath:
setKeyPathDst:
setKeyPathSrc:
setKeyTimes:
setLabel:
setLanguageVersion:
setLastFrameTime:
setLastFrameWorldTransform:
setLateLatchingPatchHandler:
setLaunchPath:
setLayer:
setLayer:atIndex:
setLayerContentsRedrawPolicy:
setLength:
setLengthSegmentCount:
setLensBlur:
setLevel:
setLevelsOfDetail:
setLibrary:
setLiftColor:
setLiftOffset:
setLight:
setLightBufferBindings:
setLightParametersOn:parameters:
setLightType:
setLineBreakMode:
setLineWidth:
setLinearExtendedSRGBColor:
setLinearRestingThreshold:
setLinearSleepingThreshold:
setLinkedFunctions:
setListenerPosition:
setListenerVectorOrientation:
setLoadAction:
setLoadBindingsMetadata:
setLoadingPolicy:
setLocalFront:
setLocalFrontValue:
setLockCullMode:
setLockFillMode:
setLookUpFoundInstance:
setLookUpKey:
setLoops:
setLowLatency:
setMTLTextureCache:
setMagFilter:
setMagnificationFilter:
setManager:
setMappingChannel:
setMargin:
setMaskCenter:
setMaskRadius:
setMass:
setMaterial:
setMaterialFace:
setMaterialModificationCount:
setMaterials:
setMatrix4:
setMatrix:
setMaxAllowedRotationAngle:
setMaxAllowedRotationAngle:forJoint:
setMaxAnisotropy:
setMaxTessellationFactor:
setMaxValue:
setMaximumAngularLimit1:
setMaximumAngularLimit2:
setMaximumAngularLimit:
setMaximumDistance:
setMaximumDrawableCount:
setMaximumEdgeLength:
setMaximumExposure:
setMaximumHorizontalAngle:
setMaximumLinearAcceleration:
setMaximumLinearLimit:
setMaximumLinearVelocity:
setMaximumPointScreenSpaceRadius:
setMaximumShadowDistance:
setMaximumTwistAngle:
setMaximumVerticalAngle:
setMesh:
setMeshAccelerationStructure:atBufferIndex:
setMeshBuffer:offset:atIndex:
setMeshBufferOffset:atIndex:
setMeshBuffers:offsets:withRange:
setMeshBytes:length:atIndex:
setMeshFunction:
setMeshIntersectionFunctionTable:atBufferIndex:
setMeshIntersectionFunctionTables:withBufferRange:
setMeshRef:
setMeshSamplerState:atIndex:
setMeshSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setMeshSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setMeshTexture:atIndex:
setMeshTextures:withRange:
setMeshVisibleFunctionTable:atBufferIndex:
setMeshVisibleFunctionTables:withBufferRange:
setMetadataWithKey:value:
setMetalBinaryArchiveURLs:
setMetalLibraryURL:
setMinFilter:
setMinValue:
setMinificationFilter:
setMinimumAngularLimit:
setMinimumDistance:
setMinimumExposure:
setMinimumHorizontalAngle:
setMinimumLanguageVersion:
setMinimumLinearLimit:
setMinimumPointScreenSpaceRadius:
setMinimumVerticalAngle:
setMipFilter:
setMipmapLevelCount:
setMkSemantic:
setMlDelegate:
setMode:
setModel:
setMomentOfInertia:
setMomentOfInertiaValue:
setMorpher:
setMotionBlur:
setMotionBlurIntensity:
setMotionTexture:
setMotionTextureFormat:
setMotionVectorScaleX:
setMotionVectorScaleY:
setMotorMaximumForce:
setMotorMaximumTorque:
setMotorTargetAngularVelocity:
setMotorTargetLinearVelocity:
setMovableByWindowBackground:
setMtlTexture:
setMuted:
setNSView:
setName:
setNavigationCameraController:
setNearVisibilityDistance:
setNeedsDisplay:
setNeedsDisplayOnBoundsChange:
setNeedsRenderResource:
setNext:
setNode:
setNodeBufferBindings:
setNodeRef:
setNsWindow:
setNsWindowLayer:
setNumberOfTickMarks:
setObject:atIndexedSubscript:
setObject:forKey:
setObject:forKeyedSubscript:
setObjectAccelerationStructure:atBufferIndex:
setObjectBufferOffset:atIndex:
setObjectBuffers:offsets:withRange:
setObjectBytes:length:atIndex:
setObjectController:
setObjectFunction:
setObjectID:
setObjectIntersectionFunctionTable:atBufferIndex:
setObjectIntersectionFunctionTables:withBufferRange:
setObjectName:
setObjectPath:
setObjectPathArray:
setObjectSamplerState:atIndex:
setObjectSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setObjectSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setObjectSamplerStates:withRange:
setObjectTexture:atIndex:
setObjectTextures:withRange:
setObjectThreadgroupMemoryLength:atIndex:
setObjectVisibleFunctionTable:atBufferIndex:
setObjectVisibleFunctionTables:withBufferRange:
setOccluderCategoryBitMask:
setOcclusion:
setOffset:
setOpacity:
setOpaque:
setOperation:
setOptions:
setOrientationOffset:
setOrientationValue:
setOrthographicScale:
setOuterConeAngle:
setOutputHeight:
setOutputTexture:
setOutputTextureFormat:
setOutputURL:
setOutputVolume:
setOverrides:
setOwnerWithIdentity:
setPanSensitivity:
setParallaxCenterOffset:
setParallaxCorrectionEnabled:
setParallaxExtentsFactor:
setParameterOf:named::
setParameterOf:named:type:size:with:
setParameterOf:named:with:
setParametricType:
setParentView:
setParticleCollider:
setParticleEmitter:
setPassBufferBindings:
setPassDescriptor:
setPath:
setPathItems:
setPaused:
setPaused:nextFrameTimeHint:lastUpdate:
setPeerPid:
setPeerTaskIdentity:
setPhysicsShape:
setPipeRadius:
setPipeSegmentCount:
setPitch:
setPivot:
setPivotValue:
setPixelBuffer:fromDevice:
setPlaybackSpeed:
setPlayer:
setPlaying:
setPointLightParametersWithZNear:zFar:
setPointOfCulling:
setPointOfView:animate:
setPointOfView:updateUpTransform:
setPointSize:
setPointSourceInHeadMode:
setPosition:
setPositionOffset:
setPositionValue:
setPositional:
setPostProjectionTransform:
setPostProjectionTransformScale:
setPostProjectionTransformTranslation:
setPostRenderCallback:
setPrecomputedLightingEnvironment:
setPrefab:
setPreferredFilename:
setPreferredFrameRate:
setPreferredFramesPerSecond:
setPreprocessorMacros:
setPresentsWithTransaction:
setPreserveScale:
setPrimitiveRange:
setPrimitiveRanges:
setPrimitiveRestartEnabled:
setPrimitiveRestartEnabled:index:
setPrimitiveType:
setPrivateFunctions:
setProbeExtents:
setProbeType:
setProbeUpdateType:
setProgram:
setProgress:
setProjection:
setProjectionDirection:
setProjectionMatrix:
setProjectionTransform:
setProvokingVertexMode:
setPurgeableState:
setQuaternion:
setQuatfArray:count:atTime:
setQuatfValue:
setQuatfValue:atTime:
setQuery:
setRAddressMode:
setREMeshDataBinding:positionData:normalData:colorData:
setRadialSegmentCount:
setRadialSpan:
setRadianceData:
setRadius:
setRasterSampleCount:
setRasterizationEnabled:
setRasterizationRateMap:
setRasterizerStates:
setRate:
setRawQuilt:
setRawValue:
setReadMask:
setReadabilityHandler:
setReadonly:
setReadsFromDepthBuffer:
setRecordedMetalBinaryArchiveURL:
setReferenceCount:
setReferenceURL:
setReferencedNode:
setReflectionCategoryBitMask:
setReflectionFalloffEnd:
setReflectionFalloffStart:
setReflectionResolutionScaleFactor:
setReflectionSampleCount:
setReflectivity:
setRegistry:
setRemoteEditionEndpoint:
setRemotePreviewDelegate:
setRemove:
setRemoveButton:
setRemovedOnCompletion:
setRenderMode:
setRenderPassIdentifier:
setRenderPassName:
setRenderPassParameters:
setRenderPipelineState:
setRenderPipelineStates:withRange:
setRenderTargetArrayLength:
setRenderer:
setRendererKind:
setRenderingAlgorithm:
setRenderingOrder:
setRendersContinuously:
setRendersIntoMaterial:
setRepeatDuration:
setReplayLoopRange:
setReplicatesOrientation:
setReplicatesPosition:
setReplicatesScale:
setReplicationDelegate:
setRepresentedObject:
setRequireLoadFinalTexture:
setRequiresSecureCoding:
setResizingMode:
setResolveDepthPlane:
setResolveLevel:
setResolveSlice:
setResolveTexture:
setResource:ofType:atIndices:
setResourceManagerMonitor:
setResourceOptions:
setResourcePath:
setResponsibleProcess:
setResting:
setRgbBlendOperation:
setRi:
setRollingFriction:
setRootEntityTransform:::
setRootLayer:
setRootNode:
setRootNode:forLayer:
setRootTransform:::
setRotation:
setRotationMode:
setRotationSensitivity:
setRotationValue:
setSAddressMode:
setSampleBuffer:
setSampleBuffer:fromDevice:
setSampleBufferDelegate:queue:
setSamplerState:atIndex:
setSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setSamplerStates:withRange:
setSaturation:
setScale:
setScaleValue:
setScene:
setSceneScale:
setSceneTransform:::
setScissorRects:count:
setScope:
setScreenSize:
setScreenSpaceAmbientOcclusionBias:
setScreenSpaceAmbientOcclusionDepthThreshold:
setScreenSpaceAmbientOcclusionIntensity:
setScreenSpaceAmbientOcclusionNormalThreshold:
setScreenSpaceAmbientOcclusionRadius:
setScreenSpaceReflectionDepthThreshold:
setScreenSpaceReflectionMaximumDistance:
setScreenSpaceReflectionSampleCount:
setScreenTransform:
setSeekStep:
setSegmentCount:
setSelecting:
setSelectionDelegate:
setSelectionIsReadonly:
setSelectionTransformMode:
setSelector:
setSelfIlluminationOcclusion:
setSemantic:
setSemantic:forSymbol:
setSemantic:forSymbol:options:
setSemanticInfos:
setSemanticsCount:
setSensorHeight:
setSensorVerticalAperture:
setSession:
setSettings:
setSetupAsTemplate:
setSetupAsyncRuntime:
setSetupRenderer:
setShadableBufferBindings:
setShaderModifiers:
setShadingModel:
setShadowBias:
setShadowCascadeCount:
setShadowCascadeSplittingFactor:
setShadowIntensity:
setShadowMapSize:
setShadowParametersOn:castsShadows:tiles:count:depthBias:
setShadowRadius:
setShadowSampleCount:
setShape:
setShapeNode:
setShapes:
setShininess:
setShouldBakeDirectLighting:
setShouldBakeIndirectLighting:
setShouldClearCPUDataAfterUpload:
setShouldLoadFinalTexture:
setShouldMaximizeConcurrentCompilation:
setShouldMorphNormals:
setShouldPresentAfterMinimumDuration:
setShouldSnapOnGrid:
setShouldSnapToAlign:
setShouldStream:
setShoulderAngle:
setShoulderLength:
setShoulderStrength:
setShowStatistics:
setShowsAlpha:
setShowsAuthoringEnvironment:
setShowsDebugUI:
setShowsStatistics:
setSimdTarget:
setSimdTransform:
setSimdUp:
setSimdWorldTransform:
setSimulateCommandBufferFailure:
setSize:
setSkeleton:
setSkinner:
setSkipFramesIfNoDrawableAvailable:
setSkipMorphTargets:
setSlice:
setSmoothingMode:
setSmoothness:
setSoftness:
setSource:
setSourceAlphaBlendFactor:
setSourceFile:
setSourceMode:
setSourceObject:
setSourceRGBBlendFactor:
setSourceReplicationDelegate:
setSpecializedName:
setSpeed:
setSphericalHarmonicsCoefficients:
setSpotFalloffExponent:
setSpotInnerAngle:
setSpotLightParametersWithOuterAngle:innerAngle:zNear:zFar:
setSpotOuterAngle:
setSsao:
setStackControl:
setStageInRegion:
setStageInRegionWithIndirectBuffer:indirectBufferOffset:
setStageInputDescriptor:
setStageInputOutputBuffersToComputeEncoder:
setStageInputOutputBuffersToCurrentComputeEncoder
setStageInputOutputBuffersToEncoder:
setStandardError:
setStandardOutput:
setStartTime:
setState:
setState:ofLayer:transitionSpeed:
setStateManager:
setStates:
setStatsDrawcallCount:
setStatsPrimitiveCount:
setStatsVertexCount:
setStencilAttachmentPixelFormat:
setStencilCleared
setStencilCompareFunction:
setStencilFailureOperation:
setStencilFrontReferenceValue:backReferenceValue:
setStencilReferenceValue:
setStencilResolveFilter:
setStencilResolveTexture:slice:depthPlane:level:
setStencilResolveTexture:slice:depthPlane:level:yInvert:
setStencilStoreAction:
setStencilStoreActionOptions:
setStepFunction:
setStepRate:
setStickyAxis:
setStoreActionOptions:
setStrength:
setStride:
setString:
setStyleMask:
setSubdivisionLevel:
setSubp:
setSucceded:
setSuperSampling:
setSuperSamplingFactor:
setSupportArgumentBuffers:
setSurroundToSelect:
setSwizzle:
setSyncTimeWithCoreAnimation:
setTAddressMode:
setTable:
setTarget:
setTargetDirection:
setTargetOffset:
setTargetOffsetValue:
setTargetPosition:
setTargetPositionValue:
setTargets:
setTargets:withInBetweenTargetCounts:inBetweenWeights:
setTargetsAndInBetweens:inBetweenCounts:inBetweenWeights:correctives:driverCounts:driverIndices:inBetweenCounts:inBetweenWeights:
setTensionValues:
setTessellationControlPointIndexType:
setTessellationControlShader:
setTessellationEvaluationShader:
setTessellationFactorBuffer:offset:instanceStride:
setTessellationFactorFormat:
setTessellationFactorScale:
setTessellationFactorScaleEnabled:
setTessellationFactorStepFunction:
setTessellationOutputWindingOrder:
setTessellationPartitionMode:
setTexture:
setTexture:atIndex:
setTextureComponents:
setTextureProvider:
setTextureSamplerValue:
setTextures:withRange:
setThreadGroupSizeIsMultipleOfThreadExecutionWidth:
setThreadgroupMemoryLength:atIndex:
setThreadgroupMemoryLength:offset:atIndex:
setThreshold:
setThresholdSmoothness:
setTileAccelerationStructure:atBufferIndex:
setTileBuffer:offset:atIndex:
setTileBufferOffset:atIndex:
setTileBuffers:offsets:withRange:
setTileBytes:length:atIndex:
setTileIntersectionFunctionTable:atBufferIndex:
setTileIntersectionFunctionTables:withBufferRange:
setTileSamplerState:atIndex:
setTileSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setTileSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setTileTexture:atIndex:
setTileTextures:withRange:
setTileVisibleFunctionTable:atBufferIndex:
setTileVisibleFunctionTables:withBufferRange:
setTilt:
setTime:
setTimeOffset:
setTimeScale:
setTimeStamp:
setTimeStep:
setTimingFunction:
setTimingFunctions:
setTitle:
setToAngle:
setToShift:
setToValue:
setToeLength:
setTokenArray:
setTokenValue:
setToolTip:
setTopRadius:
setTransform:
setTransformFeedbackState:
setTransientDrawCall:
setTransparencyMode:
setTriangleCount:
setTriangleFillMode:
setTriangleFrontFillMode:backFillMode:
setTriggersEnabled:
setTruckSensitivity:
setTruncationMode:
setType:
setURLValue:
setUnMultBlending:
setUnderlyingQueue:
setUnifiesNormals:
setUp:
setUpAxis:
setUpVector:
setUpVectorValue:
setUsage:
setUseGammaBlending:
setUseHighQuality:
setUsedCount:
setUserInfo:
setUserManual:
setUsesAbsoluteTime:
setUsesDefaultMomentOfInertia:
setUsesDepthPrePass:
setUsesOrthographicProjection:
setUuid:
setValue:
setValue:atPath:
setValue:forKey:
setValue:forKeyPath:
setValue:forProperty:
setValue:forUndefinedKey:
setValue:to:keyPath:
setValueForKey:optionKey:options:
setValueTransformer:forName:
setValues:
setVector2:
setVector3:
setVector4:
setVelocity:
setVelocityFactor:
setVelocityFactorValue:
setVelocityValue:
setVersion:
setVertexAccelerationStructure:atBufferIndex:
setVertexAmplificationCount:viewMappings:
setVertexAmplificationEnabled:
setVertexAmplificationMode:value:
setVertexBuffer:
setVertexBuffer:offset:attributeStride:atIndex:
setVertexBufferOffset:
setVertexBufferOffset:atIndex:
setVertexBufferOffset:attributeStride:atIndex:
setVertexBuffers:offsets:attributeStrides:withRange:
setVertexBuffers:offsets:withRange:
setVertexBytes:length:atIndex:
setVertexBytes:length:attributeStride:atIndex:
setVertexDescriptor:
setVertexFunction:
setVertexFunctionName:
setVertexIntersectionFunctionTable:atBufferIndex:
setVertexIntersectionFunctionTables:withBufferRange:
setVertexSamplerState:atIndex:
setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setVertexSamplerState:lodMinClamp:lodMaxClamp:lodBias:atIndex:
setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setVertexSamplerStates:withRange:
setVertexShader:
setVertexStride:
setVertexTexture:atIndex:
setVertexTextures:withRange:
setVertexVisibleFunctionTable:atBufferIndex:
setVertexVisibleFunctionTables:withBufferRange:
setVerticalMaximumAngle:
setVideoMirrored:
setVideoOrientation:
setVideoSettings:
setVideoSourceFormat:
setView:
setViewMatrix:
setViewpointCoordinateSpace:
setViewpoints:
setViewport:
setViewportTransformEnabled:
setViewports:count:
setVignetting:
setVignettingAnamorphic:
setVignettingIntensity:
setVignettingRadius:
setVignettingSoftness:
setVisibilityResultBuffer:
setVisibleFunctionTable:atBufferIndex:
setVisibleFunctionTable:atIndex:
setVisibleFunctionTables:withBufferRange:
setVisibleFunctionTables:withRange:
setVolume:
setWaitUntilCompleted:
setWantsAdaptation:
setWantsAdaptiveSubdivision:
setWantsDepthOfField:
setWantsExposureAdaptation:
setWantsExtendedDynamicRange:
setWantsExtendedDynamicRangeContent:
setWantsHDR:
setWantsLayer:
setWantsScreenSpaceReflection:
setWantsWideGamut:
setWeakRef:
setWeight:
setWeight:atTargetIndex:
setWeight:forTargetAtIndex:
setWeight:forTargetNamed:
setWeightIncrementalThreshold:
setWeights:
setWhiteBalanceTemperature:
setWhiteBalanceTint:
setWhitePoint:
setWidth:
setWidthSegmentCount:
setWillStartPlayback:
setWithArray:
setWithCapacity:
setWithObject:
setWithSet:
setWorld:
setWorld:completionHandler:
setWorldOrientation:
setWorldOrientationValue:
setWorldPosition:
setWorldPositionValue:
setWorldTransform:
setWorldTransformValue:
setWorldUp:
setWrapS:
setWrapT:
setWrapped:
setWriteMask:
setWritesToDepthBuffer:
setXAlignment:
setYAlignment:
setZAlignment:
setZFar:
setZNear:
setZoomFactor:
set_allowsDefaultLightingEnvironmentFallback:
set_aspectRatio:
set_collectCompilationErrors:
set_computedLightingEnvironmentMapsPath:
set_drawableSafeAreaInsets:
set_encodeDataAsHalf:
set_legacyRenderer:
set_renderTargetSize:
set_resourceManagerMonitor:
set_screenTransform:
set_shadowCascadeDebugFactor:
set_shouldForwardWorldRendererDelegationMessagesToPrivateRendererOwner:
set_sphericalHarmonics:
set_subdivisionSettings:
set_superSamplingFactor:
set_triggersEnabled:
set_viewport:
set_wantsSeparateGeometryElements:
set_wantsWorldRendererDelegationMessages:
setup
setupAsyncRuntime
setupAuthoringEnv2
setupAuthoringEnvironment
setupChildsArrayIfNeeded
setupClones
setupDisplayLinkOutputHandler:
setupFinalMeshWithMesh:entityName:info:usingDrawIndirect:
setupInitialBuffersWithBaseMesh:entityName:info:
setupLegacyRendererWithCommandQueue:
setupMorphTargetsWithComputeContext:
setupNode
setupRenderer
setupWithComputeContext:
shFromCPU:commandBuffer:
shadable
shadableBufferBindings
shaderCompilationGroup
shaderModifiersArgumentWithName:
shaderModifiersArguments
shaderValidation
shadingModel
shadowBias
shadowCascadeCount
shadowCascadeSplittingFactor
shadowColor
shadowMapSize
shadowRadius
shadowSampleCount
shape
shapeNode
shapeSetTargetCounts
shapeSetTargetWeights
shapeWithNode:flattened:
shapeWithPath:extrusionDepth:
shapeWithShapes:transforms:
shapes
shareable
sharedCaptureManager
sharedColorPanel
sharedRegistry
shininess
shouldBakeDirectLighting
shouldBakeIndirectLighting
shouldClearCPUDataAfterUpload
shouldDelegateARCompositing
shouldFlip
shouldLoadFinalTexture
shouldMaximizeConcurrentCompilation
shouldMorphNormals
shouldObserveApplicationStateToPreventBackgroundGPUAccess
shouldPresentAfterMinimumDuration
shouldSnapOnGrid
shouldSnapToAlign
shouldStream
shouldUseDrawCallHandler
shoulderAngle
shoulderLength
shoulderStrength
showManipulators
showStatistics
showsAuthoringEnvironment
showsDebugUI
signal
simdConvertPointFromWindow:
simdTarget
simdUp
simulateCommandBufferFailure
size
sizeValue
skeleton
skinnerRef
skinnerWithBaseMesh:bones:boneInverseBindTransforms:boneWeights:boneIndices:
skinnerWithSkinnerRef:
skipExecute
skipMorphTargets
slice
sliderConstraint
sliderWithBody:axis:anchor:
sliderWithBodyA:axisA:anchorA:bodyB:axisB:anchorB:
smoothingMode
smoothness
snapGuideIndexesOnAxis:
snapInfoAtIndex:axis:
snapshot
snapshotImageWithSize:
snapshotImageWithSize:deltaTime:
snapshotRendererWithSize:
snapshotWithSize:
snapshotWithSize:deltaTime:
snapshotWithSize:pointOfView:
softness
sortUsingComparator:
sortedArrayUsingComparator:
sortedArrayUsingSelector:
source
sourceFile
sourceMode
sourceObject
sourceRendererForEngineContext:source:textureSource:targetTexture:
sourceReplicationDelegate
sourceState
sparseTileSizeInBytes
sparseTileSizeInBytesForSparsePageSize:
sparseTileSizeWithTextureType:pixelFormat:sampleCount:
sparseTileSizeWithTextureType:pixelFormat:sampleCount:sparsePageSize:
specular
specularDFGDiffuseHammonTextureWithRenderContext:
speed
speedFactor
sphereWithRadius:
sphereWithRadius:options:
sphericalHarmonicsCoefficients
sphericalHarmonicsForEnvironmentTexture:order:commandBuffer:
sphericalHarmonicsLevel
splitInputOutputStructsIfNeededForSourceCode:generatedFromReplacementStrings:perPixelLighting:clipDistanceCount:
spotFalloffExponent
spotInnerAngle
spotOuterAngle
springField
srcPositionBuffer
srcTangentBuffer
ssao
stackControl
stackSelectionChanged:
stageInputAttributes
stageInputDescriptor
standardUserDefaults
startAndReturnError:
startCaptureWithDescriptor:error:
startCollectingPerformanceStatisticsForPid:
startManipulatingPointOfView
startProcessingRendererElementsWithEngineIterationContext:
startRunning
startRuntimeThread
startSessionAtSourceTime:
startTime
startWriting
state
stateItems
stateManager
stateWithName:
states
staticBody
staticThreadgroupMemoryLength
stats
statsDrawcallCount
statsPrimitiveCount
statsVertexCount
status
stencilAttachment
stencilCompareFunction
stencilFailureOperation
stencilInfo
stencilPixelFormat
stepFunction
stepRate
stickyAxis
stiffness
stop
stop:
stopCapture
stopCollectingPerformanceStatisticsForPid:
stopIfNeeded
stopInertia
stopManipulatingPointOfView
stopReplicationWithModel:runtime:
stopRunning
stopWithBlendOutDuration:
storageMode
storeAction
storeActionOptions
streamForEntryName:
strength
stride
string
stringByAppendingFormat:
stringByAppendingString:
stringByDeletingLastPathComponent
stringByDeletingPathExtension
stringByExpandingTildeInPath
stringByReplacingCharactersInRange:withString:
stringByReplacingMatchesInString:options:range:withTemplate:
stringByReplacingOccurrencesOfString:withString:
stringByReplacingOccurrencesOfString:withString:options:range:
stringByStandardizingPath
stringByTrimmingCharactersInSet:
stringForKey:
stringFromByteCount:
stringValue
stringWithCString:encoding:
stringWithCapacity:
stringWithContentsOfFile:encoding:error:
stringWithContentsOfURL:encoding:error:
stringWithFormat:
stringWithString:
stringWithUTF8String:
strongToStrongObjectsMapTable
structType
subAnimations
subarrayWithRange:
subdataWithRange:
subdivisionLevel
subdivisionScheme
subdivisionSurfaceTessellationDraw:
submeshWithVFXModelElement:
submeshWithVFXModelElement:bufferAllocator:
submeshWithVFXModelElement:bufferAllocator:positionSourceChannel:
submeshes
subp
substringFromIndex:
substringToIndex:
substringWithRange:
subsurface
subsurfaceRadius
subviews
succeded
sunElevation
superSamplingFactor
superclass
superlayer
supportIndirectCommandBuffers
supportedFileUTIsForExport
supportedFileUTIsForImport
supportedOutputs
supports32BitFloatFiltering
supports32BitMSAA
supportsBCTextureCompression
supportsBaseVertexInstanceDrawing
supportsCounterSampling:
supportsDepthClipMode
supportsDynamicLibraries
supportsFeatureSet:
supportsFunctionPointers
supportsFunctionPointersFromRender
supportsLayeredRendering
supportsMSAADepthResolve
supportsMSAAStencilResolve
supportsMTLFeatureSet:
supportsMeshShaders
supportsMetal
supportsNonUniformThreadgroupSize
supportsOffset
supportsPrimitiveMotionBlur
supportsProgrammableBlending
supportsPullModelInterpolation
supportsQueryTextureLOD
supportsRasterizationRateMapWithLayerCount:
supportsRaytracing
supportsRaytracingFromRender
supportsReadWriteTextureCubeArguments
supportsRenderDynamicLibraries
supportsSecureCoding
supportsShaderBarycentricCoordinates
supportsTessellation
supportsTextureCubeArray
supportsTextureSampleCount:
supportsTextureSwizzle
supportsUnalignedVertexFetch
supportsVertexAmplificationCount:
surroundToSelect
sweepTestFraction
switchToCameraNamed:
switchToNextCamera
switchToState:
syncTimeWithCoreAnimation
synchronizeResource:
systemFontOfSize:
systemFontSizeForControlSize:
tWrapMode
table
tableColumns
target
targetOffset
targetOffsetValue
targetPosition
targetPositionValue
targetShapes
targetState
targetsAndInBetween
temperature
temporalAntialiasingEnabled
temporaryDirectory
tensionValues
terminationStatus
tessellationControlShader
tessellationEvaluationShader
tessellationFactorScale
tessellationPartitionMode
tessellator
tessellatorValueDidChange
tessellatorValueDidChangeForClient:
text
textSize
textWithString:extrusionDepth:
texture2DDescriptorWithPixelFormat:width:height:mipmapped:
texture::
textureAbsolutePath
textureAtIndices:
textureBarrier
textureComponents
textureCoordinate
textureCoordinatesWithMappingChannel:
textureCubeDescriptorWithPixelFormat:size:mipmapped:
textureForAttachment:withDescriptor:
textureForEntity:isFallback:isDynamic:
textureForMaterialProperty:
textureForSliceIndex:
textureReferenceType
textureSampler
textureSamplerValue
textureSize
textureSource
textureTarget
textureType
threadDictionary
threadExecutionWidth
threadgroupSizeMatchesTileSize
threshold
thresholdMode
thresholdSmoothness
thresholdValue
tick
tickWithCommandBuffer:
tickWithDeltaTime:
tickWithDeltaTime:commandBuffer:
tileHeight
tileWidth
tilt
time
timeIntervalSinceReferenceDate
timeOffset
timeScale
timeStamp
timeStep
timestamp
timingFunction
title
toBool
toeLength
toeStrength
toggleRetina:
tokenWithString:
toneMapping
topRadius
topology
torusWithRingRadius:pipeRadius:options:
trackingAreas
tracksWithMediaCharacteristic:
transferWorld:to:
transform
transformAnimation
transformConstraintInWorldSpace:withBlock:
transformedValue:
transformedValueClass
transforms
transientDrawCall
transitions
transitionsFrom:
translateByX:Y:Z:
translateInCameraSpaceByX:Y:Z:
translateInScreenSpaceTo:viewport:
translatedEvent:
translations
transparencyMode
transparent
triggerEvent:fromView:
triggerManager
triggerRenderWith:renderer:
triggerType:event:fromView:
truckSensitivity
truncationMode
tubeWithInnerRadius:outerRadius:height:
tubeWithInnerRadius:outerRadius:height:options:
turbidity
turbulenceFieldWithSmoothness:animationSpeed:
type
typeWithFilenameExtension:
typeWithIdentifier:
types
unMultBlending
unarchivedObjectOfClass:fromData:error:
unarchivedObjectOfClasses:fromData:error:
unarchiver:cannotDecodeObjectOfClassName:originalClasses:
unarchiver:didDecodeObject:
unarchiver:willReplaceObject:withObject:
unarchiverDidFinish:
unarchiverWillFinish:
unbind
unbindAnimatablePath:
unhighlightSelectedNode
unifiesNormals
uniformTessellationDrawMeshElement:forMesh:instanceCount:renderContext:
unitCube
unload
unlock
unlockLayout
unlockSnapGuides
unmapVolatileMesh:modifiedVerticesCount:
unmapVolatileMeshElement:
unregisterManagerForDevice:
unregisterPlayer:
unrolledWorldOrientation:
unsignedCharValue
unsignedIntValue
unsignedIntegerValue
unsignedLongLongValue
unsignedLongValue
unsignedShortValue
unstageTexture:commandBuffer:
upAxis
upVector
upVectorValue
update
updateActiveState
updateAtTime:
updateAtTime:deltaTime:frameIndex:
updateBounds
updateBridgedReferencesWithBridgeable:objectByIdentifier:
updateBrowseScaleFactor
updateCameraNode:withSourceNode:
updateCollisionPairs
updateCollisionPlaneWithId:center:extents:transform:
updateCollisionPlaneWithId:extents:transform:
updateConstrainedEdgeLengthTessellator:parameters:
updateDefaultShape
updateEffectNode:withSourceNode:
updateFence:
updateFence:afterStages:
updateForceField:of:
updateGlobalScale:
updateInertiaAtTime:
updateItemsPosition
updateItemsRotation:
updateItemsScale:
updateKeyboardStateAndRedrawIfNeeded:
updateLayerLatency
updateLightTypeForNode:source:light:screenspaceScalingFactor:
updateManipulatorComponents
updateManipulatorNode
updateManipulatorPosition:
updateMemoryOwnership
updatePrefab:withNewPrefab:options:
updateProbes:atTime:
updateProbes:atTime:completionHandler:
updateScreenSpaceAdaptiveTessellator:parameters:
updateSeek
updateStackControl
updateSubdivisionSurfaceTessellator:parameters:
updateTargetsTransforms
updateTexture
updateUniformTessellator:
updateVFX2RenderOutputWithPointOfView:commandBuffer:
updateWithAbsoluteTime:
updateWithComputeContext:positions:normals:tangents:
updateWithContext:
updateWithDeltaTime:
updateWithRenderer:
updateWorldTransform:of:
upperAtmosphereScattering
usage
useDitherFade
useGammaBlending
useHeap:
useHeaps:count:stages:
useHighQuality
useOrbitInteractionMode
useResidencySet:
useResidencySets:count:
useResource:usage:
useResource:usage:stages:
useResourceGroup:usage:stages:
useResources:count:usage:
useResources:count:usage:stages:
usedCount
usedResources
usedSize
userAnimation
userInfo
userManual
usesAbsoluteTime
usesBoundsInPixels
usesDefaultMomentOfInertia
usesDepthPrePass
usesOrthographicProjection
usesSeparateWorkGroup
uuid
validateAndCommitValueInEditor:editingIsEnding:errorUserInterfaceHandled:
validateClone
validateClones
value
valueAtPath:
valueForKey:
valueForKeyPath:
valueForProperty:
valueForUndefinedKey:
valueWithBytes:objCType:
valueWithCATransform3D:
valueWithMatrix4:
valueWithPointer:
valueWithRect:
valueWithSize:
valueWithVFXFloat2:
valueWithVFXFloat3:
valueWithVFXFloat4:
valueWithVFXMatrix4:
valueWithVector3:
valueWithVector4:
values
vectorCount
velocity
velocityFactor
velocityFactorValue
velocityValue
vertexAmplificationEnabled
vertexAttributeDataForAttributeNamed:
vertexAttributes
vertexBindings
vertexBufferBoundAt:
vertexBuffers
vertexBuffersUsageMask
vertexCount
vertexCreaseCount
vertexCreaseIndices
vertexCreases
vertexDescriptor
vertexFunction
vertexFunctionName
vertexShader
verticalMaximumAngle
verticalSampleStorage
verticesCount
vfxAssetsFrameworkBundle
vfxLibraryURLFor:
vfx_CFXColorIgnoringColorSpace:success:
vfx_backingLayer
vfx_colorComponentsForModelIO
vfx_colorWithCFXColor:
vfx_colorWithCFXColor:ignoringColorSpace:
vfx_colorWithLinearDisplayP3Red:green:blue:alpha:
vfx_colorWithLinearSRGBRed:green:blue:alpha:
vfx_colorWithModelIORed:green:blue:alpha:options:
vfx_compressedDataUsingCompressionAlgorithm:
vfx_decodeArrayOfObjectsOfClass:containingNestedContainersForKey:
vfx_decodeArrayOfObjectsOfClass:forKey:
vfx_decodeArrayOfObjectsOfClasses:containingNestedContainersForKey:
vfx_decodeArrayOfObjectsOfClasses:forKey:
vfx_decodeDictionaryWithKeysOfClass:objectsOfClass:containingNestedContainersForKey:
vfx_decodeDictionaryWithKeysOfClass:objectsOfClass:forKey:
vfx_decodeDictionaryWithKeysOfClasses:objectsOfClasses:containingNestedContainersForKey:
vfx_decodeDictionaryWithKeysOfClasses:objectsOfClasses:forKey:
vfx_enumerateKeysAndValuesUsingBlock:
vfx_inLiveResize
vfx_indexedDataDecodingDeltaWithBytesPerIndex:
vfx_indexedDataDecodingHighWatermarkWithBytesPerIndex:
vfx_indexedDataDecodingTrianglePairsWithBytesPerIndex:
vfx_indexedDataEncodingDeltaWithBytesPerIndex:
vfx_indexedDataEncodingHighWatermarkWithBytesPerIndex:
vfx_indexedDataEncodingTrianglePairsWithBytesPerIndex:
vfx_setBackingLayer:
vfx_stringByReplacingCharactersInRanges:withStrings:
vfx_uncompressedDataUsingCompressionAlgorithm:
videoMirrored
view
viewDidChangeBackingProperties
viewDidDrawAtTime:
viewDidEndLiveResize
viewDidMoveToWindow
viewMatrix
viewMatrix0
viewMatrix1
viewWillDrawAtTime:
viewWillMoveToWindow:
viewWillStartLiveResize
viewedObjectSphere
viewpointCoordinateSpace
viewpoints
viewport
viewportDependant
viewportMousePosition
viewports::
vignetting
vignettingAnamorphic
vignettingIntensity
vignettingRadius
vignettingSoftness
volatileOffset
volatileSize
volatileStride
volume
vortexField
vrrEnabled
vrrMapScreenSize
wait
waitForFence:
waitForFence:beforeStages:
waitForShadersCompilation
waitUntilCompleted
waitUntilExit
waitUntilScheduled
wantsAdaptiveSubdivision
wantsDepthOfField
wantsExposureAdaptation
wantsExtendedDynamicRange
wantsHDR
wantsLayer
wantsRedraw
wantsScreenSpaceReflection
wantsWideGamut
warnings
wasAddedToWorld:
weakToStrongObjectsMapTable
weight
weightAtTargetIndex:
weightForTargetAtIndex:
weightForTargetNamed:
weightIncrementalThreshold
weightIndexStringForIndex:
whiteBalanceTemperature
whiteBalanceTint
whiteColor
whitePoint
whitespaceAndNewlineCharacterSet
width
widthSegmentCount
willBeRemovedFromWorld:
willChangePointOfView
willChangeValueForKey:
willStartPlayback
window
windowChangedScreen:
windowNumber
windowWillClose:
windowWithContentViewController:
withDefaultIBLConstantBuffer::
withDefaultLightConstantBuffer::
withPointerToParameterOf:named:block:
workingColorSpace
world
world:nodeAtPath:type:
worldBoundingBox
worldCoordinates
worldDidChange
worldFront
worldNamed:
worldNamed:options:
worldNormal
worldOrientation
worldOrientationValue
worldPosition
worldPositionValue
worldRef
worldRenderer
worldRight
worldSpaceDistance
worldTransform
worldTransformValue
worldUpValue
worldWillDie
worldWithData:options:error:
worldWithMDLAsset:
worldWithMDLAsset:options:
worldWithSCNURL:options:error:
worldWithURL:options:error:
worldWithURL:options:transferringConfigurationFrom:error:
worldWithWorldRef:
wrapS
wrapT
writeBool:to:
writeBytes:length:
writeContentsForEntryName:toFile:options:error:
writeFloat:to:
writeInt16:to:
writeInt32:to:
writeInt64:to:
writeInt8:to:
writeInt:to:
writeKeyframeAnimation:to:
writeMask
writeSIMD3x3D:to:
writeSIMD3x3F:to:
writeSIMD4x4D:to:
writeSIMD4x4F:to:
writeToFile:atomically:
writeToFile:options:error:
writeToURL:
writeToURL:atomically:
writeToURL:atomically:encoding:error:
writeToURL:options:error:
writeToURL:options:originalContentsURL:error:
writeToURL:options:progressHandler:
writeToURLWithUSDKit:
writeUInt8:to:
writesColor
writesSeparateDepth
writesToDepthBuffer
xAlignment
yAlignment
year
zAlignment
zFar
zNear
zone
zoomFactor
<null>
<%@ %@>
vfx_generate_grain
--SimplifiedMaterial--
Assertion '%s' failed. Null argument
_encoder == nil
commandBuffer != nil
_encoder != nil
Assertion '%s' failed. Dereferencing null pointer
_ptr != NULL
transform
tessellationFactorScale
maximumEdgeLength
edgeTessellationFactor
insideTessellationFactor
adaptive
screenSpace
tessellationPartitionMode
smoothingMode
<%@: %p, screen space (maximum edge length: %.3f px)>
<%@: %p, local space (maximum edge length: %.3f)>
<%@: %p, uniform (inside: %.3f, edge: %.3f)>
q24@?0@"VFXHitTestResult"8@"VFXHitTestResult"16
v32@?0@"VFXNode"8Q16*24
v28@?0I8^^{__CFXNode}12^^{__CFXLight}20
Assertion '%s' failed. wrong light type
type < kCFXLightEffectiveTypeCount
Assertion '%s' failed. wrong probe type
CFXLightGetProbeType(light) == kCFXLightProbeTypeIrradiance
CFXLightGetProbeType(light) == kCFXLightProbeTypeRadiance
Error: Too many shadow caster lights at once. Limit is %d
Error: The shadow node is not registered
light
Warning: Should not register a node without light to the light system
Error: Node is already registered to the light system
lightingSpaceMatrix
Assertion '%s' failed. Invalid runtime light index
((rInd > 0) && (rInd <= pipelineData->_runtimeLightsCount)) || (rInd == kDefaultRuntimeIndex)
Error: Invalid runtime light index
v36@?0I8^^{__CFXNode}12^^{__CFXLight}20^{?=}28
v36@?0I8^^{__CFXNode}12^^{__CFXLight}20^28
v36@?0I8^^{__CFXNode}12^^{__CFXLight}20^{?=ffff}28
lightingSystem
Assertion '%s' failed. Not Yet Implemented!!!!
lightNode
Assertion '%s' failed. Light does not casts shadow. Cannot compute shadow parameters.
Assertion '%s' failed. 0 caster index is reserved
casterIndex > 0
Assertion '%s' failed. Max caster index overflow
casterIndex <= kMaxRuntimeShadows
CFXLightingSystem
<CFXLightingSystem %p>
ComputeTangents : Unsupported index size (%zu)
bloom_threshold
Bloom threshold
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/BloomPass.mm
Bloom downsample
Bloom upsample
BLOOM OUTPUT
BLOOM TMP
bloom
Assertion '%s' failed. texture is not a MTLTexture
!texture || [texture conformsToProtocol:@protocol(MTLTexture)]
BLOOM_DOWNSAMPLE_PASS
BLOOM_UPSAMPLE_PASS
Error: Failed to create instance of type %ld. Extra size too large
Error: Failed to create instance of type %@
Assertion '%s' failed. Unsupported conversion info - different TRCs for input components
trcOther == trc
Error: Unsupported conversion info - unsupported TRC type %d
Error: Unsupported conversion info - stage %d of %d will be ignored!
B108@?0{CGColorConversionIteratorData=Iqqqqqq^^{CGColorTRCData}^^{CGColorMatrixData}^^{CGColorNxMTransformData}}8q84q92^q100
Error: Unsupported conversion info - %d color matrices
B100@?0{CGColorConversionIteratorData=Iqqqqqq^^{CGColorTRCData}^^{CGColorMatrixData}^^{CGColorNxMTransformData}}8q84q92
Error: Unsupported conversion info - NxMLUTs not supported
none
float
bool
char
double
float2
float3
float4
float4x4
float3x3
color4
short
half
uchar
ushort
int2
int3
int4
ucharn
charn
10a2n
u10a2n
uchar4
char4
uchar4n
char4n
ushort2
ushort3
ushort4
short2
short3
short4
ushortn
ushort2n
ushort3n
ushort4n
short2n
short3n
short4n
half2
half3
half4
Assertion '%s' failed. unknown type
type < kCFXBaseTypeCount
unknown type
Error: unknown type
Unreachable code: Compound type %s%d is not supported
kCFXBaseTypeUnsignedChar
kCFXBaseTypeUnsignedCharNormalized
kCFXBaseTypeChar
kCFXBaseTypeCharNormalized
kCFXBaseTypeUnsignedShort
kCFXBaseTypeUnsignedShortNormalized
kCFXBaseTypeShort
kCFXBaseTypeShortNormalized
kCFXBaseTypeHalf
kCFXBaseTypeFloat
kCFXBaseTypeInteger
Assertion '%s' failed. Only one compound type per vector
componentCount == 1
Assertion '%s' failed. wrong parameters
bytesPerComponent && componentsCount && floatComponents
Warning: CFXBaseTypeFromDescription - signed/unsigned ambiguity
Error: CFXBaseTypeFromDescription - Type not supported
_dst
Error: CFXAddBaseType - type %d can't be added
Error: CFXAddBaseType - addition of half float not supported
Error: CFXAddBaseType - unknown type
Error: CFXSubBaseType - type %d can't be substracted
Error: CFXSubBaseType - substraction of half float not supported
Error: CFXSubBaseType - unknown type
string
v32@?0@8@16*24
hw.optional.sse2
hw.optional.sse3
hw.optional.supplementalsse3
hw.optional.sse4_1
hw.optional.sse4_2
hw.optional.avx1_0
hw.optional.fma
Error: failed to load dictionary named %@
Warning: CFXDataFromMTLBuffer - can't read private MTL buffer
/bin/rm
VFXEnableWideGamut
Assertion '%s' failed. Spherical Harmonics Data seems malformed: order(%d) !=> length(%zu)
(order * order * sizePerCoeff) == length
com.apple.vfxstudio
v24@?0q8r^v16
texture1d
texture2d
texture3d
texturecube
sampler
Warning: CFXBaseTypeFromMetalString: unknown type name '%@'
#define %@ %@
Assertion '%s' failed. No node should be tracked anymore by the geometry %@
!geometry->_trackedNodes || !CFSetGetCount(geometry->_trackedNodes)
<%@:%p "%@"
  mesh: %@
  mat%d: %@
address
overrideMaterial
materials
levelsOfDetail
worldRef
input
geometry
material
Assertion '%s' failed. Node should not already been tracked by this geometry
!CFSetContainsValue(geometry->_trackedNodes, node)
Assertion '%s' failed. Node should been tracked by this geometry
geometry->_trackedNodes && CFSetContainsValue(geometry->_trackedNodes, node)
geometry->_trackedNodes
Error: cannot generate points : mismatch between vertices and normals count
Error: Cannot use volume generation on a generic mesh. fallbacking on surface
CFXGeometry
Main
COLOR
DEPTH
VELOCITY
NORMAL
REFLECTANCE ROUGHNESS
RADIANCE
MainCulling
DEPTH_PREPASS
NORMAL_PREPASS
depthPrePass
meshElement
elements
Error: CFXMeshElementCreateByMergingElements - strip not supported
Error: CFXMeshElementCreateByMergingElements - merging elements with different byte per index
Assertion '%s' failed. Mesh element has %d channels but channel %d was requested
channel >= 0 && channel < channelCount
Warning: %s does not support non-renderable topologies.
CFXMeshElementGetIndexCountPerPrimitive
Error: CFXMeshElementGetIndexCount:primitive type not handled
Assertion '%s' failed. Internal consistency error: number of indices should be a multiple of number of channels
indexCount % channelCount == 0
v32@?0I8^I12I20^B24
Unreachable code: unexpected vertex count
Error: unexpected vertex count
Unreachable code: Invalid bytes per index (%d)
Unreachable code: Unknown primitive type %d
CHANNEL %ld/%ld
%4u : %4u %4u %4u
%4u : %4u %4u
%4u : %4u
%2u : [Polygon %4u]
 %4u
CFXMeshElement
<CFXMeshElement %p type:%@ primCount:%d channels:%d indexBytes:%d offset:%d acmr:%f inst:%d dataSize:%d shared:%p>
triangles
triangleStrip
lines
points
polygons
triangleFan
invalid
indexes
subElementsCount
bytesPerIndex
primitiveNormals
bbox[0]
bbox[1]
Error: CFXMeshElementSetPrimitives invalid index buffer size
Error: __readIndexInBuffer - index (%u) out of bounds (%lu)
Assertion '%s' failed. %s - unsupported index size (%ld)
false
__readIndexInBuffer
Forward
PathTracer
Hybrid
Stereo
Holographic
Compute irradiance
CustomAuthoring.Final.Color
Custom
result
pointOfView
auth
Assertion '%s' failed. error in computing triangle bbox
groupIndex == meshElement->_primitiveGroupCount
Assertion '%s' failed. Update %s to support mesh element channels
ctx->_currentIndicesContent.indicesOffset == 0 && ctx->_currentIndicesContent.indicesStride == 1
__ProcessTriangleRange_Mask_Ind16VrtFloat3CullBack
__ProcessTriangleRange_Ind16VrtFloat3CullBack
boneIndicesSrc
v48@?0I8^I12I20I24I28I32I36^B40
Assertion '%s' failed. there should be exactly one transposed matrix in here
vectorCount == 3
q16@?0^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}8
v24@?0^^{__CFXNode}8q16
CFXHitTestResult
<CFXHitTestResult %@ %f,%f,%f>
output
sphere
transformedSphere
modelMatrix
normalMatrix
couple1
couple2
%@-splitContainer
splitContainer
sourceChannels
Assertion '%s' failed. Unsupported element type in CFXMeshCreateByMergingMeshes
Error: CFXMeshSubdivide inconsistency
Assertion '%s' failed. inconsistency (2) in CFXMeshSubdivide
D!=-1 && E!=-1 && F !=-1
positionSource
normalSource
uvSource
Error: Cannot generate tangents without valid positions
Error: Cannot generate valid tangents without valid texture coordinates
Error: Cannot generate valid tangents without valid normals
Unreachable code: Unsupported index size (%zu)
Error: invalid geometry detected - skip CFXCreateTangentsWithGeometryOptimized
Error: target mesh has a different number of vertices (%d != %d)
v16@?0^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}8
Error: Cannot generate tangents without positions
Error: Cannot generate tangents without texture coordinates
Error: error in CFXMeshCreateTangentsIfNeeded
Warning: Cannot create an interleaved copy, count mismatch
v32@?0^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}8c16q20C28
default camera
Unreachable code: CFXAdjustZRangeOfProjectionInfos - no world or no point of view
Unreachable code: CFXAdjustZRangeOfProjectionInfos - no root node
Unreachable code: CFXAdjustZRangeOfProjectionInfos - no world matrix
Assertion '%s' failed. We badly computed zFar (%f) and zNear (%f) in this world
shortestPosition <= farthestPosition
Error: Given sources must be of the same length for interval list creation
element
Assertion '%s' failed. different material!!!!
material == elt->material
Warning: __MergeMeshSources unknown source type
Assertion '%s' failed. __AllocateNewSource - componentsCount is zero
componentsCount!=0
%@-split%d
Assertion '%s' failed. inconsistency in _finalizeSplit
oldIndexToNewIndex[sourceIndex]
Assertion '%s' failed. _finalizeSplit - inconsistent data length
w == count * indexCountPerPrimitive
Assertion '%s' failed. _createSubSource - inconsistent data length
w == dataLength
Error: CFXSourceAccessorCopyDataToAccessor failed
Warning: CFXUnifyNormalsFromGeometry can only process triangles and polygons
Warning: CFXUnifyNormalsFromGeometry empty indices
Assertion '%s' failed. unexpected vertex count
faceVertexCount >= 3
MIPMAP_OUTPUT
Unreachable code: createCFXObject - abstract method called
Assertion '%s' failed. __removeAnimationForKey: cftype is not an entity
CFTypeIsCFXEntity(cfObject)
Error: attempt to add a null animation player on %@
Error: attempt to add a null animation on %@
Assertion '%s' failed. sync animations: cftype is not an entity
focalBlurSampleCount
apertureBladeCount
intensity
scale
slice
isColored
colored
value
averageGray
whitePoint
wantsAdaptation
adaptationBrighteningSpeedFactor
adaptationDarkeningSpeedFactor
adaptationMinimum
adaptationMaximum
toeStrength
toeLength
shoulderLength
shoulderAngle
gamma
saturation
iterationCount
anamorphic
softness
radius
strength
whiteBalanceTemperature
whiteBalanceTint
liftColor
liftOffset
gammaColor
gammaOffset
gainColor
gainOffset
lookupTable
filterQuality
center
fromZ
fromAngle
fromShift
toAngle
toShift
color1
color2
color3
maskCenter
maskRadius
maskEnabled
unMultBlending
HybridRenderer
HybridRenderer input color
HybridRenderer input emission
HybridRenderer input normals
HybridRenderer input albedo
HybridRenderer input roughmetalTarget
HybridRenderer input velocityTarget
HybridRenderer input depthTarget
HybridRenderer input clearCoat
HybridRenderer input subsurface
Output copy
copy
Resource copy
DebugCopy
SSAO-COMPUTE
HasNormalTex
ScreenSpaceRadius
vfx_ssao_compute
SSAOSpatialPass
SSAO_SPATIAL_OUTPUT_TMP
SSAO_SPATIAL_OUTPUT
vfx_ssao_blur_x
vfx_ssao_blur_y
SSAOUpscalePass
SSAO_UPSCALE_OUTPUT
vfx_ssao_upscale
SSAOTracePass
SSAO_TRACE_PASS
SSAO_SPATIAL
SSAO_UPSCALE
rendererElement
VFXShaderModifierEntryPointVertex
VFXShaderModifierEntryPointSurface
VFXShaderModifierEntryPointFragment
VFXShaderModifierEntryPointLighting
Assertion '%s' failed. Must call -[VFXShadableHelper ownerWillDie] before releasing it !
_owner == nil
Error: Cannot use a program because shader modifiers are set
Error: ShaderModifiers - unkwnown supporting class '%@'
Error: Cannot use shader modifiers because a program is set
parameter
v32@?0@"NSString"8@"VFXBufferBinding"16*24
program
shaderModifiers
minimumLanguageVersion
VFXShadableDidCompileNotificationName
issues
shadableGeometry
shadableMaterial
Error: ShaderModifiers - unkwnown entrypoint '%@'
(//.*|/\*(.|
)*?\*/)
Geometry
Surface
Fragment
LightingModel
%@ // [VFX_%@(%d)]
v24@?0@"NSString"8*16
com.apple.vfx
PointsOfInterest
com.apple.vfx.showsStatistics
com.apple.vfx.enableCameraControl
com.apple.vfx.batchMaxCount
com.apple.vfx.forceNoAA
com.apple.vfx.disableLinearSpaceRendering
com.apple.vfx.disableWideGamut
com.apple.vfx.enableWideGamut
com.apple.vfx.enablePostMorphUnifyNormals
com.apple.vfx.enableStandardShadersWithFunctionConstants
com.apple.vfx.forceNMOSBehavior
com.apple.vfx.forceOS2019Behavior
com.apple.vfx.forceOS2018Behavior
com.apple.vfx.forceOS2017Behavior
com.apple.vfx.forceOS2016Behavior
com.apple.vfx.verbose
com.apple.vfx.useOneCommandQueuePerDevice
com.apple.vfx.isolateCacheMissShader
v24@?0^{__CFXNode=}8^B16
Assertion '%s' failed. CFXNodeIterateTree : null node
Assertion '%s' failed. CFXNodeIterateTree : no callbacks
callbacks
object
Error: object %@ doesn't conform to the copying protocol
Error: invalid ref count for entity %@
v16@?0^{__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}8
Assertion '%s' failed. Must call GetWorld with an entity
CFTypeIsCFXEntity(object)
Jittering
Jittering input color
Jittering output color
Jittering color input resolve
Unreachable code: Unknown index type %d
v16@?0@"MTLRenderPipelineDescriptor"8
Unreachable code: A tessellator object should not exist when no tessellation is required
Compute VFXModelScreenSpaceAdaptiveTessellator tessellation factors
compute_tessellation_factors_screeenspace_adaptive_uint16
compute_tessellation_factors_screeenspace_adaptive_uint32
Compute kCFXGeometryTessellatorTypeConstrainedEdgeLength tessellation factors
compute_tessellation_factors_constrained_edge_uint16
compute_tessellation_factors_constrained_edge_uint32
v24@?0Q8r^v16
Error: CFXProgramHashCodeStoreRegisterProgramForRendererElement - index out of capacity (%d > %d)
Assertion '%s' failed. CFXProgramHashCodeStoreRegisterProgramForRendererElement - programIndex out of uint32_t. will crash soon
programIndex < 0xffffffff
CFXProgramHashCodeStore
<CFXProgramHashCodeStore %p>
<%@: %p | %u x %@, %u channels, %@ indices>
Unreachable code: VFXMeshPrimitiveTypePolygon not supported with MTLBuffers
Assertion '%s' failed. VFXMeshElement initialization - Invalid data length
data.length >= (NSUInteger)(primitiveCount * bytesPerIndex)
Error: VFXMeshElement initialization - Invalid index size (%ld bytes)
Error: VFXMeshElement initialization - Invalid polygon edge count (%ld)
compressedElementData
elementData
primitiveCount
primitiveRangeLocation
primitiveRangeLength
indicesChannelCount
interleavedIndicesChannels
ptSize
minimumPointScreenSpaceRadius
maximumPointScreenSpaceRadius
pointSize
triangle
triangle strip
line
point
polygon
unknown
v32@?0@"NSValue"8Q16*24
REFLECTION_PROBE_COLOR_TARGET
REFLECTION_PROBE_DEPTH_TARGET
REFLECTION_PROBE_RADIANCE_TARGET
vfx_draw_fullscreen_cube_layered
vfx_draw_fullscreen_cube
vfx_draw_fullscreen_cube_no_base
cube
equi
dual
vfx_radiance_%s_%s_frag
REFLECTION_PROBE_BOX_BLUR_TARGET
copy_frag
box_blur_frag_%d
vfx_convert_%s_from_%s_frag
REFLECTION PROBE ARRAY
@"<MTLTexture>"8@?0
OLD REFLECTION PROBE ARRAY
ENVIRONMENT TEXTURE
Assertion '%s' failed. Wrong probe type
Assertion '%s' failed. Bad index
probeIndex != (uint32_t)kProbeSliceIndexInvalid
B8@?0
probe[%d] not up to date stamp [%d -> %d] sources [%p -> %p]
v36@?0I8^^{__CFXNode}12^^{__CFXLight}20^{?={?=[3]}}28
REFLECTION_PROBE_RENDER_PASS
REFLECTION_PROBE_RADIANCE_PASS
REFLECTION_PROBE_BOX_BLUR_PASS
REFLECTION_PROBE_CONVERT_CUBE_PASS
Copy probe pass
Clear texture pass
Generate probe mipmap pass
Reflection probe radiance pass
Copy radiance pass
Reflection probe box blur pass
Reflection probe convert cube pass
Reflection probe render pass
CFXLightGetProbeType(lights[i]) == kCFXLightProbeTypeRadiance
Assertion '%s' failed. Wrong light type
CFXLightGetType(light) == kCFXLightTypeProbe
Assertion '%s' failed. Slice index should have been attributed already
outData->parameters.probe.index >= 0
Assertion '%s' failed. first light was not of the same index
ctx.packedIndices.data[fl - 1] == li
Assertion '%s' failed. end index should be set already
pl != 0
Assertion '%s' failed. previous light was not of the same index
ctx.packedIndices.data[pl - 1] == li
Assertion '%s' failed. nextIndex out of range
ctx.nextIndex[i] <= newIndicesCount
ctx.nextIndex[i] <= indicesCount
Assertion '%s' failed. Should be non empty
count > 0
Omni:%d Spot:%d Indices:%luu
debug_omni_vert
debug_light_frag
debug_spot_vert
vfx_draw_fullscreen_quad_vertex
debug_cluster_frag
vfx_draw_fullscreen_quad_VR_pos_vertex
debug_light_indices_8_buffer_frag
debug_cluster_slices_frag
Assertion '%s' failed. range overflow
i < lightRange.y
Authoring
Authoring input color
Authoring input depth
Authoring color input resolve
Authoring depth input resolve
Manipulator
Overlay color input copy
Overlay
stack
Assertion '%s' failed. cannot remove null span
span.count > 0
Assertion '%s' failed. page overflow
(freeSpan->start.index + freeSpan->count) <= page->capacity
page->freeCapacity
Assertion '%s' failed. wrong page selected for span size %d
spanSize <= page->freeMaxSpan
span.start.index + span.count <= page->capacity
Error: RendererElementStore does not support span of more than %d
Assertion '%s' failed. pages are broken...
page->pageIndex == span.start.page
Assertion '%s' failed. handle is broken...
handle.page < allocator->_pageCount
Assertion '%s' failed. re is broken...
(page->pageIndex == handle.page) && (handle.index < page->capacity)
CFXSpanAllocator
<CFXSpanAllocator %p>
CFX-Lighting.metal
_originalLightingSourceCode
__SurfaceExtraDecl__
__LightModifierExtraDecl__
__DoLightModifier__
Assertion '%s' failed. range not found
range.rangeValue.length > 0
CFX-CommonProfile.metal
#import "vfx_metal"
#import "vfx_util.h"
#import "CFX-PBR.metal"
#import "vfx_tessellation.h"
__TexcoordDecl__
__ExtraVaryingsDecl__
__ShaderModifiersDecl__
#import "CFX-Lighting.metal"
__OpenSubdivDeclPerGeometry__
__OpenSubdivDeclPerPatchType__
__OpenSubdivDeclShared__
__VertexExtraArguments__
__VertexDoVertexOnlyTexcoord__
__DoGeometryModifier__
__VertexDoLighting__
__VertexDoTexcoord__
__FragmentExtraArguments__
__FragmentDoTexcoord__
__DoSurfaceModifier__
__LightModifierCopyDecl__
__FragmentDoLighting__
__DoFragmentModifier__
} commonprofile_io;
typedef struct {
_originalSourceCode
%@ %@;
, device %@ %@
, constant %@& %@
, %@ %@
, %@<float> %@
Unreachable code: Argument type not supported %d
_lightingContribution.%@=%@;
%@<float> %@;
modifier
v32@?0@"NSString"8@"NSString"16*24
%@%@%@
CFX-OpenSubdiv-Utils.h
CFX-OpenSubdiv-Utils.metal
USE_POSITION
USE_MULTIPLE_RENDERING
USE_VERTEX_AMPLIFICATION
USE_INSTANCING
USE_LAYERED_RENDERING
USE_MULTIPLE_VIEWPORTS_RENDERING
USE_IBL_TRANSFORM
USE_MODIFIER_FRAMEBUFFER_COLOR0
CFX_SUPPORTS_PROGRAMMABLE_BLENDING
Error: Invalid shader modifier: programmable blending is not supported by this device
USE_CLIP_DISTANCE3
USE_CLIP_DISTANCE_COUNT
USE_CLIP_DISTANCE2
USE_CLIP_DISTANCE1
USE_CLIP_DISTANCE0
USE_SPECULAR
USE_VIEW
USE_SHININESS
USE_CONSTANT
USE_SHADOWONLY
USE_PBR
, depth2d<float> u_shadowTexture
CFX_USE_ATLAS_FOR_SHADOW_MAP
CFXLightIndexType
CFX_SUPPORT_CUBE_ARRAY
CFX_USE_REFLECTION_PROBES
VFXShadingModelCustom
LIGHTING_MODEL
USE_CLUSTERED_LIGHTING
CFX_USE_TEXTURE_FOR_LIGHT_INDICES
USE_FOG
USE_SSAO
USE_FRESNEL
USE_NORMAL
AVOID_OVERLIGHTING
USE_AMBIENT_LIGHTING
USE_PROBES_LIGHTING
USE_LIGHTING
USE_PER_PIXEL_LIGHTING
USE_MODULATE
USE_PER_VERTEX_LIGHTING
HAS_NORMAL
HAS_VERTEX_COLOR
USE_VERTEX_COLOR
USE_POINT_RENDERING
DISABLE_SPECULAR
USE_LASTFRAMETRANSFORM
USE_MOTIONBLUR
DISABLE_LINEAR_RENDERING
USE_SKINNING
USE_COLOR1_OUTPUT
USE_NORMALS_OUTPUT
USE_REFLECTANCE_ROUGHNESS_OUTPUT
USE_RADIANCE_OUTPUT
USE_OUTLINE
USE_MODELTRANSFORM
USE_GBUFFER_OUTPUT
USE_AMBIENTOCCLUSION_MAP
USE_TANGENT
USE_BITANGENT
USE_PBR_TRANSPARENCY
USE_DOUBLE_SIDED
USE_NODE_OPACITY
DIFFUSE_PREMULTIPLIED
LOCK_AMBIENT_WITH_DIFFUSE
USE_TRANSPARENT
USE_PBR_LAMBERTIAN_REFLECTION
    float2 %@Texcoord;
    _surface.%@Texcoord = in.texcoord%d;
USE_ALPHA_CUTOFF
USE_MODELVIEWTRANSFORM
USE_MODELVIEWPROJECTIONTRANSFORM
USE_SHADER_MODIFIERS
USE_SURFACE_EXTRA_DECL
USE_EXTRA_VARYINGS
vfx_metal
vfx_util.h
CFX-PBR.metal
USE_OPENSUBDIV
HAS_OR_GENERATES_NORMAL
USE_TESSELLATION
vfx_tessellation.h
TESSELLATION_SMOOTHING_MODE_PN_TRIANGLE
TESSELLATION_SMOOTHING_MODE_PHONG
#import
%@%@
%@%@
#if 1 // SHADER_COLLECTION_PREFERS_MONOLITHIC_FILES
#else // SHADER_COLLECTION_PREFERS_MONOLITHIC_FILES
#endif // SHADER_COLLECTION_PREFERS_MONOLITHIC_FILES
#generate "__OpenSubdivDeclShared__.metal"
#generate "__OpenSubdivDeclShared__patchType%d.metal"
USE_VERTEX_EXTRA_ARGUMENTS
USE_FRAGMENT_EXTRA_ARGUMENTS
METAL
DEBUG_PIXEL
USE_ARGUMENT_BUFFERS
USE_REVERSE_Z
////////////////////////////////////////////////
// CommonProfile Shader v%d
    float clipDistance [[clip_distance]] [%d];
} commonprofile_io_vert;
vertex commonprofile_io
commonprofile_io out;
commonprofile_io_vert out;
vertex commonprofile_io_vert
commonprofile_io in;
commonprofile_io io
commonprofile_io_vert in;
commonprofile_io_vert io
_import/%@
#import "%@"
#generate
 -D%@
 -D%@=%@
 -U%@
_unifdef/%@.h
#line
// #line
Error: cannot handle more than one lighting modifier
USE_GEOMETRY_MODIFIER
USE_SURFACE_MODIFIER
USE_FRAGMENT_MODIFIER
USE_LIGHT_MODIFIER
v16@?0^{__CFString=}8
v24@?0r^v8r^v16
Assertion '%s' failed. wrong entry point
CFXShaderModifierGetEntryPoint(shaderModifier) == entryPoint
Error: Invalid shader modifier : no code provided
v32@?0@"NSString"8@16*24
vfx_node.
USE_
, texture2d<half> u_goboTexture%d
, sampler u_goboTexture%dSampler
, texture2d<half> u_iesTexture%d
, device packed_float2* u_areaPolygonPositions%d
USE_MULTIPLE_RENDERING * %d + amplificationID
USE_MULTIPLE_RENDERING * %d + in.sliceIndex
USE_MULTIPLE_RENDERING * %d + out.sliceIndex
Unreachable code: Multiple rendering is lacking a multiple output vertex streams generator
u_shadowTexture
_lightingContribution.add_directional(vfx_lights[%@], u_goboTexture%d, u_goboTexture%dSampler);
_lightingContribution.add_directional(vfx_lights[%@], %s, %d, %s, u_shadowKernel, %d, %s);
true
_lightingContribution.add_directional(vfx_lights[%@], %s, u_shadowKernel, %d);
_lightingContribution.add_directional(vfx_lights[%@], %s);
_lightingContribution.add_directional(vfx_lights[%@]);
_lightingContribution.add_omni(vfx_lights[%@], %s, u_shadowKernel, %d);
_lightingContribution.add_omni(vfx_lights[%@]);
_lightingContribution.add_spot(vfx_lights[%@], u_goboTexture%d, u_goboTexture%dSampler);
_lightingContribution.add_spot(vfx_lights[%@], %s, u_shadowKernel, %d);
_lightingContribution.add_spot(vfx_lights[%@]);
_lightingContribution.add_ies(vfx_lights[%@], u_iesTexture%d, %s, u_shadowKernel, %d);
_lightingContribution.add_ies(vfx_lights[%@], u_iesTexture%d);
_lightingContribution.add_area_rectangle(vfx_lights[%@], u_areaLightBakedDataTexture);
_lightingContribution.add_area_polygon(vfx_lights[%@], u_areaLightBakedDataTexture, u_areaPolygonPositions%d);
_lightingContribution.add_area_line(vfx_lights[%@], u_areaLightBakedDataTexture);
_lightingContribution.add_area_ellipse(vfx_lights[%@], u_areaLightBakedDataTexture);
_lightingContribution.add_area_ellipsoid(vfx_lights[%@], u_areaLightBakedDataTexture);
Assertion '%s' failed. Infinite lights can only be dir or unranged omni
float2 _%@Texcoord = (vfx_commonprofile.textureTransforms[%d] * float4(_geometry.texcoords[%d], 0., 1.)).xy;
float2 _%@Texcoord = _geometry.texcoords[%d].xy;
float2 texcoord%d;
out.texcoord%d = (vfx_commonprofile.textureTransforms[%d] * float4(_geometry.texcoords[%d], 0., 1.)).xy;
out.texcoord%d = _geometry.texcoords[%d].xy;
USE_TEXCOORD
TEXTURE_TRANSFORM_COUNT
kVFXTexcoordCount
NEED_IN_TEXCOORD0
NEED_IN_TEXCOORD1
NEED_IN_TEXCOORD2
NEED_IN_TEXCOORD3
NEED_IN_TEXCOORD4
NEED_IN_TEXCOORD5
NEED_IN_TEXCOORD6
NEED_IN_TEXCOORD7
%@: %@
objectController.selection%@.%@
selectedValue
vector2
vector3
vector4
matrix4
instance
selectedIndex
%@[%d]
failed to instanciate a %@ with option %@
New %@
failed to instanciate a %@
%@.%@
imageSequence
%@%@
screenSpaceAmbientOcclusion
ssao
{CATransform3D=dddddddddddddddd}
{CGPoint=dd}
{CGSize=dd}
{?=fff}
{?=ffff}
@"NSString"
@"NSColor"
@"NSArray"
@"VFX
olor
ontent
mage
VFXUITreeDidChange
CFX-Grid.metal
_layerRoot
_overlayLayerRoot
_lightRoot
_cameraRoot
_effectRoot
_forceFieldRoot
_pointsOfViewRoot
v24@?0@"VFXNode"8*16
Perspective
Bottom
Left
Right
Front
Back
_authoringCamera%s
Error: light node already has an authoring node - skip
lightAuth
Error: effect node already has an authoring node - skip
particlesAuth
kVFXFreeViewCameraName
cameraAuth
cameraFrustumAuth
cameraNearPlaneAuth
cameraFocusPlaneAuth
Error: forceField node already has an authoring node - skip
fieldAuth
VFXDebugLightTypeKey
VFXDebugLightSubTypeKey
lightInnerAuth
lightOuterAuth
lightArrowAuth
lightShadowAuth
lightSpotAuth
probeGeometry
lightProbeExtents
vfx_probesphere_from_sh_vertex
vfx_probesphere_from_sh_fragment
Error: SH order unsupported : %d
v40@?0@"<VFXBufferStream>"8@"VFXNode"16@"<VFXShadable>"24@"VFXRenderer"32
probe
lightAreaAuth
disabled
oa:%f ia:%f e:%f scale:%f
AuthEnvHash
v32@?0@8Q16*24
location
kGeometrySourceSemanticPosition
kGeometrySourceSemanticNormal
kGeometrySourceSemanticColor
kGeometrySourceSemanticTexcoord
padding
normal
texcoord
textangent
joints
weights
commonProfile
kAnimationsKey
kBindingsKey
kLightKey
kDeformerStackKey
kCameraKey
kCameraEffectKey
kPhysicsBodyKey
kForceFieldKey
kConstraints
kAudioPlayer
kLightmapInfoKey
kRenderingPriorityKey
kShaderModifiers
kShadableMinimumMTLLanguageVersionKey
kPivotKey
kFilterKey
kBehaviorGraph
kParticleEmitter
kParticleCollider
meshElements
genericSource
image
animation
skin
morph
linear
easeIn
easeOut
easeInEaseOut
function
cullBack
cullFront
constant
phong
emission
diffuse
reflective
transparent
multiply
ambientOcclusion
selfIllumination
metalness
roughness
displacement
clearCoat
clearCoatRoughness
clearCoatNormal
subsurface
subsurfaceRadius
diffuseColor
shininess
indexOfRefraction
fresnelExponent
transparencyMode
minFilter
magFilter
mipFilter
wrapS
wrapT
wrapP
anisotropy
frustumCulling
defaultLight
defaultCamera
maxInFlightFrameCount
rootNode
mirrorNode
factor
kHitTestFirstFoundOnly
kHitTestSearchMode
kHitTestSortResults
kHitTestClipToZRange
kHitTestSkipTransparentNode
kHitTestSkipHiddenNode
kHitTestSkipParticleEmitter
kHitTestCategoryBitMask
kHitTestBackFaceCulling
kHitTestBoundingBoxOnly
kHitTestIgnoreChildNodes
kHitTestRootNode
kHitTestAllLayers
kHitTestLayerMask
kHitTestShowDebugInfo
kHitTestIgnoreLockedNodes
kHitTestResultIgnoreLightArea
kCFXNotificationMeshSourceWillDie
kCFXNotificationMeshElementWillDie
kCFXNotificationImageWillDie
kCFXNotificationImageProxyWillDie
kCFXNotificationProgramWillDie
kCFXNotificationGeometryWillDie
kCFXNotificationMorphWillDie
kCFXNotificationSkinWillDie
kCFXNotificationDeformerStackWillDie
kCFXNotificationDeformerStackDidChange
kCFXNotificationMaterialWillDie
kCFXNotificationMeshWillDie
kCFXNotificationNodeWillDie
kCFXNotificationPassWillDie
kCFXNotificationRasterizerStatesDidDie
kCFXNotificationEngineContextInvalidatePasses
kCFXNotificationProfileWillDie
kCFXNotificationEntityAttributeDidChange
kCFXNotificationRendererElementWillDie
kCFXNotificationProgramHashCodeWillDie
kCFXShadableDidChange
kCFXNotificationPrecomputedLightingEnvironmentWillDie
triggerOptionsForRealtimeViewer
kCFXWorldDidUpdateNotification
matrix
translation
rotation
orientation
eulerAngles
quaternion
pivot
filters
focalDistance
dofIntensity
orthographicScale
firstMaterial
selfIlluminationOcclusion
litPerPixel
alphaCutoff
contents
contentsTransform
shadowIntensity
gobo
probeEnvironment
attenuation
spotInnerAngle
spotOuterAngle
spotFalloffExponent
morpher
particleEmitter
particleCollider
background
environment
customProperty
PostProcess color input resolve
PostProcess depth input resolve
lensBlur
PostProcess
Post process input color
Post process input depth
Post process input normal
Post process input radiance
Post process input reflectance roughness
Post process input velocity
vertexCrease
edgeCrease
meshSource
Assertion '%s' failed. No more than 4 components for mesh source value types
componentCount <= 4
Error: Morph: target vertex count do not match base vertex count (%d != %d)
bse.ptr
tgt.ptr
dlt.ptr
baseSource
intervalList
Error: MeshSource packing only supports non interleaved float sources
Assertion '%s' failed. Provided mesh element is not an interval list
ind.type == kCFXMeshElementTypeLinesArray
Error: Conversion from other types than float is not supported
Error: Conversion of an interleaved source is not supported, please convert your sources before interleaving
Error: CFXMeshSourceCreateCopyWithComponentsBaseType: unsupported type
Error: Conversion from %@ to %@ to is not supported
%4d : %3d %3d %3d %3d
%4d : %+.2f %+.2f
%4d : %+.2f %+.2f %+.2f
%4d : %+.2f %+.2f %+.2f %+.2f
type debugging not implemented
CFXMeshSource
<CFXMeshSource %p(%@) data:(%p) mut:%d count:%ld type:%@ divisor:%d mtl:%d offset:%d stride:%d
accessor
MB-Color
Final Blur
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/MotionBlurPass.mm
vfx_draw_fullscreen_triangle_VR_pos_uv_uvNorm_vertex
vfx_motionblur_blur
vfx_motionblur_blur_resize
Neighbor max
vfx_motionblur_neighbormax_x
vfx_motionblur_neighbormax_y
MB-TileMax
Motion blur tile max
vfx_motionblur_tilemax
VELOCITY COPY
Copy velocity input
COLOR COPY
Copy color input
MOTION_BLUR_TILE_MAX_BLUR
MB-TileMaxN-X
MOTION_BLUR_NEIGHBOR_MAX
MB-TileMaxN-XY
MOTION_BLUR_FINAL_BLUR
animationPlayer
animationNode
animationManager
CFXAnimationPlayer
<CFXAnimationPlayer %p>
speed
blendFactor
manager
Assertion '%s' failed. _CFXAnimationManagerAddAnimationNode - cluster not expected
CFGetTypeID(animationNode) != CFXAnimationClusterNodeGetTypeID()
Warning: fail to setup the animation - won't be added to the animation stack
Assertion '%s' failed. _CFXAnimationManagerAppendCallback triggered while animation manager is muted
manager->_mute == false
Assertion '%s' failed. CFXAnimationManagerUpdateConstantCount
manager->_constantStackCount >= 0
Assertion '%s' failed. CFXAnimationManagerNeedsRedraw - inconsistant constant count
stackCount >= animationManager->_constantStackCount
root
rootObject
storage
Error: Binding: Unable to resolve destination keypath: %@(%@)
Error: Binding: Trying to bind two incompatible keypaths: %@(%@) -> %@(%@)
VFXBindingValueTransformerKey
c32@?0@8Q16*24
CFXAnimationManager
<CFXAnimationManager %p>
Assertion '%s' failed. CFXAnimationManagerNewStackWithKey key already exist
CFDictionaryContainsKey(manager->_targetAddressToStackIndex, (void*)key) == false
Assertion '%s' failed. unexpected semantic
animationNode->_target->_semantic != kCFXTypeSemanticNone
modelValueStorage
Error: implicit animation count overflow
Assertion '%s' failed. CFXAnimationManagerNewStackWithKey key doesn't exist
CFDictionaryContainsKey(manager->_targetAddressToStackIndex, (void*)key) == true
removedIndex
lastIndex
stackItem->_modelValueItem
q16@?0^{__CFXNode=}8
Assertion '%s' failed. Inconsistency in _CFXAnimationManagerRemoveAnimationNode: triggered while applying animations
manager->_applying == false
Assertion '%s' failed. CFXAnimationManagerRemoveAnimationNode removing an animation while applying
manager->_applying==false
Assertion '%s' failed. _CFXPreviousKeyIndexForTime - unexpected integer division
middle >= 0
controller
Error: CFXKeyframeControllerSetKeyframeAtIndex - time is NaN
Error: CFXKeyframeControllerRef - index out of bounds
controller->_values
controller->_evaluate
Assertion '%s' failed. CFXKeyframeControllerEvaluateAtTime animation has no key
controller->_keyCount > 0
Warning: can't simplify keyframes because of cubic interpolation
Warning: can't simplify keyframes because of tcb values
CFXKeyframeController
<CFXKeyframeController %p>
keyCount
Warning: _CFXKeyDistance - can't compute key distance for type %d
Error: %@ does not support jittering
ManipulatorWireframe_vert
ManipulatorWireframe_frag
Unreachable code: Unknown VFXWorldRenderer conforming class
Error: Cannot append manipulator vertex data because we encountered an overflow and we are not allowed to flush
Assertion '%s' failed. A mesh should have been allocated by now
glInfo->mesh != NULL
Assertion '%s' failed. Can not nest two Timed record
authoringEnvironment->_timedRecordingExpirationTime == 0
Warning: ring buffer is full [%d/%d]
Assertion '%s' failed. start != end
start != end
Assertion '%s' failed. Found crease element with more than 1 channel
CFXMeshElementGetIndicesChannelCount(creaseElement) == 1
VFX - Draw Statistics
v32@?0^q8^{CGSize=dd}16^^{?}24
v24@?0{CGSize=dd}8
Animations
Physics
Constraints
Delegate
Rendering
--- ms
%2.1f s
%2.1f ms
BGRA8Unorm_sRGB
BGRA8Unorm
RGBA16Float
RGBA32Float
$4$ %@  $5$ %@
%dfps
Assertion '%s' failed. Only GL_LINES and kCFXManipulatorDrawModeTriangles are supported
Assertion '%s' failed. basevertex should be 0 here.
glInfo->baseVertex == 0
Assertion '%s' failed. Base index should be reset at this point
glInfo->baseIndex == 0
ManipulatorColorAndTexture_vert
ManipulatorColorAndTexture_frag
ManipulatorColorOnly_vert
ManipulatorColorOnly_frag
ManipulatorLightProbe_vert
ManipulatorLightProbe_frag
Unreachable code: Unknown use of manipulators
Assertion '%s' failed. There should be at lease a valid CFXRendererContext or a valid VFXRenderer
Assertion '%s' failed. No program for the auth env!
glInfo->weakProgram != nil
Assertion '%s' failed. __appendRect2D: uv but not texture
glInfo->textureImage != nil
Assertion '%s' failed. __appendRect2D: no uv but texture
glInfo->textureImage == nil
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
Error: Unable to create context
%2.1fms
%.3gK
%.3gM
%.3gG
timingFunc
CFXTimingFunction
<CFXTimingFunction>
VFXFlyCameraControllerForwardKeyCodeKey
VFXFlyCameraControllerBackwardKeyCodeKey
VFXFlyCameraControllerLeftKeyCodeKey
VFXFlyCameraControllerRightKeyCodeKey
Camera
NSScrollWheelMultiplier
Warning: _computeTranslationOrigin3DFromPoint: invalid zRange
Warning: Warning: no CFXIntersectionRay3Plane
Assertion '%s' failed. CFXAnimationStackInit called twice
animationStack->_valid == false
animationStack
Assertion '%s' failed. CFXAnimationStack invalid
animationStack->_valid == true
Assertion '%s' failed. unexpected animation node class
CFGetTypeID(animationNode) == CFXAnimationClusterNodeGetTypeID()
Assertion '%s' failed. unexpected size
animationCluster->_keyframes->_valueSize[index] == CFXSizeOfBaseType(target->_baseType)
anim
outputAddress
dest
CFXKeyframedAnimation
<CFXKeyframedAnimation %p>
child
node->_cumulativeCache
Error: CFXAnimationNodeChangeSpeed - can't ensure animation continuity since animation manager is dead
animationGroup
animationCluster
CFXAnimationNode
Assertion '%s' failed. Completion item will be released without having handled a completion or interruption event. This can lead to an inconsistent state.
node->_completionItem == NULL
<CFXAnimationNode %p>
CFXAnimationClusterNode
<CFXAnimationClusterNode %p>
Error: Cannot build cubemap from array of images because image at index %d is NULL
Error: Cannot build cubemap from array of images because image at index %d is not square: %fx%f
Error: Cannot build cubemap from array of images because image at index %d (%fx%f) does not have the expected size (%zux%zu)
Error: Cannot build cubemap from array of images because conversion to CGImageRef of image at index %d failed
Error: Cannot build column cubemap from non-cubemap image
Warning: Failed to create bitmap context for CG image %@
Assertion '%s' failed. Can't get name for non catalog texture
image->_sourceType == kCFXImageSourceTypeCatalogTexture
size
MDLMemoryMappedData
Error: failed to map image data for image inside %@
Error: failed to resolve image inside %@
Error: Failed to create image source from data %@
Error: Failed to create image from image source %@ (status: %d)
missingMaterialImage
Assertion '%s' failed. CFXImageCacheBitmap context is not null when it should be
image->_bitmapContext==NULL
Error: failed to create a CGBitmapContext from a CGImage for %@
Error: Unknown cubemap image type
Error: Cannot support rotation layout for compressed texture
Error: Unknown Texture3D image type
Assertion '%s' failed. image has already compression infos
image->_textureRawData == NULL
CFXImage
<CFXImage %p src:%@ [%fx%f]>
<CFXImage %p src:%p [%fx%f]>
cgImage
clientImage
bitmap
hasAlpha
Error: Failed to load %@
DOUGHNUT_BOKEH_OUTPUT
mask_enabled
doughnut_bokeh
DoughnutBokehPass
minificationFilter
magnificationFilter
maxAnisotropy
textureSampler
CFXTextureSampler
<CFXTextureSampler>
nearest
clamp
repeat
clampToBorder
collisionBitMask
results
backfaceCulling
closest
Error: physicsWorld::preTick - no world
Error: physicsWorld::preTick - no vfxscene
v24@?0@"VFXPhysicsBody"8*16
gravity
ccdPenetration
Error: convexSweep only works with convex shapes
Assertion '%s' failed. Node should be visible
CFXNodeIsHidden(nodeRef) == false
timeStep
Assertion '%s' failed. update should not be called if not implemented by the delegate
_implementDidUpdateContact
_implementDidEndContact
Warning: PhysicsWarn: %s
Skinning
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/AppleEngine/CFXEngineContext.m
v16@?0r^v8
Info: Reload Shaders
Environment cube
CFXEngineContextLoadCustomRenderGraph
context->_pointOfView
Quad
index < CFXRenderingEyeMaxCount
Unreachable code: CFXEngineContextGetTextureFromHandle - no render context
Unreachable code: CFXEngineContextGetTextureWithName
Unreachable code: CFXEngineContextGetTextureForMaterialProperty
eye < CFXRenderingEyeMaxCount
Assertion '%s' failed. wrong viewport
viewport.z > 0 && viewport.w > 0
CFXEngineContext
<CFXEngineContext>
Format: %@ ; Size: %gx%g[%d] ; Texture: <%p> ; [rc:%ld/ts:%ld]
Name: %@ ; %@
CHROMATIC_TRANSFORM_COMPOSITE_BLOOM_OUTPUT
chromatic_transform_composite_bloom
CHROMATIC_TRANSFORM_OUTPUT
sample_count
chromatic_transform
chromaticTransform
ChromaticTransformCompositeBloomPass
ChromaticTransformPass
CHROMATIC_TRANSFORM_COMPISTE_BLOOM_PASS
BACKFACE_DEPTH
COLOR_DOWNSAMPLE
DEPTH_DOWNSAMPLE
SSRDownSample
vfx_ssr_downsample_depth
LOBE_FOOTPRINT
SSREnableFog
vfx_ssr_raytrace_vert
vfx_ssr_raytrace_frag
SSR BLUR OUTPUT 
vfx_ssr_blur_y
vfx_ssr_blur_x
vfx_ssr_composite_frag
SSR backface depth
SSR COLOR COPY
Copy downsample color input
DOWNSAMPLE DEPTH INPUT
Copy downsample depth input
SSR downsample
RAYTRACE NORMAL INPUT
Copy raytrace normal input
SSR raytrace
SSR blur X
SSR blur Y
REFLECTANCE ROUGHNESS COPY
Copy reflectance roughness input
RADIANCE COPY
Copy radiance input
SSR composite
SSR Composite output
SSR_DEPTH_BACKFACE_PASS
SSR_DOWNSAMPLE_PASS
SSR_BLUR_PASS
commonprofile_frag
commonprofile_vert
Unreachable code: Invalid CommonProfile generator
hashcode
Warning: Failed to create program for hashcode %@: %@
trackedResource
Error: CFXCommonProfileProgramReleaseHashCode can't find cache for tracked resource
Error: unknown material property type
USE_%@
USE_%@_COLOR
USE_%@_INTENSITY
USE_%@_TEXTURE_COMPONENT
USE_%@TEXCOORD
USE_%@_MAP
USE_%@_CUBEMAP
Assertion '%s' failed. wrong notification sent
CFEqual(name, kCFXNotificationProfileWillDie)
maximumAngularLimit1
maximumAngularLimit2
maximumTwistAngle
frameA
frameB
pingPongTex
vfx_jittering_color_attachment
vfx_jittering_texture
vfx_jittering_color_attachment_drawable
vfx_jittering_texture_drawable
Assertion '%s' failed. Count should be > 0
rgba
rgba8
rgba8unorm
rgba8snorm
rgba8s
rgba8uint
rgba8ui
rgba8sint
rgba8i
rgba16
rgba16unorm
rgba16snorm
rgba16s
rgba16uint
rgba16ui
rgba16sint
rgba16i
rgba16float
rgba16f
rgba32
rgba32uint
rgba32ui
rgba32sint
rgba32i
rgba32float
rgba32f
rg8unorm
rg8snorm
rg8s
rg8uint
rg8ui
rg8sint
rg8i
rg16
rg16unorm
rg16snorm
rg16s
rg16uint
rg16ui
rg16sint
rg16i
rg16float
rg16f
rg32
rg32uint
rg32ui
rg32sint
rg32i
rg32float
rg32f
r8unorm
r8snorm
r8uint
r8ui
r8sint
r16unorm
r16snorm
r16s
r16uint
r16ui
r16sint
r16i
r16float
r16f
r32uint
r32ui
r32sint
r32i
r32float
r32f
bgra8unorm
bgra8
depth16unorm
depth16
depth24unorm
depth24
depth32float
depth32f
depth24unorm_stencil8
depth32float_stencil8
stencil8
framebufferColor
r8Unorm
r8Snorm
r8Uint
r8Sint
r16Unorm
r16Snorm
r16Uint
r16Sint
r16Float
r32Uint
r32Sint
r32Float
rg8Unorm
rg8Snorm
rg8Uint
rg8Sint
rg16Unorm
rg16Snorm
rg16Uint
rg16Sint
rg16Float
rg32Uint
rg32Sint
rg32Float
bgra8Unorm
rgba8Unorm
rgba8Snorm
rgba8Uint
rgba8Sint
rgba16Unorm
rgba16Snorm
rgba16Uint
rgba16Sint
rgba16Float
rgba32Uint
rgba32Sint
rgba32Float
depth16Unorm
depth24Unorm
depth32Float
VFX - Draw wireframe
commonProfileHashCode
introspectionDataPtr
programDelegate
CFXFXProgram
<CFXFXProgram %p [vertex:`%@` fragment:`%@` macros:%@]>
v24@?0^{__CFString=}8r^v16
CFXRasterizerStates
states
Assertion '%s' failed. Calling CFXRasterizerStatesCFFinalize outside of CFXReleaseRasterizerStates probably direct call to CFRelease
!vfx_mutex_trylock(&s_RasterizerStatesRegistryLock)
Assertion '%s' failed. RasterizerStates should be in the registry
CFSetContainsValue(s_RasterizerStatesRegistry, cf)
<CFXRasterizerStates %p> ZRead:%d ZWrite:%d ZFunc:%d cull:%d fill:%d
imageProxy
imageProxy->_callbacks.getCaptureDeviceInfo
textureProxy
CFXImageProxy
<CFXImageProxy>
CFXTextureProxy
<CFXTextureProxy>
VFX could not attribute memory (mach_memory_entry_ownership failed)
Warning: Warning _lightNodes not NULL in CFXEnginePipelineSetup
attribute
v16@?0^{__CFXEngineContext=}8
Assertion '%s' failed. wrong notification type
notifications._eventType == kCFXNotificationEventType_Node
notifications._eventType == kCFXNotificationEventType_Material
notifications._eventType == kCFXNotificationEventType_Geometry
notifications._eventType == kCFXNotificationEventType_Light
engineIterationContext
name == kCFXNotificationNodeWillDie
enginePipeline
pipeline
renderGraph
Error: unexpected renderer element with no material/renderGraph/program
CFXEnginePipeline
<CFXEnginePipeline %p>
Unreachable code: Unsupported node attribute '%@'
Assertion '%s' failed. no render elements have been created
deformers
v28@?0^{__CFXDeformerStack=}8^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}16C24
Error: _applyDeleteEntities - can't find entity
Error: _applyDeleteEntities - registry does not exist
Error: _applyNewEntityForNode - node already has an entity
Error: _applyUpdateComponentForNode - entity registry doesn't exist
Error: _applyUpdateComponentForNode - can't find entity for node %@
Assertion '%s' failed. CFXTriangle3PointAtIndex: index out of bounds (%d)
index < 3
Warning: CFXTriangle3BarycentricCoordinates: unable to solve the equation
Assertion '%s' failed. CFXTransformGetValue offset out of bounds
offset < 4
Error: CFXTransformGetValue - unexpected semantic
Assertion '%s' failed. CFXTransformSetValue unexpected size
size == sizeof(float)
Error: CFXTransformSetValue unexptected component index %d
Error: CFXTransformSetValue - unexpected semantic
Assertion '%s' failed. CFXTransformSetValue offset out of bounds
Assertion '%s' failed. _updateMatrix - no valid rep
_affineValid(t)
Assertion '%s' failed. _updateMatrix - already valid
!_matrixValid(t)
Assertion '%s' failed. _updateAffine - no valid rep
_matrixValid(t)
Assertion '%s' failed. _updateAffine - already valid
!_affineValid(t)
Assertion '%s' failed. _updateAffineScale - no valid rep
Assertion '%s' failed. _updateAffineScale - already valid
Assertion '%s' failed. _updateAffineRotation - no valid rep
Assertion '%s' failed. _updateAffineRotation - already valid
BackBufferPass
is_color
is_depth
vfx_back_buffer_copy
DepthBackBuffer
ColorBackBuffer
backBufferTarget
DDGIPass
rays_per_probe
temporal_factor
probe_grid
has_IBL
light_count
raytracing_use_function_constant
use_depth_test
is_depth_pass
probe_res
vfx_ddgi_raytrace
DDGI_irradiance_0
DDGI_irradiance_1
vfx_ddgi_update
vfx_ddgi_border
DDGI_depth_0
DDGI_depth_1
DDGIDebugPass
DDGI Debug output
show_probes
probe_debug_scale
vfx_debug_ddgi
DDGI_DEBUG_PASS
v16@?0@"NSTimer"8
Error: Point of view has custom projection.
Unreachable code: Layered rendering is lacking a multiple output vertex streams generator
Unreachable code: Not implemented
Unreachable code: Vertex amplification shouldn't be active
Error: _createConstraint not implemented for %@
Error: leaking physics constraint
Error: _addToPhysicsWorld - already in a world?
Error: _addToPhysicsWorld - already added?
bodyA
bodyB
Error: set transform not implemented on %@
Error: set world transform not implemented on %@
MetalFXUpscalePass
MetalFXUpscalePassOutput
com.apple.vfx.jitteringUpdateQueue
Assertion '%s' failed. invalid iteration count
_iteration <= CFXJitteringIterationCount
DebugCopyStereoPass
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/DebugCopyStereoPass.mm
debug_copy_stereo
computeProgramHashCodes
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/SceneRenderer.mm
computeProgramHashCodeForRendererElement
visibleElements
sync and sort
process rendererElements
objcConstraint
CFXAvoidOccluderConstraintDelegate
<CFXAvoidOccluderConstraintDelegate %p>
v28@?0f8r^{Triangle=}12r^20
B20@?0^8I16
Assertion '%s' failed.  - Only vector3 type is supported.
vertices.type == kCFXBaseTypeVector3
Warning: Slider can only process triangles.
vertexCountPerPolygon >= 3
positions.type == kCFXBaseTypeVector3
Warning: Occluder can only process triangles.
CFXConstraintSlider
<CFXConstraintAcceleration>
CFXConstraintAvoidOccluder
<CFXConstraintAvoidOccluder %p>
aoCoord
lightmapCoord
bitangent
Error: CFXImageToMDLTexture not supported for image 3D
Warning: Failed to create cubemap from Model I/O texture
kMDLAssetDefaultUSDColorSpace
usdz
VFX_MDLCurrentAssetResolver
While creating VFXSkinner: Could not find VFXNode %@
Assertion '%s' failed. Found in-between morph target with influence weight of %f
influenceWeightNumber.floatValue < 1.f
morpher.weights[%d]
VFXMDLAssociatedObject
Warning: Warning: unable to flip non-float2 texture coordinates, skipping
c32@?0@"VFXMeshSource"8Q16*24
blendShape%d
normal%d
textureCoordinate%d
color%d
baseColor
metallic
%@_%d
AO_%@_%@.png
@"NSString"16@?0@"VFXNode"8
v32@?0@"VFXNode"8@"VFXModel"16@"NSArray"24
aoTexture
lightmapTexture
Error: unknown MKGeometryType
/tmp/ModelKit_AO_%@.png
fstop
Error: a MDLObject has more than 1 child mesh - not supported
Error: failed to find MKMaterial corresponding VFXMaterial
/%@.position
/%@.orientation
/%@.scale
Bad joint path detected for joint: %@
Error: Unknown Model I/O semantic %@
kSceneSourceUSDIgnoreVertexColors
positionAttribute
offset=%d&size=%d
Warning: ignoring white emission color from ModelIO
LightCount
quality_mode
vfx_rt_subsurface_trace
RTSubsurfaceTracePass
RTSubsurfaceUpscalePass
vfx_rt_subsurface_upscale
SubsurfaceUpscale
RTSubsurfaceTemporalDenoisePass
vfx_rt_subsurface_temporal_denoise
RTSubsurfaceSpatialDenoisePass
vfx_rt_subsurface_spatial_denoise
pingPongTex0
pingPongTex1
RT_SUBSURFACE_TRACE
RT_SUBSURFACE_UPSCALE
RT_SUBSURFACE_TEMPORAL_DENOISE
RT_SUBSURFACE_SPATIAL_DENOISE
Error: ranges and strings arrays must be of the same size
Error: ranges must be ordered
Error: incorrect ranges : cumulated size larger than the original string
Main::Setup
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/RenderElementsPass.mm
Main::Prepare
Main::Render
LINEAR_DEPTH
linearize_depth2
v16@?0@"NSObject"8
Copy input color
Copy input depth
DEPTH PREPASS
Depth prepass
Linearize depth
RENDER_ELEMENT_PASS
LINEARIZE_DEPTH_PASS
profile
VFXShadingModelConstant
VFXShadingModelPhong
VFXShadingModelNone
VFXShadingModelShadowOnly
VFXShadingModelPhysicallyBased
VFXhadingModelInvalid
Assertion '%s' failed. CFXCommonProfileGetHashCode: inconsistency error
commonProfile->_shadingModel < CFXShadingModelCount && CFXShadingModelCount < 15
materialProperty
Assertion '%s' failed. invalid content type
materialProperty->_contentsType == kCFXContentTypeAsset
CFXCommonProfile
<CFXCommonProfile %p :
 shadingModel:%@
 perPixelLit:%d
 transparencyMode:%d
Emission
Diffuse
Specular
Reflective
Transparent
Filter
Normal
Ambient Occlusion
Self Illumination
Metalness
Roughness
ClearCoat
ClearCoatRoughness
ClearCoatNormal
Subsurface
SubsurfaceRadius
Displacement
Shininess
Fresnel
[%@] texture:%d xform:%d
shadingModel
imagesCount
Error: orphan effect common profile detected
Assertion '%s' failed. LightingEnvironment not set on a Light or a World
typeID == CFXWorldGetTypeID()
CFXMaterialProperty
<CFXMaterialProperty>
mtltexture
precomputedLightingEnvironment
uvSet
CA texture source
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/ObjC/Texture sources/Custom sources/VFXCoreAnimationSource.m
Error: VFXTextureCoreAnimationSource::textureProxy -> no layer
thresholdType
CFXLOD
<CFXLOD>
Assertion '%s' failed. We do not support appending to really complicated interleavings
(size_t)CFDataGetLength(data) == stride * CFXSourceAccessorGetCount(accessor)
Error: CFXMeshSourceAppendVector3 - Type not supported
Error: CFXMeshSourceAppendVector2 - Type not supported
Error: CFXMeshSourceCreate: unsupported type
Assertion '%s' failed. Cannot set volatile data of a non volatile source
CFXMeshSourceIsVolatile(source)
<%@: %p>
coreHandle
rootIdentifier
Error: unsupported SH order
probesSystem->_probesCapacity
probesSystem->_probesPositions
Assertion '%s' failed. _computeNeighbourIndexes - missing tetrahedron
tetrahedronIndexes
Assertion '%s' failed. overwrite a neighbour index
_tetrahedrons[tetraderonIndex].neighbourIndexes[otherTetraderonFaceIndex] == -1
Assertion '%s' failed. wrong data size for SH
sh_sizeof(shOrder) == (size_t)CFDataGetLength(irradianceSH)
Assertion '%s' failed. Should never have been outside the tetras
lastIndex != (uint32_t)-1
cacheIndex
sh_sizeof(shOrder) == (size_t)shLength
CFXLightProbesSystem
<CFXLightProbesSystem %p>
Error: _buildTetrahedrons - failed with first tetrahedron
Error: tetrahedrisation: index out of bounds
Assertion '%s' failed. will make an invalid tetrahedron valid
tetrahedronIsValid[indexValid]
Assertion '%s' failed. validTetraCount > indexToRecycle
validTetraCount <= (uint32_t)indexToRecycle
Assertion '%s' failed. _faceHasEdgeSharedWithMoreThanTwoOtherOpenFace
vCount <=2
Assertion '%s' failed. memory smasher found in CFXEdgeArrayCreateFromMeshElement (%ld != %ld)
edgeCount == edges->_count
Assertion '%s' failed. CFXEdgeArrayGetEdgeAtIndex index out of bounds
index < edges->_count
array
vertices
Assertion '%s' failed. CFXTriangulationInfoCreateFromMeshElement - edge out of bounds
edgeIndexesPerFaceCounter[j] <= 2
info
CFXEdgeArray
<CFXEdgeArray>
CFXTriangulationInfo
<CFXTriangulationInfo>
MeshElementEditor
Error: CFXMeshElementEditorCreateWithMeshElement: mesh element is not a triangle array
Error: _CFXMeshElementEditorSetIndex unknown bytes per index
editor
Error: CFXMeshElementEditorSubdivideTriangleAtIndex: triangleIndex out of bounds
CFXMeshElementEditor
<CFXMeshElementEditor>
vfx_rt_indirect_diffuse_trace
distanceTex
RTIndirectDiffuseTracePass
RTIndirectDiffuseSpatialReSTIRPass
spatial_pass_id
vfx_rt_indirect_diffuse_spatial_restir
RTIndirectDiffuseUpscalePass
vfx_rt_indirect_diffuse_upscale
IndirectDiffuseUpscale
RTIndirectDiffuseTemporalDenoisePass
vfx_rt_indirect_diffuse_temporal_denoise
RTIndirectDiffuseSpatialDenoisePass
vfx_rt_indirect_diffuse_spatial_denoise
RT_INDIRECT_DIFFUSE_SPATIAL_RESTIR
RT_INDIRECT_DIFFUSE_UPSCALE
RT_INDIRECT_DIFFUSE_TEMPORAL_DENOISE
RT_INDIRECT_DIFFUSE_SPATIAL_DENOISE
overrides
presentation
Error: inconsistency - material count doesn't match - can't diff reference node
geometry.materials[%d]
Error: inconsistency - material has custom properties - can't diff reference node
Error: inconsistency - hierarchy doesn't match - can't diff reference node
[%d]
Error: inconsistency - hierarchy changed - can't diff reference node
Error: failed to parse key path %@ - missing '['
Error: failed to parse key path %@ - missing ']'
Error: failed to evaluate key path %@ - material index %d out of bounds (%d)
Error: failed to locate world reference %@
VFXReferenceLoadingStack
Error: failed to resolve referenced world (%@) cycle detected
<%@: %p source=%@>
referenceURL
referenceNode
loadingPolicy
childNodes
Error: VFXMTLRenderContext initWithDevice : device should not be nil
Error: VFXMTLRenderContext initWithDevice : cannot create a command queue. Bailing out.
com.apple.vfx.resourceCPUQueue
FrameConstant
Volatile
background_2D_vertid
background_2D_frag
background_cube_vertid
background_cube_frag
background_video_vertid
background_video_frag
background_2D_multiple_viewports_vertid
background_2D_multiple_viewports_frag
background_cube_multiple_viewports_vertid
background_cube_multiple_viewports_frag
background_2D_layered_vertid
background_2D_layered_frag
background_cube_layered_vertid
background_cube_layered_frag
Clear binding points
-[VFXMTLRenderContext beginFrame:]
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/NewRenderer/VFXMTLRenderContext.mm
/tmp/vfx-capture.gputrace
Wait inFlightSemaphore
Current CB creation to completion
Error: Main command buffer execution failed with status %d, error: %@
-[VFXMTLRenderContext endFrameWaitingUntilCompleted:status:error:]
Resource CB kernel time
Resource CB GPU time
Kernel time
CommandBuffer GPU time
Drawable present skipped
Presented time
VFXDefaultRadiance.ktx
VFXDefaultIrradiance.ktx
waitDrawable
Warning: Failed getting a valid drawable. Skipping this frame.
Resource CB creation to completion
Error: Resource command buffer execution failed with status %d, error: %@
ResourceComputeEncoder
v16@?0@"<MTLBuffer>"8
LightingSet: uploaded count: %d
  LightingSet: uploaded size %d bytes
setMask
Assertion '%s' failed. Control point indices must be 16-bit or 32-bit
element.indexType == MTLIndexTypeUInt32 || element.indexType == MTLIndexTypeUInt16
Assertion '%s' failed. Only triangle arrays are supported for tessellation
element.primitiveType == MTLPrimitiveTypeTriangle
VFX - Draw world background
currentPassInstance
Assertion '%s' failed. invalid index
i < 6
VFX - Draw video background
Unreachable code: Cannot render video background with an unspecified source type.
Error: cannot renderMesh without a vaid passDescriptor
Assertion '%s' failed. Volatile mesh must have been mapped already
!CFXMeshIsVolatile(mesh) || (renderMesh.volatileBuffer != nil)
Assertion '%s' failed. shader does not support batching!
!programHashCode || CFXProgramHashCodeUseDynamicBatching(programHashCode)
_processingContext.passInstance
Assertion '%s' failed. unexpected engine context
engineIterationContext->engineContext == _engineContext
Error: VFXCore can render a maximum of %d pov - %d were asked
Error: can not render without programs, using default
Assertion '%s' failed. CFXDeformerTransforms is not supported when instancing is active
dynamicBatchCount < 2
Deformer
_cache.metalMeshElement
Error: _executeProgram - no pipeline state
No registered texture for binding %@ and symbol "%@" in pass or render graph.
Pass: (%p)
No texture or image provided for binding %@ by sampler %@.
Texture: %@
Image: %@
No sampler found for binding %@ and input %@
Error: pass has no storage for input %@
No pass storage for binding %@
v24@?0^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}8*16
Error: binding is broken : neither block or semantic
resourceBinding.bindBlock
_engineContext
modelTransform
v36@?0^v8I16@"VFXMTLRenderContext"20I28I32
inverseModelTransform
modelViewTransform
inverseModelViewTransform
normalTransform
modelViewProjectionTransform
lastFrameModelTransform
motionBlurIntensity
inverseModelViewProjectionTransform
boundingBox
nodeOpacity
shCoefficients
Assertion '%s' failed. size mismatch for sh coefficients
size == sizeof(coefs)
categoryBitmask
v24@?0@"VFXMTLResourceBinding"8@"VFXMTLRenderContext"16
Unable to find texture for binding %@ and shadable %@
vfx_lights
vfx_lights_count
vfx_commonprofile
vfx_pointSize
u_clusterTexture
u_lightIndicesBuffer
u_areaLightBakedDataTexture
u_shadowKernel
v28@?0c8@"VFXMTLResourceBinding"12@"VFXMTLRenderContext"20
Unable to find texture for binding %@ and effect materialProperty %@
u_%@Texture
Unable to find IES or gobo texture for binding %@
u_goboTexture%d
u_iesTexture%d
u_iesCubeTexture%d
position%d
direction%d
right%d
up%d
iesMatrix%d
attenuation%d
spotAttenuation%d
shadowMatrix%d
Assertion '%s' failed. Cannot set more than 4 matrices for cascade shadows
size <= (sizeof(simd_float4x4) * CFX_MAX_CASCADE_COUNT)
shadowRadius%d
shadowColor%d
goboMatrix%d
projectorColor%d
u_areaPolygonPositions%d
u_specularDFGDiffuseHammonTexture
u_radianceTexture
u_irradianceTexture
u_reflectionProbeTexture
u_ssaoTexture
VFX-SSAO
Unable to find "VFX-SSAO" texture in render graph for binding %@
v32@?0@"VFXBufferBinding"8@"<MTLBinding>"16@"VFXMTLShaderBindingsGenerator"24
Assertion '%s' failed. You can only map volatile mesh
Assertion '%s' failed. Mesh should have volatile data to allocate
metalMesh.volatileStride != 0
Assertion '%s' failed. Mesh should be mapped
sub.buffer != nil
Assertion '%s' failed. MeshElement should be mapped
mtlBuffer != nil
Assertion '%s' failed. Mesh should not be already mapped
metalMeshElement.indexBuffer == nil
quad_vertex
quad_display_cube_equirectangular
quad_display_texture2D
quad_display_depth2D
quad_display_depth_cube
vfx_draw_fullscreen_gamma_fragment
shadowMap
passConstants
VFX-Depth-Linear
Error: VFXMTLRenderContext::buffer not implemented for scope %d and name %s
Error: VFXMTLRenderContext::sampler no implemented
viewToProjArray
projToViewArray
viewportCount
Assertion '%s' failed. Hidden nodes should have been removed from the pipeline already
CFXRendererElementIsHidden(rendererElement) != true
Assertion '%s' failed. Fully transparents objects should have been removed from the pipeline already
theNode==NULL || CFXNodeGetOpacity(theNode) > 0 || (rendererElement->_renderableAttributeKind == kCFXRenderableAttributeKindVFXCore)
Assertion '%s' failed. RenderElement external encoder is nil
rendererElement->_handler.encoder
Error: CFXEngineContextRenderRenderGraph - unknown draw instruction
commandBuffer
commandEncoder
CFXIndexSet
indexSet 
(no index)
[number of indexes: %lu (in %lu ranges), indexes: (
-%lu
Error: Index %ld out of range bounds [0...%ld]
Error: Index %ld out of bounds [0...%ld]
Unreachable code: CFXAnimationSetup - unknown animation class
Error: CFXSimpleAnimationEvaluate - invalid evaluation function
CFXSimpleAnimation
<CFXSimpleAnimation>
Assertion '%s' failed. Light should be a IES
light->_type == kCFXLightTypeIES
projInfoOut
CFXLight
<CFXLight %p> Type:%@ CastsShadow(Samples:%d Cascade:%d)
<CFXLight %p> Type:%@
Ambient
Directional
Omni
Spot
Irradiance
Radiance
Area[Rectangle]
Area[Polygon]
Area[Line]
Area[Ellipse]
Area[Ellipsoid]
Unknown
shadowBias
temperature
shadowCascadeDebugFactor
areaExtents
Color
castShadow
shadowSoftenFactor
shadowMapSize
directionalExtent
shadowMaxSampleCount
Error: animating areaExtents on a non area light
Area light - Rectangle
Area light - Polygon
Area Light - Line
Area Light - Ellipse
Area Light - Ellipsoid
area_shape_vert
area_shape_ellipse_frag
area_shape_ellipsoid_frag
Info: invalid zNear value (0) set to camera
infos
Error: CFXProjectionInfosUnproject : invalid viewport dimension
CFXCamera
<CFXCamera:%p "%@" custom, [%.3f %.3f %.3f %.3f ; %.3f %.3f %.3f %.3f ; %.3f %.3f %.3f %.3f ; %.3f %.3f %.3f %.3f]>
<CFXCamera:%p "%@" ortho, near:%.3f far:%.3f scale: %.3f>
<CFXCamera:%p "%@" persp, near:%.3f far:%.3f fov:%.3f>
sensorHeight
postProjectionTransformTranslation
postProjectionTransformScale
depthOfField
motionBlur
grain
toneMapping
vignetting
colorFringe
colorGrading
doughnutBokeh
orthoScale
zfar
znear
Assertion '%s' failed. need subdivision level
subdivisionLevel > 0
Assertion '%s' failed. child is already inserted in a tree
child->_nextSibling == NULL
child->_parent == NULL
Assertion '%s' failed. prevChild is not parented to the right node
prevSibling->_parent == node
prevChild
Warning: CFXNodeGetWorldMatrix - no transform tree
Assertion '%s' failed. Node should have a TT handle already
node->_transformHandle != kCFXTransformHandleInvalid
attributeName
parent
ancestor
arrayOfNodes
player
Assertion '%s' failed. layer index out of bound
layer < CFX_MAX_LAYERS
CFXNode
Error: inconsistency in world graph found in CFXNode finalize
<CFXNode:%p "%@"
  geometry: %@
  light: %@
  camera: %@
  skinner: %@
  morpher: %@
firstChild
nextSibling
skinner
sphereOut
v24@?0^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}8^B16
Assertion '%s' failed. Node should already be in CullingSystem
!CFXNodeShouldBePutInCullingSystem(root) || (root->_cullingHandle != kCFXCullingHandleInvalid)
!CFXNodeShouldBePutInCullingSystem(child) || (child->_cullingHandle != kCFXCullingHandleInvalid)
baseNormalSource
baseTangentSource
Unreachable code: Volatile meshes are not supported by the deformer stack
Assertion '%s' failed. Only original data kind can have non 'GPU' primitive type
_finalDataKind == kCFXMeshDataKindOriginal && subdivIsUsed
UInt%d-%d-%d
deformer_splat
Assertion '%s' failed. buffer overflow
orig < originalVertexCount
prov < deindexedVertexCount
Unreachable code: Can't create an interleaved buffer for the renderable topology, possible vector count mismatch between semantics
VFX: Deformers
Assertion '%s' failed. Transform of dependency node is not available
[dependencyDeformerStack computeDeformedMeshReliesOnTransforms] == NO
Assertion '%s' failed. Frustum info for dependency node is not available
[dependencyDeformerStack computeDeformedMeshReliesOnFrustum] == NO
@"<MTLComputeCommandEncoder>"8@?0
Unreachable code: Unsupported input
_currentUpdateBuffers.dependency0Positions
_currentUpdateBuffers.dependency0Normals
_currentUpdateBuffers.dependency0Tangents
_currentUpdateBuffers.dependency1Positions
_currentUpdateBuffers.dependency1Normals
_currentUpdateBuffers.dependency1Tangents
v40@?0Q8@"VFXNode"16Q24*32
Warning: VFXMTLSmoothNormalsDeformer can only process triangles and polygons
indicesCount >= 3
Assertion '%s' failed. indexed index overflow
vertexIndex < originalVertexCount
Assertion '%s' failed. expecting at least triangles here
perVertexTriangleCount[vertexIndex] > 0
Assertion '%s' failed. splitted vertices should not have been decremented yet
Assertion '%s' failed. welded vertices should have been entirely decremented
perVertexTriangleCount[weldedVertexIndex] == 0
unify_u16
unify_u32
Assertion '%s' failed. No double position sources allowed
semantic != kCFXMeshSourceSemanticPosition || data->sourcesSemanticInfos[semantic].count == 0
Warning: Mesh '%@' : sources of redundant semantic '%@' will be ignored in rendering
Assertion '%s' failed. Mesh sources are not sorted correctly
semantic > currentSemantic
Assertion '%s' failed. Mesh sources with same semantic non contiguous
data->sourcesSemanticInfos[semantic].index == -1
mesh->_renderableData.sources
mesh->_renderableData.elements
Assertion '%s' failed. Mesh sources are malformed
sourceIndex < oldSourceCount
Assertion '%s' failed. Renderable data kind must not give a channel
(dataKind != kCFXMeshDataKindRenderable) || (channel == kCFXSharedRenderableIndexChannel)
Assertion '%s' failed. need to provide a valid channel index when adding a new source
channel != kAutomaticChannelIndex
mesh->_originalData.sourceChannels
Assertion '%s' failed. Could not find source with semantic %@ at index %d
sourceIndex != kCFNotFound
mesh->_originalData.elements
Unreachable code: Internal consistency error in %s
CFXMeshGetIndexOfElement
CFXMeshGetElementAtIndex
CFXMeshGetMeshElements
Warning: Can only convert to lines or points element type
Warning: Can only convert from triangle array to another element type
CFXMesh
<CFXMesh %p "%@"
  element%d: %@
  source %@%d (channel:%d) : %@
  source %@ (channel:%d) : %@
  renderable element%d: %@
  renderable source %@%d: %@
  renderable source %@: %@
sources
boundingSphere
__meshDataForDataKind
Warning: Can't add two position sources
sourceIndex < CFArrayGetCount(meshData->sources)
Error: __CFXMeshCopy - unable to resolve interleaved mesh
Error: Failed to instantiate unarchiver with error %@
Error: decodeValueOfObjCType - failed to decode CATransform3D
Assertion '%s' failed. invalid fill mode
fillMode == kCFXFillModeFill || fillMode == kCFXFillModeLines
material->_commonProfile
oBlendColor
Unreachable code: Blend mode not implemented.
CFXMaterial
<CFXMaterial %p : "%@", 
common profile %@
custom %@
fillMode
enableReadsFromDepthBuffer
enableWriteInDepthBuffer
nodeConstraints-%p
Unreachable code: unexpected call to CFXWorldRegisterNodeCoreEntityHandle
nodeRef
Assertion '%s' failed. There should only be valid audio sources in this array
player != NULL
Warning: CFXWorldSetRootNode - old root node seems to be already connected to another world
originator
CFXWorldLock
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/Core/CFXWorld.m
Assertion '%s' failed. Only %d layers are available, but layer %d requested
entityHandle
CFXWorld
Warning: RootNode is not retained by the world
<CFXWorld>
fogColor
fogDensityExponent
fogEndDistance
fogStartDistance
wantsScreenSpaceReflection
screenSpaceReflectionSampleCount
screenSpaceReflectionMaximumDistance
screenSpaceReflectionStride
Unreachable code: You can't change the worldRef of a world
startTime
endTime
frameRate
playbackSpeed
unit
raytracingSystem
<%@: %p '%@'>
Warning: %@: zNear of 0 is not allowed
usesOrthographicProjection
automaticallyAdjustsZRange
fill
filmOffsetX
filmOffsetY
postProjectionTransformTranslationX
postProjectionTransformTranslationY
postProjectionTransformScaleX
postProjectionTransformScaleY
wantsHDR
bladeCount
exposureOffset
toneMappingMode
toneMappingToeStrength
toneMappingToeLength
toneMappingShoulderStrength
toneMappingShoulderLength
toneMappingShoulderAngle
toneMappingGamma
bloomIntensity
bloomThreshold
bloomThresholdSmoothness
bloomUseHighQuality
bloomColorFilter
bloomContrast
bloomSaturation
bloomIteration
vignettingIntensity
vignettingAnamorphic
vignettingSoftness
vignettingRadius
lensBlurRadius
lensBlurFilterQuality
{?=ff}
{CGRect={CGPoint=dd}{CGSize=dd}}
%.2f
%.2f %.2f
%.2f %.2f %.2f
%.2f %.2f %.2f %.2f
p[%.2f %.2f %.2f] q[%.2f %.2f %.2f %.2f] s[%.2f %.2f %.2f]
non-affine matrix
Error: _VFXValueFromDataAndType - out of bounds
Error: VFXDataFromArrayOfValues - unknown type
Error: VFXArrayOfValueFromData - unknown type
Error: VFXArrayOfValueFromData - unexpected data length
<%@: %p '%@' | type=%d>
<%@: %p | type=%d>
probeExtents
probeOffset
parallaxExtentsFactor
parallaxCenterOffset
lightCategoryBitMask
spotFallOffExponent
probeType
probeUpdateType
parallaxCorrectionEnabled
probeExtentsX
probeExtentsY
probeExtentsZ
probeOffsetX
probeOffsetY
probeOffsetZ
parallaxOffsetX
parallaxOffsetY
parallaxOffsetZ
parallaxExtentsFactorX
parallaxExtentsFactorY
parallaxExtentsFactorZ
maximumShadowDistance
autoShadowProjection
shadowCascadeCount
shadowCascadeSplittingFactor
forcesBackFaceCasters
sampleDistributedShadowMaps
castsShadow
baked
shouldBakeDirectLighting
shouldBakeIndirectLighting
sphericalHarmonics
lightType
vfxcolor
IESProfile
areaType
areaExtentsX
areaExtentsY
areaExtentsZ
areaPolygonVertices
drawsArea
Error: failed to load ies from %@
iesData
Error: invalid IES data
Error: ies corrupted data
offsetX
offsetY
mappingChannel
v16@?0@"<VFXWorldReference>"8
Error: Over-detach of instance %@ from world %@
Unreachable code: _setupMaterialProperty -- should not reach
<%@: %p
 '%@'
  %@=%@
.color
content
Warning: can't prepare shadable animation with path %@
Error: Material : %@ is not an animatable path
Error: missing target material description
customMaterialProperties
customMaterialAttributes
q24@?0@8@16
valuesForUndefinedKeys
Error: Failed to archive material's custom attributes. %@ %@
shadableHelper
avoidsOverLighting
writesToDepthBuffer
readsFromDepthBuffer
colorBufferWriteMask
blendMode
_VFXNullMaterial
Error: unknown shading model (2)
Error: unknown shading model
kProjectionTransform
kModelTransform
kViewTransform
kModelViewProjectionTransform
kModelViewTransform
kNormalTransform
kRenderPassName
%s%s {
dump node tree (%@)
------------------------------------------------------
%@%@
<%p>
c24@?0@"VFXNode"8*16
Error: unknown component type : %d
Assertion '%s' failed. cannot update matrix without affine
_affineUpToDate
Assertion '%s' failed. cannot update affine without matrix
_transformUpToDate
 pos(%f %f %f)
 rot(%f %f %f %f)
 scale(%f %f %f)
 light=%@
 camera=%@
 model=%@
 | no child
 | 1 child
 | %d children
euler
worldTransform
worldPosition
worldOrientation
filters.
Error: attempt to add a parent node as a child node
Error: removeChildNodeAtIndex - index out of bounds
Unreachable code: error in removeObjectFromChildNodesAtIndex -> try to remove inconsitent node
Unreachable code: circular reference found when trying to add %@ as a child node of %@
Unreachable code: error in replaceObjectInChildNodesAtIndex -> index out of bounds
Unreachable code: error in replaceObjectInChildNodesAtIndex
Error: error in removeFromParentNode : inconsistent tree
Assertion '%s' failed. _updateFocusableCache - invoked on a non focusable node (waste of time)
_isFocusableOrHasFocusableChild
Error: Physics body %@ 's owner (%@) should be %@
Error: Physics body %@ already has a owner: %@ that is not %@
Error: attempt to add a null audio player on %@
system
locked
constraints
physicsBody
forceField
emitter
collider
fixedBoundingBoxExtrema[0]
fixedBoundingBoxExtrema[1]
focusBehavior
clientAttributes
failed to archive node's client attributes. %@ %@
whatever
_entityTagIdentifier
renderingOrder
Error: node::setTransform - invalid matrix
Error: node::setTransform - invalid matrix (nan in scale)
Error: attempt to set NaN to node's quaternion
Error: failed to find cloned skeleton in cloned tree
Error: error while transposing animations to cloned tree
Assertion '%s' failed. bad type
mode <= CFXWrapModeMirror
mode <= kCFXFilterModeLinear
Assertion '%s' failed. bad image type
type < kCFXImageCount
Assertion '%s' failed. bad cull mode
cull <= kCFXCullNone
Assertion '%s' failed. bad fill mode
fillMode == kCFXFillModeLines || fillMode == kCFXFillModeFill
Assertion '%s' failed. bad blend mode
blend < kCFXBlendFactorCount
Assertion '%s' failed. bad blend operation
blendOp < kCFXBlendOpCount
Assertion '%s' failed. bad comparison func
func < kCFXComparisonFuncCount
Assertion '%s' failed. bad stencil op
op < kCFXStencilOpCount
Assertion '%s' failed. Polygon Array not supported in Metal
Assertion '%s' failed. Triangle Fan not supported in Metal
Warning: r8Unorm_sRGB variant is not supported on macOS for this hardware. Defaulting to r8Unorm.
Warning: rg8Unorm_sRGB variant is not supported on macOS for this hardware. Defaulting to rg8Unorm.
Error: Failed to create Metal pixel format for %@ [%d components, %d bits per component, bitmap info: %u (%@|%@), float components: %@, color space: %@]
format < sizeof(__VFXMTLVertexFormatToCFXBaseTypeArray) / sizeof(__VFXMTLVertexFormatToCFXBaseTypeArray[0])
None
float2x3
Invalid
A8Unorm
R8Sint
R8Snorm
R8Uint
R8Unorm
R8Unorm_sRGB
R16Float
R16Sint
R16Snorm
R16Uint
R16Unorm
R32Float
R32Sint
R32Uint
RG8Sint
RG8Snorm
RG8Uint
RG8Unorm
RG8Unorm_sRGB
RG16Float
RG16Sint
RG16Snorm
RG16Uint
RG16Unorm
RG32Float
RG32Sint
RG32Uint
BGR10_XR
BGR10_XR_sRGB
BGRA10_XR
BGRA10_XR_sRGB
BGR10A2Unorm
RGBA8Sint
RGBA8Snorm
RGBA8Uint
RGBA8Unorm
RGBA8Unorm_sRGB
RGB10A2Uint
RGB10A2Unorm
RGBA16Sint
RGBA16Snorm
RGBA16Uint
RGBA16Unorm
RGBA32Sint
RGBA32Uint
Depth16Unorm
Depth32Float
Stencil8
Depth24Unorm_Stencil8
Depth32Float_Stencil8
MTLPixelFormat
Unkown
Unreachable code: Kernel functions have no corresponding program stage
Error: VFXMTLFunctionTypeToProgramStage - type not supported
MTLTextureType1D
MTLTextureType1DArray
MTLTextureType2D
MTLTextureType2DArray
MTLTextureType2DMultisample
MTLTextureTypeCube
MTLTextureTypeCubeArray
MTLTextureType3D
MTLTextureType2DMultisampleArray
MTLTextureTypeTextureBuffer
Warning: unsupported texture type %d
Warning: CFXValueWriteToMTLData - Unsupported data type %@
Warning: value unsupported %d of member %@
Error: Unexpected pixel format %lu
shaderRead
shaderWrite
renderTarget
pixelFormatView
mtlBuffer
mtlVertexFormat
Unreachable code: Unexpected antialiasing mode (%d)
byteOrderDefault(Big)
byteOrder16Little
byteOrder32Little
byteOrder16Big
byteOrder32Big
byteOrderUnknown
alphaNone
alphaPremultipliedLast
alphaPremultipliedFirst
alphaLast
alphaFirst
alphaNoneSkipLast
alphaNoneSkipFirst
alphaOnly
alphaUnknown
Assertion '%s' failed. Method should not be called when VFXCore features aren't enabled
CFXWorldHasOptions(_world, CFXWorldCreationOptionEnableVFXCoreFeatures)
-[VFXWorld cloneModelToPresentationAndStartReplicationStream]
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/ObjC/VFXWorld.m
setting up axis is unsupported
Error: [VFXWorld root] is deprecated, use rootNode instead
org.khronos.collada.digital-asset-exchange
vfx-world
vfxz-world
scnz
com.apple.vfx.world
com.apple.vfx.world.zip
com.pixar.universal-world-description-mobile
public.polygon-file-format
public.model-definition-format
public.standard-tesselated-geometry-format
com.pixar.universal-world-description
plist
c24@?0^@8@?<c@?@"NSURL"^@>16
usda
usdc
c24@?0@"NSURL"8^@16
MDLAsset
worldDump%d.vfx
dumping world to %@
children[
Error: _subnodeFromIndexPath - invalid keypath
Error: %@ is not in a world yet
Assertion '%s' failed. _subnodeIndexPath - unexpected count (hierachy was mutated?)
wr == 0
unknown renderer type
defaultRenderGraph
assetRegistry
physicsWorld
userAttributes
stateManager
triggerManager
Error: failed to unarchive VFXWorld - (secureCoding compliance issue?)
VFXLayerTreeDidChange
Error: VFXTextureSource abstract method invoked %@
CFXEngineContextGetRenderContext(engineContext)
Error: Texture source does not support Metal
Error: VFXImageSource astract method invoked %@
VFXIsBackingViewAsMaterialPropertyTag
kCARendererFlags
PostRender
CopyToFinal
Copy to final resolve
Resolve
almost final target
debug copy stereo to drawable
Copy to drawable
vfx_rt_direct_lighting_trace
RTDirectLightingTracePass
RTDirectLightingSpatialReSTIRPass
vfx_rt_direct_lighting_spatial_restir
RTDirectLightingResolvePass
vfx_rt_direct_lighting_resolve
DirectLightingResolve
RTDirectLightingDenoisePass
vfx_rt_direct_lighting_denoise
RT_DIRECT_LIGHTING_RESOLVE
RT_DIRECT_LIGHTING_DENOISE
Assertion '%s' failed. wrong target index
renderTargetIndex < states->_targetCount
srcColor
(1 - srcColor)
srcAlpha
(1 - srcAlpha)
dstColor
(1 - dstColor)
dstAlpha
(1 - dstAlpha)
blendColor
(1 - blendColor)
blendAlpha
(1 - blendAlpha)
srcAlphaSat
CFXBlendStates
<CFXBlendStates %p targetCount:%d needsBlendColor:%d
  blend:%s col[(src * %@) %@ (dst * %@)] alpha[(src * %@) %@ (dst * %@)]
  blend:%s col[(src * %@) %@ (dst * %@)]
VFXTriggerTypeTicked
VFXTriggerTypeMouseDown
VFXTriggerTypeMouseUp
VFXTriggerTypeMouseMoved
VFXTriggerTypeMouseDragged
VFXTriggerTypeKeyDown
VFXTriggerTypeKeyUp
VFXTriggerTypeTouchBegan
VFXTriggerTypeTouchMoved
VFXTriggerTypeTouchEnded
VFXTriggerTypeTouchCanceled
COMPOSITING OUTPUT
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/CompositePass.mm
vfx_post_process
VFXPreferredDeviceKey
VFXPreferLowPowerDeviceKey
PrefersLowPowerGPU
com.apple.vfx.preferLowPowerDevice
com.apple.vfx.preferRemovableDevice
Error: Failed to create default Metal device.
autoenablesDefaultLighting
jitteringEnabled
temporalAntialiasingEnabled
backgroundColor
background.contents
kVFXViewObservingContext
com.apple.vfx.forceSeparateWorkGroup
Set drawableSize
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/Views/VFXView.m
renderer.%@
<%@: %p | world=%@ frame=%@ pointOfView=%@>
Error: switchToCameraNamed: no camera named %@
VFXView::setAsynchronousLoading is deprecated
NSScreenNumber
@"NSEvent"16@?0@"NSEvent"8
-[VFXView mouseDown:]
-[VFXView performMouseUp:]
-[VFXView mouseUp:]
-[VFXView mouseMoved:]
-[VFXView mouseDragged:]
-[VFXView scrollWheel:]
-[VFXView keyDown:]
-[VFXView keyUp:]
IRRADIANCE_PROBE_CUBEMAP_COLOR_TARGET
IRRADIANCE_PROBE_CUBEMAP_DEPTH_TARGET
IRRADIANCE_SH
compute_sh%d_from_cubemap_threadgroup_mem
compute_sh%d_from_cubemap
sum_sh%d
IRRADIANCE_PROBE_RENDER_CUBEMAP_PASS
Irradiance probe render cubemap pass
Irradiance probe compute sh pass
uniform
#pragma opaque
#pragma declaration
#pragma arguments
#pragma varyings
#pragma body
#pragma 
Error: syntax error in the uniform declaration : %@
vfx_node
vfx_frame
Shadow
VFXProgramDidChangeNotification
tessellationControlShader
tessellationEvaluationShader
geometryShader
vertexShader
fragmentShader
vertexFunctionName
sourceFile
fragmentFunctionName
semanticInfos
opaque
Error: VFXRenderer::init - no engine context
Assertion '%s' failed. Private renderer only supports VFXView or VFXMetalLayer
[privateRendererOwner isKindOfClass:[VFXView class]] || [privateRendererOwner isKindOfClass:[VFXMetalLayer class]] || [privateRendererOwner isKindOfClass:[VFXHolographicRenderer class]] || [privateRendererOwner isKindOfClass:[VFXCompositorRenderer class]]
com.apple.vfx.renderingQueue.%@%p
<%@ %p: world = %@, pointOfView = %@>
-[VFXRenderer lock]
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/ObjC/VFXRenderer.mm
Error: framebuffer width must be > 0
Error: framebuffer width (%d) exceeds device's limit (%d), clamping
Error: framebuffer height must be > 0
Error: framebuffer height (%d) exceeds device's limit (%d), clamping
Error: autoenablesDefaultLighting: renderer has no context
Error: setAutoenablesDefaultLighting: renderer has no context
Assertion '%s' failed. can't set a presentation instance as a point of view
[pov isPresentationObject] == 0
camera.fieldOfView
camera.orthographicScale
camera.filmOffset
camera.postProjectionTransformTranslation
camera.postProjectionTransformScale
depthOfField.focalBlurSampleCount
depthOfField.fStop
depthOfField.apertureBladeCount
motionBlur.intensity
exposure.value
exposure.offset
exposure.averageGray
exposure.whitePoint
exposure.adaptationBrighteningSpeedFactor
exposure.adaptationDarkeningSpeedFactor
exposure.adaptationMinimum
exposure.adaptationMaximum
toneMapping.toeStrength
toneMapping.toeLength
toneMapping.shoulderStrength
toneMapping.shoulderLength
toneMapping.shoulderAngle
toneMapping.gamma
bloom.intensity
bloom.threshold
bloom.thresholdSmoothness
bloom.colorFilter
bloom.contrast
bloom.saturation
vignetting.intensity
vignetting.anamorphic
vignetting.softness
vignetting.radius
colorFringe.strength
colorFringe.intensity
colorGrading.saturation
colorGrading.contrast
colorGrading.whiteBalanceTemperature
colorGrading.whiteBalanceTint
colorGrading.liftColor
colorGrading.liftOffset
colorGrading.gammaColor
colorGrading.gammaOffset
colorGrading.gainColor
colorGrading.gainOffset
grain.intensity
grain.scale
camera.
Did render delegate
will render delegate
Error: prepareObject is deprecated, use VFXWorld.prepare instead
Error: prepareObjects is deprecated
-[VFXRenderer updateAtTime:]
updateAtTime delegate
didApply Animations
VFXCore sync
didSimulate Physics
didApply constraints
VFXCore
Apply notification queue
Assertion '%s' failed. can't call renderAtTime:withEncoder:pass:commandQueue: with a GL context
[_renderContext isKindOfClass:[VFXMTLRenderContext class]]
Error: VFX uses reverseZ depth buffer to achieve better precision. You must clear your depth to 0.0 or everything will be discarded.
Error: Render pass descriptor misconfigured - missing drawable texture
Error: Failed to create snapshot with error %@
self.world
Error: %s should only be called on a private renderer, using -[VFXRenderer _addGPUFrameCompletedHandler:] instead
-[VFXRenderer _addGPUFramePresentedHandler:]
VFX_ENABLE_COLLECTION
vfx.fps
vfx.primcnt
vfx.frmtime
vfx.phytime
vfx.prttime
vfx.animtime
vfx.clientTime
vfx.consttime
vfx.rendertime
vfx.cpuidletime
vfx.cawaittime
vfx.deviceutil
vfx.rendererutil
vfx.tilerutil
IOAccelerator
PerformanceStatistics
__vfxPerformanceData
v24@?0{_CSTypeRef=QQ}8
vfx.shaderCompilationTime
vfx.shaderGenerationCount
Device Utilization %
Renderer Utilization %
VFXShaderCache
com.apple.vfx.traceResources
containerPath
commonProfile_
metal
Error: unable to create the shader cache folder at %@ (%@)
error
can't create symbolicator for pid
__vfxDebuggingInfo
can't find symbol __vfxDebuggingInfo
can't mmap memory for symbol __vfxDebuggingInfo
can't get mem rangefor symbol __vfxDebuggingInfo
failed to read memory for symbol __vfxDebuggingInfo
applicationContainerPath not set
axisA
axisB
anchorA
anchorB
minLinearLimit
maxLinearLimit
minAngularLimit
maxAngularLimit
motorTargetLinearVelocity
motorMaximumForce
motorTargetAngularVelocity
motorMaximumTorque
Error: Failed to build renderable data for mesh %p
renderableElement
Assertion '%s' failed. Consistency error: there must be as many renderable elements as original elements
elementCount == CFArrayGetCount(deindexedTriangleElements)
Warning: Mesh element %p of mesh %p has %d channels but they all define the same topology
Error: Deindexer failed - Source %p (%@) has no original data at index %u
Assertion '%s' failed. Deindexer failed - Hash value inconsistency
value == sourceInfo.dataVectorCount
Assertion '%s' failed. Deindexing failed - Vertex count inconsistency
overallVertexIndex == (CFIndex)indexCount
Warning: Mesh %p has multiple channels but deindexing didn't have any effect
Warning: Deindexing - Vertex at index %u of %u is not used by any geometry element
Assertion '%s' failed. Deindexing failed - Count of deindexed mesh sources does not match count of indexed mesh sources
sourceCount == CFArrayGetCount(deindexedSources)
Assertion '%s' failed. Deindexing failed - Count of deindexed mesh elements does not match count of indexed mesh elements
elementCount == CFArrayGetCount(deindexedElements)
Unreachable code: Requested channel (%d) does not exist in element (%p)
Assertion '%s' failed. Two elements in the same mesh do not have the same number of index channels
channelCount == CFXMeshElementGetIndicesChannelCount(rhs.element)
Error: __writeIndexInBuffer - index (%u) out of bounds (%lu)
__writeIndexInBuffer
Assertion '%s' failed. %s - Cannot create a renderable topology from indexed vertices
channelCount == 1
__CFXMeshElementCreateRenderablePrimitiveTypeCopy
Error: %s - Invalid polygon edge count (%u)
Error: __CFXMeshElementCreateRenderablePrimitiveTypeCopy - polygon %u (%u vertices, indices [%u, %u]) does not fit in index buffer (%u elements)
Error: Inconsistent index count after triangulation.
radiance
irradiance
VFXWorldDecodingCurrentEnclosingFolder
directional
spot
omni
ambient
area
Error: unknown legacy light type: %@
path
flatness
entityID
animation-players
animation-keys
sourceObject
keyPathSrc
keyPathDst
/Contents/Resources/
imageNamed
imageNamed://
Error: VFXDecodemage: invalid archive
MDLSkyCubeTexture
imageNamed://%@
turbidity
sunElevation
upperAtmosphereScattering
groundAlbedo
horizonElevation
brightness
channelEncoding
dimensions.x
dimensions.y
highDynamicRangeCompression.x
highDynamicRangeCompression.y
groundColor
<%@: %p
    "%@" = "%@"
Warning: CGPath archiving: unknown path element type
VFXAnimationCommitOnCompletion
VFXKeyframeAnimation %p (duration=%f, keyPath:%@)
Warning: unable to infer the type of a basic animation: %@
Warning: unable to infer the type of a keyframed animation: %@
Error: animating between instances is not supported
Error: CAKeyframeAnimationToCFXAnimation :: too large value to animate : %d bytes
CAKeyframeAnimation based on CGPath are not supported
Error: CAKeyframeAnimation has no keyframe - skipping conversion
Error: can't add a NULL animation to %@
Assertion '%s' failed. VFXAddAnimationGroup target is not an entity
CFTypeIsCFXEntity(rootCF)
Assertion '%s' failed. VFXRemoveAnimation target is not an entity
Assertion '%s' failed. VFXFadeAndRemoveAnimation target is not an entity
Assertion '%s' failed. VFXRemoveAllAnimations target is not an entity
Assertion '%s' failed. VFXFadeAndRemoveAllAnimations target is not an entity
VFXAnimationFadeInDurationKey
VFXAnimationFadeOutDurationKey
VFXAnimationEventsKey
Assertion '%s' failed. _animationEvents should be nil
_animationEvents == NULL
timingFunction
commitsOnCompletion
removedOnCompletion
autoreverses
fadeInDuration
fadeOutDuration
timeOffset
repeatCount
keyPath
cumulative
additive
from
basic
keyTimes
timingFunctions
tensionValues
continuityValues
biasValues
calculationMode
rotationMode
keyframe
group
beginTime
applyOnCompletion
fillForward
fillBackward
failed to archive animation's userinfo. %@ %@
appliedOnCompletion
vfx-anim
Error: Loading animation %@ failed with %@
Error: failed to convert CAAnimation to VFXAnimation
Warning: default duration is zero - using default transaction duration
Unreachable code: VFXAnimation to CAAnimation: no animation data
Error: This animation can't be changed to additive. To make this animation additive first convert it to a CAAnimation, set it to additive and convert back to VFXAnimation
Error: This animation can't be changed to cumulative. To make this animation cumulative first convert it to a CAAnimation, set it to cumulative and convert back to VFXAnimation
<%@: %p, keyPath=%@ duration=%f repeatCount=%f>
Warning: failed to optimize keyframes
weight
usesAbsoluteTime
Error: can't decode old format animations
<VFXAnimationPlayer(%p) animation=%@>
Error: unknown fill mode
q24@?0@"VFXAnimationEvent"8@"VFXAnimationEvent"16
Error: Unsupported CAPropertyAnimation subclass (%@)
Error: Unsupported CAAnimation class (%@)
Error: sub-animation %@ of %@ has no keyPath - ignoring
Error: CFXAnimationToCAAnimation: unsupported animation
Warning: VFXAnimationGroupToCAAnimationGroup - no target path
Warning: VFXSimpleAnimationToCABasicAnimation - can't convert startValue
Warning: VFXSimpleAnimationToCABasicAnimation - can't convert endValue
Warning: VFXSimpleAnimationToCABasicAnimation - can't convert byValue
contributors
created
modified
authoring_tool
author
unitName
unitMeter
VFXWorldLoaderLoadForAuthoring
VFXWorldLoaderReplicationDelegate
VFXWorldLoaderUseModelIOToLoadDAEFiles
kSceneSourceCreateCameraIfAbsent
kSceneSourceAdjustInvalidClippingPlanes
kSceneSourceCreateLightIfAbsent
kSceneSourceForceMorphNormals
kSceneSourceVerboseMode
kSceneSourceFormatHint
kSceneSourceForceInProcess
VFXWorldLoaderLoadTexturesInCPUMemory
VFXWorldLoaderIgnoreVertexColorsKey
VFXWorldLoaderAssumeLinearDisplayP3SourceColorSpaceKey
kSceneSourceCreateNormalsIfAbsent
kSceneSourceCheckConsistency
kSceneSourceFlattenWorld
kSceneSourceAssetDirectoryURLs
kSceneSourceOverrideAssetURLs
kSceneSourceStrictConformanceKey
kSceneSourceConvertToYUpIfNeeded
kSceneSourceConvertToUnit
kSceneSourceAnimationLoadingMode
VFXWorldLoaderAssetPathResolver
kSceneSourcePreserveOriginalTopology
VFXWorldLoaderOptionMetalLibraryURL
kWorldInitOptionForAuthoring
keepSeparate
playRepeatedly
playOnce
VFXDetailedErrorsKey
VFXConsistencyElementIDErrorKey
VFXConsistencyElementTypeErrorKey
VFXConsistencyLineNumberErrorKey
kWorldSourceFormat
VFXWorldLoaderInputSource
VFXWorldExportDestinationURL
VFXWorldExportUTIKey
VFXWorldExportCompressGeometryElements
VFXWorldExportCompressMorphTargets
VFXWorldExportEmbedImages
VFXWorldExportEmbedReferences
VFXWorldExportPresentationTree
VFXWorldLoaderDisableVFXCoreSupport
vfxproj
world.plist
documentUUID
warnings
precompiled
Error: error loading core entity manager: %@
Error: error importing VFX world: %@
Error: failed to unarchive data - %@
VFX Studio
Error: failed to unarchive world at %@ (%@)
textureCoordinate is deprecated - use textureCoordinateWithMappingChannel instead
<%@: %p <%f,%f,%f> | geometryIndex=%d node=%@ bone=%@>
Error: custom color grading not implemented
Error: failed to decode CALayer
invalid wrapS value: %d
invalid wrapT value: %d
Assertion '%s' failed. the cfxImage should have been cleared when setting a layer
_contentType != VFXContentTypeLayer
AVPlayer
AVCaptureDevice
Error: materialPropertyName %d not found
<%@: %p | %@ contents=%@>
<data %p>
Error: array for material property contents must have 6 elements
Warning: copyCFXImageFromImage: invalid sub-image
Assertion '%s' failed. inconsistency in VFXMaterialProperty::parentWillDie
parent == _parent
linearExtendedSRGBColor
imageArray
layer
textureComponents
isCommonProfileProperty
propertyType
customMaterialPropertyName
isColorManaged
sRGB
colorManaged
Error: unknown material property type for archiving
Error: unknown archived material property type
Error: Could not create texture with descriptor : %@
transformTree
Assertion '%s' failed. invalid handle (%d) given
hnd != kCFXTransformHandleInvalid
handle.level < transformTree->_levelCount
CFXTransformTree
<CFXTransformTree %p>
Assertion '%s' failed. no more handle available
handle.index != kCFXTransformIndexInvalid
Assertion '%s' failed. can't move negative number of data
countToMove >= 0
Assertion '%s' failed. overflow !
(handle + offset + countToMove) <= _capacity
startParentHandle < _count
Assertion '%s' failed. child must be one level under parent
newHandle.level == (parentHandle.level + 1)
firstChild.index != kCFXTransformIndexInvalid
lastChild.index != kCFXTransformIndexInvalid
lastChild.level == firstChild.level
lastChild.index >= firstChild.index
firstChildToRemainAfterDeletion != INT32_MAX
_handles[ node->_transformHandle ].level == l
_handles[ node->_transformHandle ].index >= minIndexToDestroyPerLevel[ l ]
firstHandle.level == lastHandle.level
firstHandle.index <= lastHandle.index
handle.level < _levelCount
vfxRenderContext
Warning: CFXVFXSimulateAndPrepareDrawCalls -> no world yet
CFXVFXUpdateRendererElement
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/CFXVFX/CFXVFXRenderContext.m
coreEM
CFXVFXRenderContext
<CFXVFXRenderContext>
CFXCoreEntityManager
<CFXCoreEntityManager>
_updateVFXCoreFromNodes
CFXSortSystem
<CFXSortSystem %p>
!line.empty()
TILT=NONE
TILT= NONE
TILT =NONE
TILT = NONE
TILT=
TILT =
anglesCount > 0
start != index
end != index - 1
x < anglesNumH
y < anglesNumV
width > 0 && height > 0
channelCount == 1 || channelCount == 4
channelSize == 1 || channelSize == 2 || channelSize == 4
pass
Error: CFXFXRenderGraphAppendPass out of capacity
Assertion '%s' failed. CFXFXRenderGraphGetPassAtIndex index %ld is out of bounds (%ld)
index < renderGraph->_count
symbolName
Assertion '%s' failed. Must declare upfront
renderGraph->_parameterStorage == NULL || renderGraph->_parameterStorage->storage == NULL
Assertion '%s' failed. Cannot declare twice the same symbol (%@)
CFDictionaryGetValue(renderGraph->_parameterStorage->parameters, symbolName) == 0
paramName
Assertion '%s' failed. Assumed count is 1
count == 1
Error: CFXFXRenderGraphSetValueForSymbol - expect an image for paramName %@
Error: CFXFXRenderGraphSetValueForSymbol - unknown param named %@
Error: CFXFXRenderGraphGetValueForSymbol - unknown param named %@
Assertion '%s' failed. compiling a renderGraph twice
renderGraph->_isCompiled==false
bundle
metalLibraryName
sequence
passes
symbols
Error: invalue description for input named %@ - expect a dictionary
Error: CFXFXRenderGraphCompile - invalid description (sequence missing or empty) %@
metalLibraryFile
metalVertexShader
metalFragmentShader
clientProgram
owners
outputs
Info: pass named %@ appears to be useless - skipping
CFXFXRenderGraph
<CFXFXRenderGraph>
pass %d
targets
self
Error: Unsupported pixel format %@ (%u) in KTX encoder
Error: Unsupported texture type %@ (%u) in KTX encoder
Warning: KTX file seems too small or is not a KTX
Error: Only big endian ktx are supported
Error: Unsupported format in KTX file
Warning: Compression type %d not supported
Error: overflow reading mip[%d] (%zu > %zu)
Error: overflow reading slice[%d] / mip[%d] (%zu > %zu)
kPrimitiveGenerateMappingCoordinates
kPrimitiveVertexTransformation
kPrimitiveWidthSegments
kPrimitiveHeightSegments
kPrimitiveLengthSegments
kPrimitiveChamferSegments
kPrimitiveRotationSegments
kPrimitiveCapSegments
kPrimitiveRingSegments
kPrimitivePipeSegments
kPrimitiveSphereType
kPrimitiveSphereSegments
kPrimitiveTypeSphere
kPrimitiveTypeGeosphere
widthSegmentCount
heightSegmentCount
lengthSegmentCount
chamferSegmentCount
segmentCount
radialSegmentCount
pipeSegmentCount
reflectionFalloffEnd
reflectionFalloffStart
reflectivity
reflectionCategoryBitMask
reflectionResolutionScaleFactor
floor
CFXFloor
<CFXFloor>
resolutionScaleFactor
reflectionBitMask
%@: %p '%@' - mesh: %@
%@: %p - mesh: %@
<%@>
Error: leaking materials array
Assertion '%s' failed. removeObjectFromMaterialsAtIndex: index out of bounds
index < [_materials count]
Error: Cannot set edge creases element because its primitive type is not VFXMeshPrimitiveTypeLine
Error: Cannot set edge creases source because its semantic is not VFXMeshSourceSemanticEdgeCrease
materials[
Error: Failed to archive geometry's custom attributes. %@ %@
kGeometrySourceSemanticVertex
subdivisionLevel
wantsAdaptiveSubdivision
edgeCreasesSource
edgeCreasesElement
subdivisionSettings
tessellator
VFXErrorDomain
--GBufferMaterial--
Assertion '%s' failed. Mesh type has to define a topology
CFXMeshElementTypeDefinesTopology(meshType)
Warning: CFXSkinnerTransposeSkeleton - unable to transpose every joints
Warning: Cannot update the joints using node names: unammed joint found
Warning: Cannot update the joints using node names: can't find node named %@
Warning: _CFXSkinnerUpdateBoundingBox - skinned node has no geometry
Error: We did not succeed in locating all the joints, so do not update the geometry as it might be worse if we use the wrong bones.
Error: _CFXSkinnerUpdateBoundingBox invalid mesh source
joint
CFXSkinner
<CFXSkinner %p skeleton:%p jointCount:%d cpuReady:%d
  skin:%p
  JointBbox[%d] {%f,%f,%f} {%f,%f,%f}
bboxDirty
verticesJointsMatrices[%d]
Perform culling
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/CullingPass.mm
Warning: Failed to transpose skeleton
old skeleton: %@
new skeleton: %@
Error: VFXSkinner: there must be the same number of bone weights and bone indices
Error: VFXSkinner: bone weights must be of type `float`
Error: VFXSkinner: bone indices must be uint8 or uint16 (maximum of 2 bytes)
Error: VFXSkinner: bone indices stride must be equal to componentsPerVector * bytesPerComponent
Error: VFXSkinner: bone weights stride must be equal to componentsPerVector * bytesPerComponent
Error: skinner: invalid index (%d)
Error: mismatch between the vertex count and the number of bones per vertex
Assertion '%s' failed. skinner: invalid compressed data
skinCompressedData.count == 1
Unreachable code: Unsupported bytes per weight
Error: can't create a skinner with no bones
Error: can't create a skinner with no base mesh
Error: bones count and bind transform count don't match
Assertion '%s' failed. boneIndices - failed to deindex
r <= CFXSkinGetWeightsCount(skin)
Assertion '%s' failed. boneIndices - failed to deindex (2)
w == numberOfInfluence * vertexCount
Error: number of transforms (%d) doesn't match the number of joints (%d)
baseMesh
baseMeshBindTransform
bones
Error: Bones index too large for compressed representation : %d
compressedSkinData
boneWeights
boneIndices
baseMeshBindTransform-%d
baseModel
baseModelBindTransform-%d
baseModelBindTransform
sourceState
targetState
transitions
CFXCameraEffectDepthOfField
<CFXCameraEffect depthOfField:%p
CFXCameraEffectMotionBlur
<CFXCameraEffect MotionBlur:%p
CFXCameraEffectGrain
<CFXCameraEffect Grain:%p
CFXCameraEffectExposure
<CFXCameraEffect Exposure:%p
CFXCameraEffectToneMapping
<CFXCameraEffect ToneMapping:%p
CFXCameraEffectBloom
<CFXCameraEffect Bloom:%p
CFXCameraEffectColorGrading
<CFXCameraEffect ColorGrading:%p
CFXCameraEffectVignetting
<CFXCameraEffect Vignetting:%p
CFXCameraEffectColorFringe
<CFXCameraEffect ColorFringe:%p
CFXCameraEffectLensBlur
<CFXCameraEffect LensBlur:%p
CFXCameraEffectChromaticTransform
<CFXCameraEffect ChromaticTransform:%p
CFXCameraEffectDoughnutBokeh
<CFXCameraEffect DoughnutBokeh:%p
CFXCameraEffectSSAO
<CFXCameraEffect SSAO:%p
normals
Assertion '%s' failed. bad redirection index after sort
indexRedirection[index] <= index
Assertion '%s' failed. weld - bad index
index>0
Assertion '%s' failed. weld - bad redirection
Assertion '%s' failed. weld - redirection out of bounds
indexes[index] < count - weldCount
Assertion '%s' failed. weld - bad duplicated vertex count
offset == weldCount
Assertion '%s' failed. weld: bad index
elementDataWrt[index] < count - weldCount
((uint16_t*)elementDataWrt)[index] < count - weldCount
((uint32_t*)elementDataWrt)[index] < count - weldCount
vfx_rt_clearcoat_trace
RTClearCoatTracePass
RTClearCoatSpatialReSTIRPass
vfx_rt_clearcoat_spatial_restir
RTClearCoatUpscalePass
vfx_rt_clearcoat_upscale
ClearCoatUpscale
ClearCoatUpscaleDistance
RTClearCoatTemporalDenoisePass
vfx_rt_clearcoat_temporal_denoise
RT_CLEARCOAT_TRACE
RT_CLEARCOAT_SPATIAL_RESTIR
RT_CLEARCOAT_UPSCALE
RT_CLEARCOAT_TEMPORAL_DENOISE
 %f %f %f %f
Error: Unsupported skin weight format
skin->_inverseBindMatrices
Assertion '%s' failed. inconsistency in %s
count == dstJoints.count && (!dstWeights.ptr || (count == dstWeights.count))
CFXSkinFillJointWeightsBuffers
Error: invalid skin indices
Info: Too many influencing joints (%ld > %d) on the vertex #%u, will cap to %d and renormalize
CFXSkin
<CFXSkin %p name:%@ joint:%d weight:%d vertexCount:%d
  maxInf:%d morpher:%p
defaultShapeMatrix
inverseBindMatrix
jointsCount
weightsCount
inverseBindMatrices
defaultShapeMatrix
maxInfluencesPerVertex
influencingMorpher
vertexWeightIndices[%d]
vertexWeights[%d]
jointsForVertexWeights[%d]
CFXIONSZipFileArchiveHeaderOffset
CFXIONSZipFileArchiveCompressionType
CFXIONSZipFileArchiveCRC
CFXIONSZipFileArchiveCompressedLength
CFXIONSZipFileArchiveUncompressedLength
1.2.12
CFXFXFloorPass.plist
VFX_renderMirroredScene
VFX_renderFloor
u_floorReflectionColor
VFX-floor-color-%p
u_floorReflectionDepth
VFX-floor-depth-%p
u_floorNormal
u_floorTangent
u_floorCenter
u_floorExtent
u_floor_viewport
u_floorReflectivity
u_floorFalloffStart
u_floorFalloff
u_floorPlane
u_floorMVP_i
Assertion '%s' failed. Fov is larger that 180 degrees. this can't be
d > 0
FloorGeomImpl-metal.h
USE_FALLOFF
USE_FALLOFF_START
USE_TRANSPARENCY
FloorImpl-metal.h
Error: CFXSourceAccessorGetValuePtrAtIndex - index out of bounds : %d > %d
Error: CFXSourceAccessorGetValuePtrAtIndex - no data
Error: CFXSourceAccessorGetMutableValuePtrAtIndex - index out of bounds : %d > %d
Error: CFXSourceAccessorGetVolatileValuePtrAtIndex - index out of bounds : %d > %d
Assertion '%s' failed. cannot access volatile data on non volatile source
accessor->_source->_dataIsVolatile
Error: The destination does not have enough room to copy this data
Error: error in CFXSourceAccessorCopyDataToAccessor
CFXSourceAccessor
<CFXSourceAccessor %lx>
componentsCountPerValue
Warning: binding type %d can't not be exposed
CFXCoreEntityHandle
<CFXCoreEntityHandle>
Error: binding access(write) out of bounds (2)
Error: binding access(write) out of bounds
Error: _CFXCoreEntityHandleGetValue - reading memory out of bounds
Error: binding access(read) out of bounds
<CFXGenericSource %lx>
Warning: Cannot duplicate a Metal Buffer source. Create an empty data instead.
Assertion '%s' failed. cannot set data to volatile source
!genericSource->_dataIsVolatile
Assertion '%s' failed. cannot set data to MTL buffer
genericSource->_mtlVertexFormat == 0
Assertion '%s' failed. cannot set volatile data to non volatile source
genericSource->_dataIsVolatile
Assertion '%s' failed. cannot set volatile data to MTL buffer
listener
CFXGenericSource
Error: FATAL ERROR : failed to load Metal shaders library %@, %@
metallib
com.apple.vfx.device
Error: Failed to load common profile chache library : %@
newLibraryWithSource
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/NewRenderer/VFXMTLLibraryManager.mm
Error: Compilation failed %@
Error: Failed to find pre-compiled combination %@ + %@
com.apple.vfx.shader-collection-queue
commonProfile_%@.metal
Error: Failed to collect shader: %@
v16@?0@"NSString"8
Error: Failed to collect shader: additional file "%@" is not always the same
v24@?0@"NSString"8@"NSString"16
 -w 
Error: failed compiling shader:
v24@?0@"<MTLLibrary>"8@"NSError"16
Unreachable code: Unknown compilation mode %d
^(.*)[
program_source:([0-9]+):[0-9]+:\s(.+):\s(.+)$
^<program source>:([0-9]+):[0-9]+:\s(.+):\s(.+)$
\[VFX_(\w+)\((\d+)\)\]
has_background
has_DOF
vfx_path_tracer
PathTracerPass
Error: VFXMTLResourceManager initWithDevice : cannot create a command queue. Bailing out.
VFXMaterialData
vfx_debug_frag
vfx_debug_vert
debug_post_tessellation_vert
debug_isolate_frag
v32@?0@8@"NSMapTable"16*24
Assertion '%s' failed. cannot use volatile meshSource
CFXMeshSourceIsVolatile(meshSource) != true
Assertion '%s' failed. Semantic %d is not meant to be passed to shaders
attribute != kCFXVertexAttrib_None
Assertion '%s' failed. source should be present
[metalMesh.buffers indexOfObject:buf] != NSNotFound
Assertion '%s' failed. size mismatch in mutable buffers %u!=%u
dataSize == buf.length
dataKind == kCFXMeshDataKindOriginal
v24@?0^{__CFString=}8^v16
textureMatrix
Error: missing value for attachment "%@" [vertex: %d fragment: %d]
Error: incorrect buffer size  for attachments vertex [%d] fragments [%d]. Expected:%d Provided:%d
Warning: Missing texture value for %@
Unable to find texture for binding %@ ("%@") and effect materialProperty %@ derived from value %@ (geometry=%@, material=%@)
Unreachable code: Sampler are not yet implemented as separate bindings
Unreachable code: binding type not supported
v32@?0@8@"VFXMTLDeformerStack"16*24
Error: format %@ not convertible to MTLVertexFormat
Error: Argument '%@' : failed to write value to Metal buffer (%@)
Error: Argument '%@' : mismatch between the NSData and the buffer size %ld != %ld
Error: Argument '%@' : only NSData and NSValue are supported for shadable value storage (found '%@'). Please make sure that your custom shader modifier uniform types match the custom properties of the shadable object
Assertion '%s' failed. only CFXValue are supported for partial struct storage
caff
aiff
Error: failed to load audio source at %@
Error: Error reading file into buffer: %@
Error: can't archive audio data directly
volume
rate
reverbBlend
positional
shouldStream
resourceCache
cache
resource
CFXResourceCache
<CFXResourceCache 0x%lx>
AnimationGroup
CFXAnimationGroup
<CFXAnimationGroup %p animations:%@>
 point(%f %f %f)
 normal(%f %f %f)
 impulse(%f)
 distance:%f
v16@?0Q8
authoringGraph
Error: unable to update the physics shape of %@
Warning: cannot change collision bit masks without physics world
Error: cannot apply force on a body that is not attached to a VFXNode
Error: cannot clear forces on a body that is not attached to a VFXNode
Assertion '%s' failed. VFXPhysicsBody is already attached to a VFXNode
!_node || _body == 0
Error: cannot attach a body to a null node %p
shape
Assertion '%s' failed. setting the same shape
shape != _physicsShape
momentOfInertia
angularVelocity
velocityFactor
centerOfMassOffset
mass
charge
restitution
rollingFriction
ccdThreshold
physicsShape
damping
angularDamping
linearRestingThreshold
angularRestingThreshold
ignoreGravity
explicitMomentOfInertia
contactTestBitMask
allowsResting
defaultShape
linearSleepingThreshold
angularSleepingThreshold
v40@?0q8q16q24q32
v24@?0d8f16f20
v28@?0f8f12f16f20f24
<Cube [w=%f h=%f l=%f] %@>
<Sphere [r=%f]> %@
<Plane [w=%f h=%f]> %@
<pyramid [w=%f h=%f l=%f] %@>
<Cylinder [h=%f]> %@
<Cone [h=%f]> %@
<Tube [h=%f]> %@
<Capsule [h=%f]> %@
<Torus [r=%f]> %@
unknown parametric type
chamferRadius
innerRadius
pipeRadius
cornerSegmentCount
capSegmentCount
radialSpan
geodesic
parametricType
Assertion '%s' failed. bad time
!isnan(t)
Assertion '%s' failed. bad count
keyIndex == (int)keyCount
Assertion '%s' failed. CFXAnimationClusterCreateWithAnimationGroup out of bounds
valueWrt == kf->_values + (totalValueSize * keyCount)
CFXAnimationClusterKeyframes
<CFXAnimationClusterKeyframes %p>
CFXAnimationCluster
<CFXAnimationCluster %p>
Assertion '%s' failed. unexpected animation class
CFGetTypeID(animation) == CFXKeyframedAnimationGetTypeID()
Unreachable code: -[VFXDisplayLink invalidate] must be called before -[VFXDisplayLink dealloc]
Error: Failed to create display link with error %d
SHADOW_MAP_ATLAS
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/ShadowMapAtlasPass.mm
Shadow map atlas
DOF_DOWNSAMPLE_COLOR_COC
dof_downsample_rate
dof_downsample_color_coc
DOF_COC_DOWNSAMPLE
dof_coc_downsample_sort
DOF_COC_BLUR_OUTPUT_
dof_blur_vertical
dof_coc_blur
DOF_FINAL
dof_compute_kernel_parallel
dof_blur2
scopeParameters.dofEffect
DOF downsample color CoC
DOF downsample CoC
DOF blur CoC X
DOF blur CoC Y
DOF final
DOF_DOWNSAMPLE_COLOR_COC_PASS
DOF_DOWNSAMPLE_SORT_COC_PASS
DOF_FINAL_PASS
Error: didRemoveFromPhysicsBody - body not found
Error: unable to create a collision shape
Assertion '%s' failed. Unsupported indices stride
Info: Non triangle list element type not yet supported in physics shape generation
Error: vertex format not supported for physics shape creation (%d)
Warning: Cannot create convex hull for entity %@
v32@?0@"VFXPhysicsShape"8Q16*24
Error: Compound shapes cannot be created without shapes
Warning: VFXPhysicsShape does not support a VFXCone with TopRadius != 0.0
transformsCount
transform%d
referenceObject
margin
flattened
Warning: Physics shape construction does not support meshes with positions value type different from double or float. (%d)
Unreachable code: This is not yet implemented
VFXDefaultPhysicsShape
btTriangleInfoData
btTriangleInfoMapData
COLOR_MIRROR_MAP
DEPTH_MIRROR_MAP
MIRROR_PASS
Mirror map
Assertion '%s' failed. Default irradiance texture is not valid
_defaultLightingEnvironmentIrradianceTexture.textureType == MTLTextureTypeCube
_defaultLightingEnvironmentIrradianceTexture.pixelFormat == MTLPixelFormatRGBA16Float
Assertion '%s' failed. Default radiance texture is not valid
_defaultLightingEnvironmentRadianceTexture.textureType == MTLTextureTypeCube
_defaultLightingEnvironmentRadianceTexture.pixelFormat == MTLPixelFormatRGBA16Float
Assertion '%s' failed. Pre-computed irradiance texture is not valid
irradianceTexture.textureType == MTLTextureTypeCube
irradianceTexture.pixelFormat == MTLPixelFormatRGBA16Float
Assertion '%s' failed. Pre-computed radiance texture is not valid
radianceTexture.textureType == MTLTextureTypeCube
radianceTexture.pixelFormat == MTLPixelFormatRGBA16Float
compute_diffusePreIntegrated_texture2d
cubemap_from_sh
compute_specularPreIntegratedLD_texture2d
compute_specularPreIntegratedLD_texturecube
compute_specularPreIntegratedDFG_diffuseHammon
Assertion '%s' failed. non managed storage mode cannot be synchronized
resource.storageMode == MTLStorageModeManaged
pointOfCulling.world
<%@: %p | world=%@ pointOfView=%@>
Jittering is not supported on VFXMetalLayer
Unreachable code: NOT IMPLEMENTED YET
Assertion '%s' failed. A parametric geometry with a mesh must also have a hash
hasMesh == (hash != NULL)
parametricgeometry
parametricGeometry
Assertion '%s' failed. inconsistency in _CFXParametricGeometryReleaseCachedMesh
retainCount>0
CFXParametricGeometry
Pyramid
Cylinder
Cone
Tube
Capsule
Torus
Sphere
Plane
<%@<%@>:%p "%@"
Assertion '%s' failed. inconsistency in _CFXParametricGeometryCacheIncrRetainCount
retainCount != 0
State %@: {
baseState
stateItems
Error: exception setting state %@: %@
set: %@ to %@ of %@
remove: %@
insert: %@ at %d
addAnim: %@ at %@ to %@
removeAnim: at %@ from:%@
action
failed to decode stateItem target %@ %@
failed to decode stateItem value %@ %@
failed to archive stateItem target %@ %@
failed to archive stateItem value %@ %@
failed to archive stateItem value %@ (doesn't conform to secure coding)
Assertion '%s' failed. Morph target has a vertex count different from the base geometry
vertexCount == CFIndex(baseMesh.pointCount())
Error: Internal consistency error, %@'s (%p) morph %p is not sparse
Error: AnimCodec - Failed to compress mesh
morpherCompressedData
morpherMetaData
Error: AnimCodec - Failed to parse header
Error: AnimCodec - Failed to decompress animation
Error: AnimCodec - Can't decode metadata
HybridCompositePass
has_directLightings
has_indirectDiffuse
has_specular
has_clearcoat
has_subsurface
vfx_hybrid_composite
vfx_hybrid_opacity_filter
HybridCompositeTmp
HybridCompositePassOutput
Assertion '%s' failed. Can't change max batch size while in batch
dynamicBatchingSystem->_currentBatchInstancesCount == 0
Warning: overflow the max batch size boundary
CFXDynamicBatchingSystem
<CFXDynamicBatchingSystem %p>
Custom subgraph published texture
Copy to final
Copy to External
Copy
Get drawable
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/RenderGraphLibrary.mm
DRAWABLE
vec2(
vec3(
vec4(
Assertion '%s' failed. string to type conversion not supported
Assertion '%s' failed. CFXValueAdd - invalid arguments
type == CFXValueGetType(b)
type == CFXValueGetType(output)
CFXValue
<CFXValue %p - %@ ptr:%p >
baseType
Assertion '%s' failed. assertion in DDS loading
!(xSize & (xSize-1))
!(ySize & (ySize-1))
hdr.dwFlags & DDSD_PITCH
hdr.sPixelFormat.dwRGBBitCount == 8
size == xSize * ySize * ddsInfo->_blockBytes
backtrace
CFXFXSampler
<CFXFXSampler>
bindingMode
bindingPointIndicesStride
bindingBarycentricCoordsStride
bindingPointIndicesFormat
bindingBarycentricCoordsFormat
bindingPointIndices
bindingBarycentricCoords
isLegacySingleLayerDeformer
bindingOffsetsOrTransforms
bindingOffsetsOrTransformsLength
bindingInnerLayerInfluences
bindingInnerLayerInfluencesLength
bindingInnerTNBs
bindingOuterTNBs
bindingSpaceVectorsLength
bindingInnerOffsets
bindingOuterOffsets
bindingOffsetsLength
driverTexcoordSource
deformedTexcoordSource
v24@?0@"<MTLFunction>"8@"MTLStageInputOutputDescriptor"16
deformer_wrap_legacy_absolute
deformer_wrap_legacy_relative
deformer_wrap_absolute
deformer_wrap_relative
Info: VFXWorldLoaderConvertUnitsToMetersKey and VFXWorldLoaderConvertToYUpKey have no effect on compressed assets. Use Xcode's compression options instead
file
/System
uv_set
Warning: light_map uv_set:%d is pointing to an invalid uv_set(no corresponding source) and was reset to 1
Unreachable code: __OptimizeMesh:bytesPerIndex != 1, 2, or 4 during conversion, this should not happen !!
Warning: invalid zRange detected (whole world clipped)
B24@?0^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}8^B16
nodeFromflattenedMesh
Unreachable code: Could not find mesh source indexing info for source %p
I16@?0^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}8
Unreachable code: Unssuported texture coordinates channel (%d)
Unreachable code: Does not make sense
Unreachable code: Trying to subdivide a mesh that does not have exactly 1 position source.
Warning: Subdivision process might lead to gaps in surface because vertex welding is disabled when subdividing on the GPU
v12@?0I8
topologyInfo
CFXMeshElementGetIndicesChannelCount(creasesElement) == 1
Assertion '%s' failed. Error while building face-varying channel.
currentIndex == topologyInfo->totalIndexCount
Unreachable code: Internal consistency error
overallVertexIndex == topologyInfo->totalIndexCount
Assertion '%s' failed. Internal consistency error
subdividedElementIndexForFace < subdividedElementCount
Unreachable code: Internal consistency error - Unexpected element type
indexBufferIndex == indexBufferIndexCount
Error (OpenSubdiv): %s
Warning (OpenSubdiv ): %s
Assertion '%s' failed. Semantic %d can not be a primvar
CFXSubdivSourceSemanticCanBePrimvar(semantic, inputSet, isCPUSubdiv)
Unreachable code: Can not subdivide primvar data with %d values per component
Assertion '%s' failed. Can't subdivide further
level <= _finalLevel
Unreachable code: Invalid GPU primvar semantic '%@'
Assertion '%s' failed. Primvar data size is too big (cannot fit %d floats in a float4)
srcContent.componentCount <= 4
Assertion '%s' failed. Position sources must use the 'vertex' interpolation mode
_interpolationMode == kCFXSubdivPrimvarDataInterpolationModeInterpolateVertex
Assertion '%s' failed. Number of normals at limit surface is not equal to number of vertex positions
subdividedDataCount == refiner.GetLevel(refiner.GetMaxLevel()).GetNumVertices()
Error: Position must be float3 to be subdivided. Actual type is %d
Failure in PrimvarRefiner::Limit() -- last level of refinement does not include full topology.
kWorldSourceCreateCameraIfAbsent
kWorldSourceCreateLightIfAbsent
kWorldSourceCreateNormalsIfAbsent
kWorldSourceAdjustInvalidClippingPlanes
kWorldSourceFlattenWorld
kWorldSourceSplitMeshesForGLES
kWorldSourceConvertToYUpIfNeeded
kWorldSourceConvertToUnit
kWorldSourceCleanupMeshes
kWorldSourceRemoveAllLights
kWorldSourceRemoveColorArrays
kWorldSourceInterleaveSources
kWorldSourceMakeSourcesCheaper
kWorldSourceCheckConsistency
kWorldSourceAssetDirectoryURLs
kEnclosingDirectoryURL
VFXCompositorRendererLayoutKey
_mtkView
Assertion '%s' failed. Variable rasterization rate is not supported on this device
[device supportsRasterizationRateMapWithLayerCount:layerCount]
vrr_blit_physical_to_screen_layered
vrr_blit_physical_to_screen
Assertion '%s' failed. Layered rendering is not supported
VFXMTLDeviceSupportsLayeredRendering(device)
VFX - Blit for VFXCompositorRendererLayoutLayered
VFX - Blit for VFXCompositorRendererLayoutDedicated
Unreachable code: _CFXEntityCFInit
Unreachable code: _CFXEntityCFFinalize
_kvc
Assertion '%s' failed. CFTypeIsCFXEntity - dispatched twice
_cfTypeRegistry == NULL
CFXEntity
<CFXEntity:%p>
Assertion '%s' failed. CFXEntitySetAttribute failed to cache attribute
CFGetRetainCount(dict) >= 2
notificationQueue
CFXEngineNotificationQueue
<CFXEngineNotificationQueue %p>
Assertion '%s' failed. missing attribute
Warning: adding a node that was just removed %p
Error: unknown notification name
Assertion '%s' failed. It doesn't make sense to call CFXMeshElementCreateIntervalList for sources with different channels
channels[i] == channels[0]
Error: Could not create intervals for sparse morph target %d (this morph target is useless)
Error: Failed to create packed source %d for sparse morph target %d
Assertion '%s' failed. sparse target should only contain 1 mesh element
CFXMeshGetElementsCount(targetMesh) == 1
Assertion '%s' failed. sparse targets should be in additive mode
morph->_calculationMode == kCFXMorpherCalculationModeAdditive
Error: CFXMorphConvertToCalculationMode: no base source
CFXMorph
<CFXMorph %p "%@"
  calc:%d morphNrm:%d targets:%ld
[%ld] weight:%f %@
<unnamed %d>
Error: Morpher has %d targets weights, but has %d main targets (note: there are %d in-betweens and %d correctives)
Assertion '%s' failed. Morpher failed to update all its runtime weights
overallRuntimeTargetIndex == totalMorphTargetCount
Error: Internal consistency error. There should be %d runtime morph target weights, but we the current morph weight index is %d.
CFXMorpher
<CFXMorpher %p baseGeom:%p state:%d
  morph:%@
VFXRendererOptions
VFXKitError : can't load nib named : VFXRendererOptions
~/%@-snapshot-%d.vfx
archiving to %@
index < (NSInteger)[cameras count]
untitled
%.1f fps
tiff
World
[Root node]
<No name>
selection
not supported anymore
localHash.vertexDescriptorHash
Error: Metal renderer does not support nil vertex function name
renderPipeline
Error: Missing function `%@`, error: %@
Info: Shaders without a vertex function are not allowed
Error: Compiler error while building render pipeline state for node %@:
v24@?0@"<MTLRenderPipelineState>"8@"NSError"16
configure compute pipeline
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/NewRenderer/VFXMTLResourceManager+Compilation.m
Error: Failed creating ComputePipelineState, error: %@
Assertion '%s' failed. Caching requires a constant hash to be provided when using constants
constants == nil || constantsHash != nil
stageDescriptor
Error: Failed to create compute function '%@', error: %@
Unreachable code: Unsupported pixel buffer format %s
Unreachable code: Unsupported pixel buffer YCbCr matrix %@
Error: Could not create color space from %@ and %@
needsInputTRC
needsColorMatrix
needsOutputTRC
inputTRC_type
inputTRC_gamma
inputTRC_a
inputTRC_b
inputTRC_c
inputTRC_d
inputTRC_e
inputTRC_f
colorMatrixColumn0
colorMatrixColumn1
colorMatrixColumn2
outputTRC_type
outputTRC_gamma
outputTRC_a
outputTRC_b
outputTRC_c
outputTRC_d
outputTRC_e
outputTRC_f
biPlanarTextureChromaSubsampling
biPlanarTextureYCbCrMatrix
color_matching_kernel_biplanar
color_matching_kernel
fieldType
halfExtent
smoothness
categoryMask
VFX: CFXProgressDebugger fractionCompleted > 1.0
mainMixerNode
Error: Error starting the audio engine: %@
isGroup
isPrefab
entityTag
isTextureSource
filename
activeStateName
maxMorphTargetCount > 0
basePositionSource
originalNormalSource
Assertion '%s' failed. Internal consistency error - unexpected sparse moprh target
vertexCount == _vertexCountForComputeKernel
Assertion '%s' failed. Vertex buffer has not been completely written to
vertexBufferOffset == vertexBufferLength
Assertion '%s' failed. Sparse indices buffer has not been completely written to
sparseIndicesBufferOffset == sparseIndicesBufferLength
morphNormal
copy_generic
copy_indexed_u8_generic
blend_indexed_u8_generic
copy_indexed_u16_generic
blend_indexed_u16_generic
copy_indexed_u32_generic
blend_indexed_u32_generic
Unreachable code: Unsupported index size for compute kernel
blend_generic
splat_indexed_s8_vertices
splat_indexed_s16_vertices
splat_indexed_s32_vertices
blend_inc_init_8x_pn_kernel
blend_inc_add_8x_pn_kernel
blend_inc_init_8x_p_kernel
blend_inc_add_8x_p_kernel
Unreachable code: Unsupported morph kind
Assertion '%s' failed. Buffer has not been completely written to
dstForWriting == dst + length
writtenIndexCount == runtimeTarget->vertexCount
weightCount == _morphTargetCount
Error: Could not get pixel buffer (CVPixelBufferRef)
Error: CVMetalTextureCacheCreateTextureFromImage failed with status %d
Error: Could not create AVCaptureInput with error: %@
Error: Invalid pixel buffer pixel format: %s
VFXCaptureDeviceOutputConsumerOptionContainsAlpha
Error: Pixel buffer (CVPixelBufferRef) must be IOSurface-backed
CustomAuthoring
<VFXMorpher %p>
weights[%d]
Error: %@ setWeight:forTargetAtIndex:%d - index out of bounds (%d)
Assertion '%s' failed. Update can't be done in place
oldTargetsAndInBetweens.count == targetsAndInBetweens.count
_correctivesAndInBetweens.count == correctivesAndInBetweens.count
Error: invalid in-between buffer, ignoring in-betweens
Assertion '%s' failed. Invalid in-between count (out of bounds) passed to morpher initialization
inBetweenIndex < targetsAndInBetweens.count
Assertion '%s' failed. Expected %u in-betweens but found %u
inBetweenWeights.count == inBetweenCountValidation
q24@?0@"NSNumber"8@"NSNumber"16
v32@?0^{__CFXMesh=}8^{__CFXMeshSource=}16^{__CFXMeshSource=}24
weights[
weightID
useSparseTargets
targetMeshes
inBetweenCounts
inBetweenInfluenceWeights
correctiveMeshes
correctiveDriverCounts
correctiveDriverIndices
correctiveInBetweenCounts
correctiveInBetweenInfluenceWeights
shouldMorphNormals
channelTargetCounts
channelTargetWeights
@24@?0@8Q16
correctives
Assertion '%s' failed. Invalid range
range.location + range.length <= targets.count
Assertion '%s' failed. Presentation instance query targets the wrong world
token->worldRef == world
_buffer
<%@: %p> "%@"
Unreachable code: Invalid resource type
Unreachable code: Not indices are bound!?!
<state: %@>
FrameBuffer bindings:
Node bindings:
Pass bindings:
Shadable bindings:
Light bindings:
Assertion '%s' failed. Bad stage
stage < kCFXFXProgramStageCount
Error: arg type not supported
_vertexDescriptor
<VFXMTLMesh: %p
buffer[%d] : %@
element[%d] : %@
<VFXMTLMeshElement: %p | type: %d, index buffer: %@ (%d indices), indirect buffer: %@, effective count: %d, offset: %d>
<VFXMTLMeshElement: %p | type: %d, index buffer: %@ (%d indices), effective count: %d, offset: %d>
Error: Invalid index size (%d bytes per index)
Unreachable code: Invalid index size (%d bytes per index)
_freeIndices.count > 0
firstFreeIndex != NSNotFound
Assertion '%s' failed. offset should be exactly equal to size
(offset % _elementSize) == 0
Assertion '%s' failed. should have some index free
mtlBuffer.offset != NSNotFound
Assertion '%s' failed. subBuffer size overflow %d > %d
length <= _elementSize
(start & kSOALaneMask) == 0
Assertion '%s' failed. __UpdateHashCodeWithTextureType:inconsistent textureType
textureType < 7
Error: Too many uniform custom samplers given (Max is %d)
index < CFX_MAX_TEXCOORD
Error: invalid custom texture materialProperty.
Assertion '%s' failed. effect materialProperty hash out of bounds
programHashCode->_desc.materialPropertysHash[i] <= ((1 << (kCFXMaterialPropertyHashIndexMax + 1)) - 1)
com.apple.vfx.programHashCodeQueue
CFXProgramHashCode
Assertion '%s' failed. ProgramHashCode should be in the dictionary
CFDictionaryContainsKey(s_ProgramHashCodeDictionary, programHashCode->_hashCodeHash)
programHashCode->_hashCodeHash
<CFXProgramHashCode %p : 
SM_Mat,
SM_Geo,
SM(%@),
Aone,
Acst,
opq,
tgt,
lgh,
amb,
prob,
fog,
dynB,
pntR,
iblTr,
Constant
Phong
ShadowOnly
[%@:
PerPix|
Double|
OverLght|
WrNrm|
Nrmliz|
WriteDepth|
LinDepth|
TrspA
TrspSL
TrspDL
[Node:
LightMap|
VrtCol|
Tess|
PNTriangles|
Phong|
OSD|
SingleCrease|
ScreenSpace|
PrimvarData=%d|
AmbientOcclusion
SelfIllumination
Tex|
rgb0|
rgb1|
flt0|
int|
comp|
mat|
(1D)
(2D)
(3D)
(Cube)
[Lighting:
Soft(%d)
coarseVertexCount
vertexPatchTable
fvarPatchTables
legacyGregoryPatchTable
patchRangesTable
vertexRefiner
fvarRefiners
skinMorphSubdivIndexToMetalIndexBuffer
synchronizeCoarsePositionsPipeline.functionName
fvarChannelDescriptorsBuffer
fvarChannelsPackedDataBuffer
Error: OpenSubdiv unarchiver command buffer execution failed with status %d, error: %@
OSD_IS_ADAPTIVE
Unreachable code: Unsupported patch type
OSD_PATCH_QUADS
OSD_PATCH_TRIANGLES
OSD_PATCH_REGULAR
CONTROL_POINTS_PER_PATCH
OSD_PATCH_GREGORY
OSD_PATCH_GREGORY_BASIS
OSD_PATCH_GREGORY_BOUNDARY
struct OsdInputVertexType { 
    metal::packed_float3 position; 
    metal::packed_float2 texcoord
    metal::packed_float4 color; 
#define OSD_USER_VARYING_DECLARE                             
float2 texcoord
float4 color; 
#define OSD_USER_VARYING_DECLARE_PACKED                             
metal::packed_float2 texcoord
metal::packed_float4 color; 
#define OSD_USER_VARYING_PER_VERTEX(in, out)                 
out.texcoord
 = in.texcoord
out.color = in.color; 
#define OSD_USER_VARYING_PER_CONTROL_POINT(in, out)          
#define OSD_USER_VARYING_PER_EVAL_POINT(UV, a, b, c, d, out) 
 = mix(mix(a.texcoord
, b.texcoord
, UV.x), mix(c.texcoord
, d.texcoord
, UV.x), UV.y); 
out.color = mix(mix(a.color, b.color, UV.x), mix(c.color, d.color, UV.x), UV.y); 
#define OSD_USER_VARYING_DECLARE_ATTRIBUTE                   
 [[attribute(
)]]; 
float4 color [[attribute(
VERTEX_BUFFER_INDEX
PATCH_INDICES_BUFFER_INDEX
CONTROL_INDICES_BUFFER_INDEX
OSD_PATCHPARAM_BUFFER_INDEX
OSD_PERPATCHVERTEXBEZIER_BUFFER_INDEX
OSD_PERPATCHTESSFACTORS_BUFFER_INDEX
OSD_VALENCE_BUFFER_INDEX
OSD_QUADOFFSET_BUFFER_INDEX
TRANSFORMS_BUFFER_INDEX
TESSELLATION_LEVEL_BUFFER_INDEX
INDICES_BUFFER_INDEX
QUAD_TESSFACTORS_INDEX
OSD_PERPATCHVERTEXGREGORY_BUFFER_INDEX
OSD_PATCH_INDEX_BUFFER_INDEX
OSD_DRAWINDIRECT_BUFFER_INDEX
OSD_KERNELLIMIT_BUFFER_INDEX
OSD_PATCH_ENABLE_SINGLE_CREASE
OSD_FRACTIONAL_EVEN_SPACING
OSD_FRACTIONAL_ODD_SPACING
OSD_MAX_TESS_LEVEL
USE_STAGE_IN
USE_PTVS_FACTORS
USE_PTVS_SHARPNESS
THREADS_PER_THREADGROUP
CONTROL_POINTS_PER_THREAD
VERTEX_CONTROL_POINTS_PER_PATCH
OSD_MAX_VALENCE
OSD_NUM_ELEMENTS
OSD_ENABLE_BACKPATCH_CULL
OSD_USE_PATCH_INDEX_BUFFER
OSD_ENABLE_SCREENSPACE_TESSELLATION
OSD_ENABLE_PATCH_CULL
NEEDS_BARRIER
OSD_FVAR_WIDTH
OSD_FVAR_USES_MULTIPLE_CHANNELS
OSD_FVAR_DATA_BUFFER_INDEX
OSD_FVAR_INDICES_BUFFER_INDEX
OSD_FVAR_PATCHPARAM_BUFFER_INDEX
OSD_FVAR_PATCH_ARRAY_BUFFER_INDEX
OSD_FVAR_CHANNELS_CHANNEL_COUNT_INDEX
OSD_FVAR_CHANNELS_CHANNEL_DESCRIPTORS_INDEX
OSD_FVAR_CHANNELS_PACKED_DATA_BUFFER_INDEX
OSD_FVAR_CHANNELS_PATCH_ARRAY_INDEX_BUFFER_INDEX
OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING
OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING
OSD_COLOR_INTERPOLATION_MODE
OSD_TEXCOORD0_INTERPOLATION_MODE
OSD_TEXCOORD1_INTERPOLATION_MODE
OSD_TEXCOORD2_INTERPOLATION_MODE
OSD_TEXCOORD3_INTERPOLATION_MODE
OSD_TEXCOORD4_INTERPOLATION_MODE
OSD_TEXCOORD5_INTERPOLATION_MODE
OSD_TEXCOORD6_INTERPOLATION_MODE
OSD_TEXCOORD7_INTERPOLATION_MODE
CFX_OPTIMIZE_OPENSUBDIV_STORAGE
Assertion '%s' failed. GPU support for OpenSubdiv must not be enabled when there is a tessellator but the subdivision level is still 0.
geometry->_subdivInfo.subdivisionLevel > 0
Error: Invalidating OpenSubdiv runtime data of geometry %@
v20@?0@"<MTLCommandBuffer>"8B16
osdRuntimeData->skinMorphContext.synchronizeCoarsePositionsPipeline
Assertion '%s' failed. %s called but there's no patch to draw.
__CFXSubdivisionOsdGPUHasPatchOfType(osdRuntimeData, cfxPatchType)
CFXSubdivisionOsdGPUDraw
vertexDataBuffer
CFXSubdivisionOsdGPURuntimeData
<CFXSubdivisionOsdGPURuntimeDataRef %p>
Vertex patch table:
  - Patch arrays (%@):
    - %d x %@
  - Data buffer: %p (%@)
  - Patch index buffer: %p (%@)
  - Patch param buffer: %p (%@)
FVar patch table (channel %zu):
Legacy Gregory patch table:
  - Vertex valence buffer: %p (%@)
  - Quad offsets buffer: %p (%@)
  - Vertex stencil table (%d stencils)
    - Sizes buffer: %p (%@)
    - Offsets buffer: %p (%@)
    - Indices buffer: %p (%@)
    - Weights buffer: %p (%@)
  - Vertex evalutor input
    - Src buffer: [offset:%d length:%d stride:%d] %p (%@)
    - Dst buffer: [offset:%d length:%d stride:%d] %p (%@)
v16@?0r^{?={?=@@@@i}{?=@@{BufferDescriptor=iii}{BufferDescriptor=iii}}@}8
Vertex Refiner:
  - Skin/morph indexing table: %p (%@)
Total memory usage: %@
QUADS
TRIANGLES
REGULAR
GREGORY
GREGORY BOUNDARY
GREGORY BASIS
.patchArrays
.dataBufferOffset
.dataBufferCoarseDataSize
.dataBufferFullDataSize
.patchIndexBuffer
.patchParamBuffer
.dataBuffer
.count
.[%d]
.vertexValenceBuffer
.quadOffsetsBuffer
.quadOffsetsBaseGregory
.quadOffsetsBaseGregoryBoundary
.elementCount
.patchArrayCount
.[%d][%d]
.stencilTable
.evaluatorInput
.sizesBuffer
.offsetsBuffer
.indicesBuffer
.weightsBuffer
.numStencils
.srcDesc
.dstDesc
compute_opensubdiv
CFX-OpenSubdiv_compute.metal
Error: OpenSubdiv command buffer execution failed with status %d, error: %@
Assertion '%s' failed. Internal consistency error.
fvarChannelCount == fvarPrimvarCount
Error: OSD_MAX_VALENCE is set to %d and current mesh has a max valence of %d
^{__CFData=}8@?0
v24@?0{?=qq}8
%@-%s
{MTLContext=@@@@}8@?0
mtlBlitContext.computeCommandEncoder
mtlBlitContext.commandBuffer
Error: OpenSubdiv archiver dependency command buffer execution failed with status %d, error: %@
Error: OpenSubdiv archiver command buffer execution failed with status %d, error: %@
vfx_osd_synchronize_coarse_positions_no_argument_buffer
vfx_osd_synchronize_indexed_coarse_positions_no_argument_buffer
osdRuntimeData->coarseVertexCount == remappingTableSize
refiner->computeEvaluator
evaluatorDidSucceed
Main culling context
init
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/Culling.mm
Assertion '%s' failed. Can't get a valid projection info
NULL
cull
astc
_VFXIsLoaded
VFXAntialiasingModeMultisampling8X
VFXAntialiasingModeMultisampling16X
VFXWorld
VFXColor
CAMediaTimingFunction
CABasicAnimation
CAAnimationGroup
CAKeyframeAnimation
CALayer
NSValue
VFXImage
VFXView
VFXMetalLayer
VFXModel
VFXMaterialProperty
VFXLight
VFXParametricModel
VFXMeshElement
VFXRenderer
VFXMorpher
VFXCamera
VFXLOD
VFXMaterial
VFXProgram
VFXConstraint
VFXPhysicsJoint
VFXMeshSource
VFXFloor
VFXShape
VFXText
VFXWorldLoader
VFXAnimationEvent
VFXModelTessellator
VFXForceField
VFXPhysicsBallSocketJoint
VFXPhysicsSliderJoint
VFXPhysicsContact
VFXHitTestResult
VFXPhysicsShape
VFXPhysicsHingeJoint
VFXIKConstraint
VFXLookAtConstraint
VFXPhysicsBody
VFXPhysicsWorld
VFXNode
VFXBoundingBox
VFXBoundingSphere
VFXTransaction
VFXEditingLocalSpace
VFXEditingParentSpace
VFXEditingWorldSpace
VFXEditingScreenSpace
VFXManipulatorPositionCenter
VFXManipulatorPositionMin
VFXManipulatorPositionMax
VFXCameraProjectionDirectionVertical
VFXCameraProjectionDirectionHorizontal
VFXInteractionModeFly
VFXInteractionModeOrbitTurntable
VFXInteractionModeOrbitAngleMapping
VFXInteractionModeOrbitCenteredArcball
VFXInteractionModeOrbitArcball
VFXInteractionModePan
VFXInteractionModeTruck
VFXCameraFillModeFit
VFXCameraFillModeFill
VFXCameraFillModeFitVertically
VFXCameraFillModeFitHorizontally
VFXCameraFillModeStretch
VFXMeshPrimitiveTypeTriangles
VFXMeshPrimitiveTypeTriangleStrip
VFXMeshPrimitiveTypeLine
VFXMeshPrimitiveTypePoint
VFXMeshPrimitiveTypePolygon
VFXTessellationSmoothingModeNone
VFXTessellationSmoothingModePNTriangles
VFXTessellationSmoothingModePhong
VFXSubdivisionBoundaryInterpolationRuleNone
VFXSubdivisionBoundaryInterpolationRuleEdgeOnly
VFXSubdivisionBoundaryInterpolationRuleEdgeAndCorner
VFXSubdivisionFaceVaryingInterpolationRuleLinearNone
VFXSubdivisionFaceVaryingInterpolationRuleLinearCornersOnly
VFXSubdivisionFaceVaryingInterpolationRuleLinearCornersPlus1
VFXSubdivisionFaceVaryingInterpolationRuleLinearCornersPlus2
VFXSubdivisionFaceVaryingInterpolationRuleLinearBoundaries
VFXSubdivisionFaceVaryingInterpolationRuleLinearAll
VFXSubdivisionNormalSmoothingModeCrossTriangle
VFXSubdivisionNormalSmoothingModeCrossQuad
VFXSubdivisionNormalSmoothingModeLimit
VFXHitTestSearchModeClosest
VFXHitTestSearchModeAll
VFXHitTestSearchModeAny
VFXLODThresholdModeWorldSpaceDistance
VFXLODThresholdModeScreenSpaceRadius
VFXMorpherCalculationModeNormalized
VFXMorpherCalculationModeAdditive
VFXChamferModeBoth
VFXChamferModeFront
VFXChamferModeBack
VFXReferenceLoadingPolicyImmediate
VFXReferenceLoadingPolicyOnDemand
VFXAntialiasingModeNone
VFXAntialiasingModeMultisampling2X
VFXAntialiasingModeMultisampling4X
VFXWorldLoaderStatusParsing
VFXWorldLoaderStatusValidating
VFXWorldLoaderStatusProcessing
VFXWorldLoaderStatusComplete
VFXWorldLoaderStatusError
VFXCullModeBack
VFXCullModeFront
VFXBufferFrequencyPerFrame
VFXBufferFrequencyPerNode
VFXBufferFrequencyPerShadable
VFXFillModeFill
VFXFillModeLines
VFXTransparencyModeDefault
VFXTransparencyModeSingleLayer
VFXTransparencyModeDualLayer
VFXBlendModeAlpha
VFXBlendModeAdd
VFXBlendModeSubtract
VFXBlendModeMultiply
VFXBlendModeScreen
VFXBlendModeOpaque
VFXBlendModeMax
VFXFilterModeNone
VFXFilterModeNearest
VFXFilterModeLinear
VFXWrapModeClamp
VFXWrapModeRepeat
VFXWrapModeClampToBorder
VFXWrapModeMirror
VFXPhysicsBodyTypeStatic
VFXPhysicsBodyTypeDynamic
VFXPhysicsBodyTypeKinematic
VFXForceFieldScopeInsideExtent
VFXForceFieldScopeOutsideExtent
VFXForceFieldShapeNone
VFXForceFieldShapeBox
VFXForceFieldShapeSphere
VFXForceFieldShapeCone
VFXForceFieldShapeTube
VFXJS%@JSExport
VFX%@JSExport
%@JSExport
root_node
/System/Library/PrivateFrameworks/USDKit.framework/USDKit
../SharedFrameworks/USDKit.framework/USDKit
Error: Could not load UsdKit
USKObjectPath
USKToken
USKData
USKScene
USKDataTypeResourcePath
USKDataTypeInt
USKDataTypeBool
USKDataTypeDouble3
USKDataTypeDouble4x4
USKDataTypeDouble4x4Array
USKDataTypeFloat
USKDataTypeFloat2
USKDataTypeFloat3
USKDataTypeFloat4
USKDataTypeFloat2Array
USKDataTypeFloat3Array
USKDataTypeFloatArray
USKDataTypeIntArray
USKDataTypeObjectPath
USKDataTypeObjectPathArray
USKDataTypeQuatf
USKDataTypeQuatfArray
USKDataTypeStringArray
USKDataTypeToken
USKDataTypeTokenArray
USKNodeTypeCamera
USKNodeTypeMaterial
USKNodeTypeMesh
USKNodeTypeMeshGroup
USKNodeTypeScope
USKNodeTypeShader
USKNodeTypeSkeletalAnimation
USKNodeTypeSkeleton
USKNodeTypeSkeletonRoot
USKNodeTypeBlendShape
USKNodeTypeTransform
USKRoleTypeColor
USKRoleTypeNone
USKRoleTypeNormal
USKRoleTypePoint
USKRoleTypeVector
USKRoleTypeTextureCoordinate
USKSchemaTypeBindingAPI
[^A-Za-z0-9]
VFX export preview %.02f
customLayerData
creator
assetInfo
component
defaultPrim
metersPerUnit
startTimeCode
endTimeCode
timeCodesPerSecond
invisible
Node_
Skeleton
bindTransforms
skel:skeleton
subdivisionScheme
faceVertexCounts
interpolation
faceVarying
extent
material:binding
_meshGroup
elementType
face
familyName
materialBind
indices
primvars:normals
primvars:st
primvars:displayColor
faceVertexIndices
primvars:normals:indices
primvars:st:indices
primvars:displayColor:indices
Material_
surfaceShader
info:id
UsdPreviewSurface
outputs:surface
emissiveColor
occlusion
Materials
textures
texgen_%lu.png
texgen_%lu
@"NSString"24@?0@"NSString"8@?<c@?@"NSString">16
c16@?0@"NSString"8
inputs:
_texCoordReader
UsdPrimvarReader_float2
outputs:result
inputs:varname
inputs:frame:stPrimvarName
_transform2D
sdrMetadata
role
math
UsdTransform2d
inputs:in
inputs:rotation
inputs:scale
inputs:translation
_texture
UsdUVTexture
inputs:bias
inputs:file
inputs:st
inputs:wrapS
inputs:wrapT
inputs:minFilter
inputs:magFilter
outputs:
mirror
blendShape
pointIndices
skel:blendShapes
skel:blendShapeTargets
offsets
normalOffsets
orthographic
perspective
projection
horizontalAperture
verticalAperture
clippingRange
xformOp:transform
xformOp:translate
xformOp:orient
rotation.euler
xformOp:rotate
xformOp:rotateXYZ
xformOp:scale
xformOp:rotateX
xformOp:rotateY
xformOp:rotateZ
xformOpOrder
Geom
blendShapeWeights
skel:animationSource
blendShapes
primvars:skel:jointWeights
elementSize
primvars:skel:jointIndices
primvars:skel:geomBindTransform
rotations
scales
bbox %p - min:[%f %f %f] max:[%f %f %f]
bsphere %p - center:[%f %f %f] radius:%f
Error: Unflushed transaction present.
Error: Transaction stack contains an uncommited transaction.
Assertion '%s' failed. Unflushed transaction present.
(count == 1)
Warning: invalid keypath: %@ sent to object %@
Warning: invalid key+index: %@ %d sent to object %@
Warning: invalid key+subscript: %@ %@ sent to object %@
Error: CFXTransactionCommit - transaction already committed
CFXTransactionCommit
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/Transactions/CFXTransaction.c
Error: modifying the timing function of an implicit transaction. Missing transaction begin?
Error: modifying duration of implicit transaction. Missing transaction begin?
Error: World %@ is modified within a rendering callback of another world (%@). This is not allowed and may lead to crash
applyBlock
CFXTransaction
<CFXTransaction>
UITrackingRunLoopMode
_CFXTransactionFlush
Warning: max successive flush reached
CFXTransactionExecuteFlush
com.apple.vfx.transaction-queue
Assertion '%s' failed. CFXTransactionRemoveChild - no child
t->childCount > 0
Assertion '%s' failed. CFXTransactionRemoveChild inconsistency
child->parentTransaction == t
Assertion '%s' failed. Error in CFXTransactionPop -> stack empty
(count >= 2)
Error: unexpected transaction commit (missing begin?)
Assertion '%s' failed. CFXTransactionAnimationDidComplete inconsistent animation count
t->pendingAnimationCount>0
Assertion '%s' failed. CFXTransactionAnimationDidInterrupt inconsistent animation count
VFXWorldLoadingContextKey
Unreachable code: Command enqueued by %@ was expected to be run in immediate mode
Unreachable code: Unsupported class %@
animationTimingFunction not implemented for Javascript
cullingSystem
Unreachable code: invalid spatial handle (%d) given
Assertion '%s' failed. invalid spatial handle (%d) given
handle >= 0 && ((uint32_t)handle < cullingSystem->_handles.size())
CFXCullingSystem
<CFXCullingSystem %p>
handle >= 0 && ((uint32_t)handle < _handles.size())
Assertion '%s' failed. handle should not point to non existing index
indexToRemove < _count
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/ManipulatorPass.mm
MANIPULATOR_DEPTH
VendorID
ProductID
MaxInputReportSize
IOHIDManagerOpen failed - %d
Error: not able to get click origin
Warning: _beginTranslateAtLocation: invalid zRange
VFXSceneKitBridgeOptionOriginalURL
VFXSceneKitBridgeOptionSkipLightIntensityRemapping
Assertion '%s' failed. unable to find node in remap table
vfxNode!=nil
Error: VFXMeshSourceSemanticFromSCNSemantic - unknown semantic
Error: VFXMeshPrimitiveTypeFromSCNPrimitiveType - unknown type
Error: unnamed source material property
v32@?0@"SCNMaterialProperty"8Q16*24
scn_frame
scn_node
#pragma transparent
Error: Unsupported shadable class (%@) uses `#pragma transparent`
field
Error: CFXForceFieldSetOwner - multiple owners
CFXForceField
<CFXForceField %p> Type:%d
DIFF--------------
%d: %@ %@
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/OverlayPass.mm
Assertion '%s' failed. src and dst count must be equal
dst.count == src.count
Error: unsupported conversion %@ -> float4
Unreachable code: not implemented
@"VFXMTLSkinDeformerReadOnlyBuffers"8@?0
needNormal
needTangent
weight_index_size
bone_index_size
skin_var
Int%d_Int%d_%c%c
skin_copy_as_fallback
%c%c
Error: Skinning internal consistency error - vertex count mismatch ('%d == %d' assertion failed)
Error: Skinning internal consistency error - out of range bone index ('%d < %d' assertion failed)
Assertion '%s' failed. Wrong vertex count for skinned positions
_baseVertexCount == effectiveDstPosCount
Assertion '%s' failed. Wrong vertex count for skinned normals
effectiveDstPosCount == normalBuffer.length / (3 * sizeof(float))
Assertion '%s' failed. Wrong vertex count for skinned tangents
effectiveDstPosCount <= tangentBuffer.length / (4 * sizeof(float))
http
Assertion '%s' failed. You can't allocate a registry twice
__semanticRegistry == NULL
Assertion '%s' failed. You can't deallocate a registry that wasn't allocated
__semanticRegistry != NULL
Assertion '%s' failed. You can't register twice the same semantic
[__semanticRegistry objectForKey:semanticName] == nil
Assertion '%s' failed. You can't register twice the same argument name
[__argumentRegistry objectForKey:argumentName] == nil
Warning: arguments named %@ is reserved for type %d
vertexBuffer.
osdIndicesBuffer
osdTessellationLevel
osdVertexBuffer
osdFaceVaryingData
osdFaceVaryingIndices
osdFaceVaryingPatchParams
osdFaceVaryingPatchArray
osdFaceVaryingChannelCount
osdFaceVaryingChannelDescriptors
osdFaceVaryingPatchArrayIndex
osdFaceVaryingChannelsPackedData
vertexBuffer
patchParamBuffer
perPatchVertexBuffer
patchTessBuffer
vfx_nodes
Warning: unknown member in vfx automated buffer : %@
vfx_frame_multi
Sampler
Unreachable code: invalid program stage %d
Assertion '%s' failed. Argument with the same name cannot have different types (%d != %d)
bufferBinding.type == argument.type
Assertion '%s' failed. Argument with the same name cannot have different blocks
(VFXArgumentBindingBlock)bufferBinding.bindBlock == block
Assertion '%s' failed. Argument with the same name cannot have different class type
[bufferBinding isKindOfClass:[VFXMTLPassResourceBinding class]]
(VFXArgumentBindingBlock)bufferBinding.bindBlock == nil
Assertion '%s' failed. Only supports pass buffer arguments as struct
((id <MTLBufferBinding>)argument).bufferDataType == MTLDataTypeStruct
Warning: struct member does not match pass description : %@
Assertion '%s' failed. buffers of the same name in different stages need to have the same type
(NSUInteger)bufferBinding.bufferSize == ((id<MTLBufferBinding>)argument).bufferDataSize
kCreatePropertyListShouldZipOption
kCreatePropertyListShouldKeepReferencesToFilesOption
kExportPointOfViewAttribute
VFXExportWorldIdentifier
VFXExportMovieMirrored
VFXExportMovieSupersamplingFactor
VFXExportMovieFrameRate
VFXExportOperation : error not implemented
QTAddImageCodecType
QTMovieRateAttribute
Error: AVAssetWriter can't create a movie at %@ (error:%@)
Error: appendImage: failed to get a pixelBuffer from CVPixelBufferPoolRef
VFXExport.m
VFX: Couldn't create pixel buffer
Error: append pixel buffer failed
serial assetwriter input queue
Error: error while exporting movie: %@
B24@?0^{__CFXShapeBoundary=^{__CFXShapeVertex}IIffffi}8^{__CFXShapeBoundary=^{__CFXShapeVertex}IIffffi}16
v24@?0^{__CFXShapeBoundary=^{__CFXShapeVertex}IIffffi}8^{__CFXShapeBoundary=^{__CFXShapeVertex}IIffffi}16
v24@?0^{__CFXShapeBoundary=^{__CFXShapeVertex}IIffffi}8i16i20
Assertion '%s' failed. realloc has an allocation size of 0 bytes
boundaryCount > 1
Assertion '%s' failed. Cannot produce any additional triangle.
triangulation->triangleCount < triangulation->maxTriangleCount
Error: CFXShapeConnectedComponentTriangulatePseudopolygon - neighbor index out of bounds
CFXGlyph
<CFXGlyph '%@' in '%@'>
CFXTextLine
<CFXTextLine>
CFXTextFrame
<CFXTextFrame>
profilePath.points
v28@?0c8I12*16I24
v140@?0{__CFXShapeVertex={CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}fBi}8{CGPoint=dd}88f104{CGPoint=dd}108{CGPoint=dd}124
Error: CFXMeshCreateTextFrame: CFXTextFrameRef object is NULL, will create NULL mesh
CFXDeformerStack
<CFXDeformerStack %p>
<CFXDeformerStack %p (geometry: %p)
  morpher: %p
  skinner: %p
  %@: %p
Warning: Should not update VFXLight without CFXLight
Warning: Invalid image
Warning: VFXCore IBL Sync from image only supports URL
Warning: Invalid VFXScene
CFXVFXLightUpdateCommand
<CFXVFXLightUpdateCommand>
%s %p
Unreachable code: Asking to created a texture with an invalid format!
Error: Failed to load image with error %@
Error: Cannot load image %@. Using dummy texture.
Assertion '%s' failed. Too many mip level loaded
loadedMipMapCount <= desc.mipmapLevelCount
v20@?0C8r*12
Error: unknown compression format
Error: Cannot load image %@. Texture will be garbage.
Error: CFXRendererCreateTextureWithImage : error while getting bitmap bytes
compute_cube_from_equi_views
compute_cube_from_equi
compute_equi_from_cube
sourceImage
Error: Failed to load texture named %@ : %@
Unable to find texture for source %@
Assertion '%s' failed. slice count must match to copy
sliceCount == VFXMTLComputeTextureSliceCount(dstTexture)
Assertion '%s' failed. width must match to copy
srcTexture.width == dstTexture.width
Assertion '%s' failed. height must match to copy
srcTexture.height == dstTexture.height
Assertion '%s' failed. depth must match to copy
srcTexture.depth == dstTexture.depth
Assertion '%s' failed. The set we are updating contains more elements than the number of positions we have in store, something it wrong (%d vs %d)
setToApplyTo.count <= _originalDataCount
Unreachable code: Unknown manipulator action
_prepareSnapToAlignDataForAxis - unexpected axis
GBuffer
Albedo
Normals
RoughnessMetalness
Velocity
Error: boundaryOfVerticesIndex out of bound
bestSplitEvents
%@: %p '%@'
%@: %p
 | %d elements
Error: can't set a bounding box to a Mesh (readonly)
Warning: Found elements with different channel counts in the same geometry
Error: Missing channel for source at index %u
Error: Invalid channel (%d) for source at index %u
Register probes
Info: Irradiance: %f, %f, %f
Assertion '%s' failed. MTLBuffer containing the SH coefficients has not the expected size
bufferView.length == CFX::ConstantBufferAlignSize((shOrder * shOrder) * 3 * sizeof(float))
PathTracer input emission
PathTracer input normals
PathTracer input albedo
PathTracer input roughmetalTarget
PathTracer input velocityTarget
PathTracer input depthTarget
CRenderGraphEngineContextRenderFrame
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm
Error: Unable to resolve custom provider %s: %s
Clear drawable
Error: Builtin forward rendergraph provider resolve failed: %s
Error: Builtin pathTracer rendergraph provider resolve failed: %s
Error: Builtin stereo rendergraph provider resolve failed: %s
Error: Builtin holographic rendergraph provider resolve failed: %s
Error: Builtin hybrid renderer rendergraph provider resolve failed: %s
Resources nextFrame
loadGraphProvider
Error: Unable to build graph %s
setup
compile
Destroy graph
Execute
Begin encoding
End encoding
setupRenderPassDescriptor
fxPass
draw
ignoreFloors
onlyShadowCasters
onlyMovableNodes
hasConstantAlpha
installViewport
isViewDependant
overridesCustomProgram
layerMask
includeCategoryMask
excludeCategoryMask
viewport
%f %f %f %f
samples
colorStates
worldBackground
clear
depthStates
enableWrite
enableRead
func
stencilStates
enable
behavior
backFaceBehavior
blendStates
Error: too many blend states: max render target is %d
Warning: can't create a fbo description for pass %@ - can't find pass description with name %@
inputName
Assertion '%s' failed. unexpected error in CFXFXPassSetInputs
fxPass->_inputCount == count
Assertion '%s' failed. unexpected error in CFXFXPassSetOutput
(CFIndex)fxPass->_outputCount <= count
passInstance
CFXFXPassInput
<CFXFXPassInput %@>
uniformName
CFXFXPass
<CFXFXPass %@>
nameToInput
draw_world
draw_node
draw_main_world
draw_nodes
draw_geometry
draw_quad
metal_custom
draw_none
custom
preDraw
preFX
preToneMap
postFX
front
cullNone
back
Error: unknown cull mode named %@
never
always
equal
notEqual
less
lessEqual
greater
greaterEqual
Error: unknown depth comparison function named %@
depthFail
fail
readMask
writeMask
referenceValue
keep
zero
replace
increment
decrement
invert
incrementWrap
decrementWrap
colorSrc
colorDst
alphaSrc
alphaDst
colorOp
alphaOp
oneMinusSrcColor
oneMinusSrcAlpha
oneMinusDstColor
oneMinusDstAlpha
constantColor
oneMinusConstantColor
constantAlpha
oneMinusConstantAlpha
alphaSaturate
Error: unknown blend factor named %@
substract
reverseSubstract
Error: unknown blend op named %@
mipmapped
%fx%f
texture_rectangle
usage
color0
stencil
Error: _bufferTypeFromName - unknown output type: %@
Warning: unknown depth texture format : %@
Warning: unknown texture format : %@
targetName
Error: description for input named %@ is missing
Error: 'type' is required for symbol %@
Assertion '%s' failed. pass:_setupInput unexpected type
typeTest == input->_baseType
tangent
viewTransform
modelViewProjectionInverseTransform
modelViewInverseTransform
modelInverseTransform
viewInverseTransform
projectionInverseTransform
normalInverseTransform
Warning: symbol named %@ should be in "targets" not "symbols"
Warning: _convertOutputsDescriptionToOutputs - can't find output named %@
global
persistent
Error: _convertOutputsDescriptionToOutputs - unknown output type: %@
pass->_overridedRendererElementsProgramHashcodes
Error: failed to resolve entity with tag %@
Error: failed to find tag %@
_entityObject
Error: invalid keyPath %@
vfx_rt_specular_trace
RTSpecularTracePass
RTSpecularSpatialReSTIRPass
vfx_rt_specular_spatial_restir
RTSpecularUpscalePass
vfx_rt_specular_upscale
SpecularUpscale
SpecularUpscaleDistance
RTSpecularTemporalDenoisePass
vfx_rt_specular_temporal_denoise
RT_SPECULAR_SPATIAL_RESTIR
RT_SPECULAR_UPSCALE
RT_SPECULAR_TEMPORAL_DENOISE
kGeometrySourceSemanticTangent
kGeometrySourceSemanticVertexCrease
kGeometrySourceSemanticEdgeCrease
kGeometrySourceSemanticBoneWeights
kGeometrySourceSemanticBoneIndices
<%@: %p | semantic=%@ vectors=%d %@x%d>
Error: meshSourceWithData: interleaved buffers as doubles are not supported
Error: meshSourceWithBuffer - invalid vertex format
Error: _modelSourceWithSource - invalid vertex format
_modelSourceWithSource - Conversion failed
Error: Could not create mesh source
Assertion '%s' failed. VFXMeshSource should only store a base type
_componentType == CFXBaseTypeGetComponentType(_componentType)
Assertion '%s' failed. vImageEncodeVectorHalf only supports half2/3/4
_componentCount >= 2 && _componentCount <= 4
halfSource
Assertion '%s' failed. Consistenty check issue during conversion for vImageEncodeVectorHalf
encodedComponentType == kCFXBaseTypeHalf
Assertion '%s' failed. vImageEncodeVectorHalf failed to write bytes
compressedSize > 0
cdata
vectorCount
floatComponents
bytesPerComponent
componentType
componentsPerVector
dataOffset
dataStride
mkSemantic
colorSpace
Unreachable code: VFXMeshSource should only store a base type
Unreachable code: Data is marked as compressed but does not contain half components
Assertion '%s' failed. Decoding failed
decompressedSize == decompressedDataCapacity
Error: _modelSourceWithSource - Conversion failed
Geometry source has invalid bounds
v20@?0^I8I16
scratchAllocator
debug_probe_vert
debug_probe_frag_cube_array
debug_probe_frag_2d_array
vfx_draw_fullscreen_fragment
COLOR_PICKED
DEPTH_PICKED
COLOR_OUTLINE
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/AuthoringPass.mm
vfx_outline_vert
vfx_outline_frag
Picked object
Outline
AUTHORING COLOR OUTPUT
PICKED_OBJECT
OUTLINE
CFXFXCIFilterPass.json
CFXFXCIFilterPassMetal.json
CFXFXCIFilterPassMetalRenderGraph.json
vfx_deformer
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-
<plist version="1.0">
<dict>
<key>sequence</key>
<array>
<string>VFX_renderMirroredScene</string>
<string>VFX_renderFloor</string>
</array>
<key>passes</key>
<dict>
<key>VFX_renderMirroredScene</key>
<dict>
<key>outputs</key>
<dict>
<key>depth</key>
<string>VFX-Floor-depth</string>
<key>color</key>
<string>VFX-Floor-color</string>
</dict>
<key>draw</key>
<string>DRAW_SCENE</string>
<key>depthStates</key>
<dict>
<key>clear</key>
<true/>
</dict>
<key>colorStates</key>
<dict>
<key>clear</key>
<true/>
</dict>
</dict>
<key>VFX_renderFloor</key>
<dict>
<key>depthStates</key>
<dict>
<key>clear</key>
<false/>
</dict>
<key>colorStates</key>
<dict>
<key>clear</key>
<false/>
</dict>
<key>inputs</key>
<dict>
<key>u_floorReflectionDepth</key>
<string>VFX-Floor-depth</string>
<key>u_floorReflectionColor</key>
<string>VFX-Floor-color</string>
<key>u_floorNormal</key>
<string>u_floorNormal</string>
<key>u_floorTangent</key>
<string>u_floorTangent</string>
<key>u_floorCenter</key>
<string>u_floorCenter</string>
<key>u_floorExtent</key>
<string>u_floorExtent</string>
<key>u_floorReflectivity</key>
<string>u_floorReflectivity</string>
<key>u_floor_viewport</key>
<string>u_floor_viewport</string>
<key>u_floorMVP_i</key>
<string>u_floorMVP_i</string>
<key>u_floorPlane</key>
<string>u_floorPlane</string>
<key>u_floorFalloff</key>
<string>u_floorFalloff</string>
<key>u_floorFalloffStart</key>
<string>u_floorFalloffStart</string>
</dict>
<key>draw</key>
<string>DRAW_GEOMETRY</string>
<key>installViewport</key>
<false/>
</dict>
</dict>
<key>symbols</key>
<dict>
<key>u_floorNormal</key>
<dict>
<key>type</key>
<string>float3</string>
</dict>
<key>u_floorTangent</key>
<dict>
<key>type</key>
<string>float4</string>
</dict>
<key>u_floorCenter</key>
<dict>
<key>type</key>
<string>float3</string>
</dict>
<key>u_floorExtent</key>
<dict>
<key>type</key>
<string>float2</string>
</dict>
<key>u_floor_viewport</key>
<dict>
<key>type</key>
<string>float4</string>
</dict>
<key>u_floorReflectivity</key>
<dict>
<key>type</key>
<string>float</string>
</dict>
<key>u_floorMVP_i</key>
<dict>
<key>type</key>
<string>float4x4</string>
</dict>
<key>u_floorPlane</key>
<dict>
<key>type</key>
<string>float4</string>
</dict>
<key>u_floorFalloff</key>
<dict>
<key>type</key>
<string>float</string>
</dict>
<key>u_floorFalloffStart</key>
<dict>
<key>type</key>
<string>float</string>
</dict>
</dict>
<key>targets</key>
<dict>
<key>VFX-Floor-depth</key>
<dict>
<key>type</key>
<string>depth</string>
</dict>
<key>VFX-Floor-color</key>
<dict>
<key>type</key>
<string>color</string>
<key>format</key>
<string>rgba</string>
</dict>
</dict>
</dict>
</plist>
  "passes" : {
    "VFX_ApplyCIFilter" : {
      "outputs" : {
        "color" : "VFX-CI-effect-color"
      },
      "inputs" : {
        "myInput1" : "VFX-CI-nodetree-color"
      },
      "draw" : "CUSTOM"
    },
    "VFX_renderCINodeTree" : {
      "outputs" : {
        "depth" : "VFX-CI-nodetree-depth",
        "color" : "VFX-CI-nodetree-color"
      },
      "ignoreFloors" : true,
      "draw" : "DRAW_NODE",
      "node" : "self"
    },
    "VFX_renderCIQuad" : {
      "inputs" : {
        "u_m" : "CFX-CIFilter_modelMatrix",
        "u_color" : {
          "target" : "VFX-CI-effect-color",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        },
        "u_middleZ" : "CFX-CIFilter_middleZ",
        "u_depth" : {
          "target" : "VFX-CI-nodetree-depth",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        }
      },
      "hasConstantAlpha" : false,
      "colorStates" : {
        "clear" : false
      },
      "depthStates" : {
        "clear" : false
      },
      "program" : "CFX-CIFilterComposite",
      "draw" : "none",
      "clientProgram" : false,
      "blendStates" : {
        "enable" : true,
        "colorDst" : "oneMinusSrcAlpha",
        "colorSrc" : "one"
      }
    }
  },
  "sequence" : [
    "VFX_renderCINodeTree",
    "VFX_ApplyCIFilter",
    "VFX_renderCIQuad"
  ],
  "symbols" : {
    "CFX-CIFilter_middleZ" : {
      "type" : "float"
    },
    "CFX-CIFilter_modelMatrix" : {
      "type" : "mat4"
    }
  },
  "targets" : {
    "VFX-CI-effect-color" : {
      "type" : "color"
    },
    "VFX-CI-nodetree-color" : {
      "target" : "texture_rectangle",
      "type" : "color"
    },
    "VFX-CI-nodetree-depth" : {
      "type" : "depth"
    }
  "sequence" : [
                "VFX_renderCINodeTree",
                "VFX_ApplyCIFilter",
                "VFX_renderCIQuad"
                ],
  "targets" : {
    "VFX-CI-nodetree-depth" : {
      "type" : "depth"
    },
    "VFX-CI-nodetree-color" : {
      "type" : "color",
      "format" : "rgba",
    },
    "VFX-CI-effect-color" : {
      "type" : "color",
      "format" : "rgba",
      "usage" : ["shaderWrite", "shaderRead"]
    }
  },
  "symbols" : {
    "CFX-CIFilter_middleZ" : {
      "type" : "float"
    },
    "CFX-CIFilter_extent" : {
      "type" : "float4"
    }
  },
  "passes" : {
    "VFX_renderCIQuad" : {
      "inputs" : {
        "u_color" : {
          "target" : "VFX-CI-effect-color",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        },
        "u_middleZ" : "CFX-CIFilter_middleZ",
        "u_extent" : "CFX-CIFilter_extent",
        "u_depth" : {
          "target" : "VFX-CI-nodetree-depth",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        }
      },
      "hasConstantAlpha" : false,
      "colorStates" : {
        "clear" : false
      },
      "depthStates" : {
        "clear" : false
      },
      "cullMode" : "none",
      "metalVertexShader" : "vfx_filterCompositeVert",
      "metalFragmentShader" : "vfx_filterCompositeFrag",
      "draw" : "none",
      "clientProgram" : false,
      "blendStates" : {
        "enable" : true,
        "colorDst" : "oneMinusSrcAlpha",
        "colorSrc" : "one"
      }
    },
    "VFX_ApplyCIFilter" : {
      "outputs" : {
        "color" : "VFX-CI-effect-color"
      },
      "inputs" : {
        "myInput1" : "VFX-CI-nodetree-color"
      },
      "draw" : "CUSTOM"
    },
    "VFX_renderCINodeTree" : {
      "draw" : "DRAW_NODE",
      "node" : "self",
      "ignoreFloors" : true,
      "outputs" : {
        "depth" : "VFX-CI-nodetree-depth",
        "color" : "VFX-CI-nodetree-color"
      },
      "colorStates" : {
        "clear" : true
      },
      "depthStates" : {
        "clear" : true
      },
      
    }
  "sequence" : [
                "VFX_renderCIQuad"
                ],
  "targets" : {
    "VFX-CI-effect-depth" : {
      "type" : "depth"
    },
    "VFX-CI-effect-color" : {
      "type" : "color",
      "format" : "rgba",
      "usage" : ["shaderWrite", "shaderRead"]
    }
  },
  "symbols" : {
    "CFX-CIFilter_middleZ" : {
      "type" : "float"
    },
    "CFX-CIFilter_extent" : {
      "type" : "float4"
    }
  },
  "passes" : {
    "VFX_renderCIQuad" : {
      "inputs" : {
        "u_color" : {
          "target" : "VFX-CI-effect-color",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        },
        "u_middleZ" : "CFX-CIFilter_middleZ",
        "u_extent" : "CFX-CIFilter_extent",
        "u_depth" : {
          "target" : "VFX-CI-effect-depth",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        }
      },
      "hasConstantAlpha" : false,
      "colorStates" : {
        "clear" : false
      },
      "depthStates" : {
        "clear" : false
      },
      "cullMode" : "none",
      "metalVertexShader" : "vfx_filterCompositeVert",
      "metalFragmentShader" : "vfx_filterCompositeFrag",
      "draw" : "none",
      "clientProgram" : false,
      "blendStates" : {
        "enable" : true,
        "colorDst" : "oneMinusSrcAlpha",
        "colorSrc" : "one"
      }
    },
#import <metal_stdlib>
using namespace metal;
#import "vfx_metal"
#import "vfx_util.h"
#import "CFX-PBR.metal"
#import "vfx_tessellation.h"
#ifdef USE_LAYERED_RENDERING
#define texture2d_layer texture2d_array
#define sampleLayer(a,b) sample(a,b,in.sliceIndex)
#else
#define texture2d_layer texture2d
#define sampleLayer(a,b) sample(a,b)
#endif
#ifdef CFX_USE_TEXTURE_FOR_LIGHT_INDICES
#define LightIndex(lid) u_lightIndicesTexture.read((ushort)lid).x
#else
#define LightIndex(lid) u_lightIndicesBuffer[lid]
#endif
#ifdef USE_GBUFFER_OUTPUT
    #undef USE_PER_VERTEX_LIGHTING
    #undef USE_PER_PIXEL_LIGHTING
    #undef USE_LIGHTING
#endif
typedef struct {
#ifdef USE_MODELTRANSFORM
    float4x4 modelTransform;
#endif
#ifdef USE_INVERSEMODELTRANSFORM
    float4x4 inverseModelTransform;
#endif
#ifdef USE_MODELVIEWTRANSFORM
    float4x4 modelViewTransform;
#endif
#ifdef USE_INVERSEMODELVIEWTRANSFORM
    float4x4 inverseModelViewTransform;
#endif
#ifdef USE_NORMALTRANSFORM
    float4x4 normalTransform;
#endif
#ifdef USE_MODELVIEWPROJECTIONTRANSFORM
    float4x4 modelViewProjectionTransform;
#endif
#ifdef USE_INVERSEMODELVIEWPROJECTIONTRANSFORM
    float4x4 inverseModelViewProjectionTransform;
#endif
#ifdef USE_LASTFRAMETRANSFORM
    float4x4 lastFrameModelTransform;
#endif
#ifdef USE_MOTIONBLUR
    float motionBlurIntensity;
#endif
#ifdef USE_BOUNDINGBOX
    float2x3 boundingBox;
#endif
#ifdef USE_WORLDBOUNDINGBOX
    float2x3 worldBoundingBox;
#endif
#ifdef USE_NODE_OPACITY
    float nodeOpacity;
#endif
#if defined(USE_PROBES_LIGHTING) && (USE_PROBES_LIGHTING == 2)
    sh2_coefficients shCoefficients;
#elif defined(USE_PROBES_LIGHTING) && (USE_PROBES_LIGHTING == 3)
    sh3_coefficients shCoefficients;
#endif
#ifdef USE_CLUSTERED_LIGHTING
    uint8_t categoryBitmask;
#endif
} commonprofile_node;
typedef struct {
    float3 position         [[attribute(VFXVertexSemanticPosition)]];
#ifdef HAS_NORMAL
    float3 normal           [[attribute(VFXVertexSemanticNormal)]];
#endif
#ifdef USE_TANGENT
    float4 tangent          [[attribute(VFXVertexSemanticTangent)]];
#endif
#ifdef USE_VERTEX_COLOR
    float4 color            [[attribute(VFXVertexSemanticColor)]];
#endif
#if defined(NEED_IN_TEXCOORD0) || defined(DEBUG_PIXEL)
    float2 texcoord0        [[attribute(VFXVertexSemanticTexcoord0)]];
#endif
#ifdef NEED_IN_TEXCOORD1
    float2 texcoord1        [[attribute(VFXVertexSemanticTexcoord1)]];
#endif
#ifdef NEED_IN_TEXCOORD2
    float2 texcoord2        [[attribute(VFXVertexSemanticTexcoord2)]];
#endif
#ifdef NEED_IN_TEXCOORD3
    float2 texcoord3        [[attribute(VFXVertexSemanticTexcoord3)]];
#endif
#ifdef NEED_IN_TEXCOORD4
    float2 texcoord4        [[attribute(VFXVertexSemanticTexcoord4)]];
#endif
#ifdef NEED_IN_TEXCOORD5
    float2 texcoord5        [[attribute(VFXVertexSemanticTexcoord5)]];
#endif
#ifdef NEED_IN_TEXCOORD6
    float2 texcoord6        [[attribute(VFXVertexSemanticTexcoord6)]];
#endif
#ifdef NEED_IN_TEXCOORD7
    float2 texcoord7        [[attribute(VFXVertexSemanticTexcoord7)]];
#endif
} vfx_vertex_t; 
typedef struct {
    float4 fragmentPosition [[position]]; 
#ifdef USE_POINT_RENDERING
    float fragmentSize [[point_size]];
#endif
#ifdef USE_VERTEX_COLOR
    float4 vertexColor;
#endif
#ifdef USE_PER_VERTEX_LIGHTING
    float3 diffuse;
#ifdef USE_SPECULAR
    float3 specular;
#endif
#ifdef USE_CLEARCOAT
    float clearCoat;
#endif
#ifdef USE_CLEARCOATROUGHNESS
    float clearCoatRoughness;
#endif
#ifdef USE_CLEARCOATNORMAL
    float clearCoatNormal;
#endif
#endif
#if defined(USE_POSITION) && (USE_POSITION == 2)
    float3 position;
#endif
#if defined(USE_NORMAL) && (USE_NORMAL == 2) && defined(HAS_OR_GENERATES_NORMAL)
    float3 normal;
#endif
#if defined(USE_TANGENT) && (USE_TANGENT == 2)
    float3 tangent;
#endif
#if defined(USE_BITANGENT) && (USE_BITANGENT == 2)
    float3 bitangent;
#endif
#ifdef USE_DISPLACEMENT_MAP
    float2 displacementTexcoord;   
#endif
#ifdef USE_CLEARCOAT_MAP
    float2 clearCoatTexcoord;   
#endif
#ifdef USE_CLEARCOATROUGHNESS_MAP
    float2 clearCoatRoughnessTexcoord;   
#endif
#ifdef USE_CLEARCOATNORMAL_MAP
    float2 clearCoatNormalTexcoord;   
#endif
#ifdef USE_NODE_OPACITY
    float nodeOpacity;
#endif
#ifdef USE_TEXCOORD
    __TexcoordDecl__
#endif
    
#ifdef USE_EXTRA_VARYINGS
    __ExtraVaryingsDecl__
#endif
#ifdef USE_LASTFRAMETRANSFORM
    float3 mv_lastFragment;
    float3 mv_fragment;
#endif
#ifdef USE_OUTLINE
    float outlineHash [[ flat ]];
#endif
#ifdef USE_INSTANCING
    uint   instanceID [[ flat ]];
#endif
#ifndef USE_VERTEX_AMPLIFICATION 
#ifdef USE_LAYERED_RENDERING
    uint   sliceIndex [[render_target_array_index]];
#endif
#ifdef USE_MULTIPLE_VIEWPORTS_RENDERING
    uint   sliceIndex [[viewport_array_index]];
#endif
#endif
#if DEBUG_PIXEL
    float2 uv0;
#endif
} commonprofile_io;
#ifdef USE_SHADER_MODIFIERS
__ShaderModifiersDecl__
#endif
#import "CFX-Lighting.metal"
enum CFXColorMask {
    kCFXColorMaskRed    = 0x1 << 3,
    kCFXColorMaskGreen  = 0x1 << 2,
    kCFXColorMaskBlue   = 0x1 << 1,
    kCFXColorMaskAlpha  = 0x1 << 0
inline float4 colorFromMask(float4 col, int mask)
    switch (mask) {
        case kCFXColorMaskRed:                      return col.r;
        case kCFXColorMaskRed|kCFXColorMaskGreen:   return float4(col.rg, 0.f, 1.f);
        case kCFXColorMaskRed|kCFXColorMaskBlue:    return float4(col.rb, 0.f, 1.f);
        case kCFXColorMaskRed|kCFXColorMaskAlpha:   return float4(col.ra, 0.f, 1.f);
        case kCFXColorMaskGreen:                    return col.g;
        case kCFXColorMaskGreen|kCFXColorMaskBlue:  return float4(col.bg, 0.f, 1.f);
        case kCFXColorMaskGreen|kCFXColorMaskAlpha: return float4(col.ag, 0.f, 1.f);
        case kCFXColorMaskBlue:     return col.b;
        case kCFXColorMaskBlue|kCFXColorMaskAlpha:  return float4(col.ab, 0.f, 1.f);
        case kCFXColorMaskAlpha:    return col.a;
    }
    return col;
#ifndef USE_PBR
inline float3 illuminate(VFXShaderSurface surface, VFXShaderLightingContribution lighting)
    float3 albedo = surface.diffuse.rgb * surface.ambientOcclusion;
    float3 color = lighting.diffuse * albedo;
#if defined(USE_AMBIENT_LIGHTING)
    color +=  lighting.ambient * albedo;
#endif
#ifdef USE_SELFILLUMINATION
    color += surface.diffuse.rgb * surface.selfIllumination.rgb;
#endif
    
    
    
#ifdef USE_SPECULAR
    float3 S = lighting.specular;
#elif defined(USE_REFLECTIVE)
    float3 S = float3(0.);
#endif
#ifdef USE_REFLECTIVE
    S += surface.reflective.rgb * surface.ambientOcclusion;
#endif
#ifdef USE_SPECULAR
    S *= surface.specular.rgb;
#endif
#if (defined(USE_SPECULAR) || defined(USE_REFLECTIVE)) && !defined(DISABLE_SPECULAR)
    color += S;
#endif
#ifdef USE_EMISSION
    color += surface.emission.rgb;
#endif
#ifdef USE_MULTIPLY
    color *= surface.multiply.rgb;
#endif
#ifdef USE_MODULATE
    color *= lighting.modulate;
#endif
    return color;
#endif
struct VFXShaderGeometry
    float4 position;
    float3 normal;
    float4 tangent;
    float4 color;
    float pointSize;
    float2 texcoords[8]; 
#ifdef USE_CLIP_DISTANCE0
    float clipDistance0;
#endif
#ifdef USE_CLIP_DISTANCE1
    float clipDistance1;
#endif
#ifdef USE_CLIP_DISTANCE2
    float clipDistance2;
#endif
#ifdef USE_CLIP_DISTANCE3
    float clipDistance3;
#endif
struct commonprofile_uniforms {
    
    float4 diffuseColor;
    float4 specularColor;
    float4 ambientOcclusionColor;
    float4 emissionColor;
    float4 selfIlluminationColor;
    float4 reflectiveColor;
    float4 multiplyColor;
    float4 transparentColor;
    float clearCoat;
    float clearCoatRoughness;
    float3 clearCoatNormal;
    float subsurface;
    float3 subsurfaceRadius;
    float metalness;
    
    float roughness;
    float diffuseIntensity;
    float specularIntensity;
    float normalIntensity;
    float ambientOcclusionIntensity;
    float emissionIntensity;
    float selfIlluminationIntensity;
    float reflectiveIntensity;
    float multiplyIntensity;
    float transparentIntensity;
    
    float metalnessIntensity;
    float roughnessIntensity;
    float clearCoatIntensity;
    float clearCoatRoughnessIntensity;
    float clearCoatNormalIntensity;
    float subsurfaceIntensity;
    float subsurfaceRadiusIntensity;
    float displacementIntensity;
    float materialShininess;
    float selfIlluminationOcclusion;
    float alphaCutoff;
    float3 fresnel; 
    
#if USE_ARGUMENT_BUFFERS
    texture2d<float>    emissionTexture;
    sampler             emissionSampler;
    texture2d<float>    ambientOcclusionTexture;
    sampler             ambientOcclusionSampler;
    texture2d<float>    diffuseTexture;
    sampler             diffuseSampler;
    texture2d<float>    specularTexture;
    sampler             specularSampler;
#if defined(USE_REFLECTIVE_CUBEMAP)
    texturecube<float>  reflectiveTexture;
#else
    texture2d<float>    reflectiveTexture;
#endif
    sampler             reflectiveSampler;
    texture2d<float>    transparentTexture;
    sampler             transparentSampler;
    texture2d<float>    multiplyTexture;
    sampler             multiplySampler;
    texture2d<float>    normalTexture;
    sampler             normalSampler;
    texture2d<float>    selfIlluminationTexture;
    sampler             selfIlluminationSampler;
    texture2d<float>    metalnessTexture;
    sampler             metalnessSampler;
    texture2d<float>    roughnessTexture;
    sampler             roughnessSampler;
    texture2d<float>    displacementTexture;
    sampler             displacementSampler;
    
#endif 
#ifdef TEXTURE_TRANSFORM_COUNT
    float4x4 textureTransforms[TEXTURE_TRANSFORM_COUNT];
#endif
#ifdef USE_OPENSUBDIV
__OpenSubdivDeclPerGeometry__
__OpenSubdivDeclPerPatchType__
__OpenSubdivDeclShared__
struct osd_packed_vertex {
    packed_float3 position;
#if defined(OSD_USER_VARYING_DECLARE_PACKED)
    OSD_USER_VARYING_DECLARE_PACKED
#endif
#endif
#ifdef USE_DISPLACEMENT_MAP
static void applyDisplacement(texture2d<float>                 displacementTexture,
                              sampler                          displacementTextureSampler,
                              float2                           displacementTexcoord,
                              thread VFXShaderGeometry&        geometry,
                              constant commonprofile_uniforms& vfx_commonprofile)
#ifdef USE_DISPLACEMENT_TEXTURE_COMPONENT
float altitude = colorFromMask(displacementTexture.sample(displacementTextureSampler, displacementTexcoord), USE_DISPLACEMENT_TEXTURE_COMPONENT).r;
#ifdef USE_DISPLACEMENT_INTENSITY
altitude *= vfx_commonprofile.displacementIntensity;
#endif
#if defined(USE_NORMAL) && defined(HAS_OR_GENERATES_NORMAL)
float3 bitangent = geometry.tangent.w * normalize(cross(geometry.tangent.xyz, geometry.normal.xyz));
geometry.position.xyz += geometry.normal * altitude;
float3 offset = float3(1.f / displacementTexture.get_width(), 1.f / displacementTexture.get_height(), 0.f);
float3 h;
h.x = colorFromMask(displacementTexture.sample(displacementTextureSampler, displacementTexcoord), USE_DISPLACEMENT_TEXTURE_COMPONENT).r;
h.y = colorFromMask(displacementTexture.sample(displacementTextureSampler, displacementTexcoord+offset.xz), USE_DISPLACEMENT_TEXTURE_COMPONENT).r;
h.z = colorFromMask(displacementTexture.sample(displacementTextureSampler, displacementTexcoord-offset.zy), USE_DISPLACEMENT_TEXTURE_COMPONENT).r;
#ifdef USE_DISPLACEMENT_INTENSITY
h *= vfx_commonprofile.displacementIntensity;
#endif
float3 n = normalize( float3( (h.x - h.y)/offset.x, 1., (h.x - h.z)/offset.y) );
geometry.normal = geometry.tangent.xyz * n.x + geometry.normal.xyz * n.y + bitangent.xyz * n.z;
geometry.tangent.xyz = normalize(cross(bitangent, geometry.normal));
#endif 
#else 
float3 displacement = displacementTexture.sample(displacementTextureSampler, displacementTexcoord).rgb;
#ifdef USE_DISPLACEMENT_INTENSITY
displacement *= vfx_commonprofile.displacementIntensity;
#endif
#if defined(USE_NORMAL) && defined(HAS_OR_GENERATES_NORMAL)
float3 bitangent = geometry.tangent.w * normalize(cross(geometry.tangent.xyz, geometry.normal.xyz));
geometry.position.xyz += geometry.tangent.xyz * displacement.x + geometry.normal.xyz * displacement.y + bitangent.xyz * displacement.z;
float3 offset = float3(1.f / displacementTexture.get_width(), 1.f / displacementTexture.get_height(), 0.f);
float3 a = displacementTexture.sample(displacementTextureSampler, displacementTexcoord).rgb;
float3 b = displacementTexture.sample(displacementTextureSampler, displacementTexcoord+offset.xz).rgb;
float3 c = displacementTexture.sample(displacementTextureSampler, displacementTexcoord+offset.zy).rgb;
#ifdef USE_DISPLACEMENT_INTENSITY
a *= vfx_commonprofile.displacementIntensity;
b *= vfx_commonprofile.displacementIntensity;
c *= vfx_commonprofile.displacementIntensity;
#endif
b += offset.xzz;
c -= offset.zzy;
float3 n = (normalize( cross( b-a, c-a ) ));
geometry.normal = geometry.tangent.xyz * n.x + geometry.normal.xyz * n.y + bitangent.xyz * n.z;
geometry.tangent.xyz = normalize(cross(bitangent, geometry.normal));
#endif 
#endif 
#endif 
#ifdef USE_OUTLINE
static inline float hash(float2 p)
    const float2 kMod2 = float2(443.8975f, 397.2973f);
    p  = fract(p * kMod2);
    p += dot(p.xy, p.yx+19.19f);
    return fract(p.x * p.y);
#endif
    
#if defined(USE_TESSELLATION)
struct vfx_patch_t {
    patch_control_point<vfx_vertex_t> controlPoints;
#endif
#if defined(USE_OPENSUBDIV)
#if OSD_IS_ADAPTIVE
[[ patch(quad, VERTEX_CONTROL_POINTS_PER_PATCH) ]]
#endif
#elif defined(USE_TESSELLATION)
[[ patch(triangle, 3) ]]
#endif
    
    
vertex commonprofile_io commonprofile_vert(
#if !defined(USE_TESSELLATION)
                                           vfx_vertex_t                       in                               [[ stage_in ]]
                                           , uint                             vfx_vertexID                     [[ vertex_id ]]
#else 
                                           
#ifdef USE_OPENSUBDIV
#if OSD_IS_ADAPTIVE
#if USE_STAGE_IN
                                           PatchInput                         patchInput                       [[ stage_in ]]
#else
                                           OsdVertexBufferSet                 patchInput
#endif
                                           , float2                           patchCoord                       [[ position_in_patch ]]
                                           , uint                             patchID                          [[ patch_id ]]
                                           , constant float&                  osdTessellationLevel             [[ buffer(TESSELLATION_LEVEL_BUFFER_INDEX) ]]
#else 
                                           constant unsigned*                 osdIndicesBuffer                 [[ buffer(INDICES_BUFFER_INDEX) ]]
                                           , constant osd_packed_vertex*      osdVertexBuffer                  [[ buffer(VERTEX_BUFFER_INDEX) ]]
                                           , uint                             vertexID                         [[ vertex_id ]]
#endif 
#if defined(OSD_FVAR_WIDTH)
#if OSD_FVAR_USES_MULTIPLE_CHANNELS
                                           , constant uint32_t&               osdFaceVaryingChannelCount       [[ buffer(OSD_FVAR_CHANNELS_CHANNEL_COUNT_INDEX) ]]
                                           , constant OsdFVarChannelDesc*     osdFaceVaryingChannelDescriptors [[ buffer(OSD_FVAR_CHANNELS_CHANNEL_DESCRIPTORS_INDEX) ]]
                                           , constant uint32_t&               osdFaceVaryingPatchArrayIndex    [[ buffer(OSD_FVAR_CHANNELS_PATCH_ARRAY_INDEX_BUFFER_INDEX) ]]
                                           , constant void*                   osdFaceVaryingChannelsPackedData [[ buffer(OSD_FVAR_CHANNELS_PACKED_DATA_BUFFER_INDEX) ]]
#else
                                           , constant float*                  osdFaceVaryingData               [[ buffer(OSD_FVAR_DATA_BUFFER_INDEX) ]]
                                           , constant int*                    osdFaceVaryingIndices            [[ buffer(OSD_FVAR_INDICES_BUFFER_INDEX) ]]
#if OSD_IS_ADAPTIVE
                                           , constant packed_int3*            osdFaceVaryingPatchParams        [[ buffer(OSD_FVAR_PATCHPARAM_BUFFER_INDEX) ]]
                                           , constant packed_int4&            osdFaceVaryingPatchArray         [[ buffer(OSD_FVAR_PATCH_ARRAY_BUFFER_INDEX) ]]
#endif
#endif 
#endif 
#else 
                                           vfx_patch_t                        in                               [[ stage_in ]]
                                           , float3                           patchCoord                       [[ position_in_patch ]]
#endif 
#endif 
                                           
#ifdef USE_MULTIPLE_RENDERING
                                           , constant VFXWorldBuffer*         vfx_frame_multi                  [[ buffer(0) ]]
#else
                                           , constant VFXWorldBuffer&         vfx_frame                        [[ buffer(0) ]]
#endif
#if defined(USE_INSTANCING) || defined(USE_MULTIPLE_RENDERING)
                                           , constant commonprofile_node*     vfx_nodes                        [[ buffer(1) ]]
#else
                                           , constant commonprofile_node&     vfx_node                         [[ buffer(1) ]]
#endif
#ifdef USE_PER_VERTEX_LIGHTING
                                           , constant vfx_light*              vfx_lights                       [[ buffer(2) ]]
                                           , constant float4*                 u_shadowKernel
                                           , texture2d_array<float>           u_areaLightBakedDataTexture
#endif
                                           
                                           , constant commonprofile_uniforms& vfx_commonprofile
#ifdef USE_INSTANCING
                                           , uint                             vfx_instanceID                   [[ instance_id ]]
#endif
#ifdef USE_VERTEX_AMPLIFICATION
                                           , ushort                           amplificationID                  [[ amplification_id ]]
#endif
#ifdef USE_POINT_RENDERING
                                           
                                           , constant float3&                 vfx_pointSize
#endif
#ifdef USE_DISPLACEMENT_MAP
#if USE_ARGUMENT_BUFFERS
#define u_displacementTexture           vfx_commonprofile.displacementTexture
#define u_displacementTextureSampler    vfx_commonprofile.displacementSampler
#else
                                           , texture2d<float>                 u_displacementTexture
                                           , sampler                          u_displacementTextureSampler
#endif 
#endif 
#ifdef USE_VERTEX_EXTRA_ARGUMENTS
                                           __VertexExtraArguments__
#endif
                                           )
    commonprofile_io out;
    
#ifdef USE_MULTIPLE_RENDERING
#ifdef USE_VERTEX_AMPLIFICATION
    constant VFXWorldBuffer& vfx_frame = vfx_frame_multi[amplificationID];
#else
    out.instanceID = vfx_instanceID / USE_MULTIPLE_RENDERING;
    out.sliceIndex = vfx_instanceID % USE_MULTIPLE_RENDERING;
    constant VFXWorldBuffer& vfx_frame = vfx_frame_multi[out.sliceIndex];
#endif
    
#ifdef USE_INSTANCING
#ifdef USE_VERTEX_AMPLIFICATION
    constant commonprofile_node& vfx_node = vfx_nodes[USE_MULTIPLE_RENDERING * vfx_instanceID + amplificationID];
#else
    
    
    constant commonprofile_node& vfx_node = vfx_nodes[vfx_instanceID];
#endif
#else
#ifdef USE_VERTEX_AMPLIFICATION
    constant commonprofile_node& vfx_node = vfx_nodes[amplificationID];
#else
    constant commonprofile_node& vfx_node = vfx_nodes[out.sliceIndex];
#endif
#endif
    
#else 
    
#ifdef USE_INSTANCING
    out.instanceID = vfx_instanceID;
    constant commonprofile_node& vfx_node = vfx_nodes[vfx_instanceID];
#endif
    
#endif 
    
    
#ifdef USE_TESSELLATION
    uint vfx_vertexID; 
    vfx_vertexID = 0;
#endif
    
    
    
    
    
    VFXShaderGeometry _geometry;
    
#if !defined(USE_TESSELLATION)
    
    
    _geometry.position = float4(in.position, 1.f);
#if defined(USE_NORMAL) && defined(HAS_NORMAL)
    _geometry.normal = in.normal;
#endif
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
    _geometry.tangent = in.tangent;
#endif
#if defined(NEED_IN_TEXCOORD0) || defined(DEBUG_PIXEL)
    _geometry.texcoords[0] = in.texcoord0;
#endif
#ifdef NEED_IN_TEXCOORD1
    _geometry.texcoords[1] = in.texcoord1;
#endif
#ifdef NEED_IN_TEXCOORD2
    _geometry.texcoords[2] = in.texcoord2;
#endif
#ifdef NEED_IN_TEXCOORD3
    _geometry.texcoords[3] = in.texcoord3;
#endif
#ifdef NEED_IN_TEXCOORD4
    _geometry.texcoords[4] = in.texcoord4;
#endif
#ifdef NEED_IN_TEXCOORD5
    _geometry.texcoords[5] = in.texcoord5;
#endif
#ifdef NEED_IN_TEXCOORD6
    _geometry.texcoords[6] = in.texcoord6;
#endif
#ifdef NEED_IN_TEXCOORD7
    _geometry.texcoords[7] = in.texcoord7;
#endif
#ifdef HAS_VERTEX_COLOR
    _geometry.color = in.color;
#elif USE_VERTEX_COLOR
    _geometry.color = float4(1.);
#endif
    
#else 
    
#ifdef USE_OPENSUBDIV
#if OSD_IS_ADAPTIVE
#if USE_STAGE_IN
    int3 patchParam = patchInput.patchParam;
#else
    int3 patchParam = patchInput.patchParamBuffer[patchID];
#endif
    
    int refinementLevel = OsdGetPatchRefinementLevel(patchParam);
    float tessellationLevel = min(osdTessellationLevel, (float)OSD_MAX_TESS_LEVEL) / exp2((float)refinementLevel - 1);
    
    OsdPatchVertex patchVertex = OsdComputePatch(tessellationLevel, patchCoord, patchID, patchInput);
    
#if defined(OSD_FVAR_WIDTH)
    int patchIndex = OsdGetPatchIndex(patchID);
#if OSD_FVAR_USES_MULTIPLE_CHANNELS
    OsdInterpolateFaceVarings(_geometry, patchCoord.xy, patchIndex, osdFaceVaryingChannelCount, osdFaceVaryingChannelDescriptors, osdFaceVaryingPatchArrayIndex, osdFaceVaryingChannelsPackedData);
#else
    OsdInterpolateFaceVarings(_geometry, patchCoord.xy, patchIndex, osdFaceVaryingIndices, osdFaceVaryingData, osdFaceVaryingPatchParams, osdFaceVaryingPatchArray);
#endif
#endif
    
    _geometry.position = float4(patchVertex.position, 1.f);
    
#if defined(USE_NORMAL)
    _geometry.normal = patchVertex.normal;
#endif
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
    _geometry.tangent = float4(patchVertex.tangent, -1.f);
    
#endif
#if defined(NEED_IN_TEXCOORD0) && (OSD_TEXCOORD0_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[0] = patchVertex.texcoord0;
#endif
#if defined(NEED_IN_TEXCOORD1) && (OSD_TEXCOORD1_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[1] = patchVertex.texcoord1;
#endif
#if defined(NEED_IN_TEXCOORD2) && (OSD_TEXCOORD2_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[2] = patchVertex.texcoord2;
#endif
#if defined(NEED_IN_TEXCOORD3) && (OSD_TEXCOORD3_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[3] = patchVertex.texcoord3;
#endif
#if defined(NEED_IN_TEXCOORD4) && (OSD_TEXCOORD4_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[4] = patchVertex.texcoord4;
#endif
#if defined(NEED_IN_TEXCOORD5) && (OSD_TEXCOORD5_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[5] = patchVertex.texcoord5;
#endif
#if defined(NEED_IN_TEXCOORD6) && (OSD_TEXCOORD6_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[6] = patchVertex.texcoord6;
#endif
#if defined(NEED_IN_TEXCOORD7) && (OSD_TEXCOORD7_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[7] = patchVertex.texcoord7;
#endif
#if defined(HAS_VERTEX_COLOR) && (OSD_COLOR_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.color = patchVertex.color;
#endif
    
#else 
    
#if OSD_PATCH_QUADS
    const uint primitiveIndex = vertexID / 6;
#ifdef USE_NORMAL
    float3 p0 = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 4 + 0]].position;
    float3 p1 = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 4 + 1]].position;
    float3 p2 = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 4 + 2]].position;
    float3 normal = normalize(cross(p2 - p1, p0 - p1));
#endif
    const uint triangleIndices[6] = { 0, 1, 2, 0, 2, 3 };
    const uint quadVertexIndex = triangleIndices[vertexID % 6];
    osd_packed_vertex osdVertex = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 4 + quadVertexIndex]];
#elif OSD_PATCH_TRIANGLES
    const uint primitiveIndex = vertexID / 3;
#ifdef USE_NORMAL
    float3 p0 = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 3 + 0]].position;
    float3 p1 = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 3 + 1]].position;
    float3 p2 = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 3 + 2]].position;
    float3 normal = normalize(cross(p2 - p1, p0 - p1));
#endif
    osd_packed_vertex osdVertex = osdVertexBuffer[osdIndicesBuffer[vertexID]];
#endif
    
    float3 position = osdVertex.position;
    
#if defined(OSD_FVAR_WIDTH)
    int patchIndex = OsdGetPatchIndex(primitiveIndex);
#if OSD_PATCH_QUADS
    float2 quadUVs[4] = { float2(0,0), float2(1,0), float2(1,1), float2(0,1) };
#if OSD_FVAR_USES_MULTIPLE_CHANNELS
    OsdInterpolateFaceVarings(_geometry, quadUVs[quadVertexIndex], patchIndex, osdFaceVaryingChannelCount, osdFaceVaryingChannelDescriptors, osdFaceVaryingPatchArrayIndex, osdFaceVaryingChannelsPackedData);
#else
    OsdInterpolateFaceVarings(_geometry, quadUVs[quadVertexIndex], patchIndex, osdFaceVaryingIndices, osdFaceVaryingData);
#endif
#elif OSD_PATCH_TRIANGLES
    
#endif
#endif 
    
#if defined(NEED_IN_TEXCOORD0) && (OSD_TEXCOORD0_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[0] = osdVertex.texcoord0;
#endif
#if defined(NEED_IN_TEXCOORD1) && (OSD_TEXCOORD1_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[1] = osdVertex.texcoord1;
#endif
#if defined(NEED_IN_TEXCOORD2) && (OSD_TEXCOORD2_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[2] = osdVertex.texcoord2;
#endif
#if defined(NEED_IN_TEXCOORD3) && (OSD_TEXCOORD3_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[3] = osdVertex.texcoord3;
#endif
#if defined(NEED_IN_TEXCOORD4) && (OSD_TEXCOORD4_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[4] = osdVertex.texcoord4;
#endif
#if defined(NEED_IN_TEXCOORD5) && (OSD_TEXCOORD5_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[5] = osdVertex.texcoord5;
#endif
#if defined(NEED_IN_TEXCOORD6) && (OSD_TEXCOORD6_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[6] = osdVertex.texcoord6;
#endif
#if defined(NEED_IN_TEXCOORD7) && (OSD_TEXCOORD7_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[7] = osdVertex.texcoord7;
#endif
#if defined(HAS_VERTEX_COLOR) && (OSD_COLOR_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.color = osdVertex.color;
#endif
    
    _geometry.position = float4(position, 1.f);
#ifdef USE_NORMAL
    _geometry.normal = normal;
#endif
    
#endif 
    
#else 
    
    
    
    
    
#if defined(TESSELLATION_SMOOTHING_MODE_PN_TRIANGLE) || defined(TESSELLATION_SMOOTHING_MODE_PHONG)
    float3 P0 = in.controlPoints[0].position;
    float3 P1 = in.controlPoints[1].position;
    float3 P2 = in.controlPoints[2].position;
    float3 N0 = in.controlPoints[0].normal;
    float3 N1 = in.controlPoints[1].normal;
    float3 N2 = in.controlPoints[2].normal;
#if defined(TESSELLATION_SMOOTHING_MODE_PN_TRIANGLE)
    float3 position, normal;
    vfx_smooth_geometry_pn_triangle(position, normal, patchCoord, P0, P1, P2, N0, N1, N2);
#elif defined(TESSELLATION_SMOOTHING_MODE_PHONG)
    float3 position, normal;
    vfx_smooth_geometry_phong(position, normal, patchCoord, P0, P1, P2, N0, N1, N2);
#endif
    _geometry.position = float4(position, 1.f);
#ifdef USE_NORMAL
    _geometry.normal = normal;
#endif
#else 
    
    _geometry.position = float4(vfx::barycentric_mix(in.controlPoints[0].position, in.controlPoints[1].position, in.controlPoints[2].position, patchCoord), 1.f);
#if defined(USE_NORMAL) && defined(HAS_NORMAL)
    _geometry.normal = normalize(vfx::barycentric_mix(in.controlPoints[0].normal, in.controlPoints[1].normal, in.controlPoints[2].normal, patchCoord));
#endif
#endif 
    
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
    _geometry.tangent = normalize(vfx::barycentric_mix(in.controlPoints[0].tangent, in.controlPoints[1].tangent, in.controlPoints[2].tangent, patchCoord));
#endif
#ifdef NEED_IN_TEXCOORD0
    _geometry.texcoords[0] = vfx::barycentric_mix(in.controlPoints[0].texcoord0, in.controlPoints[1].texcoord0, in.controlPoints[2].texcoord0, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD1
    _geometry.texcoords[1] = vfx::barycentric_mix(in.controlPoints[0].texcoord1, in.controlPoints[1].texcoord1, in.controlPoints[2].texcoord1, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD2
    _geometry.texcoords[2] = vfx::barycentric_mix(in.controlPoints[0].texcoord2, in.controlPoints[1].texcoord2, in.controlPoints[2].texcoord2, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD3
    _geometry.texcoords[3] = vfx::barycentric_mix(in.controlPoints[0].texcoord3, in.controlPoints[1].texcoord3, in.controlPoints[2].texcoord3, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD4
    _geometry.texcoords[4] = vfx::barycentric_mix(in.controlPoints[0].texcoord4, in.controlPoints[1].texcoord4, in.controlPoints[2].texcoord4, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD5
    _geometry.texcoords[5] = vfx::barycentric_mix(in.controlPoints[0].texcoord5, in.controlPoints[1].texcoord5, in.controlPoints[2].texcoord5, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD6
    _geometry.texcoords[6] = vfx::barycentric_mix(in.controlPoints[0].texcoord6, in.controlPoints[1].texcoord6, in.controlPoints[2].texcoord6, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD7
    _geometry.texcoords[7] = vfx::barycentric_mix(in.controlPoints[0].texcoord7, in.controlPoints[1].texcoord7, in.controlPoints[2].texcoord7, patchCoord);
#endif
#ifdef HAS_VERTEX_COLOR
    _geometry.color = vfx::barycentric_mix(in.controlPoints[0].color, in.controlPoints[1].color, in.controlPoints[2].color, patchCoord);
#elif USE_VERTEX_COLOR
    _geometry.color = float4(1.);
#endif
    
#endif 
    
#endif 
    
#ifdef USE_POINT_RENDERING
    _geometry.pointSize = vfx_pointSize.x;
#endif
    
#ifdef USE_TEXCOORD
    __VertexDoVertexOnlyTexcoord__
#endif
    
#ifdef USE_DISPLACEMENT_MAP
    applyDisplacement(u_displacementTexture, u_displacementTextureSampler, _displacementTexcoord, _geometry, vfx_commonprofile);
    out.displacementTexcoord = _displacementTexcoord;
#endif
    
    
    
    
    
#ifdef USE_GEOMETRY_MODIFIER
    
    __DoGeometryModifier__
    
#endif
    
#ifdef USE_CLIP_DISTANCE0
    out.clipDistance[0] = _geometry.clipDistance0;
#endif
#ifdef USE_CLIP_DISTANCE1
    out.clipDistance[1] = _geometry.clipDistance1;
#endif
#ifdef USE_CLIP_DISTANCE2
    out.clipDistance[2] = _geometry.clipDistance2;
#endif
#ifdef USE_CLIP_DISTANCE3
    out.clipDistance[3] = _geometry.clipDistance3;
#endif
    
    
    
    
    
    
#if defined(USE_POSITION) || (defined(USE_NORMAL) && defined(HAS_OR_GENERATES_NORMAL)) || defined(USE_TANGENT) || defined(USE_BITANGENT) || defined(USE_INSTANCING)
    VFXShaderSurface _surface;
#endif
#if defined(USE_POSITION) || defined(USE_INSTANCING)
    _surface.position = (vfx_node.modelViewTransform * _geometry.position).xyz;
#endif
#if defined(USE_NORMAL) && defined(HAS_OR_GENERATES_NORMAL)
#ifdef HINT_UNIFORM_SCALE
    float3x3 nrmTransform = vfx::mat3(vfx_node.modelViewTransform);
    _surface.normal = nrmTransform * _geometry.normal;
#else
    float3x3 modelViewTransform = vfx::mat3(vfx_node.modelViewTransform);
    float3 invScaleSquared = 1.f / float3(length_squared(modelViewTransform[0]),
                                          length_squared(modelViewTransform[1]),
                                          length_squared(modelViewTransform[2]));
    _surface.normal = normalize(modelViewTransform * (_geometry.normal * invScaleSquared));
#endif
#ifdef USE_GBUFFER_OUTPUT
    _surface.normal = vfx::mat3(vfx_node.modelTransform) * _geometry.normal;
#endif
#endif
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
    _surface.tangent = normalize(vfx::mat3(vfx_node.modelViewTransform) * _geometry.tangent.xyz);
    _surface.bitangent = _geometry.tangent.w * cross(_surface.tangent, _surface.normal); 
    
#endif
    
    
#ifdef USE_VIEW
    _surface.view = normalize(-_surface.position);
#endif
    
    
    
    
    
#ifdef USE_PER_VERTEX_LIGHTING
    
    VFXShaderLightingContribution _lightingContribution(_surface, out);
    _lightingContribution.diffuse = 0.;
  #ifdef USE_SPECULAR
    _lightingContribution.specular = 0.;
    _surface.shininess = vfx_commonprofile.materialShininess;
  #endif
    
    __VertexDoLighting__
    
    out.diffuse = _lightingContribution.diffuse;
  #ifdef USE_SPECULAR
    out.specular = _lightingContribution.specular;
  #endif
#endif
#if defined(USE_POSITION) && (USE_POSITION == 2)
    out.position = _surface.position;
#endif
#if defined(USE_NORMAL) && (USE_NORMAL == 2) && defined(HAS_OR_GENERATES_NORMAL)
    out.normal = _surface.normal;
#endif
#if defined(USE_TANGENT) && (USE_TANGENT == 2)
    out.tangent = _surface.tangent;
#endif
#if defined(USE_BITANGENT) && (USE_BITANGENT == 2)
    out.bitangent = _surface.bitangent;
#endif
#ifdef USE_VERTEX_COLOR
    out.vertexColor = _geometry.color;
#endif
    
#if DEBUG_PIXEL
    out.uv0 = _geometry.texcoords[0];
#endif
#ifdef USE_TEXCOORD
    __VertexDoTexcoord__
#endif
    
    
    
    
    
#if defined(USE_POSITION) || defined(USE_INSTANCING)
    out.fragmentPosition = vfx_frame.projectionTransform * float4(_surface.position, 1.);
#elif defined(USE_MODELVIEWPROJECTIONTRANSFORM) 
    out.fragmentPosition = vfx_node.modelViewProjectionTransform * _geometry.position;
#endif
    
#ifdef USE_NODE_OPACITY
    out.nodeOpacity = vfx_node.nodeOpacity;
#endif
    
#ifdef USE_POINT_RENDERING
    float screenSize = _geometry.pointSize / out.fragmentPosition.w;
    out.fragmentSize = clamp(screenSize, vfx_pointSize.y, vfx_pointSize.z);
#endif
    
#ifdef USE_LASTFRAMETRANSFORM
    float4 lastFrameFragmentPosition = vfx_frame.lastFrameViewProjectionTransform * vfx_node.lastFrameModelTransform * _geometry.position;
    out.mv_fragment = out.fragmentPosition.xyw;
    out.mv_lastFragment = lastFrameFragmentPosition.xyw;
#endif
    
#ifdef USE_OUTLINE
out.outlineHash = hash(vfx_node.modelTransform[3].xy)+1.f/255.f;
#endif
    
    return out;
struct VFXOutput
    float4 color [[ color(0) ]];
#ifdef USE_COLOR1_OUTPUT
    half4 color1 [[ color(1) ]];
#endif
#ifdef USE_NORMALS_OUTPUT
    half4 normals [[ color(2) ]];
#endif
#if defined(USE_MOTIONBLUR) && !defined(USE_GBUFFER_OUTPUT)
    half4 motionblur [[ color(3) ]];
#endif
#ifdef USE_REFLECTANCE_ROUGHNESS_OUTPUT
    half4 reflectanceRoughnessOutput [[ color(4) ]];
#endif
#ifdef USE_RADIANCE_OUTPUT
    half4 radiance [[ color(5) ]];
#endif
#ifdef USE_GBUFFER_OUTPUT
    float4 albedo [[ color(VFXGBufferAttachmentAlbedo) ]];
    float4 normals [[ color(VFXGBufferAttachmentNormal) ]];
    float4 roughmetal [[ color(VFXGBufferAttachmentRoughnessMetalness) ]];
    
#ifdef USE_MOTIONBLUR
    float4 velocity [[ color(VFXGBufferAttachmentVelocity) ]];
#else
    float2 velocity [[ color(VFXGBufferAttachmentVelocity) ]];
#endif
    float4 clearCoat [[ color(VFXGBufferAttachmentClearCoat) ]];
    float4 subsurface [[ color(VFXGBufferAttachmentSubsurface) ]];
#endif
    
#ifdef USE_MODIFIER_FRAMEBUFFER
struct VFXFramebuffer
    float4 color;
#endif
fragment VFXOutput commonprofile_frag(commonprofile_io                   in                          [[ stage_in  ]]
                                      , constant commonprofile_uniforms& vfx_commonprofile           [[ buffer(0) ]]
#ifdef USE_MULTIPLE_RENDERING
                                      , constant VFXWorldBuffer*         vfx_frame_multi             [[ buffer(1) ]]
#else
                                      , constant VFXWorldBuffer&         vfx_frame                   [[ buffer(1) ]]
#endif
#if defined(USE_INSTANCING) || defined(USE_MULTIPLE_RENDERING)
                                      , constant commonprofile_node*     vfx_nodes                   [[ buffer(2) ]]
#else
                                      , constant commonprofile_node&     vfx_node                    [[ buffer(2) ]]
#endif
#ifdef USE_PER_PIXEL_LIGHTING
                                      , constant vfx_light*              vfx_lights                  [[ buffer(3) ]]
                                      , constant float4*                 u_shadowKernel
                                      , texture2d_array<float>           u_areaLightBakedDataTexture
#ifdef CFX_SUPPORT_CUBE_ARRAY
                                      , texturecube_array<half>          u_reflectionProbeTexture
#else
                                      , texture2d_array<half>            u_reflectionProbeTexture
#endif
                                      , texture3d<ushort>                u_clusterTexture
#ifdef CFX_USE_TEXTURE_FOR_LIGHT_INDICES
                                      , texture1d<ushort>                u_lightIndicesTexture
#else
                                      , constant CFXLightIndexType*      u_lightIndicesBuffer
#endif
#endif
#if defined(CFX_SUPPORTS_PROGRAMMABLE_BLENDING) && defined(USE_MODIFIER_FRAMEBUFFER_COLOR0)
                                      , float4                           framebufferColor0           [[ color(0) ]]
#endif
#if USE_ARGUMENT_BUFFERS
#define u_emissionTexture               vfx_commonprofile.emissionTexture
#define u_emissionTextureSampler        vfx_commonprofile.emissionSampler
#define u_ambientOcclusionTexture       vfx_commonprofile.ambientOcclusionTexture
#define u_ambientOcclusionTextureSampler vfx_commonprofile.ambientOcclusionSampler
#define u_diffuseTexture                vfx_commonprofile.diffuseTexture
#define u_diffuseTextureSampler         vfx_commonprofile.diffuseSampler
#define u_specularTexture               vfx_commonprofile.specularTexture
#define u_specularTextureSampler        vfx_commonprofile.specularSampler
#define u_reflectiveTexture             vfx_commonprofile.reflectiveTexture
#define u_reflectiveTextureSampler      vfx_commonprofile.reflectiveSampler
#define u_transparentTexture            vfx_commonprofile.transparentTexture
#define u_transparentTextureSampler     vfx_commonprofile.transparentSampler
#define u_multiplyTexture               vfx_commonprofile.multiplyTexture
#define u_multiplyTextureSampler        vfx_commonprofile.multiplySampler
#define u_normalTexture                 vfx_commonprofile.normalTexture
#define u_normalTextureSampler          vfx_commonprofile.normalSampler
#define u_selfIlluminationTexture       vfx_commonprofile.selfIlluminationTexture
#define u_selfIlluminationTextureSampler vfx_commonprofile.selfIlluminationSampler
#define u_metalnessTexture              vfx_commonprofile.metalnessTexture
#define u_metalnessTextureSampler       vfx_commonprofile.metalnessSampler
#define u_roughnessTexture              vfx_commonprofile.roughnessTexture
#define u_roughnessTextureSampler       vfx_commonprofile.roughnessSampler
#else
#ifdef USE_EMISSION_MAP
                                      , texture2d<float>              u_emissionTexture
                                      , sampler                       u_emissionTextureSampler
#endif
#ifdef USE_AMBIENTOCCLUSION_MAP
                                      , texture2d<float>              u_ambientOcclusionTexture
                                      , sampler                       u_ambientOcclusionTextureSampler
#endif
#ifdef USE_DIFFUSE_MAP
                                      , texture2d<float>              u_diffuseTexture
                                      , sampler                       u_diffuseTextureSampler
#endif
#ifdef USE_SPECULAR_MAP
                                      , texture2d<float>              u_specularTexture
                                      , sampler                       u_specularTextureSampler
#endif
#ifdef USE_REFLECTIVE_MAP
                                      , texture2d<float>              u_reflectiveTexture
                                      , sampler                       u_reflectiveTextureSampler
#elif defined(USE_REFLECTIVE_CUBEMAP)
                                      , texturecube<float>            u_reflectiveTexture
                                      , sampler                       u_reflectiveTextureSampler
#endif
#ifdef USE_TRANSPARENT_MAP
                                      , texture2d<float>              u_transparentTexture
                                      , sampler                       u_transparentTextureSampler
#endif
#ifdef USE_MULTIPLY_MAP
                                      , texture2d<float>              u_multiplyTexture
                                      , sampler                       u_multiplyTextureSampler
#endif
#ifdef USE_NORMAL_MAP
                                      , texture2d<float>              u_normalTexture
                                      , sampler                       u_normalTextureSampler
#endif
#ifdef USE_SELFILLUMINATION_MAP
                                      , texture2d<float>              u_selfIlluminationTexture
                                      , sampler                       u_selfIlluminationTextureSampler
#endif
#ifdef USE_DISPLACEMENT_MAP
                                      , texture2d<float>              u_displacementTexture
                                      , sampler                       u_displacementTextureSampler
#endif
#ifdef USE_PBR
#ifdef USE_METALNESS_MAP
                                      , texture2d<float>              u_metalnessTexture
                                      , sampler                       u_metalnessTextureSampler
#endif
#ifdef USE_ROUGHNESS_MAP
                                      , texture2d<float>              u_roughnessTexture
                                      , sampler                       u_roughnessTextureSampler
#endif
#ifdef USE_CLEARCOAT_MAP
                                      , texture2d<float>              u_clearCoatTexture
                                      , sampler                       u_clearCoatTextureSampler
#endif
#ifdef USE_CLEARCOATROUGHNESS_MAP
                                      , texture2d<float>              u_clearCoatRoughnessTexture
                                      , sampler                       u_clearCoatRoughnessTextureSampler
#endif
#ifdef USE_CLEARCOATNORMAL_MAP
                                      , texture2d<float>              u_clearCoatNormalTexture
                                      , sampler                       u_clearCoatNormalTextureSampler
#endif
#ifdef USE_SUBSURFACE_MAP
                                      , texture2d<float>              u_subsurfaceTexture
                                      , sampler                       u_subsurfaceTextureSampler
#endif
#ifdef USE_SUBSURFACERADIUS_MAP
                                      , texture2d<float>              u_subsurfaceRadiusTexture
                                      , sampler                       u_subsurfaceRadiusTextureSampler
#endif
#endif 
#endif 
#ifdef USE_PBR
                                      , texturecube<float>            u_radianceTexture
                                      , texture2d<float>              u_specularDFGDiffuseHammonTexture
#if !defined(USE_SELFILLUMINATION_MAP)
                                      , texturecube<float>            u_irradianceTexture
#endif
#endif 
#ifdef USE_SSAO
                                      , texture2d<float>              u_ssaoTexture
#endif
#ifdef USE_FRAGMENT_EXTRA_ARGUMENTS
                                      __FragmentExtraArguments__
#endif
#if defined(USE_DOUBLE_SIDED)
                                      , bool                          isFrontFacing                    [[front_facing]]
#endif
#ifdef USE_POINT_RENDERING
                                      , float2                        pointCoord                       [[point_coord]]
#endif
#ifdef USE_VERTEX_AMPLIFICATION
                                      , ushort                        amplificationID                  [[amplification_id]]
#endif
#ifdef USE_BARYCENTRIC_COORD
                                      , float3                        u_barycentricCoord                 [[barycentric_coord]]
#endif
                                      )
#ifdef USE_MULTIPLE_RENDERING
    
#ifdef USE_VERTEX_AMPLIFICATION
    constant VFXWorldBuffer& vfx_frame = vfx_frame_multi[amplificationID];
#else
    constant VFXWorldBuffer& vfx_frame = vfx_frame_multi[in.sliceIndex];
#endif
    
#ifdef USE_INSTANCING
#ifdef USE_VERTEX_AMPLIFICATION
    constant commonprofile_node& vfx_node = vfx_nodes[USE_MULTIPLE_RENDERING * in.instanceID + amplificationID];
#else
    constant commonprofile_node& vfx_node = vfx_nodes[USE_MULTIPLE_RENDERING * in.instanceID + in.sliceIndex];
#endif
#else
#ifdef USE_VERTEX_AMPLIFICATION
    constant commonprofile_node& vfx_node = vfx_nodes[amplificationID];
#else
    constant commonprofile_node& vfx_node = vfx_nodes[in.sliceIndex];
#endif
#endif
    
#else 
    
#ifdef USE_INSTANCING
    constant commonprofile_node& vfx_node = vfx_nodes[in.instanceID];
#endif
    
#endif 
    
    VFXOutput _output;
    
    
    
    
    VFXShaderSurface _surface;
#ifdef USE_TEXCOORD
    __FragmentDoTexcoord__
#endif
    _surface.ambientOcclusion = 1.f; 
#ifdef USE_AMBIENTOCCLUSION_MAP
#if defined(USE_AMBIENTOCCLUSION_TEXTURE_COMPONENT)
    _surface.ambientOcclusion = colorFromMask(u_ambientOcclusionTexture.sample(u_ambientOcclusionTextureSampler, _surface.ambientOcclusionTexcoord), USE_AMBIENTOCCLUSION_TEXTURE_COMPONENT).r;
#else
    _surface.ambientOcclusion = u_ambientOcclusionTexture.sample(u_ambientOcclusionTextureSampler, _surface.ambientOcclusionTexcoord).r;
#endif 
#ifdef USE_AMBIENTOCCLUSION_INTENSITY
    _surface.ambientOcclusion = saturate(mix(1.f, _surface.ambientOcclusion, vfx_commonprofile.ambientOcclusionIntensity));
#endif
#endif
#if defined(USE_SSAO)
    _surface.ambientOcclusion *= u_ssaoTexture.sample( sampler(filter::linear), in.fragmentPosition.xy * vfx_frame.inverseResolution.xy ).x;
#endif
    
#ifdef USE_DIFFUSE_MAP
    _surface.diffuse = u_diffuseTexture.sample(u_diffuseTextureSampler, _surface.diffuseTexcoord);
#if defined(USE_DIFFUSE_TEXTURE_COMPONENT)
    _surface.diffuse = colorFromMask(_surface.diffuse, USE_DIFFUSE_TEXTURE_COMPONENT);
#endif
#ifdef USE_DIFFUSE_INTENSITY
    _surface.diffuse.rgb *= vfx_commonprofile.diffuseIntensity;
#endif
#elif defined(USE_DIFFUSE_COLOR)
    _surface.diffuse = vfx_commonprofile.diffuseColor;
#else
    _surface.diffuse = float4(0.f,0.f,0.f,1.f);
#endif
#if defined(USE_DIFFUSE) && defined(USE_VERTEX_COLOR)
    _surface.diffuse.rgb    *= in.vertexColor.rgb;
    _surface.diffuse        *= in.vertexColor.a; 
#endif
#ifdef USE_SPECULAR_MAP
    _surface.specular = u_specularTexture.sample(u_specularTextureSampler, _surface.specularTexcoord);
#if defined(USE_SPECULAR_TEXTURE_COMPONENT)
    _surface.specular = colorFromMask(_surface.specular, USE_SPECULAR_TEXTURE_COMPONENT);
#endif
#ifdef USE_SPECULAR_INTENSITY
    _surface.specular *= vfx_commonprofile.specularIntensity;
#endif
#elif defined(USE_SPECULAR_COLOR)
    _surface.specular = vfx_commonprofile.specularColor;
#elif defined(USE_SPECULAR)
    _surface.specular = float4(0.f);
#endif
    
#ifdef USE_CLEARCOAT_MAP
    _surface.clearCoat = u_clearCoatTexture.sample(u_clearCoatTextureSampler, _surface.clearCoatTexcoord).r;
#if defined(USE_CLEARCOAT_TEXTURE_COMPONENT)
    _surface.clearCoat = colorFromMask(_surface.clearCoat, USE_CLEARCOAT_TEXTURE_COMPONENT).r;
#endif
#ifdef USE_CLEARCOAT_INTENSITY
    _surface.clearCoat *= vfx_commonprofile.clearCoatIntensity;
#endif
#elif defined(USE_CLEARCOAT_COLOR)
    _surface.clearCoat = vfx_commonprofile.clearCoat;
#else
    _surface.clearCoat = 0.f;
#endif
    
#ifdef USE_CLEARCOATROUGHNESS_MAP
#if defined(USE_CLEARCOATROUGHNESS_TEXTURE_COMPONENT)
    _surface.clearCoatRoughness = colorFromMask(u_clearCoatRoughnessTexture.sample(u_clearCoatRoughnessTextureSampler, _surface.clearCoatRoughnessTexcoord), USE_CLEARCOATROUGHNESS_TEXTURE_COMPONENT).r;
#else
    _surface.clearCoatRoughness = u_clearCoatRoughnessTexture.sample(u_clearCoatRoughnessTextureSampler, _surface.clearCoatRoughnessTexcoord).r;
#endif
#ifdef USE_CLEARCOATROUGHNESS_INTENSITY
    _surface.clearCoatRoughness *= vfx_commonprofile.clearCoatRoughnessIntensity;
#endif
#elif defined(USE_CLEARCOATROUGHNESS_COLOR)
    _surface.clearCoatRoughness = vfx_commonprofile.clearCoatRoughness;
#else
    _surface.clearCoatRoughness = 0.03f;
#endif
    
    
#ifdef USE_SUBSURFACE_MAP
    _surface.subsurface = u_subsurfaceTexture.sample(u_subsurfaceTextureSampler, _surface.subsurfaceTexcoord).r;
#if defined(USE_SUBSURFACE_TEXTURE_COMPONENT)
    _surface.subsurface = colorFromMask(_surface.subsurface, USE_SUBSURFACE_TEXTURE_COMPONENT).r;
#endif
#ifdef USE_SUBSURFACE_INTENSITY
    _surface.subsurface *= vfx_commonprofile.subsurfaceIntensity;
#endif
#elif defined(USE_SUBSURFACE_COLOR)
    _surface.subsurface = vfx_commonprofile.subsurface;
#else
    _surface.subsurface = 0.f;
#endif
    
#ifdef USE_SUBSURFACERADIUS_MAP
    _surface.subsurfaceRadius = u_subsurfaceRadiusTexture.sample(u_subsurfaceRadiusTextureSampler, _surface.subsurfaceRadiusTexcoord).r;
#if defined(USE_SUBSURFACERADIUS_TEXTURE_COMPONENT)
    _surface.subsurfaceRadius = colorFromMask(_surface.subsurfaceRadius, USE_SUBSURFACERADIUS_TEXTURE_COMPONENT).r;
#endif
#ifdef USE_SUBSURFACERADIUS_INTENSITY
    _surface.subsurfaceRadius *= vfx_commonprofile.subsurfaceRadiusIntensity;
#endif
#elif defined(USE_SUBSURFACERADIUS_COLOR)
    _surface.subsurfaceRadius = vfx_commonprofile.subsurfaceRadius;
#else
    _surface.subsurfaceRadius = float3(0.f);
#endif
    
#ifdef USE_EMISSION_MAP
    _surface.emission = u_emissionTexture.sample(u_emissionTextureSampler, _surface.emissionTexcoord);
#if defined(USE_EMISSION_TEXTURE_COMPONENT)
    _surface.emission = colorFromMask(_surface.emission, USE_EMISSION_TEXTURE_COMPONENT);
#endif
#ifdef USE_EMISSION_INTENSITY
    _surface.emission *= vfx_commonprofile.emissionIntensity;
#endif
#elif defined(USE_EMISSION_COLOR)
    _surface.emission = vfx_commonprofile.emissionColor;
#elif defined(USE_EMISSION)
    _surface.emission = float4(0.);
#endif
#ifdef USE_SELFILLUMINATION_MAP
    _surface.selfIllumination = u_selfIlluminationTexture.sample(u_selfIlluminationTextureSampler, _surface.selfIlluminationTexcoord);
#if defined(USE_SELFILLUMINATION_TEXTURE_COMPONENT)
    _surface.selfIllumination = colorFromMask(_surface.selfIllumination, USE_SELFILLUMINATION_TEXTURE_COMPONENT);
#endif
#ifdef USE_SELFILLUMINATION_INTENSITY
    _surface.selfIllumination *= vfx_commonprofile.selfIlluminationIntensity;
#endif
#elif defined(USE_SELFILLUMINATION_COLOR)
    _surface.selfIllumination = vfx_commonprofile.selfIlluminationColor;
#elif defined(USE_SELFILLUMINATION)
    _surface.selfIllumination = float4(0.);
#endif
#ifdef USE_MULTIPLY_MAP
    _surface.multiply = u_multiplyTexture.sample(u_multiplyTextureSampler, _surface.multiplyTexcoord);
#if defined(USE_MULTIPLY_TEXTURE_COMPONENT)
    _surface.multiply = colorFromMask(_surface.multiply, USE_MULTIPLY_TEXTURE_COMPONENT);
#endif
#ifdef USE_MULTIPLY_INTENSITY
    _surface.multiply = mix(float4(1.), _surface.multiply, vfx_commonprofile.multiplyIntensity);
#endif
#elif defined(USE_MULTIPLY_COLOR)
    _surface.multiply = vfx_commonprofile.multiplyColor;
#elif defined(USE_MULTIPLY)
    _surface.multiply = float4(1.);
#endif
#ifdef USE_TRANSPARENT_MAP
    _surface.transparent = u_transparentTexture.sample(u_transparentTextureSampler, _surface.transparentTexcoord);
#if defined(USE_TRANSPARENT_TEXTURE_COMPONENT)
    _surface.transparent = colorFromMask(_surface.transparent, USE_TRANSPARENT_TEXTURE_COMPONENT);
#endif
#ifdef USE_TRANSPARENT_INTENSITY
    _surface.transparent *= vfx_commonprofile.transparentIntensity;
#endif
#elif defined(USE_TRANSPARENT_COLOR)
    _surface.transparent = vfx_commonprofile.transparentColor;
#elif defined(USE_TRANSPARENT)
    _surface.transparent = float4(1.f);
#endif
    
#ifdef USE_METALNESS_MAP
#if defined(USE_METALNESS_TEXTURE_COMPONENT)
    _surface.metalness = colorFromMask(u_metalnessTexture.sample(u_metalnessTextureSampler, _surface.metalnessTexcoord), USE_METALNESS_TEXTURE_COMPONENT).r;
#else
    _surface.metalness = u_metalnessTexture.sample(u_metalnessTextureSampler, _surface.metalnessTexcoord).r;
#endif
#ifdef USE_METALNESS_INTENSITY
    _surface.metalness *= vfx_commonprofile.metalnessIntensity;
#endif
#elif defined(USE_METALNESS_COLOR)
    _surface.metalness = vfx_commonprofile.metalness;
#else
    _surface.metalness = 0.f;
#endif
    
#ifdef USE_ROUGHNESS_MAP
#if defined(USE_ROUGHNESS_TEXTURE_COMPONENT)
    _surface.roughness = colorFromMask(u_roughnessTexture.sample(u_roughnessTextureSampler, _surface.roughnessTexcoord), USE_ROUGHNESS_TEXTURE_COMPONENT).r;
#else
    _surface.roughness = u_roughnessTexture.sample(u_roughnessTextureSampler, _surface.roughnessTexcoord).r;
#endif
#ifdef USE_ROUGHNESS_INTENSITY
    _surface.roughness *= vfx_commonprofile.roughnessIntensity;
#endif
#elif defined(USE_ROUGHNESS_COLOR)
    _surface.roughness = vfx_commonprofile.roughness;
#else
    _surface.roughness = 0.f;
#endif
#if (defined USE_POSITION) && (USE_POSITION == 2)
    _surface.position = in.position;
#endif
#if (defined USE_NORMAL) && (USE_NORMAL == 2)
#if defined(HAS_NORMAL) || defined(USE_OPENSUBDIV)
#ifdef USE_DOUBLE_SIDED
    _surface.geometryNormal = normalize(in.normal.xyz) * (isFrontFacing ? 1.f : -1.f );
#else
    _surface.geometryNormal = normalize(in.normal.xyz);
#endif
#else 
    _surface.geometryNormal = normalize( cross(dfdy( _surface.position ), dfdx( _surface.position ) ));
#endif
    _surface.normal = _surface.geometryNormal;
    _surface.clearCoatNormal = _surface.geometryNormal;
#endif
#if defined(USE_TANGENT) && (USE_TANGENT == 2)
    _surface.tangent = in.tangent;
#endif
#if defined(USE_BITANGENT) && (USE_BITANGENT == 2)
    _surface.bitangent = in.bitangent;
#endif
#if (defined USE_VIEW) && (USE_VIEW == 2)
    _surface.view = normalize(-in.position);
    {
        
        
        float NoV = dot(_surface.geometryNormal, _surface.view);
        _surface.view = _surface.view + max(0.f, -2.f * NoV) * _surface.geometryNormal;         
        
    }
#endif
#if defined(USE_NORMAL_MAP)
    {
        float3x3 ts2vs = float3x3(_surface.tangent, _surface.bitangent, _surface.normal);
#ifdef USE_NORMAL_MAP
#if defined(USE_NORMAL_TEXTURE_COMPONENT)
        _surface._normalTS.xy = colorFromMask(u_normalTexture.sample(u_normalTextureSampler, _surface.normalTexcoord), USE_NORMAL_TEXTURE_COMPONENT).rg * 2.f - 1.f;
        _surface._normalTS.z = sqrt(1.f - saturate(length_squared(_surface._normalTS.xy)));
#else
        _surface._normalTS = u_normalTexture.sample(u_normalTextureSampler, _surface.normalTexcoord).rgb;
        _surface._normalTS = _surface._normalTS * 2.f - 1.f;
#endif
#ifdef USE_NORMAL_INTENSITY
        _surface._normalTS = normalize(mix(float3(0.f, 0.f, 1.f), _surface._normalTS, vfx_commonprofile.normalIntensity));
#endif
#else
        _surface._normalTS = float3(0.f, 0.f, 1.f);
#endif
        _surface.normal.rgb = normalize(ts2vs * _surface._normalTS.xyz );
    }
#else
    _surface._normalTS = float3(0.f, 0.f, 1.f);
#endif
#if defined(USE_PBR) && !defined(USE_GBUFFER_OUTPUT)
    {
        float roughness = clamp(_surface.roughness, PBR_MIN_ROUGHNESS, 1.0);
        float alpha = vfx_filteredAlphaFromRoughness(_surface.normal, roughness);
        _surface.roughness = sqrt(alpha);
    }
#endif
#if defined(USE_CLEARCOATNORMAL_MAP)
    {
        
        float3x3 ts2vs = float3x3(_surface.tangent, _surface.bitangent, _surface.geometryNormal);
#ifdef USE_CLEARCOATNORMAL_MAP
#if defined(USE_CLEARCOATNORMAL_TEXTURE_COMPONENT)
        _surface._clearCoatNormalTS.xy = colorFromMask(u_clearCoatNormalTexture.sample(u_clearCoatnormalTextureSampler, _surface.clearCoatNormalTexcoord), USE_CLEARCOATNORMAL_TEXTURE_COMPONENT).rg * 2.f - 1.f;
        _surface._clearCoatNormalTS.z = sqrt(1.f - saturate(length_squared(_surface._clearCoatNormalTS.xy)));
#else
        _surface._clearCoatNormalTS = u_clearCoatNormalTexture.sample(u_clearCoatNormalTextureSampler, _surface.clearCoatNormalTexcoord).rgb;
        _surface._clearCoatNormalTS = _surface._clearCoatNormalTS * 2.f - 1.f;
#endif
#ifdef USE_CLEARCOATNORMAL_INTENSITY
        _surface._clearCoatNormalTS = mix(float3(0.f, 0.f, 1.f), _surface._clearCoatNormalTS, vfx_commonprofile.clearCoatNormalIntensity);
#endif
#else
        _surface._clearCoatNormalTS = float3(0.f, 0.f, 1.f);
#endif
        _surface.clearCoatNormal.rgb = normalize(ts2vs * _surface._clearCoatNormalTS.xyz );
    }
#else
    _surface._clearCoatNormalTS = float3(0.f, 0.f, 1.f);
#endif
    
#ifdef USE_REFLECTIVE_MAP
    float3 refl = reflect( -_surface.view, _surface.normal );
    float m = 2.f * sqrt( refl.x*refl.x + refl.y*refl.y + (refl.z+1.f)*(refl.z+1.f));
    _surface.reflective = u_reflectiveTexture.sample(u_reflectiveTextureSampler, float2(float2(refl.x,-refl.y) / m) + 0.5f);
#if defined(USE_REFLECTIVE_TEXTURE_COMPONENT)
    _surface.reflective = colorFromMask(_surface.reflective, USE_REFLECTIVE_TEXTURE_COMPONENT).r;
#endif
#ifdef USE_REFLECTIVE_INTENSITY
    _surface.reflective *= vfx_commonprofile.reflectiveIntensity;
#endif
#elif defined(USE_REFLECTIVE_CUBEMAP)
    float3 refl = reflect( _surface.position, _surface.normal );
    _surface.reflective = u_reflectiveTexture.sample(u_reflectiveTextureSampler, vfx::mat4_mult_float3(vfx_frame.viewToCubeTransform, refl)); 
#ifdef USE_REFLECTIVE_INTENSITY
    _surface.reflective *= vfx_commonprofile.reflectiveIntensity;
#endif
#elif defined(USE_REFLECTIVE_COLOR)
    _surface.reflective = vfx_commonprofile.reflectiveColor;
#elif defined(USE_REFLECTIVE)
    _surface.reflective = float4(0.);
#endif
#ifdef USE_FRESNEL
    _surface.fresnel = vfx_commonprofile.fresnel.x + vfx_commonprofile.fresnel.y * pow(1.f - saturate(dot(_surface.view, _surface.normal)), vfx_commonprofile.fresnel.z);
    _surface.reflective *= _surface.fresnel;
#endif
#ifdef USE_SHININESS
    _surface.shininess = vfx_commonprofile.materialShininess;
#endif
    
    
    
    
    
#ifdef USE_SURFACE_MODIFIER
    
    __DoSurfaceModifier__
    
#endif
    
    
    
    
    
    VFXShaderLightingContribution _lightingContribution(_surface, in);
#ifdef USE_LIGHT_MODIFIER
    __LightModifierCopyDecl__
#endif
#ifdef USE_AMBIENT_LIGHTING
    _lightingContribution.ambient = vfx_frame.ambientLightingColor.rgb;
#endif
#ifdef USE_LIGHTING
#ifdef USE_PER_PIXEL_LIGHTING
#ifdef USE_CLUSTERED_LIGHTING
    uint3 clusterIndex;
    clusterIndex.xy = uint2(in.fragmentPosition.xy * vfx_frame.clusterScale.xy); 
    clusterIndex.z = in.position.z * vfx_frame.clusterScale.z + vfx_frame.clusterScale.w; 
    
    
    ushort4 cluster_offset_count = u_clusterTexture.read(clusterIndex);
    int lid = cluster_offset_count.x;
#endif
#ifdef USE_PBR
    _lightingContribution.prepareForPBR(u_specularDFGDiffuseHammonTexture, vfx_commonprofile.selfIlluminationOcclusion);
    
    
#ifdef USE_SELFILLUMINATION
    _lightingContribution.add_irradiance_from_selfIllum();
#else
#ifdef USE_PROBES_LIGHTING 
#ifdef USE_IBL_TRANSFORM
    _lightingContribution.add_global_irradiance_from_sh(vfx_frame.environmentTransform * vfx_frame.viewToCubeTransform, vfx_node.shCoefficients);
#else
    _lightingContribution.add_global_irradiance_from_sh(vfx_frame.viewToCubeTransform, vfx_node.shCoefficients);
#endif 
#else
#ifdef USE_IBL_TRANSFORM
    _lightingContribution.add_global_irradiance_probe(u_irradianceTexture, vfx_frame.environmentTransform * vfx_frame.viewToCubeTransform, vfx_frame.environmentIntensity);
#else
    _lightingContribution.add_global_irradiance_probe(u_irradianceTexture, vfx_frame.viewToCubeTransform, vfx_frame.environmentIntensity);
#endif 
#endif 
#endif
    
#ifndef DISABLE_SPECULAR
#ifdef CFX_USE_REFLECTION_PROBES
    int probe_count = (cluster_offset_count.z & 0xff);
    for (int i = 0 ; i < probe_count; ++i, ++lid) {
        _lightingContribution.add_local_probe(vfx_lights[LightIndex(lid)], u_reflectionProbeTexture);
    }
#if PROBES_NORMALIZATION
#if PROBES_OUTER_BLENDING
    _lightingContribution.specular += _lightingContribution.probesWeightedSum.rgb / max(1.f, _lightingContribution.probesWeightedSum.a);
#else
    _lightingContribution.specular += _lightingContribution.probesWeightedSum.rgb / _lightingContribution.probesWeightedSum.a;
#endif
    float globalFactor = saturate(1.f - _lightingContribution.probesWeightedSum.a);
#else
    float globalFactor = _lightingContribution.probeRadianceRemainingFactor;
#endif
    
#ifdef USE_IBL_TRANSFORM
    _lightingContribution.add_global_probe(vfx_frame.environmentTransform * vfx_frame.viewToCubeTransform, globalFactor * vfx_frame.environmentIntensity,
                                           u_reflectionProbeTexture);
#else
    _lightingContribution.add_global_probe(vfx_frame.viewToCubeTransform, globalFactor * vfx_frame.environmentIntensity,
                                           u_reflectionProbeTexture);
#endif 
    
#else 
    
#ifdef USE_IBL_TRANSFORM
    _lightingContribution.add_global_probe(u_radianceTexture, vfx_frame.environmentTransform * vfx_frame.viewToCubeTransform, vfx_frame.environmentIntensity);
#else
   _lightingContribution.add_global_probe(u_radianceTexture, vfx_frame.viewToCubeTransform, vfx_frame.environmentIntensity);
#endif 
    
#ifdef USE_CLEARCOAT
    
#ifdef USE_IBL_TRANSFORM
    _lightingContribution.add_global_probeClearCoat(u_radianceTexture, vfx_frame.environmentTransform * vfx_frame.viewToCubeTransform, vfx_frame.environmentIntensity);
#else
    _lightingContribution.add_global_probeClearCoat(u_radianceTexture, vfx_frame.viewToCubeTransform, vfx_frame.environmentIntensity);
#endif 
    
#endif
    
#endif 
#endif 
#endif 
    #if DEBUG_PIXEL
        switch (DEBUG_PIXEL) {
            case 1: _output.color = float4(_surface.normal * 0.5f + 0.5f, 1.f); break;
            case 2: _output.color = float4(_surface.geometryNormal * 0.5f + 0.5f, 1.f); break;
            case 3: _output.color = float4(_surface.tangent * 0.5f + 0.5f, 1.f); break;
            case 4: _output.color = float4(in.uv0, 0.f, 1.f); break;
            case 5: _output.color = float4(_surface.diffuse.rgb, 1.f); break;
            case 6: _output.color = float4(float3(_surface.roughness), 1.f); break;
            case 7: _output.color = float4(float3(_surface.metalness), 1.f); break;
            case 8: _output.color = float4(float3(_surface.ambientOcclusion), 1.f); break;
            default: break;
        }
        return _output;
    #endif
    
    __FragmentDoLighting__
    
    #ifdef USE_CLUSTERED_LIGHTING
        
        int omni_count = cluster_offset_count.y & 0xff;
        for (int i = 0 ; i < omni_count; ++i, ++lid) {
            if ((vfx_node.categoryBitmask & vfx_lights[LightIndex(lid)].categoryBitmask) == 0) continue;
            _lightingContribution.add_local_omni(vfx_lights[LightIndex(lid)]);
        }
        
        int spot_count = (cluster_offset_count.y >> 8);
        for (int i = 0 ; i < spot_count; ++i, ++lid) {
            if ((vfx_node.categoryBitmask & vfx_lights[LightIndex(lid)].categoryBitmask) == 0) continue;
            _lightingContribution.add_local_spot(vfx_lights[LightIndex(lid)]);
        }
    #endif
#else 
        _lightingContribution.diffuse = in.diffuse;
    #ifdef USE_SPECULAR
        _lightingContribution.specular = in.specular;
    #endif
#endif 
    #ifdef AVOID_OVERLIGHTING
        _lightingContribution.diffuse = saturate(_lightingContribution.diffuse);
    #ifdef USE_SPECULAR
        _lightingContribution.specular = saturate(_lightingContribution.specular);
    #endif 
    #endif 
#else 
    _lightingContribution.diffuse = float3(0.);
#endif 
    
    
    
    
#ifndef USE_GBUFFER_OUTPUT
#ifdef USE_PBR
    { 
        float3 diffuseAlbedo = mix(_lightingContribution.pbr.albedo, float3(0.0), _surface.metalness);
        
        
#ifdef USE_PBR_TRANSPARENCY
        float3 color = (_lightingContribution.ambient * _surface.ambientOcclusion) * _lightingContribution.pbr.albedo;
#else
        float3 color = (_lightingContribution.ambient * _surface.ambientOcclusion) * _surface.diffuse.rgb;
#endif
        
        color += _lightingContribution.pbr.envDiffuse;
        color += _lightingContribution.diffuse * diffuseAlbedo;
#ifndef DISABLE_SPECULAR
        color += _lightingContribution.pbr.envSpecular;
        color += _lightingContribution.specular;
#endif
#ifdef USE_EMISSION
        color += _surface.emission.rgb;
#endif
#ifdef USE_MULTIPLY
        color *= _surface.multiply.rgb;
#endif
#ifdef USE_MODULATE
        color *= _lightingContribution.modulate;
#endif
#ifndef USE_GBUFFER_OUTPUT
        _output.color.rgb = color;
#endif
    }
#else 
#ifdef USE_SHADOWONLY
    _output.color.rgb = float3(0.0);
    _output.color.a = 1. - _lightingContribution.shadowFactor;
#else
#ifdef USE_CONSTANT
    _output.color.rgb = _surface.diffuse.rgb;
    
#ifdef USE_EMISSION
    _output.color.rgb += _surface.emission.rgb;
#endif
#ifdef USE_MULTIPLY
    _output.color.rgb *= _surface.multiply.rgb;
#endif
    
#else
    _output.color.rgb = illuminate(_surface, _lightingContribution);
#endif
#endif 
#endif 
#ifndef USE_SHADOWONLY
  #ifdef USE_PBR_TRANSPARENCY
    _output.color.a = _lightingContribution.pbr.transparency;
  #else
    _output.color.a = _surface.diffuse.a;
  #endif
#endif
#ifdef USE_FOG
    applyFog(_output.color, length(_surface.position.xyz), vfx_frame.fogParameters, vfx_frame.fogColor);
#endif
#if !defined(DIFFUSE_PREMULTIPLIED) && !defined(USE_PBR_TRANSPARENCY)
    _output.color.rgb *= _surface.diffuse.a;
#endif
    
    
    
    
    
#ifdef USE_SHADOWONLY
    float transparencyFactor = 1.0;
  #ifdef USE_NODE_OPACITY
    transparencyFactor *= in.nodeOpacity;
  #endif
    _output.color.a *= transparencyFactor; 
#else 
#ifdef USE_TRANSPARENT 
    
#ifndef USE_PBR_TRANSPARENCY
  _output.color *= _surface.transparent.a;
#endif
#endif 
    
#ifdef USE_NODE_OPACITY
    _output.color *= in.nodeOpacity;
#endif
    
#endif 
#endif 
    
    
    
    
#ifdef USE_MODIFIER_FRAMEBUFFER
    const VFXFramebuffer _framebuffer = {
#if defined(CFX_SUPPORTS_PROGRAMMABLE_BLENDING) && defined(USE_MODIFIER_FRAMEBUFFER_COLOR0)
        .color = framebufferColor0
#else
        .color = 0.f
#endif
    };
#endif
    
#ifdef USE_FRAGMENT_MODIFIER
    
    __DoFragmentModifier__
    
#endif
#if defined(USE_CLUSTERED_LIGHTING) && defined(DEBUG_CLUSTER_TILE)
    _output.color.rgb = mix(_output.color.rgb, float3(vfx::debugColorForCount(clusterIndex.z).xyz), 0.1f);
    _output.color.rgb = mix(_output.color.rgb, float3(clusterIndex.x & 0x1 ^ clusterIndex.y & 0x1).xyz, 0.01f);
#endif
    
#ifdef USE_ALPHA_CUTOFF
    if (_output.color.a <= vfx_commonprofile.alphaCutoff)
        discard_fragment();
#endif
#ifdef USE_POINT_RENDERING
    if ((dfdx(pointCoord.x) < 0.5f) && (length_squared(pointCoord * 2.f - 1.f) > 1.f)) {
        discard_fragment();
    }
#endif
    
    
#ifdef USE_OUTLINE
    _output.color.rgb = in.outlineHash;
#endif
    
#if defined(USE_MOTIONBLUR) && !defined(USE_GBUFFER_OUTPUT)
#ifdef USE_MULTIPLE_RENDERING
    _output.motionblur.xy = half2((in.mv_fragment.xy - vfx_frame.viewportSize.zw) / in.mv_fragment.z - (in.mv_lastFragment.xy / in.mv_lastFragment.z))*half2(1.,-1.) * vfx_frame.motionBlurIntensity;
#else
    _output.motionblur.xy = half2((in.mv_fragment.xy / in.mv_fragment.z) - (in.mv_lastFragment.xy / in.mv_lastFragment.z))*half2(1.,-1.) * vfx_frame.motionBlurIntensity;
#endif
    _output.motionblur.z = length(_output.motionblur.xy);
    _output.motionblur.w = half(-_surface.position.z);
#endif
#ifdef USE_NORMALS_OUTPUT
    _output.normals = half4( half3(_surface.normal.xyz), half(_surface.roughness) );
#endif
    
#ifdef USE_RADIANCE_OUTPUT
    _output.radiance.rgb = half3(_lightingContribution.specular.rgb);
#endif
                                 
#ifdef USE_REFLECTANCE_ROUGHNESS_OUTPUT
#ifdef USE_PBR
    _output.reflectanceRoughnessOutput = half4( half3(_lightingContribution.pbr.probeReflectance), half(_surface.roughness) );
#else 
    _output.reflectanceRoughnessOutput = half4( 0.h );
#endif
#endif
    
#ifdef USE_BARYCENTRIC_WIREFRAME
#ifdef USE_BARYCENTRIC_COORD
    const float3 d = 1.0f * fwidth(baryCoord);
    const float3 s = smoothstep(d * 0.25f, d * 0.75, u_barycentricCoord);
    _output.color = mix(float4(1.0), _output.color, min3(s.x, s.y, s.z));
#endif
#endif
    
#ifdef USE_GBUFFER_OUTPUT
    float opacity = _surface.diffuse.a;
#ifdef USE_NODE_OPACITY
    opacity *= in.nodeOpacity;
#endif
    
    float dither = vfx::interleaved_gradient_noise(in.fragmentPosition.xy);
    dither = fract(dither + in.fragmentPosition.z * 1.61803398875);
    dither = fract(dither + vfx_frame.frame * 1.61803398875);
    if (opacity < dither) discard_fragment();
    
    float3 emission = float3(0.);
#ifdef USE_EMISSION
    emission = _surface.emission.rgb;
#endif
    _output.albedo = float4(_surface.diffuse.rgb, opacity);
    _output.normals = float4(_surface.normal.xyz, in.fragmentPosition.z);
    _output.roughmetal = float4(_surface.roughness, _surface.metalness, _surface.ambientOcclusion, 1.);
    _output.color = float4(emission, 1.);
    
    float2 vfx_prevUv = (in.mv_lastFragment.xy / in.mv_lastFragment.z);
    float2 vfx_uv = (in.mv_fragment.xy / in.mv_fragment.z);
    _output.velocity.xy = (vfx_prevUv - vfx_uv) * float2(.5,-.5);
    
#ifdef USE_MOTIONBLUR
    _output.velocity.z = length(_output.velocity.xy);
    _output.velocity.w = -_surface.position.z;
#endif
    ushort clearcoatIR = packHalf2ToUShort(half2(_surface.clearCoat, _surface.clearCoatRoughness));
    _output.clearCoat = float4(_surface.clearCoatNormal, as_type<half>(clearcoatIR));
    
    _output.subsurface = float4(_surface.subsurfaceRadius, _surface.subsurface);
#endif
    
    
    return _output;
struct vfx_floor_t {
    float3 u_floorNormal;
    float4 u_floorTangent;
    float3 u_floorCenter;
    float2 u_floorExtent;
#pragma arguments
    vfx_floor_t vfx_fg
#pragma body
    float3 u_floorNormal = vfx_fg.u_floorNormal;
    float4 u_floorTangent = vfx_fg.u_floorTangent;
    float3 u_floorCenter = vfx_fg.u_floorCenter;
    float2 u_floorExtent = vfx_fg.u_floorExtent;
    float3 floorBitangent =  normalize(cross(u_floorTangent.xyz, u_floorNormal));
    _geometry.position.xyz = u_floorCenter.xyz + u_floorExtent.x * (_geometry.position.x * u_floorTangent.xyz) + u_floorExtent.y * (_geometry.position.y * floorBitangent);
    _geometry.normal = u_floorNormal;
    _geometry.tangent = u_floorTangent;
    
    float2 tc;
    if (u_floorNormal.y != 0.)
        tc = _geometry.position.xz * 0.01;
    else if (u_floorNormal.z != 0.)
        tc = _geometry.position.xy * 0.01;
    else
        tc = _geometry.position.yz * 0.01;
    for (int i = 0; i < kVFXTexcoordCount; ++i)
        _geometry.texcoords[i] = tc;
#if defined(TESSELLATION_SMOOTHING_MODE_PN_TRIANGLE)
static inline void vfx_smooth_geometry_pn_triangle(thread float3 &position, thread float3 &normal, float3 patchCoord, float3 P0, float3 P1, float3 P2, float3 N0, float3 N1, float3 N2)
    float u = patchCoord.y;
    float v = patchCoord.z;
    float w = patchCoord.x;
    
    float3 P0P1 = P1 - P0;
    float3 P1P2 = P2 - P1;
    float3 P2P0 = P0 - P2;
    
    float w12 = dot(P0P1, N0);
    float w23 = dot(P1P2, N1);
    float w31 = dot(P2P0, N2);
    
    float w21 = dot(-P0P1, N1);
    float w32 = dot(-P1P2, N2);
    float w13 = dot(-P2P0, N0);
    
    float inv3 = 1.f / 3.f;
    
    float3 b210 = (2.f * P0 + P1 - w12 * N0) * inv3;
    float3 b021 = (2.f * P1 + P2 - w23 * N1) * inv3;
    float3 b201 = (2.f * P0 + P2 - w13 * N0) * inv3;
    
    float3 b120 = (2.f * P1 + P0 - w21 * N1) * inv3;
    float3 b012 = (2.f * P2 + P1 - w32 * N2) * inv3;
    float3 b102 = (2.f * P2 + P0 - w31 * N2) * inv3;
    
    float3 E = (b210 + b120 + b021 + b012 + b201 + b102) / 6.f;
    float3 V = (P0 + P1 + P2) * inv3;
    float3 b111 = E + (E - V) / 2.f;
    
    position.xyz =
    P0 * (w * w * w) +
    P1 * (u * u * u) +
    P2 * (v * v * v) +
    b210 * (3.f * w * w * u) +
    b120 * (3.f * w * u * u) +
    b201 * (3.f * w * w * v) +
    b021 * (3.f * u * u * v) +
    b102 * (3.f * w * v * v) +
    b012 * (3.f * u * v * v) +
    b111 * (6.f * w * u * v);
    
    float3 v12 = 2.f * dot(P0P1, N0 + N1) / dot(P0P1, P0P1);
    float3 v23 = 2.f * dot(P1P2, N1 + N2) / dot(P1P2, P1P2);
    float3 v31 = 2.f * dot(P2P0, N2 + N0) / dot(P2P0, P2P0);
    
    float3 h110 = N0 + N1 - v12 * P0P1;
    float3 h011 = N1 + N2 - v23 * P1P2;
    float3 h101 = N2 + N0 - v31 * P2P0;
    
    float3 n010 = normalize(h110);
    float3 n011 = normalize(h011);
    float3 n001 = normalize(h101);
    
    normal = normalize(
    N0 * w * w +
    N1 * u * u +
    N2 * v * v +
    n010 * w * u +
    n011 * u * v +
    n001 * w * v);
#elif defined(TESSELLATION_SMOOTHING_MODE_PHONG)
static inline void vfx_smooth_geometry_phong(thread float3 &position, thread float3 &normal, float3 patchCoord, float3 P0, float3 P1, float3 P2, float3 N0, float3 N1, float3 N2)
    float3 P = vfx::barycentric_mix(P0, P1, P2, patchCoord);
    
    float3 proj0 = P - dot(P - P0, N0) * N0;
    float3 proj1 = P - dot(P - P1, N1) * N1;
    float3 proj2 = P - dot(P - P2, N2) * N2;
    
    float3 Pproj = vfx::barycentric_mix(proj0, proj1, proj2, patchCoord);
    
    const float alpha = 0.75f;
    position = mix(P, Pproj, alpha);
    normal = normalize(vfx::barycentric_mix(N0, N1, N2, patchCoord));
#endif 
static int OsdGetPatchNumControlVertices(int patchType) {
    switch(patchType) {
        case 3: return 4;
        case 6: return 16;
        case 9: return 20;
        default: return 0;
    }
#if OSD_IS_ADAPTIVE
#if USE_STAGE_IN
#if OSD_PATCH_REGULAR
struct ControlPoint
    
    float3 P [[attribute(0)]];
#if OSD_PATCH_ENABLE_SINGLE_CREASE
    float3 P1 [[attribute(1)]];
    float3 P2 [[attribute(2)]];
#if !USE_PTVS_SHARPNESS
    float2 vSegments [[attribute(3)]];
#endif 
#endif 
struct PatchInput
    patch_control_point<ControlPoint> cv;
#if !USE_PTVS_FACTORS
    float4 tessOuterLo [[attribute(5)]];
    float4 tessOuterHi [[attribute(6)]];
#endif 
    int3 patchParam [[attribute(10)]];
#elif OSD_PATCH_GREGORY || OSD_PATCH_GREGORY_BOUNDARY
struct ControlPoint
    
    float3 P [[attribute(0)]];
    float3 Ep [[attribute(1)]];
    float3 Em [[attribute(2)]];
    float3 Fp [[attribute(3)]];
    float3 Fm [[attribute(4)]];
struct PatchInput
    patch_control_point<ControlPoint> cv;
    int3 patchParam [[attribute(10)]];
#elif OSD_PATCH_GREGORY_BASIS
struct ControlPoint
    float3 position [[attribute(0)]];
struct PatchInput
    patch_control_point<ControlPoint> cv;
    int3 patchParam [[attribute(10)]];
#endif
#endif 
#endif 
#if defined(OSD_FVAR_WIDTH)
static void OsdInterpolateFaceVarings(thread VFXShaderGeometry&      geometry
                                      , float2                       uv
                                      , int                          patchIndex
#if OSD_FVAR_USES_MULTIPLE_CHANNELS
                                      , constant uint32_t&           osdFaceVaryingChannelCount
                                      , constant OsdFVarChannelDesc* osdFaceVaryingChannelDescriptors
                                      , constant uint32_t&           osdFaceVaryingPatchArrayIndex
                                      , constant void*               osdFaceVaryingChannelsPackedData
#else 
                                      , constant int*                osdFaceVaryingIndices
                                      , constant float*              osdFaceVaryingData
#if OSD_IS_ADAPTIVE
                                      , constant packed_int3*        osdFaceVaryingPatchParams
                                      , constant packed_int4&        osdFaceVaryingPatchArray
#endif
#endif 
                                      )
#if defined(NEED_IN_TEXCOORD0) && (OSD_TEXCOORD0_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[0] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD1) && (OSD_TEXCOORD1_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[1] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD2) && (OSD_TEXCOORD2_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[2] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD3) && (OSD_TEXCOORD3_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[3] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD4) && (OSD_TEXCOORD4_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[4] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD5) && (OSD_TEXCOORD5_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[5] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD6) && (OSD_TEXCOORD6_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[6] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD7) && (OSD_TEXCOORD7_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[7] = float2(0.0);
#endif
#if defined(HAS_VERTEX_COLOR) && (OSD_COLOR_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.color = float4(0.0);
#endif
    
#if OSD_FVAR_USES_MULTIPLE_CHANNELS
    for (uint32_t channel = 0; channel < osdFaceVaryingChannelCount; ++channel) {
        OsdFVarChannelDesc channelDescriptor = osdFaceVaryingChannelDescriptors[channel];
        
        int4 osdFaceVaryingPatchArray = ((constant packed_int4 *)((constant uint8_t *)osdFaceVaryingChannelsPackedData + channelDescriptor.patchArraysBufferOffset))[osdFaceVaryingPatchArrayIndex];
        int indexBase = osdFaceVaryingPatchArray.z;
        
        constant int *osdFaceVaryingIndices = (constant int *)((constant uint8_t *)osdFaceVaryingChannelsPackedData + channelDescriptor.indicesBufferOffset) + indexBase * 3;
        constant float *osdFaceVaryingData = (constant float *)((constant uint8_t *)osdFaceVaryingChannelsPackedData + channelDescriptor.dataBufferOffset);
        
#if OSD_IS_ADAPTIVE
        int primitiveIdBase = osdFaceVaryingPatchArray.w;
        constant packed_int3 *osdFaceVaryingPatchParams = (constant packed_int3 *)((constant uint8_t *)osdFaceVaryingChannelsPackedData + channelDescriptor.patchParamsBufferOffset) + primitiveIdBase;
        
        int3 fvarPatchParam = osdFaceVaryingPatchParams[patchIndex];
        bool isRegular = OsdGetPatchIsRegular(fvarPatchParam);
        
        int4 patchArray = osdFaceVaryingPatchArray;
        int patchStride = OsdGetPatchNumControlVertices(patchArray.x);
        int patchType = select(patchArray.x, int(6), isRegular);
        int patchCVs = OsdGetPatchNumControlVertices(patchType);
        
        float wP[20], wDs[20], wDt[20], wDss[20], wDst[20], wDtt[20];
        
        if (patchType == 3) {
            OsdGetBilinearPatchWeights(uv.x, uv.y, 1.0f, wP, wDs, wDt, wDss, wDst, wDtt);
        } else if (patchType == 6) {
            int boundaryMask = OsdGetPatchBoundaryMask(fvarPatchParam);
            OsdGetBSplinePatchWeights(uv.x, uv.y, 1.0f, boundaryMask, wP, wDs, wDt, wDss, wDst, wDtt);
        } else if (patchType == 9) {
            OsdGetGregoryPatchWeights(uv.x, uv.y, 1.0f, wP, wDs, wDt, wDss, wDst, wDtt);
        }
#else
        float wP[4], wDs[4], wDt[4], wDss[4], wDst[4], wDtt[4];
        int patchCVs = 4;
        int patchStride = patchCVs;
        OsdGetBilinearPatchWeights(uv.x, uv.y, 1.0f, wP, wDs, wDt, wDss, wDst, wDtt);
#endif
        
        for (int i = 0; i < patchCVs; ++i) {
#if defined(HAS_VERTEX_COLOR) && (OSD_COLOR_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.colorPrimvar.isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.colorPrimvar.offset;
                geometry.color += wP[i] * float4(osdFaceVaryingData[index], osdFaceVaryingData[index+1], osdFaceVaryingData[index+2], osdFaceVaryingData[index+3]);
            }
#endif
#if defined(NEED_IN_TEXCOORD0) && (OSD_TEXCOORD0_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[0].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[0].offset;
                geometry.texcoords[0] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD1) && (OSD_TEXCOORD1_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[1].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[1].offset;
                geometry.texcoords[1] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD2) && (OSD_TEXCOORD2_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[2].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[2].offset;
                geometry.texcoords[2] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD3) && (OSD_TEXCOORD3_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[3].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[3].offset;
                geometry.texcoords[3] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD4) && (OSD_TEXCOORD4_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[4].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[4].offset;
                geometry.texcoords[4] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD5) && (OSD_TEXCOORD5_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[5].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[5].offset;
                geometry.texcoords[5] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD6) && (OSD_TEXCOORD6_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[6].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[6].offset;
                geometry.texcoords[6] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD7) && (OSD_TEXCOORD7_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[7].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[7].offset;
                geometry.texcoords[7] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
        }
    }
    
#else 
    
#if OSD_IS_ADAPTIVE
    int3 fvarPatchParam = osdFaceVaryingPatchParams[patchIndex];
    bool isRegular = OsdGetPatchIsRegular(fvarPatchParam);
    
    int4 patchArray = osdFaceVaryingPatchArray;
    int patchStride = OsdGetPatchNumControlVertices(patchArray.x);
    int patchType = select(patchArray.x, int(6), isRegular);
    int patchCVs = OsdGetPatchNumControlVertices(patchType);
    
    float wP[20], wDs[20], wDt[20], wDss[20], wDst[20], wDtt[20];
    
    if (patchType == 3) {
        OsdGetBilinearPatchWeights(uv.x, uv.y, 1.0f, wP, wDs, wDt, wDss, wDst, wDtt);
    } else if (patchType == 6) {
        int boundaryMask = OsdGetPatchBoundaryMask(fvarPatchParam);
        OsdGetBSplinePatchWeights(uv.x, uv.y, 1.0f, boundaryMask, wP, wDs, wDt, wDss, wDst, wDtt);
    } else if (patchType == 9) {
        OsdGetGregoryPatchWeights(uv.x, uv.y, 1.0f, wP, wDs, wDt, wDss, wDst, wDtt);
    }
#else
    float wP[4], wDs[4], wDt[4], wDss[4], wDst[4], wDtt[4];
    int patchCVs = 4;
    int patchStride = patchCVs;
    OsdGetBilinearPatchWeights(uv.x, uv.y, 1.0f, wP, wDs, wDt, wDss, wDst, wDtt);
#endif
    
    for (int i = 0; i < patchCVs; ++i) {
        int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * OSD_FVAR_WIDTH + 0 ;
#if defined(HAS_VERTEX_COLOR) && (OSD_COLOR_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.color += wP[i] * float4(osdFaceVaryingData[index], osdFaceVaryingData[index+1], osdFaceVaryingData[index+2], osdFaceVaryingData[index+3]);
        index += 4;
#endif
#if defined(NEED_IN_TEXCOORD0) && (OSD_TEXCOORD0_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[0] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD1) && (OSD_TEXCOORD1_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[1] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD2) && (OSD_TEXCOORD2_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[2] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD3) && (OSD_TEXCOORD3_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[3] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD4) && (OSD_TEXCOORD4_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[4] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD5) && (OSD_TEXCOORD5_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[5] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD6) && (OSD_TEXCOORD6_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[6] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD7) && (OSD_TEXCOORD7_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[7] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
    }
#endif 
#endif 
#if __METAL_VERSION__ >= 220 
    #include <TargetConditionals.h>
    #if TARGET_OS_OSX || TARGET_OS_MACCATALYST
        
        
        #define SHOULD_CHECK_IF_OUTSIDE_TEXTURE  0
        #define RETURN_IF_OUTSIDE_TEXTURE(dst)
        #define RETURN_IF_OUTSIDE_TEXTURE3D(dst)
    #else
        #define SHOULD_CHECK_IF_OUTSIDE_TEXTURE  1
        #define RETURN_IF_OUTSIDE_TEXTURE(dst)   if ((index.x >= dst.get_width()) || (index.y >= dst.get_height())) return;
        #define RETURN_IF_OUTSIDE_TEXTURE3D(dst) if ((index.x >= dst.get_width()) || (index.y >= dst.get_height()) || (index.z >= dst.get_depth())) return;
    #endif
    #define SUPPORTS_LAYERED_RENDERING           1
    #define SUPPORTS_MULTIPLE_VIEWPORT_RENDERING 1
#else
    #if defined(__METAL_MACOS__)
        
        
        #define SHOULD_CHECK_IF_OUTSIDE_TEXTURE      0
        #define RETURN_IF_OUTSIDE_TEXTURE(dst)
        #define RETURN_IF_OUTSIDE_TEXTURE3D(dst)
        #define SUPPORTS_LAYERED_RENDERING           (__METAL_VERSION__ >= 200)
        #define SUPPORTS_MULTIPLE_VIEWPORT_RENDERING (__METAL_VERSION__ >= 200)
    #elif defined(__METAL_IOS__)
        #define SHOULD_CHECK_IF_OUTSIDE_TEXTURE      1
        #define RETURN_IF_OUTSIDE_TEXTURE(dst)       if ((index.x >= dst.get_width()) || (index.y >= dst.get_height())) return;
        #define RETURN_IF_OUTSIDE_TEXTURE3D(dst)     if ((index.x >= dst.get_width()) || (index.y >= dst.get_height()) || (index.z >= dst.get_depth())) return;
        #define SUPPORTS_LAYERED_RENDERING           (__METAL_VERSION__ >= 210)
        #define SUPPORTS_MULTIPLE_VIEWPORT_RENDERING (__METAL_VERSION__ >= 210)
    #endif
#endif
namespace vfx {
    
    
    static inline float4 reduce_op(float4 d0, float4 d1)
    {
        d0.x = min(d0.x, d1.x);
        d0.y = max(d0.y, d1.y);
        d0.z += d1.z;
        d0.w += d1.w;
        return d0;
    }
    
    inline float vector_reduce_min(float4 v)
    {
        float2 min_lh = min(v.xy, v.zw);
        return min(min_lh.x, min_lh.y);
    }
    
    inline float vector_reduce_max(float4 v)
    {
        float2 max_lh = max(v.xy, v.zw);
        return max(max_lh.x, max_lh.y);
    }
    
    inline int vector_reduce_add(int4 v)
    {
        int2 add_lh = v.xy + v.zw;
        return add_lh.x + add_lh.y;
    }
    
    inline float3x3 mat3(float4x4 mat4)
    {
        return float3x3(mat4[0].xyz, mat4[1].xyz, mat4[2].xyz);
    }
    
    inline float3 mat4_mult_float3_normalized(float4x4 matrix, float3 src)
    {
        float3 dst  =  src.xxx * matrix[0].xyz;
        dst         += src.yyy * matrix[1].xyz;
        dst         += src.zzz * matrix[2].xyz;
        return normalize(dst);
    }
    
    inline float3 mat4_mult_float3(float4x4 matrix, float3 src)
    {
        float3 dst  =  src.xxx * matrix[0].xyz;
        dst         += src.yyy * matrix[1].xyz;
        dst         += src.zzz * matrix[2].xyz;
        return dst;
    }
    inline float3 matrix_rotate(float4x4 mat, float3 dir)
    {
        return  dir.xxx * mat[0].xyz +
                dir.yyy * mat[1].xyz +
                dir.zzz * mat[2].xyz;
    }
    inline float4 matrix_transform(float4x4 mat, float3 pos)
    {
        return  pos.xxxx * mat[0] +
                pos.yyyy * mat[1] +
                pos.zzzz * mat[2] +
                           mat[3];
    }
    inline float3 quaternion_rotate_vector(float4 q, float3 v)
    {
        float3 t = 2.f * cross(q.xyz, v);
        return v + q.w * t + cross(q.xyz, t);
    }
    
    template <class T>
    inline vec<T, 3> robust_normalize(vec<T, 3> v)
    {
        vec<T, 3> zero = 0.;
        return all(v == zero) ? zero : normalize(v);
    }
    template <class T>
    inline void generate_basis(vec<T, 3> inR, thread vec<T, 3> *outS, thread vec<T, 3> *outT)
    {
        
        T x  = -inR.x;
        T y  = inR.y;
        T z  = inR.z;
        T sz = copysign(T(1.), z);
        T a  = y / (abs(z) + T(1.));
        T b  = y * a;
        T c  = x * a;
        *outS = (vec<T, 3>){ z + sz * b,  sz * c,       x       };
        *outT = (vec<T, 3>){ c,           T(1.) - b,    -sz * y };
    }
    
    
    
    inline float3 blend_add(float3 base, float3 blend)
    {
        return min(base + blend, 1.0);
    }
    
    inline float3 blend_lighten(float3 base, float3 blend)
    {
        return max(blend, base);
    }
    
    inline float3 blend_screen(float3 base, float3 blend)
    {
        return (1.0 - ((1.0 - base) * (1.0 - blend)));
    }
    
    
    inline half sq(half f) {
        return f * f;
    }
    inline float sq(float f) {
        return f * f;
    }
    
    inline float2 sincos(float angle) {
        float cs;
        float sn = ::sincos(angle, cs);
        return float2(sn, cs);
    }
    
    
    inline float acos_fast(float f) {
        float x = abs(f);
        float res = -0.156583f * x + M_PI_2_F;
        res *= sqrt(1.0f - x);
        return (f >= 0.f) ? res : M_PI_F - res;
    }
    inline float asin_fast(float f)
    {
        return M_PI_2_F - acos_fast(f);
    }
    
    inline float atan_fast(float inX)
    {
        float  x = inX;
        return x*(-0.1784f * abs(x) - 0.0663f * x * x + 1.0301f);
    }
    
    inline float atan2_fast(float y, float x)
    {
        float sx = x > 0.f ? -1.f : 1.f;
        float abs_y = abs(y) + 1e-10f; 
        float r = (x + abs_y*sx) / (abs_y - x*sx);
        float angle = sx * M_PI_4_F + M_PI_2_F;
        angle      += (0.1963f * r * r - 0.9817f) * r;
        return y > 0.f ? angle : -angle;
    }
    
    
    template <class T>
    inline vec<T, 3> cartesian_from_spherical(vec<T, 2> uv)
    {
        
        
        T cos_phi;
        T phi = uv.x * 2.0f * M_PI_F;
        T sin_phi = ::sincos(phi, cos_phi);
        
        T cos_theta;
        T theta     = uv.y * M_PI_F;
        T sin_theta = ::sincos(theta, cos_theta);
        return vec<T, 3>(cos_phi * sin_theta,
                         cos_theta,
                         -sin_phi * sin_theta);
    }
    inline float2 spherical_from_cartesian(float3 dir)
    {
        return float2( atan2(-dir.z, dir.x) * (0.5f * M_1_PI_F), acos(dir.y) * M_1_PI_F);
    }
    inline half2 spherical_from_cartesian(half3 dir)
    {
        return half2(atan2(-dir.z, dir.x) * 0.5h, acos(dir.y)) * M_1_PI_H;
    }
    inline float2 spherical_from_cartesian_fast(float3 dir)
    {
        return float2( atan2_fast(-dir.z, dir.x) * (0.5f * M_1_PI_F), acos_fast(dir.y) * M_1_PI_F);
    }
    inline half2 spherical_from_cartesian_fast(half3 dir)
    {
        return half2( atan2_fast(-dir.z, dir.x) * 0.5h, acos_fast(dir.y)) * M_1_PI_H;
    }
    #define dual_contract_factor  1.0
    template <class T>
    inline vec<T, 2> dual_paraboloid_from_cartesian(vec<T, 3> dir)
    {
        dir.xy /= abs(dir.z) + 1.0;
        dir.y = 0.5 - dir.y * 0.5;
        T s   = sign(dir.z) * 0.25;
        dir.x = s * (dir.x - 1.0) + 0.5;
        return dir.xy;
    }
    
    
    template <class T>
    inline vec<T, 3> cartesian_from_dual_paraboloid(vec<T, 2>  uv)
    {
        
        T zside = 0.5 * sign(0.5 - uv.x);
        uv.x = 1.0 - abs(4.0 * uv.x - 2.0); 
        uv.y   = 1.0 - uv.y * 2.0;
        T z = length_squared(uv); 
        z = (1.0 - z) * zside;
        
        return vec<T, 3>(uv.x, uv.y, z);
    }
    
    template <class T>
    inline vec<T, 2> signNotZero(vec<T, 2> v) {
        return vec<T, 2>((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);
    }
    template <class T>
    inline vec<T, 2> octEncode(vec<T, 3> v) {
        float2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));
        return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;
    }
    template <class T>
    inline vec<T, 3> octDecode(vec<T, 2> p) {
        float3 v = float3(p.xy, 1.0 - abs(p.x) - abs(p.y));
        if (v.z < 0) v.xy = (1.0 - abs(v.yx)) * signNotZero(v.xy);
        return normalize(v);
    }
    inline float reduce_min(float3 v) {
        return min(v.x, min(v.y, v.z));
    }
    
    inline float reduce_min(float4 v) {
        return min(min(v.x, v.y), min(v.z, v.w));
    }
    inline float reduce_max(float3 v) {
        return max(v.x, max(v.y, v.z));
    }
    inline float reduce_max(float4 v) {
        return max(max(v.x, v.y), max(v.z, v.w));
    }
    
    inline float3 randomSphereDir(float2 rnd)
    {
        float s = rnd.x * M_PI_F * 2.f;
        float t = rnd.y * 2.f - 1.f;
        return float3( float2(sin(s), cos(s)) * sqrt(1.f-t*t), t );
    }
    
    
    template <class T>
    inline T interleaved_gradient_noise(vec<T, 2> pos)
    {
        vec<T, 3> magic( 0.06711056f, 0.00583715f, 52.9829189f );
        return fract( magic.z * fract( dot( pos, magic.xy ) ) );
    }
    
    inline float3 hemisphere_reflect(float3 v, float3 nrm)
    {
        
        
        
        float k = dot(v,nrm);
        return (k>0.0) ? v : v-2.0*nrm*k;
    }
    
    inline float3 randomHemisphereDir(float3 dir, float2 rnd)
    {
        return hemisphere_reflect(randomSphereDir( rnd ), dir);
    }
    
    inline void orthogonal_basis(float3 n, thread float3& xp, thread float3& yp)
    {
        
        float sz = n.z >= 0.f ? 1.f : -1.f;
        float a  =  n.y / (1.f + abs(n.z));
        float b  =  n.y * a;
        float c  = -n.x * a;
        
        xp = float3(n.z + sz * b,   sz * c,     -n.x);
        yp = float3(c,              1.f - b,    -sz * n.y);
    }
    template <class U>
    inline float2 normalized_coordinate(ushort2 index, U texture)
    {
        uint width  = texture.get_width();
        uint height = texture.get_height();
        
        float u = width  == 1 ? 0.5f : float(index.x) / float(width - 1);
        float v = height == 1 ? 0.5f : float(index.y) / float(height - 1);
        
        return float2(u, v);
    }
    template <class U>
    inline float2 normalized_coordinate(uint2 index, U texture)
    {
        uint width  = texture.get_width();
        uint height = texture.get_height();
        
        float u = width  == 1 ? 0.5f : float(index.x) / float(width - 1);
        float v = height == 1 ? 0.5f : float(index.y) / float(height - 1);
        
        return float2(u, v);
    }
    template <class U>
    inline half2 normalized_coordinate_half(uint2 index, U texture)
    {
        uint width  = texture.get_width();
        uint height = texture.get_height();
        
        half u = width  == 1 ? 0.5h : half(index.x) / half(width - 1);
        half v = height == 1 ? 0.5h : half(index.y) / half(height - 1);
        
        return half2(u, v);
    }
    
    template <class T>
    inline vec<T, 3> cubemap_dir_from_sampleCoord(uint face, vec<T, 2> sampleCoord) 
    {
        switch(face) {
            case 0: 
                return vec<T, 3>( 1.0, -sampleCoord.y, -sampleCoord.x);
            case 1: 
                return vec<T, 3>(-1.0, -sampleCoord.y,  sampleCoord.x);
            case 2: 
                return vec<T, 3>(sampleCoord.x,  1.0,  sampleCoord.y);
            case 3: 
                return vec<T, 3>(sampleCoord.x, -1.0, -sampleCoord.y);
            case 4: 
                return vec<T, 3>( sampleCoord.x, -sampleCoord.y,  1.0);
            default: 
                return vec<T, 3>(-sampleCoord.x, -sampleCoord.y, -1.0);
        }
    }
    
    template <class T>
    inline T signed_unit(T uv) {
        return uv * 2.0 - 1.0;
    }
    
    template <class T>
    inline T unsigned_unit(T uv) {
        return uv * 0.5 + 0.5;
    }
    template <class T>
    inline vec<T, 3> cubemap_dir_from_uv(uint face, vec<T, 2> uv) 
    {
        return cubemap_dir_from_sampleCoord(face, signed_unit(uv));
    }
    template <class T>
    inline vec<T, 3> cubemap_dir_from_uv_unit(uint face, vec<T, 2> uv) 
    {
        return normalize(cubemap_dir_from_uv(face, uv));
    }
    
    
    inline float2 barycentric_mix(float2 __x, float2 __y, float2 __z, float3 __t) { return __t.x * __x + __t.y * __y + __t.z * __z; }
    inline float3 barycentric_mix(float3 __x, float3 __y, float3 __z, float3 __t) { return __t.x * __x + __t.y * __y + __t.z * __z; }
    inline float4 barycentric_mix(float4 __x, float4 __y, float4 __z, float3 __t) { return __t.x * __x + __t.y * __y + __t.z * __z; }
    
    static inline float rect(float2 lt, float2 rb, float2 uv)
    {
        float2 borders = step(lt, uv) * step(uv, rb);
        return borders.x * borders.y;
    }
    
    inline half4 debugColorForCascade(int cascade)
    {
        switch (cascade) {
            case 0:
            return half4(1.h, 0.h, 0.h, 1.h);
            case 1:
            return half4(0.9, 0.5, 0., 1.);
            case 2:
            return half4(1., 1., 0., 1.);
            case 3:
            return half4(0., 1., 0., 1.);
            default:
            return half4(0., 0., 0., 1.);
        }
    }
    inline half3 debugColorForFace(int count)
    {
        switch (count) {
            case 0:  return half3(1.0h, 0.1h, 0.1h);
            case 1:  return half3(0.1h, 1.0h, 1.0h);
            case 2:  return half3(0.1h, 1.0h, 0.1h);
            case 3:  return half3(1.0h, 0.1h, 1.0h);
            case 4:  return half3(0.1h, 0.1h, 1.0h);
            default: return half3(1.0h, 1.0h, 0.1h);
        }
    }
    inline half4 debugColorForCount(int count)
    {
        switch (count) {
            case 0: return half4(0.0h, 0.0h, 0.0h, 1.h);
            case 1: return half4(0.0h, 0.0h, 0.4h, 1.h);
            case 2: return half4(0.0h, 0.0h, 0.9h, 1.h);
            case 3: return half4(0.0h, 0.4h, 0.7h, 1.h);
            case 4: return half4(0.0h, 0.9h, 0.4h, 1.h);
            case 5: return half4(0.0h, 0.9h, 0.0h, 1.h);
            case 6: return half4(0.4h, 0.7h, 0.0h, 1.h);
            case 7: return half4(0.9h, 0.7h, 0.0h, 1.h);
            default: return half4(1., 0., 0., 1.);
        }
    }
    inline float grid(float2 lt, float2 rb, float2 gridSize, float thickness, float2 uv)
    {
        float insideRect = rect(lt, rb + thickness, uv);
        float2 gt = thickness * gridSize;
        float2 lines = step(abs(lt - fract(uv * gridSize)), gt);
        return insideRect * (lines.x + lines.y);
    }
    inline float checkerboard(float2 gridSize, float2 uv)
    {
        float2 check = floor(uv * gridSize);
        return step(fmod(check.x + check.y, 2.f), 0.f);
    }
    
    inline float luminance(float3 color)
    {
        
        
        return dot(color, float3(0.212671, 0.715160, 0.072169));
    }
    inline half luminance(half3 color)
    {
        
        
        return dot(color, half3(0.212671h, 0.715160h, 0.072169h));
    }
    
    inline float vfx_srgb_to_linear(float c)
    {
        return (c <= 0.04045f) ? c / 12.92f : powr((c + 0.055f) / 1.055f, 2.4f);
    }
    
    inline half srgb_to_linear_fast(half c)
    {
        return powr(c, 2.2h);
    }
    
    inline half3 srgb_to_linear_fast(half3 c)
    {
        return powr(c, 2.2h);
    }
    
    inline half vfx_srgb_to_linear(half c)
    {
        
        return (c <= 0.04045h) ? (c * 0.0773993808h) :  powr(0.9478672986h * c + 0.05213270142h, 2.4h);
    }
    
    inline float3 vfx_srgb_to_linear(float3 c)
    {
        return float3(vfx_srgb_to_linear(c.x), vfx_srgb_to_linear(c.y), vfx_srgb_to_linear(c.z));
    }
    
    inline float linear_to_srgb(float c)
    {
        return (c < 0.0031308f) ? (12.92f * c) : (1.055f * powr(c, 1.f/2.4f) - 0.055f);
    }
    
    inline float3 linear_to_srgb(float3 v) { 
        return float3(linear_to_srgb(v.x), linear_to_srgb(v.y), linear_to_srgb(v.z));
    }
    
inline float4 texture2DProj(texture2d<float> tex, sampler smp, float4 uv)
    return tex.sample(smp, uv.xy / uv.w);
inline half4 texture2DProj(texture2d<half> tex, sampler smp, float4 uv)
    return tex.sample(smp, uv.xy / uv.w);
static constexpr sampler vfx_shadow_sampler_rev_z = sampler(coord::normalized, filter::linear, mip_filter::none, address::clamp_to_zero, compare_func::less_equal);
static constexpr sampler vfx_shadow_sampler = vfx_shadow_sampler_rev_z;
inline float shadow2D(sampler shadow_sampler, depth2d<float> tex, float3 uv, float4 tile)
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
    float2 mapSize = float2(tex.get_width(), tex.get_height());
    float2 duv = 0.5f / mapSize;
    float2 uv0 = tile.xy;
    float2 uvs = tile.zw;
    float2 b = uv0 + duv;
    float2 s = uvs - 2 * duv;
    uv.xy = uv.xy * s + b;
#endif
    return tex.sample_compare(shadow_sampler, uv.xy, uv.z);
inline float shadow2DProj(sampler shadow_sampler, depth2d<float> tex, float4 uv, float4 tile)
    float3 uvp = uv.xyz / uv.w;
    uvp.xy = tile.xy + uvp.xy * tile.zw;
    return tex.sample_compare(shadow_sampler, uvp.xy, uvp.z);
inline float shadow2DArray(sampler shadow_sampler, depth2d_array<float> tex, float3 uv, uint slice)
    return tex.sample_compare(shadow_sampler, uv.xy, slice, uv.z);
inline float shadow2DArrayProj(sampler shadow_sampler, depth2d_array<float> tex, float4 uv, uint slice)
    float3 uvp = uv.xyz / uv.w;
    return tex.sample_compare(shadow_sampler, uvp.xy, slice, uvp.z);
inline float4 transformViewPosInShadowSpace(float3 pos, float4x4 shadowMatrix)
    
    float4 lightScreen =  shadowMatrix * float4(pos, 1.f);
    return lightScreen;
inline float ComputeShadow(sampler shadow_sampler, float3 worldPos, float4x4 shadowMatrix, depth2d<float> shadowMap, float4 tile)
    float4 lightScreen =  transformViewPosInShadowSpace(worldPos, shadowMatrix);
    lightScreen.xyz /= lightScreen.w;
    if (any(lightScreen.xy < 0.0 || lightScreen.xy > 1.0)) {
        return 0.0;
    }
    float shadow = shadow2D(shadow_sampler, shadowMap, lightScreen.xyz, tile);
    
    shadow *= step(0., lightScreen.w);
    
    return shadow;
inline float ComputeSoftShadowGrid(sampler shadow_sampler, float3 worldPos, float4x4 shadowMatrix, depth2d<float> shadowMap, int sampleCount, float4 tile)
    float4 lightScreen =  transformViewPosInShadowSpace(worldPos, shadowMatrix);
    lightScreen.xyz /= lightScreen.w;
    if (any(lightScreen.xy < 0.0 || lightScreen.xy > 1.0)) {
        return 0.0;
    }
    
    float shadow;
    if (sampleCount <= 1) {
        shadow = shadow2D(shadow_sampler, shadowMap, lightScreen.xyz, tile);
    } else {
        lightScreen.z += 0.005f; 
        float2 texelSize = 2.f / float2(shadowMap.get_width(), shadowMap.get_height());
        float2 origin    = lightScreen.xy - (sampleCount * 0.5f) * texelSize;
        
        if (sampleCount <= 4) { 
            half totalAccum = 0.h;
            for (int y = 0; y < sampleCount; ++y) {
                for (int x = 0; x < sampleCount; ++x) {
                    totalAccum  += half(shadowMap.sample_compare(shadow_sampler, origin, lightScreen.z, 2 * int2(x,y)));
                }
            }
            shadow = totalAccum / half(sampleCount * sampleCount);
        } else {
            float totalAccum = 0.f;
            for (int y = 0; y < sampleCount; ++y) {
                for (int x = 0; x < sampleCount; ++x) {
                    float2 samplePos = origin + texelSize * float2(x, y);
                    totalAccum  += shadowMap.sample_compare(shadow_sampler, samplePos, lightScreen.z);
                }
            }
            shadow = totalAccum / float(sampleCount * sampleCount);
        }
    }
    
    shadow *= step(0., lightScreen.w);
    return shadow;
inline float ComputeSoftShadow(sampler shadow_sampler, float3 lightScreen, depth2d<float> shadowMap, constant float4* shadowKernel, int sampleCount, float shadowRadius, float4 tile)
    if (any(lightScreen.xyz < 0.0 || lightScreen.xyz > 1.0)) {
        return 0.0;
    }
    
    float shadow;
    if (sampleCount <= 1) {
        shadow = shadow2D(shadow_sampler, shadowMap, lightScreen.xyz, tile);
    } else {
        
        
        float3 duvdist_dx = dfdx(lightScreen.xyz);
        float3 duvdist_dy = dfdy(lightScreen.xyz);
        
        
        
        
        
        
        float inv_det_J = 1.0 / ((duvdist_dx.x * duvdist_dy.y) - (duvdist_dx.y * duvdist_dy.x));
        float2 ddist_duv = inv_det_J * float2(duvdist_dy.y * duvdist_dx.z - duvdist_dx.y * duvdist_dy.z,
                                              duvdist_dx.x * duvdist_dy.z - duvdist_dy.x * duvdist_dx.z);
        float totalAccum = 0.0;
        for (int i = 0; i < sampleCount; i++) {
            float3 uvOffset = shadowKernel[i].xyz * shadowRadius;
            float2 uvWithOffset = lightScreen.xy + uvOffset.xy;
            if (any(uvWithOffset < 0.0 || uvWithOffset > 1.0)) {
                continue;
            }
            float dist = lightScreen.z * (1.0 + uvOffset.z) + (ddist_duv.x * uvOffset.x + ddist_duv.y * uvOffset.y);
            if (dist < 0.0) {
                continue;
            }
            totalAccum += shadow2D(shadow_sampler, shadowMap, float3(uvWithOffset, dist), tile);
        }
        shadow = totalAccum / float(sampleCount);
    }
    return shadow;
inline float ComputeCascadeBlendAmount(float3 shadowPos, bool cascadeBlending)
    const float cascadeBlendingFactor = 0.1f; 
    float3 cascadePos = abs(shadowPos.xyz * 2.f - 1.f);
    
    if (cascadeBlending) {
#if 0
        const float edge = 1.f - cascadeBlendingFactor;
        
        cascadePos = 1.f - saturate((cascadePos - edge) / cascadeBlendingFactor);
        return cascadePos.x * cascadePos.y * cascadePos.z; 
#else
        
        float distToEdge = 1.0f - max(max(cascadePos.x, cascadePos.y), cascadePos.z);
        return smoothstep(0.0f, cascadeBlendingFactor, distToEdge);
#endif
    } else {
        return step(cascadePos.x, 1.f) * step(cascadePos.y, 1.f) * step(cascadePos.z, 1.f);
    }
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
inline float4 SampleShadowCascade(sampler shadow_sampler, depth2d<float> shadowMaps, float3 shadowPosition, uint cascadeIndex, constant float4* shadowKernel, int sampleCount, float shadowRadius, float4 tile)
#else
inline float4 SampleShadowCascade(sampler shadow_sampler, depth2d_array<float> shadowMaps, float3 shadowPosition, uint cascadeIndex, constant float4* shadowKernel, int sampleCount, float shadowRadius)
#endif
    
    float2 gridSize = float2(shadowMaps.get_width(), shadowMaps.get_height()) / 32;
    float gd = vfx::checkerboard(shadowPosition.xy, gridSize);
    float3 gridCol = mix(float3(vfx::debugColorForCascade(cascadeIndex).rgb), float3(0.f), float3(gd > 0.f));
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
    float shadow = ComputeSoftShadow(shadow_sampler, shadowPosition, shadowMaps, shadowKernel, sampleCount, shadowRadius, tile);
#else
    float shadow = 0.0;
    if (sampleCount > 1) {
        
        for (int i = 0; i < sampleCount; ++i) {
            shadow += shadow2DArray(shadow_sampler, shadowMaps, shadowKernel[i].xyz * shadowRadius + shadowPosition, cascadeIndex);
        }
        shadow /= float(sampleCount);
    } else {
        
        shadow = shadow2DArray(shadow_sampler, shadowMaps, shadowPosition, cascadeIndex);
    }
#endif
    return float4(gridCol, shadow);
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
inline float4 ComputeCascadedShadow(sampler shadow_sampler, float3 viewPos, float4x4 shadowMatrix, constant float4 *cascadeScale, constant float4 *cascadeBias, int cascadeCount, depth2d<float> shadowMaps, bool enableCascadeBlending, constant float4* shadowKernel, int sampleCount, float shadowRadius, constant float4* tiles)
#else
inline float4 ComputeCascadedShadow(sampler shadow_sampler, float3 viewPos, float4x4 shadowMatrix, constant float4 *cascadeScale, constant float4 *cascadeBias, int cascadeCount, depth2d_array<float> shadowMaps, bool enableCascadeBlending, constant float4* shadowKernel, int sampleCount, float shadowRadius)
#endif
    float4 shadow = 0.f;
    float shadowSum = 0.f;
    
    
    float3 pos_ls =  (shadowMatrix * float4(viewPos, 1.f)).xyz;
    for (int c = 0; c < cascadeCount; ++c) {
        
        float3 pos_cs =  pos_ls * cascadeScale[c].xyz + cascadeBias[c].xyz;
        
        float cascadeRadius = shadowRadius * cascadeScale[c].x;
        float opacity = ComputeCascadeBlendAmount(pos_cs, enableCascadeBlending);
        if (shadowSum >= 1.f && opacity <= 0.0) 
            break;                              
                                                
        if (opacity > 0.f) { 
            
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
            shadow += SampleShadowCascade(shadow_sampler, shadowMaps, pos_cs, c, shadowKernel, sampleCount, cascadeRadius, tiles[c]) * opacity;
#else
            shadow += SampleShadowCascade(shadow_sampler, shadowMaps, pos_cs, c, shadowKernel, sampleCount, cascadeRadius) * opacity;
#endif
            shadowSum += opacity;
        }
    }
    if (shadowSum > 0) {
        shadow /= shadowSum;
    }
    return shadow;
template <class T>
inline void applyFog(thread vec<T, 4>& color, float eye_distance, float3 fogParameters, vec<T, 4> fogColor) {
    float fogFactor = pow(clamp(eye_distance * fogParameters.x + fogParameters.y, 0.f, float(fogColor.a)), fogParameters.z);
    color.rgb = mix(color.rgb, fogColor.rgb * color.a, fogFactor);
#pragma mark Pack/Unpack
inline ushort packHalf2ToUShort(half2 v) {
    v = saturate(v);
    v = round(v*255);
    ushort2 uv = ushort2(v);
    ushort res = (uv.x & 0x00ff) | ((uv.y & 0x00ff) << 8);
    return res;
inline half2 unpackHalf2FromUShort(ushort v) {
    half2 res;
    
    res.x = half(v & 0x00ff);
    res.y = half( (v & 0xff00) >> 8);
    
    return res/255.;
#ifndef __VFXMetalDefines__
#define __VFXMetalDefines__
enum {
    VFXVertexSemanticPosition,
    VFXVertexSemanticNormal,
    VFXVertexSemanticTangent,
    VFXVertexSemanticColor,
    VFXVertexSemanticBoneIndices,
    VFXVertexSemanticBoneWeights,
    VFXVertexSemanticTexcoord0,
    VFXVertexSemanticTexcoord1,
    VFXVertexSemanticTexcoord2,
    VFXVertexSemanticTexcoord3,
    VFXVertexSemanticTexcoord4,
    VFXVertexSemanticTexcoord5,
    VFXVertexSemanticTexcoord6,
    VFXVertexSemanticTexcoord7
enum {
    VFXGBufferAttachmentEmission,
    VFXGBufferAttachmentNormal,
    VFXGBufferAttachmentRoughnessMetalness,
    VFXGBufferAttachmentAlbedo,
    VFXGBufferAttachmentVelocity,
    VFXGBufferAttachmentClearCoat,
    VFXGBufferAttachmentSubsurface
struct VFXWorldBuffer {
    float4x4    viewTransform;
    float4x4    inverseViewTransform; 
    float4x4    projectionTransform;
    float4x4    viewProjectionTransform;
    float4x4    viewToCubeTransform; 
    float4x4    lastFrameViewProjectionTransform;
    float4      ambientLightingColor;
    float4
fogColor;
    float3
fogParameters; 
    float2      inverseResolution;
    float       time;
    float       sinTime;
    float       cosTime;
    float       random01;
    float       motionBlurIntensity;
    float       environmentIntensity;
    float4x4    environmentTransform;
    float4x4    inverseProjectionTransform;
    float4x4    inverseViewProjectionTransform;
    float2      nearFar; 
    float4      viewportSize; 
    float4x4    inverseTransposeViewTransform;
    
    float4      clusterScale; 
    
    uint32_t    frame;
#endif 
#import <metal_stdlib>
using namespace metal;
struct sh2_coefficients
    float4 R;
    float4 G;
    float4 B;
struct sh3_coefficients
    float4 ar;
    float4 ag;
    float4 ab;
    float4 br;
    float4 bg;
    float4 bb;
    float4 c;
struct VFXPBRSurface {
    float3 n;
    float3 v;
    
    float3 albedo;
    float3 emission;
    float3 selfIllumination;
    float  metalness;
    float  roughness;
    float  ao;
    float  selfIlluminationOcclusion;
#define PBR_F0_NON_METALLIC 0.04f
#define PBR_MIN_ROUGHNESS 0.01
#if defined(USE_PROBES_LIGHTING) && (USE_PROBES_LIGHTING == 2)
inline float3 shEvalDirection(float4 dir, sh2_coefficients cachedSH)
    const float Exponent = 1;
    
    
    sh2_vector diffSH = sh2_compute_diffuse_transfer(half3(dir.xyz), Exponent);
    
    
    half3 lighting = max(half3(0,0,0), sh2_dot(cachedSH, diffSH)) * M_1_PI_F;
    
    
    
    return float3(lighting);
#endif
inline float3 shEvalDirection(float4 dir, sh3_coefficients sh)
    float3 x1, x2, x3;
    
    
    x1.r = dot(sh.ar, dir);
    x1.g = dot(sh.ag, dir);
    x1.b = dot(sh.ab, dir);
    
    
    float4 vB = dir.xyzz * dir.yzzx;
    x2.r = dot(sh.br, vB);
    x2.g = dot(sh.bg, vB);
    x2.b = dot(sh.bb, vB);
    
    
    float vC = dir.x * dir.x - dir.y * dir.y;
    x3 = sh.c.xyz * vC;
    
    return x1 + x2 + x3;
inline float vfx_radicalInverse(uint32_t bits) {
#if __METAL_VERSION__ >= 210
    bits = reverse_bits(bits);
#else
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
#endif
    return float(bits) * 0x1p-32;
inline float vfx_filteredAlphaFromRoughness(float3 N, float roughness)
    float3 dNdx = dfdx(N);
    float3 dNdy = dfdy(N);
#if 1
    constexpr half sigma2 = 0.5h * 0.5h;
#else
    constexpr half sigma2 = 0.15915494h;
#endif
    constexpr half kappa = 0.18h;
    half variance = (half)sigma2 * (dot(dNdx, dNdx) + dot(dNdy, dNdy));
    half kernelAlphaSquared = min(variance, kappa);
    half alpha = roughness * roughness;
    half filteredAlphaSquared = saturate(alpha * alpha + kernelAlphaSquared);
    return sqrt(filteredAlphaSquared);
inline float3 vfx_tangentSpaceToLocalSpace(float3 v, float3 normal) {
    float3 tangent,bitangent;
    vfx::generate_basis(normal, &tangent, &bitangent);
    
    return tangent * v.x + bitangent * v.y + normal * v.z;
inline float2 vfx_sampleHammersley(uint32_t i, uint sampleCount) {
    return float2(float(i) / sampleCount, vfx_radicalInverse(i));
static float3 vfx_importanceSampleGGX_brdf(float2 random, float alpha) __attribute__((overloadable)) {
    
    
    float cosTheta = sqrt((1.0 - random.x) / (1.0 + (alpha * alpha - 1.0) * random.x));
    float phi = 2.0 * M_PI_F * random.y;
    
    
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    return float3(sinTheta * cos(phi),
                  sinTheta * sin(phi),
                  cosTheta);
static float3 vfx_importanceSampleGGX_brdf(float2 random, float alpha, float3 n) __attribute__((overloadable)) {
    float3 importanceSampleGGX = vfx_importanceSampleGGX_brdf(random, alpha);
    return vfx_tangentSpaceToLocalSpace(importanceSampleGGX, n);
static float3 vfx_importanceSampleCosine_brdf(float2 random) __attribute__((overloadable)) {
    
    
    
    float r = sqrt(random.x);
    float phi = 2.0 * M_PI_F * random.y;
    
    float cosPhi;
    float sinPhi = sincos(phi, cosPhi);
    
    
    float x = r * cosPhi;
    float y = r * sinPhi;
    float z = sqrt(max(0.f, 1.f - random.x)); 
    return float3(x, y, z);
static float3 vfx_importanceSampleCosine_brdf(float2 random, float3 n) __attribute__((overloadable)) {
    float3 importanceSampleCosine = vfx_importanceSampleCosine_brdf(random);
    return vfx_tangentSpaceToLocalSpace(importanceSampleCosine, n);
inline float vfx_brdf_D(float alpha, float NoH) {
    float alpha_squared = alpha * alpha;
    float denom = (NoH * alpha_squared - NoH) * NoH + 1.0f;
    float denom_squared = denom * denom;
    return alpha_squared / (denom_squared * M_PI_F);
inline float3 vfx_brdf_F(float3 F0, float LoH) {
    return F0 + (1.f - F0) * pow(1.f - LoH, 5.f);
inline float3 vfx_brdf_F_opt(float3 F0, float LoH) {
    float inv_LoH = 1.f - LoH;
    float inv_LoH_pow_2 = inv_LoH * inv_LoH;
    float inv_LoH_pow_5 = inv_LoH_pow_2 * inv_LoH_pow_2 * inv_LoH;
    return F0 + (1.f - F0) * inv_LoH_pow_5;
inline float vfx_brdf_GLambda(float alpha2, float NoL) {
    float NoL2 = NoL * NoL;
    float t = (1.0f - NoL2) * alpha2 / NoL2;
    return 0.5f * (-1.0f + sqrt(1.0f + t));
inline float vfx_brdf_G(float alpha, float NoL, float NoV) {
    float alpha2 = alpha * alpha;
    float lambdaL = vfx_brdf_GLambda(alpha2, NoL);
    float lambdaV = vfx_brdf_GLambda(alpha2, NoV);
    return 1.f / (1.f + lambdaL + lambdaV);
inline float vfx_brdf_V(float alpha, float NoL, float NoV) {
    float alpha_squared = alpha * alpha;
    float NoL_squared = NoL * NoL;
    float NoV_squared = NoV * NoV;
    float lambda_L = NoV * sqrt(NoL_squared + alpha_squared * (1.0f - NoL_squared));
    float lambda_V = NoL * sqrt(NoV_squared + alpha_squared * (1.0f - NoV_squared));
    return 0.5f / (lambda_L + lambda_V + 1e-6f);
inline float vfx_brdf_V_opt(float alpha, float LoH) {
    float k = alpha * 0.5f;
    float k2 = k * k;
    float invK2 = 1.f - k2;
    return 1.f / (LoH * LoH * invK2 + k2);
static float2 vfx_computeHammonFactors(float NdotL, float NdotH, float NdotV, float LdotV, float alpha)
    
    
    
    
    
    
    
    
    
    float facing = 0.5f + 0.5f * LdotV;
    float rough = facing * (0.9f - 0.4f * facing) * (0.5f + NdotH) / NdotH;
    float smooth = 1.05f * (1.0f - pow(1.0f - NdotL, 5.f)) * (1.0f - pow(1.0f - NdotV, 5.f));
    float single = mix(smooth, rough, alpha);
    float multi = M_PI_F * 0.1159f * alpha;
    return float2(single, multi);
inline float4 vfx_specularDFG_diffuseHammon(float NoV,
                                            float roughness)
    
    
    float3 v = float3(sqrt(1.0 - NoV * NoV),
                      0.0,
                      NoV);
    
    float alpha = roughness * roughness; 
    
    float2 specularDFG = float2(0.0);
    float2 diffuseHammonFactors = float2(0.0);
    
    int const sampleCount = 1024;
    for (int i = 0; i < sampleCount; ++i) {
        float2 random = vfx_sampleHammersley(i, sampleCount);
        
        
        float3 h = vfx_importanceSampleGGX_brdf(random, alpha); 
        float3 l = reflect(-v, h); 
        
        float NoL = saturate(l.z); 
        float NoH = saturate(h.z); 
        float LoH = saturate(dot(l, h));
        
        if (NoL > 0.f) {
            float G = vfx_brdf_G(alpha, NoL, NoV);
            float GVis = G * LoH / (NoH * NoV);
            float Fc = pow(1.f - LoH, 5.f);
            specularDFG.x += (1.f - Fc) * GVis;
            specularDFG.y += Fc * GVis;
        }
        
        
        float3 Ld = vfx_importanceSampleCosine_brdf(random); 
        float NoLd = saturate(Ld.z);
        if (NoLd > 0.f) {
            float3 Hd = normalize(v + Ld);
            float NoHd = Hd.z;
            
            float LoVd = saturate(dot(Ld, v));
            float2 HF = vfx_computeHammonFactors(NoLd, NoHd, NoV, LoVd, alpha);
            diffuseHammonFactors.x += HF.x;
            diffuseHammonFactors.y += HF.y;
        }
    }
    
    return float4(specularDFG.x, specularDFG.y, diffuseHammonFactors.x, diffuseHammonFactors.y) / sampleCount;
inline float3 vfx_irradiance_cube(texturecube<float, access::sample> environment,
                                  uint                               environmentMipmapLevel,
                                  float3                             n_cube)
    float3 n = float3(n_cube.x, -n_cube.z, n_cube.y);
    
    constexpr sampler linearSampler(filter::linear);
    
    float3 L = float3(0.0);
    float weight = 0.0f;
    
    ushort const sampleCount = 1024;
    for (ushort i = 0; i < sampleCount; ++i) {
        float2 random = vfx_sampleHammersley(i, sampleCount);
        float3 l = vfx_importanceSampleCosine_brdf(random, n); 
        
        float NoL = saturate(dot(n, l));
        if (NoL > 0) {
            float3 Li = environment.sample(linearSampler, float3(l.x , l.z, -l.y), level(environmentMipmapLevel)).rgb;
            Li = min(Li, float3(16.));
            L += Li; 
            weight += 1.0;
        }
    }
    
    return L / weight;
inline float vfx_pbr_distanceAttenuation(float3 lightVector)
    float sqrDist = dot(lightVector, lightVector);
    return 1. / max(sqrDist, 0.0001);
inline float3 vfx_pbr_reference_world(VFXPBRSurface                      surface,
                                      texturecube<float, access::sample> environment,
                                      uint                               environmentSamplingLevel,
                                      float4x4                           localDirToWorldCubemapDir,
                                      float                              environmentIntensity)
    constexpr sampler linearSampler(filter::linear, mip_filter::linear);
    
    float3 n = surface.n;
    float3 v = surface.v;
    float3 albedo = surface.albedo;
    float metalness = surface.metalness;
    float roughness = surface.roughness;
    float ambientOcclusion = surface.ao;
    
    float NoV = saturate(dot(n, v));
    
    float3 effectiveAlbedo = mix(albedo, float3(0.0), metalness);
    float3 reflectance = mix(float3(PBR_F0_NON_METALLIC), albedo, metalness);
    
    
    float3 irradiance = float3(0.0);
    
    ushort const sampleCountDiffuse = 1024;
    for (ushort i = 0; i < sampleCountDiffuse; ++i) {
        float2 random = vfx_sampleHammersley(i, sampleCountDiffuse);
        float3 l = vfx_importanceSampleCosine_brdf(random, n); 
        
        float NoL = saturate(dot(n, l));
        
        if (NoL > 0) {
            float3 Li = environment.sample(linearSampler, vfx::mat4_mult_float3(localDirToWorldCubemapDir, l), level(environmentSamplingLevel)).rgb * environmentIntensity;
            irradiance += Li; 
        }
    }
    
    irradiance = irradiance / float(sampleCountDiffuse);
    
    
    float3 specular = float3(0.0);
    float specularWeight = 0.0;
    
    float correctedRoughness = mix(1.0f / 128.0f, 1.0f - 1.0f / 128.0f, roughness);
    float alpha = correctedRoughness * correctedRoughness; 
    
    ushort const sampleCountSpecular = 128;
    for (ushort i = 0; i < sampleCountSpecular; ++i) {
        float2 random = vfx_sampleHammersley(i, sampleCountSpecular);
        float3 h = vfx_importanceSampleGGX_brdf(random, correctedRoughness, n); 
        float3 l = reflect(-v, h); 
        
        float NoL = saturate(dot(n, l));
        float NoH = saturate(dot(n, h));
        float LoH = saturate(dot(l, h));
        
        if (NoH * NoV > 0) {
            float3 Li = environment.sample(linearSampler, vfx::mat4_mult_float3(localDirToWorldCubemapDir, l), level(environmentSamplingLevel)).rgb * environmentIntensity;
            float3 F = vfx_brdf_F(reflectance, LoH);
            float G = vfx_brdf_G(alpha, NoL, NoV);
#if 0
            float D = vfx_brdf_D(alpha, NoH);
            float pdf = (D * NoH) / (4.0f * LoH);
            
            if (pdf >= 0) {
                float3 l = D * F * G / (4.0f * NoV); 
                specular += Li * l / pdf;
                specularWeight += 1.0f;
            }
#else
            specular += Li * F * G * LoH / (NoH * NoV);
            specularWeight += 1.0f;
#endif
        }
    }
    
    specular /= specularWeight;
    
    
    return ambientOcclusion * (effectiveAlbedo * irradiance + specular);
inline float3x3 vfx_ltc_matrix_invert_transpose(float3x3 m)
    float a = m[0][0];
    float b = m[1][0];
    float c = m[0][1];
    float d = m[1][1];
    float det = a * d - b * c;
    m[0][0] = +det * d;
    m[1][0] = -det * b;
    m[1][0] = -det * c;
    m[1][1] = +det * a;
    m[2][2] = 1.f / m[2][2];
    return m;
inline float3x3 vfx_sample_area_light_precomputed_data(float3                 v,
                                                       float3                 n,
                                                       float                  roughness,
                                                       thread float*          brdfNorm,
                                                       texture2d_array<float> bakedDataTexture)
    constexpr sampler linearSampler = sampler(address::clamp_to_edge, filter::linear);
    
    float theta = acos(fabs(dot(n, v)));
    float2 uv = float2(roughness, theta * M_2_PI_F);
    
    float4 dataA = bakedDataTexture.sample(linearSampler, uv, 0);
    float4 dataB = bakedDataTexture.sample(linearSampler, uv, 1);
    
    *brdfNorm = dataB.y;
    
    return float3x3(float3(dataA.x, dataA.y, 0.f),
                    float3(dataA.z, dataA.w, 0.f),
                    float3(0.f, 0.f, dataB.x));
inline float3 vfx_area_light_polygon_edge_vector_form_factor(float3 cornerDirectionA,
                                                             float3 cornerDirectionB)
    
    
    
#if 0
    float theta = acos(dot(cornerDirectionA, cornerDirectionB));
    return (0.5f * M_1_PI_F) * cross(cornerDirectionA, cornerDirectionB) * ((theta > 0.001) ? theta/sin(theta) : 1.0);
#else
    float x = dot(cornerDirectionA, cornerDirectionB);
    float y = abs(x);
    
    float a = 5.42031f + (3.12829f + 0.0902326 * y) * y;
    float b = 3.45068f + (4.18814f + y) * y;
    float thetaOverSinTheta = a / b;
    
    if (x < 0.f)
        thetaOverSinTheta = M_PI_F * rsqrt(1.f - x * x) - thetaOverSinTheta;
    
    float3 u = cross(cornerDirectionA, cornerDirectionB);
    return (0.5f * M_1_PI_F) * thetaOverSinTheta * u;
#endif
inline float vfx_area_light_horizon_clipped_sphere_form_factor_from_polygon_vector_form_factor(float3 vectorFormFactor)
#if 1
    
    float l = length(vectorFormFactor);
    return max((l * l + vectorFormFactor.y) / (l + 1.f), 0.f);
#else
    
    return max(vectorFormFactor.y, 0.f);
#endif
inline float pbr_area_light_eval_rectangle(float4x3 corners)
    
    
    
    float3 corner0 = normalize(corners[0]);
    float3 corner1 = normalize(corners[1]);
    float3 corner2 = normalize(corners[2]);
    float3 corner3 = normalize(corners[3]);
    
    float3 vectorFormFactor = float3(0.f);
    vectorFormFactor += vfx_area_light_polygon_edge_vector_form_factor(corner0, corner1);
    vectorFormFactor += vfx_area_light_polygon_edge_vector_form_factor(corner1, corner2);
    vectorFormFactor += vfx_area_light_polygon_edge_vector_form_factor(corner2, corner3);
    vectorFormFactor += vfx_area_light_polygon_edge_vector_form_factor(corner3, corner0);
    
    return vfx_area_light_horizon_clipped_sphere_form_factor_from_polygon_vector_form_factor(vectorFormFactor);
inline float pbr_area_light_eval_polygon(float3                position,
                                         float3                lightCenter,
                                         float3                lightRight,
                                         float3                lightTop,
                                         uint32_t              vertexCount,
                                         device packed_float2 *vertexPositions)
    
    
    
    float3 vectorFormFactor = float3(0.f);
    for (uint32_t vertexIndex = 0; vertexIndex < vertexCount; ++vertexIndex) {
        packed_float2 localCorner0 = vertexPositions[vertexIndex];
        packed_float2 localCorner1 = vertexPositions[(vertexIndex + 1) % vertexCount];
        
        
        
        float3 cornerDirection0 = lightCenter - localCorner0[0] * lightRight + localCorner0[1] * lightTop;
        float3 cornerDirection1 = lightCenter - localCorner1[0] * lightRight + localCorner1[1] * lightTop;
        
        float3 corner0 = normalize(cornerDirection0 - position);
        float3 corner1 = normalize(cornerDirection1 - position);
        
        vectorFormFactor += vfx_area_light_polygon_edge_vector_form_factor(corner0, corner1);
    }
    
    return vfx_area_light_horizon_clipped_sphere_form_factor_from_polygon_vector_form_factor(vectorFormFactor);
inline float pbr_area_light_line_integral_position(float d, float l) {
    float d_squared = d * d;
    float l_squared = l * l;
    return l / (d * (d_squared + l_squared)) + atan(l / d) / d_squared;
inline float pbr_area_light_line_integral_direction(float d, float l) {
    float d_squared = d * d;
    float l_squared = l * l;
    return l_squared / (d * (d_squared + l_squared));
inline float pbr_area_light_eval_line(float2x3 cornerDirections)
    
    
    
    float3 corner0 = normalize(cornerDirections[0]);
    float3 corner1 = normalize(cornerDirections[1]);
    
    float3 direction = normalize(corner1 - corner0);
    
    if (corner0.y <= 0.f && corner1.y <= 0.f) return 0.f;
    if (corner0.y < 0.f) corner0 = (+corner0 * corner1.y - corner1 * corner0.y) / (+corner1.y - corner0.y);
    if (corner1.y < 0.f) corner1 = (-corner0 * corner1.y + corner1 * corner0.y) / (-corner1.y + corner0.y);
    
    float l1 = dot(corner0, direction);
    float l2 = dot(corner1, direction);
    
    float3 position = corner0 - l1 * direction;
    float d = length(position);
    
    float I = (pbr_area_light_line_integral_position(d, l2) - pbr_area_light_line_integral_position(d, l1)) * position.y
            + (pbr_area_light_line_integral_direction(d, l2) - pbr_area_light_line_integral_direction(d, l1)) * direction.y;
    
    return M_1_PI_F * I;
float2 _grid(float2 uv, float2 lineWidth)
    float4 uvDDXY = float4(dfdx(uv), dfdy(uv));
    float2 uvDeriv = float2(length(uvDDXY.xz), length(uvDDXY.yw));
    bool invertLineX = lineWidth.x > 0.5;
    bool invertLineY = lineWidth.y > 0.5;
    float2 targetWidth = float2(invertLineX ? 1.0 - lineWidth.x : lineWidth.x, invertLineY ? 1.0 - lineWidth.y : lineWidth.y);
    float2 drawWidth = clamp(targetWidth, uvDeriv, 0.5);
    float2 lineAA = uvDeriv * 1.5;
    float2 gridUV = abs(fract(uv) * 2.0 - 1.0);
    gridUV = float2( invertLineX ? gridUV.x : 1.0 - gridUV.x, invertLineY ? gridUV.y : 1.0 - gridUV.y );
    float2 grid2 = smoothstep(drawWidth + lineAA, drawWidth - lineAA, gridUV);
    grid2 *= saturate(targetWidth / drawWidth);
    grid2 = mix(grid2, targetWidth, saturate(uvDeriv * 2.0 - 1.0));
    grid2 = float2( invertLineX ? 1.0 - grid2.x : grid2.x, invertLineY ? 1.0 - grid2.y : grid2.y);
    return grid2;
float2 _gridFast(float2 uv, float2 lineWidth)
    float4 uvDDXY = float4(dfdx(uv), dfdy(uv));
    float2 uvDeriv = float2(length(uvDDXY.xz), length(uvDDXY.yw));
    float2 drawWidth = clamp(lineWidth, uvDeriv, 0.5);
    float2 lineAA = uvDeriv * 1.5;
    float2 gridUV = 1. - abs(fract(uv) * 2.0 - 1.0);
    float2 grid2 = smoothstep(drawWidth + lineAA, drawWidth - lineAA, gridUV);
    grid2 *= saturate(lineWidth / drawWidth);
    grid2 = mix(grid2, lineWidth, saturate(uvDeriv * 2.0 - 1.0));
    return grid2;
float grid(float2 uv, float2 lineWidth)
    float2 grid2 = _gridFast(uv, lineWidth);
    return mix(grid2.x, 1.0, grid2.y);
#pragma body
float2 uv0 = (_surface.diffuseTexcoord.xy - float2(0.5)) * 2.;
float2 uv = uv0 * 500;
float2 uv2 = uv * 10;
float s1 = 0.002;
float s2 = 0.0012;
float g = grid(uv, float2(s1));
float g2 = grid(uv2, float2(s2));
float4 color = float4(0.5, 0.5, 0.5, 0.8);
float4 red = float4(1,0,0,1);
float4 blue = float4(0.1568627451,0.3137254902,1,1);
float2 g0 = _gridFast(uv0, float2(s1)*0.003);
g0 = smoothstep(0., 0.01, g0);
color = mix(color, blue, g0.x);
color = mix(color, red, g0.y);
float border = max(0., 1 - length(uv0));
float p = min(1.0, -(_surface.position.z + 0.1));
_output.color = color * max(g, g2) * pow(border, 0.5) * p;
#import <metal_stdlib>
using namespace metal;
#import "vfx_metal"
struct VFXTessellatorTransforms {
    float4x4 modelViewTransform;
    float4x4 modelViewProjectionTransform;
    float4x4 projectionTransform;
#if OSD_IS_ADAPTIVE
kernel void compute_opensubdiv(
                               constant VFXTessellatorTransforms&     transforms                     [[ buffer(TRANSFORMS_BUFFER_INDEX) ]],
                               constant float&                        tessellationLevel              [[ buffer(TESSELLATION_LEVEL_BUFFER_INDEX) ]],
                               unsigned                               thread_position_in_grid        [[ thread_position_in_grid ]],
                               unsigned                               thread_position_in_threadgroup [[ thread_position_in_threadgroup ]],
                               unsigned                               threadgroup_position_in_grid   [[ threadgroup_position_in_grid ]],
                               OsdPatchParamBufferSet                 osdBuffers, 
                               device MTLQuadTessellationFactorsHalf* quadTessellationFactors        [[ buffer(QUAD_TESSFACTORS_INDEX) ]]
#if OSD_USE_PATCH_INDEX_BUFFER
                               ,device unsigned* patchIndex                                          [[ buffer(OSD_PATCH_INDEX_BUFFER_INDEX) ]]
                               ,device MTLDrawPatchIndirectArguments* drawIndirectCommands           [[ buffer(OSD_DRAWINDIRECT_BUFFER_INDEX) ]]
#endif
                         )
    
    
    
    
    
    
    
    threadgroup int3 patchParam[PATCHES_PER_THREADGROUP];
    
    threadgroup PatchVertexType patchVertices[PATCHES_PER_THREADGROUP * CONTROL_POINTS_PER_PATCH];
    
    const auto real_threadgroup = thread_position_in_grid / REAL_THREADGROUP_DIVISOR;
    const auto subthreadgroup_in_threadgroup = thread_position_in_threadgroup / REAL_THREADGROUP_DIVISOR;
    const auto real_thread_in_threadgroup = thread_position_in_threadgroup & (REAL_THREADGROUP_DIVISOR - 1);
    
#if NEEDS_BARRIER
    const auto validThread = thread_position_in_grid * CONTROL_POINTS_PER_THREAD < osdBuffers.kernelExecutionLimit;
#else
    const auto validThread = true;
    if(thread_position_in_grid * CONTROL_POINTS_PER_THREAD >= osdBuffers.kernelExecutionLimit)
        return;
#endif
    
    
    
    
    if(validThread)
    {
        patchParam[subthreadgroup_in_threadgroup] = OsdGetPatchParam(real_threadgroup, osdBuffers.patchParamBuffer);
        
        for(unsigned threadOffset = 0; threadOffset < CONTROL_POINTS_PER_THREAD; threadOffset++)
        {
            const auto vertexId = osdBuffers.indexBuffer[(thread_position_in_grid * CONTROL_POINTS_PER_THREAD + threadOffset) * IndexLookupStride];
            const auto v = osdBuffers.vertexBuffer[vertexId];
            
            threadgroup auto& patchVertex = patchVertices[thread_position_in_threadgroup * CONTROL_POINTS_PER_THREAD + threadOffset];
            
            
            
            
            
            OsdComputePerVertex(float4(v.position,1), patchVertex, vertexId, transforms.modelViewProjectionTransform, osdBuffers);
        }
    }
    
#if NEEDS_BARRIER
    threadgroup_barrier(mem_flags::mem_threadgroup);
#endif
    
    
    
    
    
    if(validThread)
    {
#if PATCHES_PER_THREADGROUP > 1
        auto patch = patchVertices + subthreadgroup_in_threadgroup * CONTROL_POINTS_PER_THREAD * CONTROL_POINTS_PER_PATCH;
#else
        
        auto patch = patchVertices;
#endif
        
        if(!OsdCullPerPatchVertex(patch, transforms.modelViewTransform))
        {
#if !OSD_USE_PATCH_INDEX_BUFFER
            quadTessellationFactors[real_threadgroup].edgeTessellationFactor[0] = 0.0h;
            quadTessellationFactors[real_threadgroup].edgeTessellationFactor[1] = 0.0h;
            quadTessellationFactors[real_threadgroup].edgeTessellationFactor[2] = 0.0h;
            quadTessellationFactors[real_threadgroup].edgeTessellationFactor[3] = 0.0h;
            quadTessellationFactors[real_threadgroup].insideTessellationFactor[0] = 0.0h;
            quadTessellationFactors[real_threadgroup].insideTessellationFactor[1] = 0.0h;
#endif
            
            patchParam[subthreadgroup_in_threadgroup].z = -1;
#if !NEEDS_BARRIER
            return;
#endif
        }
    }
    
#if NEEDS_BARRIER
    threadgroup_barrier(mem_flags::mem_threadgroup);
#endif
    
    
    
    
    if(validThread && patchParam[subthreadgroup_in_threadgroup].z != -1)
    {
        for(unsigned threadOffset = 0; threadOffset < CONTROL_POINTS_PER_THREAD; threadOffset++)
        {
            OsdComputePerPatchVertex(
                                     patchParam[subthreadgroup_in_threadgroup],
                                     real_thread_in_threadgroup * CONTROL_POINTS_PER_THREAD + threadOffset,
                                     real_threadgroup,
                                     thread_position_in_grid * CONTROL_POINTS_PER_THREAD + threadOffset,
                                     patchVertices + subthreadgroup_in_threadgroup * CONTROL_POINTS_PER_PATCH,
                                     osdBuffers
                                     );
        }
    }
    
#if NEEDS_BARRIER
    threadgroup_barrier(mem_flags::mem_device_and_threadgroup);
#endif
    
    
    
    
    if(validThread && real_thread_in_threadgroup == 0)
    {
        
#if OSD_USE_PATCH_INDEX_BUFFER
        const auto patchId = atomic_fetch_add_explicit((device atomic_uint*)&drawIndirectCommands->patchCount, 1, memory_order_relaxed);
        patchIndex[patchId] = real_threadgroup;
#else
        const auto patchId = real_threadgroup;
#endif
        
        OsdComputePerPatchFactors(
                                  patchParam[subthreadgroup_in_threadgroup],
                                  tessellationLevel,
                                  real_threadgroup,
                                  transforms.projectionTransform,
                                  transforms.modelViewTransform,
                                  osdBuffers,
                                  patchVertices + subthreadgroup_in_threadgroup * CONTROL_POINTS_PER_PATCH,
                                  quadTessellationFactors[patchId]
                                  );
    }
#endif 
enum {
    VFXDeformerAttributeSrcPosition,
    VFXDeformerAttributeSrcNormal,
    VFXDeformerAttributeSrcTangent,
    
    VFXDeformerAttributeDstPosition,
    VFXDeformerAttributeDstNormal,
    VFXDeformerAttributeDstTangent,
    
    VFXDeformerAttributeCount
#define USE_QUAT_FOR_IES 1
#define USE_PBR_DOMINANT_DIRECTION 1
#define PBR_INTENSITY_FACTOR M_PI_2_F
#define BoostFactor (20.0f * PBR_INTENSITY_FACTOR)
struct vfx_light
    float4 color; 
    float3 pos; 
    float3 dir; 
    float shadowRadius; 
    uint8_t lightType; 
    uint8_t shadowSampleCount; 
                                
    union {
        struct {
            float4      cascadeScale[4]; 
            float4      cascadeBias[4];
        } directional; 
        struct {
            float4      attenuationFactors; 
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
            float4x4    projection;
            float       depthBias;
#else
            float3      shadowScaleBias; 
#endif
        } omni;
        struct {
            float4      _attenuationFactors; 
            float2      scaleBias; 
        } spot;
        struct {
            float4      _attenuationFactors; 
            float2      scaleBias; 
#if USE_QUAT_FOR_IES
            float4      light_from_view_quat; 
#else
            float4x4    light_from_view; 
#endif
        } ies;
        union {
            struct {
                float2 halfExtents;
                float doubleSided;
            } rectangle;
            struct {
                uint32_t vertexCount;
                float doubleSided;
            } polygon;
            struct {
                float halfLength;
            } line;
            struct {
                float2 halfExtents;
                float doubleSided;
            } ellipse;
            struct {
                float3 halfExtents;
            } ellipsoid;
        } area;
        struct {
            float3  offset;
            float4  halfExtents; 
            float3  parallaxCenter;
            float3  parallaxExtents;
            int32_t index; 
            int32_t parallaxCorrection; 
        } probe;
    } parameters; 
    float4x4    shadowMatrix; 
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
    float4 tiles[6]; 
#endif
uint8_t categoryBitmask;
#if defined(__METAL_VERSION__) 
using namespace metal;
namespace vfx {
    static constexpr sampler linearSampler = sampler(filter::linear, mip_filter::linear);
struct VFXShaderSurface {
    float3 view;                
    float3 position;            
    float3 normal;              
    float3 geometryNormal;      
    float2 normalTexcoord;      
    float3 tangent;             
    float3 bitangent;           
    float4 diffuse;             
    float2 diffuseTexcoord;     
    float4 specular;            
    float2 specularTexcoord;    
    float4 emission;            
    float2 emissionTexcoord;    
    float4 selfIllumination;            
    float2 selfIlluminationTexcoord;    
    float4 multiply;            
    float2 multiplyTexcoord;    
    float4 transparent;         
    float2 transparentTexcoord; 
    float4 reflective;          
    float  metalness;           
    float2 metalnessTexcoord;   
    float  roughness;           
    float2 roughnessTexcoord;   
    float clearCoat;            
    float2 clearCoatTexcoord;   
    float clearCoatRoughness;   
    float2 clearCoatRoughnessTexcoord;
    float3 clearCoatNormal;     
    float2 clearCoatNormalTexcoord;
    float subsurface;
    float2 subsurfaceTexCoord;
    float3 subsurfaceRadius;
    float2 subsurfaceRadiusTexCoord;
    float shininess;            
    float fresnel;              
    float ambientOcclusion;     
    float2 ambientOcclusionTexcoord;   
    float3 _normalTS;           
    float3 _clearCoatNormalTS;  
#ifdef USE_SURFACE_EXTRA_DECL
    __SurfaceExtraDecl__
#endif
struct VFXShaderLight {
    float4 intensity;
    float3 direction;
    float  _att;
    float3 _spotDirection;
    float  _distance;
enum VFXShadingModel
    VFXShadingModelConstant,
    VFXShadingModelPhong,
    VFXShadingModelNone,
    VFXShadingModelPhysicallyBased,
    VFXShadingModelShadowOnly,
    VFXShadingModelCustom 
#define PROBES_NORMALIZATION 0
#define PROBES_OUTER_BLENDING 1
struct VFXShaderLightingContribution
    float3 ambient;
    float3 diffuse;
    float3 specular;
    float3 modulate;
#ifdef USE_SHADOWONLY
    float shadowFactor;
#endif
#if PROBES_NORMALIZATION
    float4 probesWeightedSum; 
#else
    float  probeRadianceRemainingFactor;
#endif
    thread VFXShaderSurface& surface;
#ifdef USE_PER_VERTEX_LIGHTING
    commonprofile_io out;
#else
    commonprofile_io in;
#endif
#ifdef USE_PBR
    struct {
        float3 albedo;
        float3 envDiffuse;
        float3 envSpecular;
        float3 reflectance;
        float3 probeReflectance;
#ifndef USE_PBR_LAMBERTIAN_REFLECTION
        float2 diffuseHammonFactors;
#endif
#ifdef USE_PBR_TRANSPARENCY
        float  transparency;
#endif
        float  NoV;
        float  selfIlluminationOcclusion;
#ifdef USE_CLEARCOAT
        float  NoVClearCoat;
        float3 probeReflectanceClearCoat;
#endif
    } pbr;
#endif
    
    VFXShaderLightingContribution(thread VFXShaderSurface& iSurface, commonprofile_io io):surface(iSurface)
#ifdef USE_PER_VERTEX_LIGHTING
    ,out(io)
#else
    ,in(io)
#endif
    {
        ambient = 0.f;
        diffuse = 0.f;
        specular = 0.f;
#ifdef USE_SHADOWONLY
        shadowFactor = 1.f;
#endif
#if PROBES_NORMALIZATION
#if PROBES_OUTER_BLENDING
        probesWeightedSum = float4(0.f);
#else
        probesWeightedSum = float4(0.f, 0.f, 0.f, 0.000001f); 
#endif
#else
        probeRadianceRemainingFactor = 1.f;
#endif
#ifdef USE_MODULATE
        modulate = 1.f;
#else
        modulate = 0.f;
#endif
    }
#ifdef USE_PBR
    void prepareForPBR(texture2d<float, access::sample> specularDFGDiffuseHammonTexture, float occ)
    {
        pbr.envDiffuse = 0.f;
        pbr.envSpecular = 0.f;
        pbr.selfIlluminationOcclusion = occ;
      
        pbr.albedo = surface.diffuse.rgb;
#ifdef USE_PBR_TRANSPARENCY
  #ifdef DIFFUSE_PREMULTIPLIED
        
        pbr.transparency = 1.f;
  #else
        pbr.transparency = surface.diffuse.a;
  #endif
  #ifdef USE_TRANSPARENCY
    #ifdef USE_PER_VERTEX_LIGHTING
        pbr.transparency *= out.transparency;
    #else
        pbr.transparency *= in.transparency;
    #endif
  #endif
  #ifdef USE_TRANSPARENT
        pbr.transparency *= surface.transparent.a;
  #endif
        pbr.albedo *= pbr.transparency;
  #ifdef DIFFUSE_PREMULTIPLIED
        
        
        pbr.transparency *= surface.diffuse.a;
  #endif
#endif
        
        float3 n = surface.normal;
        float3 v = surface.view;
        pbr.NoV = abs(dot(n, v));
        
        float roughness = surface.roughness;
#ifdef USE_PBR_LAMBERTIAN_REFLECTION
        float2 specularDFG = specularDFGDiffuseHammonTexture.sample(vfx::linearSampler, float2(pbr.NoV, roughness)).rg;
#else
        float4 env = specularDFGDiffuseHammonTexture.sample(vfx::linearSampler, float2(pbr.NoV, roughness));
        float2 specularDFG = env.xy;
        pbr.diffuseHammonFactors = env.zw;
#endif
        
        pbr.reflectance = mix(PBR_F0_NON_METALLIC, pbr.albedo, surface.metalness);
        pbr.probeReflectance = pbr.reflectance * specularDFG.r + specularDFG.g;
                                
#ifdef USE_CLEARCOAT
        pbr.NoVClearCoat = abs(dot(surface.clearCoatNormal, v));
        float2 DFGClearCoat = specularDFGDiffuseHammonTexture.sample(vfx::linearSampler, float2(pbr.NoVClearCoat, surface.clearCoatRoughness)).rg;
        pbr.probeReflectanceClearCoat = 0.04 * DFGClearCoat.r + DFGClearCoat.g;
#endif
    }
#endif
#ifdef USE_LIGHT_MODIFIER
    __LightModifierExtraDecl__
#endif
    float4 debug_pixel(float2 fragmentPosition)
    {
        const int width = 64;
        switch (int(fragmentPosition.x + fragmentPosition.y ) / width) {
            case 0: return float4(surface.view, 1.f);
            case 1: return float4(surface.position, 1.f);
            case 2: return float4(surface.normal, 1.f);
            case 3: return float4(surface.geometryNormal, 1.f);
            case 4: return float4(float3(surface.ambientOcclusion), 1.f);
            case 5: return surface.diffuse;
            case 6: return float4(float3(surface.metalness), 1.f);
            case 7: return float4(float3(surface.roughness), 1.f);
            case 8: return float4(ambient, 1.f);
            case 9: return float4(diffuse, 1.f);
            default: return float4(specular, 1.f);
        }
    }
    
    static inline float3 lambert_diffuse(float3 l, float3 n, float3 color, float intensity) {
        return color * (intensity * saturate(dot(n, l)));
    }
    void phong(float3 l, float3 color, float intensity)
    {
        float3 D = lambert_diffuse(l, surface.normal, color, intensity);
        diffuse += D;
        float3 r = reflect(-l, surface.normal);
        specular += powr(saturate(dot(r, surface.view)), surface.shininess) * D;
    }
#ifdef USE_PBR
    void physicallyBased(float3 l, float3 color, float intensity)
    {
        float3 n         = surface.normal;
        float3 v         = surface.view;
        float  roughness = surface.roughness;
        float  alpha     = roughness * roughness;
        float3 h = normalize(l + v);
        float NoL = saturate(dot(n, l));
        float NoH = saturate(dot(n, h));
        float LoH = saturate(dot(l, h));
        
        float D   = vfx_brdf_D(alpha, NoH);
        float3 F  = vfx_brdf_F_opt(pbr.reflectance, LoH);
        float Vis = vfx_brdf_V(alpha, NoL, pbr.NoV);
        
        diffuse  += color * (NoL * M_1_PI_F * intensity);
        specular += color * F * (NoL * D * Vis * intensity);
        
        #ifdef USE_CLEARCOAT
            n = surface.clearCoatNormal;
            roughness = max(surface.clearCoatRoughness, 0.089f);
            alpha = roughness * roughness; 
        
            
            
            float NoH_coat = saturate(dot(n, h));
            float NoL_coat = saturate(dot(n, l));
            D   = vfx_brdf_D(alpha, NoH_coat);
            F   = vfx_brdf_F_opt(0.04, LoH) * surface.clearCoat;
            Vis = vfx_brdf_V(alpha, NoL_coat, saturate(dot(n,v)));
        
            float attenuation = 1.0 - F.r;
            specular *=  (attenuation * attenuation);
            specular += color * F * ( NoL_coat * D * Vis * intensity);
        #endif
    }
#endif
    void custom(float3 _l, float3 _color, float _intensity)
    {
#ifdef USE_LIGHT_MODIFIER
        thread VFXShaderLightingContribution &_lightingContribution = *this;
        thread VFXShaderSurface& _surface = surface;
        VFXShaderLight _light = {.direction = _l, .intensity = float4(_color, 1.f), ._att = _intensity };
        
        __DoLightModifier__
        
#endif
    }
    void shade(float3 l, float3 color, float intensity)
    {
#ifdef LIGHTING_MODEL
        switch (LIGHTING_MODEL) {
#ifdef USE_SHADOWONLY
            case VFXShadingModelShadowOnly:        shadowFactor *= intensity; break;
#endif
            case VFXShadingModelPhong:             phong(l, color, intensity);   break;
#ifdef USE_PBR
            case VFXShadingModelPhysicallyBased:   physicallyBased(l, color, intensity);     break;
#endif
            case VFXShadingModelCustom:            custom(l, color, intensity);  break;
            default:  break; 
        }
#endif
    }
    
    
    
    float pbr_dist_attenuation_alternate(float3 l, float cutoff) {
        
        float radius = 0.1f; 
        float factor = 1.f / (1.f + length(l)/radius);
        float attenuation = saturate(factor * factor); 
        return saturate((attenuation - cutoff) / (1.f - cutoff));
    }
    float pbr_dist_attenuation(float3 l, float inv_square_radius) {
        float sqr_dist = length_squared(l);
        float atten = 1.f / max(sqr_dist, 0.0001f);
        
        float factor = saturate(1.f - vfx::sq(sqr_dist * inv_square_radius));
        return atten * factor * factor;
    }
    float non_pbr_dist_attenuation(float3 l, float4 att)
    {
        return powr(saturate(length(l) * att.x + att.y), att.z);
    }
    float dist_attenuation(float3 unnormalized_l, vfx_light light)
    {
#ifdef USE_PBR
        return pbr_dist_attenuation(unnormalized_l, light.parameters.omni.attenuationFactors.w);
        
        
#else
#ifdef USE_SHADOWONLY
        return 1.f;
#endif
        return non_pbr_dist_attenuation(unnormalized_l, light.parameters.omni.attenuationFactors);
#endif
    }
    float spot_attenuation(float3 l, vfx_light light)
    {
#ifdef USE_SHADOWONLY
        return 1.f;
#endif
        
        return saturate(dot(l, light.dir) * light.parameters.spot.scaleBias.x + light.parameters.spot.scaleBias.y);
    }
    void shade_modulate(float3 l, float4 color, float intensity)
    {
        constexpr half3 white = half3(1.h);
        
        modulate *= float3(mix(white, half3(color.rgb), half(color.a * intensity)));
    }
    float3 gobo(float3 pos, vfx_light light, texture2d<half> goboTexture, sampler goboSampler)
    {
        half3 g = texture2DProj(goboTexture, goboSampler, (light.shadowMatrix * float4(pos, 1.f))).rgb;
        return light.color.rgb * float3(mix(1.h, g, half(light.color.a)));
    }
    float shadow(float3 pos, vfx_light light, depth2d<float> shadowMap)
    {
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
        float4 tile = light.tiles[0];
#else
        float4 tile = {0.0, 0.0, 1.0, 1.0};
#endif
        float shadow = ComputeShadow(vfx_shadow_sampler, pos, light.shadowMatrix, shadowMap, tile);
        return 1.f - shadow * light.color.a; 
    }
    
    float shadow(float3 pos, vfx_light light, depth2d<float> shadowMap, constant float4* shadowKernel)
    {
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
        float4 tile = light.tiles[0];
#else
        float4 tile = {0.0, 0.0, 1.0, 1.0};
#endif
        float4 lightScreen = transformViewPosInShadowSpace(pos, light.shadowMatrix);
        lightScreen.xyz /= lightScreen.w;
        float shadow = ComputeSoftShadow(vfx_shadow_sampler, lightScreen.xyz, shadowMap, shadowKernel, light.shadowSampleCount, light.shadowRadius, tile);
        return 1.f - shadow * light.color.a; 
    }
    float shadow(float3 pos, vfx_light light, depth2d<float> shadowMap, constant float4* shadowKernel, int shadowSampleCount)
    {
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
        float4 tile = light.tiles[0];
#else
        float4 tile = {0.0, 0.0, 1.0, 1.0};
#endif
        float4 lightScreen = transformViewPosInShadowSpace(pos, light.shadowMatrix);
        lightScreen.xyz /= lightScreen.w;
        float shadow = ComputeSoftShadow(vfx_shadow_sampler, lightScreen.xyz, shadowMap, shadowKernel, shadowSampleCount, light.shadowRadius, tile);
        return 1.f - shadow * light.color.a; 
    }
    float shadow(float3 pos, vfx_light light, depth2d<float> shadowMap, int shadowSampleCount)
    {
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
        float4 tile = light.tiles[0];
#else
        float4 tile = {0.0, 0.0, 1.0, 1.0};
#endif
        float shadow = ComputeSoftShadowGrid(vfx_shadow_sampler, pos, light.shadowMatrix, shadowMap, shadowSampleCount, tile);
        return 1.f - shadow * light.color.a; 
    }
ushort getCubeFace(float3 dir)
    
    float3 absDir = abs(dir);
    float maxAxis = max(absDir.x, max(absDir.y, absDir.z));
    if (absDir.z == maxAxis) {
        
        return dir.z > 0.0f ? 4 : 5;
    } else if (absDir.y == maxAxis) {
        
        return dir.y > 0.0f ? 2 : 3;
    } else {
        
        
        return dir.x > 0.0f ? 0 : 1;
    }
float4x4 getFaceRotation(ushort face) {
    float4 xAxis(1.0, 0.0, 0.0, 0.0);
    float4 yAxis(0.0, 1.0, 0.0, 0.0);
    float4 zAxis(0.0, 0.0, 1.0, 0.0);
    float4 zero (0.0, 0.0, 0.0, 1.0);
    switch (face) {
        case 0: return float4x4(-zAxis, yAxis,  xAxis, zero);
        case 1: return float4x4( zAxis, yAxis, -xAxis, zero);
        case 2: return float4x4( xAxis,-zAxis,  yAxis, zero);
        case 3: return float4x4( xAxis, zAxis, -yAxis, zero);
        case 4: return float4x4(-xAxis, yAxis, -zAxis, zero);
        case 5: return float4x4( xAxis, yAxis,  zAxis, zero);
        default: return float4x4();
    }
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
    float shadow_omni(float3 pos_vs, float3 nrm_vs, vfx_light light, depth2d<float> shadowMap, constant float4* shadowKernel, int sampleCount)
#else
    float shadow_omni(float3 pos_vs, float3 nrm_vs, vfx_light light, depthcube<float> shadowMap, constant float4* shadowKernel, int sampleCount)
#endif
    {
        
#define USE_TANGENT_SAMPLING 0
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
        float  depthBias = light.parameters.omni.depthBias;
#else
        float2 scaleBias = light.parameters.omni.shadowScaleBias.xy;
        float  depthBias = light.parameters.omni.shadowScaleBias.z;
#endif
        
        pos_vs += nrm_vs * depthBias;
        
        float4 pos_ls = (light.shadowMatrix * float4(pos_vs, 1.f));
#if !CFX_USE_ATLAS_FOR_SHADOW_MAP
        
        float z_lin = vfx::reduce_max(abs(pos_ls));
        
        
        
        
        float z_ndc = (z_lin * scaleBias.x + scaleBias.y) / z_lin - depthBias;
#endif
        
        float shadow;
        if (sampleCount <= 1) {
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
            ushort face = getCubeFace(normalize(pos_ls.xyz));
            float4 tile = light.tiles[face];
            shadow = ComputeShadow(vfx_shadow_sampler, (getFaceRotation(face) * pos_ls).xyz, light.parameters.omni.projection, shadowMap, tile);
#else
            shadow = shadowMap.sample_compare(vfx_shadow_sampler, pos_ls.xyz, z_ndc);
#endif
        } else {
            
            float filteringSizeFactor = light.shadowRadius;
#if USE_TANGENT_SAMPLING
            float3 tgt_x, tgt_y;
            vfx::orthogonal_basis(pos_ls, tgt_x, tgt_y);
#else
            float3 nrm_ls = (light.shadowMatrix * float4(nrm_vs, 0.f)).xyz;
#endif
            
            float totalAccum = 0.0;
            for(int i=0; i < sampleCount; i++){
#if USE_TANGENT_SAMPLING
                float2 scale = shadowKernel[i].xy * filteringSizeFactor * 2.f;
                float3 smp_ls = pos_ls.xyz + tgt_x * scale.x + tgt_y * scale.y;
#else
                float3 smp_ls = pos_ls.xyz + vfx::randomHemisphereDir(nrm_ls, shadowKernel[i].xy * 0.5 + 0.5) * filteringSizeFactor;
#endif
                
                
                
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
                ushort face = getCubeFace(normalize(smp_ls.xyz));
                float4 tile = light.tiles[face];
                totalAccum += ComputeShadow(vfx_shadow_sampler, (getFaceRotation(face) * float4(smp_ls, 1.0)).xyz, light.parameters.omni.projection, shadowMap, tile);
#else
                totalAccum += shadowMap.sample_compare(vfx_shadow_sampler, smp_ls, z_ndc);
#endif
            }
            shadow = totalAccum / float(sampleCount);
        }
        return 1.f - shadow * light.color.a; 
    }
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
    float shadow(float3 pos, constant vfx_light& light, depth2d<float> shadowMaps, int cascadeCount, bool blendCascade, constant float4* shadowKernel, int sampleCount)
    {
        float shadow = ComputeCascadedShadow(vfx_shadow_sampler, pos, light.shadowMatrix, light.parameters.directional.cascadeScale, light.parameters.directional.cascadeBias, cascadeCount, shadowMaps, blendCascade, shadowKernel, sampleCount, light.shadowRadius, light.tiles).a;
        return 1.f - shadow * light.color.a; 
    }
#else
    float shadow(float3 pos, constant vfx_light& light, depth2d_array<float> shadowMaps, int cascadeCount, bool blendCascade, constant float4* shadowKernel, int sampleCount)
    {
        float shadow = ComputeCascadedShadow(vfx_shadow_sampler, pos, light.shadowMatrix, light.parameters.directional.cascadeScale, light.parameters.directional.cascadeBias, cascadeCount, shadowMaps, blendCascade, shadowKernel, sampleCount, light.shadowRadius).a;
        return 1.f - shadow * light.color.a; 
    }
#endif
    
    void add_directional(vfx_light light)
    {
#ifdef USE_PBR
        float intensity = PBR_INTENSITY_FACTOR;
#else
        float intensity = 1.0f;
#endif
        shade(light.dir, light.color.rgb, intensity);
    }
    
    void add_directional(vfx_light light, texture2d<half> goboTexture, sampler goboSampler)
    {
#ifdef USE_PBR
        float intensity = PBR_INTENSITY_FACTOR;
#else
        float intensity = 1.0f;
#endif
        light.color.rgb = gobo(surface.position, light, goboTexture, goboSampler);
        
          
            shade(light.dir, light.color.rgb, intensity);
    }
    
    void add_directional(vfx_light light, depth2d<float> shadowMap)
    {
#ifdef USE_PBR
        float intensity = PBR_INTENSITY_FACTOR;
#else
        float intensity = 1.0f;
#endif
        intensity *= shadow(surface.position, light, shadowMap);
        shade(light.dir, light.color.rgb, intensity);
    }
    
    void add_directional(vfx_light light, depth2d<float> shadowMap, constant float4* shadowKernel)
    {
#ifdef USE_PBR
        float intensity = PBR_INTENSITY_FACTOR;
#else
        float intensity = 1.0f;
#endif
        intensity *= shadow(surface.position, light, shadowMap, shadowKernel);
        shade(light.dir, light.color.rgb, intensity);
    }
    void add_directional(vfx_light light, depth2d<float> shadowMap, constant float4* shadowKernel, int sampleCount)
    {
#ifdef USE_PBR
        float intensity = PBR_INTENSITY_FACTOR;
#else
        float intensity = 1.0f;
#endif
        intensity *= shadow(surface.position, light, shadowMap, shadowKernel, sampleCount);
        shade(light.dir, light.color.rgb, intensity);
    }
    
    void add_directional(vfx_light light, depth2d<float> shadowMap, int sampleCount)
    {
#ifdef USE_PBR
        float intensity = PBR_INTENSITY_FACTOR;
#else
        float intensity = 1.0f;
#endif
        intensity *= shadow(surface.position, light, shadowMap, sampleCount);
        shade(light.dir, light.color.rgb, intensity);
    }
    
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
    void add_directional(constant vfx_light& light, depth2d<float> shadowMaps, int cascadeCount, bool blendCascade, constant float4* shadowKernel, int sampleCount, bool debugCascades)
#else
    void add_directional(constant vfx_light& light, depth2d_array<float> shadowMaps, int cascadeCount, bool blendCascade, constant float4* shadowKernel, int sampleCount, bool debugCascades)
#endif
    {
#ifdef USE_PBR
        float intensity = PBR_INTENSITY_FACTOR;
#else
        float intensity = 1.0f;
#endif
        if (debugCascades) {
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
            float4 shadowDebug = ComputeCascadedShadow(vfx_shadow_sampler, surface.position, light.shadowMatrix, light.parameters.directional.cascadeScale, light.parameters.directional.cascadeBias, cascadeCount, shadowMaps, blendCascade, shadowKernel, sampleCount, light.shadowRadius, light.tiles);
#else
            float4 shadowDebug = ComputeCascadedShadow(vfx_shadow_sampler, surface.position, light.shadowMatrix, light.parameters.directional.cascadeScale, light.parameters.directional.cascadeBias, cascadeCount, shadowMaps, blendCascade, shadowKernel, sampleCount, light.shadowRadius);
#endif
            intensity *= (1.f - shadowDebug.a);
            shade(light.dir, light.color.rgb, intensity);
            diffuse.rgb = mix(diffuse.rgb, shadowDebug.rgb, light.color.a);
        } else {
            intensity *= shadow(surface.position, light, shadowMaps, cascadeCount, blendCascade, shadowKernel, sampleCount);
            shade(light.dir, light.color.rgb, intensity);
        }
    }
    
    void add_omni(vfx_light light)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        shade(l, light.color.rgb, dist_attenuation(unnormalized_l, light) * BoostFactor);
    }
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
    void add_omni(vfx_light light, depth2d<float> shadowMap, constant float4* shadowKernel, int sampleCount)
#else
    void add_omni(vfx_light light, depthcube<float> shadowMap, constant float4* shadowKernel, int sampleCount)
#endif
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light) * BoostFactor;
        intensity *= shadow_omni(surface.position, surface.normal, light, shadowMap, shadowKernel, sampleCount);
        shade(l, light.color.rgb, intensity);
    }
    void add_local_omni(vfx_light light)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        shade(l, light.color.rgb, dist_attenuation(unnormalized_l, light) * BoostFactor);
    }
    
    void add_spot(vfx_light light)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light) * BoostFactor;
        intensity      *= spot_attenuation(l, light);
        shade(l, light.color.rgb, intensity);
    }
    void add_spot(vfx_light light, texture2d<half> goboTexture, sampler goboSampler)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light) * BoostFactor;
        intensity      *= spot_attenuation(l, light);
        light.color.rgb = gobo(surface.position, light, goboTexture, goboSampler);
        
        
        
              shade(l, light.color.rgb, intensity);
        
    }
    void add_local_spot(vfx_light light)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light) * BoostFactor;
        intensity      *= spot_attenuation(l, light);
        shade(l, light.color.rgb, intensity);
    }
    
    void add_spot(vfx_light light, depth2d<float> shadowMap, constant float4* shadowKernel, int sampleCount)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light) * BoostFactor;;
        intensity      *= spot_attenuation(l, light);
        intensity      *= shadow(surface.position, light, shadowMap, shadowKernel, sampleCount);
        shade(l, light.color.rgb, intensity);
    }
    
#ifdef USE_PBR
    
#ifdef CFX_SUPPORT_CUBE_ARRAY
    void add_local_probe(vfx_light light, texturecube_array<half> probeTextureArray)
#else
    void add_local_probe(vfx_light light, texture2d_array<half> probeTextureArray)
#endif
    {
#if !PROBES_NORMALIZATION
        if (probeRadianceRemainingFactor <= 0.f)
            return;
#endif
        bool parallaxCorrection = light.parameters.probe.parallaxCorrection;
        int    probeIndex       = light.parameters.probe.index;
        float3 probeExtents     = light.parameters.probe.halfExtents.xyz;
        float  blendDist        = light.parameters.probe.halfExtents.w;
        float3 probeOffset      = light.parameters.probe.offset;
        float3 parallaxExtents  = light.parameters.probe.parallaxExtents;
        float3 parallaxCenter   = light.parameters.probe.parallaxCenter;
        float3 n = surface.normal;
        float3 v = surface.view;
        float3 r = reflect(-v, n); 
        float3 specDir = vfx::mat4_mult_float3(light.shadowMatrix, r);
        
        float3 pos_ls = (light.shadowMatrix * float4(surface.position, 1.f)).xyz;
        
        float3 d = abs(pos_ls) - probeExtents;
#if PROBES_OUTER_BLENDING
        if (any(d > blendDist))
#else
        if (any(d > 0.f))
#endif
        {
            return;
        }
#if PROBES_NORMALIZATION
        
        
#if PROBES_OUTER_BLENDING
        float3 nd = saturate(-(d / blendDist) * 0.5f + 0.5f);
#else
        float3 nd = saturate(-(d / blendDist));
#endif
        float probeFactor = (nd.x * nd.y * nd.z) * light.color.r;
#else
        
        float sd = min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
#if PROBES_OUTER_BLENDING
        float probeFactor = saturate(1.f - sd / blendDist);
#else
        float probeFactor = saturate(-sd / blendDist);
#endif
        
        
        
        probeFactor *= probeRadianceRemainingFactor * light.color.r; 
#endif
        if (parallaxCorrection ) {
            
            float3 pos_off = pos_ls + parallaxCenter;
            float3 t1 = ( parallaxExtents - pos_off) / specDir;
            float3 t2 = (-parallaxExtents - pos_off) / specDir;
            float3 tmax = max(max(0, t1), t2); 
            float t = min(tmax.x, min(tmax.y, tmax.z));
            
            float3 hit_ls = pos_ls + specDir * t;
            specDir = hit_ls - probeOffset;
        }
        
        specDir.z *= -1.0;
        float mipd = float(probeTextureArray.get_num_mip_levels()) - 1.f;
        const float intensity = surface.ambientOcclusion * probeFactor;
        float mips = surface.roughness * mipd;
#ifdef CFX_SUPPORT_CUBE_ARRAY
        float3 LD = float3(probeTextureArray.sample(vfx::linearSampler, specDir, probeIndex, level(mips)).rgb);
#else
        float2 specUV = vfx::dual_paraboloid_from_cartesian(normalize(specDir));
        float3 LD = float3(probeTextureArray.sample(vfx::linearSampler, specUV, probeIndex, level(mips)).rgb);
#endif
        
        
#if PROBES_NORMALIZATION
        probesWeightedSum += float4(LD * intensity * pbr.probeReflectance, probeFactor);
#else
        probeRadianceRemainingFactor = saturate(probeRadianceRemainingFactor - probeFactor);
        specular += LD * intensity * pbr.probeReflectance;
#endif
        
#ifdef USE_CLEARCOAT
        n = surface.clearCoatNormal;
        r = reflect(-v, n);
        specDir = vfx::mat4_mult_float3(light.shadowMatrix, r);
        if (parallaxCorrection ) {
            float3 pos_off = pos_ls + parallaxCenter;
            
            float3 t1 = ( parallaxExtents - pos_off) / specDir;
            float3 t2 = (-parallaxExtents - pos_off) / specDir;
            float3 tmax = max(max(0, t1), t2); 
            float t = min(tmax.x, min(tmax.y, tmax.z));
            
            
            float3 hit_ls = pos_ls + specDir * t;
            specDir = hit_ls - probeOffset;
        }
        mips = surface.clearCoatRoughness * mipd;
#ifdef CFX_SUPPORT_CUBE_ARRAY
        LD = float3(probeTextureArray.sample(vfx::linearSampler, specDir, probeIndex, level(mips)).rgb);
#else
        specUV = vfx::dual_paraboloid_from_cartesian(normalize(specDir));
        LD = float3(probeTextureArray.sample(vfx::linearSampler, specUV, probeIndex, level(mips)).rgb);
#endif
#if PROBES_NORMALIZATION
        probesWeightedSum += float4(LD * intensity * pbr.probeReflectanceClearCoat, probeFactor) * surface.clearCoat;
#else
        specular += LD * intensity * pbr.probeReflectanceClearCoat  * surface.clearCoat;
#endif
#endif
    }
    void add_global_probe(float4x4 localDirToWorldCubemapDir,
                          float environmentIntensity,
#ifdef CFX_SUPPORT_CUBE_ARRAY
                          texturecube_array<half> probeTextureArray
#else
                          texture2d_array<half> probeTextureArray
#endif
                          )
    {
        float3 n = surface.normal;
        float3 v = surface.view;
        float3 r = reflect(-v, n); 
        
        float3 specDir = vfx::mat4_mult_float3(localDirToWorldCubemapDir, r);
        float mips = surface.roughness * float(probeTextureArray.get_num_mip_levels() - 1);
        
#ifdef CFX_SUPPORT_CUBE_ARRAY
        float3 LD = float3(probeTextureArray.sample(vfx::linearSampler, specDir, 0, level(mips)).rgb);
#else
        float2 specUV = vfx::dual_paraboloid_from_cartesian(normalize(specDir));
        float3 LD = float3(probeTextureArray.sample(vfx::linearSampler, specUV, 0, level(mips)).rgb);
#endif
        
        
        specular += pbr.probeReflectance * LD * surface.ambientOcclusion * environmentIntensity;
    }
    void add_global_probe(texturecube<float, access::sample> specularLD,
                          float4x4                           localDirToWorldCubemapDir,
                          float                              environmentIntensity)
    {
        float3 n        = surface.normal;
        float3 v        = surface.view;
        float3 r        = reflect(-v, n); 
        float roughness = surface.roughness;
#if USE_PBR_DOMINANT_DIRECTION
        float alpha = roughness * roughness;
        float smoothness = 1.0f - alpha;
        float specularLerpFactor = (1. - smoothness * (sqrt(smoothness) + alpha));
        float3 specularDominantNDirection = mix(r, n, specularLerpFactor); 
#else
        float3 specularDominantNDirection = r;
#endif
        
        
        float mipLevel = roughness * float(specularLD.get_num_mip_levels() - 1);
        float3 dir = vfx::mat4_mult_float3(localDirToWorldCubemapDir, specularDominantNDirection);
        float3 LD = specularLD.sample(vfx::linearSampler, dir, level(mipLevel)).rgb;
        pbr.envSpecular += pbr.probeReflectance * LD * surface.ambientOcclusion * environmentIntensity;
    }
#ifdef USE_CLEARCOAT
    void add_global_probeClearCoat(texturecube<float, access::sample> specularLD,
                          float4x4                           localDirToWorldCubemapDir,
                          float                              environmentIntensity)
    {
        float3 n = surface.clearCoatNormal;
        
        float3 v        = surface.view;
        float3 r        = reflect(-v, n); 
        float roughness = surface.clearCoatRoughness;
        
        float mipLevel = roughness * float(specularLD.get_num_mip_levels() - 1);
        float3 LD = specularLD.sample(vfx::linearSampler, vfx::mat4_mult_float3(localDirToWorldCubemapDir, r), level(mipLevel)).rgb;
        LD *= surface.ambientOcclusion;
        
        
        float Fc = vfx_brdf_F_opt(0.04f, pbr.NoVClearCoat).r * surface.clearCoat;
        float attenuation = 1.0f - Fc;
        specular *= (attenuation * attenuation);
        
        specular += LD * environmentIntensity * pbr.probeReflectanceClearCoat * surface.clearCoat;
    }
#endif
    
    
    void add_irradiance_from_selfIllum()
    {
        float selfIlluminationAO = saturate(mix(1.f, surface.ambientOcclusion, pbr.selfIlluminationOcclusion));
        float3 irradiance = surface.selfIllumination.rgb;
        
        float3 diffuseAlbedo = mix(pbr.albedo, float3(0.0), surface.metalness);
#ifdef USE_PBR_LAMBERTIAN_REFLECTION
        pbr.envDiffuse += selfIlluminationAO * irradiance * diffuseAlbedo;
#else
        float3 diffuseReflectance = diffuseAlbedo * (pbr.diffuseHammonFactors.x + diffuseAlbedo * pbr.diffuseHammonFactors.y);
        pbr.envDiffuse += selfIlluminationAO * irradiance * diffuseReflectance;
#endif
    }
    void add_global_irradiance_from_sh(float4x4         localDirToWorldCubemapDir,
#if defined(USE_PROBES_LIGHTING) && (USE_PROBES_LIGHTING == 2)
                                       sh2_coefficients shCoefficients)
#else
    sh3_coefficients shCoefficients)
#endif
    {
        float3 n_sh_space = vfx::mat4_mult_float3(localDirToWorldCubemapDir, surface.normal);
        float3 irradiance = shEvalDirection(float4(n_sh_space.xy, -n_sh_space.z, 1.), shCoefficients);
        
        float3 diffuseAlbedo = mix(pbr.albedo, float3(0.0), surface.metalness);
#ifdef USE_PBR_LAMBERTIAN_REFLECTION
        pbr.envDiffuse += surface.ambientOcclusion * irradiance * diffuseAlbedo;
#else
        float3 diffuseReflectance = diffuseAlbedo * (pbr.diffuseHammonFactors.x + diffuseAlbedo * pbr.diffuseHammonFactors.y);
        pbr.envDiffuse += surface.ambientOcclusion * irradiance * diffuseReflectance;
#endif
    }
    void add_global_irradiance_probe(texturecube<float, access::sample> irradianceTexture,
                                     float4x4                           localDirToWorldCubemapDir,
                                     float                              environmentIntensity)
    {
#if USE_PBR_DOMINANT_DIRECTION
        float3 n = surface.normal;
        float3 v = surface.view;
        
        
        const half a = 1.02341h * surface.roughness - 1.51174h; 
        const half b = -0.511705h * surface.roughness + 0.755868h;
        const half diffuseBendFactor = saturate((pbr.NoV * a + b) * surface.roughness);
        float3 diffuseDominantNDirection = mix(n, v, diffuseBendFactor);
#else
        float3 diffuseDominantNDirection = n;
#endif
        
        float3 n_cube_space = vfx::mat4_mult_float3(localDirToWorldCubemapDir, diffuseDominantNDirection);
        float3 irradiance = irradianceTexture.sample(vfx::linearSampler, n_cube_space).rgb;
        
        float3 diffuseAlbedo = mix(pbr.albedo, float3(0.0), surface.metalness);
#ifdef USE_PBR_LAMBERTIAN_REFLECTION
        pbr.envDiffuse += (surface.ambientOcclusion * environmentIntensity) * irradiance * diffuseAlbedo;
#else
        float3 diffuseReflectance = diffuseAlbedo * (pbr.diffuseHammonFactors.x + diffuseAlbedo * pbr.diffuseHammonFactors.y);
        pbr.envDiffuse += (surface.ambientOcclusion * environmentIntensity) * irradiance * diffuseReflectance;
#endif
    }
#endif 
    
    static constexpr sampler iesSampler = sampler(filter::linear, mip_filter::none, address::clamp_to_edge);
    
    float ies_attenuation(float3 l, vfx_light light, texture2d<half> iesTexture)
    {
#if USE_QUAT_FOR_IES
        float3 v    = vfx::quaternion_rotate_vector(light.parameters.ies.light_from_view_quat, -l);
#else
        float3 v    = vfx::matrix_rotate(light.parameters.ies.light_from_view, -l);
#endif
        float phi   = (v.z * light.parameters.ies.scaleBias.x + light.parameters.ies.scaleBias.y);
        float theta = atan2(v.y, v.x) * 0.5f * M_1_PI_F;
        return iesTexture.sample(iesSampler, float2(phi, abs(theta))).r;
    }
    void add_ies(vfx_light light, texture2d<half> iesTexture)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light);
        intensity      *= ies_attenuation(l, light, iesTexture);
        shade(l, light.color.rgb, intensity);
    }
    void add_ies(vfx_light light, texture2d<half> iesTexture, depth2d<float> shadowMap, constant float4* shadowKernel, int sampleCount)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light);
        intensity      *= ies_attenuation(l, light, iesTexture);
        intensity      *= shadow(surface.position, light, shadowMap, shadowKernel, sampleCount);
        shade(l, light.color.rgb, intensity);
    }
    
    void add_area_rectangle(vfx_light light, texture2d_array<float> bakedDataTexture)
    {
#ifdef USE_PBR
        float3 v = surface.view;
        float3 n = surface.normal;
        float3 p = surface.position;
        
        float3 tangent = normalize(v - n * dot(v, n));
        float3 bitangent = cross(n, tangent);
        float3x3 shadingSpaceTransform = transpose(float3x3(tangent, n, bitangent));
        float3 lightCenter = light.shadowMatrix[3].xyz;
        
        
        float sidedness = dot(light.dir, lightCenter - p);
        if (light.parameters.area.rectangle.doubleSided == false && sidedness <= 0.f)
            return;
        
        float3 lightRight = light.shadowMatrix[0].xyz * light.parameters.area.rectangle.halfExtents.x * sign(sidedness);
        float3 lightTop   = light.shadowMatrix[1].xyz * light.parameters.area.rectangle.halfExtents.y;
        
        float4x3 cornerDirections = float4x3((lightCenter + lightRight + lightTop) - p,
                                             (lightCenter + lightRight - lightTop) - p,
                                             (lightCenter - lightRight - lightTop) - p,
                                             (lightCenter - lightRight + lightTop) - p);
        cornerDirections[0] = shadingSpaceTransform * cornerDirections[0];
        cornerDirections[1] = shadingSpaceTransform * cornerDirections[1];
        cornerDirections[2] = shadingSpaceTransform * cornerDirections[2];
        cornerDirections[3] = shadingSpaceTransform * cornerDirections[3];
        float diffuseAmount = pbr_area_light_eval_rectangle(cornerDirections);
        float brdfNorm = 1.f;
        float3x3 inverseLTCMatrix = vfx_sample_area_light_precomputed_data(v, n, surface.roughness, &brdfNorm, bakedDataTexture);
        cornerDirections[0] = inverseLTCMatrix * cornerDirections[0];
        cornerDirections[1] = inverseLTCMatrix * cornerDirections[1];
        cornerDirections[2] = inverseLTCMatrix * cornerDirections[2];
        cornerDirections[3] = inverseLTCMatrix * cornerDirections[3];
        float specularAmount = brdfNorm * pbr_area_light_eval_rectangle(cornerDirections);
        float3 effectiveAlbedo = mix(float3(1.0), float3(0.0), surface.metalness); 
        
        float3 lightColor = light.color.rgb;
        diffuse  += diffuseAmount * lightColor * effectiveAlbedo;
        specular += specularAmount * lightColor * pbr.reflectance;
#endif
    }
    void add_area_polygon(vfx_light light, texture2d_array<float> bakedDataTexture, device packed_float2 *vertexPositions)
    {
#ifdef USE_PBR
        float3 v = surface.view;
        float3 n = surface.normal;
        float3 p = surface.position;
        
        float3 tangent = normalize(v - n * dot(v, n));
        float3 bitangent = cross(n, tangent);
        float3x3 shadingSpaceTransform = transpose(float3x3(tangent, n, bitangent));
        float3 lightCenter = light.shadowMatrix[3].xyz;
        
        
        float sidedness = dot(light.dir, lightCenter - p);
        if (light.parameters.area.polygon.doubleSided == false && sidedness <= 0.f)
            return;
        
        float3 lightRight = light.shadowMatrix[0].xyz * sign(sidedness);
        float3 lightTop   = light.shadowMatrix[1].xyz;
        p           = shadingSpaceTransform * p;
        lightCenter = shadingSpaceTransform * lightCenter;
        lightRight  = shadingSpaceTransform * lightRight;
        lightTop    = shadingSpaceTransform * lightTop;
        float diffuseAmount = pbr_area_light_eval_polygon(p, lightCenter, lightRight, lightTop, light.parameters.area.polygon.vertexCount, vertexPositions);
        float brdfNorm = 1.f;
        float3x3 inverseLTCMatrix = vfx_sample_area_light_precomputed_data(v, n, surface.roughness, &brdfNorm, bakedDataTexture);
        p           = inverseLTCMatrix * p;
        lightCenter = inverseLTCMatrix * lightCenter;
        lightRight  = inverseLTCMatrix * lightRight;
        lightTop    = inverseLTCMatrix * lightTop;
        float specularAmount = brdfNorm * pbr_area_light_eval_polygon(p, lightCenter, lightRight, lightTop, light.parameters.area.polygon.vertexCount, vertexPositions);
        
        float3 effectiveAlbedo = mix(float3(1.0), float3(0.0), surface.metalness); 
        float3 lightColor = light.color.rgb;
        diffuse  += diffuseAmount * lightColor * effectiveAlbedo;
        specular += specularAmount * lightColor * pbr.reflectance;
#endif
    }
    void add_area_line(vfx_light light, texture2d_array<float> bakedDataTexture)
    {
#ifdef USE_PBR
        float3 v = surface.view;
        float3 n = surface.normal;
        float3 p = surface.position;
        
        float3 tangent = normalize(v - n * dot(v, n));
        float3 bitangent = cross(n, tangent);
        float3x3 shadingSpaceTransform = transpose(float3x3(tangent, n, bitangent));
        float3 lightCenter = light.shadowMatrix[3].xyz;
        float3 lightRight  = light.shadowMatrix[0].xyz * light.parameters.area.line.halfLength;
        float2x3 cornerDirections = float2x3((lightCenter + lightRight) - p,
                                             (lightCenter - lightRight) - p);
        cornerDirections[0] = shadingSpaceTransform * cornerDirections[0];
        cornerDirections[1] = shadingSpaceTransform * cornerDirections[1];
        float diffuseAmount = pbr_area_light_eval_line(cornerDirections);
        float brdfNorm = 1.f;
        float3x3 inverseLTCMatrix = vfx_sample_area_light_precomputed_data(v, n, surface.roughness, &brdfNorm, bakedDataTexture);
        cornerDirections[0] = inverseLTCMatrix * cornerDirections[0];
        cornerDirections[1] = inverseLTCMatrix * cornerDirections[1];
        float specularAmount = brdfNorm * pbr_area_light_eval_line(cornerDirections);
        float3 ortho = normalize(cross(cornerDirections[0], cornerDirections[1]));
        float ltcWidthFactor = 1.0 / length(vfx_ltc_matrix_invert_transpose(inverseLTCMatrix) * ortho);
        specularAmount *= ltcWidthFactor;
        
        float3 effectiveAlbedo = mix(float3(1.0), float3(0.0), surface.metalness); 
        float3 lightColor = light.color.rgb;
        diffuse  += diffuseAmount * lightColor * effectiveAlbedo;
        specular += specularAmount * lightColor * pbr.reflectance;
#endif
    }
    void add_area_ellipse(vfx_light light, texture2d_array<float> bakedDataTexture)
    {
#ifdef USE_PBR
#endif
    }
    void add_area_ellipsoid(vfx_light light, texture2d_array<float> bakedDataTexture)
    {
#ifdef USE_PBR
#endif
    }
#endif 
  struct vfx_floor {
    float4 u_floor_viewport;
    float u_floorReflectivity;
#ifdef USE_FALLOFF
    float4x4 u_floorMVP_i;
    float4 u_floorPlane;
    float u_floorFalloff;
#ifdef USE_FALLOFF_START
    float u_floorFalloffStart;
#endif
#endif
static inline float3 floorUnprojectPoint(float3 screenPos, float4x4 mvp_i)
    float4 pTmp = mvp_i * float4(screenPos.xy * 2.0 - 1.0, screenPos.z, 1.0);
    return pTmp.xyz / pTmp.w;
#pragma arguments
vfx_floor vfx_floorSurf
texture2d_layer u_floorReflectionColor;
depth2d u_floorReflectionDepth;
#pragma body
float2 normalizedFragCoord =  vfx_floorSurf.u_floor_viewport.xy + in.fragmentPosition.xy * vfx_floorSurf.u_floor_viewport.zw;
normalizedFragCoord.xy += 0.2 * _surface._normalTS.xy;
constexpr sampler linear_sampler(filter::linear);
float4 floorColor = u_floorReflectionColor.sampleLayer(linear_sampler, normalizedFragCoord);
float reflectionFactor = vfx_floorSurf.u_floorReflectivity;
#ifdef USE_FALLOFF
float floorDepth = u_floorReflectionDepth.sample(linear_sampler, normalizedFragCoord);
float3  floorPW = floorUnprojectPoint(float3(normalizedFragCoord.x, 1. - normalizedFragCoord.y, floorDepth), vfx_floorSurf.u_floorMVP_i);
float floorDist = -dot(floorPW.xyz, vfx_floorSurf.u_floorPlane.xyz) - vfx_floorSurf.u_floorPlane.w;;
#ifdef USE_FALLOFF_START
floorDist -= vfx_floorSurf.u_floorFalloffStart; 
#endif 
reflectionFactor *= 1.0 - clamp(floorDist / vfx_floorSurf.u_floorFalloff, 0.0, 1.0);
#endif 
floorColor *= reflectionFactor; 
_output.color.rgb *= (1. - floorColor.a); 
_output.color.rgba += floorColor.rgba; 
struct OsdFVarPrimvar {
    uint8_t isUsed;
    uint8_t offset;
struct OsdFVarChannelDesc {
    uint32_t indicesBufferOffset;
    uint32_t dataBufferOffset;
    uint32_t dataBufferFVarWidth;
    uint32_t patchParamsBufferOffset;
    uint32_t patchArraysBufferOffset;
    OsdFVarPrimvar colorPrimvar;
    OsdFVarPrimvar texcoordPrimvars[8];
Error: Could not find text resource named %@
view
normalTexcoord
diffuseTexcoord
specularTexcoord
emissionTexcoord
selfIlluminationTexcoord
multiplyTexcoord
transparentTexcoord
displacementTexcoord
clearCoatTexcoord
clearCoatRoughnessTexcoord
clearCoatNormalTexcoord
subsurfaceTexcoord
subsurfaceRadiusTexcoord
ambientOcclusionTexcoord
fresnel
_surface.%@
_geometry.normal
_geometry.tangent
_geometry.color
_geometry.clipDistance0
_geometry.clipDistance1
_geometry.clipDistance2
_geometry.clipDistance3
_framebuffer
_framebuffer.color
USE_MODIFIER_FRAMEBUFFER
u_barycentricCoord
USE_BARYCENTRIC_COORD
iModifier
CFXShaderModifier
<CFXShaderModifier %p language:%s, entryPoint:"%d" flags:%x
Metal
  declaration : %@
  arguments : %@
  varyings : %@
  code : %@
Error: modifier without code is invalid
newDefines
USE_EMISSIVETEXCOORD
USE_DIFFUSETEXCOORD
USE_SPECULARTEXCOORD
USE_REFLECTIVETEXCOORD
USE_TRANSPARENTTEXCOORD
USE_FILTERTEXCOORD
USE_NORMALTEXCOORD
USE_METALNESSTEXCOORD
USE_ROUGHNESSTEXCOORD
USE_CLEARCOATTEXCOORD
USE_CLEARCOATROUGHNESSTEXCOORD
USE_CLEARCOATNORMALTEXCOORD
USE_SUBSURFACETEXCOORD
USE_SUBSURFACERADIUSTEXCOORD
USE_AMBIENTOCCLUSIONTEXCOORD
Error: unexpected value (%@)
Warning: VFXDefaultValueWithBaseType - unknwon base type %d
Error: unexpected returned value for property %@ of object %@
constraint
constraintController
CFXConstraintController
<CFXConstraintController>
CFXConstraint
<CFXConstraint %@ %p>
influenceFactor
CFXConstraintLookAt
<CFXConstraintLookAt %p>
targetOffset
worldUp
localFront
CFXConstraintBillboard
<CFXConstraintBillboard %p>
CFXConstraintConstantScale
<CFXConstraintConstantScale>
CFXConstraintProcedural
<CFXConstraintProcedural>
CFXConstraintIK
<CFXConstraintIK %p>
targetPosition
Error: CFXConstraintApplyIK leef is not a child of root
Error: CFXConstraintApplyIK root and leaf nodes are the same node
CFXConstraintDistance
<CFXConstraintDistance>
minimumDistance
maximumDistance
CFXConstraintAcceleration
maximumLinearAcceleration
maximumLinearVelocity
decelerationDistance
CFXConstraintReplicator
<CFXConstraintReplicator>
orientationOffset
positionOffset
scaleOffset
CFXConstraintManager
<CFXConstraintManagerRef>
Warning: unsupported ease out for contraint applied on base type %d
__controller
niceDescription
empty
constaints
empty node
static
dynamic
kinematic
hinge
ballSocket
slider
vehicle
vortex
linear gravity
radial gravity
springField
electricField
magneticField
radial
Shader source
aOne
single layer
dual layer
physically based
shadowonly
plane
pyramid
cylinder
cone
tube
capsule
torus
Hello!
ortho
vertical
horizontal
stretch
_shadowCascadeDebugFactor
Error: CFXModelPathResolveCommonProfileProperty unknown path %@
superClass
Error: _CFXModelPathResolverRegistryResolvePathWithClassName unknown path %@
Unreachable code: Support for subscript model path is not implemented for %@
_currentClassRegistry
Assertion '%s' failed. Cannot register twice the same propertyName : %@
CFDictionaryGetCountOfKey(_currentClassRegistry, propertyName) == 0
axisAngle
Error: _CFXModelPathResolveColor4 unknown path %@
Error: _CFXModelPathResolveMatrix unknown path %@
Error: _CFXModelPathResolveTransform unknown path %@
Error: _CFXModelPathResolveRotation unknown path %@
Error: _CFXModelPathResolveVector3 unknown path %@
Error: _CFXModelPathResolveVector4 unknown path %@
Assertion '%s' failed. _CFXModelPathResolveEntity inconsistent cftype
Error: _CFXModelPathResolveNode unknown path %@
Error: _CFXModelPathResolveDynamicParameter unknown path %@
prefix
indexString
Error: _CFXModelPathResolveMorpher unknown path %@
Error: unknown field type in path %@
Error: _CFXModelPathResolveMorpher unknown key subscript %@[%ld]
Error: _CFXModelPathResolveMorpher unknown key subscript %@[%@]
CFXModelTarget
<CFXModelTarget>
item
item->_getter
item->_setter
Assertion '%s' failed. CFXModelValueStorageUpdateModelValueFromPresentationValue - unexpected class
CFGetTypeID(target->_owner) == CFXNodeGetTypeID()
aValue
CFXModelValueStorageItem
<CFXModelValueStorageItem %p>
CFXModelValueStorage
<CFXModelValueStorage>
MPSGaussianBlur color input resolve
incremental
Unreachable code: attempt to copy VFXConstraint that is a virtual class
gimbalLockEnabled
targetDirection
replicatesOrientation
replicatesScale
replicatesPosition
collisionCategoryBitMask
bias
freeAxes
preserveScale
v36@?0^{__CFXConstraint={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFString}fBB{?=^?^?^?^?^?^?}^v}8^v16^{__CFXModelTarget={__CFRuntimeBase=QAQ}^v^vscCCB^?^?}24f32
node%d
angle%d
ikTarget
chainRootNode
LENS_BLUR_DOWNSAMPLE
Unreachable code: Invalid downsample rate
LENS_BLUR_HORIZONTAL_REAL
LENS_BLUR_HORIZONTAL_IMAGINARY
LENS_BLUR_OUTPUT
Lens blur downsample pass
Lens blur horizontal pass
Lens blur vertical pass
LENS_BLUR_VERTICAL_PASS
arrangedObjects
arrangedObjects.VFXUI_name
insertObject:in%@AtIndex:
removeObjectFrom%@AtIndex:
objectIn%@AtIndex:
object of class %@ doesn't implement %@
VFXUIArrayInspector
Error: format %lu not supported for SH generation
events
Assertion '%s' failed. CFXAnimationEventsAddEvent - index out of bounds
events->_eventCount < events->_eventCapacity
CFXAnimationEvents
<CFXAnimationEvents>
Assertion '%s' failed. _CFXAnimationEventsTriggerEventsWithTimeChanges invalid time
t0 <= t1
Assertion '%s' failed. _CFXAnimationEventsTriggerEventAtIndex - index out of bounds
index < events->_eventCount
Assertion '%s' failed. RendererElement should not be in span already
node == NULL || node->_rendererElementSpan.count == 0
Assertion '%s' failed. CFXRendererElementStoreDeallocateSpan - null span
store
Assertion '%s' failed. CFXRendererElementStoreDeallocateSpanForNodeGeometryLOD unexpected lod count
node->_rendererLOD->count == count
Assertion '%s' failed. wrong index in rendererElements span
index < (CFIndex)span.count
v16@?0^v8
CFXRendererElementStore
<CFXRendererElementStore %p>
Assertion '%s' failed. __AllocateSpansForNodeGeometryLOD unexpected lod count
NSZipFileArchiveHeaderOffset
NSZipFileArchiveCompressionType
NSZipFileArchiveCRC
NSZipFileArchiveCompressedLength
NSZipFileArchiveUncompressedLength
indexStore
CFXIndexStore
<CFXIndexStore>
Error: indexstore::_getNextFreeIndex - no more free index
Assertion '%s' failed. CFXIndexStoreGetOrderedIndexForKey index out of bounds
alignedIndex >= 0 && alignedIndex < bufferLength
Error: CFXAllocatorDelete - unknown address
CFXAllocator
<CFXAllocator>
Assertion '%s' failed. CFXAnimatableParamControllerGetParamDescription - address out of bounds
address < (void*) ((unsigned char*)controller+sizeof(struct __CFXAnimatableParamController))
Error: renderGraph should not be null
Assertion '%s' failed. Invalid point of view
Unreachable code: Unsupported configuration
Assertion '%s' failed. Multiple viewport is for stereo only
cullingContext->eyeCount == 2
Assertion '%s' failed. singlePassCubeMapRendering require renderMode == Layered and eyeCount == 6
cullingContext->viewMapping == kCFXViewMappingLayered && cullingContext->eyeCount == 6
Culling
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/AppleEngine/CFXCullingContext.c
Assertion '%s' failed. Not enough space allocated
sequence->count + count <= sequence->allocatedCount
Error: type for key %@ is switching from %@ to %@, this will lead to improper animation
CFXKeyValueStore
<CFXKeyValueStore>
Assertion '%s' failed. index out of bounds
index < CFXArrayGetCount(array)
CFXArray
<CFXArray %p:, %d objects>
<%@ | string=%@ extrusionDepth=%.3f> 
extrusionDepth
SFProUI
SFProText
HelveticaNeue
.AppleSystemUIFont
.SFUI
.SFNS
chamferProfile
alignmentMode
truncationMode
discretizedStraightLineMaxLength
wrapped
useCustomContainerFrame
customContainerFrame
_wantsSeparateGeometryElements
Unreachable code: CATextAlignmentModeFromCFXTextAlignmentMode unknown mode
Warning: Unknown alignment mode %@
Warning: Unknown truncation mode %@
VFXMaterialPropertyTextureProviderHelper could not find texture for %@
Assertion '%s' failed. We should have a compute command encoder open at this point
vfxComputeEncoder->isEncoding()
v16@?0@?<v@?@"<MTLComputeCommandEncoder>">8
Assertion '%s' failed. We should have a blit command encoder open at this point
vfxBlitEncoder->isEncoding()
v16@?0@?<v@?@"<MTLBlitCommandEncoder>">8
v16@?0@?<v@?@"<MTLCommandBuffer>">8
MaterialBuffer
MeshBuffer
MeshElementBuffer
InstanceBuffer
LightBuffer
EmitterBuffer
CFXRaytracingSystem
<CFXRaytracingSystem %p>
<%@ | path=%@ extrusionDepth=%.3f> 
chamferMode
CFXShape
<CFXShape '%@'>
newMesh
shapeGeometry
Helvetica
^{__CFXMesh=}8@?0
CFXShapeGeometry
CFXTextGeometry
levelOfDetail <%p>: model:%@ threshold:%f useDistance:%d
Assertion '%s' failed. uniform %@ already set
CFDictionaryGetValue(dic, uniformName) == NULL
vfx_frame.time
vfx_frame.invScreenPixelSize
vfx_node.modelTransform
vfx_node.inverseModelTransform
vfx_node.modelViewTransform
vfx_node.inverseModelViewTransform
vfx_node.normalTransform
vfx_node.modelViewProjectionTransform
vfx_node.inverseModelViewProjectionTransform
vfx_node.boundingBox
vfx_node.worldBoundingBox
vfx_frame.viewTransform
vfx_frame.inverseViewTransform
vfx_frame.projectionTransform
vfx_frame.inverseProjectionTransform
vfx_frame.cameraPosition
vfx_frame.viewToCubeWorld
CFXConvexPolyhedron
<CFXConvexPolyhedron %p>
generate_texture
semiImplicitEuler
VFXCore.ScriptBehaviorUpdate
VFXCore.ScriptBehaviorInit
VFXCore.KernelScript
VFXCore.ParticleFloat3Init<VFXCore.Target>
VFXCore.NoiseForce
VFXCore.MeshRender
VFXCore.DirectionalShadow
VFXCore.EmitterParameter
VFXCore.MaterialAsset
addressMode#intrinsic
filterMode#intrinsic
animationDuration
pointOfView#intrinsic
postProcess#intrinsic
normalizedPosition
target#intrinsic
swift
Builtin|Texturing|SetTextureFrame|(Int,Int,Bool)->(Float)
Builtin|Texturing|SetTextureFrame|(Int,Int,Bool,UInt32)->(Float)
ProjectName
UUID
Version
IsExported
IsVFX2
VersionHistory
SceneFilename
kind
dampening
noiseAmount
noiseSeed
categoryBitMask
falloffExponent
texture
active
offset
stride
cNavigation
attenuationRadius
zNear
zFar
maxIteration
threshold
thresholdSmoothness
colorFilter
contrast
useHighQuality
components
code
parameters
isGraphV2
vertex_function
fragment_function
vertex_descriptor
input_primitive_topology
max_tessellation_factor
tessellation_factor_scale_enabled
tessellation_control_point_index_type
tessellation_factor_step_function
tessellation_output_winding_order
tessellation_partition_mode
max_vertex_amplification_count
rasterization_enabled
alpha_to_coverage_enabled
alpha_to_one_enabled
raster_sample_count
color_attachments
depth_attachment_pixel_format
stencil_attachment_pixel_format
compute_function
threadgroup_size_is_multiple_of_thread_execution_width
max_total_threads_per_threadgroup
compute_pipelines
render_pipelines
libraries
pipelines
named_predicates
paths
specialized_functions
id_type
value_type
angularLimits
direction
distribution
emitOnSurface
spreadingRange
tangentAxis
tangentForce
transformWeight
velocityRange
textureAddressMode
textureScale
textureBias
inheritColorFromTexture
emissionOrder
motionDistribution
uniformDistribution
originatingEntity
functionName
inputCount
outputCount
inputNames
outputNames
buffers
attributes
waveform
magnitudes
magnitudesLowRes
nodePath
model
materialOverride
force
space
noise
amortized
dimensions
triggerType
play
mute
loops
height
buffer
descriptions
values
functionConstants
shadowRadius
scaleBias
sourceEmitter
sourceData
targetData
childrenPerParent
range
distributeOnFrame
mode
xRange
yRange
zRange
parentEntity
probability
inheritColor
inheritVelocity
inheritOrientation
inheritScale
colorMap
normalMap
useInstanceColor
leftOffset
rightOffset
topOffset
bottomOffset
near
usePerspective
showVolume
camera
entityComponentType
propertyPath
propertySemantic
flow
affectsPosition
affectsOrientation
layers
fallOff
fallOffPower
fallOffRange
fallOffRadius
fallOffAngleRange
target
timelineX
timelineY
timelineZ
timelineW
ignoreVertexColor
normalize
preferredLoader
focalLength
focusDistance
sensorSize
reverseZ
projectionDirection
filmOffset
pointCache
inheritPosition
skeleton
motionTransfert
inheritSize
cpuMode
gpuMode
fallback
asynchronous
subgraph
userInfo
spawnEntities
initializeEntities
updateEntities
renderEntities
maxParticleCount
updateBoundingBox
disableEmitterWhenCulled
showBoundingBox
simulation
updateOnGPU
warmupDuration
isLocal
nearestNeighbours
nearestNeighboursRadius
cullFullyTransparent
simulationRate
spawn
initialize
update
render
seed
randomizeSeedOnReset
entityTable
entities
relations
componentTable
propertyTable
vertexParameters
fragmentParameters
wind
magnetic
harmonic
drag
turbulence
spring
widthSegment
heightSegment
lengthSegment
chamferSegment
segment
isGeodesic
radialSegment
capSegment
topRadius
pipeSegment
text
extrusion
font
hemispheric
kernelFunction
desc
kernelScript
inner
nodes
edges
functionType
reference
meshEntity
count
entityComponentPropertyOutputsTable
generatedCode
userDataForGeneratedInArgs
generatedInArgs
generatedInOutArgs
generatedData
inArgsUserData
inArgs
inOutArgs
scriptIndex
sortMode
partIndex
lodIndex
particlesPerRibbon
ribbonLength
clearAllVelocities
clearUnusedPositions
logInfo
elasticity
mipmapCount
pixel_format
write_mask
blending_enabled
alpha_blend_operation
rgb_blend_operation
destination_alpha_blend_factor
destination_rgb_blend_factor
source_alpha_blend_factor
source_rgb_blend_factor
generation
includeFunctions
useNamedSignature
genericTypes
previousInParameterNames
inParameterNames
inParameterTypes
inParameterDefaultValues
outParameterNames
outParameterTypes
defaultInParameter
deprecationInfo
toolCreateFunction
inParameters
showInParameterDefaultValues
mandatoryInParameters
hidden
cleanupCode
skipTest
timeDependent
useDynamicBranching
supportedBy
disableable
embeddedParameters
defaultSnippet
metadataDict
contexts
supportedLanguages
additionalArrayInputs
additionalArrayOutputs
templateIdx
contextExitMap
contextEntryMap
arraySequenceMap
assignments
assignmentMetadataSets
customCodeSnippetMap
typedArraySnippetMap
staticSwitchSnippetMap
userObjects
variableMap
variableReferenceMap
composition
ramp
affectsAlpha
rateOverTime
burst
_emit
duration
repeatTime
assetPath
assetEntity
playing
assets
layouts
step_function
step_rate
buffer_index
format
influence
viewDistance
viewAngle
viewFalloffAngle
maxNeighborCount
sizeMode
sizeVirtualScale
mindVolumeRatio
desiredDistance
separationStrength
alignmentStrength
cohesionStrength
collisionStrength
collisionRadiusMul
showGrid
showCells
mipmapLevelCount
arrayLength
resourceOptions
allowGPUOptimizedContents
swizzle
context
componentProperty
propertyName
directionAxis
column0
column1
column2
column3
rateOverDistance
follow
stepSolver
advectParticles
border
solverSpeed
falloff
cellSize
viscosity
vorticity
velocityDamping
showGrids
showVelocities
showDensities
velocityIsoValue
densityIsoValue
sendEventsProbability
dieOnCollisionProbability
friction
radiusMultiplier
isInfinite
isDoubleSided
halfExtents
sdfData
inside
cornerRadius
mesh
cruisingStrength
cruisingSpeed
clampSpeed
simpleDragForce
kickStartThreshold
kickStartDirection
emit
density
velocity
showEmitter
showVelocity
distanceFalloff
maxRotVel
showArea
borderThickness
corner1
corner2
maxRotVelDir
upVector
pointAt
reduceFlipping
maxRotVelUpVec
planeCenter
planeNormal
showPlane
lighting
specular
cutoff
maxOverdraw
animationMode
softDistance
interFrameInterpolation
upAxis
stretchFactor
curvature
thickness
multiplyThicknessByAlpha
prebakedLightingPositiveXYZ
prebakedLightingNegativeXYZ
scaleUsingTextureSize
useSingleChannelOfTexture
channel
orientAlongVelocity
useOrientationForLighting
particlePerRibbon
ribbonCount
subdivisionCount
textureMode
avoidOverdraw
enableCaps
capBeginTexture
capEndTexture
frameCount
framePerRow
framePerColumn
useTexture3D
entityComponentPropertyTable
entityComponentPropertyInputsTable
particleComponentInputsTable
particleClassComponentInputsTable
directPropertyAssignments
exportedDirectPropertyAssignments
ecpt
ecpit
pcit
pccit
edpa
epdit
halfSize
parts
vertexCount
randomize
tangents
depthBias
blurLevel
semantic
step
userManual
enumInfo
customShader
overrideDepthStencil
depthCompare
depthWrite
vertexStart
materialIndex
indexByteSize
levelOfDetails
value_w1
value_w0
innerAngle
emitterEntity
green
blue
alpha
textureCoordinate
textureCoordinate1
__vfx_script_%SCRIPT_ID%
half4 color [[ color(0) ]]
__attribute__((visibility("default")))
particle_vertex_io vertice
particle_primitive_io primitive
vertex
fragment
compute
const char *name
half4 fragment_in_color [[ color(0) ]]
float3 fragment_in_coord [[ barycentric_coord ]]
uint fragment_in_primitive_id [[ primitive_id ]]
bool fragment_in_front_facing [[ front_facing ]]
builtin_args builtin
uint sample_mask [[ sample_mask, function_constant(enable_sample_mask_read) ]]
Vertex vtx [[ stage_in ]]
uint32_t inst_id [[ instance_id ]]
uint16_t amp_id [[ amplification_id ]]
device const uint32_t* order [[ buffer(vfx_buffer_binding_index_data_sort_order), function_constant(enable_sorting) ]]
uint pid [[thread_position_in_grid]]
builtin.globals.dt
builtin.globals.time
io.vertice.position
enable_per_vertex_color ? io.vertice.color : io.primitive.primitive_color
io.vertice.normal
io.vertice.tangent
fragment_in_color
fragment_in_front_facing
fragment_in_coord
fragment_in_primitive_id
use_interpolated_crworld ? io.vertice.crworld_position : builtin.crworld_from_viewport(io.vertice.position.xyz, camera_index)
builtin.linearZFromDepth(io.vertice.position.z)
builtin.proj_from_crws(camera_index)
builtin.view_from_crws(camera_index)
builtin.proj_from_view(camera_index)
builtin.view_from_proj(camera_index)
builtin.crws_from_world(particles.world_from_emitter())
builtin.drawableSize()
builtin.invDrawableSize()
builtin.viewUniforms.nearFar.x
builtin.viewUniforms.nearFar.y
builtin.externals.sceneConstants.portal_opacity
builtin.globals.ibl.intensityScale
builtin.globals.ibl.rotation
builtin.globals.radiance
builtin.globals.irradiance
builtin.globals.brdfLUT
particle_data particles = particles_attachment.unwrap();
if (particles.newly_created_is_outside(&pid)) return;
if (particles.is_outside(pid)) return;
uint16_t camera_index = builtin.camera_index(inst_id, amp_id);
(void)camera_index;
int32_t pid = enable_sorting ? order[ int32_t(inst_id) ] : int32_t(inst_id);
uint16_t camera_index = re_uniforms ? io.primitive.camera_index : 0;
int32_t pid = io.primitive.particle_index;
-Wimplicit-float-conversion
__attribute__((used,visibility("hidden")))
static vfx_entry_t __vfx_script_table[] = {
Local
Builtin
User
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Binaries/VFX/install/Symbols/Release-iphoneos/
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Binaries/VFX/install/Symbols/Debug-iphoneos/
TransformSpaceMode
TRANSPARENT_COLOR
GLOBAL_ILLUMINATION
SCATTERING_COLOR
AUTHORING_RESOLVE
ROUGHNESS_METALNESS_AO
prefilteredDiffuseMap
prefilteredSpecularMap
blueNoiseTexture
engine:blueNoise64RGBA8
depthMitigationAlphaMask
DMWarpedAlphaMask
clippingConstants
RateMapDataBuffer
(vfx_script_graph_value_t[]) {
Spawn
Init
ParticleInit
Update
ParticleUpdate
Render
__vfx_script_trampoline_%PROJECT%_%KIND%_%ENTITY%
__vfx_script_trampoline_%PROJECT%_%KIND%_%ORIG_ENTITY%
vfx_compute_%SCRIPT_ID%::vfx_compute
vfx::api::computePbrLighting
vfx::api::applySystemTreatments
x86_64
arm64
arm64e
arm64_32
macOS
watchOS
tvOS
ParametricModelController
MaterialController
WorldBackgroundController
WorldIBLController
WorldPhysicsController
WorldFogController
warning
note
CodeSnippet
VariableSnippet
VariableReferenceSnippet
CustomCodeSnippet
TypedArraySnippet
StaticSwitchSnippet
ContextExit
ContextEntry
SubContext
ArraySequenceSnippet
BaseObject
position
color
jointIndices
jointWeights
variant
interval
lastInvocationTime
invocation
queue
timer
^{__IOSurface=}16@0:8
{MTLResourceID=Q}16@0:8
v104@0:8^v16Q24Q32{?={?=QQQ}{?=QQQ}}40Q88Q96
v104@0:8{?={?=QQQ}{?=QQQ}}16Q64Q72r^v80Q88Q96
v88@0:8^v16Q24{?={?=QQQ}{?=QQQ}}32Q80
v88@0:8{?={?=QQQ}{?=QQQ}}16Q64r^v72Q80
@64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48
@68@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64
rootResource
T@"<MTLResource>",N,R
parentTexture
T@"<MTLTexture>",N,R
parentRelativeLevel
parentRelativeSlice
T@"<MTLBuffer>",N,R
bufferOffset
bufferBytesPerRow
iosurface
T^{__IOSurface=},N,R
iosurfacePlane
shareable
firstMipmapInTail
tailSizeInBytes
isSparse
T{MTLResourceID=Q},N,R
remoteStorageTexture
T{?=CCCC},N,R
@"<MTLResource>"16@0:8
@"<MTLTexture>"16@0:8
@"<MTLBuffer>"16@0:8
@"<MTLTexture>"24@0:8Q16
@"<MTLTexture>"64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48
@"MTLSharedTextureHandle"16@0:8
@"<MTLTexture>"24@0:8@"<MTLDevice>"16
@"<MTLTexture>"68@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64
MTLDevice
{?=QQQ}16@0:8
@32@0:8@16^@24
{?=QQ}32@0:8Q16Q24
@32@0:8Q16Q24
@40@0:8r^v16Q24Q32
@48@0:8^v16Q24Q32@?40
@40@0:8@16^{__IOSurface=}24Q32
@40@0:8@16@24^@32
v40@0:8@16@24@?32
@48@0:8@16Q24^@32^@40
v40@0:8@16Q24@?32
c24@0:8Q16
c24@0:8q16
Q24@0:8Q16
v32@0:8^{?=ff}16Q24
@40@0:8@16Q24Q32
@40@0:8@16q24^@32
{?=QQQ}40@0:8Q16Q24Q32
{?=QQQ}48@0:8Q16Q24Q32q40
v32@0:8^Q16^Q24
{?=QQQ}24@0:8@16
{?=QQ}24@0:8Q16
v72@0:8r^{?={?=QQQ}{?=QQQ}}16^{?={?=QQQ}{?=QQQ}}24{?=QQQ}32Q56Q64
v64@0:8r^{?={?=QQQ}{?=QQQ}}16^{?={?=QQQ}{?=QQQ}}24{?=QQQ}32Q56
T@"NSString",N,R
registryID
architecture
T@"MTLArchitecture",N,R
maxThreadsPerThreadgroup
T{?=QQQ},N,R
lowPower
removable
hasUnifiedMemory
recommendedMaxWorkingSetSize
locationNumber
depth24Stencil8PixelFormatSupported
readWriteTextureSupport
argumentBuffersSupport
rasterOrderGroupsSupported
supports32BitFloatFiltering
supports32BitMSAA
supportsQueryTextureLOD
supportsBCTextureCompression
supportsPullModelInterpolation
barycentricCoordsSupported
supportsShaderBarycentricCoordinates
currentAllocatedSize
maxThreadgroupMemoryLength
maxArgumentBufferSamplerCount
programmableSamplePositionsSupported
peerGroupID
peerIndex
TI,N,R
peerCount
sparseTileSizeInBytes
maxBufferLength
counterSets
T@"NSArray",N,R
supportsDynamicLibraries
supportsRenderDynamicLibraries
supportsRaytracing
supportsFunctionPointers
supportsFunctionPointersFromRender
supportsRaytracingFromRender
supportsPrimitiveMotionBlur
shouldMaximizeConcurrentCompilation
maximumConcurrentCompilationTaskCount
@"NSString"16@0:8
@"MTLArchitecture"16@0:8
@"<MTLLogState>"32@0:8@"MTLLogStateDescriptor"16^@24
@"<MTLCommandQueue>"16@0:8
@"<MTLCommandQueue>"24@0:8Q16
@"<MTLCommandQueue>"24@0:8@"MTLCommandQueueDescriptor"16
{?=QQ}24@0:8@"MTLTextureDescriptor"16
@"<MTLHeap>"24@0:8@"MTLHeapDescriptor"16
@"<MTLBuffer>"32@0:8Q16Q24
@"<MTLBuffer>"40@0:8r^v16Q24Q32
@"<MTLBuffer>"48@0:8^v16Q24Q32@?<v@?^vQ>40
@"<MTLDepthStencilState>"24@0:8@"MTLDepthStencilDescriptor"16
@"<MTLTexture>"24@0:8@"MTLTextureDescriptor"16
@"<MTLTexture>"40@0:8@"MTLTextureDescriptor"16^{__IOSurface=}24Q32
@"<MTLTexture>"24@0:8@"MTLSharedTextureHandle"16
@"<MTLSamplerState>"24@0:8@"MTLSamplerDescriptor"16
@"<MTLLibrary>"16@0:8
@"<MTLLibrary>"32@0:8@"NSBundle"16^@24
@"<MTLLibrary>"32@0:8@"NSString"16^@24
@"<MTLLibrary>"32@0:8@"NSURL"16^@24
@"<MTLLibrary>"32@0:8@"OS_dispatch_data"16^@24
@"<MTLLibrary>"40@0:8@"NSString"16@"MTLCompileOptions"24^@32
v40@0:8@"NSString"16@"MTLCompileOptions"24@?<v@?@"<MTLLibrary>"@"NSError">32
@"<MTLLibrary>"32@0:8@"MTLStitchedLibraryDescriptor"16^@24
v32@0:8@"MTLStitchedLibraryDescriptor"16@?<v@?@"<MTLLibrary>"@"NSError">24
@"<MTLRenderPipelineState>"32@0:8@"MTLRenderPipelineDescriptor"16^@24
@"<MTLRenderPipelineState>"48@0:8@"MTLRenderPipelineDescriptor"16Q24^@32^@40
v32@0:8@"MTLRenderPipelineDescriptor"16@?<v@?@"<MTLRenderPipelineState>"@"NSError">24
v40@0:8@"MTLRenderPipelineDescriptor"16Q24@?<v@?@"<MTLRenderPipelineState>"@"MTLRenderPipelineReflection"@"NSError">32
@"<MTLComputePipelineState>"32@0:8@"<MTLFunction>"16^@24
@"<MTLComputePipelineState>"48@0:8@"<MTLFunction>"16Q24^@32^@40
v32@0:8@"<MTLFunction>"16@?<v@?@"<MTLComputePipelineState>"@"NSError">24
v40@0:8@"<MTLFunction>"16Q24@?<v@?@"<MTLComputePipelineState>"@"MTLComputePipelineReflection"@"NSError">32
@"<MTLComputePipelineState>"48@0:8@"MTLComputePipelineDescriptor"16Q24^@32^@40
v40@0:8@"MTLComputePipelineDescriptor"16Q24@?<v@?@"<MTLComputePipelineState>"@"MTLComputePipelineReflection"@"NSError">32
@"<MTLFence>"16@0:8
@"<MTLRenderPipelineState>"48@0:8@"MTLTileRenderPipelineDescriptor"16Q24^@32^@40
v40@0:8@"MTLTileRenderPipelineDescriptor"16Q24@?<v@?@"<MTLRenderPipelineState>"@"MTLRenderPipelineReflection"@"NSError">32
@"<MTLRenderPipelineState>"48@0:8@"MTLMeshRenderPipelineDescriptor"16Q24^@32^@40
v40@0:8@"MTLMeshRenderPipelineDescriptor"16Q24@?<v@?@"<MTLRenderPipelineState>"@"MTLRenderPipelineReflection"@"NSError">32
@"<MTLArgumentEncoder>"24@0:8@"NSArray"16
@"<MTLRasterizationRateMap>"24@0:8@"MTLRasterizationRateMapDescriptor"16
@"<MTLIndirectCommandBuffer>"40@0:8@"MTLIndirectCommandBufferDescriptor"16Q24Q32
@"<MTLEvent>"16@0:8
@"<MTLSharedEvent>"16@0:8
@"<MTLSharedEvent>"24@0:8@"MTLSharedEventHandle"16
@"<MTLIOFileHandle>"32@0:8@"NSURL"16^@24
@"<MTLIOCommandQueue>"32@0:8@"MTLIOCommandQueueDescriptor"16^@24
@"<MTLIOFileHandle>"40@0:8@"NSURL"16q24^@32
@"NSArray"16@0:8
@"<MTLCounterSampleBuffer>"32@0:8@"MTLCounterSampleBufferDescriptor"16^@24
@"<MTLArgumentEncoder>"24@0:8@"<MTLBufferBinding>"16
@"<MTLDynamicLibrary>"32@0:8@"<MTLLibrary>"16^@24
@"<MTLDynamicLibrary>"32@0:8@"NSURL"16^@24
@"<MTLBinaryArchive>"32@0:8@"MTLBinaryArchiveDescriptor"16^@24
{?=QQQ}24@0:8@"MTLAccelerationStructureDescriptor"16
@"<MTLAccelerationStructure>"24@0:8Q16
@"<MTLAccelerationStructure>"24@0:8@"MTLAccelerationStructureDescriptor"16
{?=QQ}24@0:8@"MTLAccelerationStructureDescriptor"16
@"<MTLResidencySet>"32@0:8@"MTLResidencySetDescriptor"16^@24
MTLCommandQueue
v32@0:8r^@16Q24
T@"NSString",N,C
T@"<MTLDevice>",N,R
v24@0:8@"NSString"16
@"<MTLDevice>"16@0:8
@"<MTLCommandBuffer>"16@0:8
@"<MTLCommandBuffer>"24@0:8@"MTLCommandBufferDescriptor"16
v24@0:8@"<MTLResidencySet>"16
MTLBinaryArchive
c32@0:8@16^@24
c40@0:8@16@24^@32
c32@0:8@"MTLComputePipelineDescriptor"16^@24
c32@0:8@"MTLRenderPipelineDescriptor"16^@24
c32@0:8@"MTLTileRenderPipelineDescriptor"16^@24
c32@0:8@"MTLMeshRenderPipelineDescriptor"16^@24
c32@0:8@"MTLStitchedLibraryDescriptor"16^@24
c32@0:8@"NSURL"16^@24
c40@0:8@"MTLFunctionDescriptor"16@"<MTLLibrary>"24^@32
@"<MTLFunction>"24@0:8@"NSString"16
@"<MTLFunction>"40@0:8@"NSString"16@"MTLFunctionConstantValues"24^@32
v40@0:8@"NSString"16@"MTLFunctionConstantValues"24@?<v@?@"<MTLFunction>"@"NSError">32
v32@0:8@"MTLFunctionDescriptor"16@?<v@?@"<MTLFunction>"@"NSError">24
@"<MTLFunction>"32@0:8@"MTLFunctionDescriptor"16^@24
v32@0:8@"MTLIntersectionFunctionDescriptor"16@?<v@?@"<MTLFunction>"@"NSError">24
@"<MTLFunction>"32@0:8@"MTLIntersectionFunctionDescriptor"16^@24
MTLCommandBuffer
v32@0:8@16d24
T@"<MTLCommandQueue>",N,R
retainedReferences
errorOptions
kernelStartTime
Td,N,R
kernelEndTime
logs
T@"<MTLLogContainer>",N,R
GPUStartTime
GPUEndTime
status
T@"NSError",N,R
@"<MTLLogContainer>"16@0:8
v24@0:8@?<v@?@"<MTLCommandBuffer>">16
v24@0:8@"<MTLDrawable>"16
v32@0:8@"<MTLDrawable>"16d24
@"NSError"16@0:8
@"<MTLBlitCommandEncoder>"16@0:8
@"<MTLRenderCommandEncoder>"24@0:8@"MTLRenderPassDescriptor"16
@"<MTLComputeCommandEncoder>"24@0:8@"MTLComputePassDescriptor"16
@"<MTLBlitCommandEncoder>"24@0:8@"MTLBlitPassDescriptor"16
@"<MTLComputeCommandEncoder>"16@0:8
@"<MTLComputeCommandEncoder>"24@0:8Q16
v32@0:8@"<MTLEvent>"16Q24
@"<MTLParallelRenderCommandEncoder>"24@0:8@"MTLRenderPassDescriptor"16
@"<MTLResourceStateCommandEncoder>"16@0:8
@"<MTLResourceStateCommandEncoder>"24@0:8@"MTLResourceStatePassDescriptor"16
@"<MTLAccelerationStructureCommandEncoder>"16@0:8
@"<MTLAccelerationStructureCommandEncoder>"24@0:8@"MTLAccelerationStructurePassDescriptor"16
v32@0:8{_NSRange=QQ}16
v40@0:8@16{_NSRange=QQ}24
remoteStorageBuffer
gpuAddress
@"<MTLTexture>"40@0:8@"MTLTextureDescriptor"16Q24Q32
v40@0:8@"NSString"16{_NSRange=QQ}24
@"<MTLBuffer>"24@0:8@"<MTLDevice>"16
MTLCommandEncoder
MTLRenderCommandEncoder
v40@0:8r^v16Q24Q32
v40@0:8@16Q24Q32
v48@0:8r^@16r^Q24{_NSRange=QQ}32
v48@0:8@16Q24Q32Q40
v56@0:8r^@16r^Q24r^Q32{_NSRange=QQ}40
v40@0:8Q16Q24Q32
v48@0:8r^v16Q24Q32Q40
v40@0:8r^@16{_NSRange=QQ}24
v40@0:8@16f24f28Q32
v56@0:8r^@16r^f24r^f32{_NSRange=QQ}40
v64@0:8{?=dddddd}16
v32@0:8r^{?=dddddd}16Q24
v32@0:8Q16r^{?=II}24
v28@0:8f16f20f24
v48@0:8{?=QQQQ}16
v32@0:8r^{?=QQQQ}16Q24
v32@0:8f16f20f24f28
v20@0:8I16
v24@0:8I16I20
v88@0:8{?=QQQ}16{?=QQQ}40{?=QQQ}64
v80@0:8@16Q24{?=QQQ}32{?=QQQ}56
v48@0:8Q16Q24Q32Q40
v64@0:8Q16Q24Q32@40Q48Q56
v56@0:8Q16Q24Q32@40Q48
v56@0:8Q16Q24Q32Q40Q48
v80@0:8Q16Q24Q32@40Q48Q56q64Q72
v40@0:8Q16@24Q32
v64@0:8Q16Q24@32Q40@48Q56
v72@0:8Q16Q24Q32@40Q48Q56Q64
v56@0:8Q16@24Q32@40Q48
v88@0:8Q16Q24Q32@40Q48@56Q64Q72Q80
v72@0:8Q16@24Q32@40Q48@56Q64
v40@0:8{?=QQQ}16
v40@0:8r^@16Q24Q32
v48@0:8r^@16Q24Q32Q40
v40@0:8@16@24Q32
v36@0:8@16Q24c32
tileWidth
v24@0:8@"<MTLRenderPipelineState>"16
v40@0:8@"<MTLBuffer>"16Q24Q32
v48@0:8@"<MTLBuffer>"16Q24Q32Q40
v32@0:8@"<MTLTexture>"16Q24
v32@0:8@"<MTLSamplerState>"16Q24
v40@0:8@"<MTLSamplerState>"16f24f28Q32
v32@0:8@"<MTLVisibleFunctionTable>"16Q24
v32@0:8@"<MTLIntersectionFunctionTable>"16Q24
v32@0:8@"<MTLAccelerationStructure>"16Q24
v24@0:8@"<MTLDepthStencilState>"16
v80@0:8@"<MTLBuffer>"16Q24{?=QQQ}32{?=QQQ}56
v64@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56
v56@0:8Q16Q24Q32@"<MTLBuffer>"40Q48
v80@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56q64Q72
v40@0:8Q16@"<MTLBuffer>"24Q32
v64@0:8Q16Q24@"<MTLBuffer>"32Q40@"<MTLBuffer>"48Q56
v32@0:8@"<MTLFence>"16Q24
v72@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56Q64
v56@0:8Q16@"<MTLBuffer>"24Q32@"<MTLBuffer>"40Q48
v88@0:8Q16Q24Q32@"<MTLBuffer>"40Q48@"<MTLBuffer>"56Q64Q72Q80
v72@0:8Q16@"<MTLBuffer>"24Q32@"<MTLBuffer>"40Q48@"<MTLBuffer>"56Q64
v32@0:8@"<MTLResource>"16Q24
v40@0:8@"<MTLResource>"16Q24Q32
v24@0:8@"<MTLHeap>"16
v32@0:8@"<MTLHeap>"16Q24
v40@0:8@"<MTLIndirectCommandBuffer>"16{_NSRange=QQ}24
v40@0:8@"<MTLIndirectCommandBuffer>"16@"<MTLBuffer>"24Q32
v36@0:8@"<MTLCounterSampleBuffer>"16Q24c32
MTLHeap
@40@0:8Q16Q24Q32
@32@0:8@16Q24
hazardTrackingMode
usedSize
@"<MTLBuffer>"40@0:8Q16Q24Q32
@"<MTLTexture>"32@0:8@"MTLTextureDescriptor"16Q24
@"<MTLAccelerationStructure>"32@0:8Q16Q24
@"<MTLAccelerationStructure>"32@0:8@"MTLAccelerationStructureDescriptor"16Q24
_TtP3VFX17VFXEffectDelegate_
v24@0:8@"_TtC3VFX9VFXEffect"16
VFXREDrawCallContext
@28@0:8i16@20
@44@0:8i16@20^q28^q36
r*20@0:8i16
c44@0:8i16@20^q28^q36
v32@0:8^^v16^q24
f16@0:8
renderTargetInfo
T@"<VFXRERenderTargetInfo>",N,R
isDrawingDepthOnly
isDrawingBlur
stencilInfo
T@"<VFXStencilInfo>",N,R
useDitherFade
enableClipping
renderForBlur
enableBreakthrough
enableNearFieldVignetting
portalClippingMode
fadeOpacity
isLayeredRendering
statsVertexCount
Tq,N
statsPrimitiveCount
statsDrawcallCount
@"<MTLTexture>"28@0:8i16@"NSString"20
@"<MTLBuffer>"44@0:8i16@"NSString"20^q28^q36
@"<MTLSamplerState>"28@0:8i16@"NSString"20
c44@0:8i16@"NSString"20^q28^q36
v24@0:8@?<v@?^{?=[4]}i>16
@"<VFXRERenderTargetInfo>"16@0:8
@"<VFXStencilInfo>"16@0:8
OS_dispatch_source_data_add
MTLSamplerState
MTLDepthStencilState
MTLRenderPipelineState
Q40@0:8{?=QQQ}16
maxTotalThreadsPerThreadgroup
threadgroupSizeMatchesTileSize
imageblockSampleLength
supportIndirectCommandBuffers
maxTotalThreadsPerObjectThreadgroup
maxTotalThreadsPerMeshThreadgroup
objectThreadExecutionWidth
meshThreadExecutionWidth
maxTotalThreadgroupsPerMeshGrid
shaderValidation
@"<MTLFunctionHandle>"32@0:8@"<MTLFunction>"16Q24
@"<MTLVisibleFunctionTable>"32@0:8@"MTLVisibleFunctionTableDescriptor"16Q24
@"<MTLIntersectionFunctionTable>"32@0:8@"MTLIntersectionFunctionTableDescriptor"16Q24
@"<MTLRenderPipelineState>"32@0:8@"MTLRenderPipelineFunctionsDescriptor"16^@24
MTLComputePipelineState
threadExecutionWidth
staticThreadgroupMemoryLength
@"<MTLFunctionHandle>"24@0:8@"<MTLFunction>"16
@"<MTLComputePipelineState>"32@0:8@"NSArray"16^@24
@"<MTLVisibleFunctionTable>"24@0:8@"MTLVisibleFunctionTableDescriptor"16
@"<MTLIntersectionFunctionTable>"24@0:8@"MTLIntersectionFunctionTableDescriptor"16
patchControlPointCount
vertexAttributes
stageInputAttributes
functionConstantsDictionary
T@"NSDictionary",N,R
@"NSDictionary"16@0:8
@"<MTLArgumentEncoder>"24@0:8Q16
@"<MTLArgumentEncoder>"32@0:8Q16^@24
heap
T@"<MTLHeap>",N,R
heapOffset
@"<MTLHeap>"16@0:8
access
MTLBufferBinding
bufferAlignment
bufferDataType
bufferStructType
T@"MTLStructType",N,R
bufferPointerType
T@"MTLPointerType",N,R
@"MTLStructType"16@0:8
@"MTLPointerType"16@0:8
MTLComputeCommandEncoder
v64@0:8{?={?=QQQ}{?=QQQ}}16
v64@0:8{?=QQQ}16{?=QQQ}40
v56@0:8@16Q24{?=QQQ}32
dispatchType
v24@0:8@"<MTLComputePipelineState>"16
v32@0:8@"<MTLBuffer>"16Q24
v56@0:8@"<MTLBuffer>"16Q24{?=QQQ}32
v24@0:8@"<MTLFence>"16
_TtP3VFX10VFXBinding_
objectID
bindingName
v24@0:8@"NSData"16
MDLComponent
MDLMeshBuffer
T@"<MDLMeshBufferAllocator>",N,R
zone
T@"<MDLMeshBufferZone>",N,R
v32@0:8@"NSData"16Q24
@"MDLMeshBufferMap"16@0:8
@"<MDLMeshBufferAllocator>"16@0:8
@"<MDLMeshBufferZone>"16@0:8
MTLArgumentEncoder
^v24@0:8Q16
encodedLength
alignment
v32@0:8@"<MTLRenderPipelineState>"16Q24
v32@0:8@"<MTLComputePipelineState>"16Q24
v32@0:8@"<MTLIndirectCommandBuffer>"16Q24
@40@0:8:16@24@32
c24@0:8#16
c24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
hash
T#,N,R
debugDescription
c24@0:8@"Protocol"16
OS_dispatch_source
@24@0:8^{_NSZone=}16
guardCount
VFX.VFXSceneLightParameters
_TtC3VFX23VFXSceneLightParameters
@24@0:8q16
@44@0:8q16f2428
v32@0:816
v24@0:8f16f20
v28@0:816c24
outerAngle
extents
doubleSided
textureTag
v32@0:8q16@24
v48@0:8q16c24^v28q36f44
v40@0:8q16^v24^v32
VFX.DirectionalLight
VFX.AmbientLight
VFX.RectAreaLight
_TtC3VFX18RotateActionSystem
_TtC3VFX14SineMoveSystem
elapsedTime
_TtC3VFX15SineYWaveSystem
Can't construct Array with count < 0
Swift/x86_64-apple-macos.private.swiftinterface
Fatal error
SineMove
SineY.Regular
_TtCO3VFX21GraphV1CodeGeneration17TypedArraySnippet
};out = &#TEMP#[0]
};thread out = &#TEMP#[0]
_TtC3VFX9GPUHelper
device
VFX.GPUHelper
Bug: Behavior Graph compilation failed without any diagnostics
VFX/BehaviorGraphCompiler.swift
invalid scheduling: 
on_particle_update
on_particle_init
_TtC3VFX12TypeRegistry
typeInfoByName
componentInfoByNameForFuzzyLookup
metadata
VFX/TypeRegistry.swift
trying to decode 
 but it shouldn't exist in version 
UnsafeMutablePointer.initialize overlapping range
unknown context at
_TtC3VFX15ProjectorSystem
Projector
VFX/VFXBinding.swift
_TtC3VFX11BindingImpl
identifier
objectName
isPublic
enumCases
property
Tq,N,VobjectID
Tq,N,Vtype
Tq,N,Vsemantic
Td,N,Vmin
Td,N,Vmax
@24@0:8^v16
v32@0:8@16^v24
c24@0:8^v16
v28@0:8c16^v20
C24@0:8^v16
v28@0:8C16^v20
S24@0:8^v16
v28@0:8S16^v20
I24@0:8^v16
v28@0:8I16^v20
Q24@0:8^v16
v32@0:8Q16^v24
q24@0:8^v16
v32@0:8q16^v24
s24@0:8^v16
v28@0:8s16^v20
i24@0:8^v16
v28@0:8i16^v20
d24@0:8^v16
v32@0:8d16^v24
f24@0:8^v16
v28@0:8f16^v20
24@0:8^v16
v32@0:816^v24
v40@0:816^v32
{?=[3]}24@0:8^v16
v72@0:8{?=[3]}16^v64
{?=[4]}24@0:8^v16
v88@0:8{?=[4]}16^v80
v56@0:816^v48
v120@0:8{?=[3]}16^v112
v152@0:8{?=[4]}16^v144
i32@0:8^v16q24
Failed to find built-in effect 
VFX1
vfxAssetsFrameworkBundle
T@"NSBundle",N,R
builtinEffectIdentifiers
/System/Library/VFX
com.apple.VFXAssets
_TtC3VFX10ScopeLevel
onDeallocTrigger
onCancelTrigger
_TtC3VFX19ComponentsDataChunk
classIndex
scope
unmanagedEntityClass
mutationID
isResizable
vm_data
entityIndices
handle
_staticWorkerAffinity
activeRange
newlyCreatedLowerBound
newlyDestroyedLowerBound
worldBox
worldBoxLastMutation
lodMaxSquareDistance
lodMaxSquareDistanceLastMutation
_shortLivedLock
_ownershipLock
lock short chunk
lock ownership chunk
VFX/ComponentsDataChunk.swift
Cannot transfer entities with inital values if 
 is not present in 
No Entity Indices
_TtC3VFX12VFXAttribute
_TtC3VFX31AnimationComputeLocalTimeSystem
updateGroupTime
_TtC3VFX20BasicAnimationSystem
_TtC3VFX23KeyframeAnimationSystem
float1Query
float2Query
float3Query
float4Query
AnimationComputeLocalTime
BasicAnimations
KeyframeAnimations
_TtCO3VFX21GraphV1CodeGeneration7Library
_name
snippets
includeFunctionsMapByLanguage
CodeGen.Resources.initialize: for 
) ignoring template 
 with missing or already used uid: '
%TYPE_DEFAULT_VALUE%
CodeGen.Library: Unable to parse  
CodeGen.Library.fromJsonString: invalid json: 
// vfx-codegen-def: 
VFX/Library.swift
CodeGen.Library: invalid include code for 
, '##' not used anywhere!
CodeGen.Library: duplicated key:
Force Field Type
Projection Direction
Fit Horizontally
Lens Blur Filter Quality
Tone Mapping Mode
_TtC3VFX26BindingPropertyDescription
bindingInfo
VFX/ComponentMeta.swift
unimplemented or should not be called on component with static properties
Higher runs first
Not enough bits to represent the passed value
Negative value is not representable
Randomize seed on start and on restart.
Check this box to try to run the simulation on the GPU
RandomizeSeedOnReset
MaxParticleCount
DisableWhenCulled
ShowNearestNeighbours
CullFullyTransparent
[Experimental] will not work with updateOnGPU, with multiple spawnIDs
[Experimental] will store all particles in one chunk
property is remapped to a component type that doesn't have metadata
 doesn't exist on 
WorldBoundingBox
LastFrameWorldTransform
ExcludeFromHierarchy
ParticleAngleVelocity
ParticleTextureFrame
ParticleLifetime
ParticleClassSpawnID
ProjectionMatrix
projectionDirectionIndex
Disable for better performance
filterQualityIndex
transparentRatio
Currently available only for cubemap textures, with IBL
Only applies to 2D textures
Shader File Asset
orientationIndex
depthCompareIndex
combinedTextures
use Combined texture (red=Oclusion green=Roughness blue=Metalness)
emissiveMinFilter
emissiveMagFilter
emissiveMipFilter
emissiveScaleBias
roughnessTexture
roughnessIntensity
roughnessMinFilter
roughnessMagFilter
roughnessMipFilter
roughnessScaleBias
metalnessTexture
metalnessIntensity
metalnessMinFilter
metalnessMagFilter
metalnessMipFilter
metalnessScaleBias
occlusionTexture
occlusionIntensity
occlusionMinFilter
occlusionMagFilter
occlusionMipFilter
occlusionScaleBias
PointCacheFileAsset
PointCacheFromVertex
REMeshAssetPointCache
Point Cache Generator
distributionIndex
TextureFileAsset
TextureArrayFileAsset
TextureNamedAsset
RequireSizeLimit
RequireMipmapAllocation
VFX/PropertyDescription.swift
TextureAnimation
RequireIOSurface
SDFTextureGenerator
Continuous Over Distance
Burst At Intervals
Respawn (Experimental)
maxStepPerBranch
SetAngularVelocity
SetAngleVelocity
frameGeneratedCount
torusInnerRadius
emissionOrderIndex
motionDistributionIndex
addressModeIndex
PointCacheEmitter
PointCacheSpawner
overrideBoundingBox
SetTargetFromPosition
Unsupported type for ParticleFloat3Init
SetTargetPosition
SetAngularFactor
ColorOverVelocity
OpacityOverVelocity
OrientationOverVelocity
directionAxisIndex
SizeOverVelocity
WrapAroundCamera
ColorOverTexture
PositionOverTexture
ColorOverPosition
OrientationConstraint
fallOffDirection
AffectedByForceField
AffectedByGravity
AffectedByGlobalForces
Flocking (Align Orientation)
Flocking (Align Velocity on Plane)
Flocking (Constrain to Area)
Flocking (Constrain to Plane)
Flocking (Fly towards Area)
Flocking (Solver)
Flocking (Speed Control)
kickStartDirectionIndex
Fluid Solver 2D (Emitter)
Check this box to emit density and/or velocity from this emitter
If a source is specified then each particle of the source will emit density and/or velocity
(note: if no source is specified then this component's WorldTransform is used as emitter)
The radius of the emitter
The amount of density that is emitted per second
The amount of velocity that is emitted per second
(note: the velocity direction is specified by either the source particle's velocity or by this component's WorldTransform if no source is specified)
Show the emitter position, size and orientation in the render view
Show the velocity that is emitted
Fluid Solver 2D (Solver)
Check this box to solve the fluid solver grids
Checking this box will make particles follow the velocity contained in the fluid solver grids
The amount of influence the fluid solver has on the particles being advected
A multiplier for the fluid solver's internal simulation speed
The extent (or size) of the setup
The cell size of the grid(s).
Smaller cell sizes require more memory and computation
The viscosity of the fluid
Adds vorticity to the simulation.
Damps the velocity over time
Show the grid(s) of the current setup
Show the velocities contained in the grid cells
Show the densities contained in the grid cells
Slow down more quickly for greater values
usesParticleSize
Slow down squarely proportional to particle scale
DistanceConstraint
DirectionalLight
dieOnCollisionProbabilityBias
sendEventsProbabilityBias
Cylinder Collider
Signed Distance Field Collider
LocalBoxCollider Collider
Sphere Attractor
Script (Emitter)
func emitterUpdate(_ context: $script_context, _ p: $emitter.position) {
    // print("hello from emitterUpdate")
    // let time = Float(vfx_script_clock_time(context))
    // p.x = sin(time)
VFX/ScriptComponents.swift
metal not supported
void emitter_update($script_context context, $emitter.position p) {
    // printf("hello from emitter_update\n");
    // double time = vfx_script_clock_time(context);
    // p.x = sin(time);
Script (Particle)
func particleInit(_ p: $particle.position) {
    // p.y = sin(time)
    // print("hello from particleInit")
void particle_init($script_context context, $particle.position p) {
    // printf("hello from particle_init\n");
    // double time = vfx_script_clock_time(context);
    // p.x = sin(time);
func particleUpdate(_ p: $particle.position) {
    // p.y = cos(time)
    // print("hello from particleUpdate")
void particle_update($script_context context, $particle.position p) {
    // printf("hello from particle_update\n");
    // double time = vfx_script_clock_time(context);
    // p.x = cos(time);
animationModeIndex
lightUsingParticleOrientation
prebakedLighting+XYZ
prebakedLighting-XYZ
occlusionDistance
occlusionFalloff
displacementIntensity
displacementScale
Sphere Ambient Occlusion
Box Ambient Occlusion
textureModeIndex
Opacity (Legacy)
TargetFromPosition (Legacy)
Sine Move Action
Animation Time Source
exponentialExponent
fillForwardIndex
fillBackwardIndex
Keyframe Animation
ShapeDistribution
EmitterShape.Direction
ParticleColorInit.Mode
EmitterShape.Shape
OrientationOverVelocity.DirectionAxis
ParticleSortMode
MotionDistribution
ParticleQuadRenderer.Shape
ParticlePrimitiveRenderer.Shape
ParticleAnimationMode
ParticleOrientationMode
ParticleRibbonProfile
ParticleRibbonTextureMode
FlockingLocalAxis
FlockingSizeMode
FluidSolver2DSolverSetupType
FluidSolver2DSolverBorderType
ToneMappingOperator
ParticleSubSpawn.Mode
ParticleColorOverPosition.GradientMode
PointCache.Distribution
ProjectionDirection
OrientationConstraint.Mode
VideoCapture.OrientationMode
Composition.Operation
ForceField.CullMode
ForceField.Shape
ForceField.Scope
weakProgressTrackerReferenceKey
_TtCE3VFXCSo8VFXWorldP33_3FCECE2A99C60E457AF6E856DAAF96C813WeakReference
_TtC3VFX17GraphScriptRunner
needUpdateMainGraphScriptGroup
graphScriptQuery
graphECPRefQuery
bindingsQuery
VFX2
v48@0:8@16@24@32@40
_TtC3VFX25TriggerScriptRunnerSystem
VFX/Scripting+Execute.swift
missing case for 
scripting: trying to access 
 but it's missing, add it manually
VFX/Script.swift
not even compiled
operation indices 
entityManager.getAnyValue failed for 
Source value type 
 doesn't match destination type 
VFX/EntityManager+EntityComponent.swift
 is invalid or component 
 is not present.
Unsupported Trigger Type
_TtCO3VFX21GraphV1CodeGeneration11CodeSnippet
_codeSourceSnippet
CodeSnippet(uid: 
, codeSourceSnippet: 
 language is not supported.
#UID_INDEX_VALUE#
snippetSignature
_TtC3VFX21AuthoringSubGraphNode
graph
_TtC3VFX12SubGraphNode
_signature
_TtC3VFX20SubGraphEndpointNode
_TtC3VFX17SubGraphEnterNode
_TtC3VFX18SubGraphReturnNode
subfn_%node_name(
VFX.SubGraphEndpointNode
VFX.SubGraphNode
unsupported data type 
_TtC3VFX11ShaderCache
defaultShaderLibrary
hotReloadableShaderLibrary
renderPipelines
computePipelines
functions
inactiveByPipeline
statistics
lastStatistics
disableCache
renderPipelineStats
computePipelineStats
functionStats
recordingBinaryArchive
precompiledBinaryArchives
urlToSaveBinaryArchiveTo
recordMetalPipelinesScript
onShaderCompilation
reloadCallback
_TtCFC3VFX11ShaderCache12makeFunctionFzT4nameSS7libraryGSqPSo10MTLLibrary__14constantValuesGSaVS_16FunctionConstant_13useAsLinkableSb_PSo11MTLFunction_L_15FunctionWrapper
Unable to compile pipeline state. Error info: 
makeComputePipeline
warning: shader compilation: 
makeComputePipelineRefl
Try to compile a compile function without a name
VFX/Extensions.swift
asyncMakeComputePipeline
v32@?0@"<MTLComputePipelineState>"8@"MTLComputePipelineReflection"16@"NSError"24
asyncMakeComputePipelineRef
asyncMakeFunction
v24@?0@"<MTLFunction>"8@"NSError"16
Missing function 
 in default library
vfx-disable-async-shader-compilation
[Error] Interval already ended
Unexpectedly found nil while unwrapping an Optional value
UnsafeMutableRawPointer.initializeMemory overlapping range
UnsafeMutablePointer.initialize with negative count
Insufficient space allocated to copy string contents
invalid Collection: less than 'count' elements in collection
UnsafeMutableBufferPointer with negative count
Unable to compile render pipeline without vertexFunction or meshFunction
Unable to compile render pipeline state. Error info: 
makeRenderPipeline
missing vertex shader
makeRenderPipelineRefl
asyncMakeRenderPipeline
v32@?0@"<MTLRenderPipelineState>"8@"MTLRenderPipelineReflection"16@"NSError"24
asyncMakeRenderPipelineRefl
lock ShaderCache
enable-binary-archive-recording
VFX/ShaderCache.swift
enable-metal-pipelines-script-recording
Unable to load library 
HotReloadableShaders
MetalShaderCache: 
binary-archive-path
Recording Metal Pipelines Script
Recording Metal Binary Archive
HotReloadableLibrary
ShaderCache: async compilation disabled
Cannot reload ComputePipeline: 
Cannot reload RenderPipeline: 
Unable to add binary archive at 
Using Metal binary archive at "
makeFunction
Failed compiling 
patchType
@24@0:8@16
functionNames
c24@0:8@16
_TtC3VFX16ForceFieldSystem
_TtCV3VFX18ParticleForceField9CPUSystem
_TtCV3VFX18ParticleForceField9GPUSystem
fieldsQuery
VFX/ForceField.swift
Invalid Texture in Force Field
ParticleForceField.CPU
particle_force_field
ParticleForceField.GPU
Unsupported pixel format: 
_TtCV3VFX28ParticleIntegrateOrientation6System
orientationQuery
ParticleIntegrateOrientation.CPU
_TtC3VFX13ScriptCodeGen
userProjectName
mangledProjectName
_TtC3VFX18MetalScriptCodeGen
_TtC3VFX14CScriptCodeGen
_TtC3VFX18SwiftScriptCodeGen
%PROJECT%_%KIND%_%ORIG_ENTITY%
VFX/ScriptCodeGen.swift
texture doesn't have enough information about the desired type, this should be special cased by the caller
pbr_lighting_parameters
vfx_custom_shader_%SCRIPT_ID%
// VFX_USER_CODE_STARTS_HERE
} // namespace 
vfx_compute_%SCRIPT_ID%
VFXUberScriptHeader
auto systemTreatmentParams = builtin.makeSystemTreatmentParameters(
, io.vertice.position, camera_index, io.vertice.screen_uv);
systemTreatmentParams.renderOptionsOverride.disableClipping();
out.color = vfx::api::applySystemTreatments(out.color, systemTreatmentParams, sample_mask);
io.primitive.particle_index = pid;
io.primitive.camera_index = camera_index;
io.vertice.position = builtin.proj_from_crws(camera_index) * float4(use_interpolated_crworld ? io.vertice.crworld_position : crworld_position, 1);
io.vertice.screen_uv = builtin.computeScreenUV(io.vertice.position, camera_index);
(pid, particle_data_
float3 crworld_position;
(void) crworld_position;
Unsupported type for space = 
uint32_t random_seed = particles.init_kernel_seed(0, pid);
is_local ? vfx_transform_position(particles.world_from_emitter(), 
is_local ? builtin.crws_from_world(vfx_transform_position(particles.world_from_emitter(), 
)) : builtin.crws_from_world(
vfx_transform_position(builtin.view_from_crws(camera_index), 
 : vfx_quat_mul(vfx_quat_conjugate(particles.emitter_orientation()), 
is_local ? vfx_quat_mul(particles.emitter_orientation(), 
vfx_quat_mul(vfx_quat_(builtin.view_from_crws(camera_index)), 
particles.emitter_scale()
 / vfx_get_scale(builtin.view_from_crws(camera_index))
particles.get_world_transform(pid)
builtin.crws_from_world(particles.get_world_transform(pid))
builtin.view_from_world(camera_index) * particles.get_world_transform(pid)
material_params.
not available as user param!
builtin.makeLightingParameters(
, float3(io.vertice.normal), float3(io.vertice.tangent.xyz))
builtin.crworld_camera_position(camera_index)
use_interpolated_crworld ? io.vertice.crworld_position : crworld_position
input_values.value
TextureType unsupported in CPU: 
address::mirrored_repeat
address::clamp_to_zero
address::clamp_to_edge
builtin.world_from_crws(
 not supported as external argument
 is not available as an external argument
particle_data_attachment<
<float> texture_
constant frame_constants& script_context [[ buffer(
particle_data_attachment<4> particles_attachment
material_params_%SCRIPT_ID%
& material_params [[ buffer(vfx_buffer_binding_index_material_constants) ]]
 io [[ stage_in ]]
void __attribute__((always_inline)) 
this shouldn't be called for files this recent!
__vfx_get_effect_class_
() -> AnyClass {
    return 
vfx_get_main_class
couldn't convert project name to swift: 
(_ scriptContext: UnsafeRawPointer) {
unsafeScriptContext = scriptContext
time = Float(vfx_script_clock_time(scriptContext))
deltaTime = vfx_script_clock_delta_time(scriptContext)
let argumentsBuffer = vfx_script_get_arguments_buffer(scriptContext)
 = argumentsBuffer[
]!.assumingMemoryBound(to: 
UnsafeMutableRawPointer(pInout
).assumingMemoryBound(to: SIMD4<Float>.self).pointee
 * iterationIndex).assumingMemoryBound(to: SIMD4<Float>.self).pointee
[iterationIndex]
 * iterationIndex).assumingMemoryBound(to: 
for iterationIndex in iterationRange {
var iterationBegin: CInt = 0, iterationEnd: CInt = 0
vfx_script_get_iteration_range(scriptContext, &iterationBegin, &iterationEnd)
let iterationRange = Int(iterationBegin)..<Int(iterationEnd)
import simd
import Foundation
import VFX
fileprivate var unsafeScriptContext: UnsafeRawPointer!
fileprivate var time: Float = 0
fileprivate var deltaTime: Float = 0
// VFX_USER_CODE_STARTS_HERE
@inline(__always) func 
import simd
import Foundation
import VFX
fileprivate var unsafeScriptContext: UnsafeRawPointer!
fileprivate var time: Float = 0
fileprivate var deltaTime: Float = 0
(void *script_context) {
void *const * arguments_buffer = vfx_script_get_arguments_buffer(script_context);
*)arguments_buffer[
*(float4*)inout_pointer
*(float4*)(((char*)inout_pointer
 * iteration_index)
[iteration_index]
*)(((char*)inout_pointer
for (int iteration_index = iteration_begin; iteration_index < iteration_end; iteration_index++) {
*)vfx_script_get_call_parameter(script_context, "
int iteration_begin, iteration_end;
vfx_script_get_iteration_range(script_context, &iteration_begin, &iteration_end);
__attribute__((visibility("default"))) 
__attribute__((used,visibility("hidden"),section("
__vfx_script_tbl
static vfx_entry_t __vfx_script_table_ref = { "
", __vfx_script_table };
extern "C" void 
// Compute Kernel Function
implemented in subclass
 GENERATED CONTENT
_TtC3VFX13ShaderLibrary
@16@0:8
libraryURL
watchingFolderQueue
library
reloadedNotificationBlock
presentedItemURL
T@"NSURL",N,R
presentedItemOperationQueue
T@"NSOperationQueue",N,R
Failed reloading 
VFX.ShaderLibrary
v32@0:8@16@?24
primaryPresentedItemURL
observedPresentedItemUbiquityAttributes
T@"NSSet",N,R
@"NSURL"16@0:8
@"NSOperationQueue"16@0:8
v24@0:8@?<v@?@?<v@?>>16
v24@0:8@?<v@?@"NSError">16
v24@0:8@"NSURL"16
v24@0:8@"NSSet"16
@"NSSet"16@0:8
v24@0:8@"NSFileVersion"16
v32@0:8@"NSURL"16@?<v@?@"NSError">24
v32@0:8@"NSURL"16@"NSURL"24
v32@0:8@"NSURL"16@"NSFileVersion"24
#16@0:8
@24@0:8:16
superclass
description
Unsupported
SetParticleTextureFrame.CPU
SetParticleAngleVelocity.CPU
SetParticleAngle.CPU
VFX.VFXRemotePreviewEndpoint
_TtC3VFX24VFXRemotePreviewEndpoint
name
T@"VFXWorld",N,W,Vworld
invalid ScriptKeyPath identifier: 
invalid keyPath identifier: 
could not resolve dynamic keyPath: 
invalid property identifier: 
_TtC3VFX14EntitySnapshot
_data
VFX/EntitySnapshot.swift
Trying to assign snapshot with an invalid entity 
Trying to clone a invalid entity
v16@?0@"NSFileHandle"8
_TtCV3VFX27ParticlePositionOverTexture6System
_TtC3VFX34ParticleFluidSolver2DEmitterSystem
_TtC3VFX31ParticleFluidSolver2DSolverData
handles
_TtC3VFX33ParticleFluidSolver2DSolverSystem
emittersQuery
globalFluidSolver2DSolversQuery
velocityAffectedQuery
VFX/ParticleSystems_Fluids.swift
hw.perflevel0.physicalcpu_max
serializationContext
no asset manager for 
_TtC3VFX8VFXSaver
isSavingForExport
layout
saveBindingsMetadata
saveAsPlist
targetsToPrecompile
cpu gpu 
outParamUID optMetadataSet 
count buffer bytesPerIndex 
paramType codeSourceSnippet 
compute.metallib
textureType
TQ,N,R
depth
framebufferOnly
compressionType
gpuResourceID
v24@0:8@16
installName
_TtCV3VFX23ParticleSizeOverTexture6System
_TtC3VFX24CAMetalLayerRenderOutput
metalLayer
viewpoint
loadAction
clearColor
preferredFramesPerSecond
isUserInitiated
frameCompletion
postRenderCallback
inputStreamIdentifier
enabled
requestedDrawableSize
_TtC3VFX22MTLTextureRenderOutput
colorTexture
shouldWaitForCommandBufferCompletion
_TtC3VFX16MockRenderOutput
sizeInPixel
depthPixelFormat
_TtC3VFX8Renderer
simulateCommandBufferError
engineContext
uploadLock
renderOutputs
renderOutputsForThisFrame
shaderCache
textureCache
depthStencilCache
GPUToolBox
texturePool
uniformValidationBuffer
bufferPool
wholeFrameBufferPool
captureInProgress
showDebugMenu
additiveWritesToAlpha
hideOpaquePass
hideTransparentPass
isPostFXEnabled
unscheduledCommandBuffersLock
unscheduledCommandBuffers
currentCommandBuffer
currentEncoder
currentEncoderWrapper
currentRenderPassDescriptor
renderPassDescriptorPool
renderOutputRenderPassFormat
encoders
globalFunctionConstants
mtkMeshBufferAllocator
inFlightSemaphore
_current
activeRenderVariantDescriptors
_compiledVariantCount
colorRamps
curves
monotonicIncreasingOrder
stripIndexBuffers
deformedBuffers
_TtC3VFX24RendererPostUpdateSystem
Could not allocate texture NA with 
VFX/Renderer.swift
defaultWhiteTexture2D failed
defaultBlackTexture failed
defaultGreyTexture failed
NextDrawable returned nil
v16@?0@"<MTLCommandBuffer>"8
App is background and no drawable is available, skipping frame
v16@?0@"<MTLDrawable>"8
VFXDefaultIrradiance
Failed loading VFXDefaultIrradiance in Bundle
loadKTX failed: 
loadKTXTextureFromBundle: Failed creating cpu buffer
loadKTXTextureFromBundle: Failed creating texture
TextureUploadFromCPU
AsyncBlit
Cannot create a blitEncoder
VFX update command buffer
Cannot create commandBuffer 
VFXDefaultRadiance
Failed loading VFXDefaultRadiance in Bundle
DefaultBlackCubeTexture failed
defaultLinearDepthTexture failed
kern.hv_vmm_present
Cannot create encoder current command buffer!
Cannot create a computeEncoder
monotonicIncreasingBuffer
Failed allocating MTLBuffer "
defaultWhiteTexture1D failed
defaultWhiteTexture3D failed
defaultWhiteTextureCube failed
defaultNormalMapTexture failed
Renderer.renderOutputs
Renderer.uploadLock
UnsafeMutablePointer.deinitialize with negative count
MTLParallelRenderCommandEncoder
v32@0:8Q16Q24
v24@0:8Q16
@"<MTLRenderCommandEncoder>"16@0:8
tileHeight
MTLBlitCommandEncoder
v136@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104{?=QQQ}112
v120@0:8@16Q24Q32Q40{?=QQQ}48@72Q80Q88{?=QQQ}96
v128@0:8@16Q24Q32Q40{?=QQQ}48@72Q80Q88{?=QQQ}96Q120
v120@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104Q112
v128@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104Q112Q120
v44@0:8@16{_NSRange=QQ}24C40
v80@0:8@16Q24Q32@40Q48Q56Q64Q72
v32@0:8@16@24
v56@0:8@16Q24@32Q40Q48
v56@0:8@16{_NSRange=QQ}24@40Q48
v108@0:8@16{?={?=QQQ}{?=QQQ}}24Q72Q80c88@92Q100
v88@0:8@16{?={?=QQQ}{?=QQQ}}24Q72Q80
v24@0:8@"<MTLResource>"16
v40@0:8@"<MTLTexture>"16Q24Q32
v136@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLTexture>"88Q96Q104{?=QQQ}112
v120@0:8@"<MTLBuffer>"16Q24Q32Q40{?=QQQ}48@"<MTLTexture>"72Q80Q88{?=QQQ}96
v128@0:8@"<MTLBuffer>"16Q24Q32Q40{?=QQQ}48@"<MTLTexture>"72Q80Q88{?=QQQ}96Q120
v120@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLBuffer>"88Q96Q104Q112
v128@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLBuffer>"88Q96Q104Q112Q120
v24@0:8@"<MTLTexture>"16
v44@0:8@"<MTLBuffer>"16{_NSRange=QQ}24C40
v80@0:8@"<MTLTexture>"16Q24Q32@"<MTLTexture>"40Q48Q56Q64Q72
v32@0:8@"<MTLTexture>"16@"<MTLTexture>"24
v56@0:8@"<MTLBuffer>"16Q24@"<MTLBuffer>"32Q40Q48
v56@0:8@"<MTLIndirectCommandBuffer>"16{_NSRange=QQ}24@"<MTLIndirectCommandBuffer>"40Q48
v56@0:8@"<MTLCounterSampleBuffer>"16{_NSRange=QQ}24@"<MTLBuffer>"40Q48
v108@0:8@"<MTLTexture>"16{?={?=QQQ}{?=QQQ}}24Q72Q80c88@"<MTLBuffer>"92Q100
v88@0:8@"<MTLTexture>"16{?={?=QQQ}{?=QQQ}}24Q72Q80
width
cpuCacheMode
Recovered from error: 
Unsupported version: 
Version mismatch: 
Couldn't decode: 
Invalid serialization type: 
_TtCFVV3VFX8Metadata5Class34_propertyDescriptionsAndStartPointFT_GSqTGSaVVS_8Property11Description_GSqVs5Int32___L_11NameAndType
_TtCFVV3VFX8Metadata6Struct20propertyDescriptionsFT_GSqGSaVVS_8Property11Description__L_11NameAndType
Swift._SwiftObject
_TtCs12_SwiftObject
_TtCV3VFX20ParticleGenerateGrid6System
ComputeNN.CPU
_TtC3VFX19VideoCaptureSession
frameTime
outputTexture
session
metalTextureCache
sampleBuffer
v40@0:8@16^{opaqueCMSampleBuffer=}24@32
_TtC3VFX18VideoCaptureSystem
captureComponents
captureRuntime
_TtC3VFX16IOSurfaceWrapper
ioSurface
_TtC3VFX11MovieSystem
dirtyMovieQuery
updatePlayers
_TtC3VFX11AudioPlayer
engine
mixer
isValid
samplesRaw
samplesRawCount
samplesRawTime
samplesRawSampleRate
_lock
_TtC3VFX11AudioSystem
setupPlayersQuery
updateAudioControllers
updateFFT
failed to create a device
session.addOutput succeeded
Could not connect video output to capture session.
configuring video capture...
mirroring not supported
Could not add video output to capture session.
failed to create an input
Unable to allocate texture cache.
requesting the url of an asset (
) with no pathResolver
Failed to create metal texture
Movie
v24@?0@"AVAudioPCMBuffer"8@"AVAudioTime"16
com.apple.vfx.audioPlayer
failed to create audio engine 
failed to attach audio player 
Audio
VFX.AudioPlayer
Failed to get metal texture from pixel buffer
VFX.VideoCaptureSession
node outputIndex inputIndex 
AVCaptureVideoDataOutputSampleBufferDelegate
v40@0:8@"AVCaptureOutput"16^{opaqueCMSampleBuffer=}24@"AVCaptureConnection"32
AVCaptureAudioDataOutputSampleBufferDelegate
_TtCO3VFX21GraphV1CodeGeneration17CustomCodeSnippet
source
_TtCO3VFX21GraphV1CodeGeneration15VariableSnippet
_TtCO3VFX21GraphV1CodeGeneration24VariableReferenceSnippet
VariableReferenceSnippet(uid: 
VariableSnippet(uid: 
 language is not supported. CustomCode only support Swift.
CodeGenContext.typeAsCode: 
 doesn't support 
UnsafeMutablePointer.moveInitialize with negative count
CustomCodeSnippet(uid: 
_TtCC3VFX5Graph11DeletedNode
_TtCC3VFX14AuthoringGraph11DeletedNode
_TtC3VFX16_PlaceholderNode
oldNode
VFX._PlaceholderNode
_TtCO3VFX21GraphV1CodeGeneration19StaticSwitchSnippet
_TtC3VFX26LegacyParticleRenderSystem
instanceStride
colorStride
frameIndex
entityCount
particleQuery
_TtC3VFX27LegacyParticleEmitterSystem
Legacy Particle Render
Legacy Particle Emitter
_TtCV3VFX20ParticleSizeOverLife6System
particlesS1
particlesS2
particles
particlesNoS1
particlesNoS2
_TtCV3VFX20ParticleSizeOverLife9GPUSystem
particle_size_over_life
ParticleSizeOverLife.GPU
couldn't remap entity: 
_TtC3VFX14FrameAllocator
dataAllocated
extraDatas
_TtC3VFX12GraphCodeGen
liveValuesNodes
language
formatting
subGraphsToEmit
nameByScriptParameter
atomCache
bumpedIndexByVariableName
_TtCC3VFX12GraphCodeGenP33_22BEB975C8D88BF1BD499327E6FD4D1D7CFGNode
_TtCC3VFX12GraphCodeGenP33_22BEB975C8D88BF1BD499327E6FD4D1D7CFGNoop
rawNode
_TtCC3VFX12GraphCodeGenP33_22BEB975C8D88BF1BD499327E6FD4D1D12CFGProcedure
next
_TtCC3VFX12GraphCodeGenP33_22BEB975C8D88BF1BD499327E6FD4D1D17CFGMultiProcedure
children
_TtCC3VFX12GraphCodeGenP33_22BEB975C8D88BF1BD499327E6FD4D1D9CFGBranch
VFX/GraphCodeGen.swift
 cannot be materialized in a script
Atom should have been cached during processGraph()
 has no corresponding CFGNode, invalid graph
no terminal node, invalid graph for codegen
 can't or hasn't been translated to CFGNode
vfx_script_graph_record_values
(vfx_script_uuid_t[]) { 
0x%llxull, 0x%llxull
_TtC3VFX4Node
typing
VFX/Node.swift
allocateConstantBuffer failed copying particle_ao_material_constants
particle_aoSphere_vert
particle_aoSphere_frag
allocateConstantBuffer failed copying particle_gaussian_material_constants
particle_gaussian_vert
particle_gaussian_frag
particle_gaussian_mesh
_TtC3VFXP33_B102182364ADC01C06A059EE682C19179XcodeInfo
macOSToolchainOverride
thisBundle
sdkPath
toolchainPath
$__lazy_storage_$_isCurrentVFXBuiltForAllArchs
_TtC3VFX19XcodeCommandBuilder
xcinfo
debug
frameworksToLink
librariesToLink
includePaths
swiftFlags
cFlags
/Contents/Frameworks/
xcodeinfo
/usr/bin/codesign
--timestamp=none
-L/usr/lib/swift
/Contents/Modules/
System/Library/PrivateFrameworks
System/Library/Frameworks
_TtC3VFX12SkyboxSystem
Unsupported TextureType for Skybox: 
vertex_skybox_2d
fragment_skybox_texture1d
Skipping skybox, unable to make pipeline state for skybox vertex: 
fragment_skybox_texture3d
fragment_skybox_texture2d_array
fragment_skybox_texture2d
vertexSkyboxShader
fragment_skybox_cube
vertexSkyboxWithRotationShader
entity order 
RenderSkybox
SceneKit
Invalid number of keys found, expected one.
_TtC3VFX16GraphDiagnostics
rawNodesByID
_TtC3VFX17GraphTypeResolver
resolvedNodes
tagsByNode
subGraphEnterInputTypes
insertTypeConversions
_TtC3VFX18GraphTypeInference
visited
typeHintByInput
typeHintByOutput
 doesn't satisfy constraint: 
 couldn't be resolved
) doesn't match required 
) is not compatible with input 
Subgraph Enter or Return node is not connected
VFX/Graph+Typing.swift
.arrayOfAnySize cannot be used as a return type constraint.
Invalid number of inputs
Some inputs are not connected
_TtCV3VFX21OrientationConstraint6System
OrientationBillboard
_TtC3VFX17PostProcessSystem
isMenuItemEnabled
Post Processing
vertex_draw_quad
_TtCV3VFX16ParticleKillable9CPUSystem
_TtCV3VFX16ParticleKillable9GPUSystem
EmitterDescription
emitter_killshape
KillShapeSystem.GPU
_TtCV3VFX11QueryResult11Deallocator
_TtC3VFX19PropertyDescription
scriptKeyPath
accessorCreator
getset
visibility
unavailableStartingFromVersion
lookupReplacementProperty
cachedResolvedReplacementProperty
defaultValues
_min
_max
_step
_minFractionDigit
_maxFractionDigit
flags
_scriptingProperty
getter
setter
entityInstance
PropertyDescription.Semantic can't be created from coding index: 
PropertyDescription.Semantic of type SourceCode can't be created from coding index.
fragmentFunction
pointCacheReference
textureReference
_TtC3VFX11WakeUpEvent
condition
event
_TtC3VFX20GraphAuthoringSystem
_TtC3VFX20MainGraphScriptGroup
groups
GraphCodeGen.generateCodeForEachGraphConfig: found unsupported base object: 
key value 
Duplicate values for key: '
uint32_t currentSeed
const void* scriptContext
constant uint32_t& currentSeed
constant frame_constants& scriptContext
_ currentSeed: UInt32
_ scriptContext: UnsafeRawPointer
GraphComponents.setupGraphParticleScript[
]: unable to find input: '
particleComponentInputs: 
particleClassComponentInputs: 
emitterInputs: 
' references null entity!
TextureSampler2D
TextureSampler3D
GraphCodeGen.createScriptParam: unsupported type for TextureShaderAsset: 
GraphCodeGen.extractTransformSpaceMode: found unsupported space String: 
GraphScriptConfig[
]: unable to find output: '
' in.. 
outputs: 
GraphComponents.setupGraphScript[
]: Unable to find input: '
Graph Scripting Config
_TtC3VFX26GenericLookingGlassDisplay
calibration
quiltSettings
_TtC3VFX14RegularDisplay
window
quad_texture2d_frag
_TtC3VFX12GraphicsNode
_TtC3VFX17EvaluateCurveNode
_TtC3VFX21EvaluateColorRampNode
_TtC3VFX12SetColorNode
_TtC3VFX14RGBAToHSBANode
_TtC3VFX12RGBToHSBNode
_TtC3VFX14HSBAToRGBANode
_TtC3VFX12HSBToRGBNode
_TtC3VFX17sRGBAToLinearNode
_TtC3VFX16sRGBToLinearNode
_TtC3VFX17LinearTosRGBANode
_TtC3VFX16LinearTosRGBNode
_TtC3VFX22AlphaPremultipliedNode
_TtC3VFX11SamplerNode
_TtC3VFX10SampleNode
VFX.SampleNode
%0.texture.sample(%0.sampler, %uv * %scale + %offset)
VFX/Nodes+Graphics.swift
vfx_script_texture_sample3d
(%0, %uv * %scale + %offset)
vfx_script_texture_sample2d
vfx_script_texture_sample1d
VFX/AnyType.swift
VFX.SamplerNode
vfx_make_float4(%0.xyz * %0.w, %0.w)
Alpha Premultiplied
vfx_linear_to_srgb(%0)
vfx_make_float4(vfx_linear_to_srgb(vfx_get_xyz(%0)), %0.w)
vfx_srgb_to_linear(%0)
vfx_make_float4(vfx_srgb_to_linear(vfx_get_xyz(%0)), %0.w)
vfx_hsb_to_rgb(%0)
vfx_rgb_to_hsb(%0)
auto %r0 = vfx_script_color_ramp_create_setting_color(%script_context, %colorRamp, %color, %index);
#cleanup
vfx_script_color_ramp_destroy(%script_context, %r0);
vfx_script_color_ramp_evaluate(%0, %1)
%0.texture.sample(%0.sampler, %1)
vfx_script_texture_sample1d(%0, %1)
Evaluate ColorRamp
vfx_script_curve_evaluate(%0, %1)
%0.texture.sample(%0.sampler, %1).r
vfx_script_texture_sample1d(%0, %1).x
VFX/VFXScene.swift
For compatibility only, this initializer shouldn't be used
VFXScene.allowsCameraControl is not supported anymore - use VFXView.allowsCameraControl
withPointerToValue is deprecated - use withPointerToParameter
authoringFileManager initialized twice?
_TtC3VFX8VFXScene
v20@0:8c16
v40@0:8@16@24@32
@20@0:8i16
loadOptions
loader
templateRemapTable
templateWasPrepared
effects
entityObjects
_version
isInsideRE
isREAssetScene
transientDrawCall
hasSharedEntityManager
metalBinaryArchiveURLs
recordedMetalBinaryArchiveURL
internalPixelFormat
internalPixelFormatDepth
useGammaBlending
debugUIOptions
T@"NSArray",N,C
version
Tq,N,R
T@"NSURL",N,C
TQ,N,VinternalPixelFormat
Tc,N,VinternalPixelFormatDepth
Tc,N,VuseGammaBlending
isPlaying
isFrozen
timeScale
Tf,N
allowsCameraControl
showStatistics
VFXSceneLoadOptions
^{__CFXWorld=}16@0:8
v24@0:8^{__CFXWorld=}16
^{_opaque_pthread_mutex_t=q[56c]}16@0:8
v24@0:8^{_opaque_pthread_mutex_t=q[56c]}16
{?=^{__vfx_counters}}16@0:8
v24@0:8{?=^{__vfx_counters}}16
I16@0:8
isAuthoringWorld
isVFX2
enableRuntimeScriptCompilation
allowLoadingFromFuture
setupAsTemplate
automaticallyPrepareScene
setupAsyncRuntime
asyncRuntimeLock
loadBindingsMetadata
enableParallelDecoding
setupRenderer
colorPixelFormat
enableDeferredRendering
doNotClearRenderOutput
clientID
metalLibraryURL
systemRegistrationOptions
counterStorage
peerTaskIdentity
loadPrecompiledScripts
Tc,N,VisAuthoringWorld
Tc,N,VisVFX2
Tc,N,VenableRuntimeScriptCompilation
Tc,N,VallowLoadingFromFuture
Tc,N,VsetupAsTemplate
Tc,N,VautomaticallyPrepareScene
Tc,N,VsetupAsyncRuntime
T^{__CFXWorld=},N,W,Vworld
T^{_opaque_pthread_mutex_t=q[56c]},N,VasyncRuntimeLock
Tc,N,VloadBindingsMetadata
Tc,N,VenableParallelDecoding
Tc,N,VsetupRenderer
TQ,N,VcolorPixelFormat
TQ,N,VdepthPixelFormat
Tc,N,VdoNotClearRenderOutput
T@"<MTLDevice>",N,&,Vdevice
T@"<MTLCommandQueue>",N,&,VcommandQueue
T{?=^{__vfx_counters}},N,VcounterStorage
Ti,N,VpeerPid
TI,N,VpeerTaskIdentity
VFX3
q24@0:8@16
@40@0:8q16^B24^B32
assetManager
T@"NSObject",N,&
Down-casted Array element failed to match the target type
Expected 
NSArray element failed to match the Swift Array Element type
Expected 
CodeSourceSnippet
(CFGNode in _22BEB975C8D88BF1BD499327E6FD4D1D)
PropertyDescription
ComponentsDataChunk
failed resolving path: 
transaction
index
label
v32@0:8@16Q24
enumName
T@"NSData",N,C
angular_velocity
VFX/ParticleStoredData.swift
get_angle_velocity
set_angle_velocity
get_texture_frame
set_texture_frame
get_angular_velocity
set_angular_velocity
get_angular_factor
set_angular_factor
get_linear_factor
set_linear_factor
particle_plane_collider
@inline(__always) 
 for(int i = 0; i < 
CodeGenContext.getCGMetadataValueAsSwiftCodeStatement: Unsupported Type: 
<ERROR_NO_DATA_FOR_CUSTOM_TYPE>
UnsafeRawPointer.unsafeNull
Range<Float>(uncheckedBounds: (
Range<Int>(uncheckedBounds: (
vfx_script_curve_create(scriptContext, 
 vfx_script_curve_destroy(scriptContext, 
vfx_script_color_ramp_create(scriptContext, 
 vfx_script_color_ramp_destroy(scriptContext, 
CodeGenContext.getCGMetadataValueAsMetalCodeStatement: Unsupported Type: 
(vfx_float_range) {
(vfx_int_range) {
CodeGenContext.getCGMetadataValueAsCCodeStatement: Unsupported Type: 
vfx_script_string_create(scriptContext, "
 vfx_script_string_destroy(scriptContext, 
vfx_script_curve_create(scriptContext, (float[]) 
vfx_script_color_ramp_create(scriptContext, (simd_float4[]) 
_vfx_simd_quatf(
vfx_script_string_copy(
vfx_script_curve_copy(
vfx_script_color_ramp_copy(
Language.assignOrCopyWithConversion: type 
 doesn't use following conversionCode: 
CodeGeneration.Language.typeAsSwift: unsupported type 
UNKNOWN_TYPE(SWIFT)
UnsafeRawPointer
CodeGeneration.Language.typeAsMetal: unsupported type 
UNKNOWN_TYPE(METAL)
CodeGeneration.Language.typeAsC: unsupported type 
particle_quad_vert
particle_quad_frag
particle_quad_deferred_frag
_TtCV3VFX16ParticleMassInit6System
_TtCV3VFX16ParticleMassInit9GPUSystem
ParticleMassInit.CPU
particle_set_mass
ParticleMassInit.GPU
_TtC3VFXP33_8097C2CE5E3CF1582AC111ECB3AF7FE217RGGraphTranslator
runtimeEntityManager
rgContext
rgBuilder
generatePreviewTextures
attachments
Range requires lowerBound <= upperBound
Index out of range
from to 
VFX/GraphProtocol.swift
Cycle found during traversal! Use .nodeFirst or make the graph acyclic with InputFilter
GraphCursor.visit() is only allowed when using .inputsFirst traversal
oldUID newUID 
VFX/RGTranslator.swift
null resource, invalid translation
CreatePreviewTexture
 is not a RenderGraphNode
pre  
serializationRegistry
CFXCodableEncode: could not encode 
CFXCodableDecode: could not decode 
AuthoringGraphCoder
Invalid render graph node: 
Texture unavailable
Only supports 2D textures
TextureAsset
TextureAssetCopy
Script runtime data doesn't match authoring reflection
Unable to extract script data from metal reflection
 expects a color texture
 expects a texture
blur
v24@?0{?=^{__RGContext}}8{?=^{__RGResource}}16
 unsupported semantic for publish node
Published attachment 
 is already published elsewhere
 expects a depth texture
main pass
 doesn't have a RGPass
Metal script buffer
Load data
v36@?0{?=^{__RGPass}}8{?=^{__RGContext}}16C24{?=^{__RGArguments}}28
Unsupported type: 
Missing reflection info for: 
Unable to load data for: 
Unexpected optional: 
Metal script resource
arg access 
Unable to find reflection input 
 in metal script
Input copy
metal script output
Unable to find reflection output 
Too many outputs
couldn't map script parameter at: 
No script parameter
storageMode
allocatedSize
rawValue
@"NSData"16@0:8
@32@0:8:16@24
_TtC3VFX10InputEvent
state
phase
momentumPhase
sourceIdentifier
locationInWindow
locationInView
isMouseInView
buttonNumber
characters
delta
keyCode
keyModifiers
timestamp
isDirectionInvertedFromDevice
clickCount
nativeType
_TtC3VFX16InputClearSystem
defaultStage
EnableNdfFiltering
EnableAREnvProbe
SupportsPrefilteredProbes
SupportsCubeArray
has_vertex_position
has_vertex_normal
has_vertex_color
has_vertex_tangent
enable_dither_fade
enable_alpha_fade
enable_depth_mitigation
enable_auto_alpha
use_interpolated_crworld
is_layered_rendering
is_multi_viewport_rendering
enable_portal_clip_plane
uniform_lifetime
has_angular_velocity
has_angle_velocity
has_texture_frame
has_linear_factor
has_angular_factor
has_ribbon_length
has_uniform_size_LEGACY
size_over_life_mode
attach_use_over_life
noise_use_transform
plane_collider_infinite
plane_collider_sphere
plane_collider_double_sided
box_collider_inside
force_field_kind
emitter_shape_type
emitter_shape_distribution
emitter_shape_orientation
emitter_shape_direction
emitter_shape_has_texture_2D
emitter_pointcache_inherit_position
emitter_pointcache_inherit_color
emitter_pointcache_inherit_velocity
emitter_pointcache_inherit_orientation
emitter_pointcache_inherit_size
emitter_pointcache_has_transform
enable_texture_2d
enable_texture_3d
enable_texture_2d_array
enable_texture_cube
enable_texture_prelighted
texture_is_not_alphapremultiplied
local_transform_LEGACY
has_particle_transform
has_pbr_lighting
disable_specular
inter_frame_interpolation
enable_scattering
orientation_mode
enable_velocity_stretch_LEGACY
enable_thick_lines
enable_soft_particles
need_opaque_zbuffer
need_normal_buffer
voxelDataChannelCount
enable_per_vertex_color
need_raytracing_LEGACY
need_point_size_LEGACY
need_ribbon_length_LEGACY
need_procedural_uv_LEGACY
is_custom_material
has_global_illumination
global_illumination_mip
has_volumetric_scattering
volumetric_scattering_mip
has_deferred_rendering
fragment_packed_textures
fragment_separate_ao
fragment_alpha_cutoff
has_instance_color
enable_near_camera_fade
toneMappingOperator
postOpaqueRendereredInTransparent
needsColorGrading
has_cone_traced_shadow
has_analytical_lights
has_gamma_blending
has_not_any_lighting
Only use FunctionConstant index as override 
VFX/DataValue.swift
invalid type of FunctionConstant
_TtC3VFX28ParticleContinousSpawnSystem
_TtCV3VFX25ParticleSpawnOverDistance31ParticleSpawnOverDistanceSystem
_TtC3VFX27ParticleVariableSpawnSystem
_TtC3VFX24ParticleBurstSpawnSystem
_TtC3VFX32ParticlePeriodicBurstSpawnSystem
_TtC3VFX30ParticleSubSpawnAddStateSystem
restartState
addState
removeState
_TtC3VFX22ParticleSubSpawnSystem
updateState
_TtC3VFX32ParticleSubSpawnSystemPostUpdate
_TtC3VFX30ParticleSubSpawnSystemPostInit
Continous Spawn
lastFrameWorld/worldTransform missing on ParticleSpawnOverDistance
Spawn Over Distance
Variable Spawn
Burst Spawn
Periodic Burst Spawn
Sub Spawn Add State
Sub Spawn Birth
Sub Spawn Update/Die/Collision
Sub Spawn
_TtC3VFX26ParticleRibbonTrailsSystem
ribbonRendererQuery
[RIBBONTRAILS]      ribbon particles: 
[RIBBONTRAILS] }
[RIBBONTRAILS] ribbonTrails {
[RIBBONTRAILS]      source particles: 
[RIBBONTRAILS]      source particles: <no source emitter>
VFX/ChunksStorage.swift
Chunk should be available for allocation!
Too many chunks (
) for the empty class 
VFX/ClassComponentStorage.swift
 must be added first
_TtCV3VFX18ParticleInitScript6System
invalid ScriptLocation discriminator
ParticleInitScriptRunner
texturecube<half>
custom shader is missing a fragment function
VFX_USER_CODE_LINE
: Function vertex_main() doesn't output $vertex_out.crworld_position (mandatory in VisionOS) or $vertex_out.position (legacy).
: Function vertex_main() doesn't output $vertex_out.crworld_position which is mandatory on VisionOS.
call doesn't make sense on 
vertex out property '
material property '
vfx_custom_shader_%SCRIPT_ID%::vfx_fragment
vfx_custom_shader_%SCRIPT_ID%::vfx_vertex
#import <metal_stdlib>
using namespace metal;
// VFX_USER_CODE_STARTS_HERE
kernel void generate_texture(uint2 thread_id [[ thread_position_in_grid ]],
                             constant float3 &color [[  buffer(0) ]],
                             texture2d<half, access::write> out [[ texture(0) ]])
     out.write(half4(color.x, color.y, color.z, 1.0), thread_id);
Particle Update Script
Particle Initialization Script
Generated Trigger Script
Emitter Update Script
// Custom Shader
namespace {
Generated Graph Script
correspondingExternalIndex
_TtCO3VFX21GraphV1CodeGeneration9Resources
customTypes
customTypesPerType
userTemplateLibraries
conversionSnippets
compositionSnippets
decompositionSnippets
initialized
vfxGraphTemplatesDir
onUserTemplatesChanged
codeSourceSnippetRemapping
codeSourceSnippetRemappingWithValueTransfer
CodeGen.Resources: initUserTemplates error: 
CodeGen.Resources: initUserTemplates: Library '
' doesn't contain any valid templates and so will be ignored
CodeGeneration.Resources: invalid Composition snippet: 
CodeGeneration.Resources: invalid Composition snippet with more than one input paramter: 
CodeGeneration.Resources: invalid Composition snippet with more than one output paramter: 
CodeGeneration.Resources: .inc file 
 referencing missing library
 can't be loaded!?
_TtCV3VFX23ParticleOrientationInit6System
_TtCV3VFX23ParticleOrientationInit9GPUSystem
SetOrientation.CPU
particle_set_orientation
SetOrientation.GPU
_TtCV3VFX8Bindings5Value
Bindings setter - invalid binding named "
VFX/Bindings.swift
invalid type! trying to set a 
Bindings getter - invalid binding named "
_TtC3VFX19ResourceUsageSystem
pointCacheGeneratorQuery
emitterQuery
sdfGeneratorQuery
textureShaderAssetQuery
initScriptQuery
updateScriptQuery
allTexturesQuery
animatedTextureQuery
allEmitterQuery
allNonDirtyMaterialsQuery
meshParticleRendererQuery
preCreateDefaultMaterialDone
Component should be present since it's returned by the protocol enumerator
TextureLoadingOptions
VFX/EntityManager.swift
stale entity handle
##VFX-Default-Material##
couldn't lookup entity: 
ResourceUsage
VFX/ParticleFloat3Init.swift
SetTargetPosition.CPU
SetAngularFactor.CPU
SetLinearFactor.CPU
particle_set_float3_generic
SetTargetPosition.GPU
SetAngularFactor.GPU
SetLinearFactor.GPU
_TtC3VFX11QueryBuffer
_TtCV3VFX14EmitterRuntime7Storage
neighborSearchMap
_TtC3VFX21EmitterPrepareRuntime
subSpawnQuery
addRuntimeQuery
addOrRemoveInverseWorldQuery
updateRuntimeQuery
subSpawnStateQuery
removeOrphanedRuntimeQuery
_TtC3VFX13EmitterWarmup
eventQuery
_TtC3VFX24ParticleEmitterTransport
active Entity consistency issue:
VFX/ComponentCategory.swift
EmitterDescription.PhysicsSimulation
_TtC3VFX20ScriptCompilerSystem
gpuDevice
compileQueue
compileOperationQueue
pendingCompilationStatuses
cachedBuildResults
builderEmitterScript
builderGraphScript
builderSimpleScript
builderKernelScript
builderShaderScript
builderParticleInitScript
builderParticleUpdateScript
builderTriggerScript
isCompilationDisabledByUserDefault
ScriptCompilerSystem: no device, aborting
couldn't build script at load: 
couldn't build script at load: compilationDisabled
 is not a supported location at the moment
buildScript
couldn't load function: 
VFX/ScriptBuilderSystem.swift
no library to load from
no MTLDevice, can't compile GPU code
ScriptCompileAttempt<TriggerScript>
ScriptCompileAttempt<ParticleUpdateScript>
ScriptCompileAttempt<ParticleInitScript>
ScriptCompileAttempt<ShaderScript>
ScriptCompileAttempt<MetalFunctionScript>
ScriptCompileAttempt<SimpleScript>
ScriptCompileAttempt<GraphScript>
ScriptCompileAttempt<EmitterScript>
CompilationResult
disable-compilation
script wasn't bound to runtime: 
couldn't convert 
 to swift identifier
couldn't find function for script 
couldn't find metal library for script 
. Try setting VFXWorldLoaderOptionMetalLibraryURL
couldn't find metal function for script 
couldn't find compiled script for 
couldn't prepare function for script of type 
ParticleUpdateScript
ParticleInitScript
couldn't generate code: 
compilation is disabled by user default
compilation is in-flight
xcode-select is not pointing to a valid Xcode
compilation cancelled
_TtCV3VFX6Attach6System
_TtCV3VFX6Attach9GPUSystem
Local system are by definition fully attached
AttachSystem.CPU
AttachSystem.GPU
v8@?0
VFX.VFXEntityObject
_TtC3VFX15VFXEntityObject
@32@0:8q16@24
referencedEntityManager
localEntityManager
_isTombstoned
Cannot add an Entity that is already in a world
We are trying to move an entity object from one entityManager to another. this is not supported. we are leaking tombstoned entities
NSCopying
_TtC3VFX11PrivateHeap
_TtC3VFX10BufferPool
enableLogging
currentFrameBuffers
unusedBuffers
allocatedBuffer
frameAllocatedSize
currentAllocatingFrame
peakAllocationsRingBuffer
constantBufferAlignment
isActive
constantBuffers
allocateConstantBuffer 
label value 
 buffers (total: 
recycleBufferPools used:
Buffer too small 
Buffer too large 
VFX/BufferPool.swift
Failed allocating MTLBuffer of 
removeSmallestUnusedBuffer 
 buffers will be destroy.
allocateConstantBuffer failed copying particle_surface_material_constants
particle_surface_vert
particle_surface_frag
particle_surface_deferred_frag
oldRendererClassIndex
_TtCV3VFX26ParticleRibbonLengthUpdate6System
Missing material runtime
missing sorted order buffer
VFX/ParticleSystems_Render.swift
PrepareIndirectDraw
allocateConstantBuffer failed copying MTLDrawPrimitivesIndirectArguments
allocateConstantBuffer failed copying MTLDrawIndexedPrimitivesIndirectArguments
missing prevNext buffer
allocateConstantBuffer failed copying object_constants
unsupported here
ParticleRendererPrepare
ParticleRibbonSystem
should not reach encodedLength != bufferLength
This is an unsupported texture type
q16@0:8
_TtC3VFX14MaterialSystem
updateMaterialsQuery
meshRendererDependenciesQuery
quadRendererDependenciesQuery
custom_mesh_vert
custom_fragment_error
Invalid texture type provided at id 
VFX/TypeConstraint.swift
no reference to a generic in 
particle_point_vert
particle_point_frag
particle_point_deferred_frag
_TtCO3VFX21GraphV1CodeGeneration11ContextExit
ContextExit(uid: 
_paramsOnHold
_onHold
_mute
callback
_TtC3VFX11CancelTuple
isCancelled
tuple
_TtC3VFX10CancelList
_TtCV3VFX21ParticleColorOverLife6System
_TtCV3VFX21ParticleColorOverLife9GPUSystem
particle_color_over_life
ParticleColorOverLife.GPU
_TtC3VFX18SceneAssetRegistry
registry
urlCache
entityManager
_TtC3VFX23SceneAssetRegistryEntry
asset
_entityManager
_rootNode
loaded
idToEntity
entityToId
counter
sceneIdentifier
setParent: found circular dependency - ignoring
warning: backward compatibility not ensured with this file (multiple mesh per scene reference)
_TtC3VFX22GenericComponentSystem
updateBlock
Default
.renderTransparent
.prepareDrawCalls
_TtC3VFX13VFXViewLegacy
v28@0:8c16@?20
v20@0:8C16
d16@0:8
v24@0:8d16
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
delegateImpl
coreView
scene
T@"_TtC3VFX8VFXScene",N,&,Vscene
T@"_TtC3VFX9VFXEffect",N,&,Veffect
T@"_TtC3VFX13VFXCoreCamera",N,&,VpointOfView
TC,N
T@"NSColor",N,&
TQ,N
scaleFactor
Td,N
lowLatency
_TtCC3VFX13VFXViewLegacy15VFXViewDelagate
vfxView
v24@?0@"<MTLCommandBuffer>"8@"<MTLTexture>"16
_TtC3VFX21UpdateWorldAABBSystem
onlyLocal
updateWorldFromLocal
UpdateWorldAABB
_TtC3VFX28KernelScriptReflectionSystem
dirtyScript
dirtyKernelReflection
shaderAssetQuery
reflectionQuery
_TtC3VFX16ShaderFileSystem
dirtySharedFileQuery
vfx_draw_fullscreen_triangle_vertex
failed to make a compute pipeline state for function 
TextureResourceQueue
c16@0:8
used
argument
MTLTextureBinding
textureDataType
particle_obb_collider
particle_aabb_collider
particle_box_vert
particle_box_frag
particle_box_deferred_frag
_TtC3VFX14RandomSeedNode
_TtC3VFX10RandomNode
_TtC3VFX15RandomTypedNode
_TtC3VFX12Random01Node
_TtC3VFX20RandomUnitVectorNode
_TtC3VFX17RandomInRangeNode
_TtC3VFX30RandomPositionInsideSphereNode
_TtC3VFX28RandomPositionInsideCubeNode
_TtC3VFX20PerlinNoiseFloatNode
_TtC3VFX21PerlinNoiseFloat2Node
_TtC3VFX21PerlinNoiseFloat3Node
_TtC3VFX21PerlinNoiseFloat4Node
vfx_perlin_noise(%0, %1, %2, %3)
PerlinNoiseFloat4
vfx_perlin_noise(%0, %1, %2)
PerlinNoiseFloat3
vfx_perlin_noise(%0, %1)
PerlinNoiseFloat2
vfx_perlin_noise(%0)
PerlinNoiseFloat
(&%0) - vfx_float3_half_one())
2.0f * %size * (
VFX/Nodes+Random.swift
vfx_random01_float4
vfx_random01_float3
vfx_random01_float2
RandomPositionInsideCube
vfx_robust_normalize(
(&%0) - vfx_float3_half_one()) * vfx_sqrt(
(&%0) * %radius)
RandomPositionInsideSphere
%range.lower_bound + float(vfx_random01(&%0) * float(%range.upper_bound - %range.lower_bound))
vfx_float4_half_one
vfx_float3_half_one
vfx_float2_half_one
VFX.RandomTypedNode
VFX.RandomSeedNode
No seed available
particle_sphere_collider
_TtC3VFX24AssetManagerPathResolver
_TtC3VFX12AssetManager
pathResolver
effectIDToAssetsDirectory
authoringFileManager
_TtC3VFX16AssetFileManager
temporaryDirectory
persistedDirectory
isPerformingChangesLevel
referencesToWrite
allReferencesWithTemporaryCopy
Couldn't register effect from existing asset manager
AssetManagerPathResolver - failed to resolve url for 
VFX.AssetManagerPathResolver
com.apple.vfx.document-assets
_TtC3VFX6Bitset
capacity
wordcount
fillBackwardMode
_TtC3VFX8DrawCall
primitiveType
indexBuffer
indexType
indexCount
indexOffset
simplifiedIndexBuffer
vertexOffset
instanceCount
instanceOffset
stencilReferenceValueFront
stencilReferenceValueBack
winding
cullMode
clipMode
inverseWinding
tessellationFactorBuffer
meshThreadsPerGrid
threadsPerObjectThreadgroup
threadsPerMeshThreadgroup
needPBR
isAdditive
renderStatesPerVariant
arguments
indirectBuffer
_TtC3VFX21DrawCallDisposeSystem
destroyDrawCalls
Can't resolve sampler at scope 
VFX/DrawCall.swift
Missing texture 
VFX/TexturePool.swift
Unable to allocate render target
Render pass format not ready, layer: "
v36@?0r^{?=[4]}8i1620
allocateConstantBuffer failed copying view_constants
Missing renderer
DrawCall Dispose
_TtCV3VFX12EmitterShape9CPUSystem
_TtCV3VFX12EmitterShape9GPUSystem
EmitterShape.CPU
EmitterShape.GPU
particle_cylinder_collider
vfx_make_int_range
vfx_make_float_range
vfx_script_array<
not available in metal
cannot represent optionals in code
 needs to be resolved before generating code
We don't mean to generate code with doubles
lighting_parameters
resourceReference
textureDescriptor
colorRampTexture
_TtC3VFX38ParticleFlockingAlignOrientationSystem
_TtC3VFX42ParticleFlockingAlignVelocityOnPlaneSystem
_TtC3VFX37ParticleFlockingConstrainToAreaSystem
_TtC3VFX38ParticleFlockingConstrainToPlaneSystem
_TtC3VFX36ParticleFlockingFlyTowardsAreaSystem
_TtC3VFX26ParticleFlockingSolverData
grid
_TtC3VFX28ParticleFlockingSolverSystem
_TtC3VFX34ParticleFlockingSpeedControlSystem
[FLOCKING] the solver grid is in an invalid state.
[FLOCKING] solver grid {
[FLOCKING]      cell count: 
[FLOCKING]  particle count: 
[FLOCKING]     grid extent: 
[FLOCKING]       cell size: 
[FLOCKING] average density: 
 particles per cell
particles with NaN position: 
_TtCV3VFX24ParticleTextureFrameInit6System
_TtCV3VFX24ParticleTextureFrameInit9GPUSystem
SetTextureFrame.CPU
particle_set_texture_frame
SetTextureFrame.GPU
_TtC3VFX7ECSNode
_TtC3VFX8TimeNode
_TtC3VFX13DeltaTimeNode
_TtC3VFX16IsFirstFrameNode
_TtC3VFX13_ECSValueNode
entityKeyPath
_TtC3VFX15SetECSValueNode
_TtC3VFX24InspectorSetECSValueNode
_TtC3VFX15GetECSValueNode
_TtC3VFX18_ParticleValueNode
_TtC3VFX20SetParticleValueNode
_TtC3VFX20GetParticleValueNode
_TtC3VFX7_OnNode
_TtC3VFX12OnUpdateNode
_TtC3VFX16OnFirstFrameNode
_TtC3VFX19OnParticleStageNode
stage
_TtC3VFX13OnTriggerNode
eventType
_TtC3VFX18OnMouseTriggerNode
_TtC3VFX16OnKeyTriggerNode
_TtC3VFX17OnTickTriggerNode
_TtC3VFX23LogDebugPassthroughNode
message
_TtC3VFX12LogDebugNode
_TtC3VFX14ECSStorageNode
_TtC3VFX16CurveTextureNode
_TtC3VFX20ColorRampTextureNode
colorRamp
_TtC3VFX15EntityAssetNode
_TtC3VFX23ImplicitEntityAssetNode
_TtC3VFX15ImportErrorNode
_TtC3VFX9StateNode
stateRef
_TtC3VFX17ImplicitStateNode
_TtC3VFX12SetStateNode
_TtC3VFX8TickNode
vfx_script_get_state_by_id(%script_context, "
vfx_script_set_current_state(%script_context, %1, %2);
vfx_script_tick(%script_context, %1, %2);
VFX.ImportErrorNode
ImplicitEntityAsset
VFX.EntityAssetNode
ColorRampTexture
VFX/Nodes+ECS.swift
auto %temp0 = %1;
vfx_script_graph_log("
auto %temp0 = %0;
vfx_script_graph_log("
, &%temp0);
auto %r0 = %0;
VFX.OnTriggerNode
numbers of outputs and names mismatch (
VFX.OnParticleStageNode
OnParticleUpdate
VFX._ParticleValueNode
VFX._ECSValueNode
 cannot be represented with AnyType
%script_context.isFirstFrame
vfx_script_clock_is_first_frame(%script_context)
%script_context.dt
vfx_script_clock_delta_time(%script_context)
%script_context.time
(float)vfx_script_clock_time(%script_context)
code gen not implemented for: 
_TtC3VFX19PrepareLightsSystem
directionalUnshadowedQuery
directionalQuery
pointUnshadowedQuery
pointQuery
spotUnshadowedQuery
spotQuery
ambientQuery
allocateConstantBuffer failed copying REVFXIBLConstants_s
allocateConstantBuffer failed copying REVFXLightConstantBuffer_s
PrepareLights
emitsDoubleSided
_TtCV3VFX13ParticleNoise9GPUSystem
_TtC3VFX19ParticleNoiseSystem
velQuery
posVelQuery
VFX/ParticleNoise.swift
failed compiling noise kernel
Failed creating texture!
computeNoiseTexture
ShaderTexture : texture type 
gen3D_curl_noise
gen2D_curl_noise
gen1D_curl_noise
particle_noise_3d
particle_noise_2d
particle_noise_1d
particle_white_noise
ParticleNoise.GPU
_TtC3VFX18EntityManagerActor
_TtC3VFX13EntityManager
isInAuthoringMode
componentRegistry
entityFamilies
allEntityClasses
chunkTable
chunkStorageLock
allComponentDataChunks
recycledChunksData
recycledChunksDataHistory
workerComponentStorage
sceneComponentStorage
groupsCount
copyQueue
copyGroup
transactionDepth
hasRunloopTransaction
didBeginTransactionAtLastFrame
signpostID
counters
_entries
entityCapacity
generationSalt
firstFreeIndex
scheduler
queryManager
commandQueues
updateQueue
nextFrameBlocks
nextFrameBlocksLock
runtimeThread
_invalidated
canUseImGUI
imGUIEnabled
syncLock
asyncQueue
backgroundingSignalLock
applicationInBackground
sceneInBackground
lockChunksOnQueryForEach
shouldNotifyEntityEvent
stateDidChangeFn
mainGraphScriptGroup
logger
renderer
replicationStream
scriptingConfig
clock
updateHandlerIndex
activeStatesPerEffects
currentState
isInPrepare
peerPid
Invalid Entity: 
== ENTITY INFO ==
Entity class count: 
Used chunk space: 
Empty chunk count: 
Trying to add a reference an an invalid Entity 
ChunksStorage
lock EntityManager
QueryManagerLock
shouldScriptsInModel
VFX/VFXScene+VFX2.swift
setupVFX2RendererIfNeeded must be called before setupVFX2RenderOutput
sphereIntersectionFunction
default component registry was not installed. VFXInitialize() must be called beforehand to make sure it's setup.
VFX4
c52@0:8@16c24@28@36^@44
VFX5
v24@0:8^v16
resourceManager
T@"VFXMTLResourceManager",N,R
VFX6
v40@0:8d16d24q32
v32@0:8@?16Q24
v20@0:8f16
c40@0:8{CGSize=dd}16d32
c40@0:8@16@24@32
c32@0:8@16@24
v48@0:8@16Q24Q32q40
opaqueEntityManager
T^v,N,R
deltaTime
speedFactor
time
VFX7
v88@0:8{?=[4]}16q80
VFX8
v28@0:8q16c24
VFX9
v32@0:8^v16q24
68@0:81632f48f52f56f60I64
q24@0:8q16
v32@0:8q16q24
remapTable
VFX10
sourceReplicationDelegate
T@,N,W
destinationReplicationDelegate
^{CGImage=}16@0:8
v24@0:8^{CGImage=}16
v80@0:8{?=[4]}16
{?=}16@0:8
v32@0:8{?=}16
clientTexture
T@"<MTLTexture>",N,&
clientCGImage
T^{CGImage=},N,&
intersectionFunctions
particleHeaderBuffer
particleHeaderBufferOffset
particleDataBuffer
particleDataBufferOffset
opacity
T{?=},N
isEnabled
textureAbsolutePath
Division results in an overflow
Division by zero
stored unpacked 
type hashValue 
name type 
offset element 
GraphScriptingConfig
PropagateDirtiness
ScriptStateRestoration<TriggerScript>
ScriptRuntime<TriggerScript>
ScriptStateRestoration<ParticleUpdateScript>
ScriptRuntime<ParticleUpdateScript>
ScriptStateRestoration<ParticleInitScript>
ScriptRuntime<ParticleInitScript>
ScriptStateRestoration<ShaderScript>
ScriptRuntime<ShaderScript>
ScriptStateRestoration<MetalFunctionScript>
ScriptRuntime<MetalFunctionScript>
ScriptStateRestoration<SimpleScript>
ScriptRuntime<SimpleScript>
ScriptStateRestoration<GraphScript>
ScriptRuntime<GraphScript>
ScriptStateRestoration<EmitterScript>
ScriptRuntime<EmitterScript>
MetalScriptReflection
center population 
description value 
PerspectiveCamera
OrthographicCamera
MeshReferenceAsset
index weight 
index nearestZ 
SkinnedMeshBinding
name arg 
NodeVisibilityController
NodeTransformController
v24@?0@"VFXAssetNode"8*16
InverseWorldTransform
TextureGPURuntime
i20@0:8I16
{?=CCCC}16@0:8
pixelFormat
_TtCO3VFX21GraphV1CodeGeneration10SubContext
    inParamNamesAndTypes: 
    outParamNamesAndTypes: 
SubContext(template:
_TtC3VFX9LODSystem
cameraComponents
setupLODState
rootsWithLOD
childrenWithLOD
_TtC3VFX16GenericLODSystem
pointOfCullingQuery
lodQuery
VFX/RenderGraphPasses.swift
Missing compute kernel
Custom compute
Unexpected renderTarget data access for compute kernel.
Unable to get compute pass pipeline for 
Unable to retrieve texture for 
Compute dispatch not implemented
Unable to prepare compute pass 
Missing fragment function
Custom frag
Unable to get render pass pipeline for 
_TtCO3VFX21GraphV1CodeGeneration7Context
_resources
subContextMap
templates
bakedTemplates
decodingErrors
onUserTemplatesChangedUUID
switchCaseValuePrefix
templateRemapping
_TtCCO3VFX21GraphV1CodeGeneration7Context14GenerationData
settings
domain
libFunctionsToInclude
templatesAlreadyDefined
errorInfos
allSwitchCases
hasTimeDependentSnippet
addAllInputsAndOutputs
cleanupCodeArr
baseObjectUidsAlreadyDeclaredDuringCodeGeneration
No valid conversion snippet found to convert 
SwitchCaseValue:
supportedDomains
not supported in 
Ignoring assignment from 
 because of Unknown baseType for inParameter
 because of Unknown baseType for outParameter
CodeGen.Context.clone() error found when calling asJsonString()
Context:
    contextEntries: 
    contextExits: 
    subContexts: 
    variables: 
    variableRefs: 
    arraySequences: 
    templates: 
    snippets: 
    customCodeSnippets: 
    typedArraySnippets: 
    staticSwitchSnippetMap: 
    userObjects: 
    assignments: 
): unable to connect 
hasMissingAssignment
): unable to connect [
Graph Editor: missing support for decoding error: 
CodeGen.Context.init.decodeSnippets: type mismatch (
Graph Editor: impossible/invalid assignment to ContextExit baseType: 
 parameterName: 
Graph Editor: impossible/invalid assignment to ContextEntry baseType: 
Can't find template named '
 also not found in bakedTemplates: 
useBakedTemplate
CodeGen.Context: function 
 couldn't be found!
Missing generateCode for 
CodeGen.Context.generateCode: subContext named '
' uses a template that can't be found.
 vfx_script_debug_record_scalar(scriptContext, "
 vfx_script_debug_record_array(scriptContext, "
CodeGen.Context.generateAllAssignmentsCode: no default value found for parameter type '
default:switchCaseOptions
:switchCaseOptions
CodeGen.Context.rename: impossible to rename 
 (invalid contextExitMap)
 (invalid contextEntryMap)
CodeGen.Context.addSubContext: couldn't find template '
useBuiltinTemplate
category libraryName templateSetName signature 
CodeGen.Context.findTemplate (via UID): invalid template description: 
CodeGen.Context.findTemplate: invalid template description: 
Code.Resources.findTemplate: invalid 'temp' template category
CodeGen.Context.findTemplate: unable to find template used by subContex: 
_TtCO3VFX21GraphV1CodeGeneration11MetadataSet
CodeGeneration.Metadata.defaultValueAsMetadata: no default value set for type: 
TextureSampler1D
RandomNumberGenerator
CodeGen.Resources: getCustomType unknown customType: 
CodeGeneration.Metadata.init: unsupported type
CodeGeneration.Metadata.init: unsupported type 
CodeGeneration.encode: unsupported type 
Metadata.operator ==: missing support for type: 
usedByUnsupportedDomain
CodeGeneration.anyType: unsupported type 
_TtC3VFX12CameraSystem
orthoNoProjQuery
perspNoProjQuery
orthoQuery
perspQuery
_TtC3VFX21PreUpdateCameraSystem
_TtC3VFX21PreRenderCameraSystem
_TtC3VFX19PrepareUpdateSystem
_TtC3VFX19PrepareRenderSystem
povQuery
projQuery
setGlobalConstants: Missing Constant Buffer
setViewDependantAndGlobalConstants: Missing Global Constant Buffer
setViewDependantAndGlobalConstants: Missing View Constant Buffer
allocateConstantBuffer failed copying frame_constants
pass_constants_encoder
PrepareUpdateSystem failed: missing pass_constants_encoder function
global_constants_encoder
PrepareUpdateSystem failed: missing global_constants_encoder function
PrepareUpdate
PrepareRender
PreRenderCamera
PreUpdateCamera
No RenderOutput presents. Cannot deduce viewport size
VFX/CameraSystem.swift
VFX/EntityManager+ECSProperties.swift
keyPath of wrong root type: 
_TtC3VFX22VertexLayoutDescriptor
_TtC3VFX14AttributeTable
_TtC3VFX4Mesh
meshIdentifier
_TtC3VFX14MeshBinaryData
meshSerializationRegistry
missing shared MTLBuffer
missing mesh binary data
VertexLayout Attributes:
unable to load mesh binary data at 
unable to load mesh: 
unable to load mesh binary data (empty) at 
unsupported format for scale: 
Cannot access private memory
unsupported index type
Decoding error: 
MTLFunction
_TtCO3VFX21GraphV1CodeGeneration12ContextEntry
ContextEntry(uid: 
VFX/ComponentProperty.swift
All serializable component types should have a meta type
unknown property 
deleted property 
invalid property id: 
All serializable component types should have a meta type 
_TtC3VFX18SmoothMotionSystem
patchQuery
_TtC3VFX23ReplicationStreamSystem
_TtC3VFX17ReplicationStream
stream
remapper
destination
srcDelegate
dstDelegate
replicateByDefault
replicationEnabled
cfxWorld
_TtC3VFX23BidirectionalRemapTable
mappingTablesLock
entityMapTable
reversedEntityMapTable
_TtC3VFX15DefaultRemapper
destinationEntityManager
isReversed
ModificationStream
VFX.DefaultRemapper
VFX/ReplicationStream.swift
v16@?0d8
_TtC3VFX11EntityClass
family
storageLayout
classComponentstorage
classHash
notifySystemsOnEntityEvent
isAnonymous
isGraveyard
hasUnstableOrdering
isMonoChunk
isTrackingDirty
hasDirtyPropagation
Detected entity with both Anonymous and dirty tracked component which is incompatible: 
VFX/EntityClass.swift
value components must be pod!
 is not compatible with components of same unpacked type 
EntityClass Count
CPU time
Created Entities
Destroyed Entities
Chunk Total Size
Component Bytes Copied
Component Bytes Moved
Component Bytes Destroyed
Component Bytes Init With Default
Component Bytes Init With Source
Component Bytes Swapped
ParticleDataUploadedToGPU
Draw bucket size
_TtCV3VFX24ParticleLocalBoxCollider6System
VFX.VFXREREnderer
VFX.VFXREScene
commandQueue
v24@0:8q16
i16@0:8
v20@0:8i16
{?=[2]}16@0:8
@48@0:8@16@24@32^@40
@40@0:8@16@24@32
@24@0:8^@16
v48@0:8@16@24q32@?40
v32@0:8d16@24
v64@0:8163248
v128@0:8163248648096112
q112@0:81632{?=[4]}48
q96@0:816{?=[4]}32
v120@0:8q162440{?=[4]}56
v104@0:8q1624{?=[4]}40
rootEntity
cameraEntity
cancellables
isPrepared
uuid
worldFromScene
sceneFromWorld
sceneScale
reloadBlock
remappingTable
T@,N,&,VtransientDrawCall
Tq,N,Vuuid
Tf,N,VsceneScale
opaqueECS
Ti,N
TI,N
drawCallCount
worldBoundingBox
T{?=[2]},N,R
shouldUseDrawCallHandler
needsCollisionPlanes
[VFX] Error: can't find binding 
[VFX] Error: binding 
 has an unknown type
Unable to assign texture ownership to pid 
_TtCV3VFX25ParticleAngleVelocityInit6System
_TtCV3VFX25ParticleAngleVelocityInit9GPUSystem
SetAngleVelocity.CPU
particle_set_angle_velocity
SetAngleVelocity.GPU
_TtC3VFX15ColorRampSystem
allColorRampsQuery
unregisteredColorRampsQuery
allColorRampsWithRuntimeQuery
allModifiedColorRampsWithRuntimeQuery
_TtC3VFX14ColorRampCache
ColorRampsUpload
particle_line_vert
particle_line_frag
particle_line_deferred_frag
_TtC3VFX11VFXCoreView
v32@0:8{CGSize=dd}16
delegate
renderOutput
sampleCount
stereoMode
effectID
sizeDirty
drawableSize
resizingMode
Tc,N
acceptsFirstResponder
VFX.VFXCoreView
init(frame:)
Explicit render
_TtC3VFX20EmitterCullingSystem
VFX/ParticleSystems.swift
unsupported GPU dispatch on stage 
_TtC3VFX28ParticleAngleEvolutionSystem
_TtC3VFX10EasingNode
_TtC3VFX15EasingFloatNode
_TtC3VFX15CubicEaseInNode
_TtC3VFX16CubicEaseOutNode
_TtC3VFX18CubicEaseInOutNode
_TtC3VFX19QuadraticEaseInNode
_TtC3VFX20QuadraticEaseOutNode
_TtC3VFX22QuadraticEaseInOutNode
_TtC3VFX17QuarticEaseInNode
_TtC3VFX18QuarticEaseOutNode
_TtC3VFX20QuarticEaseInOutNode
_TtC3VFX17QuinticEaseInNode
_TtC3VFX18QuinticEaseOutNode
_TtC3VFX20QuinticEaseInOutNode
_TtC3VFX13SinEaseInNode
_TtC3VFX14SinEaseOutNode
_TtC3VFX16SinEaseInOutNode
_TtC3VFX19ExponentialEaseNode
_TtC3VFX16PhysicalEaseNode
_TtC3VFX13PowerEaseNode
_TtC3VFX14BounceEaseNode
vfx_bounceEase(%t, %duration, %frequency, %decay)
vfx_pow(%t, %power)
vfx_physicalEase(%t, %anticipate, %midPoint, %bounces)
(1.0 - exp(%exponent * %t)) / (1.0 - exp(%exponent))
(1.0f - exp(%exponent * %t)) / (1.0f - exp(%exponent))
-(vfx_cos(M_PI_F * %0) - 1) / 2
-(vfx_cos(M_PI * %0) - 1.0f) / 2.0f
vfx_sin((%0 * M_PI_F) / 2)
vfx_sin((%0 * M_PI) / 2.0f)
1 - vfx_cos((%0 * M_PI_F) / 2)
1.0f - vfx_cos((%0 * M_PI) / 2.0f)
vfx_quinticEaseInOut(%0)
QuinticEaseInOut
vfx_quinticEaseOut(%0)
vfx_quinticEaseIn(%0)
vfx_quarticEaseInOut(%0)
QuarticEaseInOut
vfx_quarticEaseOut(%0)
vfx_quarticEaseIn(%0)
vfx_quadraticEaseInOut(%0)
QuadraticEaseInOut
vfx_quadraticEaseOut(%0)
QuadraticEaseOut
vfx_quadraticEaseIn(%0)
vfx_cubicEaseInOut(%0)
vfx_cubicEaseOut(%0)
vfx_cubicEaseIn(%0)
VFX/Nodes+Easing.swift
_TtC3VFX22ParticleCopyDataSystem
particle_volumetric_frag
_TtCV3VFX17ParticleAngleInit6System
_TtCV3VFX17ParticleAngleInit9GPUSystem
SetAngle.CPU
particle_set_angle
SetAngle.GPU
VFX/Mesh+Convert.swift
Unsupported format 
_TtCV3VFX23ParticleOpacityOverLife6System
colorAgeQuery
_TtCV3VFX23ParticleOpacityOverLife9GPUSystem
OpacityOverLife
particle_opacity_over_life
ParticleOpacityOverLife.GPU
_TtC3VFX12StringDumper
indent
_TtC3VFX13RuntimeThread
wakeupEvent
didSwapQueueEvent
runtimeThreadId
runtimeUpdateHandler
__startupShutdownEvent
ownsLock
lock
clientEventQueue
serverEventQueue
qlock
requestStop
threadLogger
threadid
_isSuspended
RuntimeThread wakeup event
RuntimeThread did swap queue
RuntimeThread startup/shutdown event
RuntimeThread work queue lock
Runtime thread creation failed: unknown error 
Runtime thread creation failed: the attributes value specified is invalid
Runtime thread creation failed: the caller does not have appropriate permission to set the required scheduling parameters or scheduling policy
Runtime thread creation failed: the system lacked the necessary resources to create another thread, or the system imposed limit on the total number of threads in a process
com.apple.vfx.runtime-thread
VFX/Scripting+Mapping.swift
these parameters are not valid parameters for a trampoline
couldn't lookup 
couldn't find TextureCPURuntime on 
couldn't lookup emitter: 
Space not supported for 
not implemented on cpu scripts
VFX/ComponentPropertyRewriter.swift
missing @_specialize
these parameters are not valid for the GPU
missing gpu runtime for texture compute
mismatching texture type (expected:
defaultWhiteTexture2D
VFXNode references is not supported on GPU
VFXNode access on GPU is not implemented
bufferDataSize
Tc,N,R
_TtC3VFX18StartCaptureSystem
_TtC3VFX17StopCaptureSystem
_TtC3VFX17RenderImGUISystem
Cannot start capture: 
startCapture
stopCapture
RenderImGUI
RenderOutput
/tmp/vfxTestResults/vfx_snapshot.gputrace
prepare
Cannot create prepare dummy texture 
PrepareCB
Cannot create prepare dummy depth texture 
MM-dd-yyyy_HH-mm
Performance trace disabled
Chunk size (all): 
Used chunk space (all): 
Empty chunks (all): 
Texture size (all): 
_TtCV3VFX25ParticleColorOverVelocity6System
color time 
_TtC3VFX14ClampBoxSystem
_TtC3VFX20GlobalClampBoxSystem
worldDimension
Box Clamp
Global Box Clamp
_TtC3VFX9LogicNode
_TtC3VFX10SelectNode
_TtC3VFX21UnaryBoolOperatorNode
_TtC3VFX7NotNode
_TtC3VFX9IsOddNode
_TtC3VFX10IsEvenNode
_TtC3VFX23BinaryLogicOperatorNode
_TtC3VFX6OrNode
_TtC3VFX7AndNode
_TtC3VFX8NandNode
_TtC3VFX7NorNode
_TtC3VFX13IsGreaterNode
_TtC3VFX20IsGreaterOrEqualNode
_TtC3VFX12IsLesserNode
_TtC3VFX19IsLesserOrEqualNode
_TtC3VFX11IsEqualNode
_TtC3VFX14IsNotEqualNode
IsGreaterOrEqual
VFX/Nodes+Logic.swift
_TtC3VFX24PrimitiveGeneratorSystem
primitiveQuery
Primitive Generator
 does not have any child
_TtC3VFX17kClusteringSystem
kClustering
irradiance radiance 
Missing Lighting Buffer
Missing IBLConstants Buffer
DefaultLinearDepthTex
MTLAllocation
NSObject
unexpected priority: 
_TtC3VFX12QueryManager
queryInfoByHandle
matchingQueriesByEntityClass
_TtC3VFX13RunloopThread
thread
runloop
_TtCC3VFX13RunloopThreadP33_C5453D25073BE51EF98804DB40F9E2866Thread
runloopSource
currentRunloop
startedCallback
v24@?0^{__CFRunLoopObserver=}8Q16
_TtCV3VFX29ParticleTextureFrameEvolution9GPUSystem
_TtC3VFX35ParticleTextureFrameEvolutionSystem
texQuery
texAgeQuery
particle_textureframe_evolution
ParticleTextureFrameEvolution.GPU
value index 
needsLinearDepth,
needsDepthBuffer,
needsNormalBuffer,
_TtC3VFX13GlobalsSystem
specMaxEssAvgTable
envProbeCubeArray
envProbeDiffuseArray
envProbeTextureArray
virtualProbeTextures
virtualProbeConstants
allocateConstantBuffer failed copying external_entity_constants
texturePrefilteredDiffuse
DefaultBlackCubeTexture
texturePrefilteredSpecular
 is not a buffer
 is not a structure
Size mismatch in view_constants 
view_from_crworld
proj_from_crworld
inverseViewProjectionMatrix
crInverseViewProjectionMatrix
crws_from_viewport
worldReferencePosition
renderTargetSize
useVertexAmplification
linearizationFactors
renderTargetDepthStencilFormatSampleCount
vrrMapPhysicalSizeArray
viewport_percents
vrrMapScreenSize
 in global_constants
 should be a texture in global_constants
 offset mismatch 
 should be a buffer pointer in global_constants
allocateConstantBuffer failed copying global_constants
crWorldToViewArray
crWorldToProjArray
crwsCameraPositionArray
viewportPercentsArray
crwsReferencePosition
clippingIndexSlice
btTextureReadIndex
portalCrossingPlane
environmentLightingWeight
allocateConstantBuffer failed copying external_scene_buffers
allocateConstantBuffer failed copying external_scene_constants
external_scene_buffers_encoder
PrepareUpdateSystem failed: missing external_scene_buffers_encoder function
external_scene_constants_encoder
PrepareUpdateSystem failed: missing external_scene_constants_encoder function
external_entity_constants_encoder
PrepareUpdateSystem failed: missing external_entity_constants_encoder function
_TtC3VFX8MathNode
_TtC3VFX22ArithmeticOperatorNode
_TtC3VFX28ArithmeticBinaryOperatorNode
_TtC3VFX7AddNode
_TtC3VFX7SubNode
_TtC3VFX7MulNode
_TtC3VFX7DivNode
_TtC3VFX13RemainderNode
_TtC3VFX12QuotientNode
_TtC3VFX8FModNode
_TtC3VFX7MinNode
_TtC3VFX7MaxNode
_TtC3VFX7PowNode
_TtC3VFX9ATan2Node
_TtC3VFX8StepNode
_TtC3VFX12DistanceNode
_TtC3VFX19DistanceSquaredNode
_TtC3VFX17IsAlmostEqualNode
_TtC3VFX16CrossProductNode
_TtC3VFX14DotProductNode
_TtC3VFX17LengthSquaredNode
_TtC3VFX29ArithmeticTernaryOperatorNode
_TtC3VFX8Min3Node
_TtC3VFX8Max3Node
_TtC3VFX14SmoothStepNode
_TtC3VFX10MulAddNode
_TtC3VFX9ClampNode
_TtC3VFX27ArithmeticUnaryOperatorNode
_TtC3VFX13ToRadiansNode
_TtC3VFX13ToDegreesNode
_TtC3VFX8SqrtNode
_TtC3VFX9FractNode
_TtC3VFX12OneMinusNode
_TtC3VFX8Pow2Node
_TtC3VFX8Pow3Node
_TtC3VFX9RoundNode
_TtC3VFX8SignNode
_TtC3VFX7AbsNode
_TtC3VFX9FloorNode
_TtC3VFX7LogNode
_TtC3VFX7ExpNode
_TtC3VFX8Exp2Node
_TtC3VFX9Exp10Node
_TtC3VFX7CosNode
_TtC3VFX7SinNode
_TtC3VFX8ASinNode
_TtC3VFX8ACosNode
_TtC3VFX8CeilNode
_TtC3VFX7TanNode
_TtC3VFX8ATanNode
_TtC3VFX10LengthNode
_TtC3VFX16IsAlmostZeroNode
_TtC3VFX12SaturateNode
_TtC3VFX18SignedSaturateNode
_TtC3VFX14NormalizedNode
_TtC3VFX15QNormalizedNode
_TtC3VFX13ConjugateNode
_TtC3VFX7QLnNode
_TtC3VFX8QExpNode
_TtC3VFX15EulerAnglesNode
_TtC3VFX13AxisAngleNode
_TtC3VFX8AxisNode
_TtC3VFX10QAngleNode
_TtC3VFX14NormalAxisNode
_TtC3VFX13ReduceSumNode
_TtC3VFX13ReduceMulNode
_TtC3VFX20OrthonormalBasisNode
_TtC3VFX7MixNode
_TtC3VFX14QTransformNode
_TtC3VFX11QLengthNode
_TtC3VFX11InverseNode
_TtC3VFX12QInverseNode
_TtC3VFX13TransposeNode
_TtC3VFX19TransformNormalNode
_TtC3VFX22TransformPosition3Node
_TtC3VFX22TransformPosition4Node
_TtC3VFX13TransformNode
_TtC3VFX20TranslateMatrix3Node
_TtC3VFX20TranslateMatrix4Node
_TtC3VFX16ScaleMatrix3Node
_TtC3VFX16ScaleMatrix4Node
_TtC3VFX19ProjectPositionNode
_TtC3VFX23TransformDirection3Node
_TtC3VFX23TransformDirection4Node
_TtC3VFX7TRSNode
_TtC3VFX19GetTranslation3Node
_TtC3VFX19GetTranslation4Node
_TtC3VFX15GetRotationNode
_TtC3VFX12RotationNode
_TtC3VFX13GetScale3Node
_TtC3VFX13GetScale4Node
_TtC3VFX16RotateVectorNode
_TtC3VFX8QPowNode
_TtC3VFX10LookAtNode
_TtC3VFX9SlerpNode
_TtC3VFX16SlerpLongestNode
_TtC3VFX9SquadNode
_TtC3VFX10BezierNode
_TtC3VFX19RotationBetweenNode
_TtC3VFX23RotationBetweenFastNode
_TtC3VFX14IsIdentityNode
_TtC3VFX9AngleNode
_TtC3VFX11Remap01Node
_TtC3VFX9RemapNode
_TtC3VFX15IsInClosedRange
(%2 >= %0) && (%2 <= %1)
InRangeInclusive
vfx_mix(vfx_remap_01(%4, %0, %1), %2, %3)
vfx_remap_01(%2, %0, %1)
vfx_angle(%0, %1)
vfx_quat_is_identity(%0)
vfx_quat_rotation_between_fast_(%0, %1)
RotationBetweenFast
vfx_quat_rotation_between
vfx_quat_bezier(%0, %1, %2, %3, %4)
vfx_quat_squad(%0, %1, %2, %3, %4)
vfx_quat_slerp_longest(%0, %1, %2)
vfx_quat_slerp(%0, %1, %2)
vfx_quat_look_at_(%0, %1)
vfx_quat_pow(%0, %1)
vfx_quat_rotate_vector(%0, %1)
vfx_get_scale(%0)
vfx_get_scale_2D(%0)
vfx_quat_(vfx_get_rotation(%0))
vfx_get_rotation(%0)
vfx_get_translation(%0)
vfx_get_translation_2D(%0)
auto %r0 = vfx_get_translation(%0);
auto %r1 = vfx_quat_(vfx_get_rotation(%0));
auto %r2 = vfx_get_scale(%0);
TransformDirection
vfx_transform_direction(%0, %1)
vfx_project_position(%0, %1)
vfx_scale(%0, %1)
vfx_translate(%0, %1)
vfx_transform(%0, %1)
vfx_transform_position(%0, %1)
TransformPosition
vfx_transform_normal(%0, %1)
vfx_transpose(%0)
vfx_quat_inverse(%0)
vfx_quat_length_(%0)
vfx_mix(%0, %1, %2)
simd_float3 %temp0 = vfx_float3_zero();
simd_float3 %temp1 = vfx_float3_zero();
vfx_orthonormal_basis(%0, &%temp0, &%temp1);
simd_float3 %r0 = %temp0;
simd_float3 %r1 = %temp1;
OrthonormalBasis
vfx_reduce_mul(%0)
vfx_reduce_add(%0)
vfx_quat_to_matrix3x3(%0).columns[2]
vfx_quat_angle(%0)
vfx_quat_axis(%0)
vfx_quat_to_axisangle_(%0)
vfx_quat_to_euler(%0)
vfx_quat_conjugate(%0)
vfx_quat_normalize(%0)
vfx_robust_normalize(%0)
vfx_saturate(%0)
vfx_is_almost_zero(%0)
(%0 / VFX_PI) * 180.0f
(%0 * VFX_PI) / 180.0f
vfx_clamp(%0, %1, %2)
vfx_muladd(%0, %1, %2)
vfx_smoothstep(%1, %2, %0)
vfx_max(%0, vfx_max(%1, %2))
max3(%0, %1, %2)
vfx_min(%0, vfx_min(%1, %2))
min3(%0, %1, %2)
simd_dot(%0, %0)
simd_dot(%0, %1)
simd_cross(%0, %1)
vfx_is_almost_equal(%0, %1)
vfx_distance_squared(%0, %1)
vfx_distance(%0, %1)
vfx_step(%1, %0)
vfx_atan2(%0, %1)
__tg_fmod(%0, %1)
, __tg_fmod(%0, %1), 
%1 == 0 ? 0 : (%0 / %1)
__metal_remainder
(%1) ? %0 / %1 : 
VFX/Nodes+Math.swift
_TtCO3VFX21GraphV1CodeGeneration17CodeSourceSnippet
searchLabel
tooltip
hasValue
deprecated
noOutputDeclarationCode
codeContainsUidIndexTag
valueType
libraryName
libraryColor
includeFunctionsDependencies
CodeSourceSnippet(name: 
, inParameters: [
], outParameters: [
CodeSourceSnippet.init(
): unsupported language'
CodeGen.CodeSourceSnippet: Error in 
 '##' missing from code: 
CodeGen.CodeSourceSnippet.codeStatementsWithoutOutputDeclaration: missing code for 
: defaultInParameter 
 but inParameterNames is empty
 used multiple times in 
 is not supported as ParameterType
 have invalidly named output parameters (
 have invalidly named input parameters (
: Generic Types defined but %TYPE% is never used anywhere
ALL_SIGNED_INT_TYPES
ALL_UNSIGNED_INT_TYPES
ALL_MATRIX_TYPES
_TtC3VFX13CullingSystem
Mesh colliders with sphere particles are only correct with uniform scaling
No positions in mesh
VFX/Mesh.swift
VFX/Scripting+Parsing.swift
call parameters are not currently implemented for metal
Invalid builtin type 
: expected texture
expected $/@/# declarator at: 
unrecognized parameter at: 
1st argument must be texture location
@property is only available on custom shaders
$fragment_out is only available on fragment shader
$vertex_out is available on custom shaders
$vertex_in is only available on vertex functions
$particle is not available on this on this script
could not parse $particle: 
$particle only support additional arguments in custom shaders
$particle.property(type=) can only be applied on position/orientation/scale/transform
$particle.index only supported in custom shaders for now
access to other emitters is not currently allowed in custom shaders
access to emitter properties is not currently allowed in custom shaders
emitter_to_crworld
world_reference_position
render_target_size
inverse_render_target_size
unrecognized builtin: '
spurious argument on '
' not supported on '
' is only available on shaders: 
unrecognized property '
unrecognized component '
extra parameters not allowed here
' is not valid value, use 'true' of 'false'
invalid component '
invalid property '
' is not a valid space
invalid property 
couldn't infer name from vertex output
unrecognized type: '
crworld_position
invalid vertex output property: '
' is reserved and cannot be used here
barycentric_coordinates
 for fragment input
 for fragment output
missing name argument for $material
invalid type for $material: '
expected $material at: 
" should be prefixed with 
' is not a valid address mode
' is not a valid filter mode
' is not allowed here
unexpected token: 
unrecognized character: 
_TtCV3VFX20ParticleLifeAndDeath6System
_TtC3VFX13BinaryDecoder
options
_TtC3VFXP33_90B01CB79DF47397B2208C87FE67637814_BinaryDecoder
codingPath
$__lazy_storage_$_unmanagedDecoder
stores
_TtCC3VFXP33_90B01CB79DF47397B2208C87FE67637814_BinaryDecoder10DataStream
keyedSources
_TtCC3VFXP33_90B01CB79DF47397B2208C87FE67637814_BinaryDecoder12UnkeyedStore
length
decoder
currentIndex
UnsafeMutableRawBufferPointer.copyMemory source has too many elements
VFX/BinaryDecoder.swift
_TtC3VFX18LensBlurPassSystem
allCamerasQuery
compute_downsample2
HORIZONTAL_BLUR_REAL
HORIZONTAL_BLUR_IM
RenderTarget HORIZONTAL_BLUR_IM invalid
RenderTarget HORIZONTAL_BLUR_REAL invalid
compute_downsample4
compute_downsample8
compute_lens_blur_horizontal
compute_lens_blur_vertical
compute_lens_blur_horizontal_no_array_write
LensBlurPass
VFX/AnyExtensions.swift
_TtCV3VFX16ParticleLifeInit6System
lifeAndAgeQuery
lifeQuery
_TtCV3VFX16ParticleLifeInit9GPUSystem
SetLife.CPU
particle_set_life
ParticleLifeInit.GPU
_TtC3VFX22WorkerComponentStorage
maxOffset
perWorkerStorage
_TtC3VFX33VFXBridgingRemapAndResolveContext
world
table
_TtC3VFX24CollectReferencesContext
references
_TtC3VFX12RemapContext
isDuplicating
uuidTable
_TtC3VFX19PrivateCommandQueue
workerIndex
stackAllocator
frameAllocator
currentIterationContext
pendingDirtyPropagationQueue
deferredOperations
immediateOperations
dirtyTrackingDisabled
stats
VFX/CommandQueue.swift
_TtC3VFX8CastNode
srcType
dstType
_TtC3VFX12AutoCastNode
VFX.CastNode
VFX/Nodes+Conversion.swift
canConvert() should have returned false for 
(%0.lower_bound, %0.upper_bound)
.enums should have been replaced before codegen
_TtC3VFX13BinaryEncoder
_TtC3VFXP33_1D356F8D984976FF2DBF33523074BD8D14_BinaryEncoder
makeNextUnkeyedRandomAccess
superStore
$__lazy_storage_$_unmanagedEncoder
_TtCC3VFXP33_1D356F8D984976FF2DBF33523074BD8D14_BinaryEncoder9DataStore
encoder
data
_TtCC3VFXP33_1D356F8D984976FF2DBF33523074BD8D14_BinaryEncoder20SingleValueDataStore
isSpecial
$__lazy_storage_$_keyStore
$__lazy_storage_$_unmanagedKeyStore
$__lazy_storage_$_valueStore
$__lazy_storage_$_unmanagedValueStore
subStores
useKeyHashing
_TtCC3VFXP33_1D356F8D984976FF2DBF33523074BD8D14_BinaryEncoder12UnkeyedStore
$__lazy_storage_$_dataStore
$__lazy_storage_$_unmanagedDataStore
$__lazy_storage_$_sizesStore
$__lazy_storage_$_unmanagedSizesStore
encodeSizeHeader
appending
Swift._DictionaryCodingKey
VFX/BinaryEncoder.swift
Unable to encode the given top-level value as a property list
_TtC3VFX6Logger
publisher
_TtC3VFX8OSLogger
_TtC3VFX12ThreadLogger
VFX/Logging.swift
_TtC3VFX22PredefinedConstantNode
_TtC3VFX6PiNode
_TtC3VFX9TwoPiNode
_TtC3VFX10HalfPiNode
_TtC3VFX11EpsilonNode
_TtC3VFX15Identity2x2Node
_TtC3VFX15Identity3x3Node
_TtC3VFX15Identity4x4Node
_TtC3VFX22IdentityQuaternionNode
VFX/Nodes+Constants.swift
Not supported on 
IdentityQuaternion
_TtC3VFX24BinaryCodingTypeRegistry
unwrappedParallizableTypes
_TtC3VFX9ArrayNode
_TtC3VFX16GetArraySizeNode
_TtC3VFX19GetArrayElementNode
auto %r0 = vfx_script_array<
%0.array[vfx_clamp(%1, 0, 
VFX.ArrayNode
_TtCV3VFX13ParticleSetID6System
destroyedParticleWithIDQuery
_TtCV3VFX13ParticleSetID9GPUSystem
ParticleSetID.CPU
ParticleSetID.GPU
_TtC3VFX21SceneComponentStorage
componentLocks
isInitializedBitset
storageLock
VFX/SceneComponentStorage.swift
 exceed the available SceneComponentSize: 
SceneComponent lock
invalid component id:
couldn't decode 
 (not Decodable)
_TtC3VFX15BloomPassSystem
bloom_down_sample
bloom_up_sample_color_grading
VFX/Bloom.swift
missing bloom_threshold
missing bloom_down_sample
missing bloom_up_sample_color_grading
RenderTarget BLOOM_TMP invalid
BloomPass
_TtCF3VFX25objCAppendOnDestroyActionFTP_FT_T__T_L_7Deleter
block
allocator
mtlTextureDescriptorCache
renderTargets
Could not allocate texture 
_TtC3VFX23KeyframeTimelineRuntime
keys
keyStride
times
evaluateFunc
evaluateSplineFunc
quadratic
particle_decal_vert
particle_decal_frag
_TtC3VFX11MDLImporter
skeletons
meshes
ignoring component: 
attach SkinnedMeshBinding: 
MDLMesh.vertexBuffer
 does not have a material
MDLMesh.subMesh0
VFX/MeshImport+MDL.swift
Unknown attribute name: "
Layout out of bound
unsupported type
MDL material convertion: property not implemented yet: 
ColorProperty not implemented yet: 
string is illformed: 
Unsupported jointAnimation Type: 
Missing skeleton
Missing renderer in import
unsafeStorage
dispatchLock
future
token callback 
group callbacks result 
VFX/Future.swift
Cannot transition to 
_TtCV3VFX13ParticleForce9CPUSystem
_TtCV3VFX13ParticleForce9GPUSystem
ParticleForce.GPU
_TtC3VFX12LookAtSystem
_TtCV3VFX17ParticleIntegrate6System
positionQuery
_TtCV3VFX17ParticleIntegrate9GPUSystem
ParticleIntegrate.CPU
particle_integrate
ParticleIntegrate.GPU
VFXEffect support for remoteEdition has been removed
Trying to access the effect 
VFX/VFXEffect.swift
 after it has been removed, or its scene was released
 has no root entity
_TtC3VFX9VFXEffect
@32@0:8@16@24
v40@0:8q16@24@?32
v48@0:8q16@24q32@?40
v56@0:8q16@24q32q40@?48
v28@0:8@16c24
entityObject
onEffectRestartSubject
_enabled
_tombstoned
rootObjectID
T@"_TtC3VFX8VFXScene",N,W,Vscene
T@"<_TtP3VFX17VFXEffectDelegate_>",N,&,Vdelegate
Tq,N,Vversion
allowRemoteEdition
bindings
isTombstoned
cameras
Found unexpected CAKeyframeAnimation content. Expecting [NSNumber] or [CGColor].
_TtC3VFX5Graph
VFX.HolographicSession
HolographicRender
vfx.holographic.autostart.on.
_TtC3VFX18HolographicSession
renderSettings
display
quiltTexture
v40@0:8@16{CGSize=dd}24
MTKViewDelegate
v40@0:8@"MTKView"16{CGSize=dd}24
v24@0:8@"MTKView"16
S16@0:8
v20@0:8S16
T@"<MTLBuffer>",N,&,Vbuffer
TI,N,Vlength
TQ,N,Vformat
TS,N,Voffset
TS,N,Vstride
v24@0:8@?16
v32@0:8^v16@?24
C16@0:8
16@0:8
drawCall
aabb
_isDepthOnly
_writesColor
_writesSeparateDepth
_needsLinearDepth
_drawsForBlur
_isAdditive
_materialType
reProvidedBuffers
reProvidedTextures
handler
renderPassName
renderPassIdentifier
emitterIdentifier
customHandler
T@?,N,R
hasCustomHandler
TC,N,VrenderPassIdentifier
writesColor
writesSeparateDepth
needsLinearDepth
isDepthOnly
drawsForBlur
materialType
Ti,N,R
v24@?0@"<MTLRenderCommandEncoder>"8@"<VFXREDrawCallContext>"16
VFXRERenderTargetInfo
Q24@0:8q16
vrrEnabled
depthStencilPixelFormat
stencilPixelFormat
T,N,R
depthOnly
renderInGBuffer
outputsNormal
renderMode
VFXStencilInfo
frontFaceTest
T@"MTLStencilDescriptor",N,R
backFaceTest
frontReferenceValue
TC,N,R
backReferenceValue
@"MTLStencilDescriptor"16@0:8
_TtC3VFX15VFXCoreImporter
_TtCC3VFX15VFXCoreImporter13AnimationInfo
node
entity
_TtCC3VFX15VFXCoreImporter18VFXImporterContext
meshCache
materialCache
dataCache
animations
geometryCount
topLevelObjects
unsupported element data type 
unsupported element primitive type 
unsupported vertex layout: 
 components per vector
unsupported vertex layout (non-float)
VFXImport - light type not supported: 
invalid node path
failted to flatten mesh
unsupported animation keyPath: 
CameraEffectColorGradingController
CameraEffectColorFringeController
CameraEffectVignettingController
bridgedComponentNames
_TtC3VFX30ShadableShaderModifierObserver
v48@0:8@16@24@32^v40
shadable
propertyCache
attenuationDistance
shadowSampleCount
projectionTransform
projectionTransformInverse
worldTransformInverse
shoulderStrength
Chromatic Transform
Parametric Model
angularVelocityFactor
_vfx_torqueAsImpulse
_vfx_forceAsImpulse
albedo intensity
normal intensity
displacement intensity
bridgedObjectIdentifier
VFX.ShadableShaderModifierObserver
 has no component 
VFXBehaviorSupport
behaviorGraph
T@"VFXBehaviorGraph",N,&
@"VFXBehaviorGraph"16@0:8
v24@0:8@"VFXBehaviorGraph"16
.*?:(\d+):(\d+):\s(.+?):\sVFX_USER_CODE_LINE:(\d+):\s(.+)$
VFX/ScriptDiagnostic.swift
.*?:(\d+):(\d+):\s(.+?):\s(.+)$
.*?:\s(.+?):\s(.+)$
_TtC3VFX16CustomParameters
 is not storable as ShaderParameter named 
 is not compatible with 
Trying to set a texture on 
VFX/ShaderParameters.swift
uploadCustomParameters
Could not create (Argument) Buffer for material
decoding error in (Desc in _DA1F6ABE44DAF343DDC91EC1F37617D9)
particle_primitive_vert
particle_primitive_
_TtC3VFX38VectorRenderSystemRenderPipelineStates
rect2DDesc
disc2DDesc
roundedRect2DDesc
roundedRectStrokeDesc
roundedRectStrokeShadowDesc
shadowRoundedDesc
passFormat
_TtC3VFX18VectorRenderSystem
rectShape
discShape
roundedNoStroke
roundedWithStrokeColorWidth
roundedWithStrokeColorWidthShadow
Vector Render
vector_shadow_vert
vector_shadow_frag
particle_aoBox_vert
particle_aoBox_frag
depth32Float_stencil8
depth24Unorm_stencil8
bc7_rgbaUnorm_srgb
VFX/Metal+Extensions.swift
Unsupported dataType
Unsupported pixelFormat: 
waitUntilCompleted
TextureType not supported
ushort4Normalized
ushort3Normalized
ushort2Normalized
ushortNormalized
short4Normalized
short3Normalized
short2Normalized
uchar4Normalized
uchar3Normalized
uchar2Normalized
uint1010102Normalize
int1010102Normalize
 is not a valid texture data type
Unhandled RE encoding of MTLBlendFactor
OneMinusSourceColor
SourceAlphaSaturated
OneMinusSourceAlpha
OneMinusSource1Color
OneMinusSource1Alpha
OneMinusDestinationColor
OneMinusDestinationAlpha
OneMinusBlendColor
OneMinusBlendAlpha
DestinationColor
DestinationAlpha
isRoughnessMetalnessPacked
dollySensitivity
rotationSensitivity
worldOrbitTarget
_TtCV3VFX30ParticleTargetFromPositionInit6System
ParticleTargetFromPositionInitSystem
VFX/Graph+Lowering.swift
Cannot be resolved
_TtC3VFX24FluidSpheresRenderSystem
_TtC3VFX23FluidAbsorbRenderSystem
_TtC3VFX21FluidBlurRenderSystem
_TtC3VFX26FluidCompositeRenderSystem
FluidSpheresRender
FluidAbsorbRender
FluidBlur
FluidCompositeRender
VFX/PointCache+PLY.swift
binary_little_endian
unsupported type 
malformed file: could not read vertex #
 != (vertex|face|intrinsic|extrinsic)  '
unsupported format: '
version != 1.0 '
_TtC3VFX12DisplayClock
tickHandlers
tickHandlersForThisFrame
displayLink
dispatchSource
isRenderClock
paused
VFX/DisplayClock.swift
Unable to create dispatch source
Unable to create display link
i48@?0^{__CVDisplayLink=}8r^{?=IiqQdq{CVSMPTETime=ssIIIssss}QQ}16r^{?=IiqQdq{CVSMPTETime=ssIIIssss}QQ}24Q32^Q40
Unable to set current display
DisplayClock.tickHandlers
_TtC3VFX12TextureCache
operationQueue
asyncGroupRequests
textureEntryByKey
defaultSampler
defaultSamplerRepeatTrilinear
defaultSamplerClampMipNearest
defaultSamplerRepeatMipNearest
defaultSamplerRepeatSMipNearest
defaultSamplerMirrorRepeatMipNearest
defaultTextures
defaultNoiseTextures
groupID
Failed loading VFXBRDF in Bundle
VFX/TextureCache.swift
Can't wait cache entry in non loading state
Can't set texture for cache entry in non loading state
Can't perform fetchTexture on non loaded cache entry
Can't fetch texture 
Calling waitAsyncGroup on missing group id 
Can't perform purgeReferenceCount on non loaded cache entry
lock TextureCache
== TEXTURE CACHE ==
Total texture size: 
_TtCV3VFX26ParticleTargetFromPosition6System
VFX11
_TtCV3VFX17ParticlePivotInit6System
_TtCV3VFX17ParticlePivotInit9GPUSystem
SetPivot.CPU
particle_set_pivot
SetPivot.GPU
_TtCO3VFX21GraphV1CodeGeneration10BaseObject
orgInParameterNames
orgInParameterTypes
outParameters
orgOutParameterNames
orgOutParameterTypes
domains
CodeGen.BaseObject.copyDefaultValuesToComposedTypes: unsupported type: 
CodeGen.BaseObject.copyDefaultValuesToDecomposedTypes: unsupported type: 
CodeGen.Context.extractValuesFromFloatBasedTypes: unsupported type (
CodeGen.Context.extractValuesFromFloat3BasedTypes: unsupported type (
CodeGen.Context.extractValuesFromFloat4BasedTypes: unsupported type (
CodeGen.Context.extractValuesFromIntBasedTypes: unsupported type (
CodeGen.BaseObject.extractValuesFromFloat3BasedTypes: unsupported type: 
CodeGen.BaseObject.copyValuesFromFloatBasedTypes: unsupported type: 
CodeGen.BaseObject.copyValuesFromIntBasedTypes: unsupported type: 
:switchCaseEnumName
VFX/VectorField.swift
VectorField file is busted
Couldn't create the VectorField buffer
_TtC3VFX15SceneFileSystem
loadFileRuntime
_TtC3VFX14MeshFileSystem
modelRenderersQuery
allMeshParticleRendererWithoutCollectionQuery
allMaterialsWithoutCollectionQuery
allMaterialsWithCollectionQuery
_TtC3VFX19MeshReferenceSystem
SceneFile
mesh file asset legacyUpdate 
MeshFile
failed to locate scene with identifier 
failed to locate mesh with identifier 
failed to locate geometry in cloned entity
failed to locate mesh in cloned entity
MeshReference
SDF collider need only supports 2D and 3D Signed Distance Fields.
SDF colliders with sphere particles are only correct with uniform scaling
particle_sdf_2d_collider
_TtCV3VFX12ParticleDrag9GPUSystem
_TtC3VFX18ParticleDragSystem
ParticleDrag.GPU
_TtC3VFX24DistanceConstraintSystem
DistanceConstrainTargetFromPosition
MTLLibrary
@32@0:8Q16^@24
_TtCV3VFX24ParticleColorOverTexture6System
VFX/AnyCoder+TypeCoder.swift
ParticleFluidSolver2DSolver
ParticleSpawnState
ParticleFlockingSolver
GrowEmitterRuntime
_TtC3VFX11BuiltinNode
_TtC3VFX7NilNode
_TtC3VFX15ImplicitNilNode
_TtC3VFX14NoopReturnNode
_TtC3VFX17NoopReturnAnyNode
_TtC3VFX14NoopActionNode
_TtC3VFX12ConstantNode
holder
_TtC3VFX20ImplicitConstantNode
_TtC3VFX7DotNode
_TtC3VFX12_ComposeNode
_TtC3VFX11ComposeNode
_TtC3VFX19ImplicitComposeNode
_TtC3VFX13DecomposeNode
_TtC3VFX21ImplicitDecomposeNode
_TtC3VFX18PartialComposeNode
_TtC3VFX26ImplicitPartialComposeNode
_TtC3VFX15FlowControlNode
_TtC3VFX6DoNode
_TtC3VFX14ImplicitDoNode
_TtC3VFX6IfNode
_TtC3VFX8NoopNode
_TtC3VFX16ImplicitNoopNode
_TtC3VFX16EnumConstantNode
_TtC3VFX24ImplicitEnumConstantNode
auto %r0 = vfx_script_curve_create(
    %script_context,
    
(simd_float4[]) {}
auto %r0 = vfx_script_color_ramp_create(
    %script_context,
    
VFX/Nodes+Base.swift
cannot decode value of type: 
 is not Codable??
VFX.EnumConstantNode
ImplicitPartialCompose
ImplicitDecompose
VFX._ComposeNode
ImplicitConstant
VFX.NoopReturnNode
VFX.ConstantNode
_TtC3VFX10URLWatcher
presenter
_TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter
lastModificationDate
shouldReplicate
VFX.Presenter
NSFilePresenter
_TtC3VFX18DebugCullingSystem
isMenuItemBoundToEnabled
_TtC3VFX14DebugVFXSystem
_TtC3VFX15DebugInfoSystem
_TtC3VFX18DebugDrawingSystem
_TtC3VFX20WireframeLayerSystem
CullingDebug
debug_color_box_vert_noind
v44@?0824I40
VFX Debug
Debug Info
DebugDrawing
WireframeLayer
debug_color_line_vert
Un Mult Blending
Shoulder Strength
Threshold smoothness
Use high quality
Field of view###2041
Subsurface Radius
Enable anisotropy
Rolling Friction
Affected by Gravity
Angular Velocity Factor
Continuous Collision Threshold
ContactTest group
Resting Threshold
Angular Resting Threshold
Falloff Exponent
Enable Screen Space Reflections
Lighting Environment
_TtCV3VFX25ParticleColorOverPosition6System
_TtCO3VFX21GraphV1CodeGeneration13ParameterBase
owner
type
_TtCO3VFX21GraphV1CodeGeneration11ParameterIn
_TtCO3VFX21GraphV1CodeGeneration12ParameterOut
ParameterBase(name: 
_TtCV3VFX27ParticleOpacityOverVelocity6System
OpacityOverVelocitySystem
VFX/AnyType+Codable.swift
cannot serialize this type! (
@72@0:8@16{?={CGSize=dd}{CGSize=dd}}24@56@64
_TtCV3VFX15ParticleCollide9CPUSystem
eventClass
emitterProperties
emitter_from_world
emitterDeltaTime
_TtCV3VFX15ParticleCollide9GPUSystem
ParticleColliders.CPU
ParticleColliders.GPU
Only big endian ktx are supported
Unknow internalFormat 
 is not supported on this device 
overflow reading slice[
Only compressed ktx are supported
file is not a KTX
KTX file seems too small or is not a KTX
@24@0:8Q16
{?=QQ}24@0:8@16
headless
maxTransferRate
: cannot log value of type: 
scripting: invalid particle index
scripting: invalid particle index (invalid chunk)
scripting: invalid particle index (index in chunk)
ParticleEmission
ParticleMetalness
ParticleRoughness
ParticleParentID
VFX/RenderFunctions.swift
unsupported stage or stage combination: 
_TtC3VFX12ShadowSystem
VFX/Shadows.swift
Missing FrameConstantsStorage
Missing FrameConstantsStorage.frameConstantsBuffer
_TtC3VFX10CodeLoader
moduleName
libraryPath
ownsDlHandle
dlHandle
metalLibrary
commandBuilder
_TtC3VFXP33_C4E2DBBBFC07D2822B3288C0270C06A815SwiftCodeLoader
_TtC3VFXP33_C4E2DBBBFC07D2822B3288C0270C06A811CCodeLoader
_TtC3VFX24MetalToolchainCodeLoader
libname
_TtC3VFXP33_C4E2DBBBFC07D2822B3288C0270C06A818MetalAPICodeLoader
sourceURL
main
couldn't load metal function: 
loading metallib at 
abcdefghijklmnopqrstuvwxyz
creating metallib for 
CodeLoader: couldn't create temp directory: 
creating universal binary 
VFX/CodeLoader.swift
subclass should implement
not supported on this class
symbol not found 
image load error: 
Compilation error: 
Serialization error: 
_TtC3VFX15CompositeSystem
VFX/Composite.swift
Cannot access features outside a render phase
Composite
_TtC3VFX12VortexSystem
_TtC3VFX24ParticlePrepareGPUSystem
_TtC3VFX25ParticlePostInitGPUSystem
_TtC3VFX19ParticleGPUDownload
onReadyToCopy
InitNewParticlesWithParentEmitter
allocateConstantBuffer failed copying particle_init_with_parent_uniforms
InitNewParticles
initNewParticles: missing particle_init_newly_created
compactData - missing particle_compact_data
allocateConstantBuffer failed copying particle_update_counters_uniforms
allocateConstantBuffer failed copying update_life_uniforms
particleSystemGPU::updateLife missing particle_update_life
allocateConstantBuffer failed copying SIMD3<UInt32>
prepare_dispatch_indirect_1D
prepare_indirect_draw
prepare_indirect_draw_indexed
prepare_indirect_draw_mesh
particle_reset_live_dead_counter
particle_update_counters
particle_data_realloc
prepare_sort_dispatch
copy_final_order
particle_update_life
particle_compact_data
particle_init_newly_created
particle_init_newly_created_with_parent_emitter
particle_copy_transient_data
generate_prevnext
ParticlePostInitSystem.GPU
_TtC3VFX12SkeletonData
restTransforms
jointsParents
inverseBindTransforms
_TtC3VFX17SkeletonAnimation
translations
_TtC3VFX23SkeletonAnimationSystem
processAnimations
_TtC3VFX14SkeletonSystem
updateSkeleton
_TtC3VFX14SkinningSystem
_TtCV3VFX20ParticleVelocityInit6System
_TtCV3VFX20ParticleVelocityInit9GPUSystem
ParticleVelocityInitSystem
particle_set_velocity
SetVelocity.GPU
_TtC3VFX9Scheduler
enableRecording
currentJobID
currentJobName
recurrentJobs
orderedRecurrentJobs
jobQueueForThisFrame
pendingJobsToEnqueueForThisFrame
pendingJobsToEnqueueForThisFrameOnly
groupsToUnregister
liveQueryCountByJobID
needsRescheduling
needsReschedulingForThisFrame
dependenciesByJob
schedulerEventsRecordedDuringLastFrame
queriesRecordedDuringLastFrame
schedulerEventsRecordedDuringThisFrame
queriesRecordedDuringThisFrame
simulationTimeScale
VFX/Scheduler.swift
lock-scheduler
_TtCV3VFX27ParticleAngularVelocityInit6System
_TtCV3VFX27ParticleAngularVelocityInit9GPUSystem
SetAngularVelocity.CPU
particle_set_angular_velocity
SetAngularVelocity.GPU
_TtC3VFX30ParticleOpacityEvolutionSystem
_TtCV3VFX22ParticleIntegrateAngle6System
angleQuery
ParticleIntegrateAngle.CPU
_TtCV3VFX19ParticleGrowEmitter6System
GrowEmitterSystem
_TtC3VFX19SceneKitAssetSystem
scenesToUpdate
newNcenesToLoad
_TtC3VFX14SceneKitSystem
rendererQuery
placeSceneQuery
_TtC3VFX18ParticleSortSystem
Generate sorting keys
VFX/ParticleSortSystem.swift
Cannot generate sorting keys with .unsorted
Generate prevnext
Prepare sort dispatch arguments
Cannot cull transparent particles without colors
Cannot generate a sorting key with .unsorted
ParticleSort
_TtC3VFX11RenderGraph
features
internalColorPixelFormat
defaultRenderTargets
_TtC3VFX24RenderGraphSystemCleanup
_TtC3VFX17RenderGraphSystem
opaqueDrawCallsQuery
transparentDrawCallsQuery
authoringDrawCallsQuery
directionalLightQuery
pointLightQuery
spotLightQuery
ambientLightQuery
iblLightQuery
VFX/RenderGraphSystem.swift
RenderGraphCleanup
_TtC3VFX15SetActiveSystem
_TtC3VFX12HiddenSystem
addHiddenStateQuery
deactivateHiddenQuery
activateNonHiddenQuery
_TtC3VFX20SerializationContext
encodedVersion
codingEntity
codingComponent
componentsToAdd
isLoadingForAuthoring
codeBindingsMetadata
autoRecoverFromDecodingFailure
silentlySkipComponentOnEncodingFailure
logComponentCoding
codeComponentTypesWithTable
codePropertiesWithTable
onDeinit
entityTableByIndex
reversedEntityTable
encodedComponentTypes
encodedProperties
VFX/EntityManager+Serialization.swift
no serialization context installed
Can't find component 
 in TypeRegistry
EntityManager.unserialize
unhandled error in saveToJSON: 
corrupted FastDictCoder
couldn't decode entity reference: 
, using .null entity instead
decoding components shouldn't have thrown, decoding failure should fallback to creating a default component thanks to ComponentCoder!
failed decoding 
not actually Codable!
 is being serialized but it's neither marked NotCodable or Codable. Is it meant to be part of this EntityManager?
component should exist but is not there
unknown component: 
couldn't decode component of type 
, using default value instead (
 is not encodable
couldn't encode component of type 
, skipping. Error:
_TtC3VFX15_WorldValueNode
_TtC3VFX17SetWorldValueNode
_TtC3VFX26InspectorSetWorldValueNode
_TtC3VFX17GetWorldValueNode
_TtC3VFX18WorldReferenceNode
_TtC3VFX26ImplicitWorldReferenceNode
ImplicitWorldReference
VFX.WorldReferenceNode
makeScriptParameter: unresolved object: 
VFX._WorldValueNode
VFX/Nodes+World.swift
makeScriptParameter: invalid owner target, should have been replaced by actual target
_TtC3VFX22RenderGraphDiagnostics
graphID
rendererInfo
texturePreviewsByNodeID
_TtC3VFX15RenderGraphNode
_TtC3VFX15RenderWorldNode
_TtC3VFX18PublishTextureNode
_TtC3VFX11PresentNode
_TtC3VFX8BlurNode
_TtC3VFX9BloomNode
_TtC3VFX21ResolveResolutionNode
_TtC3VFX22RenderGraphTextureNode
_TtC3VFX21TextureDescriptorNode
_descriptor
_TtC3VFX18CustomFunctionNode
reflection
inputTypes
outputTypes
_TtC3VFX17ComputeShaderNode
_TtC3VFX18FullscreenQuadNode
TextureDescriptor
ResolveResolution
VFX.RenderGraphDiagnostics
CustomAuthoring.Final.
Material Parameters
MaterialParameters is legacy should be removed
_TtC3VFX19TransientPushSystem
colorQuery
scaleQuery
scale1Save
scale1Restore
scale2Save
scale2Restore
scale3Save
scale3Restore
TransientPush
_TtCO3VFX21GraphV1CodeGeneration11TemplateSet
CodeGen.TemplateLibrary: Unable to parse 
CodeGen.TemplateSet: invalid templateSet 
 some contexts share the same uid. TemplateSet will be ignored.
_TtCV3VFX16WrapAroundCamera6System
_TtCV3VFX16WrapAroundCamera9GPUSystem
Unsupported Camera Projection
WrapAroundCamera.CPU
particle_wrap_around_camera_orthographic
particle_wrap_around_camera_perspective
WrapAroundCamera.GPU
_TtC3VFX25PointCacheGeneratorSystem
loadPointCache
updatePointCacheFromModels
updatePointCache
uploadREMeshPointCache
_TtCV3VFX17PointCacheEmitter6System
_TtCV3VFX17PointCacheEmitter9GPUSystem
_TtCV3VFX17PointCacheSpawner6System
_TtCV3VFX17PointCacheSpawner9GPUSystem
PointCache format (
) is not supported.
PointCache loading error: 
VFX/PointCache.swift
Failed creating 
 buffer with size: 
elements count missing
format != binary '
' needs CPU Sampling to be used by PointCache.
pcache-jointindices
Failed creating pcache-jointindices buffer with size: 
pcache-jointweights
pcache-positions
Can't process a mesh without vertex layout
Only triangles are supported
PointCacheEmitter.CPU
No GPUPointCache on 
emitter_pointcache
PointCacheEmitter.GPU
PointCacheSpawner.CPU
pointcache_spawner
PointCacheSpawner.GPU
unsupported pcache file
invalid pcache file
propagatePendingDirtiness - entity 
 trying to dirtying itself
VFX/EntityManager+Export.swift
DoNotSave should have been filtered out already!
(let \w+ = \w+) as! (\w+)
VFX/VFXMigration.swift
$1.assumingMemoryBound(to: $2.self).pointee
isParticleComponent
(CurveF,Float)->(Float)
(CurveTexture,Float)->(Float)
(ColorRamp,Float)->(Float4)
(ColorRampTexture,Float)->(Float4)
_TtC3VFX20RenderCommandEncoder
MTLRenderCommandEncoderSPI
v48@0:8@16Q24@32Q40
v40@0:8f16f20f24f28Q32
v44@0:8@16f24f28f32Q36
v28@0:8c16Q20
v16@0:8
v56@0:8@16Q24Q32Q40Q48
v60@0:8@16Q24Q32Q40c48Q52
v52@0:8@16Q24Q32Q40c48
v88@0:8{?=QQQ}16{?={?=QQQ}{?=QQQ}}40
v92@0:8{?=QQQ}16{?={?=QQQ}{?=QQQ}}40I88
v48@0:8{?=QQQ}16q40
v24@0:8@?<v@?@"<MTLRenderCommandEncoderSPI>"Q>16
v48@0:8@"<MTLTexture>"16Q24@"<MTLSamplerState>"32Q40
v44@0:8@"<MTLSamplerState>"16f24f28f32Q36
v56@0:8@"<MTLTexture>"16Q24Q32Q40Q48
v60@0:8@"<MTLTexture>"16Q24Q32Q40c48Q52
v48@0:8@"<MTLTexture>"16Q24Q32Q40
v52@0:8@"<MTLTexture>"16Q24Q32Q40c48
v40@0:8@"<MTLResourceGroupSPI>"16Q24Q32
MTLCommandEncoderSPI
@"<MTLProgramAddressTable>"16@0:8
VFX/VFXRendererLegacy.swift
 not implemented
Unable to allocate pixel buffer
Unable to to create cgContext
Unable to to create image from cgContext
_TtC3VFX17VFXRendererLegacy
@40@0:8{CGSize=dd}16d32
@?16@0:8
effect
depthTexture
performMetalCaptureDuringSnapshot
T@"<MTLTexture>",N,&,Vtexture
T@"<MTLTexture>",N,&,VdepthTexture
T@"NSColor",N,&,VbackgroundColor
T@?,N,C
Scene must be set before taking snapshot
encode: scene is not set - ignoring
VFXRendererLegacy has no texture set
hasRenderableObjects: scene is not set
_TtC3VFX21RenderPipelineFactory
topologyClass
tesselation
renderFunctions
objectArguments
materialArguments
argumentsAreUpToDate
Missing reflection in 
Warning: Uniform mismatch between exported custom shader and VFX.Framework runtime for 
state desc 
Compilation failed: 
bufferBinding is invalid 
 failed to create ArgumentEncoder
usesVertexLayout,
functionConstantsLinkedToParameters,
customShaderVertexUsed,
customShaderFragmentUsed,
materialArgumentsAreBuiltin,
fragmentShaderIsDiscardingPixels,
fragmentShaderIsModifyingDepth,
MTLBinding
_TtCV3VFX24ParticleSizeOverVelocity6System
_TtC3VFX20HeapTextureAllocator
renderTargetHeap
maxHeapSizeNeeded
currentHeapSizeUsed
frameMaxHeapSizeNeeded
particle_ribbon_vert
particle_ribbon_frag
particle_ribbon_deferred_frag
particle_ribbon_quad_subdiv_vert
particle_ribbon_quad_vert
_TtC3VFXP33_A1A4C3D28342ECFED6A0B380DFA5196412ScopeChecker
diagnostics
flowOutputsByNode
dataOutputsByNode
nextScope
cfgScopes
scopes
Reading a value that is not available in all event flows
VFX/Graph+DiagnoseFlow.swift
why are we here? 
Must be part of event flow (e.g. OnUpdate)
Must be part of event flow: ParticleInit or ParticleUpdate
_TtC3VFX15HierarchySystem
dirtyWithParent
dirtyWithOverride
wrongDepthRoots
computeTransformFromPosOriScale
computeInverse
allChildrenMLH
allChildrenOLH
_TtC3VFX25SimplifiedHierarchySystem
_TtC3VFX29LastFrameWorldTransformSystem
computeLastFrame
addLastFrameToChild
_TtC3VFX34LastFrameWorldTransformSystem_vfx1
_TtC3VFX19StaticToFixedSystem
markAsFixed
StaticToFixed
_TtC3VFX11CurveObject
supportsSecureCoding
curve
serializedVFXBindingData
T@"NSData",N,R
serializedVFXBindingSize
VFX/Curve.swift
VFX.CurveObject
init()
unable to decode curve times
unable to decode curve values
NSSecureCoding
NSCoding
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
_TtC3VFX17MathTransformNode
_TtC3VFX24QuaternionFromNormalNode
_TtC3VFX33QuaternionFromFloat3AxisAngleNode
_TtC3VFX33QuaternionFromFloat4AxisAngleNode
_TtC3VFX29QuaternionFromEulerAnglesNode
_TtC3VFX15QuaternionXNode
_TtC3VFX15QuaternionYNode
_TtC3VFX15QuaternionZNode
_TtC3VFX35QuaternionFromRotationMatrix3x3Node
_TtC3VFX35QuaternionFromRotationMatrix4x4Node
_TtC3VFX32RotationMatrixFromEulerAngleNode
_TtC3VFX35RotationMatrix3x3FromQuaternionNode
_TtC3VFX35RotationMatrix4x4FromQuaternionNode
_TtC3VFX30RotationMatrixAroundCenterNode
_TtC3VFX21TRSFloat3x3MatrixNode
_TtC3VFX21TRSFloat4x4MatrixNode
vfx_make_transform(%rotation, vfx_make_float4(%translation, 1.0), %scale)
vfx_make_transform(%rotation, vfx_make_float4(%translation, 1.0f), %scale)
vfx_make_transform(%rotation, %translation, %scale)
vfx_make_rotation_around(%rotation, %center)
RotationMatrixAroundCenter
vfx_quat_to_matrix4x4(%quaternion)
RotationMatrix4x4FromQuaternion
vfx_quat_to_matrix3x3(%quaternion)
RotationMatrix3x3FromQuaternion
vfx_make_transform(%angleRadians, vfx_float2_zero(), vfx_float2_one())
RotationMatrixFromEulerAngle
vfx_quat_from_matrix4x4_(%rotation)
vfx_quat_from_matrix4x4(%rotation)
QuaternionFromRotationMatrix4x4
vfx_quat_from_matrix3x3_(%rotation)
vfx_quat_from_matrix3x3(%rotation)
QuaternionFromRotationMatrix3x3
vfx_quat_from_z_rotation(%angle)
_vfx_simd_quatf(vfx_quat_from_z_rotation(%angle))
QuaternionFromZRotation
vfx_quat_from_y_rotation(%angle)
_vfx_simd_quatf(vfx_quat_from_y_rotation(%angle))
QuaternionFromYRotation
vfx_quat_from_x_rotation(%angle)
_vfx_simd_quatf(vfx_quat_from_x_rotation(%angle))
QuaternionFromXRotation
vfx_quat_from_euler_(%eulerAngles)
vfx_quat_from_euler(%eulerAngles)
QuaternionFromEulerAngles
vfx_quat_from_axisangle_(%axisAngle)
vfx_quat_from_axisangle(%axisAngle)
QuaternionFromFloat4AxisAngle
vfx_quat_from_axisangle_(%axis, %angle)
vfx_quat_from_axisangle(%axis, %angle)
QuaternionFromFloat3AxisAngle
vfx_quat_from_normal_(%normal)
vfx_quat_from_normal(%normal)
QuaternionFromNormal
VFX/Nodes+Math+Transform.swift
_TtC3VFX15TransformBucket
transforms
colors
_TtC3VFX13RenderBuckets
renderContext
drawList
_TtC3VFX16MeshRenderSystem
_TtC3VFX16OpaqueRenderPass
opaqueQuery
_TtC3VFX21TransparentRenderPass
query
VFX/MeshRenderSystem.swift
VFX/Collections.swift
Hashmap keep growing, check your hash function, hopscotch hash table can't handle more then HopSize (
_TtC3VFX11CurveSystem
unregisteredCurvesQuery
allCurvesQuery
allCurvesWithRuntimeQuery
allModifiedCurvesWithRuntimeQuery
_TtC3VFX10CurveCache
_TtC3VFX13AuthoringNode
authoringID
userInfoData
inputs
_TtC3VFX16GraphNodeLibrary
defaultInstanceByType
entries
entriesByCategory
 conversion to ScriptScheduling is not yet supported
_TtC3VFX14BundleResolver
_TtC3VFX19AbsolutePathStorage
absoluteURL
_TtC3VFX13TextureSystem
dirtyTextureLoadingOptions
allTextureFilesWithoutWatcher
allTextureFiles
allTextureFilesWithoutDoNotUpload
allTextureArrayFiles
readTextureFile
readTextureArrayFile
allTextureFileWithCPURuntime
readTextureDataCPUQuery
readTextureCGImageQuery
updateGPURuntime
addRenderTargetRuntime
shaderAssetQueryAdd
shaderAssetQueryGen
convertToEquirectangularQuery
uploadCPUToGPUQuery
_TtC3VFX21TextureDownloadSystem
dirtyMissingCPURuntimeQuery
downloadGPUToCPUQuery
_TtC3VFX20TextureDiscardSystem
cleanupCPUQuery
cleanupGPUQuery
_TtC3VFX30TextureClientPlaceholderSystem
dirtyTextureClient
Add TextureCPURuntime on #
 is not synchronized
downloadGPUTextureToCPU
TextureDownloadToCPU
VFX/Texture.swift
Unsupported texture type 
defaultWhiteTextureCube
defaultWhiteTexture3D
defaultWhiteTexture1D
invalid storage option
attempting to set a non-entity to a texture parameter
Failed creating texture
loadGPUTextureAsIOSurface
CopyIOSurfaceFromURL returned invalid format 
 returned not supported by device
Failed creating texture from IOSurface with 
Texture Swizzling is not supported (IOSurface). 
loadIOSurface loading image at 
CopyIOSurfaceFromImage failed with 
uploadTextureToGPU
Failed creating texture with 
unpremultiply_texture_compute
unpremultiply_texture_fragment
NAFixPremultiply
Failed creating a render target texture to fix premultiply for 
Texture Swizzling is not supported. 
cannot support animated texture with depth > 1
Cannot get a nonSRGB pixel view on texture 
Cannot generate mipmaps for format 
generateMipmap
Unnamed-Animated
GenerateAnimationTexture
Should not try to copy anything with animations staying as atlas
Cannot generate mipmaps on 
loadTextureFromDisk
Failed loading image at 
failed to find referenced image named 
failed to load image named 
PixelFormat not natively supported -> 
 will be loaded and converted using ImageIO
Couldn't load the VectorField data
image referenced in usdz missing a query: 
image referenced in usdz has an malformed query 
: Can't load  images without ColorSpace
Buffer allocation failed
Failed creating the CGBitmapContextRef
) was resized from 
Could not allocate Texture 
TextureArrayCopySlices
Pixel format mismatch in TextureArray 
 are incompatible with ioSurface
premultiplyWithLinearAlpha,
unpremultiplied,
loadImage failed
 does not have a writable texture as argument
Cannot bind a texture with format 
Cannot generate a texture with a compressed pixel format 
CubeMapFromEqui[
equirectangularToCube
equirectangularToCubeMipGen
Received command buffer error status clear texture 
 evict from cache 
TextureDownload
TextureDiscard
TexturePlaceholder
TextureClientPlaceholder
VFX.AbsolutePathStorage
VFX.BundleResolver
Texture Upload error: 
Texture Loading error: 
MTLResource
_TtC3VFX17DeferredRendering
VFX/DeferredRendering.swift
Deferred Rendering
vertex_draw_quad_background
deferred_rendering_frag
MTLTexture
_TtC3VFX9VFXLoader
shouldLoadPrecompiledScripts
throwOnScriptLoadingFailure
skipScriptCompilation
allowLoadingEffectFromTheFuture
prepareEntityManager
loadWarning
invalid version number: 
initialBuildScripts
couldn't compile scripts at load-time: 
couldn't locate corresponding .swift/.cpp sources files
codesigning binary 
__vfx_get_script_table_
couldn't locate script table
missing symbol: 
. VFX couldn't load the embedded dylib. In case of sandbox error, you can add this entitlement for development: <key>get-task-allow</key><true/>
This is usually a client error. Is the .vfx swift file compiled as part of this app? If there is an embedded dylib, is it valid for the current architecture?
file is too old to load script without recompiling
scriptTable_1000
missing selector: scriptTable_1000
could not load embedded dylib: 
__DATA_CONST
VFXLoader.load
Trying to open a VFX2 project with VFX1's API. Please migrate to the VFXWorld API.
invalid scene filename: 
) file format is not supported anymore. This version of VFX Studio can only open files from version 
 included. Use a previous Beta to open this file and save it to latest.
 is from the future (framework version: 
, effect version: 
 file format is too recent: 
. This version of VFX Studio can only open files up to version 
The effect might be missing some features.
Saving is discouraged.
VFX/VFXLoader.swift
VFXInitialize() must be called before using VFXLoader
failed to load info.json from disk
_TtC3VFX17DecodingErrorNode
VFX.DecodingErrorNode
graph decoding error: 
: too many inputs
couldn't decode node: 
_TtC3VFX17DepthStencilCache
depthStencilStates
default
lock DepthStencilCache
%.2f,%.2f,%.2f,%.2f
_TtC3VFX16PrelitParameters
prelit_deferred_frag
_TtC3VFX18EventDisposeSystem
destroyEvents
newEvents
Events Dispose
_TtC3VFX13PBRParameters
albedo
emissive
pbr_deferred_fragment
pbr_fragment_depth_only
PBRParameterts.upload(material:) is missing a renderer
PBRParameterts.upload(material:) cannot allocate material buffer
defaultNormalMapTexture
Texture not ready? #
PBRParameterts size is too small
Q16@0:8
_TtC3VFX14ShaderRegistry
gen2D_verticalGradient
gen2D_linearGradient
gen2D_radialGradient
sunRadiusAndShape
_TtC3VFX13SDFFileSystem
addFileRuntime
_TtC3VFX18SDFGeneratorSystem
dirtySDFQuery
forceDoNotUploadQuery
 value cannot be converted to 
 because it is outside the representable range
Couldn't create the SDF buffer
Couldn't create the SDF texture
SDFFile
SDFGenerator only supports 2D texture with shaderRead usage
SDFGenerator on 
 cannot takes itself as a source
generate_sdf_initialize
generate_sdf_jfa_step
generate_sdf_finalize
SDFGenerator
_TtCV3VFX17ParticleColorInit6System
_TtCV3VFX17ParticleColorInit9GPUSystem
SetParticleColor.CPU
particle_set_color
SetParticleColor.GPU
_TtC3VFX14AuthoringGraph
didPerformMutation
nodesByID
allocateConstantBuffer failed copying particle_mesh_material_constants
particle_mesh_vert
particle_mesh_frag
particle_mesh_deferred_frag
_TtC3VFX23NavigationConfiguration
flyKeys
_TtCV3VFX23OrientationOverVelocity6System
_TtCV3VFX23OrientationOverVelocity9GPUSystem
particle_orientation_over_velocity
OrientationOverVelocity.GPU
_TtC3VFX18AssetCatalogSystem
allDirtyNamedAssets
Unable to find texture asset 
VFX/ShaderCache+PipelinesScript.swift
RenderPipelineState label is malformed
CounterClockwise
PerPatchAndPerInstance
couldn't write Metal pipelines script: 
Metal pipelines script written in "
vfx.mtlbinaryarchive
couldn't write Metal binary archive: 
Metal binary archive written in "
Unhandled RE encoding of MTLBlendOperation
ReverseSubstract
PerPatchControlPoint
FunctionConstantIndex
FunctionConstantName
_TtCV3VFX18ParticleUpdateAABB6System
ParticleUpdateAABB.CPU
_TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet
ArraySequenceSnippet.generateCode: couldn't find parameter named '
_TtC3VFX11LODResource
variations
maxSquaredDistances
visibleSquaredRange
_TtC3VFX14CanvasItemNode
_TtC3VFX16CanvasStickyNode
colorScheme
_TtC3VFX21CanvasStickyGroupNode
VFX.CanvasStickyNode
VFX.CanvasItemNode
_TtC3VFX22NoHeapTextureAllocator
numberOfFramesBeforePurge
unusedTextures
usedTextures
VFX/NoHeapTextureAllocator.swift
 was not in the allocator
_TtCV3VFX16ParticleSizeInit6System
_TtCV3VFX16ParticleSizeInit9GPUSystem
ParticleSizeInitSystem
particle_set_size
ParticleSizeInit.GPU
_TtC3VFX18DepthPrepareSystem
VFX/DepthPrepare.swift
Depth Prepare
downsample_depth
attempted to set a fragment texture that is memory less
_TtC3VFX12EntityFamily
classByClassHash
componentTypes
entityComponentTypes
classComponentTypes
packedComponentTypes
_componentsIndicesByID
familyIndex
familyHash
usePortalCrossing, 
usePortalClipping, 
enablePortalClipPlane, 
simplifiedMesh, 
enableAlphaFade, 
useBreakthrough, 
enableDitherFade, 
enableClipping, 
_TtC3VFX18IBLGeneratorSystem
PrefilteredDiffuseMap[
PrefilteredSpecularMap[
IBL texture should have mipmaps
vfx::generatePrefilteredDiffuseMap
vfx::generatePrefilteredSpecularMap
VFX.VFXCoreCamera
_TtC3VFX13VFXCoreCamera
{?=[4]}16@0:8
isOrthographic
T{?=[4]},N
lastFrameWorldTransform
fieldOfView
Tf,N,R
fStop
exposure
aperture
lower upper 
 not found on entity 
 has no meta type
failed to find property 
VFX/SDF.swift
Couldn't load the SDF data
MTLBuffer
^v16@0:8
MainThread
Thread
%s [%d]
Draw Call
Indirect Draw Call
Primitive Count
registerReferenceDescriptor
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm
registerResourceIdentifier
resolveResourcesDescriptorsIfNeeded
Color0
ResourceIdentifier
Last
Missing published resource 
 for reference resource 
Available resources are:
v24@?0Q8r^{ResourceReferenceAssociation={ResourceIdentifier=(?={?=SSI}Q)}^{Resource}^{Pass}}16
Uninitialized pass 
resolveReferences
initPassesAndResolveReferences
build
removeResource
findPublishedResource
searchPublishedResource
publishResourceReference
computeStages
Some passes are not part of the graph
cleanupPredecessorsBasedOnExplicitDependencies
tryResolveAmbiguousDependencies
computeSuccessors
Pass [%s]
-> %s
initializeDependencies
Cycle detected on [
collectResourcesWrite
Stage [
 reading "
 writing "
 Successors dependencies:
 -> 
resolveResourceDescriptors
FinalColor
Color1
Color2
Color3
Depth
from "
" pass
Blit
Compute
 Load
 Clear
 Resolve
Read
Write
Order
_sortSubgraphDependencies
Unable to resolve graph subgraph:
Can't resolve requirements for subgraph: 
Ambiguous dependency on pass [
] reading resource written by multiple passes:
> written by [
Must add explicit dependency on [
After cleanup
allocate
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/GPUResourceManager.mm
resolve
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProvider.mm
encodeIfNeeded
_OptimiseRenderGraph
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProcessing.mm
Merge render passes
Merge compute passes
Remove copy passes
Merge blit passes
_AllocateResources
_DeduceResourcesUsage
vfx_draw_fullscreen_fragment_ms
texturecube_slices_copy_kernel
texturecube_copy_resample_kernel
Unnamed
RegisterResource
AGGREGATE_PASS
PUBLISH_PASS
@"<MTLResource>"8@?0
VFXRenderGraph/RenderGraph.swift
nil buffer slice
btOptimizedBvhNodeData
btQuantizedBvhNodeData
btBvhSubtreeInfoData
btQuantizedBvhFloatData
btCollisionObjectFloatData
Overflow in AABB, object removed from simulation
If you can reproduce this, please email bugs@continuousphysics.com
Please include above information, your Platform, version of OS.
Thanks.
Triangle
btConvexInternalShapeData
Box2d
btTriangleMeshShapeData
BVHTRIANGLEMESH
CapsuleShape
btCapsuleShapeData
btCollisionShapeData
btCompoundShapeChildData
btCompoundShapeData
Compound
btVector3FloatData
btConvexHullShapeData
Convex
ConvexTrimesh
CylinderY
btCylinderShapeData
btPositionAndRadius
btMultiSphereShapeData
MultiSphere
SPHERE
STATICPLANE
btStaticPlaneShapeData
btIntIndexData
btShortIntIndexTripletData
btCharIndexTripletData
btVector3DoubleData
btMeshPartData
btStridingMeshInterfaceData
TRIANGLEMESH
btConeTwistConstraintData
btHingeConstraintFloatData
btPoint2PointConstraintFloatData
btSliderConstraintData
btTypedConstraintData
btDynamicsWorldFloatData
btRigidBodyFloatData
bilinear
catmark
loop
Failure in TopologyRefinerFactory<>::Create() -- mesh contains no vertices.
Failure in TopologyRefinerFactory<>::Create() -- meshes without faces not yet supported.
Failure in TopologyRefinerFactory<>::Create() -- face with %d vertices > %d max.
Failure in TopologyRefinerFactory<>::Create() -- mesh contains no face-vertices.
Failure in TopologyRefinerFactory<>::Create() -- non-triangular faces not supported by Loop scheme.
Failure in TopologyRefinerFactory<>::Create() -- vertex with valence %d > %d max.
Failure in TopologyRefinerFactory<>::Create() -- maximum valence not assigned.
Failure in TopologyRefinerFactory<>::Create() -- invalid topology detected from partial specification.
Failure in TopologyRefinerFactory<>::Create() -- invalid topology detected as fully specified.
Failure in TopologyRefinerFactory<>::Create() -- face-varying channel %d has no values.
OSD PatchIndexBuffer
OSD PatchParamBuffer
MISSING_EDGE_FACES
MISSING_EDGE_VERTS
MISSING_FACE_EDGES
MISSING_FACE_VERTS
MISSING_VERT_FACES
MISSING_VERT_EDGES
FAILED_CORRELATION_FACE_VERT
FAILED_CORRELATION_FACE_EDGE
FAILED_ORIENTATION_INCIDENT_EDGE
FAILED_ORIENTATION_INCIDENT_FACE
FAILED_ORIENTATION_INCIDENT_FACES_EDGES
DEGENERATE_EDGE
NON_MANIFOLD_EDGE
%s - missing face-verts
%s - missing vert-faces
%s - face %d correlation of vert %d failed
%s - missing edge-faces
%s - missing face-edges
%s - face %d correlation of edge %d failed
%s - missing edge-verts
%s - missing vert-edges
%s - edge %d correlation of vert %d failed
%s - vertex %d cannot orient incident faces and edges
%s - vertex %d orientation failure at incident face %d
%s - vertex %d orientation failure at incident edge %d
%s - Error in eIndex = %d:  degenerate edge not tagged marked non-manifold
%s - edge %d with %d incident faces not tagged non-manifold
StencilTable Sizes
StencilTable Offsets
StencilTable Indices
StencilTable Weights
Using OPENSUBDIV_MTL_COMPUTE_USE_DERIVATIVES
LENGTH
SRC_STRIDE
DST_STRIDE
WORK_GROUP_SIZE
OPENSUBDIV_MTL_COMPUTE_USE_DERIVATIVES
PARAMETER_BUFFER_INDEX
SIZES_BUFFER_INDEX
OFFSETS_BUFFER_INDEX
WEIGHTS_BUFFER_INDEX
SRC_VERTEX_BUFFER_INDEX
DST_VERTEX_BUFFER_INDEX
DU_WEIGHTS_BUFFER_INDEX
DV_WEIGHTS_BUFFER_INDEX
DU_DERIVATIVE_BUFFER_INDEX
DV_DERIVATIVE_BUFFER_INDEX
PATCH_ARRAYS_BUFFER_INDEX
PATCH_COORDS_BUFFER_INDEX
PATCH_PARAMS_BUFFER_INDEX
Error compiling MTL Shader: %s
eval_stencils
Error compiling MTL Pipeline eval_stencils: %s
eval_patches
Error compiling MTL Pipeline eval_patches:  %s
#line 0 "osd/mtlComputeKernel.metal"
//   Copyright 2015 Pixar
//   Licensed under the Apache License, Version 2.0 (the "Apache License")
//   with the following modification; you may not use this file except in
//   compliance with the Apache License and the following modification to it:
//   Section 6. Trademarks. is deleted and replaced with:
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor
//      and its affiliates, except as required to comply with Section 4(c) of
//      the License and to reproduce the content of the NOTICE file.
//   You may obtain a copy of the Apache License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the Apache License with the above modification is
//   distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//   KIND, either express or implied. See the Apache License for the specific
//   language governing permissions and limitations under the Apache License.
#include <metal_stdlib>
#ifndef OPENSUBDIV_MTL_COMPUTE_USE_DERIVATIVES
#define OPENSUBDIV_MTL_COMPUTE_USE_DERIVATIVES 0
#endif
using namespace metal;
struct PatchCoord
    int arrayIndex;
    int patchIndex;
    int vertIndex;
    float s;
    float t;
struct PatchParam
    uint field0;
    uint field1;
    float sharpness;
struct KernelUniformArgs
int batchStart;
int batchEnd;
    int srcOffset;
int dstOffset;
    int3 duDesc;
    int3 dvDesc;
struct Vertex {
    float vertexData[LENGTH];
void clear(thread Vertex& v) {
    for (int i = 0; i < LENGTH; ++i) {
        v.vertexData[i] = 0;
    }
Vertex readVertex(int index, device float* vertexBuffer, KernelUniformArgs args) {
    Vertex v;
    int vertexIndex = args.srcOffset + index * SRC_STRIDE;
    for (int i = 0; i < LENGTH; ++i) {
        v.vertexData[i] = vertexBuffer[vertexIndex + i];
    }
    return v;
void writeVertex(int index, Vertex v, device float* vertexBuffer, KernelUniformArgs args) {
    int vertexIndex = args.dstOffset + index * DST_STRIDE;
    for (int i = 0; i < LENGTH; ++i) {
        vertexBuffer[vertexIndex + i] = v.vertexData[i];
    }
void writeVertexSeparate(int index, Vertex v, device float* dstVertexBuffer, KernelUniformArgs args) {
    int vertexIndex = args.dstOffset + index * DST_STRIDE;
    for (int i = 0; i < LENGTH; ++i) {
        dstVertexBuffer[vertexIndex + i] = v.vertexData[i];
    }
void addWithWeight(thread Vertex& v, const Vertex src, float weight) {
    for (int i = 0; i < LENGTH; ++i) {
        v.vertexData[i] += weight * src.vertexData[i];
    }
void writeDu(int index, Vertex du, device float* duDerivativeBuffer, KernelUniformArgs args)
    int duIndex = args.duDesc.x + index * args.duDesc.z;
    for(int i = 0; i < LENGTH; i++)
    {
        duDerivativeBuffer[duIndex + i] = du.vertexData[i];
    }
void writeDv(int index, Vertex dv, device float* dvDerivativeBuffer, KernelUniformArgs args)
    int dvIndex = args.dvDesc.x + index * args.dvDesc.z;
    for(int i = 0; i < LENGTH; i++)
    {
        dvDerivativeBuffer[dvIndex + i] = dv.vertexData[i];
    }
// ---------------------------------------------------------------------------
kernel void eval_stencils(
    uint thread_position_in_grid [[thread_position_in_grid]],
#if CFX_OPTIMIZE_OPENSUBDIV_STORAGE
    const device uint8_t* sizes [[buffer(SIZES_BUFFER_INDEX)]],
    const device int* offsets [[buffer(OFFSETS_BUFFER_INDEX)]],
    const device uint16_t* indices [[buffer(INDICES_BUFFER_INDEX)]],
    const device half* weights [[buffer(WEIGHTS_BUFFER_INDEX)]],
#else
    const device int* sizes [[buffer(SIZES_BUFFER_INDEX)]],
    const device int* offsets [[buffer(OFFSETS_BUFFER_INDEX)]],
    const device int* indices [[buffer(INDICES_BUFFER_INDEX)]],
    const device float* weights [[buffer(WEIGHTS_BUFFER_INDEX)]],
#endif
    device float* srcVertices [[buffer(SRC_VERTEX_BUFFER_INDEX)]],
    device float* dstVertexBuffer [[buffer(DST_VERTEX_BUFFER_INDEX)]],
    const device float* duWeights [[buffer(DU_WEIGHTS_BUFFER_INDEX)]],
    const device float* dvWeights [[buffer(DV_WEIGHTS_BUFFER_INDEX)]],
    device float* duDerivativeBuffer [[buffer(DU_DERIVATIVE_BUFFER_INDEX)]],
    device float* dvDerivativeBuffer [[buffer(DV_DERIVATIVE_BUFFER_INDEX)]],
    const constant KernelUniformArgs& args [[buffer(PARAMETER_BUFFER_INDEX)]]
    auto current  = thread_position_in_grid + args.batchStart;
    if(current >= args.batchEnd)
        return;
    Vertex dst;
    clear(dst);
    auto offset = offsets[current];
    auto size = sizes[current];
    for(auto stencil = 0; stencil < size; stencil++)
    {
        auto vindex = offset + stencil;
        addWithWeight(dst, readVertex(indices[vindex], srcVertices, args), weights[vindex]);
    }
    writeVertex(current, dst, dstVertexBuffer, args);
#if OPENSUBDIV_MTL_COMPUTE_USE_DERIVATIVES
    Vertex du, dv;
    clear(du);
    clear(dv);
    for(auto i = 0; i < size; i++)
    {
        auto src = readVertex(indices[offset + i], srcVertices, args);
        addWithWeight(du, src, duWeights[offset + i]);
        addWithWeight(dv, src, dvWeights[offset + i]);
    }
    writeDu(current, du, duDerivativeBuffer, args);
    writeDv(current, dv, dvDerivativeBuffer, args);
#endif
// ---------------------------------------------------------------------------
// PERFORMANCE: stride could be constant, but not as significant as length
//struct PatchArray {
//    int patchType;
//    int numPatches;
//    int indexBase;        // an offset within the index buffer
//    int primitiveIdBase;  // an offset within the patch param buffer
//};
// # of patcharrays is 1 or 2.
uint getDepth(uint patchBits) {
    return (patchBits & 0xf);
float getParamFraction(uint patchBits) {
    uint nonQuadRoot = (patchBits >> 4) & 0x1;
    uint depth = getDepth(patchBits);
    if (nonQuadRoot == 1) {
        return 1.0f / float( 1 << (depth-1) );
    } else {
        return 1.0f / float( 1 << depth );
    }
float2 normalizePatchCoord(uint patchBits, float2 uv) {
    float frac = getParamFraction(patchBits);
    uint iu = (patchBits >> 22) & 0x3ff;
    uint iv = (patchBits >> 12) & 0x3ff;
    // top left corner
    float pu = float(iu*frac);
    float pv = float(iv*frac);
    // normalize u,v coordinates
    return float2((uv.x - pu) / frac, (uv.y - pv) / frac);
bool isRegular(uint patchBits) {
    return (((patchBits >> 5) & 0x1u) != 0);
int getNumControlVertices(int patchType) {
    switch(patchType) {
        case 3: return 4;
        case 6: return 16;
        case 9: return 20;
        default: return 0;
    }
// ---------------------------------------------------------------------------
kernel void eval_patches(
                         uint thread_position_in_grid [[thread_position_in_grid]],
                         const constant uint4* patchArrays [[buffer(PATCH_ARRAYS_BUFFER_INDEX)]],
                         device PatchCoord* patchCoords [[buffer(PATCH_COORDS_BUFFER_INDEX)]],
                         device int* patchIndices [[buffer(PATCH_INDICES_BUFFER_INDEX)]],
                         device PatchParam* patchParams [[buffer(PATCH_PARAMS_BUFFER_INDEX)]],
                         device float* srcVertexBuffer [[buffer(SRC_VERTEX_BUFFER_INDEX)]],
                         device float* dstVertexBuffer [[buffer(DST_VERTEX_BUFFER_INDEX)]],
                         device float* duDerivativeBuffer [[buffer(DU_DERIVATIVE_BUFFER_INDEX)]],
                         device float* dvDerivativeBuffer [[buffer(DV_DERIVATIVE_BUFFER_INDEX)]],
                         const constant KernelUniformArgs& args [[buffer(PARAMETER_BUFFER_INDEX)]]
                         )
    auto current = thread_position_in_grid;
    auto patchCoord = patchCoords[current];
    auto patchIndex = patchIndices[patchCoord.patchIndex];
    auto patchArray = patchArrays[patchCoord.arrayIndex];
    auto patchBits = patchParams[patchIndex].field1; 
    auto patchType = select(patchArray.x, uint(6), isRegular(patchBits));
    auto numControlVertices = getNumControlVertices(patchType);
    auto uv = normalizePatchCoord(patchBits, float2(patchCoord.s, patchCoord.t));
    auto dScale = float(1 << getDepth(patchBits));
    auto boundaryMask = int((patchBits >> 8) & 0xFU);
    float wP[20], wDs[20], wDt[20], wDss[20], wDst[20], wDtt[20];
    if(patchType == 3) {
        OsdGetBilinearPatchWeights(uv.x, uv.y, dScale, wP, wDs, wDt, wDss, wDst, wDtt);
    } else if(patchType == 6) {
        OsdGetBSplinePatchWeights(uv.x, uv.y, dScale, boundaryMask, wP, wDs, wDt, wDss, wDst, wDtt);
    } else if(patchType == 9) {
        OsdGetGregoryPatchWeights(uv.x, uv.y, dScale, wP, wDs, wDt, wDss, wDst, wDtt);
    }
    Vertex dst, du, dv;
    clear(dst);
    clear(du);
    clear(dv);
    auto indexBase = patchArray.z + numControlVertices * (patchCoord.patchIndex - patchArray.w);
    for(auto cv = 0; cv < numControlVertices; cv++)
    {
        auto index = patchIndices[indexBase + cv];
        auto src = readVertex(index, srcVertexBuffer, args);
        addWithWeight(dst, src, wP[cv]);
        addWithWeight(du, src, wDs[cv]);
        addWithWeight(dv, src, wDt[cv]);
    }
    writeVertex(current, dst, dstVertexBuffer, args);
#if OPENSUBDIV_MTL_COMPUTE_USE_DERIVATIVES
    if(args.duDesc.y > 0)
        writeDu(current, du, duDerivativeBuffer, args);
    if(args.dvDesc.y > 0)
        writeDv(current, dv, dvDerivativeBuffer, args);
#endif
No Error
Fatal Error
Coding Error (internal)
Coding Error
Error
%s: %s
Warning: %s
#define OSD_METAL_OSX 1
#define OSD_PATCH_BASIS_METAL 1
#line 0 "osd/mtlPatchCommon.metal"
//   Copyright 2015 Pixar
//   Licensed under the Apache License, Version 2.0 (the "Apache License")
//   with the following modification; you may not use this file except in
//   compliance with the Apache License and the following modification to it:
//   Section 6. Trademarks. is deleted and replaced with:
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor
//      and its affiliates, except as required to comply with Section 4(c) of
//      the License and to reproduce the content of the NOTICE file.
//   You may obtain a copy of the Apache License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the Apache License with the above modification is
//   distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//   KIND, either express or implied. See the Apache License for the specific
//   language governing permissions and limitations under the Apache License.
//----------------------------------------------------------
// Patches.Common
//----------------------------------------------------------
#define offsetof_(X, Y) &(((device X*)nullptr)->Y)
#define OSD_IS_ADAPTIVE (OSD_PATCH_REGULAR || OSD_PATCH_GREGORY_BASIS || OSD_PATCH_GREGORY || OSD_PATCH_GREGORY_BOUNDARY)
#ifndef OSD_MAX_TESS_LEVEL
#define OSD_MAX_TESS_LEVEL 64
#endif
#ifndef OSD_NUM_ELEMENTS
#define OSD_NUM_ELEMENTS 3
#endif
#ifndef OSD_USER_VARYING_DECLARE
#define OSD_USER_VARYING_DECLARE
#endif
#ifndef OSD_USER_VARYING_DECLARE_ATTRIBUTE
#define OSD_USER_VARYING_DECLARE_ATTRIBUTE
#endif
#ifndef OSD_USER_VARYING_PER_VERTEX
#define OSD_USER_VARYING_PER_VERTEX(in, out)
#endif
#ifndef OSD_USER_VARYING_PER_CONTROL_POINT
#define OSD_USER_VARYING_PER_CONTROL_POINT(in, out)
#endif
#ifndef OSD_USER_VARYING_PER_EVAL_POINT
#define OSD_USER_VARYING_PER_EVAL_POINT(UV, a, b, c, d, out)
#endif
static_assert(sizeof(OsdInputVertexType) > 0, "OsdInputVertexType must be defined and have a float3 position member");
#if OSD_IS_ADAPTIVE
#if OSD_PATCH_GREGORY_BASIS
constant constexpr unsigned IndexLookupStride = 5;
#else 
constant constexpr unsigned IndexLookupStride = 1;
#endif
#define PATCHES_PER_THREADGROUP ((THREADS_PER_THREADGROUP * CONTROL_POINTS_PER_THREAD) / CONTROL_POINTS_PER_PATCH)
#define REAL_THREADGROUP_DIVISOR (CONTROL_POINTS_PER_PATCH / CONTROL_POINTS_PER_THREAD)
static_assert(REAL_THREADGROUP_DIVISOR % 2 == 0, "REAL_THREADGROUP_DIVISOR must be a power of 2");
static_assert(!OSD_ENABLE_SCREENSPACE_TESSELLATION || !USE_PTVS_FACTORS, "USE_PTVS_FACTORS cannot be enabled if OSD_ENABLE_SCREENSPACE_TESSELLATION is enabled");
static_assert((OSD_ENABLE_SCREENSPACE_TESSELLATION && (OSD_FRACTIONAL_ODD_SPACING || OSD_FRACTIONAL_EVEN_SPACING)) || !OSD_ENABLE_SCREENSPACE_TESSELLATION, "OSD_ENABLE_SCREENSPACE_TESSELLATION requires OSD_FRACTIONAL_ODD_SPACING or OSD_FRACTIONAL_EVEN_SPACING");
#endif
//Adjustments to the UV reparameterization can be defined here. 
#ifndef OSD_UV_CORRECTION
#define OSD_UV_CORRECTION
#endif
using namespace metal;
// ----------------------------------------------------------------------------
// Patch Parameters
// ----------------------------------------------------------------------------
// Each patch has a corresponding patchParam. This is a set of three values
// specifying additional information about the patch:
//    faceId    -- topological face identifier (e.g. Ptex FaceId)
//    bitfield  -- refinement-level, non-quad, boundary, transition, uv-offset
//    sharpness -- crease sharpness for single-crease patches
// These are stored in OsdPatchParamBuffer indexed by the value returned
// from OsdGetPatchIndex() which is a function of the current PrimitiveID
// along with an optional client provided offset.
using OsdPatchParamBufferType = packed_int3;
struct OsdPerVertexGregory {
    float3 P;
    short3 clipFlag;
    int valence;
    float3 e0;
    float3 e1;
#if OSD_PATCH_GREGORY_BOUNDARY
    int zerothNeighbor;
    float3 org;
#endif
    float3 r[OSD_MAX_VALENCE];
    OSD_USER_VARYING_DECLARE
struct OsdPerPatchVertexGregory {
    packed_float3 P;
    packed_float3 Ep;
    packed_float3 Em;
    packed_float3 Fp;
    packed_float3 Fm;
    OSD_USER_VARYING_DECLARE
//----------------------------------------------------------
// HLSL->Metal Compatibility
//----------------------------------------------------------
static inline float4 mul(float4x4 a, float4 b)
    return a * b;
static inline float3 mul(float4x4 a, float3 b)
    float3x3 m(a[0].xyz, a[1].xyz, a[2].xyz);
    return m * b;
//----------------------------------------------------------
// Patches.Common
//----------------------------------------------------------
// For now, fractional spacing is supported only with screen space tessellation
#ifndef OSD_ENABLE_SCREENSPACE_TESSELLATION
#undef OSD_FRACTIONAL_EVEN_SPACING
#undef OSD_FRACTIONAL_ODD_SPACING
#endif
struct HullVertex {
    float4 position;
#if OSD_ENABLE_PATCH_CULL
    short3 clipFlag;
#endif
    OSD_USER_VARYING_DECLARE
    float3 GetPosition() threadgroup
    {
        return position.xyz;
    }
    void SetPosition(float3 v) threadgroup
    {
    
position.xyz = v;
    }
// XXXdyu all downstream data can be handled by client code
struct OsdPatchVertex {
    float3 position;
    float3 normal;
    float3 tangent;
    float3 bitangent;
    float4 patchCoord; //u, v, faceLevel, faceId
#if OSD_COMPUTE_NORMAL_DERIVATIVES
    float3 Nu;
    float3 Nv;
#endif
#if OSD_PATCH_ENABLE_SINGLE_CREASE
    float2 vSegments;
#endif
    OSD_USER_VARYING_DECLARE
struct OsdPerPatchTessFactors {
    float4 tessOuterLo;
    float4 tessOuterHi;
struct OsdPerPatchVertexBezier {
#if CFX_OPTIMIZE_OPENSUBDIV_STORAGE
    packed_half3 P;
#if OSD_PATCH_ENABLE_SINGLE_CREASE
    packed_half3 P1;
    packed_half3 P2;
#if !USE_PTVS_SHARPNESS
    half2 vSegments;
#endif
#endif
#else
    packed_float3 P;
#if OSD_PATCH_ENABLE_SINGLE_CREASE
    packed_float3 P1;
    packed_float3 P2;
#if !USE_PTVS_SHARPNESS
    float2 vSegments;
#endif
#endif
#endif //CFX_OPTIMIZE_OPENSUBDIV_STORAGE
    OSD_USER_VARYING_DECLARE
struct OsdPerPatchVertexGregoryBasis {
    packed_float3 P;
    OSD_USER_VARYING_DECLARE
#if OSD_PATCH_REGULAR
using PatchVertexType = HullVertex;
using PerPatchVertexType = OsdPerPatchVertexBezier;
#elif OSD_PATCH_GREGORY || OSD_PATCH_GREGORY_BOUNDARY
using PatchVertexType = OsdPerVertexGregory;
using PerPatchVertexType = OsdPerPatchVertexGregory;
#elif OSD_PATCH_GREGORY_BASIS
using PatchVertexType = HullVertex;
using PerPatchVertexType = OsdPerPatchVertexGregoryBasis;
#else
using PatchVertexType = OsdInputVertexType;
using PerPatchVertexType = OsdInputVertexType;
#endif
//Shared buffers used by OSD that are common to all kernels
struct OsdPatchParamBufferSet
const device OsdInputVertexType* vertexBuffer [[buffer(VERTEX_BUFFER_INDEX)]];
const device unsigned* indexBuffer [[buffer(CONTROL_INDICES_BUFFER_INDEX)]];
const device OsdPatchParamBufferType* patchParamBuffer [[buffer(OSD_PATCHPARAM_BUFFER_INDEX)]];
device PerPatchVertexType* perPatchVertexBuffer [[buffer(OSD_PERPATCHVERTEXBEZIER_BUFFER_INDEX)]];
#if !USE_PTVS_FACTORS    
    device OsdPerPatchTessFactors* patchTessBuffer [[buffer(OSD_PERPATCHTESSFACTORS_BUFFER_INDEX)]];
#endif
#if OSD_PATCH_GREGORY || OSD_PATCH_GREGORY_BOUNDARY
const device int* quadOffsetBuffer [[buffer(OSD_QUADOFFSET_BUFFER_INDEX)]];
const device int* valenceBuffer [[buffer(OSD_VALENCE_BUFFER_INDEX)]];
#endif
const constant unsigned& kernelExecutionLimit [[buffer(OSD_KERNELLIMIT_BUFFER_INDEX)]];
//Shared buffers used by OSD that are common to all PTVS implementations
struct OsdVertexBufferSet
const device OsdInputVertexType* vertexBuffer [[buffer(VERTEX_BUFFER_INDEX)]];
const device unsigned* indexBuffer [[buffer(CONTROL_INDICES_BUFFER_INDEX)]];
const device OsdPatchParamBufferType* patchParamBuffer [[buffer(OSD_PATCHPARAM_BUFFER_INDEX)]];
device PerPatchVertexType* perPatchVertexBuffer [[buffer(OSD_PERPATCHVERTEXBEZIER_BUFFER_INDEX)]];
#if !USE_PTVS_FACTORS    
    device OsdPerPatchTessFactors* patchTessBuffer [[buffer(OSD_PERPATCHTESSFACTORS_BUFFER_INDEX)]];
#endif
// ----------------------------------------------------------------------------
// Patch Parameters Accessors
// ----------------------------------------------------------------------------
static int3 OsdGetPatchParam(int patchIndex, const device OsdPatchParamBufferType* osdPatchParamBuffer)
#if OSD_PATCH_ENABLE_SINGLE_CREASE
    return int3(osdPatchParamBuffer[patchIndex]);
#else
    auto p = osdPatchParamBuffer[patchIndex];
    return int3(p[0], p[1], 0);
#endif
static int OsdGetPatchIndex(int primitiveId)
    return primitiveId;
static int OsdGetPatchFaceId(int3 patchParam)
    return (patchParam.x & 0xfffffff);
static int OsdGetPatchFaceLevel(int3 patchParam)
    return (1 << ((patchParam.y & 0xf) - ((patchParam.y >> 4) & 1)));
static int OsdGetPatchRefinementLevel(int3 patchParam)
    return (patchParam.y & 0xf);
static int OsdGetPatchBoundaryMask(int3 patchParam)
    return ((patchParam.y >> 8) & 0xf);
static int OsdGetPatchTransitionMask(int3 patchParam)
    return ((patchParam.x >> 28) & 0xf);
static int2 OsdGetPatchFaceUV(int3 patchParam)
    int u = (patchParam.y >> 22) & 0x3ff;
    int v = (patchParam.y >> 12) & 0x3ff;
    return int2(u,v);
static bool OsdGetPatchIsRegular(int3 patchParam)
    return ((patchParam.y >> 5) & 0x1) != 0;
static float OsdGetPatchSharpness(int3 patchParam)
    return as_type<float>(patchParam.z);
static float OsdGetPatchSingleCreaseSegmentParameter(int3 patchParam, float2 uv)
    int boundaryMask = OsdGetPatchBoundaryMask(patchParam);
    float s = 0;
    if ((boundaryMask & 1) != 0) {
        s = 1 - uv.y;
    } else if ((boundaryMask & 2) != 0) {
        s = uv.x;
    } else if ((boundaryMask & 4) != 0) {
        s = uv.y;
    } else if ((boundaryMask & 8) != 0) {
        s = 1 - uv.x;
    }
    return s;
// ----------------------------------------------------------------------------
static void OsdUnivar4x4(float u, thread float* B)
    float t = u;
    float s = 1.0f - u;
    
    float A0 = s * s;
    float A1 = 2 * s * t;
    float A2 = t * t;
    
    B[0] = s * A0;
    B[1] = t * A0 + s * A1;
    B[2] = t * A1 + s * A2;
    B[3] = t * A2;
static void OsdUnivar4x4(float u, thread float* B, thread float* D)
    float t = u;
    float s = 1.0f - u;
    float A0 = s * s;
    float A1 = 2 * s * t;
    float A2 = t * t;
    B[0] = s * A0;
    B[1] = t * A0 + s * A1;
    B[2] = t * A1 + s * A2;
    B[3] = t * A2;
    D[0] =    - A0;
    D[1] = A0 - A1;
    D[2] = A1 - A2;
    D[3] = A2;
static void OsdUnivar4x4(float u, thread float* B, thread float* D, thread float* C)
    float t = u;
    float s = 1.0f - u;
    float A0 = s * s;
    float A1 = 2 * s * t;
    float A2 = t * t;
    B[0] = s * A0;
    B[1] = t * A0 + s * A1;
    B[2] = t * A1 + s * A2;
    B[3] = t * A2;
    D[0] =    - A0;
    D[1] = A0 - A1;
    D[2] = A1 - A2;
    D[3] = A2;
    A0 =   - s;
    A1 = s - t;
    A2 = t;
    C[0] =    - A0;
    C[1] = A0 - A1;
    C[2] = A1 - A2;
    C[3] = A2;
// ----------------------------------------------------------------------------
static float3 OsdEvalBezier(float3 cp[16], float2 uv)
    float3 BUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)};
    float B[4], D[4];
    OsdUnivar4x4(uv.x, B, D);
    for (int i=0; i<4; ++i) {
        for (int j=0; j<4; ++j) {
            float3 A = cp[4*i + j];
            BUCP[i] += A * B[j];
        }
    }
    float3 P = float3(0,0,0);
    OsdUnivar4x4(uv.y, B, D);
    for (int k=0; k<4; ++k) {
        P += B[k] * BUCP[k];
    }
    return P;
static bool OsdCullPerPatchVertex(
threadgroup PatchVertexType* patch, 
float4x4 ModelViewMatrix
#if OSD_ENABLE_BACKPATCH_CULL && OSD_PATCH_REGULAR
    auto v0 = float3(ModelViewMatrix * patch[5].position);
    auto v3 = float3(ModelViewMatrix * patch[6].position);
    auto v12 = float3(ModelViewMatrix * patch[9].position);
    auto n = normalize(cross(v3 - v0, v12 - v0));
    v0 = normalize(v0 + v3 + v12);
    if(dot(v0, n) > 0.6f)
    {
        return false;
    }
#endif
#if OSD_ENABLE_PATCH_CULL
    short3 clipFlag = short3(0,0,0);
    for(int i = 0; i < CONTROL_POINTS_PER_PATCH; ++i) {
        clipFlag |= patch[i].clipFlag;
    }
    if (any(clipFlag != short3(3,3,3))) {
        return false;
    }
#endif
    return true;
// When OSD_PATCH_ENABLE_SINGLE_CREASE is defined,
// this function evaluates single-crease patch, which is segmented into
// 3 parts in the v-direction.
//  v=0             vSegment.x        vSegment.y              v=1
//   +------------------+-------------------+------------------+
//   |       cp 0       |     cp 1          |      cp 2        |
//   | (infinite sharp) | (floor sharpness) | (ceil sharpness) |
//   +------------------+-------------------+------------------+
static float3 OsdEvalBezier(device OsdPerPatchVertexBezier* cp, int3 patchParam, float2 uv)
    float3 BUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)};
    float B[4], D[4];
    float s = OsdGetPatchSingleCreaseSegmentParameter(patchParam, uv);
    OsdUnivar4x4(uv.x, B, D);
#if OSD_PATCH_ENABLE_SINGLE_CREASE
#if USE_PTVS_SHARPNESS
    float sharpness = OsdGetPatchSharpness(patchParam);
    float Sf = floor(sharpness);
    float Sc = ceil(sharpness);
    float s0 = 1 - exp2(-Sf);
    float s1 = 1 - exp2(-Sc);
    float2 vSegments(s0, s1);
#else
    float2 vSegments = float2(cp[0].vSegments);
#endif // USE_PTVS_SHARPNESS
    //By doing the offset calculation ahead of time it can be kept out of the actual indexing lookup.
#if CFX_OPTIMIZE_OPENSUBDIV_STORAGE
    if(s <= vSegments.x)
        cp = (device OsdPerPatchVertexBezier*)(((device half*)cp) + 0);
    else if( s <= vSegments.y)
        cp = (device OsdPerPatchVertexBezier*)(((device half*)cp) + 3);
    else
        cp = (device OsdPerPatchVertexBezier*)(((device half*)cp) + 6);
#else
    if(s <= vSegments.x)
        cp = (device OsdPerPatchVertexBezier*)(((device float*)cp) + 0);
    else if( s <= vSegments.y)
        cp = (device OsdPerPatchVertexBezier*)(((device float*)cp) + 3);
    else
        cp = (device OsdPerPatchVertexBezier*)(((device float*)cp) + 6);
#endif //CFX_OPTIMIZE_OPENSUBDIV_STORAGE
    BUCP[0] += float3(cp[0].P) * B[0];
    BUCP[0] += float3(cp[1].P) * B[1];
    BUCP[0] += float3(cp[2].P) * B[2];
    BUCP[0] += float3(cp[3].P) * B[3];
    BUCP[1] += float3(cp[4].P) * B[0];
    BUCP[1] += float3(cp[5].P) * B[1];
    BUCP[1] += float3(cp[6].P) * B[2];
    BUCP[1] += float3(cp[7].P) * B[3];
    BUCP[2] += float3(cp[8].P) * B[0];
    BUCP[2] += float3(cp[9].P) * B[1];
    BUCP[2] += float3(cp[10].P) * B[2];
    BUCP[2] += float3(cp[11].P) * B[3];
    BUCP[3] += float3(cp[12].P) * B[0];
    BUCP[3] += float3(cp[13].P) * B[1];
    BUCP[3] += float3(cp[14].P) * B[2];
    BUCP[3] += float3(cp[15].P) * B[3];
#else // single crease
    for (int i=0; i<4; ++i) {
        for (int j=0; j<4; ++j) {
            float3 A = float3(cp[4*i + j].P);
            BUCP[i] += A * B[j];
        }
    }
#endif  // single crease
    OsdUnivar4x4(uv.y, B);
    float3 P = B[0] * BUCP[0];
    for (int k=1; k<4; ++k) {
        P += B[k] * BUCP[k];
    }
    return P;
// ----------------------------------------------------------------------------
// Boundary Interpolation
// ----------------------------------------------------------------------------
template<typename VertexType>
static void OsdComputeBSplineBoundaryPoints(threadgroup VertexType* cpt, int3 patchParam)
//APPL TODO - multithread this
    int boundaryMask = OsdGetPatchBoundaryMask(patchParam);
    if ((boundaryMask & 1) != 0) {
        cpt[0].SetPosition(2*cpt[4].GetPosition() - cpt[8].GetPosition());
        cpt[1].SetPosition(2*cpt[5].GetPosition() - cpt[9].GetPosition());
        cpt[2].SetPosition(2*cpt[6].GetPosition() - cpt[10].GetPosition());
        cpt[3].SetPosition(2*cpt[7].GetPosition() - cpt[11].GetPosition());
    }
    if ((boundaryMask & 2) != 0) {
        cpt[3].SetPosition(2*cpt[2].GetPosition() - cpt[1].GetPosition());
        cpt[7].SetPosition(2*cpt[6].GetPosition() - cpt[5].GetPosition());
        cpt[11].SetPosition(2*cpt[10].GetPosition() - cpt[9].GetPosition());
        cpt[15].SetPosition(2*cpt[14].GetPosition() - cpt[13].GetPosition());
    }
    if ((boundaryMask & 4) != 0) {
        cpt[12].SetPosition(2*cpt[8].GetPosition() - cpt[4].GetPosition());
        cpt[13].SetPosition(2*cpt[9].GetPosition() - cpt[5].GetPosition());
        cpt[14].SetPosition(2*cpt[10].GetPosition() - cpt[6].GetPosition());
        cpt[15].SetPosition(2*cpt[11].GetPosition() - cpt[7].GetPosition());
    }
    if ((boundaryMask & 8) != 0) {
        cpt[0].SetPosition(2*cpt[1].GetPosition() - cpt[2].GetPosition());
        cpt[4].SetPosition(2*cpt[5].GetPosition() - cpt[6].GetPosition());
        cpt[8].SetPosition(2*cpt[9].GetPosition() - cpt[10].GetPosition());
        cpt[12].SetPosition(2*cpt[13].GetPosition() - cpt[14].GetPosition());
    }
template<typename VertexType>
static void OsdComputeBSplineBoundaryPoints(thread VertexType* cpt, int3 patchParam)
    int boundaryMask = OsdGetPatchBoundaryMask(patchParam);
    if ((boundaryMask & 1) != 0) {
        cpt[0].SetPosition(2*cpt[4].GetPosition() - cpt[8].GetPosition());
        cpt[1].SetPosition(2*cpt[5].GetPosition() - cpt[9].GetPosition());
        cpt[2].SetPosition(2*cpt[6].GetPosition() - cpt[10].GetPosition());
        cpt[3].SetPosition(2*cpt[7].GetPosition() - cpt[11].GetPosition());
    }
    if ((boundaryMask & 2) != 0) {
        cpt[3].SetPosition(2*cpt[2].GetPosition() - cpt[1].GetPosition());
        cpt[7].SetPosition(2*cpt[6].GetPosition() - cpt[5].GetPosition());
        cpt[11].SetPosition(2*cpt[10].GetPosition() - cpt[9].GetPosition());
        cpt[15].SetPosition(2*cpt[14].GetPosition() - cpt[13].GetPosition());
    }
    if ((boundaryMask & 4) != 0) {
        cpt[12].SetPosition(2*cpt[8].GetPosition() - cpt[4].GetPosition());
        cpt[13].SetPosition(2*cpt[9].GetPosition() - cpt[5].GetPosition());
        cpt[14].SetPosition(2*cpt[10].GetPosition() - cpt[6].GetPosition());
        cpt[15].SetPosition(2*cpt[11].GetPosition() - cpt[7].GetPosition());
    }
    if ((boundaryMask & 8) != 0) {
      cpt[0].SetPosition(2*cpt[1].GetPosition() - cpt[2].GetPosition());
      cpt[4].SetPosition(2*cpt[5].GetPosition() - cpt[6].GetPosition());
      cpt[8].SetPosition(2*cpt[9].GetPosition() - cpt[10].GetPosition());
      cpt[12].SetPosition(2*cpt[13].GetPosition() - cpt[14].GetPosition());
    }
static void OsdEvalPatchGregory(int3 patchParam, float2 UV, thread float3* cv,
                    thread float3& P, thread float3& dPu, thread float3& dPv,
                    thread float3& N, thread float3& dNu, thread float3& dNv)
    float u = UV.x, v = UV.y;
    float U = 1-u, V = 1-v;
    //(0,1)                              (1,1)
    //   P3         e3-      e2+         P2
    //      15------17-------11-------10
    //      |        |        |        |
    //      |        |        |        |
    //      |        | f3-    | f2+    |
    //      |       19       13        |
    //  e3+ 16-----18          14-----12 e2-
    //      |     f3+          f2-     |
    //      |                          |
    //      |                          |
    //      |     f0-         f1+      |
    //  e0- 2------4            8------6 e1+
    //      |        3 f0+    9        |
    //      |        |        | f1-    |
    //      |        |        |        |
    //      |        |        |        |
    //      0--------1--------7--------5
    //    P0        e0+      e1-         P1
    //(0,0)                               (1,0)
    float d11 = u+v;
    float d12 = U+v;
    float d21 = u+V;
    float d22 = U+V;
    float3 q[16];
    q[ 5] = (d11 == 0.0) ? cv[3]  : (u*cv[3] + v*cv[4])/d11;
    q[ 6] = (d12 == 0.0) ? cv[8]  : (U*cv[9] + v*cv[8])/d12;
    q[ 9] = (d21 == 0.0) ? cv[18] : (u*cv[19] + V*cv[18])/d21;
    q[10] = (d22 == 0.0) ? cv[13] : (U*cv[13] + V*cv[14])/d22;
    q[ 0] = cv[0];
    q[ 1] = cv[1];
    q[ 2] = cv[7];
    q[ 3] = cv[5];
    q[ 4] = cv[2];
    q[ 7] = cv[6];
    q[ 8] = cv[16];
    q[11] = cv[12];
    q[12] = cv[15];
    q[13] = cv[17];
    q[14] = cv[11];
    q[15] = cv[10];
    P   = float3(0,0,0);
    dPu = float3(0,0,0);
    dPv = float3(0,0,0);
#if OSD_COMPUTE_NORMAL_DERIVATIVES
    float B[4], D[4], C[4];
    float3 BUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)},
    DUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)},
    CUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)};
    float3 dUU = float3(0,0,0);
    float3 dVV = float3(0,0,0);
    float3 dUV = float3(0,0,0);
    OsdUnivar4x4(UV.x, B, D, C);
    for (int i=0; i<4; ++i) {
        for (int j=0; j<4; ++j) {
            float3 A = q[4*i + j];
            BUCP[i] += A * B[j];
            DUCP[i] += A * D[j];
            CUCP[i] += A * C[j];
        }
    }
    OsdUnivar4x4(UV.y, B, D, C);
    for (int i=0; i<4; ++i) {
        P   += B[i] * BUCP[i];
        dPu += B[i] * DUCP[i];
        dPv += D[i] * BUCP[i];
        dUU += B[i] * CUCP[i];
        dVV += C[i] * BUCP[i];
        dUV += D[i] * DUCP[i];
    }
    int level = OsdGetPatchFaceLevel(patchParam);
    dPu *= 3 * level;
    dPv *= 3 * level;
    dUU *= 6 * level;
    dVV *= 6 * level;
    dUV *= 9 * level;
    float3 n = cross(dPu, dPv);
    N = normalize(n);
    float E = dot(dPu, dPu);
    float F = dot(dPu, dPv);
    float G = dot(dPv, dPv);
    float e = dot(N, dUU);
    float f = dot(N, dUV);
    float g = dot(N, dVV);
    dNu = (f*F-e*G)/(E*G-F*F) * dPu + (e*F-f*E)/(E*G-F*F) * dPv;
    dNv = (g*F-f*G)/(E*G-F*F) * dPu + (f*F-g*E)/(E*G-F*F) * dPv;
    dNu = dNu/length(n) - n * (dot(dNu,n)/powr(dot(n,n), 1.5));
    dNv = dNv/length(n) - n * (dot(dNv,n)/powr(dot(n,n), 1.5));
#else //OSD_COMPUTE_NORMAL_DERIVATIVES
    float B[4], D[4];
    float3 BUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)},
    DUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)};
    OsdUnivar4x4(UV.x, B, D);
    for (int i=0; i<4; ++i) {
        for (int j=0; j<4; ++j) {
            float3 A = q[4*i + j];
            BUCP[i] += A * B[j];
            DUCP[i] += A * D[j];
        }
    }
    OsdUnivar4x4(UV.y, B, D);
    for (int i=0; i<4; ++i) {
        P += B[i] * BUCP[i];
        dPu += B[i] * DUCP[i];
        dPv += D[i] * BUCP[i];
    }
    int level = OsdGetPatchFaceLevel(patchParam);
    dPu *= 3 * level;
    dPv *= 3 * level;
    N = normalize(cross(dPu, dPv));
    dNu = float3(0,0,0);
    dNv = float3(0,0,0);
#endif //OSD_COMPUTE_NORMAL_DERIVATIVES
// ----------------------------------------------------------------------------
// Tessellation
// ----------------------------------------------------------------------------
// Organization of B-spline and Bezier control points.
// Each patch is defined by 16 control points (labeled 0-15).
// The patch will be evaluated across the domain from (0,0) at
// the lower-left to (1,1) at the upper-right. When computing
// adaptive tessellation metrics, we consider refined vertex-vertex
// and edge-vertex points along the transition edges of the patch
// (labeled vv* and ev* respectively).
// The two segments of each transition edge are labeled Lo and Hi,
// with the Lo segment occuring before the Hi segment along the
// transition edge's domain parameterization. These Lo and Hi segment
// tessellation levels determine how domain evaluation coordinates
// are remapped along transition edges. The Hi segment value will
// be zero for a non-transition edge.
// (0,1)                                         (1,1)
//   vv3                  ev23                   vv2
//        |       Lo3       |       Hi3       |
//      --O-----------O-----+-----O-----------O--
//        | 12        | 13     14 |        15 |
//        |           |           |           |
//        |           |           |           |
//    Hi0 |           |           |           | Hi2
//        |           |           |           |
//        O-----------O-----------O-----------O
//        | 8         | 9      10 |        11 |
//        |           |           |           |
// ev03 --+           |           |           +-- ev12
//        |           |           |           |
//        | 4         | 5       6 |         7 |
//        O-----------O-----------O-----------O
//        |           |           |           |
//    Lo0 |           |           |           | Lo2
//        |           |           |           |
//        |           |           |           |
//        | 0         | 1       2 |         3 |
//      --O-----------O-----+-----O-----------O--
//        |       Lo1       |       Hi1       |
//   vv0                  ev01                   vv1
// (0,0)                                         (1,0)
static float OsdComputePostProjectionSphereExtent(const float4x4 OsdProjectionMatrix, float3 center, float diameter)
    //float4 p = OsdProjectionMatrix * float4(center, 1.0);
    float w = OsdProjectionMatrix[0][3] * center.x + OsdProjectionMatrix[1][3] * center.y + OsdProjectionMatrix[2][3] * center.z + OsdProjectionMatrix[3][3];
    return abs(diameter * OsdProjectionMatrix[1][1] / w);
// Round up to the nearest even integer
static float OsdRoundUpEven(float x) {
    return 2*ceil(x/2);
// Round up to the nearest odd integer
static float OsdRoundUpOdd(float x) {
    return 2*ceil((x+1)/2)-1;
// Compute outer and inner tessellation levels taking into account the
// current tessellation spacing mode.
static void OsdComputeTessLevels(thread float4& tessOuterLo, thread float4& tessOuterHi,
                     thread float4& tessLevelOuter, thread float2& tessLevelInner)
    // Outer levels are the sum of the Lo and Hi segments where the Hi
    // segments will have lengths of zero for non-transition edges.
#if OSD_FRACTIONAL_EVEN_SPACING
    // Combine fractional outer transition edge levels before rounding.
    float4 combinedOuter = tessOuterLo + tessOuterHi;
    // Round the segments of transition edges separately. We will recover the
    // fractional parameterization of transition edges after tessellation.
    tessLevelOuter = combinedOuter;
    if (tessOuterHi[0] > 0) {
        tessLevelOuter[0] =
            OsdRoundUpEven(tessOuterLo[0]) + OsdRoundUpEven(tessOuterHi[0]);
    }
    if (tessOuterHi[1] > 0) {
        tessLevelOuter[1] =
            OsdRoundUpEven(tessOuterLo[1]) + OsdRoundUpEven(tessOuterHi[1]);
    }
    if (tessOuterHi[2] > 0) {
        tessLevelOuter[2] =
            OsdRoundUpEven(tessOuterLo[2]) + OsdRoundUpEven(tessOuterHi[2]);
    }
    if (tessOuterHi[3] > 0) {
        tessLevelOuter[3] =
            OsdRoundUpEven(tessOuterLo[3]) + OsdRoundUpEven(tessOuterHi[3]);
    }
#elif OSD_FRACTIONAL_ODD_SPACING
    // Combine fractional outer transition edge levels before rounding.
    float4 combinedOuter = tessOuterLo + tessOuterHi;
    // Round the segments of transition edges separately. We will recover the
    // fractional parameterization of transition edges after tessellation.
    //
    // The sum of the two outer odd segment lengths will be an even number
    // which the tessellator will increase by +1 so that there will be a
    // total odd number of segments. We clamp the combinedOuter tess levels
    // (used to compute the inner tess levels) so that the outer transition
    // edges will be sampled without degenerate triangles.
    tessLevelOuter = combinedOuter;
    if (tessOuterHi[0] > 0) {
        tessLevelOuter[0] =
            OsdRoundUpOdd(tessOuterLo[0]) + OsdRoundUpOdd(tessOuterHi[0]);
        combinedOuter = max(float4(3,3,3,3), combinedOuter);
    }
    if (tessOuterHi[1] > 0) {
        tessLevelOuter[1] =
            OsdRoundUpOdd(tessOuterLo[1]) + OsdRoundUpOdd(tessOuterHi[1]);
        combinedOuter = max(float4(3,3,3,3), combinedOuter);
    }
    if (tessOuterHi[2] > 0) {
        tessLevelOuter[2] =
            OsdRoundUpOdd(tessOuterLo[2]) + OsdRoundUpOdd(tessOuterHi[2]);
        combinedOuter = max(float4(3,3,3,3), combinedOuter);
    }
    if (tessOuterHi[3] > 0) {
        tessLevelOuter[3] =
            OsdRoundUpOdd(tessOuterLo[3]) + OsdRoundUpOdd(tessOuterHi[3]);
        combinedOuter = max(float4(3,3,3,3), combinedOuter);
    }
#else //OSD_FRACTIONAL_ODD_SPACING
    // Round equally spaced transition edge levels before combining.
    tessOuterLo = round(tessOuterLo);
    tessOuterHi = round(tessOuterHi);
    float4 combinedOuter = tessOuterLo + tessOuterHi;
    tessLevelOuter = combinedOuter;
#endif //OSD_FRACTIONAL_ODD_SPACING
    // Inner levels are the averages the corresponding outer levels.
    tessLevelInner[0] = (combinedOuter[1] + combinedOuter[3]) * 0.5;
    tessLevelInner[1] = (combinedOuter[0] + combinedOuter[2]) * 0.5;
static float OsdComputeTessLevel(const float OsdTessLevel, const float4x4 OsdProjectionMatrix, const float4x4 OsdModelViewMatrix, float3 p0, float3 p1)
    // Adaptive factor can be any computation that depends only on arg values.
    // Project the diameter of the edge's bounding sphere instead of using the
    // length of the projected edge itself to avoid problems near silhouettes.
    float3 center = (p0 + p1) / 2.0;
    float diameter = distance(p0, p1);
    float projLength = OsdComputePostProjectionSphereExtent(OsdProjectionMatrix, center, diameter);
    float tessLevel = max(1.0, OsdTessLevel * projLength);
    // We restrict adaptive tessellation levels to half of the device
    // supported maximum because transition edges are split into two
    // halfs and the sum of the two corresponding levels must not exceed
    // the device maximum. We impose this limit even for non-transition
    // edges because a non-transition edge must be able to match up with
    // one half of the transition edge of an adjacent transition patch.
    return min(tessLevel, (float)(OSD_MAX_TESS_LEVEL / 2));
static void OsdGetTessLevelsUniform(const float OsdTessLevel, int3 patchParam,
                        thread float4& tessOuterLo, thread float4& tessOuterHi)
    // Uniform factors are simple powers of two for each level.
    // The maximum here can be increased if we know the maximum
    // refinement level of the mesh:
    //     min(OSD_MAX_TESS_LEVEL, pow(2, MaximumRefinementLevel-1)
    int refinementLevel = OsdGetPatchRefinementLevel(patchParam);
    float tessLevel = min(OsdTessLevel, ((float)OSD_MAX_TESS_LEVEL / 2)) /
                        pow(2, refinementLevel - 1.0f);
//    float tessLevel = min(OsdTessLevel, (float)OSD_MAX_TESS_LEVEL);
//    if(refinementLevel != 0)
//         tessLevel /= (1 << (refinementLevel - 1));
//    else
//    {
//        tessLevel /= pow(2.0, (0 - 1));
//        tessLevel /= pow(2.0, (refinementLevel - 1));
//    }
    // tessLevels of transition edge should be clamped to 2.
    int transitionMask = OsdGetPatchTransitionMask(patchParam);
    float4 tessLevelMin = float4(1)
    + float4(((transitionMask & 8) >> 3),
             ((transitionMask & 1) >> 0),
             ((transitionMask & 2) >> 1),
             ((transitionMask & 4) >> 2));
//    tessLevelMin =  (tessLevelMin - 1.0) * 2.0f + 1.0;
//    tessLevelMin = float4(OsdTessLevel);
    tessOuterLo = max(float4(tessLevel,tessLevel,tessLevel,tessLevel),
                      tessLevelMin);
    tessOuterHi = float4(0,0,0,0);
//    tessOuterLo.x = refinementLevel;
static void OsdGetTessLevelsRefinedPoints(const float OsdTessLevel,
                              const float4x4 OsdProjectionMatrix, const float4x4 OsdModelViewMatrix,
                              float3 cp[16], int3 patchParam,
                              thread float4& tessOuterLo, thread float4& tessOuterHi)
    // Each edge of a transition patch is adjacent to one or two patches
    // at the next refined level of subdivision. We compute the corresponding
    // vertex-vertex and edge-vertex refined points along the edges of the
    // patch using Catmull-Clark subdivision stencil weights.
    // For simplicity, we let the optimizer discard unused computation.
    float3 vv0 = (cp[0] + cp[2] + cp[8] + cp[10]) * 0.015625 +
    (cp[1] + cp[4] + cp[6] + cp[9]) * 0.09375 + cp[5] * 0.5625;
    float3 ev01 = (cp[1] + cp[2] + cp[9] + cp[10]) * 0.0625 +
    (cp[5] + cp[6]) * 0.375;
    float3 vv1 = (cp[1] + cp[3] + cp[9] + cp[11]) * 0.015625 +
    (cp[2] + cp[5] + cp[7] + cp[10]) * 0.09375 + cp[6] * 0.5625;
    float3 ev12 = (cp[5] + cp[7] + cp[9] + cp[11]) * 0.0625 +
    (cp[6] + cp[10]) * 0.375;
    float3 vv2 = (cp[5] + cp[7] + cp[13] + cp[15]) * 0.015625 +
    (cp[6] + cp[9] + cp[11] + cp[14]) * 0.09375 + cp[10] * 0.5625;
    float3 ev23 = (cp[5] + cp[6] + cp[13] + cp[14]) * 0.0625 +
    (cp[9] + cp[10]) * 0.375;
    float3 vv3 = (cp[4] + cp[6] + cp[12] + cp[14]) * 0.015625 +
    (cp[5] + cp[8] + cp[10] + cp[13]) * 0.09375 + cp[9] * 0.5625;
    float3 ev03 = (cp[4] + cp[6] + cp[8] + cp[10]) * 0.0625 +
    (cp[5] + cp[9]) * 0.375;
    tessOuterLo = float4(0,0,0,0);
    tessOuterHi = float4(0,0,0,0);
    int transitionMask = OsdGetPatchTransitionMask(patchParam);
    if ((transitionMask & 8) != 0) {
        tessOuterLo[0] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, vv0, ev03);
        tessOuterHi[0] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, vv3, ev03);
    } else {
        tessOuterLo[0] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cp[5], cp[9]);
    }
    if ((transitionMask & 1) != 0) {
        tessOuterLo[1] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, vv0, ev01);
        tessOuterHi[1] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, vv1, ev01);
    } else {
        tessOuterLo[1] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cp[5], cp[6]);
    }
    if ((transitionMask & 2) != 0) {
        tessOuterLo[2] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, vv1, ev12);
        tessOuterHi[2] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, vv2, ev12);
    } else {
        tessOuterLo[2] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cp[6], cp[10]);
    }
    if ((transitionMask & 4) != 0) {
        tessOuterLo[3] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, vv3, ev23);
        tessOuterHi[3] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, vv2, ev23);
    } else {
        tessOuterLo[3] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cp[9], cp[10]);
    }
static float3 miniMul(float4x4 a, float3 b)
    float3 r;
    r.x = a[0][0] * b[0] + a[1][0] * b[1] + a[2][0] * b[2] + a[3][0];
    r.y = a[0][1] * b[0] + a[1][1] * b[1] + a[2][1] * b[2] + a[3][1];
    r.z = a[0][2] * b[0] + a[1][2] * b[1] + a[2][2] * b[2] + a[3][2];
    return r;
static void OsdGetTessLevelsLimitPoints(const float OsdTessLevel, const float4x4 OsdProjectionMatrix, const float4x4 OsdModelViewMatrix,
                            device OsdPerPatchVertexBezier* cpBezier,
                            int3 patchParam, thread float4& tessOuterLo, thread float4& tessOuterHi)
    // Each edge of a transition patch is adjacent to one or two patches
    // at the next refined level of subdivision. When the patch control
    // points have been converted to the Bezier basis, the control points
    // at the four corners are on the limit surface (since a Bezier patch
    // interpolates its corner control points). We can compute an adaptive
    // tessellation level for transition edges on the limit surface by
    // evaluating a limit position at the mid point of each transition edge.
    tessOuterLo = float4(0,0,0,0);
    tessOuterHi = float4(0,0,0,0);
    int transitionMask = OsdGetPatchTransitionMask(patchParam);
#if OSD_PATCH_ENABLE_SINGLE_CREASE
    // PERFOMANCE: we just need to pick the correct corner points from P, P1, P2
    float3 p0 = OsdEvalBezier(cpBezier, patchParam, float2(0.0, 0.0));
    float3 p3 = OsdEvalBezier(cpBezier, patchParam, float2(1.0, 0.0));
    float3 p12 = OsdEvalBezier(cpBezier, patchParam, float2(0.0, 1.0));
    float3 p15 = OsdEvalBezier(cpBezier, patchParam, float2(1.0, 1.0));
    p0 = miniMul(OsdModelViewMatrix, p0);
    p3 = miniMul(OsdModelViewMatrix, p3);
    p12 = miniMul(OsdModelViewMatrix, p12);
    p15 = miniMul(OsdModelViewMatrix, p15);
    thread float3 * tPt;
    float3 ev;
    if ((transitionMask & 8) != 0) { // EVO3
        ev = OsdEvalBezier(cpBezier, patchParam, float2(0.0, 0.5));
        ev = miniMul(OsdModelViewMatrix, ev);
        tPt = &ev;
        tessOuterHi[0] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,p12, ev);
    } else {
        tPt = &p12;
    }
    tessOuterLo[0] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,p0, *tPt);
    
    if ((transitionMask & 1) != 0) { // EV01
        ev = OsdEvalBezier(cpBezier, patchParam, float2(0.5, 0.0));
        ev = miniMul(OsdModelViewMatrix, ev);
        tPt = &ev;
        tessOuterHi[1] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,p3, ev);
    } else {
        tPt = &p3;
    }
    tessOuterLo[1] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,p0, *tPt);
    
    if ((transitionMask & 2) != 0) { // EV12
        ev = OsdEvalBezier(cpBezier, patchParam, float2(1.0, 0.5));
        ev = miniMul(OsdModelViewMatrix, ev);
        tPt = &ev;
        tessOuterHi[2] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,p15, ev);
    } else {
        tPt = &p15;
    }
    tessOuterLo[2] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,p3, *tPt);
    
    if ((transitionMask & 4) != 0) { // EV23
        ev = OsdEvalBezier(cpBezier, patchParam, float2(0.5, 1.0));
        ev = miniMul(OsdModelViewMatrix, ev);
        tPt = &ev;
        tessOuterHi[3] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,p15, ev);
    } else {
        tPt = &p15;
    }
    tessOuterLo[3] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,p12, *tPt);
#else // OSD_PATCH_ENABLE_SINGLE_CREASE
    float3 p0 = OsdEvalBezier(cpBezier, patchParam, float2(0.0, 0.5));
    float3 p3 = OsdEvalBezier(cpBezier, patchParam, float2(0.5, 0.0));
    float3 p12 = OsdEvalBezier(cpBezier, patchParam, float2(1.0, 0.5));
    float3 p15 = OsdEvalBezier(cpBezier, patchParam, float2(0.5, 1.0));
    p0 = miniMul(OsdModelViewMatrix, p0);
    p3 = miniMul(OsdModelViewMatrix, p3);
    p12 = miniMul(OsdModelViewMatrix, p12);
    p15 = miniMul(OsdModelViewMatrix, p15);
    float3 c00 = miniMul(OsdModelViewMatrix, float3(cpBezier[0].P));
    float3 c12 = miniMul(OsdModelViewMatrix, float3(cpBezier[12].P));
    float3 c03 = miniMul(OsdModelViewMatrix, float3(cpBezier[3].P));
    float3 c15 = miniMul(OsdModelViewMatrix, float3(cpBezier[15].P));
    
    if ((transitionMask & 8) != 0) {
        tessOuterLo[0] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c00, p0);
        tessOuterHi[0] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c12, p0);
    } else {
        tessOuterLo[0] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c00, c12);
    }
    if ((transitionMask & 1) != 0) {
        tessOuterLo[1] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c00, p3);
        tessOuterHi[1] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c03, p3);
    } else {
        tessOuterLo[1] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c00, c03);
    }
    if ((transitionMask & 2) != 0) {
        tessOuterLo[2] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c03, p12);
        tessOuterHi[2] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c15, p12);
    } else {
        tessOuterLo[2] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c03, c15);
    }
    if ((transitionMask & 4) != 0) {
        tessOuterLo[3] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c12, p15);
        tessOuterHi[3] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c15, p15);
    } else {
        tessOuterLo[3] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c12, c15);
    }
#endif
static void OsdGetTessLevelsUniform(const float OsdTessLevel, int3 patchParam,
                        thread float4& tessLevelOuter, thread float2& tessLevelInner,
                        thread float4& tessOuterLo, thread float4& tessOuterHi)
    OsdGetTessLevelsUniform(OsdTessLevel, patchParam, tessOuterLo, tessOuterHi);
    OsdComputeTessLevels(tessOuterLo, tessOuterHi, tessLevelOuter, tessLevelInner);
static void OsdGetTessLevelsAdaptiveRefinedPoints(const float OsdTessLevel, const float4x4 OsdProjectionMatrix, const float4x4 OsdModelViewMatrix,
                                      float3 cpRefined[16], int3 patchParam,
                                      thread float4& tessLevelOuter, thread float2& tessLevelInner,
                                      thread float4& tessOuterLo, thread float4& tessOuterHi)
    OsdGetTessLevelsRefinedPoints(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cpRefined, patchParam, tessOuterLo, tessOuterHi);
    OsdComputeTessLevels(tessOuterLo, tessOuterHi,
                         tessLevelOuter, tessLevelInner);
static void OsdGetTessLevelsAdaptiveLimitPoints(const float OsdTessLevel, const float4x4 OsdProjectionMatrix, const float4x4 OsdModelViewMatrix,
                                    device OsdPerPatchVertexBezier* cpBezier,
                                    int3 patchParam,
                                    thread float4& tessLevelOuter, thread float2& tessLevelInner,
                                    thread float4& tessOuterLo, thread float4& tessOuterHi)
    OsdGetTessLevelsLimitPoints(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cpBezier, patchParam, tessOuterLo, tessOuterHi);
    OsdComputeTessLevels(tessOuterLo, tessOuterHi,
                         tessLevelOuter, tessLevelInner);
static void OsdGetTessLevels(const float OsdTessLevel, const float4x4 OsdProjectionMatrix, const float4x4 OsdModelViewMatrix,
                 float3 cp0, float3 cp1, float3 cp2, float3 cp3,
                 int3 patchParam,
                 thread float4& tessLevelOuter, thread float2& tessLevelInner)
    float4 tessOuterLo = float4(0,0,0,0);
    float4 tessOuterHi = float4(0,0,0,0);
    cp0 = mul(OsdModelViewMatrix, float4(cp0, 1.0)).xyz;
    cp1 = mul(OsdModelViewMatrix, float4(cp1, 1.0)).xyz;
    cp2 = mul(OsdModelViewMatrix, float4(cp2, 1.0)).xyz;
    cp3 = mul(OsdModelViewMatrix, float4(cp3, 1.0)).xyz;
#if OSD_ENABLE_SCREENSPACE_TESSELLATION
    tessOuterLo[0] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cp0, cp1);
    tessOuterLo[1] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cp0, cp3);
    tessOuterLo[2] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cp2, cp3);
    tessOuterLo[3] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cp1, cp2);
    tessOuterHi = float4(0,0,0,0);
#else //OSD_ENABLE_SCREENSPACE_TESSELLATION
    OsdGetTessLevelsUniform(OsdTessLevel, patchParam, tessOuterLo, tessOuterHi);
#endif //OSD_ENABLE_SCREENSPACE_TESSELLATION
    OsdComputeTessLevels(tessOuterLo, tessOuterHi,
                         tessLevelOuter, tessLevelInner);
#if OSD_FRACTIONAL_EVEN_SPACING || OSD_FRACTIONAL_ODD_SPACING
static float OsdGetTessFractionalSplit(float t, float level, float levelUp)
    // Fractional tessellation of an edge will produce n segments where n
    // is the tessellation level of the edge (level) rounded up to the
    // nearest even or odd integer (levelUp). There will be n-2 segments of
    // equal length (dx1) and two additional segments of equal length (dx0)
    // that are typically shorter than the other segments. The two additional
    // segments should be placed symmetrically on opposite sides of the
    // edge (offset).
#if OSD_FRACTIONAL_EVEN_SPACING
    if (level <= 2) return t;
    float base = pow(2.0,floor(log2(levelUp)));
    float offset = 1.0/(int(2*base-levelUp)/2 & int(base/2-1));
#elif OSD_FRACTIONAL_ODD_SPACING
    if (level <= 1) return t;
    float base = pow(2.0,floor(log2(levelUp)));
    float offset = 1.0/(((int(2*base-levelUp)/2+1) & int(base/2-1))+1);
#endif //OSD_FRACTIONAL_ODD_SPACING
    float dx0 = (1.0 - (levelUp-level)/2) / levelUp;
    float dx1 = (1.0 - 2.0*dx0) / (levelUp - 2.0*ceil(dx0));
    if (t < 0.5) {
        float x = levelUp/2 - round(t*levelUp);
        return 0.5 - (x*dx1 + int(x*offset > 1) * (dx0 - dx1));
    } else if (t > 0.5) {
        float x = round(t*levelUp) - levelUp/2;
        return 0.5 + (x*dx1 + int(x*offset > 1) * (dx0 - dx1));
    } else {
        return t;
    }
#endif //OSD_FRACTIONAL_EVEN_SPACING || OSD_FRACTIONAL_ODD_SPACING
static float OsdGetTessTransitionSplit(float t, float lo, float hi )
#if OSD_FRACTIONAL_EVEN_SPACING
  float loRoundUp = OsdRoundUpEven(lo);
  float hiRoundUp = OsdRoundUpEven(hi);
  // Convert the parametric t into a segment index along the combined edge.
  float ti = round(t * (loRoundUp + hiRoundUp));
  if (ti <= loRoundUp) {
      float t0 = ti / loRoundUp;
      return OsdGetTessFractionalSplit(t0, lo, loRoundUp) * 0.5;
   } else {
      float t1 = (ti - loRoundUp) / hiRoundUp;
      return OsdGetTessFractionalSplit(t1, hi, hiRoundUp) * 0.5 + 0.5;
    }
#elif OSD_FRACTIONAL_ODD_SPACING
  float loRoundUp = OsdRoundUpOdd(lo);
  float hiRoundUp = OsdRoundUpOdd(hi);
  // Convert the parametric t into a segment index along the combined edge.
  // The +1 below is to account for the extra segment produced by the
  // tessellator since the sum of two odd tess levels will be rounded
  // up by one to the next odd integer tess level.
  float ti = (t * (loRoundUp + hiRoundUp + 1));
  OSD_UV_CORRECTION
  ti = round(ti);
  if (ti <= loRoundUp) {
      float t0 = ti / loRoundUp;
      return OsdGetTessFractionalSplit(t0, lo, loRoundUp) * 0.5;
  } else if (ti > (loRoundUp+1)) {
      float t1 = (ti - (loRoundUp+1)) / hiRoundUp;
      return OsdGetTessFractionalSplit(t1, hi, hiRoundUp) * 0.5 + 0.5;
  } else {
      return 0.5;
#else //OSD_FRACTIONAL_ODD_SPACING
  // Convert the parametric t into a segment index along the combined edge.
  float ti = round(t * (lo + hi));
  if (ti <= lo) {
      return (ti / lo) * 0.5;
  } else {
      return ((ti - lo) / hi) * 0.5 + 0.5;
#endif //OSD_FRACTIONAL_ODD_SPACING
static float2 OsdGetTessParameterization(float2 uv, float4 tessOuterLo, float4 tessOuterHi)
    float2 UV = uv;
if (UV.x == 0 && tessOuterHi[0] > 0)
UV.y = OsdGetTessTransitionSplit(UV.y, tessOuterLo[0], tessOuterHi[0]);
else if (UV.y == 0 && tessOuterHi[1] > 0)
UV.x = OsdGetTessTransitionSplit(UV.x, tessOuterLo[1], tessOuterHi[1]);
else if (UV.x == 1 && tessOuterHi[2] > 0)
UV.y = OsdGetTessTransitionSplit(UV.y, tessOuterLo[2], tessOuterHi[2]);
else if (UV.y == 1 && tessOuterHi[3] > 0)
UV.x = OsdGetTessTransitionSplit(UV.x, tessOuterLo[3], tessOuterHi[3]);
    return UV;
static int4 OsdGetPatchCoord(int3 patchParam)
    int faceId = OsdGetPatchFaceId(patchParam);
    int faceLevel = OsdGetPatchFaceLevel(patchParam);
    int2 faceUV = OsdGetPatchFaceUV(patchParam);
    return int4(faceUV.x, faceUV.y, faceLevel, faceId);
static float4 OsdInterpolatePatchCoord(float2 localUV, int3 patchParam)
    int4 perPrimPatchCoord = OsdGetPatchCoord(patchParam);
    int faceId = perPrimPatchCoord.w;
    int faceLevel = perPrimPatchCoord.z;
    float2 faceUV = float2(perPrimPatchCoord.x, perPrimPatchCoord.y);
    float2 uv = localUV/faceLevel + faceUV/faceLevel;
    // add 0.5 to integer values for more robust interpolation
    return float4(uv.x, uv.y, faceLevel+0.5, faceId+0.5);
// ----------------------------------------------------------------------------
// GregoryBasis
// ----------------------------------------------------------------------------
static void OsdComputePerPatchVertexGregoryBasis(int3 patchParam, int ID, float3 cv,
                                     device OsdPerPatchVertexGregoryBasis& result)
    result.P = cv;
// Regular BSpline to Bezier
constant float4x4 Q(
                    float4(1.f/6.f, 4.f/6.f, 1.f/6.f, 0.f),
                    float4(0.f,     4.f/6.f, 2.f/6.f, 0.f),
                    float4(0.f,     2.f/6.f, 4.f/6.f, 0.f),
                    float4(0.f,     1.f/6.f, 4.f/6.f, 1.f/6.f)
                    );
// Infinitely Sharp (boundary)
constant float4x4 Mi(
                     float4(1.f/6.f, 4.f/6.f, 1.f/6.f, 0.f),
                     float4(0.f,     4.f/6.f, 2.f/6.f, 0.f),
                     float4(0.f,     2.f/6.f, 4.f/6.f, 0.f),
                     float4(0.f,     0.f,     1.f,     0.f)
                     );
    
static float4x4 OsdComputeMs2(float sharpness, float factor)
    float s = exp2(sharpness);
    float s2 = s*s;
    float s3 = s2*s;
    float sx6 = s*6.0;
    float sx6m2 = sx6 - 2;
    float sfrac1 = 1-s;
    float ssub1 = s-1;
    float ssub1_2 = ssub1 * ssub1;
    float div6 = 1.0/6.0;
    
    float4x4 m(
               float4(0, s + 1 + 3*s2 - s3, 7*s - 2 - 6*s2 + 2*s3,    sfrac1 * ssub1_2),
               float4(0,      1 + 2*s + s2,         sx6m2 - 2*s2,             ssub1_2),
               float4(0,               1+s,                sx6m2,              sfrac1),
               float4(0,                 1,                sx6m2,                 1));
    
    m *= factor * (1/sx6);
    
    m[0][0] = div6 * factor;
    
    return m;
// ----------------------------------------------------------------------------
// BSpline
// ----------------------------------------------------------------------------
// convert BSpline cv to Bezier cv
template<typename VertexType> //VertexType should be some type that implements float3 VertexType::GetPosition()
static void OsdComputePerPatchVertexBSpline(int3 patchParam, unsigned ID, threadgroup VertexType* cv, device OsdPerPatchVertexBezier& result)
    int i = ID%4;
    int j = ID/4;
#if OSD_PATCH_ENABLE_SINGLE_CREASE
    float3 P  = float3(0,0,0); // 0 to 1-2^(-Sf)
    float3 P1 = float3(0,0,0); // 1-2^(-Sf) to 1-2^(-Sc)
    float3 P2 = float3(0,0,0); // 1-2^(-Sc) to 1
    float sharpness = OsdGetPatchSharpness(patchParam);
    int boundaryMask = OsdGetPatchBoundaryMask(patchParam);
    if (sharpness > 0 && (boundaryMask & 15))
    {
        float Sf = floor(sharpness);
        float Sc = ceil(sharpness);
        float Sr = fract(sharpness);
        float4x4 Mj = OsdComputeMs2(Sf, 1-Sr);
        float4x4 Ms = Mj;
        Mj += (Sr * Mi);
        Ms += OsdComputeMs2(Sc, Sr);
#if USE_PTVS_SHARPNESS
#else
        float s0 = 1 - exp2(-Sf);
        float s1 = 1 - exp2(-Sc);
        result.vSegments = float2(s0, s1);
#endif
        
        bool isBoundary[2];
        isBoundary[0] = (((boundaryMask & 8) != 0) || ((boundaryMask & 2) != 0)) ? true : false;
        isBoundary[1] = (((boundaryMask & 4) != 0) || ((boundaryMask & 1) != 0)) ? true : false;
        bool needsFlip[2];
        needsFlip[0] = (boundaryMask & 8) ? true : false;
        needsFlip[1] = (boundaryMask & 1) ? true : false;
        float3 Hi[4], Hj[4], Hs[4];
        
        if (isBoundary[0])
        {
            int t[4] = {0,1,2,3};
            int ti = i, step = 1, start = 0;
            if (needsFlip[0]) {
                t[0] = 3; t[1] = 2; t[2] = 1; t[3] = 0;
                ti = 3-i;
                start = 3; step = -1;
            }
            for (int l=0; l<4; ++l) {
                Hi[l] = Hj[l] = Hs[l] = float3(0,0,0);
                for (int k=0, tk = start; k<4; ++k, tk+=step) {
                    float3 p = cv[l*4 + k].GetPosition();
                    Hi[l] += Mi[ti][tk] * p;
                    Hj[l] += Mj[ti][tk] * p;
                    Hs[l] += Ms[ti][tk] * p;
                }
            }
        }
        else
        {
            for (int l=0; l<4; ++l) {
                Hi[l] = Hj[l] = Hs[l] = float3(0,0,0);
                for (int k=0; k<4; ++k) {
                    float3 p = cv[l*4 + k].GetPosition();
                    float3 val = Q[i][k] * p;
                    Hi[l] += val;
                    Hj[l] += val;
                    Hs[l] += val;
                }
            }
        }
        {
            int t[4] = {0,1,2,3};
            int tj = j, step = 1, start = 0;
            if (needsFlip[1]) {
                t[0] = 3; t[1] = 2; t[2] = 1; t[3] = 0;
                tj = 3-j;
                start = 3; step = -1;
            }
            for (int k=0, tk = start; k<4; ++k, tk+=step) {
                if (isBoundary[1])
                {
                    P  += Mi[tj][tk]*Hi[k];
                    P1 += Mj[tj][tk]*Hj[k];
                    P2 += Ms[tj][tk]*Hs[k];
                }
                else
                {
                    P  += Q[j][k]*Hi[k];
                    P1 += Q[j][k]*Hj[k];
                    P2 += Q[j][k]*Hs[k];
                }
            }
        }
#if CFX_OPTIMIZE_OPENSUBDIV_STORAGE
    result.P  = half3(P);
    result.P1 = half3(P1);
    result.P2 = half3(P2);
#else
    result.P  = P;
    result.P1 = P1;
    result.P2 = P2;
#endif //CFX_OPTIMIZE_OPENSUBDIV_STORAGE
    } else {
#if USE_PTVS_SHARPNESS
#else
#if CFX_OPTIMIZE_OPENSUBDIV_STORAGE
        result.vSegments = half2(0, 0);
#else
        result.vSegments = float2(0, 0);
#endif //CFX_OPTIMIZE_OPENSUBDIV_STORAGE
#endif
        OsdComputeBSplineBoundaryPoints(cv, patchParam);
    float3 Hi[4];
    for (int l=0; l<4; ++l) {
        Hi[l] = float3(0,0,0);
        for (int k=0; k<4; ++k) {
            Hi[l] += Q[i][k] * cv[l*4 + k].GetPosition();
        }
    }
    for (int k=0; k<4; ++k) {
        P += Q[j][k]*Hi[k];
    }
        
#if CFX_OPTIMIZE_OPENSUBDIV_STORAGE
    result.P  = half3(P);
    result.P1 = half3(P);
    result.P2 = half3(P);
#else
    result.P  = P;
    result.P1 = P;
    result.P2 = P;
#endif //CFX_OPTIMIZE_OPENSUBDIV_STORAGE
#else
    OsdComputeBSplineBoundaryPoints(cv, patchParam);
    float3 H[4];
    for (int l=0; l<4; ++l) {
        H[l] = float3(0,0,0);
        for(int k=0; k<4; ++k) {
            H[l] += Q[i][k] * (cv + l*4 + k)->GetPosition();
        }
    }
    {
        float3 P = float3(0,0,0);
        for (int k=0; k<4; ++k){
            P += Q[j][k]*H[k];
        }
#if CFX_OPTIMIZE_OPENSUBDIV_STORAGE
        result.P = half3(P);
#else
        result.P = P;
#endif
    }
#endif
template<typename PerPatchVertexBezier>
static void OsdEvalPatchBezier(int3 patchParam, float2 UV,
                   PerPatchVertexBezier cv,
                   thread float3& P, thread float3& dPu, thread float3& dPv,
                   thread float3& N, thread float3& dNu, thread float3& dNv,
                   thread float2& vSegments)
#if OSD_COMPUTE_NORMAL_DERIVATIVES
    float B[4], D[4], C[4];
    float3 BUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)},
    DUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)},
    CUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)};
    OsdUnivar4x4(UV.x, B, D, C);
#else
    float B[4], D[4];
    float3 BUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)},
    DUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)};
    OsdUnivar4x4(UV.x, B, D);
#endif
    // ----------------------------------------------------------------
#if OSD_PATCH_ENABLE_SINGLE_CREASE
#if USE_PTVS_SHARPNESS
    float sharpness = OsdGetPatchSharpness(patchParam);
    float Sf = floor(sharpness);
    float Sc = ceil(sharpness);
    float s0 = 1 - exp2(-Sf);
    float s1 = 1 - exp2(-Sc);
    vSegments = float2(s0, s1);
#else //USE_PTVS_SHARPNESS
    vSegments = cv[0].vSegments;
#endif //USE_PTVS_SHARPNESS
    float s = OsdGetPatchSingleCreaseSegmentParameter(patchParam, UV);
    for (int i=0; i<4; ++i) {
        for (int j=0; j<4; ++j) {
            int k = 4*i + j;
            float3 A = (s <= vSegments.x) ? float3(cv[k].P)
            :   ((s <= vSegments.y) ?  float3(cv[k].P1)
                 :  float3(cv[k].P2));
            BUCP[i] += A * B[j];
            DUCP[i] += A * D[j];
#if OSD_COMPUTE_NORMAL_DERIVATIVES
            CUCP[i] += A * C[j];
#endif //OSD_COMPUTE_NORMAL_DERIVATIVES
        }
    }
#else //OSD_PATCH_ENABLE_SINGLE_CREASE
    // ----------------------------------------------------------------
    for (int i=0; i<4; ++i) {
        for (int j=0; j<4; ++j) {
            float3 A = float3(cv[4*i + j].P);
            BUCP[i] += A * B[j];
            DUCP[i] += A * D[j];
#if OSD_COMPUTE_NORMAL_DERIVATIVES
            CUCP[i] += A * C[j];
#endif //OSD_COMPUTE_NORMAL_DERIVATIVES
        }
    }
#endif //OSD_PATCH_ENABLE_SINGLE_CREASE
    // ----------------------------------------------------------------
#if OSD_COMPUTE_NORMAL_DERIVATIVES
    // used for weingarten term
    OsdUnivar4x4(UV.y, B, D, C);
    P = B[0] * BUCP[0];
    dPu = B[0] * DUCP[0];
    dPv = D[0] * BUCP[0];
    float3 dUU = B[0] * CUCP[0];
    float3 dVV = C[0] * BUCP[0];
    float3 dUV = D[0] * DUCP[0];
    for (int k=1; k<4; ++k) {
        P   += B[k] * BUCP[k];
        dPu += B[k] * DUCP[k];
        dPv += D[k] * BUCP[k];
        dUU += B[k] * CUCP[k];
        dVV += C[k] * BUCP[k];
        dUV += D[k] * DUCP[k];
    }
    int level = OsdGetPatchFaceLevel(patchParam);
    dPu *= 3 * level;
    dPv *= 3 * level;
    dUU *= 6 * level;
    dVV *= 6 * level;
    dUV *= 9 * level;
    float3 n = cross(dPu, dPv);
    float ln = 1.0 / length(n);
    N = ln * n;
    float E = dot(dPu, dPu);
    float F = dot(dPu, dPv);
    float G = dot(dPv, dPv);
    float e = dot(N, dUU);
    float f = dot(N, dUV);
    float g = dot(N, dVV);
    float EGFF = 1.0 / (E*G - F*F);
    dNu = (f*F-e*G) * EGFF * dPu + (e*F-f*E) * EGFF * dPv;
    dNv = (g*F-f*G) * EGFF * dPu + (f*F-g*E) * EGFF * dPv;
    float powrn = 1.0 / powr(dot(n,n), 1.5);
    dNu = dNu * ln - n * (dot(dNu,n) * powrn);
    dNv = dNv * ln - n * (dot(dNv,n) * powrn);
#else //OSD_COMPUTE_NORMAL_DERIVATIVES
    OsdUnivar4x4(UV.y, B, D);
    P = B[0] * BUCP[0];
    dPu = B[0] * DUCP[0];
    dPv = D[0] * BUCP[0];
    for (int k=1; k<4; ++k) {
        P   += B[k] * BUCP[k];
        dPu += B[k] * DUCP[k];
        dPv += D[k] * BUCP[k];
    }
    int level = OsdGetPatchFaceLevel(patchParam);
    dPu *= 3 * level;
    dPv *= 3 * level;
    N = normalize(cross(dPu, dPv));
    dNu = float3(0,0,0);
    dNv = float3(0,0,0);
#endif //OSD_COMPUTE_NORMAL_DERIVATIVES
// compute single-crease patch matrix
static float4x4 OsdComputeMs(float sharpness)
    float s = exp2(sharpness);
    float s2 = s*s;
    float s3 = s2*s;
    float4x4 m(
        float4(0, s + 1 + 3*s2 - s3, 7*s - 2 - 6*s2 + 2*s3, (1-s)*(s-1)*(s-1)),
        float4(0,       (1+s)*(1+s),        6*s - 2 - 2*s2,       (s-1)*(s-1)),
        float4(0,               1+s,               6*s - 2,               1-s),
        float4(0,                 1,               6*s - 2,                 1));
    m[0] /= (s*6.0);
    m[1] /= (s*6.0);
    m[2] /= (s*6.0);
    m[3] /= (s*6.0);
    m[0][0] = 1.0/6.0;
    return m;
// flip matrix orientation
static float4x4 OsdFlipMatrix(float4x4 m)
    return float4x4(float4(m[3][3], m[3][2], m[3][1], m[3][0]),
                    float4(m[2][3], m[2][2], m[2][1], m[2][0]),
                    float4(m[1][3], m[1][2], m[1][1], m[1][0]),
                    float4(m[0][3], m[0][2], m[0][1], m[0][0]));
static void OsdFlipMatrix(threadgroup float * src, threadgroup float * dst)
    for (int i = 0; i < 16; i++) dst[i] = src[15-i];
// ----------------------------------------------------------------------------
// Legacy Gregory
// ----------------------------------------------------------------------------
#if OSD_PATCH_GREGORY || OSD_PATCH_GREGORY_BOUNDARY
#if OSD_MAX_VALENCE<=10
constant float ef[7] = {
    0.813008, 0.500000, 0.363636, 0.287505,
    0.238692, 0.204549, 0.179211
#else
constant float ef[27] = {
    0.812816, 0.500000, 0.363644, 0.287514,
    0.238688, 0.204544, 0.179229, 0.159657,
    0.144042, 0.131276, 0.120632, 0.111614,
    0.103872, 0.09715, 0.0912559, 0.0860444,
    0.0814022, 0.0772401, 0.0734867, 0.0700842,
    0.0669851, 0.0641504, 0.0615475, 0.0591488,
    0.0569311, 0.0548745, 0.0529621
#endif
static float cosfn(int n, int j) {
    return cospi((2.0f * j)/float(n));
static float sinfn(int n, int j) {
    return sinpi((2.0f * j)/float(n));
#ifndef OSD_MAX_VALENCE
#define OSD_MAX_VALENCE 4
#endif
template<typename OsdVertexBuffer>
static float3 OsdReadVertex(int vertexIndex, OsdVertexBuffer osdVertexBuffer)
    int index = (vertexIndex /*+ OsdBaseVertex()*/);
    return osdVertexBuffer[index].position;
template<typename OsdValenceBuffer>
static int OsdReadVertexValence(int vertexID, OsdValenceBuffer osdValenceBuffer)
    int index = int(vertexID * (2 * OSD_MAX_VALENCE + 1));
    return osdValenceBuffer[index];
template<typename OsdValenceBuffer>
static int OsdReadVertexIndex(int vertexID, int valenceVertex, OsdValenceBuffer osdValenceBuffer)
    int index = int(vertexID * (2 * OSD_MAX_VALENCE + 1) + 1 + valenceVertex);
    return osdValenceBuffer[index];
template<typename OsdQuadOffsetBuffer>
static int OsdReadQuadOffset(int primitiveID, int offsetVertex, OsdQuadOffsetBuffer osdQuadOffsetBuffer)
    int index = int(4*primitiveID + offsetVertex);
    return osdQuadOffsetBuffer[index];
static void OsdComputePerVertexGregory(unsigned vID, float3 P, threadgroup OsdPerVertexGregory& v, OsdPatchParamBufferSet osdBuffers)
    v.clipFlag = short3(0,0,0);
    int ivalence = OsdReadVertexValence(vID, osdBuffers.valenceBuffer);
    v.valence = ivalence;
    int valence = abs(ivalence);
    float3 f[OSD_MAX_VALENCE];
    float3 pos = P;
    float3 opos = float3(0,0,0);
#if OSD_PATCH_GREGORY_BOUNDARY
    v.org = pos;
    int boundaryEdgeNeighbors[2];
    int currNeighbor = 0;
    int ibefore = 0;
    int zerothNeighbor = 0;
#endif
    for (int i=0; i<valence; ++i) {
        int im = (i+valence-1)%valence;
        int ip = (i+1)%valence;
        int idx_neighbor = OsdReadVertexIndex(vID, 2*i, osdBuffers.valenceBuffer);
#if OSD_PATCH_GREGORY_BOUNDARY
        bool isBoundaryNeighbor = false;
        int valenceNeighbor = OsdReadVertexValence(idx_neighbor, osdBuffers.valenceBuffer);
        if (valenceNeighbor < 0) {
            isBoundaryNeighbor = true;
            if (currNeighbor<2) {
                boundaryEdgeNeighbors[currNeighbor] = idx_neighbor;
            }
            currNeighbor++;
            if (currNeighbor == 1) {
                ibefore = i;
                zerothNeighbor = i;
            } else {
                if (i-ibefore == 1) {
                    int tmp = boundaryEdgeNeighbors[0];
                    boundaryEdgeNeighbors[0] = boundaryEdgeNeighbors[1];
                    boundaryEdgeNeighbors[1] = tmp;
                    zerothNeighbor = i;
                }
            }
        }
#endif
        float3 neighbor = OsdReadVertex(idx_neighbor, osdBuffers.vertexBuffer);
        int idx_diagonal = OsdReadVertexIndex(vID, 2*i + 1, osdBuffers.valenceBuffer);
        float3 diagonal = OsdReadVertex(idx_diagonal, osdBuffers.vertexBuffer);
        int idx_neighbor_p = OsdReadVertexIndex(vID, 2*ip, osdBuffers.valenceBuffer);
        float3 neighbor_p = OsdReadVertex(idx_neighbor_p, osdBuffers.vertexBuffer);
        int idx_neighbor_m = OsdReadVertexIndex(vID, 2*im, osdBuffers.valenceBuffer);
        float3 neighbor_m = OsdReadVertex(idx_neighbor_m, osdBuffers.vertexBuffer);
        int idx_diagonal_m = OsdReadVertexIndex(vID, 2*im + 1, osdBuffers.valenceBuffer);
        float3 diagonal_m = OsdReadVertex(idx_diagonal_m, osdBuffers.vertexBuffer);
        f[i] = (pos * float(valence) + (neighbor_p + neighbor)*2.0f + diagonal) / (float(valence)+5.0f);
        opos += f[i];
        v.r[i] = (neighbor_p-neighbor_m)/3.0f + (diagonal - diagonal_m)/6.0f;
    }
    opos /= valence;
    v.P = float4(opos, 1.0f).xyz;
    float3 e;
    v.e0 = float3(0,0,0);
    v.e1 = float3(0,0,0);
    for(int i=0; i<valence; ++i) {
        int im = (i + valence -1) % valence;
        e = 0.5f * (f[i] + f[im]);
        v.e0 += cosfn(valence, i)*e;
        v.e1 += sinfn(valence, i)*e;
    }
    v.e0 *= ef[valence - 3];
    v.e1 *= ef[valence - 3];
#if OSD_PATCH_GREGORY_BOUNDARY
    v.zerothNeighbor = zerothNeighbor;
    if (currNeighbor == 1) {
        boundaryEdgeNeighbors[1] = boundaryEdgeNeighbors[0];
    }
    if (ivalence < 0) {
        if (valence > 2) {
            v.P = (OsdReadVertex(boundaryEdgeNeighbors[0], osdBuffers.vertexBuffer) +
                   OsdReadVertex(boundaryEdgeNeighbors[1], osdBuffers.vertexBuffer) +
                   4.0f * pos)/6.0f;
        } else {
            v.P = pos;
        }
        v.e0 = (OsdReadVertex(boundaryEdgeNeighbors[0], osdBuffers.vertexBuffer) -
                OsdReadVertex(boundaryEdgeNeighbors[1], osdBuffers.vertexBuffer))/6.0;
        float k = float(float(valence) - 1.0f);    //k is the number of faces
        float c = cospi(1.0/k);
        float s = sinpi(1.0/k);
        float gamma = -(4.0f*s)/(3.0f*k+c);
        float alpha_0k = -((1.0f+2.0f*c)*sqrt(1.0f+c))/((3.0f*k+c)*sqrt(1.0f-c));
        float beta_0 = s/(3.0f*k + c);
        int idx_diagonal = OsdReadVertexIndex(vID, 2*zerothNeighbor + 1, osdBuffers.valenceBuffer);
        float3 diagonal = OsdReadVertex(idx_diagonal, osdBuffers.vertexBuffer);
        v.e1 = gamma * pos +
            alpha_0k * OsdReadVertex(boundaryEdgeNeighbors[0], osdBuffers.vertexBuffer) +
            alpha_0k * OsdReadVertex(boundaryEdgeNeighbors[1], osdBuffers.vertexBuffer) +
            beta_0 * diagonal;
        for (int x=1; x<valence - 1; ++x) {
            int curri = ((x + zerothNeighbor)%valence);
            float alpha = (4.0f*sinpi((float(x))/k))/(3.0f*k+c);
            float beta = (sinpi((float(x))/k) + sinpi((float(x+1))/k))/(3.0f*k+c);
            int idx_neighbor = OsdReadVertexIndex(vID, 2*curri, osdBuffers.valenceBuffer);
            float3 neighbor = OsdReadVertex(idx_neighbor, osdBuffers.vertexBuffer);
            idx_diagonal = OsdReadVertexIndex(vID, 2*curri + 1, osdBuffers.valenceBuffer);
            diagonal = OsdReadVertex(idx_diagonal, osdBuffers.vertexBuffer);
            v.e1 += alpha * neighbor + beta * diagonal;
        }
        v.e1 /= 3.0f;
    }
#endif
static void OsdComputePerPatchVertexGregory(int3 patchParam, unsigned ID, unsigned primitiveID,
                                threadgroup OsdPerVertexGregory* v,
                                device OsdPerPatchVertexGregory& result,
                                OsdPatchParamBufferSet osdBuffers)
    result.P = v[ID].P;
    int i = ID;
    int ip = (i+1)%4;
    int im = (i+3)%4;
    int valence = abs(v[i].valence);
    int n = valence;
    int start = OsdReadQuadOffset(primitiveID, i, osdBuffers.quadOffsetBuffer) & 0xff;
    int prev = (OsdReadQuadOffset(primitiveID, i, osdBuffers.quadOffsetBuffer) >> 8) & 0xff;
    int start_m = OsdReadQuadOffset(primitiveID, im, osdBuffers.quadOffsetBuffer) & 0xff;
    int prev_p = (OsdReadQuadOffset(primitiveID, ip, osdBuffers.quadOffsetBuffer) >> 8) & 0xff;
    int np = abs(v[ip].valence);
    int nm = abs(v[im].valence);
    // Control Vertices based on :
    // "Approximating Subdivision Surfaces with Gregory Patches
    //  for Hardware Tessellation"
    // Loop, Schaefer, Ni, Castano (ACM ToG Siggraph Asia 2009)
    //
    //  P3         e3-      e2+         P2
    //     O--------O--------O--------O
    //     |        |        |        |
    //     |        |        |        |
    //     |        | f3-    | f2+    |
    //     |        O        O        |
    // e3+ O------O            O------O e2-
    //     |     f3+          f2-     |
    //     |                          |
    //     |                          |
    //     |      f0-         f1+     |
    // e0- O------O            O------O e1+
    //     |        O        O        |
    //     |        | f0+    | f1-    |
    //     |        |        |        |
    //     |        |        |        |
    //     O--------O--------O--------O
    //  P0         e0+      e1-         P1
    //
#if OSD_PATCH_GREGORY_BOUNDARY
    float3 Em_ip;
    if (v[ip].valence < -2) {
        int j = (np + prev_p - v[ip].zerothNeighbor) % np;
        Em_ip = v[ip].P + cospi(j/float(np-1))*v[ip].e0 + sinpi(j/float(np-1))*v[ip].e1;
    } else {
        Em_ip = v[ip].P + v[ip].e0*cosfn(np, prev_p) + v[ip].e1*sinfn(np, prev_p);
    }
    float3 Ep_im;
    if (v[im].valence < -2) {
        int j = (nm + start_m - v[im].zerothNeighbor) % nm;
        Ep_im = v[im].P + cospi(j/float(nm-1))*v[im].e0 + sinpi(j/float(nm-1))*v[im].e1;
    } else {
        Ep_im = v[im].P + v[im].e0*cosfn(nm, start_m) + v[im].e1*sinfn(nm, start_m);
    }
    if (v[i].valence < 0) {
        n = (n-1)*2;
    }
    if (v[im].valence < 0) {
        nm = (nm-1)*2;
    }
    if (v[ip].valence < 0) {
        np = (np-1)*2;
    }
    if (v[i].valence > 2) {
        result.Ep = v[i].P + (v[i].e0*cosfn(n, start) + v[i].e1*sinfn(n, start));
        result.Em = v[i].P + (v[i].e0*cosfn(n, prev) +  v[i].e1*sinfn(n, prev));
        float s1=3-2*cosfn(n,1)-cosfn(np,1);
        float s2=2*cosfn(n,1);
        result.Fp = (cosfn(np,1)*v[i].P + s1*result.Ep + s2*Em_ip + v[i].r[start])/3.0f;
        s1 = 3.0f-2.0f*cospi(2.0f/float(n))-cospi(2.0f/float(nm));
        result.Fm = (cosfn(nm,1)*v[i].P + s1*result.Em + s2*Ep_im - v[i].r[prev])/3.0f;
    } else if (v[i].valence < -2) {
        int j = (valence + start - v[i].zerothNeighbor) % valence;
        result.Ep = v[i].P + cospi(j/float(valence-1))*v[i].e0 + sinpi(j/float(valence-1))*v[i].e1;
        j = (valence + prev - v[i].zerothNeighbor) % valence;
        result.Em = v[i].P + cospi(j/float(valence-1))*v[i].e0 + sinpi(j/float(valence-1))*v[i].e1;
        float3 Rp = ((-2.0f * v[i].org - 1.0f * v[im].org) + (2.0f * v[ip].org + 1.0f * v[(i+2)%4].org))/3.0f;
        float3 Rm = ((-2.0f * v[i].org - 1.0f * v[ip].org) + (2.0f * v[im].org + 1.0f * v[(i+2)%4].org))/3.0f;
        float s1 = 3-2*cosfn(n,1)-cosfn(np,1);
        float s2 = 2*cosfn(n,1);
        result.Fp = (cosfn(np,1)*v[i].P + s1*result.Ep + s2*Em_ip + v[i].r[start])/3.0f;
        s1 = 3.0f-2.0f*cospi(2.0f/float(n))-cospi(2.0f/float(nm));
        result.Fm = (cosfn(nm,1)*v[i].P + s1*result.Em + s2*Ep_im - v[i].r[prev])/3.0f;
        if (v[im].valence < 0) {
            s1 = 3-2*cosfn(n,1)-cosfn(np,1);
            result.Fp = result.Fm = (cosfn(np,1)*v[i].P + s1*result.Ep + s2*Em_ip + v[i].r[start])/3.0f;
        } else if (v[ip].valence < 0) {
            s1 = 3.0f-2.0f*cospi(2.0f/n)-cospi(2.0f/nm);
            result.Fm = result.Fp = (cosfn(nm,1)*v[i].P + s1*result.Em + s2*Ep_im - v[i].r[prev])/3.0f;
        }
    } else if (v[i].valence == -2) {
        result.Ep = (2.0f * v[i].org + v[ip].org)/3.0f;
        result.Em = (2.0f * v[i].org + v[im].org)/3.0f;
        result.Fp = result.Fm = (4.0f * v[i].org + v[(i+2)%n].org + 2.0f * v[ip].org + 2.0f * v[im].org)/9.0f;
    }
#else // not OSD_PATCH_GREGORY_BOUNDARY
    result.Ep = v[i].P + v[i].e0 * cosfn(n, start) + v[i].e1*sinfn(n, start);
    result.Em = v[i].P + v[i].e0 * cosfn(n, prev ) + v[i].e1*sinfn(n, prev );
    float3 Em_ip = v[ip].P + v[ip].e0*cosfn(np, prev_p) + v[ip].e1*sinfn(np, prev_p);
    float3 Ep_im = v[im].P + v[im].e0*cosfn(nm, start_m) + v[im].e1*sinfn(nm, start_m);
    float s1 = 3-2*cosfn(n,1)-cosfn(np,1);
    float s2 = 2*cosfn(n,1);
    result.Fp = (cosfn(np,1)*v[i].P + s1*result.Ep + s2*Em_ip + v[i].r[start])/3.0f;
    s1 = 3.0f-2.0f*cospi(2.0f/float(n))-cospi(2.0f/float(nm));
    result.Fm = (cosfn(nm,1)*v[i].P + s1*result.Em +s2*Ep_im - v[i].r[prev])/3.0f;
#endif
#endif  // OSD_PATCH_GREGORY || OSD_PATCH_GREGORY_BOUNDARY
//   Copyright 2016 Pixar
//   Licensed under the Apache License, Version 2.0 (the "Apache License")
//   with the following modification; you may not use this file except in
//   compliance with the Apache License and the following modification to it:
//   Section 6. Trademarks. is deleted and replaced with:
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor
//      and its affiliates, except as required to comply with Section 4(c) of
//      the License and to reproduce the content of the NOTICE file.
//   You may obtain a copy of the Apache License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the Apache License with the above modification is
//   distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//   KIND, either express or implied. See the Apache License for the specific
//   language governing permissions and limitations under the Apache License.
#ifndef OPENSUBDIV3_OSD_PATCH_BASIS_COMMON_H
#define OPENSUBDIV3_OSD_PATCH_BASIS_COMMON_H
#if defined(OSD_PATCH_BASIS_GLSL)
    #define OSD_FUNCTION_STORAGE_CLASS
    #define OSD_DATA_STORAGE_CLASS
    #define OSD_OPTIONAL(a) true
    #define OSD_OPTIONAL_INIT(a,b) b
    #define OSD_OUT out
    #define OSD_INOUT inout
    #define OSD_TYPE_ARRAY(elementType, identifier, arraySize) elementType identifier[arraySize]
    #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7)             elementType[](a0,a1,a2,a3,a4,a5,a6,a7)
    #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)             elementType[](a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)
#elif defined(OSD_PATCH_BASIS_HLSL)
    #define OSD_FUNCTION_STORAGE_CLASS
    #define OSD_DATA_STORAGE_CLASS
    #define OSD_OPTIONAL(a) true
    #define OSD_OPTIONAL_INIT(a,b) b
    #define OSD_OUT out
    #define OSD_INOUT inout
    #define OSD_TYPE_ARRAY(elementType, identifier, arraySize) elementType identifier[arraySize]
    #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7)             {a0,a1,a2,a3,a4,a5,a6,a7}
    #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)             {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11}
#elif defined(OSD_PATCH_BASIS_CUDA)
    #define OSD_FUNCTION_STORAGE_CLASS __device__
    #define OSD_DATA_STORAGE_CLASS
    #define OSD_OPTIONAL(a) true
    #define OSD_OPTIONAL_INIT(a,b) b
    #define OSD_OUT
    #define OSD_INOUT
    #define OSD_TYPE_ARRAY(elementType, identifier, arraySize) elementType identifier[arraySize]
    #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7)             {a0,a1,a2,a3,a4,a5,a6,a7}
    #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)             {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11}
#elif defined(OSD_PATCH_BASIS_OPENCL)
    #define OSD_FUNCTION_STORAGE_CLASS static
    #define OSD_DATA_STORAGE_CLASS
    #define OSD_OPTIONAL(a) true
    #define OSD_OPTIONAL_INIT(a,b) b
    #define OSD_OUT
    #define OSD_INOUT
    #define OSD_TYPE_ARRAY(elementType, identifier, arraySize) elementType identifier[arraySize]
    #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7)             {a0,a1,a2,a3,a4,a5,a6,a7}
    #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)             {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11}
#elif defined(OSD_PATCH_BASIS_METAL)
    #define OSD_FUNCTION_STORAGE_CLASS static
    #define OSD_DATA_STORAGE_CLASS
    #define OSD_OPTIONAL(a) true
    #define OSD_OPTIONAL_INIT(a,b) b
    #define OSD_OUT
    #define OSD_INOUT
    #define OSD_TYPE_ARRAY(elementType, identifier, arraySize) thread elementType* identifier
    #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7)             {a0,a1,a2,a3,a4,a5,a6,a7}
    #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)             {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11}
#else
    #define OSD_FUNCTION_STORAGE_CLASS static inline
    #define OSD_DATA_STORAGE_CLASS static
    #define OSD_OPTIONAL(a) (a)
    #define OSD_OPTIONAL_INIT(a,b) (a ? b : 0)
    #define OSD_OUT
    #define OSD_INOUT
    #define OSD_TYPE_ARRAY(elementType, identifier, arraySize) elementType identifier[arraySize]
    #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7)             {a0,a1,a2,a3,a4,a5,a6,a7}
    #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)             {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11}
#endif
OSD_FUNCTION_STORAGE_CLASS
void
OsdGetBezierWeights(
    float t, OSD_TYPE_ARRAY(OSD_OUT float, wP, 4), OSD_TYPE_ARRAY(OSD_OUT float, wDP, 4), OSD_TYPE_ARRAY(OSD_OUT float, wDP2, 4)) {
    // The four uniform cubic Bezier basis functions (in terms of t and its
    // complement tC) evaluated at t:
    float t2 = t*t;
    float tC = 1.0f - t;
    float tC2 = tC * tC;
    wP[0] = tC2 * tC;
    wP[1] = tC2 * t * 3.0f;
    wP[2] = t2 * tC * 3.0f;
    wP[3] = t2 * t;
    // Derivatives of the above four basis functions at t:
    if (OSD_OPTIONAL(wDP)) {
       wDP[0] = -3.0f * tC2;
       wDP[1] =  9.0f * t2 - 12.0f * t + 3.0f;
       wDP[2] = -9.0f * t2 +  6.0f * t;
       wDP[3] =  3.0f * t2;
    }
    // Second derivatives of the basis functions at t:
    if (OSD_OPTIONAL(wDP2)) {
        wDP2[0] =   6.0f * tC;
        wDP2[1] =  18.0f * t - 12.0f;
        wDP2[2] = -18.0f * t +  6.0f;
        wDP2[3] =   6.0f * t;
    }
OSD_FUNCTION_STORAGE_CLASS
void
OsdGetBSplineWeights(
    float t, OSD_TYPE_ARRAY(OSD_OUT float, wP, 4), OSD_TYPE_ARRAY(OSD_OUT float, wDP, 4), OSD_TYPE_ARRAY(OSD_OUT float, wDP2, 4)) {
    // The four uniform cubic B-Spline basis functions evaluated at t:
    const float one6th = 1.0f / 6.0f;
    float t2 = t * t;
    float t3 = t * t2;
    wP[0] = one6th * (1.0f - 3.0f*(t -      t2) -      t3);
    wP[1] = one6th * (4.0f           - 6.0f*t2  + 3.0f*t3);
    wP[2] = one6th * (1.0f + 3.0f*(t +      t2  -      t3));
    wP[3] = one6th * (                                 t3);
    // Derivatives of the above four basis functions at t:
    if (OSD_OPTIONAL(wDP)) {
        wDP[0] = -0.5f*t2 +      t - 0.5f;
        wDP[1] =  1.5f*t2 - 2.0f*t;
        wDP[2] = -1.5f*t2 +      t + 0.5f;
        wDP[3] =  0.5f*t2;
    }
    // Second derivatives of the basis functions at t:
    if (OSD_OPTIONAL(wDP2)) {
        wDP2[0] = -       t + 1.0f;
        wDP2[1] =  3.0f * t - 2.0f;
        wDP2[2] = -3.0f * t + 1.0f;
        wDP2[3] =         t;
    }
OSD_FUNCTION_STORAGE_CLASS
void
OsdGetBoxSplineWeights(float v, float w, OSD_TYPE_ARRAY(OSD_OUT float, wP, 12)) {
    float u = 1.0f - v - w;
    //
    //  The 12 basis functions of the quartic box spline (unscaled by their common
    //  factor of 1/12 until later, and formatted to make it easy to spot any
    //  typing errors):
    //
    //      15 terms for the 3 points above the triangle corners
    //       9 terms for the 3 points on faces opposite the triangle edges
    //       2 terms for the 6 points on faces opposite the triangle corners
    //
    //  Powers of each variable for notational convenience:
    float u2 = u*u;
    float u3 = u*u2;
    float u4 = u*u3;
    float v2 = v*v;
    float v3 = v*v2;
    float v4 = v*v3;
    float w2 = w*w;
    float w3 = w*w2;
    float w4 = w*w3;
    //  And now the basis functions:
    wP[ 0] = u4 + 2.0f*u3*v;
    wP[ 1] = u4 + 2.0f*u3*w;
    wP[ 8] = w4 + 2.0f*w3*u;
    wP[11] = w4 + 2.0f*w3*v;
    wP[ 9] = v4 + 2.0f*v3*w;
    wP[ 5] = v4 + 2.0f*v3*u;
    wP[ 2] = u4 + 2.0f*u3*w + 6.0f*u3*v + 6.0f*u2*v*w + 12.0f*u2*v2 +
                v4 + 2.0f*v3*w + 6.0f*v3*u + 6.0f*v2*u*w;
    wP[ 4] = w4 + 2.0f*w3*v + 6.0f*w3*u + 6.0f*w2*u*v + 12.0f*w2*u2 +
                u4 + 2.0f*u3*v + 6.0f*u3*w + 6.0f*u2*v*w;
    wP[10] = v4 + 2.0f*v3*u + 6.0f*v3*w + 6.0f*v2*w*u + 12.0f*v2*w2 +
                w4 + 2.0f*w3*u + 6.0f*w3*v + 6.0f*w3*u*v;
    wP[ 3] = v4 + 6*v3*w + 8*v3*u + 36*v2*w*u + 24*v2*u2 + 24*v*u3 +
                w4 + 6*w3*v + 8*w3*u + 36*w2*v*u + 24*w2*u2 + 24*w*u3 + 6*u4 + 60*u2*v*w + 12*v2*w2;
    wP[ 6] = w4 + 6*w3*u + 8*w3*v + 36*w2*u*v + 24*w2*v2 + 24*w*v3 +
                u4 + 6*u3*w + 8*u3*v + 36*u2*v*w + 24*u2*v2 + 24*u*v3 + 6*v4 + 60*v2*w*u + 12*w2*u2;
    wP[ 7] = u4 + 6*u3*v + 8*u3*w + 36*u2*v*w + 24*u2*w2 + 24*u*w3 +
                v4 + 6*v3*u + 8*v3*w + 36*v2*u*w + 24*v2*w2 + 24*v*w3 + 6*w4 + 60*w2*u*v + 12*u2*v2;
    for (int i = 0; i < 12; ++i) {
        wP[i] *= 1.0f / 12.0f;
    }
OSD_FUNCTION_STORAGE_CLASS
void
OsdGetBilinearPatchWeights(
        float s, float t, float dScale,
        OSD_TYPE_ARRAY(OSD_OUT float, wP, 4), OSD_TYPE_ARRAY(OSD_OUT float, wDs, 4), OSD_TYPE_ARRAY(OSD_OUT float, wDt, 4),
        OSD_TYPE_ARRAY(OSD_OUT float, wDss, 4), OSD_TYPE_ARRAY(OSD_OUT float, wDst, 4), OSD_TYPE_ARRAY(OSD_OUT float, wDtt, 4)) {
    float sC = 1.0f - s,
          tC = 1.0f - t;
    if (OSD_OPTIONAL(wP)) {
        wP[0] = sC * tC;
        wP[1] =  s * tC;
        wP[2] =  s * t;
        wP[3] = sC * t;
    }
    if (OSD_OPTIONAL(derivS && derivT)) {
        wDs[0] = -tC * dScale;
        wDs[1] =  tC * dScale;
        wDs[2] =   t * dScale;
        wDs[3] =  -t * dScale;
        wDt[0] = -sC * dScale;
        wDt[1] =  -s * dScale;
        wDt[2] =   s * dScale;
        wDt[3] =  sC * dScale;
        if (OSD_OPTIONAL(derivSS && derivST && derivTT)) {
            float d2Scale = dScale * dScale;
            for(int i=0;i<4;i++) {
                wDss[i] = 0;
                wDtt[i] = 0;
            }
            wDst[0] =  d2Scale;
            wDst[1] = -d2Scale;
            wDst[2] = -d2Scale;
            wDst[3] =  d2Scale;
        }
    }
OSD_FUNCTION_STORAGE_CLASS
void OsdAdjustBoundaryWeights(
        int boundary,
        OSD_TYPE_ARRAY(OSD_INOUT float, sWeights, 4), OSD_TYPE_ARRAY(OSD_INOUT float, tWeights, 4)) {
    if ((boundary & 1) != 0) {
        tWeights[2] -= tWeights[0];
        tWeights[1] += 2*tWeights[0];
        tWeights[0] = 0;
    }
    if ((boundary & 2) != 0) {
        sWeights[1] -= sWeights[3];
        sWeights[2] += 2*sWeights[3];
        sWeights[3] = 0;
    }
    if ((boundary & 4) != 0) {
        tWeights[1] -= tWeights[3];
        tWeights[2] += 2*tWeights[3];
        tWeights[3] = 0;
    }
    if ((boundary & 8) != 0) {
        sWeights[2] -= sWeights[0];
        sWeights[1] += 2*sWeights[0];
        sWeights[0] = 0;
    }
OSD_FUNCTION_STORAGE_CLASS
void OsdComputeTensorProductPatchWeights(float dScale, int boundary,
    OSD_TYPE_ARRAY(float, sWeights, 4), OSD_TYPE_ARRAY(float, tWeights, 4),
    OSD_TYPE_ARRAY(float, dsWeights, 4), OSD_TYPE_ARRAY(float, dtWeights, 4),
    OSD_TYPE_ARRAY(float, dssWeights, 4), OSD_TYPE_ARRAY(float, dttWeights, 4),
    OSD_TYPE_ARRAY(OSD_OUT float, wP, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDs, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDt, 16),
    OSD_TYPE_ARRAY(OSD_OUT float, wDss, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDst, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDtt, 16)) {
    if (OSD_OPTIONAL(wP)) {
        // Compute the tensor product weight of the (s,t) basis function
        // corresponding to each control vertex:
        OsdAdjustBoundaryWeights(boundary, sWeights, tWeights);
        for (int i = 0; i < 4; ++i) {
            for (int j = 0; j < 4; ++j) {
                wP[4*i+j] = sWeights[j] * tWeights[i];
            }
        }
    }
    if (OSD_OPTIONAL(derivS && derivT)) {
        // Compute the tensor product weight of the differentiated (s,t) basis
        // function corresponding to each control vertex (scaled accordingly):
        OsdAdjustBoundaryWeights(boundary, dsWeights, dtWeights);
        for (int i = 0; i < 4; ++i) {
            for (int j = 0; j < 4; ++j) {
                wDs[4*i+j] = dsWeights[j] * tWeights[i] * dScale;
                wDt[4*i+j] = sWeights[j] * dtWeights[i] * dScale;
            }
        }
        if (OSD_OPTIONAL(derivSS && derivST && derivTT)) {
            // Compute the tensor product weight of appropriate differentiated
            // (s,t) basis functions for each control vertex (scaled accordingly):
            float d2Scale = dScale * dScale;
            OsdAdjustBoundaryWeights(boundary, dssWeights, dttWeights);
            for (int i = 0; i < 4; ++i) {
                for (int j = 0; j < 4; ++j) {
                    wDss[4*i+j] = dssWeights[j] * tWeights[i] * d2Scale;
                    wDst[4*i+j] = dsWeights[j] * dtWeights[i] * d2Scale;
                    wDtt[4*i+j] = sWeights[j] * dttWeights[i] * d2Scale;
                }
            }
        }
    }
OSD_FUNCTION_STORAGE_CLASS
void OsdGetBezierPatchWeights(
    float s, float t, float dScale,
    OSD_TYPE_ARRAY(OSD_OUT float, wP, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDS, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDT, 16),
    OSD_TYPE_ARRAY(OSD_OUT float, wDSS, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDST, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDTT, 16)) {
    float sWeights[4], tWeights[4], dsWeights[4], dtWeights[4], dssWeights[4], dttWeights[4];
    OsdGetBezierWeights(s, OSD_OPTIONAL_INIT(wP, sWeights), OSD_OPTIONAL_INIT(wDS, dsWeights), OSD_OPTIONAL_INIT(wDSS, dssWeights));
    OsdGetBezierWeights(t, OSD_OPTIONAL_INIT(wP, tWeights), OSD_OPTIONAL_INIT(wDT, dtWeights), OSD_OPTIONAL_INIT(wDTT, dttWeights));
    OsdComputeTensorProductPatchWeights(dScale, /*boundary=*/0, sWeights, tWeights, dsWeights, dtWeights, dssWeights, dttWeights, wP, wDS, wDT, wDSS, wDST, wDTT);
OSD_FUNCTION_STORAGE_CLASS
void OsdGetBSplinePatchWeights(
    float s, float t, float dScale, int boundary,
    OSD_TYPE_ARRAY(OSD_OUT float, wP, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDs, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDt, 16),
    OSD_TYPE_ARRAY(OSD_OUT float, wDss, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDst, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDtt, 16)) {
    float sWeights[4], tWeights[4], dsWeights[4], dtWeights[4], dssWeights[4], dttWeights[4];
    OsdGetBSplineWeights(s, sWeights, OSD_OPTIONAL_INIT(wDS, dsWeights), OSD_OPTIONAL_INIT(wDSS, dssWeights));
    OsdGetBSplineWeights(t, tWeights, OSD_OPTIONAL_INIT(wDT, dtWeights), OSD_OPTIONAL_INIT(wDTT, dttWeights));
    OsdComputeTensorProductPatchWeights(dScale, boundary, sWeights, tWeights, dsWeights, dtWeights, dssWeights, dttWeights, wP, wDs, wDt, wDss, wDst, wDtt);
OSD_FUNCTION_STORAGE_CLASS
void OsdGetGregoryPatchWeights(
    float s, float t, float dScale,
    OSD_TYPE_ARRAY(OSD_OUT float, wP, 20), OSD_TYPE_ARRAY(OSD_OUT float, wDs, 20), OSD_TYPE_ARRAY(OSD_OUT float, wDt, 20),
    OSD_TYPE_ARRAY(OSD_OUT float, wDss, 20), OSD_TYPE_ARRAY(OSD_OUT float, wDst, 20), OSD_TYPE_ARRAY(OSD_OUT float, wDtt, 20)) {
    //
    //  P3         e3-      e2+         P2
    //     15------17-------11--------10
    //     |        |        |        |
    //     |        |        |        |
    //     |        | f3-    | f2+    |
    //     |       19       13        |
    // e3+ 16-----18           14-----12 e2-
    //     |     f3+          f2-     |
    //     |                          |
    //     |                          |
    //     |      f0-         f1+     |
    // e0- 2------4            8------6 e1+
    //     |        3        9        |
    //     |        | f0+    | f1-    |
    //     |        |        |        |
    //     |        |        |        |
    //     O--------1--------7--------5
    //  P0         e0+      e1-         P1
    //
    //  Indices of boundary and interior points and their corresponding Bezier points
    //  (this can be reduced with more direct indexing and unrolling of loops):
    //
    OSD_DATA_STORAGE_CLASS const int boundaryGregory[12] = OSD_ARRAY_12(int, 0, 1, 7, 5, 2, 6, 16, 12, 15, 17, 11, 10 );
    OSD_DATA_STORAGE_CLASS const int boundaryBezSCol[12] = OSD_ARRAY_12(int, 0, 1, 2, 3, 0, 3,  0,  3,  0,  1,  2,  3 );
    OSD_DATA_STORAGE_CLASS const int boundaryBezTRow[12] = OSD_ARRAY_12(int, 0, 0, 0, 0, 1, 1,  2,  2,  3,  3,  3,  3 );
    OSD_DATA_STORAGE_CLASS const int interiorGregory[8] = OSD_ARRAY_8(int, 3, 4,  8, 9,  13, 14,  18, 19 );
    OSD_DATA_STORAGE_CLASS const int interiorBezSCol[8] = OSD_ARRAY_8(int, 1, 1,  2, 2,   2,  2,   1,  1 );
    OSD_DATA_STORAGE_CLASS const int interiorBezTRow[8] = OSD_ARRAY_8(int, 1, 1,  1, 1,   2,  2,   2,  2 );
    //
    //  Bezier basis functions are denoted with B while the rational multipliers for the
    //  interior points will be denoted G -- so we have B(s), B(t) and G(s,t):
    //
    //  Directional Bezier basis functions B at s and t:
    float Bs[4], Bds[4], Bdss[4];
    float Bt[4], Bdt[4], Bdtt[4];
    OsdGetBezierWeights(s, Bs, OSD_OPTIONAL_INIT(wDs, Bds), OSD_OPTIONAL_INIT(wDss, Bdss));
    OsdGetBezierWeights(t, Bt, OSD_OPTIONAL_INIT(wDt, Bdt), OSD_OPTIONAL_INIT(wDtt, Bdtt));
    //  Rational multipliers G at s and t:
    float sC = 1.0f - s;
    float tC = 1.0f - t;
    //  Use <= here to avoid compiler warnings -- the sums should always be non-negative:
    float df0 = s  + t;   df0 = (df0 <= 0.0f) ? 1.0f : (1.0f / df0);
    float df1 = sC + t;   df1 = (df1 <= 0.0f) ? 1.0f : (1.0f / df1);
    float df2 = sC + tC;  df2 = (df2 <= 0.0f) ? 1.0f : (1.0f / df2);
    float df3 = s  + tC;  df3 = (df3 <= 0.0f) ? 1.0f : (1.0f / df3);
    float G[8] = OSD_ARRAY_8(float, s*df0, t*df0,  t*df1, sC*df1,  sC*df2, tC*df2,  tC*df3, s*df3 );
    //  Combined weights for boundary and interior points:
    for (int i = 0; i < 12; ++i) {
        wP[boundaryGregory[i]] = Bs[boundaryBezSCol[i]] * Bt[boundaryBezTRow[i]];
    }
    for (int i = 0; i < 8; ++i) {
        wP[interiorGregory[i]] = Bs[interiorBezSCol[i]] * Bt[interiorBezTRow[i]] * G[i];
    }
    //
    //  For derivatives, the basis functions for the interior points are rational and ideally
    //  require appropriate differentiation, i.e. product rule for the combination of B and G
    //  and the quotient rule for the rational G itself.  As initially proposed by Loop et al
    //  though, the approximation using the 16 Bezier points arising from the G(s,t) has
    //  proved adequate (and is what the GPU shaders use) so we continue to use that here.
    //
    //  An implementation of the true derivatives is provided for future reference -- it is
    //  unclear if the approximations will hold up under surface analysis involving higher
    //  order differentiation.
    //
    if (OSD_OPTIONAL(wDs && wDt)) {
        bool find_second_partials = OSD_OPTIONAL(wDs && wDst && wDtt);
        //  Remember to include derivative scaling in all assignments below:
        float d2Scale = dScale * dScale;
        //  Combined weights for boundary points -- simple (scaled) tensor products:
        for (int i = 0; i < 12; ++i) {
            int iDst = boundaryGregory[i];
            int tRow = boundaryBezTRow[i];
            int sCol = boundaryBezSCol[i];
            wDs[iDst] = Bds[sCol] * Bt[tRow] * dScale;
            wDt[iDst] = Bdt[tRow] * Bs[sCol] * dScale;
            if (find_second_partials) {
                wDss[iDst] = Bdss[sCol] * Bt[tRow] * d2Scale;
                wDst[iDst] = Bds[sCol] * Bdt[tRow] * d2Scale;
                wDtt[iDst] = Bs[sCol] * Bdtt[tRow] * d2Scale;
            }
        }
        // dclyde's note: skipping half of the product rule like this does seem to change the result a lot in my tests.
        // This is not a runtime bottleneck for cloth sims anyway so I'm just using the accurate version.
#ifndef OPENSUBDIV_GREGORY_EVAL_TRUE_DERIVATIVES
        //  Approximation to the true Gregory derivatives by differentiating the Bezier patch
        //  unique to the given (s,t), i.e. having F = (g^+ * f^+) + (g^- * f^-) as its four
        //  interior points:
        //
        //  Combined weights for interior points -- (scaled) tensor products with G+ or G-:
        for (int i = 0; i < 8; ++i) {
            int iDst = interiorGregory[i];
            int tRow = interiorBezTRow[i];
            int sCol = interiorBezSCol[i];
            wDs[iDst] = Bds[sCol] * Bt[tRow] * G[i] * dScale;
            wDt[iDst] = Bdt[tRow] * Bs[sCol] * G[i] * dScale;
            if (find_second_partials) {
                wDss[iDst] = Bdss[sCol] * Bt[tRow] * G[i] * d2Scale;
                wDst[iDst] = Bds[sCol] * Bdt[tRow] * G[i] * d2Scale;
                wDtt[iDst] = Bs[sCol] * Bdtt[tRow] * G[i] * d2Scale;
            }
        }
#else
        //  True Gregory derivatives using appropriate differentiation of composite functions:
        //
        //  Note that for G(s,t) = N(s,t) / D(s,t), all N' and D' are trivial constants (which
        //  simplifies things for higher order derivatives).  And while each pair of functions
        //  G (i.e. the G+ and G- corresponding to points f+ and f-) must sum to 1 to ensure
        //  Bezier equivalence (when f+ = f-), the pairs of G' must similarly sum to 0.  So we
        //  can potentially compute only one of the pair and negate the result for the other
        //  (and with 4 or 8 computations involving these constants, this is all very SIMD
        //  friendly...) but for now we treat all 8 independently for simplicity.
        //
        //float N[8] = OSD_ARRAY_8(float,    s,     t,      t,     sC,      sC,     tC,      tC,     s );
        float D[8] = OSD_ARRAY_8(float,  df0,   df0,    df1,    df1,     df2,    df2,     df3,   df3 );
        OSD_DATA_STORAGE_CLASS const float Nds[8] = OSD_ARRAY_8(float, 1.0f, 0.0f,  0.0f, -1.0f, -1.0f,  0.0f,  0.0f,  1.0f );
        OSD_DATA_STORAGE_CLASS const float Ndt[8] = OSD_ARRAY_8(float, 0.0f, 1.0f,  1.0f,  0.0f,  0.0f, -1.0f, -1.0f,  0.0f );
        OSD_DATA_STORAGE_CLASS const float Dds[8] = OSD_ARRAY_8(float, 1.0f, 1.0f, -1.0f, -1.0f, -1.0f, -1.0f,  1.0f,  1.0f );
        OSD_DATA_STORAGE_CLASS const float Ddt[8] = OSD_ARRAY_8(float, 1.0f, 1.0f,  1.0f,  1.0f, -1.0f, -1.0f, -1.0f, -1.0f );
        //  Combined weights for interior points -- (scaled) combinations of B, B', G and G':
        for (int i = 0; i < 8; ++i) {
            int iDst = interiorGregory[i];
            int tRow = interiorBezTRow[i];
            int sCol = interiorBezSCol[i];
            //  Quotient rule for G' (re-expressed in terms of G to simplify (and D = 1/D)):
            float Gds = (Nds[i] - Dds[i] * G[i]) * D[i];
            float Gdt = (Ndt[i] - Ddt[i] * G[i]) * D[i];
            //  Product rule combining B and B' with G and G' (and scaled):
            wDs[iDst] = (Bds[sCol] * G[i] + Bs[sCol] * Gds) * Bt[tRow] * dScale;
            wDt[iDst] = (Bdt[tRow] * G[i] + Bt[tRow] * Gdt) * Bs[sCol] * dScale;
            if (find_second_partials) {
                float Dsqr_inv = D[i]*D[i];
                float Gdss = 2.0f * Dds[i] * Dsqr_inv * (G[i] * Dds[i] - Nds[i]);
                float Gdst = Dsqr_inv * (2.0f * G[i] * Dds[i] * Ddt[i] - Nds[i] * Ddt[i] - Ndt[i] * Dds[i]);
                float Gdtt = 2.0f * Ddt[i] * Dsqr_inv * (G[i] * Ddt[i] - Ndt[i]);
                wDss[iDst] = (Bdss[sCol] * G[i] + 2.0f * Bds[sCol] * Gds + Bs[sCol] * Gdss) * Bt[tRow] * d2Scale;
                wDst[iDst] = (Bt[tRow] * (Bs[sCol] * Gdst + Bds[sCol] * Gdt) + Bdt[tRow] * (Bds[sCol] * G[i] + Bs[sCol] * Gds)) * d2Scale;
                wDtt[iDst] = (Bdtt[tRow] * G[i] + 2.0f * Bdt[tRow] * Gdt + Bt[tRow] * Gdtt) * Bs[sCol] * d2Scale;
            }
        }
#endif
    }
#endif /* OPENSUBDIV3_OSD_PATCH_BASIS_COMMON_H */
#define OSD_PATCH_LINES 1
#define OSD_PATCH_TRIANGLES 1
#define OSD_PATCH_QUADS 1
#define OSD_PATCH_BSPLINE 1
#define OSD_PATCH_REGULAR 1
#define OSD_PATCH_GREGORY 1
#define OSD_PATCH_GREGORY_BOUNDARY 1
#define OSD_PATCH_GREGORY_BASIS 1
#line 0 "osd/mtlPatchBSpline.metal"
//   Copyright 2015 Pixar
//   Licensed under the Apache License, Version 2.0 (the "Apache License")
//   with the following modification; you may not use this file except in
//   compliance with the Apache License and the following modification to it:
//   Section 6. Trademarks. is deleted and replaced with:
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor
//      and its affiliates, except as required to comply with Section 4(c) of
//      the License and to reproduce the content of the NOTICE file.
//   You may obtain a copy of the Apache License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the Apache License with the above modification is
//   distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//   KIND, either express or implied. See the Apache License for the specific
//   language governing permissions and limitations under the Apache License.
//----------------------------------------------------------
// Patches.BSpline.Hull
//----------------------------------------------------------
static void OsdComputePerVertex(
float4 vertexPosition,
    threadgroup HullVertex& hullVertex,
    int vertexId,
    float4x4 ModelViewProjectionMatrix,
    OsdPatchParamBufferSet osdBuffers
    )
    hullVertex.position = vertexPosition;
#if OSD_ENABLE_PATCH_CULL
    float4 clipPos = mul(ModelViewProjectionMatrix, vertexPosition);   
    short3 clip0 = short3(clipPos.x < clipPos.w,                    
    clipPos.y < clipPos.w,                    
    clipPos.z < clipPos.w);                   
    short3 clip1 = short3(clipPos.x > -clipPos.w,                   
    clipPos.y > -clipPos.w,                   
    clipPos.z > -clipPos.w);                  
    hullVertex.clipFlag = short3(clip0) + 2*short3(clip1);              
#endif
    
    OSD_USER_VARYING_PER_CONTROL_POINT(osdBuffers.vertexBuffer[vertexId], hullVertex);
//----------------------------------------------------------
// Patches.BSpline.Factors
//----------------------------------------------------------
static void OsdComputePerPatchBSplineFactors(
    int3 patchParam,
    float tessLevel,
    float4x4 projectionMatrix,
    float4x4 modelViewMatrix,
    device OsdPerPatchVertexBezier* patch
#if !USE_PTVS_FACTORS
    ,device OsdPerPatchTessFactors& patchFactors
#endif
    ,device MTLQuadTessellationFactorsHalf& quadFactors
    float4 tessLevelOuter = float4(0,0,0,0);
    float2 tessLevelInner = float2(0,0);
    float4 tessOuterLo = float4(0,0,0,0);
    float4 tessOuterHi = float4(0,0,0,0);
#if OSD_ENABLE_SCREENSPACE_TESSELLATION
    OsdGetTessLevelsAdaptiveLimitPoints(
        tessLevel, 
        projectionMatrix, 
        modelViewMatrix,
        patch,
        patchParam,
        tessLevelOuter,
        tessLevelInner,
        tessOuterLo,
        tessOuterHi
        );
#else
    OsdGetTessLevelsUniform(
        tessLevel, 
        patchParam, 
        tessLevelOuter,
        tessLevelInner,
        tessOuterLo,
        tessOuterHi
        );
#endif
    quadFactors.edgeTessellationFactor[0] = tessLevelOuter[0];
    quadFactors.edgeTessellationFactor[1] = tessLevelOuter[1];
    quadFactors.edgeTessellationFactor[2] = tessLevelOuter[2];
    quadFactors.edgeTessellationFactor[3] = tessLevelOuter[3];
    quadFactors.insideTessellationFactor[0] = tessLevelInner[0];
    quadFactors.insideTessellationFactor[1] = tessLevelInner[1];
#if !USE_PTVS_FACTORS
    patchFactors.tessOuterLo = tessOuterLo;
    patchFactors.tessOuterHi = tessOuterHi;
#endif
static void OsdComputePerPatchFactors(
int3 patchParam,
float tessLevel,
unsigned patchID,
float4x4 projectionMatrix,
float4x4 modelViewMatrix,
OsdPatchParamBufferSet osdBuffer,
threadgroup PatchVertexType* patchVertices,
device MTLQuadTessellationFactorsHalf& quadFactors
OsdComputePerPatchBSplineFactors(
patchParam, 
tessLevel, 
projectionMatrix, 
modelViewMatrix, 
osdBuffer.perPatchVertexBuffer + patchID * CONTROL_POINTS_PER_PATCH,
#if !USE_PTVS_FACTORS
osdBuffer.patchTessBuffer[patchID],
#endif
quadFactors
//----------------------------------------------------------
// Patches.BSpline.Vertex
//----------------------------------------------------------
static void OsdComputePerPatchVertex(
int3 patchParam, 
unsigned ID, 
unsigned PrimitiveID, 
unsigned ControlID,
threadgroup PatchVertexType* patchVertices,
OsdPatchParamBufferSet osdBuffers
OsdComputePerPatchVertexBSpline(patchParam, ID, patchVertices, osdBuffers.perPatchVertexBuffer[ControlID]);
    
    OSD_USER_VARYING_PER_VERTEX(patchVertices[ID], osdBuffers.perPatchVertexBuffer[ControlID]);
//----------------------------------------------------------
// Patches.BSpline.Domain
//----------------------------------------------------------
template<typename PerPatchVertexBezier>
static OsdPatchVertex ds_regular_patches(
    const float TessLevel,
#if !USE_PTVS_FACTORS
    float4 tessOuterHi,
    float4 tessOuterLo,
#endif
    PerPatchVertexBezier cv,
    int3 patchParam,
    float2 domainCoord)
    OsdPatchVertex output;
    float3 P, dPu, dPv;
    float3 N, dNu, dNv;
    float2 vSegments;
#if !USE_PTVS_FACTORS
    float2 UV = OsdGetTessParameterization(domainCoord,
                                           tessOuterLo,
                                           tessOuterHi);
#else
    auto transitionMask = OsdGetPatchTransitionMask(patchParam);
    float4 tessLevelMin = float4(1)
    + float4(((transitionMask & 8) >> 3),
             ((transitionMask & 1) >> 0),
             ((transitionMask & 2) >> 1),
             ((transitionMask & 4) >> 2));
    float2 UV = OsdGetTessParameterization(domainCoord,
                                           tessLevelMin,
                                           float4(0));
#endif
    OsdEvalPatchBezier(patchParam, UV, cv, P, dPu, dPv, N, dNu, dNv, vSegments);
    output.normal = N;
    output.tangent = dPu;
    output.bitangent = dPv;
#if OSD_COMPUTE_NORMAL_DERIVATIVES
    output.Nu = dNu;
    output.Nv = dNv;
#endif
#if OSD_PATCH_ENABLE_SINGLE_CREASE
    output.vSegments = vSegments;
#endif
    output.patchCoord = OsdInterpolatePatchCoord(UV, patchParam);
    output.position = P;
    
    OSD_USER_VARYING_PER_EVAL_POINT(UV, cv[5], cv[6], cv[9], cv[10], output);
    
    return output;
#if USE_STAGE_IN
template<typename PerPatchVertexBezier>
#endif
static OsdPatchVertex OsdComputePatch(
float tessLevel,
float2 domainCoord,
unsigned patchID,
#if USE_STAGE_IN
PerPatchVertexBezier osdPatch
#else
OsdVertexBufferSet osdBuffers
#endif
return ds_regular_patches(
tessLevel,
#if !USE_PTVS_FACTORS
#if USE_STAGE_IN
osdPatch.tessOuterHi,
osdPatch.tessOuterLo,
#else
osdBuffers.patchTessBuffer[patchID].tessOuterHi,
osdBuffers.patchTessBuffer[patchID].tessOuterLo,
#endif
#endif
#if USE_STAGE_IN
osdPatch.cv,
osdPatch.patchParam,
#else
osdBuffers.perPatchVertexBuffer + patchID * VERTEX_CONTROL_POINTS_PER_PATCH,
osdBuffers.patchParamBuffer[patchID],
#endif
domainCoord
#line 0 "osd/mtlPatchGregory.metal"
//   Copyright 2013 Pixar
//   Licensed under the Apache License, Version 2.0 (the "Apache License")
//   with the following modification; you may not use this file except in
//   compliance with the Apache License and the following modification to it:
//   Section 6. Trademarks. is deleted and replaced with:
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor
//      and its affiliates, except as required to comply with Section 4(c) of
//      the License and to reproduce the content of the NOTICE file.
//   You may obtain a copy of the Apache License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the Apache License with the above modification is
//   distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//   KIND, either express or implied. See the Apache License for the specific
//   language governing permissions and limitations under the Apache License.
//----------------------------------------------------------
// Patches.Gregory.Hull
//----------------------------------------------------------
void OsdComputePerVertex(
float4 position,
    threadgroup OsdPerVertexGregory& hullVertex,
    int vertexId,
    float4x4 modelViewProjectionMatrix,
    OsdPatchParamBufferSet osdBuffers
    )
OsdComputePerVertexGregory(vertexId, position.xyz, hullVertex, osdBuffers);
#if OSD_ENABLE_PATCH_CULL
    float4 clipPos = mul(modelViewProjectionMatrix, position);    
    short3 clip0 = short3(clipPos.x < clipPos.w,                    
    clipPos.y < clipPos.w,                    
    clipPos.z < clipPos.w);                   
    short3 clip1 = short3(clipPos.x > -clipPos.w,                   
    clipPos.y > -clipPos.w,                   
    clipPos.z > -clipPos.w);                  
    hullVertex.clipFlag = short3(clip0) + 2*short3(clip1);
#endif
    
    OSD_USER_VARYING_PER_CONTROL_POINT(osdBuffers.vertexBuffer[vertexId], hullVertex);
//----------------------------------------------------------
// Patches.Gregory.Factors
//----------------------------------------------------------
void OsdComputePerPatchFactors(
int3 patchParam,
float tessLevel,
unsigned patchID,
float4x4 projectionMatrix,
float4x4 modelViewMatrix,
OsdPatchParamBufferSet osdBuffer,
threadgroup PatchVertexType* patchVertices,
device MTLQuadTessellationFactorsHalf& quadFactors
    float4 tessLevelOuter = float4(0,0,0,0);
    float2 tessLevelInner = float2(0,0);
OsdGetTessLevels(
tessLevel, 
projectionMatrix, 
modelViewMatrix,
patchVertices[0].P, 
patchVertices[3].P, 
patchVertices[2].P, 
patchVertices[1].P,
patchParam, 
tessLevelOuter, 
tessLevelInner
    quadFactors.edgeTessellationFactor[0] = tessLevelOuter[0];
    quadFactors.edgeTessellationFactor[1] = tessLevelOuter[1];
    quadFactors.edgeTessellationFactor[2] = tessLevelOuter[2];
    quadFactors.edgeTessellationFactor[3] = tessLevelOuter[3];
    quadFactors.insideTessellationFactor[0] = tessLevelInner[0];
    quadFactors.insideTessellationFactor[1] = tessLevelInner[1];
//----------------------------------------------------------
// Patches.Gregory.Vertex
//----------------------------------------------------------
void OsdComputePerPatchVertex(
int3 patchParam, 
unsigned ID, 
unsigned PrimitiveID, 
unsigned ControlID,
threadgroup PatchVertexType* patchVertices,
OsdPatchParamBufferSet osdBuffers
OsdComputePerPatchVertexGregory(
patchParam,
PrimitiveID,
patchVertices,
osdBuffers.perPatchVertexBuffer[ControlID],
osdBuffers);
    
    OSD_USER_VARYING_PER_VERTEX(patchVertices[ID], osdBuffers.perPatchVertexBuffer[ControlID]);
//----------------------------------------------------------
// Patches.Gregory.Domain
//----------------------------------------------------------
template<typename PerPatchVertexGregory>
static OsdPatchVertex ds_gregory_patches(
                     PerPatchVertexGregory patch,
                     int3 patchParam,
                     float2 UV
                    )
    OsdPatchVertex output;
    
    float3 P = float3(0,0,0), dPu = float3(0,0,0), dPv = float3(0,0,0);
    float3 N = float3(0,0,0), dNu = float3(0,0,0), dNv = float3(0,0,0);
    
    float3 cv[20];
    cv[0] = patch[0].P;
    cv[1] = patch[0].Ep;
    cv[2] = patch[0].Em;
    cv[3] = patch[0].Fp;
    cv[4] = patch[0].Fm;
    
    cv[5] = patch[1].P;
    cv[6] = patch[1].Ep;
    cv[7] = patch[1].Em;
    cv[8] = patch[1].Fp;
    cv[9] = patch[1].Fm;
    
    cv[10] = patch[2].P;
    cv[11] = patch[2].Ep;
    cv[12] = patch[2].Em;
    cv[13] = patch[2].Fp;
    cv[14] = patch[2].Fm;
    
    cv[15] = patch[3].P;
    cv[16] = patch[3].Ep;
    cv[17] = patch[3].Em;
    cv[18] = patch[3].Fp;
    cv[19] = patch[3].Fm;
    
    OsdEvalPatchGregory(patchParam, UV, cv, P, dPu, dPv, N, dNu, dNv);
    
    // all code below here is client code
    output.position = P;
    output.normal = N;
    output.tangent = dPu;
    output.bitangent = dPv;
#if OSD_COMPUTE_NORMAL_DERIVATIVES
    output.Nu = dNu;
    output.Nv = dNv;
#endif
    output.patchCoord = OsdInterpolatePatchCoord(UV, patchParam);
    
    OSD_USER_VARYING_PER_EVAL_POINT(UV, patch[0], patch[1], patch[3], patch[2], output);
    return output;
#if USE_STAGE_IN
template<typename PerPatchVertexGregoryBasis>
#endif
static OsdPatchVertex OsdComputePatch(
float tessLevel,
float2 domainCoord,
unsigned patchID,
#if USE_STAGE_IN
PerPatchVertexGregoryBasis osdPatch
#else
    OsdVertexBufferSet osdBuffers
#endif
return ds_gregory_patches(
#if USE_STAGE_IN
osdPatch.cv,
osdPatch.patchParam,
#else
        osdBuffers.perPatchVertexBuffer + patchID * VERTEX_CONTROL_POINTS_PER_PATCH,
        osdBuffers.patchParamBuffer[patchID],
#endif
domainCoord);
#line 0 "osd/mtlPatchGregoryBasis.metal"
//   Copyright 2015 Pixar
//   Licensed under the Apache License, Version 2.0 (the "Apache License")
//   with the following modification; you may not use this file except in
//   compliance with the Apache License and the following modification to it:
//   Section 6. Trademarks. is deleted and replaced with:
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor
//      and its affiliates, except as required to comply with Section 4(c) of
//      the License and to reproduce the content of the NOTICE file.
//   You may obtain a copy of the Apache License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the Apache License with the above modification is
//   distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//   KIND, either express or implied. See the Apache License for the specific
//   language governing permissions and limitations under the Apache License.
//----------------------------------------------------------
// Patches.GregoryBasis.Hull
//----------------------------------------------------------
void OsdComputePerVertex(
float4 position,
    threadgroup HullVertex& hullVertex,
    int vertexId,
    float4x4 modelViewProjectionMatrix,
    OsdPatchParamBufferSet osdBuffers
    )
hullVertex.position = position;
#if OSD_ENABLE_PATCH_CULL
    float4 clipPos = mul(modelViewProjectionMatrix, position);    
    short3 clip0 = short3(clipPos.x < clipPos.w,                    
    clipPos.y < clipPos.w,                    
    clipPos.z < clipPos.w);                   
    short3 clip1 = short3(clipPos.x > -clipPos.w,                   
    clipPos.y > -clipPos.w,                   
    clipPos.z > -clipPos.w);                  
    hullVertex.clipFlag = short3(clip0) + 2*short3(clip1);              
#endif
    
    OSD_USER_VARYING_PER_CONTROL_POINT(osdBuffers.vertexBuffer[vertexId], hullVertex);
//----------------------------------------------------------
// Patches.GregoryBasis.Factors
//----------------------------------------------------------
void OsdComputePerPatchFactors(
int3 patchParam,
float tessLevel,
unsigned patchID,
float4x4 projectionMatrix,
float4x4 modelViewMatrix,
OsdPatchParamBufferSet osdBuffer,
threadgroup PatchVertexType* patchVertices,
device MTLQuadTessellationFactorsHalf& quadFactors
    float4 tessLevelOuter = float4(0,0,0,0);
    float2 tessLevelInner = float2(0,0);
OsdGetTessLevels(
tessLevel, 
projectionMatrix, 
modelViewMatrix,
patchVertices[0].position.xyz, 
patchVertices[3].position.xyz, 
patchVertices[2].position.xyz, 
patchVertices[1].position.xyz,
patchParam, 
tessLevelOuter, 
tessLevelInner
    quadFactors.edgeTessellationFactor[0] = tessLevelOuter[0];
    quadFactors.edgeTessellationFactor[1] = tessLevelOuter[1];
    quadFactors.edgeTessellationFactor[2] = tessLevelOuter[2];
    quadFactors.edgeTessellationFactor[3] = tessLevelOuter[3];
    quadFactors.insideTessellationFactor[0] = tessLevelInner[0];
    quadFactors.insideTessellationFactor[1] = tessLevelInner[1];
//----------------------------------------------------------
// Patches.GregoryBasis.Vertex
//----------------------------------------------------------
void OsdComputePerPatchVertex(
int3 patchParam, 
unsigned ID, 
unsigned PrimitiveID, 
unsigned ControlID,
threadgroup PatchVertexType* patchVertices,
OsdPatchParamBufferSet osdBuffers
//Does nothing, all transforms are in the PTVS
    OSD_USER_VARYING_PER_VERTEX(patchVertices[ID], osdBuffers.perPatchVertexBuffer[ControlID]);
//----------------------------------------------------------
// Patches.GregoryBasis.Domain
//----------------------------------------------------------
#define USE_128BIT_GREGORY_BASIS_INDICES_READ 1
#if USE_STAGE_IN
template<typename PerPatchVertexGregoryBasis>
#endif
static OsdPatchVertex ds_gregory_basis_patches(
#if USE_STAGE_IN
                     PerPatchVertexGregoryBasis patch,
#else
                     const device OsdInputVertexType* patch,
                     const device unsigned* patchIndices,
#endif
                     int3 patchParam,
                     float2 UV
                     )
    OsdPatchVertex output;
    float3 P = float3(0,0,0), dPu = float3(0,0,0), dPv = float3(0,0,0);
    float3 N = float3(0,0,0), dNu = float3(0,0,0), dNv = float3(0,0,0);
#if USE_STAGE_IN
    float3 cv[20];
    for(int i = 0; i < 20; i++)
        cv[i] = patch[i].position;
#else   
#if USE_128BIT_GREGORY_BASIS_INDICES_READ
    float3 cv[20];
    for(int i = 0; i < 5; i++) {
        int4 indices = ((device int4*)patchIndices)[i];
        
        int n = i * 4;
        cv[n + 0] = (patch + indices[0])->position;
        cv[n + 1] = (patch + indices[1])->position;
        cv[n + 2] = (patch + indices[2])->position;
        cv[n + 3] = (patch + indices[3])->position;
    }
#else
    float3 cv[20];
    for (int i = 0; i < 20; ++i) {
        cv[i] = patch[patchIndices[i]].position;
    }
#endif
#endif
    
    OsdEvalPatchGregory(patchParam, UV, cv, P, dPu, dPv, N, dNu, dNv);
    
    output.position = P;
    output.normal = N;
    output.tangent = dPu;
    output.bitangent = dPv;
#if OSD_COMPUTE_NORMAL_DERIVATIVES
    output.Nu = dNu;
    output.Nv = dNv;
#endif
    
    output.patchCoord = OsdInterpolatePatchCoord(UV, patchParam);
    
#if USE_STAGE_IN
    OSD_USER_VARYING_PER_EVAL_POINT(UV, patch[0], patch[5], patch[15], patch[10], output);
#else
    OSD_USER_VARYING_PER_EVAL_POINT(UV, patch[patchIndices[0]], patch[patchIndices[5]], patch[patchIndices[15]], patch[patchIndices[10]], output);
#endif
    
    return output;
#if USE_STAGE_IN
template<typename PerPatchVertexGregoryBasis>
#endif
static OsdPatchVertex OsdComputePatch(
float tessLevel,
float2 domainCoord,
unsigned patchID,
#if USE_STAGE_IN
PerPatchVertexGregoryBasis osdPatch
#else
OsdVertexBufferSet osdBuffers
#endif
return ds_gregory_basis_patches(
#if USE_STAGE_IN
osdPatch.cv,
osdPatch.patchParam,
#else
osdBuffers.vertexBuffer,
osdBuffers.indexBuffer + patchID * VERTEX_CONTROL_POINTS_PER_PATCH,
osdBuffers.patchParamBuffer[patchID],
#endif
domainCoord
Failure in TopologyRefiner::RefineUniform() -- base level is uninitialized.
Failure in TopologyRefiner::RefineUniform() -- previous refinements already applied.
Failure in TopologyRefiner::RefineAdaptive() -- base level is uninitialized.
Failure in TopologyRefiner::RefineAdaptive() -- previous refinements already applied.
Failure in TopologyRefiner::RefineAdaptive() -- currently only supported for Catmark scheme.
Edge %d specified to be sharp does not exist (%d, %d)
Vertex %d specified to be sharp does not exist
OSD VertexBuffer
}(Z
VFXModelTessellator
NSCopying
NSSecureCoding
NSCoding
VFXEditorView
VFXCameraNavigationControllerDelegate
NSObject
MTLTexture
MTLResource
MTLAllocation
VFXMetalBackingLayer
///'@
VFXCameraEffect
VFXAnimatable
VFXCameraEffectDepthOfField
VFXCameraEffectMotionBlur
VFXCameraEffectGrain
VFXCameraEffectExposure
VFXCameraEffectToneMapping
VFXCameraEffectBloom
VFXCameraEffectVignetting
VFXCameraEffectColorFringe
VFXCameraEffectColorGrading
VFXCameraEffectLensBlur
VFXCameraEffectChromaticTransform
VFXCameraEffectDoughnutBokeh
VFXCameraEffectSSAO
VFXShaderArgument
VFXShadableHelper
_VFXShadableCompilationIssue
VFXMTLTessellator
VFXModelElement
VFXMeshElement
VFXCommonProfileProgramGeneratorMetal
VFXUIProperty
VFX_NSImageFromImageValue
VFXUID_ConstantTransformer
VFXUID_NumberTransformer
VFXUIDynamicInspector
_VFXSnapshotWindow
VFXAppKitSource
VFXTextureAppKitSource
VFXAuthoringEnvironment2
VFXClock
CFXAnimationBinding
VFXLKGCalibration
VFXHolographicRenderer
VFXWorldRenderer
VFXAuthoringEnvironment
VFXCameraNavigationController
VFXEventHandler
VFXCameraControlConfiguration
VFXCameraControllerDelegate
VFXExtensions
VFXPhysicsWorld
VFXTransactionCommandObject
VFXRenderTarget
VFXNodeComponent
VFXNodeWeakComponent
VFXCommonProfileProgramCache
VFXCommonProfileProgramGenerator
VFXUIScrubberCell
VFXUIScrubber
VFXPhysicsConeTwistJoint
CFXBinding
VFXCameraController
VFXPhysicsJoint
VFXManipulableItem
VFXNodeManipulableItem
VFXJitterer
VFXModelIO
MDLMorphDeformerComponent
MDLComponent
MDLSkinDeformerComponent
VFXAdditions
VFXCoreAnimationSource
VFXTextureCoreAnimationSource
VFXParticleCollider
VFX_DisplayLinkExtensions
VFXDisplayLinkARC
VFXReferenceNode
CFXVFXRenderTargetInfo
VFXRenderTargetInfo
VFXRERenderTargetInfo
VFXMTLRenderContext
VFXBufferStream
VFXDrawCallContext
VFXMTLDeformerStack
VFXMTLDeformerInitComputeContext
VFXMTLDeformerUpdateComputeContext
VFXModelDeformerInstanceWrapper
VFXModelDeformerInitComputeContext
VFXModelDeformerUpdateComputeContext
VFXMTLSmoothNormalsDeformer
VFXMTLDeformer
VFXKeyedUnarchiver
VFXKeyedArchiver
VFXCamera
VFXKitAdditions
VFXLight
VFXIESProfile
VFXMaterial
VFXAsset
VFXShadable
VFXBehaviorSupport
_VFXNullMaterial
VFXNode
VFXBoundingBox
VFXWorld
VFXSimplePathResolver
VFXAssetPathResolver
VFXTextureSource
VFXImageSource
VFXTextureOffscreenRenderingSource
VFXSourceRendererRegistry
VFXTriggerManager
VFX_DTAdditions
VFXView
VFXBufferBinding
VFXProgramSemanticInfo
VFXProgram
VFXRenderToTextureFinalAttachmentProvider
VFXTextureAttachmentProvider
VFXRendererViewPoint
VFXRenderOptions
VFXRenderer
VFXMTLRenderContextCommandBufferStatusMonitor
VFXMTLRenderContextResourceManagerMonitor
VFXAddition
VFXStatisticsProvider
VFXPhysicsSliderJoint
VFXPrecomputedLightingEnvironment
VFXMaterialPropertyPrivate_PrecomputedLightingEnvironment
VFXDeepCopy
VFXOrderedDictionary
VFXRecursiveLock
VFXKeyframeAnimation
VFXAnimationEvent
VFXTimingFunction
VFXAnimation
VFXAnimationPlayer
VFXWorldLoader
NSKeyedUnarchiverDelegate
VFXHitTestResult
VFXMaterialPropertyTextureProvider
VFXMaterialProperty
VFXFloor
Legacy
VFXModel
VFXSkinner
VFXStateTransition
VFXStateMachine
VFXUtils
CFXIONSZipFileArchive
VFXBindingWrapper
VFXMTLLibrary
3$0"0 0
VFXMTLLibraryManager
VFXMTLShadableKey
VFXMetalWireframeResource
MTLBuffer
VFXMTLResourceManager
VFXAudioPlayer
VFXAudioSource
VFXPhysicsContact
VFXDrawableDescriptor
VFXRenderGraph
VFXPhysicsBody
VFXParametricModel
VFXDisplayLink
VFXUIImagePicker
VFXBtShapeWrapper
VFXPhysicsShape
VFXMetalLayer
VFXStateManager
VFXState
VFXStateItem
VFXBehaviorGraph
VFXEffectController
VFXGraphController
VFXSwiftCompat
ObjC
VFXModelWrapDeformerParameters
VFXModelWrapDeformer
VFXModelWrapDeformerInstance
VFXModelDeformerInstance
VFXCompositorRenderer
MTKViewDelegate
CFXEngineNotificationQueueTransientWrapper
VFXRendererOptionsPanel
VFX_NSImageFromSlotContents
VFXPhysicsBallSocketJoint
VFXRendererOptionsPanelController
1$0"0 0 0/$4
6$0"0 0 0/$4
3$0"0 0 0/$4
Compilation
VFXForceField
_CFXProgressDebugger
AVAudio3DMixing
VFXAssetNode
VFXAssetRegistry
VFXCoreAsset
VFXFileAsset
VFXTextureAsset
VFXLayerAsset
VFXClientTextureAsset
VFXPrefabAsset
VFXAnimationClip
VFXMTLMorphDeformer
VFXAVPlayerSource
VFXCaptureDeviceSource
AVCaptureVideoDataOutputSampleBufferDelegate
VFXCaptureDeviceOutputConsumerSource
VFXCaptureDeviceOutputConsumer
VFXMorpher
VFXMTLBuffer
VFXMTLResourceBinding
VFXMTLSemanticResourceBinding
VFXMTLPassResourceBinding
VFXMTLShadable
VFXMTLRenderPipeline
VFXMTLComputePipeline
VFXMTLMesh
VFXMTLMeshElement
VFXMTLBufferAllocatorSubBuffer
VFXFixedSizePage
VFXMTLBufferAllocator
VFXJSLayerJSExport
JSExport
VFX_JSSupport
VFXJSImageJSExport
VFXJSImage
NSValueJSExport
VFXJSExtension
VFXJSExtensions
JSExtension
VFXMaterialPropertyJSExport
VFXBoundingBoxJSExport
VFXBoundingSphereJSExport
VFXTransactionJSExport
VFXColorJSExport
VFXJSBasicAnimationJSExport
VFXJSAnimationGroupJSExport
VFXJSKeyframeAnimationJSExport
VFXViewJSExport
VFXMetalLayerJSExport
VFXPhysicsJointJSExport
VFXPhysicsHingeJointJSExport
VFXPhysicsContactJSExport
VFXProgramJSExport
VFXParametricModelJSExport
VFXMorpherJSExport
VFXLODJSExport
VFXRendererJSExport
VFXFloorJSExport
VFXNodeJSExport
VFXPhysicsBallSocketJointJSExport
VFXModelJSExport
VFXConstraintJSExport
VFXPhysicsSliderJointJSExport
VFXLightJSExport
VFXMaterialJSExport
VFXModelTessellatorJSExport
VFXHitTestResultJSExport
VFXLookAtConstraintJSExport
VFXPhysicsShapeJSExport
VFXModelElementJSExport
VFXModelSourceJSExport
VFXShapeJSExport
VFXCameraJSExport
VFXIKConstraintJSExport
VFXPhysicsWorldJSExport
VFXPhysicsBodyJSExport
VFXAnimationEventJSExport
VFXWorldJSExport
VFXForceFieldJSExport
VFXTextJSExport
VFXJSMediaTimingFunctionJSExport
VFXMTLOpenSubdivComputeEvaluator
OpenSubdiv
VFXUSKHelper
VFXUSKToken_helper
VFXUSKObjectPath_helper
VFXUSKData_helper
Internal
VFXBoundingSphere
VFXTransaction
VFXParticleEmitter
VFX3DConnexionDevice
VFXCameraControlEventHandler
VFXSceneKitBridge
VFXPrefab
VFXPrefabUpdateOperation
VFXPrefabUpdater
VFXMTLSkinDeformerReadOnlyBuffers
VFXMTLSkinDeformer
VFXMTLArgumentBinder
VFXMTLShaderBindingsGenerator
VFXMovieExport
VFXExportAddition
VFXExportOperation
_VFXExportOperation
VFXMovieExportOperation
Workaround
VFXModelDeformer
Textures
VFXManipulatorNodeTransformPair
VFXManipulator
VFXMesh
VFXCoreEntityHandle
VFXModelSource
VFXMeshSource
VFXUIDynamicInspectorConfiguration
VFXUIDynamicUI
VFXConstraint
VFXLookAtConstraint
VFXDistanceConstraint
VFXReplicatorConstraint
VFXAccelerationConstraint
VFXSliderConstraint
VFXAvoidOccluderConstraint
VFXBillboardConstraint
VFXConstantScaleConstraint
VFXTransformConstraint
VFXIKJoint
VFXIKConstraint
VFXUIArrayEditor
VFXUIArrayEditorController
VFXUIHandleButton
VFXUIColorWell
VFXUIBindableView
VFXUIVector4TextField
VFXUIMatrix4TextField
VFXUIVector3TextField
VFXUIVector2TextField
VFXUIPopUpButton
VFXNSZipFileArchive
VFXWeakPointer
VFXText
VFXMaterialPropertyTextureProviderSource
VFXMaterialPropertyTextureProviderHelper
VFXShape
VFXPhysicsHingeJoint
VFXLOD
RGCachedRenderCommandEncoder
MTLRenderCommandEncoder
MTLCommandEncoder
RGCachedComputeCommandEncoder
MTLComputeCommandEncoder
RGAddition
@16@0:8
c16@0:8
@24@0:8^{_NSZone=}16
v24@0:8@16
@24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
v16@0:8
{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}24@0:8@16
q16@0:8
v24@0:8q16
v20@0:8c16
f16@0:8
v20@0:8f16
Q16@0:8
v24@0:8Q16
@"NSMutableSet"
c24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
c24@0:8#16
c24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
c24@0:8@"Protocol"16
@"NSString"16@0:8
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
32@0:8{CGPoint=dd}16
{?=}24@0:8@16
c40@0:816@32
48@0:8{CGPoint=dd}16@32o^^{?}40
v40@0:8@16{CGPoint=dd}24
16@0:8
Q24@0:8@16
{?="columns"[4]}
{CGPoint="x"d"y"d}
@"<VFXEditorViewDelegate>"
Q24@0:8Q16
i20@0:8I16
v24@0:8@"NSString"16
@"<MTLDevice>"16@0:8
@"<MTLHeap>"16@0:8
v104@0:8^v16Q24Q32{?={?=QQQ}{?=QQQ}}40Q88Q96
v104@0:8{?={?=QQQ}{?=QQQ}}16Q64Q72r^v80Q88Q96
v88@0:8^v16Q24{?={?=QQQ}{?=QQQ}}32Q80
v88@0:8{?={?=QQQ}{?=QQQ}}16Q64r^v72Q80
@24@0:8Q16
@64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48
@68@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64
^{__IOSurface=}16@0:8
{MTLResourceID=Q}16@0:8
{?=CCCC}16@0:8
@"<MTLTexture>"24@0:8Q16
@"<MTLTexture>"64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48
@"MTLSharedTextureHandle"16@0:8
@"<MTLTexture>"24@0:8@"<MTLDevice>"16
@"<MTLTexture>"68@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64
@"<MTLResource>"16@0:8
@"<MTLTexture>"16@0:8
@"<MTLBuffer>"16@0:8
@"VFXView"
@24@0:8^{__CFXCameraEffect=}16
v32@0:8@16@24
v28@0:8@16f24
v32@0:8@"<VFXAnimation>"16@"NSString"24
v32@0:8@"VFXAnimationPlayer"16@"NSString"24
v28@0:8@"NSString"16f24
@"VFXAnimationPlayer"24@0:8@"NSString"16
@"NSArray"16@0:8
^v16@0:8
@24@0:8^v16
^{__CFXWorld=}16@0:8
^{__CFXAnimationManager=}16@0:8
c32@0:8@16@24
v32@0:8c16@20c28
v48@0:8@16@24@32@40
c32@0:8@16^24
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"VFXOrderedDictionary"
@"NSMutableDictionary"
^{__CFXCameraEffectDepthOfField=}16@0:8
^{__CFXCameraEffectMotionBlur=}16@0:8
^{__CFXCameraEffectGrain=}16@0:8
@"<MTLTexture>"
^{__CFXCameraEffectExposure=}16@0:8
^{__CFXCameraEffectToneMapping=}16@0:8
f20@0:8f16
^{__CFXCameraEffectBloom=}16@0:8
v32@0:816
^{__CFXCameraEffectVignetting=}16@0:8
^{__CFXCameraEffectColorFringe=}16@0:8
^{__CFXCameraEffectColorGrading=}16@0:8
@"VFXMaterialProperty"
^{__CFXCameraEffectLensBlur=}16@0:8
^{__CFXCameraEffectChromaticTransform=}16@0:8
v24@0:816
B16@0:8
v20@0:8B16
^{__CFXCameraEffectDoughnutBokeh=}16@0:8
^{__CFXCameraEffectSSAO=}16@0:8
@"NSString"
^{__CFXFXRenderGraph=}16@0:8
@"VFXProgram"
@"NSDictionary"
@"NSArray"
@"NSNumber"
@64@0:8@16@24@32@40q48Q56
@"<VFXShadable>"
@32@0:8^{__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}16@24
{?=b2b2b2b1}28@0:8@16C24
C28@0:8@16C24
@?36@0:8@16C24@28
v48@0:8{?=@@^{?}IB}16
v72@0:8{?=^{__CFXMesh}@^{__CFXMeshElement}@I@C}16
v40@0:8{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}16
v48@0:8@16@24Q32@40
v72@0:8{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}16{?=@@^{?}IB}40
^{__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}
@"VFXMTLResourceManager"
{?="type"C"tessellationFactorScale"f"tessellationPartitionMode"I"tessellationSmoothingMode"C"parameters"(?="uniform"{?="edgeTessellationFactor"f"insideTessellationFactor"f}"screenSpaceAdaptive"{?="projectedEdgeLength"f}"constrainedEdgeLength"{?="maximumEdgeLength"f}"subdivisionSurface"{?="tessellationLevel"C"allowSingleCreasePatch"b1"useScreenSpaceTessellation"b1})}
@"<MTLBuffer>"
@60@0:8@16q24q32q40c48q52
@24@0:8^{__CFXMeshElement={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}II^{__CFXMeshElement}CCC{?=c^{__CFData}I^I^{?}SCB}^vfff^v^{__CFXMeshSource}[2]^{?}I}16
@48@0:8@16q24q32q40
v24@0:8@?16
{_NSRange=QQ}16@0:8
v32@0:8{_NSRange=QQ}16
^{__CFXMeshElement={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}II^{__CFXMeshElement}CCC{?=c^{__CFData}I^I^{?}SCB}^vfff^v^{__CFXMeshSource}[2]^{?}I}16@0:8
^{__CFXMeshElement={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}II^{__CFXMeshElement}CCC{?=c^{__CFData}I^I^{?}SCB}^vfff^v^{__CFXMeshSource}[2]^{?}I}
@"NSData"
i16@0:8
@20@0:8c16
^{__CFXFXProgram=}40@0:8^{__CFXProgramHashCode=}16^{__CFXEngineContext=}24^{?=q^{?}[4{?=qq}][4{?=qq}][4q]B}32
@44@0:8@16@24c32Q36
v64@0:8^{__CFXFXProgram=}16@24@32@40@?48@?56
{_NSRange="location"Q"length"Q}
v20@0:8i16
v24@0:8#16
@32@0:8@16@24
@32@0:8@16#24
@40@0:8@16#24@32
v40@0:8@16@24Q32
@32@0:8#16@24
@"NSMutableArray"
@"VFXUIArrayEditor"
@"NSObjectController"
@"NSPathControl"
c20@0:8c16
@"CALayer"
d16@0:8
{CGSize=dd}16@0:8
@"NSWindow"
@"NSView"
{CGSize="width"d"height"d}
^{__CFXEngineContext=}
^{__CFXTextureSampler={__CFRuntimeBase=QAQ}iiiiiifCiQ}
@28@0:8@16c24
I16@0:8
c20@0:8I16
@20@0:8i16
v24@0:8^{__CFXNode=}16
v40@0:8@16^{__CFXNode=}24^{__CFXLight=}32
c24@0:8^{__CFXNode=}16
c80@0:8{?=[4]}16
v44@0:8@16^{__CFXNode=}24^{__CFXLight=}32f40
v32@0:8@16^{__CFXNode=}24
v32@0:8q16@24
@24@0:8q16
^{__CFXWorld=}
@"VFXNode"
^{__CFDictionary=}
@"VFXRenderer"
@"VFXModel"
@"NSColor"
@"VFXManipulator"
v24@0:8d16
v40@0:8d16{VFXClockTimeRange=dd}24
v24@0:8^{__CFXWorld=}16
{VFXClockTimeRange=dd}16@0:8
v32@0:8{VFXClockTimeRange=dd}16
{VFXClockTimeRange="begin"d"end"d}
^{__CFXModelTarget={__CFRuntimeBase=QAQ}^v^vscCCB^?^?}
@40@0:8{CGPoint=dd}16@32
32@0:816
c32@0:8@16@?24
v32@0:8@16@?24
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
^{CGColorSpace=}16@0:8
@"NSArray"40@0:8{CGPoint=dd}16@"NSDictionary"32
c32@0:8@"VFXNode"16@"VFXNode"24
@"NSArray"24@0:8@"VFXNode"16
c32@0:8@16@?<c@?>24
v32@0:8@"NSArray"16@?<v@?c>24
@"VFXWorld"16@0:8
v24@0:8@"VFXWorld"16
@"<VFXWorldRendererDelegate>"16@0:8
v24@0:8@"<VFXWorldRendererDelegate>"16
@"VFXNode"16@0:8
v24@0:8@"VFXNode"16
@"<MTLRenderCommandEncoder>"16@0:8
@"MTLRenderPassDescriptor"16@0:8
@"<MTLCommandQueue>"16@0:8
@"AVAudioEngine"16@0:8
@"AVAudioEnvironmentNode"16@0:8
@"VFXRenderGraph"16@0:8
v24@0:8@"VFXRenderGraph"16
@24@0:8^{__CFXEngineContext=}16
{?=[4]}16@0:8
v56@0:81632@48
v48@0:8@16{CGPoint=dd}24@40
@"<VFXWorldRenderer>"
^{__CFXFXProgram={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}b1b1^{__CFXFXProgramDelegate}[2^{__CFString}]^{__CFString}^{__CFString}^{__CFDictionary}^{__CFSet}^v^{__CFDictionary}^vQI}
{?="weakProgram"^{__CFXFXProgram}"baseIndex"I"baseVertex"I"vertexSize"I"allocatedVerticesSize"I"allocatedIndicesSize"I"textureImage"^{__CFXImage}"texture"^{__CFXTexture}"drawMode"C"orthographic"B"clearDepthBuffer"B"enableDepthTest"B"enableCulling"B"isDynamic"B"mesh"^{__CFXMesh}"meshElement"^{__CFXMeshElement}"_cache"{?="verticesStride"Q"colorsStride"Q"uvsStride"Q"verticesData"*"colorsData"*"uvsData"*}"_usedMeshes"@"NSMutableSet""_freeMeshes"@"NSMutableSet""_usedMeshElements"@"NSMutableSet""_freeMeshElements"@"NSMutableSet"}
{?="textureInfo"{?="texture"^{__CFXImage}"textureSize"{CGSize="width"d"height"d}"isRetina"B}"lineHeight"f"characterWidth_texture"s"characterWidth_typography"^f"characterHeight_texture"s"symbolRects"^{?}}
^{__CFXRasterizerStates=}
{?="modifierFlags"Q"location"{CGPoint="x"d"y"d}"locationInPoints"{CGPoint="x"d"y"d}"rayOrigin""rayEnd""pixelToWorldUnitFactor"f}
^{?=Q{CGPoint=dd}{CGPoint=dd}f}
[64000C]
@"NSSet"
@"NSMutableOrderedSet"
{?="initialized"B"showFullStatistics"B"showRenderOptionsPanel"B"fps"f"waitDisplayLinkTime"f"pressedButtonIndex"q"fpsString"^{__CFString}"shortString"^{__CFString}"internalString"^{__CFString}"lightingStatistics"[9I]"stats"{__CFXEngineStats="verticesProcessed"I"primitivesProcessed"I"drawCount"I"drawStep"I"frameCount"I"fboSwitches"I"vboSwitches"I"attSwitches"I"attEnabling"I"iboSwitches"I"vaoSwitches"I"prgSwitches"I"texSwitches"I"rssSwitches"I"getCount"I"uniformFloatSent"I"uniformIntSent"I"uniformVector2Sent"I"uniformVector3Sent"I"uniformVector4Sent"I"uniformMatrix4Sent"I"vboUploaded"I"iboUploaded"I"texUploaded"I"cpuTime"d"cstrTime"d"phyTime"d"prtTime"d"animTime"d"skinTime"d"mrphTime"d"rendTime"d"twoDTime"d"delegateTime"d"glFlushTime"d"waitDisplayLinkTime"d"drawableWaitTime"d"gpuTime"d"lastDisplayLinkTime"d"prgCount"I"texCount"I"fboCount"I"vboCount"I"rboCount"I"iboCount"I"cboCount"I"vaoCount"I"fboMemory"I"rboMemory"I"vboMemory"I"iboMemory"I"cboMemory"I"texMemory"I"backBufferMemory"I"depthBuffersMemory"I"onlineShaderCount"I"onlineShaderCompilationTime"d"renderPipelineCount"I"renderPipelineCompilationTime"d"computePipelineCount"I"computePipelineCompilationTime"d"frmAvgTime"d"frmMinTime"d"frmMaxTime"d"frameTimeHistory"[60d]"frameTimeCurrentIndex"I"startTime"d"lastFrameTime"d}}
@"VFXAuthoringEnvironment2"
c24@0:8@"NSEvent"16
@"VFXView"16@0:8
v24@0:8@"VFXView"16
v24@0:8@"VFXCameraController"16
v24@0:8f16c20
v28@0:8f16f20f24
{CGPoint=dd}16@0:8
v32@0:8{CGPoint=dd}16
24@0:8@16
{?=}16@0:8
c32@0:8^{__CFXNode=}16^{CFXSphere=}24
{?="vector"}
{?="stickyMoveEnabled"B"direction""pickedAxis"Q"userStickyAxis"Q}
{?="automaticLocationUpToDate"B"hasAutomatic"B}
{?="lastDragLocation"{CGPoint="x"d"y"d}"velocity"{CGPoint="x"d"y"d}"lastDragTime"d}
{?="lock"{os_unfair_lock_s="_os_unfair_lock_opaque"I}"keyCodeConfiguration"@"NSDictionary""keyDown"{set<unsigned short, std::less<unsigned short>, std::allocator<unsigned short>>="__tree_"{__tree<unsigned short, std::less<unsigned short>, std::allocator<unsigned short>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<unsigned short, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::less<unsigned short>>="__value_"Q}}}"forward"{vector<unsigned short, std::allocator<unsigned short>>="__begin_"^S"__end_"^S"__end_cap_"{__compressed_pair<unsigned short *, std::allocator<unsigned short>>="__value_"^S}}"backward"{vector<unsigned short, std::allocator<unsigned short>>="__begin_"^S"__end_"^S"__end_cap_"{__compressed_pair<unsigned short *, std::allocator<unsigned short>>="__value_"^S}}"left"{vector<unsigned short, std::allocator<unsigned short>>="__begin_"^S"__end_"^S"__end_cap_"{__compressed_pair<unsigned short *, std::allocator<unsigned short>>="__value_"^S}}"right"{vector<unsigned short, std::allocator<unsigned short>>="__begin_"^S"__end_"^S"__end_cap_"{__compressed_pair<unsigned short *, std::allocator<unsigned short>>="__value_"^S}}}
{?="hasShift"B"hasOption"B}
@"VFXCameraController"
@"<VFXCameraNavigationControllerDelegate>"
@24@0:8i16i20
c40@0:8@16@24^@32
@56@0:81632@48
@56@0:8{btVector3=(?=[4f])}16{btVector3=(?=[4f])}32@48
@40@0:8@16@24@32
@160@0:8@16{?=[4]}24{?=[4]}88@152
^{btVehicleRaycaster=^^?}16@0:8
v24@0:8^v16
v56@0:8@16^{__CFXNode=}24Q32Q40Q48
v32@0:8@16^v24
^{btOverlappingPairCallback=^^?}
^{btVehicleRaycaster=^^?}
^{btCFXDebugDraw=^^?if^v}
@"<VFXPhysicsContactDelegate>"
@"VFXPhysicsContact"
@"VFXWorld"
@40@0:8^{?=CCCb1b1b1b1b1b1[4C]}1624Q32
C16@0:8
c40@0:8^{?=CCCb1b1b1b1b1b1[4C]}1624Q32
{?="format"C"sampleCount"C"textureUsage"C"renderToTexture"b1"forceTextureRect"b1"viewportDependant"b1"renderToIOSurface"b1"mipmapped"b1"textureCube"b1"padding"[4C]}
@"CIImage"
@32@0:8q16@24
@"VFXNodeComponent"
^{__CFXFXProgram=}
^{__CFSet=}
@24@0:8i16c20
^{__CFXFXProgram=}48@0:8^{__CFXProgramHashCode=}16^{__CFXEngineContext=}24@32^{?=q^{?}[4{?=qq}][4{?=qq}][4q]B}40
v56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
@160@0:8@16{?=[4]}24@88{?=[4]}96
@88@0:8@16{?=[4]}24
^{btConeTwistConstraint=^^?ii(?=i^v)fBBi^{btRigidBody}^{btRigidBody}ff^{btJointFeedback}[3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f}]{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}ffffffff{btVector3=(?=[4f])}{btVector3=(?=[4f])}ffffffffBBBBff{btVector3=(?=[4f])}BB{btQuaternion=(?=[4f])}f{btVector3=(?=[4f])}ifff}16@0:8
v80@0:8{?=[4]}16
^{btTypedConstraint=^^?ii(?=i^v)fBBi^{btRigidBody}^{btRigidBody}ff^{btJointFeedback}}16@0:8
{?="frameA"{?="columns"[4]}"frameB"{?="columns"[4]}"maximumAngularLimit1"f"maximumAngularLimit2"f"maximumTwistAngle"f}
v28@0:8@16c24
v48@0:8{CGPoint=dd}16{CGSize=dd}32
v24@0:8f16f20
v52@0:8f16{CGPoint=dd}20{CGSize=dd}36
{?=}24@0:8o^f16
{?=[4]}48@0:81632
v52@0:8{CGPoint=dd}16{CGSize=dd}32f48
v64@0:8{CGPoint=dd}16{CGSize=dd}32{CGPoint=dd}48
48@0:8{CGPoint=dd}16{CGSize=dd}32
{?=}32@0:8{?=}16
c48@0:8{CGPoint=dd}16{CGSize=dd}32
{?="angles""initialAbsoluteAngles""initialTransformWorld"{?="columns"[4]}"initialOrientationWorld"{?="vector"}}
{?="start""current""last"}
{?="localArcballAdjustement""sphereLocationStart""sphereLocationCurrent"}
{?="inertiaEnabled"B"inertiaRunning"B"lastSimulationTime"d"friction"f"rotationSensitivity"f"translationSensitivity"f"velocity""timer"@"NSTimer"}
@"<VFXCameraControllerDelegate>"
44@0:816f24{CGSize=dd}28
v24@0:8^{__CFDictionary=}16
@"VFXPhysicsWorld"
^{btTypedConstraint=^^?ii(?=i^v)fBBi^{btRigidBody}^{btRigidBody}ff^{btJointFeedback}}
@"VFXPhysicsBody"
@28@0:8@16f24
@"<VFXJittererDelegate>"
@"NSObject<OS_dispatch_source>"
v40@0:8@16@24@32
@40@0:8@16@24Q32
@100@0:8@16Q24B32Q36Q44Q52Q60q68@76Q84@92
@"MDLAnimatedScalarArray"16@0:8
Q32@0:8^{?=[4]}16Q24
@"NSData"16@0:8
v64@0:8@16@24c32c36f40f44@?48@?56
@80@0:8@16@24@32@40^v48@56@64@72
@72@0:8@16@24@32@?40@48@56@64
v48@0:8@?16@?24@32@40
v48@0:8^{__CFXEngineContext=}16^{__CFXTextureSampler={__CFRuntimeBase=QAQ}iiiiiifCiQ}24^d32^{?=BB}40
v56@0:8@16{CGSize=dd}24c40c44@48
d64@0:8@16@24^{__CFXEngineContext=}3240d56
d48@0:8@16@24^{__CFXEngineContext=}32^{__CFXTextureSampler={__CFRuntimeBase=QAQ}iiiiiifCiQ}40
@48@0:8^{__CFXEngineContext=}16^{__CFXTextureSampler={__CFRuntimeBase=QAQ}iiiiiifCiQ}24^d32^{?=BB}40
@24@0:8^{__CFXCoreEntityHandle={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFString}^{__CFDictionary}^{__CFArray}B^v}16
^{__CFXCoreEntityHandle={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFString}^{__CFDictionary}^{__CFArray}B^v}16@0:8
@"VFXCoreEntityHandle"
v24@0:8^{__CVDisplayLink=}16
@"NSURL"
Q24@0:8q16
@"MTLRenderPassDescriptor"
v32@0:8r^v16Q24
@32@0:8@16^{__CFXEngineContext=}24
^{__CFXEngineContext=}16@0:8
c24@0:8Q16
^{__CFXEngineStats=IIIIIIIIIIIIIIIIIIIIIIIIdddddddddddddddIIIIIIIIIIIIIIIIIdIdIdddd[60d]Idd}16@0:8
v36@0:8c16^Q20^@28
^{VFXMTLBlitCommandEncoder=@@}16@0:8
^{VFXMTLComputeCommandEncoder=@@^{VFXMTLBufferPool}I}16@0:8
v37@0:8@16^v24{?=CCCCB}32
v21@0:8{?=CCCCB}16
@24@0:8^{__CFXMaterialProperty={__CFRuntimeBase=QAQ}(?=^{__CFXImage}^{__CFXImageProxy}^{__CFXTexture}^v^v{CFXColor4=(?=[4f]{?=ffff})}^v)^vq^vb8b1b4c^{__CFXTextureSampler}^{?}fi^v}16
v24@0:8^{__CFXRasterizerStates=}16
v32@0:8q16q24
v32@0:8@16Q24
v24@0:8^{?=[4]}16
f28@0:8r^{?=[4]}16f24
v40@0:8^{__CFXMaterialProperty={__CFRuntimeBase=QAQ}(?=^{__CFXImage}^{__CFXImageProxy}^{__CFXTexture}^v^v{CFXColor4=(?=[4f]{?=ffff})}^v)^vq^vb8b1b4c^{__CFXTextureSampler}^{?}fi^v}16^{__CFXEngineContext=}24^{__CFXFXPassInstance=^{__CFXFXPass}q^{__CFXFXPassInstance}CCBCC[16^{__CFXArray}]{__CFXCullingContext=^{__CFXEnginePipeline}[16{?=[6{?=}]}][16{?=[4]}][16{?=[4]}][16{?=[4]}][16{?=[4]}][16{?=[6{?=}]}][16{?=[4]}][16{?=[4]}][16{?=[4]}][16{?=[4]}][16][16{?=[4]}]CCCCB^{__CFXFXPass}^v^{__CFXNode}^{__CFXNode}^{__CFXNode}BBBBBBBCQQ^v^{__CFXWorld}^{__CFXEngineContext}dd{?=}{?=[4]}{?=[4]}[16{?=^{?}II}]B^?}^{__CFXNode}SI}32
v40@0:8^{__CFXImageProxy={__CFRuntimeBase=QAQ}{?=^?^?^?^?}^vC}16^{__CFXEngineContext=}24^{__CFXMaterialProperty={__CFRuntimeBase=QAQ}(?=^{__CFXImage}^{__CFXImageProxy}^{__CFXTexture}^v^v{CFXColor4=(?=[4f]{?=ffff})}^v)^vq^vb8b1b4c^{__CFXTextureSampler}^{?}fi^v}32
v148@0:8^{__CFXMesh=}16^{__CFXMeshElement={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}II^{__CFXMeshElement}CCC{?=c^{__CFData}I^I^{?}SCB}^vfff^v^{__CFXMeshSource}[2]^{?}I}24^{__CFXFXProgram={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}b1b1^{__CFXFXProgramDelegate}[2^{__CFString}]^{__CFString}^{__CFString}^{__CFDictionary}^{__CFSet}^v^{__CFDictionary}^vQI}32^{__CFXEngineContext=}40{?=[4]}48r^{CFXColor4=(?=[4f]{?=ffff})}112^{__CFXRasterizerStates=}120^{__CFXBlendStates=}128^{__CFXImage=}136c144
v36@0:8^{?=SS}16I24^{?=^{__CFXEnginePipeline}^{__CFXEngineContext}^{__CFXFXPassInstance}^vQ^{__CFXNode}BBBB}28
v24@0:8^{?=^{__CFXEnginePipeline}^{__CFXEngineContext}^{__CFXFXPassInstance}^vQ^{__CFXNode}BBBB}16
v24@0:8^{__CFXMaterial=}16
v96@0:8{?=^{__CFXFXProgram}^{__CFXMaterial}^{__CFXGeometry}^{__CFXNode}^{__CFXMesh}^{__CFXMeshElement}{?=[8C]}^{__CFXFXPass}^IBBBBBb3}16
v32@0:8^{__CFXRendererElement=I^{__CFXNode}(?={__CFXRendererElementAttributes=^{__CFXGeometry}^{__CFXMesh}^{__CFXMaterial}^{__CFXFXRenderGraph}^v}{__CFXRendererElementHandler={?=}@?}){?=[8C]}iIb3b1b1b1b1b3b1b3b1b1}16^{__CFXFXPass={__CFRuntimeBase=QAQ}^{__CFString}iiB^{__CFXFXRenderGraph}^{__CFString}^{__CFString}^{__CFString}^{__CFString}B^{__CFXFXProgram}^{__CFXMaterial}^{__CFXBlendStates}^{__CFXRasterizerStates}{CFXColor4=(?=[4f]{?=ffff})}CIb1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1^{__CFXRendererElement}QQ{?=^?^?^?^?^?^?^?^?^v}{?=[8{?=CCCb1b1b1b1b1b1[4C]}]{?=CCCb1b1b1b1b1b1[4C]}b3b1b1}{CGPoint=dd}[9f]^{?}I^{__CFXNode}^{__CFXNode}^{__CFArray}^{__CFXNode}C^{__CFString}^{__CFString}^{__CFString}^^{__CFXFXPassInput}qq^{__CFDictionary}@?@?^{__CFDictionary}^v}24
v56@0:8^{?=SS}16{?=qq}24^{__CFXRendererElementStore=}40^{__CFXFXPassInstance=^{__CFXFXPass}q^{__CFXFXPassInstance}CCBCC[16^{__CFXArray}]{__CFXCullingContext=^{__CFXEnginePipeline}[16{?=[6{?=}]}][16{?=[4]}][16{?=[4]}][16{?=[4]}][16{?=[4]}][16{?=[6{?=}]}][16{?=[4]}][16{?=[4]}][16{?=[4]}][16{?=[4]}][16][16{?=[4]}]CCCCB^{__CFXFXPass}^v^{__CFXNode}^{__CFXNode}^{__CFXNode}BBBBBBBCQQ^v^{__CFXWorld}^{__CFXEngineContext}dd{?=}{?=[4]}{?=[4]}[16{?=^{?}II}]B^?}^{__CFXNode}SI}48
c32@0:8^{__CFXMesh=}16q24
v32@0:8^{__CFXMesh=}16q24
^{__CFXMeshElement={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}II^{__CFXMeshElement}CCC{?=c^{__CFData}I^I^{?}SCB}^vfff^v^{__CFXMeshSource}[2]^{?}I}36@0:8c16q20q28
v24@0:8^{__CFXMeshElement={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}II^{__CFXMeshElement}CCC{?=c^{__CFData}I^I^{?}SCB}^vfff^v^{__CFXMeshSource}[2]^{?}I}16
v24@0:8^{__CFXFXPass={__CFRuntimeBase=QAQ}^{__CFString}iiB^{__CFXFXRenderGraph}^{__CFString}^{__CFString}^{__CFString}^{__CFString}B^{__CFXFXProgram}^{__CFXMaterial}^{__CFXBlendStates}^{__CFXRasterizerStates}{CFXColor4=(?=[4f]{?=ffff})}CIb1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1^{__CFXRendererElement}QQ{?=^?^?^?^?^?^?^?^?^v}{?=[8{?=CCCb1b1b1b1b1b1[4C]}]{?=CCCb1b1b1b1b1b1[4C]}b3b1b1}{CGPoint=dd}[9f]^{?}I^{__CFXNode}^{__CFXNode}^{__CFArray}^{__CFXNode}C^{__CFString}^{__CFString}^{__CFString}^^{__CFXFXPassInput}qq^{__CFDictionary}@?@?^{__CFDictionary}^v}16
^{__CFXMaterial=}16@0:8
^{__CFXEngineStats=IIIIIIIIIIIIIIIIIIIIIIIIdddddddddddddddIIIIIIIIIIIIIIIIIdIdIdddd[60d]Idd}
@"<MTLDevice>"
@"<MTLCommandQueue>"
@"NSObject<OS_dispatch_semaphore>"
{atomic<int>="__a_"{__cxx_atomic_impl<int, std::__cxx_atomic_base_impl<int>>="__a_value"Ai}}
@"CAMetalLayer"
@"<CAMetalDrawable>"
@"<MTLCommandBuffer>"
^{VFXMTLRenderCommandEncoder=IC@@^{VFXMTLBufferPool}B}
{VFXMTLBlitCommandEncoder="_encoder"@"<MTLBlitCommandEncoder>""_commandBuffer"@"<MTLCommandBuffer>"}
{VFXMTLComputeCommandEncoder="_encoder"@"RGCachedComputeCommandEncoder""_commandBuffer"@"<MTLCommandBuffer>""_bufferPool"^{VFXMTLBufferPool}"_features"I}
{?="renderSliceIndex"C"eyeCount"C"viewMapping"C"multiVertexOutputStreamGenerator"C"isMainPass"B}
{?="vertexIndex"c"fragmentIndex"c}
^^{VFXMTLBufferPool}
@"<MTLDepthStencilState>"
@"<MTLSamplerState>"
[3^{__CFXFXProgram}]
@"NSObject<OS_dispatch_queue>"
@"NSObject<OS_dispatch_group>"
{?="passInstance"^{__CFXFXPassInstance}"lightingSystem"^{__CFXLightingSystem}"dynamicBatchingSystem"^{__CFXDynamicBatchingSystem}"pass"^{__CFXFXPass}"renderGraphPass"^v"passRequiresLighting"c"isMainPass"c"transformTree"^{__CFXTransformTree}"programHashCodeStoreKey"Q}
[16{VFXWorldBuffer="viewTransform"{float4x4="columns"[4]}"inverseViewTransform"{float4x4="columns"[4]}"projectionTransform"{float4x4="columns"[4]}"viewProjectionTransform"{float4x4="columns"[4]}"viewToCubeTransform"{float4x4="columns"[4]}"lastFrameViewProjectionTransform"{float4x4="columns"[4]}"ambientLightingColor""fogColor""fogParameters""inverseResolution""time"f"sinTime"f"cosTime"f"random01"f"motionBlurIntensity"f"environmentIntensity"f"environmentTransform"{float4x4="columns"[4]}"inverseProjectionTransform"{float4x4="columns"[4]}"inverseViewProjectionTransform"{float4x4="columns"[4]}"nearFar""viewportSize""inverseTransposeViewTransform"{float4x4="columns"[4]}"clusterScale""frame"I}]
{?="buffer"@"<MTLBuffer>""offset"Q}
{?="modelTransform"{float4x4="columns"[4]}"lastFrameModelTransform"{float4x4="columns"[4]}"normalTransforms"[16{float4x4="columns"[4]}]"modelViewTransforms"[16{float4x4="columns"[4]}]"modelViewProjectionTransforms"[16{float4x4="columns"[4]}]"boundingBox"{float2x3="columns"[2]}"worldBoundingBox"{float2x3="columns"[2]}"instanceNode"^{__CFXNode}"flags"I"probeCacheIndex"^I}
{?="frameLightingSetDatas"{unordered_map<unsigned long long, VFXMTLLightSetData, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, VFXMTLLightSetData>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>>="__value_"f}}}"currentLightingHashKey"Q"currentLightingDesc"{?="count"q"lights"[8^{__CFXLight}]"lightsData"[8^{__CFXLightRuntimeData}]}"currentLightingSpace"{?="columns"[4]}"currentLightingSpaceShadow"{?="columns"[4]}"needLightingSpaceTransformation"B"clusterSystem"{VFXMTLClusterSystem="clustersCount""tileSize""selectedDebugClusterIndex""_debugClusterTilesPipeline"@"VFXMTLRenderPipeline""_debugLightIndicesBufferPipeline"@"VFXMTLRenderPipeline""_debugClusterSlicesPipeline"@"VFXMTLRenderPipeline""_debugProgram"[7^{__CFXFXProgram}]"_debugShapes"[7^{__CFXMesh}]}"clusterInfo"{Info="clusterBuffer"{?="memory"*"buffer"@"<MTLBuffer>""offset"Q}"clusterTexture"@"<MTLTexture>""lightIndicesBuffer"@"<MTLBuffer>""lightIndicesBufferOffset"I"lightIndicesBufferSize"I"cellSize""clusterScale""cellPixelSize""omniLightsRange""spotLightsRange""probeLightsRange""lightsBuffer"{?="memory"*"buffer"@"<MTLBuffer>""offset"Q}"lightsBufferLightCount"I"shadowTexture"@"<MTLTexture>""iesOrGoboTextures"[8@"<MTLTexture>"]"samplerStates"[8@"<MTLSamplerState>"]"areaBuffer"@"<MTLBuffer>""areaBufferOffset"Q"areaBufferOffsets"[8Q]}"reflectionProbesTextureArray"@"<MTLTexture>"}
{?="view_from_crworld"[2{?="columns"[4]}]"proj_from_crworld"[2{?="columns"[4]}]"proj_from_view"[2{?="columns"[4]}]"view_from_proj"[2{?="columns"[4]}]"crws_camera_pos"[2]"worldReferencePosition""renderTargetSize""viewportCount"I"useVertexAmplification"I"viewport_percents"[2]}
[2{?="originX"d"originY"d"width"d"height"d"znear"d"zfar"d}]
{Cache="rasterizerStates"^{__CFXRasterizerStates}"mesh"^{__CFXMesh}"metalMesh"@"VFXMTLMesh""meshElement"^{__CFXMeshElement}"metalMeshElement"@"VFXMTLMeshElement""program"^{__CFXFXProgram}"material"^{__CFXMaterial}"geometry"^{__CFXGeometry}"metalShadable"@"VFXMTLShadable""commonProfile"^{__CFXCommonProfile}"blendStates"^{__CFXBlendStates}"colorBufferWriteMask"C"primitiveTopologyClass"C"node"^{__CFXNode}"pointOfView"^{__CFXNode}"deformers"^{__CFXDeformerStack}"viewTransform"{?="columns"[4]}"proj"{?="columns"[4]}"vertexDescriptorHash"Q"tessellationPipelineStateHash"C"renderPipeline"@"VFXMTLRenderPipeline"}
[1{?="hash"Q"pipeline"@"VFXMTLRenderPipeline"}]
@"VFXMTLRenderPipeline"
{?="pixelFormat"Q"sampleCount"Q"displayCubemapPipeline"@"VFXMTLRenderPipeline""displayTexture2DPipeline"@"VFXMTLRenderPipeline""displayDepth2DPipeline"@"VFXMTLRenderPipeline""displayDepthCubePipeline"@"VFXMTLRenderPipeline"}
{?="collectEnabled"c"errors"@"NSMutableDictionary"}
{?="modelTransformBindingCount"I"modelViewTransformBindingCount"I"normalTransformBindingCount"I"nodeOpacityBindingCount"I}
{?="passHash"Q"material"^{__CFXMaterial}}
@"<VFXTextureAttachmentProvider>"
@"<VFXMTLRenderContextResourceManagerMonitor>"
@"<VFXMTLRenderContextCommandBufferStatusMonitor>"
@"CFXVFXRenderTargetInfo"
@"<MTLRenderCommandEncoder>"
@28@0:8i16@20
@44@0:8i16@20^q28^q36
r*20@0:8i16
c44@0:8i16@20^q28^q36
v32@0:8r^^v16^q24
@32@0:8@16^Q24
@48@0:8C16^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}20s28c32c36^Q40
@76@0:8C16^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}20^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}28s36s40c44c48^Q52^Q60^Q68
@"<MTLBuffer>"32@0:8@"<MTLBlitCommandEncoder>"16^Q24
@"<MTLBuffer>"48@0:8C16^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}20s28c32c36^Q40
@"<MTLBuffer>"76@0:8C16^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}20^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}28s36s40c44c48^Q52^Q60^Q68
@"<MTLBlitCommandEncoder>"16@0:8
@"MTLStageInputOutputDescriptor"16@0:8
v24@0:8^{VFXMTLComputeCommandEncoder=@@^{VFXMTLBufferPool}I}16
{?={?=[4]}{?=[4]}{?=[4]}}16@0:8
v38@0:8^{__CFXMesh=}16^{__CFString=}24{?=cccccc}32
v40@0:8^{__CFXMesh=}16^{__CFString=}24{?=cccc}32c36
v25@0:8@16{?=B}24
{?=[6]}16@0:8
^{__CFXDeformerStack=}
^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}
^{__CFXMesh=}
@"MTLStageInputOutputDescriptor"
@"VFXMTLMesh"
{?="isActive"c"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}
{?="maxIndex"I}
@"VFXMTLComputePipeline"
@"VFXModelDeformer"
@"VFXMTLRenderContext"
@"<MTLBlitCommandEncoder>"
{?="modelViewTransform"{?="columns"[4]}"modelViewProjectionTransform"{?="columns"[4]}"projectionTransform"{?="columns"[4]}}
{?="screenResolution""worldPlanes"[6]}
^{VFXMTLComputeCommandEncoder=@@^{VFXMTLBufferPool}I}
@"VFXMTLMorphDeformer"
@"VFXMTLSkinDeformer"
@"VFXMTLSmoothNormalsDeformer"
@"NSMapTable"
v32@0:8@"MTLStageInputOutputDescriptor"16@"<MTLFunction>"24
@"<MTLComputeCommandEncoder>"16@0:8
@32@0:8Q16@24
@"VFXMTLDeformerStack"
@"<VFXModelDeformerInstance>"
{?="srcPositions"{?="isActive"c"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"dstPositions"{?="isActive"c"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"srcNormals"{?="isActive"c"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"dstNormals"{?="isActive"c"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"srcTangents"{?="isActive"c"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"dstTangents"{?="isActive"c"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"dependency0Positions"{?="isActive"c"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"dependency0Normals"{?="isActive"c"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"dependency0Tangents"{?="isActive"c"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"dependency1Positions"{?="isActive"c"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"dependency1Normals"{?="isActive"c"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"dependency1Tangents"{?="isActive"c"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}}
@"<MTLComputeCommandEncoder>"
{?="srcPositions"@"<MTLBuffer>""dstPositions"@"<MTLBuffer>""srcNormals"@"<MTLBuffer>""dstNormals"@"<MTLBuffer>""srcTangents"@"<MTLBuffer>""dstTangents"@"<MTLBuffer>""dependency0Positions"@"<MTLBuffer>""dependency0Normals"@"<MTLBuffer>""dependency0Tangents"@"<MTLBuffer>""dependency1Positions"@"<MTLBuffer>""dependency1Normals"@"<MTLBuffer>""dependency1Tangents"@"<MTLBuffer>"}
Q48@0:8@16@24@32@40
Q48@0:8@"<VFXMTLDeformerUpdateComputeContext>"16@"<MTLBuffer>"24@"<MTLBuffer>"32@"<MTLBuffer>"40
v32@0:8r*16^v24
v32@0:8r*16r^v24
@24@0:8^{__CFXCamera={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}{?=b1b1b1b3ffff{?=[4]}{?=[4]}}fff^{__CFXCameraEffectDepthOfField}^{__CFXCameraEffectMotionBlur}^{__CFXCameraEffectGrain}^{__CFXCameraEffectExposure}^{__CFXCameraEffectToneMapping}^{__CFXCameraEffectBloom}^{__CFXCameraEffectVignetting}^{__CFXCameraEffectLensBlur}^{__CFXCameraEffectColorFringe}^{__CFXCameraEffectColorGrading}^{__CFXCameraEffectChromaticTransform}^{__CFXCameraEffectDoughnutBokeh}^{__CFXCameraEffectSSAO}b1b1b1b1{?=[4]}Q^{__CFXFXRenderGraph}}16
{CGAffineTransform=dddddd}16@0:8
v64@0:8{CGAffineTransform=dddddd}16
^{__CFXCamera={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}{?=b1b1b1b3ffff{?=[4]}{?=[4]}}fff^{__CFXCameraEffectDepthOfField}^{__CFXCameraEffectMotionBlur}^{__CFXCameraEffectGrain}^{__CFXCameraEffectExposure}^{__CFXCameraEffectToneMapping}^{__CFXCameraEffectBloom}^{__CFXCameraEffectVignetting}^{__CFXCameraEffectLensBlur}^{__CFXCameraEffectColorFringe}^{__CFXCameraEffectColorGrading}^{__CFXCameraEffectChromaticTransform}^{__CFXCameraEffectDoughnutBokeh}^{__CFXCameraEffectSSAO}b1b1b1b1{?=[4]}Q^{__CFXFXRenderGraph}}16@0:8
{?=[4]}32@0:8{CGSize=dd}16
^{__CFXCamera={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}{?=b1b1b1b3ffff{?=[4]}{?=[4]}}fff^{__CFXCameraEffectDepthOfField}^{__CFXCameraEffectMotionBlur}^{__CFXCameraEffectGrain}^{__CFXCameraEffectExposure}^{__CFXCameraEffectToneMapping}^{__CFXCameraEffectBloom}^{__CFXCameraEffectVignetting}^{__CFXCameraEffectLensBlur}^{__CFXCameraEffectColorFringe}^{__CFXCameraEffectColorGrading}^{__CFXCameraEffectChromaticTransform}^{__CFXCameraEffectDoughnutBokeh}^{__CFXCameraEffectSSAO}b1b1b1b1{?=[4]}Q^{__CFXFXRenderGraph}}
@"VFXCameraEffectDepthOfField"
@"VFXCameraEffectMotionBlur"
@"VFXCameraEffectGrain"
@"VFXCameraEffectExposure"
@"VFXCameraEffectToneMapping"
@"VFXCameraEffectBloom"
@"VFXCameraEffectColorGrading"
@"VFXCameraEffectColorFringe"
@"VFXCameraEffectVignetting"
@"VFXCameraEffectLensBlur"
@"VFXCameraEffectChromaticTransform"
@"VFXCameraEffectDoughnutBokeh"
@"VFXCameraEffectSSAO"
{CFXColor4=(?=[4f]{?=ffff})}28@0:8c16*20
@48@0:8d16d24d32d40
@56@0:8d16d24d32d40@48
@24@0:8r^{CFXColor4=(?=[4f]{?=ffff})}16
@28@0:8r^{CFXColor4=(?=[4f]{?=ffff})}16c24
@24@0:8@?16
@32@0:8{CGPoint=dd}16
@24@0:816
@32@0:816
@80@0:8{?=[4]}16
@24@0:8^{__CFXLight=}16
^{__CFXLight=}16@0:8
v48@0:8@16@24@32^v40
v32@0:8{CGSize=dd}16
^{__CFXLight=}
@"VFXIESProfile"
r^{__CFXIESInfo=ffffffiiiiiffffff^f^f^f}16@0:8
{__CFXIESInfo="totalLights"f"totalLumens"f"candalaMult"f"maxCandela"f"maxHAngle"f"maxVAngle"f"typeOfPhotometric"i"typeOfUnit"i"anglesHCount"i"anglesVCount"i"candalaValuesCount"i"width"f"length"f"height"f"ballastFactor"f"futureUse"f"inputWatts"f"anglesH"^f"anglesV"^f"candalaValues"^f}
@24@0:8^{__CFXMaterial=}16
@"VFXProgram"16@0:8
v24@0:8@"VFXProgram"16
@"NSDictionary"16@0:8
v24@0:8@"NSDictionary"16
@"NSNumber"16@0:8
v24@0:8@"NSNumber"16
@"VFXBehaviorGraph"16@0:8
v24@0:8@"VFXBehaviorGraph"16
^{__CFXCommonProfile={__CFRuntimeBase=QAQ}^{__CFXMaterial}i^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}ffffCqBb1b1b1b1b1b1b1b13}16@0:8
v24@0:8^@16
@24@0:8^@16
^{__CFXMaterial=}
@"VFXShadableHelper"
@"VFXBehaviorGraph"
@32@0:8@16^{__CFDictionary=}24
@24@0:8^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}16
c32@0:8^16^f24
{?=[2]}16@0:8
v48@0:8{?=[2]}16
v32@0:8Q16@24
v40@0:8Q16@24^{__CFDictionary=}32
@32@0:8Q16^{__CFDictionary=}24
@24@0:8^{__CFDictionary=}16
c36@0:8@?16c24@28
@28@0:8@?16c24
c24@0:8@?16
v36@0:8#16@24c32
@28@0:8#16c24
v32@0:8@16q24
^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}16@0:8
v32@0:8{?=}16
c32@0:8^16^24
v32@0:8^16^24
c40@0:8^{?=[6{?=}]}1624
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@16
v64@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48@56
40@0:816@32
{?=[4]}88@0:8{?=[4]}16@80
v64@0:8163248
v48@0:8{?=}1632
(?="eulerAngles""axisAngle""quaternion"{?="vector"})
@48@0:8@16@24@32^@40
@40@0:8@16@24^@32
@24@0:8^{__CFXWorld=}16
:16@0:8
c32@0:8@16^@24
v28@0:8@16i24
^{_opaque_pthread_mutex_t=q[56c]}16@0:8
c40@0:8@16@24@?32
c48@0:8@16@24@32^@40
q24@0:8q16
@"VFXRenderGraph"
@"<VFXAssetPathResolver>"
@"<VFXWorldRemotePreviewDelegate>"
@"_TtC3VFX24VFXRemotePreviewEndpoint"
[4@"VFXNode"]
@"VFXClock"
@"VFXAssetRegistry"
@"VFXStateManager"
^{__CFXCoreEntityManager=}
@"VFXBidirectionalRemapTable"
@"VFXTriggerManager"
@"NSURL"24@0:8@"NSString"16
v40@0:8^{__CFXEngineContext=}16^{__CFXTextureSampler={__CFRuntimeBase=QAQ}iiiiiifCiQ}24^d32
v24@0:8^{__CFXImageProxy=}16
v24@0:8^{__CFXEngineContext=}16
^{__CFXFramebuffer=}
@48@0:8^{__CFXEngineContext=}16@24@32@40
{?="mouseDown"b1"mouseUp"b1"mouseMoved"b1"mouseDragged"b1"keyDown"b1"keyUp"b1"touchBegan"b1"touchMoved"b1"touchEnded"b1"touchCanceled"b1}
@40@0:8{CGSize=dd}16@32
v24@0:8^{CGColorSpace=}16
@56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
c20@0:8f16
{CGSize=dd}32@0:8{CGSize=dd}16
f24@0:8d16
@"VFXDisplayLink"
@"VFXJitterer"
@"VFXRecursiveLock"
@"<VFXEventHandler>"
@"_TtC3VFX13VFXViewLegacy"
@?16@0:8
v40@0:8@16q24@?32
@"<MTLTexture>"32@0:8@"NSString"16@"MTLTextureDescriptor"24
@"VFXDrawableDescriptor"16@0:8
@"VFXDrawableDescriptor"
{?=dddddd}16@0:8
v64@0:8{?=dddddd}16
{?="originX"d"originY"d"width"d"height"d"znear"d"zfar"d}
@"<MTLRasterizationRateMap>"
v32@0:8@"VFXMTLRenderContext"16@"<MTLCommandBuffer>"24
v40@0:8@"VFXMTLRenderContext"16@24@"NSString"32
@48@0:8@16@24c32@36c44
v48@0:8^16Q2432
48@0:81632
v24@0:8^{CGColor=}16
@56@0:8{CGPoint=dd}16{CGSize=dd}32@48
c48@0:8@16@2432
@40@0:8@1624
v80@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48@56@64@72
^{CGImage=}24@0:8^@16
^{CGImage=}32@0:8{CGSize=dd}16
@32@0:8{CGSize=dd}16
^{CGImage=}40@0:8{CGSize=dd}16^@32
v40@0:8@16@24@?32
v40@0:8@16d24@?32
v40@0:8Q16c24c28@32
{?="frameBuffer"^{__CFXFramebuffer}"multisamplingFrameBuffer"^{__CFXFramebuffer}"drawableSize"{CGSize="width"d"height"d}}
{?="supportsUpdate"b1"supportsDidApplyAnimations"b1"supportsDidSimulatePhysics"b1"supportsDidApplyConstraints"b1"supportsWillRender"b1"supportsDidRender"b1"supportsInputTime"b1"supportsReadSubdivCache"b1"supportsWriteSubdivCache"b1"supportsMainPassCustomPostProcess"b1}
{CFXColor4=""(?="rgba"[4f]""{?="r"f"g"f"b"f"a"f}"simd")}
@"_TtC3VFX17VFXRendererLegacy"
@"VFXAuthoringEnvironment"
@"<_VFXWorldRendererResourceManagerMonitor>"
@"<_VFXWorldCommandBufferStatusMonitor>"
i20@0:8i16
@96@0:8@162440@566480
@56@0:8@162440
^{btSliderConstraint=^^?ii(?=i^v)fBBi^{btRigidBody}^{btRigidBody}ff^{btJointFeedback}BB{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}BffffffffffffffffffffffffffffBBi[3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f}][3f][3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f}]f{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}ffffBfffBfff}16@0:8
{?="axisA""anchorA""axisB""anchorB""minLinearLimit"f"maxLinearLimit"f"minAngularLimit"f"maxAngularLimit"f"motorTargetLinearVelocity"f"motorMaximumForce"f"motorTargetAngularVelocity"f"motorMaximumTorque"f}
@32@0:8@16^@24
v32@0:8^?16^v24
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
^{__CFXKeyframedAnimation=}16@0:8
v24@0:8^{__CFXKeyframedAnimation=}16
^{__CFXKeyframedAnimation=}
@28@0:8f16@?20
c36@0:8d16c24^v28
@24@0:8^{__CFXTimingFunction=}16
^{__CFXTimingFunction=}16@0:8
^{__CFXTimingFunction=}
@24@0:8^{__CFXAnimation=}16
v24@0:8^{__CFXAnimation=}16
^{__CFXAnimation=}16@0:8
v32@0:8@16d24
^{__CFXAnimation=}
@"VFXTimingFunction"
@24@0:8^{__CFXAnimationPlayer=}16
^{__CFXAnimationPlayer=}16@0:8
^{__CFXAnimationPlayer=}
@"VFXAnimation"
#40@0:8@16@24@32
#40@0:8@"NSKeyedUnarchiver"16@"NSString"24@"NSArray"32
@32@0:8@"NSKeyedUnarchiver"16@24
v40@0:8@"NSKeyedUnarchiver"16@24@32
v24@0:8@"NSKeyedUnarchiver"16
c56@0:8@16@24@32@?40^@48
c60@0:8@16@24@32c40@?44^@52
c68@0:8@16@24@32c40@44@?52^@60
@"NSUUID"
@"NSError"
@24@0:8^{__CFArray=}16
@24@0:8^{__CFXHitTestResult=}16
{CGPoint=dd}24@0:8q16
^{__CFXHitTestResult=}
v56@0:8@16@?24@?32@?40@48
v56@0:8@"<MTLTexture>"16@?<v@?@?<v@?@"<MTLComputeCommandEncoder>">>24@?<v@?@?<v@?@"<MTLBlitCommandEncoder>">>32@?<v@?@?<v@?@"<MTLCommandBuffer>">>40@"<VFXMaterialPropertyTextureProviderHelper>"48
^{__CFXImage=}32@0:8@16Q24
^{__CFXImage=}36@0:8@16i24*28
^{__CFXImage=}28@0:8@16i24
^{__CFXImage=}24@0:8@16
@24@0:8^{__CFXImage=}16
^{__CFXMaterialProperty={__CFRuntimeBase=QAQ}(?=^{__CFXImage}^{__CFXImageProxy}^{__CFXTexture}^v^v{CFXColor4=(?=[4f]{?=ffff})}^v)^vq^vb8b1b4c^{__CFXTextureSampler}^{?}fi^v}20@0:8c16
v24@0:8^{__CFXImage=}16
^{CGImage=}16@0:8
^{CGContext=}16@0:8
{CFXColor4=(?=[4f]{?=ffff})}16@0:8
^{__CFXMaterialProperty={__CFRuntimeBase=QAQ}(?=^{__CFXImage}^{__CFXImageProxy}^{__CFXTexture}^v^v{CFXColor4=(?=[4f]{?=ffff})}^v)^vq^vb8b1b4c^{__CFXTextureSampler}^{?}fi^v}16@0:8
^{__CFXTextureSampler={__CFRuntimeBase=QAQ}iiiiiifCiQ}16@0:8
^{__CFXMaterialProperty={__CFRuntimeBase=QAQ}(?=^{__CFXImage}^{__CFXImageProxy}^{__CFXTexture}^v^v{CFXColor4=(?=[4f]{?=ffff})}^v)^vq^vb8b1b4c^{__CFXTextureSampler}^{?}fi^v}
^{__CFXImage=}
^{?=[4]}
@32@0:8f16f20@24
@40@0:8f16f20f24f28@32
@36@0:8f16f20f24@28
@28@0:8f16@20
@24@0:8^{__CFXFloor={__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}ffffifffQ}16
^{__CFXFloor={__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}ffffifffQ}16@0:8
^{__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}16@0:8
v28@0:8c16@?20
v20@0:8C16
@24@0:8^{__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}16
v24@0:8^{__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}16
c48@0:8@16@24^@32^@40
{?=cCCC}16@0:8
v20@0:8{?=cCCC}16
@"VFXMesh"
{?="enableVertexWeldingAtImport"c"boundaryInterpolationRule"C"faceVaryingInterpolationRule"C"normalSmoothingMode"C}
@"VFXMeshSource"
@"VFXMeshElement"
@"VFXModelTessellator"
@24@0:8^{__CFXSkinner=}16
^{__CFXSkinner=}48@0:8@16@24@32@40
^{__CFXSkinner=}56@0:8q16@24@32@40@48
^{__CFXSkinner=}40@0:8@16Q24Q32
@56@0:8@16@24@32@40@48
^{__CFXSkinner=}16@0:8
^{__CFXSkinner=}
@"VFXState"
@20@0:8f16
@24@0:8f16f20
@40@0:8@16Q24^@32
@48@0:8@16@24@32Q40
c48@0:8@16@24Q32^@40
c40@0:8@16Q24^@32
{__zFlags="providerSuppliesContents"b1"providerSuppliesStreams"b1"providerSuppliesProperties"b1"noContentsCaching"b1"fileOpen"b1"reserved"b27}
[5^v]
s16@0:8
v20@0:8s16
@"<_TtP3VFX10VFXBinding_>"
@"VFXMTLLibraryManager"
@"<MTLLibrary>"
v24@0:8^{__CFXEngineStats=IIIIIIIIIIIIIIIIIIIIIIIIdddddddddddddddIIIIIIIIIIIIIIIIIdIdIdddd[60d]Idd}16
v128@0:8{?=^{__CFXFXProgram}^{__CFXMaterial}^{__CFXGeometry}^{__CFXFXPass}^{__CFXFXPass}@^{__CFXBlendStates}^{__CFXNode}CCCCCC@{?=C@?}Q}16@?120
@"VFXMTLLibrary"
@40@0:8@16Q24Q32
v40@0:8@16{_NSRange=QQ}24
@"<MTLTexture>"40@0:8@"MTLTextureDescriptor"16Q24Q32
v40@0:8@"NSString"16{_NSRange=QQ}24
@"<MTLBuffer>"24@0:8@"<MTLDevice>"16
v52@0:8@16^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}24c32q36q44
v68@0:8@16c24q28q36Q44Q52Q60
v24@0:8r^v16
v32@0:8^{__CFXFXProgram={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}b1b1^{__CFXFXProgramDelegate}[2^{__CFString}]^{__CFString}^{__CFString}^{__CFDictionary}^{__CFSet}^v^{__CFDictionary}^vQI}16^{__CFXFXPass={__CFRuntimeBase=QAQ}^{__CFString}iiB^{__CFXFXRenderGraph}^{__CFString}^{__CFString}^{__CFString}^{__CFString}B^{__CFXFXProgram}^{__CFXMaterial}^{__CFXBlendStates}^{__CFXRasterizerStates}{CFXColor4=(?=[4f]{?=ffff})}CIb1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1^{__CFXRendererElement}QQ{?=^?^?^?^?^?^?^?^?^v}{?=[8{?=CCCb1b1b1b1b1b1[4C]}]{?=CCCb1b1b1b1b1b1[4C]}b3b1b1}{CGPoint=dd}[9f]^{?}I^{__CFXNode}^{__CFXNode}^{__CFArray}^{__CFXNode}C^{__CFString}^{__CFString}^{__CFString}^^{__CFXFXPassInput}qq^{__CFDictionary}@?@?^{__CFDictionary}^v}24
@32@0:8^{__CFData=}16Q24
v32@0:8^{__CFXMesh=}16@24
@36@0:8^{__CFXDeformerStack=}16^{__CFXNode=}24C32
@44@0:8^{__CFXSkinner=}16^{__CFXMesh=}24C32@?36
@44@0:8^{__CFXMorpher={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXGeometry}^{__CFXMorph}II^fII}16^{__CFXMesh=}24C32@?36
@"VFXMTLShaderBindingsGenerator"
@"VFXMTLBufferAllocator"
{?="registry"@"NSMapTable""lock"{os_unfair_lock_s="_os_unfair_lock_opaque"I}}
@"VFXMTLShadableKey"
@"MTKTextureLoader"
^{__CFXNode=}16@0:8
@"AVAudioNode"
@"AVAudioPlayerNode"
@"VFXAudioSource"
^{__CFXNode=}
@"AVAudioFile"
@"AVAudioPCMBuffer"
@32@0:8r^{btPersistentManifold=i[4{btManifoldPoint={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}ffffiiii^vBfffffffi{btVector3=(?=[4f])}{btVector3=(?=[4f])}}]^{btCollisionObject}^{btCollisionObject}iffiii^{cfxContactCallback}}16q24
v72@0:8@16@243248f64f68
v40@0:8r^{btPersistentManifold=i[4{btManifoldPoint={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}ffffiiii^vBfffffffi{btVector3=(?=[4f])}{btVector3=(?=[4f])}}]^{btCollisionObject}^{btCollisionObject}iffiii^{cfxContactCallback}}16q24r^{btManifoldPoint={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}ffffiiii^vBfffffffi{btVector3=(?=[4f])}{btVector3=(?=[4f])}}32
v36@0:816c32
v52@0:81632c48
@"VFXPhysicsShape"
@"VFXBtShapeWrapper"
@32@0:8f16f20f24f28
@28@0:8f16f20f24
@24@0:8^{__CFXParametricGeometry={__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}{?=fffffffffiiiiiiiiiiI}{?=^?^?^?^?^?^?}^{__CFData}}16
v24@0:8^{__CFXParametricGeometry={__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}{?=fffffffffiiiiiiiiiiI}{?=^?^?^?^?^?^?}^{__CFData}}16
@48@0:8@16@24Q32@?40
c36@0:8c16d20d28
v20@0:8I16
^{__CVDisplayLink=}
v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
v24@0:8:16
@"NSImage"
@24@0:8^{btCollisionShape=^^?i^v}16
^{btCollisionShape=^^?i^v}16@0:8
^{btCollisionShape=^^?i^v}
@24@0:8^{__CFXNode=}16
^{__CFArray=}
@40@0:8@16@24@?32
v48@0:8@16@24@32@?40
@44@0:8@16^{__CFXEngineContext=}24c32@36
@40@0:8@16^{__CFXEngineContext=}24@32
v32@0:8^16Q24
@64@0:8q16@24@32@40@48Q56
@48@0:8@16@24^@32^@40
c32@0:8@?16^@24
@120@0:8@16@24Q32{?=[4]}40Q104Q112
@112@0:8@16@24@32Q40{?=[4]}48
v32@0:8^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}16^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}24
v40@0:8^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}16^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}24^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}32
@32@0:8^{__CFXMesh=}16^{__CFXMesh=}24
{?="pointIndices"^v"pointIndicesStride"Q"pointIndicesFormat"Q"barycentricCoords"^v"barycentricCoordsStride"Q"barycentricCoordsFormat"Q"innerLayerInfluences"^f"innerLayerInfluencesLength"Q"innerLayerTNBs"^f"outerLayerTNBs"^f"tnbMatricesLength"Q"innerLayerOffsets"^f"outerLayerOffsets"^f"offsetsLength"Q"legacyOffsetsOrTransforms"^f"legacyOffsetsOrTransformsLength"Q}
c24@0:8^{?=}16
@48@0:8@16Q24Q32@40
@"VFXModelWrapDeformerParameters"
Q24@0:8@"<VFXModelDeformerUpdateComputeContext>"16
{?="vertexCount"I"innerLayerToDeformedTransform"{?="columns"[4]}"outerLayerToDeformedTransform"{?="columns"[4]}}
{?="vertexCount"I"driverToDeformedTransform"{?="columns"[4]}}
v40@0:8@16{CGSize=dd}24
v40@0:8@"MTKView"16{CGSize=dd}24
v24@0:8@"MTKView"16
v28@0:8Q16c24
@"MTKView"
[3@"<MTLBuffer>"]
@"<MTLComputePipelineState>"
[2{?="drawableIndex"Q"colorAttachment"@"MTLRenderPassColorAttachmentDescriptor""depthAttachment"@"MTLRenderPassDepthAttachmentDescriptor"}]
[3[2@"<MTLTexture>"]]
v24@0:8^{__CFXEngineNotificationQueue={__CFRuntimeBase=QAQ}^{__CFDictionary}^{__CFDictionary}{os_unfair_lock_s=I}dBBB^v}16
^{__CFXEngineNotificationQueue={__CFRuntimeBase=QAQ}^{__CFDictionary}^{__CFDictionary}{os_unfair_lock_s=I}dBBB^v}16@0:8
@"VFXRendererOptionsPanelController"
@64@0:8@1624@4048
^{btPoint2PointConstraint=^^?ii(?=i^v)fBBi^{btRigidBody}^{btRigidBody}ff^{btJointFeedback}[3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f}]{btVector3=(?=[4f])}{btVector3=(?=[4f])}iffB{btConstraintSetting=fff}}16@0:8
{?="anchorA""anchorB"}
@32@0:8@16q24
q24@0:8@16
@40@0:8@16q24@32
q32@0:8@16@24
@"VFXRendererOptionsPanel"
@"NSPopUpButton"
@"NSTextField"
@"NSSlider"
@"NSStepper"
@"NSButton"
@"NSOutlineView"
@"VFXUIDynamicInspector"
@"NSComboBox"
@128@0:8{?=^{__CFXFXProgram}^{__CFXMaterial}^{__CFXGeometry}^{__CFXFXPass}^{__CFXFXPass}@^{__CFXBlendStates}^{__CFXNode}CCCCCC@{?=C@?}Q}16@120
^{__CFXFXProgram=}20@0:8c16
v360@0:8@16{?={?=^{__CFXFXProgram}^{__CFXMaterial}^{__CFXGeometry}^{__CFXFXPass}^{__CFXFXPass}@^{__CFXBlendStates}^{__CFXNode}CCCCCC@{?=C@?}Q}@{?=[8Q]QQC}^{__CFXBlendStates}[8Q]C@@@@@?CBBB}24@352
@344@0:8{?={?=^{__CFXFXProgram}^{__CFXMaterial}^{__CFXGeometry}^{__CFXFXPass}^{__CFXFXPass}@^{__CFXBlendStates}^{__CFXNode}CCCCCC@{?=C@?}Q}@{?=[8Q]QQC}^{__CFXBlendStates}[8Q]C@@@@@?CBBB}16
@72@0:8{?=@@@@?BBB@}16@64
@44@0:8@16@24@32c40
@56@0:8@16@24@?32@40@48
@48@0:8@16@24@32@40
@40@0:8^{CGColorSpace=}16^{CGColorSpace=}24@32
@68@0:8I16@20@28@36^{CGColorSpace=}44^{CGColorSpace=}52@60
@24@0:8^{__CFXForceField=}16
^{__CFXForceField=}16@0:8
^{__CFXForceField=}
{?="kind"q"active"B"strength"f"dampening"f"noiseAmount"f"noiseSeed"Q"categoryBitMask"Q"shape"q"scope"q"cullMode"q"falloffExponent"f"halfExtents""offset""smoothness"f"speed"f}
{AVAudio3DPoint=fff}16@0:8
v28@0:8{AVAudio3DPoint=fff}16
@"VFXAssetNode"
@"CAStateController"
v24@0:8^{CGImage=}16
v88@0:8^{?=fIIQQ}16^{?=I^{__CFXMesh}^{__CFXMeshSource}^{__CFXMeshSource}Q}24*32Q40*48Q56Q64^I72@80
v72@0:8^{?=fIIQQ}16^{?=I^{__CFXMesh}^{__CFXMeshSource}^{__CFXMeshSource}Q}24*32Q40Q48^I56@64
Q40@0:8@16@24@32
^{__CFXMorpher={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXGeometry}^{__CFXMorph}II^fII}
^{?=fIIQQ}
@"AVPlayer"
@"AVPlayerItemVideoOutput"
^{__CVMetalTextureCache=}
^{__CVBuffer=}
v40@0:8@16^{opaqueCMSampleBuffer=}24@32
v40@0:8@"AVCaptureOutput"16^{opaqueCMSampleBuffer=}24@"AVCaptureConnection"32
@"AVCaptureDevice"
@"AVCaptureSession"
v24@0:8^{opaqueCMSampleBuffer=}16
v24@0:8^{__CVBuffer=}16
v32@0:8^{opaqueCMSampleBuffer=}16@24
v32@0:8^{__CVBuffer=}16@24
v32@0:8^{opaqueCMSampleBuffer=}16@"AVCaptureDevice"24
v32@0:8^{__CVBuffer=}16@"AVCaptureDevice"24
@24@0:8^{__CFXMorph=}16
@24@0:8^{__CFXMorpher={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXGeometry}^{__CFXMorph}II^fII}16
#24@0:8@16
^{__CFXMorph=}16@0:8
v28@0:8f16@20
f24@0:8@16
v28@0:8f16Q20
f24@0:8Q16
f32@0:8Q16r^v24
v80@0:8@16@24@32@40@48@56@64@72
^{__CFXMorph=}
@"<MTLBinding>"
@"<MTLArgumentEncoder>"
^{?=@?II}
^{?=^{__CFXFXPassInput}II}
^{__CFXFXPassInput=}
v34@0:8@16q24{?=cc}32
@18@0:8{?=cc}16
[31@]
[16@]
^{__CFXFXPass=}
{?="colorFormat"[8Q]"depthFormat"Q"stencilFormat"Q"sampleCount"C}
[2I]
@"<MTLRenderPipelineState>"
@"MTLVertexDescriptor"
@"<MTLFunction>"
@"VFXMTLBuffer"
@"VFXFixedSizePage"
@32@0:8@16Q24
@"NSMutableIndexSet"
@40@0:8r^v16Q24@32
@"CALayer"16@0:8
@24@0:8@"NSString"16
@24@0:8@"NSArray"16
@64@0:8@16@24@32@40@48@56
v36@0:8@16@24c32
v32@0:8@"CAAnimation"16@"NSString"24
@"CAAnimation"24@0:8@"NSString"16
v32@0:8@16@"NSString"24
v24@0:8@"NSArray"16
@"CAMediaTimingFunction"16@0:8
v24@0:8@"CAMediaTimingFunction"16
@"NSColor"48@0:8d16d24d32d40
^{CGPath=}16@0:8
v24@0:8^{CGPath=}16
@"<VFXCameraControlConfiguration>"16@0:8
@"VFXCameraController"16@0:8
@"VFXPhysicsBody"16@0:8
@64@0:8@"VFXPhysicsBody"16@"NSArray"24@"NSArray"32@"VFXPhysicsBody"40@"NSArray"48@"NSArray"56
@40@0:8@"VFXPhysicsBody"16@"NSArray"24@"NSArray"32
v40@0:8@"NSString"16q24@?<v@?@"<VFXBufferStream>"@"VFXNode"@"<VFXShadable>"@"VFXRenderer">32
v40@0:8@"NSString"16@"NSString"24@"NSDictionary"32
@"NSString"24@0:8@"NSString"16
@"<VFXProgramDelegate>"16@0:8
v24@0:8@"<VFXProgramDelegate>"16
@"<MTLLibrary>"16@0:8
v24@0:8@"<MTLLibrary>"16
f24@0:8q16
v28@0:8f16q20
@"VFXMorpher"16@0:8
@"VFXModel"16@0:8
@28@0:8@"VFXModel"16f24
v64@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@"<MTLCommandBuffer>"48@"MTLRenderPassDescriptor"56
v32@0:8@"NSArray"16d24
@32@0:8@"<MTLDevice>"16@"NSDictionary"24
v24@0:8@"VFXAudioPlayer"16
v32@0:8@"VFXNode"16Q24
v32@0:8@"VFXNode"16@"VFXNode"24
@"VFXNode"28@0:8@"NSString"16c24
@"NSArray"24@0:8@?<c@?@"VFXNode"*>16
v24@0:8@?<v@?@"VFXNode"*>16
@"NSArray"32@0:8@"NSArray"16@"VFXNode"24
@"NSArray"40@0:8@"NSArray"16@"NSArray"24@"NSDictionary"32
v40@0:8@"NSArray"16@"NSArray"24@"NSArray"32
v32@0:8@"NSArray"16@"NSArray"24
@"VFXNode"24@0:8@"NSString"16
@"VFXLight"16@0:8
v24@0:8@"VFXLight"16
@"VFXCamera"16@0:8
v24@0:8@"VFXCamera"16
v24@0:8@"VFXModel"16
@"VFXSkinner"16@0:8
v24@0:8@"VFXSkinner"16
v24@0:8@"VFXMorpher"16
v24@0:8@"VFXPhysicsBody"16
@"VFXForceField"16@0:8
v24@0:8@"VFXForceField"16
@"VFXNode"24@0:8@"VFXModel"16
@24@0:8@"MDLObject"16
@48@0:8@"VFXPhysicsBody"16@"NSArray"24@"VFXPhysicsBody"32@"NSArray"40
@32@0:8@"VFXPhysicsBody"16@"NSArray"24
v32@0:8@"VFXMaterial"16Q24
v32@0:8Q16@"VFXMaterial"24
@"VFXMaterial"24@0:8@"NSString"16
@"NSArray"24@0:8@"NSString"16
@"VFXMeshElement"24@0:8q16
@"VFXMaterial"16@0:8
v24@0:8@"VFXMaterial"16
@"VFXModelTessellator"16@0:8
v24@0:8@"VFXModelTessellator"16
@"VFXMeshElement"16@0:8
v24@0:8@"VFXMeshElement"16
@"VFXMeshSource"16@0:8
v24@0:8@"VFXMeshSource"16
@32@0:8@"NSArray"16@"NSArray"24
@40@0:8@"NSArray"16@"NSArray"24@"NSArray"32
@24@0:8@"MDLMesh"16
@"VFXMaterialProperty"16@0:8
@"NSURL"16@0:8
v24@0:8@"NSURL"16
@24@0:8@"MDLLight"16
@24@0:8@"MDLMaterial"16
@24@0:8@"VFXNode"16
@24@0:8@"VFXModel"16
@28@0:8@"VFXNode"16c24
@60@0:8@"NSData"16q24q32q40c48q52
@48@0:8@"NSData"16q24q32q40
@24@0:8@"MDLSubmesh"16
@76@0:8@16@24q32c40q44q52q60q68
@76@0:8@"NSData"16@"NSString"24q32c40q44q52q60q68
v28@0:8f16@"VFXNode"20
f24@0:8@"VFXNode"16
v24@0:8@"VFXPhysicsJoint"16
@"NSArray"40@0:8@"VFXPhysicsBody"16@"VFXPhysicsBody"24@"NSDictionary"32
@"NSArray"32@0:8@"VFXPhysicsBody"16@"NSDictionary"24
@"NSArray"48@0:8@"VFXPhysicsShape"16@"NSArray"24@"NSArray"32@"NSDictionary"40
@"<VFXPhysicsContactDelegate>"16@0:8
v24@0:8@"<VFXPhysicsContactDelegate>"16
v28@0:8@"NSArray"16c24
v36@0:8@"NSArray"16@"NSArray"24c32
@"VFXPhysicsShape"16@0:8
v24@0:8@"VFXPhysicsShape"16
@32@0:8q16@"VFXPhysicsShape"24
@28@0:8f16@?<v@?@"<VFXAnimation>"@c>20
c40@0:8@"NSURL"16@"NSDictionary"24@?<v@?f@"NSError"*>32
@"VFXPhysicsWorld"16@0:8
@40@0:8@"NSString"16@"NSString"24@"NSDictionary"32
@40@0:8@"NSURL"16@"NSDictionary"24^@32
@24@0:8@"MDLAsset"16
@"VFXForceField"24@0:8f16f20
^{MTLComputeEvaluator=@@@i}
@56@0:8^{MTLContext=@@@@}16r^{BufferDescriptor=iii}24r^{BufferDescriptor=iii}32r^{BufferDescriptor=iii}40r^{BufferDescriptor=iii}48
@24@0:8d16
v40@0:8^{__CFXWorld=}16@24@?32
v48@0:8^{__CFXWorld=}16@24@32@?40
v64@0:8^{__CFXWorld=}16@24@32Q40@48@?56
v64@0:8^{__CFXWorld=}16@24@32@40@48@?56
@24@0:8^{__IOHIDDevice=}16
v28@0:8I16@20
^{__IOHIDDevice=}
^{__IOHIDManager=}
{?=[4]}80@0:8{?=[4]}16
v40@0:816q32
{CFXSphere=}16@0:8
v48@0:8{CGPoint=dd}16q32Q40
{CFXSphere="vector"}
v40@0:8@16@24^@32
@"VFXPrefabAsset"
v40@0:8q16@24@32
@40@0:8^{__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}16^{__CFXMesh=}24@32
@32@0:8@?16i24c28
v36@0:8@16i24@?28
v40@0:8@16i24c28@?32
v40@0:8@?16@?24@?32
q40@0:8@16@24q32
v64@0:8@16@24^{__CFXFXProgram={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}b1b1^{__CFXFXProgramDelegate}[2^{__CFString}]^{__CFString}^{__CFString}^{__CFDictionary}^{__CFSet}^v^{__CFDictionary}^vQI}32^{__CFXMaterial=}40^{__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}48^{__CFXFXPass={__CFRuntimeBase=QAQ}^{__CFString}iiB^{__CFXFXRenderGraph}^{__CFString}^{__CFString}^{__CFString}^{__CFString}B^{__CFXFXProgram}^{__CFXMaterial}^{__CFXBlendStates}^{__CFXRasterizerStates}{CFXColor4=(?=[4f]{?=ffff})}CIb1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1^{__CFXRendererElement}QQ{?=^?^?^?^?^?^?^?^?^v}{?=[8{?=CCCb1b1b1b1b1b1[4C]}]{?=CCCb1b1b1b1b1b1[4C]}b3b1b1}{CGPoint=dd}[9f]^{?}I^{__CFXNode}^{__CFXNode}^{__CFArray}^{__CFXNode}C^{__CFString}^{__CFString}^{__CFString}^^{__CFXFXPassInput}qq^{__CFDictionary}@?@?^{__CFDictionary}^v}56
{?="stage"i"bindings"@"NSArray""customBlocks"@"NSDictionary""pass"^{__CFXFXPass}}
c64@0:8@16{CGSize=dd}24Q40@48^@56
@72@0:8@16{CGSize=dd}24@40@48:56^v64
@56@0:8@16{CGSize=dd}24@40@48
v56@0:8^{CGImage=}16{?=qiIq}24@48
v72@0:8{?=qiIq}16@40^{__CVMetalTextureCache=}48@56@?64
@"AVAssetWriterInput"
@"AVAssetWriterInputPixelBufferAdaptor"
@"AVAssetWriter"
@36@0:8@16^{__CFXEngineContext=}24c32
v44@0:8@16@24^{VFXMTLBlitCommandEncoder=@@}32c40
@32@0:8^{__CFXImage=}16c24i28
c48@0:8^{__CFXImage=}16@24@32i40c44
@44@0:8@16Q24^{__CFXEngineContext=}32c40
@44@0:8@16Q24@32c40
@56@0:8^v16^{__CFXEngineContext=}24^q32*40*48
@48@0:8^{__CFXMaterialProperty={__CFRuntimeBase=QAQ}(?=^{__CFXImage}^{__CFXImageProxy}^{__CFXTexture}^v^v{CFXColor4=(?=[4f]{?=ffff})}^v)^vq^vb8b1b4c^{__CFXTextureSampler}^{?}fi^v}16^{__CFXEngineContext=}24*32*40
@48@0:8^{__CFXImageProxy={__CFRuntimeBase=QAQ}{?=^?^?^?^?}^vC}16^{__CFXTextureSampler={__CFRuntimeBase=QAQ}iiiiiifCiQ}24^{__CFXEngineContext=}32*40
@52@0:8^{__CFXImage=}16^{__CFXTextureSampler={__CFRuntimeBase=QAQ}iiiiiifCiQ}24i32^{__CFXEngineContext=}36*44
@32@0:8^v16@24
v56@0:8@16^{CGColorSpace=}24^{CGColorSpace=}32@40@48
v92@0:8I16@20@28@36@44@52^{CGColorSpace=}60^{CGColorSpace=}68@76@84
@112@0:8{?=Q{CGPoint=dd}{CGPoint=dd}f}16
v112@0:8{?=Q{CGPoint=dd}{CGPoint=dd}f}16
c112@0:8{?=Q{CGPoint=dd}{CGPoint=dd}f}16
r^{?=f^vf}32@0:8Q16Q24
v52@0:8S162036
104@0:81632f48B525672^B88^q96
@"NSOrderedSet"
(?="axisMove"{?="originalPosition""axisDirection""mouseDeltaVector"}"planeMove"{?="originalPosition""planeNormal""pointInPlane""mouseDeltaVector"}"axisRotate"{?="rotationSign"f"originalRotation"})
{?="positions"^"orientations"^"originalLocalMatrix"^{?}"scales"^}
^{?=f^vf}
@"NSLock"
@"VFXBillboardConstraint"
@24@0:8^{__CFXMesh=}16
^{__CFXMesh=}16@0:8
v24@0:8^{__CFXMesh=}16
@40@0:8#16#24@32
@"VFXEntityObject"
^{__CFXCoreEntityHandle={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFString}^{__CFDictionary}^{__CFArray}B^v}
@24@0:8^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}16
@32@0:8r^d16q24
@40@0:8r^16q24^q32
@40@0:8r^{CGPoint=dd}16q24^q32
@68@0:8@16@24q32s40Q44q52q60
@32@0:8r^16q24
@32@0:8r^{CGPoint=dd}16q24
@44@0:8r^f16q24c32^{CGColorSpace=}36
@76@0:8@16^{CGColorSpace=}24q32c40q44q52q60q68
@64@0:8@16Q24@32q40q48q56
@84@0:8@16@24^{CGColorSpace=}32q40c48q52q60q68q76
@96@0:8@16^{CGColorSpace=}24^^{CGColorSpace}32q40q48q56q64q72^q80^q88
^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}16@0:8
@56@0:8@16Q24Q32Q40Q48
^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}
^{CGColorSpace=}
c32@0:8@16#24
c40@0:8@16^f24^f32
^{__CFXConstraint={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFString}fBB{?=^?^?^?^?^?^?}^v}16@0:8
v24@0:8^{__CFXConstraint={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFString}fBB{?=^?^?^?^?^?^?}^v}16
^{__CFXConstraint={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFString}fBB{?=^?^?^?^?^?^?}^v}
@28@0:8c16@?20
@40@0:8{CGSize=dd}16d32
@"NSArrayController"
@"NSObject"
@"NSTableView"
@"NSValue"
@"VFXUIVector4TextField"
@40@0:8@16Q24@32
v24@0:8^{__CFXTextGeometry={__CFXShapeGeometry={__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}{?=cfffif^{CGPath}^v^{CGPath}^v}^{__CFXMesh}[32C]}{?=^{__CTFrame}^v^viiBBB{CGRect={CGPoint=dd}{CGSize=dd}}}}16
@24@0:8^{__CFXTextGeometry={__CFXShapeGeometry={__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}{?=cfffif^{CGPath}^v^{CGPath}^v}^{__CFXMesh}[32C]}{?=^{__CTFrame}^v^viiBBB{CGRect={CGPoint=dd}{CGSize=dd}}}}16
{?={?=cffif^v^v}^v^viiBB{CGRect={CGPoint=dd}{CGSize=dd}}f}16@0:8
@"NSBezierPath"
@"NSFont"
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
@40@0:8@16^@24*32
@"<MTLTexture>"32@0:8@"NSURL"16^@24
@"<MTLTexture>"40@0:8@"NSURL"16^@24*32
@"<VFXMaterialPropertyTextureProvider>"
v24@0:8^{__CFXShapeGeometry={__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}{?=cfffif^{CGPath}^v^{CGPath}^v}^{__CFXMesh}[32C]}16
@24@0:8^{__CFXShapeGeometry={__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}{?=cfffif^{CGPath}^v^{CGPath}^v}^{__CFXMesh}[32C]}16
{?=cffif^v^v}16@0:8
^{btHingeConstraint=^^?ii(?=i^v)fBBi^{btRigidBody}^{btRigidBody}ff^{btJointFeedback}[3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f}][3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f}]{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}ff{btAngularLimit=fffffffB}ffffBBBBBfifff}16@0:8
{?="anchorA""anchorB""axisA""axisB"}
v36@0:8@16q24f32
@40@0:8@16q24^{__CFXLOD=}32
^{__CFXLOD=}
v40@0:8r^v16Q24Q32
v40@0:8@16Q24Q32
v32@0:8Q16Q24
v48@0:8r^@16r^Q24{_NSRange=QQ}32
v48@0:8@16Q24Q32Q40
v56@0:8r^@16r^Q24r^Q32{_NSRange=QQ}40
v40@0:8Q16Q24Q32
v48@0:8r^v16Q24Q32Q40
v40@0:8r^@16{_NSRange=QQ}24
v40@0:8@16f24f28Q32
v56@0:8r^@16r^f24r^f32{_NSRange=QQ}40
v32@0:8r^{?=dddddd}16Q24
v32@0:8Q16r^{?=II}24
v48@0:8{?=QQQQ}16
v32@0:8r^{?=QQQQ}16Q24
v32@0:8f16f20f24f28
v24@0:8I16I20
v88@0:8{?=QQQ}16{?=QQQ}40{?=QQQ}64
v80@0:8@16Q24{?=QQQ}32{?=QQQ}56
v48@0:8Q16Q24Q32Q40
v64@0:8Q16Q24Q32@40Q48Q56
v56@0:8Q16Q24Q32@40Q48
v56@0:8Q16Q24Q32Q40Q48
v80@0:8Q16Q24Q32@40Q48Q56q64Q72
v40@0:8Q16@24Q32
v64@0:8Q16Q24@32Q40@48Q56
v72@0:8Q16Q24Q32@40Q48Q56Q64
v56@0:8Q16@24Q32@40Q48
v88@0:8Q16Q24Q32@40Q48@56Q64Q72Q80
v72@0:8Q16@24Q32@40Q48@56Q64
v40@0:8{?=QQQ}16
v40@0:8r^@16Q24Q32
v48@0:8r^@16Q24Q32Q40
v32@0:8r^@16Q24
v36@0:8@16Q24c32
v24@0:8@"<MTLRenderPipelineState>"16
v40@0:8@"<MTLBuffer>"16Q24Q32
v48@0:8@"<MTLBuffer>"16Q24Q32Q40
v32@0:8@"<MTLTexture>"16Q24
v32@0:8@"<MTLSamplerState>"16Q24
v40@0:8@"<MTLSamplerState>"16f24f28Q32
v32@0:8@"<MTLVisibleFunctionTable>"16Q24
v32@0:8@"<MTLIntersectionFunctionTable>"16Q24
v32@0:8@"<MTLAccelerationStructure>"16Q24
v24@0:8@"<MTLDepthStencilState>"16
v80@0:8@"<MTLBuffer>"16Q24{?=QQQ}32{?=QQQ}56
v64@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56
v56@0:8Q16Q24Q32@"<MTLBuffer>"40Q48
v80@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56q64Q72
v40@0:8Q16@"<MTLBuffer>"24Q32
v64@0:8Q16Q24@"<MTLBuffer>"32Q40@"<MTLBuffer>"48Q56
v32@0:8@"<MTLFence>"16Q24
v72@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56Q64
v56@0:8Q16@"<MTLBuffer>"24Q32@"<MTLBuffer>"40Q48
v88@0:8Q16Q24Q32@"<MTLBuffer>"40Q48@"<MTLBuffer>"56Q64Q72Q80
v72@0:8Q16@"<MTLBuffer>"24Q32@"<MTLBuffer>"40Q48@"<MTLBuffer>"56Q64
v32@0:8@"<MTLResource>"16Q24
v40@0:8@"<MTLResource>"16Q24Q32
v24@0:8@"<MTLHeap>"16
v32@0:8@"<MTLHeap>"16Q24
v40@0:8@"<MTLIndirectCommandBuffer>"16{_NSRange=QQ}24
v40@0:8@"<MTLIndirectCommandBuffer>"16@"<MTLBuffer>"24Q32
v36@0:8@"<MTLCounterSampleBuffer>"16Q24c32
v40@0:8{__RGRenderCounters={?=^{__vfx_counters}}III}16
v48@0:8@16Q24@32Q40
{__RGRenderCounters="storage"{?="impl"^{__vfx_counters}}"drawCount"I"indirectDrawCount"I"primitiveCount"I}
{Cache="depthStencilStates"@"<MTLDepthStencilState>""renderPipelineState"@"<MTLRenderPipelineState>""winding"Q"cullMode"Q"fillMode"Q"clipMode"Q"blendColor""stencilReferenceValueFront"I"stencilReferenceValueBack"I"viewports"[16{?="originX"d"originY"d"width"d"height"d"znear"d"zfar"d}]"viewportsCount"Q"vertex"{BindingsCache<31, 128, 16>="buffers"[31{BufferAndOffset="buffer"@"<MTLBuffer>""offset"Q}]"textures"[128@"<MTLTexture>"]"samplers"[16@"<MTLSamplerState>"]}"fragment"{BindingsCache<31, 128, 16>="buffers"[31{BufferAndOffset="buffer"@"<MTLBuffer>""offset"Q}]"textures"[128@"<MTLTexture>"]"samplers"[16@"<MTLSamplerState>"]}"vertexTexturesToBind"[2Q]"fragmentTexturesToBind"[2Q]"deferredBindingEnabled"b1"windingChanged"b1"cullModeChanged"b1"fillModeChanged"b1"clipModeChanged"b1"lockCullMode"b1"lockFillMode"b1"viewportsChanged"b1"needsDeferredBinding"b1}
v64@0:8{?={?=QQQ}{?=QQQ}}16
v64@0:8{?=QQQ}16{?=QQQ}40
v56@0:8@16Q24{?=QQQ}32
v24@0:8@"<MTLComputePipelineState>"16
v32@0:8@"<MTLBuffer>"16Q24
v56@0:8@"<MTLBuffer>"16Q24{?=QQQ}32
v24@0:8@"<MTLFence>"16
{Cache="computePipelineState"@"<MTLComputePipelineState>""buffers"[31@"<MTLBuffer>"]"offsets"[31Q]"textures"[128@"<MTLTexture>"]"samplers"[16@"<MTLSamplerState>"]}
v72@0:8@16{?=QQQ}24{?=QQQ}48
v64@0:8@16@24Q32{?=QQQ}40
v28@0:8@16I24
LoadImage (CG)
Deformers
GenerateShader
WaitDrawable
RenderFrame (View)
Delegate (didRender)
Delegate (willRender)
Delegate (update)
Animations
Delegate (didApplyAnimation)
Physics
Delegate (didUpdatePhysics)
Constraints
Delegate (didApplyConstraints)
VFXCore
Audio
RenderFrame
LoadWorld
dd %d
LoadImage (KTX)
programID=%d
CompileShader
Subdivision
DisplayLink (coalesced)
DisplayLink
RenderFrame (Layer)
url=%@
LoadImage (DDS)
LoadImage (ASTC)
TransactionFlush
Culling
%ld %s
CB: %s
size: %s
URL: %s
CB %s
!!! Clock offset inconsistency, computer went to sleep during profiling, profiling timing are invalid. !!!
$s3VFX19ThrottledInvocationP
yx_G
yxcSg
So17OS_dispatch_queueC
So7NSTimerCSg
ySfG
ySfGSPy
ySfGtXCSg
SvSg
ySfGSPy
ySfGtXCSg
So8NSStringC
_A55At
ySfG_A3Bt
$ss21_ObjectiveCBridgeableP
$ss25ExpressibleByArrayLiteralP
$ss10SetAlgebraP
$ss9OptionSetP
_A5At
ySvSgXCSg
ySfG_A2Bt
ySfGSPy
G_SftXCSg
So7NSErrorC
_AAt
ySfG_ABt
ySfG_ABt
ySfG_ABt
ySdG_A2Bt
ySdG_A3Bt
ySfG_A2Bt
ySfG_A2Bt
ySfG_A3Bt
ySfG_A3Bt
$s10Foundation21_BridgedStoredNSErrorP
$s10Foundation18_ErrorCodeProtocolP
_A15At
$s3VFX20EventContextProtocolP
ySfGSg
ySfGSg
SfSg
ySfGSg
SbSg
So10MTLTexture_pSg
$s3VFX17UTF8InitializableP
$sST
SnySiG
$sSl
$sSK
$sSM
$sSk
So9MTLDevice_p
So15MTLCommandQueue_p
6entity_
4type
11addressMode
06filterD0t
6entity_t
6entity_
8property
5spacet
6entity_
8propertyt
6object_t
6object_
13scriptKeyPatht
SDySS
SDySSSDySSypGG
ypXp
SiSg
$s3VFX11DeallocableP
SgXw
SaySSGSg
$s3VFX10VFXBindingP
ySdG
ySdG
ySdG
$s3VFX18ScopeLevelProtocolP
yytG
$s3VFX18ScopeLevelProviderP
ytytIegnr_
$s3VFX15MappingRewriterP
_pXp
$s3VFX14AttributeArrayP
ySfGG
ySfGGG
ySfGGG
ySfGGG
$s3VFX21ContextDescriptorTypeP
$s3VFX25ContextDescriptorProtocolP
$s3VFX26_ContextDescriptorProtocolP
SPyxG
$s3VFX11PointerTypeP
xSgXw
SDySS
SDyS2SG
SDySSSaySSGG
$ss12CaseIterableP
$s3VFX13ComponentMetaP
$s3VFX20DynamicComponentMetaP
$s3VFX19ComponentMetaCameraP
$s3VFX20ComponentMetaTextureP
$s3VFX26ComponentMetaParticleSpawnP
$s3VFX25ComponentMetaParticleInitP
$s3VFX27ComponentMetaParticleUpdateP
$s3VFX29ComponentMetaParticleColliderP
$s3VFX27ComponentMetaParticleRenderP
$s3VFX8EnumMetaP
ySiG
ySbG
ySiSgG
ySfG
_pXmT
_pXmT
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfG
ySfGG
ySfGG
ySfGG
ySay
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySSG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
SnySfG
ySnySfGG
ySfGG
ySfGG
ySfG
ySfGG
ySfGG
SaySiGSg
ySaySiGSgG
yypG
ySfGG
So7VFXNodeCSg
ySo7VFXNodeCSgG
SaySfG
ySaySfGG
SaySSG
ySay
ySaySSGG
ySnySiGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGSg
ySfGSgG
ySfGSgG
ySfGSgG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGSgG
ySfGSgG
ySfSgG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySDySi
So8VFXWorldC
yXlSgXw
17ScriptCustomState
$s3VFX24TriggerParameterCallableP
$s3VFX12TriggerEventP
So7NSEventC
So7VFXViewC
So17VFXTriggerManagerC
So17VFXTriggerManagerCSgXw
SDySi
ySDySSSVGc
So7VFXViewCSgXw
SDySS
SDySi
SDySi
SDySi
SDySiSbG
SDySi
So16MTLBinaryArchive_pSg
SaySo16MTLBinaryArchive_pG
So10MTLLibrary_p
So17OS_dispatch_groupC
So22MTLRenderPipelineState_p
So27MTLRenderPipelineReflectionCSg
So23MTLComputePipelineState_p
So28MTLComputePipelineReflectionCSg
ScTy
yypc
So11MTLFunction_p
ScA_pSg
ytIeghHr_
_pIeghHrzo_
So10MTLLibrary_pSg
SgXw
_pIeghHrzo_
SS_So10MTLLibrary_pSgt
So16NSOperationQueueCSg
ySo10MTLLibrary_pc
So8VFXWorldCSgXw
$s3VFX21ScriptKeyPathProviderP
_SSypXpt
_pXp
SwSg
ySvSgG
$s3VFX12RenderOutputP
So12CAMetalLayerC
ySbcSg
ySo16MTLCommandBuffer_p_So10MTLTexture_ptcSg
So16MTLCommandBuffer_pSg
So10MTLTexture_p
So9MTLBuffer_p
So17MTLCommandEncoder_pSg
yXlSg
So23MTLRenderPassDescriptorCSg
SaySo23MTLRenderPassDescriptorCG
SrySo23MTLRenderCommandEncoder_pSgG
So22MTKMeshBufferAllocatorC
So21OS_dispatch_semaphoreC
SaySiG
Si5count_So9MTLBuffer_p6bufferSi13bytesPerIndextG
So16MTLCommandBuffer_p
So15CAMetalDrawable_p
Ieg_
$s3VFX28SerializationBaseTypeRegitryP
SS_Sb8expectedt
_p5after_t
$s3VFX12MetadataTypeP
ypXpSg
SPySiG
So16AVCaptureSessionC
So13AVAudioEngineC
So16AVAudioMixerNodeC
So17AVAudioPlayerNodeC
SpySfGSg
So6NSLockC
So8AVPlayerCSg
So12AVPlayerItemCSg
SdSg
So23AVPlayerItemVideoOutputCSg
SgXw
SgXwz_Xx
So11AVAudioFileC
SgSg
$s3VFX14_GraphProtocolP
12_DeletedNode
5_Node
SDySOSiG
SDySO
q_5_Node
SpySay5_Node
QzGG
$s3VFX9AllocatorP
SaySwG
$s3VFX17ScriptCodeGenNodeP
SDySO
SDySSSiG
$s3VFX11CodableNodeP
SaySSSgG
$s3VFX19QueryCursorProtocolP
$s3VFX12BufferSourceP
ySiGSg
So11MTLFunction_pSg
So8NSBundleC
_pGG
ShySOG
$s3VFX15BufferAllocatorP
$s3VFX12QueryResultNP
$s3VFX20DefaultValueProviderP
$s3VFX24OptionalProtocolDetectorP
$s3VFX18SourceInfoProviderP
_pSg
ycSg
SaySS_yptG
$s3VFX18BaseValueAccessorsP
$s3VFX14EntityRemapperP
SayxGyc
ySayxGc
$s3VFX15EntityGetSetAnyP
_xtc
_pXpSg
$sSY
yqd__qd_0_G
qd__
G0R1_
qd_0_
G1R1_
G0R2_
G1R2_
G0R0_
yq_G
yxq_G
So11NSConditionC
SayypGG
SaySSGG
SDySS
SDySS
SgXwz_Xx
Sg5spacet
_pXp
SDySS
$s3VFX18HolographicDisplayP
So8NSWindowCSg
SgXw
SgXwz_Xx
AAGSg
SgXu
So9MTLDevice_pSg
So15MTLCommandQueue_pSg
IeyB_
ShySSG
SiGSi
_pIgnrzo_
ySOSiG
SpySay
SiIegnr_
ytGyt
_pIgnrzo_
ySOytG
ytIegnr_
SiGSi
_pIgnrzo_
SpySay
SiIegnr_
ytGyt
_pIgnrzo_
ytIegnr_
SgGAD
_pIgnrzo_
AASgIegnr_
SgGAD
_pIgnrzo_
SgIegnr_
SgGAD
_pIgnrzo_
SgIegnr_
SSSgGAC
_pIgnrzo_
ySOSSSgG
SSSgIegnr_
SgtGAC_AEt
_pIgnrzo_
SgtG
SgtIegnr_
SDySiSayy
Iegg_
_pIgnrzo_
AAIegnr_
_pIgnrzo_
AAIegnr_
SgGAD
_pIgnrzo_
SgIegnr_
Si6source_
ySfG8locationt
$s3VFX24ParticleComponentSpawnerP
ySfGG
ySfGGSg
ySfGGSg
yAAy
SDyS2iG
SgGSg
ypXp_Svt
ypXp_SSt
$s3VFX6ScriptP
_SSt
SS_SS4typet
SDySS
SDySS
SayAA9paramType_
17codeSourceSnippettGG
So15NSRecursiveLockC
yycG
So8NSBundleCSg
SDySS
SDySS
ypXmT
$s3VFX13QueryProtocolP
So23MTLComputePipelineState_pSg
_pXpG
SgXu
So9MTLDevice_pSgXu
So16NSOperationQueueC
Si11compileHash_t
yp7attempt_
Sg6loaderSaySVG7symbolsSaySo11MTLFunction_pG14metalFunctionsyp11customStatet
yp7attempt_
yxGG
yxGG
yxGG
yxGG
_pSg
_pSgz_Xx
_pSgIegg_
yxGz_
RzlXX
yxGz_
RzlXX
yxGz_
RzlXX
yxGz_
RzlXX
yxGz_
RzlXX
yxGz_
RzlXX
yxGz_
RzlXX
yxGz_
RzlXX
_pSg
So7MTLHeap_p
SaySo9MTLBuffer_pG
So9MTLBuffer_pSg
SgXw
SgXwz_Xx
$s3VFX16ParticleRendererP
$s3VFX26ParticleRendererWithSystemP
$s3VFX27ParticleDefaultRendererableP
SgIegyr_
$s3VFX26MaterialParametersProviderP
_pSg
$s3VFX19EventSourceProtocolP
yxcG
SayxG
$s3VFX11CancellableP
_pSg_ABt
$s3VFX13EventProtocolP
$s3VFX14ColorRampInputP
SDySS
SgXw
SDySS
$s3VFX6SystemP
$s3VFX15ComponentSystemP
$s3VFX11ImGuiSystemP
So6NSViewC
SgXw
So16MTLCommandBuffer_pSo10MTLTexture_pIeyBhyy_
SDySS
SgXw
SDySS
$sSt
$s3VFX15AnimationTimingP
$s3VFX9AnimationP
$s3VFX15AnimationTargetP
Sf9amplitude_t
7bounces_Sf10bouncinesst
12oscillations_Sf11springinesst
Sf8exponent_t
Sf4base_t
Sf5power_t
Sf10anticipate_Sf8midPoint
7bouncest
x5value_Si5indext
SgXw
SgXwz_Xx
Sayx5value_Si5indextG
yxGG
yxGG
Sf11innerRadius_t
$s3VFX14RemappableNodeP
SDySi
SayyycG
ySbG
ACGSgyt
_pIegnnnrzo_
ACGSg
_pIeggygzo_
AAGSgz_Xx
ytIegr_
ypSg
$s3VFX17IterableOptionSetP
7ElementSTQz
8RawValueSYQz
$s3VFX19EnumerableOptionSetP
SDySS
SDySS
SDySS
SDySS
SDySS
SDySS
SDySS
SDySS
SDySS
SDySS
SDySS
SDyS2S11outParamUID_
Sg14optMetadataSettG
SDySS
SDySS
SDySS
SgXw
SaySo11MTLResource_pG
So18MTLArgumentEncoder_pSg
SDySi
$s3VFX8TypeMetaP
$s3VFX25ReplicationEntityRemapperP
$s3VFX21ReplicationRemappableP
$s3VFX23AnyComponentValueWriterP
$s3VFX18AnyComponentWriterP
$s3VFX19ReplicationDelegateP
_pSg
_pSgXw
SgXw
_pSgXo
SS4name_t
G_AB
7toScopet
14sourceInstance_Say
_pXpG14componentTypesSay
_pG15classComponentsSb6active
5scopet
G_Say
_pXpG14componentTypesSay
_pG15classComponentsSb6active
5scopeSi5countt
12sourceEntity_t
8snapshot_
8instancet
12sourceEntity_Sb10tombstonedt
14sourceInstance_Sb6activet
7subject_
_pXp12relationTypeAA6objectt
14sourceInstance_t
14sourceInstance_
_p6writert
14sourceInstance_
_p6writert
14sourceInstance_
_pXp13componentTypet
_p12sourceObject_yAA_pct
Iegn_
_pXmT
Igo_
$s3VFX16WorldCounterableP
yycSg
SvIeyByd_
SDySi
SDySiSo10MTLTexture_pG
$s3VFX19VFXCoreViewDelegateP
_pSgXw
So12CAMetalLayerCSg
So7NSColorCSg
SgXw
SbIegy_
$s3VFX21ParticleEmitterSystemP
$s3VFX28ParticleComponentRequirementP
$s3VFX34ParticleComponentSystemProcessableP
$s3VFX17ParticleAttributeP
$s3VFX35ParticleAttributeWithoutRequirementP
$s3VFX36ParticleAttributeConstantRequirementP
$s3VFX30ParticleAttributeWithoutSystemP
$s3VFX24ParticleEmitterGPUSystemP
$s3VFX31ParticleComponentGPUProcessableP
SpyxG
yxSgG
yq_G
SayxSgG
SpySiG
yx_G
yxGG
yx_GG
SryxG
yxq_GG
yxq_GG
yxGG
yxGG
Sf6cutoff_t
$s3VFX6DumperP
yycG
_pXmT
10invalidatet
10invalidatet
4from_
2totG
ySfG6center_Si10populationtG
ySfGG
$s3VFX17ExternalDataTableP
_pSg
So10MTLTexture_p10irradiance_SoAA_p8radiancetSgSg
SgSg
SDySi
ySiGG
So8NSThreadC
_SSSgt
So15MTLSamplerState_pSg
SDyS2SGSg
ypXmT_SSt
SsSg
SayyXlG
$s3VFX10DataSource33_90B01CB79DF47397B2208C87FE676378LLP
y_x_G
ySDy
ypGzcSg
SDySi
y_xGG
$ss30KeyedDecodingContainerProtocolP
$s3VFX13AnyExtensionsP
$s3VFX14RewriteContextP
So8VFXWorldCSg
SDySSSDy
AAGG
9operation_
ySiGSg7indicestGG
9operation_
ySiGSg7indicestG
_pXpSg
_pSg
$s3VFX15DataDestination33_1D356F8D984976FF2DBF33523074BD8DLLP
$s3VFX11DataStoring33_1D356F8D984976FF2DBF33523074BD8DLLP
y_xGG
$ss30KeyedEncodingContainerProtocolP
$s3VFX23FloatingPointBitPatternP
SDySOSe_SEpXpG
10BitPattern
G_AAt
_AAt
$s3VFX20DefaultInitializableP
$s3VFX15DebugUIDrawableP
$s3VFX9ComponentP
$s3VFX15EntityComponentP
$s3VFX14ClassComponentP
$s3VFX15WorkerComponentP
$s3VFX14SceneComponentP
$s3VFX10NotCodableP
$s3VFX16TextureAllocatorP
So20MTLTextureDescriptorC
SDySSSo10MTLTexture_pG
ySv_S2VSftc
ySv_S4VSftc
SDySiSDy
So20MTLDepthStencilState_p
SDySo9MDLObjectC
SDySo9MDLObjectC
$s3VFX14FutureProtocolP
$s3VFX20FutureResultProtocolP
So17OS_dispatch_groupCSg
SaySi5token_y
yxGc8callbacktG
qd__Sg
yxGqd__Iglr_
SvIgy_
3VFX17VFXEffectDelegate_pSg
$s3VFX17VFXEffectDelegateP
$s3VFX27HolographicRendererProtocolP
SgIeghHr_
$s3VFX21VFXRERenderTargetInfoP
$s3VFX20VFXREDrawCallContextP
$s3VFX14VFXStencilInfoP
ySo23MTLRenderCommandEncoder_p_So20VFXREDrawCallContext_ptcSg
So20VFXREDrawCallContext_p
So18VFXAnimationPlayerCSg
SDySo8VFXModelC
SDySo11VFXMaterialC
$s3VFX10BridgeableP
$s3VFX15BridgeComponentP
So8NSObjectC
_pSgXw
So7VFXNodeCSgXw
ySfG
So12VFXAssetNodeCSpy
GIggy_
So8VFXModelCSg
So18VFXParametricModelCSg
SSSg
So28VFXCameraEffectDoughnutBokehCSg
So27VFXCameraEffectDepthOfFieldCSg
So25VFXCameraEffectMotionBlurCSg
So20VFXCameraEffectGrainCSg
So23VFXCameraEffectLensBlurCSg
So23VFXCameraEffectExposureCSg
So26VFXCameraEffectToneMappingCSg
So10VFXMorpherCSg
So11VFXMaterialCSg
So13VFXForceFieldCSg
So14VFXPhysicsBodyCSg
So33VFXCameraEffectChromaticTransformCSg
So20VFXCameraEffectBloomCSg
So9VFXCameraCSg
So8VFXLightCSg
So19NSRegularExpressionC
11description_
5valuet
SaySDySi
yyycG
So27OS_dispatch_source_data_add_pSg
SgXw
$s3VFX23OptionalStrongReferenceP
SDySi
So15MTLSamplerState_p
3cpu_So10MTLTexture_p3gputG
_pIegrzo_
So9MTLBuffer_pSgXw
So10MTLTexture_pSgXw
$s3VFX15DebugInfoDrawerP
4Item
ySfGAB
Igyyy_
SfSg10screenSize_t
4line_Sf9frequencySf9amplitudet
ySfG6center_Sf1aSf1bt
_Si9lineCountt
_Si9edgeCountSi04ringB0t
ySfG5start_AB3endt
So28VFXCameraEffectDoughnutBokehC
So7VFXNodeC
So9VFXCameraC
So33VFXCameraEffectChromaticTransformC
So23VFXCameraEffectLensBlurC
So20VFXCameraEffectGrainC
So25VFXCameraEffectVignettingC
So25VFXCameraEffectVignettingCSg
So25VFXCameraEffectMotionBlurC
So26VFXCameraEffectColorFringeC
So26VFXCameraEffectColorFringeCSg
So26VFXCameraEffectToneMappingC
So23VFXCameraEffectExposureC
So27VFXCameraEffectColorGradingC
So27VFXCameraEffectColorGradingCSg
So27VFXCameraEffectDepthOfFieldC
So20VFXCameraEffectBloomC
So11VFXMaterialC
So19VFXMaterialPropertyC
So12VFXAssetNodeC
So8VFXModelC
So18VFXParametricModelC
So14VFXPhysicsBodyC
So13VFXForceFieldC
So8VFXLightC
So13VFXIESProfileCSg
So15VFXPhysicsWorldC
$s3VFX22VFXDiagnosticsTrackingP
_pSgXw
$s3VFX11EventStreamP
SgXw
SDyxq_G
x3key_q_5valuet
yxq_GG
$ss30ExpressibleByDictionaryLiteralP
yxq_GG
yxq_GG
$s3VFX17RelationComponentP
_pXp
$s3VFX18ParticleCollidableP
ySiG
SS_SSSg4codet
_p_SSSg4codet
yyyccSg
$s3VFX14FloatGeneratorP
_pXpGG
_p_SitGG
_pSg
Iegggy_
Sf5scale_t
SnySfG5range_t
So8SCNSceneCSg
So11SCNRendererCSg
SgXu
_pXpSg
SayypXpSgG
$s3VFX10AnyDecoderP
$s3VFX10AnyEncoderP
$s3VFX20WorldReferencingNodeP
SDySS
So28RGCachedRenderCommandEncoderC
ySo16MTLCommandBuffer_p_So10MTLTexture_ptYbcSg
$s3VFX22DynamicPropertyStoringP
SaySo10MTLTexture_pG
$s3VFX12SectionArrayP
SDySOSay
4node_Si11outputIndexSi05inputC0tGG
SDySO
SDySOShySiGG
ShySiG
SayShySiGG
_So7VFXNodeCSg
$s3VFX21ParticleSizeOperationP
$s3VFX10AnimatableP
ySfG5color_Sf4timet
x_Sft
ySfG
SDySO
$s3VFX15ScriptComponentP
SaySVGSg
SaySo11MTLFunction_pGSg
17ScriptCustomState
QzSg
SayypG
$s3VFX17AssetPathResolverP
_pSg
$s3VFX24FileAssetEntityComponentP
SDySi
Si8maxWidth_Si0A6HeightSb15keepAspectRatiot
Si5width_Si6heightt
So13NSFileWrapperC
XDXMT
So20MTLDepthStencilState_pG
So20MTLDepthStencilState_p5state_
4desct
_A3At
$s3VFX13_NodeProtocolP
5_This
SDySSSDySSSay
SDySSSo10MTLLibrary_pG
ySfGtc
SDySSypGSg
ySfGG
SaySo8NSBundleCG
So19MTLVertexDescriptorC
SrySfG
$s3VFX18CanvasMetadataNodeP
$s3VFX11KeyValueMapP
SDySi
_pXpG
_pXpG
_pXpG
_pXp6stored_AA_pXp8unpackedtG
x_xxxxxxxt
x_xxxxxxxxxt
yxGG
yxGG
yxGG
yxGG
variant
interval
lastInvocationTime
invocation
queue
timer
dimensions
edges
cellStrideBytes
outsideRepeatStrideBytes
data
sample_func
halfPixel
_rawValue
time
portal_opacity
vignetting_fadeout_distance_normalization
vignetting_total_fadeout_distance
vignetting_pivot_crws_position
crws_reference_position
render_options
breakthrough_read_index
padding
fade_opacity
clipping_index_slice
portal_crossing_plane
environment_lighting_weight
green
blue
alpha
rawValue
throttle
delay
vector
mapped_address
allocated_size
memory_entry_port
is_malloc
width
height
value
timescale
flags
epoch
pitch
tilt
center
inv_view
subp
display_aspect
__sig
__opaque
impl
columns
__cleanup_stack
textureSize
tileCount
RawValue
_ObjectiveCType
ArrayLiteralElement
Element
Parameter
offset
count
_os_unfair_lock_opaque
tempRegisterCount
instructionCount
registerCount
ALUCount
threadGroupAtomicCount
threadGroupLoadCount
threadGroupStoreCount
deviceAtomicCount
deviceLoadCount
deviceStoreCount
branchCount
loopCount
textureReadCount
textureWriteCount
spillCount
waitCount
fp16InstructionCount
fp32InstructionCount
int16InstructionCount
int32InstructionCount
kind
active
strength
dampening
noiseAmount
noiseSeed
categoryBitMask
shape
scope
cullMode
falloffExponent
halfExtents
smoothness
speed
planes
ourl_lock
ourl_count
_width
_height
_depth
_arrayLength
_mipmapLevelCount
_sampleCount
allowGPUOptimizedContents
pixelFormat
textureType
storageMode
usage
cpuCacheMode
compressionType
hazardTrackingMode
swizzle
__routine
__arg
__next
isFirstFrame
simulationIndex
force_ori
force_dir
field_from_emitter
extents
damp_dt
emitter_amount
noise_amount
falloff_power
outside
falloff_direction
falloff_shape
originX
originY
znear
zfar
composition
killshape_from_emitter
inside
range
xRange
yRange
zRange
property
_nsError
new_ws_from_old_ws
factor
thread_count_offset
thread_count_multiplier
threads_per_threadgroup
instance_count_offset
instance_count_multiplier
vertex_count_offset
vertex_count_multiplier
view_from_crworld
proj_from_crworld
proj_from_view
view_from_proj
crws_camera_pos
inverseViewProjectionMatrix
crInverseViewProjectionMatrix
crws_from_viewport
worldReferencePosition
renderTargetSize
viewportCount
useVertexAmplification
ndcFromScreen
nearFar
linearizationFactors
fadeOpacity
renderTargetDepthStencilFormatSampleCount
vrrMapPhysicalSizeArray
viewport_percents
vrrMapScreenSize
portal_clip_plane
lastframe_proj_from_crworld
fogParameters
fogColor
affects_alpha
grid
direction_axis
orientation_quat
angular_limits
velocity_range
spreading_range
tangent_axis
tangent_force_range
texture_scale
texture_bias
curr_transform
last_transform
curr_rotation
emitter_from_shape
mask_channel
mask_threshold
inner_radius
uniform_count
start_index
motion_distribution
emit_on_surface
inherit_color_from_texture
has_last_frame_transform
scale
bias
transform
velocity
force_emitter_space
gravity
linearDamping
elasticity
friction
local_from_world
world_from_local
die_on_collide_probability
radiusMultiplier
radius
half_height
world_box_velocity
box_size
corner_radius
half_extents
plane
world_from_local_ortho
view_proj
inverse_view_proj
view
inverse_view
origin_near
origin_far
z_scale_bias
z3_scale_bias
z3_near
z3_far_minus_near
emitter_from_cache
emitter_from_cache_rotation
cache_count
motion_transfert
position_format
color_format
normal_format
orientation_format
velocity_format
size_format
emitter_from_cache_scale
point_count
albedo
emissive
normal
metalness
roughness
occlusion
cutoff
intensity
mode
particle_transform
softDistance
stretchFactor
curvature
uvScaleBias
upAxis
noiseScale
invFrameSize
frameCount
thickness
multiplyThicknessByAlpha
enableVelocityStretch
tiles
view_portion
quilt_aspect
overscan
quilt_invert
show_raw
origin
size
Code
_ErrorType
depth
operation
lower_bound
upper_bound
pass
outputs
pointScale
screenMinSize
screenMaxSize
ribbonStride
inv_subdivision_count
uv_scale_bias
vertex_count_per_segment
profile_count
orientationMode
textureMode
begin_order_index
end_order_index
guardCount
queue
Parameter
RawValue
type
intensity
color
orientation
position
attenuationRadius
zNear
zFar
orthoScale
outerAngle
innerAngle
extents
doubleSided
texture
textureTag
query
elapsedTime
type
RawValue
data
count
Element
Iterator
Index
SubSequence
Indices
shaderCache
device
commandQueue
subject
graph
graphScriptsDiffByScheduling
particleUpdateScriptDiff
particleInitScriptDiff
triggerScriptsDiffByScheduling
update
remove
keep
typeInfoByName
componentInfoByNameForFuzzyLookup
metadata
type
preVersion
innerAngle
outerAngle
aspectRatio
rectangular
near
intensity
texture
value_w1
value_w0
RawValue
RawValue
entityManager
identifier
objectID
objectName
bindingName
userManual
type
semantic
isPublic
enumName
enumCases
property
cancellables
onDeallocTrigger
onCancelTrigger
entityManager
classIndex
scope
unmanagedEntityClass
storageLayout
mutationID
isActive
isResizable
data
vm_data
entityIndices
handle
filters
_staticWorkerAffinity
activeRange
newlyCreatedLowerBound
newlyDestroyedLowerBound
worldBox
worldBoxLastMutation
lodMaxSquareDistance
lodMaxSquareDistanceLastMutation
_shortLivedLock
_ownershipLock
packedType
entityManager
entity
componentType
updateGroupTime
float1Query
float2Query
float3Query
float4Query
pointer
flags
parent
mangledNameOffset
fieldTypesAccessor
reflectionFieldDescriptor
numberOfFields
fieldOffsetVector
superClsRef
metadataNegativeSizeInWords
metadataPositiveSizeInWords
numImmediateMembers
Pointee
reference
_name
color
snippets
templates
includeFunctionsMapByLanguage
functions
functionDependencies
AllCases
bindingInfo
visibility
enumInfo
builtIn
custom
reference
image
provider
texture
identifier
value
assetManager
needUpdateMainGraphScriptGroup
graphScriptQuery
graphECPRefQuery
bindingsQuery
events
type
identifier
triggerTime
triggerManager
enabledTriggers
mouseGrabbers
entity
identifer
block
keyCode
event
view
normalizedLocation
position
button
_codeSourceSnippet
libraryName
snippetName
snippetSignature
metadataDict
graph
name
_signature
inputCount
outputCount
inputNames
outputNames
RawValue
float
float2
float3
float4
float2x2
float2x3
float2x4
float3x2
float3x3
float3x4
float4x2
float4x3
float4x4
bool
uint
device
defaultShaderLibrary
hotReloadableShaderLibrary
libraries
renderPipelines
computePipelines
functions
inactiveByPipeline
statistics
lastStatistics
disableCache
renderPipelineStats
computePipelineStats
functionStats
recordingBinaryArchive
precompiledBinaryArchives
urlToSaveBinaryArchiveTo
recordMetalPipelinesScript
onShaderCompilation
lock
reloadCallback
function
library
path
label
waiting
success
error
state
desc
reflection
inProgress
ready
vertex
fragment
compilationTime
accumulatedTime
count
call
none
missingFunction
compilationFailed
shaderCache
addRuntimeQuery
fieldsQuery
settings
affectsPosition
affectsOrientation
texture
randomGenerator
linear
radial
vortex
magnetic
harmonic
drag
noise
turbulence
spring
layers
kind
strength
dampening
noiseAmount
noiseSeed
categoryBitMask
falloffExponent
active
speed
extent
flow
direction
fallOff
fallOffPower
fallOffRange
fallOffRadius
fallOffAngleRange
wind
RawValue
positiveZ
negativeZ
both
none
sphere
tube
cone
AllCases
value
RawValue
orientationQuery
entityManager
userProjectName
mangledProjectName
vertex
fragment
compute
RawValue
texture
blendMode
cutoff
sortMode
maxOverdraw
animationMode
interFrameInterpolation
lighting
specular
softDistance
device
libraryURL
label
watchingFolderQueue
library
reloadedNotificationBlock
range
world
name
effectIDs
static
dynamic
keyPath
valueType
offset
flags
version
oldID
newID
newType
color
depth
stencil
sampleCount
layout
entity
_data
texture
channel
addressMode
range
scale
bias
angle
handles
emittersQuery
globalFluidSolver2DSolversQuery
velocityAffectedQuery
emit
source
radius
density
velocity
showEmitter
showVelocity
data
stepSolver
advectParticles
setup
border
influence
solverSpeed
falloff
extent
cellSize
viscosity
vorticity
velocityDamping
showGrids
showVelocities
showDensities
velocityIsoValue
densityIsoValue
RawValue
value
type
offset
world
isSavingForExport
layout
saveBindingsMetadata
saveAsPlist
targetsToPrecompile
vfxproj
texture
channel
addressMode
composition
mode
xRange
yRange
zRange
scale
bias
angle
metalLayer
viewpoint
loadAction
clearColor
scope
preferredFramesPerSecond
stereoMode
isUserInitiated
frameCompletion
postRenderCallback
commandBuffer
inputStreamIdentifier
enabled
frameCount
requestedDrawableSize
resizingMode
colorTexture
depthTexture
shouldWaitForCommandBufferCompletion
sizeInPixel
pixelFormat
depthPixelFormat
scaleFactor
device
features
simulateCommandBufferError
counters
engineContext
lock
uploadLock
renderOutputs
renderOutputsForThisFrame
shaderCache
textureCache
depthStencilCache
GPUToolBox
texturePool
renderGraph
uniformValidationBuffer
bufferPool
wholeFrameBufferPool
captureInProgress
commandQueue
showDebugMenu
additiveWritesToAlpha
hideOpaquePass
hideTransparentPass
isPostFXEnabled
unscheduledCommandBuffersLock
unscheduledCommandBuffers
currentCommandBuffer
currentEncoder
currentEncoderWrapper
currentRenderPassDescriptor
renderPassDescriptorPool
renderOutputRenderPassFormat
encoders
globalFunctionConstants
mtkMeshBufferAllocator
inFlightSemaphore
options
_current
activeRenderVariantDescriptors
_compiledVariantCount
colorRamps
curves
monotonicIncreasingOrder
stripIndexBuffers
deformedBuffers
disable
multiViewport
targetArray
disableDeferredShading
isRendereringInRE
isREDepthMitigationEnabled
isRendereringInSCN
isRendereringInVFX2
defaultOutputColorPixelFormat
defaultOutputDepthPixelFormat
defaultLoadAction
internalPixelFormatDepth
useGammaBlending
externalRenderVariantDescriptors
renderOutput
frameTimestamp
outputCommandBuffer
wireframeLayerEnabled
cullingFrustum
_renderOutputTexture
_renderOutputTextureFetchedThisFrame
restart
stride
AllCases
rawValue
ArrayLiteralElement
Element
RawValue
invalidType
decodeError
notCodable
loadError
saveError
versionMismatch
unsupportedVersion
keepGoing
name
type
pointer
kind
superclass
reserveword1
reserveword2
rodataPointer
classFlags
instanceAddressPoint
instanceSize
instanceAlignmentMask
runtimeReservedField
classObjectSize
classObjectAddressPoint
nominalTypeDescriptor
ivarDestroyer
contextDescriptorOffset
parent
Pointee
query
frameTime
outputTexture
session
metalTextureCache
sampleBuffer
captureComponents
captureRuntime
ioSurface
dirtyMovieQuery
updatePlayers
engine
mixer
player
loops
isValid
samplesRaw
samplesRawCount
samplesRawTime
samplesRawSampleRate
_lock
setupPlayersQuery
updateAudioControllers
updateFFT
capture
orientationMode
mirrored
identifier
configCache
asset
play
mute
playerItem
videoTime
isPlaying
pixelBuffer
textureCache
lastSurface
$__lazy_storage_$_videoOutput
waveform
spectrum
spectrumLowRes
_waveform
_magnitudes
_magnitudesLowRes
meter
imagOut
realOut
$__lazy_storage_$_setup
portrait
portraitUpsideDown
landscapeRight
landscapeLeft
AllCases
RawValue
magnitudes
magnitudesLowRes
source
type
RawValue
oldNode
visited
visiting
_Node
_DeletedNode
order
inputFilter
copyNodes
graph
node
path
visit
insertedNodes
nodeFirst
inputsFirst
only
except
type
RawValue
instanceStride
colorStride
frameIndex
entityCount
particleQuery
rect
material
parent
parent_pre1036
RawValue
particlesS1
particlesS2
particles
particlesNoS1
particlesNoS2
composition
mode
xCurve
yCurve
zCurve
entity
entityManager
index
generation
data
dataAllocated
extraDatas
storage
liveValuesNodes
graph
language
formatting
subGraphsToEmit
nameByScriptParameter
atomCache
bumpedIndexByVariableName
rawNode
next
children
metal
rawValue
outputNames
snippet
deferredSnippet
requiresScriptContext
payload
comment
RawValue
ArrayLiteralElement
Element
type
name
isInout
inputs
typing
authoringID
outputs
genericsConstraints
inputNames
outputNames
defaultInputs
node
index
opacity
color
_entityManager
_chunk
commandQueue
indexInQueryResult
indexInChunk
rangeInQueryResult
totalCount
range
order
filteredIndices
scale
intensity
cullMode
sortMode
scale
alpha
power
useMeshShader
name
baseFunction
library
functionConstants
target
lock
macOSToolchainOverride
thisBundle
sdkPath
toolchainPath
$__lazy_storage_$_isCurrentVFXBuiltForAllArchs
xcinfo
debug
frameworksToLink
librariesToLink
includePaths
swiftFlags
cFlags
texture
intensity
blurLevel
blendMode
cutoff
resizingMode
center
stretch
sizeToFill
sizeToFit
AllCases
RawValue
rawNodesByID
diagnostics
graph
resolvedNodes
tagsByNode
subGraphEnterInputTypes
insertTypeConversions
queue
visited
typeHintByInput
typeHintByOutput
node
authoringID
kind
invalidNumberOfInputs
unsatisfiedInputConstraint
invalidFlow
renderGraphCompilation
behaviorGraphCompilation
isCyclic
invalidNode
internalInconsistency
outOfRangeInput
unresolvedInputScalar
unsatisfiedOutputConstraint
unsatisfiedGenericConstraint
mode
factor
lookAtCamera
lookAtPosition
AllCases
RawValue
isMenuItemEnabled
particleQuery
shape
inside
plane
sphere
AllCases
RawValue
allocator
results
_rangeInResult
_lowerBoundInQuery
filteredIndices
chunk
cachedQuery
entityManager
commandQueue
count
deallocator
center_w1
half_size_w0
storage
center
halfSize
radians
RawValue
origin_w1
direction_w0
vector
pointA
pointB
origin
axis
innerRadius
outerRadius
scriptKeyPath
accessorCreator
getset
visibility
unavailableStartingFromVersion
lookupReplacementProperty
cachedResolvedReplacementProperty
semantic
defaultValues
userManual
_min
_max
_step
_minFractionDigit
_maxFractionDigit
flags
_scriptingProperty
getter
setter
entityInstance
sourceCode
none
scale
angle
meters
extents
color
axisAngle
textureReference
geometry
pointCacheReference
emitter
sceneKitScene
kernelFunction
fragmentFunction
shaderFile
shader
material
materialArray
toggle
enumIndex
renderTarget
pointOfView
hitTestable
rawValue
ArrayLiteralElement
Element
RawValue
condition
event
groups
debugValues
debugLogs
entityComponentPropertyTable
entityComponentPropertyInputsTable
particleComponentInputsTable
particleClassComponentInputsTable
emitterParticleDataInputsTable
directPropertyAssignments
exportedDirectPropertyAssignments
exportedDirectPropertyAssignmentsHaveBeenUpdated
references
targets
dependencies
domain
evalMode
_nodeId
_paramName
_sortIndex
source
parentEntity
graphScriptEntity
inProperties
outProperties
needUpdateWorldTransforms
canSkipPropertyCopy
wasJustCreated
entity
componentType
propertyType
propertyName
scriptingPropertyKeyPath
OnRepeat
Once
OnBurst
Always
code
inArgsUserData
inArgs
inOutArgs
isDirty
scriptMustBeDeleted
scriptIndex
scriptAttribute
scriptEntity
type
context
Main
Spawn
Init
ParticleInit
Update
ParticleUpdate
Render
ecpt
ecpit
pcit
pccit
edpa
epdit
mode
language
entityComponentPropertyOutputsTable
scriptInfoTable
needsCurrentSeed
useGraphConfigEntityAsOriginatingEntity
dirty
AllCases
RawValue
generatedCode
userDataForGeneratedInArgs
generatedInArgs
generatedInOutArgs
generatedData
AllCases
lookingGlassGeneric
regularDisplay
calibration
quiltSettings
window
rawValue
ArrayLiteralElement
Element
RawValue
textureType
RawValue
AllCases
entityManager
loadOptions
loader
templateRemapTable
templateWasPrepared
effects
entityObjects
_version
isInsideRE
isREAssetScene
transientDrawCall
hasSharedEntityManager
metalBinaryArchiveURLs
recordedMetalBinaryArchiveURL
internalPixelFormat
internalPixelFormatDepth
useGammaBlending
debugUIOptions
isAuthoringWorld
isVFX2
enableRuntimeScriptCompilation
allowLoadingFromFuture
setupAsTemplate
automaticallyPrepareScene
setupAsyncRuntime
world
asyncRuntimeLock
loadBindingsMetadata
enableParallelDecoding
setupRenderer
colorPixelFormat
depthPixelFormat
enableDeferredRendering
doNotClearRenderOutput
device
commandQueue
clientID
metalLibraryURL
systemRegistrationOptions
counterStorage
peerPid
peerTaskIdentity
loadPrecompiledScripts
name
pointer
rawValue
ArrayLiteralElement
Element
value
vertical
horizontal
AllCases
RawValue
column0
column1
column2
column3
rawValue
ArrayLiteralElement
Element
RawValue
position
size1
size2
size3
velocity
color
orientation
textureFrame
angle
pivot
target
ribbonLength
angularVelocity
angleVelocity
linearFactor
angularFactor
lifetime
mass
roughness
metalness
emission
userData1
userData2
userData3
userData4
particleID
parentID
AllCases
isInfinite
isDoubleSided
isCollidingInside
sendEventsProbability
dieOnCollisionProbability
elasticity
friction
radiusMultiplier
layers
blendMode
cutoff
cullMode
sortMode
materialOverride
texture
lighting
specular
textureScale
textureBias
maxOverdraw
animationMode
interFrameInterpolation
softDistance
orientation
upAxis
shape
stretchFactor
orientAlongVelocity
useOrientationForLighting
curvature
multiplyThicknessByAlpha
thickness
prebakedLightingPositiveXYZ
prebakedLightingNegativeXYZ
scaleUsingTextureSize
useSingleChannelOfTexture
channel
quad
hexagon
octogon
AllCases
RawValue
pointer
Pointee
fieldRecordFlags
mangledTypeNameOffset
fieldNameOffset
range
graph
diagnostics
engineContext
commandQueue
runtimeEntityManager
rgContext
rgBuilder
generatePreviewTextures
attachments
bindingIndex
resource
data
inputPasses
pass
type
state
phase
momentumPhase
sourceIdentifier
locationInWindow
locationInView
isMouseInView
buttonNumber
characters
delta
keyCode
keyModifiers
timestamp
isDirectionInvertedFromDevice
clickCount
nativeType
defaultStage
mouseDown
mouseDrag
mouseUp
mouseMoved
keyDown
keyUp
gesture
scroll
magnify
other
began
changed
ended
rawValue
ArrayLiteralElement
Element
RawValue
stream
lastMouseLocation
keyReleased
leftMouseDown
rightMouseDown
value
index
name
RawValue
restartState
addState
removeState
updateState
parentEntity
probability
inheritColor
inheritVelocity
inheritOrientation
inheritScale
velocityFactor
mode
sourceParticlesPositions
sourceParticlesOrientations
sourceParticlesVelocities
sourceParticlesColors
sourceParticlesScales
sourceParticlesIDs
sourceParticlesSubCount
subParticlesSourceIndex
rateOverDistance
follow
linear
respawnValue
delayTime
duration
count
repeatTime
rateOverTime
repeatDuration
emissionTime
emissionStartTime
emissionEndTime
timeOfSpawnEnd
currentSpawnRate
lastSpawningPosition
prevSpawningPosition
accumulatedCountToEmit
totalCountEmitted
frameGeneratedCount
frameGeneratedRange
emitterShapeIsPresent
birth
update
collision
AllCases
RawValue
ribbonRendererQuery
source
particlesPerRibbon
ribbonLength
clearAllVelocities
clearUnusedPositions
logInfo
elasticity
RawValue
storage
activeStart
groups
wasModifiedThisFrameOrTransaction
unregistrationDelay
activeAllocatingChunkHandle
inactiveAllocatingChunkHandle
handle
filter
data
layout
hashValueByType
parameters
code
language
functionNames
scheduling
isGraphV2
scriptIndex
resolvedParameters
cachedMappings
location
access
correspondingExternalIndex
type1d
type2d
type3d
typeCube
type1DArray
type2DArray
typeDepth2D
builtin
worldProperty
worldReference
entityProperty
entityPropertyInSpace
pointer
vfxPath
textureSampler
emitter
particleProperty
particleClassProperty
currentSeed
randomSeed
customShader
callParameter
scriptContext
particleIndex
functionType
triggerType
hitTest
identifier
ScriptCustomState
RawValue
kernel
fragment
debugComment
prettyName
header
direct
path
current
functionName_pre1091
originatingEntity
stage
custom
position
crWorldPosition
color
normal
tangent
cameraPosition
crWorldToProj
crWorldToView
viewToProj
projToView
emitterToCrWorld
worldReferencePosition
renderTargetSize
inverseRenderTargetSize
cameraIndex
cameraNear
cameraFar
iblIntensity
iblRotation
pbrParams
portalOpacity
radiance
irradiance
brdfLUT
scriptEntityByScheduling
deltaTime
time
vertexProperty
vertexOutProperty
fragmentInProperty
materialParameter
materialParameterTexture
vertex
fragmentOutProperty
rawValue
vertexParameters
fragmentParameters
ArrayLiteralElement
Element
linearDepth
frontFacing
barycentricCoordinates
primitiveID
customTypes
customTypesPerType
libraries
userTemplateLibraries
conversionSnippets
compositionSnippets
decompositionSnippets
initialized
vfxGraphTemplatesDir
lock
onUserTemplatesChanged
bundle
codeSourceSnippetRemapping
codeSourceSnippetRemappingWithValueTransfer
xRange
yRange
zRange
buffer
type
visibility
semantic
step
userManual
enumInfo
public
private
variable
name
allCases
dict
recentlyModified
cachedPropertiesByName
RawValue
value_pre2003
isPublic_pre2045
name
pointCacheGeneratorQuery
emitterQuery
sdfGeneratorQuery
textureShaderAssetQuery
initScriptQuery
updateScriptQuery
graphScriptQuery
allTexturesQuery
animatedTextureQuery
allEmitterQuery
allNonDirtyMaterialsQuery
meshParticleRendererQuery
preCreateDefaultMaterialDone
xRange
yRange
zRange
default
defaultOrID
accessList
accessControls
excludeList
classAndHashes
queryHash
hasComponentsThatWillGetDirty
rawValue
dontClear
clearAtNextFrameOrRootTransaction
automatic
offset
size
none
read
write
readwrite
readwriteNoDirty
optional
ArrayLiteralElement
Element
Iterator
RawValue
neighborSearchMap
subSpawnQuery
addRuntimeQuery
addOrRemoveInverseWorldQuery
updateRuntimeQuery
subSpawnStateQuery
removeOrphanedRuntimeQuery
query
eventQuery
spawnEntities
initializeEntities
updateEntities
renderEntities
maxParticleCount
cullFullyTransparent
updateBoundingBox
disableEmitterWhenCulled
showBoundingBox
updateOnGPU
warmupDuration
simulationRate
isLocal
isMonoChunk
isLegacyHalfSize
_seed
_randomizeSeedOnReset
debuggingOptions
simulation
nearestNeighbours
nearestNeighboursRadius
particleClass
randomGenerator
seed
isSubEmitter
allParticlesQuery
elapsedTime
generatedCount
frameGeneratedCount
visible
didWarmup
idToIndexTable
neededSortModes
orderBufferBySortMode
needPrevNextBuffer
prevNextBuffer
ribbonSortMode
beginOrderIndex
endOrderIndex
visibleParticleCount
particleClassFunctionConstants
particleClassFunctionConstantsForRendering
bufferHeap
updatesOnGPU
particleHeaders
particleHeaderSize
particleHeadersCPUA
particleHeadersCPUB
particleData
particleDataMaxAllocatedCount
particleDataUploadedAttachments
gpuCountersBuffer
gpuIndexBuffer
gpuFrameOdd
gpuFrameSeed
gpuParticleCountUpperBound
resetCount
rebuildCount
assignedParticleIDs
unusedParticleIDs
storage
prepare_dispatch_indirect_1D
prepare_indirect_draw
prepare_indirect_draw_indexed
prepare_indirect_draw_mesh
particle_reset_live_dead_counter
particle_update_life
particle_compact_data
particle_init_newly_created
particle_init_newly_created_with_parent_emitter
particle_update_counters
particle_data_realloc
particle_copy_transient_data
prepare_sort_dispatch
block_mergesort
merge_subarrays
copy_final_order
generate_keys
generate_prevnext
rawValue
value
randomize
emitter
spawn_pre1036
initialize_pre1036
update_pre1036
render_pre1036
uid_pre1064
seed_pre1087
randomizeSeedOnReset_pre1087
none
semiImplicitEuler
ArrayLiteralElement
Element
RawValue
AllCases
entityManager
gpuDevice
compileQueue
compileOperationQueue
lock
pendingCompilationStatuses
cachedBuildResults
builderEmitterScript
builderGraphScript
builderSimpleScript
builderKernelScript
builderShaderScript
builderParticleInitScript
builderParticleUpdateScript
builderTriggerScript
isCompilationDisabledByUserDefault
enableRuntimeCompilation
forceSyncRuntimeCompilation
enableCompileBeforeFirstFrame
metalLibraryURL
parametersInvalidationTimestamp
scriptType
scriptID
inProgress
success
failure
savedRuntime
savedFailure
results
type
ingestQuery
cleanupRuntimeQuery
restoreStateAterScriptRemoval
cleanupCompileAttemptQuery
setupQuery
compileQuery
materialDependenciesQuery
textureDependenciesQuery
codeGenFailure
noXcode
inFlightCompilation
compilationDisabled
cancelled
factor
overLife
entity
referencedEntityManager
localEntityManager
_isTombstoned
device
heap
enableLogging
lock
currentFrameBuffers
unusedBuffers
allocatedBuffer
label
frameAllocatedSize
currentAllocatingFrame
peakAllocationsRingBuffer
constantBufferAlignment
isActive
constantBuffers
buffer
offset
size
length
padding
smoothness
occlusionIntensity
occlusionDistance
occlusionFalloff
displacementIntensity
displacementScale
oldRendererClassIndex
texture
lighting
specular
blendMode
cutoff
sortMode
maxOverdraw
animationMode
softDistance
interFrameInterpolation
materialOverride
textureScale
textureBias
orientation
upAxis
shape
stretchFactor
curvature
thickness
multiplyThicknessByAlpha
prebakedLightingPositiveXYZ
prebakedLightingNegativeXYZ
scaleUsingTextureSize
useSingleChannelOfTexture
channel
orientAlongVelocity
useOrientationForLighting
particlePerRibbon
ribbonCount
subdivisionCount
profile
textureMode
avoidOverdraw
enableCaps
capBeginTexture
capEndTexture
billboard
free
billboardUpAxis
orientedBillboard
billboardParticleAxis
playOnce
looping
autoReverse
AllCases
RawValue
buffer
scope
options
dirtyReadPolicy
groups
addRuntimeQuery
updateMaterialsQuery
meshRendererDependenciesQuery
quadRendererDependenciesQuery
kind
renderPipelineFactory
customShader
parameters
blendMode
cutoff
customLayer
overrideDepthStencil
depthCompare
depthWrite
winding
cullMode
_cachedPropertiesByName
opaque
transparent
authoring
prelit
custom
AllCases
RawValue
array
arrayOfAnySize
generic
some
numeric
integer
scalar
floatn
floatvec
matrix
anyCurve
anyColorRamp
texture
blendMode
cutoff
lighting
specular
sortMode
maxOverdraw
animationMode
interFrameInterpolation
softDistance
pointScale
screenSizeRange
dirty
retiredDirty
callbacks
_paramsOnHold
_onHold
_mute
callback
Parameter
isCancelled
lock
tuple
cancellables
particleQuery
composition
ramp
affectsAlpha
sharedRamp
RawValue
registry
urlCache
entityManager
asset
_entityManager
owner
_rootNode
loaded
options
idToEntity
entityToId
counter
sceneIdentifier
sceneAssetRegistry
name
updateBlock
index
AllCases
RawValue
fileNotFound
versionMismatch
delegateImpl
coreView
scene
effect
pointOfView
vfxView
onlyLocal
updateWorldFromLocal
value
compileQueue
dirtyScript
dirtyKernelReflection
shaderAssetQuery
reflectionQuery
dirtySharedFileQuery
functions
asset
buffersSize
inputs
outputs
inputOutputs
kind
textureType
index
offset
property
propertyType
propertySemantic
propertyName
RawValue
sendEventsProbability
dieOnCollisionProbability
elasticity
friction
layers
cornerRadius
inside
radiusMultiplier
aabb
center
halfSize
velocity
box_from_emitter
emitter_from_box_no_scale
scale
texture
blendMode
cutoff
sortMode
maxOverdraw
animationMode
interFrameInterpolation
lighting
specular
softDistance
entity
type
sendEventsProbability
dieOnCollisionProbability
elasticity
friction
radiusMultiplier
layers
inside
assetManager
pathResolver
effectIDToAssetsDirectory
authoringFileManager
temporaryDirectory
persistedDirectory
isPerformingChangesLevel
lock
referencesToWrite
allReferencesWithTemporaryCopy
capacity
wordcount
data
ArrayLiteralElement
Element
Iterator
bitset
value
duration
speed
beginTime
timeOffset
repeatCount
autoreverses
fillForwardMode
fillBackwardMode
easingFunction
parent
globalTime
localTime
active
completed
target
interpolation
timelineX
timelineY
timelineZ
timelineW
AllCases
linear
sphericalLinear
transform
from
delta
getset
targetEntity
timelineRuntime
cachedIndex
evalBuffer
none
fill
loop
pingPong
back
bounce
elastic
exponential
logarithmic
power
physical
quadIn
quadOut
quadInOut
cubicIn
cubicOut
cubicInOut
quartIn
quartOut
quartInOut
quintIn
quintOut
quintInOut
circle
hermite
sine
RawValue
primitiveType
renderingOrder
indexBuffer
indexType
indexCount
indexOffset
simplifiedIndexBuffer
vertexCount
vertexOffset
instanceCount
instanceOffset
stencilReferenceValueFront
stencilReferenceValueBack
winding
cullMode
fillMode
clipMode
inverseWinding
tessellationFactorBuffer
meshThreadsPerGrid
threadsPerObjectThreadgroup
threadsPerMeshThreadgroup
needPBR
isAdditive
renderStatesPerVariant
arguments
indirectBuffer
destroyDrawCalls
value
ArrayLiteralElement
renderer
entityManager
commandQueue
unused
classesByRenderPass
layer
storage
Element
Iterator
Index
SubSequence
Indices
shape
angularLimits
distribution
emissionOrder
emitOnSurface
direction
orientation
motionDistribution
transformWeight
velocityRange
spreadingRange
tangentAxis
tangentForce
texture
textureAddressMode
textureScale
textureBias
inheritColorFromTexture
torus
point
sphere
cylinder
plane
cone
grid
uniform
random
forward
backward
autoReverse
world
local
motion
none
AllCases
RawValue
uniformDistribution
sendEventsProbability
dieOnCollisionProbability
elasticity
friction
radiusMultiplier
layers
staticOptional
vector
range
array
assetReference
worldReference
sampler
customShaderTexture
none
flow
bool
pointer
enum
quaternion
int32
uint32
int64
half
float
double
untypedScalar
string
colorRamp
colorRampTexture
curve
curveTexture
state
textureDescriptor
metalTexture
metalBuffer
nodeGroup
resourceReference
pbrLightingParameters
texture
computeShader
renderTarget
fragmentShader
pointOfView
hitTestable
RawValue
data
grid
positionPointer
position
velocity
orientation
scale
radius
volume
_distanceToNeighbor0
_nextIndex
isValid
cells
cellCountMax
cellCountInX
cellCountInY
cellCountInZ
cellCountInXM1
cellCountInYM1
cellCountInZM1
cellSize
boxCornerMin
boxCornerMax
first
last
cruisingStrength
cruisingSpeed
clampSpeed
simpleDragForce
kickStartThreshold
kickStartDirection
influence
distanceFalloff
viewAngle
viewFalloffAngle
maxRotVel
showArea
viewDistance
maxNeighborCount
sizeMode
sizeVirtualScale
mindVolumeRatio
desiredDistance
separationStrength
alignmentStrength
cohesionStrength
collisionStrength
collisionRadiusMul
showGrid
showCells
logInfo
planeCenter
planeNormal
showPlane
borderThickness
corner1
corner2
direction
maxRotVelDir
upVector
pointAt
reduceFlipping
maxRotVelUpVec
RawValue
range
entityKeyPath
keyPath
stage
eventType
message
entity
curve
colorRamp
kind
name
inputCount
stateRef
main
spawn
initialize
particleInit
update
particleUpdate
render
trigger
AllCases
RawValue
directionalUnshadowedQuery
directionalQuery
pointUnshadowedQuery
pointQuery
spotUnshadowedQuery
spotQuery
ambientQuery
intensity
shadowRadius
zNear
zFar
attenuationRadius
outerAngle
innerAngle
lightsConstantsBuffer
iblConstantsBuffer
hasAnalyticalLights
hasDirectionals
hasShadows
extents
emitsDoubleSided
RawValue
velQuery
posVelQuery
kind
dimensions
scale
bias
intensity
noise
amortized
precomputedCurlNoise1D
precomputedCurlNoise2D
precomputedCurlNoise3D
precomputedFBMNoise1D
precomputedFBMNoise2D
precomputedFBMNoise3D
RawValue
entityManager
name
clientID
isInAuthoringMode
scene
componentRegistry
entityFamilies
allEntityClasses
chunkTable
chunkStorageLock
allComponentDataChunks
recycledChunksData
recycledChunksDataHistory
workerComponentStorage
sceneComponentStorage
groupsCount
copyQueue
copyGroup
relations
transactionDepth
hasRunloopTransaction
didBeginTransactionAtLastFrame
signpostID
counters
_entries
entityCapacity
entityCount
generationSalt
lock
isVFX2
firstFreeIndex
scheduler
queryManager
commandQueues
updateQueue
nextFrameBlocks
nextFrameBlocksLock
runtimeThread
_invalidated
canUseImGUI
imGUIEnabled
syncLock
asyncQueue
backgroundingSignalLock
applicationInBackground
sceneInBackground
lockChunksOnQueryForEach
shouldNotifyEntityEvent
stateDidChangeFn
mainGraphScriptGroup
logger
renderer
replicationStream
scriptingConfig
world
clock
updateHandlerIndex
activeStatesPerEffects
currentState
isInPrepare
peerPid
peerTaskIdentity
chunkHandle
indexInChunk
_classIndex
generation
activeStatePerEntities
load
update
render
postRender
idle
mask
Element
Iterator
remapTable
Element
cameraComponents
setupLODState
rootsWithLOD
childrenWithLOD
pointOfCullingQuery
lodQuery
state
read
write
readWrite
renderTarget
index
offset
resource
access
_resources
templateIdx
contextEntryMap
contextExitMap
subContextMap
arraySequenceMap
snippets
customCodeSnippetMap
typedArraySnippetMap
staticSwitchSnippetMap
userObjects
variableMap
variableReferenceMap
assignments
parameters
templates
bakedTemplates
decodingErrors
onUserTemplatesChangedUUID
switchCaseValuePrefix
templateRemapping
context
settings
domain
libFunctionsToInclude
inArgs
inOutArgs
code
templatesAlreadyDefined
errorInfos
allSwitchCases
hasTimeDependentSnippet
addAllInputsAndOutputs
cleanupCodeArr
baseObjectUidsAlreadyDeclaredDuringCodeGeneration
language
sortInArgsAlphabetically
isSubContext
isTemplate
modules
useIncludes
addEndOfFunctionComment
defaultArgs
defaultArgsNamesOnly
useLogger
allowFakeAssignments
evaluationMode
baseObjectUID
baseObjectName
baseObjectLabel
reason
assignmentMetadataSets
baseUID
baseType
parameterName
RawValue
metadataDict
custom
bool
uint8
uint16
uint32
uint64
int8
int16
int32
int64
uint32x2
uint32x3
uint32x4
float
float2
float3
float4
float2x2
float2x3
float2x4
float3x2
float3x3
float3x4
float4x2
float4x3
float4x4
double
colorU8
colorRamp
colorRampTexture
randomNumberGenerator
textureSampler1D
textureSampler2D
textureSampler3D
string
quaternionf
curvef
curveTexture
intRange
floatRange
switchValue
unknown
boolArray
uint8Array
uint16Array
uint32Array
uint64Array
int8Array
int16Array
int32Array
int64Array
intArray
floatArray
float2Array
float3Array
float4Array
stringArray
urlArray
type
name
code
valueType
value
seed
generator
RawValue
orthoNoProjQuery
perspNoProjQuery
orthoQuery
perspQuery
povQuery
projQuery
buffer
data
indirectResources
argumentEncoder
bufferEncoded
firstConstantIndex
pointOfView
frameConstants
frameConstantsBuffer
viewDependantConstantsTransient
viewDependantConstantsBuffer
viewDependantConstantBuffers
passConstantsArgumentEncoder
passConstantsIndirectResources
passConstantsBuffer
globalConstants
externalSceneConstants
externalSceneBuffers
externalEntityConstants
constantsCopyEncoder
reFrameConfiguration
frameConstantsEncoded
sceneFadeOpacity
portalOpacity
opaqueDrawsSeparateDepth
forceUseInterpolatedCrWorld
buffers
attributes
layout
parts
vertexCount
meshIdentifier
data
buffer
offset
size
stride
_stride
_stepRate
_stepFunction
_offset
_format
_bufferIndex
index
descriptor
primitiveType
vertexStart
materialIndex
indices
indexCount
indexByteSize
levelOfDetails
aabb
decodingError
identifier
RawValue
computeFunction
functionConstants
precomputedHashValue
description
entity
keyPath
componentProperty
entityComponentType
propertyPath
propertyType
propertySemantic
RawValue
query
patchQuery
factor
name
stream
remapper
destination
srcDelegate
dstDelegate
replicateByDefault
replicationEnabled
cfxWorld
mappingTablesLock
entityMapTable
reversedEntityMapTable
destinationEntityManager
remapTable
isReversed
entityManager
shouldReplicate
beginGroup
cloneEntities
createEntity
createEntities
destroyEntity
assign
setEntityTombstoned
setEntityActive
addRelation
removeRelation
dirtyEntity
setValue
setComponent
removeComponent
perform
endGroup
component
isAdded
concreteKeyPath
value
family
storageLayout
classComponentstorage
classHash
notifySystemsOnEntityEvent
classIndex
isAnonymous
isGraveyard
hasUnstableOrdering
isMonoChunk
isTrackingDirty
hasDirtyPropagation
storage
CPUTime
UpdateTimeCPU
RenderTimeCPU
GPUTime
UpdateTimeGPU
RenderTimeGPU
GPULatency
ClockResetCount
CreatedEntities
DestroyedEntities
EntityCount
ChunkCount
ChunkTotalSize
ComponentCopy
ComponentMove
ComponentDestroy
ComponentInit
ComponentInitWithSrc
ComponentSwap
ChunksCopiedToDataStripes
ParticleDataUploadedToGPU
DrawListSize
TextureCount
TextureMemory
elasticity
friction
flip
RawValue
device
commandQueue
scene
effect
transientDrawCall
rootEntity
cameraEntity
cancellables
isPrepared
uuid
worldFromScene
sceneFromWorld
sceneScale
reloadBlock
remappingTable
renderOutput
range
allColorRampsQuery
unregisteredColorRampsQuery
allColorRampsWithRuntimeQuery
allModifiedColorRampsWithRuntimeQuery
buffers
textures
renderer
index
value
slice
texture
blendMode
cutoff
sortMode
maxOverdraw
animationMode
interFrameInterpolation
softDistance
thickness
lighting
specular
texture
delegate
renderOutput
metalLayer
sampleCount
preferredFramesPerSecond
scaleFactor
postRenderCallback
entityManager
renderer
stereoMode
paused
effectID
sizeDirty
drawableSize
resizingMode
backgroundColor
emitterQuery
firstID
idToIndexTable
value
inverse
entityManager
entity
componentType
parentEmitter
scope
section
allParticlesQuery
particleQuery
velocity
curve
data
capacity
count
storage
freeHandles
_detectCycle
_capacity
_count
allocator
values
keys
hops
Element
Iterator
Index
SubSequence
Indices
buffersAndStart
buffer
start
_elements
_position
sourceEmitter
sourceData
targetData
childrenPerParent
RawValue
smoothness
displacementIntensity
displacementScale
range
colorAgeQuery
curve
mask
opaque
alpha
additive
string
indent
wakeupEvent
didSwapQueueEvent
runtimeThreadId
runtimeUpdateHandler
__startupShutdownEvent
ownsLock
lock
clientEventQueue
serverEventQueue
qlock
requestStop
entityManager
threadLogger
threadid
_isSuspended
dynamicPropertiesTimestamp
entityManager
stackAllocator
entity
particleCount
mapping
timestamp
direct
temporary
indirect
pointer
finalizeBlock
always
never
onDynamicPropertyChange
RawValue
copyList
scope
name
offset
size
destination
frameConstant
viewConstant
externalEntityConstant
externalSceneConstant
composition
range
ramp
worldDimension
dimensions
primitiveQuery
type
width
height
length
chamferRadius
widthSegment
heightSegment
lengthSegment
chamferSegment
radius
segment
isGeodesic
radialSegment
innerRadius
capSegment
topRadius
pipeSegment
text
extrusion
flatness
font
radialSpan
hemispheric
sphere
plane
tube
capsule
pyramid
cone
cylinder
torus
name
size
AllCases
RawValue
value
entity
entities
local
world
scene
crworld
view
AllCases
RawValue
clusters
colors
updateThreshold
centroidsX
centroidsY
centroidsZ
index
drawCallGenerationContext
instanceCount
layer
externalData
$__lazy_storage_$_iblTextures
$__lazy_storage_$_lightConstants
$__lazy_storage_$_iblConstants
lock
queryInfoByHandle
matchingQueriesByEntityClass
queryBuffer
matchingEntityClasses
matchingSystems
thread
runloop
runloopSource
currentRunloop
startedCallback
texQuery
texAgeQuery
duration
curve
vertexBuffers
vertexTextures
vertexSamplers
fragmentBuffers
fragmentTextures
fragmentSamplers
objectBuffers
objectTextures
objectSamplers
meshBuffers
meshTextures
meshSamplers
vertexReqs
fragmentReqs
indirectResources
buffer
bufferView
scope
texture
entity
renderTarget
sampler
named
rawValue
fallback
global
scene
light
brdf
material
renderGraph
system
view
instance
ArrayLiteralElement
Element
RawValue
reflectionFailed
name
label
searchLabel
tooltip
hasValue
includeFunctions
supportedBy
useNamedSignature
hidden
skipTest
disableable
timeDependent
useDynamicBranching
deprecated
deprecationInfo
toolCreateFunction
genericTypes
previousInParameterNames
inParameterNames
inParameterTypes
inParameterDefaultValues
showInParameterDefaultValues
mandatoryInParameters
outParameterNames
outParameterTypes
code
cleanupCode
noOutputDeclarationCode
codeContainsUidIndexTag
valueType
defaultInParameter
defaultSnippet
inParameters
outParameters
embeddedParameters
libraryName
libraryColor
includeFunctionsDependencies
type
RawValue
group
sendEventsProbability
dieOnCollisionProbability
elasticity
friction
radiusMultiplier
layers
mesh
ignorePreprocessorStatements
comma
pound
period
colon
semicolon
dollarSign
atSign
equalSign
leftParen
rightParen
leftBracket
rightBracket
leftAngleBracket
rightAngleBracket
identifier
number
message
parameter
substring
kind
text
name
value
input
lastConsumedToken
particleQuery
options
userInfo
codingPath
$__lazy_storage_$_unmanagedDecoder
source
stores
data
offset
keyedSources
length
offsets
decoder
currentIndex
typeRegistry
enableParallelDecoding
onSubDecoderCreation
codingKeyed
hashKeyed
store
allCamerasQuery
lifeAndAgeQuery
lifeQuery
range
distributeOnFrame
RawValue
layout
maxOffset
data
perWorkerStorage
world
table
options
references
isDuplicating
remapTable
uuidTable
entityManager
workerIndex
stackAllocator
frameAllocator
currentIterationContext
pendingDirtyPropagationQueue
deferredOperations
immediateOperations
dirtyTrackingDisabled
stats
tempComponentBuffers
addedComponent
storage
rawValue
addComponent
removeComponent
addClassComponent
removeClassComponent
setActive
destroy
frameAllocationCount
maxAllocatedSize
accumulatedAllocatedSize
addComponentCount
removeComponentCount
destroyEntityCount
ArrayLiteralElement
Element
RawValue
componentTypeInChunk
componentTypeInQuery
pointer
writeBackBlock
srcType
dstType
options
userInfo
codingPath
makeNextUnkeyedRandomAccess
superStore
$__lazy_storage_$_unmanagedEncoder
stores
encoder
data
isSpecial
count
$__lazy_storage_$_keyStore
$__lazy_storage_$_unmanagedKeyStore
$__lazy_storage_$_valueStore
$__lazy_storage_$_unmanagedValueStore
subStores
useKeyHashing
$__lazy_storage_$_dataStore
$__lazy_storage_$_unmanagedDataStore
$__lazy_storage_$_sizesStore
$__lazy_storage_$_unmanagedSizesStore
encodeSizeHeader
appending
halfFloats
typeRegistry
store
Element
RawValue
ArrayLiteralElement
rawValue
publisher
currentOffset
cpuSlice
gpuSlice
constantBufferAlignment
color
orientation
position
userData1
userData2
userData3
userData4
velocity
empty
plane_xy
planes_xy_zy
planes_xy_zy_xz
star_around_y_axis
cuboid_open
cuboid_closed
cuboid_wide_open
setup_default
closed
continuous
open
shared_closed
shared_continuous
shared_open
ignore
coarse
fine
accurate
local_x_axis
local_y_axis
local_z_axis
local_negative_x_axis
local_negative_y_axis
local_negative_z_axis
uniform
planar
free
operation
factor
replace
multiply
blend
curl
white
green
blue
alpha
luminance
AllCases
RawValue
BitPattern
unwrappedParallizableTypes
stringValue
intValue
inner
unexpectedMemoryLayoutSize
invalidHeader
keyNotFound
unexpectedType
unexpectedSubtype
invalidSize
noHeader
unexpectedEndOfData
invalidString
count
destroyedParticleWithIDQuery
data
componentLocks
layout
isInitializedBitset
storageLock
entity
chunkSize
type
platform
architecture
macOS
watchOS
tvOS
x86_64
arm64
arm64e
arm64_32
AllCases
RawValue
block
device
allocator
mtlTextureDescriptorCache
renderTargets
keys
keyStride
times
evaluateFunc
evaluateSplineFunc
quadratic
curve
values
RawValue
renderStatesPerLayout
renderStates
particleRendererRenderPipelineFactory
renderPipelineReflection
arguments
bufferAllocator
winding
cullMode
needsPBR
hasDynamicTexture
isAdditive
defaultLayer
compileIdentifier
functionConstantsHash
render
depthStencil
depthStencilDescriptor
texture
options
entityManager
animations
skeletons
meshes
unsupportedJointAnimationType
missingRenderer
skeletonAnimationMissingSkeleton
Result
Parameter
unsafeStorage
dispatchLock
future
finished
running
group
state
curToken
callbacks
succeeded
failed
canceled
Value
none
spawn
initialize
update
render
AllCases
RawValue
query
force
space
RawValue
query
target
positionQuery
effectID
rootEntity
entityObject
scene
delegate
name
version
onEffectRestartSubject
cancellables
_enabled
_tombstoned
nodes
resetID
frameIndex
subFrameIndex
simulationIndex
startTime
timeOfTheLastTick
time
remainingTimeToSimulate
deltaTime
lastPlayingDeltaTime
updateCount
useFixedUpdateRate
fixedUpdateRate
isSimulating
isPaused
wasPlaying
stepOnceRequested
wasSteppingOnce
renderSettings
commandQueue
renderer
display
window
quiltTexture
viewCone
defaultFov
batchRenders
enableParticles
showRawQuilt
framePerSecond
buffer
length
format
offset
stride
drawCall
aabb
_isDepthOnly
_writesColor
_writesSeparateDepth
_needsLinearDepth
_drawsForBlur
_isAdditive
_materialType
reProvidedBuffers
reProvidedTextures
handler
renderPassName
renderPassIdentifier
emitterIdentifier
RawValue
passName
materialType
writesSeparateDepth
needsLinearDepth
isAdditive
table
node
entity
animationPlayer
meshCache
materialCache
dataCache
textureCache
animations
geometryCount
topLevelObjects
shadable
propertyCache
object
identifier
bridgeObjectReference
pnode
observer
pModel
pparametricModel
bridgedObjectIdentifier
pDonut
pDof
pMotionBlur
pGrain
plensBlur
pExposure
ptoneMapping
presMorpher
pmaterial
pPhysicsBody
pbloom
pcamera
plight
script
recompileHashValue
didFinish
error
stderr
diagnostics
userLocation
realLocation
kind
message
pattern
kindGroup
messageGroup
lineGroup
columnGroup
userLineGroup
regexp
line
column
warning
note
RawValue
descriptions
values
functionConstants
name
index
desc
data
texture
vertex
fragment
vertexAndFragmentAreIdentical
Element
Iterator
Index
SubSequence
Indices
buffer
members
argumentEncoder
bufferLength
RawValue
dataSize
dataType
offset
alignment
type
isDepth
texture
blendMode
cutoff
sortMode
maxOverdraw
animationMode
interFrameInterpolation
lighting
specular
softDistance
shape
capsule
torus
cylinder
roundedBox
sphere
AllCases
RawValue
rect2DDesc
disc2DDesc
roundedRect2DDesc
roundedRectStrokeDesc
roundedRectStrokeShadowDesc
shadowRoundedDesc
passFormat
rectShape
discShape
roundedNoStroke
roundedWithStrokeColorWidth
roundedWithStrokeColorWidthShadow
value
radius
offset
color
scale
intensity
AllCases
RawValue
green
blue
alpha
nearest
linear
clampToZero
clampToEdge
repeat
repeatMirror
xRange
yRange
zRange
absorbFactor
blurFactor
pipelineDescs
lock
tickHandlers
tickHandlersForThisFrame
displayLink
dispatchSource
isRenderClock
paused
device
lock
operationQueue
asyncGroupRequests
textureEntryByKey
defaultSampler
defaultSamplerRepeatTrilinear
defaultSamplerClampMipNearest
defaultSamplerRepeatMipNearest
defaultSamplerRepeatSMipNearest
defaultSamplerMirrorRepeatMipNearest
defaultTextures
defaultNoiseTextures
groupID
requestCountPerTexture
kind
options
loading
loaded
error
none
state
group
waitingCount
weakReference
strongReference
refCount
offset
size
descriptor
slices
RawValue
Element
xRange
yRange
zRange
inParameterNames
inParameterTypes
inParameters
orgInParameterNames
orgInParameterTypes
outParameterNames
outParameterTypes
outParameters
orgOutParameterNames
orgOutParameterTypes
embeddedParameters
domains
CodeSnippet
VariableSnippet
VariableReferenceSnippet
CustomCodeSnippet
TypedArraySnippet
StaticSwitchSnippet
ContextExit
ContextEntry
SubContext
ArraySequenceSnippet
BaseObject
RawValue
loadFileRuntime
addFileRuntime
meshParticleRendererQuery
modelRenderersQuery
allMeshParticleRendererWithoutCollectionQuery
allMaterialsWithoutCollectionQuery
allMaterialsWithCollectionQuery
options
preferredLoader
optionsLocked
rawValue
asset
identifier
nodePath
value
sceneIdentifier
meshIdentifier
ArrayLiteralElement
Element
RawValue
ignoreVertexColor
normalize
SceneKit
ModelIO
AllCases
sendEventsProbability
dieOnCollisionProbability
elasticity
friction
radiusMultiplier
layers
sdfData
name
lock
_mutex
particleQuery
value
usesParticleSize
length
functions
functionConstants
passFormat
blendingStates
vertexLayout
topologyClass
tesselationDesc
rasterization
maxVertexAmplificationCount
precomputedHashValue
partitionMode
maxTesselationFactor
isTesselationFactorScaleEnabled
controlPointIndexType
stepFunction
windingOrder
composition
texture
addressMode
scale
bias
angle
value
type
RawValue
value
type
holder
semantic
value
source
root
topLevelObjects
order
entity
entities
presenter
entity
lastModificationDate
shouldReplicate
manager
isMenuItemEnabled
isMenuItemBoundToEnabled
emitterQuery
value
triangle
point
sphere
wave
spiral
cylinder
frustum
torus
point2D
line2D
basis
lastFrame
AFrame
displayEntityBox
displayChunkBox
debugChunkBox
showKillShapes
showEmitterShapes
showColliderShapes
showLights
showCameras
showSkeletons
showForceFields
commandQueue
debugInfoComponentTypes
none
startOnly
endOnly
both
diamond
diagnosticsTracker
entity
scriptType
success
failure
inProgress
mode
addressMode
composition
ramp
linear
radial
octahedron
angle
AllCases
RawValue
instance
owner
name
type
curve
range
dictionary
orderedKeys
Element
Iterator
Value
Index
SubSequence
Indices
pairs
relationType
from
relation
eventClass
particleQuery
emitterProperties
emitter_from_world
emitterDeltaTime
sendEventsProbability
dieOnCollisionProbability
elasticity
friction
radiusMultiplier
layers
isInfinite
isDoubleSided
halfExtents_pre1039
sdfData
inside
cornerRadius
mesh
colliderVelocity
collider
anchored
indicesToDestroy
eventsData
position
normal
direction
color
rawValue
ArrayLiteralElement
Element
RawValue
DataInconsistent
NotSupported
Unknown
vertexFunction
fragmentFunction
objectFunction
meshFunction
linkFunctionNames
linkLibrary
depthBias
tiles
renderingCommands
view
proj
nearFar
biasScale
RawValue
moduleName
libraryPath
gpuDevice
ownsDlHandle
dlHandle
metalLibrary
commandBuilder
libname
sourceURL
metal
swift
AllCases
RawValue
serializationError
compileError
wrappedCompileError
linkError
loadError
symbolNotFound
value
value
value_w0
RawValue
radius
aroundSpeed
inSpeed
tightness
name
onReadyToCopy
joints
bindTransforms
restTransforms
jointsParents
inverseBindTransforms
translations
rotations
scales
processAnimations
updateSkeleton
times
values
target
animation
data
jointLocalTransforms
jointWorldTransforms
cachedJointWorldTransformsInBindingSpace
lastFrameCachedJointWorldTransformsInBindingSpace
skeleton
geometryBindTransform
range
spreadingRange
composition
enableRecording
entityManager
lock
currentJobID
currentJobName
recurrentJobs
orderedRecurrentJobs
jobQueueForThisFrame
pendingJobsToEnqueueForThisFrame
pendingJobsToEnqueueForThisFrameOnly
groupsToUnregister
liveQueryCountByJobID
needsRescheduling
needsReschedulingForThisFrame
dependenciesByJob
schedulerEventsRecordedDuringLastFrame
queriesRecordedDuringLastFrame
schedulerEventsRecordedDuringThisFrame
queriesRecordedDuringThisFrame
simulationTimeScale
rawValue
groupEntity
debugName
systemInstance
stage
priority
isLocal
isEnabled
isSimulation
durationCounter
doUpdate
jobs
index
beginJob
endJob
ArrayLiteralElement
Element
RawValue
done
prepare
renderInPrepare
notifyEntityEvent
update
render
postRender
xRange
yRange
zRange
time
velocity
life
mode
curve
AllCases
angleQuery
asset
floatArray
value
lock
noise
mainDir
mainDirSpread
noiseIntensity
noiseScale
maxStepPerBranch
stepLength
count
randomMainDir
scenesToUpdate
newNcenesToLoad
rendererQuery
placeSceneQuery
assetEntity
playing
scene
renderer
sceneURL
asset
RawValue
allEmitterQuery
rawValue
current
unsorted
oldestFirst
youngestFirst
frontToBack
backToFront
increasingID
decreasingID
AllCases
ArrayLiteralElement
Element
RawValue
renderer
features
internalColorPixelFormat
defaultRenderTargets
opaqueDrawCallsQuery
transparentDrawCallsQuery
authoringDrawCallsQuery
directionalLightQuery
pointLightQuery
spotLightQuery
ambientLightQuery
iblLightQuery
has_opaque
has_transparent
has_volumetric_scattering
has_global_illumination
has_compositing
has_authoring
needs_depth_buffer
needs_read_depth_buffer
needs_linear_depth_buffer
has_post_opaque_rendered_in_transparent
needs_pbr_lighting_bindings
transparentTargetRatio
deferredGlobalIlluminationRatio
volumetricScatteringRatio
opaqueColor
opaqueDepth
linearDepth
shadow
transparentColor
transparentDepth
compositing
globalIllumination
scattering
lensBlur
bloom
authoring
authoringResolve
authoringDepth
deferredAlbedo
deferredNormal
deferredRoughnessMetalnessAO
deferredEmissive
opaqueDepthAsColor
transparentDepthAsColor
name
pixelFormat
sampleCount
dimension
mipmap
clearColor
format
opaqueRatio
transparentRatio
dimensions
query
addHiddenStateQuery
deactivateHiddenQuery
activateNonHiddenQuery
value
entityManager
encodedVersion
scope
codingEntity
codingComponent
componentsToAdd
isLoadingForAuthoring
codeBindingsMetadata
autoRecoverFromDecodingFailure
silentlySkipComponentOnEncodingFailure
logComponentCoding
codeComponentTypesWithTable
codePropertiesWithTable
onDeinit
entityTableByIndex
entityTable
reversedEntityTable
encodedComponentTypes
encodedProperties
intValue
stringValue
dict
entity
type
version
inner
isActive
components
value
entities
RawValue
index
active
component
relations
componentTable
propertyTable
contents
generation
target
scriptKeyPath
reference
kind
graphID
rendererInfo
texturePreviewsByNodeID
_descriptor
reflection
inputTypes
inputNames
outputTypes
outputNames
commandQueue
name
semantic
texture
color
depth
buffer
vertexParameters
fragmentParameters
_cachedPropertiesByName
RawValue
angle
axis
amplitude
frequency
phaseShift
delta
colorQuery
scaleQuery
scale1Save
scale1Restore
scale2Save
scale2Restore
scale3Save
scale3Restore
value
name
supportedLanguages
contexts
shortName
category
description
descriptionWithoutSignature
context
Local
Builtin
User
RawValue
leftOffset
rightOffset
topOffset
bottomOffset
near
usePerspective
showVolume
camera
RawValue
loadPointCache
updatePointCacheFromModels
updatePointCache
uploadREMeshPointCache
assetPath
sources
meshEntity
count
distribution
options
seed
asset
bridgeObjectReference
identifier
pointCache
overrideBoundingBox
inheritColor
inheritOrientation
inheritSize
skeleton
velocityRange
inheritPosition
inheritVelocity
motionDistribution
motionTransfert
position
velocity
normal
orientation
color
size
jointIndices
jointWeights
rawValue
properties
name
unsupportedFormat
invalidFile
slice
format
missingMesh
missingTextureCPUCache
reference
sequential
random
randomUniformArea
AllCases
RawValue
ArrayLiteralElement
Element
value
versionToMigrateTo
entityManager
world
scope
isLoadingForAuthoring
isLoadingExport
fileVersion
scene
effect
renderer
texture
depthTexture
backgroundColor
pointOfView
performMetalCaptureDuringSnapshot
postRenderCallback
topologyClass
tesselation
writeMask
flags
renderFunctions
objectArguments
materialArguments
argumentsAreUpToDate
rawValue
ArrayLiteralElement
Element
RawValue
variant
passFormat
vertexLayout
blendStateOverride
blendMode
cutoff
additiveWritesToAlpha
maxVertexAmplificationCount
additionalFunctionConstants
composition
mode
velocityRange
xRange
yRange
zRange
renderer
renderTargetHeap
textures
maxHeapSizeNeeded
currentHeapSizeUsed
frameMaxHeapSizeNeeded
texture
blendMode
cutoff
_sortMode
maxOverdraw
animationMode
interFrameInterpolation
softDistance
orientation
lighting
specular
textureMode
textureScale
textureBias
subdivisionCount
profile
capBeginTexture
capEndTexture
particlePerRibbon
ribbonCount
avoidOverdraw
none
triangle
rectangle
star
round
stretch
tile
repeatPerSegment
AllCases
RawValue
graph
diagnostics
flowOutputsByNode
dataOutputsByNode
nextScope
cfgScopes
scopes
predecessors
successors
onParticleStage
onTrigger
onUpdate
onFirstFrame
dirtyWithParent
dirtyWithOverride
wrongDepthRoots
computeTransformFromPosOriScale
computeInverse
allChildrenMLH
allChildrenOLH
computeLastFrame
addLastFrameToChild
markAsFixed
curve
colors
times
mode
values
tangents
defaultInterpolationMode
ArrayLiteralElement
linearSRGB
sRGB
tangentIn
tangentOut
tangentsLinked
interpolation
linear
spline
bezier
RawValue
transforms
colors
renderContext
drawList
opaqueQuery
query
model
materialOverride
mesh
materials
lastFrameUsed
unusedCount
renderBuckets
RawValue
unregisteredCurvesQuery
allCurvesQuery
allCurvesWithRuntimeQuery
allModifiedCurvesWithRuntimeQuery
textures
renderer
value
index
slice
texture
authoringID
userInfoData
inputs
node
index
defaultInstanceByType
entries
entriesByCategory
node
flags
renderGraph
constant
flow
math
logic
random
easing
conversion
other
AllCases
rawValue
ArrayLiteralElement
Element
RawValue
always
once
onMouseDown
onMouseUp
onMouseDragged
onMouseMoved
onKeyDown
onKeyUp
onTicked
compileAttempt
loader
symbols
metalFunctions
metalReflection
didRun
version
customState
originatingEntity
index
AllCases
RawValue
parameters
savedValues
exportedFunctionNames
code
debugComment
debug
cFlags
swiftFlags
bundle
absoluteURL
pathResolver
compileQueue
dirtyTextureLoadingOptions
allTextureFilesWithoutWatcher
allTextureFiles
allTextureFilesWithoutDoNotUpload
allTextureArrayFiles
readTextureFile
readTextureArrayFile
allTextureFileWithCPURuntime
readTextureDataCPUQuery
readTextureCGImageQuery
updateGPURuntime
addRenderTargetRuntime
shaderAssetQueryAdd
shaderAssetQueryGen
convertToEquirectangularQuery
uploadCPUToGPUQuery
dirtyMissingCPURuntimeQuery
downloadGPUToCPUQuery
cleanupCPUQuery
cleanupGPUQuery
dirtyTextureClient
kernelScript
kernelFunction
desc
arguments
parameters
textures
_cachedPropertiesByName
asset
framePerRow
framePerColumn
frameCount
kind
options
assetPaths
data
texture
buffer
synchronized
slices
texture2D
texture3D
texture2DArray
count
none
auto
sourceOffset
sourceBytesPerRow
sourceBytesPerImage
sourceSize
destinationSlice
destinationLevel
cpuMode
gpuMode
fallback
asynchronous
channel
threshold
mipmapCount
maxWidth
maxHeight
keepAspectRatio
limit
force
mode
onLoad
onDemand
never
decoding
rawValue
watcher
loadingFailed
uploadFailed
assets
useTexture3D
float
float2
float3
float4
value
storage
sizeModification
animation
clear
white
black
grey
_path
_filename
_pathResolver
RawValue
AllCases
ArrayLiteralElement
Element
textureType
pixelFormat
width
height
depth
mipmapLevelCount
sampleCount
arrayLength
usage
allowGPUOptimizedContents
swizzle
storageMode
resourceOptions
componentProperty
value
_fieldOfView
focalLength
focusDistance
sensorSize
fStop
exposure
zRange
reverseZ
projectionDirection
filmOffset
scale
intensity
anamorphic
softness
radius
operator
filterQuality
maxKernelRadius
focusPoint
focusScale
temperature
tint
liftColor
liftOffset
gammaColor
gammaOffset
gainColor
gainOffset
contrast
saturation
aces
filmic
reihnard
rombindahouse
medium
high
maxIteration
threshold
thresholdSmoothness
colorFilter
useHighQuality
AllCases
RawValue
value
shouldLoadPrecompiledScripts
throwOnScriptLoadingFailure
skipScriptCompilation
isLoadingForAuthoring
loadBindingsMetadata
enableParallelDecoding
allowLoadingEffectFromTheFuture
prepareEntityManager
loadWarning
serializationContext
projectName
uuid
version
isExported
isVFX2
versionHistory
sceneFileName
rawValue
ArrayLiteralElement
Element
RawValue
sceneFilename
name
graph
inputID
inputIndex
outputID
outputIndex
nodes
edges
userInfo
node
RawValue
type
value
subgraph
device
depthStencilStates
lock
default
depthCompareFunction
isDepthWriteEnabled
frontFaceStencil
backFaceStencil
opaque
transparent
transparentStencilOverdraw
alwaysNoWrite
alwaysWrite
reversed
reversedNoWrite
stencilCompareFunction
stencilFailureOperation
depthFailureOperation
depthStencilPassOperation
readMask
writeMask
state
colorMap
normalMap
useInstanceColor
defaultMaterial
RawValue
_This
destroyEvents
newEvents
albedo
emissive
roughness
metalness
occlusion
normal
isRoughnessMetalnessPacked
isDoubleSided
intensity
texture
sampler
scaleBias
magFilter
minFilter
mipFilter
wrapS
wrapT
notMipmapped
nearest
linear
AllCases
RawValue
registry
libraries
normalizedValue
value
inverseLifetime
sdfData
center
halfSize
sphere
intensity
inverseMass
rateOverTime
burst
_emit
emit
RawValue
addFileRuntime
dirtySDFQuery
forceDoNotUploadQuery
source
threshold
downsampling
width
height
depth
buffer
texture
RawValue
composition
mode
intensity
affectsAlpha
value
ramp
time
constant
random
randomUniform
AllCases
userInfo
nodes
didPerformMutation
nodesByID
meshEntity
materialOverride
sortMode
partIndex
lodIndex
RawValue
flyKeys
forward
backward
left
right
cNavigation
configuration
inertiaScrollMode
panDeltas
rollDeltas
dollyDeltas
flyDeltas
turntableDeltas
worldUp
worldOrbitTarget
rotationSensitivity
dollySensitivity
panSensitivity
shiftMultiplier
flyVelocity
rotationMode
RawValue
roll
dolly
Turntable
AllCases
factor
directionAxis
yAxis
zAxis
AllCases
RawValue
allDirtyNamedAssets
name
assetTextures
extraAssetBundles
device
contents
comment
label
path
compute_function
threadgroup_size_is_multiple_of_thread_execution_width
max_total_threads_per_threadgroup
vertex_function
fragment_function
vertex_descriptor
input_primitive_topology
max_tessellation_factor
tessellation_factor_scale_enabled
tessellation_control_point_index_type
tessellation_factor_step_function
tessellation_output_winding_order
tessellation_partition_mode
max_vertex_amplification_count
rasterization_enabled
alpha_to_coverage_enabled
alpha_to_one_enabled
raster_sample_count
color_attachments
depth_attachment_pixel_format
stencil_attachment_pixel_format
descriptor
shaderCache
RawValue
pixel_format
write_mask
blending_enabled
alpha_blend_operation
rgb_blend_operation
destination_alpha_blend_factor
destination_rgb_blend_factor
source_alpha_blend_factor
source_rgb_blend_factor
stride
step_function
step_rate
buffer_index
offset
format
attributes
layouts
compute_pipelines
render_pipelines
paths
specialized_functions
libraries
pipelines
named_predicates
function
constant_values
storage
data
id_type
value_type
value
rgbOperation
alphaOperation
srcColor
dstColor
srcAlpha
dstAlpha
_writeMask
type
additionalArrayInputs
additionalArrayOutputs
RawValue
variations
maxSquaredDistances
resource
lastRange
lastLodIndex
model
material
visibleSquaredRange
stage
text
colorScheme
orange
yellow
green
blue
purple
pink
gray
device
renderer
numberOfFramesBeforePurge
unusedTextures
usedTextures
texture
unusedFrameCount
mode
xRange
yRange
zRange
legacyHalfSizeMultiplier
RawValue
classByClassHash
componentTypes
entityComponentTypes
classComponentTypes
packedComponentTypes
storageLayout
_componentsIndicesByID
familyIndex
familyHash
value
variant
format
rawValue
ArrayLiteralElement
Element
RawValue
fixed
ratio
update
radiance
irradiance
intensity
RawValue
RawValue
AllCases
instance
componentLayouts
nonPODComponentLayouts
PODComponentLayouts
storageStride
storageAlignment
maxEntityPerStorage
storageSize
entityIndicesOffsetInStorage
type
offsetInStorage
isPOD
storage
Element
Iterator
Index
SubSequence
Indices
storage
_result
buffer
length
offset
ABGR
vertex_main
fragment_main
emitter_update
particle_init
particle_update
?fff?
?fff?
?fff?
nearest
linear
clampToZero
clampToEdge
repeat
repeatMirror
local
world
scene
none
no mipmaps
nearest
linear
Opaque
Alpha
Additive
linear
radial
vortex
noise
turbulence
spring
magnetic
harmonic
drag
texture
Inside
Outside
Infinite
Sphere
Cone
Tube
None
Front
Back
ECS.Event
VFXCore.Target
Scale
metal#intrinsic
texture
scale
offset
color
condition
true
false
texture
asset#intrinsic
texture
colorRamp
color
index
state
power
duration
frequency
decay
angle
angle
angle
seed#hidden
viewport
include
exclude
color
depth
colorDescriptor
color
depth
keyCode
anticipate
midPoint
bounces
identifier
seed#hidden
range
hitTest
position
button
texture
exponent
colorRamp
descriptor
resolution
translation
rotation
scale
translation
rotation
scale
base#hidden
sizeFactor
width
height
depth
sample
descriptor
asset#intrinsic
color
normal
seed#hidden
size
eulerAngles
seed#hidden
radius
rotation
center
angleRadians
axis
angle
axisAngle
rotation
rotation
quaternion
quaternion
true
false
condition
color
sigma
color
identifier
delay
color
color
fromStart
fromEnd
toStart
toEnd
output
.DS_Store
.gitignore
.git
.DS_Store
.gitignore
.git
?fff?
?fff?
?fff?
vertex_main
fragment_main
position
normal
tangent
color
jointIndices
jointWeights
nearest
linear
particle_init
particle_update
emitterUpdate
emitter_update
particleInit
particle_init
particleUpdate
particle_update
emitter_update
flow#hidden
associatedtype
break
case
catch
class
continue
default
defer
deinit
else
enum
extension
fallthrough
false
fileprivate
func
guard
import
init
inout
internal
operator
precedencegroup
private
protocol
public
rethrows
repeat
return
self
Self
static
struct
subscript
super
switch
throw
throws
true
typealias
where
while
__FILE__
__LINE__
__COLUMN__
__FUNCTION__
__DSO_HANDLE__
inout
space
space
position
normal
color
tangent
name
name
space
address_mode
filter_mode
void *ptr
script_context
random_seed
particles
io.vertice.uv0
io.vertice.uv1
io.vertice.uv2
io.vertice.uv3
vtx.position
vtx.uv0
vtx.uv1
vtx.uv2
vtx.uv3
vtx.color
vtx.tangent
vtx.normal
out.color
builtin.crws()
camera_index
return io;
return out;
-std=c++17
{ NULL, NULL },
-Onone
-Osize
-Ofast
AddressMode
FilterMode
OPAQUE_COLOR
OPAQUE_DEPTH
LINEAR_DEPTH
DEPTH_MIPMAPPED
SHADOW_ATLAS
COMPOSITING
LENSBLUR
BLOOM
AUTHORING
AUTHORING_DEPTH
ALBEDO
NORMAL
EMISSIVE
DepthAsColor
DepthAsColor
brdfLut
brdfMap
irradiance
radiance
lightConstants
lightBuffer
clipping
vrrMap
script_context
lower_bound
upper_bound
<flow>
-Ofast
particleUpdate
emitter_update
emitter_update
vertex_main
fragment_main
vertex_main
fragment_main
particle_init
particle_init
particle_update
Math
Remap
Math
MixHLS
reuniforms
lightConstants
irradianceTex
radianceTex
brdfLUTTex
shadowMap
ModelController
ModelController
ModelController
ModelController
shape_type
needNormal
needTangent
maxBoneCount
Children
selectedCase
__category
CustomType=
visible
userData:
7> }#>
@(#)PROGRAM:VFX  PROJECT:vfx-184.0.16
w8>F
P?(~
 ?oK$>
8.>[
4==
L,?)|
[?5c
p>1]
?VI?c+
J?opX=
c?|aB?
Y?5b
)?1]
d>wJ
L,?Q
<1|@?
==wJ
r?c+
x>dt
Un=#
AJ>s
n8Qh
|>heQ=
w8>B
6?h 
:?i/
*?)x
>heQ=
zJ=jO
!?+,@;
@=jl
q?)x
h>@k
79h 
=heQ=
d?eMr;T
b?5c
M?-$
w);9
=VID?jl
;+,@;
>c+
<|aB?
=heQ=
i?Qh
??J6<
L,?h
nj?y
w);0
n?wJ
,>VI?
nj?)'
?opX={
$??J6<
>VI?
ky?T
P=?J6<S\U>(~
?1|@?
>?J6<
3?1|@?
>VID?9
=1|@?
AJ>p
4>h 
'?)x
rX;i
=VI?
=oK$>
3F?G
)=6x
t>5c
-?VID?[
zJ=-$
\<eMr;
)=)x
==opX=
C%?heQ=
p?CT
0?oK$>
>S\U>
>S\U>
7|aB?
b?1]
W?i/
<h{O<
s?5c
>opX=
l>"p
{?dt
[*<eMr;
?|aB?Z
(7??
>heQ=
Un=F
(?VI?
Q>YO
f=h{O<
z?>F
L>N*
=|aB?
S5?dt
?heQ=
<?wJ
E?CT
vj<YO
(7?$
;eMr;
#=1|@?5c
vj<oK$>
L,?i
G?5c
+?6x
B<5b
rX;6x
?+,@;
}?+,@;
u=5b
>oK$>
t?1]
zJ=6
|?jl
zJ=h
L,?O
!>5b
l>dt
?h{O<
?w?T
>S\U>
rX;eMr;h 
@=5c
zJ=Q
=+,@;
.?heQ=
5>5c
Y?S\U>
@>1|@?Z
b?-$
>f?y
?oK$>T
B?eMr;
)d?@k
>oK$>
R?VID?|
w8>f
>VID?
<VID?
0=N*
|6=-
*>6x
-?-$
[*<+
(7?S\U>
*?wJ
;>?J6<x
"Y>E
X>)|
>?J6<
;+,@;b
R:CT
w8>heQ=
 ??J6<
Z?c+
!?$
[?heQ=-
:?1]
f="p
(>6x
>h{O<
l?5c
!>"p
`?h{O<
vj<b
>opX=
=VI?
t?YO
P>VI?
>eMr;
>1|@?
l>|aB?
(?)|
>h{O<
L,?s
>?J6<
S5?b
 H?y
>S\U>
>1|@?p
r?|aB?
=oK$>
<VID?
T>@k
f?opX=
?VID?CT
N?h{O<
=+,@;
"Y>%
X?i/
t>heQ=
L?5b
F>wJ
4=)'
<>|aB?&
>oK$>
<opX=
>1|@?
>1|@?
P?heQ=G
>S\U>=
O?N*
.?6x
z?>Q
>h{O<E
Y?Qh
?w?+,@;
"Y>=
C%?\
:1|@?
>oK$>6x
"Y>(~
VI?
(?)|
>VI?Z
=?J6<
 H?T
[*<~
>h{O<Q
;S\U>
9?i/
rX;eMr;
<opX=
>?J6<
L>+,@;
:??J6<
d>YO
=1|@?
4?|aB?
S?)'
`=jl
>opX=
>VI?O
(?+,@;
>f?Q
5>eMr;
Z?$
4=?J6<
4=x
6S\U>$
ky?Qh
:opX=
?VID?opX=
t>opX=
<VI?`
'?)|
2?eMr;
1?c+
u?h{O<
<>+,@;
`>h{O<
?YO
#=YO
>S\U>
C%?C
H?VID?5c
K':`
8.>G
z?>oK$>
>?|aB?
C%?$
!?YO
?S\U>
79+,@;
8.>jl
'>5b
;oK$>
zJ=%
y?VI?
 >YO
AJ>V
4=O
'?$
ky?|
<VID?
\>eMr;
4?5b
?h{O<B
>|aB?
'?|aB?Z
7?eMr;2
t>Qh
K':VID?
x<dt
Q?jO
z?>9
D?D07@
MbP?
'N1;
fff?
?fff?fff?
L>fff?
i\)7.
blnOq
sy2-
i\)7.
blnOq
sy2-
q$?94M
94M?
)037
*3=C
DDDDI/4
VFX-SSAO
?qxs?
>333?
>fff?
+++!
 ,9NN
 ,9NN
333?333?333?
fff?
>333?
fff?
fff?
>333?
?fff?333?
HNTZ
 &,28?EL
 '.5<
2(BE(
?fff?fff?fff?
L=fff?
'2-22
?333333
333?
333?
333?
!$'*-036
VFX-Depth-Linear
UUUUUU
tWxCE
8?Sx
zD@(
%)-26
)3=sBFPU_i
lorux
=@CF
ILORU
dgjm
5BUe--------
---------
!!!!!!!!!!!!!
!$'*-0000:=@CSV
KTX 11
'7(knN
$4IUamy
$.;ER\f
&0=GT^h
UUUUUU
VFX-Floor-color
VFX-Floor-depth
?BxM@
?A.}?
\\CR+
?b]\BR+
!BR+
?rF\AR+
;A9)
!A '
,>I
u^@Jb
?p[M@8g
g&X=b
!!J=
fl(=7
)z =;
?pA6
7R6<<
yj?%
Mh?Z
#=;
xC%]
/A%]
|@%]
/@%]
|?5]
P?%]
/?%]
?hQ;A6
@!@F
g>h]
@>1^
?@%@!:D
?#,*
 {}=
u?|`G
#q<A
?`vo?
lI<U
nj?v
?MMf?
b?0b
~?cC[Cw
B[Bw
!A@
~?op
/[A^
~?lh
~?vl]@\U
L@e4
ywt>n
W'7>
!\!>
n=9{
?o*r?
?^Lo?
JDx<4
y;B<
5h?'
CGv}?
DCGv}?
DBGv}?
AGv}?
DAGv}?g*
@Gv}?QNZBC
@Gv}?Mc BC
@Gv}?/
D@Gv}?
@Gv}?v(
?Wv}?+
?Wv}?
?Wv}?
?hv}?
I Ae
?hv}?
_~_?yv}?
v}?oG
-?!w}?
y}?%x
w}??+
x}?T
=@)>
-AV>
SXI>
~?g|
>k+~?
>S@~?
?MKl
cCw=
K;5=
?sex?X
l? Aq
?6;j?
4f?}
?2td?
|?V4
|?^;
|?AM
+nA@
|?WF
|?:&
X?A|?
-?75|?D4
|?(`[@
.@u:
>hA|?
>-y|?
B[^>
}?m6
0>l$}?,
&>9G}?B
~?[C
=G;~?
=Qg~?
R||=eR
?SYl?
?Igd?
58D@Pz?\
C@Pz?q
B@Pz?
B@Pz?%
A@Pz?
-;A@Pz?
A@Pz?%b
@@Pz?
@@Pz?9
og@PPz?
&;@PPz?
@aPz?
@rPz?
Pz?+
?]Qz?
f?d[z?0v
lz?@
?XVz?
\z?.
?*pz?:wI@
:@s,
-@:"
z??T"@C
}_>I
{?=H
.8S>
<>^K|?
>&8}?
w}?@
j~?%Z
?!g
~?kI
?!;{?
8ho=
?G=t?2
n?Dj
?> l?
g?C9Q
f?hz
Rd?r7
Gx?f
Gx?<
t3@(Hx?
@IHx?
@kHx?^
Hx?3
Ix?k
Lx?r
?%\x?
A*q?e
G<5?DQx?
%?:[x?
cX@m
yx?\
x?K?9@G
>,ay?
>Y3z?
pz?c
tg>[
5^Z>e
M>=H{?
{?6!
=|?gC
|?4f
&~?A
=&m~?
~?F#w?~
?K:n?
?5Ad?;
u?nK
u?jP
RH+A
@#fF
u?za
Bv?{I
w?ZJv?W\
%a?a5v?c
v?%$i@9
<v?\
?J]v?
@xC:
v?eT@
>q<w?Zg
?c^'
%x?k
>lvx?
OZx>
~y?l
y??p
/3\>RHz?
A>2 {?
%\(>T
>#h|?mX
}?%]
~?Xps?
N&n=
?Swi?
Rs?h
jV?B
Rs?Z
BB%^
Ss?i
@.Ss?
AG ^
@PSs?
cyAv
IG?@
"@~Ts?
x}@
Us?y
@S@Z
\{?L
f@:w[
}s?ccT@L
N|A?%
`s2?_
s?h!)@b
@x*P
Ht?3
>`tu?E
>F}v?
>Ww?
y?m7
XVJ>
CU<>w
.>t}{?
=`=~?
m?zq"
`=0f
@k?`
,,8=W
?W]g?
e?UlL
ip?Q
ip?@
ip?u
@]jp?
R@Hkp?n^0Aj
@t|t
?Cpp?28
?Oyp?
p?{ 
p?A+d@W[q
,aU?
A@pCl
5$6?8,q?/3'@v
q?hz
q?dw
?)#r?$
qr?_
>yxs?bJ
?`ZD
t?F
du?p
5]_>
|z?J
Q|?v
|?t}?K
u?ZI
=tD~?
o?y\T
j?tF
?_%g?
?1{e?
cb? 
8m?Y
8m?`WLC
8m?n
A"9m?H
@u9m?
9m?a
@`:m?
;m?s
;m?Z
(@2=m?
>m?W
@-Bm?
?/Qm?
m?p\?@m
n?[|
?9}m
o?((
?SXi
p?*W
>)uq?
?1|4
>zru?
8v?h
w?;8
YR>shy?
>[@|?
u?>y
}?WCr?
l?->E
}X/=V
?8Ke?
r%<n
?RDb?
WICz5
6lxB;
VIB+4
oAt'
~+A7
?(Fj?a
?GVj?pP
?gCj?
aL@jk
<@#J
"@Y5
9?Idk?
?T:l?
?*ow
n?G9
?\tR
?uv2
av?I+
Sw?E
>x?f
9aR>
f11>
L|?l
x?B\
~?${l?v
~?ZJj?
|r=II
?l[h?
J='
e?p_
?B%b?j
f?q&FC
f?;!FB2
f?>{
M*@'
@EKf?
}f?M
f?d>I@
9@oF
[,@U
if?yYg?F\ @
jG?]
Hh?9
?-|i?
?[j?
?9*w
m?]1
n?=c
?FzQ
s?C7
?C86
6u>?
y?1~
y?Q/
"5->
w|?r
=$)}?
q?pa
=/P~?n
l?mTg
?vmc?
t@PA
BA7o
N5@2
@Zeb?1
E@2:
?v7c?<
&ru?K
$:?f
e?]R
ze?|+
f?bg
?;og?
?J)h?
>@jo?
?jL8
Mhr>7
9>%$z?
{?gdt?
q}?,En?
k?Q/x
\=bf
Gc?*
]?t`BL
a_\A
]?$ZcA
F\@C
@K>^?
@Mh^?
MB@HO
5_?<
&@>=
o`?\
M/E?
$?!;c?B
k?jK
?6!-
u?dv
2x?b
E>Yy?
pz?yxw?n
>]O|?
Yk?_
g~?8,i?
~?.Wg?H5,
duk=
rQ-=
?fld?-z
`"^<
a?RI
_Y?{
_Y?=:;C
1B `Y?,
A1`Y?:8;B
LA$cY?
gY?A1;A
g@zrY?
&Z?C~
?gCZ?U3v@
Z?vo>@
,0@v
[#@0
?BZ[?d 
S[~?{
[?h$
W\?~V
O?t]?
ByC?
&8?)
?[^y
j?% 
?g|o
>Zl?Q
>74q?0d
?H67
O |>
e>37w?/
 B<>
v?|(
{?8gp?
y=i:
?>xe?
L8=y
17C0
T?]+7B-
T?O=
hU?i
@V?of:@
W?h^
Z?p]Y?
Ig,?
?! _?
a?of
>]Oh?
uo?y
?w1M
0s><2v?
dx\>
Cz? $s?k
>Va{?
<}?_
`h?L8t
c? 
?->a?Z
9()
O?+X
2B6"
N}Al
O?)}
O?~{
&8}@l
P?{i
nQ?]
E@d\
^R?9
S?R&
AV?l
U?)"
y J?
*?Q1Z?
?5}^?
a?l\
? }c
`s?_B
>u"u?{/~?
gh>"
Q>(Hx??Tv?
l?%t
|?o.j?@
=Sz~?
8f?\TK
d?2r
M= y
^b?(
J?<t
hnID0
hICA
J?Gp{B
J?Qg{A
J?PE
hK?3
R@9^
?(,M?
?_AN?{
4G?|
dY?,F
?OYm
?:ZE
N~[>
az?4/o?
Pl?]
=&R~?5
O!W=<k
E6rE?
cPDGrE?ER
`PCGrE?
BXrE?
w_PB
sE?<
vE?}(
yE?|
A(}E?
`JAk
dF?$Q
`@80
?8.G?
?%xG?
G?aR-@cc
H?nR
?kfI?'i
K?;R
L?u;
N?|`O?
@R?0
i6'?
b? )
>)wg?k
Al?Gq
n?)_
t?T5y?&W!
voe>g
v?6ru?HR
]x?8
>j.{?
S}?G:g?
=R)~?wge?
a%C}
@?'(nB
@?N!nA
Ap>
@[%@?
@y<A?
<B?@
6@5z
?`WC?Y
?{gD?
?VHE?
o~?2ZG?
xCb?
&V?x
\?I
>jKe?z
>t~j?
do?@
q?F"|?it7
<>TTy?
3%>i
j=3N
RcEd
E8e:?
\D8e:?+
\CIe:?
BZe:?Q
e:?1&gB`
B4f:?
AAg:?7
i:?q
k:?3
o:?D.gA
t:?;
|:?l
U{@I
S;?+O
#@p"
>?31
?`;@?l=
?ULA?'J
? zB?
ui?!"E?~S
Q?l!H?M
o/=?
N?OW
TP?Z
>A+`?
>,gk?l?
GD>`
Zz?Q
~?;5c?
?m6b?
_?RI
_\ESX
 bC'
4?!N
4?\*9A
763@&
 @9'6?
PM@.
?|d7?
f8?!u
8?l[
>?pA
bJp?
i@?q
c}'?
'O?9
W?Aa
q?oHw?l@4
J&g>jNv?n
K>}<x?
|m?~
.?XY
.?\E
%p6A
%3AP
.??G
.??D
i/?)
iog@m
K!M@
yy$@\r0?
J1?R
W2?/
5?Bz
d=?;4
S?jKA?O
$?;pN?
tQ?P
e?*o
?-@{
>h"h?Z
>b,k?
p?+lv?
%8>c{y?
4j?*
`e?m
=-|}?
=Dj~?UOb?-]A
?W]_?{i
LkDY
h%kB
SQBY
UQAHm
-A~Q
(?/b
@g))?
s:@l>*?
GS@7
j0?s
1B|?b
LTc?
:?` 
<KD?
?`#U?
X?1C
>f.\?/
_?5$
>o)c?
f?mU~?
r?l>.
=XS}?
=sL~?]
,`?;
FEen
yA9B
"?q"A
@_)#?
zz@)
f=@wI$?7Pa@
JF*@Y
J)?lC
?5+?Ve
?aq,?
h?t%6?M
o??9
/6?&9D?
z$?4
?/PR?9
Y?>{
]?/0
Ph?]Qz?
x?\;i?d
=[$}?
ia?{JN
oAMe
o Ak,
?@cD
2@@L
A#@:
@zo ?f
?o+!?
$?c+
?g'?
PnW?
:?,}@?
W?~5
>W|[?
d{?J
>sLj?
p?9Cq?hA8
9J>K!x?
!f?d
c?jP
|?)#b?
?Mg_?
E^?A
>tD;:
+UtC~:
LtB6;
S:Be
LKtA=I
AA&R
?)]:AO
,Y@2
A@T6
-`.@
?,b ?
}#?J
%?S]
}?X;*?
rq?0
('f?
~s[?,
2?8e
cY?<
>2wa?H
y?O=
>gce?
o>aUu?
>9`{?
c`?g,Z
rSC=M
c\Ap
eyBA
?Sxx@
$@-w
"?>>
`%?y
-(?V
K_? _.?k
uwU?
Q9?v
=?c_
y\0?
?W^N?z6
z}?n
OW?p
y?lC
_?Z)x?
c?@1v?*
8t?+
o?FDA
*u>~
U>;5w?
g7>uXy?^
e?Zb
> ${?
_?F&`
H=J{
^?!w
p]?()
=_wC%
|^wB!
*BBC
n?:
x?9{#?h
E?$c5?rS
GG?(
L|?
z?/j
Jy?D
>dvb?
s?KXk
gj??6q?
8q?K[l?
2V{>w.t?
{d?(
z?wKb?
^?>v
M=%t
?Y) E
?7I~C
xCM1
@~B2
wB{2
?7H~A
CAeR
b@'P
J@sf
i8E@
5%@)Z
p?="?Eh
3nR?*
-6?`
:?nR}?GU
D?%yz?p_
BN?4
S?(*w?fO
>UPe?K
>;Vi?
Sv?;pf?
>8H|?
^?Xtk
>tBs@
W@81
Hj1@
?o~?
ms?y
p$L?DO.?j
Qz?z
Pu?b
q?ZI
>QNh?
8l?_
m?1&M
xze>
2D>%Xx?
|{W=ge
hUwCj
eBEF
ZswB*
PcwA
a5A%
isCA
t\@'
>yW7@
"1@V
$D @D
wk?6r
#s?N
)O?*:r?
j?wI<
|r?q
g?Kw'
i>;qu?
Re?>
)>A-z?rm`?
?^f\?d>
z[?8
O9()
aYDq
#RvD
>Z7YC
aUw@B'
>.:B@
-@3k
D@0g
j0@s
}?:A
l#Z?<
C=Q?
e'?m
#H?hw,?
p?Ec
8.??U
KY6?
T5-?
k<?F
W?\Xo?_^
n?}=
j?HQk?BxT
hn?,Fi?
g?NE*
P}?p
\?i7z
Z?0e
TtDT
v]tC
MtB!
%@/@
?kz?5
?(~?
r?|c
?vnn?
RS?}
$?"6l?
q=J?@M)?B>l?
{8?cF4?
Hm?D
m?x^
?R_V?_|m?
i?TWj?
^q?@Pf?,F-
c?|E
bw?vka?&W
{?5@]?\
[?O?(
d=HQ
?4/[?
Rq?{O
z?B|?
#k?Y5
q?s*
[i?0d
g?d!
?Ich? D
^?LT
Fg?`!
iL?6;&?
Cg?@
DNC?
1?{gh?
1?$|7?S
x(?5c=?!
?bfC?
j?B$
/k?M
?;TO?p[k?
xk?6
z_?m
k?+m
>qVd?
 j?>
PS>(
y?qs^?-
>R}{?
`~?c
Z?AD*
4Cro
GlAPT
4A[B
>S>O@l
Yjp@
>r4"@2
>@S@
>h=l?
e?h$
B#|?YL
gr?6<
h?gb
V?;q
]c?UN
T:<?1(/?j
Gt3?
e?pB
K;?K
`A?%
tc?X
>\!h?-
hb?t
>2V{?=
.Z?3O.
u*kD}x
kC%y
%AR@
DN)@p?
z?,
>o-c?
]?I,
U4j?/
[?('
>vO?
M ?Ii^?
G?tz&?
t_?z
`?]5
c?AJ
E?/5f?R
Ig?g
?k'R?i
{]?k-h?
Y~>Xps?
[Y>$
\?#1
>b,{?W
=kF~?
mY?xE0
o=%>
?)$Y?
TX?Ug59
fD5y
fCcz
v?j.
#]?S
>2!V?-
U?. 
B$k?
Ib?@
4X?+
?H?
??_\*?
v6?P
f7?3
V?||f?
>k?]
>O[o?Fc?
S9>m
{?l]Z?
Psr=
0bD[
Q5bCE
>A`>
oH5@
qW#@-
O?7Q
?&rQ?o
<S?g
B!R?
?`#U?
[?p%
_?Af
B?t\a?
2I? 
c?[C
[?*7e?
PS;>
[?Sw
z?d\Y?1
|?2>X?: 
)~?o
\D76
\C"7
N~.A
M@hu
^@lZ
~;1@<
>34z?
d?%\
vH?k
?tzJ?
4/S?
U?ys
lA?k*_?Q2
H?x
T?,cc?
d?Qkz
^r?F
uw=>}zx?
YW?#
<x=0,
U?M.F9{i
VA9c
y#@r
Tqv@
4Y@:x
@?[#
{?XW
A?IG
?~9G?$
I?zQ
S?PQ
+kK?
?vmO?s
#?_\R?
W?nl
Z?ca
uM?v
`?Xq
c_?[
d?8Nb?(Ig
ta?p]Q
>D0n?
c>:yu?
[?9G
|?_{V?>
E28j>.
.PD28j>
apPC
:j>(
B.=j>
Ej>9
OlPAc
q@[]
y;@u
r?J_
>?UY?
W8?*T
>Zg8?
>Eg9?
;?0G
g|k?
c?Jb
!B?Q
\!\?4
IcT?
1?KW0?n
>?hyZ?
Ga?w
#d?^+a?
k`?v
e>NFu?
/x?^
vU?*
|=h#
T?w,
nIDK U>
pICd"U>
kIBs.U>
A2uW>er[@
[>%\
G`>l
 L@;9c>
?_\z>
o?t~
3?/k
P1?:
3?,+
5?29
Dc?q8
@?s-
-CD?
+O?Qi
.?=IR?
rQ)?cD6?
U?x%
*?5
?EGR?
9^?/
T^?Z
_?R(k
Xm?8
>|}q?%
u?B{Y?4
x?]5W?
q|?{gT?
#|Dg&
Am:B>
@cGC>
jD>[#'@
7_@F`L>$
@>%W>
1k?1
C?6t
>*o'?
'?p}
>+Q*?T
d,?Z
2?[&
H5?e
5`T?
?of@?
?)<D?
nH?D
><?t`%?
9E3?
O?we
O=*?M
l<? 
Z?ip
>Qjc?hu^?Uik
]?P9V
 >{iz?
T?X7
g|?tbS?
R?y]
EG8->
=->Q
:B|G->
]->~O
:AI+.>
2@tb
1>8J
@"U4>
Su@l
2WV@
>9>b
Dm(@
@>Ig
?bhU>
G?qq
? cn>h
>h[)?:
M1o?}<
S?yv
<?<2
@L? 
*?_~3?
1\!?
;;?O
S?v3
cW?(H\?>
w]?b
c?W@]?
>*8h?
AE>K
&">WCz?
>Oy@@
j@36$>|
K>3Q,?
?Dku>x
I*{?2W
cat?q
>"U$?W
+?*o
4?oI
R?kH?tA9?
uYD?H
?I+B?
"?7RF?
8*?V
T?J@
?9)P?nRY?
[?-@k
>v6|?
eP?Z
@D% 
3z\A
Y*@%
@4C@
!u?`
|!>O
J?(c
:?.q
 Z> 
?-!
1l?=G
~#?1\
e?4f
6#_?
$1?.
?(|:?
?d:H?
?$aO?
Z?h\
X?X:?
j>k~t?a
3E>J
>^0|?
}?_DO?
O?u"
?:>N?
*-D&
b^PA,
=x%8@[_
t@DN
>o/q?
>kcX?Pn
>EID?vq
?nn,>
YY>m
?1h>
Vx>kD
JEW?b
-?,~
P?*p
2?kJ
7?Kr
?6\<?
);?K
H63?-])?.UE?
U"?{k8?
P?<J
X?dxl
>wig?TUX?
p?YnU?
aE>
O?>>
lN?G
L?0b
LIBB
=>iIA`
CA,
|,?p"
\>B%
Zy?w
?. 
-\?1#
?^g/?F
`H?j
lA?y
C?B`
M?T6T?
ra?kdW?k
.T?4
'P?FA
>S>|?u"M?
L?B@>
4L?H
FK?I
+Ce6
l,B\8
=Fu,Az5
AOy
{@q9
]4:@i
2L?u
?Nd&>
mb>2
?&nu>
Hkp?
>io?/
o`?1
]Z?ZF
HkT?
TVG?
!Y@?%v
mE?5'
?;9G?
(p?a
F>h]w?@
5|?:\K?
*gA
F]G@
E?Cs
?y=(>Re
?f3G>D
}?Tt
%h?i
bL?!
[?1T?+
S?BxD
@kn>
BO?@
iy=y;
Bmuy=)
@Y@x_u
TAFx{=
~=y;
>RF|
->lv
x?I,
j?`>
`?Di
[?XU
N)W?
?j4!?/
?~T'?
-?Yl
=?8j
RH6?N
8?>]
$G&?j
wA?9
,I?&
[L?;
[?-&R?
>]Ra?
>_@k?*VQ?
hs?J
qG>V
H?tB
G?K;
B['^
Ao.^
@b-^
AR(K=
K=ur.@
~?YR^
S?Tr^
r'@5
>Lkc
>LRi
]}?W
^>_$
]x?C
s?5}
o?@j
2^?B%
I?2Y
*?x(
W0?[
e??'
^G?$
?6!I?
{V?s
(b?^
)p?k(M?L
s?!VK?
}?cAE?J
Q*+BH
9!=~
5<wA
n+Amp"=
/$=^
Z&=S
F~y@
?O@w
>whH
>gDI
>\WL
?O#m=
>>\R
>c'\
{?Z)D>
v?LmY>
zpo?
g?2u
`? `
[?EH
":?t
]o+?
v8?4
u=?rp
I?3QH?z
b?7qN?
L?3P9
B>rjw?u?G?
+4 >J
%D?wh
mB?6[
QA?:
o@VJ/
@0,/
?n1/
?I=D
>]P?
>XtK
Pq?XrU>V
g?rR
c?}x
?{K
O?*6
bK?O<
, ?{
C??H
L8?~
,?p|
1?LU"?
/1?-
B?$BC?
-J?g}F?
!Q?|
Tm?k
gq?~
>Vfz?
=Ed|?
B?,G
0@W'
2?RG
w>A(
?S[*=
-c>n
=&Se>
>3Qd
;p~?
iWy?
;h?6
e?y 
M?5}
\;I?h
vo=?
\6?
*?vl4?
N ?EJ3?g
?RC;?
=?GW
gJ?taD?
>DoQ?
c?K>J?
m?<OH?
q?p{F?0
\>h[u?
9>GTx?
?.v;?
X}<`
X}<6t
3tA{2
<pB]?
<|ds>
&=`t9>
<>_%
I>W`8
<fx?
Xt?YN
Y?((
]oS?a
E?!#
54?U4
q-?SB
<^?%
H?XSY
tY>r
u?9bA?
75>n
z?Mj<?
};?8.c
=1_~?
[Z=Ee
r"<*
I$DB
#<@1
8G? $
@>"&<
f:<b1
!F<bIY>82
?,go<
.=nm!>
(>HR"
<X>K
=zpg>
|Eg?
=Umw>k
b?SA%>7m
Q>IM
M.2?
P,?#
"?-!+?.r
4?V,
[;?,a9?=C
XJ?f2@?
EQ?1
FE?}
h?h=D?L
B?Bv.
su?9
<?vp
1>Pqx?g
z?`x9?
|?tF8?
7?wf
5?9&
tR:D
6)<G
I<RF
E}?*
k#=y
mD=y
+>dw1
d?LP
Q1b?
{;>G
P4W?
-@W?
lCU?
<jT?d
<?d\
)!0?
tD*?
6?'1
=?=I
??n2
>QfW?.
A?dx\
>D5m?
Z=?G
(S>k
|?}v4?
=b1~?}
 1?E
_#'C)
AE/#;
8R>u
%L;s
GI<R
?rk?
&U? 
 :>%>G
PnS?6Y
$T?I
v7S?
Q?29U>.
S?g{
K?0e
6wH?
j.?=
 ? &
&?S!
2?Tq/?
:?14?
B?:>6?
?^JI?
=?sK
Rb?*
(8?MM"
S6?q
3>/jw?
74? 
2?p[
+?=C
rSyC
#:g&,@
@@QY:\
hxw?
8$=N
kGm?%
_=~p~
_\^?
jhS?
N?F_
. =%Z
$^J?r
C=gG
1[J?`:
(eJ?
^*J?
=By?>
>UMP>
*>1xx>j
!L?e
zpK?
/A?5
B/?\Y
2'?H
1?TU
?{0A?6;2?
.9?N
x8?4
f[?>
>7?N
mf?i
>_)k?Z
}>p_o?
zX>W#s?F
7>[av?
,?em
=PS{?
;.VT
t?zl
<O<'
/4o?
;RcB=
T=nl
1?5_
+k3?
p=xC
1??S
8?d[
MI:?
F<?z
,>Ovc>7
KY>?
Z>|B
@?Ab
e??.
98?G
,4?Q
0?EG
"?Id
*?o-
?(G9?
?/N@?
|_?*
.?~tZ
ji?z
1*?'
Z>V~q?.u0?
u?->)?
+|?iR"?F?
Pr@_\z?
?BxM@m
>@,dv?
@(Gq?
?=ae?
?8hC?
?%#3?
?A.}?
r?9B
j?}[
Vh?L
d?fk
h\AX
Pr@d[z?
?5|M@
1@'1t?
?D0R?
?tM?
?w0>?
?#/3?
?5Dy?Q
r?9B
d?;m
?6}\B
k\Ai
@/Pn?
?5~M?
?u"}?p
Cy?T
?3Qh?:"
i\A&
@D2|?
Pr@zRz?
?cDb?
?YnM?
??:y?7
yj?B
?\}\B
@cc~?
@Xs|?
?XSM?
?! 3?
?o/y?
o?GX
?Xuj?
?gEh?|{
If?'
@p&~?
Tr@\>z?
?]NM?
?seH?
?8j-?
u?kG
>h?E
?ud?
?-h\A~
@fN{?
@t~z?
@<ln?
?K>b?
?u[V?
?fg-?
|?I.
?}]r?
vo? 
?M0h?
6f?&
?/md?
@Xuz?
?<k1@
@3lp?
@oEn?
?>"b?
?Qg^?
y?Gs
?!Wj?d
?Z+f?[{
?>Zd?
?'hr@
?<g1@
@/Rp?
?*Re?
?"S^?
?>$H?
?vl8?
xu?M
Hr?3
?[`o?-|
Lj?3
?"m1@Z
?Y3Z?
?-Ar?
?9Bj?
?Fe\A
j1@D
@JDp?
@AGk?
@{kh?
?$%e?
?|D8?
x?Y
d?ys
?Kg\A
@%\|?
>@l>v?
@L8p?
?V~a?
cu?U3
?4,r?!
?}#j?
g?t~
?Lf\A
@-y|?
?>%_@
M@~ow?
?>]a?
?x_=?
?_au?G
?p}l?
j?QN
?S%b?
f\AL
@!V{?
+_@9Dx?
M@cGw?
? }%@
@y"p?
?{hG?
?h^B?
?i8=?
?du'?
a?"r
@nR}?
`r@s
?o/_@
`1@E.t?
?c{%@
?&4Y?
?%g\A
?kf1@+
@1_j?
@HQg?
?<k'?
r?DR
o?(}
ue?b
?,~c?
?he\AI
@lZ}?
@sG{?
_@R+x?
>@p]u?
n1@<
?}y%@O
@B@j?
?P92?
?[`'?
|?>Y
?ZGu?
?zSe?S
?iUc?
ra?RI
?3e\A
@<L{?
^@S>x?
?!#N@
?1x%@y
?(d7?
?z9?
?rMu?B
n?9&
i?_y
Rg?U
?Dh\A
@UK~?
?6u%@'jq?
?&o?
?Hh\A
@=E~?
@0K{?
N@GZv?
?2r1@0
?A+<?
?CV'?
y?$b
Fu?Ho
ii?0
?:i\A
@S<~?
@%=|?
@ZE{?
?@uYt?
?>z1@
?>y%@
@HNf?
?{2_?
?]m}?
?t&y?
?1Eu?
?mVi?y
`?#,
~\B7
h\A5
@hB{?
~%@C
@Efn?
?/1J?
?+Ny?
?kfu?bL
n?,D
?w1i?
f?GX
?}v\C
@j/~?
@{2{?
%@r3p?
?~Qb?
}?hx
?Miy?
n?hw
i?Ym
?~~\C
?]~\B
?9}^@#Ix?
>@>$t?
@ywh?
@Ife?
?dvV?
?N*N?
?e6@?
?Sw1?
1~?K
ju?~r
?<hf?
?Ti\A
@S!~?
M@;Uv?
%@~so?
?Y6;?
?c_6?
?Nc'?
y?1$
n?p%
h?cd
?l>f?
?5]_?
?Kh\A
@wj~?
@[^}?
?Sv^@
v1@w
z?_$
?~pn?`
?ock?
h\A!
?is^@`
?Na1@
@YPl?
?cdY?
?E.D?
?sI1?
Mz?Y
u?O?
?MLk?
?YQc?(
^?r3
|\BL
"At^
@5{|?
q@"9y?
s^@0
?ur%@
@XWi?
?QO??
?Tp,?
?K>n?
?!>h?
e?)#
?)B^?
?@~\C
?F~\B;
"AB?
@}[|?
@tb{?
?+k^@
~M@D
91@} q?
?R`%@
?x`P?
?,.n?[y
h?Ig
?UM`?
?${\B
h\A+
?Pr^@.Sw?
}M@0
?pw>@'ls?
?nM%@
@I-h?
@nme?
@/ob?
?&6_?
?+kG?
?)z,?
Ov?-
n?%]
?+m]?
@R~~?
@;m}?
?Sw^@j
>@S s?
!1@;
?G9%@3
?H2[?
?@1:?
? &1?
?|{#?
Rv?/
d?is
?jg\A
q@1]x?
?e5%@|
?b0S?
?gG>?
?;71?
?+5{?^
v?#2
m?LT
?huj?B
jd?w
|\B?
i\A>
!"A,
@.:}?
@1{y?
^@mpv?
?}x>@
?d"%@
@?9j?
?$^V?
?4L1?
?Bx(?
Ha?8f
;A33
@LO|?
?&8Y?
?B!R?
?HRN?
?;QF?
?1`1?
{?Qk
`?O 
?_z[?
?&p\AN
@C7{?
@p&z?
r@XYw?
@% f?
?t{5?
?px1?
?dsm?
?XYc?>
?Sx`?
?s~\B3
%"Ai
@#g}?
?#2r@
@k'b?
?B]T?
?%<!?
?1\m?
?Bwi?P
/]?g}
?{JZ?
?("A
A|e~?
@xD}?
@=(x?
Lr@%
%@@jk?
?8HP?
~\B7
+"As
AbL~?
@Hp{?
M@$Gr?
!1@G
?BBL?
?`".?
?]Q*?
Oe?%Y
^?+j
?6H\C
@;9w?
>@|`o?
%@@1j?
?J|2?
?Xo|?
v?u
?Hkh?s
?2wa?fJ
?AJX?_
0"AU
@oe}?
?_D_@
$@}ui?
?`>A?
?.=:?
?%>/?
? }+?
?nn ?
q?~6
l?5y
?[x\C
?X:"A
@Gt{?
?.u_@
?[A1@
l?\8
?2p\C
?3 <A
@82w?
?AGN@Dio?
?P:1@
}|?)
v?D5
.g?9|
?5Fc?
2Y?X
?2}\B
?)%<A
?3["A
3%@Y
@T8^?
?JE'?
f?`u
]X?c{
?>0<A.s~?
AY0}?
@%X|?
@tyw?
M%@.
@xFc?
@Ae`?
@BzZ?
?W"T?
?2!>?
?=H;?
?h#/?
?]7%?
x|? ]
Bf?D
b?e7
H^?~
D<Aj/~?
r"AV
@(cx?
?p>?@
?'l%@
@&Vb?
??sJ?
?NDG?
?J{#?
}|?73
?Iiv?
?Crj?/R?
"ANa}?
@N+y?
?J`?@
1@uvf?
@2Xa?
?<j(?
?8/v?S
d??n
z`?Z-
Q?`X
h<AT
Ad>|?
#t@/
N@b-j?
1@AIe?
@%][?
?:>V?
?MLK?
?^fH?
u?ip
?Umo?
qT?SX
?i~\B
]A_&~?
@REy?
`@.8k?
?&4&@
@k`_?
?l|N?
?*tF?
?x(>?
?q9&?
?S?#?
{?k(
?:WdE
?3s[C
?|0]A
AxB{?
@yx?
?t}t@l!l?
?uUO@
@o,\?
?B!J?
?'3b?$
h\BJ
`@$Eh?
}O@;
?^i@@
@KuY?
?`sF?
?oK<?
?;n4?
?k2?
?WB{?
?x%m?
?uXa?S
OX?|
L?i5
.\C~
?fV\B
?Ac]Ac`}?
@:Wx?
O@Wwd?
?G!@
?t)R?
?<KP?
?8eN?
?o~C?
?NC4?
{?&r%?
9`?R~
g[?a
?v3O?
|\BL
?Wj#Aw
@K9w?
tA@'
~4@h
@!@Z?
?2uC?
?rN<?
?H27?
?I0-?
?t(s?A
k?^c#?
M?]5
I?Ul
?hG)E
A7n}?
]A@i|?
?hU=A
@W_q?
?urQ@
?<g??
?9}5?
?TSr?
?]kc?ob$?
O?cD
=Aq=z?
@IHt?
@kdo?
@ Dj?
?Iev@
C@,d^?
?[y!@!
?Yn9?
?40R?;
I?l@
?4~^B
?f0"B
Ak+~?
?aP$A/
@erj?
E@W_]?
-@Wx[?
s#@2
@?6Y?
?%?V?
?SXU?
?O@O?
?]jH?
?9cD?
?1x`?k
DP?M
?r."BS
A}\{?
@-#m?
?eU;@k
?P8W?
?${D?
?[@@?
?(av?:u9?
]X?[
?|FN?
E?U4&?
?|CA?
\B$a
?]OY@*
?Lm3@
@HRZ?
?lAW?
?aPV?
?kGI?
?0fC?
}?2XA?
t?X:??
?zlG?
A&5|?
AhAx?
?H1`A&
?]}?A
?qV%A
@Wzi?
@HPd?
@UN_?
@u[^?
?]jB@9
?BB\?
?@j[?
?=eQ?
r?LqE?
i?x|C?
S?,e=?
N?EJ;?
H?l$9?
?;nD?
?-z;?
?&|!B
A5`x?
?qN%A
A=bh?
?!\r@s
?-]T@
rG@{
;@7R^?
?-@1@
?V~]?
?J%\?
dJ?~9C?
E?XWA?
Au:x?
?Rf%A
@^I^?
i@]P_?
?\qa?
?a3\?
rR?C
?R'L?f-M?
=?TtH?
u8?>
3?V-E?
?gtdB
O@AZ
@6V^?
@R}_?
r@t)b?
?_@V@
R)@U
@)ye?
@;me?
?B'd?
=?%YS?
"/?yxO?
G^Cc
AKYf?
KdAZc`?
,AF}^?
@`ta?
@sHf?
1o@r
F@y=h?
@M/i?
@EHi?
@zSi?
@@Qi?
?cAi?
?l$i?
?P7h?
?X f?
?w.|?
?0.q?C
?r1Z?T
R?F\`?
?(|J?
63?r3\?
?OgyCi
@l&g?
?T9P@
9@I,m?
@xzm?
?4gm?
?P:m?
?5*l?
?H5x?7mj?
?y"`?5
V?CXi?
?G!M?
>?t#h?
`2?JEg?
 "?~
?+l1B.
sC0*m?
?\:iA
A0.q?
?]F+ADPq?
AUgq?
?8fs@_
?Ii'@
av?'
N?p|q?
D?Jyq?
?]66?
?zS1?Doq?
?p}$?
?Adq?
?c`q?
lF~?33s?
).36;>F
@----
ARGB
AfGR
v024
v024
J0J>
 ,9NN
FF!(
Y^hw}
u<333?
>$9Y>{
.?)\
);M^hr
$(-/--27=
;?Dn
'2,/
 $(,048<@DHZ^Sc
S@,*
ThrottledInvocation
Parameter
TimeThrottledInvocation
MTLColorWriteMask
MTLPrimitiveTopologyClass
RGTextureReferenceDescriptor
CVDisplayLink
NCVDisplayLinkRef
MTLVertexFormat
OSLogType
Nos_log_type_t
CFRunLoopSource
NCFRunLoopSourceRef
CFRunLoop
NCFRunLoopRef
_opaque_pthread_t
simd_float4x4
MTLDepthClipMode
MTLTriangleFillMode
MTLIndexType
MTLPrimitiveType
EventType
NNSEventType
RGBuilder
RGContext
vfx_counters
_opaque_pthread_mutex_t
CFXWorld
NCFXWorldRef
holographic_display_calibration
IOSurfaceRef
CMSampleBuffer
NCMSampleBufferRef
CVMetalTextureCache
NCVMetalTextureCacheRef
CMTime
CGSize
MTLLoadAction
vfx_memory_entry_t
simd_quatf
Variant
MTLTextureSwizzleChannels
MTLHazardTrackingMode
MTLCPUCacheMode
MTLTextureUsage
MTLStorageMode
MTLResourceOptions
MTLTextureType
MTLClearColor
MTLDataType
external_entity_constants
external_scene_buffers
external_scene_constants
global_constants
VFXTriggerType
ForceFieldCullMode
ForceFieldShape
ForceFieldScope
ForceFieldType
MTLPixelFormat
__vfx_sampler3d
__vfx_sampler2d
MTLCompareFunction
MTLTextureSwizzle
MTLWinding
MTLCullMode
VFXQuiltSettings
VFXCameraToneMappingMode
VFXCameraLensBlurFilterQuality
VFXCameraFillMode
VFXCameraProjectionDirection
VFXForceFieldType
Metal
RGResource
RGPass
RGExecutionPhase
CGColor
NCGColorRef
CGRect
VFXLightProbeType
VFXColorMask
VFXShadingModel
holographic_quilt_settings
NSKeyValueChangeKey
particle_primitive_material_constants
particle_quad_material_constants
particle_set_size_uniforms
Option
NMTKTextureLoaderOption
particle_orientation_over_velocity_uniforms
particle_set_color_uniforms
pbr_material_constants
URLResourceKey
NNSURLResourceKey
pointcache_spawner_uniforms
emitter_pointcache_uniforms
particle_wrap_around_camera_perspective_uniforms
particle_wrap_around_camera_orthographic_uniforms
LoadingOption
NSCNSceneSourceLoadingOption
particle_set_angular_velocity_uniforms
particle_set_velocity_uniforms
particle_plane_collider_uniforms
particle_sphere_collider_uniforms
particle_aabb_collider_uniforms
particle_obb_collider_uniforms
particle_cylinder_collider_uniforms
particle_sdf_collider_uniforms
particle_drag_uniforms
VFXWorldLoaderOption
VFXFilterMode
VFXWrapMode
CGColorSpace
NCGColorSpaceRef
particle_set_pivot_uniforms
VFXForceFieldCullMode
VFXForceFieldScope
VFXForceFieldShape
VFXParametricModelType
VFXLightType
particle_integrate_uniforms
particle_force_uniforms
particle_set_life_uniforms
particle_textureframe_evolution_uniforms
VFXMeshSourceSemantic
VFXMeshPrimitiveType
particle_set_angle_uniforms
particle_set_angle_velocity_uniforms
vfx_vertex_attribute
particle_noise_uniforms
particle_set_texture_frame_uniforms
emitter_shape_uniforms
particle_color_over_life_uniforms
view_constants
MTLRenderStages
indirect_draw_arguments_uniforms
indirect_draw_mesh_arguments_uniforms
particle_attach_uniforms
simd_double3x3
simd_double4x4
pbr_lighting_parameters
__C_Synthesized
MTLLibraryError
particle_set_float3_generic_uniforms
particle_set_orientation_uniforms
particle_set_mass_uniforms
emitter_killshape_uniforms
MTLBlendOperation
MTLBlendFactor
particle_size_over_life_uniforms
MTLViewport
particle_force_field_uniforms
VFXHitTestOption
frame_constants
__vfx_sampler1d
simd_float2x2
simd_float2x3
simd_float2x4
simd_float3x2
simd_float3x3
simd_float3x4
simd_float4x2
simd_float4x3
CGImage
NCGImageRef
MTLTessellationFactorStepFunction
MTLTessellationControlPointIndexType
MTLTessellationPartitionMode
__darwin_pthread_handler_rec
TextureDescriptor
NRGTextureDescriptor
os_unfair_recursive_lock_s
CVBuffer
NCVBufferRef
CMTimeFlags
vfx_frustum
ForceFieldSettings
ShaderStatistics
os_unfair_lock_s
REVFXClippingIndexSlice
CoreGraphics
SceneKit
Foundation
MetalKit
VFXRenderGraph
particle_ribbon_material_constants
particle_line_material_constants
particle_box_material_constants
particle_point_material_constants
particle_decal_material_constants
Code
NMTLLibraryError
RGPassAndOutputs
CGPoint
PBR1
PBR4
vfx_scale_bias
vfx_float_range
composition_t
argument_buffer_index
MTLSize
MTLStencilOperation
MTLBindingType
MTLTextureCompressionType
vfx_plane
EventContextProtocol
Parameter
EventGuard
?333?
VFXSceneLightType
VFXSceneLightParameters
UTF8Initializable
RotateActionSystem
SineMoveSystem
SineYWaveSystem
TypedArraySnippet
CodingKeys
UnsafeFixedBitSet
GPUHelper
Diff
VFXObjectScriptsDiff
GraphComponent
TypeRegistry
TypeInfo
Deallocable
ProjectorSystem
ProjectorParameters
CodingKeys
Position
CodingKeys
Normal
BE]NWZj),
BindingImpl
VFXBindingType
VFXMemorySerialization
VFXBindingSemantic
NSObject
ScopeLevelProtocol
ScopeLevel
ScopeLevelProvider
MappingRewriter
ComponentsDataChunk
PackedRewriter
AttributeArray
VFXAttribute
ALU`er
CGRUX]_bgipz
ALU`er
BFQT
_cjov
AnimationComputeLocalTimeSystem
BasicAnimationSystem
KeyframeAnimationSystem
ContextDescriptorType
ContextDescriptorProtocol
_ContextDescriptorProtocol
_ClassContextDescriptor
_StructContextDescriptor
ContextDescriptor
WeakReference
invalid
Library
FunctionSet
CodingKeys
ff&?ff&?ff&?
BindingPropertyDescription
ComponentMeta
DynamicComponentMeta
ComponentMetaCamera
ComponentMetaTexture
ComponentMetaParticleSpawn
ComponentMetaParticleInit
ComponentMetaParticleUpdate
ComponentMetaParticleCollider
ComponentMetaParticleRender
EnumMeta
BindingInfo
KernelReference
WeakReference
TexturePlaceholder
TextureCGImage
TextureClient
CodingKeys
QuaternionFCoder
AssetManagerInstance
CPUScriptRunnerSystem
GraphScriptRunner
GPUScriptRunner
TriggerParameterCallable
TriggerEvent
TriggerScriptRunnerSystem
IncommingTickedEventsComponent
KeyboardParams
TriggerParam
MouseParams
TriggerOSEvent
TickedEventsComponent
TriggerListComponent
TickedEvent
CodeSnippet
SerializationInfo
CodingKeys
AuthoringSubGraphNode
SubGraphNode
SubGraphEndpointNode
SubGraphEnterNode
SubGraphReturnNode
CodingKeys
*APW^gpy
)/2:BES_bpvz
!'-;CK\q
!6Q]iu
'8DTds
 %,16;QQQQQQQQQQQQQBQQQGQQQQQQQQQQQQQQQQQQQLBJ  8
DataValue
ShaderCache
FunctionWrapper
SpecializedFunction
ShaderCompilationTrigger
Stats
PipelineStatistics
CacheEntry
ComputePipeline
RenderPipeline
Status
Library
ShaderCacheWeakReference
ShaderError
 )16?EMQZaf
 )16?EMQZa>
&/?5:>
&/?5:
XXOOX#X
"&+25
"&+2
rrrrrrrrrrrrr
rrrrrrrrrrrrrrrrrrrrrrrrrrrrr
rrrrrrrrrrrrrr
rrrrrrrr
(*&.0,2
ForceFieldSystem
CPUSystem
GPUSystem
ForceFieldRuntime
ForceField
ParticleForceField
CodingKeys
ForceField_LEGACY
FallOff
Direction
Kind
Orientation
CodingKeys
System
ParticleIntegrateOrientation
ScriptCodeGen
MetalScriptCodeGen
CScriptCodeGen
SwiftScriptCodeGen
FunctionKind
ParticleSphereRenderer
>VFX
ShaderLibrary
System
ParticleFloatInit
CodingKeys
VFXRemotePreviewEndpoint
EffectsRegistry
ScriptKeyPathProvider
ScriptKeyPathReference
ScriptKeyPath
ScriptKeyPathMigration
RenderPassFormat
EntitySnapshot
System
ParticlePositionOverTexture
CodingKeys
#).48?HPYbiq
#).48?HPYbi
ParticleFluidSolver2DEmitterSystem
ParticleFluidSolver2DSolverData
ParticleFluidSolver2DSolverSystem
ParticleFluidSolver2DSolver
ParticleFluidSolver2DEmitter
ParticleGlobalFluidSolver2DSolver
ParticleGlobalFluidSolver2DEmitter
ParticleAffectedByGlobalFluidSolver2DEmitter
CodingKeys
ParticleAffectedByGlobalFluidSolver2DSolver
Description
Property
VFXSaver
Layout
$3*.
System
ParticleSizeOverTexture
CodingKeys
RenderOutput
CAMetalLayerRenderOutput
MTLTextureRenderOutput
MockRenderOutput
Renderer
RendererPostUpdateSystem
StripDesc
CurrentRenderContext
Options
UnscheduledCommandBuffer
StereoMode
MetalDeviceFeatures
"2BOh
SerializationBaseTypeRegitry
SerializationError
MetadataType
NameAndType
Struct
Metadata
Class
_Struct
_Metadata
_Class
System
ParticleGenerateGrid
VideoCaptureSession
VideoCaptureSystem
IOSurfaceWrapper
MovieSystem
AudioPlayer
AudioSystem
AudioAnalyzer
AudioPlayerComponent
AudioController
AudioFileAsset
MovieRuntime
MovieFileAsset
VideoCaptureRuntime
VideoCapture
CodingKeys
AudioSpectrum
CALayerFileAsset
OrientationMode
AudioMeter
CustomCodeSnippet
VariableSnippet
VariableReferenceSnippet
CodingKeys
_GraphProtocol
_Node _DeletedNode
DeletedNode
_PlaceholderNode
TraversalTag
MappingMode
GraphCursor
InputFilter
TraversalOrder
StaticSwitchSnippet
CodingKeys
LegacyParticleRenderSystem
LegacyParticleEmitterSystem
Authoring
SubEntity
ParticleAffectedByGlobalForce
ParticleLegacyRenderer
ParticleGlobalForce
CodingKeys
 #)3
System
GPUSystem
ParticleSizeOverLife
CodingKeys
Entity
EntityInstance
Allocator
FrameAllocator
HeapAllocator
StackAllocator
ScriptCodeGenNode
GraphCodeGen
CFGNode
CFGNoop
CFGProcedure
CFGMultiProcedure
CFGBranch
CodeGenAtom
FormattingOptions
Language
CodeGenParameter
script_caa
KPUuu
,16uu
Node
CodableNode
Typing
Port
Signature
ParticleVoxelRenderer
CodingKeys
QueryCursorProtocol
BufferSource
QueryCursor
ChunkQueryCursor
ParticleAOSphereRenderer
CodingKeys
ParticleGaussianRenderer
CodingKeys
FunctionDescriptor
XcodeInfo
XcodeCommandBuilder
SkyboxSystem
Skybox
CodingKeys
ImageResizingMode
CenterCodingKeys
StretchCodingKeys
SizeToFillCodingKeys
SizeToFitCodingKeys
GraphDiagnostics
GraphTypeResolver
GraphTypeInference
GraphError
Kind
Too many inputs
System
OrientationConstraint
Mode
CodingKeys
post_process
PostProcessSystem
CPUSystem
GPUSystem
ParticleKillable
KillShape
Shape
CodingKeys
Deallocator
BufferAllocator
QueryResultN
ChunkResult
QueryResult
AABB
CodingKeys
ColorU8
AngleF
Torus
Cylinder
Sphere
!$-5;DMT\aclqy}
DefaultValueProvider
OptionalProtocolDetector
SourceInfoProvider
PropertyDescription
BaseValueAccessors
EntityRemapper
ValueAccessors
EntityGetSetAny
EntityGetSet
EntityValueAccessors
Flags
Semantic
InvalidKeyPathStruct
WakeUpEvent
"'+/3
"'+/
GraphAuthoringSystem
MainGraphScriptGroup
GraphScriptGroup
GraphEntityComponentPropertyReferences
GraphDebuggingComponent
CodingKeys
Mode
CodeGenerationInitialized
CodeGenerationComponent
ScriptArg
ScriptInfo
EvaluationMode
GraphScriptingConfig
EntityComponentPropertyLite
Reference
ExportedDirectPropertyAssignment
DirectPropertyAssignment
DebugValuesKey
HolographicDisplayKind
HolographicDisplay
GenericLookingGlassDisplay
RegularDisplay
lightfield_vert
lightfield_frag
ChangeKind
GraphicsNode
EvaluateCurveNode
EvaluateColorRampNode
SetColorNode
RGBAToHSBANode
RGBToHSBNode
HSBAToRGBANode
HSBToRGBNode
sRGBAToLinearNode
sRGBToLinearNode
LinearTosRGBANode
LinearTosRGBNode
AlphaPremultipliedNode
SamplerNode
SampleNode
PixelFormatDepth
VFXScene
LoadOptions
ScriptFunction
DebugUIOptions
Float2x2Coder
Float2x3Coder
Float2x4Coder
Float3x2Coder
Float3x3Coder
Float3x4Coder
Float4x2Coder
Float4x3Coder
Float4x4Coder
ProjectionDirection
MatrixCodingKeys_pre2005
ParticleStoredDataSet
ParticleStoredData
ParticlePlaneCollider
ParticleQuadRenderer
Shape
FieldRecord
_FieldRecord
System
GPUSystem
ParticleMassInit
CodingKeys
RGGraphTranslator
Reference
LoadResourceInfo
GraphTranslateResult
MetalScriptData
InputEvent
InputClearSystem
Modifiers
Phase
State
EventType
InputStream
FunctionConstant
CodingKeys
Specular
has_vert
has_vert
has_vert
has_vert
re_unifo
renderin
has_velo
has_life
has_colo
has_targ
has_user
has_user
has_size
has_size
is_local
has_pare
drag_use
enable_g
set_coloY
texture_a
enable_sm
voxelizes
is_doublfN
has_norm
hasLensB
hasColor
has_auth
outputsS
gammaBleMO
readSRGB
writeSRG
nbComponxP
show_buf
 )-4
ParticleComponentSpawner
ParticleContinousSpawnSystem
ParticleSpawnOverDistanceSystem
ParticleVariableSpawnSystem
ParticleBurstSpawnSystem
ParticlePeriodicBurstSpawnSystem
ParticleSubSpawnAddStateSystem
ParticleSubSpawnSystem
ParticleSubSpawnSystemPostUpdate
ParticleSubSpawnSystemPostInit
State
ParticleSubSpawn
ParticleSpawnOverDistance
ParticleSpawnState
CodingKeys
ParticleContinuousSpawn
ParticleVariableSpawn
ParticleBurstSpawn
ParticlePeriodicBurstSpawn
ParticleSpawnDuration
ParticleSpawnDelay
ParticleRespawn
Mode
ParticleRibbonTrailsSystem
ParticleRibbonTrails
CodingKeys
ChunksStorage
FilteredChunk
ClassComponentStorage
5ZZZ7YZ
 "$&(
_CK%
DdD3
+4>RVj}
"%(+.1
 #&),/2
"&*.26:>BFJ
$.JZe
System
TriggerScript
ShaderScript
MetalFunctionScript
SimpleScript
EmitterScript
ParticleUpdateScript
ParticleInitScript
ScriptLocation
TextureType
ScriptParameter
ParticleScriptRuntime
GraphScript
ScriptsHolder
Info
BuiltinProperty
VertexOutProperty
CodingKeys
DirectCodingKeys
PathCodingKeys
CurrentCodingKeys
texture
half4
half3
half2
half
ShaderScriptRuntime
FunctionType
ShaderScriptParameter
EntityLocator
ScriptAccess
vfx_virtual
FragmentOutProperty
FragmentInProperty
VertexProperty
Resources
System
GPUSystem
ParticleOrientationInit
CodingKeys
Value
EnumInfo
Visibility
Bindings
CodingKeys
ResourceUsageSystem
System
GPUSystem
ParticleFloat3Init
@|M#
CodingKeys
QueryBuffer
QueryProtocol
QueryHeader
QueryScope
Scope
AccessControl
Field
DirtyReadPolicy
QueryOptions
(knN(knN(knN
"+3;DJQW]fkr
Storage
EmitterPrepareRuntime
EmitterWarmup
ParticleEmitterTransport
EmitterRuntime
EmitterDescription
CodingKeys
EmitterReference
Seed
PhysicsSimulation
DebuggingOptions
ScriptCompilerSystem
Builder
CachedBuildResults
Result
CompilationStatus
CompilationHandle
ScriptingConfiguration
ScriptError
System
GPUSystem
Attach
CodingKeys
VFXEntityObject
PrivateHeap
BufferPool
PaddedConstantBuffer
BufferSlice
ParticleSurfaceRenderer
CodingKeys
$-5;>FNV[`ipx~
ParticleRenderer
ParticleRendererWithSystem
ParticleDefaultRendererable
ParticleDefaultRenderSystem
System
ParticleRibbonLengthUpdate
ParticleDefaultRendererableCodingKeys
FluidRenderer
ParticleOrientationMode
ParticleAnimationMode
CodingKeys
passConstants
Query
Anchored
ParticleAnchored
CodingKeys
$,37
MaterialParametersProvider
MaterialSystem
Material
CodingKeys
Layer
Kind
.4:@FLRX  
F[c
 "$&(*,TypeConstraint
SelfBuildInfo
ParticlePointRenderer
ContextExit
ChunkFilters
EventSourceProtocol
Parameter
EventSource
DelegateEventSource
Cancellable
CancelTuple
CancelList
EventProtocol
Parameter
ColorRampInput
System
GPUSystem
ParticleColorOverLife
CodingKeys
}?,47?}cZ>
?(E=>
SceneAssetRegistry
SceneAssetRegistryEntry
SceneAssetRegistryInstance
ParticleAffectedByGravity
ParticleGravityForce
CodingKeys
System
ComponentSystem
GenericComponentSystem
ImGuiSystem
SystemStage
VFXError
ResizingMode
VFXViewLegacy
VFXViewDelagate
UpdateWorldAABBSystem
SceneWorldAABB
"&*.26:>NNNNNNNNNNNNNBNNNFNNNNNNNNNNNNNNNNNNNJ#
KernelScriptReflectionSystem
ShaderFileSystem
MetalFunctionReflection
ShaderFileAsset
MetalScriptReflection
CodingKeys
Features
ParticleBoxCollider
OBBFeature
AABBFeature
ParticleBoxRenderer
RandomSeedNode
RandomNode
RandomTypedNode
Random01Node
RandomUnitVectorNode
RandomInRangeNode
RandomPositionInsideSphereNode
RandomPositionInsideCubeNode
PerlinNoiseFloatNode
PerlinNoiseFloat2Node
PerlinNoiseFloat3Node
PerlinNoiseFloat4Node
ParticleSphereCollider
AssetManagerPathResolver
AssetManager
AssetFileManager
Bitset
BitsetIterator
)5<I
JNY\`f
)07O
#*18?FMT[biY
!*1:?FMR'
")07>ELSZah
"1Nkz
AnimationTiming
Animation
AnimationTarget
KeyframeAnimation
@ds#
AnimationTimeSource
CodingKeys
 @$u#
KeyframeAnimationRuntime
BasicAnimation
@4u#
BasicAnimationRuntime
@du#
Interpolation
EasingFunction
FillMode
=?D.
DrawCall
DrawCallDisposeSystem
DrawCallComponent
DrawCallLayer
DrawCallEntityClassesContext
DrawCallEntityClasses
DrawCallPool
RenderingOrder
DrawCallGenerationContext
IndexedArray
@%z#
CodingKeys
Opaque
Transpar
 %.7?HQWZbjqz
 %.7?HQWZbjqz
Y_Sf
,,,,,
>fad
CPUSystem
GPUSystem
EmitterShape
Direction
EmissionOrder
ShapeDistribution
Shape
MotionDistribution
CodingKeys
ParticleCylinderCollider
^^^^SX
}}}}}
(wwlwwwwwww
,16<AEJMU]pd
*.8BU
!%)+/37;?CGIMOSX
<BE?
"&*1?
 "$&(*,.0WorldReferenceKind
AssetReferenceKind
AnyType
%.4:AGOU[`
%.4:AGOU["
ParticleFlockingAlignOrientationSystem
ParticleFlockingAlignVelocityOnPlaneSystem
ParticleFlockingConstrainToAreaSystem
ParticleFlockingConstrainToPlaneSystem
ParticleFlockingFlyTowardsAreaSystem
ParticleFlockingSolverData
ParticleFlockingSolverSystem
ParticleFlockingSpeedControlSystem
Grid
FlockingParticle
ParticleFlockingAlignOrientation
ParticleFlockingAlignVelocityOnPlane
ParticleFlockingConstrainToArea
ParticleFlockingConstrainToPlane
ParticleFlockingFlyTowardsArea
ParticleFlockingSolver
ParticleFlockingSpeedControl
Cell
CodingKeys
System
GPUSystem
ParticleTextureFrameInit
CodingKeys
RemappableNode
ECSNode
TimeNode
DeltaTimeNode
IsFirstFrameNode
_ECSValueNode
SetECSValueNode
InspectorSetECSValueNode
GetECSValueNode
_ParticleValueNode
SetParticleValueNode
GetParticleValueNode
_OnNode
OnUpdateNode
OnFirstFrameNode
OnParticleStageNode
OnTriggerNode
OnMouseTriggerNode
OnKeyTriggerNode
OnTickTriggerNode
LogDebugPassthroughNode
LogDebugNode
ECSStorageNode
CurveTextureNode
ColorRampTextureNode
EntityAssetNode
ImplicitEntityAssetNode
ImportErrorNode
StateNode
ImplicitStateNode
SetStateNode
TickNode
VFXStage
GraphSideStorage
CodingKeys
PrepareLightsSystem
AmbientLight
SpotLight
PointLight
DirectionalLight
RectAreaLight
CodingKeys
LightsUniforms
GPUSystem
ParticleNoiseSystem
NoiseParameters
ParticleNoise
NoiseGlobalTexture
CodingKeys
EntityManagerActor
EntityManager
State
ActiveState
EntityEntry
GroupSet
Iterator
$,3%
!'.&
 )-3
"&*.18<?HLRZcgkpv~
"%.26:?HLOZ^fpx|
%-5;E
!,6@Q
VFXBidirectionalRemapTable
Selected
IterableOptionSet
EnumerableOptionSet
OptionSetIterator
@D|#
SubContext
LODSystem
GenericLODSystem
MetalIOData
Access
FullscreenQuadResource
KernelScriptResource
 $(,0H
#'+/3
!(1:@FILT\dj
!(1:@FILT\d
Context
GenerationData
ErrorInfo
GenerationSettings
AssignmentInfo
CodingKeys
MetadataSet
Metadata
Custom
MetadataType
CodingKeys
RandomNumberGeneratorXoshiroWithSeed
type
name
code
CameraSystem
PreUpdateCameraSystem
PreRenderCameraSystem
PrepareUpdateSystem
PrepareRenderSystem
DebugSelectedCamera
REFrameConfiguration
FrameConstantsStorage
ConstantStorage
CodingKeys
 '048@
 '048
VertexLayoutDescriptor
AttributeTable
Mesh
MeshBinaryData
MeshPart
VertexLayout
Attribute
Buffer
MeshBuffer
CodingKeys
Error
ComputePipelineDescriptor
ContextEntry
TypeMeta
EntityKeyPath
ComponentProperty
CodingKeys_pre2002
CodingKeys
EntityComponentProperty
SmoothMotionSystem
SmoothMotion
CodingKeys
$8=CJQX_dq~
*@EKRY`glz
!'-39?CKSW
ReplicationEntityRemapper
ReplicationRemappable
AnyComponentValueWriter
AnyComponentWriter
ReplicationDelegate
ReplicationStreamSystem
ReplicationStream
BidirectionalRemapTable
DefaultRemapper
ReplicationEvent
ReplicationStreamBuilder
ExistentialComponentWriter
ComponentWriter
ComponentValueWriter
EntityClass
WorldCounterable
WorldCounters
System
ParticleLocalBoxCollider
CodingKeys
BindingCopyAction
VFXREREnderer
VFXREScene
System
GPUSystem
ParticleAngleVelocityInit
CodingKeys
ColorRampSystem
ColorRampCache
ColorRampComponent
ColorRampRuntime
CodingKeys
ColorRampsState
ParticleLineRenderer
VFXCoreViewDelegate
VFXCoreView
ParticleEmitterSystem
ParticleComponentRequirement
ParticleComponentSystemProcessable
ParticleAttribute
ParticleAttributeWithoutRequirement
ParticleAttributeConstantRequirement
ParticleAttributeWithoutSystem
ParticleEmitterGPUSystem
ParticleComponentGPUProcessable
EmitterCullingSystem
IsSubEntityOf
WorldFromScene
ParticleIDToIndexTable
ParticleComponentSystemParameter
ParticleAngleEvolutionSystem
ParticleAngleEvolution
CodingKeys
EasingNode
EasingFloatNode
CubicEaseInNode
CubicEaseOutNode
CubicEaseInOutNode
QuadraticEaseInNode
QuadraticEaseOutNode
QuadraticEaseInOutNode
QuarticEaseInNode
QuarticEaseOutNode
QuarticEaseInOutNode
QuinticEaseInNode
QuinticEaseOutNode
QuinticEaseInOutNode
SinEaseInNode
SinEaseOutNode
SinEaseInOutNode
ExponentialEaseNode
PhysicalEaseNode
PowerEaseNode
BounceEaseNode
UnsafeHashTable
HandleTable
HandleArray
UnsafeArray
BufferAndStart
UnsafeArrayIterator
UnsafeDynamicArray
UnsafeSparseMutableBufferPointer
@<{#
*8FTb
ParticleCopyDataSystem
ParticleCopyData
CodingKeys
ParticleVolumetricRenderer
CodingKeys
System
GPUSystem
ParticleAngleInit
CodingKeys
8GM\gs
System
GPUSystem
ParticleOpacityOverLife
CodingKeys
BlendMode
Dumper
StringDumper
RuntimeThread
vfx_script_emitter
CachedLocationMapping
ScriptingMappingTimestamps
LocationMapping
MappingInvalidationTrigger
MappedLocation
PointerLocation
TableLocation
ExternalConstantsCopyEncoder
Destination
StartCaptureSystem
StopCaptureSystem
RenderImGUISystem
System
ParticleColorOverVelocity
CodingKeys
ClampBoxSystem
GlobalClampBoxSystem
ClampBox
CodingKeys
LogicNode
SelectNode
UnaryBoolOperatorNode
NotNode
IsOddNode
IsEvenNode
BinaryLogicOperatorNode
OrNode
AndNode
NandNode
NorNode
IsGreaterNode
IsGreaterOrEqualNode
IsLesserNode
IsLesserOrEqualNode
IsEqualNode
IsNotEqualNode
 $(16<CLT[ckn
PrimitiveGeneratorSystem
PrimitiveGenerator
CodingKeys
SimpleFontDescription
PrimitiveType
Hello
Static
SpaceOverride
LastFrameWorldTransform
Parent
InverseWorldTransform
WorldTransform
ParentedToScene
Depth
CodingKeys
Beamed
Fixed
Children
NotInHierarchy
EntitySpace
kClusteringSystem
kCluster
kClusterState
ExternalDataTable
RenderContext
DummyCodable
CodingKeys
QueryManager
QueryInfo
RunloopThread
Thread
GPUSystem
ParticleTextureFrameEvolutionSystem
ParticleTextureFrameEvolution
CodingKeys
RenderArguments
ArgumentScope
BindingRequirement
SamplerArgument
TextureArgument
BufferArgument
GlobalsSystem
BindError
MathNode
ArithmeticOperatorNode
ArithmeticBinaryOperatorNode
AddNode
SubNode
MulNode
DivNode
RemainderNode
QuotientNode
FModNode
MinNode
MaxNode
PowNode
ATan2Node
StepNode
DistanceNode
DistanceSquaredNode
IsAlmostEqualNode
CrossProductNode
DotProductNode
LengthSquaredNode
ArithmeticTernaryOperatorNode
Min3Node
Max3Node
SmoothStepNode
MulAddNode
ClampNode
ArithmeticUnaryOperatorNode
ToRadiansNode
ToDegreesNode
SqrtNode
FractNode
OneMinusNode
Pow2Node
Pow3Node
RoundNode
SignNode
AbsNode
FloorNode
LogNode
ExpNode
Exp2Node
Exp10Node
CosNode
SinNode
ASinNode
ACosNode
CeilNode
TanNode
ATanNode
LengthNode
IsAlmostZeroNode
SaturateNode
SignedSaturateNode
NormalizedNode
QNormalizedNode
ConjugateNode
QLnNode
QExpNode
EulerAnglesNode
AxisAngleNode
AxisNode
QAngleNode
NormalAxisNode
ReduceSumNode
ReduceMulNode
OrthonormalBasisNode
MixNode
QTransformNode
QLengthNode
InverseNode
QInverseNode
TransposeNode
TransformNormalNode
TransformPosition3Node
TransformPosition4Node
TransformNode
TranslateMatrix3Node
TranslateMatrix4Node
ScaleMatrix3Node
ScaleMatrix4Node
ProjectPositionNode
TransformDirection3Node
TransformDirection4Node
TRSNode
GetTranslation3Node
GetTranslation4Node
GetRotationNode
RotationNode
GetScale3Node
GetScale4Node
RotateVectorNode
QPowNode
LookAtNode
SlerpNode
SlerpLongestNode
SquadNode
BezierNode
RotationBetweenNode
RotationBetweenFastNode
IsIdentityNode
AngleNode
Remap01Node
RemapNode
IsInClosedRange
&,28;BHKTZ`hqw~
CodeSourceSnippet
Parameter
CodingKeys
CullingSystem
MainCullGroup
ZZ.ZZZZZZeM
ZZZZZZZZZ}ZZZZZZZZZ
[[.[[[[[[fN
[[[[[[[[[~[[[[[[[[[
ParticleMeshCollider
PointerType
Pointee
Error
Argument
Token
ParsedScriptParameter
TokenKind
ScriptParser
Lexer
Cursor
name
System
ParticleLifeAndDeath
BinaryDecoder
_BinaryDecoder
DataSource
DataStream
KeyedStore
UnkeyedStore
KeyedSources
Options
_BinaryKeyedDecodingContainer
_BinaryUnkeyedDecodingContainer
SingleValueStore
_BinarySingleValueDecodingContainer
D?D07@
LensBlurPassSystem
AnyExtensions
Extensions
System
GPUSystem
ParticleLifeInit
CodingKeys
WorkerComponentStorage
RewriteContext
VFXBridgingRemapAndResolveContext
CollectReferencesContext
RemapContext
PrivateCommandQueue
Stats
Operation
DirtyPropagation
ReferenceOptions
CommandQueue
IterationContext
ComponentBuffer
CastNode
AutoCastNode
BinaryEncoder
_BinaryEncoder
DataDestination
DataStoring
DataStore
SingleValueDataStore
KeyedStore
UnkeyedStore
Options
_BinaryKeyedEncodingContainer
_BinaryUnkeyedEncodingContainer
_BinarySingleValueEncodingContainer
LogOptions
Logger
OSLogger
ThreadLogger
DoubleBufferAllocator
PredefinedConstantNode
PiNode
TwoPiNode
HalfPiNode
EpsilonNode
Identity2x2Node
Identity3x3Node
Identity4x4Node
IdentityQuaternionNode
TargetDataKind
SourceDataKind
FlockingLocalAxis
FlockingSizeMode
Operation
Composition
ScaleMode
NoiseKind
TextureChannel
FluidSolver2DSolverBorderType
FluidSolver2DSolverSetupType
BinaryCodingTypeRegistry
FloatingPointBitPattern
BitPattern
_BinaryKey
ParallelCoder
_KeyBox
BinaryCoding
ArrayNode
GetArraySizeNode
GetArrayElementNode
System
GPUSystem
ParticleSetID
CodingKeys
SceneComponentStorage
DefaultInitializable
DebugUIDrawable
Component
EntityComponent
ClassComponent
WorkerComponent
SceneComponent
NotCodable
Tombstone
TypeCoder_pre2035
TypeCoder
ClassSettings
MonoChunk
UnstableOrdering
AnonymousEntity
PropagateDirtiness
NullEntityComponent
CodingKeys
Target
Architecture
Platform
bloom_threshold
BloomPassSystem
Deleter
TextureAllocator
TexturePool
KeyframeTimelineRuntime
KeyframeTimeline
CodingKeys
RenderStates
MaterialRuntime
ParticleDecalRenderer
CodingKeys
MDLImporter
Error
FutureResultProtocol
Value
FutureProtocol
Result
Future
Promise
FutureResult
FutureStorage
FutureState
Section
CPUSystem
GPUSystem
ParticleForce
CodingKeys
LookAtSystem
LookAt
CodingKeys
System
GPUSystem
ParticleIntegrate
VFXEffect
Graph
Clock
HolographicRendererProtocol
HolographicSession
LightfieldRenderSettings
VFXREBindingMeshData
VFXREDrawCall
VFXMaterialType
REExternalDataTable
VFXDrawCallHandler
VFXCoreImporter
AnimationInfo
VFXImporterContext
NodeTransformController
NodeVisibilityController
ParametricModelController
MorpherController
ForceFieldsController
PhysicsBodyController
CameraController
CameraEffectToneMappingController
CameraEffectMotionBlurController
CameraEffectSSAOController
CameraEffectDoughnutBokehController
CameraEffectChromaticTransformController
CameraEffectExposureController
CameraEffectBloomController
CameraEffectLensBlurController
CameraEffectGrainController
CameraEffectDepthOfFieldController
MaterialController
WorldBackgroundController
WorldIBLController
WorldPhysicsController
WorldFogController
VFXNode
VFXCoreAsset
VFXMaterial
VFXModel
VFXWorld
Bridgeable
BridgeComponent
ShadableShaderModifierObserver
VFXBridgeableReference
LightController
ModelController
ScriptCompileAttempt
DiagnosticsFormat
ScriptDiagnostic
Kind
SourceLocation
.25DMPbr
  Q**
CustomParameters
ShaderArguments
ShaderParameter
ShaderArgument
CodingKeys
PerStageShaderArguments
Desc
TextureDesc
BufferDesc
Shape
ParticlePrimitiveRenderer
vector_vert
vector_frag
VectorRenderSystemRenderPipelineStates
VectorRenderSystem
Shadow2D
StrokeWidth
StrokeColor
RoundedRectShape
DiscShape
Rect2D
HZOrder
ZOrder
Velocity2D
CodingKeys
ParticleAOBoxRenderer
CodingKeys
&.;!
%063
#)4A
 &-8
#*2?
$,3;
"+5B
ejo r#u'+~0
ADKRY\_behk-n
    
      
      
 "$&(
 "$&(
V
BH4N
G"%K(N+RVZ^ch/2z
mqu5~9
CodingKeys
FilterMode
AddressMode
type
name
code
System
ParticleTargetFromPositionInit
CodingKeys
No subject
?FluidSpheresRenderSystem
FluidAbsorbRenderSystem
FluidBlurRenderSystem
FluidCompositeRenderSystem
FluidRenderSystemState
DisplayClock
OptionalStrongReference
Element
TextureCache
CacheEntry
State
TextureKey
AsyncGroupRequestState
Texture
WeakStorage
Loading
StorageKind
System
ParticleTargetFromPosition
CodingKeys
System
GPUSystem
ParticlePivotInit
CodingKeys
5RRRRRRRRRRRRRRRRRRRRRRR
%<-5
BaseObject
GraphV1CodeGeneration
Type
CodingKeys
SceneFileSystem
MeshFileSystem
MeshReferenceSystem
MeshReferenceAsset
VertexLayoutCollection
MeshFileAsset
SceneFileAsset
ImportOptions
MeshImportOptions
CodingKeys
Loader
ParticleSDFCollider
FairRecursiveLock
UnfairRecursiveLock
UnfairLock
GPUSystem
ParticleDragSystem
ParticleDrag
CodingKeys
DistanceConstraintSystem
DistanceConstraint
CodingKeys
TesselationDescriptor
RenderPipelineDescriptor
System
ParticleColorOverTexture
CodingKeys
AnyCoder
CodingKeys
Name
not an EnumMeta
BuiltinNode
NilNode
ImplicitNilNode
NoopReturnNode
NoopReturnAnyNode
NoopActionNode
ConstantNode
ImplicitConstantNode
DotNode
_ComposeNode
ComposeNode
ImplicitComposeNode
DecomposeNode
ImplicitDecomposeNode
PartialComposeNode
ImplicitPartialComposeNode
FlowControlNode
DoNode
ImplicitDoNode
IfNode
NoopNode
ImplicitNoopNode
EnumConstantNode
ImplicitEnumConstantNode
AnyValue
VFXTag
DoNotSave
EmbeddedAssets
VFXParentAsset
VFXBridgeTag
VFXObjectTag
VFXAssetTag
DoNotExport
Scheduling
Prefab
CodingKeys
ScriptingSupport
URLWatcher
Presenter
debug_frag
4;>A
5<@D
Ahs~
 %'*
DebugCullingSystem
DebugVFXSystem
DebugInfoSystem
DebugDrawingSystem
DebugInfoDrawer
Item
WireframeLayerSystem
DebugDrawingState
DebugCullingSystemState
DebugInfoViewDependant
DebugInfoState
DebugInfoA
DebugInfoB
DebugInfoPrimitive
DebugInfoColor
DebugInfoWireframePrimitive
DebugAPI
CodingKeys
ArrowHead
Field of
VFXWorld
VFXNode
VFXLight
VFXForceField
VFXPhysicsBody
VFXModel
VFXMaterial
VFXCamera
VFXCameraEffectBloom
VFXCameraEffectDepthOfField
VFXCameraEffectColorGrading
VFXCameraEffectExposure
VFXCameraEffectToneMapping
VFXCameraEffectColorFringe
VFXCameraEffectMotionBlur
VFXCameraEffectVignetting
VFXCameraEffectGrain
VFXCameraEffectLensBlur
VFXCameraEffectChromaticTransform
VFXCameraEffectDoughnutBokeh
enabled
radius
maskEnabled
maskCenter
maskRadius
camera.doughnutBokeh
sampleCount
intensity
center
fromZ
fromAngle
fromShift
toAngle
toShift
color1
color2
color3
unMultBlending
camera.chromaticTransform
filterQuality
camera.lensBlur
scale
colored
camera.grain
anamorphic
softness
camera.vignetting
camera.motionBlur
strength
camera.colorFringe
mode
toeStrength
toeLength
shoulderStrength
shoulderLength
shoulderAngle
gamma
camera.toneMapping
value
camera.exposure
saturation
contrast
whiteBalanceTemperature
whiteBalanceTint
liftColor
liftOffset
gammaColor
gammaOffset
gainColor
gainOffset
camera.colorGrading
fStop
apertureBladeCount
focalBlurSampleCount
camera.depthOfField
threshold
thresholdSmoothness
iterationCount
useHighQuality
colorFilter
camera.bloom
usesOrthographicProjection
wantsHDR
focalLength
fieldOfView
sensorHeight
fillMode
zNear
zFar
categoryBitMask
filmOffset
focusDistance
camera
shadingModel
alphaCutoff
colorBufferWriteMask
writesToDepthBuffer
readsFromDepthBuffer
diffuse
metalness
roughness
specular
normal
reflective
transparent
ambientOcclusion
selfIllumination
emission
multiply
clearCoat
clearCoatNormal
clearCoatRoughness
subsurface
subsurfaceRadius
displacement
minificationFilter
magnificationFilter
mipFilter
wrapS
wrapT
mappingChannel
maxAnisotropy
contentsTransform
subdivisionLevel
parametricType
width
height
length
chamferRadius
primitiveType
widthSegmentCount
heightSegmentCount
lengthSegmentCount
chamferSegmentCount
model
friction
restitution
damping
angularDamping
rollingFriction
charge
affectedByGravity
centerOfMassOffset
velocityFactor
angularVelocityFactor
continuousCollisionDetectionThreshold
collisionBitMask
contactTestBitMask
allowsResting
linearRestingThreshold
angularRestingThreshold
physicsBody
fieldType
active
falloffExponent
offset
shape
cullMode
forceField
type
color
temperature
attenuationDistance
castsShadow
spotInnerAngle
spotOuterAngle
gobo.contents
areaExtents
drawsArea
doubleSided
IESProfile
probeType
light
hidden
position
eulerAngles
worldTransform
opacity
renderingOrder
self
physicsWorld.gravity
physicsWorld.speed
fogStartDistance
fogEndDistance
wantsScreenSpaceReflection
lightingEnvironment.contents
background.contents
fogColor
VFXDiagnosticsTracking
DiagnosticsTrackerInstance
ScriptStatus
ScriptHandle
System
ParticleColorOverPosition
GradientMode
CodingKeys
VFXEmitter
EventStream
ParameterBase
ParameterIn
ParameterOut
System
ParticleOpacityOverVelocity
CodingKeys
,13I579;=?AKCEMGSOQ
BJ%_tN
?ib#
VFXHolographicRenderer
OrderedDictionary
@b#
RelationComponent
RelationStorage
RelationsCoder
RelationPair
&/7=BJM
&/7=BJ
ParticleCollidable
CPUSystem
GPUSystem
ParticleCollide
ParticleCollisionEvent
CollisionHandler
CollisionProperties
ParticleCollidableCodingKeys
CollisionLayerSet
*,.
KTXLoadingError
"""""
"""""""
RenderFunctions
ShadowSystem
Shadow
CodingKeys
ShadowRenderingCommand
ShadowState
Decode error
CodeLoader
SwiftCodeLoader
CCodeLoader
MetalToolchainCodeLoader
MetalAPICodeLoader
Language
Error
Scale3
Scale
Scale2
Scale1
HalfSizeLegacyPatch
Velocity
AngularVelocity
CodingKeys
composite
CompositeSystem
VortexSystem
Vortex
CodingKeys
>ParticlePrepareGPUSystem
ParticlePostInitGPUSystem
ParticleGPUDownload
FloatGenerator
SkeletonData
SkeletonAnimation
SkeletonAnimationSystem
SkeletonSystem
SkinningSystem
SkinnedMeshBinding
Skeleton
SkeletalAnimationPlayer
QuatfArrayAnimation
Float3ArrayAnimation
?!'0
System
GPUSystem
ParticleVelocityInit
CodingKeys
Scheduler
Event
JobQueue
SystemRegistrationOptions
Action
System
GPUSystem
ParticleAngularVelocityInit
CodingKeys
ParticleOpacityEvolutionSystem
ParticleOpacityEvolution
EvolutionMode
CodingKeys
System
ParticleIntegrateAngle
88888888
888888888888888888
CSVFileAsset
Locked
System
ParticleGrowEmitter
GrowEmitterRuntime
CodingKeys
SceneKitAssetSystem
SceneKitSystem
SceneKitRenderer
SceneKitAssetInstance
SceneKitAsset
CodingKeys
ParticleSortSystem
Iterator
ParticleSortModeSet
ParticleSortMode
RenderGraph
RenderGraphSystemCleanup
RenderGraphSystem
RenderTargetDesc
RenderTarget
Features
RenderSettings
CodingKeys
SetActiveSystem
HiddenSystem
EffectiveHiddenState
SetActive
SerializationContext
AnyDecoder
AnyEncoder
EntityManagerCoder
ValueCodingKeys
DecodeOrNil
EntityCoder
VersionedContainer
EntityComponentReference
FastDictCoder
StringCodingKeys
EntityTableEntryCoder
CodingKeys
ComponentCoder
CodingKeys_pre2000
WorldReferencingNode
_WorldValueNode
SetWorldValueNode
InspectorSetWorldValueNode
GetWorldValueNode
WorldReferenceNode
ImplicitWorldReferenceNode
RenderGraphDiagnostics
RenderGraphNode
RenderWorldNode
PublishTextureNode
PresentNode
BlurNode
BloomNode
ResolveResolutionNode
RenderGraphTextureNode
TextureDescriptorNode
CustomFunctionNode
ComputeShaderNode
FullscreenQuadNode
TexturePreview
RendererInfo
ResourceSemantic
MaterialParameters
CodingKeys
SineMoveAction
RotateAction
CodingKeys
SineYAction
TransientPushSystem
TransientOriginScale
TransientOriginColor
TemplateSet
Category
Template
CodingKeys
System
GPUSystem
WrapAroundCamera
CodingKeys
#&,3<C
#&,3<)
PointCacheGeneratorSystem
System
GPUSystem
PointCacheFromModel
PointCacheFileAsset
PointCacheGenerator
REMeshAssetPointCache
PointCacheSpawner
PointCacheEmitter
CodingKeys
PointCacheError
TypedBufferSlice
PCacheError
PointCacheRuntime
BakingOptions
PointCache
Distribution
PointCacheProperty
WorldAABB
LocalAABB
BUMigrationPhase
MigrationInfo
RenderCommandEncoder
VFXRendererLegacy
RERendererConfiguration
RenderPipelineFactory
Flags
PipelineCompilationContext
NSObject
DynamicPropertyStoring
System
ParticleSizeOverVelocity
CodingKeys
HeapTextureAllocator
SectionArray
ParticleRibbonProfile
ParticleRibbonTextureMode
ParticleRibbonRenderer
No codegen
ScopeChecker
CFGScopeInfo
GraphScheduling
ParticleSizeOperation
HierarchySystem
SimplifiedHierarchySystem
LastFrameWorldTransformSystem
LastFrameWorldTransformSystem_vfx1
StaticToFixedSystem
Animatable
CurveObject
Curve
ColorRamp
CodingKeys
 @\z#
CurveInterpolationMode
CurveTangents
InterpolationMode
MathTransformNode
QuaternionFromNormalNode
QuaternionFromFloat3AxisAngleNode
QuaternionFromFloat4AxisAngleNode
QuaternionFromEulerAnglesNode
QuaternionXNode
QuaternionYNode
QuaternionZNode
QuaternionFromRotationMatrix3x3Node
QuaternionFromRotationMatrix4x4Node
RotationMatrixFromEulerAngleNode
RotationMatrix3x3FromQuaternionNode
RotationMatrix4x4FromQuaternionNode
RotationMatrixAroundCenterNode
TRSFloat3x3MatrixNode
TRSFloat4x4MatrixNode
TransformBucket
RenderBuckets
MeshRenderSystem
OpaqueRenderPass
TransparentRenderPass
MeshBatch
MeshModel
ModelRenderer
MeshRenderSystemState
CodingKeys
CurveSystem
CurveCache
CurveRuntime
CurveComponent
CodingKeys
CurvesState
AuthoringNode
Port
GraphNodeLibrary
NodeCategory
Entry
position
hidden
eulerAngles
scale
worldTransform
opacity
renderingOrder
castsShadow
categoryBitMask
Flags
Script
ScriptCustomState
ScriptComponent
ScriptIndex
ScriptRuntime
@tx#
ScriptScheduling
GeneratedScriptCode
ScriptCompileOptions
CodableVoid
ScriptStateRestoration
@Ty#
CodingKeys
;;';
'/4=CS
'/8=FLS
'/8=FL
%%%%
%%%%%%
%%%%%%
____
______
______
____
______
______
AssetPathResolver
BundleResolver
AbsolutePathStorage
FileAssetEntityComponent
TextureSystem
TextureDownloadSystem
TextureDiscardSystem
TextureClientPlaceholderSystem
TextureRequireCPURepresentation
TextureGPURuntime
TextureRenderTarget
TextureRequireGPURepresentation
TextureFileData
TextureArrayFileAsset
TextureLoadingOptions
TextureRequireAnimationRepresentation
TextureFileAsset
TextureShaderAsset
TextureCPURuntime
TextureRequireSizeLimit
UnmanagedFileAsset
TextureSource
TextureDescriptorCoder
Parameter
CodingKeys
VirtualFileAsset
TextureError
FileWatcher
StorageOptions
TextureGPURepresentationDoNotUpload
PostTypeCodingError
LoadPolicyMode
TextureRequireNonSRGB
TextureRequireCubemap
TextureRequireMipmapGeneration
TextureRequirePremultiplyWithLinearAlpha
SizeModification
TextureRequireUnpremultiply
TextureLoadRequestGPU
TextureFallback
TextureLoadRequestCPU
TextureRequireMipmap
RenderGraphTextureTarget
TextureRequireMask
TextureRequireIOSurface
TextureLoadPolicy
Slice
MipmapGeneration
TextureOptions
Kind
Asset
CodingKeys_pre2019
?unsupported
ComponentPropertyRewriter
 &-4
"6).
PointOfView
OrthographicCamera
PerspectiveCamera
ProjectionMatrix
CodingKeys
CameraDepthOfField
CameraBloom
CameraLensBlur
CameraToneMapping
CameraVignetting
CameraColorGrading
LensBlurQuality
ToneMappingOperator
HiddenOrHasHiddenAncestor
Opacity
CodingKeys
Hidden
DeferredRendering
VFXLoader
EffectID
InitializePhases
BundleInfo
CodingKeys
DecodingErrorNode
AuthoringGraphCoder
AuthoringNodeCoder
CodingKeys
EdgeCoder
DepthStencilCache
Default
DepthStencilDescriptor
StencilDescriptor
RandomNumberGeneratorXoshiro
prelit_vert
PrelitParameters
CodingKeys
DefaultMaterialInstance
_NodeProtocol
_This
EventDisposeSystem
NewEvent
OldEvent
CodingKeys
PBRParameters
PBRScalarProperty
PBRColorProperty
CodingKeys
TextureMipFilterMode
TextureSampler
pbr_vertex
ShaderRegistry
ParticleLifetime
ParticleTextureFrame
Color
ParticleAge
CodingKeys
ParticleGPU
ParticleRibbonLength
ParticleCustomEmitter
ParticleParentID
Particle
ParticleRoughness
ParticleMetalness
ParticleEmission
ParticleAngle
ParticleAngleVelocity
ParticleID
Mass
LinearFactor
AngularFactor
ParticleTarget
UserData1
UserData2
UserData3
UserData4
NeighborCount
ParticlePivot
ParticleSphereAttractor
ParticleSDFAttractor
SDFFileSystem
SDFGeneratorSystem
SDFFileAsset
SDFTextureGenerator
CodingKeys
SDFRuntimeData
System
GPUSystem
ParticleColorInit
Mode
CodingKeys
AuthoringGraph
ParticleMeshRenderer
CodingKeys
NavigationConfiguration
FlyModeKeys
_Navigation
CodingKeys
Navigation
NavigationRotationMode
ScrollMode
System
GPUSystem
OrientationOverVelocity
DirectionAxis
CodingKeys
AssetCatalogSystem
TextureNamedAsset
CodingKeys
AssetCatalog
Code
CodeEmitter
|l||llllllllll
|||ll|
.JQX_
$*17=CIOV\c
$*17=CIOV\5
!'.5
PipelineScriptCoder
VertexDescriptorCoder
ColorAttachmentsCoder
CodingKeys
FunctionConstantCoder
SpecializedFunctionCoder
LibrariesCodingKeys
PipelineCodingKeys
AttributeCodingKeys
LayoutCodingKeys
ValueCodingKeys
BlendingStates
System
ParticleUpdateAABB
ArraySequenceSnippet
CodingKeys
(knN
LODResource
Variation
LODState
LODRenderer
PointOfCulling
CodingKeys
FrustumCulled
GenericLOD
LODCulled
-<KZ
BSev
CanvasMetadataNode
CanvasItemNode
CanvasStickyNode
CanvasStickyGroupNode
ColorScheme
CodingKeys
OrangeCodingKeys
YellowCodingKeys
GreenCodingKeys
BlueCodingKeys
PurpleCodingKeys
PinkCodingKeys
GrayCodingKeys
NoHeapTextureAllocator
UnusedTexture
System
GPUSystem
ParticleSizeInit
CodingKeys
KeyValueMap
linearizeDepth
DepthPrepareSystem
EntityFamily
ParticleClassSpawnID
ParticleSpawnID
CodingKeys
RenderVariant
RenderVariantDescriptor
RenderPass
Dimension
IBLGeneratorSystem
IBLGenerator
IBLRuntime
CodingKeys
VFXCoreCameraProjectionDirection
VFXCoreCamera
ComponentStorageLayout
ComponentLayout
FixedArray10
FixedArray8
@Lo#
__FixedArrayCodableStorage10
__FixedArrayCodableStorage8
CodingKeys
 @\h#
Query6
@ti#
Query5
Query4
Query3
Query1
@4j#
Query2
@dj#
QueryResult1
@Ll#
QueryResult2
@tl#
QueryResult3
QueryResult4
Sc?y
9$(y
 "$&(*,
RGBufferSlice
^]ff
&&*-&&4&6&&R
`>9?
`>9?
8-0?
8-0?
Z&>X
Z&>X
L=333?
fff?
?333?
?333?
US]CQ
^(BM
kZ;&
<null>
<%@ %@>
vfx_generate_grain
--SimplifiedMaterial--
Assertion '%s' failed. Null argument
_encoder == nil
commandBuffer != nil
_encoder != nil
Assertion '%s' failed. Dereferencing null pointer
_ptr != NULL
transform
tessellationFactorScale
maximumEdgeLength
edgeTessellationFactor
insideTessellationFactor
adaptive
screenSpace
tessellationPartitionMode
smoothingMode
<%@: %p, screen space (maximum edge length: %.3f px)>
<%@: %p, local space (maximum edge length: %.3f)>
<%@: %p, uniform (inside: %.3f, edge: %.3f)>
q24@?0@"VFXHitTestResult"8@"VFXHitTestResult"16
v32@?0@"VFXNode"8Q16^B24
v28@?0I8^^{__CFXNode}12^^{__CFXLight}20
Assertion '%s' failed. wrong light type
type < kCFXLightEffectiveTypeCount
Assertion '%s' failed. wrong probe type
CFXLightGetProbeType(light) == kCFXLightProbeTypeIrradiance
CFXLightGetProbeType(light) == kCFXLightProbeTypeRadiance
Error: Too many shadow caster lights at once. Limit is %d
Error: The shadow node is not registered
light
Warning: Should not register a node without light to the light system
Error: Node is already registered to the light system
lightingSpaceMatrix
Assertion '%s' failed. Invalid runtime light index
((rInd > 0) && (rInd <= pipelineData->_runtimeLightsCount)) || (rInd == kDefaultRuntimeIndex)
Error: Invalid runtime light index
v36@?0I8^^{__CFXNode}12^^{__CFXLight}20^{?=}28
v36@?0I8^^{__CFXNode}12^^{__CFXLight}20^28
v36@?0I8^^{__CFXNode}12^^{__CFXLight}20^{?=ffff}28
lightingSystem
Assertion '%s' failed. Not Yet Implemented!!!!
lightNode
Assertion '%s' failed. Light does not casts shadow. Cannot compute shadow parameters.
Assertion '%s' failed. 0 caster index is reserved
casterIndex > 0
Assertion '%s' failed. Max caster index overflow
casterIndex <= kMaxRuntimeShadows
CFXLightingSystem
<CFXLightingSystem %p>
ComputeTangents : Unsupported index size (%zu)
bloom_threshold
Bloom threshold
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/BloomPass.mm
Bloom downsample
Bloom upsample
BLOOM OUTPUT
BLOOM TMP
bloom
Assertion '%s' failed. texture is not a MTLTexture
!texture || [texture conformsToProtocol:@protocol(MTLTexture)]
BLOOM_DOWNSAMPLE_PASS
BLOOM_UPSAMPLE_PASS
Error: Failed to create instance of type %ld. Extra size too large
Error: Failed to create instance of type %@
Assertion '%s' failed. Unsupported conversion info - different TRCs for input components
trcOther == trc
Error: Unsupported conversion info - unsupported TRC type %d
Error: Unsupported conversion info - stage %d of %d will be ignored!
B108@?0{CGColorConversionIteratorData=Iqqqqqq^^{CGColorTRCData}^^{CGColorMatrixData}^^{CGColorNxMTransformData}}8q84q92^q100
Error: Unsupported conversion info - %d color matrices
B100@?0{CGColorConversionIteratorData=Iqqqqqq^^{CGColorTRCData}^^{CGColorMatrixData}^^{CGColorNxMTransformData}}8q84q92
Error: Unsupported conversion info - NxMLUTs not supported
none
float
bool
char
double
float2
float3
float4
float4x4
float3x3
color4
short
half
uchar
ushort
int2
int3
int4
ucharn
charn
10a2n
u10a2n
uchar4
char4
uchar4n
char4n
ushort2
ushort3
ushort4
short2
short3
short4
ushortn
ushort2n
ushort3n
ushort4n
short2n
short3n
short4n
half2
half3
half4
Assertion '%s' failed. unknown type
type < kCFXBaseTypeCount
unknown type
Error: unknown type
Unreachable code: Compound type %s%d is not supported
kCFXBaseTypeUnsignedChar
kCFXBaseTypeUnsignedCharNormalized
kCFXBaseTypeChar
kCFXBaseTypeCharNormalized
kCFXBaseTypeUnsignedShort
kCFXBaseTypeUnsignedShortNormalized
kCFXBaseTypeShort
kCFXBaseTypeShortNormalized
kCFXBaseTypeHalf
kCFXBaseTypeFloat
kCFXBaseTypeInteger
Assertion '%s' failed. Only one compound type per vector
componentCount == 1
Assertion '%s' failed. wrong parameters
bytesPerComponent && componentsCount && floatComponents
Warning: CFXBaseTypeFromDescription - signed/unsigned ambiguity
Error: CFXBaseTypeFromDescription - Type not supported
_dst
Error: CFXAddBaseType - type %d can't be added
Error: CFXAddBaseType - addition of half float not supported
Error: CFXAddBaseType - unknown type
Error: CFXSubBaseType - type %d can't be substracted
Error: CFXSubBaseType - substraction of half float not supported
Error: CFXSubBaseType - unknown type
string
v32@?0@8@16^B24
hw.optional.sse2
hw.optional.sse3
hw.optional.supplementalsse3
hw.optional.sse4_1
hw.optional.sse4_2
hw.optional.avx1_0
hw.optional.fma
Error: failed to load dictionary named %@
Warning: CFXDataFromMTLBuffer - can't read private MTL buffer
/bin/rm
VFXEnableWideGamut
Assertion '%s' failed. Spherical Harmonics Data seems malformed: order(%d) !=> length(%zu)
(order * order * sizePerCoeff) == length
com.apple.vfxstudio
v24@?0q8r^v16
texture1d
texture2d
texture3d
texturecube
sampler
Warning: CFXBaseTypeFromMetalString: unknown type name '%@'
#define %@ %@
Assertion '%s' failed. No node should be tracked anymore by the geometry %@
!geometry->_trackedNodes || !CFSetGetCount(geometry->_trackedNodes)
<%@:%p "%@"
  mesh: %@
  mat%d: %@
address
overrideMaterial
materials
levelsOfDetail
worldRef
input
geometry
material
Assertion '%s' failed. Node should not already been tracked by this geometry
!CFSetContainsValue(geometry->_trackedNodes, node)
Assertion '%s' failed. Node should been tracked by this geometry
geometry->_trackedNodes && CFSetContainsValue(geometry->_trackedNodes, node)
geometry->_trackedNodes
Error: cannot generate points : mismatch between vertices and normals count
Error: Cannot use volume generation on a generic mesh. fallbacking on surface
CFXGeometry
Main
COLOR
DEPTH
VELOCITY
NORMAL
REFLECTANCE ROUGHNESS
RADIANCE
MainCulling
DEPTH_PREPASS
NORMAL_PREPASS
depthPrePass
meshElement
elements
Error: CFXMeshElementCreateByMergingElements - strip not supported
Error: CFXMeshElementCreateByMergingElements - merging elements with different byte per index
Assertion '%s' failed. Mesh element has %d channels but channel %d was requested
channel >= 0 && channel < channelCount
Warning: %s does not support non-renderable topologies.
CFXMeshElementGetIndexCountPerPrimitive
Error: CFXMeshElementGetIndexCount:primitive type not handled
Assertion '%s' failed. Internal consistency error: number of indices should be a multiple of number of channels
indexCount % channelCount == 0
v32@?0I8^I12I20^B24
Unreachable code: unexpected vertex count
Error: unexpected vertex count
Unreachable code: Invalid bytes per index (%d)
Unreachable code: Unknown primitive type %d
CHANNEL %ld/%ld
%4u : %4u %4u %4u
%4u : %4u %4u
%4u : %4u
%2u : [Polygon %4u]
 %4u
CFXMeshElement
<CFXMeshElement %p type:%@ primCount:%d channels:%d indexBytes:%d offset:%d acmr:%f inst:%d dataSize:%d shared:%p>
triangles
triangleStrip
lines
points
polygons
triangleFan
invalid
indexes
subElementsCount
bytesPerIndex
primitiveNormals
bbox[0]
bbox[1]
Error: CFXMeshElementSetPrimitives invalid index buffer size
Error: __readIndexInBuffer - index (%u) out of bounds (%lu)
Assertion '%s' failed. %s - unsupported index size (%ld)
false
__readIndexInBuffer
Forward
PathTracer
Hybrid
Stereo
Holographic
Compute irradiance
CustomAuthoring.Final.Color
Custom
result
pointOfView
auth
Assertion '%s' failed. error in computing triangle bbox
groupIndex == meshElement->_primitiveGroupCount
Assertion '%s' failed. Update %s to support mesh element channels
ctx->_currentIndicesContent.indicesOffset == 0 && ctx->_currentIndicesContent.indicesStride == 1
__ProcessTriangleRange_Mask_Ind16VrtFloat3CullBack
__ProcessTriangleRange_Ind16VrtFloat3CullBack
boneIndicesSrc
v48@?0I8^I12I20I24I28I32I36^B40
Assertion '%s' failed. there should be exactly one transposed matrix in here
vectorCount == 3
q16@?0^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}8
v24@?0^^{__CFXNode}8q16
CFXHitTestResult
<CFXHitTestResult %@ %f,%f,%f>
output
sphere
transformedSphere
modelMatrix
normalMatrix
couple1
couple2
%@-splitContainer
splitContainer
sourceChannels
Assertion '%s' failed. Unsupported element type in CFXMeshCreateByMergingMeshes
Error: CFXMeshSubdivide inconsistency
Assertion '%s' failed. inconsistency (2) in CFXMeshSubdivide
D!=-1 && E!=-1 && F !=-1
positionSource
normalSource
uvSource
Error: Cannot generate tangents without valid positions
Error: Cannot generate valid tangents without valid texture coordinates
Error: Cannot generate valid tangents without valid normals
Unreachable code: Unsupported index size (%zu)
Error: invalid geometry detected - skip CFXCreateTangentsWithGeometryOptimized
Error: target mesh has a different number of vertices (%d != %d)
v16@?0^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}8
Error: Cannot generate tangents without positions
Error: Cannot generate tangents without texture coordinates
Error: error in CFXMeshCreateTangentsIfNeeded
Warning: Cannot create an interleaved copy, count mismatch
v32@?0^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}8c16q20C28
default camera
Unreachable code: CFXAdjustZRangeOfProjectionInfos - no world or no point of view
Unreachable code: CFXAdjustZRangeOfProjectionInfos - no root node
Unreachable code: CFXAdjustZRangeOfProjectionInfos - no world matrix
Assertion '%s' failed. We badly computed zFar (%f) and zNear (%f) in this world
shortestPosition <= farthestPosition
Error: Given sources must be of the same length for interval list creation
element
Assertion '%s' failed. different material!!!!
material == elt->material
Warning: __MergeMeshSources unknown source type
Assertion '%s' failed. __AllocateNewSource - componentsCount is zero
componentsCount!=0
%@-split%d
Assertion '%s' failed. inconsistency in _finalizeSplit
oldIndexToNewIndex[sourceIndex]
Assertion '%s' failed. _finalizeSplit - inconsistent data length
w == count * indexCountPerPrimitive
Assertion '%s' failed. _createSubSource - inconsistent data length
w == dataLength
Error: CFXSourceAccessorCopyDataToAccessor failed
Warning: CFXUnifyNormalsFromGeometry can only process triangles and polygons
Warning: CFXUnifyNormalsFromGeometry empty indices
Assertion '%s' failed. unexpected vertex count
faceVertexCount >= 3
MIPMAP_OUTPUT
Unreachable code: createCFXObject - abstract method called
Assertion '%s' failed. __removeAnimationForKey: cftype is not an entity
CFTypeIsCFXEntity(cfObject)
Error: attempt to add a null animation player on %@
Error: attempt to add a null animation on %@
Assertion '%s' failed. sync animations: cftype is not an entity
focalBlurSampleCount
apertureBladeCount
intensity
scale
slice
isColored
colored
value
averageGray
whitePoint
wantsAdaptation
adaptationBrighteningSpeedFactor
adaptationDarkeningSpeedFactor
adaptationMinimum
adaptationMaximum
toeStrength
toeLength
shoulderLength
shoulderAngle
gamma
saturation
iterationCount
anamorphic
softness
radius
strength
whiteBalanceTemperature
whiteBalanceTint
liftColor
liftOffset
gammaColor
gammaOffset
gainColor
gainOffset
lookupTable
filterQuality
center
fromZ
fromAngle
fromShift
toAngle
toShift
color1
color2
color3
maskCenter
maskRadius
maskEnabled
unMultBlending
HybridRenderer
HybridRenderer input color
HybridRenderer input emission
HybridRenderer input normals
HybridRenderer input albedo
HybridRenderer input roughmetalTarget
HybridRenderer input velocityTarget
HybridRenderer input depthTarget
HybridRenderer input clearCoat
HybridRenderer input subsurface
Output copy
copy
Resource copy
DebugCopy
SSAO-COMPUTE
HasNormalTex
ScreenSpaceRadius
vfx_ssao_compute
SSAOSpatialPass
SSAO_SPATIAL_OUTPUT_TMP
SSAO_SPATIAL_OUTPUT
vfx_ssao_blur_x
vfx_ssao_blur_y
SSAOUpscalePass
SSAO_UPSCALE_OUTPUT
vfx_ssao_upscale
SSAOTracePass
SSAO_TRACE_PASS
SSAO_SPATIAL
SSAO_UPSCALE
rendererElement
VFXShaderModifierEntryPointVertex
VFXShaderModifierEntryPointSurface
VFXShaderModifierEntryPointFragment
VFXShaderModifierEntryPointLighting
Assertion '%s' failed. Must call -[VFXShadableHelper ownerWillDie] before releasing it !
_owner == nil
Error: Cannot use a program because shader modifiers are set
Error: ShaderModifiers - unkwnown supporting class '%@'
Error: Cannot use shader modifiers because a program is set
parameter
v32@?0@"NSString"8@"VFXBufferBinding"16^B24
program
shaderModifiers
minimumLanguageVersion
VFXShadableDidCompileNotificationName
issues
shadableGeometry
shadableMaterial
Error: ShaderModifiers - unkwnown entrypoint '%@'
(//.*|/\*(.|
)*?\*/)
Geometry
Surface
Fragment
LightingModel
%@ // [VFX_%@(%d)]
v24@?0@"NSString"8^B16
com.apple.vfx
PointsOfInterest
com.apple.vfx.showsStatistics
com.apple.vfx.enableCameraControl
com.apple.vfx.batchMaxCount
com.apple.vfx.forceNoAA
com.apple.vfx.disableLinearSpaceRendering
com.apple.vfx.disableWideGamut
com.apple.vfx.enableWideGamut
com.apple.vfx.enablePostMorphUnifyNormals
com.apple.vfx.enableStandardShadersWithFunctionConstants
com.apple.vfx.forceNMOSBehavior
com.apple.vfx.forceOS2019Behavior
com.apple.vfx.forceOS2018Behavior
com.apple.vfx.forceOS2017Behavior
com.apple.vfx.forceOS2016Behavior
com.apple.vfx.verbose
com.apple.vfx.useOneCommandQueuePerDevice
com.apple.vfx.isolateCacheMissShader
v24@?0^{__CFXNode=}8^B16
Assertion '%s' failed. CFXNodeIterateTree : null node
Assertion '%s' failed. CFXNodeIterateTree : no callbacks
callbacks
object
Error: object %@ doesn't conform to the copying protocol
Error: invalid ref count for entity %@
v16@?0^{__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}8
Assertion '%s' failed. Must call GetWorld with an entity
CFTypeIsCFXEntity(object)
Jittering
Jittering input color
Jittering output color
Jittering color input resolve
Unreachable code: Unknown index type %d
v16@?0@"MTLRenderPipelineDescriptor"8
Unreachable code: A tessellator object should not exist when no tessellation is required
Compute VFXModelScreenSpaceAdaptiveTessellator tessellation factors
compute_tessellation_factors_screeenspace_adaptive_uint16
compute_tessellation_factors_screeenspace_adaptive_uint32
Compute kCFXGeometryTessellatorTypeConstrainedEdgeLength tessellation factors
compute_tessellation_factors_constrained_edge_uint16
compute_tessellation_factors_constrained_edge_uint32
v24@?0Q8r^v16
Error: CFXProgramHashCodeStoreRegisterProgramForRendererElement - index out of capacity (%d > %d)
Assertion '%s' failed. CFXProgramHashCodeStoreRegisterProgramForRendererElement - programIndex out of uint32_t. will crash soon
programIndex < 0xffffffff
CFXProgramHashCodeStore
<CFXProgramHashCodeStore %p>
<%@: %p | %u x %@, %u channels, %@ indices>
Unreachable code: VFXMeshPrimitiveTypePolygon not supported with MTLBuffers
Assertion '%s' failed. VFXMeshElement initialization - Invalid data length
data.length >= (NSUInteger)(primitiveCount * bytesPerIndex)
Error: VFXMeshElement initialization - Invalid index size (%ld bytes)
Error: VFXMeshElement initialization - Invalid polygon edge count (%ld)
compressedElementData
elementData
primitiveCount
primitiveRangeLocation
primitiveRangeLength
indicesChannelCount
interleavedIndicesChannels
ptSize
minimumPointScreenSpaceRadius
maximumPointScreenSpaceRadius
pointSize
triangle
triangle strip
line
point
polygon
unknown
v32@?0@"NSValue"8Q16^B24
REFLECTION_PROBE_COLOR_TARGET
REFLECTION_PROBE_DEPTH_TARGET
REFLECTION_PROBE_RADIANCE_TARGET
vfx_draw_fullscreen_cube_layered
vfx_draw_fullscreen_cube
vfx_draw_fullscreen_cube_no_base
cube
equi
dual
vfx_radiance_%s_%s_frag
REFLECTION_PROBE_BOX_BLUR_TARGET
copy_frag
box_blur_frag_%d
vfx_convert_%s_from_%s_frag
REFLECTION PROBE ARRAY
@"<MTLTexture>"8@?0
OLD REFLECTION PROBE ARRAY
ENVIRONMENT TEXTURE
Assertion '%s' failed. Wrong probe type
Assertion '%s' failed. Bad index
probeIndex != (uint32_t)kProbeSliceIndexInvalid
B8@?0
probe[%d] not up to date stamp [%d -> %d] sources [%p -> %p]
v36@?0I8^^{__CFXNode}12^^{__CFXLight}20^{?={?=[3]}}28
REFLECTION_PROBE_RENDER_PASS
REFLECTION_PROBE_RADIANCE_PASS
REFLECTION_PROBE_BOX_BLUR_PASS
REFLECTION_PROBE_CONVERT_CUBE_PASS
Copy probe pass
Clear texture pass
Generate probe mipmap pass
Reflection probe radiance pass
Copy radiance pass
Reflection probe box blur pass
Reflection probe convert cube pass
Reflection probe render pass
CFXLightGetProbeType(lights[i]) == kCFXLightProbeTypeRadiance
Assertion '%s' failed. Wrong light type
CFXLightGetType(light) == kCFXLightTypeProbe
Assertion '%s' failed. Slice index should have been attributed already
outData->parameters.probe.index >= 0
Assertion '%s' failed. first light was not of the same index
ctx.packedIndices.data[fl - 1] == li
Assertion '%s' failed. end index should be set already
pl != 0
Assertion '%s' failed. previous light was not of the same index
ctx.packedIndices.data[pl - 1] == li
Assertion '%s' failed. nextIndex out of range
ctx.nextIndex[i] <= newIndicesCount
ctx.nextIndex[i] <= indicesCount
Assertion '%s' failed. Should be non empty
count > 0
Omni:%d Spot:%d Indices:%luu
debug_omni_vert
debug_light_frag
debug_spot_vert
vfx_draw_fullscreen_quad_vertex
debug_cluster_frag
vfx_draw_fullscreen_quad_VR_pos_vertex
debug_light_indices_8_buffer_frag
debug_cluster_slices_frag
Assertion '%s' failed. range overflow
i < lightRange.y
Authoring
Authoring input color
Authoring input depth
Authoring color input resolve
Authoring depth input resolve
Manipulator
Overlay color input copy
Overlay
stack
Assertion '%s' failed. cannot remove null span
span.count > 0
Assertion '%s' failed. page overflow
(freeSpan->start.index + freeSpan->count) <= page->capacity
page->freeCapacity
Assertion '%s' failed. wrong page selected for span size %d
spanSize <= page->freeMaxSpan
span.start.index + span.count <= page->capacity
Error: RendererElementStore does not support span of more than %d
Assertion '%s' failed. pages are broken...
page->pageIndex == span.start.page
Assertion '%s' failed. handle is broken...
handle.page < allocator->_pageCount
Assertion '%s' failed. re is broken...
(page->pageIndex == handle.page) && (handle.index < page->capacity)
CFXSpanAllocator
<CFXSpanAllocator %p>
CFX-Lighting.metal
_originalLightingSourceCode
__SurfaceExtraDecl__
__LightModifierExtraDecl__
__DoLightModifier__
Assertion '%s' failed. range not found
range.rangeValue.length > 0
CFX-CommonProfile.metal
#import "vfx_metal"
#import "vfx_util.h"
#import "CFX-PBR.metal"
#import "vfx_tessellation.h"
__TexcoordDecl__
__ExtraVaryingsDecl__
__ShaderModifiersDecl__
#import "CFX-Lighting.metal"
__OpenSubdivDeclPerGeometry__
__OpenSubdivDeclPerPatchType__
__OpenSubdivDeclShared__
__VertexExtraArguments__
__VertexDoVertexOnlyTexcoord__
__DoGeometryModifier__
__VertexDoLighting__
__VertexDoTexcoord__
__FragmentExtraArguments__
__FragmentDoTexcoord__
__DoSurfaceModifier__
__LightModifierCopyDecl__
__FragmentDoLighting__
__DoFragmentModifier__
} commonprofile_io;
typedef struct {
_originalSourceCode
%@ %@;
, device %@ %@
, constant %@& %@
, %@ %@
, %@<float> %@
Unreachable code: Argument type not supported %d
_lightingContribution.%@=%@;
%@<float> %@;
modifier
v32@?0@"NSString"8@"NSString"16^B24
%@%@%@
CFX-OpenSubdiv-Utils.h
CFX-OpenSubdiv-Utils.metal
USE_POSITION
USE_MULTIPLE_RENDERING
USE_VERTEX_AMPLIFICATION
USE_INSTANCING
USE_LAYERED_RENDERING
USE_MULTIPLE_VIEWPORTS_RENDERING
USE_IBL_TRANSFORM
USE_MODIFIER_FRAMEBUFFER_COLOR0
CFX_SUPPORTS_PROGRAMMABLE_BLENDING
Error: Invalid shader modifier: programmable blending is not supported by this device
USE_CLIP_DISTANCE3
USE_CLIP_DISTANCE_COUNT
USE_CLIP_DISTANCE2
USE_CLIP_DISTANCE1
USE_CLIP_DISTANCE0
USE_SPECULAR
USE_VIEW
USE_SHININESS
USE_CONSTANT
USE_SHADOWONLY
USE_PBR
, depth2d<float> u_shadowTexture
CFX_USE_ATLAS_FOR_SHADOW_MAP
CFXLightIndexType
CFX_SUPPORT_CUBE_ARRAY
CFX_USE_REFLECTION_PROBES
VFXShadingModelCustom
LIGHTING_MODEL
USE_CLUSTERED_LIGHTING
CFX_USE_TEXTURE_FOR_LIGHT_INDICES
USE_FOG
USE_SSAO
USE_FRESNEL
USE_NORMAL
AVOID_OVERLIGHTING
USE_AMBIENT_LIGHTING
USE_PROBES_LIGHTING
USE_LIGHTING
USE_PER_PIXEL_LIGHTING
USE_MODULATE
USE_PER_VERTEX_LIGHTING
HAS_NORMAL
HAS_VERTEX_COLOR
USE_VERTEX_COLOR
USE_POINT_RENDERING
DISABLE_SPECULAR
USE_LASTFRAMETRANSFORM
USE_MOTIONBLUR
DISABLE_LINEAR_RENDERING
USE_SKINNING
USE_COLOR1_OUTPUT
USE_NORMALS_OUTPUT
USE_REFLECTANCE_ROUGHNESS_OUTPUT
USE_RADIANCE_OUTPUT
USE_OUTLINE
USE_MODELTRANSFORM
USE_GBUFFER_OUTPUT
USE_AMBIENTOCCLUSION_MAP
USE_TANGENT
USE_BITANGENT
USE_PBR_TRANSPARENCY
USE_DOUBLE_SIDED
USE_NODE_OPACITY
DIFFUSE_PREMULTIPLIED
LOCK_AMBIENT_WITH_DIFFUSE
USE_TRANSPARENT
USE_PBR_LAMBERTIAN_REFLECTION
    float2 %@Texcoord;
    _surface.%@Texcoord = in.texcoord%d;
USE_ALPHA_CUTOFF
USE_MODELVIEWTRANSFORM
USE_MODELVIEWPROJECTIONTRANSFORM
USE_SHADER_MODIFIERS
USE_SURFACE_EXTRA_DECL
USE_EXTRA_VARYINGS
vfx_metal
vfx_util.h
CFX-PBR.metal
USE_OPENSUBDIV
HAS_OR_GENERATES_NORMAL
USE_TESSELLATION
vfx_tessellation.h
TESSELLATION_SMOOTHING_MODE_PN_TRIANGLE
TESSELLATION_SMOOTHING_MODE_PHONG
#import
%@%@
%@%@
#if 1 // SHADER_COLLECTION_PREFERS_MONOLITHIC_FILES
#else // SHADER_COLLECTION_PREFERS_MONOLITHIC_FILES
#endif // SHADER_COLLECTION_PREFERS_MONOLITHIC_FILES
#generate "__OpenSubdivDeclShared__.metal"
#generate "__OpenSubdivDeclShared__patchType%d.metal"
USE_VERTEX_EXTRA_ARGUMENTS
USE_FRAGMENT_EXTRA_ARGUMENTS
METAL
DEBUG_PIXEL
USE_ARGUMENT_BUFFERS
USE_REVERSE_Z
////////////////////////////////////////////////
// CommonProfile Shader v%d
    float clipDistance [[clip_distance]] [%d];
} commonprofile_io_vert;
vertex commonprofile_io
commonprofile_io out;
commonprofile_io_vert out;
vertex commonprofile_io_vert
commonprofile_io in;
commonprofile_io io
commonprofile_io_vert in;
commonprofile_io_vert io
_import/%@
#import "%@"
#generate
 -D%@
 -D%@=%@
 -U%@
_unifdef/%@.h
#line
// #line
Error: cannot handle more than one lighting modifier
USE_GEOMETRY_MODIFIER
USE_SURFACE_MODIFIER
USE_FRAGMENT_MODIFIER
USE_LIGHT_MODIFIER
v16@?0^{__CFString=}8
v24@?0r^v8r^v16
Assertion '%s' failed. wrong entry point
CFXShaderModifierGetEntryPoint(shaderModifier) == entryPoint
Error: Invalid shader modifier : no code provided
v32@?0@"NSString"8@16^B24
vfx_node.
USE_
, texture2d<half> u_goboTexture%d
, sampler u_goboTexture%dSampler
, texture2d<half> u_iesTexture%d
, device packed_float2* u_areaPolygonPositions%d
USE_MULTIPLE_RENDERING * %d + amplificationID
USE_MULTIPLE_RENDERING * %d + in.sliceIndex
USE_MULTIPLE_RENDERING * %d + out.sliceIndex
Unreachable code: Multiple rendering is lacking a multiple output vertex streams generator
u_shadowTexture
_lightingContribution.add_directional(vfx_lights[%@], u_goboTexture%d, u_goboTexture%dSampler);
_lightingContribution.add_directional(vfx_lights[%@], %s, %d, %s, u_shadowKernel, %d, %s);
true
_lightingContribution.add_directional(vfx_lights[%@], %s, u_shadowKernel, %d);
_lightingContribution.add_directional(vfx_lights[%@], %s);
_lightingContribution.add_directional(vfx_lights[%@]);
_lightingContribution.add_omni(vfx_lights[%@], %s, u_shadowKernel, %d);
_lightingContribution.add_omni(vfx_lights[%@]);
_lightingContribution.add_spot(vfx_lights[%@], u_goboTexture%d, u_goboTexture%dSampler);
_lightingContribution.add_spot(vfx_lights[%@], %s, u_shadowKernel, %d);
_lightingContribution.add_spot(vfx_lights[%@]);
_lightingContribution.add_ies(vfx_lights[%@], u_iesTexture%d, %s, u_shadowKernel, %d);
_lightingContribution.add_ies(vfx_lights[%@], u_iesTexture%d);
_lightingContribution.add_area_rectangle(vfx_lights[%@], u_areaLightBakedDataTexture);
_lightingContribution.add_area_polygon(vfx_lights[%@], u_areaLightBakedDataTexture, u_areaPolygonPositions%d);
_lightingContribution.add_area_line(vfx_lights[%@], u_areaLightBakedDataTexture);
_lightingContribution.add_area_ellipse(vfx_lights[%@], u_areaLightBakedDataTexture);
_lightingContribution.add_area_ellipsoid(vfx_lights[%@], u_areaLightBakedDataTexture);
Assertion '%s' failed. Infinite lights can only be dir or unranged omni
float2 _%@Texcoord = (vfx_commonprofile.textureTransforms[%d] * float4(_geometry.texcoords[%d], 0., 1.)).xy;
float2 _%@Texcoord = _geometry.texcoords[%d].xy;
float2 texcoord%d;
out.texcoord%d = (vfx_commonprofile.textureTransforms[%d] * float4(_geometry.texcoords[%d], 0., 1.)).xy;
out.texcoord%d = _geometry.texcoords[%d].xy;
USE_TEXCOORD
TEXTURE_TRANSFORM_COUNT
kVFXTexcoordCount
NEED_IN_TEXCOORD0
NEED_IN_TEXCOORD1
NEED_IN_TEXCOORD2
NEED_IN_TEXCOORD3
NEED_IN_TEXCOORD4
NEED_IN_TEXCOORD5
NEED_IN_TEXCOORD6
NEED_IN_TEXCOORD7
%@: %@
objectController.selection%@.%@
selectedValue
vector2
vector3
vector4
matrix4
instance
selectedIndex
%@[%d]
failed to instanciate a %@ with option %@
New %@
failed to instanciate a %@
%@.%@
imageSequence
%@%@
screenSpaceAmbientOcclusion
ssao
{CATransform3D=dddddddddddddddd}
{CGPoint=dd}
{CGSize=dd}
{?=fff}
{?=ffff}
@"NSString"
@"NSColor"
@"NSArray"
@"VFX
olor
ontent
mage
VFXUITreeDidChange
CFX-Grid.metal
_layerRoot
_overlayLayerRoot
_lightRoot
_cameraRoot
_effectRoot
_forceFieldRoot
_pointsOfViewRoot
v24@?0@"VFXNode"8^B16
Perspective
Bottom
Left
Right
Front
Back
_authoringCamera%s
Error: light node already has an authoring node - skip
lightAuth
Error: effect node already has an authoring node - skip
particlesAuth
kVFXFreeViewCameraName
cameraAuth
cameraFrustumAuth
cameraNearPlaneAuth
cameraFocusPlaneAuth
Error: forceField node already has an authoring node - skip
fieldAuth
VFXDebugLightTypeKey
VFXDebugLightSubTypeKey
lightInnerAuth
lightOuterAuth
lightArrowAuth
lightShadowAuth
lightSpotAuth
probeGeometry
lightProbeExtents
vfx_probesphere_from_sh_vertex
vfx_probesphere_from_sh_fragment
Error: SH order unsupported : %d
v40@?0@"<VFXBufferStream>"8@"VFXNode"16@"<VFXShadable>"24@"VFXRenderer"32
probe
lightAreaAuth
disabled
oa:%f ia:%f e:%f scale:%f
AuthEnvHash
v32@?0@8Q16^B24
location
kGeometrySourceSemanticPosition
kGeometrySourceSemanticNormal
kGeometrySourceSemanticColor
kGeometrySourceSemanticTexcoord
padding
normal
texcoord
textangent
joints
weights
commonProfile
kAnimationsKey
kBindingsKey
kLightKey
kDeformerStackKey
kCameraKey
kCameraEffectKey
kPhysicsBodyKey
kForceFieldKey
kConstraints
kAudioPlayer
kLightmapInfoKey
kRenderingPriorityKey
kShaderModifiers
kShadableMinimumMTLLanguageVersionKey
kPivotKey
kFilterKey
kBehaviorGraph
kParticleEmitter
kParticleCollider
meshElements
genericSource
image
animation
skin
morph
linear
easeIn
easeOut
easeInEaseOut
function
cullBack
cullFront
constant
phong
emission
diffuse
reflective
transparent
multiply
ambientOcclusion
selfIllumination
metalness
roughness
displacement
clearCoat
clearCoatRoughness
clearCoatNormal
subsurface
subsurfaceRadius
diffuseColor
shininess
indexOfRefraction
fresnelExponent
transparencyMode
minFilter
magFilter
mipFilter
wrapS
wrapT
wrapP
anisotropy
frustumCulling
defaultLight
defaultCamera
maxInFlightFrameCount
rootNode
mirrorNode
factor
kHitTestFirstFoundOnly
kHitTestSearchMode
kHitTestSortResults
kHitTestClipToZRange
kHitTestSkipTransparentNode
kHitTestSkipHiddenNode
kHitTestSkipParticleEmitter
kHitTestCategoryBitMask
kHitTestBackFaceCulling
kHitTestBoundingBoxOnly
kHitTestIgnoreChildNodes
kHitTestRootNode
kHitTestAllLayers
kHitTestLayerMask
kHitTestShowDebugInfo
kHitTestIgnoreLockedNodes
kHitTestResultIgnoreLightArea
kCFXNotificationMeshSourceWillDie
kCFXNotificationMeshElementWillDie
kCFXNotificationImageWillDie
kCFXNotificationImageProxyWillDie
kCFXNotificationProgramWillDie
kCFXNotificationGeometryWillDie
kCFXNotificationMorphWillDie
kCFXNotificationSkinWillDie
kCFXNotificationDeformerStackWillDie
kCFXNotificationDeformerStackDidChange
kCFXNotificationMaterialWillDie
kCFXNotificationMeshWillDie
kCFXNotificationNodeWillDie
kCFXNotificationPassWillDie
kCFXNotificationRasterizerStatesDidDie
kCFXNotificationEngineContextInvalidatePasses
kCFXNotificationProfileWillDie
kCFXNotificationEntityAttributeDidChange
kCFXNotificationRendererElementWillDie
kCFXNotificationProgramHashCodeWillDie
kCFXShadableDidChange
kCFXNotificationPrecomputedLightingEnvironmentWillDie
triggerOptionsForRealtimeViewer
kCFXWorldDidUpdateNotification
matrix
translation
rotation
orientation
eulerAngles
quaternion
pivot
filters
focalDistance
dofIntensity
orthographicScale
firstMaterial
selfIlluminationOcclusion
litPerPixel
alphaCutoff
contents
contentsTransform
shadowIntensity
gobo
probeEnvironment
attenuation
spotInnerAngle
spotOuterAngle
spotFalloffExponent
morpher
particleEmitter
particleCollider
background
environment
customProperty
PostProcess color input resolve
PostProcess depth input resolve
lensBlur
PostProcess
Post process input color
Post process input depth
Post process input normal
Post process input radiance
Post process input reflectance roughness
Post process input velocity
vertexCrease
edgeCrease
meshSource
Assertion '%s' failed. No more than 4 components for mesh source value types
componentCount <= 4
Error: Morph: target vertex count do not match base vertex count (%d != %d)
bse.ptr
tgt.ptr
dlt.ptr
baseSource
intervalList
Error: MeshSource packing only supports non interleaved float sources
Assertion '%s' failed. Provided mesh element is not an interval list
ind.type == kCFXMeshElementTypeLinesArray
Error: Conversion from other types than float is not supported
Error: Conversion of an interleaved source is not supported, please convert your sources before interleaving
Error: CFXMeshSourceCreateCopyWithComponentsBaseType: unsupported type
Error: Conversion from %@ to %@ to is not supported
%4d : %3d %3d %3d %3d
%4d : %+.2f %+.2f
%4d : %+.2f %+.2f %+.2f
%4d : %+.2f %+.2f %+.2f %+.2f
type debugging not implemented
CFXMeshSource
<CFXMeshSource %p(%@) data:(%p) mut:%d count:%ld type:%@ divisor:%d mtl:%d offset:%d stride:%d
accessor
MB-Color
Final Blur
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/MotionBlurPass.mm
vfx_draw_fullscreen_triangle_VR_pos_uv_uvNorm_vertex
vfx_motionblur_blur
vfx_motionblur_blur_resize
Neighbor max
vfx_motionblur_neighbormax_x
vfx_motionblur_neighbormax_y
MB-TileMax
Motion blur tile max
vfx_motionblur_tilemax
VELOCITY COPY
Copy velocity input
COLOR COPY
Copy color input
MOTION_BLUR_TILE_MAX_BLUR
MB-TileMaxN-X
MOTION_BLUR_NEIGHBOR_MAX
MB-TileMaxN-XY
MOTION_BLUR_FINAL_BLUR
animationPlayer
animationNode
animationManager
CFXAnimationPlayer
<CFXAnimationPlayer %p>
speed
blendFactor
manager
Assertion '%s' failed. _CFXAnimationManagerAddAnimationNode - cluster not expected
CFGetTypeID(animationNode) != CFXAnimationClusterNodeGetTypeID()
Warning: fail to setup the animation - won't be added to the animation stack
Assertion '%s' failed. _CFXAnimationManagerAppendCallback triggered while animation manager is muted
manager->_mute == false
Assertion '%s' failed. CFXAnimationManagerUpdateConstantCount
manager->_constantStackCount >= 0
Assertion '%s' failed. CFXAnimationManagerNeedsRedraw - inconsistant constant count
stackCount >= animationManager->_constantStackCount
root
rootObject
storage
Error: Binding: Unable to resolve destination keypath: %@(%@)
Error: Binding: Trying to bind two incompatible keypaths: %@(%@) -> %@(%@)
VFXBindingValueTransformerKey
B32@?0@8Q16^B24
CFXAnimationManager
<CFXAnimationManager %p>
Assertion '%s' failed. CFXAnimationManagerNewStackWithKey key already exist
CFDictionaryContainsKey(manager->_targetAddressToStackIndex, (void*)key) == false
Assertion '%s' failed. unexpected semantic
animationNode->_target->_semantic != kCFXTypeSemanticNone
modelValueStorage
Error: implicit animation count overflow
Assertion '%s' failed. CFXAnimationManagerNewStackWithKey key doesn't exist
CFDictionaryContainsKey(manager->_targetAddressToStackIndex, (void*)key) == true
removedIndex
lastIndex
stackItem->_modelValueItem
q16@?0^{__CFXNode=}8
Assertion '%s' failed. Inconsistency in _CFXAnimationManagerRemoveAnimationNode: triggered while applying animations
manager->_applying == false
Assertion '%s' failed. CFXAnimationManagerRemoveAnimationNode removing an animation while applying
manager->_applying==false
Assertion '%s' failed. _CFXPreviousKeyIndexForTime - unexpected integer division
middle >= 0
controller
Error: CFXKeyframeControllerSetKeyframeAtIndex - time is NaN
Error: CFXKeyframeControllerRef - index out of bounds
controller->_values
controller->_evaluate
Assertion '%s' failed. CFXKeyframeControllerEvaluateAtTime animation has no key
controller->_keyCount > 0
Warning: can't simplify keyframes because of cubic interpolation
Warning: can't simplify keyframes because of tcb values
CFXKeyframeController
<CFXKeyframeController %p>
keyCount
Warning: _CFXKeyDistance - can't compute key distance for type %d
Error: %@ does not support jittering
ManipulatorWireframe_vert
ManipulatorWireframe_frag
Unreachable code: Unknown VFXWorldRenderer conforming class
Error: Cannot append manipulator vertex data because we encountered an overflow and we are not allowed to flush
Assertion '%s' failed. A mesh should have been allocated by now
glInfo->mesh != NULL
Assertion '%s' failed. Can not nest two Timed record
authoringEnvironment->_timedRecordingExpirationTime == 0
Warning: ring buffer is full [%d/%d]
Assertion '%s' failed. start != end
start != end
Assertion '%s' failed. Found crease element with more than 1 channel
CFXMeshElementGetIndicesChannelCount(creaseElement) == 1
VFX - Draw Statistics
v32@?0^q8^{CGSize=dd}16^^{?}24
v24@?0{CGSize=dd}8
Animations
Physics
Constraints
Delegate
Rendering
--- ms
%2.1f s
%2.1f ms
BGRA8Unorm_sRGB
BGRA8Unorm
RGBA16Float
RGBA32Float
$4$ %@  $5$ %@
%dfps
Assertion '%s' failed. Only GL_LINES and kCFXManipulatorDrawModeTriangles are supported
Assertion '%s' failed. basevertex should be 0 here.
glInfo->baseVertex == 0
Assertion '%s' failed. Base index should be reset at this point
glInfo->baseIndex == 0
ManipulatorColorAndTexture_vert
ManipulatorColorAndTexture_frag
ManipulatorColorOnly_vert
ManipulatorColorOnly_frag
ManipulatorLightProbe_vert
ManipulatorLightProbe_frag
Unreachable code: Unknown use of manipulators
Assertion '%s' failed. There should be at lease a valid CFXRendererContext or a valid VFXRenderer
Assertion '%s' failed. No program for the auth env!
glInfo->weakProgram != nil
Assertion '%s' failed. __appendRect2D: uv but not texture
glInfo->textureImage != nil
Assertion '%s' failed. __appendRect2D: no uv but texture
glInfo->textureImage == nil
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
Error: Unable to create context
%2.1fms
%.3gK
%.3gM
%.3gG
timingFunc
CFXTimingFunction
<CFXTimingFunction>
VFXFlyCameraControllerForwardKeyCodeKey
VFXFlyCameraControllerBackwardKeyCodeKey
VFXFlyCameraControllerLeftKeyCodeKey
VFXFlyCameraControllerRightKeyCodeKey
Camera
NSScrollWheelMultiplier
Warning: _computeTranslationOrigin3DFromPoint: invalid zRange
Warning: Warning: no CFXIntersectionRay3Plane
Assertion '%s' failed. CFXAnimationStackInit called twice
animationStack->_valid == false
animationStack
Assertion '%s' failed. CFXAnimationStack invalid
animationStack->_valid == true
Assertion '%s' failed. unexpected animation node class
CFGetTypeID(animationNode) == CFXAnimationClusterNodeGetTypeID()
Assertion '%s' failed. unexpected size
animationCluster->_keyframes->_valueSize[index] == CFXSizeOfBaseType(target->_baseType)
anim
outputAddress
dest
CFXKeyframedAnimation
<CFXKeyframedAnimation %p>
child
node->_cumulativeCache
Error: CFXAnimationNodeChangeSpeed - can't ensure animation continuity since animation manager is dead
animationGroup
animationCluster
CFXAnimationNode
Assertion '%s' failed. Completion item will be released without having handled a completion or interruption event. This can lead to an inconsistent state.
node->_completionItem == NULL
<CFXAnimationNode %p>
CFXAnimationClusterNode
<CFXAnimationClusterNode %p>
Error: Cannot build cubemap from array of images because image at index %d is NULL
Error: Cannot build cubemap from array of images because image at index %d is not square: %fx%f
Error: Cannot build cubemap from array of images because image at index %d (%fx%f) does not have the expected size (%zux%zu)
Error: Cannot build cubemap from array of images because conversion to CGImageRef of image at index %d failed
Error: Cannot build column cubemap from non-cubemap image
Warning: Failed to create bitmap context for CG image %@
Assertion '%s' failed. Can't get name for non catalog texture
image->_sourceType == kCFXImageSourceTypeCatalogTexture
size
MDLMemoryMappedData
Error: failed to map image data for image inside %@
Error: failed to resolve image inside %@
Error: Failed to create image source from data %@
Error: Failed to create image from image source %@ (status: %d)
missingMaterialImage
Assertion '%s' failed. CFXImageCacheBitmap context is not null when it should be
image->_bitmapContext==NULL
Error: failed to create a CGBitmapContext from a CGImage for %@
Error: Unknown cubemap image type
Error: Cannot support rotation layout for compressed texture
Error: Unknown Texture3D image type
Assertion '%s' failed. image has already compression infos
image->_textureRawData == NULL
CFXImage
<CFXImage %p src:%@ [%fx%f]>
<CFXImage %p src:%p [%fx%f]>
cgImage
clientImage
bitmap
hasAlpha
Error: Failed to load %@
DOUGHNUT_BOKEH_OUTPUT
mask_enabled
doughnut_bokeh
DoughnutBokehPass
minificationFilter
magnificationFilter
maxAnisotropy
textureSampler
CFXTextureSampler
<CFXTextureSampler>
nearest
clamp
repeat
clampToBorder
collisionBitMask
results
backfaceCulling
closest
Error: physicsWorld::preTick - no world
Error: physicsWorld::preTick - no vfxscene
v24@?0@"VFXPhysicsBody"8^B16
gravity
ccdPenetration
Error: convexSweep only works with convex shapes
Assertion '%s' failed. Node should be visible
CFXNodeIsHidden(nodeRef) == false
timeStep
Assertion '%s' failed. update should not be called if not implemented by the delegate
_implementDidUpdateContact
_implementDidEndContact
Warning: PhysicsWarn: %s
Skinning
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/AppleEngine/CFXEngineContext.m
v16@?0r^v8
Info: Reload Shaders
Environment cube
CFXEngineContextLoadCustomRenderGraph
context->_pointOfView
Quad
index < CFXRenderingEyeMaxCount
Unreachable code: CFXEngineContextGetTextureFromHandle - no render context
Unreachable code: CFXEngineContextGetTextureWithName
Unreachable code: CFXEngineContextGetTextureForMaterialProperty
eye < CFXRenderingEyeMaxCount
Assertion '%s' failed. wrong viewport
viewport.z > 0 && viewport.w > 0
CFXEngineContext
<CFXEngineContext>
Format: %@ ; Size: %gx%g[%d] ; Texture: <%p> ; [rc:%ld/ts:%ld]
Name: %@ ; %@
CHROMATIC_TRANSFORM_COMPOSITE_BLOOM_OUTPUT
chromatic_transform_composite_bloom
CHROMATIC_TRANSFORM_OUTPUT
sample_count
chromatic_transform
chromaticTransform
ChromaticTransformCompositeBloomPass
ChromaticTransformPass
CHROMATIC_TRANSFORM_COMPISTE_BLOOM_PASS
BACKFACE_DEPTH
COLOR_DOWNSAMPLE
DEPTH_DOWNSAMPLE
SSRDownSample
vfx_ssr_downsample_depth
LOBE_FOOTPRINT
SSREnableFog
vfx_ssr_raytrace_vert
vfx_ssr_raytrace_frag
SSR BLUR OUTPUT 
vfx_ssr_blur_y
vfx_ssr_blur_x
vfx_ssr_composite_frag
SSR backface depth
SSR COLOR COPY
Copy downsample color input
DOWNSAMPLE DEPTH INPUT
Copy downsample depth input
SSR downsample
RAYTRACE NORMAL INPUT
Copy raytrace normal input
SSR raytrace
SSR blur X
SSR blur Y
REFLECTANCE ROUGHNESS COPY
Copy reflectance roughness input
RADIANCE COPY
Copy radiance input
SSR composite
SSR Composite output
SSR_DEPTH_BACKFACE_PASS
SSR_DOWNSAMPLE_PASS
SSR_BLUR_PASS
commonprofile_frag
commonprofile_vert
Unreachable code: Invalid CommonProfile generator
hashcode
Warning: Failed to create program for hashcode %@: %@
trackedResource
Error: CFXCommonProfileProgramReleaseHashCode can't find cache for tracked resource
Error: unknown material property type
USE_%@
USE_%@_COLOR
USE_%@_INTENSITY
USE_%@_TEXTURE_COMPONENT
USE_%@TEXCOORD
USE_%@_MAP
USE_%@_CUBEMAP
Assertion '%s' failed. wrong notification sent
CFEqual(name, kCFXNotificationProfileWillDie)
maximumAngularLimit1
maximumAngularLimit2
maximumTwistAngle
frameA
frameB
pingPongTex
vfx_jittering_color_attachment
vfx_jittering_texture
vfx_jittering_color_attachment_drawable
vfx_jittering_texture_drawable
Assertion '%s' failed. Count should be > 0
rgba
rgba8
rgba8unorm
rgba8snorm
rgba8s
rgba8uint
rgba8ui
rgba8sint
rgba8i
rgba16
rgba16unorm
rgba16snorm
rgba16s
rgba16uint
rgba16ui
rgba16sint
rgba16i
rgba16float
rgba16f
rgba32
rgba32uint
rgba32ui
rgba32sint
rgba32i
rgba32float
rgba32f
rg8unorm
rg8snorm
rg8s
rg8uint
rg8ui
rg8sint
rg8i
rg16
rg16unorm
rg16snorm
rg16s
rg16uint
rg16ui
rg16sint
rg16i
rg16float
rg16f
rg32
rg32uint
rg32ui
rg32sint
rg32i
rg32float
rg32f
r8unorm
r8snorm
r8uint
r8ui
r8sint
r16unorm
r16snorm
r16s
r16uint
r16ui
r16sint
r16i
r16float
r16f
r32uint
r32ui
r32sint
r32i
r32float
r32f
bgra8unorm
bgra8
depth16unorm
depth16
depth24unorm
depth24
depth32float
depth32f
depth24unorm_stencil8
depth32float_stencil8
stencil8
framebufferColor
r8Unorm
r8Snorm
r8Uint
r8Sint
r16Unorm
r16Snorm
r16Uint
r16Sint
r16Float
r32Uint
r32Sint
r32Float
rg8Unorm
rg8Snorm
rg8Uint
rg8Sint
rg16Unorm
rg16Snorm
rg16Uint
rg16Sint
rg16Float
rg32Uint
rg32Sint
rg32Float
bgra8Unorm
rgba8Unorm
rgba8Snorm
rgba8Uint
rgba8Sint
rgba16Unorm
rgba16Snorm
rgba16Uint
rgba16Sint
rgba16Float
rgba32Uint
rgba32Sint
rgba32Float
depth16Unorm
depth24Unorm
depth32Float
VFX - Draw wireframe
commonProfileHashCode
introspectionDataPtr
programDelegate
CFXFXProgram
<CFXFXProgram %p [vertex:`%@` fragment:`%@` macros:%@]>
v24@?0^{__CFString=}8r^v16
CFXRasterizerStates
states
Assertion '%s' failed. Calling CFXRasterizerStatesCFFinalize outside of CFXReleaseRasterizerStates probably direct call to CFRelease
!vfx_mutex_trylock(&s_RasterizerStatesRegistryLock)
Assertion '%s' failed. RasterizerStates should be in the registry
CFSetContainsValue(s_RasterizerStatesRegistry, cf)
<CFXRasterizerStates %p> ZRead:%d ZWrite:%d ZFunc:%d cull:%d fill:%d
imageProxy
imageProxy->_callbacks.getCaptureDeviceInfo
textureProxy
CFXImageProxy
<CFXImageProxy>
CFXTextureProxy
<CFXTextureProxy>
VFX could not attribute memory (mach_memory_entry_ownership failed)
Warning: Warning _lightNodes not NULL in CFXEnginePipelineSetup
attribute
v16@?0^{__CFXEngineContext=}8
Assertion '%s' failed. wrong notification type
notifications._eventType == kCFXNotificationEventType_Node
notifications._eventType == kCFXNotificationEventType_Material
notifications._eventType == kCFXNotificationEventType_Geometry
notifications._eventType == kCFXNotificationEventType_Light
engineIterationContext
name == kCFXNotificationNodeWillDie
enginePipeline
pipeline
renderGraph
Error: unexpected renderer element with no material/renderGraph/program
CFXEnginePipeline
<CFXEnginePipeline %p>
Unreachable code: Unsupported node attribute '%@'
Assertion '%s' failed. no render elements have been created
deformers
v28@?0^{__CFXDeformerStack=}8^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}16C24
Error: _applyDeleteEntities - can't find entity
Error: _applyDeleteEntities - registry does not exist
Error: _applyNewEntityForNode - node already has an entity
Error: _applyUpdateComponentForNode - entity registry doesn't exist
Error: _applyUpdateComponentForNode - can't find entity for node %@
Assertion '%s' failed. CFXTriangle3PointAtIndex: index out of bounds (%d)
index < 3
Warning: CFXTriangle3BarycentricCoordinates: unable to solve the equation
Assertion '%s' failed. CFXTransformGetValue offset out of bounds
offset < 4
Error: CFXTransformGetValue - unexpected semantic
Assertion '%s' failed. CFXTransformSetValue unexpected size
size == sizeof(float)
Error: CFXTransformSetValue unexptected component index %d
Error: CFXTransformSetValue - unexpected semantic
Assertion '%s' failed. CFXTransformSetValue offset out of bounds
Assertion '%s' failed. _updateMatrix - no valid rep
_affineValid(t)
Assertion '%s' failed. _updateMatrix - already valid
!_matrixValid(t)
Assertion '%s' failed. _updateAffine - no valid rep
_matrixValid(t)
Assertion '%s' failed. _updateAffine - already valid
!_affineValid(t)
Assertion '%s' failed. _updateAffineScale - no valid rep
Assertion '%s' failed. _updateAffineScale - already valid
Assertion '%s' failed. _updateAffineRotation - no valid rep
Assertion '%s' failed. _updateAffineRotation - already valid
BackBufferPass
is_color
is_depth
vfx_back_buffer_copy
DepthBackBuffer
ColorBackBuffer
backBufferTarget
DDGIPass
rays_per_probe
temporal_factor
probe_grid
has_IBL
light_count
raytracing_use_function_constant
use_depth_test
is_depth_pass
probe_res
vfx_ddgi_raytrace
DDGI_irradiance_0
DDGI_irradiance_1
vfx_ddgi_update
vfx_ddgi_border
DDGI_depth_0
DDGI_depth_1
DDGIDebugPass
DDGI Debug output
show_probes
probe_debug_scale
vfx_debug_ddgi
DDGI_DEBUG_PASS
v16@?0@"NSTimer"8
Error: Point of view has custom projection.
Unreachable code: Layered rendering is lacking a multiple output vertex streams generator
Unreachable code: Not implemented
Unreachable code: Vertex amplification shouldn't be active
Error: _createConstraint not implemented for %@
Error: leaking physics constraint
Error: _addToPhysicsWorld - already in a world?
Error: _addToPhysicsWorld - already added?
bodyA
bodyB
Error: set transform not implemented on %@
Error: set world transform not implemented on %@
MetalFXUpscalePass
MetalFXUpscalePassOutput
com.apple.vfx.jitteringUpdateQueue
Assertion '%s' failed. invalid iteration count
_iteration <= CFXJitteringIterationCount
DebugCopyStereoPass
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/DebugCopyStereoPass.mm
debug_copy_stereo
computeProgramHashCodes
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/SceneRenderer.mm
computeProgramHashCodeForRendererElement
visibleElements
sync and sort
process rendererElements
objcConstraint
CFXAvoidOccluderConstraintDelegate
<CFXAvoidOccluderConstraintDelegate %p>
v28@?0f8r^{Triangle=}12r^20
B20@?0^8I16
Assertion '%s' failed.  - Only vector3 type is supported.
vertices.type == kCFXBaseTypeVector3
Warning: Slider can only process triangles.
vertexCountPerPolygon >= 3
positions.type == kCFXBaseTypeVector3
Warning: Occluder can only process triangles.
CFXConstraintSlider
<CFXConstraintAcceleration>
CFXConstraintAvoidOccluder
<CFXConstraintAvoidOccluder %p>
aoCoord
lightmapCoord
bitangent
Error: CFXImageToMDLTexture not supported for image 3D
Warning: Failed to create cubemap from Model I/O texture
kMDLAssetDefaultUSDColorSpace
usdz
VFX_MDLCurrentAssetResolver
While creating VFXSkinner: Could not find VFXNode %@
Assertion '%s' failed. Found in-between morph target with influence weight of %f
influenceWeightNumber.floatValue < 1.f
morpher.weights[%d]
VFXMDLAssociatedObject
Warning: Warning: unable to flip non-float2 texture coordinates, skipping
B32@?0@"VFXMeshSource"8Q16^B24
blendShape%d
normal%d
textureCoordinate%d
color%d
baseColor
metallic
%@_%d
AO_%@_%@.png
@"NSString"16@?0@"VFXNode"8
v32@?0@"VFXNode"8@"VFXModel"16@"NSArray"24
aoTexture
lightmapTexture
Error: unknown MKGeometryType
/tmp/ModelKit_AO_%@.png
fstop
Error: a MDLObject has more than 1 child mesh - not supported
Error: failed to find MKMaterial corresponding VFXMaterial
/%@.position
/%@.orientation
/%@.scale
Bad joint path detected for joint: %@
Error: Unknown Model I/O semantic %@
kSceneSourceUSDIgnoreVertexColors
positionAttribute
offset=%d&size=%d
Warning: ignoring white emission color from ModelIO
LightCount
quality_mode
vfx_rt_subsurface_trace
RTSubsurfaceTracePass
RTSubsurfaceUpscalePass
vfx_rt_subsurface_upscale
SubsurfaceUpscale
RTSubsurfaceTemporalDenoisePass
vfx_rt_subsurface_temporal_denoise
RTSubsurfaceSpatialDenoisePass
vfx_rt_subsurface_spatial_denoise
pingPongTex0
pingPongTex1
RT_SUBSURFACE_TRACE
RT_SUBSURFACE_UPSCALE
RT_SUBSURFACE_TEMPORAL_DENOISE
RT_SUBSURFACE_SPATIAL_DENOISE
Error: ranges and strings arrays must be of the same size
Error: ranges must be ordered
Error: incorrect ranges : cumulated size larger than the original string
Main::Setup
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/RenderElementsPass.mm
Main::Prepare
Main::Render
LINEAR_DEPTH
linearize_depth2
v16@?0@"NSObject"8
Copy input color
Copy input depth
DEPTH PREPASS
Depth prepass
Linearize depth
RENDER_ELEMENT_PASS
LINEARIZE_DEPTH_PASS
profile
VFXShadingModelConstant
VFXShadingModelPhong
VFXShadingModelNone
VFXShadingModelShadowOnly
VFXShadingModelPhysicallyBased
VFXhadingModelInvalid
Assertion '%s' failed. CFXCommonProfileGetHashCode: inconsistency error
commonProfile->_shadingModel < CFXShadingModelCount && CFXShadingModelCount < 15
materialProperty
Assertion '%s' failed. invalid content type
materialProperty->_contentsType == kCFXContentTypeAsset
CFXCommonProfile
<CFXCommonProfile %p :
 shadingModel:%@
 perPixelLit:%d
 transparencyMode:%d
Emission
Diffuse
Specular
Reflective
Transparent
Filter
Normal
Ambient Occlusion
Self Illumination
Metalness
Roughness
ClearCoat
ClearCoatRoughness
ClearCoatNormal
Subsurface
SubsurfaceRadius
Displacement
Shininess
Fresnel
[%@] texture:%d xform:%d
shadingModel
imagesCount
Error: orphan effect common profile detected
Assertion '%s' failed. LightingEnvironment not set on a Light or a World
typeID == CFXWorldGetTypeID()
CFXMaterialProperty
<CFXMaterialProperty>
mtltexture
precomputedLightingEnvironment
uvSet
CA texture source
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/ObjC/Texture sources/Custom sources/VFXCoreAnimationSource.m
Error: VFXTextureCoreAnimationSource::textureProxy -> no layer
thresholdType
CFXLOD
<CFXLOD>
Assertion '%s' failed. We do not support appending to really complicated interleavings
(size_t)CFDataGetLength(data) == stride * CFXSourceAccessorGetCount(accessor)
Error: CFXMeshSourceAppendVector3 - Type not supported
Error: CFXMeshSourceAppendVector2 - Type not supported
Error: CFXMeshSourceCreate: unsupported type
Assertion '%s' failed. Cannot set volatile data of a non volatile source
CFXMeshSourceIsVolatile(source)
<%@: %p>
coreHandle
rootIdentifier
Error: unsupported SH order
probesSystem->_probesCapacity
probesSystem->_probesPositions
Assertion '%s' failed. _computeNeighbourIndexes - missing tetrahedron
tetrahedronIndexes
Assertion '%s' failed. overwrite a neighbour index
_tetrahedrons[tetraderonIndex].neighbourIndexes[otherTetraderonFaceIndex] == -1
Assertion '%s' failed. wrong data size for SH
sh_sizeof(shOrder) == (size_t)CFDataGetLength(irradianceSH)
Assertion '%s' failed. Should never have been outside the tetras
lastIndex != (uint32_t)-1
cacheIndex
sh_sizeof(shOrder) == (size_t)shLength
CFXLightProbesSystem
<CFXLightProbesSystem %p>
Error: _buildTetrahedrons - failed with first tetrahedron
Error: tetrahedrisation: index out of bounds
Assertion '%s' failed. will make an invalid tetrahedron valid
tetrahedronIsValid[indexValid]
Assertion '%s' failed. validTetraCount > indexToRecycle
validTetraCount <= (uint32_t)indexToRecycle
Assertion '%s' failed. _faceHasEdgeSharedWithMoreThanTwoOtherOpenFace
vCount <=2
Assertion '%s' failed. memory smasher found in CFXEdgeArrayCreateFromMeshElement (%ld != %ld)
edgeCount == edges->_count
Assertion '%s' failed. CFXEdgeArrayGetEdgeAtIndex index out of bounds
index < edges->_count
array
vertices
Assertion '%s' failed. CFXTriangulationInfoCreateFromMeshElement - edge out of bounds
edgeIndexesPerFaceCounter[j] <= 2
info
CFXEdgeArray
<CFXEdgeArray>
CFXTriangulationInfo
<CFXTriangulationInfo>
MeshElementEditor
Error: CFXMeshElementEditorCreateWithMeshElement: mesh element is not a triangle array
Error: _CFXMeshElementEditorSetIndex unknown bytes per index
editor
Error: CFXMeshElementEditorSubdivideTriangleAtIndex: triangleIndex out of bounds
CFXMeshElementEditor
<CFXMeshElementEditor>
vfx_rt_indirect_diffuse_trace
distanceTex
RTIndirectDiffuseTracePass
RTIndirectDiffuseSpatialReSTIRPass
spatial_pass_id
vfx_rt_indirect_diffuse_spatial_restir
RTIndirectDiffuseUpscalePass
vfx_rt_indirect_diffuse_upscale
IndirectDiffuseUpscale
RTIndirectDiffuseTemporalDenoisePass
vfx_rt_indirect_diffuse_temporal_denoise
RTIndirectDiffuseSpatialDenoisePass
vfx_rt_indirect_diffuse_spatial_denoise
RT_INDIRECT_DIFFUSE_SPATIAL_RESTIR
RT_INDIRECT_DIFFUSE_UPSCALE
RT_INDIRECT_DIFFUSE_TEMPORAL_DENOISE
RT_INDIRECT_DIFFUSE_SPATIAL_DENOISE
overrides
presentation
Error: inconsistency - material count doesn't match - can't diff reference node
geometry.materials[%d]
Error: inconsistency - material has custom properties - can't diff reference node
Error: inconsistency - hierarchy doesn't match - can't diff reference node
[%d]
Error: inconsistency - hierarchy changed - can't diff reference node
Error: failed to parse key path %@ - missing '['
Error: failed to parse key path %@ - missing ']'
Error: failed to evaluate key path %@ - material index %d out of bounds (%d)
Error: failed to locate world reference %@
VFXReferenceLoadingStack
Error: failed to resolve referenced world (%@) cycle detected
<%@: %p source=%@>
referenceURL
referenceNode
loadingPolicy
childNodes
Error: VFXMTLRenderContext initWithDevice : device should not be nil
Error: VFXMTLRenderContext initWithDevice : cannot create a command queue. Bailing out.
com.apple.vfx.resourceCPUQueue
FrameConstant
Volatile
background_2D_vertid
background_2D_frag
background_cube_vertid
background_cube_frag
background_video_vertid
background_video_frag
background_2D_multiple_viewports_vertid
background_2D_multiple_viewports_frag
background_cube_multiple_viewports_vertid
background_cube_multiple_viewports_frag
background_2D_layered_vertid
background_2D_layered_frag
background_cube_layered_vertid
background_cube_layered_frag
Clear binding points
-[VFXMTLRenderContext beginFrame:]
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/NewRenderer/VFXMTLRenderContext.mm
/tmp/vfx-capture.gputrace
Wait inFlightSemaphore
Current CB creation to completion
Error: Main command buffer execution failed with status %d, error: %@
-[VFXMTLRenderContext endFrameWaitingUntilCompleted:status:error:]
Resource CB kernel time
Resource CB GPU time
Kernel time
CommandBuffer GPU time
Drawable present skipped
Presented time
VFXDefaultRadiance.ktx
VFXDefaultIrradiance.ktx
waitDrawable
Warning: Failed getting a valid drawable. Skipping this frame.
Resource CB creation to completion
Error: Resource command buffer execution failed with status %d, error: %@
ResourceComputeEncoder
v16@?0@"<MTLBuffer>"8
LightingSet: uploaded count: %d
  LightingSet: uploaded size %d bytes
setMask
Assertion '%s' failed. Control point indices must be 16-bit or 32-bit
element.indexType == MTLIndexTypeUInt32 || element.indexType == MTLIndexTypeUInt16
Assertion '%s' failed. Only triangle arrays are supported for tessellation
element.primitiveType == MTLPrimitiveTypeTriangle
VFX - Draw world background
currentPassInstance
Assertion '%s' failed. invalid index
i < 6
VFX - Draw video background
Unreachable code: Cannot render video background with an unspecified source type.
Error: cannot renderMesh without a vaid passDescriptor
Assertion '%s' failed. Volatile mesh must have been mapped already
!CFXMeshIsVolatile(mesh) || (renderMesh.volatileBuffer != nil)
Assertion '%s' failed. shader does not support batching!
!programHashCode || CFXProgramHashCodeUseDynamicBatching(programHashCode)
_processingContext.passInstance
Assertion '%s' failed. unexpected engine context
engineIterationContext->engineContext == _engineContext
Error: VFXCore can render a maximum of %d pov - %d were asked
Error: can not render without programs, using default
Assertion '%s' failed. CFXDeformerTransforms is not supported when instancing is active
dynamicBatchCount < 2
Deformer
_cache.metalMeshElement
Error: _executeProgram - no pipeline state
No registered texture for binding %@ and symbol "%@" in pass or render graph.
Pass: (%p)
No texture or image provided for binding %@ by sampler %@.
Texture: %@
Image: %@
No sampler found for binding %@ and input %@
Error: pass has no storage for input %@
No pass storage for binding %@
v24@?0^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}8*16
Error: binding is broken : neither block or semantic
resourceBinding.bindBlock
_engineContext
modelTransform
v36@?0^v8I16@"VFXMTLRenderContext"20I28I32
inverseModelTransform
modelViewTransform
inverseModelViewTransform
normalTransform
modelViewProjectionTransform
lastFrameModelTransform
motionBlurIntensity
inverseModelViewProjectionTransform
boundingBox
nodeOpacity
shCoefficients
Assertion '%s' failed. size mismatch for sh coefficients
size == sizeof(coefs)
categoryBitmask
v24@?0@"VFXMTLResourceBinding"8@"VFXMTLRenderContext"16
Unable to find texture for binding %@ and shadable %@
vfx_lights
vfx_lights_count
vfx_commonprofile
vfx_pointSize
u_clusterTexture
u_lightIndicesBuffer
u_areaLightBakedDataTexture
u_shadowKernel
v28@?0c8@"VFXMTLResourceBinding"12@"VFXMTLRenderContext"20
Unable to find texture for binding %@ and effect materialProperty %@
u_%@Texture
Unable to find IES or gobo texture for binding %@
u_goboTexture%d
u_iesTexture%d
u_iesCubeTexture%d
position%d
direction%d
right%d
up%d
iesMatrix%d
attenuation%d
spotAttenuation%d
shadowMatrix%d
Assertion '%s' failed. Cannot set more than 4 matrices for cascade shadows
size <= (sizeof(simd_float4x4) * CFX_MAX_CASCADE_COUNT)
shadowRadius%d
shadowColor%d
goboMatrix%d
projectorColor%d
u_areaPolygonPositions%d
u_specularDFGDiffuseHammonTexture
u_radianceTexture
u_irradianceTexture
u_reflectionProbeTexture
u_ssaoTexture
VFX-SSAO
Unable to find "VFX-SSAO" texture in render graph for binding %@
v32@?0@"VFXBufferBinding"8@"<MTLBinding>"16@"VFXMTLShaderBindingsGenerator"24
Assertion '%s' failed. You can only map volatile mesh
Assertion '%s' failed. Mesh should have volatile data to allocate
metalMesh.volatileStride != 0
Assertion '%s' failed. Mesh should be mapped
sub.buffer != nil
Assertion '%s' failed. MeshElement should be mapped
mtlBuffer != nil
Assertion '%s' failed. Mesh should not be already mapped
metalMeshElement.indexBuffer == nil
quad_vertex
quad_display_cube_equirectangular
quad_display_texture2D
quad_display_depth2D
quad_display_depth_cube
vfx_draw_fullscreen_gamma_fragment
shadowMap
passConstants
VFX-Depth-Linear
Error: VFXMTLRenderContext::buffer not implemented for scope %d and name %s
Error: VFXMTLRenderContext::sampler no implemented
viewToProjArray
projToViewArray
viewportCount
Assertion '%s' failed. Hidden nodes should have been removed from the pipeline already
CFXRendererElementIsHidden(rendererElement) != true
Assertion '%s' failed. Fully transparents objects should have been removed from the pipeline already
theNode==NULL || CFXNodeGetOpacity(theNode) > 0 || (rendererElement->_renderableAttributeKind == kCFXRenderableAttributeKindVFXCore)
Assertion '%s' failed. RenderElement external encoder is nil
rendererElement->_handler.encoder
Error: CFXEngineContextRenderRenderGraph - unknown draw instruction
commandBuffer
commandEncoder
CFXIndexSet
indexSet 
(no index)
[number of indexes: %lu (in %lu ranges), indexes: (
-%lu
Error: Index %ld out of range bounds [0...%ld]
Error: Index %ld out of bounds [0...%ld]
Unreachable code: CFXAnimationSetup - unknown animation class
Error: CFXSimpleAnimationEvaluate - invalid evaluation function
CFXSimpleAnimation
<CFXSimpleAnimation>
Assertion '%s' failed. Light should be a IES
light->_type == kCFXLightTypeIES
projInfoOut
CFXLight
<CFXLight %p> Type:%@ CastsShadow(Samples:%d Cascade:%d)
<CFXLight %p> Type:%@
Ambient
Directional
Omni
Spot
Irradiance
Radiance
Area[Rectangle]
Area[Polygon]
Area[Line]
Area[Ellipse]
Area[Ellipsoid]
Unknown
shadowBias
temperature
shadowCascadeDebugFactor
areaExtents
Color
castShadow
shadowSoftenFactor
shadowMapSize
directionalExtent
shadowMaxSampleCount
Error: animating areaExtents on a non area light
Area light - Rectangle
Area light - Polygon
Area Light - Line
Area Light - Ellipse
Area Light - Ellipsoid
area_shape_vert
area_shape_ellipse_frag
area_shape_ellipsoid_frag
Info: invalid zNear value (0) set to camera
infos
Error: CFXProjectionInfosUnproject : invalid viewport dimension
CFXCamera
<CFXCamera:%p "%@" custom, [%.3f %.3f %.3f %.3f ; %.3f %.3f %.3f %.3f ; %.3f %.3f %.3f %.3f ; %.3f %.3f %.3f %.3f]>
<CFXCamera:%p "%@" ortho, near:%.3f far:%.3f scale: %.3f>
<CFXCamera:%p "%@" persp, near:%.3f far:%.3f fov:%.3f>
sensorHeight
postProjectionTransformTranslation
postProjectionTransformScale
depthOfField
motionBlur
grain
toneMapping
vignetting
colorFringe
colorGrading
doughnutBokeh
orthoScale
zfar
znear
Assertion '%s' failed. need subdivision level
subdivisionLevel > 0
Assertion '%s' failed. child is already inserted in a tree
child->_nextSibling == NULL
child->_parent == NULL
Assertion '%s' failed. prevChild is not parented to the right node
prevSibling->_parent == node
prevChild
Warning: CFXNodeGetWorldMatrix - no transform tree
Assertion '%s' failed. Node should have a TT handle already
node->_transformHandle != kCFXTransformHandleInvalid
attributeName
parent
ancestor
arrayOfNodes
player
Assertion '%s' failed. layer index out of bound
layer < CFX_MAX_LAYERS
CFXNode
Error: inconsistency in world graph found in CFXNode finalize
<CFXNode:%p "%@"
  geometry: %@
  light: %@
  camera: %@
  skinner: %@
  morpher: %@
firstChild
nextSibling
skinner
sphereOut
v24@?0^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}8^B16
Assertion '%s' failed. Node should already be in CullingSystem
!CFXNodeShouldBePutInCullingSystem(root) || (root->_cullingHandle != kCFXCullingHandleInvalid)
!CFXNodeShouldBePutInCullingSystem(child) || (child->_cullingHandle != kCFXCullingHandleInvalid)
baseNormalSource
baseTangentSource
Unreachable code: Volatile meshes are not supported by the deformer stack
Assertion '%s' failed. Only original data kind can have non 'GPU' primitive type
_finalDataKind == kCFXMeshDataKindOriginal && subdivIsUsed
UInt%d-%d-%d
deformer_splat
Assertion '%s' failed. buffer overflow
orig < originalVertexCount
prov < deindexedVertexCount
Unreachable code: Can't create an interleaved buffer for the renderable topology, possible vector count mismatch between semantics
VFX: Deformers
Assertion '%s' failed. Transform of dependency node is not available
[dependencyDeformerStack computeDeformedMeshReliesOnTransforms] == NO
Assertion '%s' failed. Frustum info for dependency node is not available
[dependencyDeformerStack computeDeformedMeshReliesOnFrustum] == NO
@"<MTLComputeCommandEncoder>"8@?0
Unreachable code: Unsupported input
_currentUpdateBuffers.dependency0Positions
_currentUpdateBuffers.dependency0Normals
_currentUpdateBuffers.dependency0Tangents
_currentUpdateBuffers.dependency1Positions
_currentUpdateBuffers.dependency1Normals
_currentUpdateBuffers.dependency1Tangents
v40@?0Q8@"VFXNode"16Q24^B32
Warning: VFXMTLSmoothNormalsDeformer can only process triangles and polygons
indicesCount >= 3
Assertion '%s' failed. indexed index overflow
vertexIndex < originalVertexCount
Assertion '%s' failed. expecting at least triangles here
perVertexTriangleCount[vertexIndex] > 0
Assertion '%s' failed. splitted vertices should not have been decremented yet
Assertion '%s' failed. welded vertices should have been entirely decremented
perVertexTriangleCount[weldedVertexIndex] == 0
unify_u16
unify_u32
Assertion '%s' failed. No double position sources allowed
semantic != kCFXMeshSourceSemanticPosition || data->sourcesSemanticInfos[semantic].count == 0
Warning: Mesh '%@' : sources of redundant semantic '%@' will be ignored in rendering
Assertion '%s' failed. Mesh sources are not sorted correctly
semantic > currentSemantic
Assertion '%s' failed. Mesh sources with same semantic non contiguous
data->sourcesSemanticInfos[semantic].index == -1
mesh->_renderableData.sources
mesh->_renderableData.elements
Assertion '%s' failed. Mesh sources are malformed
sourceIndex < oldSourceCount
Assertion '%s' failed. Renderable data kind must not give a channel
(dataKind != kCFXMeshDataKindRenderable) || (channel == kCFXSharedRenderableIndexChannel)
Assertion '%s' failed. need to provide a valid channel index when adding a new source
channel != kAutomaticChannelIndex
mesh->_originalData.sourceChannels
Assertion '%s' failed. Could not find source with semantic %@ at index %d
sourceIndex != kCFNotFound
mesh->_originalData.elements
Unreachable code: Internal consistency error in %s
CFXMeshGetIndexOfElement
CFXMeshGetElementAtIndex
CFXMeshGetMeshElements
Warning: Can only convert to lines or points element type
Warning: Can only convert from triangle array to another element type
CFXMesh
<CFXMesh %p "%@"
  element%d: %@
  source %@%d (channel:%d) : %@
  source %@ (channel:%d) : %@
  renderable element%d: %@
  renderable source %@%d: %@
  renderable source %@: %@
sources
boundingSphere
__meshDataForDataKind
Warning: Can't add two position sources
sourceIndex < CFArrayGetCount(meshData->sources)
Error: __CFXMeshCopy - unable to resolve interleaved mesh
Error: Failed to instantiate unarchiver with error %@
Error: decodeValueOfObjCType - failed to decode CATransform3D
Assertion '%s' failed. invalid fill mode
fillMode == kCFXFillModeFill || fillMode == kCFXFillModeLines
material->_commonProfile
oBlendColor
Unreachable code: Blend mode not implemented.
CFXMaterial
<CFXMaterial %p : "%@", 
common profile %@
custom %@
fillMode
enableReadsFromDepthBuffer
enableWriteInDepthBuffer
nodeConstraints-%p
Unreachable code: unexpected call to CFXWorldRegisterNodeCoreEntityHandle
nodeRef
Assertion '%s' failed. There should only be valid audio sources in this array
player != NULL
Warning: CFXWorldSetRootNode - old root node seems to be already connected to another world
originator
CFXWorldLock
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/Core/CFXWorld.m
Assertion '%s' failed. Only %d layers are available, but layer %d requested
entityHandle
CFXWorld
Warning: RootNode is not retained by the world
<CFXWorld>
fogColor
fogDensityExponent
fogEndDistance
fogStartDistance
wantsScreenSpaceReflection
screenSpaceReflectionSampleCount
screenSpaceReflectionMaximumDistance
screenSpaceReflectionStride
Unreachable code: You can't change the worldRef of a world
startTime
endTime
frameRate
playbackSpeed
unit
raytracingSystem
<%@: %p '%@'>
Warning: %@: zNear of 0 is not allowed
usesOrthographicProjection
automaticallyAdjustsZRange
fill
filmOffsetX
filmOffsetY
postProjectionTransformTranslationX
postProjectionTransformTranslationY
postProjectionTransformScaleX
postProjectionTransformScaleY
wantsHDR
bladeCount
exposureOffset
toneMappingMode
toneMappingToeStrength
toneMappingToeLength
toneMappingShoulderStrength
toneMappingShoulderLength
toneMappingShoulderAngle
toneMappingGamma
bloomIntensity
bloomThreshold
bloomThresholdSmoothness
bloomUseHighQuality
bloomColorFilter
bloomContrast
bloomSaturation
bloomIteration
vignettingIntensity
vignettingAnamorphic
vignettingSoftness
vignettingRadius
lensBlurRadius
lensBlurFilterQuality
{?=ff}
{CGRect={CGPoint=dd}{CGSize=dd}}
%.2f
%.2f %.2f
%.2f %.2f %.2f
%.2f %.2f %.2f %.2f
p[%.2f %.2f %.2f] q[%.2f %.2f %.2f %.2f] s[%.2f %.2f %.2f]
non-affine matrix
Error: _VFXValueFromDataAndType - out of bounds
Error: VFXDataFromArrayOfValues - unknown type
Error: VFXArrayOfValueFromData - unknown type
Error: VFXArrayOfValueFromData - unexpected data length
<%@: %p '%@' | type=%d>
<%@: %p | type=%d>
probeExtents
probeOffset
parallaxExtentsFactor
parallaxCenterOffset
lightCategoryBitMask
spotFallOffExponent
probeType
probeUpdateType
parallaxCorrectionEnabled
probeExtentsX
probeExtentsY
probeExtentsZ
probeOffsetX
probeOffsetY
probeOffsetZ
parallaxOffsetX
parallaxOffsetY
parallaxOffsetZ
parallaxExtentsFactorX
parallaxExtentsFactorY
parallaxExtentsFactorZ
maximumShadowDistance
autoShadowProjection
shadowCascadeCount
shadowCascadeSplittingFactor
forcesBackFaceCasters
sampleDistributedShadowMaps
castsShadow
baked
shouldBakeDirectLighting
shouldBakeIndirectLighting
sphericalHarmonics
lightType
vfxcolor
IESProfile
areaType
areaExtentsX
areaExtentsY
areaExtentsZ
areaPolygonVertices
drawsArea
Error: failed to load ies from %@
iesData
Error: invalid IES data
Error: ies corrupted data
offsetX
offsetY
mappingChannel
v16@?0@"<VFXWorldReference>"8
Error: Over-detach of instance %@ from world %@
Unreachable code: _setupMaterialProperty -- should not reach
<%@: %p
 '%@'
  %@=%@
.color
content
Warning: can't prepare shadable animation with path %@
Error: Material : %@ is not an animatable path
Error: missing target material description
customMaterialProperties
customMaterialAttributes
q24@?0@8@16
valuesForUndefinedKeys
Error: Failed to archive material's custom attributes. %@ %@
shadableHelper
avoidsOverLighting
writesToDepthBuffer
readsFromDepthBuffer
colorBufferWriteMask
blendMode
_VFXNullMaterial
Error: unknown shading model (2)
Error: unknown shading model
kProjectionTransform
kModelTransform
kViewTransform
kModelViewProjectionTransform
kModelViewTransform
kNormalTransform
kRenderPassName
%s%s {
dump node tree (%@)
------------------------------------------------------
%@%@
<%p>
B24@?0@"VFXNode"8^B16
Error: unknown component type : %d
Assertion '%s' failed. cannot update matrix without affine
_affineUpToDate
Assertion '%s' failed. cannot update affine without matrix
_transformUpToDate
 pos(%f %f %f)
 rot(%f %f %f %f)
 scale(%f %f %f)
 light=%@
 camera=%@
 model=%@
 | no child
 | 1 child
 | %d children
euler
worldTransform
worldPosition
worldOrientation
filters.
Error: attempt to add a parent node as a child node
Error: removeChildNodeAtIndex - index out of bounds
Unreachable code: error in removeObjectFromChildNodesAtIndex -> try to remove inconsitent node
Unreachable code: circular reference found when trying to add %@ as a child node of %@
Unreachable code: error in replaceObjectInChildNodesAtIndex -> index out of bounds
Unreachable code: error in replaceObjectInChildNodesAtIndex
Error: error in removeFromParentNode : inconsistent tree
Assertion '%s' failed. _updateFocusableCache - invoked on a non focusable node (waste of time)
_isFocusableOrHasFocusableChild
Error: Physics body %@ 's owner (%@) should be %@
Error: Physics body %@ already has a owner: %@ that is not %@
Error: attempt to add a null audio player on %@
system
locked
constraints
physicsBody
forceField
emitter
collider
fixedBoundingBoxExtrema[0]
fixedBoundingBoxExtrema[1]
focusBehavior
clientAttributes
failed to archive node's client attributes. %@ %@
whatever
_entityTagIdentifier
renderingOrder
Error: node::setTransform - invalid matrix
Error: node::setTransform - invalid matrix (nan in scale)
Error: attempt to set NaN to node's quaternion
Error: failed to find cloned skeleton in cloned tree
Error: error while transposing animations to cloned tree
Assertion '%s' failed. bad type
mode <= CFXWrapModeMirror
mode <= kCFXFilterModeLinear
Assertion '%s' failed. bad image type
type < kCFXImageCount
Assertion '%s' failed. bad cull mode
cull <= kCFXCullNone
Assertion '%s' failed. bad fill mode
fillMode == kCFXFillModeLines || fillMode == kCFXFillModeFill
Assertion '%s' failed. bad blend mode
blend < kCFXBlendFactorCount
Assertion '%s' failed. bad blend operation
blendOp < kCFXBlendOpCount
Assertion '%s' failed. bad comparison func
func < kCFXComparisonFuncCount
Assertion '%s' failed. bad stencil op
op < kCFXStencilOpCount
Assertion '%s' failed. Polygon Array not supported in Metal
Assertion '%s' failed. Triangle Fan not supported in Metal
Warning: r8Unorm_sRGB variant is not supported on macOS for this hardware. Defaulting to r8Unorm.
Warning: rg8Unorm_sRGB variant is not supported on macOS for this hardware. Defaulting to rg8Unorm.
Error: Failed to create Metal pixel format for %@ [%d components, %d bits per component, bitmap info: %u (%@|%@), float components: %@, color space: %@]
format < sizeof(__VFXMTLVertexFormatToCFXBaseTypeArray) / sizeof(__VFXMTLVertexFormatToCFXBaseTypeArray[0])
None
float2x3
Invalid
A8Unorm
R8Sint
R8Snorm
R8Uint
R8Unorm
R8Unorm_sRGB
R16Float
R16Sint
R16Snorm
R16Uint
R16Unorm
R32Float
R32Sint
R32Uint
RG8Sint
RG8Snorm
RG8Uint
RG8Unorm
RG8Unorm_sRGB
RG16Float
RG16Sint
RG16Snorm
RG16Uint
RG16Unorm
RG32Float
RG32Sint
RG32Uint
BGR10_XR
BGR10_XR_sRGB
BGRA10_XR
BGRA10_XR_sRGB
BGR10A2Unorm
RGBA8Sint
RGBA8Snorm
RGBA8Uint
RGBA8Unorm
RGBA8Unorm_sRGB
RGB10A2Uint
RGB10A2Unorm
RGBA16Sint
RGBA16Snorm
RGBA16Uint
RGBA16Unorm
RGBA32Sint
RGBA32Uint
Depth16Unorm
Depth32Float
Stencil8
Depth24Unorm_Stencil8
Depth32Float_Stencil8
MTLPixelFormat
Unkown
Unreachable code: Kernel functions have no corresponding program stage
Error: VFXMTLFunctionTypeToProgramStage - type not supported
MTLTextureType1D
MTLTextureType1DArray
MTLTextureType2D
MTLTextureType2DArray
MTLTextureType2DMultisample
MTLTextureTypeCube
MTLTextureTypeCubeArray
MTLTextureType3D
MTLTextureType2DMultisampleArray
MTLTextureTypeTextureBuffer
Warning: unsupported texture type %d
Warning: CFXValueWriteToMTLData - Unsupported data type %@
Warning: value unsupported %d of member %@
Error: Unexpected pixel format %lu
shaderRead
shaderWrite
renderTarget
pixelFormatView
mtlBuffer
mtlVertexFormat
Unreachable code: Unexpected antialiasing mode (%d)
byteOrderDefault(Big)
byteOrder16Little
byteOrder32Little
byteOrder16Big
byteOrder32Big
byteOrderUnknown
alphaNone
alphaPremultipliedLast
alphaPremultipliedFirst
alphaLast
alphaFirst
alphaNoneSkipLast
alphaNoneSkipFirst
alphaOnly
alphaUnknown
Assertion '%s' failed. Method should not be called when VFXCore features aren't enabled
CFXWorldHasOptions(_world, CFXWorldCreationOptionEnableVFXCoreFeatures)
-[VFXWorld cloneModelToPresentationAndStartReplicationStream]
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/ObjC/VFXWorld.m
setting up axis is unsupported
Error: [VFXWorld root] is deprecated, use rootNode instead
org.khronos.collada.digital-asset-exchange
vfx-world
vfxz-world
scnz
com.apple.vfx.world
com.apple.vfx.world.zip
com.pixar.universal-world-description-mobile
public.polygon-file-format
public.model-definition-format
public.standard-tesselated-geometry-format
com.pixar.universal-world-description
plist
B24@?0^@8@?<B@?@"NSURL"^@>16
usda
usdc
B24@?0@"NSURL"8^@16
MDLAsset
worldDump%d.vfx
dumping world to %@
children[
Error: _subnodeFromIndexPath - invalid keypath
Error: %@ is not in a world yet
Assertion '%s' failed. _subnodeIndexPath - unexpected count (hierachy was mutated?)
wr == 0
unknown renderer type
defaultRenderGraph
assetRegistry
physicsWorld
userAttributes
stateManager
triggerManager
Error: failed to unarchive VFXWorld - (secureCoding compliance issue?)
VFXLayerTreeDidChange
Error: VFXTextureSource abstract method invoked %@
CFXEngineContextGetRenderContext(engineContext)
Error: Texture source does not support Metal
Error: VFXImageSource astract method invoked %@
VFXIsBackingViewAsMaterialPropertyTag
kCARendererFlags
PostRender
CopyToFinal
Copy to final resolve
Resolve
almost final target
debug copy stereo to drawable
Copy to drawable
vfx_rt_direct_lighting_trace
RTDirectLightingTracePass
RTDirectLightingSpatialReSTIRPass
vfx_rt_direct_lighting_spatial_restir
RTDirectLightingResolvePass
vfx_rt_direct_lighting_resolve
DirectLightingResolve
RTDirectLightingDenoisePass
vfx_rt_direct_lighting_denoise
RT_DIRECT_LIGHTING_RESOLVE
RT_DIRECT_LIGHTING_DENOISE
Assertion '%s' failed. wrong target index
renderTargetIndex < states->_targetCount
srcColor
(1 - srcColor)
srcAlpha
(1 - srcAlpha)
dstColor
(1 - dstColor)
dstAlpha
(1 - dstAlpha)
blendColor
(1 - blendColor)
blendAlpha
(1 - blendAlpha)
srcAlphaSat
CFXBlendStates
<CFXBlendStates %p targetCount:%d needsBlendColor:%d
  blend:%s col[(src * %@) %@ (dst * %@)] alpha[(src * %@) %@ (dst * %@)]
  blend:%s col[(src * %@) %@ (dst * %@)]
VFXTriggerTypeTicked
VFXTriggerTypeMouseDown
VFXTriggerTypeMouseUp
VFXTriggerTypeMouseMoved
VFXTriggerTypeMouseDragged
VFXTriggerTypeKeyDown
VFXTriggerTypeKeyUp
VFXTriggerTypeTouchBegan
VFXTriggerTypeTouchMoved
VFXTriggerTypeTouchEnded
VFXTriggerTypeTouchCanceled
COMPOSITING OUTPUT
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/CompositePass.mm
vfx_post_process
VFXPreferredDeviceKey
VFXPreferLowPowerDeviceKey
PrefersLowPowerGPU
com.apple.vfx.preferLowPowerDevice
com.apple.vfx.preferRemovableDevice
Error: Failed to create default Metal device.
autoenablesDefaultLighting
jitteringEnabled
temporalAntialiasingEnabled
backgroundColor
background.contents
kVFXViewObservingContext
com.apple.vfx.forceSeparateWorkGroup
Set drawableSize
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/Views/VFXView.m
renderer.%@
<%@: %p | world=%@ frame=%@ pointOfView=%@>
Error: switchToCameraNamed: no camera named %@
VFXView::setAsynchronousLoading is deprecated
NSScreenNumber
@"NSEvent"16@?0@"NSEvent"8
-[VFXView mouseDown:]
-[VFXView performMouseUp:]
-[VFXView mouseUp:]
-[VFXView mouseMoved:]
-[VFXView mouseDragged:]
-[VFXView scrollWheel:]
-[VFXView keyDown:]
-[VFXView keyUp:]
IRRADIANCE_PROBE_CUBEMAP_COLOR_TARGET
IRRADIANCE_PROBE_CUBEMAP_DEPTH_TARGET
IRRADIANCE_SH
compute_sh%d_from_cubemap_threadgroup_mem
compute_sh%d_from_cubemap
sum_sh%d
IRRADIANCE_PROBE_RENDER_CUBEMAP_PASS
Irradiance probe render cubemap pass
Irradiance probe compute sh pass
uniform
#pragma opaque
#pragma declaration
#pragma arguments
#pragma varyings
#pragma body
#pragma 
Error: syntax error in the uniform declaration : %@
vfx_node
vfx_frame
Shadow
VFXProgramDidChangeNotification
tessellationControlShader
tessellationEvaluationShader
geometryShader
vertexShader
fragmentShader
vertexFunctionName
sourceFile
fragmentFunctionName
semanticInfos
opaque
Error: VFXRenderer::init - no engine context
Assertion '%s' failed. Private renderer only supports VFXView or VFXMetalLayer
[privateRendererOwner isKindOfClass:[VFXView class]] || [privateRendererOwner isKindOfClass:[VFXMetalLayer class]] || [privateRendererOwner isKindOfClass:[VFXHolographicRenderer class]] || [privateRendererOwner isKindOfClass:[VFXCompositorRenderer class]]
com.apple.vfx.renderingQueue.%@%p
<%@ %p: world = %@, pointOfView = %@>
-[VFXRenderer lock]
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/ObjC/VFXRenderer.mm
Error: framebuffer width must be > 0
Error: framebuffer width (%d) exceeds device's limit (%d), clamping
Error: framebuffer height must be > 0
Error: framebuffer height (%d) exceeds device's limit (%d), clamping
Error: autoenablesDefaultLighting: renderer has no context
Error: setAutoenablesDefaultLighting: renderer has no context
Assertion '%s' failed. can't set a presentation instance as a point of view
[pov isPresentationObject] == 0
camera.fieldOfView
camera.orthographicScale
camera.filmOffset
camera.postProjectionTransformTranslation
camera.postProjectionTransformScale
depthOfField.focalBlurSampleCount
depthOfField.fStop
depthOfField.apertureBladeCount
motionBlur.intensity
exposure.value
exposure.offset
exposure.averageGray
exposure.whitePoint
exposure.adaptationBrighteningSpeedFactor
exposure.adaptationDarkeningSpeedFactor
exposure.adaptationMinimum
exposure.adaptationMaximum
toneMapping.toeStrength
toneMapping.toeLength
toneMapping.shoulderStrength
toneMapping.shoulderLength
toneMapping.shoulderAngle
toneMapping.gamma
bloom.intensity
bloom.threshold
bloom.thresholdSmoothness
bloom.colorFilter
bloom.contrast
bloom.saturation
vignetting.intensity
vignetting.anamorphic
vignetting.softness
vignetting.radius
colorFringe.strength
colorFringe.intensity
colorGrading.saturation
colorGrading.contrast
colorGrading.whiteBalanceTemperature
colorGrading.whiteBalanceTint
colorGrading.liftColor
colorGrading.liftOffset
colorGrading.gammaColor
colorGrading.gammaOffset
colorGrading.gainColor
colorGrading.gainOffset
grain.intensity
grain.scale
camera.
Did render delegate
will render delegate
Error: prepareObject is deprecated, use VFXWorld.prepare instead
Error: prepareObjects is deprecated
-[VFXRenderer updateAtTime:]
updateAtTime delegate
didApply Animations
VFXCore sync
didSimulate Physics
didApply constraints
VFXCore
Apply notification queue
Assertion '%s' failed. can't call renderAtTime:withEncoder:pass:commandQueue: with a GL context
[_renderContext isKindOfClass:[VFXMTLRenderContext class]]
Error: VFX uses reverseZ depth buffer to achieve better precision. You must clear your depth to 0.0 or everything will be discarded.
Error: Render pass descriptor misconfigured - missing drawable texture
Error: Failed to create snapshot with error %@
self.world
Error: %s should only be called on a private renderer, using -[VFXRenderer _addGPUFrameCompletedHandler:] instead
-[VFXRenderer _addGPUFramePresentedHandler:]
VFX_ENABLE_COLLECTION
vfx.fps
vfx.primcnt
vfx.frmtime
vfx.phytime
vfx.prttime
vfx.animtime
vfx.clientTime
vfx.consttime
vfx.rendertime
vfx.cpuidletime
vfx.cawaittime
vfx.deviceutil
vfx.rendererutil
vfx.tilerutil
IOAccelerator
PerformanceStatistics
__vfxPerformanceData
v24@?0{_CSTypeRef=QQ}8
vfx.shaderCompilationTime
vfx.shaderGenerationCount
Device Utilization %
Renderer Utilization %
VFXShaderCache
com.apple.vfx.traceResources
containerPath
commonProfile_
metal
Error: unable to create the shader cache folder at %@ (%@)
error
can't create symbolicator for pid
__vfxDebuggingInfo
can't find symbol __vfxDebuggingInfo
can't mmap memory for symbol __vfxDebuggingInfo
can't get mem rangefor symbol __vfxDebuggingInfo
failed to read memory for symbol __vfxDebuggingInfo
applicationContainerPath not set
axisA
axisB
anchorA
anchorB
minLinearLimit
maxLinearLimit
minAngularLimit
maxAngularLimit
motorTargetLinearVelocity
motorMaximumForce
motorTargetAngularVelocity
motorMaximumTorque
Error: Failed to build renderable data for mesh %p
renderableElement
Assertion '%s' failed. Consistency error: there must be as many renderable elements as original elements
elementCount == CFArrayGetCount(deindexedTriangleElements)
Warning: Mesh element %p of mesh %p has %d channels but they all define the same topology
Error: Deindexer failed - Source %p (%@) has no original data at index %u
Assertion '%s' failed. Deindexer failed - Hash value inconsistency
value == sourceInfo.dataVectorCount
Assertion '%s' failed. Deindexing failed - Vertex count inconsistency
overallVertexIndex == (CFIndex)indexCount
Warning: Mesh %p has multiple channels but deindexing didn't have any effect
Warning: Deindexing - Vertex at index %u of %u is not used by any geometry element
Assertion '%s' failed. Deindexing failed - Count of deindexed mesh sources does not match count of indexed mesh sources
sourceCount == CFArrayGetCount(deindexedSources)
Assertion '%s' failed. Deindexing failed - Count of deindexed mesh elements does not match count of indexed mesh elements
elementCount == CFArrayGetCount(deindexedElements)
Unreachable code: Requested channel (%d) does not exist in element (%p)
Assertion '%s' failed. Two elements in the same mesh do not have the same number of index channels
channelCount == CFXMeshElementGetIndicesChannelCount(rhs.element)
Error: __writeIndexInBuffer - index (%u) out of bounds (%lu)
__writeIndexInBuffer
Assertion '%s' failed. %s - Cannot create a renderable topology from indexed vertices
channelCount == 1
__CFXMeshElementCreateRenderablePrimitiveTypeCopy
Error: %s - Invalid polygon edge count (%u)
Error: __CFXMeshElementCreateRenderablePrimitiveTypeCopy - polygon %u (%u vertices, indices [%u, %u]) does not fit in index buffer (%u elements)
Error: Inconsistent index count after triangulation.
radiance
irradiance
VFXWorldDecodingCurrentEnclosingFolder
directional
spot
omni
ambient
area
Error: unknown legacy light type: %@
path
flatness
entityID
animation-players
animation-keys
sourceObject
keyPathSrc
keyPathDst
/Contents/Resources/
imageNamed
imageNamed://
Error: VFXDecodemage: invalid archive
MDLSkyCubeTexture
imageNamed://%@
turbidity
sunElevation
upperAtmosphereScattering
groundAlbedo
horizonElevation
brightness
channelEncoding
dimensions.x
dimensions.y
highDynamicRangeCompression.x
highDynamicRangeCompression.y
groundColor
<%@: %p
    "%@" = "%@"
Warning: CGPath archiving: unknown path element type
VFXAnimationCommitOnCompletion
VFXKeyframeAnimation %p (duration=%f, keyPath:%@)
Warning: unable to infer the type of a basic animation: %@
Warning: unable to infer the type of a keyframed animation: %@
Error: animating between instances is not supported
Error: CAKeyframeAnimationToCFXAnimation :: too large value to animate : %d bytes
CAKeyframeAnimation based on CGPath are not supported
Error: CAKeyframeAnimation has no keyframe - skipping conversion
Error: can't add a NULL animation to %@
Assertion '%s' failed. VFXAddAnimationGroup target is not an entity
CFTypeIsCFXEntity(rootCF)
Assertion '%s' failed. VFXRemoveAnimation target is not an entity
Assertion '%s' failed. VFXFadeAndRemoveAnimation target is not an entity
Assertion '%s' failed. VFXRemoveAllAnimations target is not an entity
Assertion '%s' failed. VFXFadeAndRemoveAllAnimations target is not an entity
VFXAnimationFadeInDurationKey
VFXAnimationFadeOutDurationKey
VFXAnimationEventsKey
Assertion '%s' failed. _animationEvents should be nil
_animationEvents == NULL
timingFunction
commitsOnCompletion
removedOnCompletion
autoreverses
fadeInDuration
fadeOutDuration
timeOffset
repeatCount
keyPath
cumulative
additive
from
basic
keyTimes
timingFunctions
tensionValues
continuityValues
biasValues
calculationMode
rotationMode
keyframe
group
beginTime
applyOnCompletion
fillForward
fillBackward
failed to archive animation's userinfo. %@ %@
appliedOnCompletion
vfx-anim
Error: Loading animation %@ failed with %@
Error: failed to convert CAAnimation to VFXAnimation
Warning: default duration is zero - using default transaction duration
Unreachable code: VFXAnimation to CAAnimation: no animation data
Error: This animation can't be changed to additive. To make this animation additive first convert it to a CAAnimation, set it to additive and convert back to VFXAnimation
Error: This animation can't be changed to cumulative. To make this animation cumulative first convert it to a CAAnimation, set it to cumulative and convert back to VFXAnimation
<%@: %p, keyPath=%@ duration=%f repeatCount=%f>
Warning: failed to optimize keyframes
weight
usesAbsoluteTime
Error: can't decode old format animations
<VFXAnimationPlayer(%p) animation=%@>
Error: unknown fill mode
q24@?0@"VFXAnimationEvent"8@"VFXAnimationEvent"16
Error: Unsupported CAPropertyAnimation subclass (%@)
Error: Unsupported CAAnimation class (%@)
Error: sub-animation %@ of %@ has no keyPath - ignoring
Error: CFXAnimationToCAAnimation: unsupported animation
Warning: VFXAnimationGroupToCAAnimationGroup - no target path
Warning: VFXSimpleAnimationToCABasicAnimation - can't convert startValue
Warning: VFXSimpleAnimationToCABasicAnimation - can't convert endValue
Warning: VFXSimpleAnimationToCABasicAnimation - can't convert byValue
contributors
created
modified
authoring_tool
author
unitName
unitMeter
VFXWorldLoaderLoadForAuthoring
VFXWorldLoaderReplicationDelegate
VFXWorldLoaderUseModelIOToLoadDAEFiles
kSceneSourceCreateCameraIfAbsent
kSceneSourceAdjustInvalidClippingPlanes
kSceneSourceCreateLightIfAbsent
kSceneSourceForceMorphNormals
kSceneSourceVerboseMode
kSceneSourceFormatHint
kSceneSourceForceInProcess
VFXWorldLoaderLoadTexturesInCPUMemory
VFXWorldLoaderIgnoreVertexColorsKey
VFXWorldLoaderAssumeLinearDisplayP3SourceColorSpaceKey
kSceneSourceCreateNormalsIfAbsent
kSceneSourceCheckConsistency
kSceneSourceFlattenWorld
kSceneSourceAssetDirectoryURLs
kSceneSourceOverrideAssetURLs
kSceneSourceStrictConformanceKey
kSceneSourceConvertToYUpIfNeeded
kSceneSourceConvertToUnit
kSceneSourceAnimationLoadingMode
VFXWorldLoaderAssetPathResolver
kSceneSourcePreserveOriginalTopology
VFXWorldLoaderOptionMetalLibraryURL
kWorldInitOptionForAuthoring
keepSeparate
playRepeatedly
playOnce
VFXDetailedErrorsKey
VFXConsistencyElementIDErrorKey
VFXConsistencyElementTypeErrorKey
VFXConsistencyLineNumberErrorKey
kWorldSourceFormat
VFXWorldLoaderInputSource
VFXWorldExportDestinationURL
VFXWorldExportUTIKey
VFXWorldExportCompressGeometryElements
VFXWorldExportCompressMorphTargets
VFXWorldExportEmbedImages
VFXWorldExportEmbedReferences
VFXWorldExportPresentationTree
VFXWorldLoaderDisableVFXCoreSupport
vfxproj
world.plist
documentUUID
warnings
precompiled
Error: error loading core entity manager: %@
Error: error importing VFX world: %@
Error: failed to unarchive data - %@
VFX Studio
Error: failed to unarchive world at %@ (%@)
textureCoordinate is deprecated - use textureCoordinateWithMappingChannel instead
<%@: %p <%f,%f,%f> | geometryIndex=%d node=%@ bone=%@>
Error: custom color grading not implemented
Error: failed to decode CALayer
invalid wrapS value: %d
invalid wrapT value: %d
Assertion '%s' failed. the cfxImage should have been cleared when setting a layer
_contentType != VFXContentTypeLayer
AVPlayer
AVCaptureDevice
Error: materialPropertyName %d not found
<%@: %p | %@ contents=%@>
<data %p>
Error: array for material property contents must have 6 elements
Warning: copyCFXImageFromImage: invalid sub-image
Assertion '%s' failed. inconsistency in VFXMaterialProperty::parentWillDie
parent == _parent
linearExtendedSRGBColor
imageArray
layer
textureComponents
isCommonProfileProperty
propertyType
customMaterialPropertyName
isColorManaged
sRGB
colorManaged
Error: unknown material property type for archiving
Error: unknown archived material property type
Error: Could not create texture with descriptor : %@
transformTree
Assertion '%s' failed. invalid handle (%d) given
hnd != kCFXTransformHandleInvalid
handle.level < transformTree->_levelCount
CFXTransformTree
<CFXTransformTree %p>
Assertion '%s' failed. no more handle available
handle.index != kCFXTransformIndexInvalid
Assertion '%s' failed. can't move negative number of data
countToMove >= 0
Assertion '%s' failed. overflow !
(handle + offset + countToMove) <= _capacity
startParentHandle < _count
Assertion '%s' failed. child must be one level under parent
newHandle.level == (parentHandle.level + 1)
firstChild.index != kCFXTransformIndexInvalid
lastChild.index != kCFXTransformIndexInvalid
lastChild.level == firstChild.level
lastChild.index >= firstChild.index
firstChildToRemainAfterDeletion != INT32_MAX
_handles[ node->_transformHandle ].level == l
_handles[ node->_transformHandle ].index >= minIndexToDestroyPerLevel[ l ]
firstHandle.level == lastHandle.level
firstHandle.index <= lastHandle.index
handle.level < _levelCount
vfxRenderContext
Warning: CFXVFXSimulateAndPrepareDrawCalls -> no world yet
CFXVFXUpdateRendererElement
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/CFXVFX/CFXVFXRenderContext.m
coreEM
CFXVFXRenderContext
<CFXVFXRenderContext>
CFXCoreEntityManager
<CFXCoreEntityManager>
_updateVFXCoreFromNodes
CFXSortSystem
<CFXSortSystem %p>
!line.empty()
TILT=NONE
TILT= NONE
TILT =NONE
TILT = NONE
TILT=
TILT =
anglesCount > 0
start != index
end != index - 1
x < anglesNumH
y < anglesNumV
width > 0 && height > 0
channelCount == 1 || channelCount == 4
channelSize == 1 || channelSize == 2 || channelSize == 4
pass
Error: CFXFXRenderGraphAppendPass out of capacity
Assertion '%s' failed. CFXFXRenderGraphGetPassAtIndex index %ld is out of bounds (%ld)
index < renderGraph->_count
symbolName
Assertion '%s' failed. Must declare upfront
renderGraph->_parameterStorage == NULL || renderGraph->_parameterStorage->storage == NULL
Assertion '%s' failed. Cannot declare twice the same symbol (%@)
CFDictionaryGetValue(renderGraph->_parameterStorage->parameters, symbolName) == 0
paramName
Assertion '%s' failed. Assumed count is 1
count == 1
Error: CFXFXRenderGraphSetValueForSymbol - expect an image for paramName %@
Error: CFXFXRenderGraphSetValueForSymbol - unknown param named %@
Error: CFXFXRenderGraphGetValueForSymbol - unknown param named %@
Assertion '%s' failed. compiling a renderGraph twice
renderGraph->_isCompiled==false
bundle
metalLibraryName
sequence
passes
symbols
Error: invalue description for input named %@ - expect a dictionary
Error: CFXFXRenderGraphCompile - invalid description (sequence missing or empty) %@
metalLibraryFile
metalVertexShader
metalFragmentShader
clientProgram
owners
outputs
Info: pass named %@ appears to be useless - skipping
CFXFXRenderGraph
<CFXFXRenderGraph>
pass %d
targets
self
Error: Unsupported pixel format %@ (%u) in KTX encoder
Error: Unsupported texture type %@ (%u) in KTX encoder
Warning: KTX file seems too small or is not a KTX
Error: Only big endian ktx are supported
Error: Unsupported format in KTX file
Warning: Compression type %d not supported
Error: overflow reading mip[%d] (%zu > %zu)
Error: overflow reading slice[%d] / mip[%d] (%zu > %zu)
kPrimitiveGenerateMappingCoordinates
kPrimitiveVertexTransformation
kPrimitiveWidthSegments
kPrimitiveHeightSegments
kPrimitiveLengthSegments
kPrimitiveChamferSegments
kPrimitiveRotationSegments
kPrimitiveCapSegments
kPrimitiveRingSegments
kPrimitivePipeSegments
kPrimitiveSphereType
kPrimitiveSphereSegments
kPrimitiveTypeSphere
kPrimitiveTypeGeosphere
widthSegmentCount
heightSegmentCount
lengthSegmentCount
chamferSegmentCount
segmentCount
radialSegmentCount
pipeSegmentCount
reflectionFalloffEnd
reflectionFalloffStart
reflectivity
reflectionCategoryBitMask
reflectionResolutionScaleFactor
floor
CFXFloor
<CFXFloor>
resolutionScaleFactor
reflectionBitMask
%@: %p '%@' - mesh: %@
%@: %p - mesh: %@
<%@>
Error: leaking materials array
Assertion '%s' failed. removeObjectFromMaterialsAtIndex: index out of bounds
index < [_materials count]
Error: Cannot set edge creases element because its primitive type is not VFXMeshPrimitiveTypeLine
Error: Cannot set edge creases source because its semantic is not VFXMeshSourceSemanticEdgeCrease
materials[
Error: Failed to archive geometry's custom attributes. %@ %@
kGeometrySourceSemanticVertex
subdivisionLevel
wantsAdaptiveSubdivision
edgeCreasesSource
edgeCreasesElement
subdivisionSettings
tessellator
VFXErrorDomain
--GBufferMaterial--
Assertion '%s' failed. Mesh type has to define a topology
CFXMeshElementTypeDefinesTopology(meshType)
Warning: CFXSkinnerTransposeSkeleton - unable to transpose every joints
Warning: Cannot update the joints using node names: unammed joint found
Warning: Cannot update the joints using node names: can't find node named %@
Warning: _CFXSkinnerUpdateBoundingBox - skinned node has no geometry
Error: We did not succeed in locating all the joints, so do not update the geometry as it might be worse if we use the wrong bones.
Error: _CFXSkinnerUpdateBoundingBox invalid mesh source
joint
CFXSkinner
<CFXSkinner %p skeleton:%p jointCount:%d cpuReady:%d
  skin:%p
  JointBbox[%d] {%f,%f,%f} {%f,%f,%f}
bboxDirty
verticesJointsMatrices[%d]
Perform culling
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/CullingPass.mm
Warning: Failed to transpose skeleton
old skeleton: %@
new skeleton: %@
Error: VFXSkinner: there must be the same number of bone weights and bone indices
Error: VFXSkinner: bone weights must be of type `float`
Error: VFXSkinner: bone indices must be uint8 or uint16 (maximum of 2 bytes)
Error: VFXSkinner: bone indices stride must be equal to componentsPerVector * bytesPerComponent
Error: VFXSkinner: bone weights stride must be equal to componentsPerVector * bytesPerComponent
Error: skinner: invalid index (%d)
Error: mismatch between the vertex count and the number of bones per vertex
Assertion '%s' failed. skinner: invalid compressed data
skinCompressedData.count == 1
Unreachable code: Unsupported bytes per weight
Error: can't create a skinner with no bones
Error: can't create a skinner with no base mesh
Error: bones count and bind transform count don't match
Assertion '%s' failed. boneIndices - failed to deindex
r <= CFXSkinGetWeightsCount(skin)
Assertion '%s' failed. boneIndices - failed to deindex (2)
w == numberOfInfluence * vertexCount
Error: number of transforms (%d) doesn't match the number of joints (%d)
baseMesh
baseMeshBindTransform
bones
Error: Bones index too large for compressed representation : %d
compressedSkinData
boneWeights
boneIndices
baseMeshBindTransform-%d
baseModel
baseModelBindTransform-%d
baseModelBindTransform
sourceState
targetState
transitions
CFXCameraEffectDepthOfField
<CFXCameraEffect depthOfField:%p
CFXCameraEffectMotionBlur
<CFXCameraEffect MotionBlur:%p
CFXCameraEffectGrain
<CFXCameraEffect Grain:%p
CFXCameraEffectExposure
<CFXCameraEffect Exposure:%p
CFXCameraEffectToneMapping
<CFXCameraEffect ToneMapping:%p
CFXCameraEffectBloom
<CFXCameraEffect Bloom:%p
CFXCameraEffectColorGrading
<CFXCameraEffect ColorGrading:%p
CFXCameraEffectVignetting
<CFXCameraEffect Vignetting:%p
CFXCameraEffectColorFringe
<CFXCameraEffect ColorFringe:%p
CFXCameraEffectLensBlur
<CFXCameraEffect LensBlur:%p
CFXCameraEffectChromaticTransform
<CFXCameraEffect ChromaticTransform:%p
CFXCameraEffectDoughnutBokeh
<CFXCameraEffect DoughnutBokeh:%p
CFXCameraEffectSSAO
<CFXCameraEffect SSAO:%p
normals
Assertion '%s' failed. bad redirection index after sort
indexRedirection[index] <= index
Assertion '%s' failed. weld - bad index
index>0
Assertion '%s' failed. weld - bad redirection
Assertion '%s' failed. weld - redirection out of bounds
indexes[index] < count - weldCount
Assertion '%s' failed. weld - bad duplicated vertex count
offset == weldCount
Assertion '%s' failed. weld: bad index
elementDataWrt[index] < count - weldCount
((uint16_t*)elementDataWrt)[index] < count - weldCount
((uint32_t*)elementDataWrt)[index] < count - weldCount
vfx_rt_clearcoat_trace
RTClearCoatTracePass
RTClearCoatSpatialReSTIRPass
vfx_rt_clearcoat_spatial_restir
RTClearCoatUpscalePass
vfx_rt_clearcoat_upscale
ClearCoatUpscale
ClearCoatUpscaleDistance
RTClearCoatTemporalDenoisePass
vfx_rt_clearcoat_temporal_denoise
RT_CLEARCOAT_TRACE
RT_CLEARCOAT_SPATIAL_RESTIR
RT_CLEARCOAT_UPSCALE
RT_CLEARCOAT_TEMPORAL_DENOISE
 %f %f %f %f
Error: Unsupported skin weight format
skin->_inverseBindMatrices
Assertion '%s' failed. inconsistency in %s
count == dstJoints.count && (!dstWeights.ptr || (count == dstWeights.count))
CFXSkinFillJointWeightsBuffers
Error: invalid skin indices
Info: Too many influencing joints (%ld > %d) on the vertex #%u, will cap to %d and renormalize
CFXSkin
<CFXSkin %p name:%@ joint:%d weight:%d vertexCount:%d
  maxInf:%d morpher:%p
defaultShapeMatrix
inverseBindMatrix
jointsCount
weightsCount
inverseBindMatrices
defaultShapeMatrix
maxInfluencesPerVertex
influencingMorpher
vertexWeightIndices[%d]
vertexWeights[%d]
jointsForVertexWeights[%d]
CFXIONSZipFileArchiveHeaderOffset
CFXIONSZipFileArchiveCompressionType
CFXIONSZipFileArchiveCRC
CFXIONSZipFileArchiveCompressedLength
CFXIONSZipFileArchiveUncompressedLength
1.2.12
CFXFXFloorPass.plist
VFX_renderMirroredScene
VFX_renderFloor
u_floorReflectionColor
VFX-floor-color-%p
u_floorReflectionDepth
VFX-floor-depth-%p
u_floorNormal
u_floorTangent
u_floorCenter
u_floorExtent
u_floor_viewport
u_floorReflectivity
u_floorFalloffStart
u_floorFalloff
u_floorPlane
u_floorMVP_i
Assertion '%s' failed. Fov is larger that 180 degrees. this can't be
d > 0
FloorGeomImpl-metal.h
USE_FALLOFF
USE_FALLOFF_START
USE_TRANSPARENCY
FloorImpl-metal.h
Error: CFXSourceAccessorGetValuePtrAtIndex - index out of bounds : %d > %d
Error: CFXSourceAccessorGetValuePtrAtIndex - no data
Error: CFXSourceAccessorGetMutableValuePtrAtIndex - index out of bounds : %d > %d
Error: CFXSourceAccessorGetVolatileValuePtrAtIndex - index out of bounds : %d > %d
Assertion '%s' failed. cannot access volatile data on non volatile source
accessor->_source->_dataIsVolatile
Error: The destination does not have enough room to copy this data
Error: error in CFXSourceAccessorCopyDataToAccessor
CFXSourceAccessor
<CFXSourceAccessor %lx>
componentsCountPerValue
Warning: binding type %d can't not be exposed
CFXCoreEntityHandle
<CFXCoreEntityHandle>
Error: binding access(write) out of bounds (2)
Error: binding access(write) out of bounds
Error: _CFXCoreEntityHandleGetValue - reading memory out of bounds
Error: binding access(read) out of bounds
<CFXGenericSource %lx>
Warning: Cannot duplicate a Metal Buffer source. Create an empty data instead.
Assertion '%s' failed. cannot set data to volatile source
!genericSource->_dataIsVolatile
Assertion '%s' failed. cannot set data to MTL buffer
genericSource->_mtlVertexFormat == 0
Assertion '%s' failed. cannot set volatile data to non volatile source
genericSource->_dataIsVolatile
Assertion '%s' failed. cannot set volatile data to MTL buffer
listener
CFXGenericSource
Error: FATAL ERROR : failed to load Metal shaders library %@, %@
metallib
com.apple.vfx.device
Error: Failed to load common profile chache library : %@
newLibraryWithSource
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/NewRenderer/VFXMTLLibraryManager.mm
Error: Compilation failed %@
Error: Failed to find pre-compiled combination %@ + %@
com.apple.vfx.shader-collection-queue
commonProfile_%@.metal
Error: Failed to collect shader: %@
v16@?0@"NSString"8
Error: Failed to collect shader: additional file "%@" is not always the same
v24@?0@"NSString"8@"NSString"16
 -w 
Error: failed compiling shader:
v24@?0@"<MTLLibrary>"8@"NSError"16
Unreachable code: Unknown compilation mode %d
^(.*)[
program_source:([0-9]+):[0-9]+:\s(.+):\s(.+)$
^<program source>:([0-9]+):[0-9]+:\s(.+):\s(.+)$
\[VFX_(\w+)\((\d+)\)\]
has_background
has_DOF
vfx_path_tracer
PathTracerPass
Error: VFXMTLResourceManager initWithDevice : cannot create a command queue. Bailing out.
VFXMaterialData
vfx_debug_frag
vfx_debug_vert
debug_post_tessellation_vert
debug_isolate_frag
v32@?0@8@"NSMapTable"16^B24
Assertion '%s' failed. cannot use volatile meshSource
CFXMeshSourceIsVolatile(meshSource) != true
Assertion '%s' failed. Semantic %d is not meant to be passed to shaders
attribute != kCFXVertexAttrib_None
Assertion '%s' failed. source should be present
[metalMesh.buffers indexOfObject:buf] != NSNotFound
Assertion '%s' failed. size mismatch in mutable buffers %u!=%u
dataSize == buf.length
dataKind == kCFXMeshDataKindOriginal
v24@?0^{__CFString=}8^v16
textureMatrix
Error: missing value for attachment "%@" [vertex: %d fragment: %d]
Error: incorrect buffer size  for attachments vertex [%d] fragments [%d]. Expected:%d Provided:%d
Warning: Missing texture value for %@
Unable to find texture for binding %@ ("%@") and effect materialProperty %@ derived from value %@ (geometry=%@, material=%@)
Unreachable code: Sampler are not yet implemented as separate bindings
Unreachable code: binding type not supported
v32@?0@8@"VFXMTLDeformerStack"16^B24
Error: format %@ not convertible to MTLVertexFormat
Error: Argument '%@' : failed to write value to Metal buffer (%@)
Error: Argument '%@' : mismatch between the NSData and the buffer size %ld != %ld
Error: Argument '%@' : only NSData and NSValue are supported for shadable value storage (found '%@'). Please make sure that your custom shader modifier uniform types match the custom properties of the shadable object
Assertion '%s' failed. only CFXValue are supported for partial struct storage
caff
aiff
Error: failed to load audio source at %@
Error: Error reading file into buffer: %@
Error: can't archive audio data directly
volume
rate
reverbBlend
positional
shouldStream
resourceCache
cache
resource
CFXResourceCache
<CFXResourceCache 0x%lx>
AnimationGroup
CFXAnimationGroup
<CFXAnimationGroup %p animations:%@>
 point(%f %f %f)
 normal(%f %f %f)
 impulse(%f)
 distance:%f
v16@?0Q8
authoringGraph
Error: unable to update the physics shape of %@
Warning: cannot change collision bit masks without physics world
Error: cannot apply force on a body that is not attached to a VFXNode
Error: cannot clear forces on a body that is not attached to a VFXNode
Assertion '%s' failed. VFXPhysicsBody is already attached to a VFXNode
!_node || _body == 0
Error: cannot attach a body to a null node %p
shape
Assertion '%s' failed. setting the same shape
shape != _physicsShape
momentOfInertia
angularVelocity
velocityFactor
centerOfMassOffset
mass
charge
restitution
rollingFriction
ccdThreshold
physicsShape
damping
angularDamping
linearRestingThreshold
angularRestingThreshold
ignoreGravity
explicitMomentOfInertia
contactTestBitMask
allowsResting
defaultShape
linearSleepingThreshold
angularSleepingThreshold
v40@?0q8q16q24q32
v24@?0d8f16f20
v28@?0f8f12f16f20f24
<Cube [w=%f h=%f l=%f] %@>
<Sphere [r=%f]> %@
<Plane [w=%f h=%f]> %@
<pyramid [w=%f h=%f l=%f] %@>
<Cylinder [h=%f]> %@
<Cone [h=%f]> %@
<Tube [h=%f]> %@
<Capsule [h=%f]> %@
<Torus [r=%f]> %@
unknown parametric type
chamferRadius
innerRadius
pipeRadius
cornerSegmentCount
capSegmentCount
radialSpan
geodesic
parametricType
Assertion '%s' failed. bad time
!isnan(t)
Assertion '%s' failed. bad count
keyIndex == (int)keyCount
Assertion '%s' failed. CFXAnimationClusterCreateWithAnimationGroup out of bounds
valueWrt == kf->_values + (totalValueSize * keyCount)
CFXAnimationClusterKeyframes
<CFXAnimationClusterKeyframes %p>
CFXAnimationCluster
<CFXAnimationCluster %p>
Assertion '%s' failed. unexpected animation class
CFGetTypeID(animation) == CFXKeyframedAnimationGetTypeID()
Unreachable code: -[VFXDisplayLink invalidate] must be called before -[VFXDisplayLink dealloc]
Error: Failed to create display link with error %d
SHADOW_MAP_ATLAS
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/ShadowMapAtlasPass.mm
Shadow map atlas
DOF_DOWNSAMPLE_COLOR_COC
dof_downsample_rate
dof_downsample_color_coc
DOF_COC_DOWNSAMPLE
dof_coc_downsample_sort
DOF_COC_BLUR_OUTPUT_
dof_blur_vertical
dof_coc_blur
DOF_FINAL
dof_compute_kernel_parallel
dof_blur2
scopeParameters.dofEffect
DOF downsample color CoC
DOF downsample CoC
DOF blur CoC X
DOF blur CoC Y
DOF final
DOF_DOWNSAMPLE_COLOR_COC_PASS
DOF_DOWNSAMPLE_SORT_COC_PASS
DOF_FINAL_PASS
Error: didRemoveFromPhysicsBody - body not found
Error: unable to create a collision shape
Assertion '%s' failed. Unsupported indices stride
Info: Non triangle list element type not yet supported in physics shape generation
Error: vertex format not supported for physics shape creation (%d)
Warning: Cannot create convex hull for entity %@
v32@?0@"VFXPhysicsShape"8Q16^B24
Error: Compound shapes cannot be created without shapes
Warning: VFXPhysicsShape does not support a VFXCone with TopRadius != 0.0
transformsCount
transform%d
referenceObject
margin
flattened
Warning: Physics shape construction does not support meshes with positions value type different from double or float. (%d)
Unreachable code: This is not yet implemented
btTriangleInfoData
btTriangleInfoMapData
VFXDefaultPhysicsShape
COLOR_MIRROR_MAP
DEPTH_MIRROR_MAP
MIRROR_PASS
Mirror map
Assertion '%s' failed. Default irradiance texture is not valid
_defaultLightingEnvironmentIrradianceTexture.textureType == MTLTextureTypeCube
_defaultLightingEnvironmentIrradianceTexture.pixelFormat == MTLPixelFormatRGBA16Float
Assertion '%s' failed. Default radiance texture is not valid
_defaultLightingEnvironmentRadianceTexture.textureType == MTLTextureTypeCube
_defaultLightingEnvironmentRadianceTexture.pixelFormat == MTLPixelFormatRGBA16Float
Assertion '%s' failed. Pre-computed irradiance texture is not valid
irradianceTexture.textureType == MTLTextureTypeCube
irradianceTexture.pixelFormat == MTLPixelFormatRGBA16Float
Assertion '%s' failed. Pre-computed radiance texture is not valid
radianceTexture.textureType == MTLTextureTypeCube
radianceTexture.pixelFormat == MTLPixelFormatRGBA16Float
compute_diffusePreIntegrated_texture2d
cubemap_from_sh
compute_specularPreIntegratedLD_texture2d
compute_specularPreIntegratedLD_texturecube
compute_specularPreIntegratedDFG_diffuseHammon
pointOfCulling.world
<%@: %p | world=%@ pointOfView=%@>
Jittering is not supported on VFXMetalLayer
Unreachable code: NOT IMPLEMENTED YET
Assertion '%s' failed. A parametric geometry with a mesh must also have a hash
hasMesh == (hash != NULL)
parametricgeometry
parametricGeometry
Assertion '%s' failed. inconsistency in _CFXParametricGeometryReleaseCachedMesh
retainCount>0
CFXParametricGeometry
Pyramid
Cylinder
Cone
Tube
Capsule
Torus
Sphere
Plane
<%@<%@>:%p "%@"
Assertion '%s' failed. inconsistency in _CFXParametricGeometryCacheIncrRetainCount
retainCount != 0
State %@: {
baseState
stateItems
Error: exception setting state %@: %@
set: %@ to %@ of %@
remove: %@
insert: %@ at %d
addAnim: %@ at %@ to %@
removeAnim: at %@ from:%@
action
failed to decode stateItem target %@ %@
failed to decode stateItem value %@ %@
failed to archive stateItem target %@ %@
failed to archive stateItem value %@ %@
failed to archive stateItem value %@ (doesn't conform to secure coding)
Assertion '%s' failed. Morph target has a vertex count different from the base geometry
vertexCount == CFIndex(baseMesh.pointCount())
Error: Internal consistency error, %@'s (%p) morph %p is not sparse
Error: AnimCodec - Failed to compress mesh
morpherCompressedData
morpherMetaData
Error: AnimCodec - Failed to parse header
Error: AnimCodec - Failed to decompress animation
Error: AnimCodec - Can't decode metadata
HybridCompositePass
has_directLightings
has_indirectDiffuse
has_specular
has_clearcoat
has_subsurface
vfx_hybrid_composite
vfx_hybrid_opacity_filter
HybridCompositeTmp
HybridCompositePassOutput
Assertion '%s' failed. Can't change max batch size while in batch
dynamicBatchingSystem->_currentBatchInstancesCount == 0
Warning: overflow the max batch size boundary
CFXDynamicBatchingSystem
<CFXDynamicBatchingSystem %p>
Custom subgraph published texture
Copy to final
Copy to External
Copy
Get drawable
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/RenderGraphLibrary.mm
DRAWABLE
vec2(
vec3(
vec4(
Assertion '%s' failed. string to type conversion not supported
Assertion '%s' failed. CFXValueAdd - invalid arguments
type == CFXValueGetType(b)
type == CFXValueGetType(output)
CFXValue
<CFXValue %p - %@ ptr:%p >
baseType
Assertion '%s' failed. assertion in DDS loading
!(xSize & (xSize-1))
!(ySize & (ySize-1))
hdr.dwFlags & DDSD_PITCH
hdr.sPixelFormat.dwRGBBitCount == 8
size == xSize * ySize * ddsInfo->_blockBytes
backtrace
CFXFXSampler
<CFXFXSampler>
bindingMode
bindingPointIndicesStride
bindingBarycentricCoordsStride
bindingPointIndicesFormat
bindingBarycentricCoordsFormat
bindingPointIndices
bindingBarycentricCoords
isLegacySingleLayerDeformer
bindingOffsetsOrTransforms
bindingOffsetsOrTransformsLength
bindingInnerLayerInfluences
bindingInnerLayerInfluencesLength
bindingInnerTNBs
bindingOuterTNBs
bindingSpaceVectorsLength
bindingInnerOffsets
bindingOuterOffsets
bindingOffsetsLength
driverTexcoordSource
deformedTexcoordSource
v24@?0@"<MTLFunction>"8@"MTLStageInputOutputDescriptor"16
deformer_wrap_legacy_absolute
deformer_wrap_legacy_relative
deformer_wrap_absolute
deformer_wrap_relative
Info: VFXWorldLoaderConvertUnitsToMetersKey and VFXWorldLoaderConvertToYUpKey have no effect on compressed assets. Use Xcode's compression options instead
file
/System
uv_set
Warning: light_map uv_set:%d is pointing to an invalid uv_set(no corresponding source) and was reset to 1
Unreachable code: __OptimizeMesh:bytesPerIndex != 1, 2, or 4 during conversion, this should not happen !!
Warning: invalid zRange detected (whole world clipped)
B24@?0^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}8^B16
nodeFromflattenedMesh
Unreachable code: Could not find mesh source indexing info for source %p
I16@?0^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}8
Unreachable code: Unssuported texture coordinates channel (%d)
Unreachable code: Does not make sense
Unreachable code: Trying to subdivide a mesh that does not have exactly 1 position source.
Warning: Subdivision process might lead to gaps in surface because vertex welding is disabled when subdividing on the GPU
v12@?0I8
topologyInfo
CFXMeshElementGetIndicesChannelCount(creasesElement) == 1
Assertion '%s' failed. Error while building face-varying channel.
currentIndex == topologyInfo->totalIndexCount
Unreachable code: Internal consistency error
overallVertexIndex == topologyInfo->totalIndexCount
Assertion '%s' failed. Internal consistency error
subdividedElementIndexForFace < subdividedElementCount
Unreachable code: Internal consistency error - Unexpected element type
indexBufferIndex == indexBufferIndexCount
Error (OpenSubdiv): %s
Warning (OpenSubdiv ): %s
Assertion '%s' failed. Semantic %d can not be a primvar
CFXSubdivSourceSemanticCanBePrimvar(semantic, inputSet, isCPUSubdiv)
Unreachable code: Can not subdivide primvar data with %d values per component
Assertion '%s' failed. Can't subdivide further
level <= _finalLevel
Unreachable code: Invalid GPU primvar semantic '%@'
Assertion '%s' failed. Primvar data size is too big (cannot fit %d floats in a float4)
srcContent.componentCount <= 4
Assertion '%s' failed. Position sources must use the 'vertex' interpolation mode
_interpolationMode == kCFXSubdivPrimvarDataInterpolationModeInterpolateVertex
Assertion '%s' failed. Number of normals at limit surface is not equal to number of vertex positions
subdividedDataCount == refiner.GetLevel(refiner.GetMaxLevel()).GetNumVertices()
Error: Position must be float3 to be subdivided. Actual type is %d
Failure in PrimvarRefiner::Limit() -- last level of refinement does not include full topology.
kWorldSourceCreateCameraIfAbsent
kWorldSourceCreateLightIfAbsent
kWorldSourceCreateNormalsIfAbsent
kWorldSourceAdjustInvalidClippingPlanes
kWorldSourceFlattenWorld
kWorldSourceSplitMeshesForGLES
kWorldSourceConvertToYUpIfNeeded
kWorldSourceConvertToUnit
kWorldSourceCleanupMeshes
kWorldSourceRemoveAllLights
kWorldSourceRemoveColorArrays
kWorldSourceInterleaveSources
kWorldSourceMakeSourcesCheaper
kWorldSourceCheckConsistency
kWorldSourceAssetDirectoryURLs
kEnclosingDirectoryURL
VFXCompositorRendererLayoutKey
_mtkView
Assertion '%s' failed. Variable rasterization rate is not supported on this device
[device supportsRasterizationRateMapWithLayerCount:layerCount]
vrr_blit_physical_to_screen_layered
vrr_blit_physical_to_screen
Assertion '%s' failed. Layered rendering is not supported
VFXMTLDeviceSupportsLayeredRendering(device)
VFX - Blit for VFXCompositorRendererLayoutLayered
VFX - Blit for VFXCompositorRendererLayoutDedicated
Unreachable code: _CFXEntityCFInit
Unreachable code: _CFXEntityCFFinalize
_kvc
Assertion '%s' failed. CFTypeIsCFXEntity - dispatched twice
_cfTypeRegistry == NULL
CFXEntity
<CFXEntity:%p>
Assertion '%s' failed. CFXEntitySetAttribute failed to cache attribute
CFGetRetainCount(dict) >= 2
notificationQueue
CFXEngineNotificationQueue
<CFXEngineNotificationQueue %p>
Assertion '%s' failed. missing attribute
Warning: adding a node that was just removed %p
Error: unknown notification name
Assertion '%s' failed. It doesn't make sense to call CFXMeshElementCreateIntervalList for sources with different channels
channels[i] == channels[0]
Error: Could not create intervals for sparse morph target %d (this morph target is useless)
Error: Failed to create packed source %d for sparse morph target %d
Assertion '%s' failed. sparse target should only contain 1 mesh element
CFXMeshGetElementsCount(targetMesh) == 1
Assertion '%s' failed. sparse targets should be in additive mode
morph->_calculationMode == kCFXMorpherCalculationModeAdditive
Error: CFXMorphConvertToCalculationMode: no base source
CFXMorph
<CFXMorph %p "%@"
  calc:%d morphNrm:%d targets:%ld
[%ld] weight:%f %@
<unnamed %d>
Error: Morpher has %d targets weights, but has %d main targets (note: there are %d in-betweens and %d correctives)
Assertion '%s' failed. Morpher failed to update all its runtime weights
overallRuntimeTargetIndex == totalMorphTargetCount
Error: Internal consistency error. There should be %d runtime morph target weights, but we the current morph weight index is %d.
CFXMorpher
<CFXMorpher %p baseGeom:%p state:%d
  morph:%@
VFXRendererOptions
VFXKitError : can't load nib named : VFXRendererOptions
~/%@-snapshot-%d.vfx
archiving to %@
index < (NSInteger)[cameras count]
untitled
%.1f fps
tiff
World
[Root node]
<No name>
selection
not supported anymore
localHash.vertexDescriptorHash
Error: Metal renderer does not support nil vertex function name
renderPipeline
Error: Missing function `%@`, error: %@
Info: Shaders without a vertex function are not allowed
Error: Compiler error while building render pipeline state for node %@:
v24@?0@"<MTLRenderPipelineState>"8@"NSError"16
configure compute pipeline
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/NewRenderer/VFXMTLResourceManager+Compilation.m
Error: Failed creating ComputePipelineState, error: %@
Assertion '%s' failed. Caching requires a constant hash to be provided when using constants
constants == nil || constantsHash != nil
stageDescriptor
Error: Failed to create compute function '%@', error: %@
Unreachable code: Unsupported pixel buffer format %s
Unreachable code: Unsupported pixel buffer YCbCr matrix %@
Error: Could not create color space from %@ and %@
needsInputTRC
needsColorMatrix
needsOutputTRC
inputTRC_type
inputTRC_gamma
inputTRC_a
inputTRC_b
inputTRC_c
inputTRC_d
inputTRC_e
inputTRC_f
colorMatrixColumn0
colorMatrixColumn1
colorMatrixColumn2
outputTRC_type
outputTRC_gamma
outputTRC_a
outputTRC_b
outputTRC_c
outputTRC_d
outputTRC_e
outputTRC_f
biPlanarTextureChromaSubsampling
biPlanarTextureYCbCrMatrix
color_matching_kernel_biplanar
color_matching_kernel
fieldType
halfExtent
smoothness
categoryMask
VFX: CFXProgressDebugger fractionCompleted > 1.0
mainMixerNode
Error: Error starting the audio engine: %@
isGroup
isPrefab
entityTag
isTextureSource
filename
activeStateName
maxMorphTargetCount > 0
basePositionSource
originalNormalSource
Assertion '%s' failed. Internal consistency error - unexpected sparse moprh target
vertexCount == _vertexCountForComputeKernel
Assertion '%s' failed. Vertex buffer has not been completely written to
vertexBufferOffset == vertexBufferLength
Assertion '%s' failed. Sparse indices buffer has not been completely written to
sparseIndicesBufferOffset == sparseIndicesBufferLength
morphNormal
copy_generic
copy_indexed_u8_generic
blend_indexed_u8_generic
copy_indexed_u16_generic
blend_indexed_u16_generic
copy_indexed_u32_generic
blend_indexed_u32_generic
Unreachable code: Unsupported index size for compute kernel
blend_generic
splat_indexed_s8_vertices
splat_indexed_s16_vertices
splat_indexed_s32_vertices
blend_inc_init_8x_pn_kernel
blend_inc_add_8x_pn_kernel
blend_inc_init_8x_p_kernel
blend_inc_add_8x_p_kernel
Unreachable code: Unsupported morph kind
Assertion '%s' failed. Buffer has not been completely written to
dstForWriting == dst + length
writtenIndexCount == runtimeTarget->vertexCount
weightCount == _morphTargetCount
Error: Could not get pixel buffer (CVPixelBufferRef)
Error: CVMetalTextureCacheCreateTextureFromImage failed with status %d
Error: Could not create AVCaptureInput with error: %@
Error: Invalid pixel buffer pixel format: %s
VFXCaptureDeviceOutputConsumerOptionContainsAlpha
Error: Pixel buffer (CVPixelBufferRef) must be IOSurface-backed
CustomAuthoring
<VFXMorpher %p>
weights[%d]
Error: %@ setWeight:forTargetAtIndex:%d - index out of bounds (%d)
Assertion '%s' failed. Update can't be done in place
oldTargetsAndInBetweens.count == targetsAndInBetweens.count
_correctivesAndInBetweens.count == correctivesAndInBetweens.count
Error: invalid in-between buffer, ignoring in-betweens
Assertion '%s' failed. Invalid in-between count (out of bounds) passed to morpher initialization
inBetweenIndex < targetsAndInBetweens.count
Assertion '%s' failed. Expected %u in-betweens but found %u
inBetweenWeights.count == inBetweenCountValidation
q24@?0@"NSNumber"8@"NSNumber"16
v32@?0^{__CFXMesh=}8^{__CFXMeshSource=}16^{__CFXMeshSource=}24
weights[
weightID
useSparseTargets
targetMeshes
inBetweenCounts
inBetweenInfluenceWeights
correctiveMeshes
correctiveDriverCounts
correctiveDriverIndices
correctiveInBetweenCounts
correctiveInBetweenInfluenceWeights
shouldMorphNormals
channelTargetCounts
channelTargetWeights
@24@?0@8Q16
correctives
Assertion '%s' failed. Invalid range
range.location + range.length <= targets.count
Assertion '%s' failed. Presentation instance query targets the wrong world
token->worldRef == world
_buffer
<%@: %p> "%@"
Unreachable code: Invalid resource type
Unreachable code: Not indices are bound!?!
<state: %@>
FrameBuffer bindings:
Node bindings:
Pass bindings:
Shadable bindings:
Light bindings:
Assertion '%s' failed. Bad stage
stage < kCFXFXProgramStageCount
Error: arg type not supported
_vertexDescriptor
<VFXMTLMesh: %p
buffer[%d] : %@
element[%d] : %@
<VFXMTLMeshElement: %p | type: %d, index buffer: %@ (%d indices), indirect buffer: %@, effective count: %d, offset: %d>
<VFXMTLMeshElement: %p | type: %d, index buffer: %@ (%d indices), effective count: %d, offset: %d>
Error: Invalid index size (%d bytes per index)
Unreachable code: Invalid index size (%d bytes per index)
_freeIndices.count > 0
firstFreeIndex != NSNotFound
Assertion '%s' failed. offset should be exactly equal to size
(offset % _elementSize) == 0
Assertion '%s' failed. should have some index free
mtlBuffer.offset != NSNotFound
Assertion '%s' failed. subBuffer size overflow %d > %d
length <= _elementSize
(start & kSOALaneMask) == 0
Assertion '%s' failed. __UpdateHashCodeWithTextureType:inconsistent textureType
textureType < 7
Error: Too many uniform custom samplers given (Max is %d)
index < CFX_MAX_TEXCOORD
Error: invalid custom texture materialProperty.
Assertion '%s' failed. effect materialProperty hash out of bounds
programHashCode->_desc.materialPropertysHash[i] <= ((1 << (kCFXMaterialPropertyHashIndexMax + 1)) - 1)
com.apple.vfx.programHashCodeQueue
CFXProgramHashCode
Assertion '%s' failed. ProgramHashCode should be in the dictionary
CFDictionaryContainsKey(s_ProgramHashCodeDictionary, programHashCode->_hashCodeHash)
programHashCode->_hashCodeHash
<CFXProgramHashCode %p : 
SM_Mat,
SM_Geo,
SM(%@),
Aone,
Acst,
opq,
tgt,
lgh,
amb,
prob,
fog,
dynB,
pntR,
iblTr,
Constant
Phong
ShadowOnly
[%@:
PerPix|
Double|
OverLght|
WrNrm|
Nrmliz|
WriteDepth|
LinDepth|
TrspA
TrspSL
TrspDL
[Node:
LightMap|
VrtCol|
Tess|
PNTriangles|
Phong|
OSD|
SingleCrease|
ScreenSpace|
PrimvarData=%d|
AmbientOcclusion
SelfIllumination
Tex|
rgb0|
rgb1|
flt0|
int|
comp|
mat|
(1D)
(2D)
(3D)
(Cube)
[Lighting:
Soft(%d)
coarseVertexCount
vertexPatchTable
fvarPatchTables
legacyGregoryPatchTable
patchRangesTable
vertexRefiner
fvarRefiners
skinMorphSubdivIndexToMetalIndexBuffer
synchronizeCoarsePositionsPipeline.functionName
fvarChannelDescriptorsBuffer
fvarChannelsPackedDataBuffer
Error: OpenSubdiv unarchiver command buffer execution failed with status %d, error: %@
OSD_IS_ADAPTIVE
Unreachable code: Unsupported patch type
OSD_PATCH_QUADS
OSD_PATCH_TRIANGLES
OSD_PATCH_REGULAR
CONTROL_POINTS_PER_PATCH
OSD_PATCH_GREGORY
OSD_PATCH_GREGORY_BASIS
OSD_PATCH_GREGORY_BOUNDARY
struct OsdInputVertexType { 
    metal::packed_float3 position; 
    metal::packed_float2 texcoord
    metal::packed_float4 color; 
#define OSD_USER_VARYING_DECLARE                             
float2 texcoord
float4 color; 
#define OSD_USER_VARYING_DECLARE_PACKED                             
metal::packed_float2 texcoord
metal::packed_float4 color; 
#define OSD_USER_VARYING_PER_VERTEX(in, out)                 
out.texcoord
 = in.texcoord
out.color = in.color; 
#define OSD_USER_VARYING_PER_CONTROL_POINT(in, out)          
#define OSD_USER_VARYING_PER_EVAL_POINT(UV, a, b, c, d, out) 
 = mix(mix(a.texcoord
, b.texcoord
, UV.x), mix(c.texcoord
, d.texcoord
, UV.x), UV.y); 
out.color = mix(mix(a.color, b.color, UV.x), mix(c.color, d.color, UV.x), UV.y); 
#define OSD_USER_VARYING_DECLARE_ATTRIBUTE                   
 [[attribute(
)]]; 
float4 color [[attribute(
VERTEX_BUFFER_INDEX
PATCH_INDICES_BUFFER_INDEX
CONTROL_INDICES_BUFFER_INDEX
OSD_PATCHPARAM_BUFFER_INDEX
OSD_PERPATCHVERTEXBEZIER_BUFFER_INDEX
OSD_PERPATCHTESSFACTORS_BUFFER_INDEX
OSD_VALENCE_BUFFER_INDEX
OSD_QUADOFFSET_BUFFER_INDEX
TRANSFORMS_BUFFER_INDEX
TESSELLATION_LEVEL_BUFFER_INDEX
INDICES_BUFFER_INDEX
QUAD_TESSFACTORS_INDEX
OSD_PERPATCHVERTEXGREGORY_BUFFER_INDEX
OSD_PATCH_INDEX_BUFFER_INDEX
OSD_DRAWINDIRECT_BUFFER_INDEX
OSD_KERNELLIMIT_BUFFER_INDEX
OSD_PATCH_ENABLE_SINGLE_CREASE
OSD_FRACTIONAL_EVEN_SPACING
OSD_FRACTIONAL_ODD_SPACING
OSD_MAX_TESS_LEVEL
USE_STAGE_IN
USE_PTVS_FACTORS
USE_PTVS_SHARPNESS
THREADS_PER_THREADGROUP
CONTROL_POINTS_PER_THREAD
VERTEX_CONTROL_POINTS_PER_PATCH
OSD_MAX_VALENCE
OSD_NUM_ELEMENTS
OSD_ENABLE_BACKPATCH_CULL
OSD_USE_PATCH_INDEX_BUFFER
OSD_ENABLE_SCREENSPACE_TESSELLATION
OSD_ENABLE_PATCH_CULL
NEEDS_BARRIER
OSD_FVAR_WIDTH
OSD_FVAR_USES_MULTIPLE_CHANNELS
OSD_FVAR_DATA_BUFFER_INDEX
OSD_FVAR_INDICES_BUFFER_INDEX
OSD_FVAR_PATCHPARAM_BUFFER_INDEX
OSD_FVAR_PATCH_ARRAY_BUFFER_INDEX
OSD_FVAR_CHANNELS_CHANNEL_COUNT_INDEX
OSD_FVAR_CHANNELS_CHANNEL_DESCRIPTORS_INDEX
OSD_FVAR_CHANNELS_PACKED_DATA_BUFFER_INDEX
OSD_FVAR_CHANNELS_PATCH_ARRAY_INDEX_BUFFER_INDEX
OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING
OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING
OSD_COLOR_INTERPOLATION_MODE
OSD_TEXCOORD0_INTERPOLATION_MODE
OSD_TEXCOORD1_INTERPOLATION_MODE
OSD_TEXCOORD2_INTERPOLATION_MODE
OSD_TEXCOORD3_INTERPOLATION_MODE
OSD_TEXCOORD4_INTERPOLATION_MODE
OSD_TEXCOORD5_INTERPOLATION_MODE
OSD_TEXCOORD6_INTERPOLATION_MODE
OSD_TEXCOORD7_INTERPOLATION_MODE
CFX_OPTIMIZE_OPENSUBDIV_STORAGE
Assertion '%s' failed. GPU support for OpenSubdiv must not be enabled when there is a tessellator but the subdivision level is still 0.
geometry->_subdivInfo.subdivisionLevel > 0
Error: Invalidating OpenSubdiv runtime data of geometry %@
v20@?0@"<MTLCommandBuffer>"8B16
osdRuntimeData->skinMorphContext.synchronizeCoarsePositionsPipeline
Assertion '%s' failed. %s called but there's no patch to draw.
__CFXSubdivisionOsdGPUHasPatchOfType(osdRuntimeData, cfxPatchType)
CFXSubdivisionOsdGPUDraw
vertexDataBuffer
CFXSubdivisionOsdGPURuntimeData
<CFXSubdivisionOsdGPURuntimeDataRef %p>
Vertex patch table:
  - Patch arrays (%@):
    - %d x %@
  - Data buffer: %p (%@)
  - Patch index buffer: %p (%@)
  - Patch param buffer: %p (%@)
FVar patch table (channel %zu):
Legacy Gregory patch table:
  - Vertex valence buffer: %p (%@)
  - Quad offsets buffer: %p (%@)
  - Vertex stencil table (%d stencils)
    - Sizes buffer: %p (%@)
    - Offsets buffer: %p (%@)
    - Indices buffer: %p (%@)
    - Weights buffer: %p (%@)
  - Vertex evalutor input
    - Src buffer: [offset:%d length:%d stride:%d] %p (%@)
    - Dst buffer: [offset:%d length:%d stride:%d] %p (%@)
v16@?0r^{?={?=@@@@i}{?=@@{BufferDescriptor=iii}{BufferDescriptor=iii}}@}8
Vertex Refiner:
  - Skin/morph indexing table: %p (%@)
Total memory usage: %@
QUADS
TRIANGLES
REGULAR
GREGORY
GREGORY BOUNDARY
GREGORY BASIS
.patchArrays
.dataBufferOffset
.dataBufferCoarseDataSize
.dataBufferFullDataSize
.patchIndexBuffer
.patchParamBuffer
.dataBuffer
.count
.[%d]
.vertexValenceBuffer
.quadOffsetsBuffer
.quadOffsetsBaseGregory
.quadOffsetsBaseGregoryBoundary
.elementCount
.patchArrayCount
.[%d][%d]
.stencilTable
.evaluatorInput
.sizesBuffer
.offsetsBuffer
.indicesBuffer
.weightsBuffer
.numStencils
.srcDesc
.dstDesc
compute_opensubdiv
CFX-OpenSubdiv_compute.metal
Error: OpenSubdiv command buffer execution failed with status %d, error: %@
Assertion '%s' failed. Internal consistency error.
fvarChannelCount == fvarPrimvarCount
Error: OSD_MAX_VALENCE is set to %d and current mesh has a max valence of %d
^{__CFData=}8@?0
v24@?0{?=qq}8
%@-%s
{MTLContext=@@@@}8@?0
mtlBlitContext.computeCommandEncoder
mtlBlitContext.commandBuffer
Error: OpenSubdiv archiver dependency command buffer execution failed with status %d, error: %@
Error: OpenSubdiv archiver command buffer execution failed with status %d, error: %@
vfx_osd_synchronize_coarse_positions_no_argument_buffer
vfx_osd_synchronize_indexed_coarse_positions_no_argument_buffer
osdRuntimeData->coarseVertexCount == remappingTableSize
refiner->computeEvaluator
evaluatorDidSucceed
Main culling context
init
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/Culling.mm
Assertion '%s' failed. Can't get a valid projection info
NULL
cull
astc
_VFXIsLoaded
VFXAntialiasingModeMultisampling8X
VFXAntialiasingModeMultisampling16X
VFXWorld
VFXColor
CAMediaTimingFunction
CABasicAnimation
CAAnimationGroup
CAKeyframeAnimation
CALayer
NSValue
VFXImage
VFXView
VFXMetalLayer
VFXModel
VFXMaterialProperty
VFXLight
VFXParametricModel
VFXMeshElement
VFXRenderer
VFXMorpher
VFXCamera
VFXLOD
VFXMaterial
VFXProgram
VFXConstraint
VFXPhysicsJoint
VFXMeshSource
VFXFloor
VFXShape
VFXText
VFXWorldLoader
VFXAnimationEvent
VFXModelTessellator
VFXForceField
VFXPhysicsBallSocketJoint
VFXPhysicsSliderJoint
VFXPhysicsContact
VFXHitTestResult
VFXPhysicsShape
VFXPhysicsHingeJoint
VFXIKConstraint
VFXLookAtConstraint
VFXPhysicsBody
VFXPhysicsWorld
VFXNode
VFXBoundingBox
VFXBoundingSphere
VFXTransaction
VFXEditingLocalSpace
VFXEditingParentSpace
VFXEditingWorldSpace
VFXEditingScreenSpace
VFXManipulatorPositionCenter
VFXManipulatorPositionMin
VFXManipulatorPositionMax
VFXCameraProjectionDirectionVertical
VFXCameraProjectionDirectionHorizontal
VFXInteractionModeFly
VFXInteractionModeOrbitTurntable
VFXInteractionModeOrbitAngleMapping
VFXInteractionModeOrbitCenteredArcball
VFXInteractionModeOrbitArcball
VFXInteractionModePan
VFXInteractionModeTruck
VFXCameraFillModeFit
VFXCameraFillModeFill
VFXCameraFillModeFitVertically
VFXCameraFillModeFitHorizontally
VFXCameraFillModeStretch
VFXMeshPrimitiveTypeTriangles
VFXMeshPrimitiveTypeTriangleStrip
VFXMeshPrimitiveTypeLine
VFXMeshPrimitiveTypePoint
VFXMeshPrimitiveTypePolygon
VFXTessellationSmoothingModeNone
VFXTessellationSmoothingModePNTriangles
VFXTessellationSmoothingModePhong
VFXSubdivisionBoundaryInterpolationRuleNone
VFXSubdivisionBoundaryInterpolationRuleEdgeOnly
VFXSubdivisionBoundaryInterpolationRuleEdgeAndCorner
VFXSubdivisionFaceVaryingInterpolationRuleLinearNone
VFXSubdivisionFaceVaryingInterpolationRuleLinearCornersOnly
VFXSubdivisionFaceVaryingInterpolationRuleLinearCornersPlus1
VFXSubdivisionFaceVaryingInterpolationRuleLinearCornersPlus2
VFXSubdivisionFaceVaryingInterpolationRuleLinearBoundaries
VFXSubdivisionFaceVaryingInterpolationRuleLinearAll
VFXSubdivisionNormalSmoothingModeCrossTriangle
VFXSubdivisionNormalSmoothingModeCrossQuad
VFXSubdivisionNormalSmoothingModeLimit
VFXHitTestSearchModeClosest
VFXHitTestSearchModeAll
VFXHitTestSearchModeAny
VFXLODThresholdModeWorldSpaceDistance
VFXLODThresholdModeScreenSpaceRadius
VFXMorpherCalculationModeNormalized
VFXMorpherCalculationModeAdditive
VFXChamferModeBoth
VFXChamferModeFront
VFXChamferModeBack
VFXReferenceLoadingPolicyImmediate
VFXReferenceLoadingPolicyOnDemand
VFXAntialiasingModeNone
VFXAntialiasingModeMultisampling2X
VFXAntialiasingModeMultisampling4X
VFXWorldLoaderStatusParsing
VFXWorldLoaderStatusValidating
VFXWorldLoaderStatusProcessing
VFXWorldLoaderStatusComplete
VFXWorldLoaderStatusError
VFXCullModeBack
VFXCullModeFront
VFXBufferFrequencyPerFrame
VFXBufferFrequencyPerNode
VFXBufferFrequencyPerShadable
VFXFillModeFill
VFXFillModeLines
VFXTransparencyModeDefault
VFXTransparencyModeSingleLayer
VFXTransparencyModeDualLayer
VFXBlendModeAlpha
VFXBlendModeAdd
VFXBlendModeSubtract
VFXBlendModeMultiply
VFXBlendModeScreen
VFXBlendModeOpaque
VFXBlendModeMax
VFXFilterModeNone
VFXFilterModeNearest
VFXFilterModeLinear
VFXWrapModeClamp
VFXWrapModeRepeat
VFXWrapModeClampToBorder
VFXWrapModeMirror
VFXPhysicsBodyTypeStatic
VFXPhysicsBodyTypeDynamic
VFXPhysicsBodyTypeKinematic
VFXForceFieldScopeInsideExtent
VFXForceFieldScopeOutsideExtent
VFXForceFieldShapeNone
VFXForceFieldShapeBox
VFXForceFieldShapeSphere
VFXForceFieldShapeCone
VFXForceFieldShapeTube
VFXJS%@JSExport
VFX%@JSExport
%@JSExport
root_node
/System/Library/PrivateFrameworks/USDKit.framework/USDKit
../SharedFrameworks/USDKit.framework/USDKit
Error: Could not load UsdKit
USKObjectPath
USKToken
USKData
USKScene
USKDataTypeResourcePath
USKDataTypeInt
USKDataTypeBool
USKDataTypeDouble3
USKDataTypeDouble4x4
USKDataTypeDouble4x4Array
USKDataTypeFloat
USKDataTypeFloat2
USKDataTypeFloat3
USKDataTypeFloat4
USKDataTypeFloat2Array
USKDataTypeFloat3Array
USKDataTypeFloatArray
USKDataTypeIntArray
USKDataTypeObjectPath
USKDataTypeObjectPathArray
USKDataTypeQuatf
USKDataTypeQuatfArray
USKDataTypeStringArray
USKDataTypeToken
USKDataTypeTokenArray
USKNodeTypeCamera
USKNodeTypeMaterial
USKNodeTypeMesh
USKNodeTypeMeshGroup
USKNodeTypeScope
USKNodeTypeShader
USKNodeTypeSkeletalAnimation
USKNodeTypeSkeleton
USKNodeTypeSkeletonRoot
USKNodeTypeBlendShape
USKNodeTypeTransform
USKRoleTypeColor
USKRoleTypeNone
USKRoleTypeNormal
USKRoleTypePoint
USKRoleTypeVector
USKRoleTypeTextureCoordinate
USKSchemaTypeBindingAPI
[^A-Za-z0-9]
VFX export preview %.02f
customLayerData
creator
assetInfo
component
defaultPrim
metersPerUnit
startTimeCode
endTimeCode
timeCodesPerSecond
invisible
Node_
Skeleton
bindTransforms
skel:skeleton
subdivisionScheme
faceVertexCounts
interpolation
faceVarying
extent
material:binding
_meshGroup
elementType
face
familyName
materialBind
indices
primvars:normals
primvars:st
primvars:displayColor
faceVertexIndices
primvars:normals:indices
primvars:st:indices
primvars:displayColor:indices
Material_
surfaceShader
info:id
UsdPreviewSurface
outputs:surface
emissiveColor
occlusion
Materials
textures
texgen_%lu.png
texgen_%lu
@"NSString"24@?0@"NSString"8@?<B@?@"NSString">16
B16@?0@"NSString"8
inputs:
_texCoordReader
UsdPrimvarReader_float2
outputs:result
inputs:varname
inputs:frame:stPrimvarName
_transform2D
sdrMetadata
role
math
UsdTransform2d
inputs:in
inputs:rotation
inputs:scale
inputs:translation
_texture
UsdUVTexture
inputs:bias
inputs:file
inputs:st
inputs:wrapS
inputs:wrapT
inputs:minFilter
inputs:magFilter
outputs:
mirror
blendShape
pointIndices
skel:blendShapes
skel:blendShapeTargets
offsets
normalOffsets
orthographic
perspective
projection
horizontalAperture
verticalAperture
clippingRange
xformOp:transform
xformOp:translate
xformOp:orient
rotation.euler
xformOp:rotate
xformOp:rotateXYZ
xformOp:scale
xformOp:rotateX
xformOp:rotateY
xformOp:rotateZ
xformOpOrder
Geom
blendShapeWeights
skel:animationSource
blendShapes
primvars:skel:jointWeights
elementSize
primvars:skel:jointIndices
primvars:skel:geomBindTransform
rotations
scales
bbox %p - min:[%f %f %f] max:[%f %f %f]
bsphere %p - center:[%f %f %f] radius:%f
Error: Unflushed transaction present.
Error: Transaction stack contains an uncommited transaction.
Assertion '%s' failed. Unflushed transaction present.
(count == 1)
Warning: invalid keypath: %@ sent to object %@
Warning: invalid key+index: %@ %d sent to object %@
Warning: invalid key+subscript: %@ %@ sent to object %@
Error: CFXTransactionCommit - transaction already committed
CFXTransactionCommit
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/Transactions/CFXTransaction.c
Error: modifying the timing function of an implicit transaction. Missing transaction begin?
Error: modifying duration of implicit transaction. Missing transaction begin?
Error: World %@ is modified within a rendering callback of another world (%@). This is not allowed and may lead to crash
applyBlock
CFXTransaction
<CFXTransaction>
UITrackingRunLoopMode
_CFXTransactionFlush
Warning: max successive flush reached
CFXTransactionExecuteFlush
com.apple.vfx.transaction-queue
transition-0x
Assertion '%s' failed. CFXTransactionRemoveChild - no child
t->childCount > 0
Assertion '%s' failed. CFXTransactionRemoveChild inconsistency
child->parentTransaction == t
Assertion '%s' failed. Error in CFXTransactionPop -> stack empty
(count >= 2)
Error: unexpected transaction commit (missing begin?)
Assertion '%s' failed. CFXTransactionAnimationDidComplete inconsistent animation count
t->pendingAnimationCount>0
Assertion '%s' failed. CFXTransactionAnimationDidInterrupt inconsistent animation count
VFXWorldLoadingContextKey
Unreachable code: Command enqueued by %@ was expected to be run in immediate mode
Unreachable code: Unsupported class %@
animationTimingFunction not implemented for Javascript
cullingSystem
Unreachable code: invalid spatial handle (%d) given
Assertion '%s' failed. invalid spatial handle (%d) given
handle >= 0 && ((uint32_t)handle < cullingSystem->_handles.size())
CFXCullingSystem
<CFXCullingSystem %p>
handle >= 0 && ((uint32_t)handle < _handles.size())
Assertion '%s' failed. handle should not point to non existing index
indexToRemove < _count
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/ManipulatorPass.mm
MANIPULATOR_DEPTH
VendorID
ProductID
MaxInputReportSize
IOHIDManagerOpen failed - %d
Error: not able to get click origin
Warning: _beginTranslateAtLocation: invalid zRange
VFXSceneKitBridgeOptionOriginalURL
VFXSceneKitBridgeOptionSkipLightIntensityRemapping
Assertion '%s' failed. unable to find node in remap table
vfxNode!=nil
Error: VFXMeshSourceSemanticFromSCNSemantic - unknown semantic
Error: VFXMeshPrimitiveTypeFromSCNPrimitiveType - unknown type
Error: unnamed source material property
v32@?0@"SCNMaterialProperty"8Q16^B24
scn_frame
scn_node
#pragma transparent
Error: Unsupported shadable class (%@) uses `#pragma transparent`
field
Error: CFXForceFieldSetOwner - multiple owners
CFXForceField
<CFXForceField %p> Type:%d
DIFF--------------
%d: %@ %@
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/OverlayPass.mm
Assertion '%s' failed. src and dst count must be equal
dst.count == src.count
Error: unsupported conversion %@ -> float4
Unreachable code: not implemented
@"VFXMTLSkinDeformerReadOnlyBuffers"8@?0
needNormal
needTangent
weight_index_size
bone_index_size
skin_var
Int%d_Int%d_%c%c
skin_copy_as_fallback
%c%c
Error: Skinning internal consistency error - vertex count mismatch ('%d == %d' assertion failed)
Error: Skinning internal consistency error - out of range bone index ('%d < %d' assertion failed)
Assertion '%s' failed. Wrong vertex count for skinned positions
_baseVertexCount == effectiveDstPosCount
Assertion '%s' failed. Wrong vertex count for skinned normals
effectiveDstPosCount == normalBuffer.length / (3 * sizeof(float))
Assertion '%s' failed. Wrong vertex count for skinned tangents
effectiveDstPosCount <= tangentBuffer.length / (4 * sizeof(float))
http
Assertion '%s' failed. You can't allocate a registry twice
__semanticRegistry == NULL
Assertion '%s' failed. You can't deallocate a registry that wasn't allocated
__semanticRegistry != NULL
Assertion '%s' failed. You can't register twice the same semantic
[__semanticRegistry objectForKey:semanticName] == nil
Assertion '%s' failed. You can't register twice the same argument name
[__argumentRegistry objectForKey:argumentName] == nil
Warning: arguments named %@ is reserved for type %d
vertexBuffer.
osdIndicesBuffer
osdTessellationLevel
osdVertexBuffer
osdFaceVaryingData
osdFaceVaryingIndices
osdFaceVaryingPatchParams
osdFaceVaryingPatchArray
osdFaceVaryingChannelCount
osdFaceVaryingChannelDescriptors
osdFaceVaryingPatchArrayIndex
osdFaceVaryingChannelsPackedData
vertexBuffer
patchParamBuffer
perPatchVertexBuffer
patchTessBuffer
vfx_nodes
Warning: unknown member in vfx automated buffer : %@
vfx_frame_multi
Sampler
Unreachable code: invalid program stage %d
Assertion '%s' failed. Argument with the same name cannot have different types (%d != %d)
bufferBinding.type == argument.type
Assertion '%s' failed. Argument with the same name cannot have different blocks
(VFXArgumentBindingBlock)bufferBinding.bindBlock == block
Assertion '%s' failed. Argument with the same name cannot have different class type
[bufferBinding isKindOfClass:[VFXMTLPassResourceBinding class]]
(VFXArgumentBindingBlock)bufferBinding.bindBlock == nil
Assertion '%s' failed. Only supports pass buffer arguments as struct
((id <MTLBufferBinding>)argument).bufferDataType == MTLDataTypeStruct
Warning: struct member does not match pass description : %@
Assertion '%s' failed. buffers of the same name in different stages need to have the same type
(NSUInteger)bufferBinding.bufferSize == ((id<MTLBufferBinding>)argument).bufferDataSize
kCreatePropertyListShouldZipOption
kCreatePropertyListShouldKeepReferencesToFilesOption
kExportPointOfViewAttribute
VFXExportWorldIdentifier
VFXExportMovieMirrored
VFXExportMovieSupersamplingFactor
VFXExportMovieFrameRate
VFXExportOperation : error not implemented
QTAddImageCodecType
QTMovieRateAttribute
Error: AVAssetWriter can't create a movie at %@ (error:%@)
Error: appendImage: failed to get a pixelBuffer from CVPixelBufferPoolRef
VFXExport.m
VFX: Couldn't create pixel buffer
Error: append pixel buffer failed
serial assetwriter input queue
Error: error while exporting movie: %@
B24@?0^{__CFXShapeBoundary=^{__CFXShapeVertex}IIffffi}8^{__CFXShapeBoundary=^{__CFXShapeVertex}IIffffi}16
v24@?0^{__CFXShapeBoundary=^{__CFXShapeVertex}IIffffi}8^{__CFXShapeBoundary=^{__CFXShapeVertex}IIffffi}16
v24@?0^{__CFXShapeBoundary=^{__CFXShapeVertex}IIffffi}8i16i20
Assertion '%s' failed. realloc has an allocation size of 0 bytes
boundaryCount > 1
Assertion '%s' failed. Cannot produce any additional triangle.
triangulation->triangleCount < triangulation->maxTriangleCount
Error: CFXShapeConnectedComponentTriangulatePseudopolygon - neighbor index out of bounds
CFXGlyph
<CFXGlyph '%@' in '%@'>
CFXTextLine
<CFXTextLine>
CFXTextFrame
<CFXTextFrame>
profilePath.points
v28@?0c8I12*16I24
v140@?0{__CFXShapeVertex={CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}fBi}8{CGPoint=dd}88f104{CGPoint=dd}108{CGPoint=dd}124
Error: CFXMeshCreateTextFrame: CFXTextFrameRef object is NULL, will create NULL mesh
CFXDeformerStack
<CFXDeformerStack %p>
<CFXDeformerStack %p (geometry: %p)
  morpher: %p
  skinner: %p
  %@: %p
Warning: Should not update VFXLight without CFXLight
Warning: Invalid image
Warning: VFXCore IBL Sync from image only supports URL
Warning: Invalid VFXScene
CFXVFXLightUpdateCommand
<CFXVFXLightUpdateCommand>
%s %p
Unreachable code: Asking to created a texture with an invalid format!
Error: Failed to load image with error %@
Error: Cannot load image %@. Using dummy texture.
Assertion '%s' failed. Too many mip level loaded
loadedMipMapCount <= desc.mipmapLevelCount
v20@?0C8r*12
Error: unknown compression format
Error: Cannot load image %@. Texture will be garbage.
Error: CFXRendererCreateTextureWithImage : error while getting bitmap bytes
compute_cube_from_equi_views
compute_cube_from_equi
compute_equi_from_cube
sourceImage
Error: Failed to load texture named %@ : %@
Unable to find texture for source %@
Assertion '%s' failed. slice count must match to copy
sliceCount == VFXMTLComputeTextureSliceCount(dstTexture)
Assertion '%s' failed. width must match to copy
srcTexture.width == dstTexture.width
Assertion '%s' failed. height must match to copy
srcTexture.height == dstTexture.height
Assertion '%s' failed. depth must match to copy
srcTexture.depth == dstTexture.depth
Assertion '%s' failed. The set we are updating contains more elements than the number of positions we have in store, something it wrong (%d vs %d)
setToApplyTo.count <= _originalDataCount
Unreachable code: Unknown manipulator action
_prepareSnapToAlignDataForAxis - unexpected axis
GBuffer
Albedo
Normals
RoughnessMetalness
Velocity
Error: boundaryOfVerticesIndex out of bound
bestSplitEvents
%@: %p '%@'
%@: %p
 | %d elements
Error: can't set a bounding box to a Mesh (readonly)
Warning: Found elements with different channel counts in the same geometry
Error: Missing channel for source at index %u
Error: Invalid channel (%d) for source at index %u
Register probes
Info: Irradiance: %f, %f, %f
Assertion '%s' failed. MTLBuffer containing the SH coefficients has not the expected size
bufferView.length == CFX::ConstantBufferAlignSize((shOrder * shOrder) * 3 * sizeof(float))
PathTracer input emission
PathTracer input normals
PathTracer input albedo
PathTracer input roughmetalTarget
PathTracer input velocityTarget
PathTracer input depthTarget
CRenderGraphEngineContextRenderFrame
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm
Error: Unable to resolve custom provider %s: %s
Clear drawable
Error: Builtin forward rendergraph provider resolve failed: %s
Error: Builtin pathTracer rendergraph provider resolve failed: %s
Error: Builtin stereo rendergraph provider resolve failed: %s
Error: Builtin holographic rendergraph provider resolve failed: %s
Error: Builtin hybrid renderer rendergraph provider resolve failed: %s
Resources nextFrame
loadGraphProvider
Error: Unable to build graph %s
setup
compile
Destroy graph
Execute
Begin encoding
End encoding
setupRenderPassDescriptor
fxPass
draw
ignoreFloors
onlyShadowCasters
onlyMovableNodes
hasConstantAlpha
installViewport
isViewDependant
overridesCustomProgram
layerMask
includeCategoryMask
excludeCategoryMask
viewport
%f %f %f %f
samples
colorStates
worldBackground
clear
depthStates
enableWrite
enableRead
func
stencilStates
enable
behavior
backFaceBehavior
blendStates
Error: too many blend states: max render target is %d
Warning: can't create a fbo description for pass %@ - can't find pass description with name %@
inputName
Assertion '%s' failed. unexpected error in CFXFXPassSetInputs
fxPass->_inputCount == count
Assertion '%s' failed. unexpected error in CFXFXPassSetOutput
(CFIndex)fxPass->_outputCount <= count
passInstance
CFXFXPassInput
<CFXFXPassInput %@>
uniformName
CFXFXPass
<CFXFXPass %@>
nameToInput
draw_world
draw_node
draw_main_world
draw_nodes
draw_geometry
draw_quad
metal_custom
draw_none
custom
preDraw
preFX
preToneMap
postFX
front
cullNone
back
Error: unknown cull mode named %@
never
always
equal
notEqual
less
lessEqual
greater
greaterEqual
Error: unknown depth comparison function named %@
depthFail
fail
readMask
writeMask
referenceValue
keep
zero
replace
increment
decrement
invert
incrementWrap
decrementWrap
colorSrc
colorDst
alphaSrc
alphaDst
colorOp
alphaOp
oneMinusSrcColor
oneMinusSrcAlpha
oneMinusDstColor
oneMinusDstAlpha
constantColor
oneMinusConstantColor
constantAlpha
oneMinusConstantAlpha
alphaSaturate
Error: unknown blend factor named %@
substract
reverseSubstract
Error: unknown blend op named %@
mipmapped
%fx%f
texture_rectangle
usage
color0
stencil
Error: _bufferTypeFromName - unknown output type: %@
Warning: unknown depth texture format : %@
Warning: unknown texture format : %@
targetName
Error: description for input named %@ is missing
Error: 'type' is required for symbol %@
Assertion '%s' failed. pass:_setupInput unexpected type
typeTest == input->_baseType
tangent
viewTransform
modelViewProjectionInverseTransform
modelViewInverseTransform
modelInverseTransform
viewInverseTransform
projectionInverseTransform
normalInverseTransform
Warning: symbol named %@ should be in "targets" not "symbols"
Warning: _convertOutputsDescriptionToOutputs - can't find output named %@
global
persistent
Error: _convertOutputsDescriptionToOutputs - unknown output type: %@
pass->_overridedRendererElementsProgramHashcodes
Error: failed to resolve entity with tag %@
Error: failed to find tag %@
_entityObject
Error: invalid keyPath %@
vfx_rt_specular_trace
RTSpecularTracePass
RTSpecularSpatialReSTIRPass
vfx_rt_specular_spatial_restir
RTSpecularUpscalePass
vfx_rt_specular_upscale
SpecularUpscale
SpecularUpscaleDistance
RTSpecularTemporalDenoisePass
vfx_rt_specular_temporal_denoise
RT_SPECULAR_SPATIAL_RESTIR
RT_SPECULAR_UPSCALE
RT_SPECULAR_TEMPORAL_DENOISE
kGeometrySourceSemanticTangent
kGeometrySourceSemanticVertexCrease
kGeometrySourceSemanticEdgeCrease
kGeometrySourceSemanticBoneWeights
kGeometrySourceSemanticBoneIndices
<%@: %p | semantic=%@ vectors=%d %@x%d>
Error: meshSourceWithData: interleaved buffers as doubles are not supported
Error: meshSourceWithBuffer - invalid vertex format
Error: _modelSourceWithSource - invalid vertex format
_modelSourceWithSource - Conversion failed
Error: Could not create mesh source
Assertion '%s' failed. VFXMeshSource should only store a base type
_componentType == CFXBaseTypeGetComponentType(_componentType)
Assertion '%s' failed. vImageEncodeVectorHalf only supports half2/3/4
_componentCount >= 2 && _componentCount <= 4
halfSource
Assertion '%s' failed. Consistenty check issue during conversion for vImageEncodeVectorHalf
encodedComponentType == kCFXBaseTypeHalf
Assertion '%s' failed. vImageEncodeVectorHalf failed to write bytes
compressedSize > 0
cdata
vectorCount
floatComponents
bytesPerComponent
componentType
componentsPerVector
dataOffset
dataStride
mkSemantic
colorSpace
Unreachable code: VFXMeshSource should only store a base type
Unreachable code: Data is marked as compressed but does not contain half components
Assertion '%s' failed. Decoding failed
decompressedSize == decompressedDataCapacity
Error: _modelSourceWithSource - Conversion failed
Geometry source has invalid bounds
v20@?0^I8I16
scratchAllocator
debug_probe_vert
debug_probe_frag_cube_array
debug_probe_frag_2d_array
vfx_draw_fullscreen_fragment
COLOR_PICKED
DEPTH_PICKED
COLOR_OUTLINE
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/AuthoringPass.mm
vfx_outline_vert
vfx_outline_frag
Picked object
Outline
AUTHORING COLOR OUTPUT
PICKED_OBJECT
OUTLINE
CFXFXCIFilterPass.json
CFXFXCIFilterPassMetal.json
CFXFXCIFilterPassMetalRenderGraph.json
vfx_deformer
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-
<plist version="1.0">
<dict>
<key>sequence</key>
<array>
<string>VFX_renderMirroredScene</string>
<string>VFX_renderFloor</string>
</array>
<key>passes</key>
<dict>
<key>VFX_renderMirroredScene</key>
<dict>
<key>outputs</key>
<dict>
<key>depth</key>
<string>VFX-Floor-depth</string>
<key>color</key>
<string>VFX-Floor-color</string>
</dict>
<key>draw</key>
<string>DRAW_SCENE</string>
<key>depthStates</key>
<dict>
<key>clear</key>
<true/>
</dict>
<key>colorStates</key>
<dict>
<key>clear</key>
<true/>
</dict>
</dict>
<key>VFX_renderFloor</key>
<dict>
<key>depthStates</key>
<dict>
<key>clear</key>
<false/>
</dict>
<key>colorStates</key>
<dict>
<key>clear</key>
<false/>
</dict>
<key>inputs</key>
<dict>
<key>u_floorReflectionDepth</key>
<string>VFX-Floor-depth</string>
<key>u_floorReflectionColor</key>
<string>VFX-Floor-color</string>
<key>u_floorNormal</key>
<string>u_floorNormal</string>
<key>u_floorTangent</key>
<string>u_floorTangent</string>
<key>u_floorCenter</key>
<string>u_floorCenter</string>
<key>u_floorExtent</key>
<string>u_floorExtent</string>
<key>u_floorReflectivity</key>
<string>u_floorReflectivity</string>
<key>u_floor_viewport</key>
<string>u_floor_viewport</string>
<key>u_floorMVP_i</key>
<string>u_floorMVP_i</string>
<key>u_floorPlane</key>
<string>u_floorPlane</string>
<key>u_floorFalloff</key>
<string>u_floorFalloff</string>
<key>u_floorFalloffStart</key>
<string>u_floorFalloffStart</string>
</dict>
<key>draw</key>
<string>DRAW_GEOMETRY</string>
<key>installViewport</key>
<false/>
</dict>
</dict>
<key>symbols</key>
<dict>
<key>u_floorNormal</key>
<dict>
<key>type</key>
<string>float3</string>
</dict>
<key>u_floorTangent</key>
<dict>
<key>type</key>
<string>float4</string>
</dict>
<key>u_floorCenter</key>
<dict>
<key>type</key>
<string>float3</string>
</dict>
<key>u_floorExtent</key>
<dict>
<key>type</key>
<string>float2</string>
</dict>
<key>u_floor_viewport</key>
<dict>
<key>type</key>
<string>float4</string>
</dict>
<key>u_floorReflectivity</key>
<dict>
<key>type</key>
<string>float</string>
</dict>
<key>u_floorMVP_i</key>
<dict>
<key>type</key>
<string>float4x4</string>
</dict>
<key>u_floorPlane</key>
<dict>
<key>type</key>
<string>float4</string>
</dict>
<key>u_floorFalloff</key>
<dict>
<key>type</key>
<string>float</string>
</dict>
<key>u_floorFalloffStart</key>
<dict>
<key>type</key>
<string>float</string>
</dict>
</dict>
<key>targets</key>
<dict>
<key>VFX-Floor-depth</key>
<dict>
<key>type</key>
<string>depth</string>
</dict>
<key>VFX-Floor-color</key>
<dict>
<key>type</key>
<string>color</string>
<key>format</key>
<string>rgba</string>
</dict>
</dict>
</dict>
</plist>
  "passes" : {
    "VFX_ApplyCIFilter" : {
      "outputs" : {
        "color" : "VFX-CI-effect-color"
      },
      "inputs" : {
        "myInput1" : "VFX-CI-nodetree-color"
      },
      "draw" : "CUSTOM"
    },
    "VFX_renderCINodeTree" : {
      "outputs" : {
        "depth" : "VFX-CI-nodetree-depth",
        "color" : "VFX-CI-nodetree-color"
      },
      "ignoreFloors" : true,
      "draw" : "DRAW_NODE",
      "node" : "self"
    },
    "VFX_renderCIQuad" : {
      "inputs" : {
        "u_m" : "CFX-CIFilter_modelMatrix",
        "u_color" : {
          "target" : "VFX-CI-effect-color",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        },
        "u_middleZ" : "CFX-CIFilter_middleZ",
        "u_depth" : {
          "target" : "VFX-CI-nodetree-depth",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        }
      },
      "hasConstantAlpha" : false,
      "colorStates" : {
        "clear" : false
      },
      "depthStates" : {
        "clear" : false
      },
      "program" : "CFX-CIFilterComposite",
      "draw" : "none",
      "clientProgram" : false,
      "blendStates" : {
        "enable" : true,
        "colorDst" : "oneMinusSrcAlpha",
        "colorSrc" : "one"
      }
    }
  },
  "sequence" : [
    "VFX_renderCINodeTree",
    "VFX_ApplyCIFilter",
    "VFX_renderCIQuad"
  ],
  "symbols" : {
    "CFX-CIFilter_middleZ" : {
      "type" : "float"
    },
    "CFX-CIFilter_modelMatrix" : {
      "type" : "mat4"
    }
  },
  "targets" : {
    "VFX-CI-effect-color" : {
      "type" : "color"
    },
    "VFX-CI-nodetree-color" : {
      "target" : "texture_rectangle",
      "type" : "color"
    },
    "VFX-CI-nodetree-depth" : {
      "type" : "depth"
    }
  "sequence" : [
                "VFX_renderCINodeTree",
                "VFX_ApplyCIFilter",
                "VFX_renderCIQuad"
                ],
  "targets" : {
    "VFX-CI-nodetree-depth" : {
      "type" : "depth"
    },
    "VFX-CI-nodetree-color" : {
      "type" : "color",
      "format" : "rgba",
    },
    "VFX-CI-effect-color" : {
      "type" : "color",
      "format" : "rgba",
      "usage" : ["shaderWrite", "shaderRead"]
    }
  },
  "symbols" : {
    "CFX-CIFilter_middleZ" : {
      "type" : "float"
    },
    "CFX-CIFilter_extent" : {
      "type" : "float4"
    }
  },
  "passes" : {
    "VFX_renderCIQuad" : {
      "inputs" : {
        "u_color" : {
          "target" : "VFX-CI-effect-color",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        },
        "u_middleZ" : "CFX-CIFilter_middleZ",
        "u_extent" : "CFX-CIFilter_extent",
        "u_depth" : {
          "target" : "VFX-CI-nodetree-depth",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        }
      },
      "hasConstantAlpha" : false,
      "colorStates" : {
        "clear" : false
      },
      "depthStates" : {
        "clear" : false
      },
      "cullMode" : "none",
      "metalVertexShader" : "vfx_filterCompositeVert",
      "metalFragmentShader" : "vfx_filterCompositeFrag",
      "draw" : "none",
      "clientProgram" : false,
      "blendStates" : {
        "enable" : true,
        "colorDst" : "oneMinusSrcAlpha",
        "colorSrc" : "one"
      }
    },
    "VFX_ApplyCIFilter" : {
      "outputs" : {
        "color" : "VFX-CI-effect-color"
      },
      "inputs" : {
        "myInput1" : "VFX-CI-nodetree-color"
      },
      "draw" : "CUSTOM"
    },
    "VFX_renderCINodeTree" : {
      "draw" : "DRAW_NODE",
      "node" : "self",
      "ignoreFloors" : true,
      "outputs" : {
        "depth" : "VFX-CI-nodetree-depth",
        "color" : "VFX-CI-nodetree-color"
      },
      "colorStates" : {
        "clear" : true
      },
      "depthStates" : {
        "clear" : true
      },
      
    }
  "sequence" : [
                "VFX_renderCIQuad"
                ],
  "targets" : {
    "VFX-CI-effect-depth" : {
      "type" : "depth"
    },
    "VFX-CI-effect-color" : {
      "type" : "color",
      "format" : "rgba",
      "usage" : ["shaderWrite", "shaderRead"]
    }
  },
  "symbols" : {
    "CFX-CIFilter_middleZ" : {
      "type" : "float"
    },
    "CFX-CIFilter_extent" : {
      "type" : "float4"
    }
  },
  "passes" : {
    "VFX_renderCIQuad" : {
      "inputs" : {
        "u_color" : {
          "target" : "VFX-CI-effect-color",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        },
        "u_middleZ" : "CFX-CIFilter_middleZ",
        "u_extent" : "CFX-CIFilter_extent",
        "u_depth" : {
          "target" : "VFX-CI-effect-depth",
          "sampler" : {
            "magnificationFilter" : "nearest",
            "minificationFilter" : "nearest"
          }
        }
      },
      "hasConstantAlpha" : false,
      "colorStates" : {
        "clear" : false
      },
      "depthStates" : {
        "clear" : false
      },
      "cullMode" : "none",
      "metalVertexShader" : "vfx_filterCompositeVert",
      "metalFragmentShader" : "vfx_filterCompositeFrag",
      "draw" : "none",
      "clientProgram" : false,
      "blendStates" : {
        "enable" : true,
        "colorDst" : "oneMinusSrcAlpha",
        "colorSrc" : "one"
      }
    },
#import <metal_stdlib>
using namespace metal;
#import "vfx_metal"
#import "vfx_util.h"
#import "CFX-PBR.metal"
#import "vfx_tessellation.h"
#ifdef USE_LAYERED_RENDERING
#define texture2d_layer texture2d_array
#define sampleLayer(a,b) sample(a,b,in.sliceIndex)
#else
#define texture2d_layer texture2d
#define sampleLayer(a,b) sample(a,b)
#endif
#ifdef CFX_USE_TEXTURE_FOR_LIGHT_INDICES
#define LightIndex(lid) u_lightIndicesTexture.read((ushort)lid).x
#else
#define LightIndex(lid) u_lightIndicesBuffer[lid]
#endif
#ifdef USE_GBUFFER_OUTPUT
    #undef USE_PER_VERTEX_LIGHTING
    #undef USE_PER_PIXEL_LIGHTING
    #undef USE_LIGHTING
#endif
typedef struct {
#ifdef USE_MODELTRANSFORM
    float4x4 modelTransform;
#endif
#ifdef USE_INVERSEMODELTRANSFORM
    float4x4 inverseModelTransform;
#endif
#ifdef USE_MODELVIEWTRANSFORM
    float4x4 modelViewTransform;
#endif
#ifdef USE_INVERSEMODELVIEWTRANSFORM
    float4x4 inverseModelViewTransform;
#endif
#ifdef USE_NORMALTRANSFORM
    float4x4 normalTransform;
#endif
#ifdef USE_MODELVIEWPROJECTIONTRANSFORM
    float4x4 modelViewProjectionTransform;
#endif
#ifdef USE_INVERSEMODELVIEWPROJECTIONTRANSFORM
    float4x4 inverseModelViewProjectionTransform;
#endif
#ifdef USE_LASTFRAMETRANSFORM
    float4x4 lastFrameModelTransform;
#endif
#ifdef USE_MOTIONBLUR
    float motionBlurIntensity;
#endif
#ifdef USE_BOUNDINGBOX
    float2x3 boundingBox;
#endif
#ifdef USE_WORLDBOUNDINGBOX
    float2x3 worldBoundingBox;
#endif
#ifdef USE_NODE_OPACITY
    float nodeOpacity;
#endif
#if defined(USE_PROBES_LIGHTING) && (USE_PROBES_LIGHTING == 2)
    sh2_coefficients shCoefficients;
#elif defined(USE_PROBES_LIGHTING) && (USE_PROBES_LIGHTING == 3)
    sh3_coefficients shCoefficients;
#endif
#ifdef USE_CLUSTERED_LIGHTING
    uint8_t categoryBitmask;
#endif
} commonprofile_node;
typedef struct {
    float3 position         [[attribute(VFXVertexSemanticPosition)]];
#ifdef HAS_NORMAL
    float3 normal           [[attribute(VFXVertexSemanticNormal)]];
#endif
#ifdef USE_TANGENT
    float4 tangent          [[attribute(VFXVertexSemanticTangent)]];
#endif
#ifdef USE_VERTEX_COLOR
    float4 color            [[attribute(VFXVertexSemanticColor)]];
#endif
#if defined(NEED_IN_TEXCOORD0) || defined(DEBUG_PIXEL)
    float2 texcoord0        [[attribute(VFXVertexSemanticTexcoord0)]];
#endif
#ifdef NEED_IN_TEXCOORD1
    float2 texcoord1        [[attribute(VFXVertexSemanticTexcoord1)]];
#endif
#ifdef NEED_IN_TEXCOORD2
    float2 texcoord2        [[attribute(VFXVertexSemanticTexcoord2)]];
#endif
#ifdef NEED_IN_TEXCOORD3
    float2 texcoord3        [[attribute(VFXVertexSemanticTexcoord3)]];
#endif
#ifdef NEED_IN_TEXCOORD4
    float2 texcoord4        [[attribute(VFXVertexSemanticTexcoord4)]];
#endif
#ifdef NEED_IN_TEXCOORD5
    float2 texcoord5        [[attribute(VFXVertexSemanticTexcoord5)]];
#endif
#ifdef NEED_IN_TEXCOORD6
    float2 texcoord6        [[attribute(VFXVertexSemanticTexcoord6)]];
#endif
#ifdef NEED_IN_TEXCOORD7
    float2 texcoord7        [[attribute(VFXVertexSemanticTexcoord7)]];
#endif
} vfx_vertex_t; 
typedef struct {
    float4 fragmentPosition [[position]]; 
#ifdef USE_POINT_RENDERING
    float fragmentSize [[point_size]];
#endif
#ifdef USE_VERTEX_COLOR
    float4 vertexColor;
#endif
#ifdef USE_PER_VERTEX_LIGHTING
    float3 diffuse;
#ifdef USE_SPECULAR
    float3 specular;
#endif
#ifdef USE_CLEARCOAT
    float clearCoat;
#endif
#ifdef USE_CLEARCOATROUGHNESS
    float clearCoatRoughness;
#endif
#ifdef USE_CLEARCOATNORMAL
    float clearCoatNormal;
#endif
#endif
#if defined(USE_POSITION) && (USE_POSITION == 2)
    float3 position;
#endif
#if defined(USE_NORMAL) && (USE_NORMAL == 2) && defined(HAS_OR_GENERATES_NORMAL)
    float3 normal;
#endif
#if defined(USE_TANGENT) && (USE_TANGENT == 2)
    float3 tangent;
#endif
#if defined(USE_BITANGENT) && (USE_BITANGENT == 2)
    float3 bitangent;
#endif
#ifdef USE_DISPLACEMENT_MAP
    float2 displacementTexcoord;   
#endif
#ifdef USE_CLEARCOAT_MAP
    float2 clearCoatTexcoord;   
#endif
#ifdef USE_CLEARCOATROUGHNESS_MAP
    float2 clearCoatRoughnessTexcoord;   
#endif
#ifdef USE_CLEARCOATNORMAL_MAP
    float2 clearCoatNormalTexcoord;   
#endif
#ifdef USE_NODE_OPACITY
    float nodeOpacity;
#endif
#ifdef USE_TEXCOORD
    __TexcoordDecl__
#endif
    
#ifdef USE_EXTRA_VARYINGS
    __ExtraVaryingsDecl__
#endif
#ifdef USE_LASTFRAMETRANSFORM
    float3 mv_lastFragment;
    float3 mv_fragment;
#endif
#ifdef USE_OUTLINE
    float outlineHash [[ flat ]];
#endif
#ifdef USE_INSTANCING
    uint   instanceID [[ flat ]];
#endif
#ifndef USE_VERTEX_AMPLIFICATION 
#ifdef USE_LAYERED_RENDERING
    uint   sliceIndex [[render_target_array_index]];
#endif
#ifdef USE_MULTIPLE_VIEWPORTS_RENDERING
    uint   sliceIndex [[viewport_array_index]];
#endif
#endif
#if DEBUG_PIXEL
    float2 uv0;
#endif
} commonprofile_io;
#ifdef USE_SHADER_MODIFIERS
__ShaderModifiersDecl__
#endif
#import "CFX-Lighting.metal"
enum CFXColorMask {
    kCFXColorMaskRed    = 0x1 << 3,
    kCFXColorMaskGreen  = 0x1 << 2,
    kCFXColorMaskBlue   = 0x1 << 1,
    kCFXColorMaskAlpha  = 0x1 << 0
inline float4 colorFromMask(float4 col, int mask)
    switch (mask) {
        case kCFXColorMaskRed:                      return col.r;
        case kCFXColorMaskRed|kCFXColorMaskGreen:   return float4(col.rg, 0.f, 1.f);
        case kCFXColorMaskRed|kCFXColorMaskBlue:    return float4(col.rb, 0.f, 1.f);
        case kCFXColorMaskRed|kCFXColorMaskAlpha:   return float4(col.ra, 0.f, 1.f);
        case kCFXColorMaskGreen:                    return col.g;
        case kCFXColorMaskGreen|kCFXColorMaskBlue:  return float4(col.bg, 0.f, 1.f);
        case kCFXColorMaskGreen|kCFXColorMaskAlpha: return float4(col.ag, 0.f, 1.f);
        case kCFXColorMaskBlue:     return col.b;
        case kCFXColorMaskBlue|kCFXColorMaskAlpha:  return float4(col.ab, 0.f, 1.f);
        case kCFXColorMaskAlpha:    return col.a;
    }
    return col;
#ifndef USE_PBR
inline float3 illuminate(VFXShaderSurface surface, VFXShaderLightingContribution lighting)
    float3 albedo = surface.diffuse.rgb * surface.ambientOcclusion;
    float3 color = lighting.diffuse * albedo;
#if defined(USE_AMBIENT_LIGHTING)
    color +=  lighting.ambient * albedo;
#endif
#ifdef USE_SELFILLUMINATION
    color += surface.diffuse.rgb * surface.selfIllumination.rgb;
#endif
    
    
    
#ifdef USE_SPECULAR
    float3 S = lighting.specular;
#elif defined(USE_REFLECTIVE)
    float3 S = float3(0.);
#endif
#ifdef USE_REFLECTIVE
    S += surface.reflective.rgb * surface.ambientOcclusion;
#endif
#ifdef USE_SPECULAR
    S *= surface.specular.rgb;
#endif
#if (defined(USE_SPECULAR) || defined(USE_REFLECTIVE)) && !defined(DISABLE_SPECULAR)
    color += S;
#endif
#ifdef USE_EMISSION
    color += surface.emission.rgb;
#endif
#ifdef USE_MULTIPLY
    color *= surface.multiply.rgb;
#endif
#ifdef USE_MODULATE
    color *= lighting.modulate;
#endif
    return color;
#endif
struct VFXShaderGeometry
    float4 position;
    float3 normal;
    float4 tangent;
    float4 color;
    float pointSize;
    float2 texcoords[8]; 
#ifdef USE_CLIP_DISTANCE0
    float clipDistance0;
#endif
#ifdef USE_CLIP_DISTANCE1
    float clipDistance1;
#endif
#ifdef USE_CLIP_DISTANCE2
    float clipDistance2;
#endif
#ifdef USE_CLIP_DISTANCE3
    float clipDistance3;
#endif
struct commonprofile_uniforms {
    
    float4 diffuseColor;
    float4 specularColor;
    float4 ambientOcclusionColor;
    float4 emissionColor;
    float4 selfIlluminationColor;
    float4 reflectiveColor;
    float4 multiplyColor;
    float4 transparentColor;
    float clearCoat;
    float clearCoatRoughness;
    float3 clearCoatNormal;
    float subsurface;
    float3 subsurfaceRadius;
    float metalness;
    
    float roughness;
    float diffuseIntensity;
    float specularIntensity;
    float normalIntensity;
    float ambientOcclusionIntensity;
    float emissionIntensity;
    float selfIlluminationIntensity;
    float reflectiveIntensity;
    float multiplyIntensity;
    float transparentIntensity;
    
    float metalnessIntensity;
    float roughnessIntensity;
    float clearCoatIntensity;
    float clearCoatRoughnessIntensity;
    float clearCoatNormalIntensity;
    float subsurfaceIntensity;
    float subsurfaceRadiusIntensity;
    float displacementIntensity;
    float materialShininess;
    float selfIlluminationOcclusion;
    float alphaCutoff;
    float3 fresnel; 
    
#if USE_ARGUMENT_BUFFERS
    texture2d<float>    emissionTexture;
    sampler             emissionSampler;
    texture2d<float>    ambientOcclusionTexture;
    sampler             ambientOcclusionSampler;
    texture2d<float>    diffuseTexture;
    sampler             diffuseSampler;
    texture2d<float>    specularTexture;
    sampler             specularSampler;
#if defined(USE_REFLECTIVE_CUBEMAP)
    texturecube<float>  reflectiveTexture;
#else
    texture2d<float>    reflectiveTexture;
#endif
    sampler             reflectiveSampler;
    texture2d<float>    transparentTexture;
    sampler             transparentSampler;
    texture2d<float>    multiplyTexture;
    sampler             multiplySampler;
    texture2d<float>    normalTexture;
    sampler             normalSampler;
    texture2d<float>    selfIlluminationTexture;
    sampler             selfIlluminationSampler;
    texture2d<float>    metalnessTexture;
    sampler             metalnessSampler;
    texture2d<float>    roughnessTexture;
    sampler             roughnessSampler;
    texture2d<float>    displacementTexture;
    sampler             displacementSampler;
    
#endif 
#ifdef TEXTURE_TRANSFORM_COUNT
    float4x4 textureTransforms[TEXTURE_TRANSFORM_COUNT];
#endif
#ifdef USE_OPENSUBDIV
__OpenSubdivDeclPerGeometry__
__OpenSubdivDeclPerPatchType__
__OpenSubdivDeclShared__
struct osd_packed_vertex {
    packed_float3 position;
#if defined(OSD_USER_VARYING_DECLARE_PACKED)
    OSD_USER_VARYING_DECLARE_PACKED
#endif
#endif
#ifdef USE_DISPLACEMENT_MAP
static void applyDisplacement(texture2d<float>                 displacementTexture,
                              sampler                          displacementTextureSampler,
                              float2                           displacementTexcoord,
                              thread VFXShaderGeometry&        geometry,
                              constant commonprofile_uniforms& vfx_commonprofile)
#ifdef USE_DISPLACEMENT_TEXTURE_COMPONENT
float altitude = colorFromMask(displacementTexture.sample(displacementTextureSampler, displacementTexcoord), USE_DISPLACEMENT_TEXTURE_COMPONENT).r;
#ifdef USE_DISPLACEMENT_INTENSITY
altitude *= vfx_commonprofile.displacementIntensity;
#endif
#if defined(USE_NORMAL) && defined(HAS_OR_GENERATES_NORMAL)
float3 bitangent = geometry.tangent.w * normalize(cross(geometry.tangent.xyz, geometry.normal.xyz));
geometry.position.xyz += geometry.normal * altitude;
float3 offset = float3(1.f / displacementTexture.get_width(), 1.f / displacementTexture.get_height(), 0.f);
float3 h;
h.x = colorFromMask(displacementTexture.sample(displacementTextureSampler, displacementTexcoord), USE_DISPLACEMENT_TEXTURE_COMPONENT).r;
h.y = colorFromMask(displacementTexture.sample(displacementTextureSampler, displacementTexcoord+offset.xz), USE_DISPLACEMENT_TEXTURE_COMPONENT).r;
h.z = colorFromMask(displacementTexture.sample(displacementTextureSampler, displacementTexcoord-offset.zy), USE_DISPLACEMENT_TEXTURE_COMPONENT).r;
#ifdef USE_DISPLACEMENT_INTENSITY
h *= vfx_commonprofile.displacementIntensity;
#endif
float3 n = normalize( float3( (h.x - h.y)/offset.x, 1., (h.x - h.z)/offset.y) );
geometry.normal = geometry.tangent.xyz * n.x + geometry.normal.xyz * n.y + bitangent.xyz * n.z;
geometry.tangent.xyz = normalize(cross(bitangent, geometry.normal));
#endif 
#else 
float3 displacement = displacementTexture.sample(displacementTextureSampler, displacementTexcoord).rgb;
#ifdef USE_DISPLACEMENT_INTENSITY
displacement *= vfx_commonprofile.displacementIntensity;
#endif
#if defined(USE_NORMAL) && defined(HAS_OR_GENERATES_NORMAL)
float3 bitangent = geometry.tangent.w * normalize(cross(geometry.tangent.xyz, geometry.normal.xyz));
geometry.position.xyz += geometry.tangent.xyz * displacement.x + geometry.normal.xyz * displacement.y + bitangent.xyz * displacement.z;
float3 offset = float3(1.f / displacementTexture.get_width(), 1.f / displacementTexture.get_height(), 0.f);
float3 a = displacementTexture.sample(displacementTextureSampler, displacementTexcoord).rgb;
float3 b = displacementTexture.sample(displacementTextureSampler, displacementTexcoord+offset.xz).rgb;
float3 c = displacementTexture.sample(displacementTextureSampler, displacementTexcoord+offset.zy).rgb;
#ifdef USE_DISPLACEMENT_INTENSITY
a *= vfx_commonprofile.displacementIntensity;
b *= vfx_commonprofile.displacementIntensity;
c *= vfx_commonprofile.displacementIntensity;
#endif
b += offset.xzz;
c -= offset.zzy;
float3 n = (normalize( cross( b-a, c-a ) ));
geometry.normal = geometry.tangent.xyz * n.x + geometry.normal.xyz * n.y + bitangent.xyz * n.z;
geometry.tangent.xyz = normalize(cross(bitangent, geometry.normal));
#endif 
#endif 
#endif 
#ifdef USE_OUTLINE
static inline float hash(float2 p)
    const float2 kMod2 = float2(443.8975f, 397.2973f);
    p  = fract(p * kMod2);
    p += dot(p.xy, p.yx+19.19f);
    return fract(p.x * p.y);
#endif
    
#if defined(USE_TESSELLATION)
struct vfx_patch_t {
    patch_control_point<vfx_vertex_t> controlPoints;
#endif
#if defined(USE_OPENSUBDIV)
#if OSD_IS_ADAPTIVE
[[ patch(quad, VERTEX_CONTROL_POINTS_PER_PATCH) ]]
#endif
#elif defined(USE_TESSELLATION)
[[ patch(triangle, 3) ]]
#endif
    
    
vertex commonprofile_io commonprofile_vert(
#if !defined(USE_TESSELLATION)
                                           vfx_vertex_t                       in                               [[ stage_in ]]
                                           , uint                             vfx_vertexID                     [[ vertex_id ]]
#else 
                                           
#ifdef USE_OPENSUBDIV
#if OSD_IS_ADAPTIVE
#if USE_STAGE_IN
                                           PatchInput                         patchInput                       [[ stage_in ]]
#else
                                           OsdVertexBufferSet                 patchInput
#endif
                                           , float2                           patchCoord                       [[ position_in_patch ]]
                                           , uint                             patchID                          [[ patch_id ]]
                                           , constant float&                  osdTessellationLevel             [[ buffer(TESSELLATION_LEVEL_BUFFER_INDEX) ]]
#else 
                                           constant unsigned*                 osdIndicesBuffer                 [[ buffer(INDICES_BUFFER_INDEX) ]]
                                           , constant osd_packed_vertex*      osdVertexBuffer                  [[ buffer(VERTEX_BUFFER_INDEX) ]]
                                           , uint                             vertexID                         [[ vertex_id ]]
#endif 
#if defined(OSD_FVAR_WIDTH)
#if OSD_FVAR_USES_MULTIPLE_CHANNELS
                                           , constant uint32_t&               osdFaceVaryingChannelCount       [[ buffer(OSD_FVAR_CHANNELS_CHANNEL_COUNT_INDEX) ]]
                                           , constant OsdFVarChannelDesc*     osdFaceVaryingChannelDescriptors [[ buffer(OSD_FVAR_CHANNELS_CHANNEL_DESCRIPTORS_INDEX) ]]
                                           , constant uint32_t&               osdFaceVaryingPatchArrayIndex    [[ buffer(OSD_FVAR_CHANNELS_PATCH_ARRAY_INDEX_BUFFER_INDEX) ]]
                                           , constant void*                   osdFaceVaryingChannelsPackedData [[ buffer(OSD_FVAR_CHANNELS_PACKED_DATA_BUFFER_INDEX) ]]
#else
                                           , constant float*                  osdFaceVaryingData               [[ buffer(OSD_FVAR_DATA_BUFFER_INDEX) ]]
                                           , constant int*                    osdFaceVaryingIndices            [[ buffer(OSD_FVAR_INDICES_BUFFER_INDEX) ]]
#if OSD_IS_ADAPTIVE
                                           , constant packed_int3*            osdFaceVaryingPatchParams        [[ buffer(OSD_FVAR_PATCHPARAM_BUFFER_INDEX) ]]
                                           , constant packed_int4&            osdFaceVaryingPatchArray         [[ buffer(OSD_FVAR_PATCH_ARRAY_BUFFER_INDEX) ]]
#endif
#endif 
#endif 
#else 
                                           vfx_patch_t                        in                               [[ stage_in ]]
                                           , float3                           patchCoord                       [[ position_in_patch ]]
#endif 
#endif 
                                           
#ifdef USE_MULTIPLE_RENDERING
                                           , constant VFXWorldBuffer*         vfx_frame_multi                  [[ buffer(0) ]]
#else
                                           , constant VFXWorldBuffer&         vfx_frame                        [[ buffer(0) ]]
#endif
#if defined(USE_INSTANCING) || defined(USE_MULTIPLE_RENDERING)
                                           , constant commonprofile_node*     vfx_nodes                        [[ buffer(1) ]]
#else
                                           , constant commonprofile_node&     vfx_node                         [[ buffer(1) ]]
#endif
#ifdef USE_PER_VERTEX_LIGHTING
                                           , constant vfx_light*              vfx_lights                       [[ buffer(2) ]]
                                           , constant float4*                 u_shadowKernel
                                           , texture2d_array<float>           u_areaLightBakedDataTexture
#endif
                                           
                                           , constant commonprofile_uniforms& vfx_commonprofile
#ifdef USE_INSTANCING
                                           , uint                             vfx_instanceID                   [[ instance_id ]]
#endif
#ifdef USE_VERTEX_AMPLIFICATION
                                           , ushort                           amplificationID                  [[ amplification_id ]]
#endif
#ifdef USE_POINT_RENDERING
                                           
                                           , constant float3&                 vfx_pointSize
#endif
#ifdef USE_DISPLACEMENT_MAP
#if USE_ARGUMENT_BUFFERS
#define u_displacementTexture           vfx_commonprofile.displacementTexture
#define u_displacementTextureSampler    vfx_commonprofile.displacementSampler
#else
                                           , texture2d<float>                 u_displacementTexture
                                           , sampler                          u_displacementTextureSampler
#endif 
#endif 
#ifdef USE_VERTEX_EXTRA_ARGUMENTS
                                           __VertexExtraArguments__
#endif
                                           )
    commonprofile_io out;
    
#ifdef USE_MULTIPLE_RENDERING
#ifdef USE_VERTEX_AMPLIFICATION
    constant VFXWorldBuffer& vfx_frame = vfx_frame_multi[amplificationID];
#else
    out.instanceID = vfx_instanceID / USE_MULTIPLE_RENDERING;
    out.sliceIndex = vfx_instanceID % USE_MULTIPLE_RENDERING;
    constant VFXWorldBuffer& vfx_frame = vfx_frame_multi[out.sliceIndex];
#endif
    
#ifdef USE_INSTANCING
#ifdef USE_VERTEX_AMPLIFICATION
    constant commonprofile_node& vfx_node = vfx_nodes[USE_MULTIPLE_RENDERING * vfx_instanceID + amplificationID];
#else
    
    
    constant commonprofile_node& vfx_node = vfx_nodes[vfx_instanceID];
#endif
#else
#ifdef USE_VERTEX_AMPLIFICATION
    constant commonprofile_node& vfx_node = vfx_nodes[amplificationID];
#else
    constant commonprofile_node& vfx_node = vfx_nodes[out.sliceIndex];
#endif
#endif
    
#else 
    
#ifdef USE_INSTANCING
    out.instanceID = vfx_instanceID;
    constant commonprofile_node& vfx_node = vfx_nodes[vfx_instanceID];
#endif
    
#endif 
    
    
#ifdef USE_TESSELLATION
    uint vfx_vertexID; 
    vfx_vertexID = 0;
#endif
    
    
    
    
    
    VFXShaderGeometry _geometry;
    
#if !defined(USE_TESSELLATION)
    
    
    _geometry.position = float4(in.position, 1.f);
#if defined(USE_NORMAL) && defined(HAS_NORMAL)
    _geometry.normal = in.normal;
#endif
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
    _geometry.tangent = in.tangent;
#endif
#if defined(NEED_IN_TEXCOORD0) || defined(DEBUG_PIXEL)
    _geometry.texcoords[0] = in.texcoord0;
#endif
#ifdef NEED_IN_TEXCOORD1
    _geometry.texcoords[1] = in.texcoord1;
#endif
#ifdef NEED_IN_TEXCOORD2
    _geometry.texcoords[2] = in.texcoord2;
#endif
#ifdef NEED_IN_TEXCOORD3
    _geometry.texcoords[3] = in.texcoord3;
#endif
#ifdef NEED_IN_TEXCOORD4
    _geometry.texcoords[4] = in.texcoord4;
#endif
#ifdef NEED_IN_TEXCOORD5
    _geometry.texcoords[5] = in.texcoord5;
#endif
#ifdef NEED_IN_TEXCOORD6
    _geometry.texcoords[6] = in.texcoord6;
#endif
#ifdef NEED_IN_TEXCOORD7
    _geometry.texcoords[7] = in.texcoord7;
#endif
#ifdef HAS_VERTEX_COLOR
    _geometry.color = in.color;
#elif USE_VERTEX_COLOR
    _geometry.color = float4(1.);
#endif
    
#else 
    
#ifdef USE_OPENSUBDIV
#if OSD_IS_ADAPTIVE
#if USE_STAGE_IN
    int3 patchParam = patchInput.patchParam;
#else
    int3 patchParam = patchInput.patchParamBuffer[patchID];
#endif
    
    int refinementLevel = OsdGetPatchRefinementLevel(patchParam);
    float tessellationLevel = min(osdTessellationLevel, (float)OSD_MAX_TESS_LEVEL) / exp2((float)refinementLevel - 1);
    
    OsdPatchVertex patchVertex = OsdComputePatch(tessellationLevel, patchCoord, patchID, patchInput);
    
#if defined(OSD_FVAR_WIDTH)
    int patchIndex = OsdGetPatchIndex(patchID);
#if OSD_FVAR_USES_MULTIPLE_CHANNELS
    OsdInterpolateFaceVarings(_geometry, patchCoord.xy, patchIndex, osdFaceVaryingChannelCount, osdFaceVaryingChannelDescriptors, osdFaceVaryingPatchArrayIndex, osdFaceVaryingChannelsPackedData);
#else
    OsdInterpolateFaceVarings(_geometry, patchCoord.xy, patchIndex, osdFaceVaryingIndices, osdFaceVaryingData, osdFaceVaryingPatchParams, osdFaceVaryingPatchArray);
#endif
#endif
    
    _geometry.position = float4(patchVertex.position, 1.f);
    
#if defined(USE_NORMAL)
    _geometry.normal = patchVertex.normal;
#endif
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
    _geometry.tangent = float4(patchVertex.tangent, -1.f);
    
#endif
#if defined(NEED_IN_TEXCOORD0) && (OSD_TEXCOORD0_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[0] = patchVertex.texcoord0;
#endif
#if defined(NEED_IN_TEXCOORD1) && (OSD_TEXCOORD1_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[1] = patchVertex.texcoord1;
#endif
#if defined(NEED_IN_TEXCOORD2) && (OSD_TEXCOORD2_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[2] = patchVertex.texcoord2;
#endif
#if defined(NEED_IN_TEXCOORD3) && (OSD_TEXCOORD3_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[3] = patchVertex.texcoord3;
#endif
#if defined(NEED_IN_TEXCOORD4) && (OSD_TEXCOORD4_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[4] = patchVertex.texcoord4;
#endif
#if defined(NEED_IN_TEXCOORD5) && (OSD_TEXCOORD5_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[5] = patchVertex.texcoord5;
#endif
#if defined(NEED_IN_TEXCOORD6) && (OSD_TEXCOORD6_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[6] = patchVertex.texcoord6;
#endif
#if defined(NEED_IN_TEXCOORD7) && (OSD_TEXCOORD7_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[7] = patchVertex.texcoord7;
#endif
#if defined(HAS_VERTEX_COLOR) && (OSD_COLOR_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.color = patchVertex.color;
#endif
    
#else 
    
#if OSD_PATCH_QUADS
    const uint primitiveIndex = vertexID / 6;
#ifdef USE_NORMAL
    float3 p0 = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 4 + 0]].position;
    float3 p1 = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 4 + 1]].position;
    float3 p2 = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 4 + 2]].position;
    float3 normal = normalize(cross(p2 - p1, p0 - p1));
#endif
    const uint triangleIndices[6] = { 0, 1, 2, 0, 2, 3 };
    const uint quadVertexIndex = triangleIndices[vertexID % 6];
    osd_packed_vertex osdVertex = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 4 + quadVertexIndex]];
#elif OSD_PATCH_TRIANGLES
    const uint primitiveIndex = vertexID / 3;
#ifdef USE_NORMAL
    float3 p0 = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 3 + 0]].position;
    float3 p1 = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 3 + 1]].position;
    float3 p2 = osdVertexBuffer[osdIndicesBuffer[primitiveIndex * 3 + 2]].position;
    float3 normal = normalize(cross(p2 - p1, p0 - p1));
#endif
    osd_packed_vertex osdVertex = osdVertexBuffer[osdIndicesBuffer[vertexID]];
#endif
    
    float3 position = osdVertex.position;
    
#if defined(OSD_FVAR_WIDTH)
    int patchIndex = OsdGetPatchIndex(primitiveIndex);
#if OSD_PATCH_QUADS
    float2 quadUVs[4] = { float2(0,0), float2(1,0), float2(1,1), float2(0,1) };
#if OSD_FVAR_USES_MULTIPLE_CHANNELS
    OsdInterpolateFaceVarings(_geometry, quadUVs[quadVertexIndex], patchIndex, osdFaceVaryingChannelCount, osdFaceVaryingChannelDescriptors, osdFaceVaryingPatchArrayIndex, osdFaceVaryingChannelsPackedData);
#else
    OsdInterpolateFaceVarings(_geometry, quadUVs[quadVertexIndex], patchIndex, osdFaceVaryingIndices, osdFaceVaryingData);
#endif
#elif OSD_PATCH_TRIANGLES
    
#endif
#endif 
    
#if defined(NEED_IN_TEXCOORD0) && (OSD_TEXCOORD0_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[0] = osdVertex.texcoord0;
#endif
#if defined(NEED_IN_TEXCOORD1) && (OSD_TEXCOORD1_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[1] = osdVertex.texcoord1;
#endif
#if defined(NEED_IN_TEXCOORD2) && (OSD_TEXCOORD2_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[2] = osdVertex.texcoord2;
#endif
#if defined(NEED_IN_TEXCOORD3) && (OSD_TEXCOORD3_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[3] = osdVertex.texcoord3;
#endif
#if defined(NEED_IN_TEXCOORD4) && (OSD_TEXCOORD4_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[4] = osdVertex.texcoord4;
#endif
#if defined(NEED_IN_TEXCOORD5) && (OSD_TEXCOORD5_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[5] = osdVertex.texcoord5;
#endif
#if defined(NEED_IN_TEXCOORD6) && (OSD_TEXCOORD6_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[6] = osdVertex.texcoord6;
#endif
#if defined(NEED_IN_TEXCOORD7) && (OSD_TEXCOORD7_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.texcoords[7] = osdVertex.texcoord7;
#endif
#if defined(HAS_VERTEX_COLOR) && (OSD_COLOR_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING)
    _geometry.color = osdVertex.color;
#endif
    
    _geometry.position = float4(position, 1.f);
#ifdef USE_NORMAL
    _geometry.normal = normal;
#endif
    
#endif 
    
#else 
    
    
    
    
    
#if defined(TESSELLATION_SMOOTHING_MODE_PN_TRIANGLE) || defined(TESSELLATION_SMOOTHING_MODE_PHONG)
    float3 P0 = in.controlPoints[0].position;
    float3 P1 = in.controlPoints[1].position;
    float3 P2 = in.controlPoints[2].position;
    float3 N0 = in.controlPoints[0].normal;
    float3 N1 = in.controlPoints[1].normal;
    float3 N2 = in.controlPoints[2].normal;
#if defined(TESSELLATION_SMOOTHING_MODE_PN_TRIANGLE)
    float3 position, normal;
    vfx_smooth_geometry_pn_triangle(position, normal, patchCoord, P0, P1, P2, N0, N1, N2);
#elif defined(TESSELLATION_SMOOTHING_MODE_PHONG)
    float3 position, normal;
    vfx_smooth_geometry_phong(position, normal, patchCoord, P0, P1, P2, N0, N1, N2);
#endif
    _geometry.position = float4(position, 1.f);
#ifdef USE_NORMAL
    _geometry.normal = normal;
#endif
#else 
    
    _geometry.position = float4(vfx::barycentric_mix(in.controlPoints[0].position, in.controlPoints[1].position, in.controlPoints[2].position, patchCoord), 1.f);
#if defined(USE_NORMAL) && defined(HAS_NORMAL)
    _geometry.normal = normalize(vfx::barycentric_mix(in.controlPoints[0].normal, in.controlPoints[1].normal, in.controlPoints[2].normal, patchCoord));
#endif
#endif 
    
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
    _geometry.tangent = normalize(vfx::barycentric_mix(in.controlPoints[0].tangent, in.controlPoints[1].tangent, in.controlPoints[2].tangent, patchCoord));
#endif
#ifdef NEED_IN_TEXCOORD0
    _geometry.texcoords[0] = vfx::barycentric_mix(in.controlPoints[0].texcoord0, in.controlPoints[1].texcoord0, in.controlPoints[2].texcoord0, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD1
    _geometry.texcoords[1] = vfx::barycentric_mix(in.controlPoints[0].texcoord1, in.controlPoints[1].texcoord1, in.controlPoints[2].texcoord1, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD2
    _geometry.texcoords[2] = vfx::barycentric_mix(in.controlPoints[0].texcoord2, in.controlPoints[1].texcoord2, in.controlPoints[2].texcoord2, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD3
    _geometry.texcoords[3] = vfx::barycentric_mix(in.controlPoints[0].texcoord3, in.controlPoints[1].texcoord3, in.controlPoints[2].texcoord3, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD4
    _geometry.texcoords[4] = vfx::barycentric_mix(in.controlPoints[0].texcoord4, in.controlPoints[1].texcoord4, in.controlPoints[2].texcoord4, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD5
    _geometry.texcoords[5] = vfx::barycentric_mix(in.controlPoints[0].texcoord5, in.controlPoints[1].texcoord5, in.controlPoints[2].texcoord5, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD6
    _geometry.texcoords[6] = vfx::barycentric_mix(in.controlPoints[0].texcoord6, in.controlPoints[1].texcoord6, in.controlPoints[2].texcoord6, patchCoord);
#endif
#ifdef NEED_IN_TEXCOORD7
    _geometry.texcoords[7] = vfx::barycentric_mix(in.controlPoints[0].texcoord7, in.controlPoints[1].texcoord7, in.controlPoints[2].texcoord7, patchCoord);
#endif
#ifdef HAS_VERTEX_COLOR
    _geometry.color = vfx::barycentric_mix(in.controlPoints[0].color, in.controlPoints[1].color, in.controlPoints[2].color, patchCoord);
#elif USE_VERTEX_COLOR
    _geometry.color = float4(1.);
#endif
    
#endif 
    
#endif 
    
#ifdef USE_POINT_RENDERING
    _geometry.pointSize = vfx_pointSize.x;
#endif
    
#ifdef USE_TEXCOORD
    __VertexDoVertexOnlyTexcoord__
#endif
    
#ifdef USE_DISPLACEMENT_MAP
    applyDisplacement(u_displacementTexture, u_displacementTextureSampler, _displacementTexcoord, _geometry, vfx_commonprofile);
    out.displacementTexcoord = _displacementTexcoord;
#endif
    
    
    
    
    
#ifdef USE_GEOMETRY_MODIFIER
    
    __DoGeometryModifier__
    
#endif
    
#ifdef USE_CLIP_DISTANCE0
    out.clipDistance[0] = _geometry.clipDistance0;
#endif
#ifdef USE_CLIP_DISTANCE1
    out.clipDistance[1] = _geometry.clipDistance1;
#endif
#ifdef USE_CLIP_DISTANCE2
    out.clipDistance[2] = _geometry.clipDistance2;
#endif
#ifdef USE_CLIP_DISTANCE3
    out.clipDistance[3] = _geometry.clipDistance3;
#endif
    
    
    
    
    
    
#if defined(USE_POSITION) || (defined(USE_NORMAL) && defined(HAS_OR_GENERATES_NORMAL)) || defined(USE_TANGENT) || defined(USE_BITANGENT) || defined(USE_INSTANCING)
    VFXShaderSurface _surface;
#endif
#if defined(USE_POSITION) || defined(USE_INSTANCING)
    _surface.position = (vfx_node.modelViewTransform * _geometry.position).xyz;
#endif
#if defined(USE_NORMAL) && defined(HAS_OR_GENERATES_NORMAL)
#ifdef HINT_UNIFORM_SCALE
    float3x3 nrmTransform = vfx::mat3(vfx_node.modelViewTransform);
    _surface.normal = nrmTransform * _geometry.normal;
#else
    float3x3 modelViewTransform = vfx::mat3(vfx_node.modelViewTransform);
    float3 invScaleSquared = 1.f / float3(length_squared(modelViewTransform[0]),
                                          length_squared(modelViewTransform[1]),
                                          length_squared(modelViewTransform[2]));
    _surface.normal = normalize(modelViewTransform * (_geometry.normal * invScaleSquared));
#endif
#ifdef USE_GBUFFER_OUTPUT
    _surface.normal = vfx::mat3(vfx_node.modelTransform) * _geometry.normal;
#endif
#endif
#if defined(USE_TANGENT) || defined(USE_BITANGENT)
    _surface.tangent = normalize(vfx::mat3(vfx_node.modelViewTransform) * _geometry.tangent.xyz);
    _surface.bitangent = _geometry.tangent.w * cross(_surface.tangent, _surface.normal); 
    
#endif
    
    
#ifdef USE_VIEW
    _surface.view = normalize(-_surface.position);
#endif
    
    
    
    
    
#ifdef USE_PER_VERTEX_LIGHTING
    
    VFXShaderLightingContribution _lightingContribution(_surface, out);
    _lightingContribution.diffuse = 0.;
  #ifdef USE_SPECULAR
    _lightingContribution.specular = 0.;
    _surface.shininess = vfx_commonprofile.materialShininess;
  #endif
    
    __VertexDoLighting__
    
    out.diffuse = _lightingContribution.diffuse;
  #ifdef USE_SPECULAR
    out.specular = _lightingContribution.specular;
  #endif
#endif
#if defined(USE_POSITION) && (USE_POSITION == 2)
    out.position = _surface.position;
#endif
#if defined(USE_NORMAL) && (USE_NORMAL == 2) && defined(HAS_OR_GENERATES_NORMAL)
    out.normal = _surface.normal;
#endif
#if defined(USE_TANGENT) && (USE_TANGENT == 2)
    out.tangent = _surface.tangent;
#endif
#if defined(USE_BITANGENT) && (USE_BITANGENT == 2)
    out.bitangent = _surface.bitangent;
#endif
#ifdef USE_VERTEX_COLOR
    out.vertexColor = _geometry.color;
#endif
    
#if DEBUG_PIXEL
    out.uv0 = _geometry.texcoords[0];
#endif
#ifdef USE_TEXCOORD
    __VertexDoTexcoord__
#endif
    
    
    
    
    
#if defined(USE_POSITION) || defined(USE_INSTANCING)
    out.fragmentPosition = vfx_frame.projectionTransform * float4(_surface.position, 1.);
#elif defined(USE_MODELVIEWPROJECTIONTRANSFORM) 
    out.fragmentPosition = vfx_node.modelViewProjectionTransform * _geometry.position;
#endif
    
#ifdef USE_NODE_OPACITY
    out.nodeOpacity = vfx_node.nodeOpacity;
#endif
    
#ifdef USE_POINT_RENDERING
    float screenSize = _geometry.pointSize / out.fragmentPosition.w;
    out.fragmentSize = clamp(screenSize, vfx_pointSize.y, vfx_pointSize.z);
#endif
    
#ifdef USE_LASTFRAMETRANSFORM
    float4 lastFrameFragmentPosition = vfx_frame.lastFrameViewProjectionTransform * vfx_node.lastFrameModelTransform * _geometry.position;
    out.mv_fragment = out.fragmentPosition.xyw;
    out.mv_lastFragment = lastFrameFragmentPosition.xyw;
#endif
    
#ifdef USE_OUTLINE
out.outlineHash = hash(vfx_node.modelTransform[3].xy)+1.f/255.f;
#endif
    
    return out;
struct VFXOutput
    float4 color [[ color(0) ]];
#ifdef USE_COLOR1_OUTPUT
    half4 color1 [[ color(1) ]];
#endif
#ifdef USE_NORMALS_OUTPUT
    half4 normals [[ color(2) ]];
#endif
#if defined(USE_MOTIONBLUR) && !defined(USE_GBUFFER_OUTPUT)
    half4 motionblur [[ color(3) ]];
#endif
#ifdef USE_REFLECTANCE_ROUGHNESS_OUTPUT
    half4 reflectanceRoughnessOutput [[ color(4) ]];
#endif
#ifdef USE_RADIANCE_OUTPUT
    half4 radiance [[ color(5) ]];
#endif
#ifdef USE_GBUFFER_OUTPUT
    float4 albedo [[ color(VFXGBufferAttachmentAlbedo) ]];
    float4 normals [[ color(VFXGBufferAttachmentNormal) ]];
    float4 roughmetal [[ color(VFXGBufferAttachmentRoughnessMetalness) ]];
    
#ifdef USE_MOTIONBLUR
    float4 velocity [[ color(VFXGBufferAttachmentVelocity) ]];
#else
    float2 velocity [[ color(VFXGBufferAttachmentVelocity) ]];
#endif
    float4 clearCoat [[ color(VFXGBufferAttachmentClearCoat) ]];
    float4 subsurface [[ color(VFXGBufferAttachmentSubsurface) ]];
#endif
    
#ifdef USE_MODIFIER_FRAMEBUFFER
struct VFXFramebuffer
    float4 color;
#endif
fragment VFXOutput commonprofile_frag(commonprofile_io                   in                          [[ stage_in  ]]
                                      , constant commonprofile_uniforms& vfx_commonprofile           [[ buffer(0) ]]
#ifdef USE_MULTIPLE_RENDERING
                                      , constant VFXWorldBuffer*         vfx_frame_multi             [[ buffer(1) ]]
#else
                                      , constant VFXWorldBuffer&         vfx_frame                   [[ buffer(1) ]]
#endif
#if defined(USE_INSTANCING) || defined(USE_MULTIPLE_RENDERING)
                                      , constant commonprofile_node*     vfx_nodes                   [[ buffer(2) ]]
#else
                                      , constant commonprofile_node&     vfx_node                    [[ buffer(2) ]]
#endif
#ifdef USE_PER_PIXEL_LIGHTING
                                      , constant vfx_light*              vfx_lights                  [[ buffer(3) ]]
                                      , constant float4*                 u_shadowKernel
                                      , texture2d_array<float>           u_areaLightBakedDataTexture
#ifdef CFX_SUPPORT_CUBE_ARRAY
                                      , texturecube_array<half>          u_reflectionProbeTexture
#else
                                      , texture2d_array<half>            u_reflectionProbeTexture
#endif
                                      , texture3d<ushort>                u_clusterTexture
#ifdef CFX_USE_TEXTURE_FOR_LIGHT_INDICES
                                      , texture1d<ushort>                u_lightIndicesTexture
#else
                                      , constant CFXLightIndexType*      u_lightIndicesBuffer
#endif
#endif
#if defined(CFX_SUPPORTS_PROGRAMMABLE_BLENDING) && defined(USE_MODIFIER_FRAMEBUFFER_COLOR0)
                                      , float4                           framebufferColor0           [[ color(0) ]]
#endif
#if USE_ARGUMENT_BUFFERS
#define u_emissionTexture               vfx_commonprofile.emissionTexture
#define u_emissionTextureSampler        vfx_commonprofile.emissionSampler
#define u_ambientOcclusionTexture       vfx_commonprofile.ambientOcclusionTexture
#define u_ambientOcclusionTextureSampler vfx_commonprofile.ambientOcclusionSampler
#define u_diffuseTexture                vfx_commonprofile.diffuseTexture
#define u_diffuseTextureSampler         vfx_commonprofile.diffuseSampler
#define u_specularTexture               vfx_commonprofile.specularTexture
#define u_specularTextureSampler        vfx_commonprofile.specularSampler
#define u_reflectiveTexture             vfx_commonprofile.reflectiveTexture
#define u_reflectiveTextureSampler      vfx_commonprofile.reflectiveSampler
#define u_transparentTexture            vfx_commonprofile.transparentTexture
#define u_transparentTextureSampler     vfx_commonprofile.transparentSampler
#define u_multiplyTexture               vfx_commonprofile.multiplyTexture
#define u_multiplyTextureSampler        vfx_commonprofile.multiplySampler
#define u_normalTexture                 vfx_commonprofile.normalTexture
#define u_normalTextureSampler          vfx_commonprofile.normalSampler
#define u_selfIlluminationTexture       vfx_commonprofile.selfIlluminationTexture
#define u_selfIlluminationTextureSampler vfx_commonprofile.selfIlluminationSampler
#define u_metalnessTexture              vfx_commonprofile.metalnessTexture
#define u_metalnessTextureSampler       vfx_commonprofile.metalnessSampler
#define u_roughnessTexture              vfx_commonprofile.roughnessTexture
#define u_roughnessTextureSampler       vfx_commonprofile.roughnessSampler
#else
#ifdef USE_EMISSION_MAP
                                      , texture2d<float>              u_emissionTexture
                                      , sampler                       u_emissionTextureSampler
#endif
#ifdef USE_AMBIENTOCCLUSION_MAP
                                      , texture2d<float>              u_ambientOcclusionTexture
                                      , sampler                       u_ambientOcclusionTextureSampler
#endif
#ifdef USE_DIFFUSE_MAP
                                      , texture2d<float>              u_diffuseTexture
                                      , sampler                       u_diffuseTextureSampler
#endif
#ifdef USE_SPECULAR_MAP
                                      , texture2d<float>              u_specularTexture
                                      , sampler                       u_specularTextureSampler
#endif
#ifdef USE_REFLECTIVE_MAP
                                      , texture2d<float>              u_reflectiveTexture
                                      , sampler                       u_reflectiveTextureSampler
#elif defined(USE_REFLECTIVE_CUBEMAP)
                                      , texturecube<float>            u_reflectiveTexture
                                      , sampler                       u_reflectiveTextureSampler
#endif
#ifdef USE_TRANSPARENT_MAP
                                      , texture2d<float>              u_transparentTexture
                                      , sampler                       u_transparentTextureSampler
#endif
#ifdef USE_MULTIPLY_MAP
                                      , texture2d<float>              u_multiplyTexture
                                      , sampler                       u_multiplyTextureSampler
#endif
#ifdef USE_NORMAL_MAP
                                      , texture2d<float>              u_normalTexture
                                      , sampler                       u_normalTextureSampler
#endif
#ifdef USE_SELFILLUMINATION_MAP
                                      , texture2d<float>              u_selfIlluminationTexture
                                      , sampler                       u_selfIlluminationTextureSampler
#endif
#ifdef USE_DISPLACEMENT_MAP
                                      , texture2d<float>              u_displacementTexture
                                      , sampler                       u_displacementTextureSampler
#endif
#ifdef USE_PBR
#ifdef USE_METALNESS_MAP
                                      , texture2d<float>              u_metalnessTexture
                                      , sampler                       u_metalnessTextureSampler
#endif
#ifdef USE_ROUGHNESS_MAP
                                      , texture2d<float>              u_roughnessTexture
                                      , sampler                       u_roughnessTextureSampler
#endif
#ifdef USE_CLEARCOAT_MAP
                                      , texture2d<float>              u_clearCoatTexture
                                      , sampler                       u_clearCoatTextureSampler
#endif
#ifdef USE_CLEARCOATROUGHNESS_MAP
                                      , texture2d<float>              u_clearCoatRoughnessTexture
                                      , sampler                       u_clearCoatRoughnessTextureSampler
#endif
#ifdef USE_CLEARCOATNORMAL_MAP
                                      , texture2d<float>              u_clearCoatNormalTexture
                                      , sampler                       u_clearCoatNormalTextureSampler
#endif
#ifdef USE_SUBSURFACE_MAP
                                      , texture2d<float>              u_subsurfaceTexture
                                      , sampler                       u_subsurfaceTextureSampler
#endif
#ifdef USE_SUBSURFACERADIUS_MAP
                                      , texture2d<float>              u_subsurfaceRadiusTexture
                                      , sampler                       u_subsurfaceRadiusTextureSampler
#endif
#endif 
#endif 
#ifdef USE_PBR
                                      , texturecube<float>            u_radianceTexture
                                      , texture2d<float>              u_specularDFGDiffuseHammonTexture
#if !defined(USE_SELFILLUMINATION_MAP)
                                      , texturecube<float>            u_irradianceTexture
#endif
#endif 
#ifdef USE_SSAO
                                      , texture2d<float>              u_ssaoTexture
#endif
#ifdef USE_FRAGMENT_EXTRA_ARGUMENTS
                                      __FragmentExtraArguments__
#endif
#if defined(USE_DOUBLE_SIDED)
                                      , bool                          isFrontFacing                    [[front_facing]]
#endif
#ifdef USE_POINT_RENDERING
                                      , float2                        pointCoord                       [[point_coord]]
#endif
#ifdef USE_VERTEX_AMPLIFICATION
                                      , ushort                        amplificationID                  [[amplification_id]]
#endif
#ifdef USE_BARYCENTRIC_COORD
                                      , float3                        u_barycentricCoord                 [[barycentric_coord]]
#endif
                                      )
#ifdef USE_MULTIPLE_RENDERING
    
#ifdef USE_VERTEX_AMPLIFICATION
    constant VFXWorldBuffer& vfx_frame = vfx_frame_multi[amplificationID];
#else
    constant VFXWorldBuffer& vfx_frame = vfx_frame_multi[in.sliceIndex];
#endif
    
#ifdef USE_INSTANCING
#ifdef USE_VERTEX_AMPLIFICATION
    constant commonprofile_node& vfx_node = vfx_nodes[USE_MULTIPLE_RENDERING * in.instanceID + amplificationID];
#else
    constant commonprofile_node& vfx_node = vfx_nodes[USE_MULTIPLE_RENDERING * in.instanceID + in.sliceIndex];
#endif
#else
#ifdef USE_VERTEX_AMPLIFICATION
    constant commonprofile_node& vfx_node = vfx_nodes[amplificationID];
#else
    constant commonprofile_node& vfx_node = vfx_nodes[in.sliceIndex];
#endif
#endif
    
#else 
    
#ifdef USE_INSTANCING
    constant commonprofile_node& vfx_node = vfx_nodes[in.instanceID];
#endif
    
#endif 
    
    VFXOutput _output;
    
    
    
    
    VFXShaderSurface _surface;
#ifdef USE_TEXCOORD
    __FragmentDoTexcoord__
#endif
    _surface.ambientOcclusion = 1.f; 
#ifdef USE_AMBIENTOCCLUSION_MAP
#if defined(USE_AMBIENTOCCLUSION_TEXTURE_COMPONENT)
    _surface.ambientOcclusion = colorFromMask(u_ambientOcclusionTexture.sample(u_ambientOcclusionTextureSampler, _surface.ambientOcclusionTexcoord), USE_AMBIENTOCCLUSION_TEXTURE_COMPONENT).r;
#else
    _surface.ambientOcclusion = u_ambientOcclusionTexture.sample(u_ambientOcclusionTextureSampler, _surface.ambientOcclusionTexcoord).r;
#endif 
#ifdef USE_AMBIENTOCCLUSION_INTENSITY
    _surface.ambientOcclusion = saturate(mix(1.f, _surface.ambientOcclusion, vfx_commonprofile.ambientOcclusionIntensity));
#endif
#endif
#if defined(USE_SSAO)
    _surface.ambientOcclusion *= u_ssaoTexture.sample( sampler(filter::linear), in.fragmentPosition.xy * vfx_frame.inverseResolution.xy ).x;
#endif
    
#ifdef USE_DIFFUSE_MAP
    _surface.diffuse = u_diffuseTexture.sample(u_diffuseTextureSampler, _surface.diffuseTexcoord);
#if defined(USE_DIFFUSE_TEXTURE_COMPONENT)
    _surface.diffuse = colorFromMask(_surface.diffuse, USE_DIFFUSE_TEXTURE_COMPONENT);
#endif
#ifdef USE_DIFFUSE_INTENSITY
    _surface.diffuse.rgb *= vfx_commonprofile.diffuseIntensity;
#endif
#elif defined(USE_DIFFUSE_COLOR)
    _surface.diffuse = vfx_commonprofile.diffuseColor;
#else
    _surface.diffuse = float4(0.f,0.f,0.f,1.f);
#endif
#if defined(USE_DIFFUSE) && defined(USE_VERTEX_COLOR)
    _surface.diffuse.rgb    *= in.vertexColor.rgb;
    _surface.diffuse        *= in.vertexColor.a; 
#endif
#ifdef USE_SPECULAR_MAP
    _surface.specular = u_specularTexture.sample(u_specularTextureSampler, _surface.specularTexcoord);
#if defined(USE_SPECULAR_TEXTURE_COMPONENT)
    _surface.specular = colorFromMask(_surface.specular, USE_SPECULAR_TEXTURE_COMPONENT);
#endif
#ifdef USE_SPECULAR_INTENSITY
    _surface.specular *= vfx_commonprofile.specularIntensity;
#endif
#elif defined(USE_SPECULAR_COLOR)
    _surface.specular = vfx_commonprofile.specularColor;
#elif defined(USE_SPECULAR)
    _surface.specular = float4(0.f);
#endif
    
#ifdef USE_CLEARCOAT_MAP
    _surface.clearCoat = u_clearCoatTexture.sample(u_clearCoatTextureSampler, _surface.clearCoatTexcoord).r;
#if defined(USE_CLEARCOAT_TEXTURE_COMPONENT)
    _surface.clearCoat = colorFromMask(_surface.clearCoat, USE_CLEARCOAT_TEXTURE_COMPONENT).r;
#endif
#ifdef USE_CLEARCOAT_INTENSITY
    _surface.clearCoat *= vfx_commonprofile.clearCoatIntensity;
#endif
#elif defined(USE_CLEARCOAT_COLOR)
    _surface.clearCoat = vfx_commonprofile.clearCoat;
#else
    _surface.clearCoat = 0.f;
#endif
    
#ifdef USE_CLEARCOATROUGHNESS_MAP
#if defined(USE_CLEARCOATROUGHNESS_TEXTURE_COMPONENT)
    _surface.clearCoatRoughness = colorFromMask(u_clearCoatRoughnessTexture.sample(u_clearCoatRoughnessTextureSampler, _surface.clearCoatRoughnessTexcoord), USE_CLEARCOATROUGHNESS_TEXTURE_COMPONENT).r;
#else
    _surface.clearCoatRoughness = u_clearCoatRoughnessTexture.sample(u_clearCoatRoughnessTextureSampler, _surface.clearCoatRoughnessTexcoord).r;
#endif
#ifdef USE_CLEARCOATROUGHNESS_INTENSITY
    _surface.clearCoatRoughness *= vfx_commonprofile.clearCoatRoughnessIntensity;
#endif
#elif defined(USE_CLEARCOATROUGHNESS_COLOR)
    _surface.clearCoatRoughness = vfx_commonprofile.clearCoatRoughness;
#else
    _surface.clearCoatRoughness = 0.03f;
#endif
    
    
#ifdef USE_SUBSURFACE_MAP
    _surface.subsurface = u_subsurfaceTexture.sample(u_subsurfaceTextureSampler, _surface.subsurfaceTexcoord).r;
#if defined(USE_SUBSURFACE_TEXTURE_COMPONENT)
    _surface.subsurface = colorFromMask(_surface.subsurface, USE_SUBSURFACE_TEXTURE_COMPONENT).r;
#endif
#ifdef USE_SUBSURFACE_INTENSITY
    _surface.subsurface *= vfx_commonprofile.subsurfaceIntensity;
#endif
#elif defined(USE_SUBSURFACE_COLOR)
    _surface.subsurface = vfx_commonprofile.subsurface;
#else
    _surface.subsurface = 0.f;
#endif
    
#ifdef USE_SUBSURFACERADIUS_MAP
    _surface.subsurfaceRadius = u_subsurfaceRadiusTexture.sample(u_subsurfaceRadiusTextureSampler, _surface.subsurfaceRadiusTexcoord).r;
#if defined(USE_SUBSURFACERADIUS_TEXTURE_COMPONENT)
    _surface.subsurfaceRadius = colorFromMask(_surface.subsurfaceRadius, USE_SUBSURFACERADIUS_TEXTURE_COMPONENT).r;
#endif
#ifdef USE_SUBSURFACERADIUS_INTENSITY
    _surface.subsurfaceRadius *= vfx_commonprofile.subsurfaceRadiusIntensity;
#endif
#elif defined(USE_SUBSURFACERADIUS_COLOR)
    _surface.subsurfaceRadius = vfx_commonprofile.subsurfaceRadius;
#else
    _surface.subsurfaceRadius = float3(0.f);
#endif
    
#ifdef USE_EMISSION_MAP
    _surface.emission = u_emissionTexture.sample(u_emissionTextureSampler, _surface.emissionTexcoord);
#if defined(USE_EMISSION_TEXTURE_COMPONENT)
    _surface.emission = colorFromMask(_surface.emission, USE_EMISSION_TEXTURE_COMPONENT);
#endif
#ifdef USE_EMISSION_INTENSITY
    _surface.emission *= vfx_commonprofile.emissionIntensity;
#endif
#elif defined(USE_EMISSION_COLOR)
    _surface.emission = vfx_commonprofile.emissionColor;
#elif defined(USE_EMISSION)
    _surface.emission = float4(0.);
#endif
#ifdef USE_SELFILLUMINATION_MAP
    _surface.selfIllumination = u_selfIlluminationTexture.sample(u_selfIlluminationTextureSampler, _surface.selfIlluminationTexcoord);
#if defined(USE_SELFILLUMINATION_TEXTURE_COMPONENT)
    _surface.selfIllumination = colorFromMask(_surface.selfIllumination, USE_SELFILLUMINATION_TEXTURE_COMPONENT);
#endif
#ifdef USE_SELFILLUMINATION_INTENSITY
    _surface.selfIllumination *= vfx_commonprofile.selfIlluminationIntensity;
#endif
#elif defined(USE_SELFILLUMINATION_COLOR)
    _surface.selfIllumination = vfx_commonprofile.selfIlluminationColor;
#elif defined(USE_SELFILLUMINATION)
    _surface.selfIllumination = float4(0.);
#endif
#ifdef USE_MULTIPLY_MAP
    _surface.multiply = u_multiplyTexture.sample(u_multiplyTextureSampler, _surface.multiplyTexcoord);
#if defined(USE_MULTIPLY_TEXTURE_COMPONENT)
    _surface.multiply = colorFromMask(_surface.multiply, USE_MULTIPLY_TEXTURE_COMPONENT);
#endif
#ifdef USE_MULTIPLY_INTENSITY
    _surface.multiply = mix(float4(1.), _surface.multiply, vfx_commonprofile.multiplyIntensity);
#endif
#elif defined(USE_MULTIPLY_COLOR)
    _surface.multiply = vfx_commonprofile.multiplyColor;
#elif defined(USE_MULTIPLY)
    _surface.multiply = float4(1.);
#endif
#ifdef USE_TRANSPARENT_MAP
    _surface.transparent = u_transparentTexture.sample(u_transparentTextureSampler, _surface.transparentTexcoord);
#if defined(USE_TRANSPARENT_TEXTURE_COMPONENT)
    _surface.transparent = colorFromMask(_surface.transparent, USE_TRANSPARENT_TEXTURE_COMPONENT);
#endif
#ifdef USE_TRANSPARENT_INTENSITY
    _surface.transparent *= vfx_commonprofile.transparentIntensity;
#endif
#elif defined(USE_TRANSPARENT_COLOR)
    _surface.transparent = vfx_commonprofile.transparentColor;
#elif defined(USE_TRANSPARENT)
    _surface.transparent = float4(1.f);
#endif
    
#ifdef USE_METALNESS_MAP
#if defined(USE_METALNESS_TEXTURE_COMPONENT)
    _surface.metalness = colorFromMask(u_metalnessTexture.sample(u_metalnessTextureSampler, _surface.metalnessTexcoord), USE_METALNESS_TEXTURE_COMPONENT).r;
#else
    _surface.metalness = u_metalnessTexture.sample(u_metalnessTextureSampler, _surface.metalnessTexcoord).r;
#endif
#ifdef USE_METALNESS_INTENSITY
    _surface.metalness *= vfx_commonprofile.metalnessIntensity;
#endif
#elif defined(USE_METALNESS_COLOR)
    _surface.metalness = vfx_commonprofile.metalness;
#else
    _surface.metalness = 0.f;
#endif
    
#ifdef USE_ROUGHNESS_MAP
#if defined(USE_ROUGHNESS_TEXTURE_COMPONENT)
    _surface.roughness = colorFromMask(u_roughnessTexture.sample(u_roughnessTextureSampler, _surface.roughnessTexcoord), USE_ROUGHNESS_TEXTURE_COMPONENT).r;
#else
    _surface.roughness = u_roughnessTexture.sample(u_roughnessTextureSampler, _surface.roughnessTexcoord).r;
#endif
#ifdef USE_ROUGHNESS_INTENSITY
    _surface.roughness *= vfx_commonprofile.roughnessIntensity;
#endif
#elif defined(USE_ROUGHNESS_COLOR)
    _surface.roughness = vfx_commonprofile.roughness;
#else
    _surface.roughness = 0.f;
#endif
#if (defined USE_POSITION) && (USE_POSITION == 2)
    _surface.position = in.position;
#endif
#if (defined USE_NORMAL) && (USE_NORMAL == 2)
#if defined(HAS_NORMAL) || defined(USE_OPENSUBDIV)
#ifdef USE_DOUBLE_SIDED
    _surface.geometryNormal = normalize(in.normal.xyz) * (isFrontFacing ? 1.f : -1.f );
#else
    _surface.geometryNormal = normalize(in.normal.xyz);
#endif
#else 
    _surface.geometryNormal = normalize( cross(dfdy( _surface.position ), dfdx( _surface.position ) ));
#endif
    _surface.normal = _surface.geometryNormal;
    _surface.clearCoatNormal = _surface.geometryNormal;
#endif
#if defined(USE_TANGENT) && (USE_TANGENT == 2)
    _surface.tangent = in.tangent;
#endif
#if defined(USE_BITANGENT) && (USE_BITANGENT == 2)
    _surface.bitangent = in.bitangent;
#endif
#if (defined USE_VIEW) && (USE_VIEW == 2)
    _surface.view = normalize(-in.position);
    {
        
        
        float NoV = dot(_surface.geometryNormal, _surface.view);
        _surface.view = _surface.view + max(0.f, -2.f * NoV) * _surface.geometryNormal;         
        
    }
#endif
#if defined(USE_NORMAL_MAP)
    {
        float3x3 ts2vs = float3x3(_surface.tangent, _surface.bitangent, _surface.normal);
#ifdef USE_NORMAL_MAP
#if defined(USE_NORMAL_TEXTURE_COMPONENT)
        _surface._normalTS.xy = colorFromMask(u_normalTexture.sample(u_normalTextureSampler, _surface.normalTexcoord), USE_NORMAL_TEXTURE_COMPONENT).rg * 2.f - 1.f;
        _surface._normalTS.z = sqrt(1.f - saturate(length_squared(_surface._normalTS.xy)));
#else
        _surface._normalTS = u_normalTexture.sample(u_normalTextureSampler, _surface.normalTexcoord).rgb;
        _surface._normalTS = _surface._normalTS * 2.f - 1.f;
#endif
#ifdef USE_NORMAL_INTENSITY
        _surface._normalTS = normalize(mix(float3(0.f, 0.f, 1.f), _surface._normalTS, vfx_commonprofile.normalIntensity));
#endif
#else
        _surface._normalTS = float3(0.f, 0.f, 1.f);
#endif
        _surface.normal.rgb = normalize(ts2vs * _surface._normalTS.xyz );
    }
#else
    _surface._normalTS = float3(0.f, 0.f, 1.f);
#endif
#if defined(USE_PBR) && !defined(USE_GBUFFER_OUTPUT)
    {
        float roughness = clamp(_surface.roughness, PBR_MIN_ROUGHNESS, 1.0);
        float alpha = vfx_filteredAlphaFromRoughness(_surface.normal, roughness);
        _surface.roughness = sqrt(alpha);
    }
#endif
#if defined(USE_CLEARCOATNORMAL_MAP)
    {
        
        float3x3 ts2vs = float3x3(_surface.tangent, _surface.bitangent, _surface.geometryNormal);
#ifdef USE_CLEARCOATNORMAL_MAP
#if defined(USE_CLEARCOATNORMAL_TEXTURE_COMPONENT)
        _surface._clearCoatNormalTS.xy = colorFromMask(u_clearCoatNormalTexture.sample(u_clearCoatnormalTextureSampler, _surface.clearCoatNormalTexcoord), USE_CLEARCOATNORMAL_TEXTURE_COMPONENT).rg * 2.f - 1.f;
        _surface._clearCoatNormalTS.z = sqrt(1.f - saturate(length_squared(_surface._clearCoatNormalTS.xy)));
#else
        _surface._clearCoatNormalTS = u_clearCoatNormalTexture.sample(u_clearCoatNormalTextureSampler, _surface.clearCoatNormalTexcoord).rgb;
        _surface._clearCoatNormalTS = _surface._clearCoatNormalTS * 2.f - 1.f;
#endif
#ifdef USE_CLEARCOATNORMAL_INTENSITY
        _surface._clearCoatNormalTS = mix(float3(0.f, 0.f, 1.f), _surface._clearCoatNormalTS, vfx_commonprofile.clearCoatNormalIntensity);
#endif
#else
        _surface._clearCoatNormalTS = float3(0.f, 0.f, 1.f);
#endif
        _surface.clearCoatNormal.rgb = normalize(ts2vs * _surface._clearCoatNormalTS.xyz );
    }
#else
    _surface._clearCoatNormalTS = float3(0.f, 0.f, 1.f);
#endif
    
#ifdef USE_REFLECTIVE_MAP
    float3 refl = reflect( -_surface.view, _surface.normal );
    float m = 2.f * sqrt( refl.x*refl.x + refl.y*refl.y + (refl.z+1.f)*(refl.z+1.f));
    _surface.reflective = u_reflectiveTexture.sample(u_reflectiveTextureSampler, float2(float2(refl.x,-refl.y) / m) + 0.5f);
#if defined(USE_REFLECTIVE_TEXTURE_COMPONENT)
    _surface.reflective = colorFromMask(_surface.reflective, USE_REFLECTIVE_TEXTURE_COMPONENT).r;
#endif
#ifdef USE_REFLECTIVE_INTENSITY
    _surface.reflective *= vfx_commonprofile.reflectiveIntensity;
#endif
#elif defined(USE_REFLECTIVE_CUBEMAP)
    float3 refl = reflect( _surface.position, _surface.normal );
    _surface.reflective = u_reflectiveTexture.sample(u_reflectiveTextureSampler, vfx::mat4_mult_float3(vfx_frame.viewToCubeTransform, refl)); 
#ifdef USE_REFLECTIVE_INTENSITY
    _surface.reflective *= vfx_commonprofile.reflectiveIntensity;
#endif
#elif defined(USE_REFLECTIVE_COLOR)
    _surface.reflective = vfx_commonprofile.reflectiveColor;
#elif defined(USE_REFLECTIVE)
    _surface.reflective = float4(0.);
#endif
#ifdef USE_FRESNEL
    _surface.fresnel = vfx_commonprofile.fresnel.x + vfx_commonprofile.fresnel.y * pow(1.f - saturate(dot(_surface.view, _surface.normal)), vfx_commonprofile.fresnel.z);
    _surface.reflective *= _surface.fresnel;
#endif
#ifdef USE_SHININESS
    _surface.shininess = vfx_commonprofile.materialShininess;
#endif
    
    
    
    
    
#ifdef USE_SURFACE_MODIFIER
    
    __DoSurfaceModifier__
    
#endif
    
    
    
    
    
    VFXShaderLightingContribution _lightingContribution(_surface, in);
#ifdef USE_LIGHT_MODIFIER
    __LightModifierCopyDecl__
#endif
#ifdef USE_AMBIENT_LIGHTING
    _lightingContribution.ambient = vfx_frame.ambientLightingColor.rgb;
#endif
#ifdef USE_LIGHTING
#ifdef USE_PER_PIXEL_LIGHTING
#ifdef USE_CLUSTERED_LIGHTING
    uint3 clusterIndex;
    clusterIndex.xy = uint2(in.fragmentPosition.xy * vfx_frame.clusterScale.xy); 
    clusterIndex.z = in.position.z * vfx_frame.clusterScale.z + vfx_frame.clusterScale.w; 
    
    
    ushort4 cluster_offset_count = u_clusterTexture.read(clusterIndex);
    int lid = cluster_offset_count.x;
#endif
#ifdef USE_PBR
    _lightingContribution.prepareForPBR(u_specularDFGDiffuseHammonTexture, vfx_commonprofile.selfIlluminationOcclusion);
    
    
#ifdef USE_SELFILLUMINATION
    _lightingContribution.add_irradiance_from_selfIllum();
#else
#ifdef USE_PROBES_LIGHTING 
#ifdef USE_IBL_TRANSFORM
    _lightingContribution.add_global_irradiance_from_sh(vfx_frame.environmentTransform * vfx_frame.viewToCubeTransform, vfx_node.shCoefficients);
#else
    _lightingContribution.add_global_irradiance_from_sh(vfx_frame.viewToCubeTransform, vfx_node.shCoefficients);
#endif 
#else
#ifdef USE_IBL_TRANSFORM
    _lightingContribution.add_global_irradiance_probe(u_irradianceTexture, vfx_frame.environmentTransform * vfx_frame.viewToCubeTransform, vfx_frame.environmentIntensity);
#else
    _lightingContribution.add_global_irradiance_probe(u_irradianceTexture, vfx_frame.viewToCubeTransform, vfx_frame.environmentIntensity);
#endif 
#endif 
#endif
    
#ifndef DISABLE_SPECULAR
#ifdef CFX_USE_REFLECTION_PROBES
    int probe_count = (cluster_offset_count.z & 0xff);
    for (int i = 0 ; i < probe_count; ++i, ++lid) {
        _lightingContribution.add_local_probe(vfx_lights[LightIndex(lid)], u_reflectionProbeTexture);
    }
#if PROBES_NORMALIZATION
#if PROBES_OUTER_BLENDING
    _lightingContribution.specular += _lightingContribution.probesWeightedSum.rgb / max(1.f, _lightingContribution.probesWeightedSum.a);
#else
    _lightingContribution.specular += _lightingContribution.probesWeightedSum.rgb / _lightingContribution.probesWeightedSum.a;
#endif
    float globalFactor = saturate(1.f - _lightingContribution.probesWeightedSum.a);
#else
    float globalFactor = _lightingContribution.probeRadianceRemainingFactor;
#endif
    
#ifdef USE_IBL_TRANSFORM
    _lightingContribution.add_global_probe(vfx_frame.environmentTransform * vfx_frame.viewToCubeTransform, globalFactor * vfx_frame.environmentIntensity,
                                           u_reflectionProbeTexture);
#else
    _lightingContribution.add_global_probe(vfx_frame.viewToCubeTransform, globalFactor * vfx_frame.environmentIntensity,
                                           u_reflectionProbeTexture);
#endif 
    
#else 
    
#ifdef USE_IBL_TRANSFORM
    _lightingContribution.add_global_probe(u_radianceTexture, vfx_frame.environmentTransform * vfx_frame.viewToCubeTransform, vfx_frame.environmentIntensity);
#else
   _lightingContribution.add_global_probe(u_radianceTexture, vfx_frame.viewToCubeTransform, vfx_frame.environmentIntensity);
#endif 
    
#ifdef USE_CLEARCOAT
    
#ifdef USE_IBL_TRANSFORM
    _lightingContribution.add_global_probeClearCoat(u_radianceTexture, vfx_frame.environmentTransform * vfx_frame.viewToCubeTransform, vfx_frame.environmentIntensity);
#else
    _lightingContribution.add_global_probeClearCoat(u_radianceTexture, vfx_frame.viewToCubeTransform, vfx_frame.environmentIntensity);
#endif 
    
#endif
    
#endif 
#endif 
#endif 
    #if DEBUG_PIXEL
        switch (DEBUG_PIXEL) {
            case 1: _output.color = float4(_surface.normal * 0.5f + 0.5f, 1.f); break;
            case 2: _output.color = float4(_surface.geometryNormal * 0.5f + 0.5f, 1.f); break;
            case 3: _output.color = float4(_surface.tangent * 0.5f + 0.5f, 1.f); break;
            case 4: _output.color = float4(in.uv0, 0.f, 1.f); break;
            case 5: _output.color = float4(_surface.diffuse.rgb, 1.f); break;
            case 6: _output.color = float4(float3(_surface.roughness), 1.f); break;
            case 7: _output.color = float4(float3(_surface.metalness), 1.f); break;
            case 8: _output.color = float4(float3(_surface.ambientOcclusion), 1.f); break;
            default: break;
        }
        return _output;
    #endif
    
    __FragmentDoLighting__
    
    #ifdef USE_CLUSTERED_LIGHTING
        
        int omni_count = cluster_offset_count.y & 0xff;
        for (int i = 0 ; i < omni_count; ++i, ++lid) {
            if ((vfx_node.categoryBitmask & vfx_lights[LightIndex(lid)].categoryBitmask) == 0) continue;
            _lightingContribution.add_local_omni(vfx_lights[LightIndex(lid)]);
        }
        
        int spot_count = (cluster_offset_count.y >> 8);
        for (int i = 0 ; i < spot_count; ++i, ++lid) {
            if ((vfx_node.categoryBitmask & vfx_lights[LightIndex(lid)].categoryBitmask) == 0) continue;
            _lightingContribution.add_local_spot(vfx_lights[LightIndex(lid)]);
        }
    #endif
#else 
        _lightingContribution.diffuse = in.diffuse;
    #ifdef USE_SPECULAR
        _lightingContribution.specular = in.specular;
    #endif
#endif 
    #ifdef AVOID_OVERLIGHTING
        _lightingContribution.diffuse = saturate(_lightingContribution.diffuse);
    #ifdef USE_SPECULAR
        _lightingContribution.specular = saturate(_lightingContribution.specular);
    #endif 
    #endif 
#else 
    _lightingContribution.diffuse = float3(0.);
#endif 
    
    
    
    
#ifndef USE_GBUFFER_OUTPUT
#ifdef USE_PBR
    { 
        float3 diffuseAlbedo = mix(_lightingContribution.pbr.albedo, float3(0.0), _surface.metalness);
        
        
#ifdef USE_PBR_TRANSPARENCY
        float3 color = (_lightingContribution.ambient * _surface.ambientOcclusion) * _lightingContribution.pbr.albedo;
#else
        float3 color = (_lightingContribution.ambient * _surface.ambientOcclusion) * _surface.diffuse.rgb;
#endif
        
        color += _lightingContribution.pbr.envDiffuse;
        color += _lightingContribution.diffuse * diffuseAlbedo;
#ifndef DISABLE_SPECULAR
        color += _lightingContribution.pbr.envSpecular;
        color += _lightingContribution.specular;
#endif
#ifdef USE_EMISSION
        color += _surface.emission.rgb;
#endif
#ifdef USE_MULTIPLY
        color *= _surface.multiply.rgb;
#endif
#ifdef USE_MODULATE
        color *= _lightingContribution.modulate;
#endif
#ifndef USE_GBUFFER_OUTPUT
        _output.color.rgb = color;
#endif
    }
#else 
#ifdef USE_SHADOWONLY
    _output.color.rgb = float3(0.0);
    _output.color.a = 1. - _lightingContribution.shadowFactor;
#else
#ifdef USE_CONSTANT
    _output.color.rgb = _surface.diffuse.rgb;
    
#ifdef USE_EMISSION
    _output.color.rgb += _surface.emission.rgb;
#endif
#ifdef USE_MULTIPLY
    _output.color.rgb *= _surface.multiply.rgb;
#endif
    
#else
    _output.color.rgb = illuminate(_surface, _lightingContribution);
#endif
#endif 
#endif 
#ifndef USE_SHADOWONLY
  #ifdef USE_PBR_TRANSPARENCY
    _output.color.a = _lightingContribution.pbr.transparency;
  #else
    _output.color.a = _surface.diffuse.a;
  #endif
#endif
#ifdef USE_FOG
    applyFog(_output.color, length(_surface.position.xyz), vfx_frame.fogParameters, vfx_frame.fogColor);
#endif
#if !defined(DIFFUSE_PREMULTIPLIED) && !defined(USE_PBR_TRANSPARENCY)
    _output.color.rgb *= _surface.diffuse.a;
#endif
    
    
    
    
    
#ifdef USE_SHADOWONLY
    float transparencyFactor = 1.0;
  #ifdef USE_NODE_OPACITY
    transparencyFactor *= in.nodeOpacity;
  #endif
    _output.color.a *= transparencyFactor; 
#else 
#ifdef USE_TRANSPARENT 
    
#ifndef USE_PBR_TRANSPARENCY
  _output.color *= _surface.transparent.a;
#endif
#endif 
    
#ifdef USE_NODE_OPACITY
    _output.color *= in.nodeOpacity;
#endif
    
#endif 
#endif 
    
    
    
    
#ifdef USE_MODIFIER_FRAMEBUFFER
    const VFXFramebuffer _framebuffer = {
#if defined(CFX_SUPPORTS_PROGRAMMABLE_BLENDING) && defined(USE_MODIFIER_FRAMEBUFFER_COLOR0)
        .color = framebufferColor0
#else
        .color = 0.f
#endif
    };
#endif
    
#ifdef USE_FRAGMENT_MODIFIER
    
    __DoFragmentModifier__
    
#endif
#if defined(USE_CLUSTERED_LIGHTING) && defined(DEBUG_CLUSTER_TILE)
    _output.color.rgb = mix(_output.color.rgb, float3(vfx::debugColorForCount(clusterIndex.z).xyz), 0.1f);
    _output.color.rgb = mix(_output.color.rgb, float3(clusterIndex.x & 0x1 ^ clusterIndex.y & 0x1).xyz, 0.01f);
#endif
    
#ifdef USE_ALPHA_CUTOFF
    if (_output.color.a <= vfx_commonprofile.alphaCutoff)
        discard_fragment();
#endif
#ifdef USE_POINT_RENDERING
    if ((dfdx(pointCoord.x) < 0.5f) && (length_squared(pointCoord * 2.f - 1.f) > 1.f)) {
        discard_fragment();
    }
#endif
    
    
#ifdef USE_OUTLINE
    _output.color.rgb = in.outlineHash;
#endif
    
#if defined(USE_MOTIONBLUR) && !defined(USE_GBUFFER_OUTPUT)
#ifdef USE_MULTIPLE_RENDERING
    _output.motionblur.xy = half2((in.mv_fragment.xy - vfx_frame.viewportSize.zw) / in.mv_fragment.z - (in.mv_lastFragment.xy / in.mv_lastFragment.z))*half2(1.,-1.) * vfx_frame.motionBlurIntensity;
#else
    _output.motionblur.xy = half2((in.mv_fragment.xy / in.mv_fragment.z) - (in.mv_lastFragment.xy / in.mv_lastFragment.z))*half2(1.,-1.) * vfx_frame.motionBlurIntensity;
#endif
    _output.motionblur.z = length(_output.motionblur.xy);
    _output.motionblur.w = half(-_surface.position.z);
#endif
#ifdef USE_NORMALS_OUTPUT
    _output.normals = half4( half3(_surface.normal.xyz), half(_surface.roughness) );
#endif
    
#ifdef USE_RADIANCE_OUTPUT
    _output.radiance.rgb = half3(_lightingContribution.specular.rgb);
#endif
                                 
#ifdef USE_REFLECTANCE_ROUGHNESS_OUTPUT
#ifdef USE_PBR
    _output.reflectanceRoughnessOutput = half4( half3(_lightingContribution.pbr.probeReflectance), half(_surface.roughness) );
#else 
    _output.reflectanceRoughnessOutput = half4( 0.h );
#endif
#endif
    
#ifdef USE_BARYCENTRIC_WIREFRAME
#ifdef USE_BARYCENTRIC_COORD
    const float3 d = 1.0f * fwidth(baryCoord);
    const float3 s = smoothstep(d * 0.25f, d * 0.75, u_barycentricCoord);
    _output.color = mix(float4(1.0), _output.color, min3(s.x, s.y, s.z));
#endif
#endif
    
#ifdef USE_GBUFFER_OUTPUT
    float opacity = _surface.diffuse.a;
#ifdef USE_NODE_OPACITY
    opacity *= in.nodeOpacity;
#endif
    
    float dither = vfx::interleaved_gradient_noise(in.fragmentPosition.xy);
    dither = fract(dither + in.fragmentPosition.z * 1.61803398875);
    dither = fract(dither + vfx_frame.frame * 1.61803398875);
    if (opacity < dither) discard_fragment();
    
    float3 emission = float3(0.);
#ifdef USE_EMISSION
    emission = _surface.emission.rgb;
#endif
    _output.albedo = float4(_surface.diffuse.rgb, opacity);
    _output.normals = float4(_surface.normal.xyz, in.fragmentPosition.z);
    _output.roughmetal = float4(_surface.roughness, _surface.metalness, _surface.ambientOcclusion, 1.);
    _output.color = float4(emission, 1.);
    
    float2 vfx_prevUv = (in.mv_lastFragment.xy / in.mv_lastFragment.z);
    float2 vfx_uv = (in.mv_fragment.xy / in.mv_fragment.z);
    _output.velocity.xy = (vfx_prevUv - vfx_uv) * float2(.5,-.5);
    
#ifdef USE_MOTIONBLUR
    _output.velocity.z = length(_output.velocity.xy);
    _output.velocity.w = -_surface.position.z;
#endif
    ushort clearcoatIR = packHalf2ToUShort(half2(_surface.clearCoat, _surface.clearCoatRoughness));
    _output.clearCoat = float4(_surface.clearCoatNormal, as_type<half>(clearcoatIR));
    
    _output.subsurface = float4(_surface.subsurfaceRadius, _surface.subsurface);
#endif
    
    
    return _output;
struct vfx_floor_t {
    float3 u_floorNormal;
    float4 u_floorTangent;
    float3 u_floorCenter;
    float2 u_floorExtent;
#pragma arguments
    vfx_floor_t vfx_fg
#pragma body
    float3 u_floorNormal = vfx_fg.u_floorNormal;
    float4 u_floorTangent = vfx_fg.u_floorTangent;
    float3 u_floorCenter = vfx_fg.u_floorCenter;
    float2 u_floorExtent = vfx_fg.u_floorExtent;
    float3 floorBitangent =  normalize(cross(u_floorTangent.xyz, u_floorNormal));
    _geometry.position.xyz = u_floorCenter.xyz + u_floorExtent.x * (_geometry.position.x * u_floorTangent.xyz) + u_floorExtent.y * (_geometry.position.y * floorBitangent);
    _geometry.normal = u_floorNormal;
    _geometry.tangent = u_floorTangent;
    
    float2 tc;
    if (u_floorNormal.y != 0.)
        tc = _geometry.position.xz * 0.01;
    else if (u_floorNormal.z != 0.)
        tc = _geometry.position.xy * 0.01;
    else
        tc = _geometry.position.yz * 0.01;
    for (int i = 0; i < kVFXTexcoordCount; ++i)
        _geometry.texcoords[i] = tc;
#if defined(TESSELLATION_SMOOTHING_MODE_PN_TRIANGLE)
static inline void vfx_smooth_geometry_pn_triangle(thread float3 &position, thread float3 &normal, float3 patchCoord, float3 P0, float3 P1, float3 P2, float3 N0, float3 N1, float3 N2)
    float u = patchCoord.y;
    float v = patchCoord.z;
    float w = patchCoord.x;
    
    float3 P0P1 = P1 - P0;
    float3 P1P2 = P2 - P1;
    float3 P2P0 = P0 - P2;
    
    float w12 = dot(P0P1, N0);
    float w23 = dot(P1P2, N1);
    float w31 = dot(P2P0, N2);
    
    float w21 = dot(-P0P1, N1);
    float w32 = dot(-P1P2, N2);
    float w13 = dot(-P2P0, N0);
    
    float inv3 = 1.f / 3.f;
    
    float3 b210 = (2.f * P0 + P1 - w12 * N0) * inv3;
    float3 b021 = (2.f * P1 + P2 - w23 * N1) * inv3;
    float3 b201 = (2.f * P0 + P2 - w13 * N0) * inv3;
    
    float3 b120 = (2.f * P1 + P0 - w21 * N1) * inv3;
    float3 b012 = (2.f * P2 + P1 - w32 * N2) * inv3;
    float3 b102 = (2.f * P2 + P0 - w31 * N2) * inv3;
    
    float3 E = (b210 + b120 + b021 + b012 + b201 + b102) / 6.f;
    float3 V = (P0 + P1 + P2) * inv3;
    float3 b111 = E + (E - V) / 2.f;
    
    position.xyz =
    P0 * (w * w * w) +
    P1 * (u * u * u) +
    P2 * (v * v * v) +
    b210 * (3.f * w * w * u) +
    b120 * (3.f * w * u * u) +
    b201 * (3.f * w * w * v) +
    b021 * (3.f * u * u * v) +
    b102 * (3.f * w * v * v) +
    b012 * (3.f * u * v * v) +
    b111 * (6.f * w * u * v);
    
    float3 v12 = 2.f * dot(P0P1, N0 + N1) / dot(P0P1, P0P1);
    float3 v23 = 2.f * dot(P1P2, N1 + N2) / dot(P1P2, P1P2);
    float3 v31 = 2.f * dot(P2P0, N2 + N0) / dot(P2P0, P2P0);
    
    float3 h110 = N0 + N1 - v12 * P0P1;
    float3 h011 = N1 + N2 - v23 * P1P2;
    float3 h101 = N2 + N0 - v31 * P2P0;
    
    float3 n010 = normalize(h110);
    float3 n011 = normalize(h011);
    float3 n001 = normalize(h101);
    
    normal = normalize(
    N0 * w * w +
    N1 * u * u +
    N2 * v * v +
    n010 * w * u +
    n011 * u * v +
    n001 * w * v);
#elif defined(TESSELLATION_SMOOTHING_MODE_PHONG)
static inline void vfx_smooth_geometry_phong(thread float3 &position, thread float3 &normal, float3 patchCoord, float3 P0, float3 P1, float3 P2, float3 N0, float3 N1, float3 N2)
    float3 P = vfx::barycentric_mix(P0, P1, P2, patchCoord);
    
    float3 proj0 = P - dot(P - P0, N0) * N0;
    float3 proj1 = P - dot(P - P1, N1) * N1;
    float3 proj2 = P - dot(P - P2, N2) * N2;
    
    float3 Pproj = vfx::barycentric_mix(proj0, proj1, proj2, patchCoord);
    
    const float alpha = 0.75f;
    position = mix(P, Pproj, alpha);
    normal = normalize(vfx::barycentric_mix(N0, N1, N2, patchCoord));
#endif 
static int OsdGetPatchNumControlVertices(int patchType) {
    switch(patchType) {
        case 3: return 4;
        case 6: return 16;
        case 9: return 20;
        default: return 0;
    }
#if OSD_IS_ADAPTIVE
#if USE_STAGE_IN
#if OSD_PATCH_REGULAR
struct ControlPoint
    
    float3 P [[attribute(0)]];
#if OSD_PATCH_ENABLE_SINGLE_CREASE
    float3 P1 [[attribute(1)]];
    float3 P2 [[attribute(2)]];
#if !USE_PTVS_SHARPNESS
    float2 vSegments [[attribute(3)]];
#endif 
#endif 
struct PatchInput
    patch_control_point<ControlPoint> cv;
#if !USE_PTVS_FACTORS
    float4 tessOuterLo [[attribute(5)]];
    float4 tessOuterHi [[attribute(6)]];
#endif 
    int3 patchParam [[attribute(10)]];
#elif OSD_PATCH_GREGORY || OSD_PATCH_GREGORY_BOUNDARY
struct ControlPoint
    
    float3 P [[attribute(0)]];
    float3 Ep [[attribute(1)]];
    float3 Em [[attribute(2)]];
    float3 Fp [[attribute(3)]];
    float3 Fm [[attribute(4)]];
struct PatchInput
    patch_control_point<ControlPoint> cv;
    int3 patchParam [[attribute(10)]];
#elif OSD_PATCH_GREGORY_BASIS
struct ControlPoint
    float3 position [[attribute(0)]];
struct PatchInput
    patch_control_point<ControlPoint> cv;
    int3 patchParam [[attribute(10)]];
#endif
#endif 
#endif 
#if defined(OSD_FVAR_WIDTH)
static void OsdInterpolateFaceVarings(thread VFXShaderGeometry&      geometry
                                      , float2                       uv
                                      , int                          patchIndex
#if OSD_FVAR_USES_MULTIPLE_CHANNELS
                                      , constant uint32_t&           osdFaceVaryingChannelCount
                                      , constant OsdFVarChannelDesc* osdFaceVaryingChannelDescriptors
                                      , constant uint32_t&           osdFaceVaryingPatchArrayIndex
                                      , constant void*               osdFaceVaryingChannelsPackedData
#else 
                                      , constant int*                osdFaceVaryingIndices
                                      , constant float*              osdFaceVaryingData
#if OSD_IS_ADAPTIVE
                                      , constant packed_int3*        osdFaceVaryingPatchParams
                                      , constant packed_int4&        osdFaceVaryingPatchArray
#endif
#endif 
                                      )
#if defined(NEED_IN_TEXCOORD0) && (OSD_TEXCOORD0_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[0] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD1) && (OSD_TEXCOORD1_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[1] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD2) && (OSD_TEXCOORD2_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[2] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD3) && (OSD_TEXCOORD3_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[3] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD4) && (OSD_TEXCOORD4_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[4] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD5) && (OSD_TEXCOORD5_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[5] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD6) && (OSD_TEXCOORD6_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[6] = float2(0.0);
#endif
#if defined(NEED_IN_TEXCOORD7) && (OSD_TEXCOORD7_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.texcoords[7] = float2(0.0);
#endif
#if defined(HAS_VERTEX_COLOR) && (OSD_COLOR_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
    geometry.color = float4(0.0);
#endif
    
#if OSD_FVAR_USES_MULTIPLE_CHANNELS
    for (uint32_t channel = 0; channel < osdFaceVaryingChannelCount; ++channel) {
        OsdFVarChannelDesc channelDescriptor = osdFaceVaryingChannelDescriptors[channel];
        
        int4 osdFaceVaryingPatchArray = ((constant packed_int4 *)((constant uint8_t *)osdFaceVaryingChannelsPackedData + channelDescriptor.patchArraysBufferOffset))[osdFaceVaryingPatchArrayIndex];
        int indexBase = osdFaceVaryingPatchArray.z;
        
        constant int *osdFaceVaryingIndices = (constant int *)((constant uint8_t *)osdFaceVaryingChannelsPackedData + channelDescriptor.indicesBufferOffset) + indexBase * 3;
        constant float *osdFaceVaryingData = (constant float *)((constant uint8_t *)osdFaceVaryingChannelsPackedData + channelDescriptor.dataBufferOffset);
        
#if OSD_IS_ADAPTIVE
        int primitiveIdBase = osdFaceVaryingPatchArray.w;
        constant packed_int3 *osdFaceVaryingPatchParams = (constant packed_int3 *)((constant uint8_t *)osdFaceVaryingChannelsPackedData + channelDescriptor.patchParamsBufferOffset) + primitiveIdBase;
        
        int3 fvarPatchParam = osdFaceVaryingPatchParams[patchIndex];
        bool isRegular = OsdGetPatchIsRegular(fvarPatchParam);
        
        int4 patchArray = osdFaceVaryingPatchArray;
        int patchStride = OsdGetPatchNumControlVertices(patchArray.x);
        int patchType = select(patchArray.x, int(6), isRegular);
        int patchCVs = OsdGetPatchNumControlVertices(patchType);
        
        float wP[20], wDs[20], wDt[20], wDss[20], wDst[20], wDtt[20];
        
        if (patchType == 3) {
            OsdGetBilinearPatchWeights(uv.x, uv.y, 1.0f, wP, wDs, wDt, wDss, wDst, wDtt);
        } else if (patchType == 6) {
            int boundaryMask = OsdGetPatchBoundaryMask(fvarPatchParam);
            OsdGetBSplinePatchWeights(uv.x, uv.y, 1.0f, boundaryMask, wP, wDs, wDt, wDss, wDst, wDtt);
        } else if (patchType == 9) {
            OsdGetGregoryPatchWeights(uv.x, uv.y, 1.0f, wP, wDs, wDt, wDss, wDst, wDtt);
        }
#else
        float wP[4], wDs[4], wDt[4], wDss[4], wDst[4], wDtt[4];
        int patchCVs = 4;
        int patchStride = patchCVs;
        OsdGetBilinearPatchWeights(uv.x, uv.y, 1.0f, wP, wDs, wDt, wDss, wDst, wDtt);
#endif
        
        for (int i = 0; i < patchCVs; ++i) {
#if defined(HAS_VERTEX_COLOR) && (OSD_COLOR_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.colorPrimvar.isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.colorPrimvar.offset;
                geometry.color += wP[i] * float4(osdFaceVaryingData[index], osdFaceVaryingData[index+1], osdFaceVaryingData[index+2], osdFaceVaryingData[index+3]);
            }
#endif
#if defined(NEED_IN_TEXCOORD0) && (OSD_TEXCOORD0_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[0].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[0].offset;
                geometry.texcoords[0] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD1) && (OSD_TEXCOORD1_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[1].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[1].offset;
                geometry.texcoords[1] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD2) && (OSD_TEXCOORD2_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[2].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[2].offset;
                geometry.texcoords[2] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD3) && (OSD_TEXCOORD3_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[3].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[3].offset;
                geometry.texcoords[3] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD4) && (OSD_TEXCOORD4_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[4].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[4].offset;
                geometry.texcoords[4] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD5) && (OSD_TEXCOORD5_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[5].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[5].offset;
                geometry.texcoords[5] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD6) && (OSD_TEXCOORD6_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[6].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[6].offset;
                geometry.texcoords[6] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
#if defined(NEED_IN_TEXCOORD7) && (OSD_TEXCOORD7_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
            if (channelDescriptor.texcoordPrimvars[7].isUsed) {
                int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * channelDescriptor.dataBufferFVarWidth + channelDescriptor.texcoordPrimvars[7].offset;
                geometry.texcoords[7] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
            }
#endif
        }
    }
    
#else 
    
#if OSD_IS_ADAPTIVE
    int3 fvarPatchParam = osdFaceVaryingPatchParams[patchIndex];
    bool isRegular = OsdGetPatchIsRegular(fvarPatchParam);
    
    int4 patchArray = osdFaceVaryingPatchArray;
    int patchStride = OsdGetPatchNumControlVertices(patchArray.x);
    int patchType = select(patchArray.x, int(6), isRegular);
    int patchCVs = OsdGetPatchNumControlVertices(patchType);
    
    float wP[20], wDs[20], wDt[20], wDss[20], wDst[20], wDtt[20];
    
    if (patchType == 3) {
        OsdGetBilinearPatchWeights(uv.x, uv.y, 1.0f, wP, wDs, wDt, wDss, wDst, wDtt);
    } else if (patchType == 6) {
        int boundaryMask = OsdGetPatchBoundaryMask(fvarPatchParam);
        OsdGetBSplinePatchWeights(uv.x, uv.y, 1.0f, boundaryMask, wP, wDs, wDt, wDss, wDst, wDtt);
    } else if (patchType == 9) {
        OsdGetGregoryPatchWeights(uv.x, uv.y, 1.0f, wP, wDs, wDt, wDss, wDst, wDtt);
    }
#else
    float wP[4], wDs[4], wDt[4], wDss[4], wDst[4], wDtt[4];
    int patchCVs = 4;
    int patchStride = patchCVs;
    OsdGetBilinearPatchWeights(uv.x, uv.y, 1.0f, wP, wDs, wDt, wDss, wDst, wDtt);
#endif
    
    for (int i = 0; i < patchCVs; ++i) {
        int index = osdFaceVaryingIndices[patchIndex * patchStride + i] * OSD_FVAR_WIDTH + 0 ;
#if defined(HAS_VERTEX_COLOR) && (OSD_COLOR_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.color += wP[i] * float4(osdFaceVaryingData[index], osdFaceVaryingData[index+1], osdFaceVaryingData[index+2], osdFaceVaryingData[index+3]);
        index += 4;
#endif
#if defined(NEED_IN_TEXCOORD0) && (OSD_TEXCOORD0_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[0] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD1) && (OSD_TEXCOORD1_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[1] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD2) && (OSD_TEXCOORD2_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[2] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD3) && (OSD_TEXCOORD3_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[3] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD4) && (OSD_TEXCOORD4_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[4] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD5) && (OSD_TEXCOORD5_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[5] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD6) && (OSD_TEXCOORD6_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[6] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
#if defined(NEED_IN_TEXCOORD7) && (OSD_TEXCOORD7_INTERPOLATION_MODE == OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING)
        geometry.texcoords[7] += wP[i] * float2(osdFaceVaryingData[index], osdFaceVaryingData[index+1]);
        index += 2;
#endif
    }
#endif 
#endif 
#if __METAL_VERSION__ >= 220 
    #include <TargetConditionals.h>
    #if TARGET_OS_OSX || TARGET_OS_MACCATALYST
        
        
        #define SHOULD_CHECK_IF_OUTSIDE_TEXTURE  0
        #define RETURN_IF_OUTSIDE_TEXTURE(dst)
        #define RETURN_IF_OUTSIDE_TEXTURE3D(dst)
    #else
        #define SHOULD_CHECK_IF_OUTSIDE_TEXTURE  1
        #define RETURN_IF_OUTSIDE_TEXTURE(dst)   if ((index.x >= dst.get_width()) || (index.y >= dst.get_height())) return;
        #define RETURN_IF_OUTSIDE_TEXTURE3D(dst) if ((index.x >= dst.get_width()) || (index.y >= dst.get_height()) || (index.z >= dst.get_depth())) return;
    #endif
    #define SUPPORTS_LAYERED_RENDERING           1
    #define SUPPORTS_MULTIPLE_VIEWPORT_RENDERING 1
#else
    #if defined(__METAL_MACOS__)
        
        
        #define SHOULD_CHECK_IF_OUTSIDE_TEXTURE      0
        #define RETURN_IF_OUTSIDE_TEXTURE(dst)
        #define RETURN_IF_OUTSIDE_TEXTURE3D(dst)
        #define SUPPORTS_LAYERED_RENDERING           (__METAL_VERSION__ >= 200)
        #define SUPPORTS_MULTIPLE_VIEWPORT_RENDERING (__METAL_VERSION__ >= 200)
    #elif defined(__METAL_IOS__)
        #define SHOULD_CHECK_IF_OUTSIDE_TEXTURE      1
        #define RETURN_IF_OUTSIDE_TEXTURE(dst)       if ((index.x >= dst.get_width()) || (index.y >= dst.get_height())) return;
        #define RETURN_IF_OUTSIDE_TEXTURE3D(dst)     if ((index.x >= dst.get_width()) || (index.y >= dst.get_height()) || (index.z >= dst.get_depth())) return;
        #define SUPPORTS_LAYERED_RENDERING           (__METAL_VERSION__ >= 210)
        #define SUPPORTS_MULTIPLE_VIEWPORT_RENDERING (__METAL_VERSION__ >= 210)
    #endif
#endif
namespace vfx {
    
    
    static inline float4 reduce_op(float4 d0, float4 d1)
    {
        d0.x = min(d0.x, d1.x);
        d0.y = max(d0.y, d1.y);
        d0.z += d1.z;
        d0.w += d1.w;
        return d0;
    }
    
    inline float vector_reduce_min(float4 v)
    {
        float2 min_lh = min(v.xy, v.zw);
        return min(min_lh.x, min_lh.y);
    }
    
    inline float vector_reduce_max(float4 v)
    {
        float2 max_lh = max(v.xy, v.zw);
        return max(max_lh.x, max_lh.y);
    }
    
    inline int vector_reduce_add(int4 v)
    {
        int2 add_lh = v.xy + v.zw;
        return add_lh.x + add_lh.y;
    }
    
    inline float3x3 mat3(float4x4 mat4)
    {
        return float3x3(mat4[0].xyz, mat4[1].xyz, mat4[2].xyz);
    }
    
    inline float3 mat4_mult_float3_normalized(float4x4 matrix, float3 src)
    {
        float3 dst  =  src.xxx * matrix[0].xyz;
        dst         += src.yyy * matrix[1].xyz;
        dst         += src.zzz * matrix[2].xyz;
        return normalize(dst);
    }
    
    inline float3 mat4_mult_float3(float4x4 matrix, float3 src)
    {
        float3 dst  =  src.xxx * matrix[0].xyz;
        dst         += src.yyy * matrix[1].xyz;
        dst         += src.zzz * matrix[2].xyz;
        return dst;
    }
    inline float3 matrix_rotate(float4x4 mat, float3 dir)
    {
        return  dir.xxx * mat[0].xyz +
                dir.yyy * mat[1].xyz +
                dir.zzz * mat[2].xyz;
    }
    inline float4 matrix_transform(float4x4 mat, float3 pos)
    {
        return  pos.xxxx * mat[0] +
                pos.yyyy * mat[1] +
                pos.zzzz * mat[2] +
                           mat[3];
    }
    inline float3 quaternion_rotate_vector(float4 q, float3 v)
    {
        float3 t = 2.f * cross(q.xyz, v);
        return v + q.w * t + cross(q.xyz, t);
    }
    
    template <class T>
    inline vec<T, 3> robust_normalize(vec<T, 3> v)
    {
        vec<T, 3> zero = 0.;
        return all(v == zero) ? zero : normalize(v);
    }
    template <class T>
    inline void generate_basis(vec<T, 3> inR, thread vec<T, 3> *outS, thread vec<T, 3> *outT)
    {
        
        T x  = -inR.x;
        T y  = inR.y;
        T z  = inR.z;
        T sz = copysign(T(1.), z);
        T a  = y / (abs(z) + T(1.));
        T b  = y * a;
        T c  = x * a;
        *outS = (vec<T, 3>){ z + sz * b,  sz * c,       x       };
        *outT = (vec<T, 3>){ c,           T(1.) - b,    -sz * y };
    }
    
    
    
    inline float3 blend_add(float3 base, float3 blend)
    {
        return min(base + blend, 1.0);
    }
    
    inline float3 blend_lighten(float3 base, float3 blend)
    {
        return max(blend, base);
    }
    
    inline float3 blend_screen(float3 base, float3 blend)
    {
        return (1.0 - ((1.0 - base) * (1.0 - blend)));
    }
    
    
    inline half sq(half f) {
        return f * f;
    }
    inline float sq(float f) {
        return f * f;
    }
    
    inline float2 sincos(float angle) {
        float cs;
        float sn = ::sincos(angle, cs);
        return float2(sn, cs);
    }
    
    
    inline float acos_fast(float f) {
        float x = abs(f);
        float res = -0.156583f * x + M_PI_2_F;
        res *= sqrt(1.0f - x);
        return (f >= 0.f) ? res : M_PI_F - res;
    }
    inline float asin_fast(float f)
    {
        return M_PI_2_F - acos_fast(f);
    }
    
    inline float atan_fast(float inX)
    {
        float  x = inX;
        return x*(-0.1784f * abs(x) - 0.0663f * x * x + 1.0301f);
    }
    
    inline float atan2_fast(float y, float x)
    {
        float sx = x > 0.f ? -1.f : 1.f;
        float abs_y = abs(y) + 1e-10f; 
        float r = (x + abs_y*sx) / (abs_y - x*sx);
        float angle = sx * M_PI_4_F + M_PI_2_F;
        angle      += (0.1963f * r * r - 0.9817f) * r;
        return y > 0.f ? angle : -angle;
    }
    
    
    template <class T>
    inline vec<T, 3> cartesian_from_spherical(vec<T, 2> uv)
    {
        
        
        T cos_phi;
        T phi = uv.x * 2.0f * M_PI_F;
        T sin_phi = ::sincos(phi, cos_phi);
        
        T cos_theta;
        T theta     = uv.y * M_PI_F;
        T sin_theta = ::sincos(theta, cos_theta);
        return vec<T, 3>(cos_phi * sin_theta,
                         cos_theta,
                         -sin_phi * sin_theta);
    }
    inline float2 spherical_from_cartesian(float3 dir)
    {
        return float2( atan2(-dir.z, dir.x) * (0.5f * M_1_PI_F), acos(dir.y) * M_1_PI_F);
    }
    inline half2 spherical_from_cartesian(half3 dir)
    {
        return half2(atan2(-dir.z, dir.x) * 0.5h, acos(dir.y)) * M_1_PI_H;
    }
    inline float2 spherical_from_cartesian_fast(float3 dir)
    {
        return float2( atan2_fast(-dir.z, dir.x) * (0.5f * M_1_PI_F), acos_fast(dir.y) * M_1_PI_F);
    }
    inline half2 spherical_from_cartesian_fast(half3 dir)
    {
        return half2( atan2_fast(-dir.z, dir.x) * 0.5h, acos_fast(dir.y)) * M_1_PI_H;
    }
    #define dual_contract_factor  1.0
    template <class T>
    inline vec<T, 2> dual_paraboloid_from_cartesian(vec<T, 3> dir)
    {
        dir.xy /= abs(dir.z) + 1.0;
        dir.y = 0.5 - dir.y * 0.5;
        T s   = sign(dir.z) * 0.25;
        dir.x = s * (dir.x - 1.0) + 0.5;
        return dir.xy;
    }
    
    
    template <class T>
    inline vec<T, 3> cartesian_from_dual_paraboloid(vec<T, 2>  uv)
    {
        
        T zside = 0.5 * sign(0.5 - uv.x);
        uv.x = 1.0 - abs(4.0 * uv.x - 2.0); 
        uv.y   = 1.0 - uv.y * 2.0;
        T z = length_squared(uv); 
        z = (1.0 - z) * zside;
        
        return vec<T, 3>(uv.x, uv.y, z);
    }
    
    template <class T>
    inline vec<T, 2> signNotZero(vec<T, 2> v) {
        return vec<T, 2>((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);
    }
    template <class T>
    inline vec<T, 2> octEncode(vec<T, 3> v) {
        float2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));
        return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;
    }
    template <class T>
    inline vec<T, 3> octDecode(vec<T, 2> p) {
        float3 v = float3(p.xy, 1.0 - abs(p.x) - abs(p.y));
        if (v.z < 0) v.xy = (1.0 - abs(v.yx)) * signNotZero(v.xy);
        return normalize(v);
    }
    inline float reduce_min(float3 v) {
        return min(v.x, min(v.y, v.z));
    }
    
    inline float reduce_min(float4 v) {
        return min(min(v.x, v.y), min(v.z, v.w));
    }
    inline float reduce_max(float3 v) {
        return max(v.x, max(v.y, v.z));
    }
    inline float reduce_max(float4 v) {
        return max(max(v.x, v.y), max(v.z, v.w));
    }
    
    inline float3 randomSphereDir(float2 rnd)
    {
        float s = rnd.x * M_PI_F * 2.f;
        float t = rnd.y * 2.f - 1.f;
        return float3( float2(sin(s), cos(s)) * sqrt(1.f-t*t), t );
    }
    
    
    template <class T>
    inline T interleaved_gradient_noise(vec<T, 2> pos)
    {
        vec<T, 3> magic( 0.06711056f, 0.00583715f, 52.9829189f );
        return fract( magic.z * fract( dot( pos, magic.xy ) ) );
    }
    
    inline float3 hemisphere_reflect(float3 v, float3 nrm)
    {
        
        
        
        float k = dot(v,nrm);
        return (k>0.0) ? v : v-2.0*nrm*k;
    }
    
    inline float3 randomHemisphereDir(float3 dir, float2 rnd)
    {
        return hemisphere_reflect(randomSphereDir( rnd ), dir);
    }
    
    inline void orthogonal_basis(float3 n, thread float3& xp, thread float3& yp)
    {
        
        float sz = n.z >= 0.f ? 1.f : -1.f;
        float a  =  n.y / (1.f + abs(n.z));
        float b  =  n.y * a;
        float c  = -n.x * a;
        
        xp = float3(n.z + sz * b,   sz * c,     -n.x);
        yp = float3(c,              1.f - b,    -sz * n.y);
    }
    template <class U>
    inline float2 normalized_coordinate(ushort2 index, U texture)
    {
        uint width  = texture.get_width();
        uint height = texture.get_height();
        
        float u = width  == 1 ? 0.5f : float(index.x) / float(width - 1);
        float v = height == 1 ? 0.5f : float(index.y) / float(height - 1);
        
        return float2(u, v);
    }
    template <class U>
    inline float2 normalized_coordinate(uint2 index, U texture)
    {
        uint width  = texture.get_width();
        uint height = texture.get_height();
        
        float u = width  == 1 ? 0.5f : float(index.x) / float(width - 1);
        float v = height == 1 ? 0.5f : float(index.y) / float(height - 1);
        
        return float2(u, v);
    }
    template <class U>
    inline half2 normalized_coordinate_half(uint2 index, U texture)
    {
        uint width  = texture.get_width();
        uint height = texture.get_height();
        
        half u = width  == 1 ? 0.5h : half(index.x) / half(width - 1);
        half v = height == 1 ? 0.5h : half(index.y) / half(height - 1);
        
        return half2(u, v);
    }
    
    template <class T>
    inline vec<T, 3> cubemap_dir_from_sampleCoord(uint face, vec<T, 2> sampleCoord) 
    {
        switch(face) {
            case 0: 
                return vec<T, 3>( 1.0, -sampleCoord.y, -sampleCoord.x);
            case 1: 
                return vec<T, 3>(-1.0, -sampleCoord.y,  sampleCoord.x);
            case 2: 
                return vec<T, 3>(sampleCoord.x,  1.0,  sampleCoord.y);
            case 3: 
                return vec<T, 3>(sampleCoord.x, -1.0, -sampleCoord.y);
            case 4: 
                return vec<T, 3>( sampleCoord.x, -sampleCoord.y,  1.0);
            default: 
                return vec<T, 3>(-sampleCoord.x, -sampleCoord.y, -1.0);
        }
    }
    
    template <class T>
    inline T signed_unit(T uv) {
        return uv * 2.0 - 1.0;
    }
    
    template <class T>
    inline T unsigned_unit(T uv) {
        return uv * 0.5 + 0.5;
    }
    template <class T>
    inline vec<T, 3> cubemap_dir_from_uv(uint face, vec<T, 2> uv) 
    {
        return cubemap_dir_from_sampleCoord(face, signed_unit(uv));
    }
    template <class T>
    inline vec<T, 3> cubemap_dir_from_uv_unit(uint face, vec<T, 2> uv) 
    {
        return normalize(cubemap_dir_from_uv(face, uv));
    }
    
    
    inline float2 barycentric_mix(float2 __x, float2 __y, float2 __z, float3 __t) { return __t.x * __x + __t.y * __y + __t.z * __z; }
    inline float3 barycentric_mix(float3 __x, float3 __y, float3 __z, float3 __t) { return __t.x * __x + __t.y * __y + __t.z * __z; }
    inline float4 barycentric_mix(float4 __x, float4 __y, float4 __z, float3 __t) { return __t.x * __x + __t.y * __y + __t.z * __z; }
    
    static inline float rect(float2 lt, float2 rb, float2 uv)
    {
        float2 borders = step(lt, uv) * step(uv, rb);
        return borders.x * borders.y;
    }
    
    inline half4 debugColorForCascade(int cascade)
    {
        switch (cascade) {
            case 0:
            return half4(1.h, 0.h, 0.h, 1.h);
            case 1:
            return half4(0.9, 0.5, 0., 1.);
            case 2:
            return half4(1., 1., 0., 1.);
            case 3:
            return half4(0., 1., 0., 1.);
            default:
            return half4(0., 0., 0., 1.);
        }
    }
    inline half3 debugColorForFace(int count)
    {
        switch (count) {
            case 0:  return half3(1.0h, 0.1h, 0.1h);
            case 1:  return half3(0.1h, 1.0h, 1.0h);
            case 2:  return half3(0.1h, 1.0h, 0.1h);
            case 3:  return half3(1.0h, 0.1h, 1.0h);
            case 4:  return half3(0.1h, 0.1h, 1.0h);
            default: return half3(1.0h, 1.0h, 0.1h);
        }
    }
    inline half4 debugColorForCount(int count)
    {
        switch (count) {
            case 0: return half4(0.0h, 0.0h, 0.0h, 1.h);
            case 1: return half4(0.0h, 0.0h, 0.4h, 1.h);
            case 2: return half4(0.0h, 0.0h, 0.9h, 1.h);
            case 3: return half4(0.0h, 0.4h, 0.7h, 1.h);
            case 4: return half4(0.0h, 0.9h, 0.4h, 1.h);
            case 5: return half4(0.0h, 0.9h, 0.0h, 1.h);
            case 6: return half4(0.4h, 0.7h, 0.0h, 1.h);
            case 7: return half4(0.9h, 0.7h, 0.0h, 1.h);
            default: return half4(1., 0., 0., 1.);
        }
    }
    inline float grid(float2 lt, float2 rb, float2 gridSize, float thickness, float2 uv)
    {
        float insideRect = rect(lt, rb + thickness, uv);
        float2 gt = thickness * gridSize;
        float2 lines = step(abs(lt - fract(uv * gridSize)), gt);
        return insideRect * (lines.x + lines.y);
    }
    inline float checkerboard(float2 gridSize, float2 uv)
    {
        float2 check = floor(uv * gridSize);
        return step(fmod(check.x + check.y, 2.f), 0.f);
    }
    
    inline float luminance(float3 color)
    {
        
        
        return dot(color, float3(0.212671, 0.715160, 0.072169));
    }
    inline half luminance(half3 color)
    {
        
        
        return dot(color, half3(0.212671h, 0.715160h, 0.072169h));
    }
    
    inline float vfx_srgb_to_linear(float c)
    {
        return (c <= 0.04045f) ? c / 12.92f : powr((c + 0.055f) / 1.055f, 2.4f);
    }
    
    inline half srgb_to_linear_fast(half c)
    {
        return powr(c, 2.2h);
    }
    
    inline half3 srgb_to_linear_fast(half3 c)
    {
        return powr(c, 2.2h);
    }
    
    inline half vfx_srgb_to_linear(half c)
    {
        
        return (c <= 0.04045h) ? (c * 0.0773993808h) :  powr(0.9478672986h * c + 0.05213270142h, 2.4h);
    }
    
    inline float3 vfx_srgb_to_linear(float3 c)
    {
        return float3(vfx_srgb_to_linear(c.x), vfx_srgb_to_linear(c.y), vfx_srgb_to_linear(c.z));
    }
    
    inline float linear_to_srgb(float c)
    {
        return (c < 0.0031308f) ? (12.92f * c) : (1.055f * powr(c, 1.f/2.4f) - 0.055f);
    }
    
    inline float3 linear_to_srgb(float3 v) { 
        return float3(linear_to_srgb(v.x), linear_to_srgb(v.y), linear_to_srgb(v.z));
    }
    
inline float4 texture2DProj(texture2d<float> tex, sampler smp, float4 uv)
    return tex.sample(smp, uv.xy / uv.w);
inline half4 texture2DProj(texture2d<half> tex, sampler smp, float4 uv)
    return tex.sample(smp, uv.xy / uv.w);
static constexpr sampler vfx_shadow_sampler_rev_z = sampler(coord::normalized, filter::linear, mip_filter::none, address::clamp_to_zero, compare_func::less_equal);
static constexpr sampler vfx_shadow_sampler = vfx_shadow_sampler_rev_z;
inline float shadow2D(sampler shadow_sampler, depth2d<float> tex, float3 uv, float4 tile)
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
    float2 mapSize = float2(tex.get_width(), tex.get_height());
    float2 duv = 0.5f / mapSize;
    float2 uv0 = tile.xy;
    float2 uvs = tile.zw;
    float2 b = uv0 + duv;
    float2 s = uvs - 2 * duv;
    uv.xy = uv.xy * s + b;
#endif
    return tex.sample_compare(shadow_sampler, uv.xy, uv.z);
inline float shadow2DProj(sampler shadow_sampler, depth2d<float> tex, float4 uv, float4 tile)
    float3 uvp = uv.xyz / uv.w;
    uvp.xy = tile.xy + uvp.xy * tile.zw;
    return tex.sample_compare(shadow_sampler, uvp.xy, uvp.z);
inline float shadow2DArray(sampler shadow_sampler, depth2d_array<float> tex, float3 uv, uint slice)
    return tex.sample_compare(shadow_sampler, uv.xy, slice, uv.z);
inline float shadow2DArrayProj(sampler shadow_sampler, depth2d_array<float> tex, float4 uv, uint slice)
    float3 uvp = uv.xyz / uv.w;
    return tex.sample_compare(shadow_sampler, uvp.xy, slice, uvp.z);
inline float4 transformViewPosInShadowSpace(float3 pos, float4x4 shadowMatrix)
    
    float4 lightScreen =  shadowMatrix * float4(pos, 1.f);
    return lightScreen;
inline float ComputeShadow(sampler shadow_sampler, float3 worldPos, float4x4 shadowMatrix, depth2d<float> shadowMap, float4 tile)
    float4 lightScreen =  transformViewPosInShadowSpace(worldPos, shadowMatrix);
    lightScreen.xyz /= lightScreen.w;
    if (any(lightScreen.xy < 0.0 || lightScreen.xy > 1.0)) {
        return 0.0;
    }
    float shadow = shadow2D(shadow_sampler, shadowMap, lightScreen.xyz, tile);
    
    shadow *= step(0., lightScreen.w);
    
    return shadow;
inline float ComputeSoftShadowGrid(sampler shadow_sampler, float3 worldPos, float4x4 shadowMatrix, depth2d<float> shadowMap, int sampleCount, float4 tile)
    float4 lightScreen =  transformViewPosInShadowSpace(worldPos, shadowMatrix);
    lightScreen.xyz /= lightScreen.w;
    if (any(lightScreen.xy < 0.0 || lightScreen.xy > 1.0)) {
        return 0.0;
    }
    
    float shadow;
    if (sampleCount <= 1) {
        shadow = shadow2D(shadow_sampler, shadowMap, lightScreen.xyz, tile);
    } else {
        lightScreen.z += 0.005f; 
        float2 texelSize = 2.f / float2(shadowMap.get_width(), shadowMap.get_height());
        float2 origin    = lightScreen.xy - (sampleCount * 0.5f) * texelSize;
        
        if (sampleCount <= 4) { 
            half totalAccum = 0.h;
            for (int y = 0; y < sampleCount; ++y) {
                for (int x = 0; x < sampleCount; ++x) {
                    totalAccum  += half(shadowMap.sample_compare(shadow_sampler, origin, lightScreen.z, 2 * int2(x,y)));
                }
            }
            shadow = totalAccum / half(sampleCount * sampleCount);
        } else {
            float totalAccum = 0.f;
            for (int y = 0; y < sampleCount; ++y) {
                for (int x = 0; x < sampleCount; ++x) {
                    float2 samplePos = origin + texelSize * float2(x, y);
                    totalAccum  += shadowMap.sample_compare(shadow_sampler, samplePos, lightScreen.z);
                }
            }
            shadow = totalAccum / float(sampleCount * sampleCount);
        }
    }
    
    shadow *= step(0., lightScreen.w);
    return shadow;
inline float ComputeSoftShadow(sampler shadow_sampler, float3 lightScreen, depth2d<float> shadowMap, constant float4* shadowKernel, int sampleCount, float shadowRadius, float4 tile)
    if (any(lightScreen.xyz < 0.0 || lightScreen.xyz > 1.0)) {
        return 0.0;
    }
    
    float shadow;
    if (sampleCount <= 1) {
        shadow = shadow2D(shadow_sampler, shadowMap, lightScreen.xyz, tile);
    } else {
        
        
        float3 duvdist_dx = dfdx(lightScreen.xyz);
        float3 duvdist_dy = dfdy(lightScreen.xyz);
        
        
        
        
        
        
        float inv_det_J = 1.0 / ((duvdist_dx.x * duvdist_dy.y) - (duvdist_dx.y * duvdist_dy.x));
        float2 ddist_duv = inv_det_J * float2(duvdist_dy.y * duvdist_dx.z - duvdist_dx.y * duvdist_dy.z,
                                              duvdist_dx.x * duvdist_dy.z - duvdist_dy.x * duvdist_dx.z);
        float totalAccum = 0.0;
        for (int i = 0; i < sampleCount; i++) {
            float3 uvOffset = shadowKernel[i].xyz * shadowRadius;
            float2 uvWithOffset = lightScreen.xy + uvOffset.xy;
            if (any(uvWithOffset < 0.0 || uvWithOffset > 1.0)) {
                continue;
            }
            float dist = lightScreen.z * (1.0 + uvOffset.z) + (ddist_duv.x * uvOffset.x + ddist_duv.y * uvOffset.y);
            if (dist < 0.0) {
                continue;
            }
            totalAccum += shadow2D(shadow_sampler, shadowMap, float3(uvWithOffset, dist), tile);
        }
        shadow = totalAccum / float(sampleCount);
    }
    return shadow;
inline float ComputeCascadeBlendAmount(float3 shadowPos, bool cascadeBlending)
    const float cascadeBlendingFactor = 0.1f; 
    float3 cascadePos = abs(shadowPos.xyz * 2.f - 1.f);
    
    if (cascadeBlending) {
#if 0
        const float edge = 1.f - cascadeBlendingFactor;
        
        cascadePos = 1.f - saturate((cascadePos - edge) / cascadeBlendingFactor);
        return cascadePos.x * cascadePos.y * cascadePos.z; 
#else
        
        float distToEdge = 1.0f - max(max(cascadePos.x, cascadePos.y), cascadePos.z);
        return smoothstep(0.0f, cascadeBlendingFactor, distToEdge);
#endif
    } else {
        return step(cascadePos.x, 1.f) * step(cascadePos.y, 1.f) * step(cascadePos.z, 1.f);
    }
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
inline float4 SampleShadowCascade(sampler shadow_sampler, depth2d<float> shadowMaps, float3 shadowPosition, uint cascadeIndex, constant float4* shadowKernel, int sampleCount, float shadowRadius, float4 tile)
#else
inline float4 SampleShadowCascade(sampler shadow_sampler, depth2d_array<float> shadowMaps, float3 shadowPosition, uint cascadeIndex, constant float4* shadowKernel, int sampleCount, float shadowRadius)
#endif
    
    float2 gridSize = float2(shadowMaps.get_width(), shadowMaps.get_height()) / 32;
    float gd = vfx::checkerboard(shadowPosition.xy, gridSize);
    float3 gridCol = mix(float3(vfx::debugColorForCascade(cascadeIndex).rgb), float3(0.f), float3(gd > 0.f));
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
    float shadow = ComputeSoftShadow(shadow_sampler, shadowPosition, shadowMaps, shadowKernel, sampleCount, shadowRadius, tile);
#else
    float shadow = 0.0;
    if (sampleCount > 1) {
        
        for (int i = 0; i < sampleCount; ++i) {
            shadow += shadow2DArray(shadow_sampler, shadowMaps, shadowKernel[i].xyz * shadowRadius + shadowPosition, cascadeIndex);
        }
        shadow /= float(sampleCount);
    } else {
        
        shadow = shadow2DArray(shadow_sampler, shadowMaps, shadowPosition, cascadeIndex);
    }
#endif
    return float4(gridCol, shadow);
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
inline float4 ComputeCascadedShadow(sampler shadow_sampler, float3 viewPos, float4x4 shadowMatrix, constant float4 *cascadeScale, constant float4 *cascadeBias, int cascadeCount, depth2d<float> shadowMaps, bool enableCascadeBlending, constant float4* shadowKernel, int sampleCount, float shadowRadius, constant float4* tiles)
#else
inline float4 ComputeCascadedShadow(sampler shadow_sampler, float3 viewPos, float4x4 shadowMatrix, constant float4 *cascadeScale, constant float4 *cascadeBias, int cascadeCount, depth2d_array<float> shadowMaps, bool enableCascadeBlending, constant float4* shadowKernel, int sampleCount, float shadowRadius)
#endif
    float4 shadow = 0.f;
    float shadowSum = 0.f;
    
    
    float3 pos_ls =  (shadowMatrix * float4(viewPos, 1.f)).xyz;
    for (int c = 0; c < cascadeCount; ++c) {
        
        float3 pos_cs =  pos_ls * cascadeScale[c].xyz + cascadeBias[c].xyz;
        
        float cascadeRadius = shadowRadius * cascadeScale[c].x;
        float opacity = ComputeCascadeBlendAmount(pos_cs, enableCascadeBlending);
        if (shadowSum >= 1.f && opacity <= 0.0) 
            break;                              
                                                
        if (opacity > 0.f) { 
            
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
            shadow += SampleShadowCascade(shadow_sampler, shadowMaps, pos_cs, c, shadowKernel, sampleCount, cascadeRadius, tiles[c]) * opacity;
#else
            shadow += SampleShadowCascade(shadow_sampler, shadowMaps, pos_cs, c, shadowKernel, sampleCount, cascadeRadius) * opacity;
#endif
            shadowSum += opacity;
        }
    }
    if (shadowSum > 0) {
        shadow /= shadowSum;
    }
    return shadow;
template <class T>
inline void applyFog(thread vec<T, 4>& color, float eye_distance, float3 fogParameters, vec<T, 4> fogColor) {
    float fogFactor = pow(clamp(eye_distance * fogParameters.x + fogParameters.y, 0.f, float(fogColor.a)), fogParameters.z);
    color.rgb = mix(color.rgb, fogColor.rgb * color.a, fogFactor);
#pragma mark Pack/Unpack
inline ushort packHalf2ToUShort(half2 v) {
    v = saturate(v);
    v = round(v*255);
    ushort2 uv = ushort2(v);
    ushort res = (uv.x & 0x00ff) | ((uv.y & 0x00ff) << 8);
    return res;
inline half2 unpackHalf2FromUShort(ushort v) {
    half2 res;
    
    res.x = half(v & 0x00ff);
    res.y = half( (v & 0xff00) >> 8);
    
    return res/255.;
#ifndef __VFXMetalDefines__
#define __VFXMetalDefines__
enum {
    VFXVertexSemanticPosition,
    VFXVertexSemanticNormal,
    VFXVertexSemanticTangent,
    VFXVertexSemanticColor,
    VFXVertexSemanticBoneIndices,
    VFXVertexSemanticBoneWeights,
    VFXVertexSemanticTexcoord0,
    VFXVertexSemanticTexcoord1,
    VFXVertexSemanticTexcoord2,
    VFXVertexSemanticTexcoord3,
    VFXVertexSemanticTexcoord4,
    VFXVertexSemanticTexcoord5,
    VFXVertexSemanticTexcoord6,
    VFXVertexSemanticTexcoord7
enum {
    VFXGBufferAttachmentEmission,
    VFXGBufferAttachmentNormal,
    VFXGBufferAttachmentRoughnessMetalness,
    VFXGBufferAttachmentAlbedo,
    VFXGBufferAttachmentVelocity,
    VFXGBufferAttachmentClearCoat,
    VFXGBufferAttachmentSubsurface
struct VFXWorldBuffer {
    float4x4    viewTransform;
    float4x4    inverseViewTransform; 
    float4x4    projectionTransform;
    float4x4    viewProjectionTransform;
    float4x4    viewToCubeTransform; 
    float4x4    lastFrameViewProjectionTransform;
    float4      ambientLightingColor;
    float4
fogColor;
    float3
fogParameters; 
    float2      inverseResolution;
    float       time;
    float       sinTime;
    float       cosTime;
    float       random01;
    float       motionBlurIntensity;
    float       environmentIntensity;
    float4x4    environmentTransform;
    float4x4    inverseProjectionTransform;
    float4x4    inverseViewProjectionTransform;
    float2      nearFar; 
    float4      viewportSize; 
    float4x4    inverseTransposeViewTransform;
    
    float4      clusterScale; 
    
    uint32_t    frame;
#endif 
#import <metal_stdlib>
using namespace metal;
struct sh2_coefficients
    float4 R;
    float4 G;
    float4 B;
struct sh3_coefficients
    float4 ar;
    float4 ag;
    float4 ab;
    float4 br;
    float4 bg;
    float4 bb;
    float4 c;
struct VFXPBRSurface {
    float3 n;
    float3 v;
    
    float3 albedo;
    float3 emission;
    float3 selfIllumination;
    float  metalness;
    float  roughness;
    float  ao;
    float  selfIlluminationOcclusion;
#define PBR_F0_NON_METALLIC 0.04f
#define PBR_MIN_ROUGHNESS 0.01
#if defined(USE_PROBES_LIGHTING) && (USE_PROBES_LIGHTING == 2)
inline float3 shEvalDirection(float4 dir, sh2_coefficients cachedSH)
    const float Exponent = 1;
    
    
    sh2_vector diffSH = sh2_compute_diffuse_transfer(half3(dir.xyz), Exponent);
    
    
    half3 lighting = max(half3(0,0,0), sh2_dot(cachedSH, diffSH)) * M_1_PI_F;
    
    
    
    return float3(lighting);
#endif
inline float3 shEvalDirection(float4 dir, sh3_coefficients sh)
    float3 x1, x2, x3;
    
    
    x1.r = dot(sh.ar, dir);
    x1.g = dot(sh.ag, dir);
    x1.b = dot(sh.ab, dir);
    
    
    float4 vB = dir.xyzz * dir.yzzx;
    x2.r = dot(sh.br, vB);
    x2.g = dot(sh.bg, vB);
    x2.b = dot(sh.bb, vB);
    
    
    float vC = dir.x * dir.x - dir.y * dir.y;
    x3 = sh.c.xyz * vC;
    
    return x1 + x2 + x3;
inline float vfx_radicalInverse(uint32_t bits) {
#if __METAL_VERSION__ >= 210
    bits = reverse_bits(bits);
#else
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
#endif
    return float(bits) * 0x1p-32;
inline float vfx_filteredAlphaFromRoughness(float3 N, float roughness)
    float3 dNdx = dfdx(N);
    float3 dNdy = dfdy(N);
#if 1
    constexpr half sigma2 = 0.5h * 0.5h;
#else
    constexpr half sigma2 = 0.15915494h;
#endif
    constexpr half kappa = 0.18h;
    half variance = (half)sigma2 * (dot(dNdx, dNdx) + dot(dNdy, dNdy));
    half kernelAlphaSquared = min(variance, kappa);
    half alpha = roughness * roughness;
    half filteredAlphaSquared = saturate(alpha * alpha + kernelAlphaSquared);
    return sqrt(filteredAlphaSquared);
inline float3 vfx_tangentSpaceToLocalSpace(float3 v, float3 normal) {
    float3 tangent,bitangent;
    vfx::generate_basis(normal, &tangent, &bitangent);
    
    return tangent * v.x + bitangent * v.y + normal * v.z;
inline float2 vfx_sampleHammersley(uint32_t i, uint sampleCount) {
    return float2(float(i) / sampleCount, vfx_radicalInverse(i));
static float3 vfx_importanceSampleGGX_brdf(float2 random, float alpha) __attribute__((overloadable)) {
    
    
    float cosTheta = sqrt((1.0 - random.x) / (1.0 + (alpha * alpha - 1.0) * random.x));
    float phi = 2.0 * M_PI_F * random.y;
    
    
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    return float3(sinTheta * cos(phi),
                  sinTheta * sin(phi),
                  cosTheta);
static float3 vfx_importanceSampleGGX_brdf(float2 random, float alpha, float3 n) __attribute__((overloadable)) {
    float3 importanceSampleGGX = vfx_importanceSampleGGX_brdf(random, alpha);
    return vfx_tangentSpaceToLocalSpace(importanceSampleGGX, n);
static float3 vfx_importanceSampleCosine_brdf(float2 random) __attribute__((overloadable)) {
    
    
    
    float r = sqrt(random.x);
    float phi = 2.0 * M_PI_F * random.y;
    
    float cosPhi;
    float sinPhi = sincos(phi, cosPhi);
    
    
    float x = r * cosPhi;
    float y = r * sinPhi;
    float z = sqrt(max(0.f, 1.f - random.x)); 
    return float3(x, y, z);
static float3 vfx_importanceSampleCosine_brdf(float2 random, float3 n) __attribute__((overloadable)) {
    float3 importanceSampleCosine = vfx_importanceSampleCosine_brdf(random);
    return vfx_tangentSpaceToLocalSpace(importanceSampleCosine, n);
inline float vfx_brdf_D(float alpha, float NoH) {
    float alpha_squared = alpha * alpha;
    float denom = (NoH * alpha_squared - NoH) * NoH + 1.0f;
    float denom_squared = denom * denom;
    return alpha_squared / (denom_squared * M_PI_F);
inline float3 vfx_brdf_F(float3 F0, float LoH) {
    return F0 + (1.f - F0) * pow(1.f - LoH, 5.f);
inline float3 vfx_brdf_F_opt(float3 F0, float LoH) {
    float inv_LoH = 1.f - LoH;
    float inv_LoH_pow_2 = inv_LoH * inv_LoH;
    float inv_LoH_pow_5 = inv_LoH_pow_2 * inv_LoH_pow_2 * inv_LoH;
    return F0 + (1.f - F0) * inv_LoH_pow_5;
inline float vfx_brdf_GLambda(float alpha2, float NoL) {
    float NoL2 = NoL * NoL;
    float t = (1.0f - NoL2) * alpha2 / NoL2;
    return 0.5f * (-1.0f + sqrt(1.0f + t));
inline float vfx_brdf_G(float alpha, float NoL, float NoV) {
    float alpha2 = alpha * alpha;
    float lambdaL = vfx_brdf_GLambda(alpha2, NoL);
    float lambdaV = vfx_brdf_GLambda(alpha2, NoV);
    return 1.f / (1.f + lambdaL + lambdaV);
inline float vfx_brdf_V(float alpha, float NoL, float NoV) {
    float alpha_squared = alpha * alpha;
    float NoL_squared = NoL * NoL;
    float NoV_squared = NoV * NoV;
    float lambda_L = NoV * sqrt(NoL_squared + alpha_squared * (1.0f - NoL_squared));
    float lambda_V = NoL * sqrt(NoV_squared + alpha_squared * (1.0f - NoV_squared));
    return 0.5f / (lambda_L + lambda_V + 1e-6f);
inline float vfx_brdf_V_opt(float alpha, float LoH) {
    float k = alpha * 0.5f;
    float k2 = k * k;
    float invK2 = 1.f - k2;
    return 1.f / (LoH * LoH * invK2 + k2);
static float2 vfx_computeHammonFactors(float NdotL, float NdotH, float NdotV, float LdotV, float alpha)
    
    
    
    
    
    
    
    
    
    float facing = 0.5f + 0.5f * LdotV;
    float rough = facing * (0.9f - 0.4f * facing) * (0.5f + NdotH) / NdotH;
    float smooth = 1.05f * (1.0f - pow(1.0f - NdotL, 5.f)) * (1.0f - pow(1.0f - NdotV, 5.f));
    float single = mix(smooth, rough, alpha);
    float multi = M_PI_F * 0.1159f * alpha;
    return float2(single, multi);
inline float4 vfx_specularDFG_diffuseHammon(float NoV,
                                            float roughness)
    
    
    float3 v = float3(sqrt(1.0 - NoV * NoV),
                      0.0,
                      NoV);
    
    float alpha = roughness * roughness; 
    
    float2 specularDFG = float2(0.0);
    float2 diffuseHammonFactors = float2(0.0);
    
    int const sampleCount = 1024;
    for (int i = 0; i < sampleCount; ++i) {
        float2 random = vfx_sampleHammersley(i, sampleCount);
        
        
        float3 h = vfx_importanceSampleGGX_brdf(random, alpha); 
        float3 l = reflect(-v, h); 
        
        float NoL = saturate(l.z); 
        float NoH = saturate(h.z); 
        float LoH = saturate(dot(l, h));
        
        if (NoL > 0.f) {
            float G = vfx_brdf_G(alpha, NoL, NoV);
            float GVis = G * LoH / (NoH * NoV);
            float Fc = pow(1.f - LoH, 5.f);
            specularDFG.x += (1.f - Fc) * GVis;
            specularDFG.y += Fc * GVis;
        }
        
        
        float3 Ld = vfx_importanceSampleCosine_brdf(random); 
        float NoLd = saturate(Ld.z);
        if (NoLd > 0.f) {
            float3 Hd = normalize(v + Ld);
            float NoHd = Hd.z;
            
            float LoVd = saturate(dot(Ld, v));
            float2 HF = vfx_computeHammonFactors(NoLd, NoHd, NoV, LoVd, alpha);
            diffuseHammonFactors.x += HF.x;
            diffuseHammonFactors.y += HF.y;
        }
    }
    
    return float4(specularDFG.x, specularDFG.y, diffuseHammonFactors.x, diffuseHammonFactors.y) / sampleCount;
inline float3 vfx_irradiance_cube(texturecube<float, access::sample> environment,
                                  uint                               environmentMipmapLevel,
                                  float3                             n_cube)
    float3 n = float3(n_cube.x, -n_cube.z, n_cube.y);
    
    constexpr sampler linearSampler(filter::linear);
    
    float3 L = float3(0.0);
    float weight = 0.0f;
    
    ushort const sampleCount = 1024;
    for (ushort i = 0; i < sampleCount; ++i) {
        float2 random = vfx_sampleHammersley(i, sampleCount);
        float3 l = vfx_importanceSampleCosine_brdf(random, n); 
        
        float NoL = saturate(dot(n, l));
        if (NoL > 0) {
            float3 Li = environment.sample(linearSampler, float3(l.x , l.z, -l.y), level(environmentMipmapLevel)).rgb;
            Li = min(Li, float3(16.));
            L += Li; 
            weight += 1.0;
        }
    }
    
    return L / weight;
inline float vfx_pbr_distanceAttenuation(float3 lightVector)
    float sqrDist = dot(lightVector, lightVector);
    return 1. / max(sqrDist, 0.0001);
inline float3 vfx_pbr_reference_world(VFXPBRSurface                      surface,
                                      texturecube<float, access::sample> environment,
                                      uint                               environmentSamplingLevel,
                                      float4x4                           localDirToWorldCubemapDir,
                                      float                              environmentIntensity)
    constexpr sampler linearSampler(filter::linear, mip_filter::linear);
    
    float3 n = surface.n;
    float3 v = surface.v;
    float3 albedo = surface.albedo;
    float metalness = surface.metalness;
    float roughness = surface.roughness;
    float ambientOcclusion = surface.ao;
    
    float NoV = saturate(dot(n, v));
    
    float3 effectiveAlbedo = mix(albedo, float3(0.0), metalness);
    float3 reflectance = mix(float3(PBR_F0_NON_METALLIC), albedo, metalness);
    
    
    float3 irradiance = float3(0.0);
    
    ushort const sampleCountDiffuse = 1024;
    for (ushort i = 0; i < sampleCountDiffuse; ++i) {
        float2 random = vfx_sampleHammersley(i, sampleCountDiffuse);
        float3 l = vfx_importanceSampleCosine_brdf(random, n); 
        
        float NoL = saturate(dot(n, l));
        
        if (NoL > 0) {
            float3 Li = environment.sample(linearSampler, vfx::mat4_mult_float3(localDirToWorldCubemapDir, l), level(environmentSamplingLevel)).rgb * environmentIntensity;
            irradiance += Li; 
        }
    }
    
    irradiance = irradiance / float(sampleCountDiffuse);
    
    
    float3 specular = float3(0.0);
    float specularWeight = 0.0;
    
    float correctedRoughness = mix(1.0f / 128.0f, 1.0f - 1.0f / 128.0f, roughness);
    float alpha = correctedRoughness * correctedRoughness; 
    
    ushort const sampleCountSpecular = 128;
    for (ushort i = 0; i < sampleCountSpecular; ++i) {
        float2 random = vfx_sampleHammersley(i, sampleCountSpecular);
        float3 h = vfx_importanceSampleGGX_brdf(random, correctedRoughness, n); 
        float3 l = reflect(-v, h); 
        
        float NoL = saturate(dot(n, l));
        float NoH = saturate(dot(n, h));
        float LoH = saturate(dot(l, h));
        
        if (NoH * NoV > 0) {
            float3 Li = environment.sample(linearSampler, vfx::mat4_mult_float3(localDirToWorldCubemapDir, l), level(environmentSamplingLevel)).rgb * environmentIntensity;
            float3 F = vfx_brdf_F(reflectance, LoH);
            float G = vfx_brdf_G(alpha, NoL, NoV);
#if 0
            float D = vfx_brdf_D(alpha, NoH);
            float pdf = (D * NoH) / (4.0f * LoH);
            
            if (pdf >= 0) {
                float3 l = D * F * G / (4.0f * NoV); 
                specular += Li * l / pdf;
                specularWeight += 1.0f;
            }
#else
            specular += Li * F * G * LoH / (NoH * NoV);
            specularWeight += 1.0f;
#endif
        }
    }
    
    specular /= specularWeight;
    
    
    return ambientOcclusion * (effectiveAlbedo * irradiance + specular);
inline float3x3 vfx_ltc_matrix_invert_transpose(float3x3 m)
    float a = m[0][0];
    float b = m[1][0];
    float c = m[0][1];
    float d = m[1][1];
    float det = a * d - b * c;
    m[0][0] = +det * d;
    m[1][0] = -det * b;
    m[1][0] = -det * c;
    m[1][1] = +det * a;
    m[2][2] = 1.f / m[2][2];
    return m;
inline float3x3 vfx_sample_area_light_precomputed_data(float3                 v,
                                                       float3                 n,
                                                       float                  roughness,
                                                       thread float*          brdfNorm,
                                                       texture2d_array<float> bakedDataTexture)
    constexpr sampler linearSampler = sampler(address::clamp_to_edge, filter::linear);
    
    float theta = acos(fabs(dot(n, v)));
    float2 uv = float2(roughness, theta * M_2_PI_F);
    
    float4 dataA = bakedDataTexture.sample(linearSampler, uv, 0);
    float4 dataB = bakedDataTexture.sample(linearSampler, uv, 1);
    
    *brdfNorm = dataB.y;
    
    return float3x3(float3(dataA.x, dataA.y, 0.f),
                    float3(dataA.z, dataA.w, 0.f),
                    float3(0.f, 0.f, dataB.x));
inline float3 vfx_area_light_polygon_edge_vector_form_factor(float3 cornerDirectionA,
                                                             float3 cornerDirectionB)
    
    
    
#if 0
    float theta = acos(dot(cornerDirectionA, cornerDirectionB));
    return (0.5f * M_1_PI_F) * cross(cornerDirectionA, cornerDirectionB) * ((theta > 0.001) ? theta/sin(theta) : 1.0);
#else
    float x = dot(cornerDirectionA, cornerDirectionB);
    float y = abs(x);
    
    float a = 5.42031f + (3.12829f + 0.0902326 * y) * y;
    float b = 3.45068f + (4.18814f + y) * y;
    float thetaOverSinTheta = a / b;
    
    if (x < 0.f)
        thetaOverSinTheta = M_PI_F * rsqrt(1.f - x * x) - thetaOverSinTheta;
    
    float3 u = cross(cornerDirectionA, cornerDirectionB);
    return (0.5f * M_1_PI_F) * thetaOverSinTheta * u;
#endif
inline float vfx_area_light_horizon_clipped_sphere_form_factor_from_polygon_vector_form_factor(float3 vectorFormFactor)
#if 1
    
    float l = length(vectorFormFactor);
    return max((l * l + vectorFormFactor.y) / (l + 1.f), 0.f);
#else
    
    return max(vectorFormFactor.y, 0.f);
#endif
inline float pbr_area_light_eval_rectangle(float4x3 corners)
    
    
    
    float3 corner0 = normalize(corners[0]);
    float3 corner1 = normalize(corners[1]);
    float3 corner2 = normalize(corners[2]);
    float3 corner3 = normalize(corners[3]);
    
    float3 vectorFormFactor = float3(0.f);
    vectorFormFactor += vfx_area_light_polygon_edge_vector_form_factor(corner0, corner1);
    vectorFormFactor += vfx_area_light_polygon_edge_vector_form_factor(corner1, corner2);
    vectorFormFactor += vfx_area_light_polygon_edge_vector_form_factor(corner2, corner3);
    vectorFormFactor += vfx_area_light_polygon_edge_vector_form_factor(corner3, corner0);
    
    return vfx_area_light_horizon_clipped_sphere_form_factor_from_polygon_vector_form_factor(vectorFormFactor);
inline float pbr_area_light_eval_polygon(float3                position,
                                         float3                lightCenter,
                                         float3                lightRight,
                                         float3                lightTop,
                                         uint32_t              vertexCount,
                                         device packed_float2 *vertexPositions)
    
    
    
    float3 vectorFormFactor = float3(0.f);
    for (uint32_t vertexIndex = 0; vertexIndex < vertexCount; ++vertexIndex) {
        packed_float2 localCorner0 = vertexPositions[vertexIndex];
        packed_float2 localCorner1 = vertexPositions[(vertexIndex + 1) % vertexCount];
        
        
        
        float3 cornerDirection0 = lightCenter - localCorner0[0] * lightRight + localCorner0[1] * lightTop;
        float3 cornerDirection1 = lightCenter - localCorner1[0] * lightRight + localCorner1[1] * lightTop;
        
        float3 corner0 = normalize(cornerDirection0 - position);
        float3 corner1 = normalize(cornerDirection1 - position);
        
        vectorFormFactor += vfx_area_light_polygon_edge_vector_form_factor(corner0, corner1);
    }
    
    return vfx_area_light_horizon_clipped_sphere_form_factor_from_polygon_vector_form_factor(vectorFormFactor);
inline float pbr_area_light_line_integral_position(float d, float l) {
    float d_squared = d * d;
    float l_squared = l * l;
    return l / (d * (d_squared + l_squared)) + atan(l / d) / d_squared;
inline float pbr_area_light_line_integral_direction(float d, float l) {
    float d_squared = d * d;
    float l_squared = l * l;
    return l_squared / (d * (d_squared + l_squared));
inline float pbr_area_light_eval_line(float2x3 cornerDirections)
    
    
    
    float3 corner0 = normalize(cornerDirections[0]);
    float3 corner1 = normalize(cornerDirections[1]);
    
    float3 direction = normalize(corner1 - corner0);
    
    if (corner0.y <= 0.f && corner1.y <= 0.f) return 0.f;
    if (corner0.y < 0.f) corner0 = (+corner0 * corner1.y - corner1 * corner0.y) / (+corner1.y - corner0.y);
    if (corner1.y < 0.f) corner1 = (-corner0 * corner1.y + corner1 * corner0.y) / (-corner1.y + corner0.y);
    
    float l1 = dot(corner0, direction);
    float l2 = dot(corner1, direction);
    
    float3 position = corner0 - l1 * direction;
    float d = length(position);
    
    float I = (pbr_area_light_line_integral_position(d, l2) - pbr_area_light_line_integral_position(d, l1)) * position.y
            + (pbr_area_light_line_integral_direction(d, l2) - pbr_area_light_line_integral_direction(d, l1)) * direction.y;
    
    return M_1_PI_F * I;
float2 _grid(float2 uv, float2 lineWidth)
    float4 uvDDXY = float4(dfdx(uv), dfdy(uv));
    float2 uvDeriv = float2(length(uvDDXY.xz), length(uvDDXY.yw));
    bool invertLineX = lineWidth.x > 0.5;
    bool invertLineY = lineWidth.y > 0.5;
    float2 targetWidth = float2(invertLineX ? 1.0 - lineWidth.x : lineWidth.x, invertLineY ? 1.0 - lineWidth.y : lineWidth.y);
    float2 drawWidth = clamp(targetWidth, uvDeriv, 0.5);
    float2 lineAA = uvDeriv * 1.5;
    float2 gridUV = abs(fract(uv) * 2.0 - 1.0);
    gridUV = float2( invertLineX ? gridUV.x : 1.0 - gridUV.x, invertLineY ? gridUV.y : 1.0 - gridUV.y );
    float2 grid2 = smoothstep(drawWidth + lineAA, drawWidth - lineAA, gridUV);
    grid2 *= saturate(targetWidth / drawWidth);
    grid2 = mix(grid2, targetWidth, saturate(uvDeriv * 2.0 - 1.0));
    grid2 = float2( invertLineX ? 1.0 - grid2.x : grid2.x, invertLineY ? 1.0 - grid2.y : grid2.y);
    return grid2;
float2 _gridFast(float2 uv, float2 lineWidth)
    float4 uvDDXY = float4(dfdx(uv), dfdy(uv));
    float2 uvDeriv = float2(length(uvDDXY.xz), length(uvDDXY.yw));
    float2 drawWidth = clamp(lineWidth, uvDeriv, 0.5);
    float2 lineAA = uvDeriv * 1.5;
    float2 gridUV = 1. - abs(fract(uv) * 2.0 - 1.0);
    float2 grid2 = smoothstep(drawWidth + lineAA, drawWidth - lineAA, gridUV);
    grid2 *= saturate(lineWidth / drawWidth);
    grid2 = mix(grid2, lineWidth, saturate(uvDeriv * 2.0 - 1.0));
    return grid2;
float grid(float2 uv, float2 lineWidth)
    float2 grid2 = _gridFast(uv, lineWidth);
    return mix(grid2.x, 1.0, grid2.y);
#pragma body
float2 uv0 = (_surface.diffuseTexcoord.xy - float2(0.5)) * 2.;
float2 uv = uv0 * 500;
float2 uv2 = uv * 10;
float s1 = 0.002;
float s2 = 0.0012;
float g = grid(uv, float2(s1));
float g2 = grid(uv2, float2(s2));
float4 color = float4(0.5, 0.5, 0.5, 0.8);
float4 red = float4(1,0,0,1);
float4 blue = float4(0.1568627451,0.3137254902,1,1);
float2 g0 = _gridFast(uv0, float2(s1)*0.003);
g0 = smoothstep(0., 0.01, g0);
color = mix(color, blue, g0.x);
color = mix(color, red, g0.y);
float border = max(0., 1 - length(uv0));
float p = min(1.0, -(_surface.position.z + 0.1));
_output.color = color * max(g, g2) * pow(border, 0.5) * p;
#import <metal_stdlib>
using namespace metal;
#import "vfx_metal"
struct VFXTessellatorTransforms {
    float4x4 modelViewTransform;
    float4x4 modelViewProjectionTransform;
    float4x4 projectionTransform;
#if OSD_IS_ADAPTIVE
kernel void compute_opensubdiv(
                               constant VFXTessellatorTransforms&     transforms                     [[ buffer(TRANSFORMS_BUFFER_INDEX) ]],
                               constant float&                        tessellationLevel              [[ buffer(TESSELLATION_LEVEL_BUFFER_INDEX) ]],
                               unsigned                               thread_position_in_grid        [[ thread_position_in_grid ]],
                               unsigned                               thread_position_in_threadgroup [[ thread_position_in_threadgroup ]],
                               unsigned                               threadgroup_position_in_grid   [[ threadgroup_position_in_grid ]],
                               OsdPatchParamBufferSet                 osdBuffers, 
                               device MTLQuadTessellationFactorsHalf* quadTessellationFactors        [[ buffer(QUAD_TESSFACTORS_INDEX) ]]
#if OSD_USE_PATCH_INDEX_BUFFER
                               ,device unsigned* patchIndex                                          [[ buffer(OSD_PATCH_INDEX_BUFFER_INDEX) ]]
                               ,device MTLDrawPatchIndirectArguments* drawIndirectCommands           [[ buffer(OSD_DRAWINDIRECT_BUFFER_INDEX) ]]
#endif
                         )
    
    
    
    
    
    
    
    threadgroup int3 patchParam[PATCHES_PER_THREADGROUP];
    
    threadgroup PatchVertexType patchVertices[PATCHES_PER_THREADGROUP * CONTROL_POINTS_PER_PATCH];
    
    const auto real_threadgroup = thread_position_in_grid / REAL_THREADGROUP_DIVISOR;
    const auto subthreadgroup_in_threadgroup = thread_position_in_threadgroup / REAL_THREADGROUP_DIVISOR;
    const auto real_thread_in_threadgroup = thread_position_in_threadgroup & (REAL_THREADGROUP_DIVISOR - 1);
    
#if NEEDS_BARRIER
    const auto validThread = thread_position_in_grid * CONTROL_POINTS_PER_THREAD < osdBuffers.kernelExecutionLimit;
#else
    const auto validThread = true;
    if(thread_position_in_grid * CONTROL_POINTS_PER_THREAD >= osdBuffers.kernelExecutionLimit)
        return;
#endif
    
    
    
    
    if(validThread)
    {
        patchParam[subthreadgroup_in_threadgroup] = OsdGetPatchParam(real_threadgroup, osdBuffers.patchParamBuffer);
        
        for(unsigned threadOffset = 0; threadOffset < CONTROL_POINTS_PER_THREAD; threadOffset++)
        {
            const auto vertexId = osdBuffers.indexBuffer[(thread_position_in_grid * CONTROL_POINTS_PER_THREAD + threadOffset) * IndexLookupStride];
            const auto v = osdBuffers.vertexBuffer[vertexId];
            
            threadgroup auto& patchVertex = patchVertices[thread_position_in_threadgroup * CONTROL_POINTS_PER_THREAD + threadOffset];
            
            
            
            
            
            OsdComputePerVertex(float4(v.position,1), patchVertex, vertexId, transforms.modelViewProjectionTransform, osdBuffers);
        }
    }
    
#if NEEDS_BARRIER
    threadgroup_barrier(mem_flags::mem_threadgroup);
#endif
    
    
    
    
    
    if(validThread)
    {
#if PATCHES_PER_THREADGROUP > 1
        auto patch = patchVertices + subthreadgroup_in_threadgroup * CONTROL_POINTS_PER_THREAD * CONTROL_POINTS_PER_PATCH;
#else
        
        auto patch = patchVertices;
#endif
        
        if(!OsdCullPerPatchVertex(patch, transforms.modelViewTransform))
        {
#if !OSD_USE_PATCH_INDEX_BUFFER
            quadTessellationFactors[real_threadgroup].edgeTessellationFactor[0] = 0.0h;
            quadTessellationFactors[real_threadgroup].edgeTessellationFactor[1] = 0.0h;
            quadTessellationFactors[real_threadgroup].edgeTessellationFactor[2] = 0.0h;
            quadTessellationFactors[real_threadgroup].edgeTessellationFactor[3] = 0.0h;
            quadTessellationFactors[real_threadgroup].insideTessellationFactor[0] = 0.0h;
            quadTessellationFactors[real_threadgroup].insideTessellationFactor[1] = 0.0h;
#endif
            
            patchParam[subthreadgroup_in_threadgroup].z = -1;
#if !NEEDS_BARRIER
            return;
#endif
        }
    }
    
#if NEEDS_BARRIER
    threadgroup_barrier(mem_flags::mem_threadgroup);
#endif
    
    
    
    
    if(validThread && patchParam[subthreadgroup_in_threadgroup].z != -1)
    {
        for(unsigned threadOffset = 0; threadOffset < CONTROL_POINTS_PER_THREAD; threadOffset++)
        {
            OsdComputePerPatchVertex(
                                     patchParam[subthreadgroup_in_threadgroup],
                                     real_thread_in_threadgroup * CONTROL_POINTS_PER_THREAD + threadOffset,
                                     real_threadgroup,
                                     thread_position_in_grid * CONTROL_POINTS_PER_THREAD + threadOffset,
                                     patchVertices + subthreadgroup_in_threadgroup * CONTROL_POINTS_PER_PATCH,
                                     osdBuffers
                                     );
        }
    }
    
#if NEEDS_BARRIER
    threadgroup_barrier(mem_flags::mem_device_and_threadgroup);
#endif
    
    
    
    
    if(validThread && real_thread_in_threadgroup == 0)
    {
        
#if OSD_USE_PATCH_INDEX_BUFFER
        const auto patchId = atomic_fetch_add_explicit((device atomic_uint*)&drawIndirectCommands->patchCount, 1, memory_order_relaxed);
        patchIndex[patchId] = real_threadgroup;
#else
        const auto patchId = real_threadgroup;
#endif
        
        OsdComputePerPatchFactors(
                                  patchParam[subthreadgroup_in_threadgroup],
                                  tessellationLevel,
                                  real_threadgroup,
                                  transforms.projectionTransform,
                                  transforms.modelViewTransform,
                                  osdBuffers,
                                  patchVertices + subthreadgroup_in_threadgroup * CONTROL_POINTS_PER_PATCH,
                                  quadTessellationFactors[patchId]
                                  );
    }
#endif 
enum {
    VFXDeformerAttributeSrcPosition,
    VFXDeformerAttributeSrcNormal,
    VFXDeformerAttributeSrcTangent,
    
    VFXDeformerAttributeDstPosition,
    VFXDeformerAttributeDstNormal,
    VFXDeformerAttributeDstTangent,
    
    VFXDeformerAttributeCount
#define USE_QUAT_FOR_IES 1
#define USE_PBR_DOMINANT_DIRECTION 1
#define PBR_INTENSITY_FACTOR M_PI_2_F
#define BoostFactor (20.0f * PBR_INTENSITY_FACTOR)
struct vfx_light
    float4 color; 
    float3 pos; 
    float3 dir; 
    float shadowRadius; 
    uint8_t lightType; 
    uint8_t shadowSampleCount; 
                                
    union {
        struct {
            float4      cascadeScale[4]; 
            float4      cascadeBias[4];
        } directional; 
        struct {
            float4      attenuationFactors; 
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
            float4x4    projection;
            float       depthBias;
#else
            float3      shadowScaleBias; 
#endif
        } omni;
        struct {
            float4      _attenuationFactors; 
            float2      scaleBias; 
        } spot;
        struct {
            float4      _attenuationFactors; 
            float2      scaleBias; 
#if USE_QUAT_FOR_IES
            float4      light_from_view_quat; 
#else
            float4x4    light_from_view; 
#endif
        } ies;
        union {
            struct {
                float2 halfExtents;
                float doubleSided;
            } rectangle;
            struct {
                uint32_t vertexCount;
                float doubleSided;
            } polygon;
            struct {
                float halfLength;
            } line;
            struct {
                float2 halfExtents;
                float doubleSided;
            } ellipse;
            struct {
                float3 halfExtents;
            } ellipsoid;
        } area;
        struct {
            float3  offset;
            float4  halfExtents; 
            float3  parallaxCenter;
            float3  parallaxExtents;
            int32_t index; 
            int32_t parallaxCorrection; 
        } probe;
    } parameters; 
    float4x4    shadowMatrix; 
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
    float4 tiles[6]; 
#endif
uint8_t categoryBitmask;
#if defined(__METAL_VERSION__) 
using namespace metal;
namespace vfx {
    static constexpr sampler linearSampler = sampler(filter::linear, mip_filter::linear);
struct VFXShaderSurface {
    float3 view;                
    float3 position;            
    float3 normal;              
    float3 geometryNormal;      
    float2 normalTexcoord;      
    float3 tangent;             
    float3 bitangent;           
    float4 diffuse;             
    float2 diffuseTexcoord;     
    float4 specular;            
    float2 specularTexcoord;    
    float4 emission;            
    float2 emissionTexcoord;    
    float4 selfIllumination;            
    float2 selfIlluminationTexcoord;    
    float4 multiply;            
    float2 multiplyTexcoord;    
    float4 transparent;         
    float2 transparentTexcoord; 
    float4 reflective;          
    float  metalness;           
    float2 metalnessTexcoord;   
    float  roughness;           
    float2 roughnessTexcoord;   
    float clearCoat;            
    float2 clearCoatTexcoord;   
    float clearCoatRoughness;   
    float2 clearCoatRoughnessTexcoord;
    float3 clearCoatNormal;     
    float2 clearCoatNormalTexcoord;
    float subsurface;
    float2 subsurfaceTexCoord;
    float3 subsurfaceRadius;
    float2 subsurfaceRadiusTexCoord;
    float shininess;            
    float fresnel;              
    float ambientOcclusion;     
    float2 ambientOcclusionTexcoord;   
    float3 _normalTS;           
    float3 _clearCoatNormalTS;  
#ifdef USE_SURFACE_EXTRA_DECL
    __SurfaceExtraDecl__
#endif
struct VFXShaderLight {
    float4 intensity;
    float3 direction;
    float  _att;
    float3 _spotDirection;
    float  _distance;
enum VFXShadingModel
    VFXShadingModelConstant,
    VFXShadingModelPhong,
    VFXShadingModelNone,
    VFXShadingModelPhysicallyBased,
    VFXShadingModelShadowOnly,
    VFXShadingModelCustom 
#define PROBES_NORMALIZATION 0
#define PROBES_OUTER_BLENDING 1
struct VFXShaderLightingContribution
    float3 ambient;
    float3 diffuse;
    float3 specular;
    float3 modulate;
#ifdef USE_SHADOWONLY
    float shadowFactor;
#endif
#if PROBES_NORMALIZATION
    float4 probesWeightedSum; 
#else
    float  probeRadianceRemainingFactor;
#endif
    thread VFXShaderSurface& surface;
#ifdef USE_PER_VERTEX_LIGHTING
    commonprofile_io out;
#else
    commonprofile_io in;
#endif
#ifdef USE_PBR
    struct {
        float3 albedo;
        float3 envDiffuse;
        float3 envSpecular;
        float3 reflectance;
        float3 probeReflectance;
#ifndef USE_PBR_LAMBERTIAN_REFLECTION
        float2 diffuseHammonFactors;
#endif
#ifdef USE_PBR_TRANSPARENCY
        float  transparency;
#endif
        float  NoV;
        float  selfIlluminationOcclusion;
#ifdef USE_CLEARCOAT
        float  NoVClearCoat;
        float3 probeReflectanceClearCoat;
#endif
    } pbr;
#endif
    
    VFXShaderLightingContribution(thread VFXShaderSurface& iSurface, commonprofile_io io):surface(iSurface)
#ifdef USE_PER_VERTEX_LIGHTING
    ,out(io)
#else
    ,in(io)
#endif
    {
        ambient = 0.f;
        diffuse = 0.f;
        specular = 0.f;
#ifdef USE_SHADOWONLY
        shadowFactor = 1.f;
#endif
#if PROBES_NORMALIZATION
#if PROBES_OUTER_BLENDING
        probesWeightedSum = float4(0.f);
#else
        probesWeightedSum = float4(0.f, 0.f, 0.f, 0.000001f); 
#endif
#else
        probeRadianceRemainingFactor = 1.f;
#endif
#ifdef USE_MODULATE
        modulate = 1.f;
#else
        modulate = 0.f;
#endif
    }
#ifdef USE_PBR
    void prepareForPBR(texture2d<float, access::sample> specularDFGDiffuseHammonTexture, float occ)
    {
        pbr.envDiffuse = 0.f;
        pbr.envSpecular = 0.f;
        pbr.selfIlluminationOcclusion = occ;
      
        pbr.albedo = surface.diffuse.rgb;
#ifdef USE_PBR_TRANSPARENCY
  #ifdef DIFFUSE_PREMULTIPLIED
        
        pbr.transparency = 1.f;
  #else
        pbr.transparency = surface.diffuse.a;
  #endif
  #ifdef USE_TRANSPARENCY
    #ifdef USE_PER_VERTEX_LIGHTING
        pbr.transparency *= out.transparency;
    #else
        pbr.transparency *= in.transparency;
    #endif
  #endif
  #ifdef USE_TRANSPARENT
        pbr.transparency *= surface.transparent.a;
  #endif
        pbr.albedo *= pbr.transparency;
  #ifdef DIFFUSE_PREMULTIPLIED
        
        
        pbr.transparency *= surface.diffuse.a;
  #endif
#endif
        
        float3 n = surface.normal;
        float3 v = surface.view;
        pbr.NoV = abs(dot(n, v));
        
        float roughness = surface.roughness;
#ifdef USE_PBR_LAMBERTIAN_REFLECTION
        float2 specularDFG = specularDFGDiffuseHammonTexture.sample(vfx::linearSampler, float2(pbr.NoV, roughness)).rg;
#else
        float4 env = specularDFGDiffuseHammonTexture.sample(vfx::linearSampler, float2(pbr.NoV, roughness));
        float2 specularDFG = env.xy;
        pbr.diffuseHammonFactors = env.zw;
#endif
        
        pbr.reflectance = mix(PBR_F0_NON_METALLIC, pbr.albedo, surface.metalness);
        pbr.probeReflectance = pbr.reflectance * specularDFG.r + specularDFG.g;
                                
#ifdef USE_CLEARCOAT
        pbr.NoVClearCoat = abs(dot(surface.clearCoatNormal, v));
        float2 DFGClearCoat = specularDFGDiffuseHammonTexture.sample(vfx::linearSampler, float2(pbr.NoVClearCoat, surface.clearCoatRoughness)).rg;
        pbr.probeReflectanceClearCoat = 0.04 * DFGClearCoat.r + DFGClearCoat.g;
#endif
    }
#endif
#ifdef USE_LIGHT_MODIFIER
    __LightModifierExtraDecl__
#endif
    float4 debug_pixel(float2 fragmentPosition)
    {
        const int width = 64;
        switch (int(fragmentPosition.x + fragmentPosition.y ) / width) {
            case 0: return float4(surface.view, 1.f);
            case 1: return float4(surface.position, 1.f);
            case 2: return float4(surface.normal, 1.f);
            case 3: return float4(surface.geometryNormal, 1.f);
            case 4: return float4(float3(surface.ambientOcclusion), 1.f);
            case 5: return surface.diffuse;
            case 6: return float4(float3(surface.metalness), 1.f);
            case 7: return float4(float3(surface.roughness), 1.f);
            case 8: return float4(ambient, 1.f);
            case 9: return float4(diffuse, 1.f);
            default: return float4(specular, 1.f);
        }
    }
    
    static inline float3 lambert_diffuse(float3 l, float3 n, float3 color, float intensity) {
        return color * (intensity * saturate(dot(n, l)));
    }
    void phong(float3 l, float3 color, float intensity)
    {
        float3 D = lambert_diffuse(l, surface.normal, color, intensity);
        diffuse += D;
        float3 r = reflect(-l, surface.normal);
        specular += powr(saturate(dot(r, surface.view)), surface.shininess) * D;
    }
#ifdef USE_PBR
    void physicallyBased(float3 l, float3 color, float intensity)
    {
        float3 n         = surface.normal;
        float3 v         = surface.view;
        float  roughness = surface.roughness;
        float  alpha     = roughness * roughness;
        float3 h = normalize(l + v);
        float NoL = saturate(dot(n, l));
        float NoH = saturate(dot(n, h));
        float LoH = saturate(dot(l, h));
        
        float D   = vfx_brdf_D(alpha, NoH);
        float3 F  = vfx_brdf_F_opt(pbr.reflectance, LoH);
        float Vis = vfx_brdf_V(alpha, NoL, pbr.NoV);
        
        diffuse  += color * (NoL * M_1_PI_F * intensity);
        specular += color * F * (NoL * D * Vis * intensity);
        
        #ifdef USE_CLEARCOAT
            n = surface.clearCoatNormal;
            roughness = max(surface.clearCoatRoughness, 0.089f);
            alpha = roughness * roughness; 
        
            
            
            float NoH_coat = saturate(dot(n, h));
            float NoL_coat = saturate(dot(n, l));
            D   = vfx_brdf_D(alpha, NoH_coat);
            F   = vfx_brdf_F_opt(0.04, LoH) * surface.clearCoat;
            Vis = vfx_brdf_V(alpha, NoL_coat, saturate(dot(n,v)));
        
            float attenuation = 1.0 - F.r;
            specular *=  (attenuation * attenuation);
            specular += color * F * ( NoL_coat * D * Vis * intensity);
        #endif
    }
#endif
    void custom(float3 _l, float3 _color, float _intensity)
    {
#ifdef USE_LIGHT_MODIFIER
        thread VFXShaderLightingContribution &_lightingContribution = *this;
        thread VFXShaderSurface& _surface = surface;
        VFXShaderLight _light = {.direction = _l, .intensity = float4(_color, 1.f), ._att = _intensity };
        
        __DoLightModifier__
        
#endif
    }
    void shade(float3 l, float3 color, float intensity)
    {
#ifdef LIGHTING_MODEL
        switch (LIGHTING_MODEL) {
#ifdef USE_SHADOWONLY
            case VFXShadingModelShadowOnly:        shadowFactor *= intensity; break;
#endif
            case VFXShadingModelPhong:             phong(l, color, intensity);   break;
#ifdef USE_PBR
            case VFXShadingModelPhysicallyBased:   physicallyBased(l, color, intensity);     break;
#endif
            case VFXShadingModelCustom:            custom(l, color, intensity);  break;
            default:  break; 
        }
#endif
    }
    
    
    
    float pbr_dist_attenuation_alternate(float3 l, float cutoff) {
        
        float radius = 0.1f; 
        float factor = 1.f / (1.f + length(l)/radius);
        float attenuation = saturate(factor * factor); 
        return saturate((attenuation - cutoff) / (1.f - cutoff));
    }
    float pbr_dist_attenuation(float3 l, float inv_square_radius) {
        float sqr_dist = length_squared(l);
        float atten = 1.f / max(sqr_dist, 0.0001f);
        
        float factor = saturate(1.f - vfx::sq(sqr_dist * inv_square_radius));
        return atten * factor * factor;
    }
    float non_pbr_dist_attenuation(float3 l, float4 att)
    {
        return powr(saturate(length(l) * att.x + att.y), att.z);
    }
    float dist_attenuation(float3 unnormalized_l, vfx_light light)
    {
#ifdef USE_PBR
        return pbr_dist_attenuation(unnormalized_l, light.parameters.omni.attenuationFactors.w);
        
        
#else
#ifdef USE_SHADOWONLY
        return 1.f;
#endif
        return non_pbr_dist_attenuation(unnormalized_l, light.parameters.omni.attenuationFactors);
#endif
    }
    float spot_attenuation(float3 l, vfx_light light)
    {
#ifdef USE_SHADOWONLY
        return 1.f;
#endif
        
        return saturate(dot(l, light.dir) * light.parameters.spot.scaleBias.x + light.parameters.spot.scaleBias.y);
    }
    void shade_modulate(float3 l, float4 color, float intensity)
    {
        constexpr half3 white = half3(1.h);
        
        modulate *= float3(mix(white, half3(color.rgb), half(color.a * intensity)));
    }
    float3 gobo(float3 pos, vfx_light light, texture2d<half> goboTexture, sampler goboSampler)
    {
        half3 g = texture2DProj(goboTexture, goboSampler, (light.shadowMatrix * float4(pos, 1.f))).rgb;
        return light.color.rgb * float3(mix(1.h, g, half(light.color.a)));
    }
    float shadow(float3 pos, vfx_light light, depth2d<float> shadowMap)
    {
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
        float4 tile = light.tiles[0];
#else
        float4 tile = {0.0, 0.0, 1.0, 1.0};
#endif
        float shadow = ComputeShadow(vfx_shadow_sampler, pos, light.shadowMatrix, shadowMap, tile);
        return 1.f - shadow * light.color.a; 
    }
    
    float shadow(float3 pos, vfx_light light, depth2d<float> shadowMap, constant float4* shadowKernel)
    {
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
        float4 tile = light.tiles[0];
#else
        float4 tile = {0.0, 0.0, 1.0, 1.0};
#endif
        float4 lightScreen = transformViewPosInShadowSpace(pos, light.shadowMatrix);
        lightScreen.xyz /= lightScreen.w;
        float shadow = ComputeSoftShadow(vfx_shadow_sampler, lightScreen.xyz, shadowMap, shadowKernel, light.shadowSampleCount, light.shadowRadius, tile);
        return 1.f - shadow * light.color.a; 
    }
    float shadow(float3 pos, vfx_light light, depth2d<float> shadowMap, constant float4* shadowKernel, int shadowSampleCount)
    {
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
        float4 tile = light.tiles[0];
#else
        float4 tile = {0.0, 0.0, 1.0, 1.0};
#endif
        float4 lightScreen = transformViewPosInShadowSpace(pos, light.shadowMatrix);
        lightScreen.xyz /= lightScreen.w;
        float shadow = ComputeSoftShadow(vfx_shadow_sampler, lightScreen.xyz, shadowMap, shadowKernel, shadowSampleCount, light.shadowRadius, tile);
        return 1.f - shadow * light.color.a; 
    }
    float shadow(float3 pos, vfx_light light, depth2d<float> shadowMap, int shadowSampleCount)
    {
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
        float4 tile = light.tiles[0];
#else
        float4 tile = {0.0, 0.0, 1.0, 1.0};
#endif
        float shadow = ComputeSoftShadowGrid(vfx_shadow_sampler, pos, light.shadowMatrix, shadowMap, shadowSampleCount, tile);
        return 1.f - shadow * light.color.a; 
    }
ushort getCubeFace(float3 dir)
    
    float3 absDir = abs(dir);
    float maxAxis = max(absDir.x, max(absDir.y, absDir.z));
    if (absDir.z == maxAxis) {
        
        return dir.z > 0.0f ? 4 : 5;
    } else if (absDir.y == maxAxis) {
        
        return dir.y > 0.0f ? 2 : 3;
    } else {
        
        
        return dir.x > 0.0f ? 0 : 1;
    }
float4x4 getFaceRotation(ushort face) {
    float4 xAxis(1.0, 0.0, 0.0, 0.0);
    float4 yAxis(0.0, 1.0, 0.0, 0.0);
    float4 zAxis(0.0, 0.0, 1.0, 0.0);
    float4 zero (0.0, 0.0, 0.0, 1.0);
    switch (face) {
        case 0: return float4x4(-zAxis, yAxis,  xAxis, zero);
        case 1: return float4x4( zAxis, yAxis, -xAxis, zero);
        case 2: return float4x4( xAxis,-zAxis,  yAxis, zero);
        case 3: return float4x4( xAxis, zAxis, -yAxis, zero);
        case 4: return float4x4(-xAxis, yAxis, -zAxis, zero);
        case 5: return float4x4( xAxis, yAxis,  zAxis, zero);
        default: return float4x4();
    }
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
    float shadow_omni(float3 pos_vs, float3 nrm_vs, vfx_light light, depth2d<float> shadowMap, constant float4* shadowKernel, int sampleCount)
#else
    float shadow_omni(float3 pos_vs, float3 nrm_vs, vfx_light light, depthcube<float> shadowMap, constant float4* shadowKernel, int sampleCount)
#endif
    {
        
#define USE_TANGENT_SAMPLING 0
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
        float  depthBias = light.parameters.omni.depthBias;
#else
        float2 scaleBias = light.parameters.omni.shadowScaleBias.xy;
        float  depthBias = light.parameters.omni.shadowScaleBias.z;
#endif
        
        pos_vs += nrm_vs * depthBias;
        
        float4 pos_ls = (light.shadowMatrix * float4(pos_vs, 1.f));
#if !CFX_USE_ATLAS_FOR_SHADOW_MAP
        
        float z_lin = vfx::reduce_max(abs(pos_ls));
        
        
        
        
        float z_ndc = (z_lin * scaleBias.x + scaleBias.y) / z_lin - depthBias;
#endif
        
        float shadow;
        if (sampleCount <= 1) {
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
            ushort face = getCubeFace(normalize(pos_ls.xyz));
            float4 tile = light.tiles[face];
            shadow = ComputeShadow(vfx_shadow_sampler, (getFaceRotation(face) * pos_ls).xyz, light.parameters.omni.projection, shadowMap, tile);
#else
            shadow = shadowMap.sample_compare(vfx_shadow_sampler, pos_ls.xyz, z_ndc);
#endif
        } else {
            
            float filteringSizeFactor = light.shadowRadius;
#if USE_TANGENT_SAMPLING
            float3 tgt_x, tgt_y;
            vfx::orthogonal_basis(pos_ls, tgt_x, tgt_y);
#else
            float3 nrm_ls = (light.shadowMatrix * float4(nrm_vs, 0.f)).xyz;
#endif
            
            float totalAccum = 0.0;
            for(int i=0; i < sampleCount; i++){
#if USE_TANGENT_SAMPLING
                float2 scale = shadowKernel[i].xy * filteringSizeFactor * 2.f;
                float3 smp_ls = pos_ls.xyz + tgt_x * scale.x + tgt_y * scale.y;
#else
                float3 smp_ls = pos_ls.xyz + vfx::randomHemisphereDir(nrm_ls, shadowKernel[i].xy * 0.5 + 0.5) * filteringSizeFactor;
#endif
                
                
                
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
                ushort face = getCubeFace(normalize(smp_ls.xyz));
                float4 tile = light.tiles[face];
                totalAccum += ComputeShadow(vfx_shadow_sampler, (getFaceRotation(face) * float4(smp_ls, 1.0)).xyz, light.parameters.omni.projection, shadowMap, tile);
#else
                totalAccum += shadowMap.sample_compare(vfx_shadow_sampler, smp_ls, z_ndc);
#endif
            }
            shadow = totalAccum / float(sampleCount);
        }
        return 1.f - shadow * light.color.a; 
    }
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
    float shadow(float3 pos, constant vfx_light& light, depth2d<float> shadowMaps, int cascadeCount, bool blendCascade, constant float4* shadowKernel, int sampleCount)
    {
        float shadow = ComputeCascadedShadow(vfx_shadow_sampler, pos, light.shadowMatrix, light.parameters.directional.cascadeScale, light.parameters.directional.cascadeBias, cascadeCount, shadowMaps, blendCascade, shadowKernel, sampleCount, light.shadowRadius, light.tiles).a;
        return 1.f - shadow * light.color.a; 
    }
#else
    float shadow(float3 pos, constant vfx_light& light, depth2d_array<float> shadowMaps, int cascadeCount, bool blendCascade, constant float4* shadowKernel, int sampleCount)
    {
        float shadow = ComputeCascadedShadow(vfx_shadow_sampler, pos, light.shadowMatrix, light.parameters.directional.cascadeScale, light.parameters.directional.cascadeBias, cascadeCount, shadowMaps, blendCascade, shadowKernel, sampleCount, light.shadowRadius).a;
        return 1.f - shadow * light.color.a; 
    }
#endif
    
    void add_directional(vfx_light light)
    {
#ifdef USE_PBR
        float intensity = PBR_INTENSITY_FACTOR;
#else
        float intensity = 1.0f;
#endif
        shade(light.dir, light.color.rgb, intensity);
    }
    
    void add_directional(vfx_light light, texture2d<half> goboTexture, sampler goboSampler)
    {
#ifdef USE_PBR
        float intensity = PBR_INTENSITY_FACTOR;
#else
        float intensity = 1.0f;
#endif
        light.color.rgb = gobo(surface.position, light, goboTexture, goboSampler);
        
          
            shade(light.dir, light.color.rgb, intensity);
    }
    
    void add_directional(vfx_light light, depth2d<float> shadowMap)
    {
#ifdef USE_PBR
        float intensity = PBR_INTENSITY_FACTOR;
#else
        float intensity = 1.0f;
#endif
        intensity *= shadow(surface.position, light, shadowMap);
        shade(light.dir, light.color.rgb, intensity);
    }
    
    void add_directional(vfx_light light, depth2d<float> shadowMap, constant float4* shadowKernel)
    {
#ifdef USE_PBR
        float intensity = PBR_INTENSITY_FACTOR;
#else
        float intensity = 1.0f;
#endif
        intensity *= shadow(surface.position, light, shadowMap, shadowKernel);
        shade(light.dir, light.color.rgb, intensity);
    }
    void add_directional(vfx_light light, depth2d<float> shadowMap, constant float4* shadowKernel, int sampleCount)
    {
#ifdef USE_PBR
        float intensity = PBR_INTENSITY_FACTOR;
#else
        float intensity = 1.0f;
#endif
        intensity *= shadow(surface.position, light, shadowMap, shadowKernel, sampleCount);
        shade(light.dir, light.color.rgb, intensity);
    }
    
    void add_directional(vfx_light light, depth2d<float> shadowMap, int sampleCount)
    {
#ifdef USE_PBR
        float intensity = PBR_INTENSITY_FACTOR;
#else
        float intensity = 1.0f;
#endif
        intensity *= shadow(surface.position, light, shadowMap, sampleCount);
        shade(light.dir, light.color.rgb, intensity);
    }
    
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
    void add_directional(constant vfx_light& light, depth2d<float> shadowMaps, int cascadeCount, bool blendCascade, constant float4* shadowKernel, int sampleCount, bool debugCascades)
#else
    void add_directional(constant vfx_light& light, depth2d_array<float> shadowMaps, int cascadeCount, bool blendCascade, constant float4* shadowKernel, int sampleCount, bool debugCascades)
#endif
    {
#ifdef USE_PBR
        float intensity = PBR_INTENSITY_FACTOR;
#else
        float intensity = 1.0f;
#endif
        if (debugCascades) {
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
            float4 shadowDebug = ComputeCascadedShadow(vfx_shadow_sampler, surface.position, light.shadowMatrix, light.parameters.directional.cascadeScale, light.parameters.directional.cascadeBias, cascadeCount, shadowMaps, blendCascade, shadowKernel, sampleCount, light.shadowRadius, light.tiles);
#else
            float4 shadowDebug = ComputeCascadedShadow(vfx_shadow_sampler, surface.position, light.shadowMatrix, light.parameters.directional.cascadeScale, light.parameters.directional.cascadeBias, cascadeCount, shadowMaps, blendCascade, shadowKernel, sampleCount, light.shadowRadius);
#endif
            intensity *= (1.f - shadowDebug.a);
            shade(light.dir, light.color.rgb, intensity);
            diffuse.rgb = mix(diffuse.rgb, shadowDebug.rgb, light.color.a);
        } else {
            intensity *= shadow(surface.position, light, shadowMaps, cascadeCount, blendCascade, shadowKernel, sampleCount);
            shade(light.dir, light.color.rgb, intensity);
        }
    }
    
    void add_omni(vfx_light light)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        shade(l, light.color.rgb, dist_attenuation(unnormalized_l, light) * BoostFactor);
    }
#if CFX_USE_ATLAS_FOR_SHADOW_MAP
    void add_omni(vfx_light light, depth2d<float> shadowMap, constant float4* shadowKernel, int sampleCount)
#else
    void add_omni(vfx_light light, depthcube<float> shadowMap, constant float4* shadowKernel, int sampleCount)
#endif
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light) * BoostFactor;
        intensity *= shadow_omni(surface.position, surface.normal, light, shadowMap, shadowKernel, sampleCount);
        shade(l, light.color.rgb, intensity);
    }
    void add_local_omni(vfx_light light)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        shade(l, light.color.rgb, dist_attenuation(unnormalized_l, light) * BoostFactor);
    }
    
    void add_spot(vfx_light light)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light) * BoostFactor;
        intensity      *= spot_attenuation(l, light);
        shade(l, light.color.rgb, intensity);
    }
    void add_spot(vfx_light light, texture2d<half> goboTexture, sampler goboSampler)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light) * BoostFactor;
        intensity      *= spot_attenuation(l, light);
        light.color.rgb = gobo(surface.position, light, goboTexture, goboSampler);
        
        
        
              shade(l, light.color.rgb, intensity);
        
    }
    void add_local_spot(vfx_light light)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light) * BoostFactor;
        intensity      *= spot_attenuation(l, light);
        shade(l, light.color.rgb, intensity);
    }
    
    void add_spot(vfx_light light, depth2d<float> shadowMap, constant float4* shadowKernel, int sampleCount)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light) * BoostFactor;;
        intensity      *= spot_attenuation(l, light);
        intensity      *= shadow(surface.position, light, shadowMap, shadowKernel, sampleCount);
        shade(l, light.color.rgb, intensity);
    }
    
#ifdef USE_PBR
    
#ifdef CFX_SUPPORT_CUBE_ARRAY
    void add_local_probe(vfx_light light, texturecube_array<half> probeTextureArray)
#else
    void add_local_probe(vfx_light light, texture2d_array<half> probeTextureArray)
#endif
    {
#if !PROBES_NORMALIZATION
        if (probeRadianceRemainingFactor <= 0.f)
            return;
#endif
        bool parallaxCorrection = light.parameters.probe.parallaxCorrection;
        int    probeIndex       = light.parameters.probe.index;
        float3 probeExtents     = light.parameters.probe.halfExtents.xyz;
        float  blendDist        = light.parameters.probe.halfExtents.w;
        float3 probeOffset      = light.parameters.probe.offset;
        float3 parallaxExtents  = light.parameters.probe.parallaxExtents;
        float3 parallaxCenter   = light.parameters.probe.parallaxCenter;
        float3 n = surface.normal;
        float3 v = surface.view;
        float3 r = reflect(-v, n); 
        float3 specDir = vfx::mat4_mult_float3(light.shadowMatrix, r);
        
        float3 pos_ls = (light.shadowMatrix * float4(surface.position, 1.f)).xyz;
        
        float3 d = abs(pos_ls) - probeExtents;
#if PROBES_OUTER_BLENDING
        if (any(d > blendDist))
#else
        if (any(d > 0.f))
#endif
        {
            return;
        }
#if PROBES_NORMALIZATION
        
        
#if PROBES_OUTER_BLENDING
        float3 nd = saturate(-(d / blendDist) * 0.5f + 0.5f);
#else
        float3 nd = saturate(-(d / blendDist));
#endif
        float probeFactor = (nd.x * nd.y * nd.z) * light.color.r;
#else
        
        float sd = min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
#if PROBES_OUTER_BLENDING
        float probeFactor = saturate(1.f - sd / blendDist);
#else
        float probeFactor = saturate(-sd / blendDist);
#endif
        
        
        
        probeFactor *= probeRadianceRemainingFactor * light.color.r; 
#endif
        if (parallaxCorrection ) {
            
            float3 pos_off = pos_ls + parallaxCenter;
            float3 t1 = ( parallaxExtents - pos_off) / specDir;
            float3 t2 = (-parallaxExtents - pos_off) / specDir;
            float3 tmax = max(max(0, t1), t2); 
            float t = min(tmax.x, min(tmax.y, tmax.z));
            
            float3 hit_ls = pos_ls + specDir * t;
            specDir = hit_ls - probeOffset;
        }
        
        specDir.z *= -1.0;
        float mipd = float(probeTextureArray.get_num_mip_levels()) - 1.f;
        const float intensity = surface.ambientOcclusion * probeFactor;
        float mips = surface.roughness * mipd;
#ifdef CFX_SUPPORT_CUBE_ARRAY
        float3 LD = float3(probeTextureArray.sample(vfx::linearSampler, specDir, probeIndex, level(mips)).rgb);
#else
        float2 specUV = vfx::dual_paraboloid_from_cartesian(normalize(specDir));
        float3 LD = float3(probeTextureArray.sample(vfx::linearSampler, specUV, probeIndex, level(mips)).rgb);
#endif
        
        
#if PROBES_NORMALIZATION
        probesWeightedSum += float4(LD * intensity * pbr.probeReflectance, probeFactor);
#else
        probeRadianceRemainingFactor = saturate(probeRadianceRemainingFactor - probeFactor);
        specular += LD * intensity * pbr.probeReflectance;
#endif
        
#ifdef USE_CLEARCOAT
        n = surface.clearCoatNormal;
        r = reflect(-v, n);
        specDir = vfx::mat4_mult_float3(light.shadowMatrix, r);
        if (parallaxCorrection ) {
            float3 pos_off = pos_ls + parallaxCenter;
            
            float3 t1 = ( parallaxExtents - pos_off) / specDir;
            float3 t2 = (-parallaxExtents - pos_off) / specDir;
            float3 tmax = max(max(0, t1), t2); 
            float t = min(tmax.x, min(tmax.y, tmax.z));
            
            
            float3 hit_ls = pos_ls + specDir * t;
            specDir = hit_ls - probeOffset;
        }
        mips = surface.clearCoatRoughness * mipd;
#ifdef CFX_SUPPORT_CUBE_ARRAY
        LD = float3(probeTextureArray.sample(vfx::linearSampler, specDir, probeIndex, level(mips)).rgb);
#else
        specUV = vfx::dual_paraboloid_from_cartesian(normalize(specDir));
        LD = float3(probeTextureArray.sample(vfx::linearSampler, specUV, probeIndex, level(mips)).rgb);
#endif
#if PROBES_NORMALIZATION
        probesWeightedSum += float4(LD * intensity * pbr.probeReflectanceClearCoat, probeFactor) * surface.clearCoat;
#else
        specular += LD * intensity * pbr.probeReflectanceClearCoat  * surface.clearCoat;
#endif
#endif
    }
    void add_global_probe(float4x4 localDirToWorldCubemapDir,
                          float environmentIntensity,
#ifdef CFX_SUPPORT_CUBE_ARRAY
                          texturecube_array<half> probeTextureArray
#else
                          texture2d_array<half> probeTextureArray
#endif
                          )
    {
        float3 n = surface.normal;
        float3 v = surface.view;
        float3 r = reflect(-v, n); 
        
        float3 specDir = vfx::mat4_mult_float3(localDirToWorldCubemapDir, r);
        float mips = surface.roughness * float(probeTextureArray.get_num_mip_levels() - 1);
        
#ifdef CFX_SUPPORT_CUBE_ARRAY
        float3 LD = float3(probeTextureArray.sample(vfx::linearSampler, specDir, 0, level(mips)).rgb);
#else
        float2 specUV = vfx::dual_paraboloid_from_cartesian(normalize(specDir));
        float3 LD = float3(probeTextureArray.sample(vfx::linearSampler, specUV, 0, level(mips)).rgb);
#endif
        
        
        specular += pbr.probeReflectance * LD * surface.ambientOcclusion * environmentIntensity;
    }
    void add_global_probe(texturecube<float, access::sample> specularLD,
                          float4x4                           localDirToWorldCubemapDir,
                          float                              environmentIntensity)
    {
        float3 n        = surface.normal;
        float3 v        = surface.view;
        float3 r        = reflect(-v, n); 
        float roughness = surface.roughness;
#if USE_PBR_DOMINANT_DIRECTION
        float alpha = roughness * roughness;
        float smoothness = 1.0f - alpha;
        float specularLerpFactor = (1. - smoothness * (sqrt(smoothness) + alpha));
        float3 specularDominantNDirection = mix(r, n, specularLerpFactor); 
#else
        float3 specularDominantNDirection = r;
#endif
        
        
        float mipLevel = roughness * float(specularLD.get_num_mip_levels() - 1);
        float3 dir = vfx::mat4_mult_float3(localDirToWorldCubemapDir, specularDominantNDirection);
        float3 LD = specularLD.sample(vfx::linearSampler, dir, level(mipLevel)).rgb;
        pbr.envSpecular += pbr.probeReflectance * LD * surface.ambientOcclusion * environmentIntensity;
    }
#ifdef USE_CLEARCOAT
    void add_global_probeClearCoat(texturecube<float, access::sample> specularLD,
                          float4x4                           localDirToWorldCubemapDir,
                          float                              environmentIntensity)
    {
        float3 n = surface.clearCoatNormal;
        
        float3 v        = surface.view;
        float3 r        = reflect(-v, n); 
        float roughness = surface.clearCoatRoughness;
        
        float mipLevel = roughness * float(specularLD.get_num_mip_levels() - 1);
        float3 LD = specularLD.sample(vfx::linearSampler, vfx::mat4_mult_float3(localDirToWorldCubemapDir, r), level(mipLevel)).rgb;
        LD *= surface.ambientOcclusion;
        
        
        float Fc = vfx_brdf_F_opt(0.04f, pbr.NoVClearCoat).r * surface.clearCoat;
        float attenuation = 1.0f - Fc;
        specular *= (attenuation * attenuation);
        
        specular += LD * environmentIntensity * pbr.probeReflectanceClearCoat * surface.clearCoat;
    }
#endif
    
    
    void add_irradiance_from_selfIllum()
    {
        float selfIlluminationAO = saturate(mix(1.f, surface.ambientOcclusion, pbr.selfIlluminationOcclusion));
        float3 irradiance = surface.selfIllumination.rgb;
        
        float3 diffuseAlbedo = mix(pbr.albedo, float3(0.0), surface.metalness);
#ifdef USE_PBR_LAMBERTIAN_REFLECTION
        pbr.envDiffuse += selfIlluminationAO * irradiance * diffuseAlbedo;
#else
        float3 diffuseReflectance = diffuseAlbedo * (pbr.diffuseHammonFactors.x + diffuseAlbedo * pbr.diffuseHammonFactors.y);
        pbr.envDiffuse += selfIlluminationAO * irradiance * diffuseReflectance;
#endif
    }
    void add_global_irradiance_from_sh(float4x4         localDirToWorldCubemapDir,
#if defined(USE_PROBES_LIGHTING) && (USE_PROBES_LIGHTING == 2)
                                       sh2_coefficients shCoefficients)
#else
    sh3_coefficients shCoefficients)
#endif
    {
        float3 n_sh_space = vfx::mat4_mult_float3(localDirToWorldCubemapDir, surface.normal);
        float3 irradiance = shEvalDirection(float4(n_sh_space.xy, -n_sh_space.z, 1.), shCoefficients);
        
        float3 diffuseAlbedo = mix(pbr.albedo, float3(0.0), surface.metalness);
#ifdef USE_PBR_LAMBERTIAN_REFLECTION
        pbr.envDiffuse += surface.ambientOcclusion * irradiance * diffuseAlbedo;
#else
        float3 diffuseReflectance = diffuseAlbedo * (pbr.diffuseHammonFactors.x + diffuseAlbedo * pbr.diffuseHammonFactors.y);
        pbr.envDiffuse += surface.ambientOcclusion * irradiance * diffuseReflectance;
#endif
    }
    void add_global_irradiance_probe(texturecube<float, access::sample> irradianceTexture,
                                     float4x4                           localDirToWorldCubemapDir,
                                     float                              environmentIntensity)
    {
#if USE_PBR_DOMINANT_DIRECTION
        float3 n = surface.normal;
        float3 v = surface.view;
        
        
        const half a = 1.02341h * surface.roughness - 1.51174h; 
        const half b = -0.511705h * surface.roughness + 0.755868h;
        const half diffuseBendFactor = saturate((pbr.NoV * a + b) * surface.roughness);
        float3 diffuseDominantNDirection = mix(n, v, diffuseBendFactor);
#else
        float3 diffuseDominantNDirection = n;
#endif
        
        float3 n_cube_space = vfx::mat4_mult_float3(localDirToWorldCubemapDir, diffuseDominantNDirection);
        float3 irradiance = irradianceTexture.sample(vfx::linearSampler, n_cube_space).rgb;
        
        float3 diffuseAlbedo = mix(pbr.albedo, float3(0.0), surface.metalness);
#ifdef USE_PBR_LAMBERTIAN_REFLECTION
        pbr.envDiffuse += (surface.ambientOcclusion * environmentIntensity) * irradiance * diffuseAlbedo;
#else
        float3 diffuseReflectance = diffuseAlbedo * (pbr.diffuseHammonFactors.x + diffuseAlbedo * pbr.diffuseHammonFactors.y);
        pbr.envDiffuse += (surface.ambientOcclusion * environmentIntensity) * irradiance * diffuseReflectance;
#endif
    }
#endif 
    
    static constexpr sampler iesSampler = sampler(filter::linear, mip_filter::none, address::clamp_to_edge);
    
    float ies_attenuation(float3 l, vfx_light light, texture2d<half> iesTexture)
    {
#if USE_QUAT_FOR_IES
        float3 v    = vfx::quaternion_rotate_vector(light.parameters.ies.light_from_view_quat, -l);
#else
        float3 v    = vfx::matrix_rotate(light.parameters.ies.light_from_view, -l);
#endif
        float phi   = (v.z * light.parameters.ies.scaleBias.x + light.parameters.ies.scaleBias.y);
        float theta = atan2(v.y, v.x) * 0.5f * M_1_PI_F;
        return iesTexture.sample(iesSampler, float2(phi, abs(theta))).r;
    }
    void add_ies(vfx_light light, texture2d<half> iesTexture)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light);
        intensity      *= ies_attenuation(l, light, iesTexture);
        shade(l, light.color.rgb, intensity);
    }
    void add_ies(vfx_light light, texture2d<half> iesTexture, depth2d<float> shadowMap, constant float4* shadowKernel, int sampleCount)
    {
        float3 unnormalized_l = light.pos - surface.position;
        float3 l = normalize(unnormalized_l);
        float intensity = dist_attenuation(unnormalized_l, light);
        intensity      *= ies_attenuation(l, light, iesTexture);
        intensity      *= shadow(surface.position, light, shadowMap, shadowKernel, sampleCount);
        shade(l, light.color.rgb, intensity);
    }
    
    void add_area_rectangle(vfx_light light, texture2d_array<float> bakedDataTexture)
    {
#ifdef USE_PBR
        float3 v = surface.view;
        float3 n = surface.normal;
        float3 p = surface.position;
        
        float3 tangent = normalize(v - n * dot(v, n));
        float3 bitangent = cross(n, tangent);
        float3x3 shadingSpaceTransform = transpose(float3x3(tangent, n, bitangent));
        float3 lightCenter = light.shadowMatrix[3].xyz;
        
        
        float sidedness = dot(light.dir, lightCenter - p);
        if (light.parameters.area.rectangle.doubleSided == false && sidedness <= 0.f)
            return;
        
        float3 lightRight = light.shadowMatrix[0].xyz * light.parameters.area.rectangle.halfExtents.x * sign(sidedness);
        float3 lightTop   = light.shadowMatrix[1].xyz * light.parameters.area.rectangle.halfExtents.y;
        
        float4x3 cornerDirections = float4x3((lightCenter + lightRight + lightTop) - p,
                                             (lightCenter + lightRight - lightTop) - p,
                                             (lightCenter - lightRight - lightTop) - p,
                                             (lightCenter - lightRight + lightTop) - p);
        cornerDirections[0] = shadingSpaceTransform * cornerDirections[0];
        cornerDirections[1] = shadingSpaceTransform * cornerDirections[1];
        cornerDirections[2] = shadingSpaceTransform * cornerDirections[2];
        cornerDirections[3] = shadingSpaceTransform * cornerDirections[3];
        float diffuseAmount = pbr_area_light_eval_rectangle(cornerDirections);
        float brdfNorm = 1.f;
        float3x3 inverseLTCMatrix = vfx_sample_area_light_precomputed_data(v, n, surface.roughness, &brdfNorm, bakedDataTexture);
        cornerDirections[0] = inverseLTCMatrix * cornerDirections[0];
        cornerDirections[1] = inverseLTCMatrix * cornerDirections[1];
        cornerDirections[2] = inverseLTCMatrix * cornerDirections[2];
        cornerDirections[3] = inverseLTCMatrix * cornerDirections[3];
        float specularAmount = brdfNorm * pbr_area_light_eval_rectangle(cornerDirections);
        float3 effectiveAlbedo = mix(float3(1.0), float3(0.0), surface.metalness); 
        
        float3 lightColor = light.color.rgb;
        diffuse  += diffuseAmount * lightColor * effectiveAlbedo;
        specular += specularAmount * lightColor * pbr.reflectance;
#endif
    }
    void add_area_polygon(vfx_light light, texture2d_array<float> bakedDataTexture, device packed_float2 *vertexPositions)
    {
#ifdef USE_PBR
        float3 v = surface.view;
        float3 n = surface.normal;
        float3 p = surface.position;
        
        float3 tangent = normalize(v - n * dot(v, n));
        float3 bitangent = cross(n, tangent);
        float3x3 shadingSpaceTransform = transpose(float3x3(tangent, n, bitangent));
        float3 lightCenter = light.shadowMatrix[3].xyz;
        
        
        float sidedness = dot(light.dir, lightCenter - p);
        if (light.parameters.area.polygon.doubleSided == false && sidedness <= 0.f)
            return;
        
        float3 lightRight = light.shadowMatrix[0].xyz * sign(sidedness);
        float3 lightTop   = light.shadowMatrix[1].xyz;
        p           = shadingSpaceTransform * p;
        lightCenter = shadingSpaceTransform * lightCenter;
        lightRight  = shadingSpaceTransform * lightRight;
        lightTop    = shadingSpaceTransform * lightTop;
        float diffuseAmount = pbr_area_light_eval_polygon(p, lightCenter, lightRight, lightTop, light.parameters.area.polygon.vertexCount, vertexPositions);
        float brdfNorm = 1.f;
        float3x3 inverseLTCMatrix = vfx_sample_area_light_precomputed_data(v, n, surface.roughness, &brdfNorm, bakedDataTexture);
        p           = inverseLTCMatrix * p;
        lightCenter = inverseLTCMatrix * lightCenter;
        lightRight  = inverseLTCMatrix * lightRight;
        lightTop    = inverseLTCMatrix * lightTop;
        float specularAmount = brdfNorm * pbr_area_light_eval_polygon(p, lightCenter, lightRight, lightTop, light.parameters.area.polygon.vertexCount, vertexPositions);
        
        float3 effectiveAlbedo = mix(float3(1.0), float3(0.0), surface.metalness); 
        float3 lightColor = light.color.rgb;
        diffuse  += diffuseAmount * lightColor * effectiveAlbedo;
        specular += specularAmount * lightColor * pbr.reflectance;
#endif
    }
    void add_area_line(vfx_light light, texture2d_array<float> bakedDataTexture)
    {
#ifdef USE_PBR
        float3 v = surface.view;
        float3 n = surface.normal;
        float3 p = surface.position;
        
        float3 tangent = normalize(v - n * dot(v, n));
        float3 bitangent = cross(n, tangent);
        float3x3 shadingSpaceTransform = transpose(float3x3(tangent, n, bitangent));
        float3 lightCenter = light.shadowMatrix[3].xyz;
        float3 lightRight  = light.shadowMatrix[0].xyz * light.parameters.area.line.halfLength;
        float2x3 cornerDirections = float2x3((lightCenter + lightRight) - p,
                                             (lightCenter - lightRight) - p);
        cornerDirections[0] = shadingSpaceTransform * cornerDirections[0];
        cornerDirections[1] = shadingSpaceTransform * cornerDirections[1];
        float diffuseAmount = pbr_area_light_eval_line(cornerDirections);
        float brdfNorm = 1.f;
        float3x3 inverseLTCMatrix = vfx_sample_area_light_precomputed_data(v, n, surface.roughness, &brdfNorm, bakedDataTexture);
        cornerDirections[0] = inverseLTCMatrix * cornerDirections[0];
        cornerDirections[1] = inverseLTCMatrix * cornerDirections[1];
        float specularAmount = brdfNorm * pbr_area_light_eval_line(cornerDirections);
        float3 ortho = normalize(cross(cornerDirections[0], cornerDirections[1]));
        float ltcWidthFactor = 1.0 / length(vfx_ltc_matrix_invert_transpose(inverseLTCMatrix) * ortho);
        specularAmount *= ltcWidthFactor;
        
        float3 effectiveAlbedo = mix(float3(1.0), float3(0.0), surface.metalness); 
        float3 lightColor = light.color.rgb;
        diffuse  += diffuseAmount * lightColor * effectiveAlbedo;
        specular += specularAmount * lightColor * pbr.reflectance;
#endif
    }
    void add_area_ellipse(vfx_light light, texture2d_array<float> bakedDataTexture)
    {
#ifdef USE_PBR
#endif
    }
    void add_area_ellipsoid(vfx_light light, texture2d_array<float> bakedDataTexture)
    {
#ifdef USE_PBR
#endif
    }
#endif 
  struct vfx_floor {
    float4 u_floor_viewport;
    float u_floorReflectivity;
#ifdef USE_FALLOFF
    float4x4 u_floorMVP_i;
    float4 u_floorPlane;
    float u_floorFalloff;
#ifdef USE_FALLOFF_START
    float u_floorFalloffStart;
#endif
#endif
static inline float3 floorUnprojectPoint(float3 screenPos, float4x4 mvp_i)
    float4 pTmp = mvp_i * float4(screenPos.xy * 2.0 - 1.0, screenPos.z, 1.0);
    return pTmp.xyz / pTmp.w;
#pragma arguments
vfx_floor vfx_floorSurf
texture2d_layer u_floorReflectionColor;
depth2d u_floorReflectionDepth;
#pragma body
float2 normalizedFragCoord =  vfx_floorSurf.u_floor_viewport.xy + in.fragmentPosition.xy * vfx_floorSurf.u_floor_viewport.zw;
normalizedFragCoord.xy += 0.2 * _surface._normalTS.xy;
constexpr sampler linear_sampler(filter::linear);
float4 floorColor = u_floorReflectionColor.sampleLayer(linear_sampler, normalizedFragCoord);
float reflectionFactor = vfx_floorSurf.u_floorReflectivity;
#ifdef USE_FALLOFF
float floorDepth = u_floorReflectionDepth.sample(linear_sampler, normalizedFragCoord);
float3  floorPW = floorUnprojectPoint(float3(normalizedFragCoord.x, 1. - normalizedFragCoord.y, floorDepth), vfx_floorSurf.u_floorMVP_i);
float floorDist = -dot(floorPW.xyz, vfx_floorSurf.u_floorPlane.xyz) - vfx_floorSurf.u_floorPlane.w;;
#ifdef USE_FALLOFF_START
floorDist -= vfx_floorSurf.u_floorFalloffStart; 
#endif 
reflectionFactor *= 1.0 - clamp(floorDist / vfx_floorSurf.u_floorFalloff, 0.0, 1.0);
#endif 
floorColor *= reflectionFactor; 
_output.color.rgb *= (1. - floorColor.a); 
_output.color.rgba += floorColor.rgba; 
struct OsdFVarPrimvar {
    uint8_t isUsed;
    uint8_t offset;
struct OsdFVarChannelDesc {
    uint32_t indicesBufferOffset;
    uint32_t dataBufferOffset;
    uint32_t dataBufferFVarWidth;
    uint32_t patchParamsBufferOffset;
    uint32_t patchArraysBufferOffset;
    OsdFVarPrimvar colorPrimvar;
    OsdFVarPrimvar texcoordPrimvars[8];
Error: Could not find text resource named %@
view
normalTexcoord
diffuseTexcoord
specularTexcoord
emissionTexcoord
selfIlluminationTexcoord
multiplyTexcoord
transparentTexcoord
displacementTexcoord
clearCoatTexcoord
clearCoatRoughnessTexcoord
clearCoatNormalTexcoord
subsurfaceTexcoord
subsurfaceRadiusTexcoord
ambientOcclusionTexcoord
fresnel
_surface.%@
_geometry.normal
_geometry.tangent
_geometry.color
_geometry.clipDistance0
_geometry.clipDistance1
_geometry.clipDistance2
_geometry.clipDistance3
_framebuffer
_framebuffer.color
USE_MODIFIER_FRAMEBUFFER
u_barycentricCoord
USE_BARYCENTRIC_COORD
iModifier
CFXShaderModifier
<CFXShaderModifier %p language:%s, entryPoint:"%d" flags:%x
Metal
  declaration : %@
  arguments : %@
  varyings : %@
  code : %@
Error: modifier without code is invalid
newDefines
USE_EMISSIVETEXCOORD
USE_DIFFUSETEXCOORD
USE_SPECULARTEXCOORD
USE_REFLECTIVETEXCOORD
USE_TRANSPARENTTEXCOORD
USE_FILTERTEXCOORD
USE_NORMALTEXCOORD
USE_METALNESSTEXCOORD
USE_ROUGHNESSTEXCOORD
USE_CLEARCOATTEXCOORD
USE_CLEARCOATROUGHNESSTEXCOORD
USE_CLEARCOATNORMALTEXCOORD
USE_SUBSURFACETEXCOORD
USE_SUBSURFACERADIUSTEXCOORD
USE_AMBIENTOCCLUSIONTEXCOORD
Error: unexpected value (%@)
Warning: VFXDefaultValueWithBaseType - unknwon base type %d
Error: unexpected returned value for property %@ of object %@
constraint
constraintController
CFXConstraintController
<CFXConstraintController>
CFXConstraint
<CFXConstraint %@ %p>
influenceFactor
CFXConstraintLookAt
<CFXConstraintLookAt %p>
targetOffset
worldUp
localFront
CFXConstraintBillboard
<CFXConstraintBillboard %p>
CFXConstraintConstantScale
<CFXConstraintConstantScale>
CFXConstraintProcedural
<CFXConstraintProcedural>
CFXConstraintIK
<CFXConstraintIK %p>
targetPosition
Error: CFXConstraintApplyIK leef is not a child of root
Error: CFXConstraintApplyIK root and leaf nodes are the same node
CFXConstraintDistance
<CFXConstraintDistance>
minimumDistance
maximumDistance
CFXConstraintAcceleration
maximumLinearAcceleration
maximumLinearVelocity
decelerationDistance
CFXConstraintReplicator
<CFXConstraintReplicator>
orientationOffset
positionOffset
scaleOffset
CFXConstraintManager
<CFXConstraintManagerRef>
Warning: unsupported ease out for contraint applied on base type %d
__controller
niceDescription
empty
constaints
empty node
static
dynamic
kinematic
hinge
ballSocket
slider
vehicle
vortex
linear gravity
radial gravity
springField
electricField
magneticField
radial
Shader source
aOne
single layer
dual layer
physically based
shadowonly
plane
pyramid
cylinder
cone
tube
capsule
torus
Hello!
ortho
vertical
horizontal
stretch
_shadowCascadeDebugFactor
Error: CFXModelPathResolveCommonProfileProperty unknown path %@
superClass
Error: _CFXModelPathResolverRegistryResolvePathWithClassName unknown path %@
Unreachable code: Support for subscript model path is not implemented for %@
_currentClassRegistry
Assertion '%s' failed. Cannot register twice the same propertyName : %@
CFDictionaryGetCountOfKey(_currentClassRegistry, propertyName) == 0
axisAngle
Error: _CFXModelPathResolveColor4 unknown path %@
Error: _CFXModelPathResolveMatrix unknown path %@
Error: _CFXModelPathResolveTransform unknown path %@
Error: _CFXModelPathResolveRotation unknown path %@
Error: _CFXModelPathResolveVector3 unknown path %@
Error: _CFXModelPathResolveVector4 unknown path %@
Assertion '%s' failed. _CFXModelPathResolveEntity inconsistent cftype
Error: _CFXModelPathResolveNode unknown path %@
Error: _CFXModelPathResolveDynamicParameter unknown path %@
prefix
indexString
Error: _CFXModelPathResolveMorpher unknown path %@
Error: unknown field type in path %@
Error: _CFXModelPathResolveMorpher unknown key subscript %@[%ld]
Error: _CFXModelPathResolveMorpher unknown key subscript %@[%@]
CFXModelTarget
<CFXModelTarget>
item
item->_getter
item->_setter
Assertion '%s' failed. CFXModelValueStorageUpdateModelValueFromPresentationValue - unexpected class
CFGetTypeID(target->_owner) == CFXNodeGetTypeID()
aValue
CFXModelValueStorageItem
<CFXModelValueStorageItem %p>
CFXModelValueStorage
<CFXModelValueStorage>
MPSGaussianBlur color input resolve
incremental
Unreachable code: attempt to copy VFXConstraint that is a virtual class
gimbalLockEnabled
targetDirection
replicatesOrientation
replicatesScale
replicatesPosition
collisionCategoryBitMask
bias
freeAxes
preserveScale
v36@?0^{__CFXConstraint={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFString}fBB{?=^?^?^?^?^?^?}^v}8^v16^{__CFXModelTarget={__CFRuntimeBase=QAQ}^v^vscCCB^?^?}24f32
node%d
angle%d
ikTarget
chainRootNode
LENS_BLUR_DOWNSAMPLE
Unreachable code: Invalid downsample rate
LENS_BLUR_HORIZONTAL_REAL
LENS_BLUR_HORIZONTAL_IMAGINARY
LENS_BLUR_OUTPUT
Lens blur downsample pass
Lens blur horizontal pass
Lens blur vertical pass
LENS_BLUR_VERTICAL_PASS
arrangedObjects
arrangedObjects.VFXUI_name
insertObject:in%@AtIndex:
removeObjectFrom%@AtIndex:
objectIn%@AtIndex:
object of class %@ doesn't implement %@
VFXUIArrayInspector
Error: format %lu not supported for SH generation
events
Assertion '%s' failed. CFXAnimationEventsAddEvent - index out of bounds
events->_eventCount < events->_eventCapacity
CFXAnimationEvents
<CFXAnimationEvents>
Assertion '%s' failed. _CFXAnimationEventsTriggerEventsWithTimeChanges invalid time
t0 <= t1
Assertion '%s' failed. _CFXAnimationEventsTriggerEventAtIndex - index out of bounds
index < events->_eventCount
Assertion '%s' failed. RendererElement should not be in span already
node == NULL || node->_rendererElementSpan.count == 0
Assertion '%s' failed. CFXRendererElementStoreDeallocateSpan - null span
store
Assertion '%s' failed. CFXRendererElementStoreDeallocateSpanForNodeGeometryLOD unexpected lod count
node->_rendererLOD->count == count
Assertion '%s' failed. wrong index in rendererElements span
index < (CFIndex)span.count
v16@?0^v8
CFXRendererElementStore
<CFXRendererElementStore %p>
Assertion '%s' failed. __AllocateSpansForNodeGeometryLOD unexpected lod count
NSZipFileArchiveHeaderOffset
NSZipFileArchiveCompressionType
NSZipFileArchiveCRC
NSZipFileArchiveCompressedLength
NSZipFileArchiveUncompressedLength
indexStore
CFXIndexStore
<CFXIndexStore>
Error: indexstore::_getNextFreeIndex - no more free index
Assertion '%s' failed. CFXIndexStoreGetOrderedIndexForKey index out of bounds
alignedIndex >= 0 && alignedIndex < bufferLength
Error: CFXAllocatorDelete - unknown address
CFXAllocator
<CFXAllocator>
Assertion '%s' failed. CFXAnimatableParamControllerGetParamDescription - address out of bounds
address < (void*) ((unsigned char*)controller+sizeof(struct __CFXAnimatableParamController))
Error: renderGraph should not be null
Assertion '%s' failed. Invalid point of view
Unreachable code: Unsupported configuration
Assertion '%s' failed. Multiple viewport is for stereo only
cullingContext->eyeCount == 2
Assertion '%s' failed. singlePassCubeMapRendering require renderMode == Layered and eyeCount == 6
cullingContext->viewMapping == kCFXViewMappingLayered && cullingContext->eyeCount == 6
Culling
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/AppleEngine/CFXCullingContext.c
Assertion '%s' failed. Not enough space allocated
sequence->count + count <= sequence->allocatedCount
Error: type for key %@ is switching from %@ to %@, this will lead to improper animation
CFXKeyValueStore
<CFXKeyValueStore>
Assertion '%s' failed. index out of bounds
index < CFXArrayGetCount(array)
CFXArray
<CFXArray %p:, %d objects>
<%@ | string=%@ extrusionDepth=%.3f> 
extrusionDepth
SFProUI
SFProText
HelveticaNeue
.AppleSystemUIFont
.SFUI
.SFNS
chamferProfile
alignmentMode
truncationMode
discretizedStraightLineMaxLength
wrapped
useCustomContainerFrame
customContainerFrame
_wantsSeparateGeometryElements
Unreachable code: CATextAlignmentModeFromCFXTextAlignmentMode unknown mode
Warning: Unknown alignment mode %@
Warning: Unknown truncation mode %@
VFXMaterialPropertyTextureProviderHelper could not find texture for %@
Assertion '%s' failed. We should have a compute command encoder open at this point
vfxComputeEncoder->isEncoding()
v16@?0@?<v@?@"<MTLComputeCommandEncoder>">8
Assertion '%s' failed. We should have a blit command encoder open at this point
vfxBlitEncoder->isEncoding()
v16@?0@?<v@?@"<MTLBlitCommandEncoder>">8
v16@?0@?<v@?@"<MTLCommandBuffer>">8
MaterialBuffer
MeshBuffer
MeshElementBuffer
InstanceBuffer
LightBuffer
EmitterBuffer
CFXRaytracingSystem
<CFXRaytracingSystem %p>
<%@ | path=%@ extrusionDepth=%.3f> 
chamferMode
CFXShape
<CFXShape '%@'>
newMesh
shapeGeometry
Helvetica
^{__CFXMesh=}8@?0
CFXShapeGeometry
CFXTextGeometry
levelOfDetail <%p>: model:%@ threshold:%f useDistance:%d
Assertion '%s' failed. uniform %@ already set
CFDictionaryGetValue(dic, uniformName) == NULL
vfx_frame.time
vfx_frame.invScreenPixelSize
vfx_node.modelTransform
vfx_node.inverseModelTransform
vfx_node.modelViewTransform
vfx_node.inverseModelViewTransform
vfx_node.normalTransform
vfx_node.modelViewProjectionTransform
vfx_node.inverseModelViewProjectionTransform
vfx_node.boundingBox
vfx_node.worldBoundingBox
vfx_frame.viewTransform
vfx_frame.inverseViewTransform
vfx_frame.projectionTransform
vfx_frame.inverseProjectionTransform
vfx_frame.cameraPosition
vfx_frame.viewToCubeWorld
CFXConvexPolyhedron
<CFXConvexPolyhedron %p>
generate_texture
semiImplicitEuler
VFXCore.ScriptBehaviorUpdate
VFXCore.ScriptBehaviorInit
VFXCore.KernelScript
VFXCore.ParticleFloat3Init<VFXCore.Target>
VFXCore.NoiseForce
VFXCore.MeshRender
VFXCore.DirectionalShadow
VFXCore.EmitterParameter
VFXCore.MaterialAsset
addressMode#intrinsic
filterMode#intrinsic
animationDuration
pointOfView#intrinsic
postProcess#intrinsic
normalizedPosition
target#intrinsic
swift
Builtin|Texturing|SetTextureFrame|(Int,Int,Bool)->(Float)
Builtin|Texturing|SetTextureFrame|(Int,Int,Bool,UInt32)->(Float)
ProjectName
UUID
Version
IsExported
IsVFX2
VersionHistory
SceneFilename
kind
dampening
noiseAmount
noiseSeed
categoryBitMask
falloffExponent
texture
active
offset
stride
cNavigation
attenuationRadius
zNear
zFar
maxIteration
threshold
thresholdSmoothness
colorFilter
contrast
useHighQuality
components
code
parameters
isGraphV2
vertex_function
fragment_function
vertex_descriptor
input_primitive_topology
max_tessellation_factor
tessellation_factor_scale_enabled
tessellation_control_point_index_type
tessellation_factor_step_function
tessellation_output_winding_order
tessellation_partition_mode
max_vertex_amplification_count
rasterization_enabled
alpha_to_coverage_enabled
alpha_to_one_enabled
raster_sample_count
color_attachments
depth_attachment_pixel_format
stencil_attachment_pixel_format
compute_function
threadgroup_size_is_multiple_of_thread_execution_width
max_total_threads_per_threadgroup
compute_pipelines
render_pipelines
libraries
pipelines
named_predicates
paths
specialized_functions
id_type
value_type
angularLimits
direction
distribution
emitOnSurface
spreadingRange
tangentAxis
tangentForce
transformWeight
velocityRange
textureAddressMode
textureScale
textureBias
inheritColorFromTexture
emissionOrder
motionDistribution
uniformDistribution
originatingEntity
functionName
inputCount
outputCount
inputNames
outputNames
buffers
attributes
waveform
magnitudes
magnitudesLowRes
nodePath
model
materialOverride
force
space
noise
amortized
dimensions
triggerType
play
mute
loops
height
buffer
descriptions
values
functionConstants
shadowRadius
scaleBias
sourceEmitter
sourceData
targetData
childrenPerParent
range
distributeOnFrame
mode
xRange
yRange
zRange
parentEntity
probability
inheritColor
inheritVelocity
inheritOrientation
inheritScale
colorMap
normalMap
useInstanceColor
leftOffset
rightOffset
topOffset
bottomOffset
near
usePerspective
showVolume
camera
entityComponentType
propertyPath
propertySemantic
flow
affectsPosition
affectsOrientation
layers
fallOff
fallOffPower
fallOffRange
fallOffRadius
fallOffAngleRange
target
timelineX
timelineY
timelineZ
timelineW
ignoreVertexColor
normalize
preferredLoader
focalLength
focusDistance
sensorSize
reverseZ
projectionDirection
filmOffset
pointCache
inheritPosition
skeleton
motionTransfert
inheritSize
cpuMode
gpuMode
fallback
asynchronous
subgraph
userInfo
spawnEntities
initializeEntities
updateEntities
renderEntities
maxParticleCount
updateBoundingBox
disableEmitterWhenCulled
showBoundingBox
simulation
updateOnGPU
warmupDuration
isLocal
nearestNeighbours
nearestNeighboursRadius
cullFullyTransparent
simulationRate
spawn
initialize
update
render
seed
randomizeSeedOnReset
entityTable
entities
relations
componentTable
propertyTable
vertexParameters
fragmentParameters
wind
magnetic
harmonic
drag
turbulence
spring
widthSegment
heightSegment
lengthSegment
chamferSegment
segment
isGeodesic
radialSegment
capSegment
topRadius
pipeSegment
text
extrusion
font
hemispheric
kernelFunction
desc
kernelScript
inner
nodes
edges
functionType
reference
meshEntity
count
entityComponentPropertyOutputsTable
generatedCode
userDataForGeneratedInArgs
generatedInArgs
generatedInOutArgs
generatedData
inArgsUserData
inArgs
inOutArgs
scriptIndex
sortMode
partIndex
lodIndex
particlesPerRibbon
ribbonLength
clearAllVelocities
clearUnusedPositions
logInfo
elasticity
mipmapCount
pixel_format
write_mask
blending_enabled
alpha_blend_operation
rgb_blend_operation
destination_alpha_blend_factor
destination_rgb_blend_factor
source_alpha_blend_factor
source_rgb_blend_factor
generation
includeFunctions
useNamedSignature
genericTypes
previousInParameterNames
inParameterNames
inParameterTypes
inParameterDefaultValues
outParameterNames
outParameterTypes
defaultInParameter
deprecationInfo
toolCreateFunction
inParameters
showInParameterDefaultValues
mandatoryInParameters
hidden
cleanupCode
skipTest
timeDependent
useDynamicBranching
supportedBy
disableable
embeddedParameters
defaultSnippet
metadataDict
contexts
supportedLanguages
additionalArrayInputs
additionalArrayOutputs
templateIdx
contextExitMap
contextEntryMap
arraySequenceMap
assignments
assignmentMetadataSets
customCodeSnippetMap
typedArraySnippetMap
staticSwitchSnippetMap
userObjects
variableMap
variableReferenceMap
composition
ramp
affectsAlpha
rateOverTime
burst
_emit
duration
repeatTime
assetPath
assetEntity
playing
assets
layouts
step_function
step_rate
buffer_index
format
influence
viewDistance
viewAngle
viewFalloffAngle
maxNeighborCount
sizeMode
sizeVirtualScale
mindVolumeRatio
desiredDistance
separationStrength
alignmentStrength
cohesionStrength
collisionStrength
collisionRadiusMul
showGrid
showCells
mipmapLevelCount
arrayLength
resourceOptions
allowGPUOptimizedContents
swizzle
context
componentProperty
propertyName
directionAxis
column0
column1
column2
column3
rateOverDistance
follow
stepSolver
advectParticles
border
solverSpeed
falloff
cellSize
viscosity
vorticity
velocityDamping
showGrids
showVelocities
showDensities
velocityIsoValue
densityIsoValue
sendEventsProbability
dieOnCollisionProbability
friction
radiusMultiplier
isInfinite
isDoubleSided
halfExtents
sdfData
inside
cornerRadius
mesh
cruisingStrength
cruisingSpeed
clampSpeed
simpleDragForce
kickStartThreshold
kickStartDirection
emit
density
velocity
showEmitter
showVelocity
distanceFalloff
maxRotVel
showArea
borderThickness
corner1
corner2
maxRotVelDir
upVector
pointAt
reduceFlipping
maxRotVelUpVec
planeCenter
planeNormal
showPlane
lighting
specular
cutoff
maxOverdraw
animationMode
softDistance
interFrameInterpolation
upAxis
stretchFactor
curvature
thickness
multiplyThicknessByAlpha
prebakedLightingPositiveXYZ
prebakedLightingNegativeXYZ
scaleUsingTextureSize
useSingleChannelOfTexture
channel
orientAlongVelocity
useOrientationForLighting
particlePerRibbon
ribbonCount
subdivisionCount
textureMode
avoidOverdraw
enableCaps
capBeginTexture
capEndTexture
frameCount
framePerRow
framePerColumn
useTexture3D
entityComponentPropertyTable
entityComponentPropertyInputsTable
particleComponentInputsTable
particleClassComponentInputsTable
directPropertyAssignments
exportedDirectPropertyAssignments
ecpt
ecpit
pcit
pccit
edpa
epdit
halfSize
parts
vertexCount
randomize
tangents
depthBias
blurLevel
semantic
step
userManual
enumInfo
customShader
overrideDepthStencil
depthCompare
depthWrite
vertexStart
materialIndex
indexByteSize
levelOfDetails
value_w1
value_w0
innerAngle
emitterEntity
green
blue
alpha
textureCoordinate
textureCoordinate1
__vfx_script_%SCRIPT_ID%
half4 color [[ color(0) ]]
__attribute__((visibility("default")))
particle_vertex_io vertice
particle_primitive_io primitive
vertex
fragment
compute
const char *name
half4 fragment_in_color [[ color(0) ]]
float3 fragment_in_coord [[ barycentric_coord ]]
uint fragment_in_primitive_id [[ primitive_id ]]
bool fragment_in_front_facing [[ front_facing ]]
builtin_args builtin
uint sample_mask [[ sample_mask, function_constant(enable_sample_mask_read) ]]
Vertex vtx [[ stage_in ]]
uint32_t inst_id [[ instance_id ]]
uint16_t amp_id [[ amplification_id ]]
device const uint32_t* order [[ buffer(vfx_buffer_binding_index_data_sort_order), function_constant(enable_sorting) ]]
uint pid [[thread_position_in_grid]]
builtin.globals.dt
builtin.globals.time
io.vertice.position
enable_per_vertex_color ? io.vertice.color : io.primitive.primitive_color
io.vertice.normal
io.vertice.tangent
fragment_in_color
fragment_in_front_facing
fragment_in_coord
fragment_in_primitive_id
use_interpolated_crworld ? io.vertice.crworld_position : builtin.crworld_from_viewport(io.vertice.position.xyz, camera_index)
builtin.linearZFromDepth(io.vertice.position.z)
builtin.proj_from_crws(camera_index)
builtin.view_from_crws(camera_index)
builtin.proj_from_view(camera_index)
builtin.view_from_proj(camera_index)
builtin.crws_from_world(particles.world_from_emitter())
builtin.drawableSize()
builtin.invDrawableSize()
builtin.viewUniforms.nearFar.x
builtin.viewUniforms.nearFar.y
builtin.externals.sceneConstants.portal_opacity
builtin.globals.ibl.intensityScale
builtin.globals.ibl.rotation
builtin.globals.radiance
builtin.globals.irradiance
builtin.globals.brdfLUT
particle_data particles = particles_attachment.unwrap();
if (particles.newly_created_is_outside(&pid)) return;
if (particles.is_outside(pid)) return;
uint16_t camera_index = builtin.camera_index(inst_id, amp_id);
(void)camera_index;
int32_t pid = enable_sorting ? order[ int32_t(inst_id) ] : int32_t(inst_id);
uint16_t camera_index = re_uniforms ? io.primitive.camera_index : 0;
int32_t pid = io.primitive.particle_index;
-Wimplicit-float-conversion
__attribute__((used,visibility("hidden")))
static vfx_entry_t __vfx_script_table[] = {
Local
Builtin
User
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Binaries/VFX/install/Symbols/Release-iphoneos/
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Binaries/VFX/install/Symbols/Debug-iphoneos/
TransformSpaceMode
TRANSPARENT_COLOR
GLOBAL_ILLUMINATION
SCATTERING_COLOR
AUTHORING_RESOLVE
ROUGHNESS_METALNESS_AO
prefilteredDiffuseMap
prefilteredSpecularMap
blueNoiseTexture
engine:blueNoise64RGBA8
depthMitigationAlphaMask
DMWarpedAlphaMask
clippingConstants
RateMapDataBuffer
(vfx_script_graph_value_t[]) {
Spawn
Init
ParticleInit
Update
ParticleUpdate
Render
__vfx_script_trampoline_%PROJECT%_%KIND%_%ENTITY%
__vfx_script_trampoline_%PROJECT%_%KIND%_%ORIG_ENTITY%
vfx_compute_%SCRIPT_ID%::vfx_compute
vfx::api::computePbrLighting
vfx::api::applySystemTreatments
x86_64
arm64
arm64e
arm64_32
macOS
watchOS
tvOS
ParametricModelController
MaterialController
WorldBackgroundController
WorldIBLController
WorldPhysicsController
WorldFogController
warning
note
CodeSnippet
VariableSnippet
VariableReferenceSnippet
CustomCodeSnippet
TypedArraySnippet
StaticSwitchSnippet
ContextExit
ContextEntry
SubContext
ArraySequenceSnippet
BaseObject
position
color
jointIndices
jointWeights
variant
interval
lastInvocationTime
invocation
queue
timer
^{__IOSurface=}16@0:8
{MTLResourceID=Q}16@0:8
v104@0:8^v16Q24Q32{?={?=QQQ}{?=QQQ}}40Q88Q96
v104@0:8{?={?=QQQ}{?=QQQ}}16Q64Q72r^v80Q88Q96
v88@0:8^v16Q24{?={?=QQQ}{?=QQQ}}32Q80
v88@0:8{?={?=QQQ}{?=QQQ}}16Q64r^v72Q80
@64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48
@68@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64
rootResource
T@"<MTLResource>",N,R
parentTexture
T@"<MTLTexture>",N,R
parentRelativeLevel
parentRelativeSlice
T@"<MTLBuffer>",N,R
bufferOffset
bufferBytesPerRow
iosurface
T^{__IOSurface=},N,R
iosurfacePlane
shareable
firstMipmapInTail
tailSizeInBytes
isSparse
T{MTLResourceID=Q},N,R
remoteStorageTexture
T{?=CCCC},N,R
@"<MTLResource>"16@0:8
@"<MTLTexture>"16@0:8
@"<MTLBuffer>"16@0:8
@"<MTLTexture>"24@0:8Q16
@"<MTLTexture>"64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48
@"MTLSharedTextureHandle"16@0:8
@"<MTLTexture>"24@0:8@"<MTLDevice>"16
@"<MTLTexture>"68@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64
MTLDevice
{?=QQQ}16@0:8
@32@0:8@16^@24
{?=QQ}32@0:8Q16Q24
@32@0:8Q16Q24
@40@0:8r^v16Q24Q32
@48@0:8^v16Q24Q32@?40
@40@0:8@16^{__IOSurface=}24Q32
@40@0:8@16@24^@32
v40@0:8@16@24@?32
@48@0:8@16Q24^@32^@40
v40@0:8@16Q24@?32
B24@0:8Q16
B24@0:8q16
Q24@0:8Q16
v32@0:8^{?=ff}16Q24
@40@0:8@16Q24Q32
@40@0:8@16q24^@32
{?=QQQ}40@0:8Q16Q24Q32
{?=QQQ}48@0:8Q16Q24Q32q40
v32@0:8^Q16^Q24
{?=QQQ}24@0:8@16
{?=QQ}24@0:8Q16
v72@0:8r^{?={?=QQQ}{?=QQQ}}16^{?={?=QQQ}{?=QQQ}}24{?=QQQ}32Q56Q64
v64@0:8r^{?={?=QQQ}{?=QQQ}}16^{?={?=QQQ}{?=QQQ}}24{?=QQQ}32Q56
T@"NSString",N,R
registryID
architecture
T@"MTLArchitecture",N,R
maxThreadsPerThreadgroup
T{?=QQQ},N,R
lowPower
removable
hasUnifiedMemory
recommendedMaxWorkingSetSize
locationNumber
depth24Stencil8PixelFormatSupported
readWriteTextureSupport
argumentBuffersSupport
rasterOrderGroupsSupported
supports32BitFloatFiltering
supports32BitMSAA
supportsQueryTextureLOD
supportsBCTextureCompression
supportsPullModelInterpolation
barycentricCoordsSupported
supportsShaderBarycentricCoordinates
currentAllocatedSize
maxThreadgroupMemoryLength
maxArgumentBufferSamplerCount
programmableSamplePositionsSupported
peerGroupID
peerIndex
TI,N,R
peerCount
sparseTileSizeInBytes
maxBufferLength
counterSets
T@"NSArray",N,R
supportsDynamicLibraries
supportsRenderDynamicLibraries
supportsRaytracing
supportsFunctionPointers
supportsFunctionPointersFromRender
supportsRaytracingFromRender
supportsPrimitiveMotionBlur
shouldMaximizeConcurrentCompilation
maximumConcurrentCompilationTaskCount
@"NSString"16@0:8
@"MTLArchitecture"16@0:8
@"<MTLLogState>"32@0:8@"MTLLogStateDescriptor"16^@24
@"<MTLCommandQueue>"16@0:8
@"<MTLCommandQueue>"24@0:8Q16
@"<MTLCommandQueue>"24@0:8@"MTLCommandQueueDescriptor"16
{?=QQ}24@0:8@"MTLTextureDescriptor"16
@"<MTLHeap>"24@0:8@"MTLHeapDescriptor"16
@"<MTLBuffer>"32@0:8Q16Q24
@"<MTLBuffer>"40@0:8r^v16Q24Q32
@"<MTLBuffer>"48@0:8^v16Q24Q32@?<v@?^vQ>40
@"<MTLDepthStencilState>"24@0:8@"MTLDepthStencilDescriptor"16
@"<MTLTexture>"24@0:8@"MTLTextureDescriptor"16
@"<MTLTexture>"40@0:8@"MTLTextureDescriptor"16^{__IOSurface=}24Q32
@"<MTLTexture>"24@0:8@"MTLSharedTextureHandle"16
@"<MTLSamplerState>"24@0:8@"MTLSamplerDescriptor"16
@"<MTLLibrary>"16@0:8
@"<MTLLibrary>"32@0:8@"NSBundle"16^@24
@"<MTLLibrary>"32@0:8@"NSString"16^@24
@"<MTLLibrary>"32@0:8@"NSURL"16^@24
@"<MTLLibrary>"32@0:8@"OS_dispatch_data"16^@24
@"<MTLLibrary>"40@0:8@"NSString"16@"MTLCompileOptions"24^@32
v40@0:8@"NSString"16@"MTLCompileOptions"24@?<v@?@"<MTLLibrary>"@"NSError">32
@"<MTLLibrary>"32@0:8@"MTLStitchedLibraryDescriptor"16^@24
v32@0:8@"MTLStitchedLibraryDescriptor"16@?<v@?@"<MTLLibrary>"@"NSError">24
@"<MTLRenderPipelineState>"32@0:8@"MTLRenderPipelineDescriptor"16^@24
@"<MTLRenderPipelineState>"48@0:8@"MTLRenderPipelineDescriptor"16Q24^@32^@40
v32@0:8@"MTLRenderPipelineDescriptor"16@?<v@?@"<MTLRenderPipelineState>"@"NSError">24
v40@0:8@"MTLRenderPipelineDescriptor"16Q24@?<v@?@"<MTLRenderPipelineState>"@"MTLRenderPipelineReflection"@"NSError">32
@"<MTLComputePipelineState>"32@0:8@"<MTLFunction>"16^@24
@"<MTLComputePipelineState>"48@0:8@"<MTLFunction>"16Q24^@32^@40
v32@0:8@"<MTLFunction>"16@?<v@?@"<MTLComputePipelineState>"@"NSError">24
v40@0:8@"<MTLFunction>"16Q24@?<v@?@"<MTLComputePipelineState>"@"MTLComputePipelineReflection"@"NSError">32
@"<MTLComputePipelineState>"48@0:8@"MTLComputePipelineDescriptor"16Q24^@32^@40
v40@0:8@"MTLComputePipelineDescriptor"16Q24@?<v@?@"<MTLComputePipelineState>"@"MTLComputePipelineReflection"@"NSError">32
@"<MTLFence>"16@0:8
@"<MTLRenderPipelineState>"48@0:8@"MTLTileRenderPipelineDescriptor"16Q24^@32^@40
v40@0:8@"MTLTileRenderPipelineDescriptor"16Q24@?<v@?@"<MTLRenderPipelineState>"@"MTLRenderPipelineReflection"@"NSError">32
@"<MTLRenderPipelineState>"48@0:8@"MTLMeshRenderPipelineDescriptor"16Q24^@32^@40
v40@0:8@"MTLMeshRenderPipelineDescriptor"16Q24@?<v@?@"<MTLRenderPipelineState>"@"MTLRenderPipelineReflection"@"NSError">32
@"<MTLArgumentEncoder>"24@0:8@"NSArray"16
@"<MTLRasterizationRateMap>"24@0:8@"MTLRasterizationRateMapDescriptor"16
@"<MTLIndirectCommandBuffer>"40@0:8@"MTLIndirectCommandBufferDescriptor"16Q24Q32
@"<MTLEvent>"16@0:8
@"<MTLSharedEvent>"16@0:8
@"<MTLSharedEvent>"24@0:8@"MTLSharedEventHandle"16
@"<MTLIOFileHandle>"32@0:8@"NSURL"16^@24
@"<MTLIOCommandQueue>"32@0:8@"MTLIOCommandQueueDescriptor"16^@24
@"<MTLIOFileHandle>"40@0:8@"NSURL"16q24^@32
@"NSArray"16@0:8
@"<MTLCounterSampleBuffer>"32@0:8@"MTLCounterSampleBufferDescriptor"16^@24
@"<MTLArgumentEncoder>"24@0:8@"<MTLBufferBinding>"16
@"<MTLDynamicLibrary>"32@0:8@"<MTLLibrary>"16^@24
@"<MTLDynamicLibrary>"32@0:8@"NSURL"16^@24
@"<MTLBinaryArchive>"32@0:8@"MTLBinaryArchiveDescriptor"16^@24
{?=QQQ}24@0:8@"MTLAccelerationStructureDescriptor"16
@"<MTLAccelerationStructure>"24@0:8Q16
@"<MTLAccelerationStructure>"24@0:8@"MTLAccelerationStructureDescriptor"16
{?=QQ}24@0:8@"MTLAccelerationStructureDescriptor"16
@"<MTLResidencySet>"32@0:8@"MTLResidencySetDescriptor"16^@24
MTLCommandQueue
v32@0:8r^@16Q24
T@"NSString",N,C
T@"<MTLDevice>",N,R
v24@0:8@"NSString"16
@"<MTLDevice>"16@0:8
@"<MTLCommandBuffer>"16@0:8
@"<MTLCommandBuffer>"24@0:8@"MTLCommandBufferDescriptor"16
v24@0:8@"<MTLResidencySet>"16
MTLBinaryArchive
B32@0:8@16^@24
B40@0:8@16@24^@32
B32@0:8@"MTLComputePipelineDescriptor"16^@24
B32@0:8@"MTLRenderPipelineDescriptor"16^@24
B32@0:8@"MTLTileRenderPipelineDescriptor"16^@24
B32@0:8@"MTLMeshRenderPipelineDescriptor"16^@24
B32@0:8@"MTLStitchedLibraryDescriptor"16^@24
B32@0:8@"NSURL"16^@24
B40@0:8@"MTLFunctionDescriptor"16@"<MTLLibrary>"24^@32
@"<MTLFunction>"24@0:8@"NSString"16
@"<MTLFunction>"40@0:8@"NSString"16@"MTLFunctionConstantValues"24^@32
v40@0:8@"NSString"16@"MTLFunctionConstantValues"24@?<v@?@"<MTLFunction>"@"NSError">32
v32@0:8@"MTLFunctionDescriptor"16@?<v@?@"<MTLFunction>"@"NSError">24
@"<MTLFunction>"32@0:8@"MTLFunctionDescriptor"16^@24
v32@0:8@"MTLIntersectionFunctionDescriptor"16@?<v@?@"<MTLFunction>"@"NSError">24
@"<MTLFunction>"32@0:8@"MTLIntersectionFunctionDescriptor"16^@24
MTLCommandBuffer
v32@0:8@16d24
T@"<MTLCommandQueue>",N,R
retainedReferences
errorOptions
kernelStartTime
Td,N,R
kernelEndTime
logs
T@"<MTLLogContainer>",N,R
GPUStartTime
GPUEndTime
status
T@"NSError",N,R
@"<MTLLogContainer>"16@0:8
v24@0:8@?<v@?@"<MTLCommandBuffer>">16
v24@0:8@"<MTLDrawable>"16
v32@0:8@"<MTLDrawable>"16d24
@"NSError"16@0:8
@"<MTLBlitCommandEncoder>"16@0:8
@"<MTLRenderCommandEncoder>"24@0:8@"MTLRenderPassDescriptor"16
@"<MTLComputeCommandEncoder>"24@0:8@"MTLComputePassDescriptor"16
@"<MTLBlitCommandEncoder>"24@0:8@"MTLBlitPassDescriptor"16
@"<MTLComputeCommandEncoder>"16@0:8
@"<MTLComputeCommandEncoder>"24@0:8Q16
v32@0:8@"<MTLEvent>"16Q24
@"<MTLParallelRenderCommandEncoder>"24@0:8@"MTLRenderPassDescriptor"16
@"<MTLResourceStateCommandEncoder>"16@0:8
@"<MTLResourceStateCommandEncoder>"24@0:8@"MTLResourceStatePassDescriptor"16
@"<MTLAccelerationStructureCommandEncoder>"16@0:8
@"<MTLAccelerationStructureCommandEncoder>"24@0:8@"MTLAccelerationStructurePassDescriptor"16
v32@0:8{_NSRange=QQ}16
v40@0:8@16{_NSRange=QQ}24
remoteStorageBuffer
gpuAddress
@"<MTLTexture>"40@0:8@"MTLTextureDescriptor"16Q24Q32
v40@0:8@"NSString"16{_NSRange=QQ}24
@"<MTLBuffer>"24@0:8@"<MTLDevice>"16
MTLCommandEncoder
MTLRenderCommandEncoder
v40@0:8r^v16Q24Q32
v40@0:8@16Q24Q32
v48@0:8r^@16r^Q24{_NSRange=QQ}32
v48@0:8@16Q24Q32Q40
v56@0:8r^@16r^Q24r^Q32{_NSRange=QQ}40
v40@0:8Q16Q24Q32
v48@0:8r^v16Q24Q32Q40
v40@0:8r^@16{_NSRange=QQ}24
v40@0:8@16f24f28Q32
v56@0:8r^@16r^f24r^f32{_NSRange=QQ}40
v64@0:8{?=dddddd}16
v32@0:8r^{?=dddddd}16Q24
v32@0:8Q16r^{?=II}24
v28@0:8f16f20f24
v48@0:8{?=QQQQ}16
v32@0:8r^{?=QQQQ}16Q24
v32@0:8f16f20f24f28
v20@0:8I16
v24@0:8I16I20
v88@0:8{?=QQQ}16{?=QQQ}40{?=QQQ}64
v80@0:8@16Q24{?=QQQ}32{?=QQQ}56
v48@0:8Q16Q24Q32Q40
v64@0:8Q16Q24Q32@40Q48Q56
v56@0:8Q16Q24Q32@40Q48
v56@0:8Q16Q24Q32Q40Q48
v80@0:8Q16Q24Q32@40Q48Q56q64Q72
v40@0:8Q16@24Q32
v64@0:8Q16Q24@32Q40@48Q56
v72@0:8Q16Q24Q32@40Q48Q56Q64
v56@0:8Q16@24Q32@40Q48
v88@0:8Q16Q24Q32@40Q48@56Q64Q72Q80
v72@0:8Q16@24Q32@40Q48@56Q64
v40@0:8{?=QQQ}16
v40@0:8r^@16Q24Q32
v48@0:8r^@16Q24Q32Q40
v40@0:8@16@24Q32
v36@0:8@16Q24B32
tileWidth
v24@0:8@"<MTLRenderPipelineState>"16
v40@0:8@"<MTLBuffer>"16Q24Q32
v48@0:8@"<MTLBuffer>"16Q24Q32Q40
v32@0:8@"<MTLTexture>"16Q24
v32@0:8@"<MTLSamplerState>"16Q24
v40@0:8@"<MTLSamplerState>"16f24f28Q32
v32@0:8@"<MTLVisibleFunctionTable>"16Q24
v32@0:8@"<MTLIntersectionFunctionTable>"16Q24
v32@0:8@"<MTLAccelerationStructure>"16Q24
v24@0:8@"<MTLDepthStencilState>"16
v80@0:8@"<MTLBuffer>"16Q24{?=QQQ}32{?=QQQ}56
v64@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56
v56@0:8Q16Q24Q32@"<MTLBuffer>"40Q48
v80@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56q64Q72
v40@0:8Q16@"<MTLBuffer>"24Q32
v64@0:8Q16Q24@"<MTLBuffer>"32Q40@"<MTLBuffer>"48Q56
v32@0:8@"<MTLFence>"16Q24
v72@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56Q64
v56@0:8Q16@"<MTLBuffer>"24Q32@"<MTLBuffer>"40Q48
v88@0:8Q16Q24Q32@"<MTLBuffer>"40Q48@"<MTLBuffer>"56Q64Q72Q80
v72@0:8Q16@"<MTLBuffer>"24Q32@"<MTLBuffer>"40Q48@"<MTLBuffer>"56Q64
v32@0:8@"<MTLResource>"16Q24
v40@0:8@"<MTLResource>"16Q24Q32
v24@0:8@"<MTLHeap>"16
v32@0:8@"<MTLHeap>"16Q24
v40@0:8@"<MTLIndirectCommandBuffer>"16{_NSRange=QQ}24
v40@0:8@"<MTLIndirectCommandBuffer>"16@"<MTLBuffer>"24Q32
v36@0:8@"<MTLCounterSampleBuffer>"16Q24B32
MTLHeap
@40@0:8Q16Q24Q32
@32@0:8@16Q24
hazardTrackingMode
usedSize
@"<MTLBuffer>"40@0:8Q16Q24Q32
@"<MTLTexture>"32@0:8@"MTLTextureDescriptor"16Q24
@"<MTLAccelerationStructure>"32@0:8Q16Q24
@"<MTLAccelerationStructure>"32@0:8@"MTLAccelerationStructureDescriptor"16Q24
_TtP3VFX17VFXEffectDelegate_
v24@0:8@"_TtC3VFX9VFXEffect"16
VFXREDrawCallContext
@28@0:8i16@20
@44@0:8i16@20^q28^q36
r*20@0:8i16
B44@0:8i16@20^q28^q36
v32@0:8^^v16^q24
f16@0:8
renderTargetInfo
T@"<VFXRERenderTargetInfo>",N,R
isDrawingDepthOnly
isDrawingBlur
stencilInfo
T@"<VFXStencilInfo>",N,R
useDitherFade
enableClipping
renderForBlur
enableBreakthrough
enableNearFieldVignetting
portalClippingMode
fadeOpacity
isLayeredRendering
statsVertexCount
Tq,N
statsPrimitiveCount
statsDrawcallCount
@"<MTLTexture>"28@0:8i16@"NSString"20
@"<MTLBuffer>"44@0:8i16@"NSString"20^q28^q36
@"<MTLSamplerState>"28@0:8i16@"NSString"20
B44@0:8i16@"NSString"20^q28^q36
v24@0:8@?<v@?^{?=[4]}i>16
@"<VFXRERenderTargetInfo>"16@0:8
@"<VFXStencilInfo>"16@0:8
OS_dispatch_source_data_add
MTLSamplerState
MTLDepthStencilState
MTLRenderPipelineState
Q40@0:8{?=QQQ}16
maxTotalThreadsPerThreadgroup
threadgroupSizeMatchesTileSize
imageblockSampleLength
supportIndirectCommandBuffers
maxTotalThreadsPerObjectThreadgroup
maxTotalThreadsPerMeshThreadgroup
objectThreadExecutionWidth
meshThreadExecutionWidth
maxTotalThreadgroupsPerMeshGrid
shaderValidation
@"<MTLFunctionHandle>"32@0:8@"<MTLFunction>"16Q24
@"<MTLVisibleFunctionTable>"32@0:8@"MTLVisibleFunctionTableDescriptor"16Q24
@"<MTLIntersectionFunctionTable>"32@0:8@"MTLIntersectionFunctionTableDescriptor"16Q24
@"<MTLRenderPipelineState>"32@0:8@"MTLRenderPipelineFunctionsDescriptor"16^@24
MTLComputePipelineState
threadExecutionWidth
staticThreadgroupMemoryLength
@"<MTLFunctionHandle>"24@0:8@"<MTLFunction>"16
@"<MTLComputePipelineState>"32@0:8@"NSArray"16^@24
@"<MTLVisibleFunctionTable>"24@0:8@"MTLVisibleFunctionTableDescriptor"16
@"<MTLIntersectionFunctionTable>"24@0:8@"MTLIntersectionFunctionTableDescriptor"16
patchControlPointCount
vertexAttributes
stageInputAttributes
functionConstantsDictionary
T@"NSDictionary",N,R
@"NSDictionary"16@0:8
@"<MTLArgumentEncoder>"24@0:8Q16
@"<MTLArgumentEncoder>"32@0:8Q16^@24
heap
T@"<MTLHeap>",N,R
heapOffset
@"<MTLHeap>"16@0:8
access
MTLBufferBinding
bufferAlignment
bufferDataType
bufferStructType
T@"MTLStructType",N,R
bufferPointerType
T@"MTLPointerType",N,R
@"MTLStructType"16@0:8
@"MTLPointerType"16@0:8
MTLComputeCommandEncoder
v64@0:8{?={?=QQQ}{?=QQQ}}16
v64@0:8{?=QQQ}16{?=QQQ}40
v56@0:8@16Q24{?=QQQ}32
dispatchType
v24@0:8@"<MTLComputePipelineState>"16
v32@0:8@"<MTLBuffer>"16Q24
v56@0:8@"<MTLBuffer>"16Q24{?=QQQ}32
v24@0:8@"<MTLFence>"16
_TtP3VFX10VFXBinding_
objectID
bindingName
v24@0:8@"NSData"16
MDLComponent
MDLMeshBuffer
T@"<MDLMeshBufferAllocator>",N,R
zone
T@"<MDLMeshBufferZone>",N,R
v32@0:8@"NSData"16Q24
@"MDLMeshBufferMap"16@0:8
@"<MDLMeshBufferAllocator>"16@0:8
@"<MDLMeshBufferZone>"16@0:8
MTLArgumentEncoder
^v24@0:8Q16
encodedLength
alignment
v32@0:8@"<MTLRenderPipelineState>"16Q24
v32@0:8@"<MTLComputePipelineState>"16Q24
v32@0:8@"<MTLIndirectCommandBuffer>"16Q24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
hash
T#,N,R
debugDescription
B24@0:8@"Protocol"16
OS_dispatch_source
@24@0:8^{_NSZone=}16
guardCount
VFX.VFXSceneLightParameters
_TtC3VFX23VFXSceneLightParameters
@24@0:8q16
@44@0:8q16f2428
v32@0:816
v24@0:8f16f20
v28@0:816B24
outerAngle
extents
doubleSided
textureTag
v32@0:8q16@24
v48@0:8q16B24^v28q36f44
v40@0:8q16^v24^v32
VFX.DirectionalLight
VFX.AmbientLight
VFX.RectAreaLight
_TtC3VFX18RotateActionSystem
_TtC3VFX14SineMoveSystem
elapsedTime
_TtC3VFX15SineYWaveSystem
Can't construct Array with count < 0
Swift/arm64e-apple-macos.private.swiftinterface
Fatal error
SineMove
SineY.Regular
_TtCO3VFX21GraphV1CodeGeneration17TypedArraySnippet
};out = &#TEMP#[0]
};thread out = &#TEMP#[0]
_TtC3VFX9GPUHelper
device
VFX.GPUHelper
Bug: Behavior Graph compilation failed without any diagnostics
VFX/BehaviorGraphCompiler.swift
invalid scheduling: 
on_particle_update
on_particle_init
_TtC3VFX12TypeRegistry
typeInfoByName
componentInfoByNameForFuzzyLookup
metadata
VFX/TypeRegistry.swift
trying to decode 
 but it shouldn't exist in version 
UnsafeMutablePointer.initialize overlapping range
unknown context at
_TtC3VFX15ProjectorSystem
Projector
VFX/VFXBinding.swift
_TtC3VFX11BindingImpl
identifier
objectName
isPublic
enumCases
property
Tq,N,VobjectID
Tq,N,Vtype
Tq,N,Vsemantic
Td,N,Vmin
Td,N,Vmax
@24@0:8^v16
v32@0:8@16^v24
B24@0:8^v16
v28@0:8B16^v20
C24@0:8^v16
v28@0:8C16^v20
S24@0:8^v16
v28@0:8S16^v20
I24@0:8^v16
v28@0:8I16^v20
Q24@0:8^v16
v32@0:8Q16^v24
q24@0:8^v16
v32@0:8q16^v24
c24@0:8^v16
v28@0:8c16^v20
s24@0:8^v16
v28@0:8s16^v20
i24@0:8^v16
v28@0:8i16^v20
d24@0:8^v16
v32@0:8d16^v24
f24@0:8^v16
v28@0:8f16^v20
24@0:8^v16
v32@0:816^v24
v40@0:816^v32
{?=[3]}24@0:8^v16
v72@0:8{?=[3]}16^v64
{?=[4]}24@0:8^v16
v88@0:8{?=[4]}16^v80
v56@0:816^v48
v120@0:8{?=[3]}16^v112
v152@0:8{?=[4]}16^v144
i32@0:8^v16q24
Failed to find built-in effect 
VFX1
vfxAssetsFrameworkBundle
T@"NSBundle",N,R
builtinEffectIdentifiers
/System/Library/VFX
com.apple.VFXAssets
_TtC3VFX10ScopeLevel
onDeallocTrigger
onCancelTrigger
_TtC3VFX19ComponentsDataChunk
classIndex
scope
unmanagedEntityClass
mutationID
isResizable
vm_data
entityIndices
handle
_staticWorkerAffinity
activeRange
newlyCreatedLowerBound
newlyDestroyedLowerBound
worldBox
worldBoxLastMutation
lodMaxSquareDistance
lodMaxSquareDistanceLastMutation
_shortLivedLock
_ownershipLock
lock short chunk
lock ownership chunk
VFX/ComponentsDataChunk.swift
Cannot transfer entities with inital values if 
 is not present in 
No Entity Indices
_TtC3VFX12VFXAttribute
_TtC3VFX31AnimationComputeLocalTimeSystem
updateGroupTime
_TtC3VFX20BasicAnimationSystem
_TtC3VFX23KeyframeAnimationSystem
float1Query
float2Query
float3Query
float4Query
AnimationComputeLocalTime
BasicAnimations
KeyframeAnimations
_TtCO3VFX21GraphV1CodeGeneration7Library
_name
snippets
includeFunctionsMapByLanguage
CodeGen.Resources.initialize: for 
) ignoring template 
 with missing or already used uid: '
%TYPE_DEFAULT_VALUE%
CodeGen.Library: Unable to parse  
CodeGen.Library.fromJsonString: invalid json: 
// vfx-codegen-def: 
VFX/Library.swift
CodeGen.Library: invalid include code for 
, '##' not used anywhere!
CodeGen.Library: duplicated key:
Force Field Type
Projection Direction
Fit Horizontally
Lens Blur Filter Quality
Tone Mapping Mode
_TtC3VFX26BindingPropertyDescription
bindingInfo
VFX/ComponentMeta.swift
unimplemented or should not be called on component with static properties
Higher runs first
Not enough bits to represent the passed value
Negative value is not representable
Randomize seed on start and on restart.
Check this box to try to run the simulation on the GPU
RandomizeSeedOnReset
MaxParticleCount
DisableWhenCulled
ShowNearestNeighbours
CullFullyTransparent
[Experimental] will not work with updateOnGPU, with multiple spawnIDs
[Experimental] will store all particles in one chunk
property is remapped to a component type that doesn't have metadata
 doesn't exist on 
WorldBoundingBox
LastFrameWorldTransform
ExcludeFromHierarchy
ParticleAngleVelocity
ParticleTextureFrame
ParticleLifetime
ParticleClassSpawnID
ProjectionMatrix
projectionDirectionIndex
Disable for better performance
filterQualityIndex
transparentRatio
Currently available only for cubemap textures, with IBL
Only applies to 2D textures
Shader File Asset
orientationIndex
depthCompareIndex
combinedTextures
use Combined texture (red=Oclusion green=Roughness blue=Metalness)
emissiveMinFilter
emissiveMagFilter
emissiveMipFilter
emissiveScaleBias
roughnessTexture
roughnessIntensity
roughnessMinFilter
roughnessMagFilter
roughnessMipFilter
roughnessScaleBias
metalnessTexture
metalnessIntensity
metalnessMinFilter
metalnessMagFilter
metalnessMipFilter
metalnessScaleBias
occlusionTexture
occlusionIntensity
occlusionMinFilter
occlusionMagFilter
occlusionMipFilter
occlusionScaleBias
PointCacheFileAsset
PointCacheFromVertex
REMeshAssetPointCache
Point Cache Generator
distributionIndex
TextureFileAsset
TextureArrayFileAsset
TextureNamedAsset
RequireSizeLimit
RequireMipmapAllocation
VFX/PropertyDescription.swift
TextureAnimation
RequireIOSurface
SDFTextureGenerator
Continuous Over Distance
Burst At Intervals
Respawn (Experimental)
maxStepPerBranch
SetAngularVelocity
SetAngleVelocity
frameGeneratedCount
torusInnerRadius
emissionOrderIndex
motionDistributionIndex
addressModeIndex
PointCacheEmitter
PointCacheSpawner
overrideBoundingBox
SetTargetFromPosition
Unsupported type for ParticleFloat3Init
SetTargetPosition
SetAngularFactor
ColorOverVelocity
OpacityOverVelocity
OrientationOverVelocity
directionAxisIndex
SizeOverVelocity
WrapAroundCamera
ColorOverTexture
PositionOverTexture
ColorOverPosition
OrientationConstraint
fallOffDirection
AffectedByForceField
AffectedByGravity
AffectedByGlobalForces
Flocking (Align Orientation)
Flocking (Align Velocity on Plane)
Flocking (Constrain to Area)
Flocking (Constrain to Plane)
Flocking (Fly towards Area)
Flocking (Solver)
Flocking (Speed Control)
kickStartDirectionIndex
Fluid Solver 2D (Emitter)
Check this box to emit density and/or velocity from this emitter
If a source is specified then each particle of the source will emit density and/or velocity
(note: if no source is specified then this component's WorldTransform is used as emitter)
The radius of the emitter
The amount of density that is emitted per second
The amount of velocity that is emitted per second
(note: the velocity direction is specified by either the source particle's velocity or by this component's WorldTransform if no source is specified)
Show the emitter position, size and orientation in the render view
Show the velocity that is emitted
Fluid Solver 2D (Solver)
Check this box to solve the fluid solver grids
Checking this box will make particles follow the velocity contained in the fluid solver grids
The amount of influence the fluid solver has on the particles being advected
A multiplier for the fluid solver's internal simulation speed
The extent (or size) of the setup
The cell size of the grid(s).
Smaller cell sizes require more memory and computation
The viscosity of the fluid
Adds vorticity to the simulation.
Damps the velocity over time
Show the grid(s) of the current setup
Show the velocities contained in the grid cells
Show the densities contained in the grid cells
Slow down more quickly for greater values
usesParticleSize
Slow down squarely proportional to particle scale
DistanceConstraint
DirectionalLight
dieOnCollisionProbabilityBias
sendEventsProbabilityBias
Cylinder Collider
Signed Distance Field Collider
LocalBoxCollider Collider
Sphere Attractor
Script (Emitter)
func emitterUpdate(_ context: $script_context, _ p: $emitter.position) {
    // print("hello from emitterUpdate")
    // let time = Float(vfx_script_clock_time(context))
    // p.x = sin(time)
VFX/ScriptComponents.swift
metal not supported
void emitter_update($script_context context, $emitter.position p) {
    // printf("hello from emitter_update\n");
    // double time = vfx_script_clock_time(context);
    // p.x = sin(time);
Script (Particle)
func particleInit(_ p: $particle.position) {
    // p.y = sin(time)
    // print("hello from particleInit")
void particle_init($script_context context, $particle.position p) {
    // printf("hello from particle_init\n");
    // double time = vfx_script_clock_time(context);
    // p.x = sin(time);
func particleUpdate(_ p: $particle.position) {
    // p.y = cos(time)
    // print("hello from particleUpdate")
void particle_update($script_context context, $particle.position p) {
    // printf("hello from particle_update\n");
    // double time = vfx_script_clock_time(context);
    // p.x = cos(time);
animationModeIndex
lightUsingParticleOrientation
prebakedLighting+XYZ
prebakedLighting-XYZ
occlusionDistance
occlusionFalloff
displacementIntensity
displacementScale
Sphere Ambient Occlusion
Box Ambient Occlusion
textureModeIndex
Opacity (Legacy)
TargetFromPosition (Legacy)
Sine Move Action
Animation Time Source
exponentialExponent
fillForwardIndex
fillBackwardIndex
Keyframe Animation
ShapeDistribution
EmitterShape.Direction
ParticleColorInit.Mode
EmitterShape.Shape
OrientationOverVelocity.DirectionAxis
ParticleSortMode
MotionDistribution
ParticleQuadRenderer.Shape
ParticlePrimitiveRenderer.Shape
ParticleAnimationMode
ParticleOrientationMode
ParticleRibbonProfile
ParticleRibbonTextureMode
FlockingLocalAxis
FlockingSizeMode
FluidSolver2DSolverSetupType
FluidSolver2DSolverBorderType
ToneMappingOperator
ParticleSubSpawn.Mode
ParticleColorOverPosition.GradientMode
PointCache.Distribution
ProjectionDirection
OrientationConstraint.Mode
VideoCapture.OrientationMode
Composition.Operation
ForceField.CullMode
ForceField.Shape
ForceField.Scope
weakProgressTrackerReferenceKey
_TtCE3VFXCSo8VFXWorldP33_3FCECE2A99C60E457AF6E856DAAF96C813WeakReference
_TtC3VFX17GraphScriptRunner
needUpdateMainGraphScriptGroup
graphScriptQuery
graphECPRefQuery
bindingsQuery
VFX2
v48@0:8@16@24@32@40
_TtC3VFX25TriggerScriptRunnerSystem
VFX/Scripting+Execute.swift
missing case for 
scripting: trying to access 
 but it's missing, add it manually
VFX/Script.swift
not even compiled
operation indices 
entityManager.getAnyValue failed for 
Source value type 
 doesn't match destination type 
VFX/EntityManager+EntityComponent.swift
 is invalid or component 
 is not present.
Unsupported Trigger Type
_TtCO3VFX21GraphV1CodeGeneration11CodeSnippet
_codeSourceSnippet
CodeSnippet(uid: 
, codeSourceSnippet: 
 language is not supported.
#UID_INDEX_VALUE#
snippetSignature
_TtC3VFX21AuthoringSubGraphNode
graph
_TtC3VFX12SubGraphNode
_signature
_TtC3VFX20SubGraphEndpointNode
_TtC3VFX17SubGraphEnterNode
_TtC3VFX18SubGraphReturnNode
subfn_%node_name(
VFX.SubGraphEndpointNode
VFX.SubGraphNode
unsupported data type 
_TtC3VFX11ShaderCache
defaultShaderLibrary
hotReloadableShaderLibrary
renderPipelines
computePipelines
functions
inactiveByPipeline
statistics
lastStatistics
disableCache
renderPipelineStats
computePipelineStats
functionStats
recordingBinaryArchive
precompiledBinaryArchives
urlToSaveBinaryArchiveTo
recordMetalPipelinesScript
onShaderCompilation
reloadCallback
_TtCFC3VFX11ShaderCache12makeFunctionFzT4nameSS7libraryGSqPSo10MTLLibrary__14constantValuesGSaVS_16FunctionConstant_13useAsLinkableSb_PSo11MTLFunction_L_15FunctionWrapper
Unable to compile pipeline state. Error info: 
makeComputePipeline
warning: shader compilation: 
makeComputePipelineRefl
Try to compile a compile function without a name
VFX/Extensions.swift
asyncMakeComputePipeline
v32@?0@"<MTLComputePipelineState>"8@"MTLComputePipelineReflection"16@"NSError"24
asyncMakeComputePipelineRef
asyncMakeFunction
v24@?0@"<MTLFunction>"8@"NSError"16
Missing function 
 in default library
vfx-disable-async-shader-compilation
[Error] Interval already ended
Unexpectedly found nil while unwrapping an Optional value
UnsafeMutableRawPointer.initializeMemory overlapping range
UnsafeMutablePointer.initialize with negative count
Insufficient space allocated to copy string contents
invalid Collection: less than 'count' elements in collection
UnsafeMutableBufferPointer with negative count
Unable to compile render pipeline without vertexFunction or meshFunction
Unable to compile render pipeline state. Error info: 
makeRenderPipeline
missing vertex shader
makeRenderPipelineRefl
asyncMakeRenderPipeline
v32@?0@"<MTLRenderPipelineState>"8@"MTLRenderPipelineReflection"16@"NSError"24
asyncMakeRenderPipelineRefl
lock ShaderCache
enable-binary-archive-recording
enable-metal-pipelines-script-recording
Unable to load library 
HotReloadableShaders
MetalShaderCache: 
binary-archive-path
Recording Metal Pipelines Script
Recording Metal Binary Archive
HotReloadableLibrary
VFX/ShaderCache.swift
ShaderCache: async compilation disabled
Cannot reload ComputePipeline: 
Cannot reload RenderPipeline: 
Unable to add binary archive at 
Using Metal binary archive at "
makeFunction
Failed compiling 
patchType
@24@0:8@16
functionNames
B24@0:8@16
_TtC3VFX16ForceFieldSystem
_TtCV3VFX18ParticleForceField9CPUSystem
_TtCV3VFX18ParticleForceField9GPUSystem
fieldsQuery
VFX/ForceField.swift
Invalid Texture in Force Field
ParticleForceField.CPU
particle_force_field
ParticleForceField.GPU
Unsupported pixel format: 
_TtCV3VFX28ParticleIntegrateOrientation6System
orientationQuery
ParticleIntegrateOrientation.CPU
_TtC3VFX13ScriptCodeGen
userProjectName
mangledProjectName
_TtC3VFX18MetalScriptCodeGen
_TtC3VFX14CScriptCodeGen
_TtC3VFX18SwiftScriptCodeGen
%PROJECT%_%KIND%_%ORIG_ENTITY%
VFX/ScriptCodeGen.swift
texture doesn't have enough information about the desired type, this should be special cased by the caller
pbr_lighting_parameters
vfx_custom_shader_%SCRIPT_ID%
// VFX_USER_CODE_STARTS_HERE
} // namespace 
vfx_compute_%SCRIPT_ID%
VFXUberScriptHeader
auto systemTreatmentParams = builtin.makeSystemTreatmentParameters(
, io.vertice.position, camera_index, io.vertice.screen_uv);
systemTreatmentParams.renderOptionsOverride.disableClipping();
out.color = vfx::api::applySystemTreatments(out.color, systemTreatmentParams, sample_mask);
io.primitive.particle_index = pid;
io.primitive.camera_index = camera_index;
io.vertice.position = builtin.proj_from_crws(camera_index) * float4(use_interpolated_crworld ? io.vertice.crworld_position : crworld_position, 1);
io.vertice.screen_uv = builtin.computeScreenUV(io.vertice.position, camera_index);
(pid, particle_data_
float3 crworld_position;
(void) crworld_position;
Unsupported type for space = 
uint32_t random_seed = particles.init_kernel_seed(0, pid);
is_local ? vfx_transform_position(particles.world_from_emitter(), 
is_local ? builtin.crws_from_world(vfx_transform_position(particles.world_from_emitter(), 
)) : builtin.crws_from_world(
vfx_transform_position(builtin.view_from_crws(camera_index), 
 : vfx_quat_mul(vfx_quat_conjugate(particles.emitter_orientation()), 
is_local ? vfx_quat_mul(particles.emitter_orientation(), 
vfx_quat_mul(vfx_quat_(builtin.view_from_crws(camera_index)), 
particles.emitter_scale()
 / vfx_get_scale(builtin.view_from_crws(camera_index))
particles.get_world_transform(pid)
builtin.crws_from_world(particles.get_world_transform(pid))
builtin.view_from_world(camera_index) * particles.get_world_transform(pid)
material_params.
not available as user param!
builtin.makeLightingParameters(
, float3(io.vertice.normal), float3(io.vertice.tangent.xyz))
builtin.crworld_camera_position(camera_index)
use_interpolated_crworld ? io.vertice.crworld_position : crworld_position
input_values.value
TextureType unsupported in CPU: 
address::mirrored_repeat
address::clamp_to_zero
address::clamp_to_edge
builtin.world_from_crws(
 not supported as external argument
 is not available as an external argument
particle_data_attachment<
<float> texture_
constant frame_constants& script_context [[ buffer(
particle_data_attachment<4> particles_attachment
material_params_%SCRIPT_ID%
& material_params [[ buffer(vfx_buffer_binding_index_material_constants) ]]
 io [[ stage_in ]]
void __attribute__((always_inline)) 
this shouldn't be called for files this recent!
__vfx_get_effect_class_
() -> AnyClass {
    return 
vfx_get_main_class
couldn't convert project name to swift: 
(_ scriptContext: UnsafeRawPointer) {
unsafeScriptContext = scriptContext
time = Float(vfx_script_clock_time(scriptContext))
deltaTime = vfx_script_clock_delta_time(scriptContext)
let argumentsBuffer = vfx_script_get_arguments_buffer(scriptContext)
 = argumentsBuffer[
]!.assumingMemoryBound(to: 
UnsafeMutableRawPointer(pInout
).assumingMemoryBound(to: SIMD4<Float>.self).pointee
 * iterationIndex).assumingMemoryBound(to: SIMD4<Float>.self).pointee
[iterationIndex]
 * iterationIndex).assumingMemoryBound(to: 
for iterationIndex in iterationRange {
var iterationBegin: CInt = 0, iterationEnd: CInt = 0
vfx_script_get_iteration_range(scriptContext, &iterationBegin, &iterationEnd)
let iterationRange = Int(iterationBegin)..<Int(iterationEnd)
import simd
import Foundation
import VFX
fileprivate var unsafeScriptContext: UnsafeRawPointer!
fileprivate var time: Float = 0
fileprivate var deltaTime: Float = 0
// VFX_USER_CODE_STARTS_HERE
@inline(__always) func 
import simd
import Foundation
import VFX
fileprivate var unsafeScriptContext: UnsafeRawPointer!
fileprivate var time: Float = 0
fileprivate var deltaTime: Float = 0
(void *script_context) {
void *const * arguments_buffer = vfx_script_get_arguments_buffer(script_context);
*)arguments_buffer[
*(float4*)inout_pointer
*(float4*)(((char*)inout_pointer
 * iteration_index)
[iteration_index]
*)(((char*)inout_pointer
for (int iteration_index = iteration_begin; iteration_index < iteration_end; iteration_index++) {
*)vfx_script_get_call_parameter(script_context, "
int iteration_begin, iteration_end;
vfx_script_get_iteration_range(script_context, &iteration_begin, &iteration_end);
__attribute__((visibility("default"))) 
__attribute__((used,visibility("hidden"),section("
__vfx_script_tbl
static vfx_entry_t __vfx_script_table_ref = { "
", __vfx_script_table };
extern "C" void 
// Compute Kernel Function
implemented in subclass
 GENERATED CONTENT
_TtC3VFX13ShaderLibrary
@16@0:8
libraryURL
watchingFolderQueue
library
reloadedNotificationBlock
presentedItemURL
T@"NSURL",N,R
presentedItemOperationQueue
T@"NSOperationQueue",N,R
Failed reloading 
VFX.ShaderLibrary
v32@0:8@16@?24
primaryPresentedItemURL
observedPresentedItemUbiquityAttributes
T@"NSSet",N,R
@"NSURL"16@0:8
@"NSOperationQueue"16@0:8
v24@0:8@?<v@?@?<v@?>>16
v24@0:8@?<v@?@"NSError">16
v24@0:8@"NSURL"16
v24@0:8@"NSSet"16
@"NSSet"16@0:8
v24@0:8@"NSFileVersion"16
v32@0:8@"NSURL"16@?<v@?@"NSError">24
v32@0:8@"NSURL"16@"NSURL"24
v32@0:8@"NSURL"16@"NSFileVersion"24
#16@0:8
@24@0:8:16
superclass
description
Unsupported
SetParticleTextureFrame.CPU
SetParticleAngleVelocity.CPU
SetParticleAngle.CPU
VFX.VFXRemotePreviewEndpoint
_TtC3VFX24VFXRemotePreviewEndpoint
name
T@"VFXWorld",N,W,Vworld
invalid ScriptKeyPath identifier: 
invalid keyPath identifier: 
could not resolve dynamic keyPath: 
invalid property identifier: 
_TtC3VFX14EntitySnapshot
_data
VFX/EntitySnapshot.swift
Trying to assign snapshot with an invalid entity 
Trying to clone a invalid entity
v16@?0@"NSFileHandle"8
_TtCV3VFX27ParticlePositionOverTexture6System
_TtC3VFX34ParticleFluidSolver2DEmitterSystem
_TtC3VFX31ParticleFluidSolver2DSolverData
handles
_TtC3VFX33ParticleFluidSolver2DSolverSystem
emittersQuery
globalFluidSolver2DSolversQuery
velocityAffectedQuery
VFX/ParticleSystems_Fluids.swift
hw.perflevel0.physicalcpu_max
serializationContext
no asset manager for 
_TtC3VFX8VFXSaver
isSavingForExport
layout
saveBindingsMetadata
saveAsPlist
targetsToPrecompile
cpu gpu 
outParamUID optMetadataSet 
count buffer bytesPerIndex 
paramType codeSourceSnippet 
compute.metallib
textureType
TQ,N,R
depth
framebufferOnly
compressionType
gpuResourceID
v24@0:8@16
installName
_TtCV3VFX23ParticleSizeOverTexture6System
_TtC3VFX24CAMetalLayerRenderOutput
metalLayer
viewpoint
loadAction
clearColor
preferredFramesPerSecond
isUserInitiated
frameCompletion
postRenderCallback
inputStreamIdentifier
enabled
requestedDrawableSize
_TtC3VFX22MTLTextureRenderOutput
colorTexture
shouldWaitForCommandBufferCompletion
_TtC3VFX16MockRenderOutput
sizeInPixel
depthPixelFormat
_TtC3VFX8Renderer
simulateCommandBufferError
engineContext
uploadLock
renderOutputs
renderOutputsForThisFrame
shaderCache
textureCache
depthStencilCache
GPUToolBox
texturePool
uniformValidationBuffer
bufferPool
wholeFrameBufferPool
captureInProgress
showDebugMenu
additiveWritesToAlpha
hideOpaquePass
hideTransparentPass
isPostFXEnabled
unscheduledCommandBuffersLock
unscheduledCommandBuffers
currentCommandBuffer
currentEncoder
currentEncoderWrapper
currentRenderPassDescriptor
renderPassDescriptorPool
renderOutputRenderPassFormat
encoders
globalFunctionConstants
mtkMeshBufferAllocator
inFlightSemaphore
_current
activeRenderVariantDescriptors
_compiledVariantCount
colorRamps
curves
monotonicIncreasingOrder
stripIndexBuffers
deformedBuffers
_TtC3VFX24RendererPostUpdateSystem
Could not allocate texture NA with 
VFX/Renderer.swift
defaultWhiteTexture2D failed
defaultBlackTexture failed
defaultGreyTexture failed
NextDrawable returned nil
v16@?0@"<MTLCommandBuffer>"8
App is background and no drawable is available, skipping frame
v16@?0@"<MTLDrawable>"8
VFXDefaultIrradiance
Failed loading VFXDefaultIrradiance in Bundle
loadKTX failed: 
loadKTXTextureFromBundle: Failed creating cpu buffer
loadKTXTextureFromBundle: Failed creating texture
TextureUploadFromCPU
AsyncBlit
Cannot create a blitEncoder
VFX update command buffer
Cannot create commandBuffer 
VFXDefaultRadiance
Failed loading VFXDefaultRadiance in Bundle
DefaultBlackCubeTexture failed
defaultLinearDepthTexture failed
kern.hv_vmm_present
Cannot create encoder current command buffer!
Cannot create a computeEncoder
monotonicIncreasingBuffer
Failed allocating MTLBuffer "
defaultWhiteTexture1D failed
defaultWhiteTexture3D failed
defaultWhiteTextureCube failed
defaultNormalMapTexture failed
Renderer.renderOutputs
Renderer.uploadLock
UnsafeMutablePointer.deinitialize with negative count
MTLParallelRenderCommandEncoder
v32@0:8Q16Q24
v24@0:8Q16
@"<MTLRenderCommandEncoder>"16@0:8
tileHeight
MTLBlitCommandEncoder
v136@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104{?=QQQ}112
v120@0:8@16Q24Q32Q40{?=QQQ}48@72Q80Q88{?=QQQ}96
v128@0:8@16Q24Q32Q40{?=QQQ}48@72Q80Q88{?=QQQ}96Q120
v120@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104Q112
v128@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104Q112Q120
v44@0:8@16{_NSRange=QQ}24C40
v80@0:8@16Q24Q32@40Q48Q56Q64Q72
v32@0:8@16@24
v56@0:8@16Q24@32Q40Q48
v56@0:8@16{_NSRange=QQ}24@40Q48
v108@0:8@16{?={?=QQQ}{?=QQQ}}24Q72Q80B88@92Q100
v88@0:8@16{?={?=QQQ}{?=QQQ}}24Q72Q80
v24@0:8@"<MTLResource>"16
v40@0:8@"<MTLTexture>"16Q24Q32
v136@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLTexture>"88Q96Q104{?=QQQ}112
v120@0:8@"<MTLBuffer>"16Q24Q32Q40{?=QQQ}48@"<MTLTexture>"72Q80Q88{?=QQQ}96
v128@0:8@"<MTLBuffer>"16Q24Q32Q40{?=QQQ}48@"<MTLTexture>"72Q80Q88{?=QQQ}96Q120
v120@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLBuffer>"88Q96Q104Q112
v128@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLBuffer>"88Q96Q104Q112Q120
v24@0:8@"<MTLTexture>"16
v44@0:8@"<MTLBuffer>"16{_NSRange=QQ}24C40
v80@0:8@"<MTLTexture>"16Q24Q32@"<MTLTexture>"40Q48Q56Q64Q72
v32@0:8@"<MTLTexture>"16@"<MTLTexture>"24
v56@0:8@"<MTLBuffer>"16Q24@"<MTLBuffer>"32Q40Q48
v56@0:8@"<MTLIndirectCommandBuffer>"16{_NSRange=QQ}24@"<MTLIndirectCommandBuffer>"40Q48
v56@0:8@"<MTLCounterSampleBuffer>"16{_NSRange=QQ}24@"<MTLBuffer>"40Q48
v108@0:8@"<MTLTexture>"16{?={?=QQQ}{?=QQQ}}24Q72Q80B88@"<MTLBuffer>"92Q100
v88@0:8@"<MTLTexture>"16{?={?=QQQ}{?=QQQ}}24Q72Q80
width
cpuCacheMode
Recovered from error: 
Unsupported version: 
Version mismatch: 
Couldn't decode: 
Invalid serialization type: 
_TtCFVV3VFX8Metadata5Class34_propertyDescriptionsAndStartPointFT_GSqTGSaVVS_8Property11Description_GSqVs5Int32___L_11NameAndType
_TtCFVV3VFX8Metadata6Struct20propertyDescriptionsFT_GSqGSaVVS_8Property11Description__L_11NameAndType
Swift._SwiftObject
_TtCs12_SwiftObject
_TtCV3VFX20ParticleGenerateGrid6System
ComputeNN.CPU
_TtC3VFX19VideoCaptureSession
frameTime
outputTexture
session
metalTextureCache
sampleBuffer
v40@0:8@16^{opaqueCMSampleBuffer=}24@32
_TtC3VFX18VideoCaptureSystem
captureComponents
captureRuntime
_TtC3VFX16IOSurfaceWrapper
ioSurface
_TtC3VFX11MovieSystem
dirtyMovieQuery
updatePlayers
_TtC3VFX11AudioPlayer
engine
mixer
isValid
samplesRaw
samplesRawCount
samplesRawTime
samplesRawSampleRate
_lock
_TtC3VFX11AudioSystem
setupPlayersQuery
updateAudioControllers
updateFFT
failed to create a device
Could not add video output to capture session.
Could not connect video output to capture session.
configuring video capture...
mirroring not supported
session.addOutput succeeded
failed to create an input
Unable to allocate texture cache.
requesting the url of an asset (
) with no pathResolver
Failed to create metal texture
Movie
v24@?0@"AVAudioPCMBuffer"8@"AVAudioTime"16
com.apple.vfx.audioPlayer
failed to create audio engine 
failed to attach audio player 
Audio
VFX.AudioPlayer
Failed to get metal texture from pixel buffer
VFX.VideoCaptureSession
node outputIndex inputIndex 
AVCaptureVideoDataOutputSampleBufferDelegate
v40@0:8@"AVCaptureOutput"16^{opaqueCMSampleBuffer=}24@"AVCaptureConnection"32
AVCaptureAudioDataOutputSampleBufferDelegate
_TtCO3VFX21GraphV1CodeGeneration17CustomCodeSnippet
source
_TtCO3VFX21GraphV1CodeGeneration15VariableSnippet
_TtCO3VFX21GraphV1CodeGeneration24VariableReferenceSnippet
VariableReferenceSnippet(uid: 
VariableSnippet(uid: 
 language is not supported. CustomCode only support Swift.
CodeGenContext.typeAsCode: 
 doesn't support 
UnsafeMutablePointer.moveInitialize with negative count
CustomCodeSnippet(uid: 
_TtCC3VFX5Graph11DeletedNode
_TtCC3VFX14AuthoringGraph11DeletedNode
_TtC3VFX16_PlaceholderNode
oldNode
VFX._PlaceholderNode
_TtCO3VFX21GraphV1CodeGeneration19StaticSwitchSnippet
_TtC3VFX26LegacyParticleRenderSystem
instanceStride
colorStride
frameIndex
entityCount
particleQuery
_TtC3VFX27LegacyParticleEmitterSystem
Legacy Particle Render
Legacy Particle Emitter
_TtCV3VFX20ParticleSizeOverLife6System
particlesS1
particlesS2
particles
particlesNoS1
particlesNoS2
_TtCV3VFX20ParticleSizeOverLife9GPUSystem
particle_size_over_life
ParticleSizeOverLife.GPU
couldn't remap entity: 
_TtC3VFX14FrameAllocator
dataAllocated
extraDatas
_TtC3VFX12GraphCodeGen
liveValuesNodes
language
formatting
subGraphsToEmit
nameByScriptParameter
atomCache
bumpedIndexByVariableName
_TtCC3VFX12GraphCodeGenP33_22BEB975C8D88BF1BD499327E6FD4D1D7CFGNode
_TtCC3VFX12GraphCodeGenP33_22BEB975C8D88BF1BD499327E6FD4D1D7CFGNoop
rawNode
_TtCC3VFX12GraphCodeGenP33_22BEB975C8D88BF1BD499327E6FD4D1D12CFGProcedure
next
_TtCC3VFX12GraphCodeGenP33_22BEB975C8D88BF1BD499327E6FD4D1D17CFGMultiProcedure
children
_TtCC3VFX12GraphCodeGenP33_22BEB975C8D88BF1BD499327E6FD4D1D9CFGBranch
VFX/GraphCodeGen.swift
 cannot be materialized in a script
Atom should have been cached during processGraph()
 has no corresponding CFGNode, invalid graph
no terminal node, invalid graph for codegen
 can't or hasn't been translated to CFGNode
vfx_script_graph_record_values
(vfx_script_uuid_t[]) { 
0x%llxull, 0x%llxull
_TtC3VFX4Node
typing
VFX/Node.swift
allocateConstantBuffer failed copying particle_ao_material_constants
particle_aoSphere_vert
particle_aoSphere_frag
allocateConstantBuffer failed copying particle_gaussian_material_constants
particle_gaussian_vert
particle_gaussian_frag
particle_gaussian_mesh
_TtC3VFXP33_B102182364ADC01C06A059EE682C19179XcodeInfo
macOSToolchainOverride
thisBundle
sdkPath
toolchainPath
$__lazy_storage_$_isCurrentVFXBuiltForAllArchs
_TtC3VFX19XcodeCommandBuilder
xcinfo
debug
frameworksToLink
librariesToLink
includePaths
swiftFlags
cFlags
/Contents/Frameworks/
xcodeinfo
/usr/bin/codesign
--timestamp=none
-L/usr/lib/swift
/Contents/Modules/
System/Library/PrivateFrameworks
System/Library/Frameworks
_TtC3VFX12SkyboxSystem
Unsupported TextureType for Skybox: 
vertex_skybox_2d
fragment_skybox_texture1d
Skipping skybox, unable to make pipeline state for skybox vertex: 
fragment_skybox_texture3d
fragment_skybox_texture2d_array
fragment_skybox_texture2d
vertexSkyboxShader
fragment_skybox_cube
vertexSkyboxWithRotationShader
entity order 
RenderSkybox
SceneKit
Invalid number of keys found, expected one.
_TtC3VFX16GraphDiagnostics
rawNodesByID
_TtC3VFX17GraphTypeResolver
resolvedNodes
tagsByNode
subGraphEnterInputTypes
insertTypeConversions
_TtC3VFX18GraphTypeInference
visited
typeHintByInput
typeHintByOutput
 doesn't satisfy constraint: 
 couldn't be resolved
) doesn't match required 
) is not compatible with input 
Subgraph Enter or Return node is not connected
VFX/Graph+Typing.swift
.arrayOfAnySize cannot be used as a return type constraint.
Invalid number of inputs
Some inputs are not connected
_TtCV3VFX21OrientationConstraint6System
OrientationBillboard
_TtC3VFX17PostProcessSystem
isMenuItemEnabled
Post Processing
vertex_draw_quad
_TtCV3VFX16ParticleKillable9CPUSystem
_TtCV3VFX16ParticleKillable9GPUSystem
EmitterDescription
emitter_killshape
KillShapeSystem.GPU
_TtCV3VFX11QueryResult11Deallocator
_TtC3VFX19PropertyDescription
scriptKeyPath
accessorCreator
getset
visibility
unavailableStartingFromVersion
lookupReplacementProperty
cachedResolvedReplacementProperty
defaultValues
_min
_max
_step
_minFractionDigit
_maxFractionDigit
flags
_scriptingProperty
getter
setter
entityInstance
PropertyDescription.Semantic can't be created from coding index: 
PropertyDescription.Semantic of type SourceCode can't be created from coding index.
fragmentFunction
pointCacheReference
textureReference
_TtC3VFX11WakeUpEvent
condition
event
_TtC3VFX20GraphAuthoringSystem
_TtC3VFX20MainGraphScriptGroup
groups
GraphCodeGen.generateCodeForEachGraphConfig: found unsupported base object: 
key value 
Duplicate values for key: '
uint32_t currentSeed
const void* scriptContext
constant uint32_t& currentSeed
constant frame_constants& scriptContext
_ currentSeed: UInt32
_ scriptContext: UnsafeRawPointer
GraphComponents.setupGraphParticleScript[
]: unable to find input: '
particleComponentInputs: 
particleClassComponentInputs: 
emitterInputs: 
' references null entity!
TextureSampler2D
TextureSampler3D
GraphCodeGen.createScriptParam: unsupported type for TextureShaderAsset: 
GraphCodeGen.extractTransformSpaceMode: found unsupported space String: 
GraphScriptConfig[
]: unable to find output: '
' in.. 
outputs: 
GraphComponents.setupGraphScript[
]: Unable to find input: '
Graph Scripting Config
_TtC3VFX26GenericLookingGlassDisplay
calibration
quiltSettings
_TtC3VFX14RegularDisplay
window
quad_texture2d_frag
_TtC3VFX12GraphicsNode
_TtC3VFX17EvaluateCurveNode
_TtC3VFX21EvaluateColorRampNode
_TtC3VFX12SetColorNode
_TtC3VFX14RGBAToHSBANode
_TtC3VFX12RGBToHSBNode
_TtC3VFX14HSBAToRGBANode
_TtC3VFX12HSBToRGBNode
_TtC3VFX17sRGBAToLinearNode
_TtC3VFX16sRGBToLinearNode
_TtC3VFX17LinearTosRGBANode
_TtC3VFX16LinearTosRGBNode
_TtC3VFX22AlphaPremultipliedNode
_TtC3VFX11SamplerNode
_TtC3VFX10SampleNode
VFX.SampleNode
%0.texture.sample(%0.sampler, %uv * %scale + %offset)
VFX/Nodes+Graphics.swift
vfx_script_texture_sample3d
(%0, %uv * %scale + %offset)
vfx_script_texture_sample2d
vfx_script_texture_sample1d
VFX/AnyType.swift
VFX.SamplerNode
vfx_make_float4(%0.xyz * %0.w, %0.w)
Alpha Premultiplied
vfx_linear_to_srgb(%0)
vfx_make_float4(vfx_linear_to_srgb(vfx_get_xyz(%0)), %0.w)
vfx_srgb_to_linear(%0)
vfx_make_float4(vfx_srgb_to_linear(vfx_get_xyz(%0)), %0.w)
vfx_hsb_to_rgb(%0)
vfx_rgb_to_hsb(%0)
auto %r0 = vfx_script_color_ramp_create_setting_color(%script_context, %colorRamp, %color, %index);
#cleanup
vfx_script_color_ramp_destroy(%script_context, %r0);
vfx_script_color_ramp_evaluate(%0, %1)
%0.texture.sample(%0.sampler, %1)
vfx_script_texture_sample1d(%0, %1)
Evaluate ColorRamp
vfx_script_curve_evaluate(%0, %1)
%0.texture.sample(%0.sampler, %1).r
vfx_script_texture_sample1d(%0, %1).x
VFX/VFXScene.swift
For compatibility only, this initializer shouldn't be used
VFXScene.allowsCameraControl is not supported anymore - use VFXView.allowsCameraControl
withPointerToValue is deprecated - use withPointerToParameter
authoringFileManager initialized twice?
_TtC3VFX8VFXScene
c16@0:8
v20@0:8c16
v40@0:8@16@24@32
@20@0:8i16
loadOptions
loader
templateRemapTable
templateWasPrepared
effects
entityObjects
_version
isInsideRE
isREAssetScene
transientDrawCall
hasSharedEntityManager
metalBinaryArchiveURLs
recordedMetalBinaryArchiveURL
internalPixelFormat
internalPixelFormatDepth
useGammaBlending
debugUIOptions
T@"NSArray",N,C
version
Tq,N,R
T@"NSURL",N,C
TQ,N,VinternalPixelFormat
Tc,N,VinternalPixelFormatDepth
TB,N,VuseGammaBlending
isPlaying
isFrozen
timeScale
Tf,N
allowsCameraControl
showStatistics
VFXSceneLoadOptions
^{__CFXWorld=}16@0:8
v24@0:8^{__CFXWorld=}16
^{_opaque_pthread_mutex_t=q[56c]}16@0:8
v24@0:8^{_opaque_pthread_mutex_t=q[56c]}16
{?=^{__vfx_counters}}16@0:8
v24@0:8{?=^{__vfx_counters}}16
I16@0:8
isAuthoringWorld
isVFX2
enableRuntimeScriptCompilation
allowLoadingFromFuture
setupAsTemplate
automaticallyPrepareScene
setupAsyncRuntime
asyncRuntimeLock
loadBindingsMetadata
enableParallelDecoding
setupRenderer
colorPixelFormat
enableDeferredRendering
doNotClearRenderOutput
clientID
metalLibraryURL
systemRegistrationOptions
counterStorage
peerTaskIdentity
loadPrecompiledScripts
TB,N,VisAuthoringWorld
TB,N,VisVFX2
TB,N,VenableRuntimeScriptCompilation
TB,N,VallowLoadingFromFuture
TB,N,VsetupAsTemplate
TB,N,VautomaticallyPrepareScene
TB,N,VsetupAsyncRuntime
T^{__CFXWorld=},N,W,Vworld
T^{_opaque_pthread_mutex_t=q[56c]},N,VasyncRuntimeLock
TB,N,VloadBindingsMetadata
TB,N,VenableParallelDecoding
TB,N,VsetupRenderer
TQ,N,VcolorPixelFormat
TQ,N,VdepthPixelFormat
TB,N,VdoNotClearRenderOutput
T@"<MTLDevice>",N,&,Vdevice
T@"<MTLCommandQueue>",N,&,VcommandQueue
T{?=^{__vfx_counters}},N,VcounterStorage
Ti,N,VpeerPid
TI,N,VpeerTaskIdentity
VFX3
q24@0:8@16
@40@0:8q16^B24^B32
assetManager
T@"NSObject",N,&
Down-casted Array element failed to match the target type
Expected 
NSArray element failed to match the Swift Array Element type
Expected 
CodeSourceSnippet
(CFGNode in _22BEB975C8D88BF1BD499327E6FD4D1D)
PropertyDescription
ComponentsDataChunk
failed resolving path: 
transaction
index
label
v32@0:8@16Q24
enumName
T@"NSData",N,C
angular_velocity
VFX/ParticleStoredData.swift
get_angle_velocity
set_angle_velocity
get_texture_frame
set_texture_frame
get_angular_velocity
set_angular_velocity
get_angular_factor
set_angular_factor
get_linear_factor
set_linear_factor
particle_plane_collider
@inline(__always) 
 for(int i = 0; i < 
CodeGenContext.getCGMetadataValueAsSwiftCodeStatement: Unsupported Type: 
<ERROR_NO_DATA_FOR_CUSTOM_TYPE>
UnsafeRawPointer.unsafeNull
Range<Float>(uncheckedBounds: (
Range<Int>(uncheckedBounds: (
vfx_script_curve_create(scriptContext, 
 vfx_script_curve_destroy(scriptContext, 
vfx_script_color_ramp_create(scriptContext, 
 vfx_script_color_ramp_destroy(scriptContext, 
CodeGenContext.getCGMetadataValueAsMetalCodeStatement: Unsupported Type: 
(vfx_float_range) {
(vfx_int_range) {
CodeGenContext.getCGMetadataValueAsCCodeStatement: Unsupported Type: 
vfx_script_string_create(scriptContext, "
 vfx_script_string_destroy(scriptContext, 
vfx_script_curve_create(scriptContext, (float[]) 
vfx_script_color_ramp_create(scriptContext, (simd_float4[]) 
_vfx_simd_quatf(
vfx_script_string_copy(
vfx_script_curve_copy(
vfx_script_color_ramp_copy(
Language.assignOrCopyWithConversion: type 
 doesn't use following conversionCode: 
CodeGeneration.Language.typeAsSwift: unsupported type 
UNKNOWN_TYPE(SWIFT)
UnsafeRawPointer
CodeGeneration.Language.typeAsMetal: unsupported type 
UNKNOWN_TYPE(METAL)
CodeGeneration.Language.typeAsC: unsupported type 
particle_quad_vert
particle_quad_frag
particle_quad_deferred_frag
_TtCV3VFX16ParticleMassInit6System
_TtCV3VFX16ParticleMassInit9GPUSystem
ParticleMassInit.CPU
particle_set_mass
ParticleMassInit.GPU
_TtC3VFXP33_8097C2CE5E3CF1582AC111ECB3AF7FE217RGGraphTranslator
runtimeEntityManager
rgContext
rgBuilder
generatePreviewTextures
attachments
Range requires lowerBound <= upperBound
Index out of range
from to 
VFX/GraphProtocol.swift
Cycle found during traversal! Use .nodeFirst or make the graph acyclic with InputFilter
GraphCursor.visit() is only allowed when using .inputsFirst traversal
  floatPtr uint8Ptr 
oldUID newUID 
VFX/RGTranslator.swift
null resource, invalid translation
CreatePreviewTexture
 is not a RenderGraphNode
pre  
serializationRegistry
CFXCodableEncode: could not encode 
CFXCodableDecode: could not decode 
AuthoringGraphCoder
Invalid render graph node: 
Texture unavailable
Only supports 2D textures
TextureAsset
TextureAssetCopy
Script runtime data doesn't match authoring reflection
Unable to extract script data from metal reflection
 expects a color texture
 expects a texture
blur
v24@?0{?=^{__RGContext}}8{?=^{__RGResource}}16
 unsupported semantic for publish node
Published attachment 
 is already published elsewhere
 expects a depth texture
main pass
 doesn't have a RGPass
Metal script buffer
Load data
v36@?0{?=^{__RGPass}}8{?=^{__RGContext}}16C24{?=^{__RGArguments}}28
Unsupported type: 
Missing reflection info for: 
Unable to load data for: 
Unexpected optional: 
Metal script resource
arg access 
Unable to find reflection input 
 in metal script
Input copy
metal script output
Unable to find reflection output 
Too many outputs
couldn't map script parameter at: 
No script parameter
storageMode
allocatedSize
rawValue
@"NSData"16@0:8
@32@0:8:16@24
_TtC3VFX10InputEvent
state
phase
momentumPhase
sourceIdentifier
locationInWindow
locationInView
isMouseInView
buttonNumber
characters
delta
keyCode
keyModifiers
timestamp
isDirectionInvertedFromDevice
clickCount
nativeType
_TtC3VFX16InputClearSystem
defaultStage
EnableNdfFiltering
EnableAREnvProbe
SupportsPrefilteredProbes
SupportsCubeArray
has_vertex_position
has_vertex_normal
has_vertex_color
has_vertex_tangent
enable_dither_fade
enable_alpha_fade
enable_depth_mitigation
enable_auto_alpha
use_interpolated_crworld
is_layered_rendering
is_multi_viewport_rendering
enable_portal_clip_plane
uniform_lifetime
has_angular_velocity
has_angle_velocity
has_texture_frame
has_linear_factor
has_angular_factor
has_ribbon_length
has_uniform_size_LEGACY
size_over_life_mode
attach_use_over_life
noise_use_transform
plane_collider_infinite
plane_collider_sphere
plane_collider_double_sided
box_collider_inside
force_field_kind
emitter_shape_type
emitter_shape_distribution
emitter_shape_orientation
emitter_shape_direction
emitter_shape_has_texture_2D
emitter_pointcache_inherit_position
emitter_pointcache_inherit_color
emitter_pointcache_inherit_velocity
emitter_pointcache_inherit_orientation
emitter_pointcache_inherit_size
emitter_pointcache_has_transform
enable_texture_2d
enable_texture_3d
enable_texture_2d_array
enable_texture_cube
enable_texture_prelighted
texture_is_not_alphapremultiplied
local_transform_LEGACY
has_particle_transform
has_pbr_lighting
disable_specular
inter_frame_interpolation
enable_scattering
orientation_mode
enable_velocity_stretch_LEGACY
enable_thick_lines
enable_soft_particles
need_opaque_zbuffer
need_normal_buffer
voxelDataChannelCount
enable_per_vertex_color
need_raytracing_LEGACY
need_point_size_LEGACY
need_ribbon_length_LEGACY
need_procedural_uv_LEGACY
is_custom_material
has_global_illumination
global_illumination_mip
has_volumetric_scattering
volumetric_scattering_mip
has_deferred_rendering
fragment_packed_textures
fragment_separate_ao
fragment_alpha_cutoff
has_instance_color
enable_near_camera_fade
toneMappingOperator
postOpaqueRendereredInTransparent
needsColorGrading
has_cone_traced_shadow
has_analytical_lights
has_gamma_blending
has_not_any_lighting
Only use FunctionConstant index as override 
VFX/DataValue.swift
invalid type of FunctionConstant
_TtC3VFX28ParticleContinousSpawnSystem
_TtCV3VFX25ParticleSpawnOverDistance31ParticleSpawnOverDistanceSystem
_TtC3VFX27ParticleVariableSpawnSystem
_TtC3VFX24ParticleBurstSpawnSystem
_TtC3VFX32ParticlePeriodicBurstSpawnSystem
_TtC3VFX30ParticleSubSpawnAddStateSystem
restartState
addState
removeState
_TtC3VFX22ParticleSubSpawnSystem
updateState
_TtC3VFX32ParticleSubSpawnSystemPostUpdate
_TtC3VFX30ParticleSubSpawnSystemPostInit
Continous Spawn
lastFrameWorld/worldTransform missing on ParticleSpawnOverDistance
Spawn Over Distance
Variable Spawn
Burst Spawn
Periodic Burst Spawn
Sub Spawn Add State
Sub Spawn Birth
Sub Spawn Update/Die/Collision
Sub Spawn
_TtC3VFX26ParticleRibbonTrailsSystem
ribbonRendererQuery
[RIBBONTRAILS]      ribbon particles: 
[RIBBONTRAILS] }
[RIBBONTRAILS] ribbonTrails {
[RIBBONTRAILS]      source particles: 
[RIBBONTRAILS]      source particles: <no source emitter>
VFX/ChunksStorage.swift
Chunk should be available for allocation!
Too many chunks (
) for the empty class 
VFX/ClassComponentStorage.swift
 must be added first
_TtCV3VFX18ParticleInitScript6System
invalid ScriptLocation discriminator
ParticleInitScriptRunner
texturecube<half>
custom shader is missing a fragment function
VFX_USER_CODE_LINE
: Function vertex_main() doesn't output $vertex_out.crworld_position (mandatory in VisionOS) or $vertex_out.position (legacy).
: Function vertex_main() doesn't output $vertex_out.crworld_position which is mandatory on VisionOS.
call doesn't make sense on 
vertex out property '
material property '
vfx_custom_shader_%SCRIPT_ID%::vfx_fragment
vfx_custom_shader_%SCRIPT_ID%::vfx_vertex
#import <metal_stdlib>
using namespace metal;
// VFX_USER_CODE_STARTS_HERE
kernel void generate_texture(uint2 thread_id [[ thread_position_in_grid ]],
                             constant float3 &color [[  buffer(0) ]],
                             texture2d<half, access::write> out [[ texture(0) ]])
     out.write(half4(color.x, color.y, color.z, 1.0), thread_id);
Particle Update Script
Particle Initialization Script
Generated Trigger Script
Emitter Update Script
// Custom Shader
namespace {
Generated Graph Script
correspondingExternalIndex
_TtCO3VFX21GraphV1CodeGeneration9Resources
customTypes
customTypesPerType
userTemplateLibraries
conversionSnippets
compositionSnippets
decompositionSnippets
initialized
vfxGraphTemplatesDir
onUserTemplatesChanged
codeSourceSnippetRemapping
codeSourceSnippetRemappingWithValueTransfer
CodeGen.Resources: initUserTemplates error: 
CodeGen.Resources: initUserTemplates: Library '
' doesn't contain any valid templates and so will be ignored
CodeGeneration.Resources: invalid Composition snippet: 
CodeGeneration.Resources: invalid Composition snippet with more than one input paramter: 
CodeGeneration.Resources: invalid Composition snippet with more than one output paramter: 
CodeGeneration.Resources: .inc file 
 referencing missing library
 can't be loaded!?
_TtCV3VFX23ParticleOrientationInit6System
_TtCV3VFX23ParticleOrientationInit9GPUSystem
SetOrientation.CPU
particle_set_orientation
SetOrientation.GPU
_TtCV3VFX8Bindings5Value
Bindings setter - invalid binding named "
VFX/Bindings.swift
invalid type! trying to set a 
Bindings getter - invalid binding named "
_TtC3VFX19ResourceUsageSystem
pointCacheGeneratorQuery
emitterQuery
sdfGeneratorQuery
textureShaderAssetQuery
initScriptQuery
updateScriptQuery
allTexturesQuery
animatedTextureQuery
allEmitterQuery
allNonDirtyMaterialsQuery
meshParticleRendererQuery
preCreateDefaultMaterialDone
Component should be present since it's returned by the protocol enumerator
TextureLoadingOptions
VFX/EntityManager.swift
stale entity handle
##VFX-Default-Material##
couldn't lookup entity: 
ResourceUsage
VFX/ParticleFloat3Init.swift
SetTargetPosition.CPU
SetAngularFactor.CPU
SetLinearFactor.CPU
particle_set_float3_generic
SetTargetPosition.GPU
SetAngularFactor.GPU
SetLinearFactor.GPU
_TtC3VFX11QueryBuffer
_TtCV3VFX14EmitterRuntime7Storage
neighborSearchMap
_TtC3VFX21EmitterPrepareRuntime
subSpawnQuery
addRuntimeQuery
addOrRemoveInverseWorldQuery
updateRuntimeQuery
subSpawnStateQuery
removeOrphanedRuntimeQuery
_TtC3VFX13EmitterWarmup
eventQuery
_TtC3VFX24ParticleEmitterTransport
active Entity consistency issue:
VFX/ComponentCategory.swift
EmitterDescription.PhysicsSimulation
_TtC3VFX20ScriptCompilerSystem
gpuDevice
compileQueue
compileOperationQueue
pendingCompilationStatuses
cachedBuildResults
builderEmitterScript
builderGraphScript
builderSimpleScript
builderKernelScript
builderShaderScript
builderParticleInitScript
builderParticleUpdateScript
builderTriggerScript
isCompilationDisabledByUserDefault
ScriptCompilerSystem: no device, aborting
couldn't build script at load: 
couldn't build script at load: compilationDisabled
 is not a supported location at the moment
buildScript
couldn't load function: 
VFX/ScriptBuilderSystem.swift
no library to load from
no MTLDevice, can't compile GPU code
ScriptCompileAttempt<TriggerScript>
ScriptCompileAttempt<ParticleUpdateScript>
ScriptCompileAttempt<ParticleInitScript>
ScriptCompileAttempt<ShaderScript>
ScriptCompileAttempt<MetalFunctionScript>
ScriptCompileAttempt<SimpleScript>
ScriptCompileAttempt<GraphScript>
ScriptCompileAttempt<EmitterScript>
CompilationResult
disable-compilation
script wasn't bound to runtime: 
couldn't convert 
 to swift identifier
couldn't find function for script 
couldn't find metal library for script 
. Try setting VFXWorldLoaderOptionMetalLibraryURL
couldn't find metal function for script 
couldn't find compiled script for 
couldn't prepare function for script of type 
ParticleUpdateScript
ParticleInitScript
couldn't generate code: 
compilation is disabled by user default
compilation is in-flight
xcode-select is not pointing to a valid Xcode
compilation cancelled
_TtCV3VFX6Attach6System
_TtCV3VFX6Attach9GPUSystem
Local system are by definition fully attached
AttachSystem.CPU
AttachSystem.GPU
v8@?0
VFX.VFXEntityObject
_TtC3VFX15VFXEntityObject
@32@0:8q16@24
referencedEntityManager
localEntityManager
_isTombstoned
Cannot add an Entity that is already in a world
We are trying to move an entity object from one entityManager to another. this is not supported. we are leaking tombstoned entities
NSCopying
_TtC3VFX11PrivateHeap
_TtC3VFX10BufferPool
enableLogging
currentFrameBuffers
unusedBuffers
allocatedBuffer
frameAllocatedSize
currentAllocatingFrame
peakAllocationsRingBuffer
constantBufferAlignment
isActive
constantBuffers
allocateConstantBuffer 
label value 
 buffers (total: 
recycleBufferPools used:
Buffer too small 
Buffer too large 
VFX/BufferPool.swift
Failed allocating MTLBuffer of 
removeSmallestUnusedBuffer 
 buffers will be destroy.
allocateConstantBuffer failed copying particle_surface_material_constants
particle_surface_vert
particle_surface_frag
particle_surface_deferred_frag
oldRendererClassIndex
_TtCV3VFX26ParticleRibbonLengthUpdate6System
Missing material runtime
missing sorted order buffer
VFX/ParticleSystems_Render.swift
PrepareIndirectDraw
allocateConstantBuffer failed copying MTLDrawPrimitivesIndirectArguments
allocateConstantBuffer failed copying MTLDrawIndexedPrimitivesIndirectArguments
missing prevNext buffer
allocateConstantBuffer failed copying object_constants
unsupported here
ParticleRendererPrepare
ParticleRibbonSystem
should not reach encodedLength != bufferLength
This is an unsupported texture type
q16@0:8
_TtC3VFX14MaterialSystem
updateMaterialsQuery
meshRendererDependenciesQuery
quadRendererDependenciesQuery
custom_mesh_vert
custom_fragment_error
Invalid texture type provided at id 
VFX/TypeConstraint.swift
no reference to a generic in 
particle_point_vert
particle_point_frag
particle_point_deferred_frag
_TtCO3VFX21GraphV1CodeGeneration11ContextExit
ContextExit(uid: 
_paramsOnHold
_onHold
_mute
callback
_TtC3VFX11CancelTuple
isCancelled
tuple
_TtC3VFX10CancelList
_TtCV3VFX21ParticleColorOverLife6System
_TtCV3VFX21ParticleColorOverLife9GPUSystem
particle_color_over_life
ParticleColorOverLife.GPU
_TtC3VFX18SceneAssetRegistry
registry
urlCache
entityManager
_TtC3VFX23SceneAssetRegistryEntry
asset
_entityManager
_rootNode
loaded
idToEntity
entityToId
counter
sceneIdentifier
setParent: found circular dependency - ignoring
warning: backward compatibility not ensured with this file (multiple mesh per scene reference)
_TtC3VFX22GenericComponentSystem
updateBlock
Default
.renderTransparent
.prepareDrawCalls
_TtC3VFX13VFXViewLegacy
v28@0:8B16@?20
v20@0:8C16
d16@0:8
v24@0:8d16
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
delegateImpl
coreView
scene
T@"_TtC3VFX8VFXScene",N,&,Vscene
T@"_TtC3VFX9VFXEffect",N,&,Veffect
T@"_TtC3VFX13VFXCoreCamera",N,&,VpointOfView
TC,N
T@"NSColor",N,&
TQ,N
scaleFactor
Td,N
lowLatency
_TtCC3VFX13VFXViewLegacy15VFXViewDelagate
vfxView
v24@?0@"<MTLCommandBuffer>"8@"<MTLTexture>"16
_TtC3VFX21UpdateWorldAABBSystem
onlyLocal
updateWorldFromLocal
UpdateWorldAABB
_TtC3VFX28KernelScriptReflectionSystem
dirtyScript
dirtyKernelReflection
shaderAssetQuery
reflectionQuery
_TtC3VFX16ShaderFileSystem
dirtySharedFileQuery
vfx_draw_fullscreen_triangle_vertex
failed to make a compute pipeline state for function 
TextureResourceQueue
B16@0:8
used
argument
MTLTextureBinding
textureDataType
particle_obb_collider
particle_aabb_collider
particle_box_vert
particle_box_frag
particle_box_deferred_frag
_TtC3VFX14RandomSeedNode
_TtC3VFX10RandomNode
_TtC3VFX15RandomTypedNode
_TtC3VFX12Random01Node
_TtC3VFX20RandomUnitVectorNode
_TtC3VFX17RandomInRangeNode
_TtC3VFX30RandomPositionInsideSphereNode
_TtC3VFX28RandomPositionInsideCubeNode
_TtC3VFX20PerlinNoiseFloatNode
_TtC3VFX21PerlinNoiseFloat2Node
_TtC3VFX21PerlinNoiseFloat3Node
_TtC3VFX21PerlinNoiseFloat4Node
vfx_perlin_noise(%0, %1, %2, %3)
PerlinNoiseFloat4
vfx_perlin_noise(%0, %1, %2)
PerlinNoiseFloat3
vfx_perlin_noise(%0, %1)
PerlinNoiseFloat2
vfx_perlin_noise(%0)
PerlinNoiseFloat
(&%0) - vfx_float3_half_one())
2.0f * %size * (
VFX/Nodes+Random.swift
vfx_random01_float4
vfx_random01_float3
vfx_random01_float2
RandomPositionInsideCube
vfx_robust_normalize(
(&%0) - vfx_float3_half_one()) * vfx_sqrt(
(&%0) * %radius)
RandomPositionInsideSphere
%range.lower_bound + float(vfx_random01(&%0) * float(%range.upper_bound - %range.lower_bound))
vfx_float4_half_one
vfx_float3_half_one
vfx_float2_half_one
VFX.RandomTypedNode
VFX.RandomSeedNode
No seed available
particle_sphere_collider
_TtC3VFX24AssetManagerPathResolver
_TtC3VFX12AssetManager
pathResolver
effectIDToAssetsDirectory
authoringFileManager
_TtC3VFX16AssetFileManager
temporaryDirectory
persistedDirectory
isPerformingChangesLevel
referencesToWrite
allReferencesWithTemporaryCopy
Couldn't register effect from existing asset manager
AssetManagerPathResolver - failed to resolve url for 
VFX.AssetManagerPathResolver
com.apple.vfx.document-assets
_TtC3VFX6Bitset
capacity
wordcount
fillBackwardMode
_TtC3VFX8DrawCall
primitiveType
indexBuffer
indexType
indexCount
indexOffset
simplifiedIndexBuffer
vertexOffset
instanceCount
instanceOffset
stencilReferenceValueFront
stencilReferenceValueBack
winding
cullMode
clipMode
inverseWinding
tessellationFactorBuffer
meshThreadsPerGrid
threadsPerObjectThreadgroup
threadsPerMeshThreadgroup
needPBR
isAdditive
renderStatesPerVariant
arguments
indirectBuffer
_TtC3VFX21DrawCallDisposeSystem
destroyDrawCalls
Can't resolve sampler at scope 
VFX/DrawCall.swift
Missing texture 
VFX/TexturePool.swift
Unable to allocate render target
Render pass format not ready, layer: "
v36@?0r^{?=[4]}8i1620
allocateConstantBuffer failed copying view_constants
Missing renderer
DrawCall Dispose
_TtCV3VFX12EmitterShape9CPUSystem
_TtCV3VFX12EmitterShape9GPUSystem
EmitterShape.CPU
EmitterShape.GPU
particle_cylinder_collider
vfx_make_int_range
vfx_make_float_range
vfx_script_array<
not available in metal
cannot represent optionals in code
 needs to be resolved before generating code
We don't mean to generate code with doubles
lighting_parameters
resourceReference
textureDescriptor
colorRampTexture
_TtC3VFX38ParticleFlockingAlignOrientationSystem
_TtC3VFX42ParticleFlockingAlignVelocityOnPlaneSystem
_TtC3VFX37ParticleFlockingConstrainToAreaSystem
_TtC3VFX38ParticleFlockingConstrainToPlaneSystem
_TtC3VFX36ParticleFlockingFlyTowardsAreaSystem
_TtC3VFX26ParticleFlockingSolverData
grid
_TtC3VFX28ParticleFlockingSolverSystem
_TtC3VFX34ParticleFlockingSpeedControlSystem
[FLOCKING] the solver grid is in an invalid state.
[FLOCKING] solver grid {
[FLOCKING]      cell count: 
[FLOCKING]  particle count: 
[FLOCKING]     grid extent: 
[FLOCKING]       cell size: 
[FLOCKING] average density: 
 particles per cell
particles with NaN position: 
_TtCV3VFX24ParticleTextureFrameInit6System
_TtCV3VFX24ParticleTextureFrameInit9GPUSystem
SetTextureFrame.CPU
particle_set_texture_frame
SetTextureFrame.GPU
_TtC3VFX7ECSNode
_TtC3VFX8TimeNode
_TtC3VFX13DeltaTimeNode
_TtC3VFX16IsFirstFrameNode
_TtC3VFX13_ECSValueNode
entityKeyPath
_TtC3VFX15SetECSValueNode
_TtC3VFX24InspectorSetECSValueNode
_TtC3VFX15GetECSValueNode
_TtC3VFX18_ParticleValueNode
_TtC3VFX20SetParticleValueNode
_TtC3VFX20GetParticleValueNode
_TtC3VFX7_OnNode
_TtC3VFX12OnUpdateNode
_TtC3VFX16OnFirstFrameNode
_TtC3VFX19OnParticleStageNode
stage
_TtC3VFX13OnTriggerNode
eventType
_TtC3VFX18OnMouseTriggerNode
_TtC3VFX16OnKeyTriggerNode
_TtC3VFX17OnTickTriggerNode
_TtC3VFX23LogDebugPassthroughNode
message
_TtC3VFX12LogDebugNode
_TtC3VFX14ECSStorageNode
_TtC3VFX16CurveTextureNode
_TtC3VFX20ColorRampTextureNode
colorRamp
_TtC3VFX15EntityAssetNode
_TtC3VFX23ImplicitEntityAssetNode
_TtC3VFX15ImportErrorNode
_TtC3VFX9StateNode
stateRef
_TtC3VFX17ImplicitStateNode
_TtC3VFX12SetStateNode
_TtC3VFX8TickNode
vfx_script_get_state_by_id(%script_context, "
vfx_script_set_current_state(%script_context, %1, %2);
vfx_script_tick(%script_context, %1, %2);
VFX.ImportErrorNode
ImplicitEntityAsset
VFX.EntityAssetNode
ColorRampTexture
VFX/Nodes+ECS.swift
auto %temp0 = %1;
vfx_script_graph_log("
auto %temp0 = %0;
vfx_script_graph_log("
, &%temp0);
auto %r0 = %0;
VFX.OnTriggerNode
numbers of outputs and names mismatch (
VFX.OnParticleStageNode
OnParticleUpdate
VFX._ParticleValueNode
VFX._ECSValueNode
 cannot be represented with AnyType
%script_context.isFirstFrame
vfx_script_clock_is_first_frame(%script_context)
%script_context.dt
vfx_script_clock_delta_time(%script_context)
%script_context.time
(float)vfx_script_clock_time(%script_context)
code gen not implemented for: 
_TtC3VFX19PrepareLightsSystem
directionalUnshadowedQuery
directionalQuery
pointUnshadowedQuery
pointQuery
spotUnshadowedQuery
spotQuery
ambientQuery
allocateConstantBuffer failed copying REVFXIBLConstants_s
allocateConstantBuffer failed copying REVFXLightConstantBuffer_s
PrepareLights
emitsDoubleSided
_TtCV3VFX13ParticleNoise9GPUSystem
_TtC3VFX19ParticleNoiseSystem
velQuery
posVelQuery
VFX/ParticleNoise.swift
failed compiling noise kernel
Failed creating texture!
computeNoiseTexture
ShaderTexture : texture type 
gen3D_curl_noise
gen2D_curl_noise
gen1D_curl_noise
particle_noise_3d
particle_noise_2d
particle_noise_1d
particle_white_noise
ParticleNoise.GPU
_TtC3VFX18EntityManagerActor
_TtC3VFX13EntityManager
isInAuthoringMode
componentRegistry
entityFamilies
allEntityClasses
chunkTable
chunkStorageLock
allComponentDataChunks
recycledChunksData
recycledChunksDataHistory
workerComponentStorage
sceneComponentStorage
groupsCount
copyQueue
copyGroup
transactionDepth
hasRunloopTransaction
didBeginTransactionAtLastFrame
signpostID
counters
_entries
entityCapacity
generationSalt
firstFreeIndex
scheduler
queryManager
commandQueues
updateQueue
nextFrameBlocks
nextFrameBlocksLock
runtimeThread
_invalidated
canUseImGUI
imGUIEnabled
syncLock
asyncQueue
backgroundingSignalLock
applicationInBackground
sceneInBackground
lockChunksOnQueryForEach
shouldNotifyEntityEvent
stateDidChangeFn
mainGraphScriptGroup
logger
renderer
replicationStream
scriptingConfig
clock
updateHandlerIndex
activeStatesPerEffects
currentState
isInPrepare
peerPid
Invalid Entity: 
== ENTITY INFO ==
Entity class count: 
Used chunk space: 
Empty chunk count: 
Trying to add a reference an an invalid Entity 
ChunksStorage
lock EntityManager
QueryManagerLock
shouldScriptsInModel
VFX/VFXScene+VFX2.swift
setupVFX2RendererIfNeeded must be called before setupVFX2RenderOutput
sphereIntersectionFunction
default component registry was not installed. VFXInitialize() must be called beforehand to make sure it's setup.
VFX4
B52@0:8@16B24@28@36^@44
VFX5
v24@0:8^v16
resourceManager
T@"VFXMTLResourceManager",N,R
VFX6
v40@0:8d16d24q32
v32@0:8@?16Q24
v20@0:8f16
B40@0:8{CGSize=dd}16d32
B40@0:8@16@24@32
B32@0:8@16@24
v48@0:8@16Q24Q32q40
opaqueEntityManager
T^v,N,R
deltaTime
speedFactor
time
VFX7
v88@0:8{?=[4]}16q80
VFX8
v28@0:8q16B24
VFX9
v32@0:8^v16q24
68@0:81632f48f52f56f60I64
q24@0:8q16
v32@0:8q16q24
remapTable
VFX10
sourceReplicationDelegate
T@,N,W
destinationReplicationDelegate
^{CGImage=}16@0:8
v24@0:8^{CGImage=}16
v80@0:8{?=[4]}16
{?=}16@0:8
v32@0:8{?=}16
clientTexture
T@"<MTLTexture>",N,&
clientCGImage
T^{CGImage=},N,&
intersectionFunctions
particleHeaderBuffer
particleHeaderBufferOffset
particleDataBuffer
particleDataBufferOffset
opacity
T{?=},N
isEnabled
textureAbsolutePath
Division results in an overflow
Division by zero
stored unpacked 
type hashValue 
name type 
offset element 
GraphScriptingConfig
PropagateDirtiness
ScriptStateRestoration<TriggerScript>
ScriptRuntime<TriggerScript>
ScriptStateRestoration<ParticleUpdateScript>
ScriptRuntime<ParticleUpdateScript>
ScriptStateRestoration<ParticleInitScript>
ScriptRuntime<ParticleInitScript>
ScriptStateRestoration<ShaderScript>
ScriptRuntime<ShaderScript>
ScriptStateRestoration<MetalFunctionScript>
ScriptRuntime<MetalFunctionScript>
ScriptStateRestoration<SimpleScript>
ScriptRuntime<SimpleScript>
ScriptStateRestoration<GraphScript>
ScriptRuntime<GraphScript>
ScriptStateRestoration<EmitterScript>
ScriptRuntime<EmitterScript>
MetalScriptReflection
center population 
description value 
OrthographicCamera
PerspectiveCamera
MeshReferenceAsset
index weight 
index nearestZ 
SkinnedMeshBinding
name arg 
NodeVisibilityController
NodeTransformController
v24@?0@"VFXAssetNode"8^B16
InverseWorldTransform
TextureGPURuntime
i20@0:8I16
{?=CCCC}16@0:8
pixelFormat
_TtCO3VFX21GraphV1CodeGeneration10SubContext
    inParamNamesAndTypes: 
    outParamNamesAndTypes: 
SubContext(template:
_TtC3VFX9LODSystem
cameraComponents
setupLODState
rootsWithLOD
childrenWithLOD
_TtC3VFX16GenericLODSystem
pointOfCullingQuery
lodQuery
VFX/RenderGraphPasses.swift
Missing compute kernel
Custom compute
Unexpected renderTarget data access for compute kernel.
Unable to get compute pass pipeline for 
Unable to retrieve texture for 
Compute dispatch not implemented
Unable to prepare compute pass 
Missing fragment function
Custom frag
Unable to get render pass pipeline for 
_TtCO3VFX21GraphV1CodeGeneration7Context
_resources
subContextMap
templates
bakedTemplates
decodingErrors
onUserTemplatesChangedUUID
switchCaseValuePrefix
templateRemapping
_TtCCO3VFX21GraphV1CodeGeneration7Context14GenerationData
settings
domain
libFunctionsToInclude
templatesAlreadyDefined
errorInfos
allSwitchCases
hasTimeDependentSnippet
addAllInputsAndOutputs
cleanupCodeArr
baseObjectUidsAlreadyDeclaredDuringCodeGeneration
No valid conversion snippet found to convert 
SwitchCaseValue:
supportedDomains
not supported in 
Ignoring assignment from 
 because of Unknown baseType for inParameter
 because of Unknown baseType for outParameter
CodeGen.Context.clone() error found when calling asJsonString()
Context:
    contextEntries: 
    contextExits: 
    subContexts: 
    variables: 
    variableRefs: 
    arraySequences: 
    templates: 
    snippets: 
    customCodeSnippets: 
    typedArraySnippets: 
    staticSwitchSnippetMap: 
    userObjects: 
    assignments: 
): unable to connect 
hasMissingAssignment
): unable to connect [
Graph Editor: missing support for decoding error: 
CodeGen.Context.init.decodeSnippets: type mismatch (
Graph Editor: impossible/invalid assignment to ContextExit baseType: 
 parameterName: 
Graph Editor: impossible/invalid assignment to ContextEntry baseType: 
Can't find template named '
 also not found in bakedTemplates: 
useBakedTemplate
CodeGen.Context: function 
 couldn't be found!
Missing generateCode for 
CodeGen.Context.generateCode: subContext named '
' uses a template that can't be found.
 vfx_script_debug_record_scalar(scriptContext, "
 vfx_script_debug_record_array(scriptContext, "
CodeGen.Context.generateAllAssignmentsCode: no default value found for parameter type '
default:switchCaseOptions
:switchCaseOptions
CodeGen.Context.rename: impossible to rename 
 (invalid contextExitMap)
 (invalid contextEntryMap)
CodeGen.Context.addSubContext: couldn't find template '
useBuiltinTemplate
category libraryName templateSetName signature 
CodeGen.Context.findTemplate (via UID): invalid template description: 
CodeGen.Context.findTemplate: invalid template description: 
Code.Resources.findTemplate: invalid 'temp' template category
CodeGen.Context.findTemplate: unable to find template used by subContex: 
_TtCO3VFX21GraphV1CodeGeneration11MetadataSet
CodeGeneration.Metadata.defaultValueAsMetadata: no default value set for type: 
TextureSampler1D
RandomNumberGenerator
CodeGen.Resources: getCustomType unknown customType: 
CodeGeneration.Metadata.init: unsupported type
CodeGeneration.Metadata.init: unsupported type 
CodeGeneration.encode: unsupported type 
Metadata.operator ==: missing support for type: 
usedByUnsupportedDomain
CodeGeneration.anyType: unsupported type 
_TtC3VFX12CameraSystem
orthoNoProjQuery
perspNoProjQuery
orthoQuery
perspQuery
_TtC3VFX21PreUpdateCameraSystem
_TtC3VFX21PreRenderCameraSystem
_TtC3VFX19PrepareUpdateSystem
_TtC3VFX19PrepareRenderSystem
povQuery
projQuery
setGlobalConstants: Missing Constant Buffer
setViewDependantAndGlobalConstants: Missing Global Constant Buffer
setViewDependantAndGlobalConstants: Missing View Constant Buffer
allocateConstantBuffer failed copying frame_constants
pass_constants_encoder
PrepareUpdateSystem failed: missing pass_constants_encoder function
global_constants_encoder
PrepareUpdateSystem failed: missing global_constants_encoder function
PrepareUpdate
PrepareRender
PreRenderCamera
PreUpdateCamera
No RenderOutput presents. Cannot deduce viewport size
VFX/CameraSystem.swift
VFX/EntityManager+ECSProperties.swift
keyPath of wrong root type: 
_TtC3VFX22VertexLayoutDescriptor
_TtC3VFX14AttributeTable
_TtC3VFX4Mesh
meshIdentifier
_TtC3VFX14MeshBinaryData
meshSerializationRegistry
missing shared MTLBuffer
missing mesh binary data
VertexLayout Attributes:
unable to load mesh binary data at 
unable to load mesh: 
unable to load mesh binary data (empty) at 
unsupported format for scale: 
Cannot access private memory
unsupported index type
Decoding error: 
MTLFunction
_TtCO3VFX21GraphV1CodeGeneration12ContextEntry
ContextEntry(uid: 
VFX/ComponentProperty.swift
All serializable component types should have a meta type
unknown property 
deleted property 
invalid property id: 
All serializable component types should have a meta type 
_TtC3VFX18SmoothMotionSystem
patchQuery
_TtC3VFX23ReplicationStreamSystem
_TtC3VFX17ReplicationStream
stream
remapper
destination
srcDelegate
dstDelegate
replicateByDefault
replicationEnabled
cfxWorld
_TtC3VFX23BidirectionalRemapTable
mappingTablesLock
entityMapTable
reversedEntityMapTable
_TtC3VFX15DefaultRemapper
destinationEntityManager
isReversed
ModificationStream
VFX.DefaultRemapper
VFX/ReplicationStream.swift
v16@?0d8
_TtC3VFX11EntityClass
family
storageLayout
classComponentstorage
classHash
notifySystemsOnEntityEvent
isAnonymous
isGraveyard
hasUnstableOrdering
isMonoChunk
isTrackingDirty
hasDirtyPropagation
Detected entity with both Anonymous and dirty tracked component which is incompatible: 
VFX/EntityClass.swift
value components must be pod!
 is not compatible with components of same unpacked type 
EntityClass Count
CPU time
Created Entities
Destroyed Entities
Chunk Total Size
Component Bytes Copied
Component Bytes Moved
Component Bytes Destroyed
Component Bytes Init With Default
Component Bytes Init With Source
Component Bytes Swapped
ParticleDataUploadedToGPU
Draw bucket size
_TtCV3VFX24ParticleLocalBoxCollider6System
VFX.VFXREREnderer
VFX.VFXREScene
commandQueue
v24@0:8q16
i16@0:8
v20@0:8i16
{?=[2]}16@0:8
@48@0:8@16@24@32^@40
@40@0:8@16@24@32
@24@0:8^@16
v48@0:8@16@24q32@?40
v32@0:8d16@24
v64@0:8163248
v128@0:8163248648096112
q112@0:81632{?=[4]}48
q96@0:816{?=[4]}32
v120@0:8q162440{?=[4]}56
v104@0:8q1624{?=[4]}40
rootEntity
cameraEntity
cancellables
isPrepared
uuid
worldFromScene
sceneFromWorld
sceneScale
reloadBlock
remappingTable
T@,N,&,VtransientDrawCall
Tq,N,Vuuid
Tf,N,VsceneScale
opaqueECS
Ti,N
TI,N
drawCallCount
worldBoundingBox
T{?=[2]},N,R
shouldUseDrawCallHandler
needsCollisionPlanes
[VFX] Error: can't find binding 
[VFX] Error: binding 
 has an unknown type
Unable to assign texture ownership to pid 
_TtCV3VFX25ParticleAngleVelocityInit6System
_TtCV3VFX25ParticleAngleVelocityInit9GPUSystem
SetAngleVelocity.CPU
particle_set_angle_velocity
SetAngleVelocity.GPU
_TtC3VFX15ColorRampSystem
allColorRampsQuery
unregisteredColorRampsQuery
allColorRampsWithRuntimeQuery
allModifiedColorRampsWithRuntimeQuery
_TtC3VFX14ColorRampCache
ColorRampsUpload
particle_line_vert
particle_line_frag
particle_line_deferred_frag
_TtC3VFX11VFXCoreView
v20@0:8B16
v32@0:8{CGSize=dd}16
delegate
renderOutput
sampleCount
stereoMode
effectID
sizeDirty
drawableSize
resizingMode
TB,N
acceptsFirstResponder
VFX.VFXCoreView
init(frame:)
Explicit render
_TtC3VFX20EmitterCullingSystem
VFX/ParticleSystems.swift
unsupported GPU dispatch on stage 
_TtC3VFX28ParticleAngleEvolutionSystem
_TtC3VFX10EasingNode
_TtC3VFX15EasingFloatNode
_TtC3VFX15CubicEaseInNode
_TtC3VFX16CubicEaseOutNode
_TtC3VFX18CubicEaseInOutNode
_TtC3VFX19QuadraticEaseInNode
_TtC3VFX20QuadraticEaseOutNode
_TtC3VFX22QuadraticEaseInOutNode
_TtC3VFX17QuarticEaseInNode
_TtC3VFX18QuarticEaseOutNode
_TtC3VFX20QuarticEaseInOutNode
_TtC3VFX17QuinticEaseInNode
_TtC3VFX18QuinticEaseOutNode
_TtC3VFX20QuinticEaseInOutNode
_TtC3VFX13SinEaseInNode
_TtC3VFX14SinEaseOutNode
_TtC3VFX16SinEaseInOutNode
_TtC3VFX19ExponentialEaseNode
_TtC3VFX16PhysicalEaseNode
_TtC3VFX13PowerEaseNode
_TtC3VFX14BounceEaseNode
vfx_bounceEase(%t, %duration, %frequency, %decay)
vfx_pow(%t, %power)
vfx_physicalEase(%t, %anticipate, %midPoint, %bounces)
(1.0 - exp(%exponent * %t)) / (1.0 - exp(%exponent))
(1.0f - exp(%exponent * %t)) / (1.0f - exp(%exponent))
-(vfx_cos(M_PI_F * %0) - 1) / 2
-(vfx_cos(M_PI * %0) - 1.0f) / 2.0f
vfx_sin((%0 * M_PI_F) / 2)
vfx_sin((%0 * M_PI) / 2.0f)
1 - vfx_cos((%0 * M_PI_F) / 2)
1.0f - vfx_cos((%0 * M_PI) / 2.0f)
vfx_quinticEaseInOut(%0)
QuinticEaseInOut
vfx_quinticEaseOut(%0)
vfx_quinticEaseIn(%0)
vfx_quarticEaseInOut(%0)
QuarticEaseInOut
vfx_quarticEaseOut(%0)
vfx_quarticEaseIn(%0)
vfx_quadraticEaseInOut(%0)
QuadraticEaseInOut
vfx_quadraticEaseOut(%0)
QuadraticEaseOut
vfx_quadraticEaseIn(%0)
vfx_cubicEaseInOut(%0)
vfx_cubicEaseOut(%0)
vfx_cubicEaseIn(%0)
VFX/Nodes+Easing.swift
_TtC3VFX22ParticleCopyDataSystem
particle_volumetric_frag
_TtCV3VFX17ParticleAngleInit6System
_TtCV3VFX17ParticleAngleInit9GPUSystem
SetAngle.CPU
particle_set_angle
SetAngle.GPU
VFX/Mesh+Convert.swift
Unsupported format 
_TtCV3VFX23ParticleOpacityOverLife6System
colorAgeQuery
_TtCV3VFX23ParticleOpacityOverLife9GPUSystem
OpacityOverLife
particle_opacity_over_life
ParticleOpacityOverLife.GPU
_TtC3VFX12StringDumper
indent
_TtC3VFX13RuntimeThread
wakeupEvent
didSwapQueueEvent
runtimeThreadId
runtimeUpdateHandler
__startupShutdownEvent
ownsLock
lock
clientEventQueue
serverEventQueue
qlock
requestStop
threadLogger
threadid
_isSuspended
RuntimeThread wakeup event
RuntimeThread did swap queue
RuntimeThread startup/shutdown event
RuntimeThread work queue lock
Runtime thread creation failed: unknown error 
Runtime thread creation failed: the attributes value specified is invalid
Runtime thread creation failed: the caller does not have appropriate permission to set the required scheduling parameters or scheduling policy
Runtime thread creation failed: the system lacked the necessary resources to create another thread, or the system imposed limit on the total number of threads in a process
com.apple.vfx.runtime-thread
VFX/Scripting+Mapping.swift
these parameters are not valid parameters for a trampoline
couldn't lookup 
couldn't find TextureCPURuntime on 
couldn't lookup emitter: 
Space not supported for 
not implemented on cpu scripts
VFX/ComponentPropertyRewriter.swift
missing @_specialize
these parameters are not valid for the GPU
missing gpu runtime for texture compute
mismatching texture type (expected:
defaultWhiteTexture2D
VFXNode references is not supported on GPU
VFXNode access on GPU is not implemented
bufferDataSize
TB,N,R
_TtC3VFX18StartCaptureSystem
_TtC3VFX17StopCaptureSystem
_TtC3VFX17RenderImGUISystem
Cannot start capture: 
startCapture
stopCapture
RenderImGUI
RenderOutput
/tmp/vfxTestResults/vfx_snapshot.gputrace
prepare
Cannot create prepare dummy texture 
PrepareCB
Cannot create prepare dummy depth texture 
MM-dd-yyyy_HH-mm
Performance trace disabled
Chunk size (all): 
Used chunk space (all): 
Empty chunks (all): 
Texture size (all): 
_TtCV3VFX25ParticleColorOverVelocity6System
color time 
_TtC3VFX14ClampBoxSystem
_TtC3VFX20GlobalClampBoxSystem
worldDimension
Box Clamp
Global Box Clamp
_TtC3VFX9LogicNode
_TtC3VFX10SelectNode
_TtC3VFX21UnaryBoolOperatorNode
_TtC3VFX7NotNode
_TtC3VFX9IsOddNode
_TtC3VFX10IsEvenNode
_TtC3VFX23BinaryLogicOperatorNode
_TtC3VFX6OrNode
_TtC3VFX7AndNode
_TtC3VFX8NandNode
_TtC3VFX7NorNode
_TtC3VFX13IsGreaterNode
_TtC3VFX20IsGreaterOrEqualNode
_TtC3VFX12IsLesserNode
_TtC3VFX19IsLesserOrEqualNode
_TtC3VFX11IsEqualNode
_TtC3VFX14IsNotEqualNode
IsGreaterOrEqual
VFX/Nodes+Logic.swift
_TtC3VFX24PrimitiveGeneratorSystem
primitiveQuery
Primitive Generator
 does not have any child
_TtC3VFX17kClusteringSystem
kClustering
irradiance radiance 
Missing Lighting Buffer
Missing IBLConstants Buffer
DefaultLinearDepthTex
MTLAllocation
NSObject
unexpected priority: 
_TtC3VFX12QueryManager
queryInfoByHandle
matchingQueriesByEntityClass
_TtC3VFX13RunloopThread
thread
runloop
_TtCC3VFX13RunloopThreadP33_C5453D25073BE51EF98804DB40F9E2866Thread
runloopSource
currentRunloop
startedCallback
v24@?0^{__CFRunLoopObserver=}8Q16
_TtCV3VFX29ParticleTextureFrameEvolution9GPUSystem
_TtC3VFX35ParticleTextureFrameEvolutionSystem
texQuery
texAgeQuery
particle_textureframe_evolution
ParticleTextureFrameEvolution.GPU
value index 
needsLinearDepth,
needsDepthBuffer,
needsNormalBuffer,
_TtC3VFX13GlobalsSystem
specMaxEssAvgTable
envProbeCubeArray
envProbeDiffuseArray
envProbeTextureArray
virtualProbeTextures
virtualProbeConstants
allocateConstantBuffer failed copying external_entity_constants
texturePrefilteredDiffuse
DefaultBlackCubeTexture
texturePrefilteredSpecular
 is not a buffer
 is not a structure
Size mismatch in view_constants 
view_from_crworld
proj_from_crworld
inverseViewProjectionMatrix
crInverseViewProjectionMatrix
crws_from_viewport
worldReferencePosition
renderTargetSize
useVertexAmplification
linearizationFactors
renderTargetDepthStencilFormatSampleCount
vrrMapPhysicalSizeArray
viewport_percents
vrrMapScreenSize
 in global_constants
 should be a texture in global_constants
 offset mismatch 
 should be a buffer pointer in global_constants
allocateConstantBuffer failed copying global_constants
crWorldToViewArray
crWorldToProjArray
crwsCameraPositionArray
viewportPercentsArray
crwsReferencePosition
clippingIndexSlice
btTextureReadIndex
portalCrossingPlane
environmentLightingWeight
allocateConstantBuffer failed copying external_scene_buffers
allocateConstantBuffer failed copying external_scene_constants
external_scene_buffers_encoder
PrepareUpdateSystem failed: missing external_scene_buffers_encoder function
external_scene_constants_encoder
PrepareUpdateSystem failed: missing external_scene_constants_encoder function
external_entity_constants_encoder
PrepareUpdateSystem failed: missing external_entity_constants_encoder function
_TtC3VFX8MathNode
_TtC3VFX22ArithmeticOperatorNode
_TtC3VFX28ArithmeticBinaryOperatorNode
_TtC3VFX7AddNode
_TtC3VFX7SubNode
_TtC3VFX7MulNode
_TtC3VFX7DivNode
_TtC3VFX13RemainderNode
_TtC3VFX12QuotientNode
_TtC3VFX8FModNode
_TtC3VFX7MinNode
_TtC3VFX7MaxNode
_TtC3VFX7PowNode
_TtC3VFX9ATan2Node
_TtC3VFX8StepNode
_TtC3VFX12DistanceNode
_TtC3VFX19DistanceSquaredNode
_TtC3VFX17IsAlmostEqualNode
_TtC3VFX16CrossProductNode
_TtC3VFX14DotProductNode
_TtC3VFX17LengthSquaredNode
_TtC3VFX29ArithmeticTernaryOperatorNode
_TtC3VFX8Min3Node
_TtC3VFX8Max3Node
_TtC3VFX14SmoothStepNode
_TtC3VFX10MulAddNode
_TtC3VFX9ClampNode
_TtC3VFX27ArithmeticUnaryOperatorNode
_TtC3VFX13ToRadiansNode
_TtC3VFX13ToDegreesNode
_TtC3VFX8SqrtNode
_TtC3VFX9FractNode
_TtC3VFX12OneMinusNode
_TtC3VFX8Pow2Node
_TtC3VFX8Pow3Node
_TtC3VFX9RoundNode
_TtC3VFX8SignNode
_TtC3VFX7AbsNode
_TtC3VFX9FloorNode
_TtC3VFX7LogNode
_TtC3VFX7ExpNode
_TtC3VFX8Exp2Node
_TtC3VFX9Exp10Node
_TtC3VFX7CosNode
_TtC3VFX7SinNode
_TtC3VFX8ASinNode
_TtC3VFX8ACosNode
_TtC3VFX8CeilNode
_TtC3VFX7TanNode
_TtC3VFX8ATanNode
_TtC3VFX10LengthNode
_TtC3VFX16IsAlmostZeroNode
_TtC3VFX12SaturateNode
_TtC3VFX18SignedSaturateNode
_TtC3VFX14NormalizedNode
_TtC3VFX15QNormalizedNode
_TtC3VFX13ConjugateNode
_TtC3VFX7QLnNode
_TtC3VFX8QExpNode
_TtC3VFX15EulerAnglesNode
_TtC3VFX13AxisAngleNode
_TtC3VFX8AxisNode
_TtC3VFX10QAngleNode
_TtC3VFX14NormalAxisNode
_TtC3VFX13ReduceSumNode
_TtC3VFX13ReduceMulNode
_TtC3VFX20OrthonormalBasisNode
_TtC3VFX7MixNode
_TtC3VFX14QTransformNode
_TtC3VFX11QLengthNode
_TtC3VFX11InverseNode
_TtC3VFX12QInverseNode
_TtC3VFX13TransposeNode
_TtC3VFX19TransformNormalNode
_TtC3VFX22TransformPosition3Node
_TtC3VFX22TransformPosition4Node
_TtC3VFX13TransformNode
_TtC3VFX20TranslateMatrix3Node
_TtC3VFX20TranslateMatrix4Node
_TtC3VFX16ScaleMatrix3Node
_TtC3VFX16ScaleMatrix4Node
_TtC3VFX19ProjectPositionNode
_TtC3VFX23TransformDirection3Node
_TtC3VFX23TransformDirection4Node
_TtC3VFX7TRSNode
_TtC3VFX19GetTranslation3Node
_TtC3VFX19GetTranslation4Node
_TtC3VFX15GetRotationNode
_TtC3VFX12RotationNode
_TtC3VFX13GetScale3Node
_TtC3VFX13GetScale4Node
_TtC3VFX16RotateVectorNode
_TtC3VFX8QPowNode
_TtC3VFX10LookAtNode
_TtC3VFX9SlerpNode
_TtC3VFX16SlerpLongestNode
_TtC3VFX9SquadNode
_TtC3VFX10BezierNode
_TtC3VFX19RotationBetweenNode
_TtC3VFX23RotationBetweenFastNode
_TtC3VFX14IsIdentityNode
_TtC3VFX9AngleNode
_TtC3VFX11Remap01Node
_TtC3VFX9RemapNode
_TtC3VFX15IsInClosedRange
(%2 >= %0) && (%2 <= %1)
InRangeInclusive
vfx_mix(vfx_remap_01(%4, %0, %1), %2, %3)
vfx_remap_01(%2, %0, %1)
vfx_angle(%0, %1)
vfx_quat_is_identity(%0)
vfx_quat_rotation_between_fast_(%0, %1)
RotationBetweenFast
vfx_quat_rotation_between
vfx_quat_bezier(%0, %1, %2, %3, %4)
vfx_quat_squad(%0, %1, %2, %3, %4)
vfx_quat_slerp_longest(%0, %1, %2)
vfx_quat_slerp(%0, %1, %2)
vfx_quat_look_at_(%0, %1)
vfx_quat_pow(%0, %1)
vfx_quat_rotate_vector(%0, %1)
vfx_get_scale(%0)
vfx_get_scale_2D(%0)
vfx_quat_(vfx_get_rotation(%0))
vfx_get_rotation(%0)
vfx_get_translation(%0)
vfx_get_translation_2D(%0)
auto %r0 = vfx_get_translation(%0);
auto %r1 = vfx_quat_(vfx_get_rotation(%0));
auto %r2 = vfx_get_scale(%0);
TransformDirection
vfx_transform_direction(%0, %1)
vfx_project_position(%0, %1)
vfx_scale(%0, %1)
vfx_translate(%0, %1)
vfx_transform(%0, %1)
vfx_transform_position(%0, %1)
TransformPosition
vfx_transform_normal(%0, %1)
vfx_transpose(%0)
vfx_quat_inverse(%0)
vfx_quat_length_(%0)
vfx_mix(%0, %1, %2)
simd_float3 %temp0 = vfx_float3_zero();
simd_float3 %temp1 = vfx_float3_zero();
vfx_orthonormal_basis(%0, &%temp0, &%temp1);
simd_float3 %r0 = %temp0;
simd_float3 %r1 = %temp1;
OrthonormalBasis
vfx_reduce_mul(%0)
vfx_reduce_add(%0)
vfx_quat_to_matrix3x3(%0).columns[2]
vfx_quat_angle(%0)
vfx_quat_axis(%0)
vfx_quat_to_axisangle_(%0)
vfx_quat_to_euler(%0)
vfx_quat_conjugate(%0)
vfx_quat_normalize(%0)
vfx_robust_normalize(%0)
vfx_saturate(%0)
vfx_is_almost_zero(%0)
(%0 / VFX_PI) * 180.0f
(%0 * VFX_PI) / 180.0f
vfx_clamp(%0, %1, %2)
vfx_muladd(%0, %1, %2)
vfx_smoothstep(%1, %2, %0)
vfx_max(%0, vfx_max(%1, %2))
max3(%0, %1, %2)
vfx_min(%0, vfx_min(%1, %2))
min3(%0, %1, %2)
simd_dot(%0, %0)
simd_dot(%0, %1)
simd_cross(%0, %1)
vfx_is_almost_equal(%0, %1)
vfx_distance_squared(%0, %1)
vfx_distance(%0, %1)
vfx_step(%1, %0)
vfx_atan2(%0, %1)
__tg_fmod(%0, %1)
, __tg_fmod(%0, %1), 
%1 == 0 ? 0 : (%0 / %1)
__metal_remainder
(%1) ? %0 / %1 : 
VFX/Nodes+Math.swift
_TtCO3VFX21GraphV1CodeGeneration17CodeSourceSnippet
searchLabel
tooltip
hasValue
deprecated
noOutputDeclarationCode
codeContainsUidIndexTag
valueType
libraryName
libraryColor
includeFunctionsDependencies
CodeSourceSnippet(name: 
, inParameters: [
], outParameters: [
CodeSourceSnippet.init(
): unsupported language'
CodeGen.CodeSourceSnippet: Error in 
 '##' missing from code: 
CodeGen.CodeSourceSnippet.codeStatementsWithoutOutputDeclaration: missing code for 
: defaultInParameter 
 but inParameterNames is empty
 used multiple times in 
 is not supported as ParameterType
 have invalidly named output parameters (
 have invalidly named input parameters (
: Generic Types defined but %TYPE% is never used anywhere
ALL_SIGNED_INT_TYPES
ALL_UNSIGNED_INT_TYPES
ALL_MATRIX_TYPES
_TtC3VFX13CullingSystem
Mesh colliders with sphere particles are only correct with uniform scaling
No positions in mesh
VFX/Mesh.swift
VFX/Scripting+Parsing.swift
call parameters are not currently implemented for metal
Invalid builtin type 
: expected texture
expected $/@/# declarator at: 
unrecognized parameter at: 
1st argument must be texture location
@property is only available on custom shaders
$fragment_out is only available on fragment shader
$vertex_out is available on custom shaders
$vertex_in is only available on vertex functions
$particle is not available on this on this script
could not parse $particle: 
$particle only support additional arguments in custom shaders
$particle.property(type=) can only be applied on position/orientation/scale/transform
$particle.index only supported in custom shaders for now
access to other emitters is not currently allowed in custom shaders
access to emitter properties is not currently allowed in custom shaders
emitter_to_crworld
world_reference_position
render_target_size
inverse_render_target_size
unrecognized builtin: '
spurious argument on '
' not supported on '
' is only available on shaders: 
unrecognized property '
unrecognized component '
extra parameters not allowed here
' is not valid value, use 'true' of 'false'
invalid component '
invalid property '
' is not a valid space
invalid property 
couldn't infer name from vertex output
unrecognized type: '
crworld_position
invalid vertex output property: '
' is reserved and cannot be used here
barycentric_coordinates
 for fragment input
 for fragment output
missing name argument for $material
invalid type for $material: '
expected $material at: 
" should be prefixed with 
' is not a valid address mode
' is not a valid filter mode
' is not allowed here
unexpected token: 
unrecognized character: 
_TtCV3VFX20ParticleLifeAndDeath6System
_TtC3VFX13BinaryDecoder
options
_TtC3VFXP33_90B01CB79DF47397B2208C87FE67637814_BinaryDecoder
codingPath
$__lazy_storage_$_unmanagedDecoder
stores
_TtCC3VFXP33_90B01CB79DF47397B2208C87FE67637814_BinaryDecoder10DataStream
keyedSources
_TtCC3VFXP33_90B01CB79DF47397B2208C87FE67637814_BinaryDecoder12UnkeyedStore
length
decoder
currentIndex
UnsafeMutableRawBufferPointer.copyMemory source has too many elements
VFX/BinaryDecoder.swift
_TtC3VFX18LensBlurPassSystem
allCamerasQuery
compute_downsample2
HORIZONTAL_BLUR_REAL
HORIZONTAL_BLUR_IM
RenderTarget HORIZONTAL_BLUR_IM invalid
RenderTarget HORIZONTAL_BLUR_REAL invalid
compute_downsample4
compute_downsample8
compute_lens_blur_horizontal_no_array_write
compute_lens_blur_vertical
compute_lens_blur_horizontal
LensBlurPass
VFX/AnyExtensions.swift
_TtCV3VFX16ParticleLifeInit6System
lifeAndAgeQuery
lifeQuery
_TtCV3VFX16ParticleLifeInit9GPUSystem
SetLife.CPU
particle_set_life
ParticleLifeInit.GPU
_TtC3VFX22WorkerComponentStorage
maxOffset
perWorkerStorage
_TtC3VFX33VFXBridgingRemapAndResolveContext
world
table
_TtC3VFX24CollectReferencesContext
references
_TtC3VFX12RemapContext
isDuplicating
uuidTable
_TtC3VFX19PrivateCommandQueue
workerIndex
stackAllocator
frameAllocator
currentIterationContext
pendingDirtyPropagationQueue
deferredOperations
immediateOperations
dirtyTrackingDisabled
stats
VFX/CommandQueue.swift
_TtC3VFX8CastNode
srcType
dstType
_TtC3VFX12AutoCastNode
VFX.CastNode
VFX/Nodes+Conversion.swift
canConvert() should have returned false for 
(%0.lower_bound, %0.upper_bound)
.enums should have been replaced before codegen
_TtC3VFX13BinaryEncoder
_TtC3VFXP33_1D356F8D984976FF2DBF33523074BD8D14_BinaryEncoder
makeNextUnkeyedRandomAccess
superStore
$__lazy_storage_$_unmanagedEncoder
_TtCC3VFXP33_1D356F8D984976FF2DBF33523074BD8D14_BinaryEncoder9DataStore
encoder
data
_TtCC3VFXP33_1D356F8D984976FF2DBF33523074BD8D14_BinaryEncoder20SingleValueDataStore
isSpecial
$__lazy_storage_$_keyStore
$__lazy_storage_$_unmanagedKeyStore
$__lazy_storage_$_valueStore
$__lazy_storage_$_unmanagedValueStore
subStores
useKeyHashing
_TtCC3VFXP33_1D356F8D984976FF2DBF33523074BD8D14_BinaryEncoder12UnkeyedStore
$__lazy_storage_$_dataStore
$__lazy_storage_$_unmanagedDataStore
$__lazy_storage_$_sizesStore
$__lazy_storage_$_unmanagedSizesStore
encodeSizeHeader
appending
Swift._DictionaryCodingKey
VFX/BinaryEncoder.swift
Unable to encode the given top-level value as a property list
_TtC3VFX6Logger
publisher
_TtC3VFX8OSLogger
_TtC3VFX12ThreadLogger
VFX/Logging.swift
_TtC3VFX22PredefinedConstantNode
_TtC3VFX6PiNode
_TtC3VFX9TwoPiNode
_TtC3VFX10HalfPiNode
_TtC3VFX11EpsilonNode
_TtC3VFX15Identity2x2Node
_TtC3VFX15Identity3x3Node
_TtC3VFX15Identity4x4Node
_TtC3VFX22IdentityQuaternionNode
VFX/Nodes+Constants.swift
Not supported on 
IdentityQuaternion
_TtC3VFX24BinaryCodingTypeRegistry
unwrappedParallizableTypes
_TtC3VFX9ArrayNode
_TtC3VFX16GetArraySizeNode
_TtC3VFX19GetArrayElementNode
auto %r0 = vfx_script_array<
%0.array[vfx_clamp(%1, 0, 
VFX.ArrayNode
_TtCV3VFX13ParticleSetID6System
destroyedParticleWithIDQuery
_TtCV3VFX13ParticleSetID9GPUSystem
ParticleSetID.CPU
ParticleSetID.GPU
_TtC3VFX21SceneComponentStorage
componentLocks
isInitializedBitset
storageLock
VFX/SceneComponentStorage.swift
 exceed the available SceneComponentSize: 
SceneComponent lock
invalid component id:
couldn't decode 
 (not Decodable)
_TtC3VFX15BloomPassSystem
bloom_down_sample
bloom_up_sample_color_grading
VFX/Bloom.swift
missing bloom_threshold
missing bloom_down_sample
missing bloom_up_sample_color_grading
RenderTarget BLOOM_TMP invalid
BloomPass
_TtCF3VFX25objCAppendOnDestroyActionFTP_FT_T__T_L_7Deleter
block
allocator
mtlTextureDescriptorCache
renderTargets
Could not allocate texture 
_TtC3VFX23KeyframeTimelineRuntime
keys
keyStride
times
evaluateFunc
evaluateSplineFunc
quadratic
particle_decal_vert
particle_decal_frag
_TtC3VFX11MDLImporter
skeletons
meshes
ignoring component: 
attach SkinnedMeshBinding: 
MDLMesh.vertexBuffer
 does not have a material
MDLMesh.subMesh0
VFX/MeshImport+MDL.swift
Unknown attribute name: "
Layout out of bound
unsupported type
MDL material convertion: property not implemented yet: 
ColorProperty not implemented yet: 
string is illformed: 
Unsupported jointAnimation Type: 
Missing skeleton
Missing renderer in import
unsafeStorage
dispatchLock
future
token callback 
group callbacks result 
VFX/Future.swift
Cannot transition to 
_TtCV3VFX13ParticleForce9CPUSystem
_TtCV3VFX13ParticleForce9GPUSystem
ParticleForce.GPU
_TtC3VFX12LookAtSystem
_TtCV3VFX17ParticleIntegrate6System
positionQuery
_TtCV3VFX17ParticleIntegrate9GPUSystem
ParticleIntegrate.CPU
particle_integrate
ParticleIntegrate.GPU
VFXEffect support for remoteEdition has been removed
Trying to access the effect 
VFX/VFXEffect.swift
 after it has been removed, or its scene was released
 has no root entity
_TtC3VFX9VFXEffect
@32@0:8@16@24
v40@0:8q16@24@?32
v48@0:8q16@24q32@?40
v56@0:8q16@24q32q40@?48
v28@0:8@16B24
entityObject
onEffectRestartSubject
_enabled
_tombstoned
rootObjectID
T@"_TtC3VFX8VFXScene",N,W,Vscene
T@"<_TtP3VFX17VFXEffectDelegate_>",N,&,Vdelegate
Tq,N,Vversion
allowRemoteEdition
bindings
isTombstoned
cameras
Found unexpected CAKeyframeAnimation content. Expecting [NSNumber] or [CGColor].
_TtC3VFX5Graph
VFX.HolographicSession
HolographicRender
vfx.holographic.autostart.on.
_TtC3VFX18HolographicSession
renderSettings
display
quiltTexture
v40@0:8@16{CGSize=dd}24
MTKViewDelegate
v40@0:8@"MTKView"16{CGSize=dd}24
v24@0:8@"MTKView"16
S16@0:8
v20@0:8S16
T@"<MTLBuffer>",N,&,Vbuffer
TI,N,Vlength
TQ,N,Vformat
TS,N,Voffset
TS,N,Vstride
v24@0:8@?16
v32@0:8^v16@?24
C16@0:8
16@0:8
drawCall
aabb
_isDepthOnly
_writesColor
_writesSeparateDepth
_needsLinearDepth
_drawsForBlur
_isAdditive
_materialType
reProvidedBuffers
reProvidedTextures
handler
renderPassName
renderPassIdentifier
emitterIdentifier
customHandler
T@?,N,R
hasCustomHandler
TC,N,VrenderPassIdentifier
writesColor
writesSeparateDepth
needsLinearDepth
isDepthOnly
drawsForBlur
materialType
Ti,N,R
v24@?0@"<MTLRenderCommandEncoder>"8@"<VFXREDrawCallContext>"16
VFXRERenderTargetInfo
Q24@0:8q16
vrrEnabled
depthStencilPixelFormat
stencilPixelFormat
T,N,R
depthOnly
renderInGBuffer
outputsNormal
renderMode
VFXStencilInfo
frontFaceTest
T@"MTLStencilDescriptor",N,R
backFaceTest
frontReferenceValue
TC,N,R
backReferenceValue
@"MTLStencilDescriptor"16@0:8
_TtC3VFX15VFXCoreImporter
_TtCC3VFX15VFXCoreImporter13AnimationInfo
node
entity
_TtCC3VFX15VFXCoreImporter18VFXImporterContext
meshCache
materialCache
dataCache
animations
geometryCount
topLevelObjects
unsupported element data type 
unsupported element primitive type 
unsupported vertex layout (non-float)
unsupported vertex layout: 
 components per vector
VFXImport - light type not supported: 
invalid node path
failted to flatten mesh
unsupported animation keyPath: 
CameraEffectColorGradingController
CameraEffectColorFringeController
CameraEffectVignettingController
bridgedComponentNames
_TtC3VFX30ShadableShaderModifierObserver
v48@0:8@16@24@32^v40
shadable
propertyCache
attenuationDistance
shadowSampleCount
projectionTransform
projectionTransformInverse
worldTransformInverse
shoulderStrength
Chromatic Transform
Parametric Model
angularVelocityFactor
_vfx_torqueAsImpulse
_vfx_forceAsImpulse
albedo intensity
normal intensity
displacement intensity
bridgedObjectIdentifier
VFX.ShadableShaderModifierObserver
 has no component 
VFXBehaviorSupport
behaviorGraph
T@"VFXBehaviorGraph",N,&
@"VFXBehaviorGraph"16@0:8
v24@0:8@"VFXBehaviorGraph"16
.*?:(\d+):(\d+):\s(.+?):\sVFX_USER_CODE_LINE:(\d+):\s(.+)$
VFX/ScriptDiagnostic.swift
.*?:(\d+):(\d+):\s(.+?):\s(.+)$
.*?:\s(.+?):\s(.+)$
_TtC3VFX16CustomParameters
 is not storable as ShaderParameter named 
 is not compatible with 
Trying to set a texture on 
VFX/ShaderParameters.swift
uploadCustomParameters
Could not create (Argument) Buffer for material
decoding error in (Desc in _DA1F6ABE44DAF343DDC91EC1F37617D9)
particle_primitive_vert
particle_primitive_
_TtC3VFX38VectorRenderSystemRenderPipelineStates
rect2DDesc
disc2DDesc
roundedRect2DDesc
roundedRectStrokeDesc
roundedRectStrokeShadowDesc
shadowRoundedDesc
passFormat
_TtC3VFX18VectorRenderSystem
rectShape
discShape
roundedNoStroke
roundedWithStrokeColorWidth
roundedWithStrokeColorWidthShadow
Vector Render
vector_shadow_vert
vector_shadow_frag
particle_aoBox_vert
particle_aoBox_frag
depth32Float_stencil8
depth24Unorm_stencil8
bc7_rgbaUnorm_srgb
VFX/Metal+Extensions.swift
Unsupported dataType
Unsupported pixelFormat: 
waitUntilCompleted
TextureType not supported
ushort4Normalized
ushort3Normalized
ushort2Normalized
ushortNormalized
short4Normalized
short3Normalized
short2Normalized
uchar4Normalized
uchar3Normalized
uchar2Normalized
uint1010102Normalize
int1010102Normalize
 is not a valid texture data type
Unhandled RE encoding of MTLBlendFactor
OneMinusSourceColor
SourceAlphaSaturated
OneMinusSourceAlpha
OneMinusSource1Color
OneMinusSource1Alpha
OneMinusDestinationColor
OneMinusDestinationAlpha
OneMinusBlendColor
OneMinusBlendAlpha
DestinationColor
DestinationAlpha
isRoughnessMetalnessPacked
dollySensitivity
rotationSensitivity
worldOrbitTarget
_TtCV3VFX30ParticleTargetFromPositionInit6System
ParticleTargetFromPositionInitSystem
VFX/Graph+Lowering.swift
Cannot be resolved
_TtC3VFX24FluidSpheresRenderSystem
_TtC3VFX23FluidAbsorbRenderSystem
_TtC3VFX21FluidBlurRenderSystem
_TtC3VFX26FluidCompositeRenderSystem
FluidSpheresRender
FluidAbsorbRender
FluidBlur
FluidCompositeRender
VFX/PointCache+PLY.swift
binary_little_endian
unsupported type 
malformed file: could not read vertex #
 != (vertex|face|intrinsic|extrinsic)  '
unsupported format: '
version != 1.0 '
_TtC3VFX12DisplayClock
tickHandlers
tickHandlersForThisFrame
displayLink
dispatchSource
isRenderClock
paused
VFX/DisplayClock.swift
Unable to create dispatch source
Unable to create display link
i48@?0^{__CVDisplayLink=}8r^{?=IiqQdq{CVSMPTETime=ssIIIssss}QQ}16r^{?=IiqQdq{CVSMPTETime=ssIIIssss}QQ}24Q32^Q40
Unable to set current display
DisplayClock.tickHandlers
_TtC3VFX12TextureCache
operationQueue
asyncGroupRequests
textureEntryByKey
defaultSampler
defaultSamplerRepeatTrilinear
defaultSamplerClampMipNearest
defaultSamplerRepeatMipNearest
defaultSamplerRepeatSMipNearest
defaultSamplerMirrorRepeatMipNearest
defaultTextures
defaultNoiseTextures
groupID
Failed loading VFXBRDF in Bundle
VFX/TextureCache.swift
Can't wait cache entry in non loading state
Can't set texture for cache entry in non loading state
Can't perform fetchTexture on non loaded cache entry
Can't fetch texture 
Calling waitAsyncGroup on missing group id 
Can't perform purgeReferenceCount on non loaded cache entry
lock TextureCache
== TEXTURE CACHE ==
Total texture size: 
_TtCV3VFX26ParticleTargetFromPosition6System
VFX11
_TtCV3VFX17ParticlePivotInit6System
_TtCV3VFX17ParticlePivotInit9GPUSystem
SetPivot.CPU
particle_set_pivot
SetPivot.GPU
_TtCO3VFX21GraphV1CodeGeneration10BaseObject
orgInParameterNames
orgInParameterTypes
outParameters
orgOutParameterNames
orgOutParameterTypes
domains
CodeGen.BaseObject.copyDefaultValuesToComposedTypes: unsupported type: 
CodeGen.BaseObject.copyDefaultValuesToDecomposedTypes: unsupported type: 
CodeGen.Context.extractValuesFromFloatBasedTypes: unsupported type (
CodeGen.Context.extractValuesFromFloat3BasedTypes: unsupported type (
CodeGen.Context.extractValuesFromFloat4BasedTypes: unsupported type (
CodeGen.Context.extractValuesFromIntBasedTypes: unsupported type (
CodeGen.BaseObject.extractValuesFromFloat3BasedTypes: unsupported type: 
CodeGen.BaseObject.copyValuesFromFloatBasedTypes: unsupported type: 
CodeGen.BaseObject.copyValuesFromIntBasedTypes: unsupported type: 
:switchCaseEnumName
VFX/VectorField.swift
VectorField file is busted
Couldn't create the VectorField buffer
_TtC3VFX15SceneFileSystem
loadFileRuntime
_TtC3VFX14MeshFileSystem
modelRenderersQuery
allMeshParticleRendererWithoutCollectionQuery
allMaterialsWithoutCollectionQuery
allMaterialsWithCollectionQuery
_TtC3VFX19MeshReferenceSystem
SceneFile
mesh file asset legacyUpdate 
MeshFile
failed to locate scene with identifier 
failed to locate mesh with identifier 
failed to locate geometry in cloned entity
failed to locate mesh in cloned entity
MeshReference
SDF collider need only supports 2D and 3D Signed Distance Fields.
SDF colliders with sphere particles are only correct with uniform scaling
particle_sdf_2d_collider
_TtCV3VFX12ParticleDrag9GPUSystem
_TtC3VFX18ParticleDragSystem
ParticleDrag.GPU
_TtC3VFX24DistanceConstraintSystem
DistanceConstrainTargetFromPosition
MTLLibrary
@32@0:8Q16^@24
_TtCV3VFX24ParticleColorOverTexture6System
VFX/AnyCoder+TypeCoder.swift
ParticleFluidSolver2DSolver
ParticleSpawnState
ParticleFlockingSolver
GrowEmitterRuntime
_TtC3VFX11BuiltinNode
_TtC3VFX7NilNode
_TtC3VFX15ImplicitNilNode
_TtC3VFX14NoopReturnNode
_TtC3VFX17NoopReturnAnyNode
_TtC3VFX14NoopActionNode
_TtC3VFX12ConstantNode
holder
_TtC3VFX20ImplicitConstantNode
_TtC3VFX7DotNode
_TtC3VFX12_ComposeNode
_TtC3VFX11ComposeNode
_TtC3VFX19ImplicitComposeNode
_TtC3VFX13DecomposeNode
_TtC3VFX21ImplicitDecomposeNode
_TtC3VFX18PartialComposeNode
_TtC3VFX26ImplicitPartialComposeNode
_TtC3VFX15FlowControlNode
_TtC3VFX6DoNode
_TtC3VFX14ImplicitDoNode
_TtC3VFX6IfNode
_TtC3VFX8NoopNode
_TtC3VFX16ImplicitNoopNode
_TtC3VFX16EnumConstantNode
_TtC3VFX24ImplicitEnumConstantNode
auto %r0 = vfx_script_curve_create(
    %script_context,
    
(simd_float4[]) {}
auto %r0 = vfx_script_color_ramp_create(
    %script_context,
    
VFX/Nodes+Base.swift
cannot decode value of type: 
 is not Codable??
VFX.EnumConstantNode
ImplicitPartialCompose
ImplicitDecompose
VFX._ComposeNode
ImplicitConstant
VFX.NoopReturnNode
VFX.ConstantNode
_TtC3VFX10URLWatcher
presenter
_TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter
lastModificationDate
shouldReplicate
VFX.Presenter
NSFilePresenter
_TtC3VFX18DebugCullingSystem
isMenuItemBoundToEnabled
_TtC3VFX14DebugVFXSystem
_TtC3VFX15DebugInfoSystem
_TtC3VFX18DebugDrawingSystem
_TtC3VFX20WireframeLayerSystem
CullingDebug
debug_color_box_vert_noind
v44@?0824I40
VFX Debug
Debug Info
DebugDrawing
WireframeLayer
debug_color_line_vert
Un Mult Blending
Shoulder Strength
Threshold smoothness
Use high quality
Field of view###2041
Subsurface Radius
Enable anisotropy
Rolling Friction
Affected by Gravity
Angular Velocity Factor
Continuous Collision Threshold
ContactTest group
Resting Threshold
Angular Resting Threshold
Falloff Exponent
Enable Screen Space Reflections
Lighting Environment
_TtCV3VFX25ParticleColorOverPosition6System
_TtCO3VFX21GraphV1CodeGeneration13ParameterBase
owner
type
_TtCO3VFX21GraphV1CodeGeneration11ParameterIn
_TtCO3VFX21GraphV1CodeGeneration12ParameterOut
ParameterBase(name: 
_TtCV3VFX27ParticleOpacityOverVelocity6System
OpacityOverVelocitySystem
VFX/AnyType+Codable.swift
cannot serialize this type! (
@72@0:8@16{?={CGSize=dd}{CGSize=dd}}24@56@64
_TtCV3VFX15ParticleCollide9CPUSystem
eventClass
emitterProperties
emitter_from_world
emitterDeltaTime
_TtCV3VFX15ParticleCollide9GPUSystem
ParticleColliders.CPU
ParticleColliders.GPU
Only big endian ktx are supported
Unknow internalFormat 
 is not supported on this device 
overflow reading slice[
Only compressed ktx are supported
file is not a KTX
KTX file seems too small or is not a KTX
@24@0:8Q16
{?=QQ}24@0:8@16
headless
maxTransferRate
: cannot log value of type: 
scripting: invalid particle index
scripting: invalid particle index (invalid chunk)
scripting: invalid particle index (index in chunk)
ParticleEmission
ParticleMetalness
ParticleRoughness
ParticleParentID
VFX/RenderFunctions.swift
unsupported stage or stage combination: 
_TtC3VFX12ShadowSystem
VFX/Shadows.swift
Missing FrameConstantsStorage
Missing FrameConstantsStorage.frameConstantsBuffer
_TtC3VFX10CodeLoader
moduleName
libraryPath
ownsDlHandle
dlHandle
metalLibrary
commandBuilder
_TtC3VFXP33_C4E2DBBBFC07D2822B3288C0270C06A815SwiftCodeLoader
_TtC3VFXP33_C4E2DBBBFC07D2822B3288C0270C06A811CCodeLoader
_TtC3VFX24MetalToolchainCodeLoader
libname
_TtC3VFXP33_C4E2DBBBFC07D2822B3288C0270C06A818MetalAPICodeLoader
sourceURL
main
couldn't load metal function: 
loading metallib at 
abcdefghijklmnopqrstuvwxyz
creating metallib for 
CodeLoader: couldn't create temp directory: 
creating universal binary 
VFX/CodeLoader.swift
subclass should implement
not supported on this class
symbol not found 
image load error: 
Compilation error: 
Serialization error: 
_TtC3VFX15CompositeSystem
VFX/Composite.swift
Cannot access features outside a render phase
Composite
_TtC3VFX12VortexSystem
_TtC3VFX24ParticlePrepareGPUSystem
_TtC3VFX25ParticlePostInitGPUSystem
_TtC3VFX19ParticleGPUDownload
onReadyToCopy
InitNewParticlesWithParentEmitter
allocateConstantBuffer failed copying particle_init_with_parent_uniforms
InitNewParticles
initNewParticles: missing particle_init_newly_created
compactData - missing particle_compact_data
allocateConstantBuffer failed copying particle_update_counters_uniforms
allocateConstantBuffer failed copying update_life_uniforms
particleSystemGPU::updateLife missing particle_update_life
allocateConstantBuffer failed copying SIMD3<UInt32>
prepare_dispatch_indirect_1D
prepare_indirect_draw
prepare_indirect_draw_indexed
prepare_indirect_draw_mesh
particle_reset_live_dead_counter
particle_update_counters
particle_data_realloc
prepare_sort_dispatch
copy_final_order
particle_update_life
particle_compact_data
particle_init_newly_created
particle_init_newly_created_with_parent_emitter
particle_copy_transient_data
generate_prevnext
ParticlePostInitSystem.GPU
_TtC3VFX12SkeletonData
restTransforms
jointsParents
inverseBindTransforms
_TtC3VFX17SkeletonAnimation
translations
_TtC3VFX23SkeletonAnimationSystem
processAnimations
_TtC3VFX14SkeletonSystem
updateSkeleton
_TtC3VFX14SkinningSystem
_TtCV3VFX20ParticleVelocityInit6System
_TtCV3VFX20ParticleVelocityInit9GPUSystem
ParticleVelocityInitSystem
particle_set_velocity
SetVelocity.GPU
_TtC3VFX9Scheduler
enableRecording
currentJobID
currentJobName
recurrentJobs
orderedRecurrentJobs
jobQueueForThisFrame
pendingJobsToEnqueueForThisFrame
pendingJobsToEnqueueForThisFrameOnly
groupsToUnregister
liveQueryCountByJobID
needsRescheduling
needsReschedulingForThisFrame
dependenciesByJob
schedulerEventsRecordedDuringLastFrame
queriesRecordedDuringLastFrame
schedulerEventsRecordedDuringThisFrame
queriesRecordedDuringThisFrame
simulationTimeScale
VFX/Scheduler.swift
lock-scheduler
_TtCV3VFX27ParticleAngularVelocityInit6System
_TtCV3VFX27ParticleAngularVelocityInit9GPUSystem
SetAngularVelocity.CPU
particle_set_angular_velocity
SetAngularVelocity.GPU
_TtC3VFX30ParticleOpacityEvolutionSystem
_TtCV3VFX22ParticleIntegrateAngle6System
angleQuery
ParticleIntegrateAngle.CPU
_TtCV3VFX19ParticleGrowEmitter6System
GrowEmitterSystem
_TtC3VFX19SceneKitAssetSystem
scenesToUpdate
newNcenesToLoad
_TtC3VFX14SceneKitSystem
rendererQuery
placeSceneQuery
_TtC3VFX18ParticleSortSystem
Generate sorting keys
VFX/ParticleSortSystem.swift
Cannot generate sorting keys with .unsorted
Generate prevnext
Prepare sort dispatch arguments
Cannot cull transparent particles without colors
Cannot generate a sorting key with .unsorted
ParticleSort
_TtC3VFX11RenderGraph
features
internalColorPixelFormat
defaultRenderTargets
_TtC3VFX24RenderGraphSystemCleanup
_TtC3VFX17RenderGraphSystem
opaqueDrawCallsQuery
transparentDrawCallsQuery
authoringDrawCallsQuery
directionalLightQuery
pointLightQuery
spotLightQuery
ambientLightQuery
iblLightQuery
VFX/RenderGraphSystem.swift
RenderGraphCleanup
_TtC3VFX15SetActiveSystem
_TtC3VFX12HiddenSystem
addHiddenStateQuery
deactivateHiddenQuery
activateNonHiddenQuery
_TtC3VFX20SerializationContext
encodedVersion
codingEntity
codingComponent
componentsToAdd
isLoadingForAuthoring
codeBindingsMetadata
autoRecoverFromDecodingFailure
silentlySkipComponentOnEncodingFailure
logComponentCoding
codeComponentTypesWithTable
codePropertiesWithTable
onDeinit
entityTableByIndex
reversedEntityTable
encodedComponentTypes
encodedProperties
VFX/EntityManager+Serialization.swift
no serialization context installed
Can't find component 
 in TypeRegistry
EntityManager.unserialize
unhandled error in saveToJSON: 
corrupted FastDictCoder
couldn't decode entity reference: 
, using .null entity instead
decoding components shouldn't have thrown, decoding failure should fallback to creating a default component thanks to ComponentCoder!
failed decoding 
not actually Codable!
 is being serialized but it's neither marked NotCodable or Codable. Is it meant to be part of this EntityManager?
component should exist but is not there
unknown component: 
couldn't decode component of type 
, using default value instead (
 is not encodable
couldn't encode component of type 
, skipping. Error:
_TtC3VFX15_WorldValueNode
_TtC3VFX17SetWorldValueNode
_TtC3VFX26InspectorSetWorldValueNode
_TtC3VFX17GetWorldValueNode
_TtC3VFX18WorldReferenceNode
_TtC3VFX26ImplicitWorldReferenceNode
ImplicitWorldReference
VFX.WorldReferenceNode
makeScriptParameter: unresolved object: 
VFX._WorldValueNode
VFX/Nodes+World.swift
makeScriptParameter: invalid owner target, should have been replaced by actual target
_TtC3VFX22RenderGraphDiagnostics
graphID
rendererInfo
texturePreviewsByNodeID
_TtC3VFX15RenderGraphNode
_TtC3VFX15RenderWorldNode
_TtC3VFX18PublishTextureNode
_TtC3VFX11PresentNode
_TtC3VFX8BlurNode
_TtC3VFX9BloomNode
_TtC3VFX21ResolveResolutionNode
_TtC3VFX22RenderGraphTextureNode
_TtC3VFX21TextureDescriptorNode
_descriptor
_TtC3VFX18CustomFunctionNode
reflection
inputTypes
outputTypes
_TtC3VFX17ComputeShaderNode
_TtC3VFX18FullscreenQuadNode
TextureDescriptor
ResolveResolution
VFX.RenderGraphDiagnostics
CustomAuthoring.Final.
Material Parameters
MaterialParameters is legacy should be removed
_TtC3VFX19TransientPushSystem
colorQuery
scaleQuery
scale1Save
scale1Restore
scale2Save
scale2Restore
scale3Save
scale3Restore
TransientPush
_TtCO3VFX21GraphV1CodeGeneration11TemplateSet
CodeGen.TemplateLibrary: Unable to parse 
CodeGen.TemplateSet: invalid templateSet 
 some contexts share the same uid. TemplateSet will be ignored.
_TtCV3VFX16WrapAroundCamera6System
_TtCV3VFX16WrapAroundCamera9GPUSystem
usePerspective view projection bottomLeftNear bottomLeftFar 
Unsupported Camera Projection
WrapAroundCamera.CPU
particle_wrap_around_camera_orthographic
particle_wrap_around_camera_perspective
WrapAroundCamera.GPU
_TtC3VFX25PointCacheGeneratorSystem
loadPointCache
updatePointCacheFromModels
updatePointCache
uploadREMeshPointCache
_TtCV3VFX17PointCacheEmitter6System
_TtCV3VFX17PointCacheEmitter9GPUSystem
_TtCV3VFX17PointCacheSpawner6System
_TtCV3VFX17PointCacheSpawner9GPUSystem
PointCache format (
) is not supported.
PointCache loading error: 
VFX/PointCache.swift
Failed creating 
 buffer with size: 
elements count missing
format != binary '
' needs CPU Sampling to be used by PointCache.
pcache-jointindices
Failed creating pcache-jointindices buffer with size: 
pcache-jointweights
pcache-positions
Can't process a mesh without vertex layout
Only triangles are supported
PointCacheEmitter.CPU
No GPUPointCache on 
emitter_pointcache
PointCacheEmitter.GPU
PointCacheSpawner.CPU
pointcache_spawner
PointCacheSpawner.GPU
unsupported pcache file
invalid pcache file
propagatePendingDirtiness - entity 
 trying to dirtying itself
VFX/EntityManager+Export.swift
DoNotSave should have been filtered out already!
(let \w+ = \w+) as! (\w+)
VFX/VFXMigration.swift
$1.assumingMemoryBound(to: $2.self).pointee
isParticleComponent
(CurveF,Float)->(Float)
(CurveTexture,Float)->(Float)
(ColorRamp,Float)->(Float4)
(ColorRampTexture,Float)->(Float4)
_TtC3VFX20RenderCommandEncoder
MTLRenderCommandEncoderSPI
v48@0:8@16Q24@32Q40
v40@0:8f16f20f24f28Q32
v44@0:8@16f24f28f32Q36
v28@0:8B16Q20
v16@0:8
v56@0:8@16Q24Q32Q40Q48
v60@0:8@16Q24Q32Q40B48Q52
v52@0:8@16Q24Q32Q40B48
v88@0:8{?=QQQ}16{?={?=QQQ}{?=QQQ}}40
v92@0:8{?=QQQ}16{?={?=QQQ}{?=QQQ}}40I88
v48@0:8{?=QQQ}16q40
v24@0:8@?<v@?@"<MTLRenderCommandEncoderSPI>"Q>16
v48@0:8@"<MTLTexture>"16Q24@"<MTLSamplerState>"32Q40
v44@0:8@"<MTLSamplerState>"16f24f28f32Q36
v56@0:8@"<MTLTexture>"16Q24Q32Q40Q48
v60@0:8@"<MTLTexture>"16Q24Q32Q40B48Q52
v48@0:8@"<MTLTexture>"16Q24Q32Q40
v52@0:8@"<MTLTexture>"16Q24Q32Q40B48
v40@0:8@"<MTLResourceGroupSPI>"16Q24Q32
MTLCommandEncoderSPI
@"<MTLProgramAddressTable>"16@0:8
VFX/VFXRendererLegacy.swift
 not implemented
Unable to allocate pixel buffer
Unable to to create cgContext
Unable to to create image from cgContext
_TtC3VFX17VFXRendererLegacy
@40@0:8{CGSize=dd}16d32
@?16@0:8
effect
depthTexture
performMetalCaptureDuringSnapshot
T@"<MTLTexture>",N,&,Vtexture
T@"<MTLTexture>",N,&,VdepthTexture
T@"NSColor",N,&,VbackgroundColor
T@?,N,C
Scene must be set before taking snapshot
encode: scene is not set - ignoring
VFXRendererLegacy has no texture set
hasRenderableObjects: scene is not set
_TtC3VFX21RenderPipelineFactory
topologyClass
tesselation
renderFunctions
objectArguments
materialArguments
argumentsAreUpToDate
Missing reflection in 
Warning: Uniform mismatch between exported custom shader and VFX.Framework runtime for 
state desc 
Compilation failed: 
bufferBinding is invalid 
 failed to create ArgumentEncoder
usesVertexLayout,
functionConstantsLinkedToParameters,
customShaderVertexUsed,
customShaderFragmentUsed,
materialArgumentsAreBuiltin,
fragmentShaderIsDiscardingPixels,
fragmentShaderIsModifyingDepth,
MTLBinding
_TtCV3VFX24ParticleSizeOverVelocity6System
_TtC3VFX20HeapTextureAllocator
renderTargetHeap
maxHeapSizeNeeded
currentHeapSizeUsed
frameMaxHeapSizeNeeded
particle_ribbon_vert
particle_ribbon_frag
particle_ribbon_deferred_frag
particle_ribbon_quad_subdiv_vert
particle_ribbon_quad_vert
_TtC3VFXP33_A1A4C3D28342ECFED6A0B380DFA5196412ScopeChecker
diagnostics
flowOutputsByNode
dataOutputsByNode
nextScope
cfgScopes
scopes
Reading a value that is not available in all event flows
VFX/Graph+DiagnoseFlow.swift
why are we here? 
Must be part of event flow (e.g. OnUpdate)
Must be part of event flow: ParticleInit or ParticleUpdate
_TtC3VFX15HierarchySystem
dirtyWithParent
dirtyWithOverride
wrongDepthRoots
computeTransformFromPosOriScale
computeInverse
allChildrenMLH
allChildrenOLH
_TtC3VFX25SimplifiedHierarchySystem
_TtC3VFX29LastFrameWorldTransformSystem
computeLastFrame
addLastFrameToChild
_TtC3VFX34LastFrameWorldTransformSystem_vfx1
_TtC3VFX19StaticToFixedSystem
markAsFixed
StaticToFixed
_TtC3VFX11CurveObject
supportsSecureCoding
curve
serializedVFXBindingData
T@"NSData",N,R
serializedVFXBindingSize
VFX/Curve.swift
VFX.CurveObject
init()
unable to decode curve times
unable to decode curve values
NSSecureCoding
NSCoding
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
_TtC3VFX17MathTransformNode
_TtC3VFX24QuaternionFromNormalNode
_TtC3VFX33QuaternionFromFloat3AxisAngleNode
_TtC3VFX33QuaternionFromFloat4AxisAngleNode
_TtC3VFX29QuaternionFromEulerAnglesNode
_TtC3VFX15QuaternionXNode
_TtC3VFX15QuaternionYNode
_TtC3VFX15QuaternionZNode
_TtC3VFX35QuaternionFromRotationMatrix3x3Node
_TtC3VFX35QuaternionFromRotationMatrix4x4Node
_TtC3VFX32RotationMatrixFromEulerAngleNode
_TtC3VFX35RotationMatrix3x3FromQuaternionNode
_TtC3VFX35RotationMatrix4x4FromQuaternionNode
_TtC3VFX30RotationMatrixAroundCenterNode
_TtC3VFX21TRSFloat3x3MatrixNode
_TtC3VFX21TRSFloat4x4MatrixNode
vfx_make_transform(%rotation, vfx_make_float4(%translation, 1.0), %scale)
vfx_make_transform(%rotation, vfx_make_float4(%translation, 1.0f), %scale)
vfx_make_transform(%rotation, %translation, %scale)
vfx_make_rotation_around(%rotation, %center)
RotationMatrixAroundCenter
vfx_quat_to_matrix4x4(%quaternion)
RotationMatrix4x4FromQuaternion
vfx_quat_to_matrix3x3(%quaternion)
RotationMatrix3x3FromQuaternion
vfx_make_transform(%angleRadians, vfx_float2_zero(), vfx_float2_one())
RotationMatrixFromEulerAngle
vfx_quat_from_matrix4x4_(%rotation)
vfx_quat_from_matrix4x4(%rotation)
QuaternionFromRotationMatrix4x4
vfx_quat_from_matrix3x3_(%rotation)
vfx_quat_from_matrix3x3(%rotation)
QuaternionFromRotationMatrix3x3
vfx_quat_from_z_rotation(%angle)
_vfx_simd_quatf(vfx_quat_from_z_rotation(%angle))
QuaternionFromZRotation
vfx_quat_from_y_rotation(%angle)
_vfx_simd_quatf(vfx_quat_from_y_rotation(%angle))
QuaternionFromYRotation
vfx_quat_from_x_rotation(%angle)
_vfx_simd_quatf(vfx_quat_from_x_rotation(%angle))
QuaternionFromXRotation
vfx_quat_from_euler_(%eulerAngles)
vfx_quat_from_euler(%eulerAngles)
QuaternionFromEulerAngles
vfx_quat_from_axisangle_(%axisAngle)
vfx_quat_from_axisangle(%axisAngle)
QuaternionFromFloat4AxisAngle
vfx_quat_from_axisangle_(%axis, %angle)
vfx_quat_from_axisangle(%axis, %angle)
QuaternionFromFloat3AxisAngle
vfx_quat_from_normal_(%normal)
vfx_quat_from_normal(%normal)
QuaternionFromNormal
VFX/Nodes+Math+Transform.swift
_TtC3VFX15TransformBucket
transforms
colors
_TtC3VFX13RenderBuckets
renderContext
drawList
_TtC3VFX16MeshRenderSystem
_TtC3VFX16OpaqueRenderPass
opaqueQuery
_TtC3VFX21TransparentRenderPass
query
VFX/MeshRenderSystem.swift
VFX/Collections.swift
Hashmap keep growing, check your hash function, hopscotch hash table can't handle more then HopSize (
_TtC3VFX11CurveSystem
unregisteredCurvesQuery
allCurvesQuery
allCurvesWithRuntimeQuery
allModifiedCurvesWithRuntimeQuery
_TtC3VFX10CurveCache
_TtC3VFX13AuthoringNode
authoringID
userInfoData
inputs
_TtC3VFX16GraphNodeLibrary
defaultInstanceByType
entries
entriesByCategory
 conversion to ScriptScheduling is not yet supported
_TtC3VFX14BundleResolver
_TtC3VFX19AbsolutePathStorage
absoluteURL
_TtC3VFX13TextureSystem
dirtyTextureLoadingOptions
allTextureFilesWithoutWatcher
allTextureFiles
allTextureFilesWithoutDoNotUpload
allTextureArrayFiles
readTextureFile
readTextureArrayFile
allTextureFileWithCPURuntime
readTextureDataCPUQuery
readTextureCGImageQuery
updateGPURuntime
addRenderTargetRuntime
shaderAssetQueryAdd
shaderAssetQueryGen
convertToEquirectangularQuery
uploadCPUToGPUQuery
_TtC3VFX21TextureDownloadSystem
dirtyMissingCPURuntimeQuery
downloadGPUToCPUQuery
_TtC3VFX20TextureDiscardSystem
cleanupCPUQuery
cleanupGPUQuery
_TtC3VFX30TextureClientPlaceholderSystem
dirtyTextureClient
Add TextureCPURuntime on #
 is not synchronized
downloadGPUTextureToCPU
TextureDownloadToCPU
VFX/Texture.swift
Unsupported texture type 
defaultWhiteTextureCube
defaultWhiteTexture3D
defaultWhiteTexture1D
invalid storage option
attempting to set a non-entity to a texture parameter
Failed creating texture
loadGPUTextureAsIOSurface
CopyIOSurfaceFromURL returned invalid format 
 returned not supported by device
Failed creating texture from IOSurface with 
Texture Swizzling is not supported (IOSurface). 
loadIOSurface loading image at 
CopyIOSurfaceFromImage failed with 
uploadTextureToGPU
Failed creating texture with 
unpremultiply_texture_compute
unpremultiply_texture_fragment
NAFixPremultiply
Failed creating a render target texture to fix premultiply for 
Texture Swizzling is not supported. 
cannot support animated texture with depth > 1
Cannot get a nonSRGB pixel view on texture 
Cannot generate mipmaps for format 
generateMipmap
Unnamed-Animated
GenerateAnimationTexture
Should not try to copy anything with animations staying as atlas
Cannot generate mipmaps on 
loadTextureFromDisk
Failed loading image at 
failed to find referenced image named 
failed to load image named 
PixelFormat not natively supported -> 
 will be loaded and converted using ImageIO
Couldn't load the VectorField data
image referenced in usdz missing a query: 
image referenced in usdz has an malformed query 
: Can't load  images without ColorSpace
Buffer allocation failed
Failed creating the CGBitmapContextRef
) was resized from 
Could not allocate Texture 
TextureArrayCopySlices
Pixel format mismatch in TextureArray 
 are incompatible with ioSurface
premultiplyWithLinearAlpha,
unpremultiplied,
loadImage failed
 does not have a writable texture as argument
Cannot bind a texture with format 
Cannot generate a texture with a compressed pixel format 
CubeMapFromEqui[
equirectangularToCube
equirectangularToCubeMipGen
Received command buffer error status clear texture 
 evict from cache 
TextureDownload
TextureDiscard
TexturePlaceholder
TextureClientPlaceholder
VFX.AbsolutePathStorage
VFX.BundleResolver
Texture Upload error: 
Texture Loading error: 
MTLResource
_TtC3VFX17DeferredRendering
VFX/DeferredRendering.swift
Deferred Rendering
vertex_draw_quad_background
deferred_rendering_frag
MTLTexture
_TtC3VFX9VFXLoader
shouldLoadPrecompiledScripts
throwOnScriptLoadingFailure
skipScriptCompilation
allowLoadingEffectFromTheFuture
prepareEntityManager
loadWarning
invalid version number: 
initialBuildScripts
couldn't compile scripts at load-time: 
couldn't locate corresponding .swift/.cpp sources files
codesigning binary 
__vfx_get_script_table_
couldn't locate script table
missing symbol: 
. VFX couldn't load the embedded dylib. In case of sandbox error, you can add this entitlement for development: <key>get-task-allow</key><true/>
This is usually a client error. Is the .vfx swift file compiled as part of this app? If there is an embedded dylib, is it valid for the current architecture?
file is too old to load script without recompiling
scriptTable_1000
missing selector: scriptTable_1000
could not load embedded dylib: 
__DATA_CONST
VFXLoader.load
Trying to open a VFX2 project with VFX1's API. Please migrate to the VFXWorld API.
invalid scene filename: 
) file format is not supported anymore. This version of VFX Studio can only open files from version 
 included. Use a previous Beta to open this file and save it to latest.
 is from the future (framework version: 
, effect version: 
 file format is too recent: 
. This version of VFX Studio can only open files up to version 
The effect might be missing some features.
Saving is discouraged.
VFX/VFXLoader.swift
VFXInitialize() must be called before using VFXLoader
failed to load info.json from disk
_TtC3VFX17DecodingErrorNode
VFX.DecodingErrorNode
graph decoding error: 
: too many inputs
couldn't decode node: 
_TtC3VFX17DepthStencilCache
depthStencilStates
default
lock DepthStencilCache
%.2f,%.2f,%.2f,%.2f
_TtC3VFX16PrelitParameters
prelit_deferred_frag
_TtC3VFX18EventDisposeSystem
destroyEvents
newEvents
Events Dispose
_TtC3VFX13PBRParameters
albedo
emissive
pbr_deferred_fragment
pbr_fragment_depth_only
PBRParameterts.upload(material:) is missing a renderer
PBRParameterts.upload(material:) cannot allocate material buffer
defaultNormalMapTexture
Texture not ready? #
PBRParameterts size is too small
Q16@0:8
_TtC3VFX14ShaderRegistry
gen2D_verticalGradient
gen2D_linearGradient
gen2D_radialGradient
sunRadiusAndShape
_TtC3VFX13SDFFileSystem
addFileRuntime
_TtC3VFX18SDFGeneratorSystem
dirtySDFQuery
forceDoNotUploadQuery
 value cannot be converted to 
 because it is outside the representable range
Couldn't create the SDF buffer
Couldn't create the SDF texture
SDFFile
SDFGenerator only supports 2D texture with shaderRead usage
SDFGenerator on 
 cannot takes itself as a source
generate_sdf_initialize
generate_sdf_jfa_step
generate_sdf_finalize
SDFGenerator
_TtCV3VFX17ParticleColorInit6System
_TtCV3VFX17ParticleColorInit9GPUSystem
SetParticleColor.CPU
particle_set_color
SetParticleColor.GPU
_TtC3VFX14AuthoringGraph
didPerformMutation
nodesByID
allocateConstantBuffer failed copying particle_mesh_material_constants
particle_mesh_vert
particle_mesh_frag
particle_mesh_deferred_frag
_TtC3VFX23NavigationConfiguration
flyKeys
_TtCV3VFX23OrientationOverVelocity6System
_TtCV3VFX23OrientationOverVelocity9GPUSystem
particle_orientation_over_velocity
OrientationOverVelocity.GPU
_TtC3VFX18AssetCatalogSystem
allDirtyNamedAssets
Unable to find texture asset 
VFX/ShaderCache+PipelinesScript.swift
RenderPipelineState label is malformed
CounterClockwise
PerPatchAndPerInstance
couldn't write Metal pipelines script: 
Metal pipelines script written in "
vfx.mtlbinaryarchive
couldn't write Metal binary archive: 
Metal binary archive written in "
Unhandled RE encoding of MTLBlendOperation
ReverseSubstract
PerPatchControlPoint
FunctionConstantIndex
FunctionConstantName
_TtCV3VFX18ParticleUpdateAABB6System
ParticleUpdateAABB.CPU
_TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet
ArraySequenceSnippet.generateCode: couldn't find parameter named '
_TtC3VFX11LODResource
variations
maxSquaredDistances
visibleSquaredRange
_TtC3VFX14CanvasItemNode
_TtC3VFX16CanvasStickyNode
colorScheme
_TtC3VFX21CanvasStickyGroupNode
VFX.CanvasStickyNode
VFX.CanvasItemNode
_TtC3VFX22NoHeapTextureAllocator
numberOfFramesBeforePurge
unusedTextures
usedTextures
VFX/NoHeapTextureAllocator.swift
 was not in the allocator
_TtCV3VFX16ParticleSizeInit6System
_TtCV3VFX16ParticleSizeInit9GPUSystem
ParticleSizeInitSystem
particle_set_size
ParticleSizeInit.GPU
_TtC3VFX18DepthPrepareSystem
VFX/DepthPrepare.swift
Depth Prepare
downsample_depth
attempted to set a fragment texture that is memory less
_TtC3VFX12EntityFamily
classByClassHash
componentTypes
entityComponentTypes
classComponentTypes
packedComponentTypes
_componentsIndicesByID
familyIndex
familyHash
usePortalCrossing, 
usePortalClipping, 
enablePortalClipPlane, 
simplifiedMesh, 
enableAlphaFade, 
useBreakthrough, 
enableDitherFade, 
enableClipping, 
_TtC3VFX18IBLGeneratorSystem
PrefilteredDiffuseMap[
PrefilteredSpecularMap[
IBL texture should have mipmaps
vfx::generatePrefilteredDiffuseMap
vfx::generatePrefilteredSpecularMap
VFX.VFXCoreCamera
_TtC3VFX13VFXCoreCamera
{?=[4]}16@0:8
isOrthographic
T{?=[4]},N
lastFrameWorldTransform
fieldOfView
Tf,N,R
fStop
exposure
aperture
Tc,N,R
lower upper 
 not found on entity 
 has no meta type
failed to find property 
VFX/SDF.swift
Couldn't load the SDF data
MTLBuffer
^v16@0:8
MainThread
Thread
%s [%d]
Draw Call
Indirect Draw Call
Primitive Count
registerReferenceDescriptor
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraph.mm
registerResourceIdentifier
resolveResourcesDescriptorsIfNeeded
Color0
ResourceIdentifier
Last
Missing published resource 
 for reference resource 
Available resources are:
v24@?0Q8r^{ResourceReferenceAssociation={ResourceIdentifier=(?={?=SSI}Q)}^{Resource}^{Pass}}16
Uninitialized pass 
resolveReferences
initPassesAndResolveReferences
build
removeResource
findPublishedResource
searchPublishedResource
publishResourceReference
computeStages
Some passes are not part of the graph
cleanupPredecessorsBasedOnExplicitDependencies
tryResolveAmbiguousDependencies
computeSuccessors
Pass [%s]
-> %s
initializeDependencies
Cycle detected on [
collectResourcesWrite
Stage [
 reading "
 writing "
 Successors dependencies:
 -> 
resolveResourceDescriptors
FinalColor
Color1
Color2
Color3
Depth
from "
" pass
Blit
Compute
 Load
 Clear
 Resolve
Read
Write
Order
_sortSubgraphDependencies
Unable to resolve graph subgraph:
Can't resolve requirements for subgraph: 
Ambiguous dependency on pass [
] reading resource written by multiple passes:
> written by [
Must add explicit dependency on [
After cleanup
allocate
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/GPUResourceManager.mm
resolve
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProvider.mm
encodeIfNeeded
_OptimiseRenderGraph
/AppleInternal/Library/BuildRoots/4024688f-4b7b-11ef-b035-e2437461156c/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/VFXRenderGraph/Sources/RenderGraphProcessing.mm
Merge render passes
Merge compute passes
Remove copy passes
Merge blit passes
_AllocateResources
_DeduceResourcesUsage
vfx_draw_fullscreen_fragment_ms
texturecube_slices_copy_kernel
texturecube_copy_resample_kernel
Unnamed
RegisterResource
AGGREGATE_PASS
PUBLISH_PASS
@"<MTLResource>"8@?0
VFXRenderGraph/RenderGraph.swift
nil buffer slice
btOptimizedBvhNodeData
btQuantizedBvhNodeData
btBvhSubtreeInfoData
btQuantizedBvhFloatData
btCollisionObjectFloatData
Overflow in AABB, object removed from simulation
If you can reproduce this, please email bugs@continuousphysics.com
Please include above information, your Platform, version of OS.
Thanks.
Triangle
btConvexInternalShapeData
Box2d
btTriangleMeshShapeData
BVHTRIANGLEMESH
CapsuleShape
btCapsuleShapeData
btCollisionShapeData
btCompoundShapeChildData
btCompoundShapeData
Compound
btVector3FloatData
btConvexHullShapeData
Convex
ConvexTrimesh
CylinderY
btCylinderShapeData
btPositionAndRadius
btMultiSphereShapeData
MultiSphere
SPHERE
STATICPLANE
btStaticPlaneShapeData
btIntIndexData
btShortIntIndexTripletData
btCharIndexTripletData
btVector3DoubleData
btMeshPartData
btStridingMeshInterfaceData
TRIANGLEMESH
btConeTwistConstraintData
btHingeConstraintFloatData
btPoint2PointConstraintFloatData
btSliderConstraintData
btTypedConstraintData
btDynamicsWorldFloatData
btRigidBodyFloatData
hw.optional.neon_hpfp
bilinear
catmark
loop
Failure in TopologyRefinerFactory<>::Create() -- mesh contains no vertices.
Failure in TopologyRefinerFactory<>::Create() -- meshes without faces not yet supported.
Failure in TopologyRefinerFactory<>::Create() -- face with %d vertices > %d max.
Failure in TopologyRefinerFactory<>::Create() -- mesh contains no face-vertices.
Failure in TopologyRefinerFactory<>::Create() -- non-triangular faces not supported by Loop scheme.
Failure in TopologyRefinerFactory<>::Create() -- vertex with valence %d > %d max.
Failure in TopologyRefinerFactory<>::Create() -- maximum valence not assigned.
Failure in TopologyRefinerFactory<>::Create() -- invalid topology detected from partial specification.
Failure in TopologyRefinerFactory<>::Create() -- invalid topology detected as fully specified.
Failure in TopologyRefinerFactory<>::Create() -- face-varying channel %d has no values.
OSD PatchIndexBuffer
OSD PatchParamBuffer
MISSING_EDGE_FACES
MISSING_EDGE_VERTS
MISSING_FACE_EDGES
MISSING_FACE_VERTS
MISSING_VERT_FACES
MISSING_VERT_EDGES
FAILED_CORRELATION_FACE_VERT
FAILED_CORRELATION_FACE_EDGE
FAILED_ORIENTATION_INCIDENT_EDGE
FAILED_ORIENTATION_INCIDENT_FACE
FAILED_ORIENTATION_INCIDENT_FACES_EDGES
DEGENERATE_EDGE
NON_MANIFOLD_EDGE
%s - missing face-verts
%s - missing vert-faces
%s - face %d correlation of vert %d failed
%s - missing edge-faces
%s - missing face-edges
%s - face %d correlation of edge %d failed
%s - missing edge-verts
%s - missing vert-edges
%s - edge %d correlation of vert %d failed
%s - vertex %d cannot orient incident faces and edges
%s - vertex %d orientation failure at incident face %d
%s - vertex %d orientation failure at incident edge %d
%s - Error in eIndex = %d:  degenerate edge not tagged marked non-manifold
%s - edge %d with %d incident faces not tagged non-manifold
StencilTable Sizes
StencilTable Offsets
StencilTable Indices
StencilTable Weights
Using OPENSUBDIV_MTL_COMPUTE_USE_DERIVATIVES
LENGTH
SRC_STRIDE
DST_STRIDE
WORK_GROUP_SIZE
OPENSUBDIV_MTL_COMPUTE_USE_DERIVATIVES
PARAMETER_BUFFER_INDEX
SIZES_BUFFER_INDEX
OFFSETS_BUFFER_INDEX
WEIGHTS_BUFFER_INDEX
SRC_VERTEX_BUFFER_INDEX
DST_VERTEX_BUFFER_INDEX
DU_WEIGHTS_BUFFER_INDEX
DV_WEIGHTS_BUFFER_INDEX
DU_DERIVATIVE_BUFFER_INDEX
DV_DERIVATIVE_BUFFER_INDEX
PATCH_ARRAYS_BUFFER_INDEX
PATCH_COORDS_BUFFER_INDEX
PATCH_PARAMS_BUFFER_INDEX
Error compiling MTL Shader: %s
eval_stencils
Error compiling MTL Pipeline eval_stencils: %s
eval_patches
Error compiling MTL Pipeline eval_patches:  %s
#line 0 "osd/mtlComputeKernel.metal"
//   Copyright 2015 Pixar
//   Licensed under the Apache License, Version 2.0 (the "Apache License")
//   with the following modification; you may not use this file except in
//   compliance with the Apache License and the following modification to it:
//   Section 6. Trademarks. is deleted and replaced with:
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor
//      and its affiliates, except as required to comply with Section 4(c) of
//      the License and to reproduce the content of the NOTICE file.
//   You may obtain a copy of the Apache License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the Apache License with the above modification is
//   distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//   KIND, either express or implied. See the Apache License for the specific
//   language governing permissions and limitations under the Apache License.
#include <metal_stdlib>
#ifndef OPENSUBDIV_MTL_COMPUTE_USE_DERIVATIVES
#define OPENSUBDIV_MTL_COMPUTE_USE_DERIVATIVES 0
#endif
using namespace metal;
struct PatchCoord
    int arrayIndex;
    int patchIndex;
    int vertIndex;
    float s;
    float t;
struct PatchParam
    uint field0;
    uint field1;
    float sharpness;
struct KernelUniformArgs
int batchStart;
int batchEnd;
    int srcOffset;
int dstOffset;
    int3 duDesc;
    int3 dvDesc;
struct Vertex {
    float vertexData[LENGTH];
void clear(thread Vertex& v) {
    for (int i = 0; i < LENGTH; ++i) {
        v.vertexData[i] = 0;
    }
Vertex readVertex(int index, device float* vertexBuffer, KernelUniformArgs args) {
    Vertex v;
    int vertexIndex = args.srcOffset + index * SRC_STRIDE;
    for (int i = 0; i < LENGTH; ++i) {
        v.vertexData[i] = vertexBuffer[vertexIndex + i];
    }
    return v;
void writeVertex(int index, Vertex v, device float* vertexBuffer, KernelUniformArgs args) {
    int vertexIndex = args.dstOffset + index * DST_STRIDE;
    for (int i = 0; i < LENGTH; ++i) {
        vertexBuffer[vertexIndex + i] = v.vertexData[i];
    }
void writeVertexSeparate(int index, Vertex v, device float* dstVertexBuffer, KernelUniformArgs args) {
    int vertexIndex = args.dstOffset + index * DST_STRIDE;
    for (int i = 0; i < LENGTH; ++i) {
        dstVertexBuffer[vertexIndex + i] = v.vertexData[i];
    }
void addWithWeight(thread Vertex& v, const Vertex src, float weight) {
    for (int i = 0; i < LENGTH; ++i) {
        v.vertexData[i] += weight * src.vertexData[i];
    }
void writeDu(int index, Vertex du, device float* duDerivativeBuffer, KernelUniformArgs args)
    int duIndex = args.duDesc.x + index * args.duDesc.z;
    for(int i = 0; i < LENGTH; i++)
    {
        duDerivativeBuffer[duIndex + i] = du.vertexData[i];
    }
void writeDv(int index, Vertex dv, device float* dvDerivativeBuffer, KernelUniformArgs args)
    int dvIndex = args.dvDesc.x + index * args.dvDesc.z;
    for(int i = 0; i < LENGTH; i++)
    {
        dvDerivativeBuffer[dvIndex + i] = dv.vertexData[i];
    }
// ---------------------------------------------------------------------------
kernel void eval_stencils(
    uint thread_position_in_grid [[thread_position_in_grid]],
#if CFX_OPTIMIZE_OPENSUBDIV_STORAGE
    const device uint8_t* sizes [[buffer(SIZES_BUFFER_INDEX)]],
    const device int* offsets [[buffer(OFFSETS_BUFFER_INDEX)]],
    const device uint16_t* indices [[buffer(INDICES_BUFFER_INDEX)]],
    const device half* weights [[buffer(WEIGHTS_BUFFER_INDEX)]],
#else
    const device int* sizes [[buffer(SIZES_BUFFER_INDEX)]],
    const device int* offsets [[buffer(OFFSETS_BUFFER_INDEX)]],
    const device int* indices [[buffer(INDICES_BUFFER_INDEX)]],
    const device float* weights [[buffer(WEIGHTS_BUFFER_INDEX)]],
#endif
    device float* srcVertices [[buffer(SRC_VERTEX_BUFFER_INDEX)]],
    device float* dstVertexBuffer [[buffer(DST_VERTEX_BUFFER_INDEX)]],
    const device float* duWeights [[buffer(DU_WEIGHTS_BUFFER_INDEX)]],
    const device float* dvWeights [[buffer(DV_WEIGHTS_BUFFER_INDEX)]],
    device float* duDerivativeBuffer [[buffer(DU_DERIVATIVE_BUFFER_INDEX)]],
    device float* dvDerivativeBuffer [[buffer(DV_DERIVATIVE_BUFFER_INDEX)]],
    const constant KernelUniformArgs& args [[buffer(PARAMETER_BUFFER_INDEX)]]
    auto current  = thread_position_in_grid + args.batchStart;
    if(current >= args.batchEnd)
        return;
    Vertex dst;
    clear(dst);
    auto offset = offsets[current];
    auto size = sizes[current];
    for(auto stencil = 0; stencil < size; stencil++)
    {
        auto vindex = offset + stencil;
        addWithWeight(dst, readVertex(indices[vindex], srcVertices, args), weights[vindex]);
    }
    writeVertex(current, dst, dstVertexBuffer, args);
#if OPENSUBDIV_MTL_COMPUTE_USE_DERIVATIVES
    Vertex du, dv;
    clear(du);
    clear(dv);
    for(auto i = 0; i < size; i++)
    {
        auto src = readVertex(indices[offset + i], srcVertices, args);
        addWithWeight(du, src, duWeights[offset + i]);
        addWithWeight(dv, src, dvWeights[offset + i]);
    }
    writeDu(current, du, duDerivativeBuffer, args);
    writeDv(current, dv, dvDerivativeBuffer, args);
#endif
// ---------------------------------------------------------------------------
// PERFORMANCE: stride could be constant, but not as significant as length
//struct PatchArray {
//    int patchType;
//    int numPatches;
//    int indexBase;        // an offset within the index buffer
//    int primitiveIdBase;  // an offset within the patch param buffer
//};
// # of patcharrays is 1 or 2.
uint getDepth(uint patchBits) {
    return (patchBits & 0xf);
float getParamFraction(uint patchBits) {
    uint nonQuadRoot = (patchBits >> 4) & 0x1;
    uint depth = getDepth(patchBits);
    if (nonQuadRoot == 1) {
        return 1.0f / float( 1 << (depth-1) );
    } else {
        return 1.0f / float( 1 << depth );
    }
float2 normalizePatchCoord(uint patchBits, float2 uv) {
    float frac = getParamFraction(patchBits);
    uint iu = (patchBits >> 22) & 0x3ff;
    uint iv = (patchBits >> 12) & 0x3ff;
    // top left corner
    float pu = float(iu*frac);
    float pv = float(iv*frac);
    // normalize u,v coordinates
    return float2((uv.x - pu) / frac, (uv.y - pv) / frac);
bool isRegular(uint patchBits) {
    return (((patchBits >> 5) & 0x1u) != 0);
int getNumControlVertices(int patchType) {
    switch(patchType) {
        case 3: return 4;
        case 6: return 16;
        case 9: return 20;
        default: return 0;
    }
// ---------------------------------------------------------------------------
kernel void eval_patches(
                         uint thread_position_in_grid [[thread_position_in_grid]],
                         const constant uint4* patchArrays [[buffer(PATCH_ARRAYS_BUFFER_INDEX)]],
                         device PatchCoord* patchCoords [[buffer(PATCH_COORDS_BUFFER_INDEX)]],
                         device int* patchIndices [[buffer(PATCH_INDICES_BUFFER_INDEX)]],
                         device PatchParam* patchParams [[buffer(PATCH_PARAMS_BUFFER_INDEX)]],
                         device float* srcVertexBuffer [[buffer(SRC_VERTEX_BUFFER_INDEX)]],
                         device float* dstVertexBuffer [[buffer(DST_VERTEX_BUFFER_INDEX)]],
                         device float* duDerivativeBuffer [[buffer(DU_DERIVATIVE_BUFFER_INDEX)]],
                         device float* dvDerivativeBuffer [[buffer(DV_DERIVATIVE_BUFFER_INDEX)]],
                         const constant KernelUniformArgs& args [[buffer(PARAMETER_BUFFER_INDEX)]]
                         )
    auto current = thread_position_in_grid;
    auto patchCoord = patchCoords[current];
    auto patchIndex = patchIndices[patchCoord.patchIndex];
    auto patchArray = patchArrays[patchCoord.arrayIndex];
    auto patchBits = patchParams[patchIndex].field1; 
    auto patchType = select(patchArray.x, uint(6), isRegular(patchBits));
    auto numControlVertices = getNumControlVertices(patchType);
    auto uv = normalizePatchCoord(patchBits, float2(patchCoord.s, patchCoord.t));
    auto dScale = float(1 << getDepth(patchBits));
    auto boundaryMask = int((patchBits >> 8) & 0xFU);
    float wP[20], wDs[20], wDt[20], wDss[20], wDst[20], wDtt[20];
    if(patchType == 3) {
        OsdGetBilinearPatchWeights(uv.x, uv.y, dScale, wP, wDs, wDt, wDss, wDst, wDtt);
    } else if(patchType == 6) {
        OsdGetBSplinePatchWeights(uv.x, uv.y, dScale, boundaryMask, wP, wDs, wDt, wDss, wDst, wDtt);
    } else if(patchType == 9) {
        OsdGetGregoryPatchWeights(uv.x, uv.y, dScale, wP, wDs, wDt, wDss, wDst, wDtt);
    }
    Vertex dst, du, dv;
    clear(dst);
    clear(du);
    clear(dv);
    auto indexBase = patchArray.z + numControlVertices * (patchCoord.patchIndex - patchArray.w);
    for(auto cv = 0; cv < numControlVertices; cv++)
    {
        auto index = patchIndices[indexBase + cv];
        auto src = readVertex(index, srcVertexBuffer, args);
        addWithWeight(dst, src, wP[cv]);
        addWithWeight(du, src, wDs[cv]);
        addWithWeight(dv, src, wDt[cv]);
    }
    writeVertex(current, dst, dstVertexBuffer, args);
#if OPENSUBDIV_MTL_COMPUTE_USE_DERIVATIVES
    if(args.duDesc.y > 0)
        writeDu(current, du, duDerivativeBuffer, args);
    if(args.dvDesc.y > 0)
        writeDv(current, dv, dvDerivativeBuffer, args);
#endif
No Error
Fatal Error
Coding Error (internal)
Coding Error
Error
%s: %s
Warning: %s
#define OSD_METAL_OSX 1
#define OSD_PATCH_BASIS_METAL 1
#line 0 "osd/mtlPatchCommon.metal"
//   Copyright 2015 Pixar
//   Licensed under the Apache License, Version 2.0 (the "Apache License")
//   with the following modification; you may not use this file except in
//   compliance with the Apache License and the following modification to it:
//   Section 6. Trademarks. is deleted and replaced with:
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor
//      and its affiliates, except as required to comply with Section 4(c) of
//      the License and to reproduce the content of the NOTICE file.
//   You may obtain a copy of the Apache License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the Apache License with the above modification is
//   distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//   KIND, either express or implied. See the Apache License for the specific
//   language governing permissions and limitations under the Apache License.
//----------------------------------------------------------
// Patches.Common
//----------------------------------------------------------
#define offsetof_(X, Y) &(((device X*)nullptr)->Y)
#define OSD_IS_ADAPTIVE (OSD_PATCH_REGULAR || OSD_PATCH_GREGORY_BASIS || OSD_PATCH_GREGORY || OSD_PATCH_GREGORY_BOUNDARY)
#ifndef OSD_MAX_TESS_LEVEL
#define OSD_MAX_TESS_LEVEL 64
#endif
#ifndef OSD_NUM_ELEMENTS
#define OSD_NUM_ELEMENTS 3
#endif
#ifndef OSD_USER_VARYING_DECLARE
#define OSD_USER_VARYING_DECLARE
#endif
#ifndef OSD_USER_VARYING_DECLARE_ATTRIBUTE
#define OSD_USER_VARYING_DECLARE_ATTRIBUTE
#endif
#ifndef OSD_USER_VARYING_PER_VERTEX
#define OSD_USER_VARYING_PER_VERTEX(in, out)
#endif
#ifndef OSD_USER_VARYING_PER_CONTROL_POINT
#define OSD_USER_VARYING_PER_CONTROL_POINT(in, out)
#endif
#ifndef OSD_USER_VARYING_PER_EVAL_POINT
#define OSD_USER_VARYING_PER_EVAL_POINT(UV, a, b, c, d, out)
#endif
static_assert(sizeof(OsdInputVertexType) > 0, "OsdInputVertexType must be defined and have a float3 position member");
#if OSD_IS_ADAPTIVE
#if OSD_PATCH_GREGORY_BASIS
constant constexpr unsigned IndexLookupStride = 5;
#else 
constant constexpr unsigned IndexLookupStride = 1;
#endif
#define PATCHES_PER_THREADGROUP ((THREADS_PER_THREADGROUP * CONTROL_POINTS_PER_THREAD) / CONTROL_POINTS_PER_PATCH)
#define REAL_THREADGROUP_DIVISOR (CONTROL_POINTS_PER_PATCH / CONTROL_POINTS_PER_THREAD)
static_assert(REAL_THREADGROUP_DIVISOR % 2 == 0, "REAL_THREADGROUP_DIVISOR must be a power of 2");
static_assert(!OSD_ENABLE_SCREENSPACE_TESSELLATION || !USE_PTVS_FACTORS, "USE_PTVS_FACTORS cannot be enabled if OSD_ENABLE_SCREENSPACE_TESSELLATION is enabled");
static_assert((OSD_ENABLE_SCREENSPACE_TESSELLATION && (OSD_FRACTIONAL_ODD_SPACING || OSD_FRACTIONAL_EVEN_SPACING)) || !OSD_ENABLE_SCREENSPACE_TESSELLATION, "OSD_ENABLE_SCREENSPACE_TESSELLATION requires OSD_FRACTIONAL_ODD_SPACING or OSD_FRACTIONAL_EVEN_SPACING");
#endif
//Adjustments to the UV reparameterization can be defined here. 
#ifndef OSD_UV_CORRECTION
#define OSD_UV_CORRECTION
#endif
using namespace metal;
// ----------------------------------------------------------------------------
// Patch Parameters
// ----------------------------------------------------------------------------
// Each patch has a corresponding patchParam. This is a set of three values
// specifying additional information about the patch:
//    faceId    -- topological face identifier (e.g. Ptex FaceId)
//    bitfield  -- refinement-level, non-quad, boundary, transition, uv-offset
//    sharpness -- crease sharpness for single-crease patches
// These are stored in OsdPatchParamBuffer indexed by the value returned
// from OsdGetPatchIndex() which is a function of the current PrimitiveID
// along with an optional client provided offset.
using OsdPatchParamBufferType = packed_int3;
struct OsdPerVertexGregory {
    float3 P;
    short3 clipFlag;
    int valence;
    float3 e0;
    float3 e1;
#if OSD_PATCH_GREGORY_BOUNDARY
    int zerothNeighbor;
    float3 org;
#endif
    float3 r[OSD_MAX_VALENCE];
    OSD_USER_VARYING_DECLARE
struct OsdPerPatchVertexGregory {
    packed_float3 P;
    packed_float3 Ep;
    packed_float3 Em;
    packed_float3 Fp;
    packed_float3 Fm;
    OSD_USER_VARYING_DECLARE
//----------------------------------------------------------
// HLSL->Metal Compatibility
//----------------------------------------------------------
static inline float4 mul(float4x4 a, float4 b)
    return a * b;
static inline float3 mul(float4x4 a, float3 b)
    float3x3 m(a[0].xyz, a[1].xyz, a[2].xyz);
    return m * b;
//----------------------------------------------------------
// Patches.Common
//----------------------------------------------------------
// For now, fractional spacing is supported only with screen space tessellation
#ifndef OSD_ENABLE_SCREENSPACE_TESSELLATION
#undef OSD_FRACTIONAL_EVEN_SPACING
#undef OSD_FRACTIONAL_ODD_SPACING
#endif
struct HullVertex {
    float4 position;
#if OSD_ENABLE_PATCH_CULL
    short3 clipFlag;
#endif
    OSD_USER_VARYING_DECLARE
    float3 GetPosition() threadgroup
    {
        return position.xyz;
    }
    void SetPosition(float3 v) threadgroup
    {
    
position.xyz = v;
    }
// XXXdyu all downstream data can be handled by client code
struct OsdPatchVertex {
    float3 position;
    float3 normal;
    float3 tangent;
    float3 bitangent;
    float4 patchCoord; //u, v, faceLevel, faceId
#if OSD_COMPUTE_NORMAL_DERIVATIVES
    float3 Nu;
    float3 Nv;
#endif
#if OSD_PATCH_ENABLE_SINGLE_CREASE
    float2 vSegments;
#endif
    OSD_USER_VARYING_DECLARE
struct OsdPerPatchTessFactors {
    float4 tessOuterLo;
    float4 tessOuterHi;
struct OsdPerPatchVertexBezier {
#if CFX_OPTIMIZE_OPENSUBDIV_STORAGE
    packed_half3 P;
#if OSD_PATCH_ENABLE_SINGLE_CREASE
    packed_half3 P1;
    packed_half3 P2;
#if !USE_PTVS_SHARPNESS
    half2 vSegments;
#endif
#endif
#else
    packed_float3 P;
#if OSD_PATCH_ENABLE_SINGLE_CREASE
    packed_float3 P1;
    packed_float3 P2;
#if !USE_PTVS_SHARPNESS
    float2 vSegments;
#endif
#endif
#endif //CFX_OPTIMIZE_OPENSUBDIV_STORAGE
    OSD_USER_VARYING_DECLARE
struct OsdPerPatchVertexGregoryBasis {
    packed_float3 P;
    OSD_USER_VARYING_DECLARE
#if OSD_PATCH_REGULAR
using PatchVertexType = HullVertex;
using PerPatchVertexType = OsdPerPatchVertexBezier;
#elif OSD_PATCH_GREGORY || OSD_PATCH_GREGORY_BOUNDARY
using PatchVertexType = OsdPerVertexGregory;
using PerPatchVertexType = OsdPerPatchVertexGregory;
#elif OSD_PATCH_GREGORY_BASIS
using PatchVertexType = HullVertex;
using PerPatchVertexType = OsdPerPatchVertexGregoryBasis;
#else
using PatchVertexType = OsdInputVertexType;
using PerPatchVertexType = OsdInputVertexType;
#endif
//Shared buffers used by OSD that are common to all kernels
struct OsdPatchParamBufferSet
const device OsdInputVertexType* vertexBuffer [[buffer(VERTEX_BUFFER_INDEX)]];
const device unsigned* indexBuffer [[buffer(CONTROL_INDICES_BUFFER_INDEX)]];
const device OsdPatchParamBufferType* patchParamBuffer [[buffer(OSD_PATCHPARAM_BUFFER_INDEX)]];
device PerPatchVertexType* perPatchVertexBuffer [[buffer(OSD_PERPATCHVERTEXBEZIER_BUFFER_INDEX)]];
#if !USE_PTVS_FACTORS    
    device OsdPerPatchTessFactors* patchTessBuffer [[buffer(OSD_PERPATCHTESSFACTORS_BUFFER_INDEX)]];
#endif
#if OSD_PATCH_GREGORY || OSD_PATCH_GREGORY_BOUNDARY
const device int* quadOffsetBuffer [[buffer(OSD_QUADOFFSET_BUFFER_INDEX)]];
const device int* valenceBuffer [[buffer(OSD_VALENCE_BUFFER_INDEX)]];
#endif
const constant unsigned& kernelExecutionLimit [[buffer(OSD_KERNELLIMIT_BUFFER_INDEX)]];
//Shared buffers used by OSD that are common to all PTVS implementations
struct OsdVertexBufferSet
const device OsdInputVertexType* vertexBuffer [[buffer(VERTEX_BUFFER_INDEX)]];
const device unsigned* indexBuffer [[buffer(CONTROL_INDICES_BUFFER_INDEX)]];
const device OsdPatchParamBufferType* patchParamBuffer [[buffer(OSD_PATCHPARAM_BUFFER_INDEX)]];
device PerPatchVertexType* perPatchVertexBuffer [[buffer(OSD_PERPATCHVERTEXBEZIER_BUFFER_INDEX)]];
#if !USE_PTVS_FACTORS    
    device OsdPerPatchTessFactors* patchTessBuffer [[buffer(OSD_PERPATCHTESSFACTORS_BUFFER_INDEX)]];
#endif
// ----------------------------------------------------------------------------
// Patch Parameters Accessors
// ----------------------------------------------------------------------------
static int3 OsdGetPatchParam(int patchIndex, const device OsdPatchParamBufferType* osdPatchParamBuffer)
#if OSD_PATCH_ENABLE_SINGLE_CREASE
    return int3(osdPatchParamBuffer[patchIndex]);
#else
    auto p = osdPatchParamBuffer[patchIndex];
    return int3(p[0], p[1], 0);
#endif
static int OsdGetPatchIndex(int primitiveId)
    return primitiveId;
static int OsdGetPatchFaceId(int3 patchParam)
    return (patchParam.x & 0xfffffff);
static int OsdGetPatchFaceLevel(int3 patchParam)
    return (1 << ((patchParam.y & 0xf) - ((patchParam.y >> 4) & 1)));
static int OsdGetPatchRefinementLevel(int3 patchParam)
    return (patchParam.y & 0xf);
static int OsdGetPatchBoundaryMask(int3 patchParam)
    return ((patchParam.y >> 8) & 0xf);
static int OsdGetPatchTransitionMask(int3 patchParam)
    return ((patchParam.x >> 28) & 0xf);
static int2 OsdGetPatchFaceUV(int3 patchParam)
    int u = (patchParam.y >> 22) & 0x3ff;
    int v = (patchParam.y >> 12) & 0x3ff;
    return int2(u,v);
static bool OsdGetPatchIsRegular(int3 patchParam)
    return ((patchParam.y >> 5) & 0x1) != 0;
static float OsdGetPatchSharpness(int3 patchParam)
    return as_type<float>(patchParam.z);
static float OsdGetPatchSingleCreaseSegmentParameter(int3 patchParam, float2 uv)
    int boundaryMask = OsdGetPatchBoundaryMask(patchParam);
    float s = 0;
    if ((boundaryMask & 1) != 0) {
        s = 1 - uv.y;
    } else if ((boundaryMask & 2) != 0) {
        s = uv.x;
    } else if ((boundaryMask & 4) != 0) {
        s = uv.y;
    } else if ((boundaryMask & 8) != 0) {
        s = 1 - uv.x;
    }
    return s;
// ----------------------------------------------------------------------------
static void OsdUnivar4x4(float u, thread float* B)
    float t = u;
    float s = 1.0f - u;
    
    float A0 = s * s;
    float A1 = 2 * s * t;
    float A2 = t * t;
    
    B[0] = s * A0;
    B[1] = t * A0 + s * A1;
    B[2] = t * A1 + s * A2;
    B[3] = t * A2;
static void OsdUnivar4x4(float u, thread float* B, thread float* D)
    float t = u;
    float s = 1.0f - u;
    float A0 = s * s;
    float A1 = 2 * s * t;
    float A2 = t * t;
    B[0] = s * A0;
    B[1] = t * A0 + s * A1;
    B[2] = t * A1 + s * A2;
    B[3] = t * A2;
    D[0] =    - A0;
    D[1] = A0 - A1;
    D[2] = A1 - A2;
    D[3] = A2;
static void OsdUnivar4x4(float u, thread float* B, thread float* D, thread float* C)
    float t = u;
    float s = 1.0f - u;
    float A0 = s * s;
    float A1 = 2 * s * t;
    float A2 = t * t;
    B[0] = s * A0;
    B[1] = t * A0 + s * A1;
    B[2] = t * A1 + s * A2;
    B[3] = t * A2;
    D[0] =    - A0;
    D[1] = A0 - A1;
    D[2] = A1 - A2;
    D[3] = A2;
    A0 =   - s;
    A1 = s - t;
    A2 = t;
    C[0] =    - A0;
    C[1] = A0 - A1;
    C[2] = A1 - A2;
    C[3] = A2;
// ----------------------------------------------------------------------------
static float3 OsdEvalBezier(float3 cp[16], float2 uv)
    float3 BUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)};
    float B[4], D[4];
    OsdUnivar4x4(uv.x, B, D);
    for (int i=0; i<4; ++i) {
        for (int j=0; j<4; ++j) {
            float3 A = cp[4*i + j];
            BUCP[i] += A * B[j];
        }
    }
    float3 P = float3(0,0,0);
    OsdUnivar4x4(uv.y, B, D);
    for (int k=0; k<4; ++k) {
        P += B[k] * BUCP[k];
    }
    return P;
static bool OsdCullPerPatchVertex(
threadgroup PatchVertexType* patch, 
float4x4 ModelViewMatrix
#if OSD_ENABLE_BACKPATCH_CULL && OSD_PATCH_REGULAR
    auto v0 = float3(ModelViewMatrix * patch[5].position);
    auto v3 = float3(ModelViewMatrix * patch[6].position);
    auto v12 = float3(ModelViewMatrix * patch[9].position);
    auto n = normalize(cross(v3 - v0, v12 - v0));
    v0 = normalize(v0 + v3 + v12);
    if(dot(v0, n) > 0.6f)
    {
        return false;
    }
#endif
#if OSD_ENABLE_PATCH_CULL
    short3 clipFlag = short3(0,0,0);
    for(int i = 0; i < CONTROL_POINTS_PER_PATCH; ++i) {
        clipFlag |= patch[i].clipFlag;
    }
    if (any(clipFlag != short3(3,3,3))) {
        return false;
    }
#endif
    return true;
// When OSD_PATCH_ENABLE_SINGLE_CREASE is defined,
// this function evaluates single-crease patch, which is segmented into
// 3 parts in the v-direction.
//  v=0             vSegment.x        vSegment.y              v=1
//   +------------------+-------------------+------------------+
//   |       cp 0       |     cp 1          |      cp 2        |
//   | (infinite sharp) | (floor sharpness) | (ceil sharpness) |
//   +------------------+-------------------+------------------+
static float3 OsdEvalBezier(device OsdPerPatchVertexBezier* cp, int3 patchParam, float2 uv)
    float3 BUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)};
    float B[4], D[4];
    float s = OsdGetPatchSingleCreaseSegmentParameter(patchParam, uv);
    OsdUnivar4x4(uv.x, B, D);
#if OSD_PATCH_ENABLE_SINGLE_CREASE
#if USE_PTVS_SHARPNESS
    float sharpness = OsdGetPatchSharpness(patchParam);
    float Sf = floor(sharpness);
    float Sc = ceil(sharpness);
    float s0 = 1 - exp2(-Sf);
    float s1 = 1 - exp2(-Sc);
    float2 vSegments(s0, s1);
#else
    float2 vSegments = float2(cp[0].vSegments);
#endif // USE_PTVS_SHARPNESS
    //By doing the offset calculation ahead of time it can be kept out of the actual indexing lookup.
#if CFX_OPTIMIZE_OPENSUBDIV_STORAGE
    if(s <= vSegments.x)
        cp = (device OsdPerPatchVertexBezier*)(((device half*)cp) + 0);
    else if( s <= vSegments.y)
        cp = (device OsdPerPatchVertexBezier*)(((device half*)cp) + 3);
    else
        cp = (device OsdPerPatchVertexBezier*)(((device half*)cp) + 6);
#else
    if(s <= vSegments.x)
        cp = (device OsdPerPatchVertexBezier*)(((device float*)cp) + 0);
    else if( s <= vSegments.y)
        cp = (device OsdPerPatchVertexBezier*)(((device float*)cp) + 3);
    else
        cp = (device OsdPerPatchVertexBezier*)(((device float*)cp) + 6);
#endif //CFX_OPTIMIZE_OPENSUBDIV_STORAGE
    BUCP[0] += float3(cp[0].P) * B[0];
    BUCP[0] += float3(cp[1].P) * B[1];
    BUCP[0] += float3(cp[2].P) * B[2];
    BUCP[0] += float3(cp[3].P) * B[3];
    BUCP[1] += float3(cp[4].P) * B[0];
    BUCP[1] += float3(cp[5].P) * B[1];
    BUCP[1] += float3(cp[6].P) * B[2];
    BUCP[1] += float3(cp[7].P) * B[3];
    BUCP[2] += float3(cp[8].P) * B[0];
    BUCP[2] += float3(cp[9].P) * B[1];
    BUCP[2] += float3(cp[10].P) * B[2];
    BUCP[2] += float3(cp[11].P) * B[3];
    BUCP[3] += float3(cp[12].P) * B[0];
    BUCP[3] += float3(cp[13].P) * B[1];
    BUCP[3] += float3(cp[14].P) * B[2];
    BUCP[3] += float3(cp[15].P) * B[3];
#else // single crease
    for (int i=0; i<4; ++i) {
        for (int j=0; j<4; ++j) {
            float3 A = float3(cp[4*i + j].P);
            BUCP[i] += A * B[j];
        }
    }
#endif  // single crease
    OsdUnivar4x4(uv.y, B);
    float3 P = B[0] * BUCP[0];
    for (int k=1; k<4; ++k) {
        P += B[k] * BUCP[k];
    }
    return P;
// ----------------------------------------------------------------------------
// Boundary Interpolation
// ----------------------------------------------------------------------------
template<typename VertexType>
static void OsdComputeBSplineBoundaryPoints(threadgroup VertexType* cpt, int3 patchParam)
//APPL TODO - multithread this
    int boundaryMask = OsdGetPatchBoundaryMask(patchParam);
    if ((boundaryMask & 1) != 0) {
        cpt[0].SetPosition(2*cpt[4].GetPosition() - cpt[8].GetPosition());
        cpt[1].SetPosition(2*cpt[5].GetPosition() - cpt[9].GetPosition());
        cpt[2].SetPosition(2*cpt[6].GetPosition() - cpt[10].GetPosition());
        cpt[3].SetPosition(2*cpt[7].GetPosition() - cpt[11].GetPosition());
    }
    if ((boundaryMask & 2) != 0) {
        cpt[3].SetPosition(2*cpt[2].GetPosition() - cpt[1].GetPosition());
        cpt[7].SetPosition(2*cpt[6].GetPosition() - cpt[5].GetPosition());
        cpt[11].SetPosition(2*cpt[10].GetPosition() - cpt[9].GetPosition());
        cpt[15].SetPosition(2*cpt[14].GetPosition() - cpt[13].GetPosition());
    }
    if ((boundaryMask & 4) != 0) {
        cpt[12].SetPosition(2*cpt[8].GetPosition() - cpt[4].GetPosition());
        cpt[13].SetPosition(2*cpt[9].GetPosition() - cpt[5].GetPosition());
        cpt[14].SetPosition(2*cpt[10].GetPosition() - cpt[6].GetPosition());
        cpt[15].SetPosition(2*cpt[11].GetPosition() - cpt[7].GetPosition());
    }
    if ((boundaryMask & 8) != 0) {
        cpt[0].SetPosition(2*cpt[1].GetPosition() - cpt[2].GetPosition());
        cpt[4].SetPosition(2*cpt[5].GetPosition() - cpt[6].GetPosition());
        cpt[8].SetPosition(2*cpt[9].GetPosition() - cpt[10].GetPosition());
        cpt[12].SetPosition(2*cpt[13].GetPosition() - cpt[14].GetPosition());
    }
template<typename VertexType>
static void OsdComputeBSplineBoundaryPoints(thread VertexType* cpt, int3 patchParam)
    int boundaryMask = OsdGetPatchBoundaryMask(patchParam);
    if ((boundaryMask & 1) != 0) {
        cpt[0].SetPosition(2*cpt[4].GetPosition() - cpt[8].GetPosition());
        cpt[1].SetPosition(2*cpt[5].GetPosition() - cpt[9].GetPosition());
        cpt[2].SetPosition(2*cpt[6].GetPosition() - cpt[10].GetPosition());
        cpt[3].SetPosition(2*cpt[7].GetPosition() - cpt[11].GetPosition());
    }
    if ((boundaryMask & 2) != 0) {
        cpt[3].SetPosition(2*cpt[2].GetPosition() - cpt[1].GetPosition());
        cpt[7].SetPosition(2*cpt[6].GetPosition() - cpt[5].GetPosition());
        cpt[11].SetPosition(2*cpt[10].GetPosition() - cpt[9].GetPosition());
        cpt[15].SetPosition(2*cpt[14].GetPosition() - cpt[13].GetPosition());
    }
    if ((boundaryMask & 4) != 0) {
        cpt[12].SetPosition(2*cpt[8].GetPosition() - cpt[4].GetPosition());
        cpt[13].SetPosition(2*cpt[9].GetPosition() - cpt[5].GetPosition());
        cpt[14].SetPosition(2*cpt[10].GetPosition() - cpt[6].GetPosition());
        cpt[15].SetPosition(2*cpt[11].GetPosition() - cpt[7].GetPosition());
    }
    if ((boundaryMask & 8) != 0) {
      cpt[0].SetPosition(2*cpt[1].GetPosition() - cpt[2].GetPosition());
      cpt[4].SetPosition(2*cpt[5].GetPosition() - cpt[6].GetPosition());
      cpt[8].SetPosition(2*cpt[9].GetPosition() - cpt[10].GetPosition());
      cpt[12].SetPosition(2*cpt[13].GetPosition() - cpt[14].GetPosition());
    }
static void OsdEvalPatchGregory(int3 patchParam, float2 UV, thread float3* cv,
                    thread float3& P, thread float3& dPu, thread float3& dPv,
                    thread float3& N, thread float3& dNu, thread float3& dNv)
    float u = UV.x, v = UV.y;
    float U = 1-u, V = 1-v;
    //(0,1)                              (1,1)
    //   P3         e3-      e2+         P2
    //      15------17-------11-------10
    //      |        |        |        |
    //      |        |        |        |
    //      |        | f3-    | f2+    |
    //      |       19       13        |
    //  e3+ 16-----18          14-----12 e2-
    //      |     f3+          f2-     |
    //      |                          |
    //      |                          |
    //      |     f0-         f1+      |
    //  e0- 2------4            8------6 e1+
    //      |        3 f0+    9        |
    //      |        |        | f1-    |
    //      |        |        |        |
    //      |        |        |        |
    //      0--------1--------7--------5
    //    P0        e0+      e1-         P1
    //(0,0)                               (1,0)
    float d11 = u+v;
    float d12 = U+v;
    float d21 = u+V;
    float d22 = U+V;
    float3 q[16];
    q[ 5] = (d11 == 0.0) ? cv[3]  : (u*cv[3] + v*cv[4])/d11;
    q[ 6] = (d12 == 0.0) ? cv[8]  : (U*cv[9] + v*cv[8])/d12;
    q[ 9] = (d21 == 0.0) ? cv[18] : (u*cv[19] + V*cv[18])/d21;
    q[10] = (d22 == 0.0) ? cv[13] : (U*cv[13] + V*cv[14])/d22;
    q[ 0] = cv[0];
    q[ 1] = cv[1];
    q[ 2] = cv[7];
    q[ 3] = cv[5];
    q[ 4] = cv[2];
    q[ 7] = cv[6];
    q[ 8] = cv[16];
    q[11] = cv[12];
    q[12] = cv[15];
    q[13] = cv[17];
    q[14] = cv[11];
    q[15] = cv[10];
    P   = float3(0,0,0);
    dPu = float3(0,0,0);
    dPv = float3(0,0,0);
#if OSD_COMPUTE_NORMAL_DERIVATIVES
    float B[4], D[4], C[4];
    float3 BUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)},
    DUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)},
    CUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)};
    float3 dUU = float3(0,0,0);
    float3 dVV = float3(0,0,0);
    float3 dUV = float3(0,0,0);
    OsdUnivar4x4(UV.x, B, D, C);
    for (int i=0; i<4; ++i) {
        for (int j=0; j<4; ++j) {
            float3 A = q[4*i + j];
            BUCP[i] += A * B[j];
            DUCP[i] += A * D[j];
            CUCP[i] += A * C[j];
        }
    }
    OsdUnivar4x4(UV.y, B, D, C);
    for (int i=0; i<4; ++i) {
        P   += B[i] * BUCP[i];
        dPu += B[i] * DUCP[i];
        dPv += D[i] * BUCP[i];
        dUU += B[i] * CUCP[i];
        dVV += C[i] * BUCP[i];
        dUV += D[i] * DUCP[i];
    }
    int level = OsdGetPatchFaceLevel(patchParam);
    dPu *= 3 * level;
    dPv *= 3 * level;
    dUU *= 6 * level;
    dVV *= 6 * level;
    dUV *= 9 * level;
    float3 n = cross(dPu, dPv);
    N = normalize(n);
    float E = dot(dPu, dPu);
    float F = dot(dPu, dPv);
    float G = dot(dPv, dPv);
    float e = dot(N, dUU);
    float f = dot(N, dUV);
    float g = dot(N, dVV);
    dNu = (f*F-e*G)/(E*G-F*F) * dPu + (e*F-f*E)/(E*G-F*F) * dPv;
    dNv = (g*F-f*G)/(E*G-F*F) * dPu + (f*F-g*E)/(E*G-F*F) * dPv;
    dNu = dNu/length(n) - n * (dot(dNu,n)/powr(dot(n,n), 1.5));
    dNv = dNv/length(n) - n * (dot(dNv,n)/powr(dot(n,n), 1.5));
#else //OSD_COMPUTE_NORMAL_DERIVATIVES
    float B[4], D[4];
    float3 BUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)},
    DUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)};
    OsdUnivar4x4(UV.x, B, D);
    for (int i=0; i<4; ++i) {
        for (int j=0; j<4; ++j) {
            float3 A = q[4*i + j];
            BUCP[i] += A * B[j];
            DUCP[i] += A * D[j];
        }
    }
    OsdUnivar4x4(UV.y, B, D);
    for (int i=0; i<4; ++i) {
        P += B[i] * BUCP[i];
        dPu += B[i] * DUCP[i];
        dPv += D[i] * BUCP[i];
    }
    int level = OsdGetPatchFaceLevel(patchParam);
    dPu *= 3 * level;
    dPv *= 3 * level;
    N = normalize(cross(dPu, dPv));
    dNu = float3(0,0,0);
    dNv = float3(0,0,0);
#endif //OSD_COMPUTE_NORMAL_DERIVATIVES
// ----------------------------------------------------------------------------
// Tessellation
// ----------------------------------------------------------------------------
// Organization of B-spline and Bezier control points.
// Each patch is defined by 16 control points (labeled 0-15).
// The patch will be evaluated across the domain from (0,0) at
// the lower-left to (1,1) at the upper-right. When computing
// adaptive tessellation metrics, we consider refined vertex-vertex
// and edge-vertex points along the transition edges of the patch
// (labeled vv* and ev* respectively).
// The two segments of each transition edge are labeled Lo and Hi,
// with the Lo segment occuring before the Hi segment along the
// transition edge's domain parameterization. These Lo and Hi segment
// tessellation levels determine how domain evaluation coordinates
// are remapped along transition edges. The Hi segment value will
// be zero for a non-transition edge.
// (0,1)                                         (1,1)
//   vv3                  ev23                   vv2
//        |       Lo3       |       Hi3       |
//      --O-----------O-----+-----O-----------O--
//        | 12        | 13     14 |        15 |
//        |           |           |           |
//        |           |           |           |
//    Hi0 |           |           |           | Hi2
//        |           |           |           |
//        O-----------O-----------O-----------O
//        | 8         | 9      10 |        11 |
//        |           |           |           |
// ev03 --+           |           |           +-- ev12
//        |           |           |           |
//        | 4         | 5       6 |         7 |
//        O-----------O-----------O-----------O
//        |           |           |           |
//    Lo0 |           |           |           | Lo2
//        |           |           |           |
//        |           |           |           |
//        | 0         | 1       2 |         3 |
//      --O-----------O-----+-----O-----------O--
//        |       Lo1       |       Hi1       |
//   vv0                  ev01                   vv1
// (0,0)                                         (1,0)
static float OsdComputePostProjectionSphereExtent(const float4x4 OsdProjectionMatrix, float3 center, float diameter)
    //float4 p = OsdProjectionMatrix * float4(center, 1.0);
    float w = OsdProjectionMatrix[0][3] * center.x + OsdProjectionMatrix[1][3] * center.y + OsdProjectionMatrix[2][3] * center.z + OsdProjectionMatrix[3][3];
    return abs(diameter * OsdProjectionMatrix[1][1] / w);
// Round up to the nearest even integer
static float OsdRoundUpEven(float x) {
    return 2*ceil(x/2);
// Round up to the nearest odd integer
static float OsdRoundUpOdd(float x) {
    return 2*ceil((x+1)/2)-1;
// Compute outer and inner tessellation levels taking into account the
// current tessellation spacing mode.
static void OsdComputeTessLevels(thread float4& tessOuterLo, thread float4& tessOuterHi,
                     thread float4& tessLevelOuter, thread float2& tessLevelInner)
    // Outer levels are the sum of the Lo and Hi segments where the Hi
    // segments will have lengths of zero for non-transition edges.
#if OSD_FRACTIONAL_EVEN_SPACING
    // Combine fractional outer transition edge levels before rounding.
    float4 combinedOuter = tessOuterLo + tessOuterHi;
    // Round the segments of transition edges separately. We will recover the
    // fractional parameterization of transition edges after tessellation.
    tessLevelOuter = combinedOuter;
    if (tessOuterHi[0] > 0) {
        tessLevelOuter[0] =
            OsdRoundUpEven(tessOuterLo[0]) + OsdRoundUpEven(tessOuterHi[0]);
    }
    if (tessOuterHi[1] > 0) {
        tessLevelOuter[1] =
            OsdRoundUpEven(tessOuterLo[1]) + OsdRoundUpEven(tessOuterHi[1]);
    }
    if (tessOuterHi[2] > 0) {
        tessLevelOuter[2] =
            OsdRoundUpEven(tessOuterLo[2]) + OsdRoundUpEven(tessOuterHi[2]);
    }
    if (tessOuterHi[3] > 0) {
        tessLevelOuter[3] =
            OsdRoundUpEven(tessOuterLo[3]) + OsdRoundUpEven(tessOuterHi[3]);
    }
#elif OSD_FRACTIONAL_ODD_SPACING
    // Combine fractional outer transition edge levels before rounding.
    float4 combinedOuter = tessOuterLo + tessOuterHi;
    // Round the segments of transition edges separately. We will recover the
    // fractional parameterization of transition edges after tessellation.
    //
    // The sum of the two outer odd segment lengths will be an even number
    // which the tessellator will increase by +1 so that there will be a
    // total odd number of segments. We clamp the combinedOuter tess levels
    // (used to compute the inner tess levels) so that the outer transition
    // edges will be sampled without degenerate triangles.
    tessLevelOuter = combinedOuter;
    if (tessOuterHi[0] > 0) {
        tessLevelOuter[0] =
            OsdRoundUpOdd(tessOuterLo[0]) + OsdRoundUpOdd(tessOuterHi[0]);
        combinedOuter = max(float4(3,3,3,3), combinedOuter);
    }
    if (tessOuterHi[1] > 0) {
        tessLevelOuter[1] =
            OsdRoundUpOdd(tessOuterLo[1]) + OsdRoundUpOdd(tessOuterHi[1]);
        combinedOuter = max(float4(3,3,3,3), combinedOuter);
    }
    if (tessOuterHi[2] > 0) {
        tessLevelOuter[2] =
            OsdRoundUpOdd(tessOuterLo[2]) + OsdRoundUpOdd(tessOuterHi[2]);
        combinedOuter = max(float4(3,3,3,3), combinedOuter);
    }
    if (tessOuterHi[3] > 0) {
        tessLevelOuter[3] =
            OsdRoundUpOdd(tessOuterLo[3]) + OsdRoundUpOdd(tessOuterHi[3]);
        combinedOuter = max(float4(3,3,3,3), combinedOuter);
    }
#else //OSD_FRACTIONAL_ODD_SPACING
    // Round equally spaced transition edge levels before combining.
    tessOuterLo = round(tessOuterLo);
    tessOuterHi = round(tessOuterHi);
    float4 combinedOuter = tessOuterLo + tessOuterHi;
    tessLevelOuter = combinedOuter;
#endif //OSD_FRACTIONAL_ODD_SPACING
    // Inner levels are the averages the corresponding outer levels.
    tessLevelInner[0] = (combinedOuter[1] + combinedOuter[3]) * 0.5;
    tessLevelInner[1] = (combinedOuter[0] + combinedOuter[2]) * 0.5;
static float OsdComputeTessLevel(const float OsdTessLevel, const float4x4 OsdProjectionMatrix, const float4x4 OsdModelViewMatrix, float3 p0, float3 p1)
    // Adaptive factor can be any computation that depends only on arg values.
    // Project the diameter of the edge's bounding sphere instead of using the
    // length of the projected edge itself to avoid problems near silhouettes.
    float3 center = (p0 + p1) / 2.0;
    float diameter = distance(p0, p1);
    float projLength = OsdComputePostProjectionSphereExtent(OsdProjectionMatrix, center, diameter);
    float tessLevel = max(1.0, OsdTessLevel * projLength);
    // We restrict adaptive tessellation levels to half of the device
    // supported maximum because transition edges are split into two
    // halfs and the sum of the two corresponding levels must not exceed
    // the device maximum. We impose this limit even for non-transition
    // edges because a non-transition edge must be able to match up with
    // one half of the transition edge of an adjacent transition patch.
    return min(tessLevel, (float)(OSD_MAX_TESS_LEVEL / 2));
static void OsdGetTessLevelsUniform(const float OsdTessLevel, int3 patchParam,
                        thread float4& tessOuterLo, thread float4& tessOuterHi)
    // Uniform factors are simple powers of two for each level.
    // The maximum here can be increased if we know the maximum
    // refinement level of the mesh:
    //     min(OSD_MAX_TESS_LEVEL, pow(2, MaximumRefinementLevel-1)
    int refinementLevel = OsdGetPatchRefinementLevel(patchParam);
    float tessLevel = min(OsdTessLevel, ((float)OSD_MAX_TESS_LEVEL / 2)) /
                        pow(2, refinementLevel - 1.0f);
//    float tessLevel = min(OsdTessLevel, (float)OSD_MAX_TESS_LEVEL);
//    if(refinementLevel != 0)
//         tessLevel /= (1 << (refinementLevel - 1));
//    else
//    {
//        tessLevel /= pow(2.0, (0 - 1));
//        tessLevel /= pow(2.0, (refinementLevel - 1));
//    }
    // tessLevels of transition edge should be clamped to 2.
    int transitionMask = OsdGetPatchTransitionMask(patchParam);
    float4 tessLevelMin = float4(1)
    + float4(((transitionMask & 8) >> 3),
             ((transitionMask & 1) >> 0),
             ((transitionMask & 2) >> 1),
             ((transitionMask & 4) >> 2));
//    tessLevelMin =  (tessLevelMin - 1.0) * 2.0f + 1.0;
//    tessLevelMin = float4(OsdTessLevel);
    tessOuterLo = max(float4(tessLevel,tessLevel,tessLevel,tessLevel),
                      tessLevelMin);
    tessOuterHi = float4(0,0,0,0);
//    tessOuterLo.x = refinementLevel;
static void OsdGetTessLevelsRefinedPoints(const float OsdTessLevel,
                              const float4x4 OsdProjectionMatrix, const float4x4 OsdModelViewMatrix,
                              float3 cp[16], int3 patchParam,
                              thread float4& tessOuterLo, thread float4& tessOuterHi)
    // Each edge of a transition patch is adjacent to one or two patches
    // at the next refined level of subdivision. We compute the corresponding
    // vertex-vertex and edge-vertex refined points along the edges of the
    // patch using Catmull-Clark subdivision stencil weights.
    // For simplicity, we let the optimizer discard unused computation.
    float3 vv0 = (cp[0] + cp[2] + cp[8] + cp[10]) * 0.015625 +
    (cp[1] + cp[4] + cp[6] + cp[9]) * 0.09375 + cp[5] * 0.5625;
    float3 ev01 = (cp[1] + cp[2] + cp[9] + cp[10]) * 0.0625 +
    (cp[5] + cp[6]) * 0.375;
    float3 vv1 = (cp[1] + cp[3] + cp[9] + cp[11]) * 0.015625 +
    (cp[2] + cp[5] + cp[7] + cp[10]) * 0.09375 + cp[6] * 0.5625;
    float3 ev12 = (cp[5] + cp[7] + cp[9] + cp[11]) * 0.0625 +
    (cp[6] + cp[10]) * 0.375;
    float3 vv2 = (cp[5] + cp[7] + cp[13] + cp[15]) * 0.015625 +
    (cp[6] + cp[9] + cp[11] + cp[14]) * 0.09375 + cp[10] * 0.5625;
    float3 ev23 = (cp[5] + cp[6] + cp[13] + cp[14]) * 0.0625 +
    (cp[9] + cp[10]) * 0.375;
    float3 vv3 = (cp[4] + cp[6] + cp[12] + cp[14]) * 0.015625 +
    (cp[5] + cp[8] + cp[10] + cp[13]) * 0.09375 + cp[9] * 0.5625;
    float3 ev03 = (cp[4] + cp[6] + cp[8] + cp[10]) * 0.0625 +
    (cp[5] + cp[9]) * 0.375;
    tessOuterLo = float4(0,0,0,0);
    tessOuterHi = float4(0,0,0,0);
    int transitionMask = OsdGetPatchTransitionMask(patchParam);
    if ((transitionMask & 8) != 0) {
        tessOuterLo[0] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, vv0, ev03);
        tessOuterHi[0] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, vv3, ev03);
    } else {
        tessOuterLo[0] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cp[5], cp[9]);
    }
    if ((transitionMask & 1) != 0) {
        tessOuterLo[1] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, vv0, ev01);
        tessOuterHi[1] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, vv1, ev01);
    } else {
        tessOuterLo[1] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cp[5], cp[6]);
    }
    if ((transitionMask & 2) != 0) {
        tessOuterLo[2] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, vv1, ev12);
        tessOuterHi[2] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, vv2, ev12);
    } else {
        tessOuterLo[2] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cp[6], cp[10]);
    }
    if ((transitionMask & 4) != 0) {
        tessOuterLo[3] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, vv3, ev23);
        tessOuterHi[3] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, vv2, ev23);
    } else {
        tessOuterLo[3] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cp[9], cp[10]);
    }
static float3 miniMul(float4x4 a, float3 b)
    float3 r;
    r.x = a[0][0] * b[0] + a[1][0] * b[1] + a[2][0] * b[2] + a[3][0];
    r.y = a[0][1] * b[0] + a[1][1] * b[1] + a[2][1] * b[2] + a[3][1];
    r.z = a[0][2] * b[0] + a[1][2] * b[1] + a[2][2] * b[2] + a[3][2];
    return r;
static void OsdGetTessLevelsLimitPoints(const float OsdTessLevel, const float4x4 OsdProjectionMatrix, const float4x4 OsdModelViewMatrix,
                            device OsdPerPatchVertexBezier* cpBezier,
                            int3 patchParam, thread float4& tessOuterLo, thread float4& tessOuterHi)
    // Each edge of a transition patch is adjacent to one or two patches
    // at the next refined level of subdivision. When the patch control
    // points have been converted to the Bezier basis, the control points
    // at the four corners are on the limit surface (since a Bezier patch
    // interpolates its corner control points). We can compute an adaptive
    // tessellation level for transition edges on the limit surface by
    // evaluating a limit position at the mid point of each transition edge.
    tessOuterLo = float4(0,0,0,0);
    tessOuterHi = float4(0,0,0,0);
    int transitionMask = OsdGetPatchTransitionMask(patchParam);
#if OSD_PATCH_ENABLE_SINGLE_CREASE
    // PERFOMANCE: we just need to pick the correct corner points from P, P1, P2
    float3 p0 = OsdEvalBezier(cpBezier, patchParam, float2(0.0, 0.0));
    float3 p3 = OsdEvalBezier(cpBezier, patchParam, float2(1.0, 0.0));
    float3 p12 = OsdEvalBezier(cpBezier, patchParam, float2(0.0, 1.0));
    float3 p15 = OsdEvalBezier(cpBezier, patchParam, float2(1.0, 1.0));
    p0 = miniMul(OsdModelViewMatrix, p0);
    p3 = miniMul(OsdModelViewMatrix, p3);
    p12 = miniMul(OsdModelViewMatrix, p12);
    p15 = miniMul(OsdModelViewMatrix, p15);
    thread float3 * tPt;
    float3 ev;
    if ((transitionMask & 8) != 0) { // EVO3
        ev = OsdEvalBezier(cpBezier, patchParam, float2(0.0, 0.5));
        ev = miniMul(OsdModelViewMatrix, ev);
        tPt = &ev;
        tessOuterHi[0] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,p12, ev);
    } else {
        tPt = &p12;
    }
    tessOuterLo[0] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,p0, *tPt);
    
    if ((transitionMask & 1) != 0) { // EV01
        ev = OsdEvalBezier(cpBezier, patchParam, float2(0.5, 0.0));
        ev = miniMul(OsdModelViewMatrix, ev);
        tPt = &ev;
        tessOuterHi[1] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,p3, ev);
    } else {
        tPt = &p3;
    }
    tessOuterLo[1] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,p0, *tPt);
    
    if ((transitionMask & 2) != 0) { // EV12
        ev = OsdEvalBezier(cpBezier, patchParam, float2(1.0, 0.5));
        ev = miniMul(OsdModelViewMatrix, ev);
        tPt = &ev;
        tessOuterHi[2] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,p15, ev);
    } else {
        tPt = &p15;
    }
    tessOuterLo[2] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,p3, *tPt);
    
    if ((transitionMask & 4) != 0) { // EV23
        ev = OsdEvalBezier(cpBezier, patchParam, float2(0.5, 1.0));
        ev = miniMul(OsdModelViewMatrix, ev);
        tPt = &ev;
        tessOuterHi[3] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,p15, ev);
    } else {
        tPt = &p15;
    }
    tessOuterLo[3] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,p12, *tPt);
#else // OSD_PATCH_ENABLE_SINGLE_CREASE
    float3 p0 = OsdEvalBezier(cpBezier, patchParam, float2(0.0, 0.5));
    float3 p3 = OsdEvalBezier(cpBezier, patchParam, float2(0.5, 0.0));
    float3 p12 = OsdEvalBezier(cpBezier, patchParam, float2(1.0, 0.5));
    float3 p15 = OsdEvalBezier(cpBezier, patchParam, float2(0.5, 1.0));
    p0 = miniMul(OsdModelViewMatrix, p0);
    p3 = miniMul(OsdModelViewMatrix, p3);
    p12 = miniMul(OsdModelViewMatrix, p12);
    p15 = miniMul(OsdModelViewMatrix, p15);
    float3 c00 = miniMul(OsdModelViewMatrix, float3(cpBezier[0].P));
    float3 c12 = miniMul(OsdModelViewMatrix, float3(cpBezier[12].P));
    float3 c03 = miniMul(OsdModelViewMatrix, float3(cpBezier[3].P));
    float3 c15 = miniMul(OsdModelViewMatrix, float3(cpBezier[15].P));
    
    if ((transitionMask & 8) != 0) {
        tessOuterLo[0] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c00, p0);
        tessOuterHi[0] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c12, p0);
    } else {
        tessOuterLo[0] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c00, c12);
    }
    if ((transitionMask & 1) != 0) {
        tessOuterLo[1] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c00, p3);
        tessOuterHi[1] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c03, p3);
    } else {
        tessOuterLo[1] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c00, c03);
    }
    if ((transitionMask & 2) != 0) {
        tessOuterLo[2] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c03, p12);
        tessOuterHi[2] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c15, p12);
    } else {
        tessOuterLo[2] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c03, c15);
    }
    if ((transitionMask & 4) != 0) {
        tessOuterLo[3] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c12, p15);
        tessOuterHi[3] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c15, p15);
    } else {
        tessOuterLo[3] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix,c12, c15);
    }
#endif
static void OsdGetTessLevelsUniform(const float OsdTessLevel, int3 patchParam,
                        thread float4& tessLevelOuter, thread float2& tessLevelInner,
                        thread float4& tessOuterLo, thread float4& tessOuterHi)
    OsdGetTessLevelsUniform(OsdTessLevel, patchParam, tessOuterLo, tessOuterHi);
    OsdComputeTessLevels(tessOuterLo, tessOuterHi, tessLevelOuter, tessLevelInner);
static void OsdGetTessLevelsAdaptiveRefinedPoints(const float OsdTessLevel, const float4x4 OsdProjectionMatrix, const float4x4 OsdModelViewMatrix,
                                      float3 cpRefined[16], int3 patchParam,
                                      thread float4& tessLevelOuter, thread float2& tessLevelInner,
                                      thread float4& tessOuterLo, thread float4& tessOuterHi)
    OsdGetTessLevelsRefinedPoints(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cpRefined, patchParam, tessOuterLo, tessOuterHi);
    OsdComputeTessLevels(tessOuterLo, tessOuterHi,
                         tessLevelOuter, tessLevelInner);
static void OsdGetTessLevelsAdaptiveLimitPoints(const float OsdTessLevel, const float4x4 OsdProjectionMatrix, const float4x4 OsdModelViewMatrix,
                                    device OsdPerPatchVertexBezier* cpBezier,
                                    int3 patchParam,
                                    thread float4& tessLevelOuter, thread float2& tessLevelInner,
                                    thread float4& tessOuterLo, thread float4& tessOuterHi)
    OsdGetTessLevelsLimitPoints(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cpBezier, patchParam, tessOuterLo, tessOuterHi);
    OsdComputeTessLevels(tessOuterLo, tessOuterHi,
                         tessLevelOuter, tessLevelInner);
static void OsdGetTessLevels(const float OsdTessLevel, const float4x4 OsdProjectionMatrix, const float4x4 OsdModelViewMatrix,
                 float3 cp0, float3 cp1, float3 cp2, float3 cp3,
                 int3 patchParam,
                 thread float4& tessLevelOuter, thread float2& tessLevelInner)
    float4 tessOuterLo = float4(0,0,0,0);
    float4 tessOuterHi = float4(0,0,0,0);
    cp0 = mul(OsdModelViewMatrix, float4(cp0, 1.0)).xyz;
    cp1 = mul(OsdModelViewMatrix, float4(cp1, 1.0)).xyz;
    cp2 = mul(OsdModelViewMatrix, float4(cp2, 1.0)).xyz;
    cp3 = mul(OsdModelViewMatrix, float4(cp3, 1.0)).xyz;
#if OSD_ENABLE_SCREENSPACE_TESSELLATION
    tessOuterLo[0] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cp0, cp1);
    tessOuterLo[1] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cp0, cp3);
    tessOuterLo[2] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cp2, cp3);
    tessOuterLo[3] = OsdComputeTessLevel(OsdTessLevel, OsdProjectionMatrix, OsdModelViewMatrix, cp1, cp2);
    tessOuterHi = float4(0,0,0,0);
#else //OSD_ENABLE_SCREENSPACE_TESSELLATION
    OsdGetTessLevelsUniform(OsdTessLevel, patchParam, tessOuterLo, tessOuterHi);
#endif //OSD_ENABLE_SCREENSPACE_TESSELLATION
    OsdComputeTessLevels(tessOuterLo, tessOuterHi,
                         tessLevelOuter, tessLevelInner);
#if OSD_FRACTIONAL_EVEN_SPACING || OSD_FRACTIONAL_ODD_SPACING
static float OsdGetTessFractionalSplit(float t, float level, float levelUp)
    // Fractional tessellation of an edge will produce n segments where n
    // is the tessellation level of the edge (level) rounded up to the
    // nearest even or odd integer (levelUp). There will be n-2 segments of
    // equal length (dx1) and two additional segments of equal length (dx0)
    // that are typically shorter than the other segments. The two additional
    // segments should be placed symmetrically on opposite sides of the
    // edge (offset).
#if OSD_FRACTIONAL_EVEN_SPACING
    if (level <= 2) return t;
    float base = pow(2.0,floor(log2(levelUp)));
    float offset = 1.0/(int(2*base-levelUp)/2 & int(base/2-1));
#elif OSD_FRACTIONAL_ODD_SPACING
    if (level <= 1) return t;
    float base = pow(2.0,floor(log2(levelUp)));
    float offset = 1.0/(((int(2*base-levelUp)/2+1) & int(base/2-1))+1);
#endif //OSD_FRACTIONAL_ODD_SPACING
    float dx0 = (1.0 - (levelUp-level)/2) / levelUp;
    float dx1 = (1.0 - 2.0*dx0) / (levelUp - 2.0*ceil(dx0));
    if (t < 0.5) {
        float x = levelUp/2 - round(t*levelUp);
        return 0.5 - (x*dx1 + int(x*offset > 1) * (dx0 - dx1));
    } else if (t > 0.5) {
        float x = round(t*levelUp) - levelUp/2;
        return 0.5 + (x*dx1 + int(x*offset > 1) * (dx0 - dx1));
    } else {
        return t;
    }
#endif //OSD_FRACTIONAL_EVEN_SPACING || OSD_FRACTIONAL_ODD_SPACING
static float OsdGetTessTransitionSplit(float t, float lo, float hi )
#if OSD_FRACTIONAL_EVEN_SPACING
  float loRoundUp = OsdRoundUpEven(lo);
  float hiRoundUp = OsdRoundUpEven(hi);
  // Convert the parametric t into a segment index along the combined edge.
  float ti = round(t * (loRoundUp + hiRoundUp));
  if (ti <= loRoundUp) {
      float t0 = ti / loRoundUp;
      return OsdGetTessFractionalSplit(t0, lo, loRoundUp) * 0.5;
   } else {
      float t1 = (ti - loRoundUp) / hiRoundUp;
      return OsdGetTessFractionalSplit(t1, hi, hiRoundUp) * 0.5 + 0.5;
    }
#elif OSD_FRACTIONAL_ODD_SPACING
  float loRoundUp = OsdRoundUpOdd(lo);
  float hiRoundUp = OsdRoundUpOdd(hi);
  // Convert the parametric t into a segment index along the combined edge.
  // The +1 below is to account for the extra segment produced by the
  // tessellator since the sum of two odd tess levels will be rounded
  // up by one to the next odd integer tess level.
  float ti = (t * (loRoundUp + hiRoundUp + 1));
  OSD_UV_CORRECTION
  ti = round(ti);
  if (ti <= loRoundUp) {
      float t0 = ti / loRoundUp;
      return OsdGetTessFractionalSplit(t0, lo, loRoundUp) * 0.5;
  } else if (ti > (loRoundUp+1)) {
      float t1 = (ti - (loRoundUp+1)) / hiRoundUp;
      return OsdGetTessFractionalSplit(t1, hi, hiRoundUp) * 0.5 + 0.5;
  } else {
      return 0.5;
#else //OSD_FRACTIONAL_ODD_SPACING
  // Convert the parametric t into a segment index along the combined edge.
  float ti = round(t * (lo + hi));
  if (ti <= lo) {
      return (ti / lo) * 0.5;
  } else {
      return ((ti - lo) / hi) * 0.5 + 0.5;
#endif //OSD_FRACTIONAL_ODD_SPACING
static float2 OsdGetTessParameterization(float2 uv, float4 tessOuterLo, float4 tessOuterHi)
    float2 UV = uv;
if (UV.x == 0 && tessOuterHi[0] > 0)
UV.y = OsdGetTessTransitionSplit(UV.y, tessOuterLo[0], tessOuterHi[0]);
else if (UV.y == 0 && tessOuterHi[1] > 0)
UV.x = OsdGetTessTransitionSplit(UV.x, tessOuterLo[1], tessOuterHi[1]);
else if (UV.x == 1 && tessOuterHi[2] > 0)
UV.y = OsdGetTessTransitionSplit(UV.y, tessOuterLo[2], tessOuterHi[2]);
else if (UV.y == 1 && tessOuterHi[3] > 0)
UV.x = OsdGetTessTransitionSplit(UV.x, tessOuterLo[3], tessOuterHi[3]);
    return UV;
static int4 OsdGetPatchCoord(int3 patchParam)
    int faceId = OsdGetPatchFaceId(patchParam);
    int faceLevel = OsdGetPatchFaceLevel(patchParam);
    int2 faceUV = OsdGetPatchFaceUV(patchParam);
    return int4(faceUV.x, faceUV.y, faceLevel, faceId);
static float4 OsdInterpolatePatchCoord(float2 localUV, int3 patchParam)
    int4 perPrimPatchCoord = OsdGetPatchCoord(patchParam);
    int faceId = perPrimPatchCoord.w;
    int faceLevel = perPrimPatchCoord.z;
    float2 faceUV = float2(perPrimPatchCoord.x, perPrimPatchCoord.y);
    float2 uv = localUV/faceLevel + faceUV/faceLevel;
    // add 0.5 to integer values for more robust interpolation
    return float4(uv.x, uv.y, faceLevel+0.5, faceId+0.5);
// ----------------------------------------------------------------------------
// GregoryBasis
// ----------------------------------------------------------------------------
static void OsdComputePerPatchVertexGregoryBasis(int3 patchParam, int ID, float3 cv,
                                     device OsdPerPatchVertexGregoryBasis& result)
    result.P = cv;
// Regular BSpline to Bezier
constant float4x4 Q(
                    float4(1.f/6.f, 4.f/6.f, 1.f/6.f, 0.f),
                    float4(0.f,     4.f/6.f, 2.f/6.f, 0.f),
                    float4(0.f,     2.f/6.f, 4.f/6.f, 0.f),
                    float4(0.f,     1.f/6.f, 4.f/6.f, 1.f/6.f)
                    );
// Infinitely Sharp (boundary)
constant float4x4 Mi(
                     float4(1.f/6.f, 4.f/6.f, 1.f/6.f, 0.f),
                     float4(0.f,     4.f/6.f, 2.f/6.f, 0.f),
                     float4(0.f,     2.f/6.f, 4.f/6.f, 0.f),
                     float4(0.f,     0.f,     1.f,     0.f)
                     );
    
static float4x4 OsdComputeMs2(float sharpness, float factor)
    float s = exp2(sharpness);
    float s2 = s*s;
    float s3 = s2*s;
    float sx6 = s*6.0;
    float sx6m2 = sx6 - 2;
    float sfrac1 = 1-s;
    float ssub1 = s-1;
    float ssub1_2 = ssub1 * ssub1;
    float div6 = 1.0/6.0;
    
    float4x4 m(
               float4(0, s + 1 + 3*s2 - s3, 7*s - 2 - 6*s2 + 2*s3,    sfrac1 * ssub1_2),
               float4(0,      1 + 2*s + s2,         sx6m2 - 2*s2,             ssub1_2),
               float4(0,               1+s,                sx6m2,              sfrac1),
               float4(0,                 1,                sx6m2,                 1));
    
    m *= factor * (1/sx6);
    
    m[0][0] = div6 * factor;
    
    return m;
// ----------------------------------------------------------------------------
// BSpline
// ----------------------------------------------------------------------------
// convert BSpline cv to Bezier cv
template<typename VertexType> //VertexType should be some type that implements float3 VertexType::GetPosition()
static void OsdComputePerPatchVertexBSpline(int3 patchParam, unsigned ID, threadgroup VertexType* cv, device OsdPerPatchVertexBezier& result)
    int i = ID%4;
    int j = ID/4;
#if OSD_PATCH_ENABLE_SINGLE_CREASE
    float3 P  = float3(0,0,0); // 0 to 1-2^(-Sf)
    float3 P1 = float3(0,0,0); // 1-2^(-Sf) to 1-2^(-Sc)
    float3 P2 = float3(0,0,0); // 1-2^(-Sc) to 1
    float sharpness = OsdGetPatchSharpness(patchParam);
    int boundaryMask = OsdGetPatchBoundaryMask(patchParam);
    if (sharpness > 0 && (boundaryMask & 15))
    {
        float Sf = floor(sharpness);
        float Sc = ceil(sharpness);
        float Sr = fract(sharpness);
        float4x4 Mj = OsdComputeMs2(Sf, 1-Sr);
        float4x4 Ms = Mj;
        Mj += (Sr * Mi);
        Ms += OsdComputeMs2(Sc, Sr);
#if USE_PTVS_SHARPNESS
#else
        float s0 = 1 - exp2(-Sf);
        float s1 = 1 - exp2(-Sc);
        result.vSegments = float2(s0, s1);
#endif
        
        bool isBoundary[2];
        isBoundary[0] = (((boundaryMask & 8) != 0) || ((boundaryMask & 2) != 0)) ? true : false;
        isBoundary[1] = (((boundaryMask & 4) != 0) || ((boundaryMask & 1) != 0)) ? true : false;
        bool needsFlip[2];
        needsFlip[0] = (boundaryMask & 8) ? true : false;
        needsFlip[1] = (boundaryMask & 1) ? true : false;
        float3 Hi[4], Hj[4], Hs[4];
        
        if (isBoundary[0])
        {
            int t[4] = {0,1,2,3};
            int ti = i, step = 1, start = 0;
            if (needsFlip[0]) {
                t[0] = 3; t[1] = 2; t[2] = 1; t[3] = 0;
                ti = 3-i;
                start = 3; step = -1;
            }
            for (int l=0; l<4; ++l) {
                Hi[l] = Hj[l] = Hs[l] = float3(0,0,0);
                for (int k=0, tk = start; k<4; ++k, tk+=step) {
                    float3 p = cv[l*4 + k].GetPosition();
                    Hi[l] += Mi[ti][tk] * p;
                    Hj[l] += Mj[ti][tk] * p;
                    Hs[l] += Ms[ti][tk] * p;
                }
            }
        }
        else
        {
            for (int l=0; l<4; ++l) {
                Hi[l] = Hj[l] = Hs[l] = float3(0,0,0);
                for (int k=0; k<4; ++k) {
                    float3 p = cv[l*4 + k].GetPosition();
                    float3 val = Q[i][k] * p;
                    Hi[l] += val;
                    Hj[l] += val;
                    Hs[l] += val;
                }
            }
        }
        {
            int t[4] = {0,1,2,3};
            int tj = j, step = 1, start = 0;
            if (needsFlip[1]) {
                t[0] = 3; t[1] = 2; t[2] = 1; t[3] = 0;
                tj = 3-j;
                start = 3; step = -1;
            }
            for (int k=0, tk = start; k<4; ++k, tk+=step) {
                if (isBoundary[1])
                {
                    P  += Mi[tj][tk]*Hi[k];
                    P1 += Mj[tj][tk]*Hj[k];
                    P2 += Ms[tj][tk]*Hs[k];
                }
                else
                {
                    P  += Q[j][k]*Hi[k];
                    P1 += Q[j][k]*Hj[k];
                    P2 += Q[j][k]*Hs[k];
                }
            }
        }
#if CFX_OPTIMIZE_OPENSUBDIV_STORAGE
    result.P  = half3(P);
    result.P1 = half3(P1);
    result.P2 = half3(P2);
#else
    result.P  = P;
    result.P1 = P1;
    result.P2 = P2;
#endif //CFX_OPTIMIZE_OPENSUBDIV_STORAGE
    } else {
#if USE_PTVS_SHARPNESS
#else
#if CFX_OPTIMIZE_OPENSUBDIV_STORAGE
        result.vSegments = half2(0, 0);
#else
        result.vSegments = float2(0, 0);
#endif //CFX_OPTIMIZE_OPENSUBDIV_STORAGE
#endif
        OsdComputeBSplineBoundaryPoints(cv, patchParam);
    float3 Hi[4];
    for (int l=0; l<4; ++l) {
        Hi[l] = float3(0,0,0);
        for (int k=0; k<4; ++k) {
            Hi[l] += Q[i][k] * cv[l*4 + k].GetPosition();
        }
    }
    for (int k=0; k<4; ++k) {
        P += Q[j][k]*Hi[k];
    }
        
#if CFX_OPTIMIZE_OPENSUBDIV_STORAGE
    result.P  = half3(P);
    result.P1 = half3(P);
    result.P2 = half3(P);
#else
    result.P  = P;
    result.P1 = P;
    result.P2 = P;
#endif //CFX_OPTIMIZE_OPENSUBDIV_STORAGE
#else
    OsdComputeBSplineBoundaryPoints(cv, patchParam);
    float3 H[4];
    for (int l=0; l<4; ++l) {
        H[l] = float3(0,0,0);
        for(int k=0; k<4; ++k) {
            H[l] += Q[i][k] * (cv + l*4 + k)->GetPosition();
        }
    }
    {
        float3 P = float3(0,0,0);
        for (int k=0; k<4; ++k){
            P += Q[j][k]*H[k];
        }
#if CFX_OPTIMIZE_OPENSUBDIV_STORAGE
        result.P = half3(P);
#else
        result.P = P;
#endif
    }
#endif
template<typename PerPatchVertexBezier>
static void OsdEvalPatchBezier(int3 patchParam, float2 UV,
                   PerPatchVertexBezier cv,
                   thread float3& P, thread float3& dPu, thread float3& dPv,
                   thread float3& N, thread float3& dNu, thread float3& dNv,
                   thread float2& vSegments)
#if OSD_COMPUTE_NORMAL_DERIVATIVES
    float B[4], D[4], C[4];
    float3 BUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)},
    DUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)},
    CUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)};
    OsdUnivar4x4(UV.x, B, D, C);
#else
    float B[4], D[4];
    float3 BUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)},
    DUCP[4] = {float3(0,0,0),float3(0,0,0),float3(0,0,0),float3(0,0,0)};
    OsdUnivar4x4(UV.x, B, D);
#endif
    // ----------------------------------------------------------------
#if OSD_PATCH_ENABLE_SINGLE_CREASE
#if USE_PTVS_SHARPNESS
    float sharpness = OsdGetPatchSharpness(patchParam);
    float Sf = floor(sharpness);
    float Sc = ceil(sharpness);
    float s0 = 1 - exp2(-Sf);
    float s1 = 1 - exp2(-Sc);
    vSegments = float2(s0, s1);
#else //USE_PTVS_SHARPNESS
    vSegments = cv[0].vSegments;
#endif //USE_PTVS_SHARPNESS
    float s = OsdGetPatchSingleCreaseSegmentParameter(patchParam, UV);
    for (int i=0; i<4; ++i) {
        for (int j=0; j<4; ++j) {
            int k = 4*i + j;
            float3 A = (s <= vSegments.x) ? float3(cv[k].P)
            :   ((s <= vSegments.y) ?  float3(cv[k].P1)
                 :  float3(cv[k].P2));
            BUCP[i] += A * B[j];
            DUCP[i] += A * D[j];
#if OSD_COMPUTE_NORMAL_DERIVATIVES
            CUCP[i] += A * C[j];
#endif //OSD_COMPUTE_NORMAL_DERIVATIVES
        }
    }
#else //OSD_PATCH_ENABLE_SINGLE_CREASE
    // ----------------------------------------------------------------
    for (int i=0; i<4; ++i) {
        for (int j=0; j<4; ++j) {
            float3 A = float3(cv[4*i + j].P);
            BUCP[i] += A * B[j];
            DUCP[i] += A * D[j];
#if OSD_COMPUTE_NORMAL_DERIVATIVES
            CUCP[i] += A * C[j];
#endif //OSD_COMPUTE_NORMAL_DERIVATIVES
        }
    }
#endif //OSD_PATCH_ENABLE_SINGLE_CREASE
    // ----------------------------------------------------------------
#if OSD_COMPUTE_NORMAL_DERIVATIVES
    // used for weingarten term
    OsdUnivar4x4(UV.y, B, D, C);
    P = B[0] * BUCP[0];
    dPu = B[0] * DUCP[0];
    dPv = D[0] * BUCP[0];
    float3 dUU = B[0] * CUCP[0];
    float3 dVV = C[0] * BUCP[0];
    float3 dUV = D[0] * DUCP[0];
    for (int k=1; k<4; ++k) {
        P   += B[k] * BUCP[k];
        dPu += B[k] * DUCP[k];
        dPv += D[k] * BUCP[k];
        dUU += B[k] * CUCP[k];
        dVV += C[k] * BUCP[k];
        dUV += D[k] * DUCP[k];
    }
    int level = OsdGetPatchFaceLevel(patchParam);
    dPu *= 3 * level;
    dPv *= 3 * level;
    dUU *= 6 * level;
    dVV *= 6 * level;
    dUV *= 9 * level;
    float3 n = cross(dPu, dPv);
    float ln = 1.0 / length(n);
    N = ln * n;
    float E = dot(dPu, dPu);
    float F = dot(dPu, dPv);
    float G = dot(dPv, dPv);
    float e = dot(N, dUU);
    float f = dot(N, dUV);
    float g = dot(N, dVV);
    float EGFF = 1.0 / (E*G - F*F);
    dNu = (f*F-e*G) * EGFF * dPu + (e*F-f*E) * EGFF * dPv;
    dNv = (g*F-f*G) * EGFF * dPu + (f*F-g*E) * EGFF * dPv;
    float powrn = 1.0 / powr(dot(n,n), 1.5);
    dNu = dNu * ln - n * (dot(dNu,n) * powrn);
    dNv = dNv * ln - n * (dot(dNv,n) * powrn);
#else //OSD_COMPUTE_NORMAL_DERIVATIVES
    OsdUnivar4x4(UV.y, B, D);
    P = B[0] * BUCP[0];
    dPu = B[0] * DUCP[0];
    dPv = D[0] * BUCP[0];
    for (int k=1; k<4; ++k) {
        P   += B[k] * BUCP[k];
        dPu += B[k] * DUCP[k];
        dPv += D[k] * BUCP[k];
    }
    int level = OsdGetPatchFaceLevel(patchParam);
    dPu *= 3 * level;
    dPv *= 3 * level;
    N = normalize(cross(dPu, dPv));
    dNu = float3(0,0,0);
    dNv = float3(0,0,0);
#endif //OSD_COMPUTE_NORMAL_DERIVATIVES
// compute single-crease patch matrix
static float4x4 OsdComputeMs(float sharpness)
    float s = exp2(sharpness);
    float s2 = s*s;
    float s3 = s2*s;
    float4x4 m(
        float4(0, s + 1 + 3*s2 - s3, 7*s - 2 - 6*s2 + 2*s3, (1-s)*(s-1)*(s-1)),
        float4(0,       (1+s)*(1+s),        6*s - 2 - 2*s2,       (s-1)*(s-1)),
        float4(0,               1+s,               6*s - 2,               1-s),
        float4(0,                 1,               6*s - 2,                 1));
    m[0] /= (s*6.0);
    m[1] /= (s*6.0);
    m[2] /= (s*6.0);
    m[3] /= (s*6.0);
    m[0][0] = 1.0/6.0;
    return m;
// flip matrix orientation
static float4x4 OsdFlipMatrix(float4x4 m)
    return float4x4(float4(m[3][3], m[3][2], m[3][1], m[3][0]),
                    float4(m[2][3], m[2][2], m[2][1], m[2][0]),
                    float4(m[1][3], m[1][2], m[1][1], m[1][0]),
                    float4(m[0][3], m[0][2], m[0][1], m[0][0]));
static void OsdFlipMatrix(threadgroup float * src, threadgroup float * dst)
    for (int i = 0; i < 16; i++) dst[i] = src[15-i];
// ----------------------------------------------------------------------------
// Legacy Gregory
// ----------------------------------------------------------------------------
#if OSD_PATCH_GREGORY || OSD_PATCH_GREGORY_BOUNDARY
#if OSD_MAX_VALENCE<=10
constant float ef[7] = {
    0.813008, 0.500000, 0.363636, 0.287505,
    0.238692, 0.204549, 0.179211
#else
constant float ef[27] = {
    0.812816, 0.500000, 0.363644, 0.287514,
    0.238688, 0.204544, 0.179229, 0.159657,
    0.144042, 0.131276, 0.120632, 0.111614,
    0.103872, 0.09715, 0.0912559, 0.0860444,
    0.0814022, 0.0772401, 0.0734867, 0.0700842,
    0.0669851, 0.0641504, 0.0615475, 0.0591488,
    0.0569311, 0.0548745, 0.0529621
#endif
static float cosfn(int n, int j) {
    return cospi((2.0f * j)/float(n));
static float sinfn(int n, int j) {
    return sinpi((2.0f * j)/float(n));
#ifndef OSD_MAX_VALENCE
#define OSD_MAX_VALENCE 4
#endif
template<typename OsdVertexBuffer>
static float3 OsdReadVertex(int vertexIndex, OsdVertexBuffer osdVertexBuffer)
    int index = (vertexIndex /*+ OsdBaseVertex()*/);
    return osdVertexBuffer[index].position;
template<typename OsdValenceBuffer>
static int OsdReadVertexValence(int vertexID, OsdValenceBuffer osdValenceBuffer)
    int index = int(vertexID * (2 * OSD_MAX_VALENCE + 1));
    return osdValenceBuffer[index];
template<typename OsdValenceBuffer>
static int OsdReadVertexIndex(int vertexID, int valenceVertex, OsdValenceBuffer osdValenceBuffer)
    int index = int(vertexID * (2 * OSD_MAX_VALENCE + 1) + 1 + valenceVertex);
    return osdValenceBuffer[index];
template<typename OsdQuadOffsetBuffer>
static int OsdReadQuadOffset(int primitiveID, int offsetVertex, OsdQuadOffsetBuffer osdQuadOffsetBuffer)
    int index = int(4*primitiveID + offsetVertex);
    return osdQuadOffsetBuffer[index];
static void OsdComputePerVertexGregory(unsigned vID, float3 P, threadgroup OsdPerVertexGregory& v, OsdPatchParamBufferSet osdBuffers)
    v.clipFlag = short3(0,0,0);
    int ivalence = OsdReadVertexValence(vID, osdBuffers.valenceBuffer);
    v.valence = ivalence;
    int valence = abs(ivalence);
    float3 f[OSD_MAX_VALENCE];
    float3 pos = P;
    float3 opos = float3(0,0,0);
#if OSD_PATCH_GREGORY_BOUNDARY
    v.org = pos;
    int boundaryEdgeNeighbors[2];
    int currNeighbor = 0;
    int ibefore = 0;
    int zerothNeighbor = 0;
#endif
    for (int i=0; i<valence; ++i) {
        int im = (i+valence-1)%valence;
        int ip = (i+1)%valence;
        int idx_neighbor = OsdReadVertexIndex(vID, 2*i, osdBuffers.valenceBuffer);
#if OSD_PATCH_GREGORY_BOUNDARY
        bool isBoundaryNeighbor = false;
        int valenceNeighbor = OsdReadVertexValence(idx_neighbor, osdBuffers.valenceBuffer);
        if (valenceNeighbor < 0) {
            isBoundaryNeighbor = true;
            if (currNeighbor<2) {
                boundaryEdgeNeighbors[currNeighbor] = idx_neighbor;
            }
            currNeighbor++;
            if (currNeighbor == 1) {
                ibefore = i;
                zerothNeighbor = i;
            } else {
                if (i-ibefore == 1) {
                    int tmp = boundaryEdgeNeighbors[0];
                    boundaryEdgeNeighbors[0] = boundaryEdgeNeighbors[1];
                    boundaryEdgeNeighbors[1] = tmp;
                    zerothNeighbor = i;
                }
            }
        }
#endif
        float3 neighbor = OsdReadVertex(idx_neighbor, osdBuffers.vertexBuffer);
        int idx_diagonal = OsdReadVertexIndex(vID, 2*i + 1, osdBuffers.valenceBuffer);
        float3 diagonal = OsdReadVertex(idx_diagonal, osdBuffers.vertexBuffer);
        int idx_neighbor_p = OsdReadVertexIndex(vID, 2*ip, osdBuffers.valenceBuffer);
        float3 neighbor_p = OsdReadVertex(idx_neighbor_p, osdBuffers.vertexBuffer);
        int idx_neighbor_m = OsdReadVertexIndex(vID, 2*im, osdBuffers.valenceBuffer);
        float3 neighbor_m = OsdReadVertex(idx_neighbor_m, osdBuffers.vertexBuffer);
        int idx_diagonal_m = OsdReadVertexIndex(vID, 2*im + 1, osdBuffers.valenceBuffer);
        float3 diagonal_m = OsdReadVertex(idx_diagonal_m, osdBuffers.vertexBuffer);
        f[i] = (pos * float(valence) + (neighbor_p + neighbor)*2.0f + diagonal) / (float(valence)+5.0f);
        opos += f[i];
        v.r[i] = (neighbor_p-neighbor_m)/3.0f + (diagonal - diagonal_m)/6.0f;
    }
    opos /= valence;
    v.P = float4(opos, 1.0f).xyz;
    float3 e;
    v.e0 = float3(0,0,0);
    v.e1 = float3(0,0,0);
    for(int i=0; i<valence; ++i) {
        int im = (i + valence -1) % valence;
        e = 0.5f * (f[i] + f[im]);
        v.e0 += cosfn(valence, i)*e;
        v.e1 += sinfn(valence, i)*e;
    }
    v.e0 *= ef[valence - 3];
    v.e1 *= ef[valence - 3];
#if OSD_PATCH_GREGORY_BOUNDARY
    v.zerothNeighbor = zerothNeighbor;
    if (currNeighbor == 1) {
        boundaryEdgeNeighbors[1] = boundaryEdgeNeighbors[0];
    }
    if (ivalence < 0) {
        if (valence > 2) {
            v.P = (OsdReadVertex(boundaryEdgeNeighbors[0], osdBuffers.vertexBuffer) +
                   OsdReadVertex(boundaryEdgeNeighbors[1], osdBuffers.vertexBuffer) +
                   4.0f * pos)/6.0f;
        } else {
            v.P = pos;
        }
        v.e0 = (OsdReadVertex(boundaryEdgeNeighbors[0], osdBuffers.vertexBuffer) -
                OsdReadVertex(boundaryEdgeNeighbors[1], osdBuffers.vertexBuffer))/6.0;
        float k = float(float(valence) - 1.0f);    //k is the number of faces
        float c = cospi(1.0/k);
        float s = sinpi(1.0/k);
        float gamma = -(4.0f*s)/(3.0f*k+c);
        float alpha_0k = -((1.0f+2.0f*c)*sqrt(1.0f+c))/((3.0f*k+c)*sqrt(1.0f-c));
        float beta_0 = s/(3.0f*k + c);
        int idx_diagonal = OsdReadVertexIndex(vID, 2*zerothNeighbor + 1, osdBuffers.valenceBuffer);
        float3 diagonal = OsdReadVertex(idx_diagonal, osdBuffers.vertexBuffer);
        v.e1 = gamma * pos +
            alpha_0k * OsdReadVertex(boundaryEdgeNeighbors[0], osdBuffers.vertexBuffer) +
            alpha_0k * OsdReadVertex(boundaryEdgeNeighbors[1], osdBuffers.vertexBuffer) +
            beta_0 * diagonal;
        for (int x=1; x<valence - 1; ++x) {
            int curri = ((x + zerothNeighbor)%valence);
            float alpha = (4.0f*sinpi((float(x))/k))/(3.0f*k+c);
            float beta = (sinpi((float(x))/k) + sinpi((float(x+1))/k))/(3.0f*k+c);
            int idx_neighbor = OsdReadVertexIndex(vID, 2*curri, osdBuffers.valenceBuffer);
            float3 neighbor = OsdReadVertex(idx_neighbor, osdBuffers.vertexBuffer);
            idx_diagonal = OsdReadVertexIndex(vID, 2*curri + 1, osdBuffers.valenceBuffer);
            diagonal = OsdReadVertex(idx_diagonal, osdBuffers.vertexBuffer);
            v.e1 += alpha * neighbor + beta * diagonal;
        }
        v.e1 /= 3.0f;
    }
#endif
static void OsdComputePerPatchVertexGregory(int3 patchParam, unsigned ID, unsigned primitiveID,
                                threadgroup OsdPerVertexGregory* v,
                                device OsdPerPatchVertexGregory& result,
                                OsdPatchParamBufferSet osdBuffers)
    result.P = v[ID].P;
    int i = ID;
    int ip = (i+1)%4;
    int im = (i+3)%4;
    int valence = abs(v[i].valence);
    int n = valence;
    int start = OsdReadQuadOffset(primitiveID, i, osdBuffers.quadOffsetBuffer) & 0xff;
    int prev = (OsdReadQuadOffset(primitiveID, i, osdBuffers.quadOffsetBuffer) >> 8) & 0xff;
    int start_m = OsdReadQuadOffset(primitiveID, im, osdBuffers.quadOffsetBuffer) & 0xff;
    int prev_p = (OsdReadQuadOffset(primitiveID, ip, osdBuffers.quadOffsetBuffer) >> 8) & 0xff;
    int np = abs(v[ip].valence);
    int nm = abs(v[im].valence);
    // Control Vertices based on :
    // "Approximating Subdivision Surfaces with Gregory Patches
    //  for Hardware Tessellation"
    // Loop, Schaefer, Ni, Castano (ACM ToG Siggraph Asia 2009)
    //
    //  P3         e3-      e2+         P2
    //     O--------O--------O--------O
    //     |        |        |        |
    //     |        |        |        |
    //     |        | f3-    | f2+    |
    //     |        O        O        |
    // e3+ O------O            O------O e2-
    //     |     f3+          f2-     |
    //     |                          |
    //     |                          |
    //     |      f0-         f1+     |
    // e0- O------O            O------O e1+
    //     |        O        O        |
    //     |        | f0+    | f1-    |
    //     |        |        |        |
    //     |        |        |        |
    //     O--------O--------O--------O
    //  P0         e0+      e1-         P1
    //
#if OSD_PATCH_GREGORY_BOUNDARY
    float3 Em_ip;
    if (v[ip].valence < -2) {
        int j = (np + prev_p - v[ip].zerothNeighbor) % np;
        Em_ip = v[ip].P + cospi(j/float(np-1))*v[ip].e0 + sinpi(j/float(np-1))*v[ip].e1;
    } else {
        Em_ip = v[ip].P + v[ip].e0*cosfn(np, prev_p) + v[ip].e1*sinfn(np, prev_p);
    }
    float3 Ep_im;
    if (v[im].valence < -2) {
        int j = (nm + start_m - v[im].zerothNeighbor) % nm;
        Ep_im = v[im].P + cospi(j/float(nm-1))*v[im].e0 + sinpi(j/float(nm-1))*v[im].e1;
    } else {
        Ep_im = v[im].P + v[im].e0*cosfn(nm, start_m) + v[im].e1*sinfn(nm, start_m);
    }
    if (v[i].valence < 0) {
        n = (n-1)*2;
    }
    if (v[im].valence < 0) {
        nm = (nm-1)*2;
    }
    if (v[ip].valence < 0) {
        np = (np-1)*2;
    }
    if (v[i].valence > 2) {
        result.Ep = v[i].P + (v[i].e0*cosfn(n, start) + v[i].e1*sinfn(n, start));
        result.Em = v[i].P + (v[i].e0*cosfn(n, prev) +  v[i].e1*sinfn(n, prev));
        float s1=3-2*cosfn(n,1)-cosfn(np,1);
        float s2=2*cosfn(n,1);
        result.Fp = (cosfn(np,1)*v[i].P + s1*result.Ep + s2*Em_ip + v[i].r[start])/3.0f;
        s1 = 3.0f-2.0f*cospi(2.0f/float(n))-cospi(2.0f/float(nm));
        result.Fm = (cosfn(nm,1)*v[i].P + s1*result.Em + s2*Ep_im - v[i].r[prev])/3.0f;
    } else if (v[i].valence < -2) {
        int j = (valence + start - v[i].zerothNeighbor) % valence;
        result.Ep = v[i].P + cospi(j/float(valence-1))*v[i].e0 + sinpi(j/float(valence-1))*v[i].e1;
        j = (valence + prev - v[i].zerothNeighbor) % valence;
        result.Em = v[i].P + cospi(j/float(valence-1))*v[i].e0 + sinpi(j/float(valence-1))*v[i].e1;
        float3 Rp = ((-2.0f * v[i].org - 1.0f * v[im].org) + (2.0f * v[ip].org + 1.0f * v[(i+2)%4].org))/3.0f;
        float3 Rm = ((-2.0f * v[i].org - 1.0f * v[ip].org) + (2.0f * v[im].org + 1.0f * v[(i+2)%4].org))/3.0f;
        float s1 = 3-2*cosfn(n,1)-cosfn(np,1);
        float s2 = 2*cosfn(n,1);
        result.Fp = (cosfn(np,1)*v[i].P + s1*result.Ep + s2*Em_ip + v[i].r[start])/3.0f;
        s1 = 3.0f-2.0f*cospi(2.0f/float(n))-cospi(2.0f/float(nm));
        result.Fm = (cosfn(nm,1)*v[i].P + s1*result.Em + s2*Ep_im - v[i].r[prev])/3.0f;
        if (v[im].valence < 0) {
            s1 = 3-2*cosfn(n,1)-cosfn(np,1);
            result.Fp = result.Fm = (cosfn(np,1)*v[i].P + s1*result.Ep + s2*Em_ip + v[i].r[start])/3.0f;
        } else if (v[ip].valence < 0) {
            s1 = 3.0f-2.0f*cospi(2.0f/n)-cospi(2.0f/nm);
            result.Fm = result.Fp = (cosfn(nm,1)*v[i].P + s1*result.Em + s2*Ep_im - v[i].r[prev])/3.0f;
        }
    } else if (v[i].valence == -2) {
        result.Ep = (2.0f * v[i].org + v[ip].org)/3.0f;
        result.Em = (2.0f * v[i].org + v[im].org)/3.0f;
        result.Fp = result.Fm = (4.0f * v[i].org + v[(i+2)%n].org + 2.0f * v[ip].org + 2.0f * v[im].org)/9.0f;
    }
#else // not OSD_PATCH_GREGORY_BOUNDARY
    result.Ep = v[i].P + v[i].e0 * cosfn(n, start) + v[i].e1*sinfn(n, start);
    result.Em = v[i].P + v[i].e0 * cosfn(n, prev ) + v[i].e1*sinfn(n, prev );
    float3 Em_ip = v[ip].P + v[ip].e0*cosfn(np, prev_p) + v[ip].e1*sinfn(np, prev_p);
    float3 Ep_im = v[im].P + v[im].e0*cosfn(nm, start_m) + v[im].e1*sinfn(nm, start_m);
    float s1 = 3-2*cosfn(n,1)-cosfn(np,1);
    float s2 = 2*cosfn(n,1);
    result.Fp = (cosfn(np,1)*v[i].P + s1*result.Ep + s2*Em_ip + v[i].r[start])/3.0f;
    s1 = 3.0f-2.0f*cospi(2.0f/float(n))-cospi(2.0f/float(nm));
    result.Fm = (cosfn(nm,1)*v[i].P + s1*result.Em +s2*Ep_im - v[i].r[prev])/3.0f;
#endif
#endif  // OSD_PATCH_GREGORY || OSD_PATCH_GREGORY_BOUNDARY
//   Copyright 2016 Pixar
//   Licensed under the Apache License, Version 2.0 (the "Apache License")
//   with the following modification; you may not use this file except in
//   compliance with the Apache License and the following modification to it:
//   Section 6. Trademarks. is deleted and replaced with:
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor
//      and its affiliates, except as required to comply with Section 4(c) of
//      the License and to reproduce the content of the NOTICE file.
//   You may obtain a copy of the Apache License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the Apache License with the above modification is
//   distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//   KIND, either express or implied. See the Apache License for the specific
//   language governing permissions and limitations under the Apache License.
#ifndef OPENSUBDIV3_OSD_PATCH_BASIS_COMMON_H
#define OPENSUBDIV3_OSD_PATCH_BASIS_COMMON_H
#if defined(OSD_PATCH_BASIS_GLSL)
    #define OSD_FUNCTION_STORAGE_CLASS
    #define OSD_DATA_STORAGE_CLASS
    #define OSD_OPTIONAL(a) true
    #define OSD_OPTIONAL_INIT(a,b) b
    #define OSD_OUT out
    #define OSD_INOUT inout
    #define OSD_TYPE_ARRAY(elementType, identifier, arraySize) elementType identifier[arraySize]
    #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7)             elementType[](a0,a1,a2,a3,a4,a5,a6,a7)
    #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)             elementType[](a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)
#elif defined(OSD_PATCH_BASIS_HLSL)
    #define OSD_FUNCTION_STORAGE_CLASS
    #define OSD_DATA_STORAGE_CLASS
    #define OSD_OPTIONAL(a) true
    #define OSD_OPTIONAL_INIT(a,b) b
    #define OSD_OUT out
    #define OSD_INOUT inout
    #define OSD_TYPE_ARRAY(elementType, identifier, arraySize) elementType identifier[arraySize]
    #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7)             {a0,a1,a2,a3,a4,a5,a6,a7}
    #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)             {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11}
#elif defined(OSD_PATCH_BASIS_CUDA)
    #define OSD_FUNCTION_STORAGE_CLASS __device__
    #define OSD_DATA_STORAGE_CLASS
    #define OSD_OPTIONAL(a) true
    #define OSD_OPTIONAL_INIT(a,b) b
    #define OSD_OUT
    #define OSD_INOUT
    #define OSD_TYPE_ARRAY(elementType, identifier, arraySize) elementType identifier[arraySize]
    #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7)             {a0,a1,a2,a3,a4,a5,a6,a7}
    #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)             {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11}
#elif defined(OSD_PATCH_BASIS_OPENCL)
    #define OSD_FUNCTION_STORAGE_CLASS static
    #define OSD_DATA_STORAGE_CLASS
    #define OSD_OPTIONAL(a) true
    #define OSD_OPTIONAL_INIT(a,b) b
    #define OSD_OUT
    #define OSD_INOUT
    #define OSD_TYPE_ARRAY(elementType, identifier, arraySize) elementType identifier[arraySize]
    #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7)             {a0,a1,a2,a3,a4,a5,a6,a7}
    #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)             {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11}
#elif defined(OSD_PATCH_BASIS_METAL)
    #define OSD_FUNCTION_STORAGE_CLASS static
    #define OSD_DATA_STORAGE_CLASS
    #define OSD_OPTIONAL(a) true
    #define OSD_OPTIONAL_INIT(a,b) b
    #define OSD_OUT
    #define OSD_INOUT
    #define OSD_TYPE_ARRAY(elementType, identifier, arraySize) thread elementType* identifier
    #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7)             {a0,a1,a2,a3,a4,a5,a6,a7}
    #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)             {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11}
#else
    #define OSD_FUNCTION_STORAGE_CLASS static inline
    #define OSD_DATA_STORAGE_CLASS static
    #define OSD_OPTIONAL(a) (a)
    #define OSD_OPTIONAL_INIT(a,b) (a ? b : 0)
    #define OSD_OUT
    #define OSD_INOUT
    #define OSD_TYPE_ARRAY(elementType, identifier, arraySize) elementType identifier[arraySize]
    #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7)             {a0,a1,a2,a3,a4,a5,a6,a7}
    #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)             {a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11}
#endif
OSD_FUNCTION_STORAGE_CLASS
void
OsdGetBezierWeights(
    float t, OSD_TYPE_ARRAY(OSD_OUT float, wP, 4), OSD_TYPE_ARRAY(OSD_OUT float, wDP, 4), OSD_TYPE_ARRAY(OSD_OUT float, wDP2, 4)) {
    // The four uniform cubic Bezier basis functions (in terms of t and its
    // complement tC) evaluated at t:
    float t2 = t*t;
    float tC = 1.0f - t;
    float tC2 = tC * tC;
    wP[0] = tC2 * tC;
    wP[1] = tC2 * t * 3.0f;
    wP[2] = t2 * tC * 3.0f;
    wP[3] = t2 * t;
    // Derivatives of the above four basis functions at t:
    if (OSD_OPTIONAL(wDP)) {
       wDP[0] = -3.0f * tC2;
       wDP[1] =  9.0f * t2 - 12.0f * t + 3.0f;
       wDP[2] = -9.0f * t2 +  6.0f * t;
       wDP[3] =  3.0f * t2;
    }
    // Second derivatives of the basis functions at t:
    if (OSD_OPTIONAL(wDP2)) {
        wDP2[0] =   6.0f * tC;
        wDP2[1] =  18.0f * t - 12.0f;
        wDP2[2] = -18.0f * t +  6.0f;
        wDP2[3] =   6.0f * t;
    }
OSD_FUNCTION_STORAGE_CLASS
void
OsdGetBSplineWeights(
    float t, OSD_TYPE_ARRAY(OSD_OUT float, wP, 4), OSD_TYPE_ARRAY(OSD_OUT float, wDP, 4), OSD_TYPE_ARRAY(OSD_OUT float, wDP2, 4)) {
    // The four uniform cubic B-Spline basis functions evaluated at t:
    const float one6th = 1.0f / 6.0f;
    float t2 = t * t;
    float t3 = t * t2;
    wP[0] = one6th * (1.0f - 3.0f*(t -      t2) -      t3);
    wP[1] = one6th * (4.0f           - 6.0f*t2  + 3.0f*t3);
    wP[2] = one6th * (1.0f + 3.0f*(t +      t2  -      t3));
    wP[3] = one6th * (                                 t3);
    // Derivatives of the above four basis functions at t:
    if (OSD_OPTIONAL(wDP)) {
        wDP[0] = -0.5f*t2 +      t - 0.5f;
        wDP[1] =  1.5f*t2 - 2.0f*t;
        wDP[2] = -1.5f*t2 +      t + 0.5f;
        wDP[3] =  0.5f*t2;
    }
    // Second derivatives of the basis functions at t:
    if (OSD_OPTIONAL(wDP2)) {
        wDP2[0] = -       t + 1.0f;
        wDP2[1] =  3.0f * t - 2.0f;
        wDP2[2] = -3.0f * t + 1.0f;
        wDP2[3] =         t;
    }
OSD_FUNCTION_STORAGE_CLASS
void
OsdGetBoxSplineWeights(float v, float w, OSD_TYPE_ARRAY(OSD_OUT float, wP, 12)) {
    float u = 1.0f - v - w;
    //
    //  The 12 basis functions of the quartic box spline (unscaled by their common
    //  factor of 1/12 until later, and formatted to make it easy to spot any
    //  typing errors):
    //
    //      15 terms for the 3 points above the triangle corners
    //       9 terms for the 3 points on faces opposite the triangle edges
    //       2 terms for the 6 points on faces opposite the triangle corners
    //
    //  Powers of each variable for notational convenience:
    float u2 = u*u;
    float u3 = u*u2;
    float u4 = u*u3;
    float v2 = v*v;
    float v3 = v*v2;
    float v4 = v*v3;
    float w2 = w*w;
    float w3 = w*w2;
    float w4 = w*w3;
    //  And now the basis functions:
    wP[ 0] = u4 + 2.0f*u3*v;
    wP[ 1] = u4 + 2.0f*u3*w;
    wP[ 8] = w4 + 2.0f*w3*u;
    wP[11] = w4 + 2.0f*w3*v;
    wP[ 9] = v4 + 2.0f*v3*w;
    wP[ 5] = v4 + 2.0f*v3*u;
    wP[ 2] = u4 + 2.0f*u3*w + 6.0f*u3*v + 6.0f*u2*v*w + 12.0f*u2*v2 +
                v4 + 2.0f*v3*w + 6.0f*v3*u + 6.0f*v2*u*w;
    wP[ 4] = w4 + 2.0f*w3*v + 6.0f*w3*u + 6.0f*w2*u*v + 12.0f*w2*u2 +
                u4 + 2.0f*u3*v + 6.0f*u3*w + 6.0f*u2*v*w;
    wP[10] = v4 + 2.0f*v3*u + 6.0f*v3*w + 6.0f*v2*w*u + 12.0f*v2*w2 +
                w4 + 2.0f*w3*u + 6.0f*w3*v + 6.0f*w3*u*v;
    wP[ 3] = v4 + 6*v3*w + 8*v3*u + 36*v2*w*u + 24*v2*u2 + 24*v*u3 +
                w4 + 6*w3*v + 8*w3*u + 36*w2*v*u + 24*w2*u2 + 24*w*u3 + 6*u4 + 60*u2*v*w + 12*v2*w2;
    wP[ 6] = w4 + 6*w3*u + 8*w3*v + 36*w2*u*v + 24*w2*v2 + 24*w*v3 +
                u4 + 6*u3*w + 8*u3*v + 36*u2*v*w + 24*u2*v2 + 24*u*v3 + 6*v4 + 60*v2*w*u + 12*w2*u2;
    wP[ 7] = u4 + 6*u3*v + 8*u3*w + 36*u2*v*w + 24*u2*w2 + 24*u*w3 +
                v4 + 6*v3*u + 8*v3*w + 36*v2*u*w + 24*v2*w2 + 24*v*w3 + 6*w4 + 60*w2*u*v + 12*u2*v2;
    for (int i = 0; i < 12; ++i) {
        wP[i] *= 1.0f / 12.0f;
    }
OSD_FUNCTION_STORAGE_CLASS
void
OsdGetBilinearPatchWeights(
        float s, float t, float dScale,
        OSD_TYPE_ARRAY(OSD_OUT float, wP, 4), OSD_TYPE_ARRAY(OSD_OUT float, wDs, 4), OSD_TYPE_ARRAY(OSD_OUT float, wDt, 4),
        OSD_TYPE_ARRAY(OSD_OUT float, wDss, 4), OSD_TYPE_ARRAY(OSD_OUT float, wDst, 4), OSD_TYPE_ARRAY(OSD_OUT float, wDtt, 4)) {
    float sC = 1.0f - s,
          tC = 1.0f - t;
    if (OSD_OPTIONAL(wP)) {
        wP[0] = sC * tC;
        wP[1] =  s * tC;
        wP[2] =  s * t;
        wP[3] = sC * t;
    }
    if (OSD_OPTIONAL(derivS && derivT)) {
        wDs[0] = -tC * dScale;
        wDs[1] =  tC * dScale;
        wDs[2] =   t * dScale;
        wDs[3] =  -t * dScale;
        wDt[0] = -sC * dScale;
        wDt[1] =  -s * dScale;
        wDt[2] =   s * dScale;
        wDt[3] =  sC * dScale;
        if (OSD_OPTIONAL(derivSS && derivST && derivTT)) {
            float d2Scale = dScale * dScale;
            for(int i=0;i<4;i++) {
                wDss[i] = 0;
                wDtt[i] = 0;
            }
            wDst[0] =  d2Scale;
            wDst[1] = -d2Scale;
            wDst[2] = -d2Scale;
            wDst[3] =  d2Scale;
        }
    }
OSD_FUNCTION_STORAGE_CLASS
void OsdAdjustBoundaryWeights(
        int boundary,
        OSD_TYPE_ARRAY(OSD_INOUT float, sWeights, 4), OSD_TYPE_ARRAY(OSD_INOUT float, tWeights, 4)) {
    if ((boundary & 1) != 0) {
        tWeights[2] -= tWeights[0];
        tWeights[1] += 2*tWeights[0];
        tWeights[0] = 0;
    }
    if ((boundary & 2) != 0) {
        sWeights[1] -= sWeights[3];
        sWeights[2] += 2*sWeights[3];
        sWeights[3] = 0;
    }
    if ((boundary & 4) != 0) {
        tWeights[1] -= tWeights[3];
        tWeights[2] += 2*tWeights[3];
        tWeights[3] = 0;
    }
    if ((boundary & 8) != 0) {
        sWeights[2] -= sWeights[0];
        sWeights[1] += 2*sWeights[0];
        sWeights[0] = 0;
    }
OSD_FUNCTION_STORAGE_CLASS
void OsdComputeTensorProductPatchWeights(float dScale, int boundary,
    OSD_TYPE_ARRAY(float, sWeights, 4), OSD_TYPE_ARRAY(float, tWeights, 4),
    OSD_TYPE_ARRAY(float, dsWeights, 4), OSD_TYPE_ARRAY(float, dtWeights, 4),
    OSD_TYPE_ARRAY(float, dssWeights, 4), OSD_TYPE_ARRAY(float, dttWeights, 4),
    OSD_TYPE_ARRAY(OSD_OUT float, wP, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDs, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDt, 16),
    OSD_TYPE_ARRAY(OSD_OUT float, wDss, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDst, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDtt, 16)) {
    if (OSD_OPTIONAL(wP)) {
        // Compute the tensor product weight of the (s,t) basis function
        // corresponding to each control vertex:
        OsdAdjustBoundaryWeights(boundary, sWeights, tWeights);
        for (int i = 0; i < 4; ++i) {
            for (int j = 0; j < 4; ++j) {
                wP[4*i+j] = sWeights[j] * tWeights[i];
            }
        }
    }
    if (OSD_OPTIONAL(derivS && derivT)) {
        // Compute the tensor product weight of the differentiated (s,t) basis
        // function corresponding to each control vertex (scaled accordingly):
        OsdAdjustBoundaryWeights(boundary, dsWeights, dtWeights);
        for (int i = 0; i < 4; ++i) {
            for (int j = 0; j < 4; ++j) {
                wDs[4*i+j] = dsWeights[j] * tWeights[i] * dScale;
                wDt[4*i+j] = sWeights[j] * dtWeights[i] * dScale;
            }
        }
        if (OSD_OPTIONAL(derivSS && derivST && derivTT)) {
            // Compute the tensor product weight of appropriate differentiated
            // (s,t) basis functions for each control vertex (scaled accordingly):
            float d2Scale = dScale * dScale;
            OsdAdjustBoundaryWeights(boundary, dssWeights, dttWeights);
            for (int i = 0; i < 4; ++i) {
                for (int j = 0; j < 4; ++j) {
                    wDss[4*i+j] = dssWeights[j] * tWeights[i] * d2Scale;
                    wDst[4*i+j] = dsWeights[j] * dtWeights[i] * d2Scale;
                    wDtt[4*i+j] = sWeights[j] * dttWeights[i] * d2Scale;
                }
            }
        }
    }
OSD_FUNCTION_STORAGE_CLASS
void OsdGetBezierPatchWeights(
    float s, float t, float dScale,
    OSD_TYPE_ARRAY(OSD_OUT float, wP, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDS, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDT, 16),
    OSD_TYPE_ARRAY(OSD_OUT float, wDSS, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDST, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDTT, 16)) {
    float sWeights[4], tWeights[4], dsWeights[4], dtWeights[4], dssWeights[4], dttWeights[4];
    OsdGetBezierWeights(s, OSD_OPTIONAL_INIT(wP, sWeights), OSD_OPTIONAL_INIT(wDS, dsWeights), OSD_OPTIONAL_INIT(wDSS, dssWeights));
    OsdGetBezierWeights(t, OSD_OPTIONAL_INIT(wP, tWeights), OSD_OPTIONAL_INIT(wDT, dtWeights), OSD_OPTIONAL_INIT(wDTT, dttWeights));
    OsdComputeTensorProductPatchWeights(dScale, /*boundary=*/0, sWeights, tWeights, dsWeights, dtWeights, dssWeights, dttWeights, wP, wDS, wDT, wDSS, wDST, wDTT);
OSD_FUNCTION_STORAGE_CLASS
void OsdGetBSplinePatchWeights(
    float s, float t, float dScale, int boundary,
    OSD_TYPE_ARRAY(OSD_OUT float, wP, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDs, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDt, 16),
    OSD_TYPE_ARRAY(OSD_OUT float, wDss, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDst, 16), OSD_TYPE_ARRAY(OSD_OUT float, wDtt, 16)) {
    float sWeights[4], tWeights[4], dsWeights[4], dtWeights[4], dssWeights[4], dttWeights[4];
    OsdGetBSplineWeights(s, sWeights, OSD_OPTIONAL_INIT(wDS, dsWeights), OSD_OPTIONAL_INIT(wDSS, dssWeights));
    OsdGetBSplineWeights(t, tWeights, OSD_OPTIONAL_INIT(wDT, dtWeights), OSD_OPTIONAL_INIT(wDTT, dttWeights));
    OsdComputeTensorProductPatchWeights(dScale, boundary, sWeights, tWeights, dsWeights, dtWeights, dssWeights, dttWeights, wP, wDs, wDt, wDss, wDst, wDtt);
OSD_FUNCTION_STORAGE_CLASS
void OsdGetGregoryPatchWeights(
    float s, float t, float dScale,
    OSD_TYPE_ARRAY(OSD_OUT float, wP, 20), OSD_TYPE_ARRAY(OSD_OUT float, wDs, 20), OSD_TYPE_ARRAY(OSD_OUT float, wDt, 20),
    OSD_TYPE_ARRAY(OSD_OUT float, wDss, 20), OSD_TYPE_ARRAY(OSD_OUT float, wDst, 20), OSD_TYPE_ARRAY(OSD_OUT float, wDtt, 20)) {
    //
    //  P3         e3-      e2+         P2
    //     15------17-------11--------10
    //     |        |        |        |
    //     |        |        |        |
    //     |        | f3-    | f2+    |
    //     |       19       13        |
    // e3+ 16-----18           14-----12 e2-
    //     |     f3+          f2-     |
    //     |                          |
    //     |                          |
    //     |      f0-         f1+     |
    // e0- 2------4            8------6 e1+
    //     |        3        9        |
    //     |        | f0+    | f1-    |
    //     |        |        |        |
    //     |        |        |        |
    //     O--------1--------7--------5
    //  P0         e0+      e1-         P1
    //
    //  Indices of boundary and interior points and their corresponding Bezier points
    //  (this can be reduced with more direct indexing and unrolling of loops):
    //
    OSD_DATA_STORAGE_CLASS const int boundaryGregory[12] = OSD_ARRAY_12(int, 0, 1, 7, 5, 2, 6, 16, 12, 15, 17, 11, 10 );
    OSD_DATA_STORAGE_CLASS const int boundaryBezSCol[12] = OSD_ARRAY_12(int, 0, 1, 2, 3, 0, 3,  0,  3,  0,  1,  2,  3 );
    OSD_DATA_STORAGE_CLASS const int boundaryBezTRow[12] = OSD_ARRAY_12(int, 0, 0, 0, 0, 1, 1,  2,  2,  3,  3,  3,  3 );
    OSD_DATA_STORAGE_CLASS const int interiorGregory[8] = OSD_ARRAY_8(int, 3, 4,  8, 9,  13, 14,  18, 19 );
    OSD_DATA_STORAGE_CLASS const int interiorBezSCol[8] = OSD_ARRAY_8(int, 1, 1,  2, 2,   2,  2,   1,  1 );
    OSD_DATA_STORAGE_CLASS const int interiorBezTRow[8] = OSD_ARRAY_8(int, 1, 1,  1, 1,   2,  2,   2,  2 );
    //
    //  Bezier basis functions are denoted with B while the rational multipliers for the
    //  interior points will be denoted G -- so we have B(s), B(t) and G(s,t):
    //
    //  Directional Bezier basis functions B at s and t:
    float Bs[4], Bds[4], Bdss[4];
    float Bt[4], Bdt[4], Bdtt[4];
    OsdGetBezierWeights(s, Bs, OSD_OPTIONAL_INIT(wDs, Bds), OSD_OPTIONAL_INIT(wDss, Bdss));
    OsdGetBezierWeights(t, Bt, OSD_OPTIONAL_INIT(wDt, Bdt), OSD_OPTIONAL_INIT(wDtt, Bdtt));
    //  Rational multipliers G at s and t:
    float sC = 1.0f - s;
    float tC = 1.0f - t;
    //  Use <= here to avoid compiler warnings -- the sums should always be non-negative:
    float df0 = s  + t;   df0 = (df0 <= 0.0f) ? 1.0f : (1.0f / df0);
    float df1 = sC + t;   df1 = (df1 <= 0.0f) ? 1.0f : (1.0f / df1);
    float df2 = sC + tC;  df2 = (df2 <= 0.0f) ? 1.0f : (1.0f / df2);
    float df3 = s  + tC;  df3 = (df3 <= 0.0f) ? 1.0f : (1.0f / df3);
    float G[8] = OSD_ARRAY_8(float, s*df0, t*df0,  t*df1, sC*df1,  sC*df2, tC*df2,  tC*df3, s*df3 );
    //  Combined weights for boundary and interior points:
    for (int i = 0; i < 12; ++i) {
        wP[boundaryGregory[i]] = Bs[boundaryBezSCol[i]] * Bt[boundaryBezTRow[i]];
    }
    for (int i = 0; i < 8; ++i) {
        wP[interiorGregory[i]] = Bs[interiorBezSCol[i]] * Bt[interiorBezTRow[i]] * G[i];
    }
    //
    //  For derivatives, the basis functions for the interior points are rational and ideally
    //  require appropriate differentiation, i.e. product rule for the combination of B and G
    //  and the quotient rule for the rational G itself.  As initially proposed by Loop et al
    //  though, the approximation using the 16 Bezier points arising from the G(s,t) has
    //  proved adequate (and is what the GPU shaders use) so we continue to use that here.
    //
    //  An implementation of the true derivatives is provided for future reference -- it is
    //  unclear if the approximations will hold up under surface analysis involving higher
    //  order differentiation.
    //
    if (OSD_OPTIONAL(wDs && wDt)) {
        bool find_second_partials = OSD_OPTIONAL(wDs && wDst && wDtt);
        //  Remember to include derivative scaling in all assignments below:
        float d2Scale = dScale * dScale;
        //  Combined weights for boundary points -- simple (scaled) tensor products:
        for (int i = 0; i < 12; ++i) {
            int iDst = boundaryGregory[i];
            int tRow = boundaryBezTRow[i];
            int sCol = boundaryBezSCol[i];
            wDs[iDst] = Bds[sCol] * Bt[tRow] * dScale;
            wDt[iDst] = Bdt[tRow] * Bs[sCol] * dScale;
            if (find_second_partials) {
                wDss[iDst] = Bdss[sCol] * Bt[tRow] * d2Scale;
                wDst[iDst] = Bds[sCol] * Bdt[tRow] * d2Scale;
                wDtt[iDst] = Bs[sCol] * Bdtt[tRow] * d2Scale;
            }
        }
        // dclyde's note: skipping half of the product rule like this does seem to change the result a lot in my tests.
        // This is not a runtime bottleneck for cloth sims anyway so I'm just using the accurate version.
#ifndef OPENSUBDIV_GREGORY_EVAL_TRUE_DERIVATIVES
        //  Approximation to the true Gregory derivatives by differentiating the Bezier patch
        //  unique to the given (s,t), i.e. having F = (g^+ * f^+) + (g^- * f^-) as its four
        //  interior points:
        //
        //  Combined weights for interior points -- (scaled) tensor products with G+ or G-:
        for (int i = 0; i < 8; ++i) {
            int iDst = interiorGregory[i];
            int tRow = interiorBezTRow[i];
            int sCol = interiorBezSCol[i];
            wDs[iDst] = Bds[sCol] * Bt[tRow] * G[i] * dScale;
            wDt[iDst] = Bdt[tRow] * Bs[sCol] * G[i] * dScale;
            if (find_second_partials) {
                wDss[iDst] = Bdss[sCol] * Bt[tRow] * G[i] * d2Scale;
                wDst[iDst] = Bds[sCol] * Bdt[tRow] * G[i] * d2Scale;
                wDtt[iDst] = Bs[sCol] * Bdtt[tRow] * G[i] * d2Scale;
            }
        }
#else
        //  True Gregory derivatives using appropriate differentiation of composite functions:
        //
        //  Note that for G(s,t) = N(s,t) / D(s,t), all N' and D' are trivial constants (which
        //  simplifies things for higher order derivatives).  And while each pair of functions
        //  G (i.e. the G+ and G- corresponding to points f+ and f-) must sum to 1 to ensure
        //  Bezier equivalence (when f+ = f-), the pairs of G' must similarly sum to 0.  So we
        //  can potentially compute only one of the pair and negate the result for the other
        //  (and with 4 or 8 computations involving these constants, this is all very SIMD
        //  friendly...) but for now we treat all 8 independently for simplicity.
        //
        //float N[8] = OSD_ARRAY_8(float,    s,     t,      t,     sC,      sC,     tC,      tC,     s );
        float D[8] = OSD_ARRAY_8(float,  df0,   df0,    df1,    df1,     df2,    df2,     df3,   df3 );
        OSD_DATA_STORAGE_CLASS const float Nds[8] = OSD_ARRAY_8(float, 1.0f, 0.0f,  0.0f, -1.0f, -1.0f,  0.0f,  0.0f,  1.0f );
        OSD_DATA_STORAGE_CLASS const float Ndt[8] = OSD_ARRAY_8(float, 0.0f, 1.0f,  1.0f,  0.0f,  0.0f, -1.0f, -1.0f,  0.0f );
        OSD_DATA_STORAGE_CLASS const float Dds[8] = OSD_ARRAY_8(float, 1.0f, 1.0f, -1.0f, -1.0f, -1.0f, -1.0f,  1.0f,  1.0f );
        OSD_DATA_STORAGE_CLASS const float Ddt[8] = OSD_ARRAY_8(float, 1.0f, 1.0f,  1.0f,  1.0f, -1.0f, -1.0f, -1.0f, -1.0f );
        //  Combined weights for interior points -- (scaled) combinations of B, B', G and G':
        for (int i = 0; i < 8; ++i) {
            int iDst = interiorGregory[i];
            int tRow = interiorBezTRow[i];
            int sCol = interiorBezSCol[i];
            //  Quotient rule for G' (re-expressed in terms of G to simplify (and D = 1/D)):
            float Gds = (Nds[i] - Dds[i] * G[i]) * D[i];
            float Gdt = (Ndt[i] - Ddt[i] * G[i]) * D[i];
            //  Product rule combining B and B' with G and G' (and scaled):
            wDs[iDst] = (Bds[sCol] * G[i] + Bs[sCol] * Gds) * Bt[tRow] * dScale;
            wDt[iDst] = (Bdt[tRow] * G[i] + Bt[tRow] * Gdt) * Bs[sCol] * dScale;
            if (find_second_partials) {
                float Dsqr_inv = D[i]*D[i];
                float Gdss = 2.0f * Dds[i] * Dsqr_inv * (G[i] * Dds[i] - Nds[i]);
                float Gdst = Dsqr_inv * (2.0f * G[i] * Dds[i] * Ddt[i] - Nds[i] * Ddt[i] - Ndt[i] * Dds[i]);
                float Gdtt = 2.0f * Ddt[i] * Dsqr_inv * (G[i] * Ddt[i] - Ndt[i]);
                wDss[iDst] = (Bdss[sCol] * G[i] + 2.0f * Bds[sCol] * Gds + Bs[sCol] * Gdss) * Bt[tRow] * d2Scale;
                wDst[iDst] = (Bt[tRow] * (Bs[sCol] * Gdst + Bds[sCol] * Gdt) + Bdt[tRow] * (Bds[sCol] * G[i] + Bs[sCol] * Gds)) * d2Scale;
                wDtt[iDst] = (Bdtt[tRow] * G[i] + 2.0f * Bdt[tRow] * Gdt + Bt[tRow] * Gdtt) * Bs[sCol] * d2Scale;
            }
        }
#endif
    }
#endif /* OPENSUBDIV3_OSD_PATCH_BASIS_COMMON_H */
#define OSD_PATCH_LINES 1
#define OSD_PATCH_TRIANGLES 1
#define OSD_PATCH_QUADS 1
#define OSD_PATCH_BSPLINE 1
#define OSD_PATCH_REGULAR 1
#define OSD_PATCH_GREGORY 1
#define OSD_PATCH_GREGORY_BOUNDARY 1
#define OSD_PATCH_GREGORY_BASIS 1
#line 0 "osd/mtlPatchBSpline.metal"
//   Copyright 2015 Pixar
//   Licensed under the Apache License, Version 2.0 (the "Apache License")
//   with the following modification; you may not use this file except in
//   compliance with the Apache License and the following modification to it:
//   Section 6. Trademarks. is deleted and replaced with:
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor
//      and its affiliates, except as required to comply with Section 4(c) of
//      the License and to reproduce the content of the NOTICE file.
//   You may obtain a copy of the Apache License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the Apache License with the above modification is
//   distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//   KIND, either express or implied. See the Apache License for the specific
//   language governing permissions and limitations under the Apache License.
//----------------------------------------------------------
// Patches.BSpline.Hull
//----------------------------------------------------------
static void OsdComputePerVertex(
float4 vertexPosition,
    threadgroup HullVertex& hullVertex,
    int vertexId,
    float4x4 ModelViewProjectionMatrix,
    OsdPatchParamBufferSet osdBuffers
    )
    hullVertex.position = vertexPosition;
#if OSD_ENABLE_PATCH_CULL
    float4 clipPos = mul(ModelViewProjectionMatrix, vertexPosition);   
    short3 clip0 = short3(clipPos.x < clipPos.w,                    
    clipPos.y < clipPos.w,                    
    clipPos.z < clipPos.w);                   
    short3 clip1 = short3(clipPos.x > -clipPos.w,                   
    clipPos.y > -clipPos.w,                   
    clipPos.z > -clipPos.w);                  
    hullVertex.clipFlag = short3(clip0) + 2*short3(clip1);              
#endif
    
    OSD_USER_VARYING_PER_CONTROL_POINT(osdBuffers.vertexBuffer[vertexId], hullVertex);
//----------------------------------------------------------
// Patches.BSpline.Factors
//----------------------------------------------------------
static void OsdComputePerPatchBSplineFactors(
    int3 patchParam,
    float tessLevel,
    float4x4 projectionMatrix,
    float4x4 modelViewMatrix,
    device OsdPerPatchVertexBezier* patch
#if !USE_PTVS_FACTORS
    ,device OsdPerPatchTessFactors& patchFactors
#endif
    ,device MTLQuadTessellationFactorsHalf& quadFactors
    float4 tessLevelOuter = float4(0,0,0,0);
    float2 tessLevelInner = float2(0,0);
    float4 tessOuterLo = float4(0,0,0,0);
    float4 tessOuterHi = float4(0,0,0,0);
#if OSD_ENABLE_SCREENSPACE_TESSELLATION
    OsdGetTessLevelsAdaptiveLimitPoints(
        tessLevel, 
        projectionMatrix, 
        modelViewMatrix,
        patch,
        patchParam,
        tessLevelOuter,
        tessLevelInner,
        tessOuterLo,
        tessOuterHi
        );
#else
    OsdGetTessLevelsUniform(
        tessLevel, 
        patchParam, 
        tessLevelOuter,
        tessLevelInner,
        tessOuterLo,
        tessOuterHi
        );
#endif
    quadFactors.edgeTessellationFactor[0] = tessLevelOuter[0];
    quadFactors.edgeTessellationFactor[1] = tessLevelOuter[1];
    quadFactors.edgeTessellationFactor[2] = tessLevelOuter[2];
    quadFactors.edgeTessellationFactor[3] = tessLevelOuter[3];
    quadFactors.insideTessellationFactor[0] = tessLevelInner[0];
    quadFactors.insideTessellationFactor[1] = tessLevelInner[1];
#if !USE_PTVS_FACTORS
    patchFactors.tessOuterLo = tessOuterLo;
    patchFactors.tessOuterHi = tessOuterHi;
#endif
static void OsdComputePerPatchFactors(
int3 patchParam,
float tessLevel,
unsigned patchID,
float4x4 projectionMatrix,
float4x4 modelViewMatrix,
OsdPatchParamBufferSet osdBuffer,
threadgroup PatchVertexType* patchVertices,
device MTLQuadTessellationFactorsHalf& quadFactors
OsdComputePerPatchBSplineFactors(
patchParam, 
tessLevel, 
projectionMatrix, 
modelViewMatrix, 
osdBuffer.perPatchVertexBuffer + patchID * CONTROL_POINTS_PER_PATCH,
#if !USE_PTVS_FACTORS
osdBuffer.patchTessBuffer[patchID],
#endif
quadFactors
//----------------------------------------------------------
// Patches.BSpline.Vertex
//----------------------------------------------------------
static void OsdComputePerPatchVertex(
int3 patchParam, 
unsigned ID, 
unsigned PrimitiveID, 
unsigned ControlID,
threadgroup PatchVertexType* patchVertices,
OsdPatchParamBufferSet osdBuffers
OsdComputePerPatchVertexBSpline(patchParam, ID, patchVertices, osdBuffers.perPatchVertexBuffer[ControlID]);
    
    OSD_USER_VARYING_PER_VERTEX(patchVertices[ID], osdBuffers.perPatchVertexBuffer[ControlID]);
//----------------------------------------------------------
// Patches.BSpline.Domain
//----------------------------------------------------------
template<typename PerPatchVertexBezier>
static OsdPatchVertex ds_regular_patches(
    const float TessLevel,
#if !USE_PTVS_FACTORS
    float4 tessOuterHi,
    float4 tessOuterLo,
#endif
    PerPatchVertexBezier cv,
    int3 patchParam,
    float2 domainCoord)
    OsdPatchVertex output;
    float3 P, dPu, dPv;
    float3 N, dNu, dNv;
    float2 vSegments;
#if !USE_PTVS_FACTORS
    float2 UV = OsdGetTessParameterization(domainCoord,
                                           tessOuterLo,
                                           tessOuterHi);
#else
    auto transitionMask = OsdGetPatchTransitionMask(patchParam);
    float4 tessLevelMin = float4(1)
    + float4(((transitionMask & 8) >> 3),
             ((transitionMask & 1) >> 0),
             ((transitionMask & 2) >> 1),
             ((transitionMask & 4) >> 2));
    float2 UV = OsdGetTessParameterization(domainCoord,
                                           tessLevelMin,
                                           float4(0));
#endif
    OsdEvalPatchBezier(patchParam, UV, cv, P, dPu, dPv, N, dNu, dNv, vSegments);
    output.normal = N;
    output.tangent = dPu;
    output.bitangent = dPv;
#if OSD_COMPUTE_NORMAL_DERIVATIVES
    output.Nu = dNu;
    output.Nv = dNv;
#endif
#if OSD_PATCH_ENABLE_SINGLE_CREASE
    output.vSegments = vSegments;
#endif
    output.patchCoord = OsdInterpolatePatchCoord(UV, patchParam);
    output.position = P;
    
    OSD_USER_VARYING_PER_EVAL_POINT(UV, cv[5], cv[6], cv[9], cv[10], output);
    
    return output;
#if USE_STAGE_IN
template<typename PerPatchVertexBezier>
#endif
static OsdPatchVertex OsdComputePatch(
float tessLevel,
float2 domainCoord,
unsigned patchID,
#if USE_STAGE_IN
PerPatchVertexBezier osdPatch
#else
OsdVertexBufferSet osdBuffers
#endif
return ds_regular_patches(
tessLevel,
#if !USE_PTVS_FACTORS
#if USE_STAGE_IN
osdPatch.tessOuterHi,
osdPatch.tessOuterLo,
#else
osdBuffers.patchTessBuffer[patchID].tessOuterHi,
osdBuffers.patchTessBuffer[patchID].tessOuterLo,
#endif
#endif
#if USE_STAGE_IN
osdPatch.cv,
osdPatch.patchParam,
#else
osdBuffers.perPatchVertexBuffer + patchID * VERTEX_CONTROL_POINTS_PER_PATCH,
osdBuffers.patchParamBuffer[patchID],
#endif
domainCoord
#line 0 "osd/mtlPatchGregory.metal"
//   Copyright 2013 Pixar
//   Licensed under the Apache License, Version 2.0 (the "Apache License")
//   with the following modification; you may not use this file except in
//   compliance with the Apache License and the following modification to it:
//   Section 6. Trademarks. is deleted and replaced with:
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor
//      and its affiliates, except as required to comply with Section 4(c) of
//      the License and to reproduce the content of the NOTICE file.
//   You may obtain a copy of the Apache License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the Apache License with the above modification is
//   distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//   KIND, either express or implied. See the Apache License for the specific
//   language governing permissions and limitations under the Apache License.
//----------------------------------------------------------
// Patches.Gregory.Hull
//----------------------------------------------------------
void OsdComputePerVertex(
float4 position,
    threadgroup OsdPerVertexGregory& hullVertex,
    int vertexId,
    float4x4 modelViewProjectionMatrix,
    OsdPatchParamBufferSet osdBuffers
    )
OsdComputePerVertexGregory(vertexId, position.xyz, hullVertex, osdBuffers);
#if OSD_ENABLE_PATCH_CULL
    float4 clipPos = mul(modelViewProjectionMatrix, position);    
    short3 clip0 = short3(clipPos.x < clipPos.w,                    
    clipPos.y < clipPos.w,                    
    clipPos.z < clipPos.w);                   
    short3 clip1 = short3(clipPos.x > -clipPos.w,                   
    clipPos.y > -clipPos.w,                   
    clipPos.z > -clipPos.w);                  
    hullVertex.clipFlag = short3(clip0) + 2*short3(clip1);
#endif
    
    OSD_USER_VARYING_PER_CONTROL_POINT(osdBuffers.vertexBuffer[vertexId], hullVertex);
//----------------------------------------------------------
// Patches.Gregory.Factors
//----------------------------------------------------------
void OsdComputePerPatchFactors(
int3 patchParam,
float tessLevel,
unsigned patchID,
float4x4 projectionMatrix,
float4x4 modelViewMatrix,
OsdPatchParamBufferSet osdBuffer,
threadgroup PatchVertexType* patchVertices,
device MTLQuadTessellationFactorsHalf& quadFactors
    float4 tessLevelOuter = float4(0,0,0,0);
    float2 tessLevelInner = float2(0,0);
OsdGetTessLevels(
tessLevel, 
projectionMatrix, 
modelViewMatrix,
patchVertices[0].P, 
patchVertices[3].P, 
patchVertices[2].P, 
patchVertices[1].P,
patchParam, 
tessLevelOuter, 
tessLevelInner
    quadFactors.edgeTessellationFactor[0] = tessLevelOuter[0];
    quadFactors.edgeTessellationFactor[1] = tessLevelOuter[1];
    quadFactors.edgeTessellationFactor[2] = tessLevelOuter[2];
    quadFactors.edgeTessellationFactor[3] = tessLevelOuter[3];
    quadFactors.insideTessellationFactor[0] = tessLevelInner[0];
    quadFactors.insideTessellationFactor[1] = tessLevelInner[1];
//----------------------------------------------------------
// Patches.Gregory.Vertex
//----------------------------------------------------------
void OsdComputePerPatchVertex(
int3 patchParam, 
unsigned ID, 
unsigned PrimitiveID, 
unsigned ControlID,
threadgroup PatchVertexType* patchVertices,
OsdPatchParamBufferSet osdBuffers
OsdComputePerPatchVertexGregory(
patchParam,
PrimitiveID,
patchVertices,
osdBuffers.perPatchVertexBuffer[ControlID],
osdBuffers);
    
    OSD_USER_VARYING_PER_VERTEX(patchVertices[ID], osdBuffers.perPatchVertexBuffer[ControlID]);
//----------------------------------------------------------
// Patches.Gregory.Domain
//----------------------------------------------------------
template<typename PerPatchVertexGregory>
static OsdPatchVertex ds_gregory_patches(
                     PerPatchVertexGregory patch,
                     int3 patchParam,
                     float2 UV
                    )
    OsdPatchVertex output;
    
    float3 P = float3(0,0,0), dPu = float3(0,0,0), dPv = float3(0,0,0);
    float3 N = float3(0,0,0), dNu = float3(0,0,0), dNv = float3(0,0,0);
    
    float3 cv[20];
    cv[0] = patch[0].P;
    cv[1] = patch[0].Ep;
    cv[2] = patch[0].Em;
    cv[3] = patch[0].Fp;
    cv[4] = patch[0].Fm;
    
    cv[5] = patch[1].P;
    cv[6] = patch[1].Ep;
    cv[7] = patch[1].Em;
    cv[8] = patch[1].Fp;
    cv[9] = patch[1].Fm;
    
    cv[10] = patch[2].P;
    cv[11] = patch[2].Ep;
    cv[12] = patch[2].Em;
    cv[13] = patch[2].Fp;
    cv[14] = patch[2].Fm;
    
    cv[15] = patch[3].P;
    cv[16] = patch[3].Ep;
    cv[17] = patch[3].Em;
    cv[18] = patch[3].Fp;
    cv[19] = patch[3].Fm;
    
    OsdEvalPatchGregory(patchParam, UV, cv, P, dPu, dPv, N, dNu, dNv);
    
    // all code below here is client code
    output.position = P;
    output.normal = N;
    output.tangent = dPu;
    output.bitangent = dPv;
#if OSD_COMPUTE_NORMAL_DERIVATIVES
    output.Nu = dNu;
    output.Nv = dNv;
#endif
    output.patchCoord = OsdInterpolatePatchCoord(UV, patchParam);
    
    OSD_USER_VARYING_PER_EVAL_POINT(UV, patch[0], patch[1], patch[3], patch[2], output);
    return output;
#if USE_STAGE_IN
template<typename PerPatchVertexGregoryBasis>
#endif
static OsdPatchVertex OsdComputePatch(
float tessLevel,
float2 domainCoord,
unsigned patchID,
#if USE_STAGE_IN
PerPatchVertexGregoryBasis osdPatch
#else
    OsdVertexBufferSet osdBuffers
#endif
return ds_gregory_patches(
#if USE_STAGE_IN
osdPatch.cv,
osdPatch.patchParam,
#else
        osdBuffers.perPatchVertexBuffer + patchID * VERTEX_CONTROL_POINTS_PER_PATCH,
        osdBuffers.patchParamBuffer[patchID],
#endif
domainCoord);
#line 0 "osd/mtlPatchGregoryBasis.metal"
//   Copyright 2015 Pixar
//   Licensed under the Apache License, Version 2.0 (the "Apache License")
//   with the following modification; you may not use this file except in
//   compliance with the Apache License and the following modification to it:
//   Section 6. Trademarks. is deleted and replaced with:
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor
//      and its affiliates, except as required to comply with Section 4(c) of
//      the License and to reproduce the content of the NOTICE file.
//   You may obtain a copy of the Apache License at
//       http://www.apache.org/licenses/LICENSE-2.0
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the Apache License with the above modification is
//   distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//   KIND, either express or implied. See the Apache License for the specific
//   language governing permissions and limitations under the Apache License.
//----------------------------------------------------------
// Patches.GregoryBasis.Hull
//----------------------------------------------------------
void OsdComputePerVertex(
float4 position,
    threadgroup HullVertex& hullVertex,
    int vertexId,
    float4x4 modelViewProjectionMatrix,
    OsdPatchParamBufferSet osdBuffers
    )
hullVertex.position = position;
#if OSD_ENABLE_PATCH_CULL
    float4 clipPos = mul(modelViewProjectionMatrix, position);    
    short3 clip0 = short3(clipPos.x < clipPos.w,                    
    clipPos.y < clipPos.w,                    
    clipPos.z < clipPos.w);                   
    short3 clip1 = short3(clipPos.x > -clipPos.w,                   
    clipPos.y > -clipPos.w,                   
    clipPos.z > -clipPos.w);                  
    hullVertex.clipFlag = short3(clip0) + 2*short3(clip1);              
#endif
    
    OSD_USER_VARYING_PER_CONTROL_POINT(osdBuffers.vertexBuffer[vertexId], hullVertex);
//----------------------------------------------------------
// Patches.GregoryBasis.Factors
//----------------------------------------------------------
void OsdComputePerPatchFactors(
int3 patchParam,
float tessLevel,
unsigned patchID,
float4x4 projectionMatrix,
float4x4 modelViewMatrix,
OsdPatchParamBufferSet osdBuffer,
threadgroup PatchVertexType* patchVertices,
device MTLQuadTessellationFactorsHalf& quadFactors
    float4 tessLevelOuter = float4(0,0,0,0);
    float2 tessLevelInner = float2(0,0);
OsdGetTessLevels(
tessLevel, 
projectionMatrix, 
modelViewMatrix,
patchVertices[0].position.xyz, 
patchVertices[3].position.xyz, 
patchVertices[2].position.xyz, 
patchVertices[1].position.xyz,
patchParam, 
tessLevelOuter, 
tessLevelInner
    quadFactors.edgeTessellationFactor[0] = tessLevelOuter[0];
    quadFactors.edgeTessellationFactor[1] = tessLevelOuter[1];
    quadFactors.edgeTessellationFactor[2] = tessLevelOuter[2];
    quadFactors.edgeTessellationFactor[3] = tessLevelOuter[3];
    quadFactors.insideTessellationFactor[0] = tessLevelInner[0];
    quadFactors.insideTessellationFactor[1] = tessLevelInner[1];
//----------------------------------------------------------
// Patches.GregoryBasis.Vertex
//----------------------------------------------------------
void OsdComputePerPatchVertex(
int3 patchParam, 
unsigned ID, 
unsigned PrimitiveID, 
unsigned ControlID,
threadgroup PatchVertexType* patchVertices,
OsdPatchParamBufferSet osdBuffers
//Does nothing, all transforms are in the PTVS
    OSD_USER_VARYING_PER_VERTEX(patchVertices[ID], osdBuffers.perPatchVertexBuffer[ControlID]);
//----------------------------------------------------------
// Patches.GregoryBasis.Domain
//----------------------------------------------------------
#define USE_128BIT_GREGORY_BASIS_INDICES_READ 1
#if USE_STAGE_IN
template<typename PerPatchVertexGregoryBasis>
#endif
static OsdPatchVertex ds_gregory_basis_patches(
#if USE_STAGE_IN
                     PerPatchVertexGregoryBasis patch,
#else
                     const device OsdInputVertexType* patch,
                     const device unsigned* patchIndices,
#endif
                     int3 patchParam,
                     float2 UV
                     )
    OsdPatchVertex output;
    float3 P = float3(0,0,0), dPu = float3(0,0,0), dPv = float3(0,0,0);
    float3 N = float3(0,0,0), dNu = float3(0,0,0), dNv = float3(0,0,0);
#if USE_STAGE_IN
    float3 cv[20];
    for(int i = 0; i < 20; i++)
        cv[i] = patch[i].position;
#else   
#if USE_128BIT_GREGORY_BASIS_INDICES_READ
    float3 cv[20];
    for(int i = 0; i < 5; i++) {
        int4 indices = ((device int4*)patchIndices)[i];
        
        int n = i * 4;
        cv[n + 0] = (patch + indices[0])->position;
        cv[n + 1] = (patch + indices[1])->position;
        cv[n + 2] = (patch + indices[2])->position;
        cv[n + 3] = (patch + indices[3])->position;
    }
#else
    float3 cv[20];
    for (int i = 0; i < 20; ++i) {
        cv[i] = patch[patchIndices[i]].position;
    }
#endif
#endif
    
    OsdEvalPatchGregory(patchParam, UV, cv, P, dPu, dPv, N, dNu, dNv);
    
    output.position = P;
    output.normal = N;
    output.tangent = dPu;
    output.bitangent = dPv;
#if OSD_COMPUTE_NORMAL_DERIVATIVES
    output.Nu = dNu;
    output.Nv = dNv;
#endif
    
    output.patchCoord = OsdInterpolatePatchCoord(UV, patchParam);
    
#if USE_STAGE_IN
    OSD_USER_VARYING_PER_EVAL_POINT(UV, patch[0], patch[5], patch[15], patch[10], output);
#else
    OSD_USER_VARYING_PER_EVAL_POINT(UV, patch[patchIndices[0]], patch[patchIndices[5]], patch[patchIndices[15]], patch[patchIndices[10]], output);
#endif
    
    return output;
#if USE_STAGE_IN
template<typename PerPatchVertexGregoryBasis>
#endif
static OsdPatchVertex OsdComputePatch(
float tessLevel,
float2 domainCoord,
unsigned patchID,
#if USE_STAGE_IN
PerPatchVertexGregoryBasis osdPatch
#else
OsdVertexBufferSet osdBuffers
#endif
return ds_gregory_basis_patches(
#if USE_STAGE_IN
osdPatch.cv,
osdPatch.patchParam,
#else
osdBuffers.vertexBuffer,
osdBuffers.indexBuffer + patchID * VERTEX_CONTROL_POINTS_PER_PATCH,
osdBuffers.patchParamBuffer[patchID],
#endif
domainCoord
Failure in TopologyRefiner::RefineUniform() -- base level is uninitialized.
Failure in TopologyRefiner::RefineUniform() -- previous refinements already applied.
Failure in TopologyRefiner::RefineAdaptive() -- base level is uninitialized.
Failure in TopologyRefiner::RefineAdaptive() -- previous refinements already applied.
Failure in TopologyRefiner::RefineAdaptive() -- currently only supported for Catmark scheme.
Edge %d specified to be sharp does not exist (%d, %d)
Vertex %d specified to be sharp does not exist
OSD VertexBuffer
CGColor
.cxx_destruct
MTLTextureCache
CGContext
GPUEndTime
T@"<MTLHeap>",R
IESProfile
T@"AVAudioNode",R,N,V_audioNode
JSONObjectWithData:options:error:
T@"MTLRenderPassDescriptor",R,N
NSSize
T@"NSArray",C,N
REMeshAssetBindings
T@"NSColor",C,N
T#,R
T@"VFXCameraEffectExposure",&,N
T,N,Vcenter
T@"VFXMesh",&,N
T,N,Vmin
T@"VFXNode",&,N
T:,N,V_didEndSelector
T@"VFXNode",W,N
T@"<MDLObjectContainerComponent>",R,&,N
T@"VFXView",&,N
T@"<MTLBinding>",&,N,V_binding
T@,N,V_delegate
T@"<MTLBuffer>",R
T@?,C,N
T@"<MTLBuffer>",R,N,V_buffer
TB,N,GisColored
T@"<MTLCommandBuffer>",&,N,V_commandBuffer
TB,N,GisPlaying
T@"<MTLCommandQueue>",&,N,V_clientCommandQueue
TB,N,V_canceled
T@"<MTLComputeCommandEncoder>",R,N
TB,N,V_rawQuilt
T@"<MTLDevice>",R,N
TB,N,V_succeded
T@"<MTLFunction>",&,N,V_vertexFunction
TQ,N,V_freeAxes
T@"<MTLLibrary>",R,N,V_library
Tf,N,V_progress
T@"<MTLRenderCommandEncoder>",&,N,V_clientRenderCommandEncoder
Tq,N,VmaterialModificationCount
T@"<MTLRenderPipelineState>",&,N,V_state
T{?=},N
T@"<MTLTexture>",&,N
VFXMatrix4Value
T@"<MTLTexture>",R,N
VFX_Description
T@"<VFXAuthoringEnvironmentDelegate>",N,V_delegate
__light
T@"<VFXCameraControlConfiguration>",R,N
__wantsSeparateGeometryElements
T@"<VFXCameraNavigationControllerDelegate>",N,V_delegate
_active
T@"<VFXMTLRenderContextCommandBufferStatusMonitor>",W,N,V_commandBufferStatusMonitor
_affineUpToDate
T@"<VFXMaterialPropertyTextureProvider>",&,N
_allowsCreation
T@"<VFXProgramDelegate>",N
_animationsLock
T@"<VFXTextureAttachmentProvider>",&,N
_applyOverrides
T@"<VFXWorldRendererDelegate>",W,N
_availableCompiledLibrariesLock
T@"AVAudioEngine",R,N
_bindingAdaptor
T@"AVAudioPlayerNode",R,V_audioPlayer
_buffer
T@"AVPlayer",&,N
_cachedContents
T@"CALayer",&,N,V_layer
_cameraGeometry
T@"CAMediaTimingFunction",&
_captureStarted
T@"CAMediaTimingFunction",C,N
_chamferProfile
T@"CFXVFXRenderTargetInfo",R,N
_collisionShape
T@"MTLRenderPassDescriptor",&,N,V_clientRenderPassDescriptor
_color2
T@"MTLStageInputOutputDescriptor",R,N
_commandBufferCompletedHandlers
T@"MTLVertexDescriptor",C,N,V_vertexDescriptor
_componentCount
T@"NSArray",&,N,V_states
_currentInitResourceBlitEncoder
T@"NSArray",&,N,V_viewpoints
_debugUIOptions
T@"NSArray",C,N,V_frameBufferBindings
_defaultProgram
T@"NSArray",C,N,V_nodeBufferBindings
_deformDataKind
T@"NSArray",C,N,V_shadableBufferBindings
_device
T@"NSArray",R
_didTriggerRedrawWhileRendering
T@"NSButton",&,N,Vadd
_drawMeshElement:instanceCount:
T@"NSData",&,N,V_radianceData
_effectGeometry
T@"NSData",R,N
_endListeningToOtherMouseEvents
T@"NSDictionary",&,N,V_context
_expand
T@"NSDictionary",&,N,VconstantToString
_fadeInDuration
T@"NSDictionary",?,C,N
_fogEndDistance
T@"NSDictionary",C,N,Voptions
_frozen
T@"NSError",&,N,V_error
_gimbalLockMode
T@"NSFont",&,N
_height
T@"NSMutableDictionary",R,N
_inertiaRunning
T@"NSNumber",?,&,N
_innerLayerNode
T@"NSObject<OS_dispatch_queue>",R,N
_irradianceData
T@"NSOrderedSet",&,N
_isInLiveResize
T@"NSString",&,N
_iterationCount
T@"NSString",&,N,V_lookUpKey
_layout
T@"NSString",&,N,VkeyPathDst
_legacyUniforms
T@"NSString",&,N,Vname
_levelsOfDetail
T@"NSString",&,N,Vtype
_loadSourceCode
T@"NSString",C
_mappingChannel
T@"NSString",C,N,V_name
_nextUpdateDate
T@"NSString",R,C
_normal
T@"NSString",R,N,V_effectiveModifier
_nsView
T@"NSString",R,N,V_message
_onInertiaTimer
T@"NSTableView",&,N,Vtable
_orange
T@"NSURL",&,N,V_documentURL
_outerLayerNode
T@"NSURL",R,N
_panSensitivity
T@"NSValue",R,N,V_value
_passDescriptor
T@"VFXAnimation",R,N,V_animation
_physicsContact
T@"VFXAudioSource",R,N,V_audioSource
_pointOfCulling
T@"VFXBehaviorGraph",&,N
_prefab
T@"VFXCamera",&,N
_radius
T@"VFXCameraController",R,N,V_cameraController
_referenceCount
T@"VFXCameraEffectColorFringe",&,N
_renderPassDesc
T@"VFXCameraEffectDepthOfField",&,N
_renderingOrder
T@"VFXCameraEffectMotionBlur",&,N
_replicateScale
T@"VFXCameraEffectVignetting",&,N
T@"VFXEntityObject",R,N
_setAttributes:
T@"VFXLight",&,N
_setTransforms:
T@"VFXMTLResourceManager",R,N,V_resourceManager
_shoulderLength
T@"VFXMaterial",&,N
_snapToAlignOnX
T@"VFXMaterialProperty",R,N
_snapToAlignOnZ
T@"VFXMeshSource",&,N
_sourceChannels
T@"VFXModel",&,N
_spotInnerAngle
T@"VFXModelTessellator",&,N
_states
T@"VFXMorpher",R,N
_string
T@"VFXNode",&,N,Vdestination
_syncNode:with:
T@"VFXNode",&,N,Vsource
_target
T@"VFXNode",R
_textureOptions
T@"VFXNode",R,W,N
_timingFunction
T@"VFXParticleEmitter",&,N
_triggerManager
T@"VFXPhysicsBody",R,N
_unMultBlending
T@"VFXPhysicsWorld",R,N
_updateCorrectivesAndInBetween:
T@"VFXProgram",?,&,N
_updateRotation
T@"VFXRenderer",&,N,V_renderer
_userAttributes
T@"VFXState",&,N
_vertexFunction
T@"VFXState",R,N,V_targetState
_vertexTextures
T@"VFXTimingFunction",&,N
_volatileMeshes
T@"VFXView",N,V_parentView
_weight
T@"VFXView",R
_worldDidChange
T@"VFXWorld",&,N,V_world
_yellow
T@"_TtC3VFX8VFXScene",&,N
_zFlags
T@,&
accessInstanceVariablesDirectly
T@,&,N,V_lookUpFoundInstance
T@,&,N,V_texture
addFileWrapper:
T@,&,N,VrepresentedObject
addReverseItem:
T@,&,N,Vtarget
allCameraNamed:
T@,C,N,V_bindBlock
anchorA
T@,N,V_dataSource
angularVelocity
T@,R,N
animationNamed:
T@,W,N,Vdelegate
areaLightPrecomputedDataTexture
T@,W,N,Vtarget
attributeNamed:
T@?,C,N,VwillStartPlayback
TB,?,R
backgroundColor
TB,GisCumulative
blendInDuration
TB,N
bloomSaturation
TB,N,GisAdaptive
bufferAlignment
TB,N,GisAffectedByGravity
byValue
TB,N,GisCumulative
cameraDidChange
TB,N,GisGeodesic
cancelSelection
TB,N,GisHidden
categoryBitMask
TB,N,GisJitteringEnabled
ciImage
TB,N,GisOpaque
clearInBetweens
TB,N,GisPaused,V_paused
colorWithCalibratedWhite:alpha:
TB,N,GisRemovedOnCompletion
commitImmediate
TB,N,GisTemporalAntialiasingEnabled
compressionType
TB,N,V_autoSwitchToFreeCamera
connectToProxy:
TB,N,V_canRecycleParticleBuffers
containsObject:
TB,N,V_enableFreeCamera
content
TB,N,V_invView
convertTransformValue:fromNode:
TB,N,V_requireLoadFinalTexture
copyTo:
TB,N,V_shouldPresentAfterMinimumDuration
createSnapshot:
TB,N,V_shouldSnapToAlign
currentProgress
TB,N,V_simulateCommandBufferFailure
customAudioNode
TB,N,V_syncTimeWithCoreAnimation
dataWithDouble:
TB,N,Vreadonly
dataWithString:
TB,R
dealloc
TB,R,GisLoaded
depthAttachment
TB,R,N
diffuse
TB,R,N,GisInertiaRunning
display
TB,R,V_customAudioNode
dstNormalBuffer
TB,V_drawableResizesAsynchronously
effects
TI,R,N
enabled
endTime
TQ,?,R,N
enterBackground
TQ,N,V_antialiasingMode
fadeOutDuration
TQ,N,V_debugOptions
falloffExponent
TQ,N,VelementIndex
floatComponents
TQ,R
framebufferOnly
TQ,R,N,V_bufferSize
TQ,R,N,V_type
geometrySources
T^v,R,N,V_frameTexturePool
getReturnValue:
T^{CGColorSpace=},R,N
gravity
T^{CGPath=}
hasDebugOption:
T^{VFXMTLComputeCommandEncoder=@@^{VFXMTLBufferPool}I},R,N
hasGobo
T^{__CFXWorld=},R,V_world
indexBufferSize
influenceFactor
Td,N,V_endTime
initWithDevice:
Td,N,V_time
initWithDrivingNode:parameters:
initWithFormat:
Tf,N,V_center
initWithMatrix:
Tf,N,V_displayAspect
initWithSource:
Tf,N,V_panSensitivity
initWithTarget:
Tf,N,V_rotationSensitivity
insertChildNode:parent:atIndex:
Tf,N,V_subp
interleavedCopy
Tf,N,V_tilt
isBaked
Tf,N,VmaxAllowedRotationAngle
isGizmo
Tf,N,Vrate
isJoint
Tf,N,Vvolume
isMuted
Tf,R,N
isProxy
Ti,N,V_bi
isTextureSource
Ti,N,Vtype
isVideoMirrored
Tq,N
kernelStartTime
Tq,N,V_editingSpace
keyPath
Tq,N,V_interactionMode
latlongTextureForCubemap:pixelFormat:renderContext:needsMipmap:
Tq,N,V_referenceCount
library
Tq,N,V_timeStamp
localFrontValue
Tq,N,V_yAlignment
localUp
Tq,N,VbufferSize
lookAtLocation:
Tq,N,Vindex
makeReverseItem
Tq,N,VsemanticsCount
manipulatorNode
Tq,N,Vwidth
materialPropertyCreateIfNeeded:
Tq,R,N
Tq,R,N,V_version
maxTotalThreadgroupsPerMeshGrid
Ts,N,Vtype
maximumDistance
T{?=[2]},N
members
T{?=[4]},N,V_draggedTransform
meshElementWithData:primitiveType:primitiveCount:bytesPerIndex:
T{?=[4]},N,V_viewMatrix
message
T{?=[4]},R
metalLibraryURL
T{?=dddddd},N
minConstantBufferAlignmentBytes
T{AVAudio3DPoint=fff},N
minimumExposure
T{CGRect={CGPoint=dd}{CGSize=dd}},N
morpher
T{CGSize=dd}
mtkView:drawableSizeWillChange:
T{CGSize=dd},N,V_size
newCommandQueue
T{MTLResourceID=Q},R
newDynamicLibraryWithURL:error:
T{_NSRange=QQ},N
newRenderPipelineStateWithDesc:
URLByAppendingPathExtension:
newSharedTextureWithDescriptor:
URLByDeletingPathExtension
URLByStandardizingPath
numberWithChar:
URLForResource:withExtension:
objects
URLValue
opacity
URLsForDirectory:inDomains:
otherMouseDown:
UTF8String
peerPid
UUIDString
pixelBufferPool
VFXFloat2Value
prepare
VFXFloat4Value
present
VFXMutableDeepCopy
presentedSubitemDidChangeAtURL:
VFXPixelsWide
probeUpdateType
VFXUID_additionalProperties
profileWithURL:
VFXUID_constantToStringForProperty:
programHashCode
VFXUID_enumForProperty:
pyramidWithWidth:height:length:
VFXUID_propertiesToFilterOut
recompilePasses
VFXUID_rangeForFloatProperty:min:max:
reflectionResolutionScaleFactor
VFXUI_name
release
VFX_compactMapObjectsUsingBlock:
remove:
VFX_evaluateAtTime:reverse:to:
removeBehavior:
VFX_safeHash
removeMaterial:
VFX_valueForKey:
removeSourceRenderersForSource:
_3DConnexionIsPressed
renderer:didRenderWorld:atTime:
_VFXWorldRendererMainPassCustomPostProcessSupportDrawSceneBackgroundUsingEncoder:commandBuffer:renderPassDescriptor:
rendererWithMTLTexture:options:
__allocateContentTransformIfNeeded
replicatesScale
__aspectRatio
representations
__createCFObject
reshape
__drawableSafeAreaInsets
resourceOptions
__morpher
rightMouseDown:
__removeObjectFromChildNodesAtIndex:
screenSpaceAmbientOcclusionBias
__renderTargetSize
scrollingDeltaX
__runtimeResolvedURL
session
__skinner
setActiveState:
__swift_setObject:forKeyedSubscript:
setAdditionalCompilerArguments:
__updateTextureWithLayer:texture:engineContext:sampler:
setAnchorPoint:
__willChangePointOfView
setArrayLength:
_actionData
setBindingName:
_activeState
setBool:forKey:
_adaptationBrighteningSpeedFactor
setBufferIndex:
_adaptationMinimum
setCenterValue:
_adaptativeFrameDuration
setClientTextureWithId:texture:
_adaptive
setColorFringe:
_addGPUFramePresentedHandler:
setConstraints:
_addSkinnerWithMDLMesh:worldNodes:
setCurrentTime:
_additive
setDestination:
_adjustBackingLayerPixelFormat
setDisplayLink:
_allSymbolsWithVFXSemantic
setDoubleSided:
_allocateElement
setEulerAngles:
_allowDecodingCyclesInSecureMode
setFloat2Value:
_allowGhostObjects
setFloat4Value:
_allowsDefaultLightingEnvironmentFallback
setFogColor_linearExtendedSRGB:
_allowsTranslation
setFrameOrigin:
_alternateMode
setGeometryRef:
_anamorphic
setHemispheric:
_angularVelocity
setIncremental:
_animation
setInnerRadius:
_animationDidStop
setInputsCount:
_animationPathForKey:
setLitPerPixel:
_animations
setMaskEnabled:
_apertureBladeCount
setMaxConcurrentOperationCount:
_applicationWillEnterForeground:
setMeshSamplerStates:withRange:
_applyOverride:forKeyPath:
setNeedsDisplay
_applyWithEvent:
setObjectBuffer:offset:atIndex:
_arcHandleXZ
setObstruction:
_arcHandles
setOrientation:
_areaExtents
setPhysicsBody:
_areaPolygonVertices
setPixelFormat:
_argumentEncoder
setProbeOffset:
_arrayController
setRenderGraph:
_arrowIndicesCount
setRepeatCount:
_aspectRatio
setReverbBlend:
_assetPathResolver
setSampleDistributedShadowMaps:
_assetWriter
setScaleOffset:
_assignComponent:toContainerWithType:
setScreenSpace:
_attachmentCount
setShouldDelegateARCompositing:
_attachments
setStorageMode:
_attributes
setStringArray:
_audioFile
setTag:
_audioNode
setTemporalAntialiasingEnabled:
_audioPlayers
setTextureType:
_audioURL
setToZ:
_authoringEnvironment
setToneMapping:
_autoCameraTarget
setUrl:
_automaticCameraTargetUpToDate
setViewMatrix0:
_automaticallyAdjustsShadowProjection
setVisibilityResultMode:offset:
_autoreverses
set_bonesAndIndicesCompression:
_availableBuffers
set_legacyView:
_availableCompiledLibraries
setupLegacyView
_availableComputePipelinesWithStageDescriptor
shadowIntensity
_availableIESTextures
sharedWorkspace
_availableImages
skinner
_availableLibraries
srcNormalBuffer
_availableMeshElements
stopProcessingRendererElements:
_availableMeshes
stringByAppendingPathComponent:
_availableOpenSubdivComputeEvaluators
stringByResolvingSymlinksInPath
_availablePipelineStatesLock
stringFromDate:
_availableRasterizerStates
supportsFamily:
_availableShadables
supportsWritableArrayOfTextures
_availableSkinDeformerReadOnlyBuffers
synchronizeTexture:slice:level:
_availableTessellators
tailSizeInBytes
_averageGray
targets
_axis
textureDataType
_background2DProgram
textureProvider
_backgroundCubeProgram
timingFunctions
_backgroundRasterizerStates
toShift
_backingLayer
_bakeNodes:folderPath:inVertex:bakeAO:quality:attenuation:geomSetter:terminateSetter:
triggerBindings
_bakeStochasticIrradianceTexture:forEnvironmentTexture:mipmapLevelForSampling:renderContext:
unbind:
_ballSocketConstraint
unprojectPoint:
_baseBufferForComputeKernel
updateFieldNode:withSourceNode:
_baseMesh
uppercaseString
_basePositionDataType
useHeaps:count:
_baseVertexCount
valueWithRange:
_beginListeningToOtherMouseEvents
vector3
_beginTime
version
_behaviorGraph
wakeUpAllBodies
_bindBlock
weakRef
_bindingData
winding
_bindings
worldDidChange:
_blendDenseIndexedPipeline
worldNamed:inDirectory:options:
_blendMode
worldUp
_block
worldWithSceneKitScene:options:
_blue
writeDouble:to:
_bodyA
writeSIMD2F:to:
_boldLogsInfo
writeSIMD3F:to:
_boneIndexSize
writeSIMD4F:to:
_boneWeightsBuffer
writeUInt16:to:
_boundsSize
writeUInt64:to:
_browseScale
zoomBy:animate:
.cxx_construct
CGImage
CATransform3DValue
CGImageForProposedRect:context:hints:
T@"<MTLBlitCommandEncoder>",R,N
GPUStartTime
T@"<VFXPhysicsContactDelegate>"
IESProfileURL
T@"CALayer",&,N,V_nsWindowLayer
MTLTexture
T@"NSArray",&,N
NSView
T@"NSArray",R,N
T#,&,N,VobjectClass
T@"NSData",&,N,V_irradianceData
T,N,V__renderTargetSize
T@"VFXDrawableDescriptor",R,&,N
T,N,Vmax
T@"VFXMesh",R,N
T,R,N
T@"VFXNode",R,N
T:,N,Vaction
T@"VFXPrefabAsset",&,N,V_source
T@"<MTLArgumentEncoder>",&,N,V_argumentEncoder
T@,&,N,V_source
T@"<MTLBuffer>",&,N,V_buffer
T@,W,N,VweakRef
T@"<MTLBuffer>",R,N
T@?,C,N,V_block
T@"<MTLCommandBuffer>",&,N,V_clientCommandBuffer
TB,N,GisEnabled
T@"<MTLCommandBuffer>",R,N
TB,N,GisWrapped
T@"<MTLCommandQueue>",R,N
TB,N,V_isOpaque
T@"<MTLDevice>",R
TB,N,V_readonly
T@"<MTLFunction>",&,N,V_fragmentFunction
TB,R,N,GisGroup
T@"<MTLLibrary>",&,N
T^v,R,N
T@"<MTLRasterizationRateMap>",&,N,V_rasterizationRateMap
Tq,N,VgeometryModificationCount
T@"<MTLRenderCommandEncoder>",R,N
Tq,N,Voperation
T@"<MTLResource>",R
T@"<MTLTexture>",R
VFXUI_unbindAll
T@"<VFXAsset>",R,N
_3dView
T@"<VFXAvoidOccluderConstraintDelegate>",N
__model
T@"<VFXCameraControllerDelegate>",N,V_delegate
_action
T@"<VFXEditorViewDelegate>",W,N,V_selectionDelegate
_adaptationDarkeningSpeedFactor
T@"<VFXMTLRenderContextResourceManagerMonitor>",W,N,V_resourceManagerMonitor
_allowHotReload
T@"<VFXPhysicsContactDelegate>",W
_angularDamping
T@"<VFXShadable>",R,N,V_shadable
_applicationDidEnterBackground:
T@"<VFXWorldRenderer>",R
_authoringGraph
T@"<_TtP3VFX10VFXBinding_>",&,N,Vbinding
T@"AVAudioEnvironmentNode",R,N
_btShapeWrapper
T@"AVCaptureDevice",&,N
_bufferBindings
T@"CAAnimation",R,N
_camera
T@"CALayer",&,N,V_rootLayer
_captureSession
T@"CAMediaTimingFunction",&,N
_center
T@"CAMetalLayer",R,N
_charge
T@"MDLAnimatedScalarArray",R,N
_color1
T@"MTLRenderPassDescriptor",N,V_descriptor
_color3
T@"MTLTextureDescriptor",R,N
_commandBufferScheduledHandlers
T@"NSArray",&,N,V_allTargetsFromAnimCodec
_copyImage:toTexture:desc:textureOptions:needsMipMapGeneration:
T@"NSArray",&,N,V_transitions
_custom
T@"NSArray",C
_defaultLibrary
T@"NSArray",C,N,V_lightBufferBindings
_defaultTexture
T@"NSArray",C,N,V_passBufferBindings
_deindexedToOriginalTableBuffer
T@"NSArray",N
_didEndSelector
T@"NSBezierPath",C,N
_drawAtTimeLock
T@"NSButton",&,N,Vremove
_drawShadowMaps
T@"NSData",R,C,N
_encodeNodePropertiesWithCoder:
T@"NSDictionary",&,N,V_attributes
_enumerateChildNodesUsingBlock:
T@"NSDictionary",&,N,V_options
_extrusionDepth
T@"NSDictionary",&,N,Voptions
_finishedExport
T@"NSDictionary",C,N
_fragmentShader
T@"NSDictionary",R,N
_geometryShader
T@"NSError",R,N,V_warnings
_handle
T@"NSMutableArray",R,N
_hidden
T@"NSNumber",&,N
_innerBindingSpaceVectorsBuffer
T@"NSObject<OS_dispatch_group>",R,N
_inputs
T@"NSObjectController",W,N,V_objectController
_isFocusableOrHasFocusableChild
T@"NSPathControl",&,N,VstackControl
_isolateProgram
T@"NSString",&,N,V_generatedTexturePath
_lastUpdateTime
T@"NSString",&,N,V_name
_legacyRenderer
T@"NSString",&,N,VkeyPathSrc
_length
T@"NSString",&,N,Vtag
_libraryManager
T@"NSString",?,R,C
_loaded
T@"NSString",C,N
_margin
T@"NSString",C,N,V_semantic
_noColorProgram
T@"NSString",R,N
_normalTextInfo
T@"NSString",R,N,V_entryPoint
_offset
T@"NSString",R,N,Videntifier
_opaque
T@"NSURL",&,N
_outerBindingSpaceVectorsBuffer
T@"NSURL",&,N,V_outputURL
_owners
T@"NSUUID",R,N,V_documentUUID
_parent
T@"NSWindow",&,N,V_nsWindow
_paused
T@"VFXAssetNode",R,N
_player
T@"VFXAuthoringEnvironment",R
_positionOffset
T@"VFXBehaviorGraph",&,N,V_behaviorGraph
_primitiveCount
T@"VFXCameraController",R,N
_rasterizationRateMapDataBuffer
T@"VFXCameraEffectBloom",&,N
_render
T@"VFXCameraEffectColorGrading",&,N
_renderableCopy
T@"VFXCameraEffectGrain",&,N
_renderingQueue
T@"VFXCameraEffectToneMapping",&,N
_result
T@"VFXClock",R,N
_samplerIndices
T@"VFXForceField",&,N
_setQuaternion:
T@"VFXLight",R,N
_shadableHelper
T@"VFXManipulator",R,N
_showStatistics
T@"VFXMaterial",R,N
_snapToAlignOnY
T@"VFXMeshElement",&,N
_source
T@"VFXMeshSource",R,N
_spheregeodesic
T@"VFXModel",R
_spotOuterAngle
T@"VFXMorpher",&,N
_statisticsInfo
T@"VFXNode",&,N,V_pointOfView
_symbolToBinder
T@"VFXNode",&,N,Vnode
_syncObjCModel:
T@"VFXNode",N,Vjoint
_targetDistance
T@"VFXNode",R,N,V_freeViewCameraNode
_textureSampler
T@"VFXNodeComponent",&,N,Vnext
_translateInCameraSpaceByX:Y:Z:
T@"VFXPhysicsBody",&,N
_truncationMode
T@"VFXPhysicsShape",&,N
T@"VFXProgram",&,N
_updateMaterialTextureProvider:
T@"VFXRenderGraph",&,N
_useHighQuality
T@"VFXSkinner",&,N
_velocityFactor
T@"VFXState",R,N,V_sourceState
_vertexSamplers
T@"VFXStateManager",W,N,V_manager
_volatileBuffer
T@"VFXView",N
_wantsWideGamut
T@"VFXView",N,V_view
_windowOcclusionStateDidChange:
T@"VFXWorld",&,N
_worlds
T@"VFXWorld",R,N
_zArrow
T@"_TtC3VFX9VFXEffect",&,N
T@,&,N
activeStateName
T@,&,N,V_session
addAudioPlayer:
T@,&,N,Vcomponent
addLibraryWithDescriptor:error:
T@,&,N,VsourceObject
addUIForStringProperty:ofClass:
T@,C,N
allKeys
T@,N
anchorB
T@,R
animationEvents
T@,W,N,Vcomponent
archive:propertiesForEntryName:
T@,W,N,VmlDelegate
argumentEncoder
T@?,C,N,VdidFinishPlayback
automaticTarget
backFaceStencil
TB,GisAdditive
binding
TB,GisRemovedOnCompletion
bloomBlurRadius
TB,N,GisActive
btShape
TB,N,GisAdditive
bundleForClass:
TB,N,GisAppliedOnCompletion
calculationMode
TB,N,GisDoubleSided
cameras
TB,N,GisHemispheric
capSegmentCount
TB,N,GisIncremental
channelEncoding
TB,N,GisLitPerPixel
clearCoatNormal
TB,N,GisPaused
clickedPathItem
TB,N,GisPositional,Vpositional
colored
TB,N,GisScreenSpace
completionBlock
TB,N,GisVideoMirrored
computeFunction
TB,N,V_automaticTarget
contactDelegate
TB,N,V_enableARMode
containsString:
TB,N,V_graphicalSelectionEnabled
context
TB,N,V_loops
coordinateSpace
TB,N,V_shouldDelegateARCompositing
createCFXObject
TB,N,V_shouldSnapOnGrid
currentDrawable
TB,N,V_shouldStream
currentViewport
TB,N,V_surroundToSelect
damping
TB,N,V_waitUntilCompleted
dataWithLength:
TB,N,VskipMorphTargets
TB,R,GisFramebufferOnly
delegateWillDie
TB,R,GisShareable
didModifyRange:
TB,R,N,GhasInterleavedIndicesChannels
dispatchOnVertices:vertexCount:
TB,R,N,GisPrecompiled,V_precompiled
dollyBy:onScreenPoint:viewport:
TB,V_completed
edgeCreaseCount
TC,R,N
elementPosition
TIFFRepresentation
enclosingPrefab
TQ,?,R
enqueue
TQ,N
enterForeground
TQ,N,V_coordinateSpace
falloff
TQ,N,V_offset
filters
TQ,N,VpixelFormat
flyModeVelocity
TQ,R,N
fresnelExponent
TQ,R,N,V_elementSize
geometrySourceWithColorData:colorSpace:vectorCount:floatComponents:componentsPerVector:bytesPerComponent:dataOffset:dataStride:
T^v,N,V_userInfo
getBoundingSphereCenter:radius:
T^v,R,N,V_renderEncoder
graphController
T^{CGImage=},N
halfExtentValue
T^{VFXMTLBlitCommandEncoder=@@},R,N
hasDefaultShape
T^{__CFXEngineContext=},R,N
inBetweenCounts
T^{__IOSurface=},R
inertiaFriction
Td,N
initTransformInWorld:withBlock:
Td,N,V_startTime
initWithDouble:
Td,R,N
initWithFileNamed:entityObject:
Tf,N
initWithLength:
Tf,N,V_continuousCollisionDetectionThreshold
initWithResult:
Tf,N,V_flyModeVelocity
initWithString:
Tf,N,V_pitch
initialVelocity
Tf,N,V_speed
interactionMode
Tf,N,V_superSamplingFactor
invView
Tf,N,V_truckSensitivity
isEventInImGUI:
Tf,N,Vradius
isGroup
Tf,N,VreverbBlend
isLocal
Tf,R
isPremultiplied
Tf,R,N,V_gridUnit
isTextureKnown:
Ti,N,V_ri
isValid
Ti,R,N
isolate
Tq,N,V_action
keyCode
Tq,N,V_frequency
keyPathsForValuesAffectingScale
Tq,N,V_loadingPolicy
layouts
Tq,N,V_selectionTransformMode
libraryForFile:
Tq,N,V_xAlignment
localRightValue
Tq,N,V_zAlignment
lookAt:
Tq,N,Vheight
lowercaseString
Tq,N,VinputsCount
manager
Tq,N,Vtype
Tq,R
matrix4
Tq,R,N,V_line
maxBufferLength
Tq,V_usedCount
maxTransferRate
T{?=CCCC},R,N
maximumExposure
T{?=[4]},N
meshDescription
T{?=[4]},N,V_projectionMatrix
meshRef
T{?=[4]},N,Vtransform
metalDescriptor
T{?=[4]},R,N
T{?={?=[4]}{?=[4]}{?=[4]}},R,N
minimumDistance
T{CGRect={CGPoint=dd}{CGSize=dd}}
momentOfInertia
T{CGRect={CGPoint=dd}{CGSize=dd}},R,N
moveToPosition:
T{CGSize=dd},N
newBuffer:type:
T{CGSize=dd},R,N
newComputePipelineStateWithDescriptor:options:reflection:error:
T{VFXClockTimeRange=dd},N,V_replayLoopRange
newIndirectCommandBufferWithDescriptor:maxCommandCount:options:
URLByAppendingPathComponent:
newRenderPipelineStateWithDescriptor:options:completionHandler:
URLByDeletingLastPathComponent
nodeRef
URLByResolvingSymlinksInPath
numberWithBool:
URLForDirectory:inDomain:appropriateForURL:create:error:
numberWithLong:
URLForResource:withExtension:subdirectory:
observedKeyPath
URLWithString:
options
URLsForResourcesWithExtension:subdirectory:
particleEmitter
UUID
performMouseUp:
VFXFixDPI
playing
VFXFloat3Value
prepareObject:shouldAbortBlock:
VFXJSExportProtocol
presentedSubitemDidAppearAtURL:
VFXPixelsHigh
primitiveRanges
VFXSerializedBufferSize:type:
profile
VFXUID_classForElementOfArray:
program
VFXUID_creationOptions
pushDebugGroup:
VFXUID_instanciateWithOption:
VFXUID_propertyOrdering
recycle
VFXUID_viewForProperty:
registerPlayer:
VFX_CGPointValue
reload:options:
VFX_displayLinkCallback:
removeAllChilds
VFX_numberOfChannels
removeFromScene
VFX_setupDisplayLinkWithQueue:screen:policy:
removeObserver:
VFX_valueWithCGPoint:
renderInGBuffer
_IESProfile
rendererOptions
__CFObject
replayLoopRange
__antialiasingMode
replicatorConstraintWithTarget:
__camera
requiredOutputs
__didChangePointOfView
resourceManager
__engineStats
restart
__removeAnimation:forKey:
rollingFriction
__renderLayerUsingMetal:withCARenderer:engineContext:viewport:atTime:
screenTransform
__renderingQueue
scrollingDeltaY
__shadableHelper
__swift_objectForKeyedSubscript:
setAdd:
__updateMutableMesh:withMetalMesh:
setAlphaCutoff:
__viewport
setAreaExtents:
_accumulatedDrag
setAverageGray:
_activate
setBlendFactor:
_activeStateName
setBoundingBox:
_adaptationMaximum
setCastsShadow:
_adaptativeEndFrame
setChamferMode:
_adaptativeState0
setColorFilter:
_addGPUFrameCompletedHandler:
setConstantValue:type:withName:
_addGPUFrameScheduledHandler:
setControlSize:
_addToPhysicsWorld:
setDepthCleared
_additiveWritesToAlpha
setDestinationAlphaBlendFactor:
_alignmentMode
setDocumentURL:
_allTargetsFromAnimCodec
setEnvironment:
_allocatorLock
setFieldOfView:
_allowGPUBackgroundExecution
setFloat3Value:
_allowRemoteEdition
setFocalLength:
_allowsResting
setForceAsyncShaderCompilation:
_alphaCutoff
setGammaOffset:
_ambientOcclusion
setGroundColor:
_angularRestingThreshold
setHighDynamicRangeCompression:
_angularVelocityFactor
setIndexBuffer:
_animationDidStart
setInputHeight:
_animationEvents
setIsAuthoring:
_animationRef
setLookupTable:
_antialiasingMode
setMax:
_appendFocusableNodesInRect:ofView:toFocusItems:
setMaxVertexAmplificationCount:
_applyOnCompletion
setMin:
_applyUnsharing:alreadyShared:
setNextKeyView:
_arcHandleXY
setObjectClass:
_arcHandleYZ
setOffsetValue:
_arcball
setOutputWidth:
_areaLightPrecomputedDataTexture
setPixelBuffer:
_areaType
setPointOfView:
_arguments
setReloadBlock:
_arrayLength
setRenderPipelineState:atIndex:
_arrowIndicesOffset
setRestitution:
_asset
setSampleCount:
_assetRegistry
setScaleFactor:
_assetWriterInput
setScissorRect:
_associate:with:
setScreenSpaceReflectionStride:
_attachmentProvider
setSpeedFactor:
_attenuationDistance
setStoreAction:
_audioBuffer
setStringValue:
_audioName
setTemperature:
_audioPlayer
setTessellator:
_audioSource
setTileSamplerStates:withRange:
_authEnv2
setToeStrength:
_authoringEnvironment2
setTransitions:
_autoSwitchToFreeCamera
setVertexBuffer:offset:atIndex:
_automaticTarget
setViewMatrix1:
_automaticallyAdjustsZRange
setWithObjects:
_avAdaptor
set_commandBufferStatusMonitor:
_availableColorMatchingComputePipelines
setupAsTemplate
_availableComputePipelines
shaderModifiers
_availableDeformerStacks
shapeWithModel:
_availableImageProxy
showsStatistics
_availableIrradianceTextures
skipFramesIfNoDrawableAvailable
_availableLightingSystemReflectionProbeTextures
stateController
_availableMeshSources
stopReplication
_availableMorphDeformerReadOnlyBuffers
stringByAppendingPathExtension:
_availablePipelineStates
stringFromByteCount:countStyle:
_availableRadianceTextures
submeshWithUniquedIndexData:andVFXModelElement:bufferAllocator:
_availableSamplers
supportsMemorylessRenderTargets
_availableShadablesSearchKey
swizzle
_availableStageDescriptors
_availableWireframeMaterials
targetDirection
_avoidsOverLighting
texture
_background
textureForName:
_backgroundColor
timeSampleCount
_backgroundDidChange
toAngle
_backgroundVideoProgram
toValue
_backingSize
torusWithRingRadius:pipeRadius:
_bakeSphericalHamonicsBasedIrradianceTexture:forEnvironmentTexture:renderContext:applySH:
triggersEnabled
_baked
unlinkCustomPropertyWithParent:
_barycentricCoordsBuffer
update:
_baseGeometry
updateLightNode:withSourceNode:
_baseNormalDataType
useHeap:stages:
_baseState
valueWithPoint:
_beginFrame
vector2
_beginMouseMovedTracking
vector4
_beginTranslateAtLocation:
vignettingPower
_billboard
wantsAdaptation
_binding
weights
_bindingMode
withPointerToValueAtPath:block:
_bindingsGenerator
worldFrontValue
_blendDensePipeline
worldRightValue
_blendSparsePipeline
worldWillChange
_bloom
wrapped
_body
writeSIMD2D:to:
_bodyB
writeSIMD3D:to:
_boldTextInfo
writeSIMD4D:to:
_boneIndicesBuffer
writeString:to:
_bonesAndIndicesCompression
writeUInt32:to:
_browseMode
zoomBy:
_browseScaleFactor
_btWorld
_bufferForData:bytesPerIndex:
_bufferForMTLBuffer:
_bufferPool
_bufferSize
_buffers
_buffersUsageMask
_buildMipmaps:
_bytesPerIndex
_caAnimationCache
_caReady
_cache
_cachedTessellator
_calculationMode
_callbackWithTime:
_cameraController
_cameraEffect
_cameraFocusPlaneGeometry
_cameraFrustumGeometry
_cameraIsManipulated
_cameraLoaded
_cameraNearPlaneGeometry
_cameraOriginalFieldOfView
_cameraOrthographicFrustumGeometry
_cameraRoot
_cameraTarget
_cameraTargetComputed
_camerasDictionary
_canJitter
_canRecycleParticleBuffers
_cancelMouseMovedTracking
_canceled
_capOrientationAnglesToMaximum
_capSegmentCount
_cappedTranslationDelta:
_captureDevice
_cascadeDebugFactor
_castsShadow
_categoryBitMask
_centerOfMassOffset
_cfxAnimation
_cfxBackgroundColor
_cfxBackgroundColorDidChange
_cfxImage
_cfxShaderModifierCache
_chainRootNode
_chamferMode
_chamferRadius
_chamferSegmentCount
_checkAndUpdateDisplayLinkStateIfNeeded
_checkForAssociatedSamplerOnBinding:argument:
_checkSettingsConsistency
_childNodes
_childNodesPassingTest:recursively:output:
_childNodesWithAttribute:output:recursively:
_children
_chromaticTransform
_ciImage
_clearBackBuffer
_clearCFXCache
_clearCoat
_clearCoatNormal
_clearCoatRoughness
_clearContents
_clearRenderCaches
_clearUnusedBindingPoints
_clearWorldRef
_clickOrigin
_clientCommandBuffer
_clientCommandQueue
_clientRenderCommandEncoder
_clientRenderPassDescriptor
_clients
_clock
_cloneSet
_cloneSharable:remap:
_cloneWithOption:remapTable:
_cloning
_clusterInfo
_coalescingSource
_collectCompilationErrors
_collisionBitMask
_collisionImpulse
_color
_colorAndTextureProgram
_colorBufferWriteMask
_colorFilter
_colorFringe
_colorGrading
_colorManaged
_colorOnlyProgram
_colorSpace
_colorTextures
_commandBuffer
_commandBufferStatusMonitor
_commandQueue
_commonInit
_commonInit:
_commonProfileBuffersAllocator
_commonProfileCacheLibrary
_commonProfileConditioner
_commonProfileIORange
_commonProfilePrecompiledFunctions
_compilationErrors
_compilationIssues
_compileRenderGraphIfNeeded
_completed
_componentType
_components
_compositeRendering
_computeACMR
_computeAutomaticTargetPointIfNeeded
_computeBoundingSphereOmittingFloorsForNode:sphere:
_computeEvaluator
_computeFunction
_computeNextFrameTime
_computePipeline
_computePipelineStateForKernel:constants:constantsHash:threadGroupSizeIsMultipleOfThreadExecutionWidth:
_computeStickyAxisIfNeeded:
_computeTranslationOrigin3DFromPoint:
_computeUsageForBindings:function:
_computedLightingEnvironmentMapsPath
_configureComputePipeline:withDescriptor:
_consoleLineCount
_constantBufferPools
_constraint
_constraintRef
_contact
_contactDelegate
_contactNormal
_contactPoint
_contactTestBitMask
_contactWithManifold:index:
_containsAlpha
_contentScaleFactor
_contentTransform
_contentType
_contents
_contentsScaleFactor
_context
_contextIsDoubleBuffered
_continuousCollisionDetectionThreshold
_contrast
_controller
_controllers
_convertRotationFromWorldToPointOfView:
_convertToCA
_coordinateSpace
_copyAnimationsFrom:
_copyAttributes:
_copyAttributesTo:
_copyBaseBufferPipeline
_copyCFXImageFromImageData:typeID:
_copyImageFromCFXImage:
_copyPerformanceStatistics
_copyRecursively:remapOut:
_copySnapshot:
_copyWithOptions:to:remap:
_coreEntityManager
_coreHandle
_cornerSegmentCount
_correctiveDriverCounts
_correctiveDriverIndices
_correctiveInBetweenCounts
_correctiveInBetweenInfluenceWeights
_correctivesAndInBetweens
_counters
_createBackgroundColorImageWithSize:
_createBody
_createConstraint
_createDisplayLinkIfNeeded
_createDynamicWorldIfNeeded
_createOffscreenFramebufferIfNeeded
_createPipelineStateWithDescriptor:desc:pipeline:
_createResourceCommandBufferIfNeeded
_createSkinnerWithCompressedData:bonesCount:vertexCount:
_createSkinnerWithVertexCount:bones:boneWeights:boneIndices:baseMesh:
_createSnapshotWithSize:error:
_cullMode
_cumulative
_current
_currentAllocatorPage
_currentCommandBuffer
_currentFrameHash
_currentFrameIndex
_currentFrustumInfo
_currentInitDeformer
_currentInitRenderContext
_currentRenderContext
_currentRenderPassDescriptor
_currentResourceManager
_currentSeekStep
_currentStickyAxis
_currentStreamBufferIndices
_currentSystemTime
_currentTransforms
_currentUpdateBuffers
_currentUpdateComputeCommandEncoder
_currentUpdateComputeEncoder
_currentUpdateComputeEncoderProvider
_currentUpdateFrustumInfo
_currentUpdateRenderContext
_currentUpdateTransforms
_customAudioNode
_customContainerFrame
_customDecodingOfVFXAudioSource:
_customDecodingOfVFXAvoidOccluderConstraint:
_customDecodingOfVFXDistanceConstraint:
_customDecodingOfVFXFloor:
_customDecodingOfVFXIKConstraint:
_customDecodingOfVFXLight:
_customDecodingOfVFXLookAtConstraint:
_customDecodingOfVFXMaterial:
_customDecodingOfVFXMaterialProperty:
_customDecodingOfVFXModel:
_customDecodingOfVFXMorpher:
_customDecodingOfVFXNode:
_customDecodingOfVFXPhysicsShape:
_customDecodingOfVFXProgram:
_customDecodingOfVFXReplicatorConstraint:
_customDecodingOfVFXShape:
_customDecodingOfVFXText:
_customDeformerToInstances
_customEncodingOfVFXAudioSource:
_customEncodingOfVFXAvoidOccluderConstraint:
_customEncodingOfVFXCamera:
_customEncodingOfVFXDistanceConstraint:
_customEncodingOfVFXIKConstraint:
_customEncodingOfVFXLOD:
_customEncodingOfVFXLight:
_customEncodingOfVFXLookAtConstraint:
_customEncodingOfVFXMaterial:
_customEncodingOfVFXMaterialProperty:
_customEncodingOfVFXModel:
_customEncodingOfVFXMorpher:
_customEncodingOfVFXNode:usePresentationObject:
_customEncodingOfVFXPhysicsShape:
_customEncodingOfVFXProgram:
_customEncodingOfVFXReplicatorConstraint:
_customEncodingOfVFXShadableHelper:
_customEncodingOfVFXShape:
_customEncodingOfVFXText:
_customMainPassProcessUsesExtraRenderTargetForRenderer:pixelFormat:
_customMaterialProperty
_customMaterialPropertyName
_customRenderGraphEnabled
_cvDisplayLink
_cyan
_damping
_data
_dataKind
_dataKindForComputeKernel
_dataOffset
_dataSource
_dataStride
_debug
_debugDrawer
_debugOptions
_decelerationDistance
_deepCloneWithRemapTableOut:
_defaultBackgroundColor
_defaultCubeTexture
_defaultDepthStencilState
_defaultLightingEnvironmentIrradianceTexture
_defaultLightingEnvironmentRadianceTexture
_defaultPOVForWorld:
_defaultProgramForTessellation
_defaultRenderGraph
_defaultSamplerState
_defaultShape
_defaultTargetForWorld:
_defaultTexture1D
_defaultTexture3D
_defaultVehicleRayCaster
_definition
_deformNormalBuffer
_deformNormalStageInputOutputDescriptorInfo
_deformPositionBuffer
_deformPositionStageInputOutputDescriptorInfo
_deformTangentBuffer
_deformTangentStageInputOutputDescriptorInfo
_deformedNode
_deformedToDrivingBindingTransform
_deformer
_deformerInstances
_deformerStackDidChange:
_deformerStackWillDie:
_deformers
_deindexedToFirstDeindexedTableBuffer
_deindexedToFirstDeindexedTableBufferIndexSize
_deindexedToOriginalTableBufferIndexSize
_delegate
_delegationConformance
_deleteOriginalData
_deltaTime
_depthAndStencilStateWithReadWriteDepthDisabled
_depthOfField
_depthOffCullOffStates
_depthOffCullOnStates
_depthOnCullOffStates
_depthOnCullOnStates
_depthOnly
_depthPrePass
_depthTextures
_desc
_description
_descriptor
_destination
_deviceQueue
_diagnostics
_dictionaryForFrequency:
_didDecodeVFXCamera:
_didDecodeVFXIKConstraint:
_didDecodeVFXLOD:
_didDecodeVFXMaterialProperty:
_didDecodeVFXMorpher:
_didDecodeVFXNode:
_didDragTo:
_didEverFocusNode
_didMutate
_didRenderWorld:
_didUpdateBackingSize
_diffNode:with:path:
_diffObject:with:path:
_diffuse
_directionForScreenPoint:viewport:
_discardOriginalTopology
_discardTextures
_discretizedStraightLineMaxLength
_displacement
_displayAspect
_displayID
_displayLink
_displayLinkCreationRequested
_displayLinkStatsTack
_displayLinkStatsTick
_displayScaleFactor
_distance
_documentURL
_documentUUID
_doubleSided
_doughnutBokeh
_downSamplePipeline
_draggedTransform
_drawAtTime:
_drawDebugInAuthoringEnvironment:
_drawForJittering
_drawFullScreenTexture:
_drawInRenderingQueueWithDrawable:renderPassDescriptor:
_drawIndexedPrimitivesIndirectBuffer
_drawIndexedPrimitivesIndirectBufferOffset
_drawOnMainThreadPending
_drawPBRTextures
_drawPatchForMeshElement:instanceCount:
_drawScale
_drawable
_drawableDescriptor
_drawablePresentedHandlers
_drawableResizesAsynchronously
_drawableSafeAreaInsets
_drawsArea
_drivenBydefaultNavigationCameraController
_dstAssociatedNode:
_dstHasAssociatedNode:
_dstToSrc
_dump:
_dumpNodeTree:tab:
_dumpToDisk
_dumpTree
_duration
_dynamicLinesInfo
_dynamicLinesNoDepthTestInfo
_dynamicTrianglesInfo
_edgeCreasesElement
_edgeCreasesSource
_edgeTessellationFactor
_editingSpace
_editorLocked
_effectRoot
_effectiveFeatures
_effectiveIndexCount
_effectiveIndexOffset
_effectiveModifier
_effectiveStickyAxis
_effectsDictionary
_elapsedTime
_elementData
_elementSize
_elements
_emission
_emulateStereo
_enableARMode
_enableFreeCamera
_enabled
_enabledTypes
_encodeCustomMainPassProcessForRenderer:atTime:helper:
_encodeDataAsHalf
_encoder
_endDraggingWithVelocity:
_endFrame
_endImGuiFrameAndRender
_endTime
_engineContext
_enqueueCopyFromTexture:toTexture:blitEncoder:generateMipMaps:
_entityHandle
_entityObject
_entryPoint
_enumerateDependencyNodesUsingBlock:
_environment
_error
_euler
_eventBlock
_eventTime
_executeDrawCommand:
_expandItem:
_explicitMomentOfInertia
_exportAsMovieOperationWithDestinationURL:size:attributes:delegate:didEndSelector:userInfo:
_exposure
_fStop
_fadeOutDuration
_falloff
_features
_fetchMesh
_fieldGeometry
_fieldOfView
_fieldOfViewZoomFactor
_filename
_fillBackward
_fillForward
_fillMode
_fillNodeA:nodeB:
_fillNodeA:nodeB:contactPoint:collisionImpulse:distance:hitFraction:
_fillVertexDescriptor:withMeshSource:semantic:inputSet:bufferIndex:
_fillVertexDescriptor:withSemantic:inputSet:bufferIndex:vertexFormat:offset:stride:
_filmOffset
_filterQuality
_finalAttachementIdentifier
_finalDataKind
_finalMesh
_finalMeshDataKind
_finalMeshVertexCount
_finalNormalBuffer
_finalPositionBuffer
_finalRenderTexture
_finalTangentBuffer
_findAssociatedNode:inSubtree:ignoring:
_findChild:inChildrenOf:index:
_findComponentWithType:
_firstDrawDone
_firstMaterial
_firstSimulationDone
_fixedBoundingBoxExtrema
_flatness
_flattened
_flyModeVelocity
_focalBlurSampleCount
_focalLength
_focusBehavior
_focusDistance
_focusFrameInView:
_fogColor
_fogDensityExponent
_fogStartDistance
_font
_forceAsyncShaderCompilation
_forceField
_forceFieldsDictionary
_forceFieldsRoot
_forcesBackFaceCasters
_fraction
_fragmentBuffers
_fragmentFunction
_fragmentFunctionName
_fragmentSamplers
_fragmentTextures
_frameBindings
_frameBufferBindings
_frameConstantBufferPool
_frameTexturePool
_frameUniforms
_frameVolatileBufferPool
_framebuffer
_framebufferInfo
_framebufferSize
_frameworkLibrary
_freeAxes
_freeCameraActivated
_freeIndices
_freeViewCameraNode
_freeVolatileMeshElements
_frequency
_fresnelExponent
_friction
_fromAngle
_fromShift
_fromZ
_gainColor
_gainOffset
_gamma
_gammaColor
_gammaOffset
_generateDefaultShapeForNode:
_generateLock
_generatedTexturePath
_geometry
_geometryByRemovingSkinnerSources
_geometryByUnifyingNormalsWithCreaseThreshold:
_geometryByWeldingVerticesWithThreshold:normalThreshold:
_getDeformedMeshBoundingBox:
_ghostPairCallback
_gimbalLockEnabled
_gobo
_grain
_graph
_graphicalSelectionEnabled
_gravity
_grayDark
_grayLight
_grayMedium
_green
_grid
_gridUnit
_handleIfAny
_handleKeyDownToSwitchCamera:
_handlingInteraction
_hasAutomaticCameraTarget
_hasComponentBitmask
_hasDefaultValues
_hasFixedBoundingBoxExtrema
_hasLighting
_hasPivot
_heightSegmentCount
_hidManager
_highlightNode
_hingeHandle
_hitTest:viewport:options:
_identifier
_iesInfo
_ignoreGravity
_ikTarget
_image
_imageProxyWillDie:
_imageWillDie:
_imguiFrameStarted
_imguiHandleMouseDown
_importOptions
_inBetweenCounts
_inBetweenInfluenceWeights
_inFlightSemaphore
_inRenderQueueForLayerBackedGLRendering
_incremental
_incrementalAddPipeline
_incrementalInitPipeline
_index
_indexBuffer
_indexCount
_indexOfRefraction
_indexPathForNode:
_indexType
_indices
_indicesChannelCount
_inertia
_inertiaVelocity
_influenceFactor
_infoHangle
_initChildNodesArray
_initRendererWithOptions:
_initWithDevice:options:isPrivateRenderer:privateRendererOwner:clearsOnDraw:
_initWithEngineContext:
_initialBuffersStageInputDescriptor
_initialInputLocation
_initialMatrix
_initialNormalBuffer
_initialNormalStageInputOutputDescriptorInfo
_initialPoint
_initialPointOfViewWorldPosition
_initialPositionBuffer
_initialPositionStageInputOutputDescriptorInfo
_initialSelection
_initialTangentBuffer
_initialTangentStageInputOutputDescriptorInfo
_initialZoom
_injectionPointRanges
_innerBindingOffsetsBuffer
_innerLayerInfluencesBuffer
_innerRadius
_inputLocation
_insideTessellationFactor
_inspector
_installFreeViewCameraIfNeeded
_installViewport
_instance
_instanceCount
_integrateModelKitComputedMaps:withGeometry:node:texturePathProvider:vertexAttributeNamed:materialPropertyNamed:filePath:
_intensity
_interactionMode
_interleavedIndicesChannels
_invView
_invalidateFramebuffer
_invalidated
_isAReference
_isAnimating
_isAuthoring
_isColored
_isCommonProfileProperty
_isDefault
_isEditor
_isEffectivelyHidden
_isFront
_isGizmo
_isGroup
_isHidden
_isInertiaRunning
_isInvalidated
_isJoint
_isLayerBacked
_isLegacySingleLayerDeformer
_isLocationValid:inViewport:
_isMetalSupported
_isMouseDown
_isNameUnique:
_isNodeInsideFrustum:withPointOfView:viewport:
_isOpaque
_isOrbiting
_isPartOfSelection:
_isPoint:insideFrustumForView:
_isPresentationObject
_isPrivateRenderer
_isRunningInExtension
_isTargetFromHitTest
_isTextureSource
_isUsingSparseTargets
_isValid
_isValidationEnabled
_isViewPrivateRenderer
_isViewedObjectSphereComputed
_isWorldBoundingSphereComputed
_iteration
_jitterAtStep:updateMainFramebuffer:redisplay:jitterer:
_jitterRedisplay
_jitterer
_jitteringEnabled
_jointsPerNode
_keepTargetDirection
_keyPath
_keyValues
_keyboard
_keys
_kvoKeysForwardedToRenderer
_lastDisplayLinkTime
_lastDragLocation
_lastDragTime
_lastFramePositionBuffer
_lastFrameTime
_lastGridDistance
_lastInputLocation
_lastKeyInputTime
_lastModifierFlags
_lastMorpherIncrementalPassState
_lastRenderedTime
_lastRotationAngle
_lastSimulationTime
_lastUpdate
_lastWorldTime
_layer
_layerDidChange:
_layerRoot
_layerRootNode
_layerTarget
_layerTreeDidUpdate
_layoutLocked
_legacyAdditiveWritesToAlpha
_legacyDeformedNodeUVChannel
_legacyDrivingNode
_legacyDrivingNodeUVChannel
_legacyOffsetsOrTransformsBuffer
_legacyView
_lengthSegmentCount
_lensBlur
_library
_libraryURL
_liftColor
_liftOffset
_light
_lightBindings
_lightBufferBindings
_lightGeometry
_lightLoaded
_lightProbesInfo
_lightProbesProgram
_lightRoot
_lighting
_lightingInjectionPointRanges
_lightsDictionary
_line
_linearRestingThreshold
_litPerPixel
_load
_loadReferencedWorldWithURL:
_loadURL:into:options:statusHandler:error:
_loadURLWithBundle:
_loadWithNode:fromURL:
_loadWithURL:
_loadingPolicy
_localFront
_lock
_lod
_logLightingInformation
_logicalHeight
_logicalWidth
_logsInfo
_lookUpFoundInstance
_lookUpKey
_lookupTable
_loops
_lowLatency
_magnificationFilter
_mainTargetNamesToIndexes
_mainTargets
_mainTargetsAndInBetweens
_makeReverseItem
_manager
_manipulableTransform
_manipulator
_manipulatorEvent
_mapToSphere:inViewport:
_maskCenter
_maskEnabled
_maskRadius
_mass
_material
_materialPropertyClass
_materialWillDie:
_materialWithName:
_materials
_maxAnisotropy
_maxInFlightFrameCount
_maximumAngles
_maximumDirectionAngle
_maximumDistance
_maximumEdgeLength
_maximumLinearAcceleration
_maximumLinearVelocity
_maximumPointScreenSpaceRadius
_maximumShadowDistance
_mesh
_meshByRemovingSkinnerSources
_meshByUnifyingNormalsWithCreaseThreshold:
_meshByWeldingVerticesWithThreshold:normalThreshold:
_meshChanged
_meshElement
_meshElementWillDie:
_meshSource
_meshSourceWillDie:
_meshWillDie:
_message
_metalness
_minificationFilter
_minimumAngles
_minimumDistance
_minimumLanguageVersion
_minimumPointScreenSpaceRadius
_mipFilter
_mirrored
_mkSemantic
_mode
_modeSensitivity
_model
_modelLoaded
_modelPath
_modelPathComponents
_modelSourceWithData:semantic:vectorCount:componentType:componentCount:dataOffset:dataStride:
_modelSourceWithSource:vertexFormat:
_modelToPresentationRemapTable
_modelWillDie:
_momentOfInertia
_morphDeformer
_morphKind
_morphNormals
_morphTargetCount
_morphTargetNormalDataType
_morphTargetPositionDataType
_morphTargets
_morphTargetsSparseIndicesBuffer
_morphTargetsVertexBuffer
_morphWillDie:
_morpher
_morpherLoaded
_motionBlur
_mouseClickCount
_mouseDown
_mouseDownLocation
_mouseDragged
_mouseUpLocation
_msaaColorTextures
_msaaDepthTextures
_mtkTextureLoader
_mtkView
_mtlBuffer
_mtlTexture
_mtlTextureCache
_mtlVertexFormat
_multiply
_mutabilityTimestamp
_mutex
_name
_names
_navigationCameraController
_needSuperSampling
_needsRedraw
_needsRedrawAsap
_needsRenderResource
_needsRepetitiveRedraw
_newComputeDescriptorForPipelineDesc:library:
_newMTLBufferFromPoolWithLength:
_newProgramWithHashCode:engineContext:introspectionDataPtr:
_newSubBuffer
_nextFrameTime
_node
_nodeA
_nodeB
_nodeBindings
_nodeBufferBindings
_nodeRef
_nodeScale
_nodeUniforms
_nodeWithIndexPath:
_nodesInsideFrustumWithPointOfView:viewport:
_notifyModelChanged
_nsWindow
_nsWindowLayer
_objectController
_occluder
_offScreenFramebuffer
_opacity
_operateOnDataUsingCompressionAlgorithm:operation:
_operations
_optimizeKeyframesWithTarget:
_optimizeTriangleIndices
_optimizedmodelElementWithData:primitiveType:primitiveCount:bytesPerIndex:
_options
_optionsForSymbol:
_orbitAtPoint:forView:globalBoundingSphere:
_orientationForMode
_orientationOffset
_orientationState
_originalData
_originalDataCount
_originalFocal
_originalFov
_originalLightingSourceCode
_originalMouseLocation
_originalOrthoScale
_originalRenderPassDescriptor
_originalSourceCode
_originalToFirstDeindexedTableBuffer
_originalToFirstDeindexedTableBufferIndexSize
_originalTransform
_orthographicScale
_orthographicScaleForZoomFactor:
_orthographicViewSpaceTranslationForZoomAtScreenPoint:scaleDelta:viewport:
_orthographicZoomFactor
_orthographicZoomFactorForProposedZoomFactor:
_otherMouseEventMonitor
_outerBindingOffsetsBuffer
_outputURL
_overlayDynamicLinesInfo
_overlayDynamicTriangleInfo
_overlayLayerRoot
_overrides
_ownedCommandQueue
_owner
_ownerWillDie
_pages
_paleBlue
_paleGreen
_panel
_parallaxCenterOffset
_parallaxCorrectionEnabled
_parallaxExtentsFactor
_parameters
_parentPage
_parentView
_parseAndSetShaderModifier:
_parseBindings:function:renderPipeline:
_partitionMode
_pass
_passBindings
_passBufferBindings
_passWillDie:
_path
_pauseAnimation:forKey:pausedByNode:
_pausedByInheritance
_pendingAllocationListener
_pendingGPUFrameCount
_pendingMoveEvent
_perVertexTrianglesIndices
_perVertexTrianglesOffsets
_physicsBodies
_physicsBodiesLock
_physicsJoints
_physicsShape
_physicsWorld
_physicsWorldCreateIfNeeded:
_pinchShouldMoveCamera
_pink
_pipeRadius
_pipeSegmentCount
_pipeline
_pipelineStateHashForMeshElement:patchType:
_pitch
_pixelBuffer
_pixelFormat
_planarTranslationHandleXY
_planarTranslationHandleXZ
_planarTranslationHandleYZ
_planarTranslationHandles
_planarTranslationLayout
_playerRef
_pointIndicesBuffer
_pointOfView
_pointOfViewIsSelected
_pointOfViewOrthographicScale
_pointOfViewUsesOrthographicProjection
_pointOfViewWasSet
_pointSize
_pointsOfViewRoot
_position
_postCommandWithBlock:
_postProjectionTransformScale
_postProjectionTransformTranslation
_preTick:
_precompiled
_precomputedLightingEnvironmentWillDie:
_preferredFramePerSeconds
_preferredFrameRate
_preloadRenderer
_prepareFreeViewCamera
_prepareMaterialTextures:
_prepareRenderTarget
_prepareSnapToAlignData:minOffset:maxOffset:
_prepareUpdate
_presentFramebuffer
_presentationItemsLock
_presentationMappingChannel
_presentationNodeTransforms
_presentationObject
_presentationWeightForTargetAtIndex:token:
_preserveScale
_preventWarmup
_primitiveRanges
_primitiveType
_printData
_privateRendererOwner
_privateRendererOwnerDelegationConformance
_probeEnvironment
_probeExtents
_probeOffset
_probeType
_probeUpdateType
_processingContext
_profile
_program
_programDidChange:
_programHashCodeWillDie:
_programMutex
_programWillDie:
_progress
_projectPoint:viewport:
_projectPoints:count:viewport:
_projectionMatrix
_projectionTransform
_properties
_property:
_propertyType
_provider
_proximityHidden:
_quadrantIndicesCount
_quadrantIndicesOffset
_quadrantRingIndicesCount
_quadrantRingIndicesOffset
_quaternion
_queue
_queuedFrameCount
_radialSegmentCount
_radialSpan
_radianceData
_rasterizationRateMap
_rasterizationRateMapBlitPipeline
_rasterizerStateDidDie:
_rate
_rawQuilt
_rayTestWithSegmentFromPoint:toPoint:options:
_reSyncModelTree
_readSubdivCacheForHash:
_readonly
_readsFromDepthBuffer
_rebuildRasterizationRateMap
_rebuildTextures
_recordingPointOfViewEvents
_recycleMTLBufferToPool:
_red
_reduceStatsOfConstantBuffer:
_referenceNode
_referenceObject
_referenceURL
_reflectionCategoryBitMask
_reflectionFalloffEnd
_reflectionFalloffStart
_reflectionProbeArrayTexture
_reflectionResolutionScaleFactor
_reflectionSampleCount
_reflective
_reflectivity
_registerAsObserver
_registerPhysicsJoints
_registeredBodies
_registry
_releaseCachedSourcesAndElements
_reliesOnFrustum
_reliesOnTransforms
_remoteEditionEndpoint
_remotePreviewDelegate
_removeAllMaterials
_removeButton
_removeChild:
_removeComponentWithType:
_removeConstraint
_removeFromParentNodeWithoutRemovingWorldReference
_removeMatchingProgram:pass:
_removeOwner
_removedOnCompletion
_renderContext
_renderContextMetal
_renderEncoder
_renderGraph
_renderMode
_renderPassParameters
_renderSize
_renderTargetInfo
_renderTargetSize
_renderThreadPriority
_renderWithViewport:encoder:passDescriptor:commandQueue:commandBuffer:
_renderWorldWithEngineContext:
_renderer
_renderer:didApplyAnimationsAtTime:
_renderer:didApplyConstraintsAtTime:
_renderer:didBuildSubdivDataForHash:dataProvider:
_renderer:didRenderWorld:atTime:
_renderer:didSimulatePhysicsAtTime:
_renderer:inputTimeForCurrentFrameWithTime:
_renderer:subdivDataForHash:
_renderer:updateAtTime:
_renderer:willRenderWorld:atTime:
_rendererKind
_renderingSnapshot
_rendersContinuously
_rendersIntoMaterial
_repeatCount
_replayLoopRange
_replicateOrientation
_replicatePosition
_requireLoadFinalTexture
_reserved
_reserved2
_reset
_resetBrowseScaleFactor
_resetContentsScaleFactor
_resetFreeViewCamera
_resetLightAuthoringWithContainerNode:source:light:
_resetOrientationState
_reshape
_resizeLayer:toSize:updateLayer:updateTransform:caRenderer:
_resolveURL
_resourceBlitEncoder
_resourceCommandBuffer
_resourceComputeEncoder
_resourceGroup
_resourceManager
_resourceManagerMonitor
_resourceQueue
_restartSource
_restartSourceIsSuspended
_restitution
_resyncObjCModelOfPerTypeParametersWithOldType:
_reverseActiveState
_rollingFriction
_root
_rootDst
_rootLayer
_rootNode
_rootSrc
_rotateByX:Y:
_rotateWithDrag:mode:stickyAxis:
_rotation
_rotationHandles
_rotationRepresentation
_rotationSensitivity
_roughness
_runFPSTestWithDuration:
_runningInExtension
_runningLock
_runtimeResolvedURL
_sampleCount
_sampleDistributedShadowMaps
_samplerInput
_samplersUsageMask
_saturation
_saveOriginalData
_scale
_scaleNode
_scaleOffset
_scaleWorldBy:
_sceneDidEnterBackground:
_sceneWillEnterForeground:
_screenSize
_screenSpace
_screenSpaceReflectionMaxRayDistance
_screenSpaceReflectionSampleCount
_screenSpaceReflectionStride
_screenSpaceRotation
_screenTransform
_scrollWheelModifiers
_scrollWheelMultiplier
_searchBindings:forArgumentNamed:type:
_seed
_segmentCount
_selectedAxis
_selectedNodes
_selecting
_selection
_selectionBoundingSphere:
_selectionDelegate
_selectionIsReadonly
_selectionP0
_selectionP1
_selectionTransformMode
_selfDelegationConformance
_selfIllumination
_selfIlluminationOcclusion
_semantic
_semanticInfos
_semantics
_sensorSize
_session
_setAnimation:
_setAnimationRef:
_setAntialiasingMode:forcingReset:
_setAuthoringEnvironment:
_setBackingSize:
_setBaseMesh:
_setBtShape:
_setCFXImageRef:
_setCFXProgram
_setCFXProgramDelegate
_setColor:
_setComponent:withType:
_setContentsScaleFactor:
_setDisplayScaleFactor:
_setEngineStats:
_setGeometryRef:
_setHasFocusableChild
_setImagePath:withResolvedURL:
_setInertiaRunning:
_setLegacyAdditiveWritesToAlpha:
_setMeshBuffers:
_setNeedsDisplay
_setNodeScale:
_setOwner:
_setParent:
_setPausedOrPausedByInheritance:
_setPhysicsShape:
_setPointOfViewOrthographicScale:
_setPosition:
_setReflectionProbeArrayTexture:
_setRootNode:immediate:
_setScale:
_setSkeleton:
_setValue:forKeyPath:
_setWorldBufferAtVertexIndex:fragmentIndex:
_settings
_setupAuthoringEnv2:
_setupContentsFromCFXImage
_setupFrom:
_setupMaterialProperty:
_setupMeshElements
_setupMeshSources
_setupMovieToWritableFile:
_setupObjCModelFrom:
_setupOffscreenRendererWithSize:
_setupShadableHelperIfNeeded
_setupUpVector
_setupWithModel:thresholdMode:value:
_shadable
_shadableBindings
_shadableBufferBindings
_shadableSetValue:forUndefinedKey:
_shaderCompilationGroup
_shaderModifiers
_shaders
_shadingModel
_shadowBias
_shadowCascadeCount
_shadowCascadeDebugFactor
_shadowCascadeSplittingFactor
_shadowIntensity
_shadowKernelBuffer
_shadowMapSize
_shadowRadius
_shadowSampleCount
_shape
_shapeHandle:
_sharedIndexBufferOffset
_shininess
_shouldBakeDirectLighting
_shouldBakeIndirectLighting
_shouldCaptureNextFrame
_shouldDelegateARCompositing
_shouldDeleteFramebuffer
_shouldForwardWorldRendererDelegationMessagesToPrivateRendererOwner
_shouldForwardWorldRendererDelegationMessagesToSelf
_shouldHandleOtherMouseButtonDrag
_shouldIgnoreMomentumEvents
_shouldInheritContentsScale:
_shouldPostUpdate
_shouldPresentAfterMinimumDuration
_shouldPresentWithTransaction
_shouldRecycle
_shouldSnapOnGrid
_shouldSnapToAlign
_shouldStream
_shouldUpdateTarget
_shoulderAngle
_shoulderStrength
_showAuthoringEnvironment
_showsAuthoringEnvironment
_simulateCommandBufferFailure
_size
_sizeCache
_skeleton
_skinDeformer
_skinNormals
_skinTangents
_skinWillDie:
_skinner
_skinnerLoaded
_skipFramesIfNoDrawableAvailable
_slice
_sliceTextures
_sliderHandle
_smoothNormalsDeformer
_smoothNormalsPipeline
_smoothingMode
_snapLock
_snapPositionToAlign:original:unit:axisMove:rayStart:rayDir:didSnap:snapIndexes:
_snapToAlignCount
_snapXIndexes
_snapYIndexes
_snapZIndexes
_snapshotImageData
_snapshotImageDataLength
_snapshotRenderer
_softness
_sourceDocumentURL
_sourceFile
_sourceState
_sources
_specular
_specularDFGDiffuseHammonTexture
_speed
_sphereType
_spherehemispheric
_sphericalHarmonics
_splatDeformedToFinalPipeline
_splatPipeline
_splatUniforms
_spotFalloffExponent
_srcAssociatedNode:
_srcToDst
_ssao
_stack
_stageDescriptor
_stageDescriptorsLock
_stageInputOutputDescriptors
_startBrowsingIfNeeded:
_startObservingProgram
_startTime
_state
_stateController
_stateItems
_stateLock
_stateManager
_statisticsTimeStamp
_step:
_stickyAxis
_stickyDirection
_stickyMove
_stopInertia
_stopObservingProgram
_strength
_subdividedCopyWithSubdivisionLevel:
_subdivisionIsAdaptive
_subdivisionLevel
_subdivisionSettings
_subnodeFromIndexPath:
_subp
_subsurface
_subsurfaceRadius
_succeded
_superSamplingFactor
_supersampling
_supportsJitteringSyncRedraw
_surroundToSelect
_switchToFreeViewCamera
_symbolToUnbinder
_syncEntityObjCModel
_syncObjCAnimations
_syncObjCModel
_syncTimeWithCoreAnimation
_systemTime
_systemTimeAnimationStarted:
_tag
_targetDirection
_targetOffset
_targetRelativeToPointOfViewParent
_targetState
_targetedFrameInterval
_targets
_targetsProxy
_tempLoadedJoints
_temperature
_temporalAntialiasingEnabled
_tessellationControlShader
_tessellationEvaluationShader
_tessellationFactorBuffer
_tessellationFactorScale
_tessellationVertexDescriptor
_tessellationVertexDescriptorHash
_tessellator
_tessellatorValueForGeometry:
_textInfo
_texture
_textureCache
_textureComponents
_textureDescriptorFromImage:needsMipMap:textureOptions:
_textureID
_texturePixelFormat
_textureProvider
_textureTarget
_texturesUsageMask
_threshold
_thresholdSmoothness
_tilt
_time
_timeOffset
_timeStamp
_timeStep
_timedRecordingBuffer
_timedRecordingBufferEnd
_timedRecordingBufferStart
_timedRecordingExpirationTime
_toAngle
_toShift
_toZ
_toeLength
_toeStrength
_toneMapping
_topRadius
_totalDragWithInertia
_trackedResourcesToHashcode
_transform
_transformUpToDate
_transforms
_transitions
_translateHandles
_translateTo:
_translateToViewPoint:
_translationAllowed
_translationCoef
_translationOrigin
_transparencyMode
_transparent
_triggersEnabled
_truckSensitivity
_twistHandle
_type
_uniforms
_unifyNormal
_uninterleaveData:count:srcOffset:srcStride:dstStride:
_unprojectPoint:viewport:
_upDir
_upDirIsSet
_upVector
_updateActionWithEvent:
_updateAffine
_updateArcballOrientation
_updateAssociatedVFXNodeWithGeometrySetter:texturePathProvider:vertexAttributeNamed:materialPropertyNamed:
_updateBackingSize
_updateCFXImageWithContents:
_updateCloneStateWithEvent:
_updateCollisionShape
_updateContentsScaleFactor
_updateContraintAndAddToWorld:
_updateCount
_updateEngineCallbacks
_updateFieldOfView
_updateFocalLength
_updateFocusableCache
_updateInertiaAtTime:
_updateMaterialAVPlayer:
_updateMaterialAsset:
_updateMaterialCaptureDevice:
_updateMaterialCaptureDeviceOutputConsumerSource:
_updateMaterialColor:
_updateMaterialFilters
_updateMaterialImage:
_updateMaterialLayer:
_updateMaterialMTLTexture:
_updateMaterialNumber:
_updateMaterialPropertyTransform:
_updateMaterialUIComponent:
_updateOpacity
_updatePrecomputedLightingEnvironment:
_updateProbeStamp
_updateProbes:progress:
_updateProbes:progress:completionHandler:
_updateProjectionMatrixForOrthographicSkyboxRenderingIfNeeded:
_updateRuntimeItems
_updateScale
_updateSelectionWithSelectionFrame:
_updateSphereType
_updateTargetsAndInBetween:
_updateTransform
_updateUISelection:
_updateVFXCorePause
_updateVFXCoreSpeedFactor
_updateVFXCoreTime:
_updateWithAbsoluteTime:usingLoopRange:
_updateWithManifold:index:point:
_url
_useCustomContainerFrame
_useFallbackCopyKernel
_useSparseTargets
_usedCount
_usedResources
_usedVolatileMeshElements
_userAnimation
_userInfo
_userInfoLock
_usesAbsoluteTime
_usesCustomColorSpace
_usesCustomPixelFormat
_usesCustomScaleFactor
_usesIOSurface
_usesLayeredRendering
_usesMultipleViewportRendering
_usesOrthographicProjection
_usesSpecificMainPassClearColorForRenderer:clearColor:
_value
_valueForKey
_valueForKeyLock
_valueForKeyPath:world:
_valueForSimdVectorKeyPath:
_valueTransformer
_valuesForUndefinedKeys
_valuesForUndefinedKeysLock
_vectorCount
_vehicleRayCaster
_velocity
_version
_vertexBuffers
_vertexCount
_vertexCountForComputeKernel
_vertexDescriptor
_vertexDescriptorHash
_vertexFunctionName
_vertexShader
_vertexWeightIndexSize
_vertexWeightIndicesBuffer
_vfxAnimationForKey:
_vfxBindings
_vfxCoreViewConstants
_vfxCoreViewports
_vfxWorld
_videoOutput
_videoSourceFormat
_view
_viewIsOffscreen
_viewLocked
_viewMatrix
_viewMatrix0
_viewMatrix1
_viewedObjectSphere
_viewpointCoordinateSpace
_viewpoints
_viewport
_viewportDidChange
_vignetting
_visibleAndCanBecomeKeyLimitedOK:
_volatileBufferPools
_waitUntilCompleted
_wantsAdaptation
_wantsCustomMainPassProcessForRenderer:
_wantsHDR
_wantsScreenSpaceReflection
_wantsSeparateGeometryElements
_wantsWorldRendererDelegationMessages
_warnings
_wasPaused
_weightCount
_weightIndexForTargetNamed:
_weights
_white
_whiteBalanceTemperature
_whiteBalanceTint
_whitePoint
_width
_widthSegmentCount
_willBeginInteraction
_willRemoveFromPhysicsWorld:
_willRenderWorld:
_windowBackingDidChange:
_windowPreparing
_windowReady
_windowWillClose:
_wireframeProgram
_wireframeRenderer
_world
_worldBoundingSphere
_worldBuffer
_worldDidUpdate:
_worldGraph
_worldInitialMatrix
_worldMatrix
_worldReferenceCounter
_worldRenderer
_worldRendererIsVFXView
_worldUniforms
_wrapS
_wrapT
_wrapped
_writeSubdivCacheForHash:dataProvider:
_writesToDepthBuffer
_xAlignment
_xAxisToZAxisTransform
_xyPlaneToXZPlaneTransform
_xyPlaneToYZPlaneTransform
_yAlignment
_yAxisToZAxisTransform
_zAlignment
_zFar
_zFarForSkyboxRenderingProjectionMatrix:defaultZFar:
_zNear
_zoomFactor
absolutePath
absoluteString
absoluteURLForAssetPath:
accelerationConstraint
accelerationStructureCommandEncoder
accelerationStructureCommandEncoderWithDescriptor:
accelerationStructureSizesWithDescriptor:
acceptsFirstMouse:
acceptsFirstResponder
access
accommodatePresentedItemDeletionWithCompletionHandler:
accommodatePresentedItemEvictionWithCompletionHandler:
accommodatePresentedSubitemDeletionAtURL:completionHandler:
action
activateBackground:
activateFreeCamera
activatePhysicsJoint:
active
activeState
adaptationBrighteningSpeedFactor
adaptationDarkeningSpeedFactor
adaptationMaximum
adaptationMinimum
adaptativeFrameRate
adaptive
add:
add::
addAnimation:
addAnimation:forKey:
addAnimation:to:keyPath:
addAnimationPlayer:forKey:
addBehavior:
addCameraNode:
addChild:
addChildNode:
addClient:
addClonesToWorld
addCollisionPlaneWithCenter:extents:transform:
addCollisionPlaneWithExtents:transform:
addCommandBufferCompletedHandler:
addCommandBufferScheduledHandler:
addCompletedHandler:
addComputePipelineFunctionsWithDescriptor:error:
addDebugMarker:range:
addDrawablePresentedHandler:
addEffectFrom:error:
addEffectFromTemplate:
addEffectNode:
addEffectWithEffectID:
addEntityObject:
addEntriesFromDictionary:
addFilePresenter:
addForceFieldNode:
addFunctionWithDescriptor:library:error:
addGenericRenderGraphErrorWithMessage:
addIndex:
addInput:
addItemWithTitle:
addItemWithTitle:action:keyEquivalent:
addItems:toWorld:
addLightNode:
addLightWithType:
addLocalMonitorForEventsMatchingMask:handler:
addMeshRenderPipelineFunctionsWithDescriptor:error:
addNormalsWithAttributeNamed:creaseThreshold:
addObject:
addObjectsFromArray:
addObserver:forKeyPath:options:context:
addObserver:selector:name:object:
addOperation:src:dst:
addOperationWithBlock:
addOrthTanBasisForTextureCoordinateAttributeNamed:normalAttributeNamed:tangentAttributeNamed:
addOutput:
addOverride:forKeyPath:
addPassResourceBindingsForArgument:
addPhysicsBody:nodeRef:colGroup:colMask:colTest:
addPhysicsJoint:
addPresentedHandler:
addRenderPipelineFunctionsWithDescriptor:error:
addResidencySet:
addResidencySets:count:
addResourceBindingsForArgument:frequency:needsRenderResource:block:
addScheduledHandler:
addSplitHandler:
addState:
addStateItem:
addSubview:
addTileRenderPipelineFunctionsWithDescriptor:error:
addTo:
addTrackingArea:
addTransition:
addUIForArrayProperty:ofClass:
addUIForBoolProperty:
addUIForColorProperty:
addUIForContentsProperty:
addUIForFloatProperty:ofClass:
addUIForImageProperty:
addUIForIntProperty:ofClass:
addUIForMat4Property:
addUIForObjectProperty:
addUIForProperty:ofClass:instance:
addUIForVec2Property:
addUIForVec3Property:
addUIForVec4Property:
addUpdateRect:
addWorldReference:
addedNode:
additive
additiveWritesToAlpha
affectedByGravity
alignment
alignmentMode
allBehaviors
allObjects
allTargetsFromAnimCodec
allValues
allocWithZone:
allocateRegistry
allocatedSize
allocationMenuForClass:propertyName:
allocator
allowGPUOptimizedContents
allowLoadingFromFuture
allowRemoteEdition
allowedClasses
allowsCameraControl
allowsCreation
allowsResting
allowsReverseTransformation
allowsTranslation
alphaComponent
alphaCutoff
alternateTitle
ambientOcclusion
anamorphic
anchorAValue
anchorBValue
anchorPoint
angularDamping
angularRestingThreshold
angularSleepingThreshold
angularVelocityFactor
angularVelocityFactorValue
angularVelocityValue
animation
animationDidStart
animationDidStart:
animationDidStop
animationDidStop:finished:
animationDuration
animationEventWithKeyTime:block:
animationForKey:
animationFromWorld:
animationKeys
animationManager
animationPlayerForKey:
animationPlayerRef
animationPlayerWithAnimation:
animationPlayerWithAnimationPlayerRef:
animationPlayerWithVFXAnimation:
animationRef
animationTimingFunction
animationWithCAAnimation:
animationWithCFXAnimation:
animationWithContentsOfURL:
animationWithKeyPath:
animationWithMDLTransform:
animationWithVFXAnimation:
animations
antialiasingLevels
antialiasingMode
anyObject
aperture
apertureBladeCount
appendBytes:length:
appendData:
appendFormat:
appendImage:withPresentationTime:usingAdaptor:
appendPixelBuffer:withPresentationTime:
appendString:
appendWithTrigger:event:view:inWorld:
applicationDidEnterBackground
applicationWillEnterForeground
appliedOnCompletion
apply
applyBlock:
applyChangedStates
applyDiff:
applyForce:atPosition:impulse:
applyForce:impulse:
applyForceValue:atPosition:impulse:
applyForceValue:impulse:
applyFunction:withContext:
applyTorque:impulse:
applyTorqueValue:impulse:
applyType:
architecture
archive:contentsForEntryName:
archive:streamForEntryName:
archiveData
archiveStream
archiveToDesktop:
archivedDataWithRootObject:options:
archivedDataWithRootObject:requiringSecureCoding:error:
areBarycentricCoordsSupported
areProgrammableSamplePositionsSupported
areRasterOrderGroupsSupported
areaExtents
areaPolygonVertices
areaType
argumentBuffersSupport
argumentIndex
array
array:didSelect:atIndex:
arrayByAddingObjectsFromArray:
arrayEditor
arrayLength
arrayOwnerPath
arrayType
arrayWithCapacity:
arrayWithObject:
arrayWithObjects:
arrayWithObjects:count:
asset
assetManager
assetNodeWithAsset:
assetPathResolver
assetRegistry
assetValue
assetWithEntityObject:
assetWithURL:
assetWithVFXNode:
assetWithVFXNode:bufferAllocator:
assetWithVFXWorld:
assetWithVFXWorld:bufferAllocator:
associateNodeTree:withNodeTree:root:
asyncRuntimeLock
attachNode:
attachmentProvider
attachments
attenuationDistance
attenuationEndDistance
attribute:atIndex:effectiveRange:
attributeIndex
attributes
attributesOfItemAtPath:error:
audioBuffer
audioBufferFormat
audioEngine
audioEnvironmentNode
audioFile
audioListener
audioNode
audioPlayer
audioPlayerWithAVAudioNode:
audioPlayerWithSource:
audioPlayers
audioSource
audioSourceNamed:
audioSourceWithAVAudioPCMBuffer:
authoringCamera:
authoringCameraNodes
authoringCameraType
authoringEnvironment
authoringEnvironment2
authoringEnvironment:didCloneSelection:
authoringEnvironment:didMoveItems:fromTransform:
authoringEnvironment:selectionDidUpdateWithProposedSelection:
authoringEnvironmentForWorld:
authoringEnvironmentForWorld:createIfNeeded:
authoringEnvironmentForWorldRenderer:
authoringEnvironmentForWorldRenderer:createIfNeeded:
authoringGraph
authoringLayer
authoringOverlayLayer
authoringTargetNode
autoAdjustCamera
autoSwitchToFreeCamera
autoenablesDefaultLighting
automaticCameraTarget
automaticallyAdjustsShadowProjection
automaticallyAdjustsVideoMirroring
automaticallyAdjustsZRange
automaticallyNotifiesObserversForKey:
automaticallyPrepareScene
autoplacementForNewObject
autorelease
autoreverses
avPlayer
availableData
averageGray
avoidOccluderConstraint
avoidOccluderConstraint:didAvoidOccluder:forNode:
avoidOccluderConstraint:shouldAvoidOccluder:forNode:
avoidOccluderConstraintWithTarget:
avoidsOverLighting
axisA
axisAValue
axisB
axisBValue
backFaceTest
backReferenceValue
background
backingScaleFactor
backingSizeForBoundSize:
ballSocketWithBody:anchor:
ballSocketWithBodyA:anchorA:bodyB:anchorB:
baseColor
baseGeometry
baseGeometryBindTransform
baseMesh
baseMeshBindTransform
baseState
baseState:on:
becomeCurrentWithPendingUnitCount:
becomeFirstResponder
begin
beginConfiguration
beginEditingNodes:
beginFrame:
beginFrameAtTime:timeStamp:
beginImgUIFrameWithViewportSize:backingScaleFactor:
beginInteraction:withViewport:
beginOrbiting
beginRenderPass:renderEncoder:
beginRenderPass:renderEncoder:parameters:
beginTime
beginTransaction:
behaviorGraph
behaviorGraphWithEntityObject:
benchResult
bezierPath
bezierPathWithOvalInRect:
bias
biasValues
billboardConstraint
bind:toObject:withKeyPath:options:
bindAnimatablePath:toObject:withKeyPath:options:
bindBlock
bindTo:withKeyPath:valueTransformerName:
bindingMode
bindingName
bindingOf:named:
bindingValueForKey:
bindingWith:named:
bindings
blackColor
blendFactor
blendMode
blendOutDuration
blitCommandEncoder
blitCommandEncoderWithDescriptor:
block
bloom
bloomColorFilter
bloomContrast
bloomIntensity
bloomIterationCount
bloomIterationSpread
bloomThreshold
bloomThresholdSmoothness
bloomUseHighQuality
blueComponent
bodyA
bodyB
bodyWithType:shape:
boneIndices
boneInverseBindTransforms
boneNode
boneWeights
bones
boolForKey:
boolValue
boundingBox
boundingBoxMax
boundingBoxMin
bounds
bridgedComponentNames
brightness
buffer
buffer::::
bufferAtIndices:
bufferBytesPerRow
bufferDataSize
bufferDataType
bufferIndex
bufferOffset
bufferPointerType
bufferSize
bufferStructType
buildAccelerationStructure:descriptor:scratchBuffer:scratchBufferOffset:
buildAccelerationStructureDescriptorsWithEntity:
buildIdentifierRemapTable
buildTessellationVertexDescriptorIfNeeded
builtinEffectIdentifiers
builtinProperties
bundleIdentifier
bundlePath
bundleURL
bundleWithIdentifier:
buttonNumber
bytes
bytesPerComponent
bytesPerIndex
cStringUsingEncoding:
caAnimation
cachedTextureWithURL:token:
cachedTextureWithURL:token:didFallbackToDefaultTexture:
callStackSymbols
camera
cameraAutomaticTargetPoint
cameraControlConfiguration
cameraController
cameraFocusPlaneGeometry
cameraFrustumGeometry
cameraGeometry
cameraInertiaDidEndForController:
cameraInertiaWillStartForController:
cameraNearPlaneGeometry
cameraOrthographicFrustumGeometry
cameraRef
cameraRotationDidEndForController:
cameraRotationWillStartForController:
cameraTarget
cameraWillChange
cameraWithCameraRef:
cameraWithMDLCamera:
cameraWithVFXCamera:
canAddChildNode:
canAddOutput:
canBecomeFocused
canBecomeKeyWindow
canBecomeMainWindow
canDrawConcurrently
canImportFileExtension:
canImportFileUTI:
canRecycleParticleBuffers
canRepresentDisplayGamut:
cancel
cancelEdition
cancelPreviousPerformRequestsWithTarget:
canceled
capsuleWithCapRadius:height:
capsuleWithRadius:height:options:
capture:
captureDevice
captureDeviceOutputConsumer
captureDeviceOutputConsumerSource
captureDeviceOutputConsumerWithOptions:
captureNextFrame
captureOutput:didDropSampleBuffer:fromConnection:
captureOutput:didOutputSampleBuffer:fromConnection:
castsShadow
catchException:error:
cell
center
centerOfMassOffset
centerValue
cfxAnimation
cfxObject
cfxTimingFunction
chainRootNode
chamferMode
chamferProfile
chamferRadius
chamferSegmentCount
changeColor:
channelTargetCounts
channelTargetWeights
charValue
characterAtIndex:
characterIsMember:
characters
charactersIgnoringModifiers
charge
checkBounds:
checkResourceIsReachableAndReturnError:
checkUncommittedTransactions
childNodeWithAssetName:
childNodeWithName:
childNodeWithName:recursively:
childNodes
childNodesPassingTest:
childNodesPassingTest:recursively:
childNodesWithAttribute:recursively:
children
chromaticTransform
class
className
classNamed:
cleanCollisionCache
clear
clearAllForces
clearCaches
clearCoat
clearCoatRoughness
clearColor
clearCompiledLibraries
clearCorrectives
clearDepth
clearRoll
clearRuntimeItems
clearSnapIndexes
clearValue
clickCount
clientCGImage
clientCommandBuffer
clientCommandQueue
clientID
clientRenderCommandEncoder
clientRenderPassDescriptor
clientTexture
clientWillDie:
clipWithAnimation:name:
clock
clone
cloneAndSetupReplicationWithModelWorld:
cloneForManipulators
cloneModelToPresentationAndStartReplicationStream
cloneWithOption:
close
close:
closePath
collectOrphanNodes:dst:
collectOverrides
collectShaderForProgram:hashCode:newVertexFunctionName:newFragmentFunctionName:sourceCodeBlock:additionalFileBlock:
collectedShadersForPid:
collectsCompilationErrors
collideOutsidePlaneWithId:
collisionBitMask
collisionCategoryBitMask
collisionImpulse
color
color1
color2
color3
color4
color::::
colorAttachments
colorBufferWriteMask
colorChanged:
colorFilter
colorFringe
colorFringeIntensity
colorFringeStrength
colorGrading
colorMatchBiPlanarPixelBufferWithFormatType:pixelBufferYCbCrMatrix:pixelBufferColorPrimaries:pixelBufferTransferFunction:sourceTextureY:sourceTextureCbCr:sourceColorSpace:destinationColorSpace:destinationTexture:renderContext:
colorMatchSourceTexture:sourceColorSpace:destinationColorSpace:destinationTexture:renderContext:
colorMatchingComputePipelineStateForBiPlanarPixelBufferWithFormatType:pixelBufferYCbCrMatrix:pixelBufferColorPrimaries:pixelBufferTransferFunction:sourceColorSpace:destinationColorSpace:renderContext:
colorMatchingComputePipelineStateForSourceColorSpace:destinationColorSpace:renderContext:
colorPixelFormat
colorPixelFormatAtIndex:
colorSpace
colorUsingColorSpace:
colorWithAlphaComponent:
colorWithCGColor:
colorWithRed:green:blue:alpha:
colorspace
comboBox:objectValueForItemAtIndex:
commandBuffer
commandBufferDidCompleteWithError:
commandBufferStatusMonitor
commandBufferWithDescriptor:
commandBufferWithUnretainedReferences
commandQueue
commit
commitConfiguration
commitsOnCompletion
commonInit
commonProfile
commonProfileCacheLibrary
compare:
compilationErrors
completed
completedUnitCount
component
componentConformingToProtocol:
components
components:fromDate:
componentsJoinedByString:
componentsPerVector
componentsSeparatedByString:
componentsWithURL:resolvingAgainstBaseURL:
computeAutomaticTargetPoint
computeBoundingSphereOmittingFloorsForNode:sphere:
computeCommandEncoder
computeCommandEncoderWithDescriptor:
computeCommandEncoderWithDispatchType:
computeEvaluatorWithContext:srcDesc:dstDesc:duDesc:dvDesc:
computePipelineStateForKernel:
computePipelineStateForKernel:constants:constantsHash:
computePipelineStateForKernel:threadGroupSizeIsMultipleOfThreadExecutionWidth:
computePipelineStateForKernel:withStageDescriptor:stageDescriptorUpdateBlock:constants:constantsHash:
coneWithHeight:topRadius:bottomRadius:options:
coneWithTopRadius:bottomRadius:height:
configureStageInputOutputDescriptor:withDeformerFunction:
conformsToProtocol:
connect:to:format:
connectionWithMediaType:
constantData:
constantDataAtIndex:
constantOffsetAndSize::::
constantPopupChanged:
constantScaleConstraint
constantToString
constrainedEdgeLengthTessellationDrawMeshElement:forMesh:instanceCount:renderContext:
constraintRef
constraints
contactNormal
contactNormalValue
contactPoint
contactPointValue
contactTestBetweenBody:andBody:options:
contactTestBitMask
contactTestWithBody:options:
containerFrame
containsAlpha
containsValueForKey:
contentLayer
contentScaleFactor
contentView
contents
contentsAbsoluteURL
contentsAsCGImage
contentsChanged:
contentsForEntryName:
contentsOfDirectoryAtPath:error:
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
contentsScale
contentsTransform
continueInteraction:withViewport:sensitivity:
continuityValues
continuousCollisionDetection
continuousCollisionDetectionThreshold
contrast
controller
convertPoint:fromView:
convertPointToBacking:
convertPosition:fromNode:
convertPosition:toNode:
convertPositionValue:fromNode:
convertPositionValue:toNode:
convertSparsePixelRegions:toTileRegions:withTileSize:alignmentMode:numRegions:
convertSparseTileRegions:toPixelRegions:withTileSize:numRegions:
convertTime:fromLayer:
convertToAdditiveWithBaseMesh:
convertToSparseWithBaseMesh:
convertTransform:fromNode:
convertTransform:toNode:
convertTransformValue:toNode:
convertVector:fromNode:
convertVector:toNode:
convertVectorValue:fromNode:
convertVectorValue:toNode:
convexSweepTestWithShape:fromTransform:toTransform:options:
copy
copyAnimationChannelForKeyPath:animation:
copyAnimationChannelForKeyPath:property:
copyAnimationPathForKeyPath:animation:
copyBindingValueWithObjectName:bindingName:action:storageGetterBlock:
copyBitmap
copyCFXImageFromImage:
copyCFXImageFromImage:textureOptions:
copyCFXImageFromImage:textureOptions:wasCached:
copyFrom:
copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:
copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:
copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:
copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:
copyFromTexture:toTexture:
copyImageFromCFXImage:
copyIndirectCommandBuffer:sourceRange:destination:destinationIndex:
copyItemAtPath:toPath:error:
copyJointBindTransformsInto:maxCount:
copyModifiersFrom:
copyParameterDataToBuffer:offset:
copyPixelBufferForItemTime:itemTimeForDisplay:
copyPropertiesFrom:
copyShaderModifiersAndLanguageVersionFrom:
copyTextureByConvertingToCubeMapIfApplicable:engineContext:needsMipmap:
copyWeakRef
copyWithFilename:
copyWithOptions:
copyWithOptions:to:
copyWithZone:
coreEntityHandle
coreEntityHandleRef
cornerRadius
cornerSegmentCount
correctiveDriverCountForCorrectiveAtIndex:
correctiveDriverCounts
correctiveDriverIndices
correctiveDriverIndicesForCorrectiveAtIndex:
correctiveInBetweenCounts
correctiveInBetweenWeights
correctives
correctivesAndInBetween
count
countByEnumeratingWithState:objects:count:
countOfAudioPlayers
countOfChildNodes
countOfMaterials
counterSets
counterStorage
cpuCacheMode
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
createREMeshDataBinding
createSkinnerWithBaseMesh:bones:boneWeights:boneIndices:
createSkyboxWithParameters:
createSparseIndicesBufferForMorphTarget:withSetupTarget:indicesBuffer:indicesBufferOffset:indexSize:originalToFirstDeindexedTable:computeContext:
createVertexBufferForMorphTarget:withSetupTarget:vertexBuffer:vertexBufferOffset:indicesBuffer:indicesBufferOffset:indexSize:originalToFirstDeindexedTable:computeContext:
createVolatileMeshElementOfType:primitiveCount:bytesPerIndex:
cubeArrayTypeIfSupported
cubeWithWidth:height:length:chamferRadius:
cubeWithWidth:height:length:cornerRadius:options:
cullMode
cumulative
currentAllocatedSize
currentBlitEncoder
currentCommandBuffer
currentComputeEncoder
currentContext
currentEvent
currentFrameHash
currentFrameIndex
currentHandler
currentItem
currentPoint
currentRenderCommandEncoder
currentRenderPassDescriptor
currentState
currentThread
currentTime
currentTransforms
curveToPoint:controlPoint1:controlPoint2:
customHandler
customMaterialAttributeNames
customMaterialAttributes
customMaterialProperties
customMaterialPropertyNames
cylinderWithRadius:height:
cylinderWithRadius:height:options:
data
dataByConvertingColorData:colorSpace:newColorSpace:vectorCount:componentsPerVector:bytesPerComponent:dataOffset:dataStride:newDataOffset:newDataStride:
dataByConvertingDoublesToFloats:count:
dataForType:
dataNoCopy
dataOffset
dataRepresentationWithOptions:
dataSize
dataSource
dataStart
dataStride
dataType
dataUsingEncoding:
dataWithBytes:length:
dataWithBytesNoCopy:length:
dataWithBytesNoCopy:length:freeWhenDone:
dataWithCapacity:
dataWithContentsOfFile:options:error:
dataWithContentsOfURL:
dataWithContentsOfURL:options:error:
dataWithInt:
dataWithJSONObject:options:error:
dataWithPointArray:count:bytesPerComponent:
dataWithToken:
dataWithVector3Array:count:bytesPerComponent:
date
deactivatePhysicsJoint:
deallocateElementAtOffset:
deallocateRegistry
debugDescription
debugKeyDown:
debugOptions
debugOptionsDidChange:
debugQuickLookData
debugQuickLookObject
debugQuickLookObjectWithAssetPathResolver:
debugQuickLookObjectWithPointOfView:
debugUIOptions
decelerationDistance
decimalDigitCharacterSet
decodeAnimation:
decodeArrayOfObjectsOfClass:forKey:
decodeArrayOfObjectsOfClasses:forKey:
decodeBoolForKey:
decodeBytesForKey:returnedLength:
decodeBytesWithReturnedLength:
decodeDictionaryWithKeysOfClass:objectsOfClass:forKey:
decodeDictionaryWithKeysOfClasses:objectsOfClasses:forKey:
decodeDoubleForKey:
decodeFloatForKey:
decodeInt32ForKey:
decodeIntForKey:
decodeIntegerForKey:
decodeMeshWithCoder:
decodeObjectOfClass:forKey:
decodeObjectOfClasses:forKey:
decodePropertyListForKey:
decodeValueOfObjCType:at:
decrementUsedCount
deepClone
deepCopy
defaultCStringEncoding
defaultCameraController
defaultCenter
defaultCubeTexture
defaultDeviceWithMediaType:
defaultLibrary
defaultLightingEnvironmentIrradianceTexture
defaultLightingEnvironmentRadianceTexture
defaultManager
defaultProgramUsingTessellation:
defaultRenderGraph
defaultShapeForGeometry:
defaultTexture
defaultTexture1D
defaultTexture3D
defaultTextureForTextureType:
defaultUICatalogForBundle:
deferredBindingEnabled
deformedMeshReliesOnFrustum
deformedMeshReliesOnTransforms
deformer
deformers
deindexedToFirstDeindexedTableBufferWithBlitEncoder:indexSizeOut:
deindexedToOriginalTableBufferWithBlitEncoder:indexSizeOut:
delegate
deltaTime
deltaX
deltaY
dependency0NormalBuffer
dependency0PositionBuffer
dependency0TangentBuffer
dependency1NormalBuffer
dependency1PositionBuffer
dependency1TangentBuffer
dependencyBufferForInput:dependencyMesh:
dependencyBufferForInput:dependencyStack:
dependencyNodeAtIndex:
depth
depthCompareFunction
depthFailureOperation
depthOfField
depthOnly
depthPixelFormat
depthPlane
depthStencilPassOperation
depthStencilPixelFormat
depthTexture
description
descriptor
destination
destinationReplicationDelegate
destroyObject:
detachNode:
device
deviceDescription
deviceForOptions:
deviceQueue
deviceRef
diagnostics
dictionary
dictionaryWithCapacity:
dictionaryWithContentsOfURL:
dictionaryWithDictionary:
dictionaryWithObjects:forKeys:count:
dictionaryWithObjectsAndKeys:
didAddToPhysicsBody:
didAttachToWorld:
didChange
didChangePointOfView
didChangeValueForKey:
didDetachFromWorld:
didEndSelector
didFinishPlayback
didInstanciateNewElementInArray:
didRemoveFromPhysicsBody:
didSetEntityObject
diffOld:withNew:options:
dimensions
dipatchEventToImGui:view:
disableActions
discardVideoData
disconnectNodeInput:
disconnectNodeOutput:
discretizedStraightLineMaxLength
dispatch:onTexture2D:
dispatch:threadgroups:threadsPerThreadgroup:
dispatch:threadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:
dispatchEventToVFXCore:
dispatchOnTexture2D:
dispatchOnTexture2DWithoutOptimizedThreadGroupPerGrid:
dispatchOnTexture3D:
dispatchOnTextureCube:
dispatchOne:
dispatchThreadgroups:threadsPerThreadgroup:
dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:
dispatchThreads:threadsPerThreadgroup:
dispatchThreadsPerTile:
dispatchThreadsPerTile:inRegion:
dispatchThreadsPerTile:inRegion:withRenderTargetArrayIndex:
dispatchThreadsPerTile:withCondition:
dispatchType
displacement
displayAspect
displayIDDidChange:
displayLink
displayLinkCallbackShouldReturnImmediately
displayLinkPolicy
displayOptions
distanceConstraint
distanceConstraintWithTarget:
distantFuture
doNotClearRenderOutput
documentEnclosingURL
documentURL
documentUUID
doesNotRecognizeSelector:
dollyToTarget:
doubleClick:
doubleSided
doubleValue
doughnutBokeh
drag
dragField
draggedTransform
draggingEntered:
draggingLocation
draggingPasteboard
draggingUpdated:
drain
draw:
drawAtPoint:
drawCallCount
drawFullScreenQuadForPass:
drawInMTKView:
drawInRect:
drawIndexedPatches:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:indirectBuffer:indirectBufferOffset:
drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:
drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:
drawLineFromPoint:toPoint:color:
drawMeshThreadgroups:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:
drawMeshThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:
drawMeshThreads:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:
drawPatches:patchIndexBuffer:patchIndexBufferOffset:indirectBuffer:indirectBufferOffset:
drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:
drawPrimitives:indirectBuffer:indirectBufferOffset:
drawPrimitives:vertexStart:vertexCount:
drawPrimitives:vertexStart:vertexCount:instanceCount:
drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:
drawRect:
drawRenderElement:withPass:
drawStatisticsIfNeeded
drawString:atPoint:color:
drawWireframeOverlayForElements:range:store:passInstance:
drawWithFrame:inView:
drawableAttachment
drawableDescriptor
drawableResizesAsynchronously
drawableSize
drawsArea
drawsForBlur
drivenByDefaultNavigationCameraController
drivingNode
dstPositionBuffer
dstTangentBuffer
dump
duration
dvt_supportedTypesForPropertyContents
dynamicBody
edgeCreaseIndices
edgeCreases
edgeCreasesElement
edgeCreasesSource
edgeTessellationFactor
editingSpace
editingSpaceChanged
editorLocked
editorView:didChangeFocalFrom:to:
editorView:didDrop:onNode:modelElementIndex:
editorView:didMovePointOfViewFrom:to:
editorView:didSelectNode:modelElementIndex:event:
editorView:shouldAcceptDrop:
editorViewDidRequestFocusOnSelectedNodes:
editorViewDidStopInteraction:
editorViewWillStartInteraction:atPoint:
effect
effectDidRestart:
effectGeometry
effectiveEditingSpace
effectiveModifier
electricField
elementArrayType
elementAtIndex:associatedPoints:
elementCount
elementIndex
elementIsArgumentBuffer
elementSize
elementStructType
elementType
emission
emitterIdentifier
emptyShaderCache
enableARMode
enableBreakthrough
enableClipping
enableDeferredRendering
enableFreeCamera
enableInertia
enableNearFieldVignetting
enableNullBufferBinds:
enableParallelDecoding
enableRuntimeScriptCompilation
enableTriggerTypes:
enableVBL:
enclosingScrollView
encodeAnimation:
encodeAuthoringWithEncoder:colorFormat:depthStencilFormat:sampleCount:
encodeBool:forKey:
encodeBytes:length:
encodeBytes:length:forKey:
encodeDouble:forKey:
encodeFloat:forKey:
encodeInt32:forKey:
encodeInt:forKey:
encodeInteger:forKey:
encodeObject:forKey:
encodeSignalEvent:value:
encodeToCommandBuffer:
encodeToCommandBuffer:sourceTexture:destinationTexture:
encodeValueOfObjCType:at:
encodeWaitForEvent:value:
encodeWithCoder:
encodeWithCommandBuffer:
encodedData
encodedLength
endDragging
endDraggingWithVelocity:
endEncoding
endEncodingAndRetrieveProgramAddressTable
endFrame
endFrameWaitingUntilCompleted:status:error:
endFrameWorldSpecifics
endImgUIFrame
endImgUIFrameWithCommandBuffer:encoder:renderPassDescriptor:
endInteraction:withViewport:velocity:
endOrbiting
endRenderPass
endTransaction
engine
engineContext
engineNotificationQueue
enqueueCommandForObject:immediateTransactionBlock:
entityObject
entityTag
entityWithTag:
entryNames
entryPoint
enumCases
enumName
enumerateBodiesUsingBlock:
enumerateBuffers:
enumerateChildNodesUsingBlock:
enumerateDependencies:
enumerateDrawCall:
enumerateHierarchyUsingBlock:
enumerateIndexes:
enumerateKeysAndObjectsUsingBlock:
enumerateLinesUsingBlock:
enumerateObjectsUsingBlock:
enumerateTextures:
enumeratorAtPath:
environment
error
errorOptions
errorWithDomain:code:userInfo:
eulerAngles
eulerAnglesValue
eval:
evaluateForceFieldsAtPosition:velocity:mass:charge:time:dt:categoryMask:
eventBlock
eventHandler
eventHandlerWantsRedraw
eventNumber
executablePath
executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:
executeCommandsInBuffer:withRange:
expandItem:
exportAs:
exportAsMovieOperationWithDestinationURL:size:attributes:delegate:didEndSelector:userInfo:
exportAssetToURL:error:
exposure
exposureAdaptationBrighteningSpeedFactor
exposureAdaptationDarkeningSpeedFactor
exposureOffset
extendedLinearSRGBColor
extendedSRGBColorSpace
extraLayerMeshesWithDrivingMesh0:drivingMesh1:
extrusionDepth
fStop
fStopAnimation
faceCount
faceIndex
faceIndexing
faceTopology
fadeInDuration
fadeOpacity
farVisibilityDistance
features
fetchClientTextureIDWithNamed:
fetchEntityObjectWithTag:
field
fieldGeometry
fieldOfView
fieldType
fileExistsAtPath:
fileFormat
fileHandleForReading
fileName
fileSystemRepresentation
fileURLWithPath:
fileURLWithPath:isDirectory:
fileWrappers
filename
fill
fillBuffer:range:value:
fillData:offset:
fillMode
fillsBackward
fillsForward
filmOffset
filterPropertyName:ofClass:
filterQuality
finalizeDecodeConstraint:
finalizeEncoding
finishDecoding
finishEncoding
finishWritingWithCompletionHandler:
firstBindingWithName:
firstIndex
firstMatchInString:options:range:
firstMaterial
firstMipmapInTail
firstObject
firstResponder
flagAsActive:
flagsChanged:
flatness
flattened
flattenedClone
flattenedCopy
flipTextureCoordinatesInAttributeNamed:
float3Value
float4Value
floatChannelData
floatForKey:
floatValue
floor
floorRef
floorWithOptions:
flush
focalBlurSampleCount
focalDistanceAnimation
focalLength
focalLengthAnimation
focusBehavior
focusDistance
focusNode:
focusNodes:
fogColor
fogColor_linearExtendedSRGB
fogDensityExponent
fogEndDistance
fogStartDistance
font
fontDescriptorWithName:size:
fontName
fontWithDescriptor:size:
fontWithName:size:
forceAsyncShaderCompilation
forceField
forceFieldWithForceFieldRef:
forcesBackFaceCasters
format
fractionCompleted
fragmentBindings
fragmentBufferBoundAt:
fragmentFunction
fragmentFunctionName
fragmentLinkedFunctions
fragmentShader
frame
frameA
frameB
frameBufferBindings
frameBufferFeatures
frameConstantBufferPool
frameLength
frameNodes:
frameRate
frameTexturePool
frameworkLibrary
freeAxes
freeCamera
freezeButton
frequency
friction
fromAngle
fromShift
fromValue
fromZ
frontFaceStencil
frontFaceTest
frontFacingWinding
frontReferenceValue
frontVector
frontVectorWithPointOfView:
frozen
functionConstantsDictionary
functionDescriptor
functionHandleWithFunction:
functionHandleWithFunction:stage:
functionNames
functionType
functionWithCAMediaTimingFunction:
functionWithControlPoints::::
functionWithName:
gainColor
gainOffset
gamma
gammaColor
gammaOffset
generateAmbientOcclusionTextureWithQuality:attenuationFactor:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:
generateAmbientOcclusionVertexColorsWithQuality:attenuationFactor:objectsToConsider:vertexAttributeNamed:
generateBindingsForPipeline:withReflection:program:material:geometry:pass:
generateLightMapTextureWithQuality:lightsToConsider:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:
generateLightMapVertexColorsWithLightsToConsider:objectsToConsider:vertexAttributeNamed:
generateMaterialsAndReturnError:
generateMipmapsForTexture:
generatedTexturePath
generatorWithProfile:allowingHotReload:
geodesic
geometry
geometryBindTransform
geometryElementWithMeshElementRef:
geometryElements
geometryForLightType:
geometryIndex
geometryModificationCount
geometryRef
geometryShader
geometrySourceChannels
geometrySourceWithColorComponents:count:hasAlpha:colorSpace:
geometrySourceWithMDLVertexAttribute:mesh:
geometrySourceWithMeshSourceRef:
geometryType
getBackgroundGPUPriority
getBoundingBox
getBoundingBoxMin:max:
getBoundingSphere
getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:
getBytes:bytesPerRow:fromRegion:mipmapLevel:
getCFXImageRef
getControlPointAtIndex:values:
getCurrentPassHash
getCurrentPassMaterial
getDefaultSamplePositions:count:
getDouble4x4Array:maxCount:
getEncoderAndResetCache
getFloat3Array:maxCount:
getFloat4x4Array:maxCount:
getFloatArray:maxCount:
getFloatArray:maxCount:atTime:
getFloatQuaternionArray:maxCount:
getFrustum:withViewport:
getObjects:range:
getREMeshAssetPath:
getRed:green:blue:alpha:
getTextureAccessCounters:region:mipLevel:slice:resetCounters:countersBuffer:countersBufferOffset:
getTimes:maxCount:
getUniqueStageDescriptor:
getValue:size:
gimbalLockEnabled
gimbalLockMode
globalObject
gobo
gpuAddress
gpuResourceID
grain
grainIntensity
grainIsColored
grainScale
graph
graphController:
graphicalSelectionEnabled
graphicsContextWithCGContext:flipped:
gravityValue
greenComponent
gridUnit
groundAlbedo
groundColor
group
halfExtent
handle
handleBindingOfBufferNamed:frequency:usingBlock:
handleFailureInMethod:object:file:lineNumber:description:
handleKeyDown:
handleReport:data:
handleWithEntityObject:
hardwareFilter
harmonicField
hasAncestor:
hasCommonProfilePrecompiledFunctions
hasCustomHandler
hasCustomProjectionTransform
hasFreeElementsLeft
hasImGuiFrameStarted
hasInterleavedIndicesChannels
hasLightingEnabled
hasNewPixelBufferForItemTime:
hasPhysicBody
hasPreciseScrollingDeltas
hasPrefix:
hasRenderableObjects
hasSuffix:
hasUnifiedMemory
hash
hashCodeForSource:macros:
hazardTrackingMode
heap
heapAccelerationStructureSizeAndAlignWithDescriptor:
heapAccelerationStructureSizeAndAlignWithSize:
heapBufferSizeAndAlignWithLength:options:
heapOffset
heapTextureSizeAndAlignWithDescriptor:
height
heightSegmentCount
hemispheric
hidden
highDynamicRangeCompression
hingeWithBody:axis:anchor:
hingeWithBodyA:axisA:anchorA:bodyB:axisB:anchorB:
hitTest:
hitTest:options:
hitTestResultsFromHitTestResultRef:
hitTestWithSegmentFrom:toPoint:options:
hitTestWithSegmentFromPoint:toPoint:options:
horizonElevation
horizontalMaximumAngle
horizontalSampleStorage
hotReloadableLibrary
hour
identifier
iesTextureForProfile:renderContext:
imGUIEnabled
image
imageContentsWithPasteboard:
imageFromTexture
imageNamed:
imageToEncodeForProposedImage:userInfo:
imageWithPath:
imageWithURL:
imageblockMemoryLengthForDimensions:
imageblockSampleLength
immediateMode
immediateModeRestrictedContext
inBetweenTargetsForCorrectiveAtIndex:
inBetweenTargetsForTargetAtIndex:
inBetweenWeights
inBetweenWeightsForCorrectiveAtIndex:
inBetweenWeightsForTargetAtIndex:
incrementUsedCount
incremental
index
indexAtPosition:
indexBuffer
indexBufferIndex
indexBufferOffset
indexCount
indexGreaterThanIndex:
indexOfChildNode:
indexOfObject:
indexOfObjectPassingTest:
indexOfRefraction
indexOfSelectedItem
indexSet
indexSetWithIndex:
indexType
indexesOfObjectsPassingTest:
indicesChannelCount
inertiaEnabled
inertiaRunning
infoDictionary
infoWithSemantic:options:
init
init:privateEntityManager:
init:sharedEntityManager:
initAllowingHotReload:
initByReferencingFile:
initByReferencingURL:
initDirectoryWithFileWrappers:
initForEngineNamed:
initForJavascript:
initForReading:error:
initForReadingFromData:error:
initForReadingWithData:secure:
initForWritingWithMutableData:
initOrientationInWorldSpace:withBlock:
initParametersIfNeededForDeformedNode:
initParametersIfNeededWithDrivingNodeRef:deformedNodeRef:
initParametersIfNeededWithInnerLayerNodeRef:outerLayerNodeRef:deformedNodeRef:
initPositionInWorld:withBlock:
initPresentationBehaviorGraphWithCoreEntityHandle:
initPresentationCameraEffectWithCameraEffectRef:
initPresentationCameraWithCameraRef:
initPresentationForceFieldWithForceFieldRef:
initPresentationLightWithLightRef:
initPresentationMaterialPropertyWithModelProperty:
initPresentationMaterialWithMaterialRef:
initPresentationModelWithGeometryRef:
initPresentationMorpherWithMorphRef:
initPresentationNodeWithNodeRef:
initPresentationParametricModelWithParametricGeometryRef:
initPresentationShapeGeometryWithShapeGeometryRef:
initPresentationTextGeometryWithTextGeometryRef:
initRegularFileWithContents:
initRequiringSecureCoding:
initStandardFormatWithSampleRate:channels:
initThroughSCNKitBridgeWithURL:options:error:
initThroughSCNKitBridgeWithURL:preserveTopology:error:
initUninitialized
initWithAVAudioNode:
initWithAVAudioPCMBuffer:
initWithAction:target:keyPath:value:parent:index:
initWithAnimationPlayerRef:
initWithArray:
initWithAsset:
initWithAssetWriterInput:sourcePixelBufferAttributes:
initWithBlock:frequency:needsRenderResource:
initWithBody:anchor:
initWithBody:axis:anchor:
initWithBody:frame:
initWithBodyA:anchorA:bodyB:anchorB:
initWithBodyA:axisA:anchorA:bodyB:axisB:anchorB:
initWithBodyA:frameA:bodyB:frameB:
initWithBool:
initWithBuffer:elementSize:
initWithBuffer:primitiveType:primitiveCount:indicesChannelCount:interleavedIndicesChannels:bytesPerIndex:
initWithBuffer:vertexFormat:semantic:vertexCount:dataOffset:dataStride:
initWithBufferAllocator:
initWithBytes:length:encoding:
initWithBytesNoCopy:length:
initWithBytesNoCopy:length:freeWhenDone:
initWithCAAnimation:
initWithCFXAnimation:
initWithCGImage:
initWithCGImage:size:
initWithCString:encoding:
initWithCalendarIdentifier:
initWithCameraRef:
initWithCapacity:
initWithChainRootNode:
initWithCoder:
initWithCommandQueue:
initWithCommandQueue:model:options:
initWithContent:
initWithContentRect:styleMask:backing:defer:
initWithContentsOf:commandQueue:options:error:
initWithContentsOf:error:
initWithContentsOf:options:error:
initWithContentsOfURL:options:error:
initWithCoreEntityHandle:
initWithData:
initWithData:options:error:
initWithData:primitiveType:primitiveCount:indicesChannelCount:interleavedIndicesChannels:bytesPerIndex:
initWithData:semantic:colorSpace:vectorCount:floatComponents:componentsPerVector:bytesPerComponent:dataOffset:dataStride:
initWithData:semantic:vectorCount:componentType:componentCount:dataOffset:dataStride:
initWithData:topLeftOrigin:name:dimensions:rowStride:channelCount:channelEncoding:isCube:
initWithDefaultMaterial
initWithDelegate:
initWithDescription:size:arrayLength:
initWithDevice:contentsOf:error:
initWithDevice:engineContext:
initWithDevice:error:
initWithDevice:fixedSizeElement:buffersize:name:
initWithDevice:model:
initWithDevice:model:options:
initWithDevice:options:
initWithDevice:sigma:
initWithDeviceRef:
initWithDictionary:copyItems:
initWithDomain:code:userInfo:
initWithDrivingNode:deformedNode:bindingMode:bindingTransform:drivingNodeUVChannel:deformedNodeUVChannel:
initWithEncoder:
initWithEntityObject:
initWithEntryNames:contents:properties:options:
initWithEntryNames:dataProvider:options:
initWithFieldType:
initWithFileNamed:
initWithFileNamed:inBundle:
initWithFloat:
initWithFloorGeometryRef:
initWithForceFieldRef:
initWithFormat:arguments:
initWithFrame:
initWithFrame:options:
initWithGeometry:resourceManager:
initWithGeometryRef:
initWithIdentifier:error:
initWithIndexes:length:
initWithIndexesInRange:
initWithInnerLayerNode:outerLayerNode:deformedNode:bindingMode:bindingTransform:
initWithInnerLayerNode:outerLayerNode:parameters:
initWithInt:
initWithKeyOptions:valueOptions:capacity:
initWithLayer:
initWithLightRef:
initWithLongLong:
initWithMTKView:options:
initWithMTLTexture:options:
initWithMaterialRef:
initWithMediaType:outputSettings:
initWithMeshElement:
initWithMeshRef:
initWithMeshSource:
initWithModel:thresholdMode:lod:
initWithModel:thresholdMode:thresholdValue:
initWithMorphRef:
initWithName:
initWithName:channelEncoding:textureDimensions:turbidity:sunElevation:upperAtmosphereScattering:groundAlbedo:
initWithName:indexBuffer:indexCount:indexType:geometryType:material:topology:
initWithName:scatteringFunction:
initWithName:semantic:
initWithNibName:bundle:
initWithNode:
initWithNodeRef:
initWithObjects:
initWithObjects:count:
initWithOptions:
initWithOwner:
initWithPCMFormat:frameCapacity:
initWithPage:allocator:
initWithParent:andCustomName:
initWithParent:propertyType:
initWithPasteboard:
initWithPath:
initWithPath:manager:
initWithPath:options:error:
initWithPattern:options:error:
initWithPixelBufferAttributes:
initWithPlayerItem:
initWithQueue:screen:policy:block:
initWithRect:options:owner:userInfo:
initWithRenderer:size:attributes:outputURL:
initWithSampleCount:
initWithSerializedVFXBindingDataPointer:
initWithShape:
initWithShapeGeometryRef:
initWithSkinnerRef:
initWithSource:andTarget:
initWithStateManager:
initWithString:attributes:
initWithTag:
initWithTextGeometryRef:
initWithTexture:
initWithTimingFunctionRef:
initWithTitle:
initWithTitle:action:keyEquivalent:
initWithToken:
initWithType:
initWithType:component:
initWithType:data:
initWithType:intensity:color:
initWithType:shape:
initWithURL:
initWithURL:fileType:error:
initWithURL:offset:length:
initWithURL:options:error:
initWithURL:resolvingAgainstBaseURL:
initWithURL:vertexDescriptor:bufferAllocator:
initWithUTF8String:
initWithUnsignedInteger:
initWithVFXAnimation:
initWithVertexBuffers:vertexCount:descriptor:submeshes:
initWithView:
initWithWorld:
initWithWorldRef:
initialize
initializeAssetManagerWithBundleURL:
initializeCoreEntityManagerWithInfo:error:
initializeDraggedTransform
innerConeAngle
innerRadius
inputHeight
inputStreamWithData:
inputWidth
inputsCount
insertChildNode:atIndex:
insertDebugCaptureBoundary
insertDebugSignpost:
insertMaterial:atIndex:
insertObject:atIndex:
insertObject:inAudioPlayersAtIndex:
insertObject:inChildNodesAtIndex:
insertObject:inMaterialsAtIndex:
insertString:atIndex:
insideTessellationFactor
inspectCamera:
installName
installTapOnBus:bufferSize:format:block:
instance
instanceCount
instanceDidChange
instanceMethodSignatureForSelector:
instanceNewElementInArray:withPropertyName:
instanceWillChange
instancesRespondToSelector:
intValue
integerForKey:
integerValue
intensity
interleavedIndicesChannels
internalPixelFormat
internalPixelFormatDepth
intersectionFunctions
invalidate
invalidateCachedScriptParams
invalidateCameraTarget
invalidateCompiledGraph
invalidateDisplayLink
inverseKinematicsConstraintWithChainRootNode:
invocationWithMethodSignature:
invokeWithTarget:
iosurface
iosurfacePlane
irradianceData
irradianceTextureForEnvironmentTexture:renderContext:applySH:
irradianceTextureForMaterialProperty:
irradianceTextureForPrecomputedLightingEnvironment:
isARepeat
isASTCPixelFormatsSupported
isAborting
isAbsolutePath
isActive
isAdaptive
isAdditive
isAffectedByGravity
isAliasable
isAnimated
isAppliedOnCompletion
isArgument
isAsynchronous
isAuthoring
isAuthoringWorld
isCancelled
isColorManaged
isColored
isCube
isCullModeLocked
isCumulative
isDepth24Stencil8PixelFormatSupported
isDepthOnly
isDepthTexture
isDepthWriteEnabled
isDirectionInvertedFromDevice
isDoubleSided
isDragging
isDrawableAvailable
isDrawingBlur
isDrawingDepthOnly
isEditingSubComponent
isEditorViewRecordingUserInteractions:
isEmulatingStereo
isEnabled
isEnabled:
isEncoding
isEqual:
isEqualTo:
isEqualToString:
isEventInImGUIWindow:view:
isFileURL
isFillModeLocked
isFocusInteractionEnabled
isFramebufferOnly
isFrozen
isFull
isGeodesic
isHandlingKeyboard
isHeadless
isHemispheric
isHidden
isHiddenOrHasHiddenAncestor
isHittable
isIncremental
isInertiaRunning
isJitteringEnabled
isKeyWindow
isKindOfClass:
isLayeredRendering
isLitPerPixel
isLoaded
isLowPower
isMainThread
isMainWindow
isMemberOfClass:
isMemorylessRender
isNodeInsideFrustum:withPointOfView:
isOpaque
isOrthographic
isPaused
isPausedOrPausedByInheritance
isPlaying
isPositional
isPrecompiled
isPrefab
isPresentationObject
isReadableFileAtPath:
isReadyForMoreMediaData
isRemovable
isRemovedOnCompletion
isResting
isRunning
isScreenSpace
isShareable
isSparse
isSubclassOfClass:
isTargetFromHitTest
isTemporalAntialiasingEnabled
isTombstoned
isUndefined
isUsed
isVFX2
isVertexAmplificationEnabled
isVideoMirroringSupported
isVideoOrientationSupported
isVirtualEnvironmentNode
isVisible
isWrapped
isolate:
issueWithShadable:entryPoint:effectiveModifier:message:line:type:
itemArray
itemAtRow:
itemMatching:
itemTimeForHostTime:
iterationCount
jitter
jitteringEnabled
joint
jointAnimation
jointBindTransforms
jointForNode:
jointPaths
jointRestTransforms
jointWithBody:anchor:
jointWithBody:axis:anchor:
jointWithBody:frame:
jointWithBodyA:anchorA:bodyB:anchorB:
jointWithBodyA:axisA:anchorA:bodyB:axisB:anchorB:
jointWithBodyA:frameA:bodyB:frameB:
joints
jsChildNodesWithAttribute:
jsConstructor
keepTargetDirection
kernelEndTime
keyDown:
keyForNodeAttributes
keyPathDst
keyPathSrc
keyPathsForValuesAffectingEulerAngles
keyPathsForValuesAffectingFieldOfView
keyPathsForValuesAffectingFocalLength
keyPathsForValuesAffectingOrientation
keyPathsForValuesAffectingPosition
keyPathsForValuesAffectingRotation
keyPathsForValuesAffectingTransform
keyPathsForValuesAffectingValueForKey:
keyTimes
keyUp:
keys
killParticles
kinematicBody
label
lastFrameTime
lastFrameWorldTransform
lastItem
lastObject
lastPathComponent
launch
launchImagePicker
layer
layer:shouldInheritContentsScale:fromWindow:
layerContentsScaleFactor
layerCount
layerSizeInPixels
layerTarget
layerToFocusForRenderedLayer:
layout
legacyRenderer
legacyView
length
lengthOfBytesUsingEncoding:
lengthSegmentCount
lensBlur
lensShift
level
levelOfDetailWithModel:screenSpaceRadius:
levelOfDetailWithModel:worldSpaceDistance:
levelsOfDetail
libraryForProgramDesc:completionHandler:
libraryForSourceCode:options:
liftColor
liftOffset
light
lightBufferBindings
lightProbeWithVFXLight:node:
lightRef
lightType
lightWithLightRef:
lightWithMDLLight:
lightWithMDLLightProbe:
lightWithVFXLight:
lightingEnvironment
lightingModelName
line
lineToPoint:
linearExtendedSRGBColor
linearField
linearRestingThreshold
linearSleepingThreshold
linkCustomPropertyWithParent:andCustomName:
litPerPixel
load
load:options:error:
loadAction
loadBindingsMetadata
loadCoreEntityManagerFromURL:options:infoOut:error:
loadData:into:options:statusHandler:error:
loadIfNeeded
loadMDLAsset:options:context:
loadNibNamed:owner:topLevelObjects:
loadNonNativeFormatAt:into:options:statusHandler:error:
loadSCN:options:error:
loadTextures
loadURL:into:options:statusHandler:error:
loadWithCommandBuffer:label:
loadWithCommandBuffer:renderPassDescriptor:
loadWithUrl:loadingForAuthoring:infoOut:presentationScene:error:
loadWorldDescriptionAt:into:options:compressed:statusHandler:error:
loadWorldDescriptionFromData:into:options:compressed:sourceURL:statusHandler:error:
loaded
loader
loadingPolicy
localCoordinates
localFront
localNormal
localRight
localRotateBy:
localRotateByValue:
localTranslateBy:
localTranslateByValue:
localUpValue
localizedDescription
localizedStringForKey:value:table:
location
locationInWindow
locationNumber
lock
lockLayout
lockSnapGuides
logs
lookAt:up:localFront:
lookAtConstraintWithTarget:
lookAtLocation:up:localFront:
lookAtWith:target:
lookUpFoundInstance
lookUpKey
lookingGlassRendererWithDevice:quiltSettings:calibration:options:
lookupObjectIDByName:
lookupTable
loops
lowLatency
magFilter
magneticField
magnification
magnificationFilter
magnifyWithEvent:
main
mainBundle
mainMixerNode
mainQueue
mainScreen
makeAliasable
makeBackingLayer
makeDefaultCamera
makeFirstResponder:
makeKeyAndOrderFront:
makeKeyWindow
makeReadOnlyBuffersWithBaseGeometry:baseMesh:blitEncoder:
makeReverseStates
makeUniqueID
manipulator
mapVolatileMesh:verticesCount:
mappingChannel
margin
markAsFinished
maskCenter
maskEnabled
maskRadius
mass
matchesDescription:size:arrayLength:
matchesInString:options:range:
matchesRenderPassDescriptor:
material
materialFace
materialIdentifier
materialModificationCount
materialProperty
materialPropertyName
materialPropertyWithContents:
materialRef
materialRefCreateIfNeeded
materialType
materialWithColor:
materialWithContents:
materialWithMDLMaterial:
materialWithMDLMaterial:options:
materialWithMaterialRef:
materialWithName:
materialWithVFXMaterial:
materials
matrix
matrixWithNoRoll:
maxAllowedRotationAngle
maxAllowedRotationAngleForJoint:
maxAnisotropy
maxArgumentBufferSamplerCount
maxAvailableSizeWithAlignment:
maxTessellationFactor
maxTextureHeight2D
maxTextureWidth2D
maxThreadgroupMemoryLength
maxThreadsPerThreadgroup
maxTotalThreadsPerMeshThreadgroup
maxTotalThreadsPerObjectThreadgroup
maxTotalThreadsPerThreadgroup
maxValue
maxViewportCount
maximumAngularLimit
maximumAngularLimit1
maximumAngularLimit2
maximumConcurrentCompilationTaskCount
maximumDrawableCount
maximumEdgeLength
maximumHorizontalAngle
maximumLinearAcceleration
maximumLinearLimit
maximumLinearVelocity
maximumPointScreenSpaceRadius
maximumShadowDistance
maximumTime
maximumTwistAngle
maximumVerticalAngle
memoryBarrierWithResources:count:
memoryBarrierWithResources:count:afterStages:beforeStages:
memoryBarrierWithScope:
memoryBarrierWithScope:afterStages:beforeStages:
menu
menuItemForInstance:propertyName:
mesh
meshBindTransform
meshElement
meshElementAtIndex:
meshElementCount
meshElementWithBuffer:primitiveType:primitiveCount:bytesPerIndex:
meshElementWithBuffer:primitiveType:primitiveCount:indicesChannelCount:interleavedIndicesChannels:bytesPerIndex:
meshElementWithData:primitiveType:primitiveCount:indicesChannelCount:interleavedIndicesChannels:bytesPerIndex:
meshElements
meshForDeformedTopology
meshSource
meshSourceChannels
meshSourceWithBuffer:vertexFormat:semantic:vertexCount:dataOffset:dataStride:
meshSourceWithData:semantic:vectorCount:floatComponents:componentsPerVector:bytesPerComponent:dataOffset:dataStride:
meshSourceWithNormals:count:
meshSourceWithTextureCoordinates:count:
meshSourceWithVertices:count:
meshSources
meshSourcesForSemantic:
meshThreadExecutionWidth
meshWithMeshRef:
meshWithSources:elements:
meshWithSources:elements:sourceChannels:
meshWithVFXModel:
meshWithVFXModel:bufferAllocator:
metalBinaryArchiveURLs
metalDevice
metalLayer
metalTextureWithEngineContext:textureSampler:nextFrameTime:status:
metallic
metalness
migrateCoreEntityManagerWithInfo:error:
minFilter
minValue
minificationFilter
minimumAngularLimit
minimumHorizontalAngle
minimumLanguageVersion
minimumLinearLimit
minimumLinearTextureAlignmentForPixelFormat:
minimumPointScreenSpaceRadius
minimumTextureBufferAlignmentForPixelFormat:
minimumTime
minimumVerticalAngle
minute
mipFilter
mipmapLevelCount
mkSemantic
mlDelegate
mode
model
modelChanged
modelDescription
modelElementAtIndex:
modelElementCount
modelElementWithMDLSubmesh:
modelElements
modelSourceChannels
modelSources
modelSourcesForSemantic:
modelTessellator
modelTransform
modelWithGeometryRef:
modelWithMDLMesh:
modelWithMDLMesh:options:context:
modelWithMDLMesh:submesh:options:
modelWithMesh:
modelWithSources:elements:
modelWithSources:elements:sourceChannels:
modifierFlags
momentOfInertiaValue
momentumPhase
monospacedSystemFontOfSize:weight:
month
morphIncrementallyWithComputeContext:positions:normals:
morphRef
morphSparseWithComputeContext:positions:normals:
morpherWithMDLMesh:
morpherWithMorphRef:
motionBlur
motionBlurIntensity
motorMaximumForce
motorMaximumTorque
motorTargetAngularVelocity
motorTargetLinearVelocity
mouseDown:
mouseDragged:
mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:
mouseLocation
mouseLocationOutsideOfEventStream
mouseMoved:
mouseUp:
moveItemAtPath:toPath:error:
moveItemAtURL:toURL:error:
moveToPoint:
moveToTransform:
mtlTexture
multiply
mutableBytes
mutableChildNodes
mutableCopy
mutableData
mutableMaterials
mutex
name
namedTextureWithName:scaleFactor:
navigationCameraController
nearVisibilityDistance
neededModelsAndReturnError:
needsCollisionPlanes
needsLinearDepth
needsRenderResource
newAccelerationStructureWithDescriptor:
newAccelerationStructureWithDescriptor:offset:
newAccelerationStructureWithSize:
newAccelerationStructureWithSize:offset:
newArgumentEncoderForBufferAtIndex:
newArgumentEncoderWithArguments:
newArgumentEncoderWithBufferBinding:
newArgumentEncoderWithBufferIndex:
newArgumentEncoderWithBufferIndex:reflection:
newBinaryArchiveWithDescriptor:error:
newBufferForDataKind:meshSource:dataType:forStageInputOutputDescriptor:usePrivateStorageMode:outStride:
newBufferForDataKind:positionSource:normalSource:positionDataType:normalDataType:forStageInputOutputDescriptor:usePrivateStorageMode:outStride:outPositionOffset:outNormalOffset:
newBufferWithBytes:length:options:
newBufferWithBytesNoCopy:length:options:deallocator:
newBufferWithData:type:
newBufferWithLength:options:
newBufferWithLength:options:offset:
newCommandQueueWithDescriptor:
newCommandQueueWithMaxCommandBufferCount:
newComputePipelineStateForDesc:library:
newComputePipelineStateWithAdditionalBinaryFunctions:error:
newComputePipelineStateWithDescriptor:options:completionHandler:
newComputePipelineStateWithFunction:completionHandler:
newComputePipelineStateWithFunction:error:
newComputePipelineStateWithFunction:options:completionHandler:
newComputePipelineStateWithFunction:options:reflection:error:
newComputePipelineStateWithFunctionName:
newComputePipelineStateWithFunctionName:constantValues:
newComputePipelineStateWithFunctionName:constantValues:linkedFunctions:
newComputePipelineStateWithFunctionName:library:
newComputePipelineStateWithFunctionName:library:constantValues:linkedFunctions:
newCounterSampleBufferWithDescriptor:error:
newCubemapTextureForLatlongTexture:pixelFormat:engineContext:needsMipmap:
newDefaultLibrary
newDefaultLibraryWithBundle:error:
newDeformerInstanceForNode:outputs:computeVertexCount:context:
newDepthStencilStateWithDescriptor:
newDynamicLibrary:error:
newEvent
newFence
newFunctionWithDescriptor:completionHandler:
newFunctionWithDescriptor:error:
newFunctionWithName:
newFunctionWithName:constantValues:completionHandler:
newFunctionWithName:constantValues:error:
newFunctionWithName:constants:library:
newHeapWithDescriptor:
newIOCommandQueueWithDescriptor:error:
newIOFileHandleWithURL:compressionMethod:error:
newIOFileHandleWithURL:error:
newIOHandleWithURL:compressionMethod:error:
newIOHandleWithURL:error:
newInstanceMenuClicked:
newIntersectionFunctionTableWithDescriptor:
newIntersectionFunctionTableWithDescriptor:stage:
newIntersectionFunctionWithDescriptor:completionHandler:
newIntersectionFunctionWithDescriptor:error:
newLibraryWithData:error:
newLibraryWithFile:error:
newLibraryWithSource:options:completionHandler:
newLibraryWithSource:options:error:
newLibraryWithSource:options:warnings:error:
newLibraryWithStitchedDescriptor:completionHandler:
newLibraryWithStitchedDescriptor:error:
newLibraryWithURL:error:
newLogStateWithDescriptor:error:
newNodeAtPath:type:
newObject
newPipelineStateConfiguratorForMeshElement:patchType:device:
newPropertyWithName:type:role:
newRadianceTextureForEnvironmentTexture:engineContext:cpuAccessible:commandBuffer:
newRasterizationRateMapWithDescriptor:
newRemoteBufferViewForDevice:
newRemoteTextureViewForDevice:
newRenderPipelineStateWithAdditionalBinaryFunctions:error:
newRenderPipelineStateWithDescriptor:completionHandler:
newRenderPipelineStateWithDescriptor:error:
newRenderPipelineStateWithDescriptor:options:reflection:error:
newRenderPipelineStateWithMeshDescriptor:options:completionHandler:
newRenderPipelineStateWithMeshDescriptor:options:reflection:error:
newRenderPipelineStateWithTileDescriptor:options:completionHandler:
newRenderPipelineStateWithTileDescriptor:options:reflection:error:
newResidencySetWithDescriptor:error:
newSamplerStateWithDescriptor:
newSceneWithURL:
newSharedEvent
newSharedEventWithHandle:
newSharedTextureHandle
newSharedTextureWithHandle:
newSubBufferForAllocator:
newSubBufferWithBytes:length:renderContext:
newSubmeshWithGeometryData:indexBufferLength:interleaved:channelCount:channelIdx:bytesPerIndex:indexType:geometryType:allocator:indexCount:topology:
newSubmeshWithUniquedIndexData:andVFXModelElement:bufferAllocator:
newSubmeshWithVFXModelElement:bufferAllocator:
newSubmeshWithVFXModelElement:bufferAllocator:positionSourceChannel:
newTemporalScalerWithDevice:
newTextureForDevice:
newTextureUsingMTKTextureLoaderWithData:options:
newTextureUsingMTKTextureLoaderWithURL:options:
newTextureViewWithPixelFormat:
newTextureViewWithPixelFormat:textureType:levels:slices:
newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:
newTextureWithContentsOfURL:options:error:
newTextureWithData:options:error:
newTextureWithDescriptor:
newTextureWithDescriptor:iosurface:plane:
newTextureWithDescriptor:offset:
newTextureWithDescriptor:offset:bytesPerRow:
newTextureWithName:scaleFactor:bundle:options:error:
newVisibleFunctionTableWithDescriptor:
newVisibleFunctionTableWithDescriptor:stage:
next
nextDrawable
nextEventMatchingMask:untilDate:inMode:dequeue:
nextFrameTime
nextKeyView
node
node:propertyWithName:type:role:
nodeA
nodeB
nodeBufferBindings
nodeManipulatorItemWithNode:screenSize:
nodeWithMDLAsset:
nodeWithMDLObject:
nodeWithMDLObject:masterObjects:worldNodes:skinnedMeshes:skelNodesMap:asset:options:context:
nodeWithMDLObject:options:context:
nodeWithModel:
nodeWithNodeRef:
nodeWithSceneKitNode:options:
nodesInsideFrustumWithPointOfView:
noiseFieldWithSmoothness:animationSpeed:
normal
nsWindow
nsWindowLayer
nullMaterial
numberOfItemsInComboBox:
numberOfRows
numberWithDouble:
numberWithFloat:
numberWithInt:
numberWithInteger:
numberWithUnsignedChar:
numberWithUnsignedInt:
numberWithUnsignedInteger:
numberWithUnsignedLong:
numberWithUnsignedLongLong:
numberWithUnsignedShort:
objCType
object
objectAtIndex:
objectAtIndexedSubscript:
objectClass
objectController
objectForKey:
objectForKeyedSubscript:
objectHandleClicked:
objectID
objectInAllJointsAtIndex:
objectInAudioPlayersAtIndex:
objectInChildNodesAtIndex:
objectInChildNodesWithAttribute:firstOnly:
objectInChildNodesWithName:
objectInMaterialsAtIndex:
objectName
objectPathWithString:
objectThreadExecutionWidth
objectWithVFXNode:
objectWithVFXNode:bufferAllocator:
observeValueForKeyPath:ofObject:change:context:
observedPresentedItemUbiquityAttributes
observer
obstruction
occluderCategoryBitMask
occlusion
occlusionState
offset
offsetValue
opaque
opaqueECS
opaqueEntityManager
open
openURL:
operatingSystemVersion
operation
optimizeContentsForCPUAccess:
optimizeContentsForCPUAccess:slice:level:
optimizeContentsForGPUAccess:
optimizeContentsForGPUAccess:slice:level:
optimizeIndirectCommandBuffer:withRange:
orangeColor
orderFront:
orderFrontColorPanel:
orderedSet
orderedSetWithCapacity:
orderedSetWithObject:
orientation
orientationConstraintInWorldSpace:withBlock:
orientationOffset
orientationValue
originalToFirstDeindexedTableBufferWithBlitEncoder:indexSizeOut:
orthographicScale
otherMouseDragged:
otherMouseUp:
outerConeAngle
outlineView:child:ofItem:
outlineView:isItemExpandable:
outlineView:numberOfChildrenOfItem:
outlineView:objectValueForTableColumn:byItem:
outlineView:setObjectValue:forTableColumn:byItem:
outlineView:shouldSelectItem:
outputURL
outputsNormal
overrides
owner
ownerWillDie
packageWithContentsOfURL:type:options:error:
panSensitivity
panel
parallaxCenterOffset
parallaxCorrectionEnabled
parallaxExtentsFactor
parallelRenderCommandEncoderWithDescriptor:
parameterBufferSizeAndAlign
parameterOf:named:
parameterOf:named:type:with:
parameterOf:named:with:
parametricType
params
parent
parentItem
parentNode
parentRelativeLevel
parentRelativeSlice
parentTexture
parentView
parentWillDie:
parseSpecialKey:withPath:intoDestination:
parseSpecialKey:withPath:intoDestination:remainingPath:
particleCollider
particleColliderWithEntityObject:
particleDataBuffer
particleDataBufferOffset
particleEmitterWithEntityObject:
particleHeaderBuffer
particleHeaderBufferOffset
passBufferBindings
passDescriptor
patchControlPointCount
patchFont:
patchType
path
pathByAppendingPropertyComponent:
pathComponents
pathControlClicked:
pathControlItemForInstance:
pathExtension
pathForResource:ofType:
pathForResource:ofType:inDirectory:
pathItems
pause:
pauseAnimationForKey:
pauseDisplayLink
paused
peerCount
peerGroupID
peerIndex
peerTaskIdentity
pendingGPUFrameCount
penetrationDistance
performDragOperation:
performMouseDown:
performPresentationObjectQueriesInWorld:usingBlock:
performSelector:
performSelector:withObject:
performSelector:withObject:afterDelay:
performSelector:withObject:withObject:
performTransaction:
performanceStatisticsForPid:
phase
physicalSizeForLayer:
physicsBody
physicsJoints
physicsShape
physicsWorld
physicsWorld:didBeginContact:
physicsWorld:didEndContact:
physicsWorld:didUpdateContact:
pipeRadius
pipeSegmentCount
pipelineStateHashForMeshElement:patchType:
pitch
pivot
pivotValue
pixelFormat
pixelsHigh
pixelsWide
planeWithWidth:height:
planeWithWidth:height:options:
play
play:
playbackSpeed
player
pointOfCulling
pointOfCullingComboBox
pointOfView
pointOfViewComboBox
pointSize
pointSourceInHeadMode
pointValue
pointerType
pointerValue
popDebugGroup
popUpContextMenu:withEvent:forView:
popupChanged:
portalClippingMode
position
positionConstraintInWorldSpace:withBlock:
positionOffset
positionValue
positional
postCommandWithContext:object:applyBlock:
postCommandWithContext:object:key:applyBlock:
postCommandWithContext:object:key:subscriptIndex:derivedKeyPath:applyBlock:
postCommandWithContext:object:key:subscriptKey:derivedKeyPath:applyBlock:
postCommandWithContext:object:keyPath:applyBlock:
postNotificationName:object:
postNotificationName:object:userInfo:
postProjectionTransform
postRenderCallback
precompiled
precomputedLightingEnvironment
precomputedLightingEnvironmentContentsWithData:error:
precomputedLightingEnvironmentContentsWithURL:error:
precomputedLightingEnvironmentDataForContents:device:error:
prefab
prefabWithAsset:
prefabWithRootNode:
preferredFilenameExtension
preferredFrameRate
preferredFramesPerSecond
prepareContentOfPopUpButton
prepareForDragOperation:
prepareForRenderer:progressHandler:
prepareObjects:withCompletionHandler:
prepareSnapToAlignData
prepareSnapToAlignDataIfNeeded
prepareWindowIfNeeded
prepareWithTarget:implicitDuration:
prepareWorld:
preprocessorMacros
presentAfterMinimumDuration:
presentDrawable:
presentDrawable:afterMinimumDuration:
presentDrawable:atTime:
presentationBehaviorGraph
presentationBehaviorGraphWithCoreEntityHandleRef:
presentationCamera
presentationCameraEffectWithCameraEffectRef:
presentationCameraWithCameraRef:
presentationEntityFromModel:
presentationForceFieldWithForceFieldRef:
presentationLight
presentationLightWithLightRef:
presentationMaterial
presentationMaterialProperty
presentationModel
presentationModelWithGeometryRef:
presentationMorpher
presentationMorpherWithMorpherRef:
presentationNode
presentationObject
presentationParticleColliderWithCoreEntityHandleRef:
presentationParticleEmitterWithCoreEntityHandleRef:
presentationScene
presentedItemDidChange
presentedItemDidChangeUbiquityAttributes:
presentedItemDidGainVersion:
presentedItemDidLoseVersion:
presentedItemDidMoveToURL:
presentedItemDidResolveConflictVersion:
presentedItemOperationQueue
presentedItemURL
presentedSubitemAtURL:didGainVersion:
presentedSubitemAtURL:didLoseVersion:
presentedSubitemAtURL:didMoveToURL:
presentedSubitemAtURL:didResolveConflictVersion:
presentedTime
presentsWithTransaction
preserveScale
pressure
primaryPresentedItemURL
primitiveCount
primitiveRange
primitiveType
privateRendererOwner
probeEnvironment
probeExtents
probeOffset
probeType
processInfo
processName
processRendererElements:count:engineIterationContext:
processingFormat
processorCount
programWithHashCode:engineContext:trackedResource:introspectionDataPtr:
programWithLibrary:
programWithNode:withMaterial:
progress
progressWithTotalUnitCount:
projectPoint:
projectPoints:count:
projection
projectionDirection
projectionMatrix
projectionTransform
projectionTransformWithViewportSize:
properties
propertiesForEntryName:
propertyListWithData:options:format:error:
propertyName
propertyNamed:
propertyType
propertyWithName:
propertyWithSemantic:
pvrtcData
pyramidWithWidth:height:length:options:
quaternion
query
queryItems
queuedFrameCount
radialField
radialSegmentCount
radialSpan
radianceData
radianceTextureForEnvironmentTexture:engineContext:commandBuffer:
radianceTextureForMaterialProperty:
radianceTextureForPrecomputedLightingEnvironment:
radius
raise:format:
range
rangeAtIndex:
rangeOfString:
rangeOfString:options:
rangeOfString:options:range:
rangeValue
rasterizationRateMap
rate
rawFloat2ForKey:value:
rawFloat3ForKey:value:
rawFloat4ForKey:value:
rawQuilt
rawValue
rayTestWithSegmentFrom:to:options:
rayTestWithSegmentFromPoint:toPoint:options:
readBool:
readDouble:
readFloat:
readInt16:
readInt32:
readInt64:
readInt8:
readInt:
readIntoBuffer:error:
readKeyframeAnimation:
readMask
readSIMD2D:
readSIMD2F:
readSIMD3D:
readSIMD3F:
readSIMD3x3D:
readSIMD3x3F:
readSIMD4D:
readSIMD4F:
readSIMD4x4D:
readSIMD4x4F:
readString:
readUInt16:
readUInt32:
readUInt64:
readUInt8:
readWriteTextureSupport
readonly
readsFromDepthBuffer
reason
recommendedMaxWorkingSetSize
reconfigureIfNeededWithContext:programHashCodeRequirements:
recordGraph
recordGraph:
recordedMetalBinaryArchiveURL
rectValue
recycleBuffersGetCompletion
redComponent
referenceCount
referenceURL
referencedNode
reflectionCategoryBitMask
reflectionFalloffEnd
reflectionFalloffStart
reflectionSampleCount
reflective
reflectivity
registerArgument:frequency:block:
registerArgument:frequency:needsRenderResource:block:
registerBindings
registerForDraggedTypes:
registerSemantic:withBlock:
registerShadableArgumentBindingBlockForBuffers:textures:samplers:
registerUserBlockTrampoline:
registerVFX2AuthoringSystems:
registerWithTriggerManager:inWorld:
registry
registryID
regularExpressionWithPattern:options:error:
regularFileContents
rejectFirstResponder
relativePath
releaseProgramForResource:
relinquishPresentedItemToReader:
relinquishPresentedItemToWriter:
reloadBlock
reloadData
reloadFromURL:error:
reloadPipelinesIfNeeded
reloadWorld:withUpdatedWorldAtURL:
remapEntityReferences:
remapTable
remoteEditionEndpoint
remotePreviewDelegate
remoteStorageBuffer
remoteStorageTexture
remove
removeAllAnimations
removeAllAnimationsWithBlendOutDuration:
removeAllAudioPlayers
removeAllBehaviors
removeAllBindings
removeAllDebugMarkers
removeAllEffects
removeAllIndexes
removeAllMaterials
removeAllObjects
removeAllOverrides
removeAnimationForKey:
removeAnimationForKey:blendOutDuration:
removeAnimationFrom:keyPath:
removeAudioPlayer:
removeButton
removeCameraNode:
removeClient:
removeClonesFromWorld
removeCollisionPlaneWithId:
removeEffect:
removeEffectNode:
removeEntityObject:
removeFilePresenter:
removeFileWrapper:
removeForKeyPath:
removeForceFieldNode:
removeFromParent
removeFromParentNode
removeFromSuperview
removeIndex:
removeItemAtPath:error:
removeItemAtURL:error:
removeItemsFromWorld:
removeLastObject
removeLightNode:
removeLightWithId:
removeMaterialAtIndex:
removeMonitor:
removeNode:
removeObject:
removeObjectAtIndex:
removeObjectClicked:
removeObjectForKey:
removeObjectFromAudioPlayersAtIndex:
removeObjectFromChildNodesAtIndex:
removeObjectFromMaterialsAtIndex:
removeObjectsAtIndexes:
removeObserver:forKeyPath:
removeObserver:forKeyPath:context:
removeObserver:name:object:
removeOutput:
removePhysicsBody:handle:
removePhysicsJoint:
removeResidencySet:
removeResidencySets:count:
removeReverseItem:
removeSkyboxes
removeState:
removeStateItem:
removeTrackingArea:
removeTransitionFrom:to:
removeWorldReference:
removedNode:
removedOnCompletion
render
renderAndAppendWithPresentationTime:usingAdaptor:metalTextureCache:cvQueue:completionBlock:
renderAtTime:
renderAtTime:viewport:encoder:passDescriptor:commandQueue:
renderBackground:engineContext:passInstance:
renderBufferFormat
renderCommandEncoder
renderCommandEncoderWithDescriptor:
renderContext:commandBufferDidCompleteWithError:
renderContext:didFallbackToDefaultTextureForSource:message:
renderDebugOptions
renderEncoder
renderForBlur
renderGraph
renderGraphDescriptionWithSCNTechniqueDescription:
renderGraphUtils
renderMesh:meshElement:withProgram:engineContext:transform:color:rasterizerStates:blendState:texture:depthBias:
renderMode
renderMovieToURL:size:antialiasingMode:attributes:error:
renderPassDescriptor
renderPassIdentifier
renderPassName
renderResourceForAsset:withEngineContext:entityCache:isFallback:isDynamic:
renderResourceForDeformerStack:node:dataKind:
renderResourceForImage:sampler:options:engineContext:didFallbackToDefaultTexture:
renderResourceForImageProxy:sampler:engineContext:didFallbackToDefaultTexture:
renderResourceForMaterialProperty:withEngineContext:didFallbackToDefaultTexture:isDynamic:
renderResourceForMorpher:baseMesh:dataKind:provider:
renderResourceForProgramDesc:renderPassDescriptor:
renderResourceForSkinner:baseMesh:dataKind:provider:
renderSize
renderTargetArrayLength
renderTargetInfo
renderTargetSize
renderTime
renderToTexture:
renderToTexture:commandBuffer:
renderToTexture:computeCommandHandler:blitCommandHandler:completionHandler:helper:
renderToTexture:options:
renderVideoBackground:engineContext:materialProperty:
renderWithCommandBuffer:viewPoints:mode:
renderWithCompletion:
renderWithEngineContext:textureSampler:nextFrameTime:
renderWithEngineContext:textureSampler:nextFrameTime:status:
renderWithPresentWithTransaction:completion:
renderWithTextureAttachmentProvider:options:
renderWithViewport:commandBuffer:passDescriptor:
renderer
renderer:commandBufferDidCompleteWithError:
renderer:didApplyAnimationsAtTime:
renderer:didApplyConstraintsAtTime:
renderer:didFallbackToDefaultTextureForSource:message:
renderer:didSimulatePhysicsAtTime:
renderer:updateAtTime:
renderer:willRenderWorld:atTime:
rendererClass
rendererDidChange:
rendererForWorldRenderer:
rendererKind
rendererOptionsPanelForView:
rendererWithDevice:options:
renderingAlgorithm
renderingOrder
rendersContinuously
rendersIntoMaterial
repeatCount
repeatDuration
replaceBytesInRange:withBytes:
replaceCharactersInRange:withString:
replaceChildNode:with:
replaceMaterial:with:
replaceMaterialAtIndex:withMaterial:
replaceObjectAtIndex:withObject:
replaceObjectInAudioPlayerAtIndex:withObject:
replaceObjectInChildNodesAtIndex:withObject:
replaceObjectInMaterialsAtIndex:withObject:
replaceOccurrencesOfString:withString:options:range:
replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:
replaceRegion:mipmapLevel:withBytes:bytesPerRow:
replaces:
replicateToRuntimeAndStartReplicationWithOptions:
replicatesOrientation
replicatesPosition
replicatorConstraint
representationUsingType:properties:
representedObject
requestMediaDataWhenReadyOnQueue:usingBlock:
requireLoadFinalTexture
required
requiredInputs
requiresMainThreadUpdates
requiresSecureCoding
reset
resetCache
resetCommandsInBuffer:withRange:
resetTextureAccessCounters:region:mipLevel:slice:
resetTileCondition
resetToTransform:
resetTransform
resetUsingDescriptor:
resetVolatileMeshElements
resetVolatileMeshes
resignCurrent
resignFirstResponder
resizingMode
resolveCounters:inRange:destinationBuffer:destinationOffset:
resolveDepthPlane
resolveInsideArchiveWithAssetNamed:
resolveLevel
resolveObjectReferencesWithRemapTableWithWorld:objectsByIdentifier:
resolveSlice
resolveTag:remap:
resolveTexture
resolveVFXCoreAndTagReferences
resolvedBackgroundColorDidChange:
resolver
resolverWithFolderURL:
resourceBlitEncoder
resourceCommandBuffer
resourceComputeEncoder
resourceGroup
resourceManagerMonitor
resourcePath
resourceQueue
resourceStateCommandEncoder
resourceStateCommandEncoderWithDescriptor:
resourceURL
respondsToSelector:
restitution
resumeAnimationForKey:
resumeDisplayLink
retain
retainCount
retainedReferences
retargetWithRemapTable:
reverbBlend
reverseObjectEnumerator
reverseTransformedValue:
reverseZ
rg_setLineWidth:
rightMouseDragged:
rightMouseUp:
rollAroundTarget:
rollBy:aroundScreenPoint:viewport:
rollCameraSpaceBy:withPoint:viewport:
root
rootLayer
rootNode
rootNodeForLayer:
rootObjectID
rootResource
rotateBy:around:
rotateBy:aroundTarget:
rotateByX:Y:
rotateOf:
rotateToAxisAngle:
rotateWithEvent:
rotateWithVector:mode:
rotation
rotationMode
rotationRepresentation
rotationSensitivity
rotationValue
rotations
roughness
rowForItem:
runBench:
runModal
sRGBColorSpace
sRGBTexture
sWrapMode
safe_children
sampleCount
sampleCountersInBuffer:atSampleIndex:withBarrier:
sampleDistributedShadowMaps
sampleRate
sampleTimestamps:gpuTimestamp:
sampler::
samplerAtIndices:
saturation
save
saveAndCreateUSDZPackageWithURL:
saveInitialSelection
savePanel
savePresentedItemChangesWithCompletionHandler:
scale
scaleFactor
scaleOffset
scaleValue
scales
scatteringFunction
scene
sceneScale
sceneWithURL:options:error:
scheduleBuffer:atTime:options:completionHandler:
scheduleFile:atTime:completionHandler:
scheduledTimerWithTimeInterval:repeats:block:
scheme
scope
screen
screenSize
screenSpace
screenSpaceAdaptiveTessellationDrawMeshElement:forMesh:instanceCount:renderContext:
screenSpaceAmbientOcclusionDepthThreshold
screenSpaceAmbientOcclusionIntensity
screenSpaceAmbientOcclusionNormalThreshold
screenSpaceAmbientOcclusionRadius
screenSpaceRadius
screenSpaceReflectionDepthThreshold
screenSpaceReflectionMaximumDistance
screenSpaceReflectionSampleCount
screenSpaceReflectionStride
scrollPoint:
scrollRowToVisible:
scrollWheel:
second
seekSlider
seekStep
seekStepper
seekToTime:toleranceBefore:toleranceAfter:
segmentCount
selectAuthoringDisplayMask:
selectCamera:
selectInstance:propertyName:
selectItemAtIndex:
selectNodes:
selectObject:selected:
selectPointOfCulling:
selectRenderingDebugOptions:
selectRowIndexes:byExtendingSelection:
selectedItem
selectedItems
selectedNode
selectedNodes
selectedRow
selecting
selection
selectionDelegate
selectionDidChange:
selectionIsReadonly
selectionTransformMode
selectionWillChange
self
selfIllumination
selfIlluminationOcclusion
semantic
semanticForSymbol:
semanticsCount
sendAction:to:
sensorHeight
sensorSize
sensorVerticalAperture
serializeToURL:error:
serializedVFXBindingData
serializedVFXBindingSize
setAccelerationStructure:atBufferIndex:
setAccelerationStructure:atIndex:
setAccessibilityDescription:
setAction:
setActive:
setActiveStateName:
setAdaptationBrighteningSpeedFactor:
setAdaptationDarkeningSpeedFactor:
setAdaptationMaximum:
setAdaptationMinimum:
setAdaptativeFrameRate:
setAdaptive:
setAdditive:
setAdditiveWritesToAlpha:
setAffectedByGravity:
setAlignment:
setAlignmentMode:
setAllTargetsFromAnimCodec:
setAllowGPUOptimizedContents:
setAllowLoadingFromFuture:
setAllowRemoteEdition:
setAllowedContentTypes:
setAllowsBrowsing:
setAllowsCameraControl:
setAllowsCreation:
setAllowsResting:
setAllowsTickMarkValuesOnly:
setAllowsTranslation:
setAlphaBlendOperation:
setAlphaTestReferenceValue:
setAlternateMode:
setAlternateTitle:
setAlwaysDiscardsLateVideoFrames:
setAnamorphic:
setAnchorA:
setAnchorAValue:
setAnchorB:
setAnchorBValue:
setAngularDamping:
setAngularRestingThreshold:
setAngularSleepingThreshold:
setAngularVelocity:
setAngularVelocityFactor:
setAngularVelocityFactorValue:
setAngularVelocityValue:
setAnimationDidStart:
setAnimationDidStop:
setAnimationDuration:
setAnimationEvents:
setAnimationTimingFunction:
setAnimations:
setAntialiasingLevel:
setAntialiasingMode:
setApertureBladeCount:
setAppliedOnCompletion:
setAreaLightParametersWithExtents:doubleSided:
setAreaPolygonVertices:
setAreaType:
setArgument:atIndex:
setArgumentBuffer:offset:
setArgumentBuffer:startOffset:arrayElement:
setArgumentEncoder:
setArguments:
setArray:
setAssetManager:
setAssetPathResolver:
setAssetValue:
setAsyncRuntimeLock:
setAsynchronousLoading:
setAttachmentProvider:
setAttenuationDistance:
setAttenuationEndDistance:
setAttenuationFalloffExponent:
setAttenuationRadius:
setAttenuationStartDistance:
setAttributedTitle:
setAttributes:
setAudioListener:
setAuthoringCamera:forView:
setAuthoringCameraType:
setAuthoringEnvironment2:
setAuthoringGraph:
setAuthoringTargetNode:
setAutoAdjustCamera:
setAutoExposureEnabled:
setAutoSwitchToFreeCamera:
setAutoenablesDefaultLighting:
setAutomaticCameraTarget:
setAutomaticTarget:
setAutomaticallyAdjustsShadowProjection:
setAutomaticallyAdjustsVideoMirroring:
setAutomaticallyAdjustsZRange:
setAutomaticallyPrepareScene:
setAutoresizingMask:
setAutoreverses:
setAvPlayer:
setAvoidsOverLighting:
setAxisA:
setAxisAValue:
setAxisB:
setAxisBValue:
setBackFaceStencil:
setBackgroundColor:
setBackgroundGPUPriority:
setBaked:
setBaseMeshBindTransform:
setBaseState:
setBeamed
setBeginTime:
setBehaviorGraph:
setBezelStyle:
setBi:
setBias:
setBiasValues:
setBinaryArchives:
setBindBlock:
setBinding:
setBindingValue:forKey:
setBlendColorRed:green:blue:alpha:
setBlendInDuration:
setBlendMode:
setBlendOutDuration:
setBlendingEnabled:
setBlock:
setBloom:
setBloomBlurRadius:
setBloomColorFilter:
setBloomContrast:
setBloomIntensity:
setBloomIterationCount:
setBloomIterationSpread:
setBloomSaturation:
setBloomThreshold:
setBloomThresholdSmoothness:
setBloomUseHighQuality:
setBodyA:
setBodyB:
setBoneInverseBindTransforms:
setBones:
setBoolValue:
setBordered:
setBoundingBoxBuffer:
setBoundingBoxBufferOffset:
setBoundingBoxCount:
setBoundingBoxMin:max:
setBoundingBoxStride:
setBounds:
setBoundsSize:
setBoxType:
setBrightness:
setBuffer:
setBuffer:offset:atIndex:
setBuffer:offset:attributeStride:atIndex:
setBufferOffset:atIndex:
setBufferOffset:attributeStride:atIndex:
setBufferSize:
setBuffers:offsets:attributeStrides:withRange:
setBuffers:offsets:withRange:
setBuiltinEffectIdentifiers:
setButtonType:
setByAddingObject:
setByAddingObjectsFromArray:
setByAddingObjectsFromSet:
setByValue:
setBytes:length:atIndex:
setBytes:length:attributeStride:atIndex:
setCGImage:
setCalculationMode:
setCamera:
setCameraEntityTransformProjection:::::::
setCameraTarget:
setCanDrawConcurrently:
setCanRecycleParticleBuffers:
setCanceled:
setCapSegmentCount:
setCaptureDevice:
setCaptureDeviceOutputConsumerSource:
setCaptureObject:
setCategoryBitMask:
setCenter:
setCenterOfMassOffset:
setCfxAnimation:
setChainRootNode:
setChamferProfile:
setChamferRadius:
setChamferSegmentCount:
setChannelTargetCounts:
setChannelTargetWeights:
setCharge:
setChildNodes:
setChromaticTransform:
setClearColor:
setClearDepth:
setClearStencil:
setClientCGImage:
setClientCommandBuffer:
setClientCommandQueue:
setClientID:
setClientRenderCommandEncoder:
setClientRenderPassDescriptor:
setClientTexture:
setClipPlane:p2:p3:p4:atIndex:
setClipsToBounds:
setCollectsCompilationErrors:
setCollisionBitMask:
setCollisionCategoryBitMask:
setColor1:
setColor2:
setColor3:
setColor:
setColorBufferWriteMask:
setColorFringeIntensity:
setColorFringeStrength:
setColorGrading:
setColorManaged:
setColorPixelFormat:
setColorResolveTexture:slice:depthPlane:level:atIndex:
setColorResolveTexture:slice:depthPlane:level:yInvert:atIndex:
setColorSpace:
setColorStoreAction:atIndex:
setColorStoreActionOptions:atIndex:
setColorTexture:
setColorTextureFormat:
setColored:
setColorspace:
setCommandBuffer:
setCommandBufferStatusMonitor:
setCommandDataCorruptModeSPI:
setCommandQueue:
setCommitsOnCompletion:
setCompleted:
setCompletedUnitCount:
setCompletionBlock:
setComponent:
setCompressionType:
setComputeFunction:
setComputePipelineState:
setComputePipelineState:atIndex:
setComputePipelineStates:withRange:
setConnectionWithTargetPaths:
setConstantToString:
setConstantValue:type:atIndex:
setConstantValues:
setConstraintRef:
setContactDelegate:
setContactTestBitMask:
setContainerFrame:
setContent:
setContentScaleFactor:
setContents:
setContentsGravity:
setContentsScale:
setContentsTransform:
setContext:
setContinuityValues:
setContinuousCollisionDetectionThreshold:
setContrast:
setController:
setCoordinateSpace:
setCornerRadius:
setCornerSegmentCount:
setCountStyle:
setCounterStorage:
setCounters:
setCpuCacheMode:
setCullMode:
setCumulative:
setCurrentContext:
setCurrentPassHash:
setCurrentPassMaterial:
setCurrentThreadImmediateMode:
setDamping:
setDataSource:
setDateFormat:
setDebugOptions:
setDebugUIOptions:
setDecelerationDistance:
setDecodingFailurePolicy:
setDefaultRenderGraph:
setDeferredBindingEnabled:
setDeformers:
setDelegate:
setDepth:
setDepthAttachmentPixelFormat:
setDepthBias:slopeScale:clamp:
setDepthClipMode:
setDepthClipModeSPI:
setDepthCompareFunction:
setDepthFailureOperation:
setDepthOfField:
setDepthPixelFormat:
setDepthPlane:
setDepthResolveFilter:
setDepthResolveTexture:slice:depthPlane:level:
setDepthResolveTexture:slice:depthPlane:level:yInvert:
setDepthReversed:
setDepthStencilPassOperation:
setDepthStencilState:
setDepthStoreAction:
setDepthStoreActionOptions:
setDepthTestMinBound:maxBound:
setDepthTexture:
setDepthTextureFormat:
setDepthWriteEnabled:
setDescriptor:
setDestinationRGBBlendFactor:
setDestinationReplicationDelegate:
setDevice:
setDictionaryMetadataWithKey:dictionaryKey:value:
setDidEndSelector:
setDidFinishPlayback:
setDirectionalLightUniformOverridesOn:world:proj:
setDirectionalParametersWithScale:zNear:zFar:
setDisableActions:
setDiscretizedStraightLineMaxLength:
setDisplayAspect:
setDisplaySyncEnabled:
setDisplaysWhenScreenProfileChanges:
setDoNotClearRenderOutput:
setDouble3Value:
setDouble4x4Array:count:
setDouble4x4Value:
setDouble4x4Value:atTime:
setDoubleAction:
setDoughnutBokeh:
setDraggedTransform:
setDrawableResizesAsynchronously:
setDrawableSize:
setDrawsArea:
setDrivenByDefaultNavigationCameraController:
setDuration:
setEdgeCreasesElement:
setEdgeCreasesSource:
setEdgeTessellationFactor:
setEditable:
setEditingSpace:
setEditorLocked:
setEffect:
setEffects:
setElementIndex:
setEmitterIdentifier:
setEmulateStereo:
setEnableARMode:
setEnableDeferredRendering:
setEnableFreeCamera:
setEnableInertia:
setEnableParallelDecoding:
setEnableRuntimeScriptCompilation:
setEnabled:
setEnabled:enabled:
setEncoder:
setEncoder:alreadyUsed:
setEndTime:
setEngineNotificationQueue:
setEntityHandle:
setEnumCases:
setEnumName:
setError:
setErrorOptions:
setEulerAnglesValue:
setEventBlock:
setEventHandler:
setExecutableURL:
setExpectsMediaDataInRealTime:
setExposure:
setExposureAdaptationBrighteningSpeedFactor:
setExposureAdaptationDarkeningSpeedFactor:
setExposureOffset:
setExtendedLinearSRGBColor:
setExtrusionDepth:
setFStop:
setFaceCount:
setFaceTopology:
setFadeInDuration:
setFadeOutDuration:
setFalloff:
setFalloffExponent:
setFarVisibilityDistance:
setFastMathEnabled:
setFeatures:
setFieldType:
setFillMode:
setFillsBackward:
setFillsForward:
setFilmOffset:
setFilterQuality:
setFilters:
setFirstMaterial:
setFlatness:
setFlattened:
setFloat2Array:count:
setFloat3Array:count:
setFloat3Array:count:atTime:
setFloat3Value:atTime:
setFloatArray:count:
setFloatArray:count:atTime:
setFloatValue:
setFloatValue:atTime:
setFlyModeVelocity:
setFocalBlurSampleCount:
setFocusBehavior:
setFocusDistance:
setFogColor:
setFogDensityExponent:
setFogEndDistance:
setFogStartDistance:
setFont:
setForceField:
setForcesBackFaceCasters:
setFormat:
setFormatter:
setFragmentAccelerationStructure:atBufferIndex:
setFragmentBuffer:offset:atIndex:
setFragmentBufferOffset:atIndex:
setFragmentBuffers:offsets:withRange:
setFragmentBytes:length:atIndex:
setFragmentFunction:
setFragmentFunctionName:
setFragmentIntersectionFunctionTable:atBufferIndex:
setFragmentIntersectionFunctionTables:withBufferRange:
setFragmentSamplerState:atIndex:
setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setFragmentSamplerState:lodMinClamp:lodMaxClamp:lodBias:atIndex:
setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setFragmentSamplerStates:withRange:
setFragmentShader:
setFragmentTexture:atIndex:
setFragmentTexture:atTextureIndex:samplerState:atSamplerIndex:
setFragmentTextures:withRange:
setFragmentVisibleFunctionTable:atBufferIndex:
setFragmentVisibleFunctionTables:withBufferRange:
setFrame:
setFrame:display:
setFrameA:
setFrameB:
setFrameBufferBindings:
setFrameConfigurationWithImmersiveEnvironmentCurves:
setFrameRate:
setFrameSize:
setFramebufferOnly:
setFreeAxes:
setFrequency:
setFresnelExponent:
setFriction:
setFromAngle:
setFromShift:
setFromValue:
setFromZ:
setFrontFaceStencil:
setFrontFacingWinding:
setFrozen:
setFunction:atIndex:
setFunctionCount:
setFunctions:
setGainColor:
setGainOffset:
setGamma:
setGammaColor:
setGeneratedTexturePath:
setGeodesic:
setGeometryDescriptors:
setGeometryModificationCount:
setGeometryShader:
setGimbalLockEnabled:
setGimbalLockMode:
setGizmo:
setGrain:
setGrainIntensity:
setGrainIsColored:
setGrainScale:
setGraphicalSelectionEnabled:
setGravity:
setGravityValue:
setHalfExtent:
setHalfExtentValue:
setHazardTrackingMode:
setHeight:
setHeightSegmentCount:
setHidden:
setHittable:
setHorizonElevation:
setHorizontalMaximumAngle:
setIBLParametersWithEntity:
setIBLParametersWithTag:
setIBLParametersWithUrl:texture:
setIESProfile:
setIESProfileURL:
setIdentifier:
setImGUIEnabled:
setImage:
setImageFrameStyle:
setImageblockWidth:height:
setImmediateMode:
setImmediateModeRestrictedContext:
setIndex:
setIndexBufferOffset:
setIndexOfRefraction:
setIndexType:
setIndirectCommandBuffer:atIndex:
setIndirectCommandBuffers:withRange:
setInertiaEnabled:
setInertiaFriction:
setInfluenceFactor:
setInnerConeAngle:
setInputPrimitiveTopology:
setInputWidth:
setInsideTessellationFactor:
setInstance:
setInstanceCount:
setInstanceDescriptorBuffer:
setInstancedAccelerationStructures:
setIntArray:count:
setIntensity:
setInteractionMode:
setInternalPixelFormat:
setInternalPixelFormatDepth:
setIntersectionFunctionTable:atBufferIndex:
setIntersectionFunctionTable:atIndex:
setIntersectionFunctionTableOffset:
setIntersectionFunctionTables:withBufferRange:
setIntersectionFunctionTables:withRange:
setInvView:
setIrradianceData:
setIsAuthoringWorld:
setIsEnabled:
setIsFrozen:
setIsJoint:
setIsOpaque:
setIsOrthographic:
setIsPlaying:
setIsTargetFromHitTest:
setIsTextureSource:
setIsTombstoned:
setIsVFX2:
setIterationCount:
setJitterOffsetX:
setJitterOffsetY:
setJitteringEnabled:
setJoint:
setKeepTargetDirection:
setKeyCodeConfiguration:
setKeyPath:
setKeyPathDst:
setKeyPathSrc:
setKeyTimes:
setLabel:
setLanguageVersion:
setLastFrameTime:
setLastFrameWorldTransform:
setLateLatchingPatchHandler:
setLaunchPath:
setLayer:
setLayer:atIndex:
setLayerContentsRedrawPolicy:
setLength:
setLengthSegmentCount:
setLensBlur:
setLevel:
setLevelsOfDetail:
setLibrary:
setLiftColor:
setLiftOffset:
setLight:
setLightBufferBindings:
setLightParametersOn:parameters:
setLightType:
setLineBreakMode:
setLineWidth:
setLinearExtendedSRGBColor:
setLinearRestingThreshold:
setLinearSleepingThreshold:
setLinkedFunctions:
setListenerPosition:
setListenerVectorOrientation:
setLoadAction:
setLoadBindingsMetadata:
setLoadingPolicy:
setLocalFront:
setLocalFrontValue:
setLockCullMode:
setLockFillMode:
setLookUpFoundInstance:
setLookUpKey:
setLoops:
setLowLatency:
setMTLTextureCache:
setMagFilter:
setMagnificationFilter:
setManager:
setMappingChannel:
setMargin:
setMaskCenter:
setMaskRadius:
setMass:
setMaterial:
setMaterialFace:
setMaterialModificationCount:
setMaterials:
setMatrix4:
setMatrix:
setMaxAllowedRotationAngle:
setMaxAllowedRotationAngle:forJoint:
setMaxAnisotropy:
setMaxTessellationFactor:
setMaxValue:
setMaximumAngularLimit1:
setMaximumAngularLimit2:
setMaximumAngularLimit:
setMaximumDistance:
setMaximumDrawableCount:
setMaximumEdgeLength:
setMaximumExposure:
setMaximumHorizontalAngle:
setMaximumLinearAcceleration:
setMaximumLinearLimit:
setMaximumLinearVelocity:
setMaximumPointScreenSpaceRadius:
setMaximumShadowDistance:
setMaximumTwistAngle:
setMaximumVerticalAngle:
setMesh:
setMeshAccelerationStructure:atBufferIndex:
setMeshBuffer:offset:atIndex:
setMeshBufferOffset:atIndex:
setMeshBuffers:offsets:withRange:
setMeshBytes:length:atIndex:
setMeshFunction:
setMeshIntersectionFunctionTable:atBufferIndex:
setMeshIntersectionFunctionTables:withBufferRange:
setMeshRef:
setMeshSamplerState:atIndex:
setMeshSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setMeshSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setMeshTexture:atIndex:
setMeshTextures:withRange:
setMeshVisibleFunctionTable:atBufferIndex:
setMeshVisibleFunctionTables:withBufferRange:
setMetadataWithKey:value:
setMetalBinaryArchiveURLs:
setMetalLibraryURL:
setMinFilter:
setMinValue:
setMinificationFilter:
setMinimumAngularLimit:
setMinimumDistance:
setMinimumExposure:
setMinimumHorizontalAngle:
setMinimumLanguageVersion:
setMinimumLinearLimit:
setMinimumPointScreenSpaceRadius:
setMinimumVerticalAngle:
setMipFilter:
setMipmapLevelCount:
setMkSemantic:
setMlDelegate:
setMode:
setModel:
setMomentOfInertia:
setMomentOfInertiaValue:
setMorpher:
setMotionBlur:
setMotionBlurIntensity:
setMotionTexture:
setMotionTextureFormat:
setMotionVectorScaleX:
setMotionVectorScaleY:
setMotorMaximumForce:
setMotorMaximumTorque:
setMotorTargetAngularVelocity:
setMotorTargetLinearVelocity:
setMovableByWindowBackground:
setMtlTexture:
setMuted:
setNSView:
setName:
setNavigationCameraController:
setNearVisibilityDistance:
setNeedsDisplay:
setNeedsDisplayOnBoundsChange:
setNeedsRenderResource:
setNext:
setNode:
setNodeBufferBindings:
setNodeRef:
setNsWindow:
setNsWindowLayer:
setNumberOfTickMarks:
setObject:atIndexedSubscript:
setObject:forKey:
setObject:forKeyedSubscript:
setObjectAccelerationStructure:atBufferIndex:
setObjectBufferOffset:atIndex:
setObjectBuffers:offsets:withRange:
setObjectBytes:length:atIndex:
setObjectController:
setObjectFunction:
setObjectID:
setObjectIntersectionFunctionTable:atBufferIndex:
setObjectIntersectionFunctionTables:withBufferRange:
setObjectName:
setObjectPath:
setObjectPathArray:
setObjectSamplerState:atIndex:
setObjectSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setObjectSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setObjectSamplerStates:withRange:
setObjectTexture:atIndex:
setObjectTextures:withRange:
setObjectThreadgroupMemoryLength:atIndex:
setObjectVisibleFunctionTable:atBufferIndex:
setObjectVisibleFunctionTables:withBufferRange:
setOccluderCategoryBitMask:
setOcclusion:
setOffset:
setOpacity:
setOpaque:
setOperation:
setOptions:
setOrientationOffset:
setOrientationValue:
setOrthographicScale:
setOuterConeAngle:
setOutputHeight:
setOutputTexture:
setOutputTextureFormat:
setOutputURL:
setOutputVolume:
setOverrides:
setOwnerWithIdentity:
setPanSensitivity:
setParallaxCenterOffset:
setParallaxCorrectionEnabled:
setParallaxExtentsFactor:
setParameterOf:named::
setParameterOf:named:type:size:with:
setParameterOf:named:with:
setParametricType:
setParentView:
setParticleCollider:
setParticleEmitter:
setPassBufferBindings:
setPassDescriptor:
setPath:
setPathItems:
setPaused:
setPaused:nextFrameTimeHint:lastUpdate:
setPeerPid:
setPeerTaskIdentity:
setPhysicsShape:
setPipeRadius:
setPipeSegmentCount:
setPitch:
setPivot:
setPivotValue:
setPixelBuffer:fromDevice:
setPlaybackSpeed:
setPlayer:
setPlaying:
setPointLightParametersWithZNear:zFar:
setPointOfCulling:
setPointOfView:animate:
setPointOfView:updateUpTransform:
setPointSize:
setPointSourceInHeadMode:
setPosition:
setPositionOffset:
setPositionValue:
setPositional:
setPostProjectionTransform:
setPostProjectionTransformScale:
setPostProjectionTransformTranslation:
setPostRenderCallback:
setPrecomputedLightingEnvironment:
setPrefab:
setPreferredFilename:
setPreferredFrameRate:
setPreferredFramesPerSecond:
setPreprocessorMacros:
setPresentsWithTransaction:
setPreserveScale:
setPrimitiveRange:
setPrimitiveRanges:
setPrimitiveRestartEnabled:
setPrimitiveRestartEnabled:index:
setPrimitiveType:
setPrivateFunctions:
setProbeExtents:
setProbeType:
setProbeUpdateType:
setProgram:
setProgress:
setProjection:
setProjectionDirection:
setProjectionMatrix:
setProjectionTransform:
setProvokingVertexMode:
setPurgeableState:
setQuaternion:
setQuatfArray:count:atTime:
setQuatfValue:
setQuatfValue:atTime:
setQuery:
setRAddressMode:
setREMeshDataBinding:positionData:normalData:colorData:
setRadialSegmentCount:
setRadialSpan:
setRadianceData:
setRadius:
setRasterSampleCount:
setRasterizationEnabled:
setRasterizationRateMap:
setRasterizerStates:
setRate:
setRawQuilt:
setRawValue:
setReadMask:
setReadabilityHandler:
setReadonly:
setReadsFromDepthBuffer:
setRecordedMetalBinaryArchiveURL:
setReferenceCount:
setReferenceURL:
setReferencedNode:
setReflectionCategoryBitMask:
setReflectionFalloffEnd:
setReflectionFalloffStart:
setReflectionResolutionScaleFactor:
setReflectionSampleCount:
setReflectivity:
setRegistry:
setRemoteEditionEndpoint:
setRemotePreviewDelegate:
setRemove:
setRemoveButton:
setRemovedOnCompletion:
setRenderMode:
setRenderPassIdentifier:
setRenderPassName:
setRenderPassParameters:
setRenderPipelineState:
setRenderPipelineStates:withRange:
setRenderTargetArrayLength:
setRenderer:
setRendererKind:
setRenderingAlgorithm:
setRenderingOrder:
setRendersContinuously:
setRendersIntoMaterial:
setRepeatDuration:
setReplayLoopRange:
setReplicatesOrientation:
setReplicatesPosition:
setReplicatesScale:
setReplicationDelegate:
setRepresentedObject:
setRequireLoadFinalTexture:
setRequiresSecureCoding:
setResizingMode:
setResolveDepthPlane:
setResolveLevel:
setResolveSlice:
setResolveTexture:
setResource:ofType:atIndices:
setResourceManagerMonitor:
setResourceOptions:
setResourcePath:
setResponsibleProcess:
setResting:
setRgbBlendOperation:
setRi:
setRollingFriction:
setRootEntityTransform:::
setRootLayer:
setRootNode:
setRootNode:forLayer:
setRootTransform:::
setRotation:
setRotationMode:
setRotationSensitivity:
setRotationValue:
setSAddressMode:
setSampleBuffer:
setSampleBuffer:fromDevice:
setSampleBufferDelegate:queue:
setSamplerState:atIndex:
setSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setSamplerStates:withRange:
setSaturation:
setScale:
setScaleValue:
setScene:
setSceneScale:
setSceneTransform:::
setScissorRects:count:
setScope:
setScreenSize:
setScreenSpaceAmbientOcclusionBias:
setScreenSpaceAmbientOcclusionDepthThreshold:
setScreenSpaceAmbientOcclusionIntensity:
setScreenSpaceAmbientOcclusionNormalThreshold:
setScreenSpaceAmbientOcclusionRadius:
setScreenSpaceReflectionDepthThreshold:
setScreenSpaceReflectionMaximumDistance:
setScreenSpaceReflectionSampleCount:
setScreenTransform:
setSeekStep:
setSegmentCount:
setSelecting:
setSelectionDelegate:
setSelectionIsReadonly:
setSelectionTransformMode:
setSelector:
setSelfIlluminationOcclusion:
setSemantic:
setSemantic:forSymbol:
setSemantic:forSymbol:options:
setSemanticInfos:
setSemanticsCount:
setSensorHeight:
setSensorVerticalAperture:
setSession:
setSettings:
setSetupAsTemplate:
setSetupAsyncRuntime:
setSetupRenderer:
setShadableBufferBindings:
setShaderModifiers:
setShadingModel:
setShadowBias:
setShadowCascadeCount:
setShadowCascadeSplittingFactor:
setShadowIntensity:
setShadowMapSize:
setShadowParametersOn:castsShadows:tiles:count:depthBias:
setShadowRadius:
setShadowSampleCount:
setShape:
setShapeNode:
setShapes:
setShininess:
setShouldBakeDirectLighting:
setShouldBakeIndirectLighting:
setShouldClearCPUDataAfterUpload:
setShouldLoadFinalTexture:
setShouldMaximizeConcurrentCompilation:
setShouldMorphNormals:
setShouldPresentAfterMinimumDuration:
setShouldSnapOnGrid:
setShouldSnapToAlign:
setShouldStream:
setShoulderAngle:
setShoulderLength:
setShoulderStrength:
setShowStatistics:
setShowsAlpha:
setShowsAuthoringEnvironment:
setShowsDebugUI:
setShowsStatistics:
setSimdTarget:
setSimdTransform:
setSimdUp:
setSimdWorldTransform:
setSimulateCommandBufferFailure:
setSize:
setSkeleton:
setSkinner:
setSkipFramesIfNoDrawableAvailable:
setSkipMorphTargets:
setSlice:
setSmoothingMode:
setSmoothness:
setSoftness:
setSource:
setSourceAlphaBlendFactor:
setSourceFile:
setSourceMode:
setSourceObject:
setSourceRGBBlendFactor:
setSourceReplicationDelegate:
setSpecializedName:
setSpeed:
setSphericalHarmonicsCoefficients:
setSpotFalloffExponent:
setSpotInnerAngle:
setSpotLightParametersWithOuterAngle:innerAngle:zNear:zFar:
setSpotOuterAngle:
setSsao:
setStackControl:
setStageInRegion:
setStageInRegionWithIndirectBuffer:indirectBufferOffset:
setStageInputDescriptor:
setStageInputOutputBuffersToComputeEncoder:
setStageInputOutputBuffersToCurrentComputeEncoder
setStageInputOutputBuffersToEncoder:
setStandardError:
setStandardOutput:
setStartTime:
setState:
setState:ofLayer:transitionSpeed:
setStateManager:
setStates:
setStatsDrawcallCount:
setStatsPrimitiveCount:
setStatsVertexCount:
setStencilAttachmentPixelFormat:
setStencilCleared
setStencilCompareFunction:
setStencilFailureOperation:
setStencilFrontReferenceValue:backReferenceValue:
setStencilReferenceValue:
setStencilResolveFilter:
setStencilResolveTexture:slice:depthPlane:level:
setStencilResolveTexture:slice:depthPlane:level:yInvert:
setStencilStoreAction:
setStencilStoreActionOptions:
setStepFunction:
setStepRate:
setStickyAxis:
setStoreActionOptions:
setStrength:
setStride:
setString:
setStyleMask:
setSubdivisionLevel:
setSubp:
setSucceded:
setSuperSampling:
setSuperSamplingFactor:
setSupportArgumentBuffers:
setSurroundToSelect:
setSwizzle:
setSyncTimeWithCoreAnimation:
setTAddressMode:
setTable:
setTarget:
setTargetDirection:
setTargetOffset:
setTargetOffsetValue:
setTargetPosition:
setTargetPositionValue:
setTargets:
setTargets:withInBetweenTargetCounts:inBetweenWeights:
setTargetsAndInBetweens:inBetweenCounts:inBetweenWeights:correctives:driverCounts:driverIndices:inBetweenCounts:inBetweenWeights:
setTensionValues:
setTessellationControlPointIndexType:
setTessellationControlShader:
setTessellationEvaluationShader:
setTessellationFactorBuffer:offset:instanceStride:
setTessellationFactorFormat:
setTessellationFactorScale:
setTessellationFactorScaleEnabled:
setTessellationFactorStepFunction:
setTessellationOutputWindingOrder:
setTessellationPartitionMode:
setTexture:
setTexture:atIndex:
setTextureComponents:
setTextureProvider:
setTextureSamplerValue:
setTextures:withRange:
setThreadGroupSizeIsMultipleOfThreadExecutionWidth:
setThreadgroupMemoryLength:atIndex:
setThreadgroupMemoryLength:offset:atIndex:
setThreshold:
setThresholdSmoothness:
setTileAccelerationStructure:atBufferIndex:
setTileBuffer:offset:atIndex:
setTileBufferOffset:atIndex:
setTileBuffers:offsets:withRange:
setTileBytes:length:atIndex:
setTileIntersectionFunctionTable:atBufferIndex:
setTileIntersectionFunctionTables:withBufferRange:
setTileSamplerState:atIndex:
setTileSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setTileSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setTileTexture:atIndex:
setTileTextures:withRange:
setTileVisibleFunctionTable:atBufferIndex:
setTileVisibleFunctionTables:withBufferRange:
setTilt:
setTime:
setTimeOffset:
setTimeScale:
setTimeStamp:
setTimeStep:
setTimingFunction:
setTimingFunctions:
setTitle:
setToAngle:
setToShift:
setToValue:
setToeLength:
setTokenArray:
setTokenValue:
setToolTip:
setTopRadius:
setTransform:
setTransformFeedbackState:
setTransientDrawCall:
setTransparencyMode:
setTriangleCount:
setTriangleFillMode:
setTriangleFrontFillMode:backFillMode:
setTriggersEnabled:
setTruckSensitivity:
setTruncationMode:
setType:
setURLValue:
setUnMultBlending:
setUnderlyingQueue:
setUnifiesNormals:
setUp:
setUpAxis:
setUpVector:
setUpVectorValue:
setUsage:
setUseGammaBlending:
setUseHighQuality:
setUsedCount:
setUserInfo:
setUserManual:
setUsesAbsoluteTime:
setUsesDefaultMomentOfInertia:
setUsesDepthPrePass:
setUsesOrthographicProjection:
setUuid:
setValue:
setValue:atPath:
setValue:forKey:
setValue:forKeyPath:
setValue:forProperty:
setValue:forUndefinedKey:
setValue:to:keyPath:
setValueForKey:optionKey:options:
setValueTransformer:forName:
setValues:
setVector2:
setVector3:
setVector4:
setVelocity:
setVelocityFactor:
setVelocityFactorValue:
setVelocityValue:
setVersion:
setVertexAccelerationStructure:atBufferIndex:
setVertexAmplificationCount:viewMappings:
setVertexAmplificationEnabled:
setVertexAmplificationMode:value:
setVertexBuffer:
setVertexBuffer:offset:attributeStride:atIndex:
setVertexBufferOffset:
setVertexBufferOffset:atIndex:
setVertexBufferOffset:attributeStride:atIndex:
setVertexBuffers:offsets:attributeStrides:withRange:
setVertexBuffers:offsets:withRange:
setVertexBytes:length:atIndex:
setVertexBytes:length:attributeStride:atIndex:
setVertexDescriptor:
setVertexFunction:
setVertexFunctionName:
setVertexIntersectionFunctionTable:atBufferIndex:
setVertexIntersectionFunctionTables:withBufferRange:
setVertexSamplerState:atIndex:
setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setVertexSamplerState:lodMinClamp:lodMaxClamp:lodBias:atIndex:
setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setVertexSamplerStates:withRange:
setVertexShader:
setVertexStride:
setVertexTexture:atIndex:
setVertexTextures:withRange:
setVertexVisibleFunctionTable:atBufferIndex:
setVertexVisibleFunctionTables:withBufferRange:
setVerticalMaximumAngle:
setVideoMirrored:
setVideoOrientation:
setVideoSettings:
setVideoSourceFormat:
setView:
setViewMatrix:
setViewpointCoordinateSpace:
setViewpoints:
setViewport:
setViewportTransformEnabled:
setViewports:count:
setVignetting:
setVignettingAnamorphic:
setVignettingIntensity:
setVignettingRadius:
setVignettingSoftness:
setVisibilityResultBuffer:
setVisibleFunctionTable:atBufferIndex:
setVisibleFunctionTable:atIndex:
setVisibleFunctionTables:withBufferRange:
setVisibleFunctionTables:withRange:
setVolume:
setWaitUntilCompleted:
setWantsAdaptation:
setWantsAdaptiveSubdivision:
setWantsDepthOfField:
setWantsExposureAdaptation:
setWantsExtendedDynamicRange:
setWantsExtendedDynamicRangeContent:
setWantsHDR:
setWantsLayer:
setWantsScreenSpaceReflection:
setWantsWideGamut:
setWeakRef:
setWeight:
setWeight:atTargetIndex:
setWeight:forTargetAtIndex:
setWeight:forTargetNamed:
setWeightIncrementalThreshold:
setWeights:
setWhiteBalanceTemperature:
setWhiteBalanceTint:
setWhitePoint:
setWidth:
setWidthSegmentCount:
setWillStartPlayback:
setWithArray:
setWithCapacity:
setWithObject:
setWithSet:
setWorld:
setWorld:completionHandler:
setWorldOrientation:
setWorldOrientationValue:
setWorldPosition:
setWorldPositionValue:
setWorldTransform:
setWorldTransformValue:
setWorldUp:
setWrapS:
setWrapT:
setWrapped:
setWriteMask:
setWritesToDepthBuffer:
setXAlignment:
setYAlignment:
setZAlignment:
setZFar:
setZNear:
setZoomFactor:
set_allowsDefaultLightingEnvironmentFallback:
set_aspectRatio:
set_collectCompilationErrors:
set_computedLightingEnvironmentMapsPath:
set_drawableSafeAreaInsets:
set_encodeDataAsHalf:
set_legacyRenderer:
set_renderTargetSize:
set_resourceManagerMonitor:
set_screenTransform:
set_shadowCascadeDebugFactor:
set_shouldForwardWorldRendererDelegationMessagesToPrivateRendererOwner:
set_sphericalHarmonics:
set_subdivisionSettings:
set_superSamplingFactor:
set_triggersEnabled:
set_viewport:
set_wantsSeparateGeometryElements:
set_wantsWorldRendererDelegationMessages:
setup
setupAsyncRuntime
setupAuthoringEnv2
setupAuthoringEnvironment
setupChildsArrayIfNeeded
setupClones
setupDisplayLinkOutputHandler:
setupFinalMeshWithMesh:entityName:info:usingDrawIndirect:
setupInitialBuffersWithBaseMesh:entityName:info:
setupLegacyRendererWithCommandQueue:
setupMorphTargetsWithComputeContext:
setupNode
setupRenderer
setupWithComputeContext:
shFromCPU:commandBuffer:
shadable
shadableBufferBindings
shaderCompilationGroup
shaderModifiersArgumentWithName:
shaderModifiersArguments
shaderValidation
shadingModel
shadowBias
shadowCascadeCount
shadowCascadeSplittingFactor
shadowColor
shadowMapSize
shadowRadius
shadowSampleCount
shape
shapeNode
shapeSetTargetCounts
shapeSetTargetWeights
shapeWithNode:flattened:
shapeWithPath:extrusionDepth:
shapeWithShapes:transforms:
shapes
shareable
sharedCaptureManager
sharedColorPanel
sharedRegistry
shininess
shouldBakeDirectLighting
shouldBakeIndirectLighting
shouldClearCPUDataAfterUpload
shouldDelegateARCompositing
shouldFlip
shouldLoadFinalTexture
shouldMaximizeConcurrentCompilation
shouldMorphNormals
shouldObserveApplicationStateToPreventBackgroundGPUAccess
shouldPresentAfterMinimumDuration
shouldSnapOnGrid
shouldSnapToAlign
shouldStream
shouldUseDrawCallHandler
shoulderAngle
shoulderLength
shoulderStrength
showManipulators
showStatistics
showsAuthoringEnvironment
showsDebugUI
signal
simdConvertPointFromWindow:
simdTarget
simdUp
simulateCommandBufferFailure
size
sizeValue
skeleton
skinnerRef
skinnerWithBaseMesh:bones:boneInverseBindTransforms:boneWeights:boneIndices:
skinnerWithSkinnerRef:
skipExecute
skipMorphTargets
slice
sliderConstraint
sliderWithBody:axis:anchor:
sliderWithBodyA:axisA:anchorA:bodyB:axisB:anchorB:
smoothingMode
smoothness
snapGuideIndexesOnAxis:
snapInfoAtIndex:axis:
snapshot
snapshotImageWithSize:
snapshotImageWithSize:deltaTime:
snapshotRendererWithSize:
snapshotWithSize:
snapshotWithSize:deltaTime:
snapshotWithSize:pointOfView:
softness
sortUsingComparator:
sortedArrayUsingComparator:
sortedArrayUsingSelector:
source
sourceFile
sourceMode
sourceObject
sourceRendererForEngineContext:source:textureSource:targetTexture:
sourceReplicationDelegate
sourceState
sparseTileSizeInBytes
sparseTileSizeInBytesForSparsePageSize:
sparseTileSizeWithTextureType:pixelFormat:sampleCount:
sparseTileSizeWithTextureType:pixelFormat:sampleCount:sparsePageSize:
specular
specularDFGDiffuseHammonTextureWithRenderContext:
speed
speedFactor
sphereWithRadius:
sphereWithRadius:options:
sphericalHarmonicsCoefficients
sphericalHarmonicsForEnvironmentTexture:order:commandBuffer:
splitInputOutputStructsIfNeededForSourceCode:generatedFromReplacementStrings:perPixelLighting:clipDistanceCount:
spotFalloffExponent
spotInnerAngle
spotOuterAngle
springField
srcPositionBuffer
srcTangentBuffer
ssao
stackControl
stackSelectionChanged:
stageInputAttributes
stageInputDescriptor
standardUserDefaults
startAndReturnError:
startCaptureWithDescriptor:error:
startCollectingPerformanceStatisticsForPid:
startManipulatingPointOfView
startProcessingRendererElementsWithEngineIterationContext:
startRunning
startRuntimeThread
startSessionAtSourceTime:
startTime
startWriting
state
stateItems
stateManager
stateWithName:
states
staticBody
staticThreadgroupMemoryLength
stats
statsDrawcallCount
statsPrimitiveCount
statsVertexCount
status
stencilAttachment
stencilCompareFunction
stencilFailureOperation
stencilInfo
stencilPixelFormat
stepFunction
stepRate
stickyAxis
stiffness
stop
stop:
stopCapture
stopCollectingPerformanceStatisticsForPid:
stopIfNeeded
stopInertia
stopManipulatingPointOfView
stopReplicationWithModel:runtime:
stopRunning
stopWithBlendOutDuration:
storageMode
storeAction
storeActionOptions
streamForEntryName:
strength
stride
string
stringByAppendingFormat:
stringByAppendingString:
stringByDeletingLastPathComponent
stringByDeletingPathExtension
stringByExpandingTildeInPath
stringByReplacingCharactersInRange:withString:
stringByReplacingMatchesInString:options:range:withTemplate:
stringByReplacingOccurrencesOfString:withString:
stringByReplacingOccurrencesOfString:withString:options:range:
stringByStandardizingPath
stringByTrimmingCharactersInSet:
stringForKey:
stringFromByteCount:
stringValue
stringWithCString:encoding:
stringWithCapacity:
stringWithContentsOfFile:encoding:error:
stringWithContentsOfURL:encoding:error:
stringWithFormat:
stringWithString:
stringWithUTF8String:
strongToStrongObjectsMapTable
structType
subAnimations
subarrayWithRange:
subdataWithRange:
subdivisionLevel
subdivisionScheme
subdivisionSurfaceTessellationDraw:
submeshWithVFXModelElement:
submeshWithVFXModelElement:bufferAllocator:
submeshWithVFXModelElement:bufferAllocator:positionSourceChannel:
submeshes
subp
substringFromIndex:
substringToIndex:
substringWithRange:
subsurface
subsurfaceRadius
subviews
succeded
sunElevation
superSamplingFactor
superclass
superlayer
supportIndirectCommandBuffers
supportedFileUTIsForExport
supportedFileUTIsForImport
supportedOutputs
supports32BitFloatFiltering
supports32BitMSAA
supportsBCTextureCompression
supportsBaseVertexInstanceDrawing
supportsCounterSampling:
supportsDepthClipMode
supportsDynamicLibraries
supportsFeatureSet:
supportsFunctionPointers
supportsFunctionPointersFromRender
supportsLayeredRendering
supportsMSAADepthResolve
supportsMSAAStencilResolve
supportsMTLFeatureSet:
supportsMeshShaders
supportsMetal
supportsNonUniformThreadgroupSize
supportsOffset
supportsPrimitiveMotionBlur
supportsProgrammableBlending
supportsPullModelInterpolation
supportsQueryTextureLOD
supportsRasterizationRateMapWithLayerCount:
supportsRaytracing
supportsRaytracingFromRender
supportsReadWriteTextureCubeArguments
supportsRenderDynamicLibraries
supportsSecureCoding
supportsShaderBarycentricCoordinates
supportsTessellation
supportsTextureCubeArray
supportsTextureSampleCount:
supportsTextureSwizzle
supportsUnalignedVertexFetch
supportsVertexAmplificationCount:
surroundToSelect
sweepTestFraction
switchToCameraNamed:
switchToNextCamera
switchToState:
syncTimeWithCoreAnimation
synchronizeResource:
systemFontOfSize:
systemFontSizeForControlSize:
tWrapMode
table
tableColumns
target
targetOffset
targetOffsetValue
targetPosition
targetPositionValue
targetShapes
targetState
targetsAndInBetween
temperature
temporalAntialiasingEnabled
temporaryDirectory
tensionValues
terminationStatus
tessellationControlShader
tessellationEvaluationShader
tessellationFactorScale
tessellationPartitionMode
tessellator
tessellatorValueDidChange
tessellatorValueDidChangeForClient:
text
textSize
textWithString:extrusionDepth:
texture2DDescriptorWithPixelFormat:width:height:mipmapped:
texture::
textureAbsolutePath
textureAtIndices:
textureBarrier
textureComponents
textureCoordinate
textureCoordinatesWithMappingChannel:
textureCubeDescriptorWithPixelFormat:size:mipmapped:
textureForAttachment:withDescriptor:
textureForEntity:isFallback:isDynamic:
textureForMaterialProperty:
textureForSliceIndex:
textureReferenceType
textureSampler
textureSamplerValue
textureSize
textureSource
textureTarget
textureType
threadDictionary
threadExecutionWidth
threadgroupSizeMatchesTileSize
threshold
thresholdMode
thresholdSmoothness
thresholdValue
tick
tickWithCommandBuffer:
tickWithDeltaTime:
tickWithDeltaTime:commandBuffer:
tileHeight
tileWidth
tilt
time
timeIntervalSinceReferenceDate
timeOffset
timeScale
timeStamp
timeStep
timestamp
timingFunction
title
toBool
toeLength
toeStrength
toggleRetina:
tokenWithString:
toneMapping
topRadius
topology
torusWithRingRadius:pipeRadius:options:
trackingAreas
tracksWithMediaCharacteristic:
transferWorld:to:
transform
transformAnimation
transformConstraintInWorldSpace:withBlock:
transformedValue:
transformedValueClass
transforms
transientDrawCall
transitions
transitionsFrom:
translateByX:Y:Z:
translateInCameraSpaceByX:Y:Z:
translateInScreenSpaceTo:viewport:
translatedEvent:
translations
transparencyMode
transparent
triggerEvent:fromView:
triggerManager
triggerRenderWith:renderer:
triggerType:event:fromView:
truckSensitivity
truncationMode
tubeWithInnerRadius:outerRadius:height:
tubeWithInnerRadius:outerRadius:height:options:
turbidity
turbulenceFieldWithSmoothness:animationSpeed:
type
typeWithIdentifier:
types
unMultBlending
unarchivedObjectOfClass:fromData:error:
unarchivedObjectOfClasses:fromData:error:
unarchiver:cannotDecodeObjectOfClassName:originalClasses:
unarchiver:didDecodeObject:
unarchiver:willReplaceObject:withObject:
unarchiverDidFinish:
unarchiverWillFinish:
unbind
unbindAnimatablePath:
unhighlightSelectedNode
unifiesNormals
uniformTessellationDrawMeshElement:forMesh:instanceCount:renderContext:
unitCube
unload
unlock
unlockLayout
unlockSnapGuides
unmapVolatileMesh:modifiedVerticesCount:
unmapVolatileMeshElement:
unregisterManagerForDevice:
unregisterPlayer:
unrolledWorldOrientation:
unsignedCharValue
unsignedIntValue
unsignedIntegerValue
unsignedLongLongValue
unsignedLongValue
unsignedShortValue
unstageTexture:commandBuffer:
upAxis
upVector
upVectorValue
update
updateActiveState
updateAtTime:
updateAtTime:deltaTime:frameIndex:
updateBounds
updateBridgedReferencesWithBridgeable:objectByIdentifier:
updateBrowseScaleFactor
updateCameraNode:withSourceNode:
updateCollisionPairs
updateCollisionPlaneWithId:center:extents:transform:
updateCollisionPlaneWithId:extents:transform:
updateConstrainedEdgeLengthTessellator:parameters:
updateDefaultShape
updateEffectNode:withSourceNode:
updateFence:
updateFence:afterStages:
updateForceField:of:
updateGlobalScale:
updateInertiaAtTime:
updateItemsPosition
updateItemsRotation:
updateItemsScale:
updateKeyboardStateAndRedrawIfNeeded:
updateLayerLatency
updateLightTypeForNode:source:light:screenspaceScalingFactor:
updateManipulatorComponents
updateManipulatorNode
updateManipulatorPosition:
updateMemoryOwnership
updatePrefab:withNewPrefab:options:
updateProbes:atTime:
updateProbes:atTime:completionHandler:
updateScreenSpaceAdaptiveTessellator:parameters:
updateSeek
updateStackControl
updateSubdivisionSurfaceTessellator:parameters:
updateTargetsTransforms
updateTexture
updateUniformTessellator:
updateVFX2RenderOutputWithPointOfView:commandBuffer:
updateWithAbsoluteTime:
updateWithComputeContext:positions:normals:tangents:
updateWithContext:
updateWithDeltaTime:
updateWithRenderer:
updateWorldTransform:of:
upperAtmosphereScattering
usage
useDitherFade
useGammaBlending
useHeap:
useHeaps:count:stages:
useHighQuality
useOrbitInteractionMode
useResidencySet:
useResidencySets:count:
useResource:usage:
useResource:usage:stages:
useResourceGroup:usage:stages:
useResources:count:usage:
useResources:count:usage:stages:
usedCount
usedResources
usedSize
userAnimation
userInfo
userManual
usesAbsoluteTime
usesBoundsInPixels
usesDefaultMomentOfInertia
usesDepthPrePass
usesOrthographicProjection
usesSeparateWorkGroup
uuid
validateAndCommitValueInEditor:editingIsEnding:errorUserInterfaceHandled:
validateClone
validateClones
value
valueAtPath:
valueForKey:
valueForKeyPath:
valueForProperty:
valueForUndefinedKey:
valueWithBytes:objCType:
valueWithCATransform3D:
valueWithMatrix4:
valueWithPointer:
valueWithRect:
valueWithSize:
valueWithVFXFloat2:
valueWithVFXFloat3:
valueWithVFXFloat4:
valueWithVFXMatrix4:
valueWithVector3:
valueWithVector4:
values
vectorCount
velocity
velocityFactor
velocityFactorValue
velocityValue
vertexAmplificationEnabled
vertexAttributeDataForAttributeNamed:
vertexAttributes
vertexBindings
vertexBufferBoundAt:
vertexBuffers
vertexBuffersUsageMask
vertexCount
vertexCreaseCount
vertexCreaseIndices
vertexCreases
vertexDescriptor
vertexFunction
vertexFunctionName
vertexShader
verticalMaximumAngle
verticalSampleStorage
verticesCount
vfxAssetsFrameworkBundle
vfxLibraryURLFor:
vfx_CFXColorIgnoringColorSpace:success:
vfx_backingLayer
vfx_colorComponentsForModelIO
vfx_colorWithCFXColor:
vfx_colorWithCFXColor:ignoringColorSpace:
vfx_colorWithLinearDisplayP3Red:green:blue:alpha:
vfx_colorWithLinearSRGBRed:green:blue:alpha:
vfx_colorWithModelIORed:green:blue:alpha:options:
vfx_compressedDataUsingCompressionAlgorithm:
vfx_decodeArrayOfObjectsOfClass:containingNestedContainersForKey:
vfx_decodeArrayOfObjectsOfClass:forKey:
vfx_decodeArrayOfObjectsOfClasses:containingNestedContainersForKey:
vfx_decodeArrayOfObjectsOfClasses:forKey:
vfx_decodeDictionaryWithKeysOfClass:objectsOfClass:containingNestedContainersForKey:
vfx_decodeDictionaryWithKeysOfClass:objectsOfClass:forKey:
vfx_decodeDictionaryWithKeysOfClasses:objectsOfClasses:containingNestedContainersForKey:
vfx_decodeDictionaryWithKeysOfClasses:objectsOfClasses:forKey:
vfx_enumerateKeysAndValuesUsingBlock:
vfx_inLiveResize
vfx_indexedDataDecodingDeltaWithBytesPerIndex:
vfx_indexedDataDecodingHighWatermarkWithBytesPerIndex:
vfx_indexedDataDecodingTrianglePairsWithBytesPerIndex:
vfx_indexedDataEncodingDeltaWithBytesPerIndex:
vfx_indexedDataEncodingHighWatermarkWithBytesPerIndex:
vfx_indexedDataEncodingTrianglePairsWithBytesPerIndex:
vfx_setBackingLayer:
vfx_stringByReplacingCharactersInRanges:withStrings:
vfx_uncompressedDataUsingCompressionAlgorithm:
videoMirrored
view
viewDidChangeBackingProperties
viewDidDrawAtTime:
viewDidEndLiveResize
viewDidMoveToWindow
viewMatrix
viewMatrix0
viewMatrix1
viewWillDrawAtTime:
viewWillMoveToWindow:
viewWillStartLiveResize
viewedObjectSphere
viewpointCoordinateSpace
viewpoints
viewport
viewportDependant
viewportMousePosition
viewports::
vignetting
vignettingAnamorphic
vignettingIntensity
vignettingRadius
vignettingSoftness
volatileOffset
volatileSize
volatileStride
volume
vortexField
vrrEnabled
vrrMapScreenSize
wait
waitForFence:
waitForFence:beforeStages:
waitForShadersCompilation
waitUntilCompleted
waitUntilExit
waitUntilScheduled
wantsAdaptiveSubdivision
wantsDepthOfField
wantsExposureAdaptation
wantsExtendedDynamicRange
wantsHDR
wantsLayer
wantsRedraw
wantsScreenSpaceReflection
wantsWideGamut
warnings
wasAddedToWorld:
weakToStrongObjectsMapTable
weight
weightAtTargetIndex:
weightForTargetAtIndex:
weightForTargetNamed:
weightIncrementalThreshold
weightIndexStringForIndex:
whiteBalanceTemperature
whiteBalanceTint
whiteColor
whitePoint
whitespaceAndNewlineCharacterSet
width
widthSegmentCount
willBeRemovedFromWorld:
willChangePointOfView
willChangeValueForKey:
willStartPlayback
window
windowChangedScreen:
windowNumber
windowWillClose:
windowWithContentViewController:
withDefaultIBLConstantBuffer::
withDefaultLightConstantBuffer::
withPointerToParameterOf:named:block:
workingColorSpace
world
world:nodeAtPath:type:
worldBoundingBox
worldCoordinates
worldDidChange
worldFront
worldNamed:
worldNamed:options:
worldNormal
worldOrientation
worldOrientationValue
worldPosition
worldPositionValue
worldRef
worldRenderer
worldRight
worldSpaceDistance
worldTransform
worldTransformValue
worldUpValue
worldWillDie
worldWithData:options:error:
worldWithMDLAsset:
worldWithMDLAsset:options:
worldWithSCNURL:options:error:
worldWithURL:options:error:
worldWithURL:options:transferringConfigurationFrom:error:
worldWithWorldRef:
wrapS
wrapT
writeBool:to:
writeBytes:length:
writeContentsForEntryName:toFile:options:error:
writeFloat:to:
writeInt16:to:
writeInt32:to:
writeInt64:to:
writeInt8:to:
writeInt:to:
writeKeyframeAnimation:to:
writeMask
writeSIMD3x3D:to:
writeSIMD3x3F:to:
writeSIMD4x4D:to:
writeSIMD4x4F:to:
writeToFile:atomically:
writeToFile:options:error:
writeToURL:
writeToURL:atomically:
writeToURL:atomically:encoding:error:
writeToURL:options:error:
writeToURL:options:originalContentsURL:error:
writeToURL:options:progressHandler:
writeToURLWithUSDKit:
writeUInt8:to:
writesColor
writesSeparateDepth
writesToDepthBuffer
xAlignment
yAlignment
year
zAlignment
zFar
zNear
zone
zoomFactor
VFXModelTessellator
NSCopying
NSSecureCoding
NSCoding
VFXEditorView
VFXCameraNavigationControllerDelegate
NSObject
MTLTexture
MTLResource
MTLAllocation
VFXMetalBackingLayer
///'@
VFXCameraEffect
VFXAnimatable
VFXCameraEffectDepthOfField
VFXCameraEffectMotionBlur
VFXCameraEffectGrain
VFXCameraEffectExposure
VFXCameraEffectToneMapping
VFXCameraEffectBloom
VFXCameraEffectVignetting
VFXCameraEffectColorFringe
VFXCameraEffectColorGrading
VFXCameraEffectLensBlur
VFXCameraEffectChromaticTransform
VFXCameraEffectDoughnutBokeh
VFXCameraEffectSSAO
VFXShaderArgument
VFXShadableHelper
_VFXShadableCompilationIssue
VFXMTLTessellator
VFXModelElement
VFXMeshElement
VFXCommonProfileProgramGeneratorMetal
VFXUIProperty
VFX_NSImageFromImageValue
VFXUID_ConstantTransformer
VFXUID_NumberTransformer
VFXUIDynamicInspector
_VFXSnapshotWindow
VFXAppKitSource
VFXTextureAppKitSource
VFXAuthoringEnvironment2
VFXClock
CFXAnimationBinding
VFXLKGCalibration
VFXHolographicRenderer
VFXWorldRenderer
VFXAuthoringEnvironment
VFXCameraNavigationController
VFXEventHandler
VFXCameraControlConfiguration
VFXCameraControllerDelegate
VFXExtensions
VFXPhysicsWorld
VFXTransactionCommandObject
VFXRenderTarget
VFXNodeComponent
VFXNodeWeakComponent
VFXCommonProfileProgramCache
VFXCommonProfileProgramGenerator
VFXUIScrubberCell
VFXUIScrubber
VFXPhysicsConeTwistJoint
CFXBinding
VFXCameraController
VFXPhysicsJoint
VFXManipulableItem
VFXNodeManipulableItem
VFXJitterer
VFXModelIO
MDLMorphDeformerComponent
MDLComponent
MDLSkinDeformerComponent
VFXAdditions
VFXCoreAnimationSource
VFXTextureCoreAnimationSource
VFXParticleCollider
VFX_DisplayLinkExtensions
VFXDisplayLinkARC
VFXReferenceNode
CFXVFXRenderTargetInfo
VFXRenderTargetInfo
VFXRERenderTargetInfo
VFXMTLRenderContext
VFXBufferStream
VFXDrawCallContext
VFXMTLDeformerStack
VFXMTLDeformerInitComputeContext
VFXMTLDeformerUpdateComputeContext
VFXModelDeformerInstanceWrapper
VFXModelDeformerInitComputeContext
VFXModelDeformerUpdateComputeContext
VFXMTLSmoothNormalsDeformer
VFXMTLDeformer
VFXKeyedUnarchiver
VFXKeyedArchiver
VFXCamera
VFXKitAdditions
VFXLight
VFXIESProfile
VFXMaterial
VFXAsset
VFXShadable
VFXBehaviorSupport
_VFXNullMaterial
VFXNode
VFXBoundingBox
VFXWorld
VFXSimplePathResolver
VFXAssetPathResolver
VFXTextureSource
VFXImageSource
VFXTextureOffscreenRenderingSource
VFXSourceRendererRegistry
VFXTriggerManager
VFX_DTAdditions
VFXView
VFXBufferBinding
VFXProgramSemanticInfo
VFXProgram
VFXRenderToTextureFinalAttachmentProvider
VFXTextureAttachmentProvider
VFXRendererViewPoint
VFXRenderOptions
VFXRenderer
VFXMTLRenderContextCommandBufferStatusMonitor
VFXMTLRenderContextResourceManagerMonitor
VFXAddition
VFXStatisticsProvider
VFXPhysicsSliderJoint
VFXPrecomputedLightingEnvironment
VFXMaterialPropertyPrivate_PrecomputedLightingEnvironment
VFXDeepCopy
VFXOrderedDictionary
VFXRecursiveLock
VFXKeyframeAnimation
VFXAnimationEvent
VFXTimingFunction
VFXAnimation
VFXAnimationPlayer
VFXWorldLoader
NSKeyedUnarchiverDelegate
VFXHitTestResult
VFXMaterialPropertyTextureProvider
VFXMaterialProperty
VFXFloor
Legacy
VFXModel
VFXSkinner
VFXStateTransition
VFXStateMachine
VFXUtils
CFXIONSZipFileArchive
VFXBindingWrapper
VFXMTLLibrary
3$0"0 0
VFXMTLLibraryManager
VFXMTLShadableKey
VFXMetalWireframeResource
MTLBuffer
VFXMTLResourceManager
VFXAudioPlayer
VFXAudioSource
VFXPhysicsContact
VFXDrawableDescriptor
VFXRenderGraph
VFXPhysicsBody
VFXParametricModel
VFXDisplayLink
VFXUIImagePicker
VFXBtShapeWrapper
VFXPhysicsShape
VFXMetalLayer
VFXStateManager
VFXState
VFXStateItem
VFXBehaviorGraph
VFXEffectController
VFXGraphController
VFXSwiftCompat
ObjC
VFXModelWrapDeformerParameters
VFXModelWrapDeformer
VFXModelWrapDeformerInstance
VFXModelDeformerInstance
VFXCompositorRenderer
MTKViewDelegate
CFXEngineNotificationQueueTransientWrapper
VFXRendererOptionsPanel
VFX_NSImageFromSlotContents
VFXPhysicsBallSocketJoint
VFXRendererOptionsPanelController
1$0"0 0 0/$4
6$0"0 0 0/$4
3$0"0 0 0/$4
Compilation
VFXForceField
_CFXProgressDebugger
AVAudio3DMixing
VFXAssetNode
VFXAssetRegistry
VFXCoreAsset
VFXFileAsset
VFXTextureAsset
VFXLayerAsset
VFXClientTextureAsset
VFXPrefabAsset
VFXAnimationClip
VFXMTLMorphDeformer
VFXAVPlayerSource
VFXCaptureDeviceSource
AVCaptureVideoDataOutputSampleBufferDelegate
VFXCaptureDeviceOutputConsumerSource
VFXCaptureDeviceOutputConsumer
VFXMorpher
VFXMTLBuffer
VFXMTLResourceBinding
VFXMTLSemanticResourceBinding
VFXMTLPassResourceBinding
VFXMTLShadable
VFXMTLRenderPipeline
VFXMTLComputePipeline
VFXMTLMesh
VFXMTLMeshElement
VFXMTLBufferAllocatorSubBuffer
VFXFixedSizePage
VFXMTLBufferAllocator
VFXJSLayerJSExport
JSExport
VFX_JSSupport
VFXJSImageJSExport
VFXJSImage
NSValueJSExport
VFXJSExtension
VFXJSExtensions
JSExtension
VFXMaterialPropertyJSExport
VFXBoundingBoxJSExport
VFXBoundingSphereJSExport
VFXTransactionJSExport
VFXColorJSExport
VFXJSBasicAnimationJSExport
VFXJSAnimationGroupJSExport
VFXJSKeyframeAnimationJSExport
VFXViewJSExport
VFXMetalLayerJSExport
VFXPhysicsJointJSExport
VFXPhysicsHingeJointJSExport
VFXPhysicsContactJSExport
VFXProgramJSExport
VFXParametricModelJSExport
VFXMorpherJSExport
VFXLODJSExport
VFXRendererJSExport
VFXFloorJSExport
VFXNodeJSExport
VFXPhysicsBallSocketJointJSExport
VFXModelJSExport
VFXConstraintJSExport
VFXPhysicsSliderJointJSExport
VFXLightJSExport
VFXMaterialJSExport
VFXModelTessellatorJSExport
VFXHitTestResultJSExport
VFXLookAtConstraintJSExport
VFXPhysicsShapeJSExport
VFXModelElementJSExport
VFXModelSourceJSExport
VFXShapeJSExport
VFXCameraJSExport
VFXIKConstraintJSExport
VFXPhysicsWorldJSExport
VFXPhysicsBodyJSExport
VFXAnimationEventJSExport
VFXWorldJSExport
VFXForceFieldJSExport
VFXTextJSExport
VFXJSMediaTimingFunctionJSExport
VFXMTLOpenSubdivComputeEvaluator
OpenSubdiv
VFXUSKHelper
VFXUSKToken_helper
VFXUSKObjectPath_helper
VFXUSKData_helper
Internal
VFXBoundingSphere
VFXTransaction
VFXParticleEmitter
VFX3DConnexionDevice
VFXCameraControlEventHandler
VFXSceneKitBridge
VFXPrefab
VFXPrefabUpdateOperation
VFXPrefabUpdater
VFXMTLSkinDeformerReadOnlyBuffers
VFXMTLSkinDeformer
VFXMTLArgumentBinder
VFXMTLShaderBindingsGenerator
VFXMovieExport
VFXExportAddition
VFXExportOperation
_VFXExportOperation
VFXMovieExportOperation
Workaround
VFXModelDeformer
Textures
VFXManipulatorNodeTransformPair
VFXManipulator
VFXMesh
VFXCoreEntityHandle
VFXModelSource
VFXMeshSource
VFXUIDynamicInspectorConfiguration
VFXUIDynamicUI
VFXConstraint
VFXLookAtConstraint
VFXDistanceConstraint
VFXReplicatorConstraint
VFXAccelerationConstraint
VFXSliderConstraint
VFXAvoidOccluderConstraint
VFXBillboardConstraint
VFXConstantScaleConstraint
VFXTransformConstraint
VFXIKJoint
VFXIKConstraint
VFXUIArrayEditor
VFXUIArrayEditorController
VFXUIHandleButton
VFXUIColorWell
VFXUIBindableView
VFXUIVector4TextField
VFXUIMatrix4TextField
VFXUIVector3TextField
VFXUIVector2TextField
VFXUIPopUpButton
VFXNSZipFileArchive
VFXWeakPointer
VFXText
VFXMaterialPropertyTextureProviderSource
VFXMaterialPropertyTextureProviderHelper
VFXShape
VFXPhysicsHingeJoint
VFXLOD
RGCachedRenderCommandEncoder
MTLRenderCommandEncoder
MTLCommandEncoder
RGCachedComputeCommandEncoder
MTLComputeCommandEncoder
RGAddition
@16@0:8
B16@0:8
@24@0:8^{_NSZone=}16
v24@0:8@16
@24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
v16@0:8
{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}24@0:8@16
q16@0:8
v24@0:8q16
v20@0:8B16
f16@0:8
v20@0:8f16
Q16@0:8
v24@0:8Q16
@"NSMutableSet"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
32@0:8{CGPoint=dd}16
{?=}24@0:8@16
B40@0:816@32
48@0:8{CGPoint=dd}16@32o^^{?}40
v40@0:8@16{CGPoint=dd}24
16@0:8
Q24@0:8@16
{?="columns"[4]}
{CGPoint="x"d"y"d}
@"<VFXEditorViewDelegate>"
Q24@0:8Q16
i20@0:8I16
v24@0:8@"NSString"16
@"<MTLDevice>"16@0:8
@"<MTLHeap>"16@0:8
v104@0:8^v16Q24Q32{?={?=QQQ}{?=QQQ}}40Q88Q96
v104@0:8{?={?=QQQ}{?=QQQ}}16Q64Q72r^v80Q88Q96
v88@0:8^v16Q24{?={?=QQQ}{?=QQQ}}32Q80
v88@0:8{?={?=QQQ}{?=QQQ}}16Q64r^v72Q80
@24@0:8Q16
@64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48
@68@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64
^{__IOSurface=}16@0:8
{MTLResourceID=Q}16@0:8
{?=CCCC}16@0:8
@"<MTLTexture>"24@0:8Q16
@"<MTLTexture>"64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48
@"MTLSharedTextureHandle"16@0:8
@"<MTLTexture>"24@0:8@"<MTLDevice>"16
@"<MTLTexture>"68@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64
@"<MTLResource>"16@0:8
@"<MTLTexture>"16@0:8
@"<MTLBuffer>"16@0:8
@"VFXView"
@24@0:8^{__CFXCameraEffect=}16
v32@0:8@16@24
v28@0:8@16f24
v32@0:8@"<VFXAnimation>"16@"NSString"24
v32@0:8@"VFXAnimationPlayer"16@"NSString"24
v28@0:8@"NSString"16f24
@"VFXAnimationPlayer"24@0:8@"NSString"16
@"NSArray"16@0:8
^v16@0:8
@24@0:8^v16
^{__CFXWorld=}16@0:8
^{__CFXAnimationManager=}16@0:8
B32@0:8@16@24
v32@0:8B16@20B28
v48@0:8@16@24@32@40
B32@0:8@16^24
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"VFXOrderedDictionary"
@"NSMutableDictionary"
^{__CFXCameraEffectDepthOfField=}16@0:8
^{__CFXCameraEffectMotionBlur=}16@0:8
^{__CFXCameraEffectGrain=}16@0:8
@"<MTLTexture>"
^{__CFXCameraEffectExposure=}16@0:8
^{__CFXCameraEffectToneMapping=}16@0:8
f20@0:8f16
^{__CFXCameraEffectBloom=}16@0:8
v32@0:816
^{__CFXCameraEffectVignetting=}16@0:8
^{__CFXCameraEffectColorFringe=}16@0:8
^{__CFXCameraEffectColorGrading=}16@0:8
@"VFXMaterialProperty"
^{__CFXCameraEffectLensBlur=}16@0:8
^{__CFXCameraEffectChromaticTransform=}16@0:8
v24@0:816
^{__CFXCameraEffectDoughnutBokeh=}16@0:8
^{__CFXCameraEffectSSAO=}16@0:8
@"NSString"
^{__CFXFXRenderGraph=}16@0:8
@"VFXProgram"
@"NSDictionary"
@"NSArray"
@"NSNumber"
@64@0:8@16@24@32@40q48Q56
@"<VFXShadable>"
@32@0:8^{__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}16@24
{?=b2b2b2b1}28@0:8@16C24
C28@0:8@16C24
@?36@0:8@16C24@28
v48@0:8{?=@@^{?}IB}16
v72@0:8{?=^{__CFXMesh}@^{__CFXMeshElement}@I@C}16
v40@0:8{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}16
v48@0:8@16@24Q32@40
v72@0:8{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}16{?=@@^{?}IB}40
^{__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}
@"VFXMTLResourceManager"
{?="type"C"tessellationFactorScale"f"tessellationPartitionMode"I"tessellationSmoothingMode"C"parameters"(?="uniform"{?="edgeTessellationFactor"f"insideTessellationFactor"f}"screenSpaceAdaptive"{?="projectedEdgeLength"f}"constrainedEdgeLength"{?="maximumEdgeLength"f}"subdivisionSurface"{?="tessellationLevel"C"allowSingleCreasePatch"b1"useScreenSpaceTessellation"b1})}
@"<MTLBuffer>"
@60@0:8@16q24q32q40B48q52
@24@0:8^{__CFXMeshElement={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}II^{__CFXMeshElement}CCC{?=c^{__CFData}I^I^{?}SCB}^vfff^v^{__CFXMeshSource}[2]^{?}I}16
@48@0:8@16q24q32q40
v24@0:8@?16
{_NSRange=QQ}16@0:8
v32@0:8{_NSRange=QQ}16
^{__CFXMeshElement={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}II^{__CFXMeshElement}CCC{?=c^{__CFData}I^I^{?}SCB}^vfff^v^{__CFXMeshSource}[2]^{?}I}16@0:8
^{__CFXMeshElement={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}II^{__CFXMeshElement}CCC{?=c^{__CFData}I^I^{?}SCB}^vfff^v^{__CFXMeshSource}[2]^{?}I}
@"NSData"
i16@0:8
@20@0:8B16
^{__CFXFXProgram=}40@0:8^{__CFXProgramHashCode=}16^{__CFXEngineContext=}24^{?=q^{?}[4{?=qq}][4{?=qq}][4q]B}32
@44@0:8@16@24B32Q36
v64@0:8^{__CFXFXProgram=}16@24@32@40@?48@?56
{_NSRange="location"Q"length"Q}
v20@0:8i16
v24@0:8#16
@32@0:8@16@24
@32@0:8@16#24
@40@0:8@16#24@32
v40@0:8@16@24Q32
@32@0:8#16@24
@"NSMutableArray"
@"VFXUIArrayEditor"
@"NSObjectController"
@"NSPathControl"
B20@0:8B16
@"CALayer"
d16@0:8
{CGSize=dd}16@0:8
@"NSWindow"
@"NSView"
{CGSize="width"d"height"d}
^{__CFXEngineContext=}
^{__CFXTextureSampler={__CFRuntimeBase=QAQ}iiiiiifCiQ}
@28@0:8@16B24
I16@0:8
B20@0:8I16
@20@0:8i16
v24@0:8^{__CFXNode=}16
v40@0:8@16^{__CFXNode=}24^{__CFXLight=}32
B24@0:8^{__CFXNode=}16
B80@0:8{?=[4]}16
v44@0:8@16^{__CFXNode=}24^{__CFXLight=}32f40
v32@0:8@16^{__CFXNode=}24
v32@0:8q16@24
@24@0:8q16
^{__CFXWorld=}
@"VFXNode"
^{__CFDictionary=}
@"VFXRenderer"
@"VFXModel"
@"NSColor"
@"VFXManipulator"
v24@0:8d16
v40@0:8d16{VFXClockTimeRange=dd}24
v24@0:8^{__CFXWorld=}16
{VFXClockTimeRange=dd}16@0:8
v32@0:8{VFXClockTimeRange=dd}16
{VFXClockTimeRange="begin"d"end"d}
^{__CFXModelTarget={__CFRuntimeBase=QAQ}^v^vscCCB^?^?}
@40@0:8{CGPoint=dd}16@32
32@0:816
B32@0:8@16@?24
v32@0:8@16@?24
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
^{CGColorSpace=}16@0:8
@"NSArray"40@0:8{CGPoint=dd}16@"NSDictionary"32
B32@0:8@"VFXNode"16@"VFXNode"24
@"NSArray"24@0:8@"VFXNode"16
B32@0:8@16@?<B@?>24
v32@0:8@"NSArray"16@?<v@?B>24
@"VFXWorld"16@0:8
v24@0:8@"VFXWorld"16
@"<VFXWorldRendererDelegate>"16@0:8
v24@0:8@"<VFXWorldRendererDelegate>"16
@"VFXNode"16@0:8
v24@0:8@"VFXNode"16
@"<MTLRenderCommandEncoder>"16@0:8
@"MTLRenderPassDescriptor"16@0:8
@"<MTLCommandQueue>"16@0:8
@"AVAudioEngine"16@0:8
@"AVAudioEnvironmentNode"16@0:8
@"VFXRenderGraph"16@0:8
v24@0:8@"VFXRenderGraph"16
@24@0:8^{__CFXEngineContext=}16
{?=[4]}16@0:8
v56@0:81632@48
v48@0:8@16{CGPoint=dd}24@40
@"<VFXWorldRenderer>"
^{__CFXFXProgram={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}b1b1^{__CFXFXProgramDelegate}[2^{__CFString}]^{__CFString}^{__CFString}^{__CFDictionary}^{__CFSet}^v^{__CFDictionary}^vQI}
{?="weakProgram"^{__CFXFXProgram}"baseIndex"I"baseVertex"I"vertexSize"I"allocatedVerticesSize"I"allocatedIndicesSize"I"textureImage"^{__CFXImage}"texture"^{__CFXTexture}"drawMode"C"orthographic"B"clearDepthBuffer"B"enableDepthTest"B"enableCulling"B"isDynamic"B"mesh"^{__CFXMesh}"meshElement"^{__CFXMeshElement}"_cache"{?="verticesStride"Q"colorsStride"Q"uvsStride"Q"verticesData"*"colorsData"*"uvsData"*}"_usedMeshes"@"NSMutableSet""_freeMeshes"@"NSMutableSet""_usedMeshElements"@"NSMutableSet""_freeMeshElements"@"NSMutableSet"}
{?="textureInfo"{?="texture"^{__CFXImage}"textureSize"{CGSize="width"d"height"d}"isRetina"B}"lineHeight"f"characterWidth_texture"s"characterWidth_typography"^f"characterHeight_texture"s"symbolRects"^{?}}
^{__CFXRasterizerStates=}
{?="modifierFlags"Q"location"{CGPoint="x"d"y"d}"locationInPoints"{CGPoint="x"d"y"d}"rayOrigin""rayEnd""pixelToWorldUnitFactor"f}
^{?=Q{CGPoint=dd}{CGPoint=dd}f}
[64000C]
@"NSSet"
@"NSMutableOrderedSet"
{?="initialized"B"showFullStatistics"B"showRenderOptionsPanel"B"fps"f"waitDisplayLinkTime"f"pressedButtonIndex"q"fpsString"^{__CFString}"shortString"^{__CFString}"internalString"^{__CFString}"lightingStatistics"[9I]"stats"{__CFXEngineStats="verticesProcessed"I"primitivesProcessed"I"drawCount"I"drawStep"I"frameCount"I"fboSwitches"I"vboSwitches"I"attSwitches"I"attEnabling"I"iboSwitches"I"vaoSwitches"I"prgSwitches"I"texSwitches"I"rssSwitches"I"getCount"I"uniformFloatSent"I"uniformIntSent"I"uniformVector2Sent"I"uniformVector3Sent"I"uniformVector4Sent"I"uniformMatrix4Sent"I"vboUploaded"I"iboUploaded"I"texUploaded"I"cpuTime"d"cstrTime"d"phyTime"d"prtTime"d"animTime"d"skinTime"d"mrphTime"d"rendTime"d"twoDTime"d"delegateTime"d"glFlushTime"d"waitDisplayLinkTime"d"drawableWaitTime"d"gpuTime"d"lastDisplayLinkTime"d"prgCount"I"texCount"I"fboCount"I"vboCount"I"rboCount"I"iboCount"I"cboCount"I"vaoCount"I"fboMemory"I"rboMemory"I"vboMemory"I"iboMemory"I"cboMemory"I"texMemory"I"backBufferMemory"I"depthBuffersMemory"I"onlineShaderCount"I"onlineShaderCompilationTime"d"renderPipelineCount"I"renderPipelineCompilationTime"d"computePipelineCount"I"computePipelineCompilationTime"d"frmAvgTime"d"frmMinTime"d"frmMaxTime"d"frameTimeHistory"[60d]"frameTimeCurrentIndex"I"startTime"d"lastFrameTime"d}}
@"VFXAuthoringEnvironment2"
B24@0:8@"NSEvent"16
@"VFXView"16@0:8
v24@0:8@"VFXView"16
v24@0:8@"VFXCameraController"16
v24@0:8f16B20
v28@0:8f16f20f24
{CGPoint=dd}16@0:8
v32@0:8{CGPoint=dd}16
24@0:8@16
{?=}16@0:8
B32@0:8^{__CFXNode=}16^{CFXSphere=}24
{?="vector"}
{?="stickyMoveEnabled"B"direction""pickedAxis"Q"userStickyAxis"Q}
{?="automaticLocationUpToDate"B"hasAutomatic"B}
{?="lastDragLocation"{CGPoint="x"d"y"d}"velocity"{CGPoint="x"d"y"d}"lastDragTime"d}
{?="lock"{os_unfair_lock_s="_os_unfair_lock_opaque"I}"keyCodeConfiguration"@"NSDictionary""keyDown"{set<unsigned short, std::less<unsigned short>, std::allocator<unsigned short>>="__tree_"{__tree<unsigned short, std::less<unsigned short>, std::allocator<unsigned short>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<unsigned short, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::less<unsigned short>>="__value_"Q}}}"forward"{vector<unsigned short, std::allocator<unsigned short>>="__begin_"^S"__end_"^S"__end_cap_"{__compressed_pair<unsigned short *, std::allocator<unsigned short>>="__value_"^S}}"backward"{vector<unsigned short, std::allocator<unsigned short>>="__begin_"^S"__end_"^S"__end_cap_"{__compressed_pair<unsigned short *, std::allocator<unsigned short>>="__value_"^S}}"left"{vector<unsigned short, std::allocator<unsigned short>>="__begin_"^S"__end_"^S"__end_cap_"{__compressed_pair<unsigned short *, std::allocator<unsigned short>>="__value_"^S}}"right"{vector<unsigned short, std::allocator<unsigned short>>="__begin_"^S"__end_"^S"__end_cap_"{__compressed_pair<unsigned short *, std::allocator<unsigned short>>="__value_"^S}}}
{?="hasShift"B"hasOption"B}
@"VFXCameraController"
@"<VFXCameraNavigationControllerDelegate>"
@24@0:8i16i20
B40@0:8@16@24^@32
@56@0:81632@48
@56@0:8{btVector3=(?=[4f])}16{btVector3=(?=[4f])}32@48
@40@0:8@16@24@32
@160@0:8@16{?=[4]}24{?=[4]}88@152
^{btVehicleRaycaster=^^?}16@0:8
v24@0:8^v16
v56@0:8@16^{__CFXNode=}24Q32Q40Q48
v32@0:8@16^v24
^{btOverlappingPairCallback=^^?}
^{btVehicleRaycaster=^^?}
^{btCFXDebugDraw=^^?if^v}
@"<VFXPhysicsContactDelegate>"
@"VFXPhysicsContact"
@"VFXWorld"
@40@0:8^{?=CCCb1b1b1b1b1b1[4C]}1624Q32
C16@0:8
B40@0:8^{?=CCCb1b1b1b1b1b1[4C]}1624Q32
{?="format"C"sampleCount"C"textureUsage"C"renderToTexture"b1"forceTextureRect"b1"viewportDependant"b1"renderToIOSurface"b1"mipmapped"b1"textureCube"b1"padding"[4C]}
@"CIImage"
@32@0:8q16@24
@"VFXNodeComponent"
^{__CFXFXProgram=}
^{__CFSet=}
@24@0:8i16B20
^{__CFXFXProgram=}48@0:8^{__CFXProgramHashCode=}16^{__CFXEngineContext=}24@32^{?=q^{?}[4{?=qq}][4{?=qq}][4q]B}40
v56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
@160@0:8@16{?=[4]}24@88{?=[4]}96
@88@0:8@16{?=[4]}24
^{btConeTwistConstraint=^^?ii(?=i^v)fBBi^{btRigidBody}^{btRigidBody}ff^{btJointFeedback}[3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f}]{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}ffffffff{btVector3=(?=[4f])}{btVector3=(?=[4f])}ffffffffBBBBff{btVector3=(?=[4f])}BB{btQuaternion=(?=[4f])}f{btVector3=(?=[4f])}ifff}16@0:8
v80@0:8{?=[4]}16
^{btTypedConstraint=^^?ii(?=i^v)fBBi^{btRigidBody}^{btRigidBody}ff^{btJointFeedback}}16@0:8
{?="frameA"{?="columns"[4]}"frameB"{?="columns"[4]}"maximumAngularLimit1"f"maximumAngularLimit2"f"maximumTwistAngle"f}
v28@0:8@16B24
v48@0:8{CGPoint=dd}16{CGSize=dd}32
v24@0:8f16f20
v52@0:8f16{CGPoint=dd}20{CGSize=dd}36
{?=}24@0:8o^f16
{?=[4]}48@0:81632
v52@0:8{CGPoint=dd}16{CGSize=dd}32f48
v64@0:8{CGPoint=dd}16{CGSize=dd}32{CGPoint=dd}48
48@0:8{CGPoint=dd}16{CGSize=dd}32
{?=}32@0:8{?=}16
B48@0:8{CGPoint=dd}16{CGSize=dd}32
{?="angles""initialAbsoluteAngles""initialTransformWorld"{?="columns"[4]}"initialOrientationWorld"{?="vector"}}
{?="start""current""last"}
{?="localArcballAdjustement""sphereLocationStart""sphereLocationCurrent"}
{?="inertiaEnabled"B"inertiaRunning"B"lastSimulationTime"d"friction"f"rotationSensitivity"f"translationSensitivity"f"velocity""timer"@"NSTimer"}
@"<VFXCameraControllerDelegate>"
44@0:816f24{CGSize=dd}28
v24@0:8^{__CFDictionary=}16
@"VFXPhysicsWorld"
^{btTypedConstraint=^^?ii(?=i^v)fBBi^{btRigidBody}^{btRigidBody}ff^{btJointFeedback}}
@"VFXPhysicsBody"
@28@0:8@16f24
@"<VFXJittererDelegate>"
@"NSObject<OS_dispatch_source>"
v40@0:8@16@24@32
@40@0:8@16@24Q32
@100@0:8@16Q24B32Q36Q44Q52Q60q68@76Q84@92
@"MDLAnimatedScalarArray"16@0:8
Q32@0:8^{?=[4]}16Q24
@"NSData"16@0:8
v64@0:8@16@24B32B36f40f44@?48@?56
@80@0:8@16@24@32@40^v48@56@64@72
@72@0:8@16@24@32@?40@48@56@64
v48@0:8@?16@?24@32@40
v48@0:8^{__CFXEngineContext=}16^{__CFXTextureSampler={__CFRuntimeBase=QAQ}iiiiiifCiQ}24^d32^{?=BB}40
v56@0:8@16{CGSize=dd}24B40B44@48
d64@0:8@16@24^{__CFXEngineContext=}3240d56
d48@0:8@16@24^{__CFXEngineContext=}32^{__CFXTextureSampler={__CFRuntimeBase=QAQ}iiiiiifCiQ}40
@48@0:8^{__CFXEngineContext=}16^{__CFXTextureSampler={__CFRuntimeBase=QAQ}iiiiiifCiQ}24^d32^{?=BB}40
@24@0:8^{__CFXCoreEntityHandle={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFString}^{__CFDictionary}^{__CFArray}B^v}16
^{__CFXCoreEntityHandle={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFString}^{__CFDictionary}^{__CFArray}B^v}16@0:8
@"VFXCoreEntityHandle"
v24@0:8^{__CVDisplayLink=}16
@"NSURL"
Q24@0:8q16
@"MTLRenderPassDescriptor"
v32@0:8r^v16Q24
@32@0:8@16^{__CFXEngineContext=}24
^{__CFXEngineContext=}16@0:8
B24@0:8Q16
^{__CFXEngineStats=IIIIIIIIIIIIIIIIIIIIIIIIdddddddddddddddIIIIIIIIIIIIIIIIIdIdIdddd[60d]Idd}16@0:8
v36@0:8B16^Q20^@28
^{VFXMTLBlitCommandEncoder=@@}16@0:8
^{VFXMTLComputeCommandEncoder=@@^{VFXMTLBufferPool}I}16@0:8
v37@0:8@16^v24{?=CCCCB}32
v21@0:8{?=CCCCB}16
@24@0:8^{__CFXMaterialProperty={__CFRuntimeBase=QAQ}(?=^{__CFXImage}^{__CFXImageProxy}^{__CFXTexture}^v^v{CFXColor4=(?=[4f]{?=ffff})}^v)^vq^vb8b1b4c^{__CFXTextureSampler}^{?}fi^v}16
v24@0:8^{__CFXRasterizerStates=}16
v32@0:8q16q24
v32@0:8@16Q24
v24@0:8^{?=[4]}16
f28@0:8r^{?=[4]}16f24
v40@0:8^{__CFXMaterialProperty={__CFRuntimeBase=QAQ}(?=^{__CFXImage}^{__CFXImageProxy}^{__CFXTexture}^v^v{CFXColor4=(?=[4f]{?=ffff})}^v)^vq^vb8b1b4c^{__CFXTextureSampler}^{?}fi^v}16^{__CFXEngineContext=}24^{__CFXFXPassInstance=^{__CFXFXPass}q^{__CFXFXPassInstance}CCBCC[16^{__CFXArray}]{__CFXCullingContext=^{__CFXEnginePipeline}[16{?=[6{?=}]}][16{?=[4]}][16{?=[4]}][16{?=[4]}][16{?=[4]}][16{?=[6{?=}]}][16{?=[4]}][16{?=[4]}][16{?=[4]}][16{?=[4]}][16][16{?=[4]}]CCCCB^{__CFXFXPass}^v^{__CFXNode}^{__CFXNode}^{__CFXNode}BBBBBBBCQQ^v^{__CFXWorld}^{__CFXEngineContext}dd{?=}{?=[4]}{?=[4]}[16{?=^{?}II}]B^?}^{__CFXNode}SI}32
v40@0:8^{__CFXImageProxy={__CFRuntimeBase=QAQ}{?=^?^?^?^?}^vC}16^{__CFXEngineContext=}24^{__CFXMaterialProperty={__CFRuntimeBase=QAQ}(?=^{__CFXImage}^{__CFXImageProxy}^{__CFXTexture}^v^v{CFXColor4=(?=[4f]{?=ffff})}^v)^vq^vb8b1b4c^{__CFXTextureSampler}^{?}fi^v}32
v148@0:8^{__CFXMesh=}16^{__CFXMeshElement={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}II^{__CFXMeshElement}CCC{?=c^{__CFData}I^I^{?}SCB}^vfff^v^{__CFXMeshSource}[2]^{?}I}24^{__CFXFXProgram={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}b1b1^{__CFXFXProgramDelegate}[2^{__CFString}]^{__CFString}^{__CFString}^{__CFDictionary}^{__CFSet}^v^{__CFDictionary}^vQI}32^{__CFXEngineContext=}40{?=[4]}48r^{CFXColor4=(?=[4f]{?=ffff})}112^{__CFXRasterizerStates=}120^{__CFXBlendStates=}128^{__CFXImage=}136B144
v36@0:8^{?=SS}16I24^{?=^{__CFXEnginePipeline}^{__CFXEngineContext}^{__CFXFXPassInstance}^vQ^{__CFXNode}BBBB}28
v24@0:8^{?=^{__CFXEnginePipeline}^{__CFXEngineContext}^{__CFXFXPassInstance}^vQ^{__CFXNode}BBBB}16
v24@0:8^{__CFXMaterial=}16
v96@0:8{?=^{__CFXFXProgram}^{__CFXMaterial}^{__CFXGeometry}^{__CFXNode}^{__CFXMesh}^{__CFXMeshElement}{?=[8C]}^{__CFXFXPass}^IBBBBBb3}16
v32@0:8^{__CFXRendererElement=I^{__CFXNode}(?={__CFXRendererElementAttributes=^{__CFXGeometry}^{__CFXMesh}^{__CFXMaterial}^{__CFXFXRenderGraph}^v}{__CFXRendererElementHandler={?=}@?}){?=[8C]}iIb3b1b1b1b1b3b1b3b1b1}16^{__CFXFXPass={__CFRuntimeBase=QAQ}^{__CFString}iiB^{__CFXFXRenderGraph}^{__CFString}^{__CFString}^{__CFString}^{__CFString}B^{__CFXFXProgram}^{__CFXMaterial}^{__CFXBlendStates}^{__CFXRasterizerStates}{CFXColor4=(?=[4f]{?=ffff})}CIb1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1^{__CFXRendererElement}QQ{?=^?^?^?^?^?^?^?^?^v}{?=[8{?=CCCb1b1b1b1b1b1[4C]}]{?=CCCb1b1b1b1b1b1[4C]}b3b1b1}{CGPoint=dd}[9f]^{?}I^{__CFXNode}^{__CFXNode}^{__CFArray}^{__CFXNode}C^{__CFString}^{__CFString}^{__CFString}^^{__CFXFXPassInput}qq^{__CFDictionary}@?@?^{__CFDictionary}^v}24
v56@0:8^{?=SS}16{?=qq}24^{__CFXRendererElementStore=}40^{__CFXFXPassInstance=^{__CFXFXPass}q^{__CFXFXPassInstance}CCBCC[16^{__CFXArray}]{__CFXCullingContext=^{__CFXEnginePipeline}[16{?=[6{?=}]}][16{?=[4]}][16{?=[4]}][16{?=[4]}][16{?=[4]}][16{?=[6{?=}]}][16{?=[4]}][16{?=[4]}][16{?=[4]}][16{?=[4]}][16][16{?=[4]}]CCCCB^{__CFXFXPass}^v^{__CFXNode}^{__CFXNode}^{__CFXNode}BBBBBBBCQQ^v^{__CFXWorld}^{__CFXEngineContext}dd{?=}{?=[4]}{?=[4]}[16{?=^{?}II}]B^?}^{__CFXNode}SI}48
B32@0:8^{__CFXMesh=}16q24
v32@0:8^{__CFXMesh=}16q24
^{__CFXMeshElement={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}II^{__CFXMeshElement}CCC{?=c^{__CFData}I^I^{?}SCB}^vfff^v^{__CFXMeshSource}[2]^{?}I}36@0:8c16q20q28
v24@0:8^{__CFXMeshElement={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}II^{__CFXMeshElement}CCC{?=c^{__CFData}I^I^{?}SCB}^vfff^v^{__CFXMeshSource}[2]^{?}I}16
v24@0:8^{__CFXFXPass={__CFRuntimeBase=QAQ}^{__CFString}iiB^{__CFXFXRenderGraph}^{__CFString}^{__CFString}^{__CFString}^{__CFString}B^{__CFXFXProgram}^{__CFXMaterial}^{__CFXBlendStates}^{__CFXRasterizerStates}{CFXColor4=(?=[4f]{?=ffff})}CIb1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1^{__CFXRendererElement}QQ{?=^?^?^?^?^?^?^?^?^v}{?=[8{?=CCCb1b1b1b1b1b1[4C]}]{?=CCCb1b1b1b1b1b1[4C]}b3b1b1}{CGPoint=dd}[9f]^{?}I^{__CFXNode}^{__CFXNode}^{__CFArray}^{__CFXNode}C^{__CFString}^{__CFString}^{__CFString}^^{__CFXFXPassInput}qq^{__CFDictionary}@?@?^{__CFDictionary}^v}16
^{__CFXMaterial=}16@0:8
^{__CFXEngineStats=IIIIIIIIIIIIIIIIIIIIIIIIdddddddddddddddIIIIIIIIIIIIIIIIIdIdIdddd[60d]Idd}
@"<MTLDevice>"
@"<MTLCommandQueue>"
@"NSObject<OS_dispatch_semaphore>"
{atomic<int>="__a_"{__cxx_atomic_impl<int, std::__cxx_atomic_base_impl<int>>="__a_value"Ai}}
@"CAMetalLayer"
@"<CAMetalDrawable>"
@"<MTLCommandBuffer>"
^{VFXMTLRenderCommandEncoder=IC@@^{VFXMTLBufferPool}B}
{VFXMTLBlitCommandEncoder="_encoder"@"<MTLBlitCommandEncoder>""_commandBuffer"@"<MTLCommandBuffer>"}
{VFXMTLComputeCommandEncoder="_encoder"@"RGCachedComputeCommandEncoder""_commandBuffer"@"<MTLCommandBuffer>""_bufferPool"^{VFXMTLBufferPool}"_features"I}
{?="renderSliceIndex"C"eyeCount"C"viewMapping"C"multiVertexOutputStreamGenerator"C"isMainPass"B}
{?="vertexIndex"c"fragmentIndex"c}
^^{VFXMTLBufferPool}
@"<MTLDepthStencilState>"
@"<MTLSamplerState>"
[3^{__CFXFXProgram}]
@"NSObject<OS_dispatch_queue>"
@"NSObject<OS_dispatch_group>"
{?="passInstance"^{__CFXFXPassInstance}"lightingSystem"^{__CFXLightingSystem}"dynamicBatchingSystem"^{__CFXDynamicBatchingSystem}"pass"^{__CFXFXPass}"renderGraphPass"^v"passRequiresLighting"B"isMainPass"B"transformTree"^{__CFXTransformTree}"programHashCodeStoreKey"Q}
[16{VFXWorldBuffer="viewTransform"{float4x4="columns"[4]}"inverseViewTransform"{float4x4="columns"[4]}"projectionTransform"{float4x4="columns"[4]}"viewProjectionTransform"{float4x4="columns"[4]}"viewToCubeTransform"{float4x4="columns"[4]}"lastFrameViewProjectionTransform"{float4x4="columns"[4]}"ambientLightingColor""fogColor""fogParameters""inverseResolution""time"f"sinTime"f"cosTime"f"random01"f"motionBlurIntensity"f"environmentIntensity"f"environmentTransform"{float4x4="columns"[4]}"inverseProjectionTransform"{float4x4="columns"[4]}"inverseViewProjectionTransform"{float4x4="columns"[4]}"nearFar""viewportSize""inverseTransposeViewTransform"{float4x4="columns"[4]}"clusterScale""frame"I}]
{?="buffer"@"<MTLBuffer>""offset"Q}
{?="modelTransform"{float4x4="columns"[4]}"lastFrameModelTransform"{float4x4="columns"[4]}"normalTransforms"[16{float4x4="columns"[4]}]"modelViewTransforms"[16{float4x4="columns"[4]}]"modelViewProjectionTransforms"[16{float4x4="columns"[4]}]"boundingBox"{float2x3="columns"[2]}"worldBoundingBox"{float2x3="columns"[2]}"instanceNode"^{__CFXNode}"flags"I"probeCacheIndex"^I}
{?="frameLightingSetDatas"{unordered_map<unsigned long long, VFXMTLLightSetData, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, VFXMTLLightSetData>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>, std::allocator<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, std::hash<unsigned long long>, std::equal_to<unsigned long long>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, VFXMTLLightSetData>, std::equal_to<unsigned long long>, std::hash<unsigned long long>>>="__value_"f}}}"currentLightingHashKey"Q"currentLightingDesc"{?="count"q"lights"[8^{__CFXLight}]"lightsData"[8^{__CFXLightRuntimeData}]}"currentLightingSpace"{?="columns"[4]}"currentLightingSpaceShadow"{?="columns"[4]}"needLightingSpaceTransformation"B"clusterSystem"{VFXMTLClusterSystem="clustersCount""tileSize""selectedDebugClusterIndex""_debugClusterTilesPipeline"@"VFXMTLRenderPipeline""_debugLightIndicesBufferPipeline"@"VFXMTLRenderPipeline""_debugClusterSlicesPipeline"@"VFXMTLRenderPipeline""_debugProgram"[7^{__CFXFXProgram}]"_debugShapes"[7^{__CFXMesh}]}"clusterInfo"{Info="clusterBuffer"{?="memory"*"buffer"@"<MTLBuffer>""offset"Q}"clusterTexture"@"<MTLTexture>""lightIndicesBuffer"@"<MTLBuffer>""lightIndicesBufferOffset"I"lightIndicesBufferSize"I"cellSize""clusterScale""cellPixelSize""omniLightsRange""spotLightsRange""probeLightsRange""lightsBuffer"{?="memory"*"buffer"@"<MTLBuffer>""offset"Q}"lightsBufferLightCount"I"shadowTexture"@"<MTLTexture>""iesOrGoboTextures"[8@"<MTLTexture>"]"samplerStates"[8@"<MTLSamplerState>"]"areaBuffer"@"<MTLBuffer>""areaBufferOffset"Q"areaBufferOffsets"[8Q]}"reflectionProbesTextureArray"@"<MTLTexture>"}
{?="view_from_crworld"[2{?="columns"[4]}]"proj_from_crworld"[2{?="columns"[4]}]"proj_from_view"[2{?="columns"[4]}]"view_from_proj"[2{?="columns"[4]}]"crws_camera_pos"[2]"worldReferencePosition""renderTargetSize""viewportCount"I"useVertexAmplification"I"viewport_percents"[2]}
[2{?="originX"d"originY"d"width"d"height"d"znear"d"zfar"d}]
{Cache="rasterizerStates"^{__CFXRasterizerStates}"mesh"^{__CFXMesh}"metalMesh"@"VFXMTLMesh""meshElement"^{__CFXMeshElement}"metalMeshElement"@"VFXMTLMeshElement""program"^{__CFXFXProgram}"material"^{__CFXMaterial}"geometry"^{__CFXGeometry}"metalShadable"@"VFXMTLShadable""commonProfile"^{__CFXCommonProfile}"blendStates"^{__CFXBlendStates}"colorBufferWriteMask"C"primitiveTopologyClass"C"node"^{__CFXNode}"pointOfView"^{__CFXNode}"deformers"^{__CFXDeformerStack}"viewTransform"{?="columns"[4]}"proj"{?="columns"[4]}"vertexDescriptorHash"Q"tessellationPipelineStateHash"C"renderPipeline"@"VFXMTLRenderPipeline"}
[1{?="hash"Q"pipeline"@"VFXMTLRenderPipeline"}]
@"VFXMTLRenderPipeline"
{?="pixelFormat"Q"sampleCount"Q"displayCubemapPipeline"@"VFXMTLRenderPipeline""displayTexture2DPipeline"@"VFXMTLRenderPipeline""displayDepth2DPipeline"@"VFXMTLRenderPipeline""displayDepthCubePipeline"@"VFXMTLRenderPipeline"}
{?="collectEnabled"B"errors"@"NSMutableDictionary"}
{?="modelTransformBindingCount"I"modelViewTransformBindingCount"I"normalTransformBindingCount"I"nodeOpacityBindingCount"I}
{?="passHash"Q"material"^{__CFXMaterial}}
@"<VFXTextureAttachmentProvider>"
@"<VFXMTLRenderContextResourceManagerMonitor>"
@"<VFXMTLRenderContextCommandBufferStatusMonitor>"
@"CFXVFXRenderTargetInfo"
@"<MTLRenderCommandEncoder>"
@28@0:8i16@20
@44@0:8i16@20^q28^q36
r*20@0:8i16
B44@0:8i16@20^q28^q36
v32@0:8r^^v16^q24
@32@0:8@16^Q24
@48@0:8C16^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}20s28B32B36^Q40
@76@0:8C16^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}20^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}28s36s40B44B48^Q52^Q60^Q68
@"<MTLBuffer>"32@0:8@"<MTLBlitCommandEncoder>"16^Q24
@"<MTLBuffer>"48@0:8C16^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}20s28B32B36^Q40
@"<MTLBuffer>"76@0:8C16^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}20^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}28s36s40B44B48^Q52^Q60^Q68
@"<MTLBlitCommandEncoder>"16@0:8
@"MTLStageInputOutputDescriptor"16@0:8
v24@0:8^{VFXMTLComputeCommandEncoder=@@^{VFXMTLBufferPool}I}16
{?={?=[4]}{?=[4]}{?=[4]}}16@0:8
v38@0:8^{__CFXMesh=}16^{__CFString=}24{?=BBBBBB}32
v40@0:8^{__CFXMesh=}16^{__CFString=}24{?=BBBB}32B36
v25@0:8@16{?=B}24
{?=[6]}16@0:8
^{__CFXDeformerStack=}
^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}
^{__CFXMesh=}
@"MTLStageInputOutputDescriptor"
@"VFXMTLMesh"
{?="isActive"B"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}
{?="maxIndex"I}
@"VFXMTLComputePipeline"
@"VFXModelDeformer"
@"VFXMTLRenderContext"
@"<MTLBlitCommandEncoder>"
{?="modelViewTransform"{?="columns"[4]}"modelViewProjectionTransform"{?="columns"[4]}"projectionTransform"{?="columns"[4]}}
{?="screenResolution""worldPlanes"[6]}
^{VFXMTLComputeCommandEncoder=@@^{VFXMTLBufferPool}I}
@"VFXMTLMorphDeformer"
@"VFXMTLSkinDeformer"
@"VFXMTLSmoothNormalsDeformer"
@"NSMapTable"
v32@0:8@"MTLStageInputOutputDescriptor"16@"<MTLFunction>"24
@"<MTLComputeCommandEncoder>"16@0:8
@32@0:8Q16@24
@"VFXMTLDeformerStack"
@"<VFXModelDeformerInstance>"
{?="srcPositions"{?="isActive"B"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"dstPositions"{?="isActive"B"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"srcNormals"{?="isActive"B"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"dstNormals"{?="isActive"B"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"srcTangents"{?="isActive"B"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"dstTangents"{?="isActive"B"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"dependency0Positions"{?="isActive"B"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"dependency0Normals"{?="isActive"B"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"dependency0Tangents"{?="isActive"B"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"dependency1Positions"{?="isActive"B"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"dependency1Normals"{?="isActive"B"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}"dependency1Tangents"{?="isActive"B"bufferAttributeFormat"Q"bufferAttributeOffset"Q"bufferLayoutStride"Q}}
@"<MTLComputeCommandEncoder>"
{?="srcPositions"@"<MTLBuffer>""dstPositions"@"<MTLBuffer>""srcNormals"@"<MTLBuffer>""dstNormals"@"<MTLBuffer>""srcTangents"@"<MTLBuffer>""dstTangents"@"<MTLBuffer>""dependency0Positions"@"<MTLBuffer>""dependency0Normals"@"<MTLBuffer>""dependency0Tangents"@"<MTLBuffer>""dependency1Positions"@"<MTLBuffer>""dependency1Normals"@"<MTLBuffer>""dependency1Tangents"@"<MTLBuffer>"}
Q48@0:8@16@24@32@40
Q48@0:8@"<VFXMTLDeformerUpdateComputeContext>"16@"<MTLBuffer>"24@"<MTLBuffer>"32@"<MTLBuffer>"40
v32@0:8r*16^v24
v32@0:8r*16r^v24
@24@0:8^{__CFXCamera={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}{?=b1b1b1b3ffff{?=[4]}{?=[4]}}fff^{__CFXCameraEffectDepthOfField}^{__CFXCameraEffectMotionBlur}^{__CFXCameraEffectGrain}^{__CFXCameraEffectExposure}^{__CFXCameraEffectToneMapping}^{__CFXCameraEffectBloom}^{__CFXCameraEffectVignetting}^{__CFXCameraEffectLensBlur}^{__CFXCameraEffectColorFringe}^{__CFXCameraEffectColorGrading}^{__CFXCameraEffectChromaticTransform}^{__CFXCameraEffectDoughnutBokeh}^{__CFXCameraEffectSSAO}b1b1b1b1{?=[4]}Q^{__CFXFXRenderGraph}}16
{CGAffineTransform=dddddd}16@0:8
v64@0:8{CGAffineTransform=dddddd}16
^{__CFXCamera={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}{?=b1b1b1b3ffff{?=[4]}{?=[4]}}fff^{__CFXCameraEffectDepthOfField}^{__CFXCameraEffectMotionBlur}^{__CFXCameraEffectGrain}^{__CFXCameraEffectExposure}^{__CFXCameraEffectToneMapping}^{__CFXCameraEffectBloom}^{__CFXCameraEffectVignetting}^{__CFXCameraEffectLensBlur}^{__CFXCameraEffectColorFringe}^{__CFXCameraEffectColorGrading}^{__CFXCameraEffectChromaticTransform}^{__CFXCameraEffectDoughnutBokeh}^{__CFXCameraEffectSSAO}b1b1b1b1{?=[4]}Q^{__CFXFXRenderGraph}}16@0:8
{?=[4]}32@0:8{CGSize=dd}16
^{__CFXCamera={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}{?=b1b1b1b3ffff{?=[4]}{?=[4]}}fff^{__CFXCameraEffectDepthOfField}^{__CFXCameraEffectMotionBlur}^{__CFXCameraEffectGrain}^{__CFXCameraEffectExposure}^{__CFXCameraEffectToneMapping}^{__CFXCameraEffectBloom}^{__CFXCameraEffectVignetting}^{__CFXCameraEffectLensBlur}^{__CFXCameraEffectColorFringe}^{__CFXCameraEffectColorGrading}^{__CFXCameraEffectChromaticTransform}^{__CFXCameraEffectDoughnutBokeh}^{__CFXCameraEffectSSAO}b1b1b1b1{?=[4]}Q^{__CFXFXRenderGraph}}
@"VFXCameraEffectDepthOfField"
@"VFXCameraEffectMotionBlur"
@"VFXCameraEffectGrain"
@"VFXCameraEffectExposure"
@"VFXCameraEffectToneMapping"
@"VFXCameraEffectBloom"
@"VFXCameraEffectColorGrading"
@"VFXCameraEffectColorFringe"
@"VFXCameraEffectVignetting"
@"VFXCameraEffectLensBlur"
@"VFXCameraEffectChromaticTransform"
@"VFXCameraEffectDoughnutBokeh"
@"VFXCameraEffectSSAO"
{CFXColor4=(?=[4f]{?=ffff})}28@0:8B16^B20
@48@0:8d16d24d32d40
@56@0:8d16d24d32d40@48
@24@0:8r^{CFXColor4=(?=[4f]{?=ffff})}16
@28@0:8r^{CFXColor4=(?=[4f]{?=ffff})}16B24
@24@0:8@?16
@32@0:8{CGPoint=dd}16
@24@0:816
@32@0:816
@80@0:8{?=[4]}16
@24@0:8^{__CFXLight=}16
^{__CFXLight=}16@0:8
v48@0:8@16@24@32^v40
v32@0:8{CGSize=dd}16
^{__CFXLight=}
@"VFXIESProfile"
r^{__CFXIESInfo=ffffffiiiiiffffff^f^f^f}16@0:8
{__CFXIESInfo="totalLights"f"totalLumens"f"candalaMult"f"maxCandela"f"maxHAngle"f"maxVAngle"f"typeOfPhotometric"i"typeOfUnit"i"anglesHCount"i"anglesVCount"i"candalaValuesCount"i"width"f"length"f"height"f"ballastFactor"f"futureUse"f"inputWatts"f"anglesH"^f"anglesV"^f"candalaValues"^f}
@24@0:8^{__CFXMaterial=}16
@"VFXProgram"16@0:8
v24@0:8@"VFXProgram"16
@"NSDictionary"16@0:8
v24@0:8@"NSDictionary"16
@"NSNumber"16@0:8
v24@0:8@"NSNumber"16
@"VFXBehaviorGraph"16@0:8
v24@0:8@"VFXBehaviorGraph"16
^{__CFXCommonProfile={__CFRuntimeBase=QAQ}^{__CFXMaterial}i^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}^{__CFXMaterialProperty}ffffCqBb1b1b1b1b1b1b1b13}16@0:8
v24@0:8^@16
@24@0:8^@16
^{__CFXMaterial=}
@"VFXShadableHelper"
@"VFXBehaviorGraph"
@32@0:8@16^{__CFDictionary=}24
@24@0:8^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}16
B32@0:8^16^f24
{?=[2]}16@0:8
v48@0:8{?=[2]}16
v32@0:8Q16@24
v40@0:8Q16@24^{__CFDictionary=}32
@32@0:8Q16^{__CFDictionary=}24
@24@0:8^{__CFDictionary=}16
B36@0:8@?16B24@28
@28@0:8@?16B24
B24@0:8@?16
v36@0:8#16@24B32
@28@0:8#16B24
v32@0:8@16q24
^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}16@0:8
v32@0:8{?=}16
B32@0:8^16^24
v32@0:8^16^24
B40@0:8^{?=[6{?=}]}1624
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@16
v64@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48@56
40@0:816@32
{?=[4]}88@0:8{?=[4]}16@80
v64@0:8163248
v48@0:8{?=}1632
(?="eulerAngles""axisAngle""quaternion"{?="vector"})
@48@0:8@16@24@32^@40
@40@0:8@16@24^@32
@24@0:8^{__CFXWorld=}16
:16@0:8
B32@0:8@16^@24
v28@0:8@16i24
^{_opaque_pthread_mutex_t=q[56c]}16@0:8
B40@0:8@16@24@?32
B48@0:8@16@24@32^@40
q24@0:8q16
@"VFXRenderGraph"
@"<VFXAssetPathResolver>"
@"<VFXWorldRemotePreviewDelegate>"
@"_TtC3VFX24VFXRemotePreviewEndpoint"
[4@"VFXNode"]
@"VFXClock"
@"VFXAssetRegistry"
@"VFXStateManager"
^{__CFXCoreEntityManager=}
@"VFXBidirectionalRemapTable"
@"VFXTriggerManager"
@"NSURL"24@0:8@"NSString"16
v40@0:8^{__CFXEngineContext=}16^{__CFXTextureSampler={__CFRuntimeBase=QAQ}iiiiiifCiQ}24^d32
v24@0:8^{__CFXImageProxy=}16
v24@0:8^{__CFXEngineContext=}16
^{__CFXFramebuffer=}
@48@0:8^{__CFXEngineContext=}16@24@32@40
{?="mouseDown"b1"mouseUp"b1"mouseMoved"b1"mouseDragged"b1"keyDown"b1"keyUp"b1"touchBegan"b1"touchMoved"b1"touchEnded"b1"touchCanceled"b1}
@40@0:8{CGSize=dd}16@32
v24@0:8^{CGColorSpace=}16
@56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
B20@0:8f16
{CGSize=dd}32@0:8{CGSize=dd}16
f24@0:8d16
@"VFXDisplayLink"
@"VFXJitterer"
@"VFXRecursiveLock"
@"<VFXEventHandler>"
@"_TtC3VFX13VFXViewLegacy"
@?16@0:8
v40@0:8@16q24@?32
@"<MTLTexture>"32@0:8@"NSString"16@"MTLTextureDescriptor"24
@"VFXDrawableDescriptor"16@0:8
@"VFXDrawableDescriptor"
{?=dddddd}16@0:8
v64@0:8{?=dddddd}16
{?="originX"d"originY"d"width"d"height"d"znear"d"zfar"d}
@"<MTLRasterizationRateMap>"
v32@0:8@"VFXMTLRenderContext"16@"<MTLCommandBuffer>"24
v40@0:8@"VFXMTLRenderContext"16@24@"NSString"32
@48@0:8@16@24B32@36B44
v48@0:8^16Q2432
48@0:81632
v24@0:8^{CGColor=}16
@56@0:8{CGPoint=dd}16{CGSize=dd}32@48
B48@0:8@16@2432
@40@0:8@1624
v80@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48@56@64@72
^{CGImage=}24@0:8^@16
^{CGImage=}32@0:8{CGSize=dd}16
@32@0:8{CGSize=dd}16
^{CGImage=}40@0:8{CGSize=dd}16^@32
v40@0:8@16@24@?32
v40@0:8@16d24@?32
v40@0:8Q16B24B28@32
{?="frameBuffer"^{__CFXFramebuffer}"multisamplingFrameBuffer"^{__CFXFramebuffer}"drawableSize"{CGSize="width"d"height"d}}
{?="supportsUpdate"b1"supportsDidApplyAnimations"b1"supportsDidSimulatePhysics"b1"supportsDidApplyConstraints"b1"supportsWillRender"b1"supportsDidRender"b1"supportsInputTime"b1"supportsReadSubdivCache"b1"supportsWriteSubdivCache"b1"supportsMainPassCustomPostProcess"b1}
{CFXColor4=""(?="rgba"[4f]""{?="r"f"g"f"b"f"a"f}"simd")}
@"_TtC3VFX17VFXRendererLegacy"
@"VFXAuthoringEnvironment"
@"<_VFXWorldRendererResourceManagerMonitor>"
@"<_VFXWorldCommandBufferStatusMonitor>"
i20@0:8i16
@96@0:8@162440@566480
@56@0:8@162440
^{btSliderConstraint=^^?ii(?=i^v)fBBi^{btRigidBody}^{btRigidBody}ff^{btJointFeedback}BB{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}BffffffffffffffffffffffffffffBBi[3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f}][3f][3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f}]f{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}ffffBfffBfff}16@0:8
{?="axisA""anchorA""axisB""anchorB""minLinearLimit"f"maxLinearLimit"f"minAngularLimit"f"maxAngularLimit"f"motorTargetLinearVelocity"f"motorMaximumForce"f"motorTargetAngularVelocity"f"motorMaximumTorque"f}
@32@0:8@16^@24
v32@0:8^?16^v24
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
^{__CFXKeyframedAnimation=}16@0:8
v24@0:8^{__CFXKeyframedAnimation=}16
^{__CFXKeyframedAnimation=}
@28@0:8f16@?20
B36@0:8d16B24^v28
@24@0:8^{__CFXTimingFunction=}16
^{__CFXTimingFunction=}16@0:8
^{__CFXTimingFunction=}
@24@0:8^{__CFXAnimation=}16
v24@0:8^{__CFXAnimation=}16
^{__CFXAnimation=}16@0:8
v32@0:8@16d24
^{__CFXAnimation=}
@"VFXTimingFunction"
@24@0:8^{__CFXAnimationPlayer=}16
^{__CFXAnimationPlayer=}16@0:8
^{__CFXAnimationPlayer=}
@"VFXAnimation"
#40@0:8@16@24@32
#40@0:8@"NSKeyedUnarchiver"16@"NSString"24@"NSArray"32
@32@0:8@"NSKeyedUnarchiver"16@24
v40@0:8@"NSKeyedUnarchiver"16@24@32
v24@0:8@"NSKeyedUnarchiver"16
B56@0:8@16@24@32@?40^@48
B60@0:8@16@24@32B40@?44^@52
B68@0:8@16@24@32B40@44@?52^@60
@"NSUUID"
@"NSError"
@24@0:8^{__CFArray=}16
@24@0:8^{__CFXHitTestResult=}16
{CGPoint=dd}24@0:8q16
^{__CFXHitTestResult=}
v56@0:8@16@?24@?32@?40@48
v56@0:8@"<MTLTexture>"16@?<v@?@?<v@?@"<MTLComputeCommandEncoder>">>24@?<v@?@?<v@?@"<MTLBlitCommandEncoder>">>32@?<v@?@?<v@?@"<MTLCommandBuffer>">>40@"<VFXMaterialPropertyTextureProviderHelper>"48
^{__CFXImage=}32@0:8@16Q24
^{__CFXImage=}36@0:8@16i24^B28
^{__CFXImage=}28@0:8@16i24
^{__CFXImage=}24@0:8@16
@24@0:8^{__CFXImage=}16
@28@0:8@16c24
^{__CFXMaterialProperty={__CFRuntimeBase=QAQ}(?=^{__CFXImage}^{__CFXImageProxy}^{__CFXTexture}^v^v{CFXColor4=(?=[4f]{?=ffff})}^v)^vq^vb8b1b4c^{__CFXTextureSampler}^{?}fi^v}20@0:8B16
v24@0:8^{__CFXImage=}16
^{CGImage=}16@0:8
^{CGContext=}16@0:8
{CFXColor4=(?=[4f]{?=ffff})}16@0:8
c16@0:8
^{__CFXMaterialProperty={__CFRuntimeBase=QAQ}(?=^{__CFXImage}^{__CFXImageProxy}^{__CFXTexture}^v^v{CFXColor4=(?=[4f]{?=ffff})}^v)^vq^vb8b1b4c^{__CFXTextureSampler}^{?}fi^v}16@0:8
^{__CFXTextureSampler={__CFRuntimeBase=QAQ}iiiiiifCiQ}16@0:8
^{__CFXMaterialProperty={__CFRuntimeBase=QAQ}(?=^{__CFXImage}^{__CFXImageProxy}^{__CFXTexture}^v^v{CFXColor4=(?=[4f]{?=ffff})}^v)^vq^vb8b1b4c^{__CFXTextureSampler}^{?}fi^v}
^{__CFXImage=}
^{?=[4]}
@32@0:8f16f20@24
@40@0:8f16f20f24f28@32
@36@0:8f16f20f24@28
@28@0:8f16@20
@24@0:8^{__CFXFloor={__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}ffffifffQ}16
^{__CFXFloor={__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}ffffifffQ}16@0:8
^{__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}16@0:8
v28@0:8B16@?20
v20@0:8C16
@24@0:8^{__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}16
v24@0:8^{__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}16
B48@0:8@16@24^@32^@40
{?=BCCC}16@0:8
v20@0:8{?=BCCC}16
@"VFXMesh"
{?="enableVertexWeldingAtImport"B"boundaryInterpolationRule"C"faceVaryingInterpolationRule"C"normalSmoothingMode"C}
@"VFXMeshSource"
@"VFXMeshElement"
@"VFXModelTessellator"
@24@0:8^{__CFXSkinner=}16
^{__CFXSkinner=}48@0:8@16@24@32@40
^{__CFXSkinner=}56@0:8q16@24@32@40@48
^{__CFXSkinner=}40@0:8@16Q24Q32
@56@0:8@16@24@32@40@48
^{__CFXSkinner=}16@0:8
^{__CFXSkinner=}
@"VFXState"
@20@0:8f16
@24@0:8f16f20
@40@0:8@16Q24^@32
@48@0:8@16@24@32Q40
B48@0:8@16@24Q32^@40
B40@0:8@16Q24^@32
{__zFlags="providerSuppliesContents"b1"providerSuppliesStreams"b1"providerSuppliesProperties"b1"noContentsCaching"b1"fileOpen"b1"reserved"b27}
[5^v]
s16@0:8
v20@0:8s16
@"<_TtP3VFX10VFXBinding_>"
@"VFXMTLLibraryManager"
@"<MTLLibrary>"
v24@0:8^{__CFXEngineStats=IIIIIIIIIIIIIIIIIIIIIIIIdddddddddddddddIIIIIIIIIIIIIIIIIdIdIdddd[60d]Idd}16
v128@0:8{?=^{__CFXFXProgram}^{__CFXMaterial}^{__CFXGeometry}^{__CFXFXPass}^{__CFXFXPass}@^{__CFXBlendStates}^{__CFXNode}CCCCCC@{?=C@?}Q}16@?120
@"VFXMTLLibrary"
@40@0:8@16Q24Q32
v40@0:8@16{_NSRange=QQ}24
@"<MTLTexture>"40@0:8@"MTLTextureDescriptor"16Q24Q32
v40@0:8@"NSString"16{_NSRange=QQ}24
@"<MTLBuffer>"24@0:8@"<MTLDevice>"16
v52@0:8@16^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}24c32q36q44
v68@0:8@16c24q28q36Q44Q52Q60
v24@0:8r^v16
v32@0:8^{__CFXFXProgram={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}b1b1^{__CFXFXProgramDelegate}[2^{__CFString}]^{__CFString}^{__CFString}^{__CFDictionary}^{__CFSet}^v^{__CFDictionary}^vQI}16^{__CFXFXPass={__CFRuntimeBase=QAQ}^{__CFString}iiB^{__CFXFXRenderGraph}^{__CFString}^{__CFString}^{__CFString}^{__CFString}B^{__CFXFXProgram}^{__CFXMaterial}^{__CFXBlendStates}^{__CFXRasterizerStates}{CFXColor4=(?=[4f]{?=ffff})}CIb1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1^{__CFXRendererElement}QQ{?=^?^?^?^?^?^?^?^?^v}{?=[8{?=CCCb1b1b1b1b1b1[4C]}]{?=CCCb1b1b1b1b1b1[4C]}b3b1b1}{CGPoint=dd}[9f]^{?}I^{__CFXNode}^{__CFXNode}^{__CFArray}^{__CFXNode}C^{__CFString}^{__CFString}^{__CFString}^^{__CFXFXPassInput}qq^{__CFDictionary}@?@?^{__CFDictionary}^v}24
@32@0:8^{__CFData=}16Q24
v32@0:8^{__CFXMesh=}16@24
@36@0:8^{__CFXDeformerStack=}16^{__CFXNode=}24C32
@44@0:8^{__CFXSkinner=}16^{__CFXMesh=}24C32@?36
@44@0:8^{__CFXMorpher={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXGeometry}^{__CFXMorph}II^fII}16^{__CFXMesh=}24C32@?36
@"VFXMTLShaderBindingsGenerator"
@"VFXMTLBufferAllocator"
{?="registry"@"NSMapTable""lock"{os_unfair_lock_s="_os_unfair_lock_opaque"I}}
@"VFXMTLShadableKey"
@"MTKTextureLoader"
^{__CFXNode=}16@0:8
@"AVAudioNode"
@"AVAudioPlayerNode"
@"VFXAudioSource"
^{__CFXNode=}
@"AVAudioFile"
@"AVAudioPCMBuffer"
@32@0:8r^{btPersistentManifold=i[4{btManifoldPoint={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}ffffiiii^vBfffffffi{btVector3=(?=[4f])}{btVector3=(?=[4f])}}]^{btCollisionObject}^{btCollisionObject}iffiii^{cfxContactCallback}}16q24
v72@0:8@16@243248f64f68
v40@0:8r^{btPersistentManifold=i[4{btManifoldPoint={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}ffffiiii^vBfffffffi{btVector3=(?=[4f])}{btVector3=(?=[4f])}}]^{btCollisionObject}^{btCollisionObject}iffiii^{cfxContactCallback}}16q24r^{btManifoldPoint={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}ffffiiii^vBfffffffi{btVector3=(?=[4f])}{btVector3=(?=[4f])}}32
v36@0:816B32
v52@0:81632B48
@"VFXPhysicsShape"
@"VFXBtShapeWrapper"
@32@0:8f16f20f24f28
@28@0:8f16f20f24
@24@0:8^{__CFXParametricGeometry={__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}{?=fffffffffiiiiiiiiiiI}{?=^?^?^?^?^?^?}^{__CFData}}16
v24@0:8^{__CFXParametricGeometry={__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}{?=fffffffffiiiiiiiiiiI}{?=^?^?^?^?^?^?}^{__CFData}}16
@48@0:8@16@24Q32@?40
B36@0:8B16d20d28
v20@0:8I16
^{__CVDisplayLink=}
v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
v24@0:8:16
@"NSImage"
@24@0:8^{btCollisionShape=^^?i^v}16
^{btCollisionShape=^^?i^v}16@0:8
^{btCollisionShape=^^?i^v}
@24@0:8^{__CFXNode=}16
^{__CFArray=}
@40@0:8@16@24@?32
v48@0:8@16@24@32@?40
@44@0:8@16^{__CFXEngineContext=}24B32@36
@40@0:8@16^{__CFXEngineContext=}24@32
v32@0:8^16Q24
@64@0:8q16@24@32@40@48Q56
@48@0:8@16@24^@32^@40
B32@0:8@?16^@24
@120@0:8@16@24Q32{?=[4]}40Q104Q112
@112@0:8@16@24@32Q40{?=[4]}48
v32@0:8^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}16^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}24
v40@0:8^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}16^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}24^{__CFXNode={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXNode}^{__CFXNode}^{__CFXNode}i{?={?=[4]}(?=)}^{?}BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1b1b1b1{?={?=SS}I}^{?}^{__CFXGeometry}^{__CFXDeformerStack}f{?=}}32
@32@0:8^{__CFXMesh=}16^{__CFXMesh=}24
{?="pointIndices"^v"pointIndicesStride"Q"pointIndicesFormat"Q"barycentricCoords"^v"barycentricCoordsStride"Q"barycentricCoordsFormat"Q"innerLayerInfluences"^f"innerLayerInfluencesLength"Q"innerLayerTNBs"^f"outerLayerTNBs"^f"tnbMatricesLength"Q"innerLayerOffsets"^f"outerLayerOffsets"^f"offsetsLength"Q"legacyOffsetsOrTransforms"^f"legacyOffsetsOrTransformsLength"Q}
B24@0:8^{?=}16
@48@0:8@16Q24Q32@40
@"VFXModelWrapDeformerParameters"
Q24@0:8@"<VFXModelDeformerUpdateComputeContext>"16
{?="vertexCount"I"innerLayerToDeformedTransform"{?="columns"[4]}"outerLayerToDeformedTransform"{?="columns"[4]}}
{?="vertexCount"I"driverToDeformedTransform"{?="columns"[4]}}
v40@0:8@16{CGSize=dd}24
v40@0:8@"MTKView"16{CGSize=dd}24
v24@0:8@"MTKView"16
v28@0:8Q16B24
@"MTKView"
[3@"<MTLBuffer>"]
@"<MTLComputePipelineState>"
[2{?="drawableIndex"Q"colorAttachment"@"MTLRenderPassColorAttachmentDescriptor""depthAttachment"@"MTLRenderPassDepthAttachmentDescriptor"}]
[3[2@"<MTLTexture>"]]
v24@0:8^{__CFXEngineNotificationQueue={__CFRuntimeBase=QAQ}^{__CFDictionary}^{__CFDictionary}{os_unfair_lock_s=I}dBBB^v}16
^{__CFXEngineNotificationQueue={__CFRuntimeBase=QAQ}^{__CFDictionary}^{__CFDictionary}{os_unfair_lock_s=I}dBBB^v}16@0:8
@"VFXRendererOptionsPanelController"
@64@0:8@1624@4048
^{btPoint2PointConstraint=^^?ii(?=i^v)fBBi^{btRigidBody}^{btRigidBody}ff^{btJointFeedback}[3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f}]{btVector3=(?=[4f])}{btVector3=(?=[4f])}iffB{btConstraintSetting=fff}}16@0:8
{?="anchorA""anchorB"}
@32@0:8@16q24
q24@0:8@16
@40@0:8@16q24@32
q32@0:8@16@24
@"VFXRendererOptionsPanel"
@"NSPopUpButton"
@"NSTextField"
@"NSSlider"
@"NSStepper"
@"NSButton"
@"NSOutlineView"
@"VFXUIDynamicInspector"
@"NSComboBox"
@128@0:8{?=^{__CFXFXProgram}^{__CFXMaterial}^{__CFXGeometry}^{__CFXFXPass}^{__CFXFXPass}@^{__CFXBlendStates}^{__CFXNode}CCCCCC@{?=C@?}Q}16@120
^{__CFXFXProgram=}20@0:8B16
v360@0:8@16{?={?=^{__CFXFXProgram}^{__CFXMaterial}^{__CFXGeometry}^{__CFXFXPass}^{__CFXFXPass}@^{__CFXBlendStates}^{__CFXNode}CCCCCC@{?=C@?}Q}@{?=[8Q]QQC}^{__CFXBlendStates}[8Q]C@@@@@?CBBB}24@352
@344@0:8{?={?=^{__CFXFXProgram}^{__CFXMaterial}^{__CFXGeometry}^{__CFXFXPass}^{__CFXFXPass}@^{__CFXBlendStates}^{__CFXNode}CCCCCC@{?=C@?}Q}@{?=[8Q]QQC}^{__CFXBlendStates}[8Q]C@@@@@?CBBB}16
@72@0:8{?=@@@@?BBB@}16@64
@44@0:8@16@24@32B40
@56@0:8@16@24@?32@40@48
@48@0:8@16@24@32@40
@40@0:8^{CGColorSpace=}16^{CGColorSpace=}24@32
@68@0:8I16@20@28@36^{CGColorSpace=}44^{CGColorSpace=}52@60
@24@0:8^{__CFXForceField=}16
^{__CFXForceField=}16@0:8
^{__CFXForceField=}
{?="kind"q"active"B"strength"f"dampening"f"noiseAmount"f"noiseSeed"Q"categoryBitMask"Q"shape"q"scope"q"cullMode"q"falloffExponent"f"halfExtents""offset""smoothness"f"speed"f}
{AVAudio3DPoint=fff}16@0:8
v28@0:8{AVAudio3DPoint=fff}16
@"VFXAssetNode"
@"CAStateController"
v24@0:8^{CGImage=}16
v88@0:8^{?=fIIQQ}16^{?=I^{__CFXMesh}^{__CFXMeshSource}^{__CFXMeshSource}Q}24*32Q40*48Q56Q64^I72@80
v72@0:8^{?=fIIQQ}16^{?=I^{__CFXMesh}^{__CFXMeshSource}^{__CFXMeshSource}Q}24*32Q40Q48^I56@64
Q40@0:8@16@24@32
^{__CFXMorpher={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXGeometry}^{__CFXMorph}II^fII}
^{?=fIIQQ}
@"AVPlayer"
@"AVPlayerItemVideoOutput"
^{__CVMetalTextureCache=}
^{__CVBuffer=}
v40@0:8@16^{opaqueCMSampleBuffer=}24@32
v40@0:8@"AVCaptureOutput"16^{opaqueCMSampleBuffer=}24@"AVCaptureConnection"32
@"AVCaptureDevice"
@"AVCaptureSession"
v24@0:8^{opaqueCMSampleBuffer=}16
v24@0:8^{__CVBuffer=}16
v32@0:8^{opaqueCMSampleBuffer=}16@24
v32@0:8^{__CVBuffer=}16@24
v32@0:8^{opaqueCMSampleBuffer=}16@"AVCaptureDevice"24
v32@0:8^{__CVBuffer=}16@"AVCaptureDevice"24
@24@0:8^{__CFXMorph=}16
@24@0:8^{__CFXMorpher={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXGeometry}^{__CFXMorph}II^fII}16
#24@0:8@16
^{__CFXMorph=}16@0:8
v28@0:8f16@20
f24@0:8@16
v28@0:8f16Q20
f24@0:8Q16
f32@0:8Q16r^v24
v80@0:8@16@24@32@40@48@56@64@72
^{__CFXMorph=}
@"<MTLBinding>"
@"<MTLArgumentEncoder>"
^{?=@?II}
^{?=^{__CFXFXPassInput}II}
^{__CFXFXPassInput=}
v34@0:8@16q24{?=cc}32
@18@0:8{?=cc}16
[31@]
[16@]
^{__CFXFXPass=}
{?="colorFormat"[8Q]"depthFormat"Q"stencilFormat"Q"sampleCount"C}
[2I]
@"<MTLRenderPipelineState>"
@"MTLVertexDescriptor"
@"<MTLFunction>"
@"VFXMTLBuffer"
@"VFXFixedSizePage"
@32@0:8@16Q24
@"NSMutableIndexSet"
@40@0:8r^v16Q24@32
@"CALayer"16@0:8
@24@0:8@"NSString"16
@24@0:8@"NSArray"16
@64@0:8@16@24@32@40@48@56
v36@0:8@16@24B32
v32@0:8@"CAAnimation"16@"NSString"24
@"CAAnimation"24@0:8@"NSString"16
v32@0:8@16@"NSString"24
v24@0:8@"NSArray"16
@"CAMediaTimingFunction"16@0:8
v24@0:8@"CAMediaTimingFunction"16
@"NSColor"48@0:8d16d24d32d40
^{CGPath=}16@0:8
v24@0:8^{CGPath=}16
@"<VFXCameraControlConfiguration>"16@0:8
@"VFXCameraController"16@0:8
@"VFXPhysicsBody"16@0:8
@64@0:8@"VFXPhysicsBody"16@"NSArray"24@"NSArray"32@"VFXPhysicsBody"40@"NSArray"48@"NSArray"56
@40@0:8@"VFXPhysicsBody"16@"NSArray"24@"NSArray"32
v40@0:8@"NSString"16q24@?<v@?@"<VFXBufferStream>"@"VFXNode"@"<VFXShadable>"@"VFXRenderer">32
v40@0:8@"NSString"16@"NSString"24@"NSDictionary"32
@"NSString"24@0:8@"NSString"16
@"<VFXProgramDelegate>"16@0:8
v24@0:8@"<VFXProgramDelegate>"16
@"<MTLLibrary>"16@0:8
v24@0:8@"<MTLLibrary>"16
f24@0:8q16
v28@0:8f16q20
@"VFXMorpher"16@0:8
@"VFXModel"16@0:8
@28@0:8@"VFXModel"16f24
v64@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@"<MTLCommandBuffer>"48@"MTLRenderPassDescriptor"56
v32@0:8@"NSArray"16d24
@32@0:8@"<MTLDevice>"16@"NSDictionary"24
v24@0:8@"VFXAudioPlayer"16
v32@0:8@"VFXNode"16Q24
v32@0:8@"VFXNode"16@"VFXNode"24
@"VFXNode"28@0:8@"NSString"16B24
@"NSArray"24@0:8@?<B@?@"VFXNode"^B>16
v24@0:8@?<v@?@"VFXNode"^B>16
@"NSArray"32@0:8@"NSArray"16@"VFXNode"24
@"NSArray"40@0:8@"NSArray"16@"NSArray"24@"NSDictionary"32
v40@0:8@"NSArray"16@"NSArray"24@"NSArray"32
v32@0:8@"NSArray"16@"NSArray"24
@"VFXNode"24@0:8@"NSString"16
@"VFXLight"16@0:8
v24@0:8@"VFXLight"16
@"VFXCamera"16@0:8
v24@0:8@"VFXCamera"16
v24@0:8@"VFXModel"16
@"VFXSkinner"16@0:8
v24@0:8@"VFXSkinner"16
v24@0:8@"VFXMorpher"16
v24@0:8@"VFXPhysicsBody"16
@"VFXForceField"16@0:8
v24@0:8@"VFXForceField"16
@"VFXNode"24@0:8@"VFXModel"16
@24@0:8@"MDLObject"16
@48@0:8@"VFXPhysicsBody"16@"NSArray"24@"VFXPhysicsBody"32@"NSArray"40
@32@0:8@"VFXPhysicsBody"16@"NSArray"24
v32@0:8@"VFXMaterial"16Q24
v32@0:8Q16@"VFXMaterial"24
@"VFXMaterial"24@0:8@"NSString"16
@"NSArray"24@0:8@"NSString"16
@"VFXMeshElement"24@0:8q16
@"VFXMaterial"16@0:8
v24@0:8@"VFXMaterial"16
@"VFXModelTessellator"16@0:8
v24@0:8@"VFXModelTessellator"16
@"VFXMeshElement"16@0:8
v24@0:8@"VFXMeshElement"16
@"VFXMeshSource"16@0:8
v24@0:8@"VFXMeshSource"16
@32@0:8@"NSArray"16@"NSArray"24
@40@0:8@"NSArray"16@"NSArray"24@"NSArray"32
@24@0:8@"MDLMesh"16
@"VFXMaterialProperty"16@0:8
@"NSURL"16@0:8
v24@0:8@"NSURL"16
@24@0:8@"MDLLight"16
@24@0:8@"MDLMaterial"16
@24@0:8@"VFXNode"16
@24@0:8@"VFXModel"16
@28@0:8@"VFXNode"16B24
@60@0:8@"NSData"16q24q32q40B48q52
@48@0:8@"NSData"16q24q32q40
@24@0:8@"MDLSubmesh"16
@76@0:8@16@24q32B40q44q52q60q68
@76@0:8@"NSData"16@"NSString"24q32B40q44q52q60q68
v28@0:8f16@"VFXNode"20
f24@0:8@"VFXNode"16
v24@0:8@"VFXPhysicsJoint"16
@"NSArray"40@0:8@"VFXPhysicsBody"16@"VFXPhysicsBody"24@"NSDictionary"32
@"NSArray"32@0:8@"VFXPhysicsBody"16@"NSDictionary"24
@"NSArray"48@0:8@"VFXPhysicsShape"16@"NSArray"24@"NSArray"32@"NSDictionary"40
@"<VFXPhysicsContactDelegate>"16@0:8
v24@0:8@"<VFXPhysicsContactDelegate>"16
v28@0:8@"NSArray"16B24
v36@0:8@"NSArray"16@"NSArray"24B32
@"VFXPhysicsShape"16@0:8
v24@0:8@"VFXPhysicsShape"16
@32@0:8q16@"VFXPhysicsShape"24
@28@0:8f16@?<v@?@"<VFXAnimation>"@B>20
B40@0:8@"NSURL"16@"NSDictionary"24@?<v@?f@"NSError"^B>32
@"VFXPhysicsWorld"16@0:8
@40@0:8@"NSString"16@"NSString"24@"NSDictionary"32
@40@0:8@"NSURL"16@"NSDictionary"24^@32
@24@0:8@"MDLAsset"16
@"VFXForceField"24@0:8f16f20
^{MTLComputeEvaluator=@@@i}
@56@0:8^{MTLContext=@@@@}16r^{BufferDescriptor=iii}24r^{BufferDescriptor=iii}32r^{BufferDescriptor=iii}40r^{BufferDescriptor=iii}48
@24@0:8d16
v40@0:8^{__CFXWorld=}16@24@?32
v48@0:8^{__CFXWorld=}16@24@32@?40
v64@0:8^{__CFXWorld=}16@24@32Q40@48@?56
v64@0:8^{__CFXWorld=}16@24@32@40@48@?56
@24@0:8^{__IOHIDDevice=}16
v28@0:8I16@20
^{__IOHIDDevice=}
^{__IOHIDManager=}
{?=[4]}80@0:8{?=[4]}16
v40@0:816q32
{CFXSphere=}16@0:8
v48@0:8{CGPoint=dd}16q32Q40
{CFXSphere="vector"}
v40@0:8@16@24^@32
@"VFXPrefabAsset"
v40@0:8q16@24@32
@40@0:8^{__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}16^{__CFXMesh=}24@32
@32@0:8@?16i24B28
v36@0:8@16i24@?28
v40@0:8@16i24B28@?32
v40@0:8@?16@?24@?32
q40@0:8@16@24q32
v64@0:8@16@24^{__CFXFXProgram={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}b1b1^{__CFXFXProgramDelegate}[2^{__CFString}]^{__CFString}^{__CFString}^{__CFDictionary}^{__CFSet}^v^{__CFDictionary}^vQI}32^{__CFXMaterial=}40^{__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}48^{__CFXFXPass={__CFRuntimeBase=QAQ}^{__CFString}iiB^{__CFXFXRenderGraph}^{__CFString}^{__CFString}^{__CFString}^{__CFString}B^{__CFXFXProgram}^{__CFXMaterial}^{__CFXBlendStates}^{__CFXRasterizerStates}{CFXColor4=(?=[4f]{?=ffff})}CIb1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1^{__CFXRendererElement}QQ{?=^?^?^?^?^?^?^?^?^v}{?=[8{?=CCCb1b1b1b1b1b1[4C]}]{?=CCCb1b1b1b1b1b1[4C]}b3b1b1}{CGPoint=dd}[9f]^{?}I^{__CFXNode}^{__CFXNode}^{__CFArray}^{__CFXNode}C^{__CFString}^{__CFString}^{__CFString}^^{__CFXFXPassInput}qq^{__CFDictionary}@?@?^{__CFDictionary}^v}56
{?="stage"i"bindings"@"NSArray""customBlocks"@"NSDictionary""pass"^{__CFXFXPass}}
B64@0:8@16{CGSize=dd}24Q40@48^@56
@72@0:8@16{CGSize=dd}24@40@48:56^v64
@56@0:8@16{CGSize=dd}24@40@48
v56@0:8^{CGImage=}16{?=qiIq}24@48
v72@0:8{?=qiIq}16@40^{__CVMetalTextureCache=}48@56@?64
@"AVAssetWriterInput"
@"AVAssetWriterInputPixelBufferAdaptor"
@"AVAssetWriter"
@36@0:8@16^{__CFXEngineContext=}24B32
v44@0:8@16@24^{VFXMTLBlitCommandEncoder=@@}32B40
@32@0:8^{__CFXImage=}16B24i28
B48@0:8^{__CFXImage=}16@24@32i40B44
@44@0:8@16Q24^{__CFXEngineContext=}32B40
@44@0:8@16Q24@32B40
@56@0:8^v16^{__CFXEngineContext=}24^q32^B40^B48
@48@0:8^{__CFXMaterialProperty={__CFRuntimeBase=QAQ}(?=^{__CFXImage}^{__CFXImageProxy}^{__CFXTexture}^v^v{CFXColor4=(?=[4f]{?=ffff})}^v)^vq^vb8b1b4c^{__CFXTextureSampler}^{?}fi^v}16^{__CFXEngineContext=}24^B32^B40
@48@0:8^{__CFXImageProxy={__CFRuntimeBase=QAQ}{?=^?^?^?^?}^vC}16^{__CFXTextureSampler={__CFRuntimeBase=QAQ}iiiiiifCiQ}24^{__CFXEngineContext=}32^B40
@52@0:8^{__CFXImage=}16^{__CFXTextureSampler={__CFRuntimeBase=QAQ}iiiiiifCiQ}24i32^{__CFXEngineContext=}36^B44
@32@0:8^v16@24
v56@0:8@16^{CGColorSpace=}24^{CGColorSpace=}32@40@48
v92@0:8I16@20@28@36@44@52^{CGColorSpace=}60^{CGColorSpace=}68@76@84
@112@0:8{?=Q{CGPoint=dd}{CGPoint=dd}f}16
v112@0:8{?=Q{CGPoint=dd}{CGPoint=dd}f}16
B112@0:8{?=Q{CGPoint=dd}{CGPoint=dd}f}16
r^{?=f^vf}32@0:8Q16Q24
v52@0:8S162036
104@0:81632f48B525672^B88^q96
@"NSOrderedSet"
(?="axisMove"{?="originalPosition""axisDirection""mouseDeltaVector"}"planeMove"{?="originalPosition""planeNormal""pointInPlane""mouseDeltaVector"}"axisRotate"{?="rotationSign"f"originalRotation"})
{?="positions"^"orientations"^"originalLocalMatrix"^{?}"scales"^}
^{?=f^vf}
@"NSLock"
@"VFXBillboardConstraint"
@24@0:8^{__CFXMesh=}16
^{__CFXMesh=}16@0:8
v24@0:8^{__CFXMesh=}16
@40@0:8#16#24@32
@"VFXEntityObject"
^{__CFXCoreEntityHandle={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFString}^{__CFDictionary}^{__CFArray}B^v}
@24@0:8^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}16
@32@0:8r^d16q24
@40@0:8r^16q24^q32
@40@0:8r^{CGPoint=dd}16q24^q32
@68@0:8@16@24q32s40Q44q52q60
@32@0:8r^16q24
@32@0:8r^{CGPoint=dd}16q24
@44@0:8r^f16q24B32^{CGColorSpace=}36
@76@0:8@16^{CGColorSpace=}24q32B40q44q52q60q68
@64@0:8@16Q24@32q40q48q56
@84@0:8@16@24^{CGColorSpace=}32q40B48q52q60q68q76
@96@0:8@16^{CGColorSpace=}24^^{CGColorSpace}32q40q48q56q64q72^q80^q88
^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}16@0:8
@56@0:8@16Q24Q32Q40Q48
^{__CFXMeshSource={__CFXGenericSource={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXSourceAccessor}(?=^{__CFData}^v^v)qb1b1b1}SCC}
^{CGColorSpace=}
B32@0:8@16#24
B40@0:8@16^f24^f32
^{__CFXConstraint={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFString}fBB{?=^?^?^?^?^?^?}^v}16@0:8
v24@0:8^{__CFXConstraint={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFString}fBB{?=^?^?^?^?^?^?}^v}16
^{__CFXConstraint={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFString}fBB{?=^?^?^?^?^?^?}^v}
@28@0:8B16@?20
@40@0:8{CGSize=dd}16d32
@"NSArrayController"
@"NSObject"
@"NSTableView"
@"NSValue"
@"VFXUIVector4TextField"
@40@0:8@16Q24@32
v24@0:8^{__CFXTextGeometry={__CFXShapeGeometry={__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}{?=cfffif^{CGPath}^v^{CGPath}^v}^{__CFXMesh}[32C]}{?=^{__CTFrame}^v^viiBBB{CGRect={CGPoint=dd}{CGSize=dd}}}}16
@24@0:8^{__CFXTextGeometry={__CFXShapeGeometry={__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}{?=cfffif^{CGPath}^v^{CGPath}^v}^{__CFXMesh}[32C]}{?=^{__CTFrame}^v^viiBBB{CGRect={CGPoint=dd}{CGSize=dd}}}}16
{?={?=cffif^v^v}^v^viiBB{CGRect={CGPoint=dd}{CGSize=dd}}f}16@0:8
@"NSBezierPath"
@"NSFont"
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
@40@0:8@16^@24^B32
@"<MTLTexture>"32@0:8@"NSURL"16^@24
@"<MTLTexture>"40@0:8@"NSURL"16^@24^B32
@"<VFXMaterialPropertyTextureProvider>"
v24@0:8^{__CFXShapeGeometry={__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}{?=cfffif^{CGPath}^v^{CGPath}^v}^{__CFXMesh}[32C]}16
@24@0:8^{__CFXShapeGeometry={__CFXGeometry={__CFXEntity={__CFRuntimeBase=QAQ}^v^{__CFString}^{__CFString}^{__CFDictionary}^{__CFXWorld}q}^{__CFXMesh}^{__CFXMaterial}^{__CFArray}^{__CFSet}^{__CFArray}^{?}b1^?{?=CB{?=BCCC}^{__CFXMeshElement}^{__CFXMeshSource}^{__CFXMesh}^v^v}{?=CfIC(?={?=ff}{?=f}{?=f}{?=Cb1b1})}C}{?=cfffif^{CGPath}^v^{CGPath}^v}^{__CFXMesh}[32C]}16
{?=cffif^v^v}16@0:8
^{btHingeConstraint=^^?ii(?=i^v)fBBi^{btRigidBody}^{btRigidBody}ff^{btJointFeedback}[3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f}][3{btJacobianEntry={btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}{btVector3=(?=[4f])}f}]{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}{btTransform={btMatrix3x3=[3{btVector3=(?=[4f])}]}{btVector3=(?=[4f])}}ff{btAngularLimit=fffffffB}ffffBBBBBfifff}16@0:8
{?="anchorA""anchorB""axisA""axisB"}
v36@0:8@16q24f32
@40@0:8@16q24^{__CFXLOD=}32
^{__CFXLOD=}
v40@0:8r^v16Q24Q32
v40@0:8@16Q24Q32
v32@0:8Q16Q24
v48@0:8r^@16r^Q24{_NSRange=QQ}32
v48@0:8@16Q24Q32Q40
v56@0:8r^@16r^Q24r^Q32{_NSRange=QQ}40
v40@0:8Q16Q24Q32
v48@0:8r^v16Q24Q32Q40
v40@0:8r^@16{_NSRange=QQ}24
v40@0:8@16f24f28Q32
v56@0:8r^@16r^f24r^f32{_NSRange=QQ}40
v32@0:8r^{?=dddddd}16Q24
v32@0:8Q16r^{?=II}24
v48@0:8{?=QQQQ}16
v32@0:8r^{?=QQQQ}16Q24
v32@0:8f16f20f24f28
v24@0:8I16I20
v88@0:8{?=QQQ}16{?=QQQ}40{?=QQQ}64
v80@0:8@16Q24{?=QQQ}32{?=QQQ}56
v48@0:8Q16Q24Q32Q40
v64@0:8Q16Q24Q32@40Q48Q56
v56@0:8Q16Q24Q32@40Q48
v56@0:8Q16Q24Q32Q40Q48
v80@0:8Q16Q24Q32@40Q48Q56q64Q72
v40@0:8Q16@24Q32
v64@0:8Q16Q24@32Q40@48Q56
v72@0:8Q16Q24Q32@40Q48Q56Q64
v56@0:8Q16@24Q32@40Q48
v88@0:8Q16Q24Q32@40Q48@56Q64Q72Q80
v72@0:8Q16@24Q32@40Q48@56Q64
v40@0:8{?=QQQ}16
v40@0:8r^@16Q24Q32
v48@0:8r^@16Q24Q32Q40
v32@0:8r^@16Q24
v36@0:8@16Q24B32
v24@0:8@"<MTLRenderPipelineState>"16
v40@0:8@"<MTLBuffer>"16Q24Q32
v48@0:8@"<MTLBuffer>"16Q24Q32Q40
v32@0:8@"<MTLTexture>"16Q24
v32@0:8@"<MTLSamplerState>"16Q24
v40@0:8@"<MTLSamplerState>"16f24f28Q32
v32@0:8@"<MTLVisibleFunctionTable>"16Q24
v32@0:8@"<MTLIntersectionFunctionTable>"16Q24
v32@0:8@"<MTLAccelerationStructure>"16Q24
v24@0:8@"<MTLDepthStencilState>"16
v80@0:8@"<MTLBuffer>"16Q24{?=QQQ}32{?=QQQ}56
v64@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56
v56@0:8Q16Q24Q32@"<MTLBuffer>"40Q48
v80@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56q64Q72
v40@0:8Q16@"<MTLBuffer>"24Q32
v64@0:8Q16Q24@"<MTLBuffer>"32Q40@"<MTLBuffer>"48Q56
v32@0:8@"<MTLFence>"16Q24
v72@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56Q64
v56@0:8Q16@"<MTLBuffer>"24Q32@"<MTLBuffer>"40Q48
v88@0:8Q16Q24Q32@"<MTLBuffer>"40Q48@"<MTLBuffer>"56Q64Q72Q80
v72@0:8Q16@"<MTLBuffer>"24Q32@"<MTLBuffer>"40Q48@"<MTLBuffer>"56Q64
v32@0:8@"<MTLResource>"16Q24
v40@0:8@"<MTLResource>"16Q24Q32
v24@0:8@"<MTLHeap>"16
v32@0:8@"<MTLHeap>"16Q24
v40@0:8@"<MTLIndirectCommandBuffer>"16{_NSRange=QQ}24
v40@0:8@"<MTLIndirectCommandBuffer>"16@"<MTLBuffer>"24Q32
v36@0:8@"<MTLCounterSampleBuffer>"16Q24B32
v40@0:8{__RGRenderCounters={?=^{__vfx_counters}}III}16
v48@0:8@16Q24@32Q40
{__RGRenderCounters="storage"{?="impl"^{__vfx_counters}}"drawCount"I"indirectDrawCount"I"primitiveCount"I}
{Cache="depthStencilStates"@"<MTLDepthStencilState>""renderPipelineState"@"<MTLRenderPipelineState>""winding"Q"cullMode"Q"fillMode"Q"clipMode"Q"blendColor""stencilReferenceValueFront"I"stencilReferenceValueBack"I"viewports"[16{?="originX"d"originY"d"width"d"height"d"znear"d"zfar"d}]"viewportsCount"Q"vertex"{BindingsCache<31, 128, 16>="buffers"[31{BufferAndOffset="buffer"@"<MTLBuffer>""offset"Q}]"textures"[128@"<MTLTexture>"]"samplers"[16@"<MTLSamplerState>"]}"fragment"{BindingsCache<31, 128, 16>="buffers"[31{BufferAndOffset="buffer"@"<MTLBuffer>""offset"Q}]"textures"[128@"<MTLTexture>"]"samplers"[16@"<MTLSamplerState>"]}"vertexTexturesToBind"[2Q]"fragmentTexturesToBind"[2Q]"deferredBindingEnabled"b1"windingChanged"b1"cullModeChanged"b1"fillModeChanged"b1"clipModeChanged"b1"lockCullMode"b1"lockFillMode"b1"viewportsChanged"b1"needsDeferredBinding"b1}
v64@0:8{?={?=QQQ}{?=QQQ}}16
v64@0:8{?=QQQ}16{?=QQQ}40
v56@0:8@16Q24{?=QQQ}32
v24@0:8@"<MTLComputePipelineState>"16
v32@0:8@"<MTLBuffer>"16Q24
v56@0:8@"<MTLBuffer>"16Q24{?=QQQ}32
v24@0:8@"<MTLFence>"16
{Cache="computePipelineState"@"<MTLComputePipelineState>""buffers"[31@"<MTLBuffer>"]"offsets"[31Q]"textures"[128@"<MTLTexture>"]"samplers"[16@"<MTLSamplerState>"]}
v72@0:8@16{?=QQQ}24{?=QQQ}48
v64@0:8@16@24Q32{?=QQQ}40
v28@0:8@16I24
url=%@
LoadImage (CG)
Deformers
GenerateShader
WaitDrawable
RenderFrame (View)
Delegate (didRender)
Delegate (willRender)
Delegate (update)
Animations
Delegate (didApplyAnimation)
Physics
Delegate (didUpdatePhysics)
Constraints
Delegate (didApplyConstraints)
VFXCore
Audio
RenderFrame
LoadWorld
dd %d
LoadImage (KTX)
programID=%d
CompileShader
Subdivision
DisplayLink (coalesced)
DisplayLink
RenderFrame (Layer)
LoadImage (DDS)
LoadImage (ASTC)
TransactionFlush
Culling
%ld %s
CB: %s
size: %s
URL: %s
CB %s
!!! Clock offset inconsistency, computer went to sleep during profiling, profiling timing are invalid. !!!
$s3VFX19ThrottledInvocationP
yx_G
yxcSg
So17OS_dispatch_queueC
So7NSTimerCSg
ySfG
ySfGSPy
ySfGtXCSg
SvSg
ySfGSPy
ySfGtXCSg
So8NSStringC
_A55At
ySfG_A3Bt
$ss21_ObjectiveCBridgeableP
$ss25ExpressibleByArrayLiteralP
$ss10SetAlgebraP
$ss9OptionSetP
_A5At
ySvSgXCSg
ySfG_A2Bt
ySfGSPy
G_SftXCSg
So7NSErrorC
_AAt
ySfG_ABt
ySfG_ABt
ySfG_ABt
ySdG_A2Bt
ySdG_A3Bt
ySfG_A2Bt
ySfG_A2Bt
ySfG_A3Bt
ySfG_A3Bt
$s10Foundation21_BridgedStoredNSErrorP
$s10Foundation18_ErrorCodeProtocolP
_A15At
$s3VFX20EventContextProtocolP
ySfGSg
ySfGSg
SfSg
ySfGSg
SbSg
So10MTLTexture_pSg
$s3VFX17UTF8InitializableP
$sST
SnySiG
$sSl
$sSK
$sSM
$sSk
So9MTLDevice_p
So15MTLCommandQueue_p
6entity_
4type
11addressMode
06filterD0t
6entity_t
6entity_
8property
5spacet
6entity_
8propertyt
6object_t
6object_
13scriptKeyPatht
SDySS
SDySSSDySSypGG
ypXp
SiSg
$s3VFX11DeallocableP
SgXw
SaySSGSg
$s3VFX10VFXBindingP
ySdG
ySdG
ySdG
$s3VFX18ScopeLevelProtocolP
yytG
$s3VFX18ScopeLevelProviderP
ytytIegnr_
$s3VFX15MappingRewriterP
_pXp
$s3VFX14AttributeArrayP
ySfGG
ySfGGG
ySfGGG
ySfGGG
$s3VFX21ContextDescriptorTypeP
$s3VFX25ContextDescriptorProtocolP
$s3VFX26_ContextDescriptorProtocolP
SPyxG
$s3VFX11PointerTypeP
xSgXw
SDySS
SDyS2SG
SDySSSaySSGG
$ss12CaseIterableP
$s3VFX13ComponentMetaP
$s3VFX20DynamicComponentMetaP
$s3VFX19ComponentMetaCameraP
$s3VFX20ComponentMetaTextureP
$s3VFX26ComponentMetaParticleSpawnP
$s3VFX25ComponentMetaParticleInitP
$s3VFX27ComponentMetaParticleUpdateP
$s3VFX29ComponentMetaParticleColliderP
$s3VFX27ComponentMetaParticleRenderP
$s3VFX8EnumMetaP
ySiG
ySbG
ySiSgG
ySfG
_pXmT
_pXmT
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfG
ySfGG
ySfGG
ySfGG
ySay
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySSG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
SnySfG
ySnySfGG
ySfGG
ySfGG
ySfG
ySfGG
ySfGG
SaySiGSg
ySaySiGSgG
yypG
ySfGG
So7VFXNodeCSg
ySo7VFXNodeCSgG
SaySfG
ySaySfGG
SaySSG
ySay
ySaySSGG
ySnySiGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGSg
ySfGSgG
ySfGSgG
ySfGSgG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGSgG
ySfGSgG
ySfSgG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySfGG
ySDySi
So8VFXWorldC
yXlSgXw
17ScriptCustomState
$s3VFX24TriggerParameterCallableP
$s3VFX12TriggerEventP
So7NSEventC
So7VFXViewC
So17VFXTriggerManagerC
So17VFXTriggerManagerCSgXw
SDySi
ySDySSSVGc
So7VFXViewCSgXw
SDySS
SDySi
SDySi
SDySi
SDySiSbG
SDySi
So16MTLBinaryArchive_pSg
SaySo16MTLBinaryArchive_pG
So10MTLLibrary_p
So17OS_dispatch_groupC
So22MTLRenderPipelineState_p
So27MTLRenderPipelineReflectionCSg
So23MTLComputePipelineState_p
So28MTLComputePipelineReflectionCSg
ScTy
yypc
So11MTLFunction_p
ScA_pSg
ytIeghHr_
_pIeghHrzo_
So10MTLLibrary_pSg
SgXw
_pIeghHrzo_
SS_So10MTLLibrary_pSgt
So16NSOperationQueueCSg
ySo10MTLLibrary_pc
So8VFXWorldCSgXw
$s3VFX21ScriptKeyPathProviderP
_SSypXpt
_pXp
SwSg
ySvSgG
$s3VFX12RenderOutputP
So12CAMetalLayerC
ySbcSg
ySo16MTLCommandBuffer_p_So10MTLTexture_ptcSg
So16MTLCommandBuffer_pSg
So10MTLTexture_p
So9MTLBuffer_p
So17MTLCommandEncoder_pSg
yXlSg
So23MTLRenderPassDescriptorCSg
SaySo23MTLRenderPassDescriptorCG
SrySo23MTLRenderCommandEncoder_pSgG
So22MTKMeshBufferAllocatorC
So21OS_dispatch_semaphoreC
SaySiG
Si5count_So9MTLBuffer_p6bufferSi13bytesPerIndextG
So16MTLCommandBuffer_p
So15CAMetalDrawable_p
Ieg_
$s3VFX28SerializationBaseTypeRegitryP
SS_Sb8expectedt
_p5after_t
$s3VFX12MetadataTypeP
ypXpSg
SPySiG
So16AVCaptureSessionC
So13AVAudioEngineC
So16AVAudioMixerNodeC
So17AVAudioPlayerNodeC
SpySfGSg
So6NSLockC
So8AVPlayerCSg
So12AVPlayerItemCSg
SdSg
So23AVPlayerItemVideoOutputCSg
SgXw
SgXwz_Xx
So11AVAudioFileC
SgSg
$s3VFX14_GraphProtocolP
12_DeletedNode
5_Node
SDySOSiG
SDySO
q_5_Node
SpySay5_Node
QzGG
$s3VFX9AllocatorP
SaySwG
$s3VFX17ScriptCodeGenNodeP
SDySO
SDySSSiG
$s3VFX11CodableNodeP
SaySSSgG
$s3VFX19QueryCursorProtocolP
$s3VFX12BufferSourceP
ySiGSg
So11MTLFunction_pSg
So8NSBundleC
_pGG
ShySOG
$s3VFX15BufferAllocatorP
$s3VFX12QueryResultNP
$s3VFX20DefaultValueProviderP
$s3VFX24OptionalProtocolDetectorP
$s3VFX18SourceInfoProviderP
_pSg
ycSg
SaySS_yptG
$s3VFX18BaseValueAccessorsP
$s3VFX14EntityRemapperP
SayxGyc
ySayxGc
$s3VFX15EntityGetSetAnyP
_xtc
_pXpSg
$sSY
yqd__qd_0_G
qd__
G0R1_
qd_0_
G1R1_
G0R2_
G1R2_
G0R0_
yq_G
yxq_G
So11NSConditionC
SayypGG
SaySSGG
SDySS
SDySS
SgXwz_Xx
Sg5spacet
_pXp
SDySS
$s3VFX18HolographicDisplayP
So8NSWindowCSg
SgXw
SgXwz_Xx
AAGSg
SgXu
So9MTLDevice_pSg
So15MTLCommandQueue_pSg
IeyB_
ShySSG
SiGSi
_pIgnrzo_
ySOSiG
SpySay
SiIegnr_
ytGyt
_pIgnrzo_
ySOytG
ytIegnr_
SiGSi
_pIgnrzo_
SpySay
SiIegnr_
ytGyt
_pIgnrzo_
ytIegnr_
SgGAD
_pIgnrzo_
AASgIegnr_
SgGAD
_pIgnrzo_
SgIegnr_
SgGAD
_pIgnrzo_
SgIegnr_
SSSgGAC
_pIgnrzo_
ySOSSSgG
SSSgIegnr_
SgtGAC_AEt
_pIgnrzo_
SgtG
SgtIegnr_
SDySiSayy
Iegg_
_pIgnrzo_
AAIegnr_
_pIgnrzo_
AAIegnr_
SgGAD
_pIgnrzo_
SgIegnr_
Si6source_
ySfG8locationt
$s3VFX24ParticleComponentSpawnerP
ySfGG
ySfGGSg
ySfGGSg
yAAy
SDyS2iG
SgGSg
ypXp_Svt
ypXp_SSt
$s3VFX6ScriptP
_SSt
SS_SS4typet
SDySS
SDySS
SayAA9paramType_
17codeSourceSnippettGG
So15NSRecursiveLockC
yycG
So8NSBundleCSg
SDySS
SDySS
ypXmT
$s3VFX13QueryProtocolP
So23MTLComputePipelineState_pSg
_pXpG
SgXu
So9MTLDevice_pSgXu
So16NSOperationQueueC
Si11compileHash_t
yp7attempt_
Sg6loaderSaySVG7symbolsSaySo11MTLFunction_pG14metalFunctionsyp11customStatet
yp7attempt_
yxGG
yxGG
yxGG
yxGG
_pSg
_pSgz_Xx
_pSgIegg_
yxGz_
RzlXX
yxGz_
RzlXX
yxGz_
RzlXX
yxGz_
RzlXX
yxGz_
RzlXX
yxGz_
RzlXX
yxGz_
RzlXX
yxGz_
RzlXX
_pSg
So7MTLHeap_p
SaySo9MTLBuffer_pG
So9MTLBuffer_pSg
SgXw
SgXwz_Xx
$s3VFX16ParticleRendererP
$s3VFX26ParticleRendererWithSystemP
$s3VFX27ParticleDefaultRendererableP
SgIegyr_
$s3VFX26MaterialParametersProviderP
_pSg
$s3VFX19EventSourceProtocolP
yxcG
SayxG
$s3VFX11CancellableP
_pSg_ABt
$s3VFX13EventProtocolP
$s3VFX14ColorRampInputP
SDySS
SgXw
SDySS
$s3VFX6SystemP
$s3VFX15ComponentSystemP
$s3VFX11ImGuiSystemP
So6NSViewC
SgXw
So16MTLCommandBuffer_pSo10MTLTexture_pIeyBhyy_
SDySS
SgXw
SDySS
$sSt
$s3VFX15AnimationTimingP
$s3VFX9AnimationP
$s3VFX15AnimationTargetP
Sf9amplitude_t
7bounces_Sf10bouncinesst
12oscillations_Sf11springinesst
Sf8exponent_t
Sf4base_t
Sf5power_t
Sf10anticipate_Sf8midPoint
7bouncest
x5value_Si5indext
SgXw
SgXwz_Xx
Sayx5value_Si5indextG
yxGG
yxGG
Sf11innerRadius_t
$s3VFX14RemappableNodeP
SDySi
SayyycG
ySbG
ACGSgyt
_pIegnnnrzo_
ACGSg
_pIeggygzo_
AAGSgz_Xx
ytIegr_
ypSg
$s3VFX17IterableOptionSetP
7ElementSTQz
8RawValueSYQz
$s3VFX19EnumerableOptionSetP
SDySS
SDySS
SDySS
SDySS
SDySS
SDySS
SDySS
SDySS
SDySS
SDySS
SDySS
SDyS2S11outParamUID_
Sg14optMetadataSettG
SDySS
SDySS
SDySS
SgXw
SaySo11MTLResource_pG
So18MTLArgumentEncoder_pSg
SDySi
$s3VFX8TypeMetaP
$s3VFX25ReplicationEntityRemapperP
$s3VFX21ReplicationRemappableP
$s3VFX23AnyComponentValueWriterP
$s3VFX18AnyComponentWriterP
$s3VFX19ReplicationDelegateP
_pSg
_pSgXw
SgXw
_pSgXo
SS4name_t
G_AB
7toScopet
14sourceInstance_Say
_pXpG14componentTypesSay
_pG15classComponentsSb6active
5scopet
G_Say
_pXpG14componentTypesSay
_pG15classComponentsSb6active
5scopeSi5countt
12sourceEntity_t
8snapshot_
8instancet
12sourceEntity_Sb10tombstonedt
14sourceInstance_Sb6activet
7subject_
_pXp12relationTypeAA6objectt
14sourceInstance_t
14sourceInstance_
_p6writert
14sourceInstance_
_p6writert
14sourceInstance_
_pXp13componentTypet
_p12sourceObject_yAA_pct
Iegn_
_pXmT
Igo_
$s3VFX16WorldCounterableP
yycSg
SvIeyByd_
SDySi
SDySiSo10MTLTexture_pG
$s3VFX19VFXCoreViewDelegateP
_pSgXw
So12CAMetalLayerCSg
So7NSColorCSg
SgXw
SbIegy_
$s3VFX21ParticleEmitterSystemP
$s3VFX28ParticleComponentRequirementP
$s3VFX34ParticleComponentSystemProcessableP
$s3VFX17ParticleAttributeP
$s3VFX35ParticleAttributeWithoutRequirementP
$s3VFX36ParticleAttributeConstantRequirementP
$s3VFX30ParticleAttributeWithoutSystemP
$s3VFX24ParticleEmitterGPUSystemP
$s3VFX31ParticleComponentGPUProcessableP
SpyxG
yxSgG
yq_G
SayxSgG
SpySiG
yx_G
yxGG
yx_GG
SryxG
yxq_GG
yxq_GG
yxGG
yxGG
Sf6cutoff_t
$s3VFX6DumperP
yycG
_pXmT
10invalidatet
10invalidatet
4from_
2totG
ySfG6center_Si10populationtG
ySfGG
$s3VFX17ExternalDataTableP
_pSg
So10MTLTexture_p10irradiance_SoAA_p8radiancetSgSg
SgSg
SDySi
ySiGG
So8NSThreadC
_SSSgt
So15MTLSamplerState_pSg
SDyS2SGSg
ypXmT_SSt
SsSg
SayyXlG
$s3VFX10DataSource33_90B01CB79DF47397B2208C87FE676378LLP
y_x_G
ySDy
ypGzcSg
SDySi
y_xGG
$ss30KeyedDecodingContainerProtocolP
$s3VFX13AnyExtensionsP
$s3VFX14RewriteContextP
So8VFXWorldCSg
SDySSSDy
AAGG
9operation_
ySiGSg7indicestGG
9operation_
ySiGSg7indicestG
_pXpSg
_pSg
$s3VFX15DataDestination33_1D356F8D984976FF2DBF33523074BD8DLLP
$s3VFX11DataStoring33_1D356F8D984976FF2DBF33523074BD8DLLP
y_xGG
$ss30KeyedEncodingContainerProtocolP
$s3VFX23FloatingPointBitPatternP
SDySOSe_SEpXpG
10BitPattern
G_AAt
_AAt
$s3VFX20DefaultInitializableP
$s3VFX15DebugUIDrawableP
$s3VFX9ComponentP
$s3VFX15EntityComponentP
$s3VFX14ClassComponentP
$s3VFX15WorkerComponentP
$s3VFX14SceneComponentP
$s3VFX10NotCodableP
$s3VFX16TextureAllocatorP
So20MTLTextureDescriptorC
SDySSSo10MTLTexture_pG
ySv_S2VSftc
ySv_S4VSftc
SDySiSDy
So20MTLDepthStencilState_p
SDySo9MDLObjectC
SDySo9MDLObjectC
$s3VFX14FutureProtocolP
$s3VFX20FutureResultProtocolP
So17OS_dispatch_groupCSg
SaySi5token_y
yxGc8callbacktG
qd__Sg
yxGqd__Iglr_
SvIgy_
3VFX17VFXEffectDelegate_pSg
$s3VFX17VFXEffectDelegateP
$s3VFX27HolographicRendererProtocolP
SgIeghHr_
$s3VFX21VFXRERenderTargetInfoP
$s3VFX20VFXREDrawCallContextP
$s3VFX14VFXStencilInfoP
ySo23MTLRenderCommandEncoder_p_So20VFXREDrawCallContext_ptcSg
So23MTLRenderCommandEncoder_pSo20VFXREDrawCallContext_pIeggg_
So20VFXREDrawCallContext_p
So18VFXAnimationPlayerCSg
SDySo8VFXModelC
SDySo11VFXMaterialC
$s3VFX10BridgeableP
$s3VFX15BridgeComponentP
So8NSObjectC
_pSgXw
So7VFXNodeCSgXw
ySfG
So12VFXAssetNodeCSpy
GIggy_
So8VFXModelCSg
So18VFXParametricModelCSg
SSSg
So28VFXCameraEffectDoughnutBokehCSg
So27VFXCameraEffectDepthOfFieldCSg
So25VFXCameraEffectMotionBlurCSg
So20VFXCameraEffectGrainCSg
So23VFXCameraEffectLensBlurCSg
So23VFXCameraEffectExposureCSg
So26VFXCameraEffectToneMappingCSg
So10VFXMorpherCSg
So11VFXMaterialCSg
So13VFXForceFieldCSg
So14VFXPhysicsBodyCSg
So33VFXCameraEffectChromaticTransformCSg
So20VFXCameraEffectBloomCSg
So9VFXCameraCSg
So8VFXLightCSg
So19NSRegularExpressionC
11description_
5valuet
SaySDySi
yyycG
So27OS_dispatch_source_data_add_pSg
SgXw
$s3VFX23OptionalStrongReferenceP
SDySi
So15MTLSamplerState_p
3cpu_So10MTLTexture_p3gputG
_pIegrzo_
So9MTLBuffer_pSgXw
So10MTLTexture_pSgXw
$s3VFX15DebugInfoDrawerP
4Item
ySfGAB
Igyyy_
SfSg10screenSize_t
4line_Sf9frequencySf9amplitudet
ySfG6center_Sf1aSf1bt
_Si9lineCountt
_Si9edgeCountSi04ringB0t
ySfG5start_AB3endt
So28VFXCameraEffectDoughnutBokehC
So7VFXNodeC
So9VFXCameraC
So33VFXCameraEffectChromaticTransformC
So23VFXCameraEffectLensBlurC
So20VFXCameraEffectGrainC
So25VFXCameraEffectVignettingC
So25VFXCameraEffectVignettingCSg
So25VFXCameraEffectMotionBlurC
So26VFXCameraEffectColorFringeC
So26VFXCameraEffectColorFringeCSg
So26VFXCameraEffectToneMappingC
So23VFXCameraEffectExposureC
So27VFXCameraEffectColorGradingC
So27VFXCameraEffectColorGradingCSg
So27VFXCameraEffectDepthOfFieldC
So20VFXCameraEffectBloomC
So11VFXMaterialC
So19VFXMaterialPropertyC
So12VFXAssetNodeC
So8VFXModelC
So18VFXParametricModelC
So14VFXPhysicsBodyC
So13VFXForceFieldC
So8VFXLightC
So13VFXIESProfileCSg
So15VFXPhysicsWorldC
$s3VFX22VFXDiagnosticsTrackingP
_pSgXw
$s3VFX11EventStreamP
SgXw
SDyxq_G
x3key_q_5valuet
yxq_GG
$ss30ExpressibleByDictionaryLiteralP
yxq_GG
yxq_GG
$s3VFX17RelationComponentP
_pXp
$s3VFX18ParticleCollidableP
ySiG
SS_SSSg4codet
_p_SSSg4codet
yyyccSg
$s3VFX14FloatGeneratorP
_pXpGG
_p_SitGG
_pSg
Iegggy_
Sf5scale_t
SnySfG5range_t
So8SCNSceneCSg
So11SCNRendererCSg
SgXu
_pXpSg
SayypXpSgG
$s3VFX10AnyDecoderP
$s3VFX10AnyEncoderP
$s3VFX20WorldReferencingNodeP
SDySS
So28RGCachedRenderCommandEncoderC
ySo16MTLCommandBuffer_p_So10MTLTexture_ptYbcSg
$s3VFX22DynamicPropertyStoringP
SaySo10MTLTexture_pG
$s3VFX12SectionArrayP
SDySOSay
4node_Si11outputIndexSi05inputC0tGG
SDySO
SDySOShySiGG
ShySiG
SayShySiGG
_So7VFXNodeCSg
$s3VFX21ParticleSizeOperationP
$s3VFX10AnimatableP
ySfG5color_Sf4timet
x_Sft
ySfG
SDySO
$s3VFX15ScriptComponentP
SaySVGSg
SaySo11MTLFunction_pGSg
17ScriptCustomState
QzSg
SayypG
$s3VFX17AssetPathResolverP
_pSg
$s3VFX24FileAssetEntityComponentP
SDySi
Si8maxWidth_Si0A6HeightSb15keepAspectRatiot
Si5width_Si6heightt
So13NSFileWrapperC
XDXMT
So20MTLDepthStencilState_pG
So20MTLDepthStencilState_p5state_
4desct
_A3At
$s3VFX13_NodeProtocolP
5_This
SDySSSDySSSay
SDySSSo10MTLLibrary_pG
ySfGtc
SDySSypGSg
ySfGG
SaySo8NSBundleCG
So19MTLVertexDescriptorC
SrySfG
$s3VFX18CanvasMetadataNodeP
$s3VFX11KeyValueMapP
SDySi
_pXpG
_pXpG
_pXpG
_pXp6stored_AA_pXp8unpackedtG
x_xxxxxxxt
x_xxxxxxxxxt
yxGG
yxGG
yxGG
yxGG
variant
interval
lastInvocationTime
invocation
queue
timer
dimensions
edges
cellStrideBytes
outsideRepeatStrideBytes
data
sample_func
halfPixel
_rawValue
time
portal_opacity
vignetting_fadeout_distance_normalization
vignetting_total_fadeout_distance
vignetting_pivot_crws_position
crws_reference_position
render_options
breakthrough_read_index
padding
fade_opacity
clipping_index_slice
portal_crossing_plane
environment_lighting_weight
green
blue
alpha
rawValue
throttle
delay
vector
mapped_address
allocated_size
memory_entry_port
is_malloc
width
height
value
timescale
flags
epoch
pitch
tilt
center
inv_view
subp
display_aspect
__sig
__opaque
impl
columns
__cleanup_stack
textureSize
tileCount
RawValue
_ObjectiveCType
ArrayLiteralElement
Element
Parameter
offset
count
_os_unfair_lock_opaque
tempRegisterCount
instructionCount
registerCount
ALUCount
threadGroupAtomicCount
threadGroupLoadCount
threadGroupStoreCount
deviceAtomicCount
deviceLoadCount
deviceStoreCount
branchCount
loopCount
textureReadCount
textureWriteCount
spillCount
waitCount
fp16InstructionCount
fp32InstructionCount
int16InstructionCount
int32InstructionCount
kind
active
strength
dampening
noiseAmount
noiseSeed
categoryBitMask
shape
scope
cullMode
falloffExponent
halfExtents
smoothness
speed
planes
ourl_lock
ourl_count
_width
_height
_depth
_arrayLength
_mipmapLevelCount
_sampleCount
allowGPUOptimizedContents
pixelFormat
textureType
storageMode
usage
cpuCacheMode
compressionType
hazardTrackingMode
swizzle
__routine
__arg
__next
isFirstFrame
simulationIndex
force_ori
force_dir
field_from_emitter
extents
damp_dt
emitter_amount
noise_amount
falloff_power
outside
falloff_direction
falloff_shape
originX
originY
znear
zfar
composition
killshape_from_emitter
inside
range
xRange
yRange
zRange
property
_nsError
new_ws_from_old_ws
factor
thread_count_offset
thread_count_multiplier
threads_per_threadgroup
instance_count_offset
instance_count_multiplier
vertex_count_offset
vertex_count_multiplier
view_from_crworld
proj_from_crworld
proj_from_view
view_from_proj
crws_camera_pos
inverseViewProjectionMatrix
crInverseViewProjectionMatrix
crws_from_viewport
worldReferencePosition
renderTargetSize
viewportCount
useVertexAmplification
ndcFromScreen
nearFar
linearizationFactors
fadeOpacity
renderTargetDepthStencilFormatSampleCount
vrrMapPhysicalSizeArray
viewport_percents
vrrMapScreenSize
portal_clip_plane
lastframe_proj_from_crworld
fogParameters
fogColor
affects_alpha
grid
direction_axis
orientation_quat
angular_limits
velocity_range
spreading_range
tangent_axis
tangent_force_range
texture_scale
texture_bias
curr_transform
last_transform
curr_rotation
emitter_from_shape
mask_channel
mask_threshold
inner_radius
uniform_count
start_index
motion_distribution
emit_on_surface
inherit_color_from_texture
has_last_frame_transform
scale
bias
transform
velocity
force_emitter_space
gravity
linearDamping
elasticity
friction
local_from_world
world_from_local
die_on_collide_probability
radiusMultiplier
radius
half_height
world_box_velocity
box_size
corner_radius
half_extents
plane
world_from_local_ortho
view_proj
inverse_view_proj
view
inverse_view
origin_near
origin_far
z_scale_bias
z3_scale_bias
z3_near
z3_far_minus_near
emitter_from_cache
emitter_from_cache_rotation
cache_count
motion_transfert
position_format
color_format
normal_format
orientation_format
velocity_format
size_format
emitter_from_cache_scale
point_count
albedo
emissive
normal
metalness
roughness
occlusion
cutoff
intensity
mode
particle_transform
softDistance
stretchFactor
curvature
uvScaleBias
upAxis
noiseScale
invFrameSize
frameCount
thickness
multiplyThicknessByAlpha
enableVelocityStretch
tiles
view_portion
quilt_aspect
overscan
quilt_invert
show_raw
origin
size
Code
_ErrorType
depth
operation
lower_bound
upper_bound
pass
outputs
pointScale
screenMinSize
screenMaxSize
ribbonStride
inv_subdivision_count
uv_scale_bias
vertex_count_per_segment
profile_count
orientationMode
textureMode
begin_order_index
end_order_index
guardCount
queue
Parameter
RawValue
type
intensity
color
orientation
position
attenuationRadius
zNear
zFar
orthoScale
outerAngle
innerAngle
extents
doubleSided
texture
textureTag
query
elapsedTime
type
RawValue
data
count
Element
Iterator
Index
SubSequence
Indices
shaderCache
device
commandQueue
subject
graph
graphScriptsDiffByScheduling
particleUpdateScriptDiff
particleInitScriptDiff
triggerScriptsDiffByScheduling
update
remove
keep
typeInfoByName
componentInfoByNameForFuzzyLookup
metadata
type
preVersion
innerAngle
outerAngle
aspectRatio
rectangular
near
intensity
texture
value_w1
value_w0
RawValue
RawValue
entityManager
identifier
objectID
objectName
bindingName
userManual
type
semantic
isPublic
enumName
enumCases
property
cancellables
onDeallocTrigger
onCancelTrigger
entityManager
classIndex
scope
unmanagedEntityClass
storageLayout
mutationID
isActive
isResizable
data
vm_data
entityIndices
handle
filters
_staticWorkerAffinity
activeRange
newlyCreatedLowerBound
newlyDestroyedLowerBound
worldBox
worldBoxLastMutation
lodMaxSquareDistance
lodMaxSquareDistanceLastMutation
_shortLivedLock
_ownershipLock
packedType
entityManager
entity
componentType
updateGroupTime
float1Query
float2Query
float3Query
float4Query
pointer
flags
parent
mangledNameOffset
fieldTypesAccessor
reflectionFieldDescriptor
numberOfFields
fieldOffsetVector
superClsRef
metadataNegativeSizeInWords
metadataPositiveSizeInWords
numImmediateMembers
Pointee
reference
_name
color
snippets
templates
includeFunctionsMapByLanguage
functions
functionDependencies
AllCases
bindingInfo
visibility
enumInfo
builtIn
custom
reference
image
provider
texture
identifier
value
assetManager
needUpdateMainGraphScriptGroup
graphScriptQuery
graphECPRefQuery
bindingsQuery
events
type
identifier
triggerTime
triggerManager
enabledTriggers
mouseGrabbers
entity
identifer
block
keyCode
event
view
normalizedLocation
position
button
_codeSourceSnippet
libraryName
snippetName
snippetSignature
metadataDict
graph
name
_signature
inputCount
outputCount
inputNames
outputNames
RawValue
float
float2
float3
float4
float2x2
float2x3
float2x4
float3x2
float3x3
float3x4
float4x2
float4x3
float4x4
bool
uint
device
defaultShaderLibrary
hotReloadableShaderLibrary
libraries
renderPipelines
computePipelines
functions
inactiveByPipeline
statistics
lastStatistics
disableCache
renderPipelineStats
computePipelineStats
functionStats
recordingBinaryArchive
precompiledBinaryArchives
urlToSaveBinaryArchiveTo
recordMetalPipelinesScript
onShaderCompilation
lock
reloadCallback
function
library
path
label
waiting
success
error
state
desc
reflection
inProgress
ready
vertex
fragment
compilationTime
accumulatedTime
count
call
none
missingFunction
compilationFailed
shaderCache
addRuntimeQuery
fieldsQuery
settings
affectsPosition
affectsOrientation
texture
randomGenerator
linear
radial
vortex
magnetic
harmonic
drag
noise
turbulence
spring
layers
kind
strength
dampening
noiseAmount
noiseSeed
categoryBitMask
falloffExponent
active
speed
extent
flow
direction
fallOff
fallOffPower
fallOffRange
fallOffRadius
fallOffAngleRange
wind
RawValue
positiveZ
negativeZ
both
none
sphere
tube
cone
AllCases
value
RawValue
orientationQuery
entityManager
userProjectName
mangledProjectName
vertex
fragment
compute
RawValue
texture
blendMode
cutoff
sortMode
maxOverdraw
animationMode
interFrameInterpolation
lighting
specular
softDistance
device
libraryURL
label
watchingFolderQueue
library
reloadedNotificationBlock
range
world
name
effectIDs
static
dynamic
keyPath
valueType
offset
flags
version
oldID
newID
newType
color
depth
stencil
sampleCount
layout
entity
_data
texture
channel
addressMode
range
scale
bias
angle
handles
emittersQuery
globalFluidSolver2DSolversQuery
velocityAffectedQuery
emit
source
radius
density
velocity
showEmitter
showVelocity
data
stepSolver
advectParticles
setup
border
influence
solverSpeed
falloff
extent
cellSize
viscosity
vorticity
velocityDamping
showGrids
showVelocities
showDensities
velocityIsoValue
densityIsoValue
RawValue
value
type
offset
world
isSavingForExport
layout
saveBindingsMetadata
saveAsPlist
targetsToPrecompile
vfxproj
texture
channel
addressMode
composition
mode
xRange
yRange
zRange
scale
bias
angle
metalLayer
viewpoint
loadAction
clearColor
scope
preferredFramesPerSecond
stereoMode
isUserInitiated
frameCompletion
postRenderCallback
commandBuffer
inputStreamIdentifier
enabled
frameCount
requestedDrawableSize
resizingMode
colorTexture
depthTexture
shouldWaitForCommandBufferCompletion
sizeInPixel
pixelFormat
depthPixelFormat
scaleFactor
device
features
simulateCommandBufferError
counters
engineContext
lock
uploadLock
renderOutputs
renderOutputsForThisFrame
shaderCache
textureCache
depthStencilCache
GPUToolBox
texturePool
renderGraph
uniformValidationBuffer
bufferPool
wholeFrameBufferPool
captureInProgress
commandQueue
showDebugMenu
additiveWritesToAlpha
hideOpaquePass
hideTransparentPass
isPostFXEnabled
unscheduledCommandBuffersLock
unscheduledCommandBuffers
currentCommandBuffer
currentEncoder
currentEncoderWrapper
currentRenderPassDescriptor
renderPassDescriptorPool
renderOutputRenderPassFormat
encoders
globalFunctionConstants
mtkMeshBufferAllocator
inFlightSemaphore
options
_current
activeRenderVariantDescriptors
_compiledVariantCount
colorRamps
curves
monotonicIncreasingOrder
stripIndexBuffers
deformedBuffers
disable
multiViewport
targetArray
disableDeferredShading
isRendereringInRE
isREDepthMitigationEnabled
isRendereringInSCN
isRendereringInVFX2
defaultOutputColorPixelFormat
defaultOutputDepthPixelFormat
defaultLoadAction
internalPixelFormatDepth
useGammaBlending
externalRenderVariantDescriptors
renderOutput
frameTimestamp
outputCommandBuffer
wireframeLayerEnabled
cullingFrustum
_renderOutputTexture
_renderOutputTextureFetchedThisFrame
restart
stride
AllCases
rawValue
ArrayLiteralElement
Element
RawValue
invalidType
decodeError
notCodable
loadError
saveError
versionMismatch
unsupportedVersion
keepGoing
name
type
pointer
kind
superclass
reserveword1
reserveword2
rodataPointer
classFlags
instanceAddressPoint
instanceSize
instanceAlignmentMask
runtimeReservedField
classObjectSize
classObjectAddressPoint
nominalTypeDescriptor
ivarDestroyer
contextDescriptorOffset
parent
Pointee
query
frameTime
outputTexture
session
metalTextureCache
sampleBuffer
captureComponents
captureRuntime
ioSurface
dirtyMovieQuery
updatePlayers
engine
mixer
player
loops
isValid
samplesRaw
samplesRawCount
samplesRawTime
samplesRawSampleRate
_lock
setupPlayersQuery
updateAudioControllers
updateFFT
capture
orientationMode
mirrored
identifier
configCache
asset
play
mute
playerItem
videoTime
isPlaying
pixelBuffer
textureCache
lastSurface
$__lazy_storage_$_videoOutput
waveform
spectrum
spectrumLowRes
_waveform
_magnitudes
_magnitudesLowRes
meter
imagOut
realOut
$__lazy_storage_$_setup
portrait
portraitUpsideDown
landscapeRight
landscapeLeft
AllCases
RawValue
magnitudes
magnitudesLowRes
source
type
RawValue
oldNode
visited
visiting
_Node
_DeletedNode
order
inputFilter
copyNodes
graph
node
path
visit
insertedNodes
nodeFirst
inputsFirst
only
except
type
RawValue
instanceStride
colorStride
frameIndex
entityCount
particleQuery
rect
material
parent
parent_pre1036
RawValue
particlesS1
particlesS2
particles
particlesNoS1
particlesNoS2
composition
mode
xCurve
yCurve
zCurve
entity
entityManager
index
generation
data
dataAllocated
extraDatas
storage
liveValuesNodes
graph
language
formatting
subGraphsToEmit
nameByScriptParameter
atomCache
bumpedIndexByVariableName
rawNode
next
children
metal
rawValue
outputNames
snippet
deferredSnippet
requiresScriptContext
payload
comment
RawValue
ArrayLiteralElement
Element
type
name
isInout
inputs
typing
authoringID
outputs
genericsConstraints
inputNames
outputNames
defaultInputs
node
index
opacity
color
_entityManager
_chunk
commandQueue
indexInQueryResult
indexInChunk
rangeInQueryResult
totalCount
range
order
filteredIndices
scale
intensity
cullMode
sortMode
scale
alpha
power
useMeshShader
name
baseFunction
library
functionConstants
target
lock
macOSToolchainOverride
thisBundle
sdkPath
toolchainPath
$__lazy_storage_$_isCurrentVFXBuiltForAllArchs
xcinfo
debug
frameworksToLink
librariesToLink
includePaths
swiftFlags
cFlags
texture
intensity
blurLevel
blendMode
cutoff
resizingMode
center
stretch
sizeToFill
sizeToFit
AllCases
RawValue
rawNodesByID
diagnostics
graph
resolvedNodes
tagsByNode
subGraphEnterInputTypes
insertTypeConversions
queue
visited
typeHintByInput
typeHintByOutput
node
authoringID
kind
invalidNumberOfInputs
unsatisfiedInputConstraint
invalidFlow
renderGraphCompilation
behaviorGraphCompilation
isCyclic
invalidNode
internalInconsistency
outOfRangeInput
unresolvedInputScalar
unsatisfiedOutputConstraint
unsatisfiedGenericConstraint
mode
factor
lookAtCamera
lookAtPosition
AllCases
RawValue
isMenuItemEnabled
particleQuery
shape
inside
plane
sphere
AllCases
RawValue
allocator
results
_rangeInResult
_lowerBoundInQuery
filteredIndices
chunk
cachedQuery
entityManager
commandQueue
count
deallocator
center_w1
half_size_w0
storage
center
halfSize
radians
RawValue
origin_w1
direction_w0
vector
pointA
pointB
origin
axis
innerRadius
outerRadius
scriptKeyPath
accessorCreator
getset
visibility
unavailableStartingFromVersion
lookupReplacementProperty
cachedResolvedReplacementProperty
semantic
defaultValues
userManual
_min
_max
_step
_minFractionDigit
_maxFractionDigit
flags
_scriptingProperty
getter
setter
entityInstance
sourceCode
none
scale
angle
meters
extents
color
axisAngle
textureReference
geometry
pointCacheReference
emitter
sceneKitScene
kernelFunction
fragmentFunction
shaderFile
shader
material
materialArray
toggle
enumIndex
renderTarget
pointOfView
hitTestable
rawValue
ArrayLiteralElement
Element
RawValue
condition
event
groups
debugValues
debugLogs
entityComponentPropertyTable
entityComponentPropertyInputsTable
particleComponentInputsTable
particleClassComponentInputsTable
emitterParticleDataInputsTable
directPropertyAssignments
exportedDirectPropertyAssignments
exportedDirectPropertyAssignmentsHaveBeenUpdated
references
targets
dependencies
domain
evalMode
_nodeId
_paramName
_sortIndex
source
parentEntity
graphScriptEntity
inProperties
outProperties
needUpdateWorldTransforms
canSkipPropertyCopy
wasJustCreated
entity
componentType
propertyType
propertyName
scriptingPropertyKeyPath
OnRepeat
Once
OnBurst
Always
code
inArgsUserData
inArgs
inOutArgs
isDirty
scriptMustBeDeleted
scriptIndex
scriptAttribute
scriptEntity
type
context
Main
Spawn
Init
ParticleInit
Update
ParticleUpdate
Render
ecpt
ecpit
pcit
pccit
edpa
epdit
mode
language
entityComponentPropertyOutputsTable
scriptInfoTable
needsCurrentSeed
useGraphConfigEntityAsOriginatingEntity
dirty
AllCases
RawValue
generatedCode
userDataForGeneratedInArgs
generatedInArgs
generatedInOutArgs
generatedData
AllCases
lookingGlassGeneric
regularDisplay
calibration
quiltSettings
window
rawValue
ArrayLiteralElement
Element
RawValue
textureType
RawValue
AllCases
entityManager
loadOptions
loader
templateRemapTable
templateWasPrepared
effects
entityObjects
_version
isInsideRE
isREAssetScene
transientDrawCall
hasSharedEntityManager
metalBinaryArchiveURLs
recordedMetalBinaryArchiveURL
internalPixelFormat
internalPixelFormatDepth
useGammaBlending
debugUIOptions
isAuthoringWorld
isVFX2
enableRuntimeScriptCompilation
allowLoadingFromFuture
setupAsTemplate
automaticallyPrepareScene
setupAsyncRuntime
world
asyncRuntimeLock
loadBindingsMetadata
enableParallelDecoding
setupRenderer
colorPixelFormat
depthPixelFormat
enableDeferredRendering
doNotClearRenderOutput
device
commandQueue
clientID
metalLibraryURL
systemRegistrationOptions
counterStorage
peerPid
peerTaskIdentity
loadPrecompiledScripts
name
pointer
rawValue
ArrayLiteralElement
Element
value
vertical
horizontal
AllCases
RawValue
column0
column1
column2
column3
rawValue
ArrayLiteralElement
Element
RawValue
position
size1
size2
size3
velocity
color
orientation
textureFrame
angle
pivot
target
ribbonLength
angularVelocity
angleVelocity
linearFactor
angularFactor
lifetime
mass
roughness
metalness
emission
userData1
userData2
userData3
userData4
particleID
parentID
AllCases
isInfinite
isDoubleSided
isCollidingInside
sendEventsProbability
dieOnCollisionProbability
elasticity
friction
radiusMultiplier
layers
blendMode
cutoff
cullMode
sortMode
materialOverride
texture
lighting
specular
textureScale
textureBias
maxOverdraw
animationMode
interFrameInterpolation
softDistance
orientation
upAxis
shape
stretchFactor
orientAlongVelocity
useOrientationForLighting
curvature
multiplyThicknessByAlpha
thickness
prebakedLightingPositiveXYZ
prebakedLightingNegativeXYZ
scaleUsingTextureSize
useSingleChannelOfTexture
channel
quad
hexagon
octogon
AllCases
RawValue
pointer
Pointee
fieldRecordFlags
mangledTypeNameOffset
fieldNameOffset
range
graph
diagnostics
engineContext
commandQueue
runtimeEntityManager
rgContext
rgBuilder
generatePreviewTextures
attachments
bindingIndex
resource
data
inputPasses
pass
type
state
phase
momentumPhase
sourceIdentifier
locationInWindow
locationInView
isMouseInView
buttonNumber
characters
delta
keyCode
keyModifiers
timestamp
isDirectionInvertedFromDevice
clickCount
nativeType
defaultStage
mouseDown
mouseDrag
mouseUp
mouseMoved
keyDown
keyUp
gesture
scroll
magnify
other
began
changed
ended
rawValue
ArrayLiteralElement
Element
RawValue
stream
lastMouseLocation
keyReleased
leftMouseDown
rightMouseDown
value
index
name
RawValue
restartState
addState
removeState
updateState
parentEntity
probability
inheritColor
inheritVelocity
inheritOrientation
inheritScale
velocityFactor
mode
sourceParticlesPositions
sourceParticlesOrientations
sourceParticlesVelocities
sourceParticlesColors
sourceParticlesScales
sourceParticlesIDs
sourceParticlesSubCount
subParticlesSourceIndex
rateOverDistance
follow
linear
respawnValue
delayTime
duration
count
repeatTime
rateOverTime
repeatDuration
emissionTime
emissionStartTime
emissionEndTime
timeOfSpawnEnd
currentSpawnRate
lastSpawningPosition
prevSpawningPosition
accumulatedCountToEmit
totalCountEmitted
frameGeneratedCount
frameGeneratedRange
emitterShapeIsPresent
birth
update
collision
AllCases
RawValue
ribbonRendererQuery
source
particlesPerRibbon
ribbonLength
clearAllVelocities
clearUnusedPositions
logInfo
elasticity
RawValue
storage
activeStart
groups
wasModifiedThisFrameOrTransaction
unregistrationDelay
activeAllocatingChunkHandle
inactiveAllocatingChunkHandle
handle
filter
data
layout
hashValueByType
parameters
code
language
functionNames
scheduling
isGraphV2
scriptIndex
resolvedParameters
cachedMappings
location
access
correspondingExternalIndex
type1d
type2d
type3d
typeCube
type1DArray
type2DArray
typeDepth2D
builtin
worldProperty
worldReference
entityProperty
entityPropertyInSpace
pointer
vfxPath
textureSampler
emitter
particleProperty
particleClassProperty
currentSeed
randomSeed
customShader
callParameter
scriptContext
particleIndex
functionType
triggerType
hitTest
identifier
ScriptCustomState
RawValue
kernel
fragment
debugComment
prettyName
header
direct
path
current
functionName_pre1091
originatingEntity
stage
custom
position
crWorldPosition
color
normal
tangent
cameraPosition
crWorldToProj
crWorldToView
viewToProj
projToView
emitterToCrWorld
worldReferencePosition
renderTargetSize
inverseRenderTargetSize
cameraIndex
cameraNear
cameraFar
iblIntensity
iblRotation
pbrParams
portalOpacity
radiance
irradiance
brdfLUT
scriptEntityByScheduling
deltaTime
time
vertexProperty
vertexOutProperty
fragmentInProperty
materialParameter
materialParameterTexture
vertex
fragmentOutProperty
rawValue
vertexParameters
fragmentParameters
ArrayLiteralElement
Element
linearDepth
frontFacing
barycentricCoordinates
primitiveID
customTypes
customTypesPerType
libraries
userTemplateLibraries
conversionSnippets
compositionSnippets
decompositionSnippets
initialized
vfxGraphTemplatesDir
lock
onUserTemplatesChanged
bundle
codeSourceSnippetRemapping
codeSourceSnippetRemappingWithValueTransfer
xRange
yRange
zRange
buffer
type
visibility
semantic
step
userManual
enumInfo
public
private
variable
name
allCases
dict
recentlyModified
cachedPropertiesByName
RawValue
value_pre2003
isPublic_pre2045
name
pointCacheGeneratorQuery
emitterQuery
sdfGeneratorQuery
textureShaderAssetQuery
initScriptQuery
updateScriptQuery
graphScriptQuery
allTexturesQuery
animatedTextureQuery
allEmitterQuery
allNonDirtyMaterialsQuery
meshParticleRendererQuery
preCreateDefaultMaterialDone
xRange
yRange
zRange
default
defaultOrID
accessList
accessControls
excludeList
classAndHashes
queryHash
hasComponentsThatWillGetDirty
rawValue
dontClear
clearAtNextFrameOrRootTransaction
automatic
offset
size
none
read
write
readwrite
readwriteNoDirty
optional
ArrayLiteralElement
Element
Iterator
RawValue
neighborSearchMap
subSpawnQuery
addRuntimeQuery
addOrRemoveInverseWorldQuery
updateRuntimeQuery
subSpawnStateQuery
removeOrphanedRuntimeQuery
query
eventQuery
spawnEntities
initializeEntities
updateEntities
renderEntities
maxParticleCount
cullFullyTransparent
updateBoundingBox
disableEmitterWhenCulled
showBoundingBox
updateOnGPU
warmupDuration
simulationRate
isLocal
isMonoChunk
isLegacyHalfSize
_seed
_randomizeSeedOnReset
debuggingOptions
simulation
nearestNeighbours
nearestNeighboursRadius
particleClass
randomGenerator
seed
isSubEmitter
allParticlesQuery
elapsedTime
generatedCount
frameGeneratedCount
visible
didWarmup
idToIndexTable
neededSortModes
orderBufferBySortMode
needPrevNextBuffer
prevNextBuffer
ribbonSortMode
beginOrderIndex
endOrderIndex
visibleParticleCount
particleClassFunctionConstants
particleClassFunctionConstantsForRendering
bufferHeap
updatesOnGPU
particleHeaders
particleHeaderSize
particleHeadersCPUA
particleHeadersCPUB
particleData
particleDataMaxAllocatedCount
particleDataUploadedAttachments
gpuCountersBuffer
gpuIndexBuffer
gpuFrameOdd
gpuFrameSeed
gpuParticleCountUpperBound
resetCount
rebuildCount
assignedParticleIDs
unusedParticleIDs
storage
prepare_dispatch_indirect_1D
prepare_indirect_draw
prepare_indirect_draw_indexed
prepare_indirect_draw_mesh
particle_reset_live_dead_counter
particle_update_life
particle_compact_data
particle_init_newly_created
particle_init_newly_created_with_parent_emitter
particle_update_counters
particle_data_realloc
particle_copy_transient_data
prepare_sort_dispatch
block_mergesort
merge_subarrays
copy_final_order
generate_keys
generate_prevnext
rawValue
value
randomize
emitter
spawn_pre1036
initialize_pre1036
update_pre1036
render_pre1036
uid_pre1064
seed_pre1087
randomizeSeedOnReset_pre1087
none
semiImplicitEuler
ArrayLiteralElement
Element
RawValue
AllCases
entityManager
gpuDevice
compileQueue
compileOperationQueue
lock
pendingCompilationStatuses
cachedBuildResults
builderEmitterScript
builderGraphScript
builderSimpleScript
builderKernelScript
builderShaderScript
builderParticleInitScript
builderParticleUpdateScript
builderTriggerScript
isCompilationDisabledByUserDefault
enableRuntimeCompilation
forceSyncRuntimeCompilation
enableCompileBeforeFirstFrame
metalLibraryURL
parametersInvalidationTimestamp
scriptType
scriptID
inProgress
success
failure
savedRuntime
savedFailure
results
type
ingestQuery
cleanupRuntimeQuery
restoreStateAterScriptRemoval
cleanupCompileAttemptQuery
setupQuery
compileQuery
materialDependenciesQuery
textureDependenciesQuery
codeGenFailure
noXcode
inFlightCompilation
compilationDisabled
cancelled
factor
overLife
entity
referencedEntityManager
localEntityManager
_isTombstoned
device
heap
enableLogging
lock
currentFrameBuffers
unusedBuffers
allocatedBuffer
label
frameAllocatedSize
currentAllocatingFrame
peakAllocationsRingBuffer
constantBufferAlignment
isActive
constantBuffers
buffer
offset
size
length
padding
smoothness
occlusionIntensity
occlusionDistance
occlusionFalloff
displacementIntensity
displacementScale
oldRendererClassIndex
texture
lighting
specular
blendMode
cutoff
sortMode
maxOverdraw
animationMode
softDistance
interFrameInterpolation
materialOverride
textureScale
textureBias
orientation
upAxis
shape
stretchFactor
curvature
thickness
multiplyThicknessByAlpha
prebakedLightingPositiveXYZ
prebakedLightingNegativeXYZ
scaleUsingTextureSize
useSingleChannelOfTexture
channel
orientAlongVelocity
useOrientationForLighting
particlePerRibbon
ribbonCount
subdivisionCount
profile
textureMode
avoidOverdraw
enableCaps
capBeginTexture
capEndTexture
billboard
free
billboardUpAxis
orientedBillboard
billboardParticleAxis
playOnce
looping
autoReverse
AllCases
RawValue
buffer
scope
options
dirtyReadPolicy
groups
addRuntimeQuery
updateMaterialsQuery
meshRendererDependenciesQuery
quadRendererDependenciesQuery
kind
renderPipelineFactory
customShader
parameters
blendMode
cutoff
customLayer
overrideDepthStencil
depthCompare
depthWrite
winding
cullMode
_cachedPropertiesByName
opaque
transparent
authoring
prelit
custom
AllCases
RawValue
array
arrayOfAnySize
generic
some
numeric
integer
scalar
floatn
floatvec
matrix
anyCurve
anyColorRamp
texture
blendMode
cutoff
lighting
specular
sortMode
maxOverdraw
animationMode
interFrameInterpolation
softDistance
pointScale
screenSizeRange
dirty
retiredDirty
callbacks
_paramsOnHold
_onHold
_mute
callback
Parameter
isCancelled
lock
tuple
cancellables
particleQuery
composition
ramp
affectsAlpha
sharedRamp
RawValue
registry
urlCache
entityManager
asset
_entityManager
owner
_rootNode
loaded
options
idToEntity
entityToId
counter
sceneIdentifier
sceneAssetRegistry
name
updateBlock
index
AllCases
RawValue
fileNotFound
versionMismatch
delegateImpl
coreView
scene
effect
pointOfView
vfxView
onlyLocal
updateWorldFromLocal
value
compileQueue
dirtyScript
dirtyKernelReflection
shaderAssetQuery
reflectionQuery
dirtySharedFileQuery
functions
asset
buffersSize
inputs
outputs
inputOutputs
kind
textureType
index
offset
property
propertyType
propertySemantic
propertyName
RawValue
sendEventsProbability
dieOnCollisionProbability
elasticity
friction
layers
cornerRadius
inside
radiusMultiplier
aabb
center
halfSize
velocity
box_from_emitter
emitter_from_box_no_scale
scale
texture
blendMode
cutoff
sortMode
maxOverdraw
animationMode
interFrameInterpolation
lighting
specular
softDistance
entity
type
sendEventsProbability
dieOnCollisionProbability
elasticity
friction
radiusMultiplier
layers
inside
assetManager
pathResolver
effectIDToAssetsDirectory
authoringFileManager
temporaryDirectory
persistedDirectory
isPerformingChangesLevel
lock
referencesToWrite
allReferencesWithTemporaryCopy
capacity
wordcount
data
ArrayLiteralElement
Element
Iterator
bitset
value
duration
speed
beginTime
timeOffset
repeatCount
autoreverses
fillForwardMode
fillBackwardMode
easingFunction
parent
globalTime
localTime
active
completed
target
interpolation
timelineX
timelineY
timelineZ
timelineW
AllCases
linear
sphericalLinear
transform
from
delta
getset
targetEntity
timelineRuntime
cachedIndex
evalBuffer
none
fill
loop
pingPong
back
bounce
elastic
exponential
logarithmic
power
physical
quadIn
quadOut
quadInOut
cubicIn
cubicOut
cubicInOut
quartIn
quartOut
quartInOut
quintIn
quintOut
quintInOut
circle
hermite
sine
RawValue
primitiveType
renderingOrder
indexBuffer
indexType
indexCount
indexOffset
simplifiedIndexBuffer
vertexCount
vertexOffset
instanceCount
instanceOffset
stencilReferenceValueFront
stencilReferenceValueBack
winding
cullMode
fillMode
clipMode
inverseWinding
tessellationFactorBuffer
meshThreadsPerGrid
threadsPerObjectThreadgroup
threadsPerMeshThreadgroup
needPBR
isAdditive
renderStatesPerVariant
arguments
indirectBuffer
destroyDrawCalls
value
ArrayLiteralElement
renderer
entityManager
commandQueue
unused
classesByRenderPass
layer
storage
Element
Iterator
Index
SubSequence
Indices
shape
angularLimits
distribution
emissionOrder
emitOnSurface
direction
orientation
motionDistribution
transformWeight
velocityRange
spreadingRange
tangentAxis
tangentForce
texture
textureAddressMode
textureScale
textureBias
inheritColorFromTexture
torus
point
sphere
cylinder
plane
cone
grid
uniform
random
forward
backward
autoReverse
world
local
motion
none
AllCases
RawValue
uniformDistribution
sendEventsProbability
dieOnCollisionProbability
elasticity
friction
radiusMultiplier
layers
staticOptional
vector
range
array
assetReference
worldReference
sampler
customShaderTexture
none
flow
bool
pointer
enum
quaternion
int32
uint32
int64
half
float
double
untypedScalar
string
colorRamp
colorRampTexture
curve
curveTexture
state
textureDescriptor
metalTexture
metalBuffer
nodeGroup
resourceReference
pbrLightingParameters
texture
computeShader
renderTarget
fragmentShader
pointOfView
hitTestable
RawValue
data
grid
positionPointer
position
velocity
orientation
scale
radius
volume
_distanceToNeighbor0
_nextIndex
isValid
cells
cellCountMax
cellCountInX
cellCountInY
cellCountInZ
cellCountInXM1
cellCountInYM1
cellCountInZM1
cellSize
boxCornerMin
boxCornerMax
first
last
cruisingStrength
cruisingSpeed
clampSpeed
simpleDragForce
kickStartThreshold
kickStartDirection
influence
distanceFalloff
viewAngle
viewFalloffAngle
maxRotVel
showArea
viewDistance
maxNeighborCount
sizeMode
sizeVirtualScale
mindVolumeRatio
desiredDistance
separationStrength
alignmentStrength
cohesionStrength
collisionStrength
collisionRadiusMul
showGrid
showCells
logInfo
planeCenter
planeNormal
showPlane
borderThickness
corner1
corner2
direction
maxRotVelDir
upVector
pointAt
reduceFlipping
maxRotVelUpVec
RawValue
range
entityKeyPath
keyPath
stage
eventType
message
entity
curve
colorRamp
kind
name
inputCount
stateRef
main
spawn
initialize
particleInit
update
particleUpdate
render
trigger
AllCases
RawValue
directionalUnshadowedQuery
directionalQuery
pointUnshadowedQuery
pointQuery
spotUnshadowedQuery
spotQuery
ambientQuery
intensity
shadowRadius
zNear
zFar
attenuationRadius
outerAngle
innerAngle
lightsConstantsBuffer
iblConstantsBuffer
hasAnalyticalLights
hasDirectionals
hasShadows
extents
emitsDoubleSided
RawValue
velQuery
posVelQuery
kind
dimensions
scale
bias
intensity
noise
amortized
precomputedCurlNoise1D
precomputedCurlNoise2D
precomputedCurlNoise3D
precomputedFBMNoise1D
precomputedFBMNoise2D
precomputedFBMNoise3D
RawValue
entityManager
name
clientID
isInAuthoringMode
scene
componentRegistry
entityFamilies
allEntityClasses
chunkTable
chunkStorageLock
allComponentDataChunks
recycledChunksData
recycledChunksDataHistory
workerComponentStorage
sceneComponentStorage
groupsCount
copyQueue
copyGroup
relations
transactionDepth
hasRunloopTransaction
didBeginTransactionAtLastFrame
signpostID
counters
_entries
entityCapacity
entityCount
generationSalt
lock
isVFX2
firstFreeIndex
scheduler
queryManager
commandQueues
updateQueue
nextFrameBlocks
nextFrameBlocksLock
runtimeThread
_invalidated
canUseImGUI
imGUIEnabled
syncLock
asyncQueue
backgroundingSignalLock
applicationInBackground
sceneInBackground
lockChunksOnQueryForEach
shouldNotifyEntityEvent
stateDidChangeFn
mainGraphScriptGroup
logger
renderer
replicationStream
scriptingConfig
world
clock
updateHandlerIndex
activeStatesPerEffects
currentState
isInPrepare
peerPid
peerTaskIdentity
chunkHandle
indexInChunk
_classIndex
generation
activeStatePerEntities
load
update
render
postRender
idle
mask
Element
Iterator
remapTable
Element
cameraComponents
setupLODState
rootsWithLOD
childrenWithLOD
pointOfCullingQuery
lodQuery
state
read
write
readWrite
renderTarget
index
offset
resource
access
_resources
templateIdx
contextEntryMap
contextExitMap
subContextMap
arraySequenceMap
snippets
customCodeSnippetMap
typedArraySnippetMap
staticSwitchSnippetMap
userObjects
variableMap
variableReferenceMap
assignments
parameters
templates
bakedTemplates
decodingErrors
onUserTemplatesChangedUUID
switchCaseValuePrefix
templateRemapping
context
settings
domain
libFunctionsToInclude
inArgs
inOutArgs
code
templatesAlreadyDefined
errorInfos
allSwitchCases
hasTimeDependentSnippet
addAllInputsAndOutputs
cleanupCodeArr
baseObjectUidsAlreadyDeclaredDuringCodeGeneration
language
sortInArgsAlphabetically
isSubContext
isTemplate
modules
useIncludes
addEndOfFunctionComment
defaultArgs
defaultArgsNamesOnly
useLogger
allowFakeAssignments
evaluationMode
baseObjectUID
baseObjectName
baseObjectLabel
reason
assignmentMetadataSets
baseUID
baseType
parameterName
RawValue
metadataDict
custom
bool
uint8
uint16
uint32
uint64
int8
int16
int32
int64
uint32x2
uint32x3
uint32x4
float
float2
float3
float4
float2x2
float2x3
float2x4
float3x2
float3x3
float3x4
float4x2
float4x3
float4x4
double
colorU8
colorRamp
colorRampTexture
randomNumberGenerator
textureSampler1D
textureSampler2D
textureSampler3D
string
quaternionf
curvef
curveTexture
intRange
floatRange
switchValue
unknown
boolArray
uint8Array
uint16Array
uint32Array
uint64Array
int8Array
int16Array
int32Array
int64Array
intArray
floatArray
float2Array
float3Array
float4Array
stringArray
urlArray
type
name
code
valueType
value
seed
generator
RawValue
orthoNoProjQuery
perspNoProjQuery
orthoQuery
perspQuery
povQuery
projQuery
buffer
data
indirectResources
argumentEncoder
bufferEncoded
firstConstantIndex
pointOfView
frameConstants
frameConstantsBuffer
viewDependantConstantsTransient
viewDependantConstantsBuffer
viewDependantConstantBuffers
passConstantsArgumentEncoder
passConstantsIndirectResources
passConstantsBuffer
globalConstants
externalSceneConstants
externalSceneBuffers
externalEntityConstants
constantsCopyEncoder
reFrameConfiguration
frameConstantsEncoded
sceneFadeOpacity
portalOpacity
opaqueDrawsSeparateDepth
forceUseInterpolatedCrWorld
buffers
attributes
layout
parts
vertexCount
meshIdentifier
data
buffer
offset
size
stride
_stride
_stepRate
_stepFunction
_offset
_format
_bufferIndex
index
descriptor
primitiveType
vertexStart
materialIndex
indices
indexCount
indexByteSize
levelOfDetails
aabb
decodingError
identifier
RawValue
computeFunction
functionConstants
precomputedHashValue
description
entity
keyPath
componentProperty
entityComponentType
propertyPath
propertyType
propertySemantic
RawValue
query
patchQuery
factor
name
stream
remapper
destination
srcDelegate
dstDelegate
replicateByDefault
replicationEnabled
cfxWorld
mappingTablesLock
entityMapTable
reversedEntityMapTable
destinationEntityManager
remapTable
isReversed
entityManager
shouldReplicate
beginGroup
cloneEntities
createEntity
createEntities
destroyEntity
assign
setEntityTombstoned
setEntityActive
addRelation
removeRelation
dirtyEntity
setValue
setComponent
removeComponent
perform
endGroup
component
isAdded
concreteKeyPath
value
family
storageLayout
classComponentstorage
classHash
notifySystemsOnEntityEvent
classIndex
isAnonymous
isGraveyard
hasUnstableOrdering
isMonoChunk
isTrackingDirty
hasDirtyPropagation
storage
CPUTime
UpdateTimeCPU
RenderTimeCPU
GPUTime
UpdateTimeGPU
RenderTimeGPU
GPULatency
ClockResetCount
CreatedEntities
DestroyedEntities
EntityCount
ChunkCount
ChunkTotalSize
ComponentCopy
ComponentMove
ComponentDestroy
ComponentInit
ComponentInitWithSrc
ComponentSwap
ChunksCopiedToDataStripes
ParticleDataUploadedToGPU
DrawListSize
TextureCount
TextureMemory
elasticity
friction
flip
RawValue
device
commandQueue
scene
effect
transientDrawCall
rootEntity
cameraEntity
cancellables
isPrepared
uuid
worldFromScene
sceneFromWorld
sceneScale
reloadBlock
remappingTable
renderOutput
range
allColorRampsQuery
unregisteredColorRampsQuery
allColorRampsWithRuntimeQuery
allModifiedColorRampsWithRuntimeQuery
buffers
textures
renderer
index
value
slice
texture
blendMode
cutoff
sortMode
maxOverdraw
animationMode
interFrameInterpolation
softDistance
thickness
lighting
specular
texture
delegate
renderOutput
metalLayer
sampleCount
preferredFramesPerSecond
scaleFactor
postRenderCallback
entityManager
renderer
stereoMode
paused
effectID
sizeDirty
drawableSize
resizingMode
backgroundColor
emitterQuery
firstID
idToIndexTable
value
inverse
entityManager
entity
componentType
parentEmitter
scope
section
allParticlesQuery
particleQuery
velocity
curve
data
capacity
count
storage
freeHandles
_detectCycle
_capacity
_count
allocator
values
keys
hops
Element
Iterator
Index
SubSequence
Indices
buffersAndStart
buffer
start
_elements
_position
sourceEmitter
sourceData
targetData
childrenPerParent
RawValue
smoothness
displacementIntensity
displacementScale
range
colorAgeQuery
curve
mask
opaque
alpha
additive
string
indent
wakeupEvent
didSwapQueueEvent
runtimeThreadId
runtimeUpdateHandler
__startupShutdownEvent
ownsLock
lock
clientEventQueue
serverEventQueue
qlock
requestStop
entityManager
threadLogger
threadid
_isSuspended
dynamicPropertiesTimestamp
entityManager
stackAllocator
entity
particleCount
mapping
timestamp
direct
temporary
indirect
pointer
finalizeBlock
always
never
onDynamicPropertyChange
RawValue
copyList
scope
name
offset
size
destination
frameConstant
viewConstant
externalEntityConstant
externalSceneConstant
composition
range
ramp
worldDimension
dimensions
primitiveQuery
type
width
height
length
chamferRadius
widthSegment
heightSegment
lengthSegment
chamferSegment
radius
segment
isGeodesic
radialSegment
innerRadius
capSegment
topRadius
pipeSegment
text
extrusion
flatness
font
radialSpan
hemispheric
sphere
plane
tube
capsule
pyramid
cone
cylinder
torus
name
size
AllCases
RawValue
value
entity
entities
local
world
scene
crworld
view
AllCases
RawValue
clusters
colors
updateThreshold
centroidsX
centroidsY
centroidsZ
index
drawCallGenerationContext
instanceCount
layer
externalData
$__lazy_storage_$_iblTextures
$__lazy_storage_$_lightConstants
$__lazy_storage_$_iblConstants
lock
queryInfoByHandle
matchingQueriesByEntityClass
queryBuffer
matchingEntityClasses
matchingSystems
thread
runloop
runloopSource
currentRunloop
startedCallback
texQuery
texAgeQuery
duration
curve
vertexBuffers
vertexTextures
vertexSamplers
fragmentBuffers
fragmentTextures
fragmentSamplers
objectBuffers
objectTextures
objectSamplers
meshBuffers
meshTextures
meshSamplers
vertexReqs
fragmentReqs
indirectResources
buffer
bufferView
scope
texture
entity
renderTarget
sampler
named
rawValue
fallback
global
scene
light
brdf
material
renderGraph
system
view
instance
ArrayLiteralElement
Element
RawValue
reflectionFailed
name
label
searchLabel
tooltip
hasValue
includeFunctions
supportedBy
useNamedSignature
hidden
skipTest
disableable
timeDependent
useDynamicBranching
deprecated
deprecationInfo
toolCreateFunction
genericTypes
previousInParameterNames
inParameterNames
inParameterTypes
inParameterDefaultValues
showInParameterDefaultValues
mandatoryInParameters
outParameterNames
outParameterTypes
code
cleanupCode
noOutputDeclarationCode
codeContainsUidIndexTag
valueType
defaultInParameter
defaultSnippet
inParameters
outParameters
embeddedParameters
libraryName
libraryColor
includeFunctionsDependencies
type
RawValue
group
sendEventsProbability
dieOnCollisionProbability
elasticity
friction
radiusMultiplier
layers
mesh
ignorePreprocessorStatements
comma
pound
period
colon
semicolon
dollarSign
atSign
equalSign
leftParen
rightParen
leftBracket
rightBracket
leftAngleBracket
rightAngleBracket
identifier
number
message
parameter
substring
kind
text
name
value
input
lastConsumedToken
particleQuery
options
userInfo
codingPath
$__lazy_storage_$_unmanagedDecoder
source
stores
data
offset
keyedSources
length
offsets
decoder
currentIndex
typeRegistry
enableParallelDecoding
onSubDecoderCreation
codingKeyed
hashKeyed
store
allCamerasQuery
lifeAndAgeQuery
lifeQuery
range
distributeOnFrame
RawValue
layout
maxOffset
data
perWorkerStorage
world
table
options
references
isDuplicating
remapTable
uuidTable
entityManager
workerIndex
stackAllocator
frameAllocator
currentIterationContext
pendingDirtyPropagationQueue
deferredOperations
immediateOperations
dirtyTrackingDisabled
stats
tempComponentBuffers
addedComponent
storage
rawValue
addComponent
removeComponent
addClassComponent
removeClassComponent
setActive
destroy
frameAllocationCount
maxAllocatedSize
accumulatedAllocatedSize
addComponentCount
removeComponentCount
destroyEntityCount
ArrayLiteralElement
Element
RawValue
componentTypeInChunk
componentTypeInQuery
pointer
writeBackBlock
srcType
dstType
options
userInfo
codingPath
makeNextUnkeyedRandomAccess
superStore
$__lazy_storage_$_unmanagedEncoder
stores
encoder
data
isSpecial
count
$__lazy_storage_$_keyStore
$__lazy_storage_$_unmanagedKeyStore
$__lazy_storage_$_valueStore
$__lazy_storage_$_unmanagedValueStore
subStores
useKeyHashing
$__lazy_storage_$_dataStore
$__lazy_storage_$_unmanagedDataStore
$__lazy_storage_$_sizesStore
$__lazy_storage_$_unmanagedSizesStore
encodeSizeHeader
appending
halfFloats
typeRegistry
store
Element
RawValue
ArrayLiteralElement
rawValue
publisher
currentOffset
cpuSlice
gpuSlice
constantBufferAlignment
color
orientation
position
userData1
userData2
userData3
userData4
velocity
empty
plane_xy
planes_xy_zy
planes_xy_zy_xz
star_around_y_axis
cuboid_open
cuboid_closed
cuboid_wide_open
setup_default
closed
continuous
open
shared_closed
shared_continuous
shared_open
ignore
coarse
fine
accurate
local_x_axis
local_y_axis
local_z_axis
local_negative_x_axis
local_negative_y_axis
local_negative_z_axis
uniform
planar
free
operation
factor
replace
multiply
blend
curl
white
green
blue
alpha
luminance
AllCases
RawValue
BitPattern
unwrappedParallizableTypes
stringValue
intValue
inner
unexpectedMemoryLayoutSize
invalidHeader
keyNotFound
unexpectedType
unexpectedSubtype
invalidSize
noHeader
unexpectedEndOfData
invalidString
count
destroyedParticleWithIDQuery
data
componentLocks
layout
isInitializedBitset
storageLock
entity
chunkSize
type
platform
architecture
macOS
watchOS
tvOS
x86_64
arm64
arm64e
arm64_32
AllCases
RawValue
block
device
allocator
mtlTextureDescriptorCache
renderTargets
keys
keyStride
times
evaluateFunc
evaluateSplineFunc
quadratic
curve
values
RawValue
renderStatesPerLayout
renderStates
particleRendererRenderPipelineFactory
renderPipelineReflection
arguments
bufferAllocator
winding
cullMode
needsPBR
hasDynamicTexture
isAdditive
defaultLayer
compileIdentifier
functionConstantsHash
render
depthStencil
depthStencilDescriptor
texture
options
entityManager
animations
skeletons
meshes
unsupportedJointAnimationType
missingRenderer
skeletonAnimationMissingSkeleton
Result
Parameter
unsafeStorage
dispatchLock
future
finished
running
group
state
curToken
callbacks
succeeded
failed
canceled
Value
none
spawn
initialize
update
render
AllCases
RawValue
query
force
space
RawValue
query
target
positionQuery
effectID
rootEntity
entityObject
scene
delegate
name
version
onEffectRestartSubject
cancellables
_enabled
_tombstoned
nodes
resetID
frameIndex
subFrameIndex
simulationIndex
startTime
timeOfTheLastTick
time
remainingTimeToSimulate
deltaTime
lastPlayingDeltaTime
updateCount
useFixedUpdateRate
fixedUpdateRate
isSimulating
isPaused
wasPlaying
stepOnceRequested
wasSteppingOnce
renderSettings
commandQueue
renderer
display
window
quiltTexture
viewCone
defaultFov
batchRenders
enableParticles
showRawQuilt
framePerSecond
buffer
length
format
offset
stride
drawCall
aabb
_isDepthOnly
_writesColor
_writesSeparateDepth
_needsLinearDepth
_drawsForBlur
_isAdditive
_materialType
reProvidedBuffers
reProvidedTextures
handler
renderPassName
renderPassIdentifier
emitterIdentifier
RawValue
passName
materialType
writesSeparateDepth
needsLinearDepth
isAdditive
table
node
entity
animationPlayer
meshCache
materialCache
dataCache
textureCache
animations
geometryCount
topLevelObjects
shadable
propertyCache
object
identifier
bridgeObjectReference
pnode
observer
pModel
pparametricModel
bridgedObjectIdentifier
pDonut
pDof
pMotionBlur
pGrain
plensBlur
pExposure
ptoneMapping
presMorpher
pmaterial
pPhysicsBody
pbloom
pcamera
plight
script
recompileHashValue
didFinish
error
stderr
diagnostics
userLocation
realLocation
kind
message
pattern
kindGroup
messageGroup
lineGroup
columnGroup
userLineGroup
regexp
line
column
warning
note
RawValue
descriptions
values
functionConstants
name
index
desc
data
texture
vertex
fragment
vertexAndFragmentAreIdentical
Element
Iterator
Index
SubSequence
Indices
buffer
members
argumentEncoder
bufferLength
RawValue
dataSize
dataType
offset
alignment
type
isDepth
texture
blendMode
cutoff
sortMode
maxOverdraw
animationMode
interFrameInterpolation
lighting
specular
softDistance
shape
capsule
torus
cylinder
roundedBox
sphere
AllCases
RawValue
rect2DDesc
disc2DDesc
roundedRect2DDesc
roundedRectStrokeDesc
roundedRectStrokeShadowDesc
shadowRoundedDesc
passFormat
rectShape
discShape
roundedNoStroke
roundedWithStrokeColorWidth
roundedWithStrokeColorWidthShadow
value
radius
offset
color
scale
intensity
AllCases
RawValue
green
blue
alpha
nearest
linear
clampToZero
clampToEdge
repeat
repeatMirror
xRange
yRange
zRange
absorbFactor
blurFactor
pipelineDescs
lock
tickHandlers
tickHandlersForThisFrame
displayLink
dispatchSource
isRenderClock
paused
device
lock
operationQueue
asyncGroupRequests
textureEntryByKey
defaultSampler
defaultSamplerRepeatTrilinear
defaultSamplerClampMipNearest
defaultSamplerRepeatMipNearest
defaultSamplerRepeatSMipNearest
defaultSamplerMirrorRepeatMipNearest
defaultTextures
defaultNoiseTextures
groupID
requestCountPerTexture
kind
options
loading
loaded
error
none
state
group
waitingCount
weakReference
strongReference
refCount
offset
size
descriptor
slices
RawValue
Element
xRange
yRange
zRange
inParameterNames
inParameterTypes
inParameters
orgInParameterNames
orgInParameterTypes
outParameterNames
outParameterTypes
outParameters
orgOutParameterNames
orgOutParameterTypes
embeddedParameters
domains
CodeSnippet
VariableSnippet
VariableReferenceSnippet
CustomCodeSnippet
TypedArraySnippet
StaticSwitchSnippet
ContextExit
ContextEntry
SubContext
ArraySequenceSnippet
BaseObject
RawValue
loadFileRuntime
addFileRuntime
meshParticleRendererQuery
modelRenderersQuery
allMeshParticleRendererWithoutCollectionQuery
allMaterialsWithoutCollectionQuery
allMaterialsWithCollectionQuery
options
preferredLoader
optionsLocked
rawValue
asset
identifier
nodePath
value
sceneIdentifier
meshIdentifier
ArrayLiteralElement
Element
RawValue
ignoreVertexColor
normalize
SceneKit
ModelIO
AllCases
sendEventsProbability
dieOnCollisionProbability
elasticity
friction
radiusMultiplier
layers
sdfData
name
lock
_mutex
particleQuery
value
usesParticleSize
length
functions
functionConstants
passFormat
blendingStates
vertexLayout
topologyClass
tesselationDesc
rasterization
maxVertexAmplificationCount
precomputedHashValue
partitionMode
maxTesselationFactor
isTesselationFactorScaleEnabled
controlPointIndexType
stepFunction
windingOrder
composition
texture
addressMode
scale
bias
angle
value
type
RawValue
value
type
holder
semantic
value
source
root
topLevelObjects
order
entity
entities
presenter
entity
lastModificationDate
shouldReplicate
manager
isMenuItemEnabled
isMenuItemBoundToEnabled
emitterQuery
value
triangle
point
sphere
wave
spiral
cylinder
frustum
torus
point2D
line2D
basis
lastFrame
AFrame
displayEntityBox
displayChunkBox
debugChunkBox
showKillShapes
showEmitterShapes
showColliderShapes
showLights
showCameras
showSkeletons
showForceFields
commandQueue
debugInfoComponentTypes
none
startOnly
endOnly
both
diamond
diagnosticsTracker
entity
scriptType
success
failure
inProgress
mode
addressMode
composition
ramp
linear
radial
octahedron
angle
AllCases
RawValue
instance
owner
name
type
curve
range
dictionary
orderedKeys
Element
Iterator
Value
Index
SubSequence
Indices
pairs
relationType
from
relation
eventClass
particleQuery
emitterProperties
emitter_from_world
emitterDeltaTime
sendEventsProbability
dieOnCollisionProbability
elasticity
friction
radiusMultiplier
layers
isInfinite
isDoubleSided
halfExtents_pre1039
sdfData
inside
cornerRadius
mesh
colliderVelocity
collider
anchored
indicesToDestroy
eventsData
position
normal
direction
color
rawValue
ArrayLiteralElement
Element
RawValue
DataInconsistent
NotSupported
Unknown
vertexFunction
fragmentFunction
objectFunction
meshFunction
linkFunctionNames
linkLibrary
depthBias
tiles
renderingCommands
view
proj
nearFar
biasScale
RawValue
moduleName
libraryPath
gpuDevice
ownsDlHandle
dlHandle
metalLibrary
commandBuilder
libname
sourceURL
metal
swift
AllCases
RawValue
serializationError
compileError
wrappedCompileError
linkError
loadError
symbolNotFound
value
value
value_w0
RawValue
radius
aroundSpeed
inSpeed
tightness
name
onReadyToCopy
joints
bindTransforms
restTransforms
jointsParents
inverseBindTransforms
translations
rotations
scales
processAnimations
updateSkeleton
times
values
target
animation
data
jointLocalTransforms
jointWorldTransforms
cachedJointWorldTransformsInBindingSpace
lastFrameCachedJointWorldTransformsInBindingSpace
skeleton
geometryBindTransform
range
spreadingRange
composition
enableRecording
entityManager
lock
currentJobID
currentJobName
recurrentJobs
orderedRecurrentJobs
jobQueueForThisFrame
pendingJobsToEnqueueForThisFrame
pendingJobsToEnqueueForThisFrameOnly
groupsToUnregister
liveQueryCountByJobID
needsRescheduling
needsReschedulingForThisFrame
dependenciesByJob
schedulerEventsRecordedDuringLastFrame
queriesRecordedDuringLastFrame
schedulerEventsRecordedDuringThisFrame
queriesRecordedDuringThisFrame
simulationTimeScale
rawValue
groupEntity
debugName
systemInstance
stage
priority
isLocal
isEnabled
isSimulation
durationCounter
doUpdate
jobs
index
beginJob
endJob
ArrayLiteralElement
Element
RawValue
done
prepare
renderInPrepare
notifyEntityEvent
update
render
postRender
xRange
yRange
zRange
time
velocity
life
mode
curve
AllCases
angleQuery
asset
floatArray
value
lock
noise
mainDir
mainDirSpread
noiseIntensity
noiseScale
maxStepPerBranch
stepLength
count
randomMainDir
scenesToUpdate
newNcenesToLoad
rendererQuery
placeSceneQuery
assetEntity
playing
scene
renderer
sceneURL
asset
RawValue
allEmitterQuery
rawValue
current
unsorted
oldestFirst
youngestFirst
frontToBack
backToFront
increasingID
decreasingID
AllCases
ArrayLiteralElement
Element
RawValue
renderer
features
internalColorPixelFormat
defaultRenderTargets
opaqueDrawCallsQuery
transparentDrawCallsQuery
authoringDrawCallsQuery
directionalLightQuery
pointLightQuery
spotLightQuery
ambientLightQuery
iblLightQuery
has_opaque
has_transparent
has_volumetric_scattering
has_global_illumination
has_compositing
has_authoring
needs_depth_buffer
needs_read_depth_buffer
needs_linear_depth_buffer
has_post_opaque_rendered_in_transparent
needs_pbr_lighting_bindings
transparentTargetRatio
deferredGlobalIlluminationRatio
volumetricScatteringRatio
opaqueColor
opaqueDepth
linearDepth
shadow
transparentColor
transparentDepth
compositing
globalIllumination
scattering
lensBlur
bloom
authoring
authoringResolve
authoringDepth
deferredAlbedo
deferredNormal
deferredRoughnessMetalnessAO
deferredEmissive
opaqueDepthAsColor
transparentDepthAsColor
name
pixelFormat
sampleCount
dimension
mipmap
clearColor
format
opaqueRatio
transparentRatio
dimensions
query
addHiddenStateQuery
deactivateHiddenQuery
activateNonHiddenQuery
value
entityManager
encodedVersion
scope
codingEntity
codingComponent
componentsToAdd
isLoadingForAuthoring
codeBindingsMetadata
autoRecoverFromDecodingFailure
silentlySkipComponentOnEncodingFailure
logComponentCoding
codeComponentTypesWithTable
codePropertiesWithTable
onDeinit
entityTableByIndex
entityTable
reversedEntityTable
encodedComponentTypes
encodedProperties
intValue
stringValue
dict
entity
type
version
inner
isActive
components
value
entities
RawValue
index
active
component
relations
componentTable
propertyTable
contents
generation
target
scriptKeyPath
reference
kind
graphID
rendererInfo
texturePreviewsByNodeID
_descriptor
reflection
inputTypes
inputNames
outputTypes
outputNames
commandQueue
name
semantic
texture
color
depth
buffer
vertexParameters
fragmentParameters
_cachedPropertiesByName
RawValue
angle
axis
amplitude
frequency
phaseShift
delta
colorQuery
scaleQuery
scale1Save
scale1Restore
scale2Save
scale2Restore
scale3Save
scale3Restore
value
name
supportedLanguages
contexts
shortName
category
description
descriptionWithoutSignature
context
Local
Builtin
User
RawValue
leftOffset
rightOffset
topOffset
bottomOffset
near
usePerspective
showVolume
camera
RawValue
loadPointCache
updatePointCacheFromModels
updatePointCache
uploadREMeshPointCache
assetPath
sources
meshEntity
count
distribution
options
seed
asset
bridgeObjectReference
identifier
pointCache
overrideBoundingBox
inheritColor
inheritOrientation
inheritSize
skeleton
velocityRange
inheritPosition
inheritVelocity
motionDistribution
motionTransfert
position
velocity
normal
orientation
color
size
jointIndices
jointWeights
rawValue
properties
name
unsupportedFormat
invalidFile
slice
format
missingMesh
missingTextureCPUCache
reference
sequential
random
randomUniformArea
AllCases
RawValue
ArrayLiteralElement
Element
value
versionToMigrateTo
entityManager
world
scope
isLoadingForAuthoring
isLoadingExport
fileVersion
scene
effect
renderer
texture
depthTexture
backgroundColor
pointOfView
performMetalCaptureDuringSnapshot
postRenderCallback
topologyClass
tesselation
writeMask
flags
renderFunctions
objectArguments
materialArguments
argumentsAreUpToDate
rawValue
ArrayLiteralElement
Element
RawValue
variant
passFormat
vertexLayout
blendStateOverride
blendMode
cutoff
additiveWritesToAlpha
maxVertexAmplificationCount
additionalFunctionConstants
composition
mode
velocityRange
xRange
yRange
zRange
renderer
renderTargetHeap
textures
maxHeapSizeNeeded
currentHeapSizeUsed
frameMaxHeapSizeNeeded
texture
blendMode
cutoff
_sortMode
maxOverdraw
animationMode
interFrameInterpolation
softDistance
orientation
lighting
specular
textureMode
textureScale
textureBias
subdivisionCount
profile
capBeginTexture
capEndTexture
particlePerRibbon
ribbonCount
avoidOverdraw
none
triangle
rectangle
star
round
stretch
tile
repeatPerSegment
AllCases
RawValue
graph
diagnostics
flowOutputsByNode
dataOutputsByNode
nextScope
cfgScopes
scopes
predecessors
successors
onParticleStage
onTrigger
onUpdate
onFirstFrame
dirtyWithParent
dirtyWithOverride
wrongDepthRoots
computeTransformFromPosOriScale
computeInverse
allChildrenMLH
allChildrenOLH
computeLastFrame
addLastFrameToChild
markAsFixed
curve
colors
times
mode
values
tangents
defaultInterpolationMode
ArrayLiteralElement
linearSRGB
sRGB
tangentIn
tangentOut
tangentsLinked
interpolation
linear
spline
bezier
RawValue
transforms
colors
renderContext
drawList
opaqueQuery
query
model
materialOverride
mesh
materials
lastFrameUsed
unusedCount
renderBuckets
RawValue
unregisteredCurvesQuery
allCurvesQuery
allCurvesWithRuntimeQuery
allModifiedCurvesWithRuntimeQuery
textures
renderer
value
index
slice
texture
authoringID
userInfoData
inputs
node
index
defaultInstanceByType
entries
entriesByCategory
node
flags
renderGraph
constant
flow
math
logic
random
easing
conversion
other
AllCases
rawValue
ArrayLiteralElement
Element
RawValue
always
once
onMouseDown
onMouseUp
onMouseDragged
onMouseMoved
onKeyDown
onKeyUp
onTicked
compileAttempt
loader
symbols
metalFunctions
metalReflection
didRun
version
customState
originatingEntity
index
AllCases
RawValue
parameters
savedValues
exportedFunctionNames
code
debugComment
debug
cFlags
swiftFlags
bundle
absoluteURL
pathResolver
compileQueue
dirtyTextureLoadingOptions
allTextureFilesWithoutWatcher
allTextureFiles
allTextureFilesWithoutDoNotUpload
allTextureArrayFiles
readTextureFile
readTextureArrayFile
allTextureFileWithCPURuntime
readTextureDataCPUQuery
readTextureCGImageQuery
updateGPURuntime
addRenderTargetRuntime
shaderAssetQueryAdd
shaderAssetQueryGen
convertToEquirectangularQuery
uploadCPUToGPUQuery
dirtyMissingCPURuntimeQuery
downloadGPUToCPUQuery
cleanupCPUQuery
cleanupGPUQuery
dirtyTextureClient
kernelScript
kernelFunction
desc
arguments
parameters
textures
_cachedPropertiesByName
asset
framePerRow
framePerColumn
frameCount
kind
options
assetPaths
data
texture
buffer
synchronized
slices
texture2D
texture3D
texture2DArray
count
none
auto
sourceOffset
sourceBytesPerRow
sourceBytesPerImage
sourceSize
destinationSlice
destinationLevel
cpuMode
gpuMode
fallback
asynchronous
channel
threshold
mipmapCount
maxWidth
maxHeight
keepAspectRatio
limit
force
mode
onLoad
onDemand
never
decoding
rawValue
watcher
loadingFailed
uploadFailed
assets
useTexture3D
float
float2
float3
float4
value
storage
sizeModification
animation
clear
white
black
grey
_path
_filename
_pathResolver
RawValue
AllCases
ArrayLiteralElement
Element
textureType
pixelFormat
width
height
depth
mipmapLevelCount
sampleCount
arrayLength
usage
allowGPUOptimizedContents
swizzle
storageMode
resourceOptions
componentProperty
value
_fieldOfView
focalLength
focusDistance
sensorSize
fStop
exposure
zRange
reverseZ
projectionDirection
filmOffset
scale
intensity
anamorphic
softness
radius
operator
filterQuality
maxKernelRadius
focusPoint
focusScale
temperature
tint
liftColor
liftOffset
gammaColor
gammaOffset
gainColor
gainOffset
contrast
saturation
aces
filmic
reihnard
rombindahouse
medium
high
maxIteration
threshold
thresholdSmoothness
colorFilter
useHighQuality
AllCases
RawValue
value
shouldLoadPrecompiledScripts
throwOnScriptLoadingFailure
skipScriptCompilation
isLoadingForAuthoring
loadBindingsMetadata
enableParallelDecoding
allowLoadingEffectFromTheFuture
prepareEntityManager
loadWarning
serializationContext
projectName
uuid
version
isExported
isVFX2
versionHistory
sceneFileName
rawValue
ArrayLiteralElement
Element
RawValue
sceneFilename
name
graph
inputID
inputIndex
outputID
outputIndex
nodes
edges
userInfo
node
RawValue
type
value
subgraph
device
depthStencilStates
lock
default
depthCompareFunction
isDepthWriteEnabled
frontFaceStencil
backFaceStencil
opaque
transparent
transparentStencilOverdraw
alwaysNoWrite
alwaysWrite
reversed
reversedNoWrite
stencilCompareFunction
stencilFailureOperation
depthFailureOperation
depthStencilPassOperation
readMask
writeMask
state
colorMap
normalMap
useInstanceColor
defaultMaterial
RawValue
_This
destroyEvents
newEvents
albedo
emissive
roughness
metalness
occlusion
normal
isRoughnessMetalnessPacked
isDoubleSided
intensity
texture
sampler
scaleBias
magFilter
minFilter
mipFilter
wrapS
wrapT
notMipmapped
nearest
linear
AllCases
RawValue
registry
libraries
normalizedValue
value
inverseLifetime
sdfData
center
halfSize
sphere
intensity
inverseMass
rateOverTime
burst
_emit
emit
RawValue
addFileRuntime
dirtySDFQuery
forceDoNotUploadQuery
source
threshold
downsampling
width
height
depth
buffer
texture
RawValue
composition
mode
intensity
affectsAlpha
value
ramp
time
constant
random
randomUniform
AllCases
userInfo
nodes
didPerformMutation
nodesByID
meshEntity
materialOverride
sortMode
partIndex
lodIndex
RawValue
flyKeys
forward
backward
left
right
cNavigation
configuration
inertiaScrollMode
panDeltas
rollDeltas
dollyDeltas
flyDeltas
turntableDeltas
worldUp
worldOrbitTarget
rotationSensitivity
dollySensitivity
panSensitivity
shiftMultiplier
flyVelocity
rotationMode
RawValue
roll
dolly
Turntable
AllCases
factor
directionAxis
yAxis
zAxis
AllCases
RawValue
allDirtyNamedAssets
name
assetTextures
extraAssetBundles
device
contents
comment
label
path
compute_function
threadgroup_size_is_multiple_of_thread_execution_width
max_total_threads_per_threadgroup
vertex_function
fragment_function
vertex_descriptor
input_primitive_topology
max_tessellation_factor
tessellation_factor_scale_enabled
tessellation_control_point_index_type
tessellation_factor_step_function
tessellation_output_winding_order
tessellation_partition_mode
max_vertex_amplification_count
rasterization_enabled
alpha_to_coverage_enabled
alpha_to_one_enabled
raster_sample_count
color_attachments
depth_attachment_pixel_format
stencil_attachment_pixel_format
descriptor
shaderCache
RawValue
pixel_format
write_mask
blending_enabled
alpha_blend_operation
rgb_blend_operation
destination_alpha_blend_factor
destination_rgb_blend_factor
source_alpha_blend_factor
source_rgb_blend_factor
stride
step_function
step_rate
buffer_index
offset
format
attributes
layouts
compute_pipelines
render_pipelines
paths
specialized_functions
libraries
pipelines
named_predicates
function
constant_values
storage
data
id_type
value_type
value
rgbOperation
alphaOperation
srcColor
dstColor
srcAlpha
dstAlpha
_writeMask
type
additionalArrayInputs
additionalArrayOutputs
RawValue
variations
maxSquaredDistances
resource
lastRange
lastLodIndex
model
material
visibleSquaredRange
stage
text
colorScheme
orange
yellow
green
blue
purple
pink
gray
device
renderer
numberOfFramesBeforePurge
unusedTextures
usedTextures
texture
unusedFrameCount
mode
xRange
yRange
zRange
legacyHalfSizeMultiplier
RawValue
classByClassHash
componentTypes
entityComponentTypes
classComponentTypes
packedComponentTypes
storageLayout
_componentsIndicesByID
familyIndex
familyHash
value
variant
format
rawValue
ArrayLiteralElement
Element
RawValue
fixed
ratio
update
radiance
irradiance
intensity
RawValue
RawValue
AllCases
instance
componentLayouts
nonPODComponentLayouts
PODComponentLayouts
storageStride
storageAlignment
maxEntityPerStorage
storageSize
entityIndicesOffsetInStorage
type
offsetInStorage
isPOD
storage
Element
Iterator
Index
SubSequence
Indices
storage
_result
buffer
length
offset
ABGR
vertex_main
fragment_main
emitter_update
particle_init
particle_update
?fff?
?fff?
?fff?
nearest
linear
clampToZero
clampToEdge
repeat
repeatMirror
local
world
scene
none
no mipmaps
nearest
linear
Opaque
Alpha
Additive
linear
radial
vortex
noise
turbulence
spring
magnetic
harmonic
drag
texture
Inside
Outside
Infinite
Sphere
Cone
Tube
None
Front
Back
ECS.Event
VFXCore.Target
Scale
metal#intrinsic
texture
scale
offset
color
condition
true
false
texture
asset#intrinsic
texture
colorRamp
color
index
state
power
duration
frequency
decay
angle
angle
angle
seed#hidden
viewport
include
exclude
color
depth
colorDescriptor
color
depth
keyCode
anticipate
midPoint
bounces
identifier
seed#hidden
range
hitTest
position
button
Btexture
exponent
colorRamp
descriptor
resolution
translation
rotation
scale
translation
rotation
scale
base#hidden
sizeFactor
width
height
depth
sample
descriptor
asset#intrinsic
color
normal
seed#hidden
size
eulerAngles
seed#hidden
radius
rotation
center
angleRadians
axis
angle
axisAngle
rotation
rotation
quaternion
quaternion
true
false
condition
color
sigma
color
identifier
delay
color
color
fromStart
fromEnd
toStart
toEnd
output
.DS_Store
.gitignore
.git
.DS_Store
.gitignore
.git
?fff?
?fff?
?fff?
vertex_main
fragment_main
position
normal
tangent
color
jointIndices
jointWeights
nearest
linear
particle_init
particle_update
emitterUpdate
emitter_update
particleInit
particle_init
particleUpdate
particle_update
emitter_update
flow#hidden
associatedtype
break
case
catch
class
continue
default
defer
deinit
else
enum
extension
fallthrough
false
fileprivate
func
guard
import
init
inout
internal
operator
precedencegroup
private
protocol
public
rethrows
repeat
return
self
Self
static
struct
subscript
super
switch
throw
throws
true
typealias
where
while
__FILE__
__LINE__
__COLUMN__
__FUNCTION__
__DSO_HANDLE__
inout
space
space
position
normal
color
tangent
name
name
space
address_mode
filter_mode
void *ptr
script_context
random_seed
particles
io.vertice.uv0
io.vertice.uv1
io.vertice.uv2
io.vertice.uv3
vtx.position
vtx.uv0
vtx.uv1
vtx.uv2
vtx.uv3
vtx.color
vtx.tangent
vtx.normal
out.color
builtin.crws()
camera_index
return io;
return out;
-std=c++17
{ NULL, NULL },
-Onone
-Osize
-Ofast
AddressMode
FilterMode
OPAQUE_COLOR
OPAQUE_DEPTH
LINEAR_DEPTH
DEPTH_MIPMAPPED
SHADOW_ATLAS
COMPOSITING
LENSBLUR
BLOOM
AUTHORING
AUTHORING_DEPTH
ALBEDO
NORMAL
EMISSIVE
DepthAsColor
DepthAsColor
brdfLut
brdfMap
irradiance
radiance
lightConstants
lightBuffer
clipping
vrrMap
script_context
lower_bound
upper_bound
<flow>
-Ofast
particleUpdate
emitter_update
emitter_update
vertex_main
fragment_main
vertex_main
fragment_main
particle_init
particle_init
particle_update
Math
Remap
Math
MixHLS
reuniforms
lightConstants
irradianceTex
radianceTex
brdfLUTTex
shadowMap
ModelController
ModelController
ModelController
ModelController
shape_type
needNormal
needTangent
maxBoneCount
Children
selectedCase
__category
CustomType=
visible
userData:
7> }#>
