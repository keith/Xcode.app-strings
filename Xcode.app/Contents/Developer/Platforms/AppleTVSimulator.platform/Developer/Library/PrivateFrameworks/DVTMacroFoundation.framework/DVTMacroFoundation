@(#)PROGRAM:DVTMacroFoundation  PROJECT:DVTFrameworks-23200.2
(*359>DFHJM`afo
? @ 
!$!$!&!&!(!(!*!1!3!8!`!
0!0)0A0
fo
T@"NSArray",?,R
.cxx_destruct
_literalStrings
T@"<DVTMacroExpansion>",R,V_value
_parameterNames
T@"DVTMacroDefinitionConditionSet",R,V_conditionSet
aliases
T@"NSAttributedString",R
countForObject:
T@"NSCountedSet",R,V_macroNameLookupCounts
definitionLevel
T@"NSString",?,R
initWithString:
T@"NSString",C
longDescription
T@"NSString",R,C
options
T@"NSString",R,V_label
release
T@?,C
TB,R,GisListType,V_listType
stringByAppendingPathExtension:
TB,V_postsChangeNotifications
uppercaseString
TQ,R,V_numFirstDefinitionRetrievals
version
.cxx_construct
_alwaysPreserve
T#,R
_macroDefnTable
T@"DVTMacroDefinitionConditionParameter",R
_unused
T@"DVTVersion",?,R
containsString:
T@"NSCountedSet",R,V_macroNameFirstDefnRetrievalCounts
dealloc
T@"NSCountedSet",R,V_macroNameLookupCursorCreationCounts
dvt_parseAsMacroExpansionString
T@"NSString",?,R,C
isProxy
T@"NSString",R
lowercaseString
T@"NSString",R,C,V_macroName
registerRetrievalOperatorClass:
T@"NSString",R,V_macroName
removeAllMacros
TB,R
stringByAppendingPathComponent:
TB,R,V_defaultIsListType
stringListByApplyingOperatorToStringList:inMacroExpansionScope:
TQ,R
valueForMacroName:conditionSet:
TQ,R,V_numMacroDefinitionLookups
TQ,R,V_numMacroLookupCursorsCreated
T^Q,R,V_sampleCounts
T{_NSRange=QQ},R,V_valueRange
UTF8String
_allCondParamFallbackValues
_allCondParamValues
_block
_cacheLock
_cachedDictRep
_cachedHash
_cachedMacroNameSet
_combinedHash
_combinedPrecedence
_condParamFallbackValues
_condParamValues
_conditionSet
_conditions
_count
_creationBacktrace
_declaredMutable
_defaultIsListType
_defnLevel
_didSetValueBlock
_displayDesc
_displayName
_dvt_parseAsMacroAssignmentsIntoMacroDefinitionTable:withBlock:returningErrorString:
_elements
_expansionOptions
_hashValue
_highestDefnLevel
_isImmutable
_label
_listType
_lock
_logAtLogLevel:withFormat:
_macroName
_macroNameExpr
_macroNameFirstDefnRetrievalCounts
_macroNameLookupCounts
_macroNameLookupCursorCreationCounts
_mapTable
_name
_nextScopeByDefnLevel
_numElements
_numFirstDefinitionRetrievals
_numMacroDefinitionLookups
_numMacroLookupCursorsCreated
_numOperators
_numSubstrings
_operators
_origString
_originalTable
_parameter
_parentScope
_parseError
_postsChangeNotifications
_precedence
_replExpr
_sampleCounts
_setLiteralValue:forMacroName:conditionSet:wantsCheckForDVTMacroExpansionConformance:
_stringForm
_subscriptRep
_substrings
_value
_valuePattern
_valueRange
_willSetValueBlock
addEntriesFromDictionary:
addObject:
addValue:
allConditionParameterValues
allMacroNames
allObjects
allValues
allocWithZone:
appendAdditionalContentToStringBuilder:indent:
appendDebugDescriptionToStringBuilder:indent:
appendFormat:
appendString:
applyToEmptyResult
array
arrayWithCapacity:
arrayWithObject:
arrayWithObjects:count:
assertInternalConsistency
autorelease
boolForKey:
boolValue
characterAtIndex:
characterSetWithBitmapRepresentation:
class
compare:
componentsJoinedByString:
componentsSeparatedByString:
conditionForParameterNamed:
conditionParameterNamed:
conditionSet
conditionSetByAddingCondition:
conditionSetByRemovingParameterNamed:
conditionSetFromStringRepresentation:getBaseMacroName:error:
conditionSetWithCondition:
conditionSetWithConditions:
conditionSetWithConditions:count:
conditionWithParameterName:valuePattern:
conformsToProtocol:
containsCondition:
copy
copyWithLabel:
copyWithZone:
count
countByEnumeratingWithState:objects:count:
currentLocale
currentStackBacktrace
dataWithBytes:length:
debugDescription
declareMutable
decomposedStringWithCanonicalMapping
defaultConditionParameters
defaultIsListType
defaultStatistics
description
descriptionForAssertionMessage
descriptionWithLocale:indent:
dictionary
dictionaryRepresentation
dictionaryWithCapacity:
dictionaryWithObject:forKey:
dictionaryWithObjects:forKeys:count:
didSetValueBlock
discardCaches
displayDescription
displayName
dvt_arrayByExpandingEntriesWithMacroExpansionScope:
dvt_assertInternalConsistency
dvt_beginActivityWithOptions:reason:
dvt_broadcast:userInfo:
dvt_debugDescription
dvt_dictionaryByExpandingKeysAndValuesWithMacroExpansionScope:
dvt_dictionaryByExpandingValuesWithMacroExpansionScope:
dvt_dictionaryWithKeysAndValues:
dvt_evaluateAsStringInScope:withState:
dvt_evaluateAsStringListInScope:withState:
dvt_isLegalCIdentifier
dvt_isLiteral
dvt_isNonEmpty
dvt_literalValueOfCommonString
dvt_parseAsMacroAssignmentParsingValueWithBlock:returningErrorString:
dvt_parseAsMacroAssignmentUsingMacroNameRegistry:returningErrorString:
dvt_parseAsMacroAssignmentsUsingMacroNameRegistry:returningErrorString:
dvt_parseAsMacroAssignmentsWithBlock:returningErrorString:
dvt_parseAsMacroExpansionStringList
dvt_parseAsMacroExpansionStringListReturningError:
dvt_parseAsMacroExpansionStringReturningError:
dvt_sharedCopy
dvt_stringByConcatenatingAsCommandLineArguments
dvt_stringByEscapingForXML
dvt_stringByRemovingPrefix:
dvt_stringByRemovingSuffix:
dvt_stringForm
dvt_stringWithPotentiallyMalformedUTF8Bytes:length:
empty
enumerateKeysAndObjectsUsingBlock:
enumerateMacroNamesAndValuesUsingBlock:
enumerateValuesForMacroName:usingBlock:
errorWithDomain:code:userInfo:
evaluateForParameterValues:
evaluateInScope:
evaluateMacroExpression:asStringForLiteralStringValue:
evaluateMacroExpression:asStringListForLiteralStringValue:
evaluatedBooleanValueForMacroExpression:
evaluatedBooleanValueForMacroNamed:
evaluatedStringListValueForMacroExpression:
evaluatedStringListValueForMacroNamed:
evaluatedStringValueForMacroExpression:
evaluatedStringValueForMacroNamed:
evaluatedStringValueForMacroNamed:returningFallbackConditionsUsed:
firstIndex
firstObject
getCharacters:
getCharacters:range:
getLineStart:end:contentsEnd:forRange:
getObjects:range:
hasParseError
hasSuffix:
hash
identifier
indexGreaterThanIndex:
indexSetWithIndex:
init
initWithArray:
initWithBlock:
initWithBytes:length:encoding:
initWithCapacity:
initWithDebugName:
initWithDebugName:defaultIsListType:
initWithFormat:arguments:
initWithKey:ascending:
initWithLabel:
initWithLabel:creationBacktrace:
initWithLabel:valueRange:
initWithLiteralString:
initWithMacroName:isListType:
initWithMacroName:value:conditionSet:
initWithName:precedence:displayName:displayDescription:
initWithObjects:count:
initWithOriginalString:
initWithOriginalString:macroNameExpression:preserveOriginalStringIfUnresolved:operators:
initWithOriginalString:substrings:
initWithParameterName:valuePattern:
initWithParentScope:macroDefinitionTable:definitionLevel:definitionLevelsToClear:conditionParameterValues:conditionParameterFallbackValues:expansionOptions:
initWithParentScope:macroDefinitionTable:definitionLevel:definitionLevelsToClear:conditionParameterValues:expansionOptions:
initWithParseError:
initWithReplacementExpression:
initWithReplacementExpression:parseError:
initWithStringForm:elements:
initWithStringForm:literalStrings:
initialize
integerValue
invertedSet
isAbsolutePath
isEqual:
isEqualToString:
isImmutable
isKindOfClass:
isListType
isMemberOfClass:
isSubclassOfClass:
isSubsetOfSet:
keysOfEntriesPassingTest:
label
lastPathComponent
length
listType
localizedDescription
logAspectWithName:
logLevel
longDescriptionInMacroLookupOrder
longDescriptionInScopeAncestryOrder
longDescriptionInSortedMacroNameOrder
lookupValueForMacroName:hash:withCursor:
macroDefinitionTable
macroIsListType:
macroName
macroNameFirstDefnRetrievalCounts
macroNameLookupCounts
macroNameLookupCursorCreationCounts
macroNameRegistry
makeImmutable
mutableCopy
mutableCopyWithZone:
name
newWithLabel:
newWithLiteralString:
newWithMacroName:value:conditionSet:
newWithOriginalString:macroNameExpression:preserveOriginalStringIfUnresolved:operators:
newWithOriginalString:substrings:
newWithParentScope:definitionLevelsToClear:macroDefinitionTables:conditionParameterValues:options:knownStringMapping:
newWithParentScope:macroDefinitionTable:definitionLevel:
newWithParentScope:macroDefinitionTable:definitionLevel:definitionLevelsToClear:conditionParameterValues:
newWithParentScope:macroDefinitionTable:definitionLevel:definitionLevelsToClear:conditionParameterValues:conditionParameterFallbackValues:expansionOptions:
newWithParentScope:macroDefinitionTable:definitionLevel:definitionLevelsToClear:conditionParameterValues:expansionOptions:
newWithParentScope:macroDefinitionTables:
newWithParentScope:macroDefinitionTables:conditionParameterValues:
newWithParentScope:macroDefinitionTables:conditionParameterValues:options:
newWithParentScope:macros:definitionLevel:
newWithParentScope:macros:definitionLevel:conditionParameterValues:
newWithParentScope:macros:definitionLevel:conditionParameterValues:preserveUnresolvedReferences:
newWithStringForm:elements:
newWithStringForm:literalStrings:
nextScopeForOwnDefinitionLevel
numFirstDefinitionRetrievals
numMacroDefinitionLookups
numMacroLookupCursorsCreated
numUniqueMacroNamesLookedUp
numberOfDefinitions
numberOfMacros
numberWithUnsignedInteger:
objectAtIndex:
objectAtIndexedSubscript:
objectForIdentifier:
objectForKey:
objectForKeyedSubscript:
operatorName
parameter
parameterNames
parentScope
parseAndSetValue:forMacroName:conditionSet:
parseError
pathExtension
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
postsChangeNotifications
precedence
preserveUnresolvedReferences
processInfo
rangeOfCharacterFromSet:
rangeOfCharacterFromSet:options:
rangeOfCharacterFromSet:options:range:
rangeOfString:
rangeOfString:options:range:
recordLookupCursorCreationForMacroName:
recordLookupEventForMacroName:
recordRetrievalOfFirstDefinitionForMacroName:
registerBuiltInOperators
registerConditionParameterNamed:precedence:displayName:displayDescription:
registerMacroName:isListType:
registerObject:collisionHandler:
registerReplacementOperatorClass:
registeredConditionParameters
registeredReplacementOperatorClasses
registeredRetrievalOperatorClasses
removeAllConditionSetsForMacroName:
removeMacroName:
removeMacroNames:
removeMacroNames:arguments:
replacementExpression
replacementObjectForCoder:
replacementOperatorClassForOperatorNamed:
replacementOperatorRegistry
respondsToSelector:
retain
retainCount
retrievalOperatorClassForOperatorNamed:
retrievalOperatorRegistry
sampleCounts
scopeByRemovingAllTablesAtDefinitionLevel:
self
setByAddingObjectsFromSet:
setDidSetValueBlock:
setLabel:
setLiteralValue:forMacroName:conditionSet:
setMacroNamesAndValuesFromDictionary:
setMacroNamesAndValuesFromMacroDefinitionTable:
setObject:forKey:
setObject:forKeyedSubscript:
setPostsChangeNotifications:
setStringValue:forMacroName:conditionSet:
setValue:forMacroName:conditionSet:
setWillSetValueBlock:
sortedArrayUsingComparator:
sortedArrayUsingDescriptors:
sortedArrayUsingSelector:
sortedLongDescription
standardUserDefaults
string
stringByAppendingString:
stringByApplyingOperatorToString:inMacroExpansionScope:
stringByDeletingLastPathComponent
stringByDeletingPathExtension
stringByReplacingCharactersInRange:withString:
stringByStandardizingPath
stringByTrimmingCharactersInSet:
stringForDefinitionLevel:
stringRepresentation
stringWithCString:encoding:
stringWithCharacters:length:
stringWithFormat:
stringWithUTF8String:
subscriptRepresentation
substringFromIndex:
substringWithRange:
superclass
unionSet:
unsignedIntegerValue
value
valueForConditionParameter:
valueForKey:
valuePattern
valueRange
whitespaceCharacterSet
willSetValueBlock
zone
-[DVTMacroDefinitionCondition initWithParameterName:valuePattern:]
DVTFrameworks/DVTMacroFoundation/DVTMacroDefinitionCondition.mm
(_parameter) == nil || [(id)(_parameter) isKindOfClass:[DVTMacroDefinitionConditionParameter class]]
%@ should be an instance inheriting from %@, but it is %@
_parameter
(_valuePattern) != nil
%@ should be a string, but it is nil
_valuePattern
CFGetTypeID((CFStringRef)_valuePattern) == CFStringGetTypeID()
%@ should be a string, but it is %@
-[DVTMacroDefinitionCondition evaluateForParameterValues:]
(values) != nil
%@ should be a dictionary, but it is nil
values
CFGetTypeID((CFDictionaryRef)values) == CFDictionaryGetTypeID()
%@ should be a dictionary, but it is %@
value
CFGetTypeID((CFStringRef)value) == CFStringGetTypeID()
-[DVTMacroDefinitionCondition evaluateInScope:]
(scope) != nil
%@ should be an instance inheriting from %@, but it is nil
scope
[(id)(scope) isKindOfClass:[DVTMacroExpansionScope class]]
-[DVTMacroDefinitionCondition compare:]
(otherCondition) != nil
otherCondition
[(id)(otherCondition) isKindOfClass:[DVTMacroDefinitionCondition class]]
[%@=%@]
v8@?0
config
Configuration
Name of the configuration
Canonical name of SDK being built against
variant
Variant
Variant (normal, debug, profile, etc)
arch
Architecture
Architecture (i386, x86_64, armv6, etc)
dialect
Dialect
Language dialect
+[DVTMacroDefinitionConditionParameter conditionParameterNamed:]
DVTFrameworks/DVTMacroFoundation/DVTMacroDefinitionConditionParameter.mm
(name) != nil
%@ should be a non-empty string, but it is nil
name
CFGetTypeID((CFStringRef)name) == CFStringGetTypeID()
%@ should be a non-empty string, but it is %@
![(name) isEqualToString:@""]
%@ should be a non-empty string, but it's an empty string
(param) == nil || [(id)(param) isKindOfClass:[DVTMacroDefinitionConditionParameter class]]
param
B32@?0@8@16^B24
-[DVTMacroDefinitionConditionParameter compare:]
(object) != nil
object
[(id)(object) isKindOfClass:[DVTMacroDefinitionConditionParameter class]]
<%@:%p:%@>
-[DVTMacroDefinitionConditionSet initWithObjects:count:]
DVTFrameworks/DVTMacroFoundation/DVTMacroDefinitionConditionSet.mm
(uintptr_t)(void *)&_conditions[count] <= (uintptr_t)(__bridge void *)self + malloc_size((__bridge void *)self)
objects != __null || count == 0
(objects[i]) != nil
objects[i]
[(id)(objects[i]) isKindOfClass:[DVTMacroDefinitionCondition class]]
i24@?0r^v8r^v16
+[DVTMacroDefinitionConditionSet conditionSetWithConditions:]
(conditions) != nil
conditions
[(id)(conditions) isKindOfClass:[NSSet class]]
idx == numConditions
+[DVTMacroDefinitionConditionSet conditionSetWithCondition:]
(condition) != nil
condition
[(id)(condition) isKindOfClass:[DVTMacroDefinitionCondition class]]
macro string representation is an empty string, with no name or condition parameters
+[DVTMacroDefinitionConditionSet conditionSetFromStringRepresentation:getBaseMacroName:error:]
macro string representation '%@' isn't well formed: couldn't resolve the parameter name
macro string representation '%@' isn't well formed: parameter name is empty
macro string representation '%@' isn't well formed: no ']' found after '='
macro string representation '%@' isn't well formed: junk found after ']'
conditions.count >= 1
(conditionSet) == nil || [(id)(conditionSet) isKindOfClass:[DVTMacroDefinitionConditionSet class]]
conditionSet
-[DVTMacroDefinitionConditionSet conditionSetByAddingCondition:]
-[DVTMacroDefinitionConditionSet conditionSetByRemovingParameterNamed:]
(paramName) != nil
paramName
CFGetTypeID((CFStringRef)paramName) == CFStringGetTypeID()
-[DVTMacroDefinitionConditionSet evaluateInScope:]
-[DVTMacroDefinitionConditionSet subscriptRepresentation]
[_conditions[i-1] compare:_conditions[i]] != NSOrderedAscending
i-1: %@, i: %@
-[DVTMacroDefinitionConditionSet compare:]
[(id)(object) isKindOfClass:[DVTMacroDefinitionConditionSet class]]
DVTMacroDefinitionTable_ValueDidChangeBroadcast
DVTMacroDefinitionTableStatistics
-[DVTMacroDefinitionTable setLabel:]
DVTFrameworks/DVTMacroFoundation/DVTMacroDefinitionTable.mm
_isImmutable == __objc_no
-[DVTMacroDefinitionTable setWillSetValueBlock:]
-[DVTMacroDefinitionTable setDidSetValueBlock:]
v24@?0@"NSString"8^B16
-[DVTMacroDefinitionTable setValue:forMacroName:conditionSet:]
(macroName) != nil
macroName
CFGetTypeID((CFStringRef)macroName) == CFStringGetTypeID()
![(macroName) isEqualToString:@""]
-[DVTMacroDefinitionTable _setLiteralValue:forMacroName:conditionSet:wantsCheckForDVTMacroExpansionConformance:]
value must be nil, string or array, but is %@
-[DVTMacroDefinitionTable parseAndSetValue:forMacroName:conditionSet:]
[macroNameRegistry macroIsListType:macroName]
-[DVTMacroDefinitionTable valueForMacroName:conditionSet:]
v40@?0@"NSString"8@"DVTMacroDefinitionConditionSet"16@"<DVTMacroExpansion>"24^B32
v32@?0@"DVTMacroDefinitionConditionSet"8@"<DVTMacroExpansion>"16^B24
-[DVTMacroDefinitionTable setMacroNamesAndValuesFromDictionary:]
(dict) == nil || CFGetTypeID((CFDictionaryRef)dict) == CFDictionaryGetTypeID()
dict
v32@?0@8@16^B24
-[DVTMacroDefinitionTable setMacroNamesAndValuesFromMacroDefinitionTable:]
(table) == nil || [(id)(table) isKindOfClass:[DVTMacroDefinitionTable class]]
table
-[DVTMacroDefinitionTable objectForKeyedSubscript:]
-[DVTMacroDefinitionTable setObject:forKeyedSubscript:]
-[DVTMacroDefinitionTable assertInternalConsistency]_block_invoke
-[DVTMacroDefinitionTable assertInternalConsistency]_block_invoke_2
-[DVTMacroDefinitionTable assertInternalConsistency]
macroNameCount == _mapTable->_numMacroNames
definitionCount == _mapTable->_numValueAssgns
 // 
immutable
mutable
-[DVTMacroDefinitionTable descriptionWithLocale:indent:]_block_invoke
DVTMacroValueAssignmentMapTable::DVTMacroValueAssignmentMapTable(unsigned int)
(unsigned)malloc_size(_hashesAndBuckets) >= _numBuckets * sizeof(uint32_t) + _numBuckets * sizeof(DVTMacroValueAssignmentBucket)
DVTMacroDefinitionTables created: %i
DVTMacroDefinitionTable backtrace statistics are enabled and must run at process exit
Top DVTMacroDefinitionTable creation and copy backtraces:
CreatedCount
CopiedCount
Backtrace
CREATE COUNT: %lu, COPY COUNT: %lu, RATIO: %.2f, BACKTRACE HASH:
TOTAL CREATES < %lu: %lu, TOTAL COPIES < %lu: %lu
BACKTRACE WITH HASH: %lu
*******
void DVTMacroValueAssignmentMapTable::set(NSString *__strong, DVTMacroDefinitionConditionSet *__strong, __strong id<DVTMacroExpansion>)
nameHash != kEmptyBucketHashMarker && nameHash != kTombstoneBucketHashMarker
const id<DVTMacroExpansion> DVTMacroValueAssignmentMapTable::get(NSString *__strong, DVTMacroDefinitionConditionSet *__strong) const
void DVTSetMacroNameAndValue(DVTMacroDefinitionTable *__strong, NSString *__strong, __strong id, BOOL)
(self) != nil
self
[(id)(self) isKindOfClass:[DVTMacroDefinitionTable class]]
USE_XCBUILD_FOR_BUILD_SETTINGS_EVALUATION
DVTMacroExpansionErrorDomain
+[DVTMacroExpansionString allocWithZone:]
DVTFrameworks/DVTMacroFoundation/DVTMacroExpansion.mm
%@ is an abstract class and cannot be instantiated
-[DVTMacroExpansionString initWithOriginalString:]
(origString) != nil
origString
CFGetTypeID((CFStringRef)origString) == CFStringGetTypeID()
-[DVTMacroExpansionString dvt_isLiteral]
method %@ is a subclass responsibility of %@
-[DVTMacroExpansionString dvt_evaluateAsStringInScope:withState:]
-[DVTMacroExpansionString dvt_evaluateAsStringListInScope:withState:]
-[DVTMacroExpansionString dvt_debugDescription]
-[DVTMacroExpansionString_Literal initWithLiteralString:]
(string) != nil
string
CFGetTypeID((CFStringRef)string) == CFStringGetTypeID()
-[DVTMacroExpansionString_Literal hash]
_hashValue == [_origString hash]
-[DVTMacroExpansionString_Literal dvt_assertInternalConsistency]
-[DVTMacroExpansionString_Substitution initWithOriginalString:macroNameExpression:preserveOriginalStringIfUnresolved:operators:]
(uintptr_t)(void *)&_operators[_numOperators] <= (uintptr_t)(__bridge void *)self + malloc_size((__bridge void *)self)
(_operators[i]) != nil
_operators[i]
[(id)(_operators[i]) isKindOfClass:[DVTMacroExpansionOperator class]]
-[DVTMacroExpansionString_Substitution dvt_evaluateAsStringInScope:withState:]
(_origString) != nil
_origString
CFGetTypeID((CFStringRef)_origString) == CFStringGetTypeID()
inherited
(NSString *)state->literalValue
CFGetTypeID((CFStringRef)(NSString *)state->literalValue) == CFStringGetTypeID()
literalStringValue
CFGetTypeID((CFStringRef)literalStringValue) == CFStringGetTypeID()
(stringValue) != nil
stringValue
CFGetTypeID((CFStringRef)stringValue) == CFStringGetTypeID()
-[DVTMacroExpansionString_Substitution dvt_evaluateAsStringListInScope:withState:]
(stringListValue) != nil
%@ should be a array, but it is nil
stringListValue
CFGetTypeID((CFArrayRef)stringListValue) == CFArrayGetTypeID()
%@ should be an array, but it is %@
-[DVTMacroExpansionString_Substitution dvt_assertInternalConsistency]
-[DVTMacroExpansionString_Substitution dvt_debugDescription]
-[DVTMacroExpansionString_StringSubstitution dvt_debugDescription]
-[DVTMacroExpansionString_Concatenation initWithOriginalString:substrings:]
((substrings)) != nil
%@ should not be nil.
(substrings)
(uintptr_t)(void *)&_substrings[_numSubstrings] <= (uintptr_t)(__bridge void *)self + malloc_size((__bridge void *)self)
+[DVTMacroExpansionString_Concatenation newWithOriginalString:substrings:]
-[DVTMacroExpansionString_Concatenation dvt_assertInternalConsistency]
+[DVTMacroExpansionStringList allocWithZone:]
-[DVTMacroExpansionStringList dvt_isLiteral]
-[DVTMacroExpansionStringList dvt_stringForm]
-[DVTMacroExpansionStringList hash]
-[DVTMacroExpansionStringList isEqual:]
-[DVTMacroExpansionStringList count]
-[DVTMacroExpansionStringList objectAtIndex:]
-[DVTMacroExpansionStringList countByEnumeratingWithState:objects:count:]
-[DVTMacroExpansionStringList description]
-[DVTMacroExpansionStringList dvt_evaluateAsStringInScope:withState:]
-[DVTMacroExpansionStringList dvt_evaluateAsStringListInScope:withState:]
-[DVTMacroExpansionStringList dvt_debugDescription]
-[DVTMacroExpansionStringList_NonLiteral initWithStringForm:elements:]
((elements)) != nil
(elements)
(uintptr_t)(void *)&_elements[_numElements] <= (uintptr_t)(__bridge void *)self + malloc_size((__bridge void *)self)
+[DVTMacroExpansionStringList_NonLiteral newWithStringForm:elements:]
-[DVTMacroExpansionStringList_NonLiteral objectAtIndex:]
idx < _numElements
-[DVTMacroExpansionStringList_NonLiteral countByEnumeratingWithState:objects:count:]
idx <= _numElements
-[DVTMacroExpansionStringList_NonLiteral dvt_assertInternalConsistency]
-[DVTMacroExpansionStringList_Literal initWithStringForm:literalStrings:]
(literalStrings) != nil
literalStrings
CFGetTypeID((CFArrayRef)literalStrings) == CFArrayGetTypeID()
-[DVTMacroExpansionStringList_Literal dvt_assertInternalConsistency]
(_literalStrings) != nil
_literalStrings
CFGetTypeID((CFArrayRef)_literalStrings) == CFArrayGetTypeID()
-[DVTMacroExpansionStringList_Literal dvt_debugDescription]
(ls) != nil
CFGetTypeID((CFStringRef)ls) == CFStringGetTypeID()
-[DVTMacroExpansionBlock initWithBlock:]
((block)) != nil
(block)
-[DVTMacroExpansionBlock dvt_assertInternalConsistency]
((_block)) != nil
(_block)
DVTMacroExpressionByParsingString('%@')
$(inherited)
$(inherited) 
NSString<DVTMacroExpansion> *DVTMacroExpressionByParsingString(NSString *__strong _Null_unspecified)
*endPtr == '\0'
DVTMacroExpressionByParsingStringAsList('%@')
NSArray<DVTMacroExpansion> *DVTMacroExpressionByParsingStringAsList(NSString *__strong _Nullable)
DVTMacroExpressionByParsingStringArrayAsList([%@])
NSArray<DVTMacroExpansion> *DVTMacroExpressionByParsingStringArrayAsList(NSArray<NSString *> *__strong _Null_unspecified)
-[DVTMacroAssignmentInfo initWithMacroName:value:conditionSet:]
<%@:%p:%@:%@:%@>
String '%@' could not be parsed: '%@' is not a legal macro name
String '%@' could not be parsed: %@
String '%@' could not be parsed due to an unknown error
String '%@' could not be parsed because there is no macro name on the left side of the =
String '%@' isn't a valid build setting assignment
DVTLogCompatibilityWarningsForXCBuildTransition
${inherited}
potential xcbuild compatiblity issue: '%@' %@: new='%@', previous='%@'
@"DVTMacroAssignmentInfo"40@?0@"NSString"8@"NSString"16@"DVTMacroDefinitionConditionSet"24^@32
  count  : %4lu
  minimum: %4lu
  maximum: %4lu
  average: %4lu
  median : %4lu
CollectDVTMacroExpansionStatistics
%lu unique macro names looked up
%lu lookup operations in total
q24@?0@8@16
%5lu  %@
%lu lookup cursors created in total
%lu retrievals of first definitions in total
id _handleMissingMacroValue(DVTMacroExpansionScope *__strong, NSString *__strong, __strong id, __strong id, BOOL, BOOL)
(expandedMacroName) != nil
expandedMacroName
CFGetTypeID((CFStringRef)expandedMacroName) == CFStringGetTypeID()
origValue
Failed to expand '%@'
>> Expanded macro name: %@
>> Expansion scope: %@
DVTMacroExpansionParsing
NSString<DVTMacroExpansion> *ParseMacroExpansionString(const char *, const char **, char, char, BOOL, NSString *__strong)
str != __null
endPtr != __null
(literalStr) != nil
literalStr
CFGetTypeID((CFStringRef)literalStr) == CFStringGetTypeID()
![(literalStr) isEqualToString:@""]
*ptr == 0 || *ptr == '$' || *ptr == stopCh1 || *ptr == stopCh2
*ptr == 0 || *ptr == stopCh1 || *ptr == stopCh2
*endPtr != __null
**endPtr == 0 || **endPtr == '$' || **endPtr == stopCh1 || **endPtr == stopCh2
NSString *ParseLiteralStringFragment(const char *, const char **, char, char)
ptr > str
NSString<DVTMacroExpansion> *ParseSubstitutionExpressionStringFragment(const char *, const char **, BOOL)
*str == '$'
*ptr == 0 || *ptr == '$' || *ptr == ':' || *ptr == macroExpnCloseDelim
*ptr == 0 || *ptr == ':' || *ptr == macroExpnCloseDelim
operatorClass == nullptr || [operatorClass isSubclassOfClass:[DVTMacroExpansionReplacementOperator class]]
Unknown operator '%@'
(op) == nil || [(id)(op) isKindOfClass:[DVTMacroExpansionReplacementOperator class]]
operatorClass == nullptr || [operatorClass isSubclassOfClass:[DVTMacroExpansionRetrievalOperator class]]
(op) == nil || [(id)(op) isKindOfClass:[DVTMacroExpansionRetrievalOperator class]]
(op) != nil
[(id)(op) isKindOfClass:[DVTMacroExpansionOperator class]]
*ptr == 0 || *ptr == macroExpnCloseDelim
ptr >= str + 2
*ptr == 0 || *(ptr-1) == macroExpnCloseDelim
ptr > macroNamePtr
SourceString
NSArray<DVTMacroExpansion> *ParseQuotedString(const char *, const char **, NSString *__strong)
NSString<DVTMacroExpansion> *ParseQuotedStringElement(const char *, const char **)
*iptr == '\0' || (currentQuotes == NoQuotes && isspace(*iptr)) || *iptr == '$'
*iptr == '\0' || (currentQuotes == NoQuotes && isspace(*iptr))
+[DVTMacroExpansionOperator operatorName]
DVTFrameworks/DVTMacroFoundation/DVTMacroExpansionOperator.mm
-[DVTMacroExpansionOperator stringByApplyingOperatorToString:inMacroExpansionScope:]
-[DVTMacroExpansionOperator stringListByApplyingOperatorToStringList:inMacroExpansionScope:]
+[DVTMacroExpansionOperator(OperatorClassRegistration) registerRetrievalOperatorClass:]
cls != nullptr && [cls isSubclassOfClass:[DVTMacroExpansionRetrievalOperator self]]
+[DVTMacroExpansionOperator(OperatorClassRegistration) retrievalOperatorClassForOperatorNamed:]
(operatorName) != nil
operatorName
CFGetTypeID((CFStringRef)operatorName) == CFStringGetTypeID()
+[DVTMacroExpansionOperator(OperatorClassRegistration) registerReplacementOperatorClass:]
cls != nullptr && [cls isSubclassOfClass:[DVTMacroExpansionReplacementOperator self]]
+[DVTMacroExpansionOperator(OperatorClassRegistration) replacementOperatorClassForOperatorNamed:]
-[DVTMacroExpansionRetrievalOperator stringByApplyingOperatorToString:inMacroExpansionScope:]
-[DVTMacroExpansionRetrievalOperator stringListByApplyingOperatorToStringList:inMacroExpansionScope:]
(stringList) != nil
stringList
CFGetTypeID((CFArrayRef)stringList) == CFArrayGetTypeID()
<ERROR>
-[DVTMacroExpansionReplacementOperator initWithReplacementExpression:]
(expr) != nil
expr
CFGetTypeID((CFStringRef)expr) == CFStringGetTypeID()
-[DVTMacroExpansionReplacementOperator stringByApplyingOperatorToString:inMacroExpansionScope:]
-[DVTMacroExpansionReplacementOperator stringListByApplyingOperatorToStringList:inMacroExpansionScope:]
quote
upper
lower
identifier
rfc1034identifier
c99extidentifier
file
base
suffix
standardizepath
relativeto
default
NSString *StringByEscapingWhitespace(NSString *__strong)
outLength >= length
outLength <= maxOutLength
NSString *StringByManglingToLegalCIdentifier(NSString *__strong)
NSString *StringByManglingToLegalRFC1034Identifier(NSString *__strong)
NSString *StringByRetrievingPathDirectory(NSString *__strong)
NSString *StringByRetrievingPathFileName(NSString *__strong)
NSString *StringByRetrievingPathBaseName(NSString *__strong)
NSString *StringByRetrievingPathSuffix(NSString *__strong)
NSString *StringByReplacingPathDirectory(NSString *__strong, NSString *__strong)
(replacement) != nil
replacement
CFGetTypeID((CFStringRef)replacement) == CFStringGetTypeID()
NSString *StringByReplacingPathFileName(NSString *__strong, NSString *__strong)
NSString *StringByReplacingPathBaseName(NSString *__strong, NSString *__strong)
NSString *StringByReplacingPathSuffix(NSString *__strong, NSString *__strong)
NSString *StringByReplacingPathRelativeTo(NSString *__strong, NSString *__strong)
NSString *StringByReplacingEmptyStringWithDefaultValue(NSString *__strong, NSString *__strong)
-[DVTMacroExpansionScope initWithParentScope:macroDefinitionTable:definitionLevel:definitionLevelsToClear:conditionParameterValues:conditionParameterFallbackValues:expansionOptions:]
DVTFrameworks/DVTMacroFoundation/DVTMacroExpansionScope.mm
(parentScope) == nil || [(id)(parentScope) isKindOfClass:[DVTMacroExpansionScope class]]
parentScope
(macroDefnTable) == nil || [(id)(macroDefnTable) isKindOfClass:[DVTMacroDefinitionTable class]]
macroDefnTable
(defnLevelsToClear) == nil || [(id)(defnLevelsToClear) isKindOfClass:[NSIndexSet class]]
defnLevelsToClear
(condParamValues) == nil || CFGetTypeID((CFDictionaryRef)condParamValues) == CFDictionaryGetTypeID()
condParamValues
(condParamFallbackValues) == nil || CFGetTypeID((CFDictionaryRef)condParamFallbackValues) == CFDictionaryGetTypeID()
condParamFallbackValues
(options & ~(DVTMacroExpansionPreserveUnresolvedReferences | DVTMacroExpansionFailOnUnresolvedReferences )) == 0
!((options & DVTMacroExpansionPreserveUnresolvedReferences) && (options & DVTMacroExpansionFailOnUnresolvedReferences))
XCMacroExpansionScopes created: %i
_parentScope->_defnLevel <= _highestDefnLevel
UNKNOWN
<...>
<%@:%p:level = %u
   :conditions = %@
   :macros = %@
   :parentScope = %@
<%@:%p:level = %u [%@]
  .conditions = %@
  .macros = %@
-[DVTMacroExpansionScope longDescriptionInSortedMacroNameOrder]
scope.definitionLevel == level
-[DVTMacroExpansionScope(MRR) lookupValueForMacroName:hash:withCursor:]
DVTFrameworks/DVTMacroFoundation/DVTMacroExpansionScope_MRR.mm
(_castedResult) != nil
_castedResult
[(id)(_castedResult) isKindOfClass:[NSArray class]]
(possibleValues[i]) != nil
possibleValues[i]
CFGetTypeID((CFStringRef)possibleValues[i]) == CFStringGetTypeID()
-[DVTMacroExpansionScope(MRR) evaluateMacroExpression:asStringForLiteralStringValue:]
(literalValue) != nil
literalValue
CFGetTypeID((CFStringRef)literalValue) == CFStringGetTypeID()
(value) != nil
-[DVTMacroExpansionScope(MRR) evaluateMacroExpression:asStringListForLiteralStringValue:]
CFGetTypeID((CFArrayRef)value) == CFArrayGetTypeID()
<%@:%p: %@, listType=%@>
DVTMacroNamepsace
-[DVTMacroNameRegistry registerMacroName:isListType:]
DVTFrameworks/DVTMacroFoundation/DVTMacroNameRegistry.m
((macroName)) != nil
(macroName)
-[DVTMacroNameRegistry registerMacroName:isListType:]_block_invoke
(oldObject) != nil
oldObject
[(id)(oldObject) isKindOfClass:[DVTMacroNameRegistryRegistration class]]
Ignoring request to register macro named '%@' as listType=%@ due to preexisting registration (listType=%@)
B32@?0@"DVTRegistry"8@"<DVTRegistrable>"16@"<DVTRegistrable>"24
-[DVTMacroNameRegistry macroIsListType:]
(registration) == nil || [(id)(registration) isKindOfClass:[DVTMacroNameRegistryRegistration class]]
registration
id<DVTMacroExpansion>  _Null_unspecified DVTGetParsedValueForMacroNameInRegistry(NSString *__strong _Nonnull, __strong id _Nonnull, DVTMacroNameRegistry *__strong _Nonnull)
[value isKindOfClass:[NSString class]] || [value isKindOfClass:[NSArray class]]
DVTMacroDefinitionCondition
NSCopying
DVTMacroDefinitionConditionParameter
DVTMacroDefinitionConditionSet
NSFastEnumeration
DVTMacroExpansion
NSObject
DVTMacroDefinitionTable
NSMutableCopying
DVTMacroExpansionString
DVTMacroExpansionString_Literal
DVTMacroExpansionString_Substitution
DVTMacroExpansionString_StringSubstitution
DVTMacroExpansionString_Concatenation
DVTMacroExpansionStringList
DVTMacroExpansionStringList_NonLiteral
DVTMacroExpansionStringList_Literal
DVTMacroExpansionBlock
DVTMacroExpansionAdditions
DVTMacroAssignmentInfo
DVTMacroDefinitionAdditions
DVTMacroExpansionIntegerMetric
DVTMacroExpansionStatistics
DVTMacroExpansionOperator
OperatorClassRegistration
DVTMacroExpansionRetrievalOperator
DVTMacroExpansionRetrievalOperatorWithParseError
DVTMacroExpansionReplacementOperator
DVTMacroExpansionReplacementOperatorWithParseError
DVTMacroExpansionRetrievalOperator_quote
DVTMacroExpansionRetrievalOperator_upper
DVTMacroExpansionRetrievalOperator_lower
DVTMacroExpansionRetrievalOperator_identifier
DVTMacroExpansionRetrievalOperator_rfc1034identifier
DVTMacroExpansionRetrievalOperator_c99extidentifier
DVTMacroExpansionRetrievalOperator_dir
DVTMacroExpansionRetrievalOperator_file
DVTMacroExpansionRetrievalOperator_base
DVTMacroExpansionRetrievalOperator_suffix
DVTMacroExpansionRetrievalOperator_standardizepath
DVTMacroExpansionRetrievalOperator_xml
DVTMacroExpansionReplacementOperator_dir
DVTMacroExpansionReplacementOperator_file
DVTMacroExpansionReplacementOperator_base
DVTMacroExpansionReplacementOperator_suffix
DVTMacroExpansionReplacementOperator_relativeto
DVTMacroExpansionReplacementOperator_default
ImplementationDetails
BuiltInOperatorRegistration
DVTMacroExpansionScope
DVTMacroNameRegistryRegistration
DVTRegistrable
DVTMacroNameRegistry
@32@0:8@16@24
@24@0:8^{_NSZone=}16
Q16@0:8
B24@0:8@16
@16@0:8
q24@0:8@16
v16@0:8
@"DVTMacroDefinitionConditionParameter"
@"NSString"
v48@0:8@16Q24@32@40
@24@0:8@16
@48@0:8@16Q24@32@40
@"NSAttributedString"
@32@0:8r^@16Q24
@40@0:8@16^@24^@32
Q40@0:8^{?=Q^@^Q[5Q]}16^@24Q32
@"NSArray"
[0@"DVTMacroDefinitionCondition"]
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@32@0:8@16r^{DVTNestedMacroExpansionState=@I{DVTMacroNameLookupCursor=@Q@@^{DVTMacroValueAssignment}@}@^{DVTNestedMacroExpansionState}}24
@"NSString"32@0:8@"DVTMacroExpansionScope"16r^{DVTNestedMacroExpansionState=@I{DVTMacroNameLookupCursor=@Q@@^{DVTMacroValueAssignment}@}@^{DVTNestedMacroExpansionState}}24
@"NSArray"32@0:8@"DVTMacroExpansionScope"16r^{DVTNestedMacroExpansionState=@I{DVTMacroNameLookupCursor=@Q@@^{DVTMacroValueAssignment}@}@^{DVTNestedMacroExpansionState}}24
@"NSString<DVTMacroExpansion>"16@0:8
v24@0:8@16
@?16@0:8
v24@0:8@?16
v40@0:8@16@24@32
v44@0:8@16@24@32B40
v32@0:8@16@?24
v32@0:8@16[1{__va_list_tag=II^v^v}]24
v32@0:8@16@24
@32@0:8@16Q24
v20@0:8B16
^{DVTMacroValueAssignmentMapTable=IIII^v^v}
@"DVTStackBacktrace"
@"DVTMacroDefinitionTable"
@"NSDictionary"
@"NSSet"
{DVTUnfairLock="__lock"{os_unfair_lock_s="_os_unfair_lock_opaque"I}}
S24@0:8Q16
v40@0:8^S16{_NSRange=QQ}24
@44@0:8@16@24B32^{ArrayBuilder=[62@]^@II}36
@"NSString<DVTMacroExpansion>"
[0@"DVTMacroExpansionOperator"]
@32@0:8@16^{ArrayBuilder=[62@]^@II}24
[0@"NSString<DVTMacroExpansion>"]
@24@0:8Q16
@24@0:8@?16
@24@0:8^@16
@40@0:8@16@24@32
@"<DVTMacroExpansion>"
@"DVTMacroDefinitionConditionSet"
@32@0:8@?16^@24
@40@0:8@16@?24^@32
@32@0:8@16^@24
@40@0:8@16{_NSRange=QQ}24
v24@0:8Q16
{_NSRange=QQ}16@0:8
^Q16@0:8
{_NSRange="location"Q"length"Q}
@"NSCountedSet"
v24@0:8#16
#24@0:8@16
@"NSError"
@72@0:8@16@24Q32@40@48@56Q64
@64@0:8@16@24Q32@40@48Q56
@56@0:8@16@24Q32@40@48
@40@0:8@16@24Q32
@24@0:8q16
@52@0:8@16@24q32@40B48
@48@0:8@16@24q32@40
@40@0:8@16@24q32
@64@0:8@16@24@32@40Q48@56
@48@0:8@16@24@32Q40
q16@0:8
v32@0:8^{DVTStringBuilder=[512S]^SQQ}16Q24
@"DVTMacroExpansionScope"
@36@0:8@16I24^{DVTMacroNameLookupCursor=@Q@@^{DVTMacroValueAssignment}@}28
@"NSArray"16@0:8
@"DVTVersion"16@0:8
@28@0:8@16B24
v28@0:8@16B24
@(#)PROGRAM:DVTMacroFoundation  PROJECT:DVTFrameworks-23200.2
(*359>DFHJM`afo
? @ 
!$!$!&!&!(!(!*!1!3!8!`!
0!0)0A0
fo
T@"NSArray",?,R
.cxx_destruct
_literalStrings
T@"<DVTMacroExpansion>",R,V_value
_parameterNames
T@"DVTMacroDefinitionConditionSet",R,V_conditionSet
aliases
T@"NSAttributedString",R
countForObject:
T@"NSCountedSet",R,V_macroNameLookupCounts
definitionLevel
T@"NSString",?,R
initWithString:
T@"NSString",C
longDescription
T@"NSString",R,C
options
T@"NSString",R,V_label
release
T@?,C
TB,R,GisListType,V_listType
stringByAppendingPathExtension:
TB,V_postsChangeNotifications
uppercaseString
TQ,R,V_numFirstDefinitionRetrievals
version
.cxx_construct
_alwaysPreserve
T#,R
_macroDefnTable
T@"DVTMacroDefinitionConditionParameter",R
_unused
T@"DVTVersion",?,R
containsString:
T@"NSCountedSet",R,V_macroNameFirstDefnRetrievalCounts
dealloc
T@"NSCountedSet",R,V_macroNameLookupCursorCreationCounts
dvt_parseAsMacroExpansionString
T@"NSString",?,R,C
isProxy
T@"NSString",R
lowercaseString
T@"NSString",R,C,V_macroName
registerRetrievalOperatorClass:
T@"NSString",R,V_macroName
removeAllMacros
TB,R
stringByAppendingPathComponent:
TB,R,V_defaultIsListType
stringListByApplyingOperatorToStringList:inMacroExpansionScope:
TQ,R
valueForMacroName:conditionSet:
TQ,R,V_numMacroDefinitionLookups
TQ,R,V_numMacroLookupCursorsCreated
T^Q,R,V_sampleCounts
T{_NSRange=QQ},R,V_valueRange
UTF8String
_allCondParamFallbackValues
_allCondParamValues
_block
_cacheLock
_cachedDictRep
_cachedHash
_cachedMacroNameSet
_combinedHash
_combinedPrecedence
_condParamFallbackValues
_condParamValues
_conditionSet
_conditions
_count
_creationBacktrace
_declaredMutable
_defaultIsListType
_defnLevel
_didSetValueBlock
_displayDesc
_displayName
_dvt_parseAsMacroAssignmentsIntoMacroDefinitionTable:withBlock:returningErrorString:
_elements
_expansionOptions
_hashValue
_highestDefnLevel
_isImmutable
_label
_listType
_lock
_logAtLogLevel:withFormat:
_macroName
_macroNameExpr
_macroNameFirstDefnRetrievalCounts
_macroNameLookupCounts
_macroNameLookupCursorCreationCounts
_mapTable
_name
_nextScopeByDefnLevel
_numElements
_numFirstDefinitionRetrievals
_numMacroDefinitionLookups
_numMacroLookupCursorsCreated
_numOperators
_numSubstrings
_operators
_origString
_originalTable
_parameter
_parentScope
_parseError
_postsChangeNotifications
_precedence
_replExpr
_sampleCounts
_setLiteralValue:forMacroName:conditionSet:wantsCheckForDVTMacroExpansionConformance:
_stringForm
_subscriptRep
_substrings
_value
_valuePattern
_valueRange
_willSetValueBlock
addEntriesFromDictionary:
addObject:
addValue:
allConditionParameterValues
allMacroNames
allObjects
allValues
allocWithZone:
appendAdditionalContentToStringBuilder:indent:
appendDebugDescriptionToStringBuilder:indent:
appendFormat:
appendString:
applyToEmptyResult
array
arrayWithCapacity:
arrayWithObject:
arrayWithObjects:count:
assertInternalConsistency
autorelease
boolForKey:
boolValue
characterAtIndex:
characterSetWithBitmapRepresentation:
class
compare:
componentsJoinedByString:
componentsSeparatedByString:
conditionForParameterNamed:
conditionParameterNamed:
conditionSet
conditionSetByAddingCondition:
conditionSetByRemovingParameterNamed:
conditionSetFromStringRepresentation:getBaseMacroName:error:
conditionSetWithCondition:
conditionSetWithConditions:
conditionSetWithConditions:count:
conditionWithParameterName:valuePattern:
conformsToProtocol:
containsCondition:
copy
copyWithLabel:
copyWithZone:
count
countByEnumeratingWithState:objects:count:
currentLocale
currentStackBacktrace
dataWithBytes:length:
debugDescription
declareMutable
decomposedStringWithCanonicalMapping
defaultConditionParameters
defaultIsListType
defaultStatistics
description
descriptionForAssertionMessage
descriptionWithLocale:indent:
dictionary
dictionaryRepresentation
dictionaryWithCapacity:
dictionaryWithObject:forKey:
dictionaryWithObjects:forKeys:count:
didSetValueBlock
discardCaches
displayDescription
displayName
dvt_arrayByExpandingEntriesWithMacroExpansionScope:
dvt_assertInternalConsistency
dvt_beginActivityWithOptions:reason:
dvt_broadcast:userInfo:
dvt_debugDescription
dvt_dictionaryByExpandingKeysAndValuesWithMacroExpansionScope:
dvt_dictionaryByExpandingValuesWithMacroExpansionScope:
dvt_dictionaryWithKeysAndValues:
dvt_evaluateAsStringInScope:withState:
dvt_evaluateAsStringListInScope:withState:
dvt_isLegalCIdentifier
dvt_isLiteral
dvt_isNonEmpty
dvt_literalValueOfCommonString
dvt_parseAsMacroAssignmentParsingValueWithBlock:returningErrorString:
dvt_parseAsMacroAssignmentUsingMacroNameRegistry:returningErrorString:
dvt_parseAsMacroAssignmentsUsingMacroNameRegistry:returningErrorString:
dvt_parseAsMacroAssignmentsWithBlock:returningErrorString:
dvt_parseAsMacroExpansionStringList
dvt_parseAsMacroExpansionStringListReturningError:
dvt_parseAsMacroExpansionStringReturningError:
dvt_sharedCopy
dvt_stringByConcatenatingAsCommandLineArguments
dvt_stringByEscapingForXML
dvt_stringByRemovingPrefix:
dvt_stringByRemovingSuffix:
dvt_stringForm
dvt_stringWithPotentiallyMalformedUTF8Bytes:length:
empty
enumerateKeysAndObjectsUsingBlock:
enumerateMacroNamesAndValuesUsingBlock:
enumerateValuesForMacroName:usingBlock:
errorWithDomain:code:userInfo:
evaluateForParameterValues:
evaluateInScope:
evaluateMacroExpression:asStringForLiteralStringValue:
evaluateMacroExpression:asStringListForLiteralStringValue:
evaluatedBooleanValueForMacroExpression:
evaluatedBooleanValueForMacroNamed:
evaluatedStringListValueForMacroExpression:
evaluatedStringListValueForMacroNamed:
evaluatedStringValueForMacroExpression:
evaluatedStringValueForMacroNamed:
evaluatedStringValueForMacroNamed:returningFallbackConditionsUsed:
firstIndex
firstObject
getCharacters:
getCharacters:range:
getLineStart:end:contentsEnd:forRange:
getObjects:range:
hasParseError
hasSuffix:
hash
identifier
indexGreaterThanIndex:
indexSetWithIndex:
init
initWithArray:
initWithBlock:
initWithBytes:length:encoding:
initWithCapacity:
initWithDebugName:
initWithDebugName:defaultIsListType:
initWithFormat:arguments:
initWithKey:ascending:
initWithLabel:
initWithLabel:creationBacktrace:
initWithLabel:valueRange:
initWithLiteralString:
initWithMacroName:isListType:
initWithMacroName:value:conditionSet:
initWithName:precedence:displayName:displayDescription:
initWithObjects:count:
initWithOriginalString:
initWithOriginalString:macroNameExpression:preserveOriginalStringIfUnresolved:operators:
initWithOriginalString:substrings:
initWithParameterName:valuePattern:
initWithParentScope:macroDefinitionTable:definitionLevel:definitionLevelsToClear:conditionParameterValues:conditionParameterFallbackValues:expansionOptions:
initWithParentScope:macroDefinitionTable:definitionLevel:definitionLevelsToClear:conditionParameterValues:expansionOptions:
initWithParseError:
initWithReplacementExpression:
initWithReplacementExpression:parseError:
initWithStringForm:elements:
initWithStringForm:literalStrings:
initialize
integerValue
invertedSet
isAbsolutePath
isEqual:
isEqualToString:
isImmutable
isKindOfClass:
isListType
isMemberOfClass:
isSubclassOfClass:
isSubsetOfSet:
keysOfEntriesPassingTest:
label
lastPathComponent
length
listType
localizedDescription
logAspectWithName:
logLevel
longDescriptionInMacroLookupOrder
longDescriptionInScopeAncestryOrder
longDescriptionInSortedMacroNameOrder
lookupValueForMacroName:hash:withCursor:
macroDefinitionTable
macroIsListType:
macroName
macroNameFirstDefnRetrievalCounts
macroNameLookupCounts
macroNameLookupCursorCreationCounts
macroNameRegistry
makeImmutable
mutableCopy
mutableCopyWithZone:
name
newWithLabel:
newWithLiteralString:
newWithMacroName:value:conditionSet:
newWithOriginalString:macroNameExpression:preserveOriginalStringIfUnresolved:operators:
newWithOriginalString:substrings:
newWithParentScope:definitionLevelsToClear:macroDefinitionTables:conditionParameterValues:options:knownStringMapping:
newWithParentScope:macroDefinitionTable:definitionLevel:
newWithParentScope:macroDefinitionTable:definitionLevel:definitionLevelsToClear:conditionParameterValues:
newWithParentScope:macroDefinitionTable:definitionLevel:definitionLevelsToClear:conditionParameterValues:conditionParameterFallbackValues:expansionOptions:
newWithParentScope:macroDefinitionTable:definitionLevel:definitionLevelsToClear:conditionParameterValues:expansionOptions:
newWithParentScope:macroDefinitionTables:
newWithParentScope:macroDefinitionTables:conditionParameterValues:
newWithParentScope:macroDefinitionTables:conditionParameterValues:options:
newWithParentScope:macros:definitionLevel:
newWithParentScope:macros:definitionLevel:conditionParameterValues:
newWithParentScope:macros:definitionLevel:conditionParameterValues:preserveUnresolvedReferences:
newWithStringForm:elements:
newWithStringForm:literalStrings:
nextScopeForOwnDefinitionLevel
numFirstDefinitionRetrievals
numMacroDefinitionLookups
numMacroLookupCursorsCreated
numUniqueMacroNamesLookedUp
numberOfDefinitions
numberOfMacros
numberWithUnsignedInteger:
objectAtIndex:
objectAtIndexedSubscript:
objectForIdentifier:
objectForKey:
objectForKeyedSubscript:
operatorName
parameter
parameterNames
parentScope
parseAndSetValue:forMacroName:conditionSet:
parseError
pathExtension
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
postsChangeNotifications
precedence
preserveUnresolvedReferences
processInfo
rangeOfCharacterFromSet:
rangeOfCharacterFromSet:options:
rangeOfCharacterFromSet:options:range:
rangeOfString:
rangeOfString:options:range:
recordLookupCursorCreationForMacroName:
recordLookupEventForMacroName:
recordRetrievalOfFirstDefinitionForMacroName:
registerBuiltInOperators
registerConditionParameterNamed:precedence:displayName:displayDescription:
registerMacroName:isListType:
registerObject:collisionHandler:
registerReplacementOperatorClass:
registeredConditionParameters
registeredReplacementOperatorClasses
registeredRetrievalOperatorClasses
removeAllConditionSetsForMacroName:
removeMacroName:
removeMacroNames:
removeMacroNames:arguments:
replacementExpression
replacementObjectForCoder:
replacementOperatorClassForOperatorNamed:
replacementOperatorRegistry
respondsToSelector:
retain
retainCount
retrievalOperatorClassForOperatorNamed:
retrievalOperatorRegistry
sampleCounts
scopeByRemovingAllTablesAtDefinitionLevel:
self
setByAddingObjectsFromSet:
setDidSetValueBlock:
setLabel:
setLiteralValue:forMacroName:conditionSet:
setMacroNamesAndValuesFromDictionary:
setMacroNamesAndValuesFromMacroDefinitionTable:
setObject:forKey:
setObject:forKeyedSubscript:
setPostsChangeNotifications:
setStringValue:forMacroName:conditionSet:
setValue:forMacroName:conditionSet:
setWillSetValueBlock:
sortedArrayUsingComparator:
sortedArrayUsingDescriptors:
sortedArrayUsingSelector:
sortedLongDescription
standardUserDefaults
string
stringByAppendingString:
stringByApplyingOperatorToString:inMacroExpansionScope:
stringByDeletingLastPathComponent
stringByDeletingPathExtension
stringByReplacingCharactersInRange:withString:
stringByStandardizingPath
stringByTrimmingCharactersInSet:
stringForDefinitionLevel:
stringRepresentation
stringWithCString:encoding:
stringWithCharacters:length:
stringWithFormat:
stringWithUTF8String:
subscriptRepresentation
substringFromIndex:
substringWithRange:
superclass
unionSet:
unsignedIntegerValue
value
valueForConditionParameter:
valueForKey:
valuePattern
valueRange
whitespaceCharacterSet
willSetValueBlock
zone
-[DVTMacroDefinitionCondition initWithParameterName:valuePattern:]
DVTFrameworks/DVTMacroFoundation/DVTMacroDefinitionCondition.mm
(_parameter) == nil || [(id)(_parameter) isKindOfClass:[DVTMacroDefinitionConditionParameter class]]
%@ should be an instance inheriting from %@, but it is %@
_parameter
(_valuePattern) != nil
%@ should be a string, but it is nil
_valuePattern
CFGetTypeID((CFStringRef)_valuePattern) == CFStringGetTypeID()
%@ should be a string, but it is %@
-[DVTMacroDefinitionCondition evaluateForParameterValues:]
(values) != nil
%@ should be a dictionary, but it is nil
values
CFGetTypeID((CFDictionaryRef)values) == CFDictionaryGetTypeID()
%@ should be a dictionary, but it is %@
value
CFGetTypeID((CFStringRef)value) == CFStringGetTypeID()
-[DVTMacroDefinitionCondition evaluateInScope:]
(scope) != nil
%@ should be an instance inheriting from %@, but it is nil
scope
[(id)(scope) isKindOfClass:[DVTMacroExpansionScope class]]
-[DVTMacroDefinitionCondition compare:]
(otherCondition) != nil
otherCondition
[(id)(otherCondition) isKindOfClass:[DVTMacroDefinitionCondition class]]
[%@=%@]
v8@?0
config
Configuration
Name of the configuration
Canonical name of SDK being built against
variant
Variant
Variant (normal, debug, profile, etc)
arch
Architecture
Architecture (i386, x86_64, armv6, etc)
dialect
Dialect
Language dialect
+[DVTMacroDefinitionConditionParameter conditionParameterNamed:]
DVTFrameworks/DVTMacroFoundation/DVTMacroDefinitionConditionParameter.mm
(name) != nil
%@ should be a non-empty string, but it is nil
name
CFGetTypeID((CFStringRef)name) == CFStringGetTypeID()
%@ should be a non-empty string, but it is %@
![(name) isEqualToString:@""]
%@ should be a non-empty string, but it's an empty string
(param) == nil || [(id)(param) isKindOfClass:[DVTMacroDefinitionConditionParameter class]]
param
B32@?0@8@16^B24
-[DVTMacroDefinitionConditionParameter compare:]
(object) != nil
object
[(id)(object) isKindOfClass:[DVTMacroDefinitionConditionParameter class]]
<%@:%p:%@>
-[DVTMacroDefinitionConditionSet initWithObjects:count:]
DVTFrameworks/DVTMacroFoundation/DVTMacroDefinitionConditionSet.mm
(uintptr_t)(void *)&_conditions[count] <= (uintptr_t)(__bridge void *)self + malloc_size((__bridge void *)self)
objects != __null || count == 0
(objects[i]) != nil
objects[i]
[(id)(objects[i]) isKindOfClass:[DVTMacroDefinitionCondition class]]
i24@?0r^v8r^v16
+[DVTMacroDefinitionConditionSet conditionSetWithConditions:]
(conditions) != nil
conditions
[(id)(conditions) isKindOfClass:[NSSet class]]
idx == numConditions
+[DVTMacroDefinitionConditionSet conditionSetWithCondition:]
(condition) != nil
condition
[(id)(condition) isKindOfClass:[DVTMacroDefinitionCondition class]]
macro string representation is an empty string, with no name or condition parameters
+[DVTMacroDefinitionConditionSet conditionSetFromStringRepresentation:getBaseMacroName:error:]
macro string representation '%@' isn't well formed: couldn't resolve the parameter name
macro string representation '%@' isn't well formed: parameter name is empty
macro string representation '%@' isn't well formed: no ']' found after '='
macro string representation '%@' isn't well formed: junk found after ']'
conditions.count >= 1
(conditionSet) == nil || [(id)(conditionSet) isKindOfClass:[DVTMacroDefinitionConditionSet class]]
conditionSet
-[DVTMacroDefinitionConditionSet conditionSetByAddingCondition:]
-[DVTMacroDefinitionConditionSet conditionSetByRemovingParameterNamed:]
(paramName) != nil
paramName
CFGetTypeID((CFStringRef)paramName) == CFStringGetTypeID()
-[DVTMacroDefinitionConditionSet evaluateInScope:]
-[DVTMacroDefinitionConditionSet subscriptRepresentation]
[_conditions[i-1] compare:_conditions[i]] != NSOrderedAscending
i-1: %@, i: %@
-[DVTMacroDefinitionConditionSet compare:]
[(id)(object) isKindOfClass:[DVTMacroDefinitionConditionSet class]]
DVTMacroDefinitionTable_ValueDidChangeBroadcast
DVTMacroDefinitionTableStatistics
-[DVTMacroDefinitionTable setLabel:]
DVTFrameworks/DVTMacroFoundation/DVTMacroDefinitionTable.mm
_isImmutable == __objc_no
-[DVTMacroDefinitionTable setWillSetValueBlock:]
-[DVTMacroDefinitionTable setDidSetValueBlock:]
v24@?0@"NSString"8^B16
-[DVTMacroDefinitionTable setValue:forMacroName:conditionSet:]
(macroName) != nil
macroName
CFGetTypeID((CFStringRef)macroName) == CFStringGetTypeID()
![(macroName) isEqualToString:@""]
-[DVTMacroDefinitionTable _setLiteralValue:forMacroName:conditionSet:wantsCheckForDVTMacroExpansionConformance:]
value must be nil, string or array, but is %@
-[DVTMacroDefinitionTable parseAndSetValue:forMacroName:conditionSet:]
[macroNameRegistry macroIsListType:macroName]
-[DVTMacroDefinitionTable valueForMacroName:conditionSet:]
v40@?0@"NSString"8@"DVTMacroDefinitionConditionSet"16@"<DVTMacroExpansion>"24^B32
v32@?0@"DVTMacroDefinitionConditionSet"8@"<DVTMacroExpansion>"16^B24
-[DVTMacroDefinitionTable setMacroNamesAndValuesFromDictionary:]
(dict) == nil || CFGetTypeID((CFDictionaryRef)dict) == CFDictionaryGetTypeID()
dict
v32@?0@8@16^B24
-[DVTMacroDefinitionTable setMacroNamesAndValuesFromMacroDefinitionTable:]
(table) == nil || [(id)(table) isKindOfClass:[DVTMacroDefinitionTable class]]
table
-[DVTMacroDefinitionTable objectForKeyedSubscript:]
-[DVTMacroDefinitionTable setObject:forKeyedSubscript:]
-[DVTMacroDefinitionTable assertInternalConsistency]_block_invoke
-[DVTMacroDefinitionTable assertInternalConsistency]_block_invoke_2
-[DVTMacroDefinitionTable assertInternalConsistency]
macroNameCount == _mapTable->_numMacroNames
definitionCount == _mapTable->_numValueAssgns
 // 
immutable
mutable
-[DVTMacroDefinitionTable descriptionWithLocale:indent:]_block_invoke
DVTMacroValueAssignmentMapTable::DVTMacroValueAssignmentMapTable(unsigned int)
(unsigned)malloc_size(_hashesAndBuckets) >= _numBuckets * sizeof(uint32_t) + _numBuckets * sizeof(DVTMacroValueAssignmentBucket)
DVTMacroDefinitionTables created: %i
DVTMacroDefinitionTable backtrace statistics are enabled and must run at process exit
Top DVTMacroDefinitionTable creation and copy backtraces:
CreatedCount
CopiedCount
Backtrace
CREATE COUNT: %lu, COPY COUNT: %lu, RATIO: %.2f, BACKTRACE HASH:
TOTAL CREATES < %lu: %lu, TOTAL COPIES < %lu: %lu
BACKTRACE WITH HASH: %lu
*******
void DVTMacroValueAssignmentMapTable::set(NSString *__strong, DVTMacroDefinitionConditionSet *__strong, __strong id<DVTMacroExpansion>)
nameHash != kEmptyBucketHashMarker && nameHash != kTombstoneBucketHashMarker
const id<DVTMacroExpansion> DVTMacroValueAssignmentMapTable::get(NSString *__strong, DVTMacroDefinitionConditionSet *__strong) const
void DVTSetMacroNameAndValue(DVTMacroDefinitionTable *__strong, NSString *__strong, __strong id, BOOL)
(self) != nil
self
[(id)(self) isKindOfClass:[DVTMacroDefinitionTable class]]
USE_XCBUILD_FOR_BUILD_SETTINGS_EVALUATION
DVTMacroExpansionErrorDomain
+[DVTMacroExpansionString allocWithZone:]
DVTFrameworks/DVTMacroFoundation/DVTMacroExpansion.mm
%@ is an abstract class and cannot be instantiated
-[DVTMacroExpansionString initWithOriginalString:]
(origString) != nil
origString
CFGetTypeID((CFStringRef)origString) == CFStringGetTypeID()
-[DVTMacroExpansionString dvt_isLiteral]
method %@ is a subclass responsibility of %@
-[DVTMacroExpansionString dvt_evaluateAsStringInScope:withState:]
-[DVTMacroExpansionString dvt_evaluateAsStringListInScope:withState:]
-[DVTMacroExpansionString dvt_debugDescription]
-[DVTMacroExpansionString_Literal initWithLiteralString:]
(string) != nil
string
CFGetTypeID((CFStringRef)string) == CFStringGetTypeID()
-[DVTMacroExpansionString_Literal hash]
_hashValue == [_origString hash]
-[DVTMacroExpansionString_Literal dvt_assertInternalConsistency]
-[DVTMacroExpansionString_Substitution initWithOriginalString:macroNameExpression:preserveOriginalStringIfUnresolved:operators:]
(uintptr_t)(void *)&_operators[_numOperators] <= (uintptr_t)(__bridge void *)self + malloc_size((__bridge void *)self)
(_operators[i]) != nil
_operators[i]
[(id)(_operators[i]) isKindOfClass:[DVTMacroExpansionOperator class]]
-[DVTMacroExpansionString_Substitution dvt_evaluateAsStringInScope:withState:]
(_origString) != nil
_origString
CFGetTypeID((CFStringRef)_origString) == CFStringGetTypeID()
inherited
(NSString *)state->literalValue
CFGetTypeID((CFStringRef)(NSString *)state->literalValue) == CFStringGetTypeID()
literalStringValue
CFGetTypeID((CFStringRef)literalStringValue) == CFStringGetTypeID()
(stringValue) != nil
stringValue
CFGetTypeID((CFStringRef)stringValue) == CFStringGetTypeID()
-[DVTMacroExpansionString_Substitution dvt_evaluateAsStringListInScope:withState:]
(stringListValue) != nil
%@ should be a array, but it is nil
stringListValue
CFGetTypeID((CFArrayRef)stringListValue) == CFArrayGetTypeID()
%@ should be an array, but it is %@
-[DVTMacroExpansionString_Substitution dvt_assertInternalConsistency]
-[DVTMacroExpansionString_Substitution dvt_debugDescription]
-[DVTMacroExpansionString_StringSubstitution dvt_debugDescription]
-[DVTMacroExpansionString_Concatenation initWithOriginalString:substrings:]
((substrings)) != nil
%@ should not be nil.
(substrings)
(uintptr_t)(void *)&_substrings[_numSubstrings] <= (uintptr_t)(__bridge void *)self + malloc_size((__bridge void *)self)
+[DVTMacroExpansionString_Concatenation newWithOriginalString:substrings:]
-[DVTMacroExpansionString_Concatenation dvt_assertInternalConsistency]
+[DVTMacroExpansionStringList allocWithZone:]
-[DVTMacroExpansionStringList dvt_isLiteral]
-[DVTMacroExpansionStringList dvt_stringForm]
-[DVTMacroExpansionStringList hash]
-[DVTMacroExpansionStringList isEqual:]
-[DVTMacroExpansionStringList count]
-[DVTMacroExpansionStringList objectAtIndex:]
-[DVTMacroExpansionStringList countByEnumeratingWithState:objects:count:]
-[DVTMacroExpansionStringList description]
-[DVTMacroExpansionStringList dvt_evaluateAsStringInScope:withState:]
-[DVTMacroExpansionStringList dvt_evaluateAsStringListInScope:withState:]
-[DVTMacroExpansionStringList dvt_debugDescription]
-[DVTMacroExpansionStringList_NonLiteral initWithStringForm:elements:]
((elements)) != nil
(elements)
(uintptr_t)(void *)&_elements[_numElements] <= (uintptr_t)(__bridge void *)self + malloc_size((__bridge void *)self)
+[DVTMacroExpansionStringList_NonLiteral newWithStringForm:elements:]
-[DVTMacroExpansionStringList_NonLiteral objectAtIndex:]
idx < _numElements
-[DVTMacroExpansionStringList_NonLiteral countByEnumeratingWithState:objects:count:]
idx <= _numElements
-[DVTMacroExpansionStringList_NonLiteral dvt_assertInternalConsistency]
-[DVTMacroExpansionStringList_Literal initWithStringForm:literalStrings:]
(literalStrings) != nil
literalStrings
CFGetTypeID((CFArrayRef)literalStrings) == CFArrayGetTypeID()
-[DVTMacroExpansionStringList_Literal dvt_assertInternalConsistency]
(_literalStrings) != nil
_literalStrings
CFGetTypeID((CFArrayRef)_literalStrings) == CFArrayGetTypeID()
-[DVTMacroExpansionStringList_Literal dvt_debugDescription]
(ls) != nil
CFGetTypeID((CFStringRef)ls) == CFStringGetTypeID()
-[DVTMacroExpansionBlock initWithBlock:]
((block)) != nil
(block)
-[DVTMacroExpansionBlock dvt_assertInternalConsistency]
((_block)) != nil
(_block)
DVTMacroExpressionByParsingString('%@')
$(inherited)
$(inherited) 
NSString<DVTMacroExpansion> *DVTMacroExpressionByParsingString(NSString *__strong _Null_unspecified)
*endPtr == '\0'
DVTMacroExpressionByParsingStringAsList('%@')
NSArray<DVTMacroExpansion> *DVTMacroExpressionByParsingStringAsList(NSString *__strong _Nullable)
DVTMacroExpressionByParsingStringArrayAsList([%@])
NSArray<DVTMacroExpansion> *DVTMacroExpressionByParsingStringArrayAsList(NSArray<NSString *> *__strong _Null_unspecified)
-[DVTMacroAssignmentInfo initWithMacroName:value:conditionSet:]
<%@:%p:%@:%@:%@>
String '%@' could not be parsed: '%@' is not a legal macro name
String '%@' could not be parsed: %@
String '%@' could not be parsed due to an unknown error
String '%@' could not be parsed because there is no macro name on the left side of the =
String '%@' isn't a valid build setting assignment
DVTLogCompatibilityWarningsForXCBuildTransition
${inherited}
potential xcbuild compatiblity issue: '%@' %@: new='%@', previous='%@'
@"DVTMacroAssignmentInfo"40@?0@"NSString"8@"NSString"16@"DVTMacroDefinitionConditionSet"24^@32
  count  : %4lu
  minimum: %4lu
  maximum: %4lu
  average: %4lu
  median : %4lu
CollectDVTMacroExpansionStatistics
%lu unique macro names looked up
%lu lookup operations in total
q24@?0@8@16
%5lu  %@
%lu lookup cursors created in total
%lu retrievals of first definitions in total
id _handleMissingMacroValue(DVTMacroExpansionScope *__strong, NSString *__strong, __strong id, __strong id, BOOL, BOOL)
(expandedMacroName) != nil
expandedMacroName
CFGetTypeID((CFStringRef)expandedMacroName) == CFStringGetTypeID()
origValue
Failed to expand '%@'
>> Expanded macro name: %@
>> Expansion scope: %@
DVTMacroExpansionParsing
NSString<DVTMacroExpansion> *ParseMacroExpansionString(const char *, const char **, char, char, BOOL, NSString *__strong)
str != __null
endPtr != __null
(literalStr) != nil
literalStr
CFGetTypeID((CFStringRef)literalStr) == CFStringGetTypeID()
![(literalStr) isEqualToString:@""]
*ptr == 0 || *ptr == '$' || *ptr == stopCh1 || *ptr == stopCh2
*ptr == 0 || *ptr == stopCh1 || *ptr == stopCh2
*endPtr != __null
**endPtr == 0 || **endPtr == '$' || **endPtr == stopCh1 || **endPtr == stopCh2
NSString *ParseLiteralStringFragment(const char *, const char **, char, char)
ptr > str
NSString<DVTMacroExpansion> *ParseSubstitutionExpressionStringFragment(const char *, const char **, BOOL)
*str == '$'
*ptr == 0 || *ptr == '$' || *ptr == ':' || *ptr == macroExpnCloseDelim
*ptr == 0 || *ptr == ':' || *ptr == macroExpnCloseDelim
operatorClass == nullptr || [operatorClass isSubclassOfClass:[DVTMacroExpansionReplacementOperator class]]
Unknown operator '%@'
(op) == nil || [(id)(op) isKindOfClass:[DVTMacroExpansionReplacementOperator class]]
operatorClass == nullptr || [operatorClass isSubclassOfClass:[DVTMacroExpansionRetrievalOperator class]]
(op) == nil || [(id)(op) isKindOfClass:[DVTMacroExpansionRetrievalOperator class]]
(op) != nil
[(id)(op) isKindOfClass:[DVTMacroExpansionOperator class]]
*ptr == 0 || *ptr == macroExpnCloseDelim
ptr >= str + 2
*ptr == 0 || *(ptr-1) == macroExpnCloseDelim
ptr > macroNamePtr
SourceString
NSArray<DVTMacroExpansion> *ParseQuotedString(const char *, const char **, NSString *__strong)
NSString<DVTMacroExpansion> *ParseQuotedStringElement(const char *, const char **)
*iptr == '\0' || (currentQuotes == NoQuotes && isspace(*iptr)) || *iptr == '$'
*iptr == '\0' || (currentQuotes == NoQuotes && isspace(*iptr))
+[DVTMacroExpansionOperator operatorName]
DVTFrameworks/DVTMacroFoundation/DVTMacroExpansionOperator.mm
-[DVTMacroExpansionOperator stringByApplyingOperatorToString:inMacroExpansionScope:]
-[DVTMacroExpansionOperator stringListByApplyingOperatorToStringList:inMacroExpansionScope:]
+[DVTMacroExpansionOperator(OperatorClassRegistration) registerRetrievalOperatorClass:]
cls != nullptr && [cls isSubclassOfClass:[DVTMacroExpansionRetrievalOperator self]]
+[DVTMacroExpansionOperator(OperatorClassRegistration) retrievalOperatorClassForOperatorNamed:]
(operatorName) != nil
operatorName
CFGetTypeID((CFStringRef)operatorName) == CFStringGetTypeID()
+[DVTMacroExpansionOperator(OperatorClassRegistration) registerReplacementOperatorClass:]
cls != nullptr && [cls isSubclassOfClass:[DVTMacroExpansionReplacementOperator self]]
+[DVTMacroExpansionOperator(OperatorClassRegistration) replacementOperatorClassForOperatorNamed:]
-[DVTMacroExpansionRetrievalOperator stringByApplyingOperatorToString:inMacroExpansionScope:]
-[DVTMacroExpansionRetrievalOperator stringListByApplyingOperatorToStringList:inMacroExpansionScope:]
(stringList) != nil
stringList
CFGetTypeID((CFArrayRef)stringList) == CFArrayGetTypeID()
<ERROR>
-[DVTMacroExpansionReplacementOperator initWithReplacementExpression:]
(expr) != nil
expr
CFGetTypeID((CFStringRef)expr) == CFStringGetTypeID()
-[DVTMacroExpansionReplacementOperator stringByApplyingOperatorToString:inMacroExpansionScope:]
-[DVTMacroExpansionReplacementOperator stringListByApplyingOperatorToStringList:inMacroExpansionScope:]
quote
upper
lower
identifier
rfc1034identifier
c99extidentifier
file
base
suffix
standardizepath
relativeto
default
NSString *StringByEscapingWhitespace(NSString *__strong)
outLength >= length
outLength <= maxOutLength
NSString *StringByManglingToLegalCIdentifier(NSString *__strong)
NSString *StringByManglingToLegalRFC1034Identifier(NSString *__strong)
NSString *StringByRetrievingPathDirectory(NSString *__strong)
NSString *StringByRetrievingPathFileName(NSString *__strong)
NSString *StringByRetrievingPathBaseName(NSString *__strong)
NSString *StringByRetrievingPathSuffix(NSString *__strong)
NSString *StringByReplacingPathDirectory(NSString *__strong, NSString *__strong)
(replacement) != nil
replacement
CFGetTypeID((CFStringRef)replacement) == CFStringGetTypeID()
NSString *StringByReplacingPathFileName(NSString *__strong, NSString *__strong)
NSString *StringByReplacingPathBaseName(NSString *__strong, NSString *__strong)
NSString *StringByReplacingPathSuffix(NSString *__strong, NSString *__strong)
NSString *StringByReplacingPathRelativeTo(NSString *__strong, NSString *__strong)
NSString *StringByReplacingEmptyStringWithDefaultValue(NSString *__strong, NSString *__strong)
-[DVTMacroExpansionScope initWithParentScope:macroDefinitionTable:definitionLevel:definitionLevelsToClear:conditionParameterValues:conditionParameterFallbackValues:expansionOptions:]
DVTFrameworks/DVTMacroFoundation/DVTMacroExpansionScope.mm
(parentScope) == nil || [(id)(parentScope) isKindOfClass:[DVTMacroExpansionScope class]]
parentScope
(macroDefnTable) == nil || [(id)(macroDefnTable) isKindOfClass:[DVTMacroDefinitionTable class]]
macroDefnTable
(defnLevelsToClear) == nil || [(id)(defnLevelsToClear) isKindOfClass:[NSIndexSet class]]
defnLevelsToClear
(condParamValues) == nil || CFGetTypeID((CFDictionaryRef)condParamValues) == CFDictionaryGetTypeID()
condParamValues
(condParamFallbackValues) == nil || CFGetTypeID((CFDictionaryRef)condParamFallbackValues) == CFDictionaryGetTypeID()
condParamFallbackValues
(options & ~(DVTMacroExpansionPreserveUnresolvedReferences | DVTMacroExpansionFailOnUnresolvedReferences )) == 0
!((options & DVTMacroExpansionPreserveUnresolvedReferences) && (options & DVTMacroExpansionFailOnUnresolvedReferences))
XCMacroExpansionScopes created: %i
_parentScope->_defnLevel <= _highestDefnLevel
UNKNOWN
<...>
<%@:%p:level = %u
   :conditions = %@
   :macros = %@
   :parentScope = %@
<%@:%p:level = %u [%@]
  .conditions = %@
  .macros = %@
-[DVTMacroExpansionScope longDescriptionInSortedMacroNameOrder]
scope.definitionLevel == level
-[DVTMacroExpansionScope(MRR) lookupValueForMacroName:hash:withCursor:]
DVTFrameworks/DVTMacroFoundation/DVTMacroExpansionScope_MRR.mm
(_castedResult) != nil
_castedResult
[(id)(_castedResult) isKindOfClass:[NSArray class]]
(possibleValues[i]) != nil
possibleValues[i]
CFGetTypeID((CFStringRef)possibleValues[i]) == CFStringGetTypeID()
-[DVTMacroExpansionScope(MRR) evaluateMacroExpression:asStringForLiteralStringValue:]
(literalValue) != nil
literalValue
CFGetTypeID((CFStringRef)literalValue) == CFStringGetTypeID()
(value) != nil
-[DVTMacroExpansionScope(MRR) evaluateMacroExpression:asStringListForLiteralStringValue:]
CFGetTypeID((CFArrayRef)value) == CFArrayGetTypeID()
<%@:%p: %@, listType=%@>
DVTMacroNamepsace
-[DVTMacroNameRegistry registerMacroName:isListType:]
DVTFrameworks/DVTMacroFoundation/DVTMacroNameRegistry.m
((macroName)) != nil
(macroName)
-[DVTMacroNameRegistry registerMacroName:isListType:]_block_invoke
(oldObject) != nil
oldObject
[(id)(oldObject) isKindOfClass:[DVTMacroNameRegistryRegistration class]]
Ignoring request to register macro named '%@' as listType=%@ due to preexisting registration (listType=%@)
B32@?0@"DVTRegistry"8@"<DVTRegistrable>"16@"<DVTRegistrable>"24
-[DVTMacroNameRegistry macroIsListType:]
(registration) == nil || [(id)(registration) isKindOfClass:[DVTMacroNameRegistryRegistration class]]
registration
id<DVTMacroExpansion>  _Null_unspecified DVTGetParsedValueForMacroNameInRegistry(NSString *__strong _Nonnull, __strong id _Nonnull, DVTMacroNameRegistry *__strong _Nonnull)
[value isKindOfClass:[NSString class]] || [value isKindOfClass:[NSArray class]]
DVTMacroDefinitionCondition
NSCopying
DVTMacroDefinitionConditionParameter
DVTMacroDefinitionConditionSet
NSFastEnumeration
DVTMacroExpansion
NSObject
DVTMacroDefinitionTable
NSMutableCopying
DVTMacroExpansionString
DVTMacroExpansionString_Literal
DVTMacroExpansionString_Substitution
DVTMacroExpansionString_StringSubstitution
DVTMacroExpansionString_Concatenation
DVTMacroExpansionStringList
DVTMacroExpansionStringList_NonLiteral
DVTMacroExpansionStringList_Literal
DVTMacroExpansionBlock
DVTMacroExpansionAdditions
DVTMacroAssignmentInfo
DVTMacroDefinitionAdditions
DVTMacroExpansionIntegerMetric
DVTMacroExpansionStatistics
DVTMacroExpansionOperator
OperatorClassRegistration
DVTMacroExpansionRetrievalOperator
DVTMacroExpansionRetrievalOperatorWithParseError
DVTMacroExpansionReplacementOperator
DVTMacroExpansionReplacementOperatorWithParseError
DVTMacroExpansionRetrievalOperator_quote
DVTMacroExpansionRetrievalOperator_upper
DVTMacroExpansionRetrievalOperator_lower
DVTMacroExpansionRetrievalOperator_identifier
DVTMacroExpansionRetrievalOperator_rfc1034identifier
DVTMacroExpansionRetrievalOperator_c99extidentifier
DVTMacroExpansionRetrievalOperator_dir
DVTMacroExpansionRetrievalOperator_file
DVTMacroExpansionRetrievalOperator_base
DVTMacroExpansionRetrievalOperator_suffix
DVTMacroExpansionRetrievalOperator_standardizepath
DVTMacroExpansionRetrievalOperator_xml
DVTMacroExpansionReplacementOperator_dir
DVTMacroExpansionReplacementOperator_file
DVTMacroExpansionReplacementOperator_base
DVTMacroExpansionReplacementOperator_suffix
DVTMacroExpansionReplacementOperator_relativeto
DVTMacroExpansionReplacementOperator_default
ImplementationDetails
BuiltInOperatorRegistration
DVTMacroExpansionScope
DVTMacroNameRegistryRegistration
DVTRegistrable
DVTMacroNameRegistry
@32@0:8@16@24
@24@0:8^{_NSZone=}16
Q16@0:8
B24@0:8@16
@16@0:8
q24@0:8@16
v16@0:8
@"DVTMacroDefinitionConditionParameter"
@"NSString"
v48@0:8@16Q24@32@40
@24@0:8@16
@48@0:8@16Q24@32@40
@"NSAttributedString"
@32@0:8r^@16Q24
@40@0:8@16^@24^@32
Q40@0:8^{?=Q^@^Q[5Q]}16^@24Q32
@"NSArray"
[0@"DVTMacroDefinitionCondition"]
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@32@0:8@16r^{DVTNestedMacroExpansionState=@I{DVTMacroNameLookupCursor=@Q@@^{DVTMacroValueAssignment}@}@^{DVTNestedMacroExpansionState}}24
@"NSString"32@0:8@"DVTMacroExpansionScope"16r^{DVTNestedMacroExpansionState=@I{DVTMacroNameLookupCursor=@Q@@^{DVTMacroValueAssignment}@}@^{DVTNestedMacroExpansionState}}24
@"NSArray"32@0:8@"DVTMacroExpansionScope"16r^{DVTNestedMacroExpansionState=@I{DVTMacroNameLookupCursor=@Q@@^{DVTMacroValueAssignment}@}@^{DVTNestedMacroExpansionState}}24
@"NSString<DVTMacroExpansion>"16@0:8
v24@0:8@16
@?16@0:8
v24@0:8@?16
v40@0:8@16@24@32
v44@0:8@16@24@32B40
v32@0:8@16@?24
v32@0:8@16*24
v32@0:8@16@24
@32@0:8@16Q24
v20@0:8B16
^{DVTMacroValueAssignmentMapTable=IIII^v^v}
@"DVTStackBacktrace"
@"DVTMacroDefinitionTable"
@"NSDictionary"
@"NSSet"
{DVTUnfairLock="__lock"{os_unfair_lock_s="_os_unfair_lock_opaque"I}}
S24@0:8Q16
v40@0:8^S16{_NSRange=QQ}24
@44@0:8@16@24B32^{ArrayBuilder=[62@]^@II}36
@"NSString<DVTMacroExpansion>"
[0@"DVTMacroExpansionOperator"]
@32@0:8@16^{ArrayBuilder=[62@]^@II}24
[0@"NSString<DVTMacroExpansion>"]
@24@0:8Q16
@24@0:8@?16
@24@0:8^@16
@40@0:8@16@24@32
@"<DVTMacroExpansion>"
@"DVTMacroDefinitionConditionSet"
@32@0:8@?16^@24
@40@0:8@16@?24^@32
@32@0:8@16^@24
@40@0:8@16{_NSRange=QQ}24
v24@0:8Q16
{_NSRange=QQ}16@0:8
^Q16@0:8
{_NSRange="location"Q"length"Q}
@"NSCountedSet"
v24@0:8#16
#24@0:8@16
@"NSError"
@72@0:8@16@24Q32@40@48@56Q64
@64@0:8@16@24Q32@40@48Q56
@56@0:8@16@24Q32@40@48
@40@0:8@16@24Q32
@24@0:8q16
@52@0:8@16@24q32@40B48
@48@0:8@16@24q32@40
@40@0:8@16@24q32
@64@0:8@16@24@32@40Q48@56
@48@0:8@16@24@32Q40
q16@0:8
v32@0:8^{DVTStringBuilder=[512S]^SQQ}16Q24
@"DVTMacroExpansionScope"
@36@0:8@16I24^{DVTMacroNameLookupCursor=@Q@@^{DVTMacroValueAssignment}@}28
@"NSArray"16@0:8
@"DVTVersion"16@0:8
@28@0:8@16B24
v28@0:8@16B24
