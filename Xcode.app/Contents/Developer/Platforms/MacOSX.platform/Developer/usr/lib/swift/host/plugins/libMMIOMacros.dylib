@(#)PROGRAM:MMIOMacros  PROJECT:SwiftMMIO-1
MMIOMacros
DiagnosableDeclSyntaxProtocol
MMIOExtensionMacro
BitFieldDescription
ArgumentContainer
Value WrappedValue WrappedExpression
OneOrMore
ExactlyOne
ParsedArgument
ZeroOrOne
RegisterBankMacro
BitFieldMacro
ReservedMacro
ReadWriteMacro
ReadOnlyMacro
WriteOnlyMacro
ExpressibleByExprSyntax
ErrorDiagnostic
SuppressionContext
MMIOMemberMacro
BitFieldTypeProjection
MMIOMemberAttributeMacro
ParsableMacro
MatchingAttributeAndMacro
RegisterDescription
ExpansionError
RegisterBankMemberMacro
RegisterBankScalarMemberMacro
RegisterBankArrayMemberMacro
RegisterMacro
BitRange
BitRangeBound
ArgumentProtocol
Argument
BitWidth
MMIOAccessorMacro
MMIOUtilities
Parser
LLVMDiagnosticKind
IntPrefix
LLVMDiagnostic
editor placeholder
pound source location
precedence group
' can only be applied to 
expectedDecl(_:)
Remove accessor block
' can only be applied to stored properties
expectedStoredProperty()
Insert explicit type annotation
' can only be applied to properties with simple types
unexpectedBindingType()
' can only be applied to properties with simple
identifiers
unexpectedBindingIdentifier()
MMIOMacros/MMIOExtensionMacro.swift
Fatal error
  @inlinable @inline(__always) get {
    preconditionMatchingBitWidth(
.self)
    return 
(storage: self.raw.
  @inlinable @inline(__always) set {
    preconditionMatchingBitWidth(
.self)
    self.raw.
 = newValue.storage(Self.Value.Raw.Storage.self)
  @inlinable @inline(__always) get {
    
.extract(from: self.storage)
  @inlinable @inline(__always) set {
    
.insert(newValue, into: &self.storage)
: DiscontiguousBitField {
typealias Storage = 
static let bitRanges = 
: ContiguousBitField {
static let bitRange = 
' must be passed exactly one value
expectedExactlyOneArgumentValue(label:)
' must be passed zero or one values
expectedZeroOrOneArgumentValues(label:)
 let unsafeAddress: UInt
#if FEATURE_INTERPOSABLE
var interposer: (any MMIOInterposer)?
#endif
#if FEATURE_INTERPOSABLE
@inlinable @inline(__always)
init(unsafeAddress: UInt, interposer: (any MMIOInterposer)?) {
  self.unsafeAddress = unsafeAddress
  self.interposer = interposer
#else
@inlinable @inline(__always)
init(unsafeAddress: UInt) {
  self.unsafeAddress = unsafeAddress
#endif
MMIOMacros/RegisterBankMacro.swift
MMIOMacros/BitFieldMacro.swift
get { fatalError() }
MMIOMacros/Argument.swift
Internal macro parsing error.
Please file an issue at https://github.com/apple/swift-mmio/issues and, if possible, attach the source code that triggered the issue
_TtC10MMIOMacros18SuppressionContext
MMIOMacros/MacroContext.swift
MMIOMacros/MMIOMemberMacro.swift
Replace with expression with literal type reference
' requires literal type reference
expectedTypeReferenceLiteral()
MMIOMacros/MMIOMemberAttributeMacro.swift
' internal error. Missing argument '
unexpectedMissingArgument(label:)
' internal error. Unexpected additional argument '
unexpectedExtraArgument(label:)
' internal error. Incorrect label for argument, expected '
unexpectedArgumentLabel(expected:actual:)
MMIOMacros/WithAttributesSyntax.swift
' type member must be annotated with exactly one of 
expectedMemberAnnotatedWithMacro(_:)
' type member must be annotated with '
/AppleInternal/Library/BuildRoots/3102119e-4ad8-11ef-8c43-e2437461156c/Library/Caches/com.apple.xbs/Sources/SwiftMMIO_host/Sources/MMIOMacros/SwiftSyntaxExtensions/WithAttributesSyntax.swift
private init() { fatalError() }
private var _never: Never
typealias Read = ReadWrite
typealias Write = ReadWrite
struct ReadWrite: RegisterValueRead, RegisterValueWrite {
typealias Value = 
  var storage: UInt
init(_ value: ReadWrite) {
    self.storage = value.storage
init(_ value: Raw) {
    self.storage = value.storage
struct Write: RegisterValueWrite {
init(_ value: Read) {
    // FIXME: mask off bits
    self.storage = value.storage
  @available(*, deprecated, message: "API misuse; read from write view returns the value to be written, not the value initially read.")
  @inlinable @inline(__always) get {
    preconditionMatchingBitWidth(
struct Read: RegisterValueRead {
init(_ value: Raw) { self.storage = value.storage }
init(_ value: Value.Read) {
  self.storage = value.storage
init(_ value: Value.Write) {
  self.storage = value.storage
struct Raw: RegisterValueRaw {
typealias Storage = UInt
var storage: Storage
init(_ storage: Storage) {
    self.storage = storage
init(_ value: Value.ReadWrite) {
  self.storage = value.storage
@inlinable @inline(__always) get {
  #if FEATURE_INTERPOSABLE
  return .init(unsafeAddress: self.unsafeAddress + (
), interposer: self.interposer)
  #else
  return .init(unsafeAddress: self.unsafeAddress + (
, interposer: self.interposer)
  #else
  return .init(unsafeAddress: self.unsafeAddress + (
MMIOMacros/RegisterBankMemberMacro.swift
' cannot be applied to compound properties
expectedSingleBinding()
' can only be applied to '
expectedBindingSpecifier(_:)
: RegisterValue {}
@available(*, unavailable)
MMIOMacros/RegisterMacro.swift
RegisterBankMacro
' requires expression to be a range literal
expectedRangeLiteral()
/AppleInternal/Library/BuildRoots/3102119e-4ad8-11ef-8c43-e2437461156c/Library/Caches/com.apple.xbs/Sources/SwiftMMIO_host/Sources/MMIOMacros/Macros/Arguments/BitWidth.swift
MMIOMacros/BitWidth.swift
' requires expression to be one of 
expectedLiteralValue(in:)
MMIOMacros/MMIOAccessorMacro.swift
' requires expression to be an integer literal
expectedIntegerLiteral()
error
warning
note
future reported an error, but wait cannot throw
swift_task_escalate
_Z19voucher_needs_adoptP9voucher_s
__tsan_acquire
__tsan_release
swift_task_enterThreadLocalContext
swift_task_exitThreadLocalContext
ySiGG
ySiG
ySiGSg
$s10MMIOMacros29DiagnosableDeclSyntaxProtocolP
_pSg
_pSg
$s10MMIOMacros18MMIOExtensionMacroP
_pXp
$s10MMIOMacros17ArgumentContainerP
5Value
yxGSg
yxGG
SayxG
$s10MMIOMacros13BitFieldMacroP
_pXpG
$s10MMIOMacros23ExpressibleByExprSyntaxP
$s10MMIOMacros15MMIOMemberMacroP
$s10MMIOMacros24MMIOMemberAttributeMacroP
$s10MMIOMacros13ParsableMacroP
SSSg5label_yp5valuet
_pSg
SaySSG
_pXpG
_pXp
$s10MMIOMacros23RegisterBankMemberMacroP
ySiG
6stride_AA5counttSg
6stride_AA5countt
_pXpG
ySSG
_pXpG
_pSg
_pXp
$ss33ExpressibleByUnicodeScalarLiteralP
$ss43ExpressibleByExtendedGraphemeClusterLiteralP
$ss26ExpressibleByStringLiteralP
ySsSbGG
$s10MMIOMacros16ArgumentProtocolP
ySiG
$s10MMIOMacros17MMIOAccessorMacroP
7ElementSTQz
yxq_G
yxq0_G
q_qd__Iegnr_
qd__
q_qd__q_Iegnnr_
q_qd__q_qd__Iegnnrr_
qd_0_
qd_1_
qd__qd_0_qd_1_qd__qd_0_qd_1_Iegnnnrrr_
qd_2_
qd__qd_0_qd_1_qd_2_qd__qd_0_qd_1_qd_2_Iegnnnnrrrr_
qd_3_
qd__qd_0_qd_1_qd_2_qd_3_qd__qd_0_qd_1_qd_2_qd_3_Iegnnnnnrrrrr_
yxq_GG
yxytG
ySsytG
q_Sgxzc
yyXlG
yS2sG
yS2s_yttG
Ss_yttSsIegnr_
ySsSiG
yS2s_SitG
Ss_SitSs_SitIegnr_
yS2s_Sit_yttG
Ss_Sit_yttSs_SitIegnr_
yS2s_Sit_SitG
Ss_Sit_SitSs_S2itIegnr_
yS2s_S2itG
yS2s_S2it_yttG
Ss_S2it_yttSs_S2itIegnr_
yS2s_S2it_
Ss_S2it_
tSs_S2iAAtIegnr_
yS2s_S2i
yS2s_S2i
t_yttG
Ss_S2i
t_yttSs_S2iAAtIegnr_
yS2s_S2i
t_SstG
Ss_S2i
t_SstSs_S2iAASstIegnr_
yS2s_S2i
SstG
yS2s_S2i
Sst_yttG
Ss_S2i
Sst_yttSs_S2iAASstIegnr_
yS2s_S2i
Sst_SstG
Ss_S2i
Sst_SstSs_S2iAASstIegnr_
Ss_S2i
Iegnr_
Ss_S2i
Ss_S2i
t_yttSg
Ss_S2it_
Ss_S2itSg
Ss_S2it_yttSg
Ss_Sit_SitSg
Ss_SitSg
Ss_Sit_yttSg
$sSY
$ss12CaseIterableP
accessLevel
bitWidth
type
fieldName
fieldType
bitRanges
projectedType
parsed
value
expression
Value
WrappedValue
WrappedExpression
_bitRanges
projectedType
_projectedType
diagnosticID
severity
message
expression
attribute
macroType
name
accessLevel
bitWidth
bitFields
isSymmetric
_offset
_stride
_count
_bitWidth
lowerBound
upperBound
UnicodeScalarLiteralType
ExtendedGraphemeClusterLiteralType
StringLiteralType
value
inclusive
label
container
value
UnicodeScalarLiteralType
ExtendedGraphemeClusterLiteralType
StringLiteralType
RawValue
AllCases
error
warning
note
binary
octal
hexadecimal
AllCases
RawValue
file
line
column
kind
message
accessor
associated type
deinitializer
function
if config
import
initializer
macro
macro expansion
missing
operator
subscript
type alias
variable
@(#)PROGRAM:MMIOMacros  PROJECT:SwiftMMIO-1
MMIOMacros
DiagnosableDeclSyntaxProtocol
MMIOExtensionMacro
BitFieldDescription
ArgumentContainer
Value WrappedValue WrappedExpression
OneOrMore
ExactlyOne
ParsedArgument
ZeroOrOne
RegisterBankMacro
BitFieldMacro
ReservedMacro
ReadWriteMacro
ReadOnlyMacro
WriteOnlyMacro
ExpressibleByExprSyntax
ErrorDiagnostic
SuppressionContext
MMIOMemberMacro
BitFieldTypeProjection
MMIOMemberAttributeMacro
ParsableMacro
MatchingAttributeAndMacro
RegisterDescription
ExpansionError
RegisterBankMemberMacro
RegisterBankScalarMemberMacro
RegisterBankArrayMemberMacro
RegisterMacro
BitRange
BitRangeBound
ArgumentProtocol
Argument
BitWidth
MMIOAccessorMacro
MMIOUtilities
Parser
LLVMDiagnosticKind
IntPrefix
LLVMDiagnostic
editor placeholder
pound source location
precedence group
' can only be applied to 
expectedDecl(_:)
Remove accessor block
' can only be applied to stored properties
expectedStoredProperty()
Insert explicit type annotation
' can only be applied to properties with simple types
unexpectedBindingType()
' can only be applied to properties with simple
identifiers
unexpectedBindingIdentifier()
MMIOMacros/MMIOExtensionMacro.swift
Fatal error
  @inlinable @inline(__always) get {
    preconditionMatchingBitWidth(
.self)
    return 
(storage: self.raw.
  @inlinable @inline(__always) set {
    preconditionMatchingBitWidth(
.self)
    self.raw.
 = newValue.storage(Self.Value.Raw.Storage.self)
  @inlinable @inline(__always) get {
    
.extract(from: self.storage)
  @inlinable @inline(__always) set {
    
.insert(newValue, into: &self.storage)
: DiscontiguousBitField {
typealias Storage = 
static let bitRanges = 
: ContiguousBitField {
static let bitRange = 
' must be passed exactly one value
expectedExactlyOneArgumentValue(label:)
' must be passed zero or one values
expectedZeroOrOneArgumentValues(label:)
 let unsafeAddress: UInt
#if FEATURE_INTERPOSABLE
var interposer: (any MMIOInterposer)?
#endif
#if FEATURE_INTERPOSABLE
@inlinable @inline(__always)
init(unsafeAddress: UInt, interposer: (any MMIOInterposer)?) {
  self.unsafeAddress = unsafeAddress
  self.interposer = interposer
#else
@inlinable @inline(__always)
init(unsafeAddress: UInt) {
  self.unsafeAddress = unsafeAddress
#endif
MMIOMacros/RegisterBankMacro.swift
MMIOMacros/BitFieldMacro.swift
get { fatalError() }
MMIOMacros/Argument.swift
Internal macro parsing error.
Please file an issue at https://github.com/apple/swift-mmio/issues and, if possible, attach the source code that triggered the issue
_TtC10MMIOMacros18SuppressionContext
MMIOMacros/MacroContext.swift
MMIOMacros/MMIOMemberMacro.swift
Replace with expression with literal type reference
' requires literal type reference
expectedTypeReferenceLiteral()
MMIOMacros/MMIOMemberAttributeMacro.swift
' internal error. Missing argument '
unexpectedMissingArgument(label:)
' internal error. Unexpected additional argument '
unexpectedExtraArgument(label:)
' internal error. Incorrect label for argument, expected '
unexpectedArgumentLabel(expected:actual:)
MMIOMacros/WithAttributesSyntax.swift
' type member must be annotated with exactly one of 
expectedMemberAnnotatedWithMacro(_:)
' type member must be annotated with '
/AppleInternal/Library/BuildRoots/3102119e-4ad8-11ef-8c43-e2437461156c/Library/Caches/com.apple.xbs/Sources/SwiftMMIO_host/Sources/MMIOMacros/SwiftSyntaxExtensions/WithAttributesSyntax.swift
private init() { fatalError() }
private var _never: Never
typealias Read = ReadWrite
typealias Write = ReadWrite
struct ReadWrite: RegisterValueRead, RegisterValueWrite {
typealias Value = 
  var storage: UInt
init(_ value: ReadWrite) {
    self.storage = value.storage
init(_ value: Raw) {
    self.storage = value.storage
struct Write: RegisterValueWrite {
init(_ value: Read) {
    // FIXME: mask off bits
    self.storage = value.storage
  @available(*, deprecated, message: "API misuse; read from write view returns the value to be written, not the value initially read.")
  @inlinable @inline(__always) get {
    preconditionMatchingBitWidth(
struct Read: RegisterValueRead {
init(_ value: Raw) { self.storage = value.storage }
init(_ value: Value.Read) {
  self.storage = value.storage
init(_ value: Value.Write) {
  self.storage = value.storage
struct Raw: RegisterValueRaw {
typealias Storage = UInt
var storage: Storage
init(_ storage: Storage) {
    self.storage = storage
init(_ value: Value.ReadWrite) {
  self.storage = value.storage
@inlinable @inline(__always) get {
  #if FEATURE_INTERPOSABLE
  return .init(unsafeAddress: self.unsafeAddress + (
), interposer: self.interposer)
  #else
  return .init(unsafeAddress: self.unsafeAddress + (
, interposer: self.interposer)
  #else
  return .init(unsafeAddress: self.unsafeAddress + (
MMIOMacros/RegisterBankMemberMacro.swift
' cannot be applied to compound properties
expectedSingleBinding()
' can only be applied to '
expectedBindingSpecifier(_:)
: RegisterValue {}
@available(*, unavailable)
MMIOMacros/RegisterMacro.swift
RegisterBankMacro
' requires expression to be a range literal
expectedRangeLiteral()
/AppleInternal/Library/BuildRoots/3102119e-4ad8-11ef-8c43-e2437461156c/Library/Caches/com.apple.xbs/Sources/SwiftMMIO_host/Sources/MMIOMacros/Macros/Arguments/BitWidth.swift
MMIOMacros/BitWidth.swift
' requires expression to be one of 
expectedLiteralValue(in:)
MMIOMacros/MMIOAccessorMacro.swift
' requires expression to be an integer literal
expectedIntegerLiteral()
error
warning
note
future reported an error, but wait cannot throw
swift_task_escalate
_Z19voucher_needs_adoptP9voucher_s
__tsan_acquire
__tsan_release
swift_task_enterThreadLocalContext
swift_task_exitThreadLocalContext
ySiGG
ySiG
ySiGSg
$s10MMIOMacros29DiagnosableDeclSyntaxProtocolP
_pSg
_pSg
$s10MMIOMacros18MMIOExtensionMacroP
_pXp
$s10MMIOMacros17ArgumentContainerP
5Value
yxGSg
yxGG
SayxG
$s10MMIOMacros13BitFieldMacroP
_pXpG
$s10MMIOMacros23ExpressibleByExprSyntaxP
$s10MMIOMacros15MMIOMemberMacroP
$s10MMIOMacros24MMIOMemberAttributeMacroP
$s10MMIOMacros13ParsableMacroP
SSSg5label_yp5valuet
_pSg
SaySSG
_pXpG
_pXp
$s10MMIOMacros23RegisterBankMemberMacroP
ySiG
6stride_AA5counttSg
6stride_AA5countt
_pXpG
ySSG
_pXpG
_pSg
_pXp
$ss33ExpressibleByUnicodeScalarLiteralP
$ss43ExpressibleByExtendedGraphemeClusterLiteralP
$ss26ExpressibleByStringLiteralP
ySsSbGG
$s10MMIOMacros16ArgumentProtocolP
ySiG
$s10MMIOMacros17MMIOAccessorMacroP
7ElementSTQz
yxq_G
yxq0_G
q_qd__Iegnr_
qd__
q_qd__q_Iegnnr_
q_qd__q_qd__Iegnnrr_
qd_0_
qd_1_
qd__qd_0_qd_1_qd__qd_0_qd_1_Iegnnnrrr_
qd_2_
qd__qd_0_qd_1_qd_2_qd__qd_0_qd_1_qd_2_Iegnnnnrrrr_
qd_3_
qd__qd_0_qd_1_qd_2_qd_3_qd__qd_0_qd_1_qd_2_qd_3_Iegnnnnnrrrrr_
yxq_GG
yxytG
ySsytG
q_Sgxzc
yyXlG
yS2sG
yS2s_yttG
Ss_yttSsIegnr_
ySsSiG
yS2s_SitG
Ss_SitSs_SitIegnr_
yS2s_Sit_yttG
Ss_Sit_yttSs_SitIegnr_
yS2s_Sit_SitG
Ss_Sit_SitSs_S2itIegnr_
yS2s_S2itG
yS2s_S2it_yttG
Ss_S2it_yttSs_S2itIegnr_
yS2s_S2it_
Ss_S2it_
tSs_S2iAAtIegnr_
yS2s_S2i
yS2s_S2i
t_yttG
Ss_S2i
t_yttSs_S2iAAtIegnr_
yS2s_S2i
t_SstG
Ss_S2i
t_SstSs_S2iAASstIegnr_
yS2s_S2i
SstG
yS2s_S2i
Sst_yttG
Ss_S2i
Sst_yttSs_S2iAASstIegnr_
yS2s_S2i
Sst_SstG
Ss_S2i
Sst_SstSs_S2iAASstIegnr_
Ss_S2i
Iegnr_
Ss_S2i
Ss_S2i
t_yttSg
Ss_S2it_
Ss_S2itSg
Ss_S2it_yttSg
Ss_Sit_SitSg
Ss_SitSg
Ss_Sit_yttSg
$sSY
$ss12CaseIterableP
accessLevel
bitWidth
type
fieldName
fieldType
bitRanges
projectedType
parsed
value
expression
Value
WrappedValue
WrappedExpression
_bitRanges
projectedType
_projectedType
diagnosticID
severity
message
expression
attribute
macroType
name
accessLevel
bitWidth
bitFields
isSymmetric
_offset
_stride
_count
_bitWidth
lowerBound
upperBound
UnicodeScalarLiteralType
ExtendedGraphemeClusterLiteralType
StringLiteralType
value
inclusive
label
container
value
UnicodeScalarLiteralType
ExtendedGraphemeClusterLiteralType
StringLiteralType
RawValue
AllCases
error
warning
note
binary
octal
hexadecimal
AllCases
RawValue
file
line
column
kind
message
accessor
associated type
deinitializer
function
if config
import
initializer
macro
macro expansion
missing
operator
subscript
type alias
variable
