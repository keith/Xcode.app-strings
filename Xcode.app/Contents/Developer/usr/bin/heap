@(#)PROGRAM:heap  PROJECT:SamplingTools-64566.82
analyzeMemgraph
T@"DVT_VMUClassPatternMatcher",&,N,V_layoutPatternMatcher
containsString:
T@"DVT_VMUHeapAndVMAggregatorOptions",&,N,V_heapAndVMOptions
is64Bit
TB,N,V_humanReadable
realizedClasses
TB,N,V_quietMode
sumObjectFields
TB,N,V_showInternalFragmentation
.cxx_destruct
arrayWithArray:
T@"DVT_VMUDebugTimer",&,N,V_debugTimer
guessNonObjects
TB,N,V_applyDiffFrom
TB,N,V_onlyShowAddresses
stringByResolvingSymlinksInPath
TB,N,V_showBinarySummary
valueForEnvVar:
TB,N,V_showPaths
TB,N,V_showShortenedOutput
TI,N,V_objectContentLevel
TI,N,V_sortOrder
TQ,N,V_forkCorpseRetryTime
TQ,N,V_maximumEntriesToShow
UTF8String
_applyDiffFrom
_classDisplayName:
_debugTimer
_forkCorpseRetryTime
_graph
_heapAndVMAnalyzer
_heapAndVMOptions
_heapGlobals
_humanReadable
_layoutPatternMatcher
_maximumEntriesToShow
_objectContentLevel
_onlyShowAddresses
_quietMode
_showBinarySummary
_showInternalFragmentation
_showPaths
_showShortenedOutput
_sortOrder
_verifyFieldWidthForShortenedOutput:
absoluteURL
addAllNodesFromTaskWithError:
allZonesAggregate
allocatedSize
appendFormat:
applyDiffFrom
arguments
attributesOfItemAtPath:error:
binaryName
binaryPath
blockCount
bundleWithIdentifier:
callStackSymbols
classFilterPatternMatcher
className
classesPattern
classesPatternMatcher
compare:
componentsJoinedByString:
componentsSeparatedByString:
containsRange:
count
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
createMapForMinusGraph:
createSymbolicatorWithFlags:andNotification:
currentHandler
dataWithContentsOfFile:options:error:
dateWithTimeIntervalSinceNow:
debugTimer
defaultManager
description
detachFromTask
dictionaryWithObjects:forKeys:count:
directedGraphWithData:error:
displayName
endEvent:
enumerateAllocationSizesWithBlock:
enumerateBinaryCountDataSortedBy:withBlock:
enumerateHeapAndVMSortedBy:withBlock:
enumerateInfosWithBlock:
executablePath
fileExistsAtPath:isDirectory:
fileSize
fileURLWithPath:
forkCorpseRetryTime
fullIvarDescription
getPlatform:
handleFailureInFunction:file:lineNumber:description:
hasSuffix:
heapAndVMOptions
heapZoneAggregates
humanReadable
infoType
init
initWithCorePath:originalBinaryPaths:error:
initWithGraph:options:
initWithPattern:forArgument:error:
initWithPid:
initWithTask:
initWithTask:getBinariesList:
initWithVMUTask:options:
instanceSize
intValue
intersectsRange:
isCore
isDerivedFromStackBacktrace
isEqualToString:
isExclave
isExecutableFileAtPath:
isSemiCriticalProcess
isSemiCriticalProcessWithNoTimeLimit
isSimulator
isTranslated
ivarGapForClassHierarchy
labelForNode:
lastPathComponent
layoutPatternMatcher
length
localizedDescription
logHandle
matchesNodeDetails:orNodeDescription:
maximumEntriesToShow
memoryCache
mergeRange:
name
numberWithInt:
numberWithUnsignedInt:
objectAtIndexedSubscript:
objectContentLevel
objectForInfoDictionaryKey:
onlyShowAddresses
parentPid
parentProcessPath
parseArguments:withBlock:
path
printAllocationSizeCounts
printClassInfo:count:totalBytes:
printClassTypeCounts
printClassesInZone:
printHeap
printRuntimeMetadataInfo
printSizeToCount:
printZone:zoneIndex:
processDescription
processDescriptionString
processInfo
processName
processSnapshotGraphWithOptions:
quietMode
reason
registerOptionWithLongName:shortName:argumentKind:argumentName:optionDescription:flags:handler:
registerOptionWithLongName:shortName:argumentKind:argumentName:optionDescription:handler:
renormalizedGraph
resetCachedMatches
separateByZone
setApplyDiffFrom:
setClassFilterPatternMatcher:
setClassesPattern:
setClassesPatternMatcher:
setDebugTimer:
setDiscussion:
setForkCorpseRetryTime:
setGuessNonObjects:
setHeapAndVMOptions:
setHumanReadable:
setLayoutPatternMatcher:
setMatchingKindOfClass:
setMaximumEntriesToShow:
setObject:atIndexedSubscript:
setObjectContentLevel:
setOnlyShowAddresses:
setQuietMode:
setRecordRuntimeMetadataChunkInfo:
setScope:
setSeparateByZone:
setShowBinarySummary:
setShowInternalFragmentation:
setShowPaths:
setShowRawClassNames:
setShowShortenedOutput:
setShowSizes:
setShowZoneHistograms:
setShowZoneSummaries:
setSortOrder:
setSumObjectFields:
setSyntaxDescription:
sharedTimer
shouldAnalyzeWithCorpse
showBinarySummary
showInternalFragmentation
showPaths
showRawClassNames
showShortenedOutput
showZoneHistograms
showZoneSummaries
signpostID
sortOrder
startWithCategory:message:
startWithMessage:
stop
string
stringValue
stringWithFormat:
stringWithUTF8String:
subgraphWithMarkedNodes:
taskPort
taskType
typeName
usage:
usage:shouldExit:
virtualSize
zoneCount
zoneNameForIndex:
HeapGlobals
HeapAndVMPrinter
ObjectLocalToThisFile
@16@0:8
v24@0:8@16
I16@0:8
v20@0:8I16
B16@0:8
v20@0:8B16
Q16@0:8
v24@0:8Q16
v16@0:8
@"DVT_VMUHeapAndVMAggregatorOptions"
@"DVT_VMUClassPatternMatcher"
@"DVT_VMUDebugTimer"
@24@0:8@16
v40@0:8@16Q24Q32
v28@0:8@16i24
@32@0:8@16@24
@"<VMUCommonGraphInterface>"
@"HeapGlobals"
@"DVT_VMUHeapAndVMAggregator"
[-sz] [--showSizes] [--noContent] [--addresses=all|<classes-pattern>] <process | memory-graph-file>
<classes-pattern> can be followed by a malloc size specification of the form
[size] or [lowerBound-upperBound], such as 'malloc[1024]' or 'CFData[16k-]'
help
show usage message
v8@?0
sortBySize
sort output by total size of class instances, rather than by count
humanReadable
show memory sizes more readably, as 'K' or 'M'
zones
show output per-zone instead of an aggregated summary of all zones
kindOfClass
kindOfClass-pattern
filter objects for kind of class (class or superclass matching pattern)
v24@?0@"NSString"8^@16
--kindOfClass option can only be specified once
--kindOfClass
addresses
all|classes-pattern
prints the addresses of matching objects found on the heap in ascending address order
--addresses option can only be specified once
only
--addresses
forkCorpse
generate a corpse fork from process and run heap on it
guessNonObjects
try to identify non-object malloc nodes which are referenced by fields of other objects
diffFrom
memgraph
show only the new objects since the specified memgraph
--diffFrom option can only be specified once
specified memgraph is invalid or nil
forkCorpseRetryTime
when creating a process corpse under system pressure, retry for the specified number of seconds
layouts
show the object layout for types matching the specified pattern
--layouts option can only be specified once
--layouts
noContent
do not show object content in --addresses mode
readonlyContent
in --addresses mode, only show content backed by readonly memory
showSizes
show distribution of each malloc size for each object, instead of summing and averaging
sumObjectFields
accumulate those fields into the entry for that object
quiet
suppress the process description header
rawNames
show raw class names instead of display names
showInternalFragmentation
print class layouts that have wasted space in allocated instances due to alignment
showBinarySummary
show summary by binaries
getCorpseFromParent
noScanOverlay
DT_NO_SCAN_OVERLAY
showTiming
initialization
metadata
print only the contents of metadata allocations, like 'Swift Metadata'
printZones
only run the print function of each zone
enumerateZones
for debugging, enumerate all malloc zones
allProcesses
minimumPid
run heap against all processes (or those >= minimumPid), with the given arguments
shortenedOutput
print fewer characters by using tabs instead of spaces (for ExcResource reports)
paths
for debugging, show binary paths rather than just names
excResource
Produce output for ExcResource report
OS_os_transaction
--excResource
%s[%d]: [fatal] failed to open core file: %s
unknown argument: %@
no process id or name specified
only one of --noContent or --readonlyContent can be specified
-printZones not supported for memgraphs
-enumerateZones not supported for memgraphs
heap
reading/deserializing graph from file
%s[%d]: [fatal] unable to read input graph: %s
%s[%d]: [fatal] memgraphs are from the same file [%s]
%s[%d]: [fatal] Invalid memgraph format passed in to --diffFrom: %s
%s[%d]: [fatal] Memgraphs are from different process identifiers [%d] and [%d]
Only showing allocations in %s that are not in %s.
generate analysis task
adding root and malloc nodes from task
%s[%d]: [fatal] %s
Process %d is not debuggable. Due to security restrictions, heap can only show contents of readonly memory of restricted processes.
%s[%d]: [fatal] Live process and memgraph are from different process identifiers [%d] and [%d]
Only showing allocations in live process [%s] that are not in %s.
unable to introspect malloc zones to get allocation information
%s[%d]: %s
%s[%d]: [fatal] %s
v16@?0@"DVT_VMUTask"8
/tmp
Running print_task on %s
Running print_task on %s is not supported.
i32@?0Q8^{malloc_introspection_t=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?I}16@"NSString"24
v16@?0^?8
%s   %#llx-%#llx[%llu]  %s
v24@?0I8^{?=QQ}12I20
Enumeration failed for malloc zone %s
No new objects detected between memgraphs.
See output lines containing "ISSUE:" near the start to see possible malloc zone enumeration bugs.
    ISSUE:  UNEXPECTED MALLOC RANGE TYPE
    ISSUE:  PTR_IN_USE IS NOT CONTAINED IN ANY PTR_REGION
    ISSUE:  PTR_IN_USE IS ONLY PARTIALLY CONTAINED IN A PTR_REGION
%8llu  %9s  %9s  
%8llu  %9llu  %8.1f   
%-*s  %-*s  %s
  %-*s  %s
v32@?0@"DVT_VMUClassInfo"8Q16Q24
%8llu  %9s       %s
%8llu  %9llu       %s
v32@?0@"NSString"8Q16Q24
Zone %s: 
All zones: 
%u nodes (%s)
%u nodes (%llu bytes)
Active blocks in Zone %s that match pattern '%s':
Active blocks in all zones that match pattern '%s':
non-object
%#qx
%#qx: %s (%qd bytes)
v52@?0I8{?=Qb60b4@}12@"DVT_VMUVMRegion"36^B44
v24@?0Q8Q16
%gKB[%llu] 
%llu[%llu] 
Zone %s: %u nodes
 - Sizes: 
All zones: %u nodes malloced - Sizes: 
v36@?0Q8@"DVT_VMUClassInfo"16I24^B28
Found:
  %u ObjC classes
  %u Swift classes
  %u C++ classes
  %u CFTypes
Derived %u type names for non-objects from allocation backtraces
printing zone summary info
Process %d: %u zone%s
Zone %s: Overall size: %quKB
; %u nodes malloced for %quKB (%qu%% of capacity)
All zones: %u nodes malloced - %quKB
%s -- %s wasted due to alignment (%llu bytes * %llu instance%s)
%.1f 
%.1fK
%.1fM
%.1fG
%.1fT
%2.1f GB
%2.1f MB
%2.1f KB
%4llu bytes
   COUNT      BYTES       AVG   CLASS_NAME                                        TYPE    BINARY
   =====      =====       ===   ==========                                        ====    ======
   COUNT      BYTES       BINARY
   =====      =====       ======
Entries <class>[<offset>], like __NSCFArray[12], indicate non-objects 
pointed to by instances of <class> at given offset.
-----------------------------------------------------------------------
Type names for non-objects could be derived from allocation backtraces if the process used MallocStackLogging
.memgraph
%s[%d]: mach port for process %d not valid
%s[%d]: %s
%s[%d]: [fatal] mach port for process %d not valid
Command args:    %@
Target process:  %@ [%u]
Parent process:  %@ [%u]
xctest
sharedCode.m should have been built with -DSAMPLING_TOOLS_TESTS for use with xctest
Target process of memgraph:  %@ [%u]
%s[%d]: [fatal] Expected to get a VMUTask of type task.
SAMPLING_TOOLS_TARGET_PID
%s[%d]: [fatal] error acquiring target task port from parent.
%s[%d]: %s cannot find any existing process %s a name like '%s'%s.
you have access to which has
with
; try running with `sudo`
%s[%d]: cannot examine itself.
%s[%d]: [fatal] Target task not available for analysis
%s[%d]: [fatal] %s kept pid %u suspended for too long - exiting to prevent watchdog timer from killing that process.
%s[%d]: [fatal] %s analysis of pid %u reached time limit of %llu seconds, exiting.
v16@?0i8B12
SAMPLING_TOOLS_ALL_PROCESSES
Target process is using %s so not generating corpse for better performance.
Target process is an ancestor and permitting live process for ancestors so not generating a corpse to save resources by default.
__check_mach_ports_lookup
i24@?0r^v8r^v16
%s-%d-%s
DT_RESPAWN_FOR_NONNATIVE
%s/%s[%d]-allProcesses.XXXXXX
%s[%d]: [fatal] Couldn't create output directory from template %s, %s. Exiting
%s[%d]: [fatal] Couldn't change directory to %s
stderr.txt
Couldn't create error file stderr.txt (%s)
Couldn't replace stderr file with stderr.txt (%s)
Writing all output files into %s
Skipping process of wrong architecture:  %d %s
ANALYZING PROCESS %5d: %s
.txt
Couldn't open output file %s (%s)
Couldn't replace output file with %s (%s)
    CHILD ANALYSIS TOOL CRASHED with %s
    %s for %5d: %s
Exception '%s', reason: '%s'
v16@?0i8I12
v40@?0i8r*12B20I24I28^B32
Child analysis tool crashed for these processes:
Wrote output files into %s
To print all files in pid order use:  (cd %s; cat `/bin/ls -tr1 *.txt`) 
task from parent for pid %u
%s[%d]: [fatal] Failed to get DYLD info for %s with error %s (%d). Assuming it's a minimal corpse which can't be analyzed, which we sometimes see for processes which use a lot of memory.
%s[%d]: Failed to get DYLD info for %s with error %s (%d). Assuming it's a minimal corpse which can't be analyzed, which we sometimes see for processes which use a lot of memory.
for unknown reasons
for unknown reasons, even though it appears to exist
because it no longer appears to be running
because the process does not exist
because you do not have appropriate privileges to examine it
%s[%d]: %s cannot examine process %d (%s) %s%s.
%s[%d]: %s cannot examine process %d (with name like '%s') %s.
%s[%d]: %s cannot examine process %d %s.
SIMULATOR_ROOT
SIMULATOR_SHARED_RESOURCES_DIRECTORY
libclang_rt.asan
Address Sanitizer
libclang_rt.tsan
Thread Sanitizer
v24@?0{_CSTypeRef=QQ}8
%s[%d]: No process corpse slots currently available - waiting to get one
no corpse slots are available
target process's footprint is too large, or system memory pressure is too high
target process may be using too much VM
libgmalloc.dylib
GuardMalloc in the target process may be using too much VM
corpse creation encountered the unexpected error %s (%d)
generated corpse for pid %u
%s[%d]: [fatal] Kernel generated only a minimal corpse with error %s (%d)
%s[%d]: Kernel generated only a minimal corpse with error %s (%d) - examining live process instead
%s[%d]: [fatal] Failed to generate corpse: %s
%s[%d]: Failed to generate corpse: %s - examining live process instead
BOOL _respawnToolIfNecessaryVMUTaskWithExitStatus(DVT_VMUTask * _Nullable __strong, VMURespawnToolOptions, int *, uint64_t)
Only one of kVMURespawnForAllProcesses and kVMURespawnForAllNonNativeProcesses can be set
DYLD_ROOT_PATH
%s[%d]: [fatal] Failed to create symbolicator for target
SIMULATOR_UDID
DT_NO_RESPAWN
DT_FORCE_RESPAWN
%s[%d]: [fatal] respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but analysis process does not match architecture of target process %d.
%s[%d]: respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but the analysis process does not match the SDK variant of the target process %d.
Analysis of malloc zones may fail.
DT_NO_RESPAWN_TO_OS
DYLD_FRAMEWORK_PATH
DYLD_SHARED_REGION
avoid
DYLD_FORCE_PLATFORM
arm64
x86_64
posix_spawnattr_init
posix_spawnattr_setbinpref_np
%s[%d]: [fatal] 'mach_ports_register' failed: %s (%d)
--al
-atExit
%s[%d]: [fatal] posix_spawn: %s could not be launched as a %d-bit process with architecture %s: %s (%d)
%s[%d]: [fatal] waitpid: %s
_respawnToolIfNecessaryVMUTaskWithExitStatus_block_invoke
sharedCode.m
WIFSIGNALED(child_status)
Child `%s` process died with signal %d %s
v12@?0I8
com.apple.SymbolicationDT
Symbolication.framework/Symbolication
com.apple.CoreSymbolicationDT
CoreSymbolication.framework/CoreSymbolication
64544
/System/Library/PrivateFrameworks/%s
%s/usr/bin/%s
v20@?0I8@?<v@?>12
Running in DT_RESPAWN_FOR_NONNATIVE mode -- respawning only if necessary to match target process arch and/or platform.
[fatal] failed to open core file: %s
heap
reading/deserializing graph from file
[fatal] unable to read input graph: %s
[fatal] memgraphs are from the same file [%s]
[fatal] Invalid memgraph format passed in to --diffFrom: %s
[fatal] Memgraphs are from different process identifiers [%d] and [%d]
generate analysis task
adding root and malloc nodes from task
[fatal] %s
[fatal] Live process and memgraph are from different process identifiers [%d] and [%d]
[fatal] %s
printing zone summary info
[fatal] mach port for process %d not valid
examining %@ [%u]
[fatal] Expected to get a VMUTask of type task.
[fatal] error acquiring target task port from parent.
[fatal] Target task not available for analysis
[fatal] %s kept pid %u suspended for too long - exiting to prevent watchdog timer from killing that process.
[fatal] %s analysis of pid %u reached time limit of %llu seconds, exiting.
[fatal] Couldn't create output directory from template %s, %s. Exiting
[fatal] Couldn't change directory to %s
[fatal] Failed to get DYLD info for %s with error %s (%d). Assuming it's a minimal corpse which can't be analyzed, which we sometimes see for processes which use a lot of memory.
No process corpse slots currently available - waiting to get one
[fatal] Kernel generated only a minimal corpse with error %s (%d)
Kernel generated only a minimal corpse with error %s (%d) - examining live process instead
[fatal] Failed to generate corpse: %s
Failed to generate corpse: %s - examining live process instead
[fatal] Failed to create symbolicator for target
[fatal] respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but analysis process does not match architecture of target process %d.
[fatal] 'mach_ports_register' failed: %s (%d)
[fatal] posix_spawn: %s could not be launched as a %d-bit process with architecture %s: %s (%d)
[fatal] waitpid: %s
%s[%d]: [error] 'mach_port_mod_refs' failed: %s (%d)
%s[%d]: [error] 'mach_port_deallocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_allocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_insert_right' failed: %s (%d)
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>22A380021</string>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.dt.SamplingTools.heap</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>SamplingTools</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>MacOSX</string>
</array>
<key>CFBundleVersion</key>
<string>1.0</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>24A292</string>
<key>DTPlatformName</key>
<string>macosx</string>
<key>DTPlatformVersion</key>
<string>15.0</string>
<key>DTSDKBuild</key>
<string>24A292</string>
<key>DTSDKName</key>
<string>macosx15.0.internal</string>
<key>DTXcode</key>
<string>1600</string>
<key>DTXcodeBuild</key>
<string>16A5221e</string>
<key>LSMinimumSystemVersion</key>
<string>13.0</string>
</dict>
</plist>
