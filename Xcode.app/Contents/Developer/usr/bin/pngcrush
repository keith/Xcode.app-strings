1.2.7
IHDR
IDAT
IEND
PLTE
bKGD
cHRM
gAMA
hIST
iCCP
iTXt
oFFs
pCAL
sCAL
pHYs
sBIT
sPLT
sRGB
CgBI
tEXt
tIME
tRNS
zTXt
iDOT
acTL
0123456789ABCDEF
Error decoding compressed text
 0@P`p
!1AQaq
"2BRbr
#3CScs
$4DTdt
%5EUeu
&6FVfv
'7GWgw
(8HXhx
)9IYiy
*:JZjz
+;K[k{
,<L\l|
-=M]m}
.>N^n~
/?O_o
0Eshop ICC profilePhotoshop ICC pr
Too many bytes for PNG signature.
Potential overflow in png_zalloc()
Unknown freer parameter in png_data_freer.
%d %s %d %02d:%02d:%02d +0000
 libpng version 1.2.7 - September 12, 2004
   Copyright (c) 1998-2004 Glenn Randers-Pehrson
   Copyright (c) 1996-1997 Andreas Dilger
   Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.
1.2.7
 libpng version 1.2.7 - September 12, 2004 (header)
1.2.12
zlib memory error
zlib version error
Unknown zlib error
libpng error no. %s: %s
libpng error: %s, offset=%d
libpng error: %s
libpng warning no. %s: %s
libpng warning: %s
Invalid bit depth
Invalid color type
Invalid image width
Invalid image height
Width too large for libpng to process image data.
Out of Memory!
Not a PNG file
PNG file corrupted by ASCII conversion
Missing IHDR before IDAT
Missing PLTE before IDAT
Too many IDAT's found
Potential overflow of save_buffer
Not enough compressed data
Extra compression data
Extra compressed data
Decompression Error
Too much data in IDAT chunks
Out of place tEXt
Insufficient memory to store text chunk.
Out of place zTXt
unknown critical chunk
Application was compiled with png.h from libpng-%.20s
Application  is  running with png.c from libpng-%.20s
Incompatible libpng version in application and library
1.0.6 or earlier
The png struct allocated by the application for reading is too small.
The info struct allocated by application for reading is too small.
Application uses deprecated png_read_init() and should be recompiled.
Ignoring extra png_read_update_info() call; row buffer not reallocated
Invalid attempt to read row data
Decompression error
Not enough image data
Image is too high to process with png_read_png()
Call to NULL read function
Read Error
It's an error to set both read_data_fn and write_data_fn in the 
same structure.  Resetting write_data_fn to NULL.
Can't discard critical data on CRC error.
Application must supply a known background gamma
ignoring out of range rgb_to_gray coefficients
NULL row buffer for row %ld, pass %d
png_do_rgb_to_gray found nongray pixel
png_do_dither returned rowbytes=0
PNG unsigned integer out of range.
CRC error
Not enough memory to decompress chunk
Not enough memory to decompress chunk.
Not enough memory to decompress chunk..
Buffer error in compressed datastream in %s chunk
Data error in compressed datastream in %s chunk
Incomplete compressed datastream in %s chunk
Not enough memory for text.
Unknown zTXt compression type %d
Out of place IHDR
Invalid IHDR chunk
Missing IHDR before PLTE
Invalid PLTE after IDAT
Duplicate PLTE chunk
Ignoring PLTE chunk in grayscale PNG
Invalid palette chunk
Truncating incorrect tRNS chunk length
Truncating incorrect info tRNS chunk length
No image in file
Incorrect IEND chunk length
Missing IHDR before gAMA
Invalid gAMA after IDAT
Out of place gAMA chunk
Duplicate gAMA chunk
Incorrect gAMA chunk length
Ignoring gAMA chunk with gamma=0
Ignoring incorrect gAMA value when sRGB is also present
gamma = (%d/100000)
Missing IHDR before sBIT
Invalid sBIT after IDAT
Out of place sBIT chunk
Duplicate sBIT chunk
Incorrect sBIT chunk length
Missing IHDR before cHRM
Invalid cHRM after IDAT
Missing PLTE before cHRM
Duplicate cHRM chunk
Incorrect cHRM chunk length
Invalid cHRM white point
Invalid cHRM red point
Invalid cHRM green point
Invalid cHRM blue point
Ignoring incorrect cHRM value when sRGB is also present
wx=%f, wy=%f, rx=%f, ry=%f
gx=%f, gy=%f, bx=%f, by=%f
Missing IHDR before sRGB
Invalid sRGB after IDAT
Out of place sRGB chunk
Duplicate sRGB chunk
Incorrect sRGB chunk length
Unknown sRGB intent
incorrect gamma=(%d/100000)
Invalid CgBI after IDAT
Duplicate CgBI chunk
Incorrect CgBI chunk length
Missing IHDR before iCCP
Invalid iCCP after IDAT
Out of place iCCP chunk
Duplicate iCCP chunk
Malformed iCCP chunk
Ignoring nonzero compression type in iCCP chunk
Profile size field missing from iCCP chunk
Ignoring truncated iCCP profile.
Missing IHDR before sPLT
Invalid sPLT after IDAT
malformed sPLT chunk
sPLT chunk has bad length
sPLT chunk too long
sPLT chunk requires too much memory
Missing IHDR before tRNS
Invalid tRNS after IDAT
Duplicate tRNS chunk
Incorrect tRNS chunk length
Missing PLTE before tRNS
Zero length tRNS chunk
tRNS chunk not allowed with alpha channel
Missing IHDR before bKGD
Invalid bKGD after IDAT
Missing PLTE before bKGD
Duplicate bKGD chunk
Incorrect bKGD chunk length
Incorrect bKGD chunk index value
Missing IHDR before hIST
Invalid hIST after IDAT
Missing PLTE before hIST
Duplicate hIST chunk
Incorrect hIST chunk length
Missing IHDR before pHYs
Invalid pHYs after IDAT
Duplicate pHYs chunk
Incorrect pHYs chunk length
Missing IHDR before oFFs
Invalid oFFs after IDAT
Duplicate oFFs chunk
Incorrect oFFs chunk length
Missing IHDR before pCAL
Invalid pCAL after IDAT
Duplicate pCAL chunk
No memory for pCAL purpose.
Invalid pCAL data
Invalid pCAL parameters for equation type
Unrecognized equation type for pCAL chunk
No memory for pCAL params.
Missing IHDR before sCAL
Invalid sCAL after IDAT
Duplicate sCAL chunk
Out of memory while processing sCAL chunk
malformed width string in sCAL chunk
malformed height string in sCAL chunk
Invalid sCAL data
Out of place tIME chunk
Duplicate tIME chunk
Incorrect tIME chunk length
Missing IHDR before tEXt
No memory to process text chunk.
Not enough memory to process text chunk.
Insufficient memory to process text chunk.
Missing IHDR before zTXt
Out of memory processing zTXt chunk.
Zero length zTXt chunk
Unknown compression type in zTXt chunk
Not enough memory to process zTXt chunk.
Insufficient memory to store zTXt chunk.
Invalid acTL after IDAT
invalid chunk type
Ignoring bad adaptive filter type
Extra compressed data.
Ignoring attempt to set negative chromaticity value
Ignoring attempt to set chromaticity value exceeding 21474.83
Limiting gamma to 21474.83
Setting gamma=0
Setting negative gamma to zero
Palette size 0, hIST allocation skipped.
Insufficient memory for hIST chunk data.
Image width or height is zero in IHDR
image size exceeds user limits in IHDR
Invalid image size in IHDR
Width is too large for libpng to process pixels
Invalid bit depth in IHDR
Invalid color type in IHDR
Invalid color type/bit depth combination in IHDR
Unknown interlace method in IHDR
Unknown compression method in IHDR
MNG features are not allowed in a PNG datastream
Unknown filter method in IHDR
Invalid filter method in IHDR
Insufficient memory for pCAL purpose.
Insufficient memory for pCAL units.
Insufficient memory for pCAL params.
Insufficient memory for pCAL parameter.
Too late to change zlib mode.
Insufficient memory to process iCCP chunk.
Insufficient memory to process iCCP profile.
Insufficient memory to store text
iTXt chunk not supported.
No memory for sPLT palettes.
Out of memory while processing unknown chunk.
Out of memory processing unknown chunk.
Call to NULL write function
Write Error
Attempted to set both read_data_fn and write_data_fn in
the same structure.  Resetting read_data_fn to NULL.
Valid palette required for paletted images
Unable to write international text
No IDATs written into file
The png struct allocated by the application for writing is too small.
The info struct allocated by the application for writing is too small.
Application uses deprecated png_write_init() and should be recompiled.
png_write_info was never called before png_write_row.
zlib error
Unknown row filter for method 0
Can't add Up filter after starting
Can't add Average filter after starting
Can't add Paeth filter after starting
Unknown custom filter method
Unknown filter heuristic method
Only compression windows <= 32k supported by PNG
Only compression windows >= 256 supported by PNG
Compression window is being reset to 512
Only compression method 8 is supported by PNG
Invalid bit depth for grayscale image
Invalid bit depth for RGB image
Invalid bit depth for paletted image
Invalid bit depth for grayscale+alpha image
Invalid bit depth for RGBA image
Invalid image color type specified
Invalid compression type specified
Invalid filter type specified
Invalid interlace type specified
iPhone optimizations require 15-bit window.
Invalid number of colors in palette
Ignoring request to write a PLTE chunk in grayscale PNG
Invalid zlib compression method or flags in IDAT
Invalid sRGB rendering intent specified
Invalid CgBI raw-deflate flag after zlib stream started.
Empty keyword in iCCP chunk
Unknown compression type in iCCP chunk
Empty keyword in sPLT chunk
Invalid sBIT depth specified
Invalid cHRM white point specified
white_x=%f, white_y=%f
Invalid cHRM red point specified
Invalid cHRM green point specified
Invalid cHRM blue point specified
Invalid fixed cHRM white point specified
white_x=%ld, white_y=%ld
Invalid cHRM fixed red point specified
Invalid fixed cHRM green point specified
Invalid fixed cHRM blue point specified
Invalid number of transparent colors specified
Ignoring attempt to write tRNS chunk out-of-range for bit_depth
Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8
Can't write tRNS with an alpha channel
Invalid background palette index
Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8
Ignoring attempt to write bKGD chunk out-of-range for bit_depth
Invalid number of histogram entries specified
zero length keyword
Out of memory while procesing keyword
invalid keyword character 0x%02X
trailing spaces removed from keyword
leading spaces removed from keyword
extra interior spaces removed from keyword
Zero length keyword
keyword length must be 1 - 79 characters
Empty keyword in tEXt chunk
Empty keyword in zTXt chunk
Unrecognized unit type for oFFs chunk
%12.12e
Unrecognized unit type for pHYs chunk
Invalid time specified for tIME chunk
Unknown compression type %d
Press [ENTER] key to continue.
-rem
cHRM
chrm
gIFg
gifg
gIFt
gift
gIFx
gifx
hIST
hist
iCCP
iccp
pCAL
pcal
sCAL
scal
sPLT
splt
tIME
time
   Read the %s chunk.
     Check for removal of the %s chunk.
alla
text
PLTE
plte
bKGD
bkgd
gAMA
gama
iTXt
itxt
oFFs
offs
pHYs
phys
sBIT
sbit
sRGB
srgb
tEXt
tRNS
trns
zTXt
ztxt
   Removed the %s chunk.
   Preserving the %s chunk.
   CPU time used = %.3f seconds
 (decoding %.3f,
          encoding %.3f,
 other %.3f seconds)
Warning: versions are different between png.h and png.c
  png.h version: %s
  png.c version: %s
-fast
-huffman
-rle
-already
-bkgd
-bKGD
-brute
-bit_depth
-no_cc
-dou
-exit
-force
-fix
-loco
-iccp
Could not find file: %s
-max
-nofilecheck
-nosave
-plte_len
-pplt
-iphone
-revert-iphone-optimizations
-speed
-reduce
-rep
-res
-save
-srgb
-sRGB
-text
-tEXt
-itxt
-iTXt
-zitxt
-ziTXt
-ztxt
-zTXt
too many text/zTXt inputs; only 10 allowed
keyword exceeds 79 characters or text exceeds 2047 characters
-trns_a
-tRNS_a
-trns
-tRNS
-version
 pngcrush 
1.6.4
, uses libpng 
 and zlib 
Invalid window size (%d); using window size=4
could not create directory %s
directory %s is too long for buffer
filename %s is too long for buffer
full path is too long for buffer
Opening file %s for length measurement
File has already been crushed: %s
   Recompressing %s
   %s    = %8lu
Average us to decode
Total length of data found in IDAT chunks
Opening file %s for alpha check
Finished counting colors. num_rgba=%d
setting output color type to %d
ENTERING MAIN LOOP OVER %d METHODS
Could not find input file %s
Could not open output file %s
copying input to output... tc=%d ...
skipping "late" trial %d
skipping "early" trial %d
------------------------------------------------
Begin trial %d, filter %d, strategy %d, level %d
   Cannot overwrite input file %s
   st_ino=%d, st_size=%d
pngcrush could not create read_ptr
pngcrush could not create write_ptr
pngcrush could not create read_info_ptr
pngcrush could not create end_info_ptr
pngcrush could not create write_info_ptr
pngcrush could not create write_end_info_ptr
allb
Input file is not a PNG.  Copying source file to destination...
Not a PNG file!
Input PNG is already optimized for iPhone OS.  Copying source file to destination...
Input PNG is not optimized for iPhone OS.  Copying source file to destination...
Input PNG is an APNG.  Copying source file to destination...
   IHDR chunk data:
      Width=%ld, height=%ld
      Bit depth =%d
      Color type=%d
      Output color type=%d
      Interlace =%d
   Reducing all-gray truecolor image to grayscale.
   Reducing truecolor image to grayscale.
   Stripping opaque alpha channel.
   Stripping existing alpha channel.
   Adding an opaque alpha channel.
   Expanding indexed color file.
Warning: Input PNG does not have an 8 bit input depth.  Please convert your PNG to 8-bit for optimal performance on iPhone OS.
   Setting IHDR
Deleting all-zero cHRM chunk
   Inserting gAMA chunk with gamma=(%d/100000)
   gamma=(%d/100000)
   Inserting sRGB chunk with intent=%d
   Ignoring sRGB request; gamma=(%lu/100000) is not approx. 0.455
Got iccp chunk, proflen=%lu
Wrote iccp chunk, proflen=%d
   Deleting useless oFFs 0 0 chunk
   Deleting useless pHYs 0 0 chunk
   Added pHYs %lu %lu 1 chunk
  Found tRNS chunk in input file.
   Deleting all-opaque tRNS chunk.
   Truncating trailing opaque entries from tRNS chunk.
   png_set_tRNS, num_trans=%d
Have_tRNS, num_trans=%d
   Transparency:
      %4d %4d
      %d
      %d %d %d
PPLT: %s
   Palette:
      I    R    G    B ( color )    A
   %4d %4d %4d %4d (#%2.2x%2.2x%2.2x) %4d
Handling %d tEXt/zTXt chunks
%d  %s
: %s
 (%s: %s): 
Text chunk before IDAT, compression=%d
   Added a%scompressed iTXt chunk.
n un
Found %d unknown chunks
malloc for %d unknown chunks
Handling unknown chunk %d
   unknown[%d] = %s (%lu bytes, location %d)
Keeping %d unknown chunks
MHDR
  Writing a MNG file with a .png extension
reinitializing write zbuf to %lu.
   Compression window for output= %d
Insufficient memory to allocate row buffer
Begin interlace pass %d
End interlace pass %d
Text chunk after IDAT, compression=%d
setting %d unknown chunks after IDAT
MEND
While converting %s to %s:
While reading %s:
  pngcrush caught libpng error:
   %s
returning after cleanup
Could not find file %s: %s
Could not find file %s: %d
   %s with method %3d (fm %d zl %d zs %d) = %8lu
Decode us
IDAT length
FINISHED MAIN LOOP OVER %d METHODS
   Best pngcrush method = %d (fm %d zl %d zs %d) for %s
     (no IDAT change)
     (%4.2f%% IDAT reduction)
     (%4.2f%% IDAT increase)
     (no filesize change)
     (%4.2f%% filesize reduction)
     (%4.2f%% filesize increase)
   Number of open files=%d
kCGImageSourceSkipCRC
measure_idats: %s=%lu
While reading %s 
pngcrush caught libpng error:
   %s
Not a PNG file..
Reading %s chunk, length = %ld.
Photoshop ICC profile
Not a PNG file.
Begin count_colors() interlace pass %d
count_colors
pngcrush.c
num_rgba < 258
start + 1 < 258
i < 258
(png_uint_32)(rp - row_buf + 3) < rowbytes
(png_uint_32)(rp - row_buf + 1) < rowbytes
End count_colors() interlace pass %d
While checking alphas in %s 
RGBA=(%3.3d,%3.3d,%3.3d,%3.3d), frequency=%d
num_rgba=%d, total pixels=%d
hashcode misses=%d, inserts=%d
Finished checking alphas, result=%d
 | pngcrush %s
 |    Copyright (C) 1998-2002,2006 Glenn Randers-Pehrson
 |    Copyright (C) 2005      Greg Roelofs
 | This is a free, open-source program.  Permission is irrevocably
 | granted to everyone to use this version of pngcrush without
 | payment of any fee.
 | Executable name is %s
 | It was built with libpng version %s, and is
 | running with %s |    Copyright (C) 1998-2004,2006 Glenn Randers-Pehrson,
 |    Copyright (C) 1996, 1997 Andreas Dilger,
 |    Copyright (C) 1995, Guy Eric Schalnat, Group 42 Inc.,
 | and zlib version %s, Copyright (C) 1998-2002 (or later),
 |    Jean-loup Gailly and Mark Adler.
 | It was compiled with LLVM %s
Apple LLVM 16.0.0 (clang-1600.0.23.1)
 and modified by Apple as indicated in the sources
        -iphone (optimize for iPhone OS)
        -revert-iphone-optimizations (convert iPhone OS optimized PNG to a PNG readable on other platforms)
        -speed (optimize for decode speed)
      -already already_crushed_size [e.g., 8192]
               If file has an IDAT greater than this size, it
               will be considered to be already crushed and will
               not be processed, unless you are making other changes
               or the "-force" option is present.
    -bit_depth depth (bit_depth to use in output file)
               Default output depth is same as input depth.
        -brute (use brute-force: try 126 different methods [11-136])
               Very time-consuming and generally not worthwhile.
               You can restrict this option to certain filter types,
               compression levels, or strategies by following it
               with "-f filter", "-l level", or "-z strategy".
            -c color_type of output file [0, 2, 4, or 6]
               Color type for the output file.  Future versions
               will also allow color_type 3, if there are 256 or
               fewer colors present in the input file.  Color types
               4 and 6 are padded with an opaque alpha channel if
               the input file does not have alpha information.
               You can use 0 or 4 to convert color to grayscale.
               Use 0 or 2 to delete an unwanted alpha channel.
               Default is to use same color type as the input file.
           -cc (do color counting)
            -d directory_name (where output files will go)
               If a directory name is given, then the output
               files are placed in it, with the same filenames as
               those of the original files. For example,
               you would type 'pngcrush -directory CRUSHED *.png'
               to get *.png => CRUSHED/*.png
 -double_gamma (used for fixing gamma in PhotoShop 5.0/5.02 files)
               It has been claimed that the PS5 bug is actually
               more complex than that, in some unspecified way.
            -e extension  (used for creating output filename)
               e.g., -ext .new means *.png => *.new
               and -e _C.png means *.png => *_C.png
            -f user_filter [0-5]
               filter to use with the method specified in the
               preceding '-m method' or '-brute_force' argument.
               0: none; 1-4: use specified filter; 5: adaptive.
          -fix (fix otherwise fatal conditions such as bad CRCs)
        -force (write a new output file even if larger than input)
               Otherwise the input file will be copied to output
               if it is smaller than any generated file and no chunk
               additions, removals, or changes were requested.
            -g gamma (float or fixed*100000, e.g., 0.45455 or 45455)
               Value to insert in gAMA chunk, only if the input
               file has no gAMA chunk.  To replace an existing
               gAMA chunk, use the '-replace_gamma' option.
      -huffman (use only zlib strategy 2, Huffman-only)
               Fast, but almost never very effective except for
               certain rare image types.
         -iccp length "Profile Name" iccp_file
               file with ICC profile to insert in an iCCP chunk.
         -itxt b[efore_IDAT]|a[fter_IDAT] "keyword"
               "language_code" "translated_keyword" "text"
               Uncompressed iTXt chunk to insert (see -text).
            -l zlib_compression_level [0-9]
               zlib compression level to use with method specified
               with the preceding '-m method' or '-brute_force'
               argument.
         -loco ("loco crush" truecolor PNGs)
               Make the file more compressible by performing a
               lossless, reversible, color transformation.
               The resulting file is a MNG, not a PNG, and should
               be given the ".mng" file extension.  The
               "loco" option has no effect on grayscale or
               indexed-color PNG files.
            -m method [0 through 200]
               pngcrush method to try (0 means try all of 1-10).
               Can be repeated as in '-m 1 -m 4 -m 7'.
               This can be useful if pngcrush runs out of memory
               when it tries methods 2, 3, 5, 6, 8, 9, or 10 which
               use filtering and are memory-intensive.  Methods
               1, 4, and 7 use no filtering; methods 11 and up use
               specified filter, compression level, and strategy.
          -max maximum_IDAT_size [default 8192]
        -no_cc (no color counting)
  -nofilecheck (do not check for infile.png == outfile.png)
               To avoid false hits from MSVC-compiled code.  Note
               that if you use this option, you are responsible for
               ensuring that the input file is not the output file.
            -n (no save; does not do compression or write output PNG)
               Useful in conjunction with -v option to get info.
     -plte_len n (truncate PLTE)
               Truncates the PLTE.  Be sure not to truncate it to
               less than the greatest index present in IDAT.
            -q (quiet)
       -reduce (do lossless color-type or bit-depth reduction)
               (if possible)
          -rem chunkname (or "alla" or "allb")
               Name of an ancillary chunk or optional PLTE to be
               removed.  Be careful with this.  Please don't use 
               this feature to remove transparency, gamma, copyright,
               or other valuable information.  To remove several
               different chunks, repeat: -rem tEXt -rem pHYs.
               Known chunks (those in the PNG 1.1 spec or extensions
               document) can be named with all lower-case letters,
               so "-rem bkgd" is equivalent to "-rem bKGD".  But
               note: "-rem text" removes all forms of text chunks;
               Exact case is required to remove unknown chunks.
               To do surgery with a chain-saw, "-rem alla" removes
               all known ancillary chunks except for tRNS, and
               "-rem allb" removes all but tRNS and gAMA.
-replace_gamma gamma (float or fixed*100000) even if gAMA is present.
          -res dpi
               Write a pHYs chunk with the given resolution.
          -rle (use only zlib strategy 3, RLE-only)
               A relatively fast subset of the "-brute" methods,
               generally more effective than "-huffman" on PNG images
               (and quite effective on black-and-white images),
               but not necessarily worth the bother otherwise.
         -save (keep all copy-unsafe chunks)
               Save otherwise unknown ancillary chunks that would
               be considered copy-unsafe.  This option makes
               chunks 'known' to pngcrush, so they can be copied.
         -srgb [0, 1, 2, or 3]
               Value of 'rendering intent' for sRGB chunk.
         -text b[efore_IDAT]|a[fter_IDAT] "keyword" "text"
               tEXt chunk to insert.  keyword < 80 chars,
               text < 2048 chars. For now, you can add no more than
               ten tEXt, iTXt, or zTXt chunks per pngcrush run.
   -trns_array n trns[0] trns[1] .. trns[n-1]
               Insert a tRNS chunk, if no tRNS chunk found in file.
               Values are for the tRNS array in indexed-color PNG.
         -trns index red green blue gray
               You must give all five parameters regardless of the
               color type, scaled to the output bit depth.
            -v (display more detailed information)
               Repeat the option (use "-v -v") for even more.
      -version (display the pngcrush version)
            -w compression_window_size [32, 16, 8, 4, 2, 1, 512]
               Size of the sliding compression window, in kbytes
               (or bytes, in case of 512).  It's best to
               use the default (32) unless you run out of memory.
               The program will use a smaller window anyway when
               the uncompressed file is smaller than 16k.
            -z zlib_strategy [0, 1, 2, or 3]
               zlib compression strategy to use with the preceding
               '-m method' argument.
         -zmem zlib_compression_mem_level [1-9, default 9]
        -zitxt b[efore_IDAT]|a[fter_IDAT] "keyword"
               Compressed iTXt chunk to insert (see -text).
         -ztxt b[efore_IDAT]|a[fter_IDAT] "keyword" "text"
               zTXt chunk to insert (see -text).
            -h (help and legal notices)
               Display this information.
            -p (pause)
options (Note: any option can be spelled out for clarity, e.g.,
          "pngcrush -dir New -method 7 -remove bkgd *.png"
          is the same as "pngcrush -d New -m 7 -rem bkgd *.png"):
options:
               Wait for [enter] key before continuing display.
               e.g., type '%s -pause -help', if the help
               screen scrolls out of sight.
pngcrush.bak
_C.png
pngtest.png
pngout.png
In %s, correcting 
%s: No output file.
void copy_file(png_structp, FILE *, FILE *, const char *)
%s: No input file.
Copyright (C) 1998-2002,2006 Glenn Randers-Pehrson (glennrp@users.sf.net)
Copyright (C) 2005      Greg Roelofs
DISCLAIMER: The pngcrush computer program is supplied "AS IS".
The Author disclaims all warranties, expressed or implied, including,
without limitation, the warranties of merchantability and of fitness
for  any purpose.  The Author assumes no liability for direct, indirect,
incidental, special, exemplary, or consequential damages, which may
result from the use of the computer program, even if advised of the
possibility of such damage.  There is no warranty against interference
with your enjoyment of the computer program or against infringement.
There is no warranty that my efforts or the computer program will
fulfill any of your particular purposes or needs.  This computer
program is provided with all faults, and the entire risk of satisfactory
quality, performance, accuracy, and effort is with the user.
LICENSE: Permission is hereby irrevocably granted to everyone to use,
copy, modify, and distribute this computer program, or portions hereof,
purpose, without payment of any fee, subject to the following
restrictions:
1. The origin of this binary or source code must not be misrepresented.
2. Altered versions must be plainly marked as such and must not be
misrepresented as being the original binary or source.
3. The Copyright notice, disclaimer, and license may not be removed
or altered from any source, binary, or altered source distribution.
usage: %s [options] infile.png outfile.png
       %s -e ext [other options] files.png ...
       %s -d dir [other options] files.png ...
Opening file for length measurement
   Added a compressed iTXt chunk.
   Added an uncompressed iTXt chunk.
Reading and writing end_info data
   **** Converted non-gray image to gray. **** 
allocated rowbuf.
Wrote info struct
Writing info struct
unknown chunk handling done.
   Added a zTXt chunk.
   Added a tEXt chunk.
Sorry, PPLT is not implemented yet.
  Adding a tRNS chunk
  Will not overwrite existing tRNS chunk.
Will not replace existing iccp chunk.
  Cannot change to indexed color (color_type 3)
Transferring info struct
Reading info struct
io has been initialized.
Initializing input and output streams
structures created.
Allocating read_info, write_info, end_info structures
Allocating read and write structures
files are opened.
prepare to open files.
copy complete.
prepare to copy input to output
Finished counting colors. num_rgba is more than 256
insufficient parameters
Allocating read_info,  end_info structures
measure_idats:
Rerun pngcrush with the "-reduce" option to do so.
The image is opaque and the alpha channel could be removed.
The truecolor image is all gray and could be reduced.
The image is opaque and the alpha channel will be removed.
The truecolor image is all gray and will be reduced.
Destroyed data structs
Destroying data structs
Allocating read_info structure
Allocating read structure
Checking alphas:
   Replacing bad Photoshop ICCP chunk with an sRGB chunk
1.2.7
IHDR
IDAT
IEND
PLTE
bKGD
cHRM
gAMA
hIST
iCCP
iTXt
oFFs
pCAL
sCAL
pHYs
sBIT
sPLT
sRGB
CgBI
tEXt
tIME
tRNS
zTXt
iDOT
acTL
0123456789ABCDEF
666'
 !$%0145
!Error decoding compressed text
 0@P`p
!1AQaq
"2BRbr
#3CScs
$4DTdt
%5EUeu
&6FVfv
'7GWgw
(8HXhx
)9IYiy
*:JZjz
+;K[k{
,<L\l|
-=M]m}
.>N^n~
/?O_o
Too many bytes for PNG signature.
Potential overflow in png_zalloc()
Unknown freer parameter in png_data_freer.
%d %s %d %02d:%02d:%02d +0000
 libpng version 1.2.7 - September 12, 2004
   Copyright (c) 1998-2004 Glenn Randers-Pehrson
   Copyright (c) 1996-1997 Andreas Dilger
   Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.
1.2.7
 libpng version 1.2.7 - September 12, 2004 (header)
1.2.12
zlib memory error
zlib version error
Unknown zlib error
libpng error no. %s: %s
libpng error: %s, offset=%d
libpng error: %s
libpng warning no. %s: %s
libpng warning: %s
Invalid bit depth
Invalid color type
Invalid image width
Invalid image height
Width too large for libpng to process image data.
Out of Memory!
Not a PNG file
PNG file corrupted by ASCII conversion
Missing IHDR before IDAT
Missing PLTE before IDAT
Too many IDAT's found
Potential overflow of save_buffer
Not enough compressed data
Extra compression data
Extra compressed data
Decompression Error
Too much data in IDAT chunks
Out of place tEXt
Insufficient memory to store text chunk.
Out of place zTXt
unknown critical chunk
Application was compiled with png.h from libpng-%.20s
Application  is  running with png.c from libpng-%.20s
Incompatible libpng version in application and library
1.0.6 or earlier
The png struct allocated by the application for reading is too small.
The info struct allocated by application for reading is too small.
Application uses deprecated png_read_init() and should be recompiled.
Ignoring extra png_read_update_info() call; row buffer not reallocated
Invalid attempt to read row data
Decompression error
Not enough image data
Image is too high to process with png_read_png()
Call to NULL read function
Read Error
It's an error to set both read_data_fn and write_data_fn in the 
same structure.  Resetting write_data_fn to NULL.
Can't discard critical data on CRC error.
Application must supply a known background gamma
ignoring out of range rgb_to_gray coefficients
NULL row buffer for row %ld, pass %d
png_do_rgb_to_gray found nongray pixel
png_do_dither returned rowbytes=0
PNG unsigned integer out of range.
CRC error
Not enough memory to decompress chunk
Not enough memory to decompress chunk.
Not enough memory to decompress chunk..
Buffer error in compressed datastream in %s chunk
Data error in compressed datastream in %s chunk
Incomplete compressed datastream in %s chunk
Not enough memory for text.
Unknown zTXt compression type %d
Out of place IHDR
Invalid IHDR chunk
Missing IHDR before PLTE
Invalid PLTE after IDAT
Duplicate PLTE chunk
Ignoring PLTE chunk in grayscale PNG
Invalid palette chunk
Truncating incorrect tRNS chunk length
Truncating incorrect info tRNS chunk length
No image in file
Incorrect IEND chunk length
Missing IHDR before gAMA
Invalid gAMA after IDAT
Out of place gAMA chunk
Duplicate gAMA chunk
Incorrect gAMA chunk length
Ignoring gAMA chunk with gamma=0
Ignoring incorrect gAMA value when sRGB is also present
gamma = (%d/100000)
Missing IHDR before sBIT
Invalid sBIT after IDAT
Out of place sBIT chunk
Duplicate sBIT chunk
Incorrect sBIT chunk length
Missing IHDR before cHRM
Invalid cHRM after IDAT
Missing PLTE before cHRM
Duplicate cHRM chunk
Incorrect cHRM chunk length
Invalid cHRM white point
Invalid cHRM red point
Invalid cHRM green point
Invalid cHRM blue point
Ignoring incorrect cHRM value when sRGB is also present
wx=%f, wy=%f, rx=%f, ry=%f
gx=%f, gy=%f, bx=%f, by=%f
Missing IHDR before sRGB
Invalid sRGB after IDAT
Out of place sRGB chunk
Duplicate sRGB chunk
Incorrect sRGB chunk length
Unknown sRGB intent
incorrect gamma=(%d/100000)
Invalid CgBI after IDAT
Duplicate CgBI chunk
Incorrect CgBI chunk length
Missing IHDR before iCCP
Invalid iCCP after IDAT
Out of place iCCP chunk
Duplicate iCCP chunk
Malformed iCCP chunk
Ignoring nonzero compression type in iCCP chunk
Profile size field missing from iCCP chunk
Ignoring truncated iCCP profile.
Missing IHDR before sPLT
Invalid sPLT after IDAT
malformed sPLT chunk
sPLT chunk has bad length
sPLT chunk too long
sPLT chunk requires too much memory
Missing IHDR before tRNS
Invalid tRNS after IDAT
Duplicate tRNS chunk
Incorrect tRNS chunk length
Missing PLTE before tRNS
Zero length tRNS chunk
tRNS chunk not allowed with alpha channel
Missing IHDR before bKGD
Invalid bKGD after IDAT
Missing PLTE before bKGD
Duplicate bKGD chunk
Incorrect bKGD chunk length
Incorrect bKGD chunk index value
Missing IHDR before hIST
Invalid hIST after IDAT
Missing PLTE before hIST
Duplicate hIST chunk
Incorrect hIST chunk length
Missing IHDR before pHYs
Invalid pHYs after IDAT
Duplicate pHYs chunk
Incorrect pHYs chunk length
Missing IHDR before oFFs
Invalid oFFs after IDAT
Duplicate oFFs chunk
Incorrect oFFs chunk length
Missing IHDR before pCAL
Invalid pCAL after IDAT
Duplicate pCAL chunk
No memory for pCAL purpose.
Invalid pCAL data
Invalid pCAL parameters for equation type
Unrecognized equation type for pCAL chunk
No memory for pCAL params.
Missing IHDR before sCAL
Invalid sCAL after IDAT
Duplicate sCAL chunk
Out of memory while processing sCAL chunk
malformed width string in sCAL chunk
malformed height string in sCAL chunk
Invalid sCAL data
Out of place tIME chunk
Duplicate tIME chunk
Incorrect tIME chunk length
Missing IHDR before tEXt
No memory to process text chunk.
Not enough memory to process text chunk.
Insufficient memory to process text chunk.
Missing IHDR before zTXt
Out of memory processing zTXt chunk.
Zero length zTXt chunk
Unknown compression type in zTXt chunk
Not enough memory to process zTXt chunk.
Insufficient memory to store zTXt chunk.
Invalid acTL after IDAT
invalid chunk type
Ignoring bad adaptive filter type
Extra compressed data.
Ignoring attempt to set negative chromaticity value
Ignoring attempt to set chromaticity value exceeding 21474.83
Limiting gamma to 21474.83
Setting gamma=0
Setting negative gamma to zero
Palette size 0, hIST allocation skipped.
Insufficient memory for hIST chunk data.
Image width or height is zero in IHDR
image size exceeds user limits in IHDR
Invalid image size in IHDR
Width is too large for libpng to process pixels
Invalid bit depth in IHDR
Invalid color type in IHDR
Invalid color type/bit depth combination in IHDR
Unknown interlace method in IHDR
Unknown compression method in IHDR
MNG features are not allowed in a PNG datastream
Unknown filter method in IHDR
Invalid filter method in IHDR
Insufficient memory for pCAL purpose.
Insufficient memory for pCAL units.
Insufficient memory for pCAL params.
Insufficient memory for pCAL parameter.
Too late to change zlib mode.
Insufficient memory to process iCCP chunk.
Insufficient memory to process iCCP profile.
Insufficient memory to store text
iTXt chunk not supported.
No memory for sPLT palettes.
Out of memory while processing unknown chunk.
Out of memory processing unknown chunk.
Call to NULL write function
Write Error
Attempted to set both read_data_fn and write_data_fn in
the same structure.  Resetting read_data_fn to NULL.
Valid palette required for paletted images
Unable to write international text
No IDATs written into file
The png struct allocated by the application for writing is too small.
The info struct allocated by the application for writing is too small.
Application uses deprecated png_write_init() and should be recompiled.
png_write_info was never called before png_write_row.
zlib error
Unknown row filter for method 0
Can't add Up filter after starting
Can't add Average filter after starting
Can't add Paeth filter after starting
Unknown custom filter method
Unknown filter heuristic method
Only compression windows <= 32k supported by PNG
Only compression windows >= 256 supported by PNG
Compression window is being reset to 512
Only compression method 8 is supported by PNG
Invalid bit depth for grayscale image
Invalid bit depth for RGB image
Invalid bit depth for paletted image
Invalid bit depth for grayscale+alpha image
Invalid bit depth for RGBA image
Invalid image color type specified
Invalid compression type specified
Invalid filter type specified
Invalid interlace type specified
iPhone optimizations require 15-bit window.
Invalid number of colors in palette
Ignoring request to write a PLTE chunk in grayscale PNG
Invalid zlib compression method or flags in IDAT
Invalid sRGB rendering intent specified
Invalid CgBI raw-deflate flag after zlib stream started.
Empty keyword in iCCP chunk
Unknown compression type in iCCP chunk
Empty keyword in sPLT chunk
Invalid sBIT depth specified
Invalid cHRM white point specified
white_x=%f, white_y=%f
Invalid cHRM red point specified
Invalid cHRM green point specified
Invalid cHRM blue point specified
Invalid fixed cHRM white point specified
white_x=%ld, white_y=%ld
Invalid cHRM fixed red point specified
Invalid fixed cHRM green point specified
Invalid fixed cHRM blue point specified
Invalid number of transparent colors specified
Ignoring attempt to write tRNS chunk out-of-range for bit_depth
Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8
Can't write tRNS with an alpha channel
Invalid background palette index
Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8
Ignoring attempt to write bKGD chunk out-of-range for bit_depth
Invalid number of histogram entries specified
zero length keyword
Out of memory while procesing keyword
invalid keyword character 0x%02X
trailing spaces removed from keyword
leading spaces removed from keyword
extra interior spaces removed from keyword
Zero length keyword
keyword length must be 1 - 79 characters
Empty keyword in tEXt chunk
Empty keyword in zTXt chunk
Unrecognized unit type for oFFs chunk
%12.12e
Unrecognized unit type for pHYs chunk
Invalid time specified for tIME chunk
Unknown compression type %d
Press [ENTER] key to continue.
-rem
cHRM
chrm
gIFg
gifg
gIFt
gift
gIFx
gifx
hIST
hist
iCCP
iccp
pCAL
pcal
sCAL
scal
sPLT
splt
tIME
time
   Read the %s chunk.
     Check for removal of the %s chunk.
alla
text
PLTE
plte
bKGD
bkgd
gAMA
gama
iTXt
itxt
oFFs
offs
pHYs
phys
sBIT
sbit
sRGB
srgb
tEXt
tRNS
trns
zTXt
ztxt
   Removed the %s chunk.
   Preserving the %s chunk.
   CPU time used = %.3f seconds
 (decoding %.3f,
          encoding %.3f,
 other %.3f seconds)
Warning: versions are different between png.h and png.c
  png.h version: %s
  png.c version: %s
-fast
-huffman
-rle
-already
-bkgd
-bKGD
-brute
-bit_depth
-no_cc
-dou
-exit
-force
-fix
-loco
-iccp
Could not find file: %s
-max
-nofilecheck
-nosave
-plte_len
-pplt
-iphone
-revert-iphone-optimizations
-speed
-reduce
-rep
-res
-save
-srgb
-sRGB
-text
-tEXt
-itxt
-iTXt
-zitxt
-ziTXt
-ztxt
-zTXt
too many text/zTXt inputs; only 10 allowed
keyword exceeds 79 characters or text exceeds 2047 characters
-trns_a
-tRNS_a
-trns
-tRNS
-version
 pngcrush 
1.6.4
, uses libpng 
 and zlib 
Invalid window size (%d); using window size=4
could not create directory %s
directory %s is too long for buffer
filename %s is too long for buffer
full path is too long for buffer
Opening file %s for length measurement
File has already been crushed: %s
   Recompressing %s
   %s    = %8lu
Average us to decode
Total length of data found in IDAT chunks
Opening file %s for alpha check
Finished counting colors. num_rgba=%d
setting output color type to %d
ENTERING MAIN LOOP OVER %d METHODS
Could not find input file %s
Could not open output file %s
copying input to output... tc=%d ...
skipping "late" trial %d
skipping "early" trial %d
------------------------------------------------
Begin trial %d, filter %d, strategy %d, level %d
   Cannot overwrite input file %s
   st_ino=%d, st_size=%d
pngcrush could not create read_ptr
pngcrush could not create write_ptr
pngcrush could not create read_info_ptr
pngcrush could not create end_info_ptr
pngcrush could not create write_info_ptr
pngcrush could not create write_end_info_ptr
allb
Input file is not a PNG.  Copying source file to destination...
Not a PNG file!
Input PNG is already optimized for iPhone OS.  Copying source file to destination...
Input PNG is not optimized for iPhone OS.  Copying source file to destination...
Input PNG is an APNG.  Copying source file to destination...
   IHDR chunk data:
      Width=%ld, height=%ld
      Bit depth =%d
      Color type=%d
      Output color type=%d
      Interlace =%d
   Reducing all-gray truecolor image to grayscale.
   Reducing truecolor image to grayscale.
   Stripping opaque alpha channel.
   Stripping existing alpha channel.
   Adding an opaque alpha channel.
   Expanding indexed color file.
Warning: Input PNG does not have an 8 bit input depth.  Please convert your PNG to 8-bit for optimal performance on iPhone OS.
   Setting IHDR
Deleting all-zero cHRM chunk
   Inserting gAMA chunk with gamma=(%d/100000)
   gamma=(%d/100000)
   Inserting sRGB chunk with intent=%d
   Ignoring sRGB request; gamma=(%lu/100000) is not approx. 0.455
Got iccp chunk, proflen=%lu
Wrote iccp chunk, proflen=%d
   Deleting useless oFFs 0 0 chunk
   Deleting useless pHYs 0 0 chunk
   Added pHYs %lu %lu 1 chunk
  Found tRNS chunk in input file.
   Deleting all-opaque tRNS chunk.
   Truncating trailing opaque entries from tRNS chunk.
   png_set_tRNS, num_trans=%d
Have_tRNS, num_trans=%d
   Transparency:
      %4d %4d
      %d
      %d %d %d
PPLT: %s
   Palette:
      I    R    G    B ( color )    A
   %4d %4d %4d %4d (#%2.2x%2.2x%2.2x) %4d
Handling %d tEXt/zTXt chunks
%d  %s
: %s
 (%s: %s): 
Text chunk before IDAT, compression=%d
   Added a%scompressed iTXt chunk.
n un
Found %d unknown chunks
malloc for %d unknown chunks
Handling unknown chunk %d
   unknown[%d] = %s (%lu bytes, location %d)
Keeping %d unknown chunks
MHDR
  Writing a MNG file with a .png extension
reinitializing write zbuf to %lu.
   Compression window for output= %d
Insufficient memory to allocate row buffer
Begin interlace pass %d
End interlace pass %d
Text chunk after IDAT, compression=%d
setting %d unknown chunks after IDAT
MEND
While converting %s to %s:
While reading %s:
  pngcrush caught libpng error:
   %s
returning after cleanup
Could not find file %s: %s
Could not find file %s: %d
   %s with method %3d (fm %d zl %d zs %d) = %8lu
Decode us
IDAT length
FINISHED MAIN LOOP OVER %d METHODS
   Best pngcrush method = %d (fm %d zl %d zs %d) for %s
     (no IDAT change)
     (%4.2f%% IDAT reduction)
     (%4.2f%% IDAT increase)
     (no filesize change)
     (%4.2f%% filesize reduction)
     (%4.2f%% filesize increase)
   Number of open files=%d
kCGImageSourceSkipCRC
measure_idats: %s=%lu
While reading %s 
pngcrush caught libpng error:
   %s
Not a PNG file..
Reading %s chunk, length = %ld.
Photoshop ICC profile
Not a PNG file.
Begin count_colors() interlace pass %d
count_colors
pngcrush.c
num_rgba < 258
start + 1 < 258
i < 258
(png_uint_32)(rp - row_buf + 3) < rowbytes
(png_uint_32)(rp - row_buf + 1) < rowbytes
End count_colors() interlace pass %d
While checking alphas in %s 
RGBA=(%3.3d,%3.3d,%3.3d,%3.3d), frequency=%d
num_rgba=%d, total pixels=%d
hashcode misses=%d, inserts=%d
Finished checking alphas, result=%d
 | pngcrush %s
 |    Copyright (C) 1998-2002,2006 Glenn Randers-Pehrson
 |    Copyright (C) 2005      Greg Roelofs
 | This is a free, open-source program.  Permission is irrevocably
 | granted to everyone to use this version of pngcrush without
 | payment of any fee.
 | Executable name is %s
 | It was built with libpng version %s, and is
 | running with %s |    Copyright (C) 1998-2004,2006 Glenn Randers-Pehrson,
 |    Copyright (C) 1996, 1997 Andreas Dilger,
 |    Copyright (C) 1995, Guy Eric Schalnat, Group 42 Inc.,
 | and zlib version %s, Copyright (C) 1998-2002 (or later),
 |    Jean-loup Gailly and Mark Adler.
 | It was compiled with LLVM %s
Apple LLVM 16.0.0 (clang-1600.0.23.1)
 and modified by Apple as indicated in the sources
        -iphone (optimize for iPhone OS)
        -revert-iphone-optimizations (convert iPhone OS optimized PNG to a PNG readable on other platforms)
        -speed (optimize for decode speed)
      -already already_crushed_size [e.g., 8192]
               If file has an IDAT greater than this size, it
               will be considered to be already crushed and will
               not be processed, unless you are making other changes
               or the "-force" option is present.
    -bit_depth depth (bit_depth to use in output file)
               Default output depth is same as input depth.
        -brute (use brute-force: try 126 different methods [11-136])
               Very time-consuming and generally not worthwhile.
               You can restrict this option to certain filter types,
               compression levels, or strategies by following it
               with "-f filter", "-l level", or "-z strategy".
            -c color_type of output file [0, 2, 4, or 6]
               Color type for the output file.  Future versions
               will also allow color_type 3, if there are 256 or
               fewer colors present in the input file.  Color types
               4 and 6 are padded with an opaque alpha channel if
               the input file does not have alpha information.
               You can use 0 or 4 to convert color to grayscale.
               Use 0 or 2 to delete an unwanted alpha channel.
               Default is to use same color type as the input file.
           -cc (do color counting)
            -d directory_name (where output files will go)
               If a directory name is given, then the output
               files are placed in it, with the same filenames as
               those of the original files. For example,
               you would type 'pngcrush -directory CRUSHED *.png'
               to get *.png => CRUSHED/*.png
 -double_gamma (used for fixing gamma in PhotoShop 5.0/5.02 files)
               It has been claimed that the PS5 bug is actually
               more complex than that, in some unspecified way.
            -e extension  (used for creating output filename)
               e.g., -ext .new means *.png => *.new
               and -e _C.png means *.png => *_C.png
            -f user_filter [0-5]
               filter to use with the method specified in the
               preceding '-m method' or '-brute_force' argument.
               0: none; 1-4: use specified filter; 5: adaptive.
          -fix (fix otherwise fatal conditions such as bad CRCs)
        -force (write a new output file even if larger than input)
               Otherwise the input file will be copied to output
               if it is smaller than any generated file and no chunk
               additions, removals, or changes were requested.
            -g gamma (float or fixed*100000, e.g., 0.45455 or 45455)
               Value to insert in gAMA chunk, only if the input
               file has no gAMA chunk.  To replace an existing
               gAMA chunk, use the '-replace_gamma' option.
      -huffman (use only zlib strategy 2, Huffman-only)
               Fast, but almost never very effective except for
               certain rare image types.
         -iccp length "Profile Name" iccp_file
               file with ICC profile to insert in an iCCP chunk.
         -itxt b[efore_IDAT]|a[fter_IDAT] "keyword"
               "language_code" "translated_keyword" "text"
               Uncompressed iTXt chunk to insert (see -text).
            -l zlib_compression_level [0-9]
               zlib compression level to use with method specified
               with the preceding '-m method' or '-brute_force'
               argument.
         -loco ("loco crush" truecolor PNGs)
               Make the file more compressible by performing a
               lossless, reversible, color transformation.
               The resulting file is a MNG, not a PNG, and should
               be given the ".mng" file extension.  The
               "loco" option has no effect on grayscale or
               indexed-color PNG files.
            -m method [0 through 200]
               pngcrush method to try (0 means try all of 1-10).
               Can be repeated as in '-m 1 -m 4 -m 7'.
               This can be useful if pngcrush runs out of memory
               when it tries methods 2, 3, 5, 6, 8, 9, or 10 which
               use filtering and are memory-intensive.  Methods
               1, 4, and 7 use no filtering; methods 11 and up use
               specified filter, compression level, and strategy.
          -max maximum_IDAT_size [default 8192]
        -no_cc (no color counting)
  -nofilecheck (do not check for infile.png == outfile.png)
               To avoid false hits from MSVC-compiled code.  Note
               that if you use this option, you are responsible for
               ensuring that the input file is not the output file.
            -n (no save; does not do compression or write output PNG)
               Useful in conjunction with -v option to get info.
     -plte_len n (truncate PLTE)
               Truncates the PLTE.  Be sure not to truncate it to
               less than the greatest index present in IDAT.
            -q (quiet)
       -reduce (do lossless color-type or bit-depth reduction)
               (if possible)
          -rem chunkname (or "alla" or "allb")
               Name of an ancillary chunk or optional PLTE to be
               removed.  Be careful with this.  Please don't use 
               this feature to remove transparency, gamma, copyright,
               or other valuable information.  To remove several
               different chunks, repeat: -rem tEXt -rem pHYs.
               Known chunks (those in the PNG 1.1 spec or extensions
               document) can be named with all lower-case letters,
               so "-rem bkgd" is equivalent to "-rem bKGD".  But
               note: "-rem text" removes all forms of text chunks;
               Exact case is required to remove unknown chunks.
               To do surgery with a chain-saw, "-rem alla" removes
               all known ancillary chunks except for tRNS, and
               "-rem allb" removes all but tRNS and gAMA.
-replace_gamma gamma (float or fixed*100000) even if gAMA is present.
          -res dpi
               Write a pHYs chunk with the given resolution.
          -rle (use only zlib strategy 3, RLE-only)
               A relatively fast subset of the "-brute" methods,
               generally more effective than "-huffman" on PNG images
               (and quite effective on black-and-white images),
               but not necessarily worth the bother otherwise.
         -save (keep all copy-unsafe chunks)
               Save otherwise unknown ancillary chunks that would
               be considered copy-unsafe.  This option makes
               chunks 'known' to pngcrush, so they can be copied.
         -srgb [0, 1, 2, or 3]
               Value of 'rendering intent' for sRGB chunk.
         -text b[efore_IDAT]|a[fter_IDAT] "keyword" "text"
               tEXt chunk to insert.  keyword < 80 chars,
               text < 2048 chars. For now, you can add no more than
               ten tEXt, iTXt, or zTXt chunks per pngcrush run.
   -trns_array n trns[0] trns[1] .. trns[n-1]
               Insert a tRNS chunk, if no tRNS chunk found in file.
               Values are for the tRNS array in indexed-color PNG.
         -trns index red green blue gray
               You must give all five parameters regardless of the
               color type, scaled to the output bit depth.
            -v (display more detailed information)
               Repeat the option (use "-v -v") for even more.
      -version (display the pngcrush version)
            -w compression_window_size [32, 16, 8, 4, 2, 1, 512]
               Size of the sliding compression window, in kbytes
               (or bytes, in case of 512).  It's best to
               use the default (32) unless you run out of memory.
               The program will use a smaller window anyway when
               the uncompressed file is smaller than 16k.
            -z zlib_strategy [0, 1, 2, or 3]
               zlib compression strategy to use with the preceding
               '-m method' argument.
         -zmem zlib_compression_mem_level [1-9, default 9]
        -zitxt b[efore_IDAT]|a[fter_IDAT] "keyword"
               Compressed iTXt chunk to insert (see -text).
         -ztxt b[efore_IDAT]|a[fter_IDAT] "keyword" "text"
               zTXt chunk to insert (see -text).
            -h (help and legal notices)
               Display this information.
            -p (pause)
options (Note: any option can be spelled out for clarity, e.g.,
          "pngcrush -dir New -method 7 -remove bkgd *.png"
          is the same as "pngcrush -d New -m 7 -rem bkgd *.png"):
options:
               Wait for [enter] key before continuing display.
               e.g., type '%s -pause -help', if the help
               screen scrolls out of sight.
pngcrush.bak
_C.png
pngtest.png
pngout.png
In %s, correcting 
%s: No output file.
void copy_file(png_structp, FILE *, FILE *, const char *)
%s: No input file.
Copyright (C) 1998-2002,2006 Glenn Randers-Pehrson (glennrp@users.sf.net)
Copyright (C) 2005      Greg Roelofs
DISCLAIMER: The pngcrush computer program is supplied "AS IS".
The Author disclaims all warranties, expressed or implied, including,
without limitation, the warranties of merchantability and of fitness
for  any purpose.  The Author assumes no liability for direct, indirect,
incidental, special, exemplary, or consequential damages, which may
result from the use of the computer program, even if advised of the
possibility of such damage.  There is no warranty against interference
with your enjoyment of the computer program or against infringement.
There is no warranty that my efforts or the computer program will
fulfill any of your particular purposes or needs.  This computer
program is provided with all faults, and the entire risk of satisfactory
quality, performance, accuracy, and effort is with the user.
LICENSE: Permission is hereby irrevocably granted to everyone to use,
copy, modify, and distribute this computer program, or portions hereof,
purpose, without payment of any fee, subject to the following
restrictions:
1. The origin of this binary or source code must not be misrepresented.
2. Altered versions must be plainly marked as such and must not be
misrepresented as being the original binary or source.
3. The Copyright notice, disclaimer, and license may not be removed
or altered from any source, binary, or altered source distribution.
usage: %s [options] infile.png outfile.png
       %s -e ext [other options] files.png ...
       %s -d dir [other options] files.png ...
Opening file for length measurement
   Added a compressed iTXt chunk.
   Added an uncompressed iTXt chunk.
Reading and writing end_info data
   **** Converted non-gray image to gray. **** 
allocated rowbuf.
Wrote info struct
Writing info struct
unknown chunk handling done.
   Added a zTXt chunk.
   Added a tEXt chunk.
Sorry, PPLT is not implemented yet.
  Adding a tRNS chunk
  Will not overwrite existing tRNS chunk.
Will not replace existing iccp chunk.
  Cannot change to indexed color (color_type 3)
Transferring info struct
Reading info struct
io has been initialized.
Initializing input and output streams
structures created.
Allocating read_info, write_info, end_info structures
Allocating read and write structures
files are opened.
prepare to open files.
copy complete.
prepare to copy input to output
Finished counting colors. num_rgba is more than 256
insufficient parameters
Allocating read_info,  end_info structures
measure_idats:
Rerun pngcrush with the "-reduce" option to do so.
The image is opaque and the alpha channel could be removed.
The truecolor image is all gray and could be reduced.
The image is opaque and the alpha channel will be removed.
The truecolor image is all gray and will be reduced.
Destroyed data structs
Destroying data structs
Allocating read_info structure
Allocating read structure
Checking alphas:
   Replacing bad Photoshop ICCP chunk with an sRGB chunk
