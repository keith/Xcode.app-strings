0123456789ABCDEF
0000000000000000                                                                                
:&L<(R
xsd1
:&L<(R
[0;30m
[0;31m
[0;32m
[0;33m
[0;34m
[0;35m
[0;36m
[0;37m
[0;1;30m
[0;1;31m
[0;1;32m
[0;1;33m
[0;1;34m
[0;1;35m
[0;1;36m
[0;1;37m
[0;40m
[0;41m
[0;42m
[0;43m
[0;44m
[0;45m
[0;46m
[0;47m
[0;1;40m
[0;1;41m
[0;1;42m
[0;1;43m
[0;1;44m
[0;1;45m
[0;1;46m
[0;1;47m
LLVM_DISABLE_SYMBOLIZATION
LLVM_SYMBOLIZER_PATH
Driver
file specified in --source (-s) option doesn't exist: '%s'
command source -s %i '%s'
file specified in --core (-c) option doesn't exist: '%s'
target.load-cwd-lldbinit
true
file specified in --file (-f) option doesn't exist: '%s'
invalid architecture in the -a or --arch option: '%s'
Could not convert process PID: "%s" into a pid.
Unrecognized language name: "%s"
program arguments are ignored when attaching.
<PATH TOO LONG>
<COULD NOT FIND PATH>
no script interpreter.
target create --arch=%s %s
target create %s
 --core %s
settings set -- target.run-args 
target create --core %s
process attach --name %s
 --waitfor
process attach --pid %llu
commands specified to run after file load (via -o or -s) are ignored in REPL mode.
argument to '
' is missing
unknown option: 
Use '
 --help' for a complete list of options.
initialization failed: 
Waiting for background tasks to complete...
attaching
ATTACHING
command
COMMANDS
repl
REPL
scripting
SCRIPTING
<input>
<unknown>
--arch
Tells the debugger to use the specified architecture when starting and running the program.
<architecture>
--attach-name
Tells the debugger to attach to a process with the given name.
<name>
--attach-pid
Tells the debugger to attach to a process with the given pid.
<pid>
Alias for --arch
--batch
Tells the debugger to run the commands from -s, -S, -o & -O, and then quit.
Alias for --batch
--core
Tells the debugger to use the full path to <filename> as the core file.
<filename>
Alias for --core
--debug
Tells the debugger to print out extra information for debugging itself.
Alias for --debug
--editor
Tells the debugger to open source files using the host's "external editor" mechanism.
Alias for --editor
--file
Tells the debugger to use the file <filename> as the program to be debugged.
Alias for --file
--help
Prints out the usage information for the LLDB debugger.
Alias for --help
Alias for --source-on-crash
Alias for --one-line-on-crash
--local-lldbinit
Allow the debugger to parse the .lldbinit files in the current working directory, unless --no-lldbinit is passed.
Alias for --script-language
--no-lldbinit
Do not automatically parse any '.lldbinit' files.
--no-use-colors
Do not use colors.
Alias for --attach-name
--one-line-before-file
Tells the debugger to execute this one-line lldb command before any file provided on the command line has been loaded.
<command>
--one-line-on-crash
When in batch mode, tells the debugger to run this one-line lldb command if the target crashes.
--one-line
Tells the debugger to execute this one-line lldb command after any file provided on the command line has been loaded.
Alias for --one-line-before-file
Alias for --one-line
--print-script-interpreter-info
Prints out a json dictionary with information about the scripting language interpreter.
--python-path
Prints out the path to the lldb.py file for this version of lldb.
Alias for --python-path
Alias for --attach-pid
Alias for --source-quietly
Alias for --repl=<flags>
<flags>
--repl-language
Chooses the language for the REPL.
<language>
--repl=
Runs lldb in REPL mode with a stub process with the given flags.
--repl
Runs lldb in REPL mode with a stub process.
Alias for --repl-language
Alias for --repl
--script-language
Tells the debugger to use the specified scripting language for user-defined scripts.
--source-before-file
Tells the debugger to read in and execute the lldb commands in the given file, before any file has been loaded.
<file>
--source-on-crash
When in batch mode, tells the debugger to source this file of lldb commands if the target crashes.
--source-quietly
Tells the debugger not to echo commands while sourcing files or one-line commands provided on the command line.
--source
Tells the debugger to read in and execute the lldb commands in the given file, after any file has been loaded.
Alias for --source-before-file
Alias for --source
--version
Prints out the current version number of the LLDB debugger.
Alias for --version
--wait-for
Tells the debugger to wait for a process with the given pid or name to launch before attaching.
Alias for --wait-for
Alias for --no-use-color
Alias for --no-lldbinit
 [options]
LLDB
EXAMPLES:
  The debugger can be started in several modes.
  Passing an executable as a positional argument prepares lldb to debug the
  given executable. To disambiguate between arguments passed to lldb and
  arguments passed to the debugged executable, arguments starting with a - must
  be passed after --.
    lldb --arch x86_64 /path/to/program program argument -- --arch armv7
  For convenience, passing the executable after -- is also supported.
    lldb --arch x86_64 -- /path/to/program program argument --arch armv7
  Passing one of the attach options causes lldb to immediately attach to the
  given process.
    lldb -p <pid>
    lldb -n <process-name>
  Passing --repl starts lldb in REPL mode.
    lldb -r
  Passing --core causes lldb to debug the core file.
    lldb -c /path/to/core
  Command options can be combined with these modes and cause lldb to run the
  specified commands before or after events, like loading the file or crashing,
  in the order provided on the command line.
    lldb -O 'settings set stop-disassembly-count 20' -o 'run' -o 'bt'
    lldb -S /source/before/file -s /source/after/file
    lldb -K /source/before/crash -k /source/after/crash
  Note: In REPL mode no file is loaded, so commands specified to run after
  loading the file (via -o or -s) will be ignored.
thread constructor failed
OVERVIEW: 
USAGE: 
OPTIONS
 <value>
<value>
: for the 
 option: 
>...
false
' is invalid value for boolean argument! Try 0 or 1
 (default: 
*no default*
General options
: CommandLine Error: Option '
' registered more than once!
inconsistency in registered CommandLine options
Cannot specify more than one option with cl::ConsumeAfter!
long
char
Error
Inconvertible error value. An error has occurred that could not be converted to a known std::error_code. Please file a bug.
A file error occurred.
Multiple errors:
LLVM ERROR: 
LLVM ERROR: out of memory
Allocation failed
Program arguments: 
PLEASE submit a bug report to https://developer.apple.com/bug-reporting/ and include the crash backtrace.
Stack dump:
No crash information.
SmallVector unable to grow. Requested capacity (
) is larger than maximum value for size type (
SmallVector capacity unable to grow. Already at maximum size 
Color Options
error: 
warning: 
color
Use colors in output (default=autodetect)
IO failure on output stream: 
/dev/null
0123456789abcdef
-%%%%%%
-%%%%%%.
TMPDIR
TEMP
TEMPDIR
TERM
colors
PATH
Child timed out but wouldn't die
Error waiting for child process
Program could not be executed
 (core dumped)
" doesn't exist!
Can't redirect stderr to stdout
posix_spawn failed
Cannot posix_spawn_file_actions_addopen
Cannot open file '
' for 
input
output
llvm-symbolizer
symbolizer-input
symbolizer-output
--functions=linkage
--inlining
--demangle
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
%-2d
 %-*s
 %#0*lx
 + %tu
LLVM_DISABLE_CRASH_REPORT
#{0}
too many signal callbacks already registered
%LaL
invocation function for block in 
template parameter object for 
vtable for 
VTT for 
typeinfo for 
typeinfo name for 
covariant return thunk to 
thread-local wrapper routine for 
thread-local initialization routine for 
virtual thunk to 
non-virtual thunk to 
guard variable for 
reference temporary for 
initializer for module 
construction vtable for 
(anonymous namespace)
auto
decltype
noexcept 
sizeof... 
throw
operator&=
operator=
operator&&
operator&
alignof 
operator co_await
const_cast
operator()
operator,
operator~
operator
operator/=
operator delete[]
dynamic_cast
operator*
operator delete
operator.*
operator.
operator/
operator^=
operator^
operator==
operator>=
operator>
operator[]
operator<<=
operator<=
operator<<
operator<
operator-=
operator*=
operator-
operator--
operator new[]
operator!=
operator!
operator new
operator|=
operator||
operator|
operator+=
operator+
operator->*
operator++
operator->
operator?
operator%=
operator>>=
reinterpret_cast
operator%
operator>>
static_cast
operator<=>
sizeof 
typeid 
wchar_t
signed char
unsigned char
short
unsigned short
__int128
unsigned __int128
nullptr
yptn
'block-literal'
this
<char, std::char_traits<char>
, std::allocator<char>
allocator
basic_string
basic_istream
basic_ostream
basic_iostream
string literal
void
bool
unsigned int
unsigned long
long long
unsigned long long
float
double
long double
__float128
decimal64
decimal128
decimal32
half
char32_t
char16_t
char8_t
decltype(auto)
std::nullptr_t
 complex
 imaginary
noexcept
struct
union
enum
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.lldb</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>lldb</string>
<key>CFBundleVersion</key>
<string>1600.0.30.5</string>
<key>SecTaskAccess</key>
<array>
<string>allowed</string>
<string>debug</string>
</array>
</dict>
</plist>
%/139?EK
0123456789ABCDEF
                                                                                
:&L<(R
xsd1
:&L<(R
[0;30m
[0;31m
[0;32m
[0;33m
[0;34m
[0;35m
[0;36m
[0;37m
[0;1;30m
[0;1;31m
[0;1;32m
[0;1;33m
[0;1;34m
[0;1;35m
[0;1;36m
[0;1;37m
[0;40m
[0;41m
[0;42m
[0;43m
[0;44m
[0;45m
[0;46m
[0;47m
[0;1;40m
[0;1;41m
[0;1;42m
[0;1;43m
[0;1;44m
[0;1;45m
[0;1;46m
[0;1;47m
LLVM_DISABLE_SYMBOLIZATION
LLVM_SYMBOLIZER_PATH
cccc
ccccccccc0SE
8>8888@88888B888D
Driver
file specified in --source (-s) option doesn't exist: '%s'
command source -s %i '%s'
file specified in --core (-c) option doesn't exist: '%s'
target.load-cwd-lldbinit
true
file specified in --file (-f) option doesn't exist: '%s'
invalid architecture in the -a or --arch option: '%s'
Could not convert process PID: "%s" into a pid.
Unrecognized language name: "%s"
program arguments are ignored when attaching.
<PATH TOO LONG>
<COULD NOT FIND PATH>
no script interpreter.
target create --arch=%s %s
target create %s
 --core %s
settings set -- target.run-args 
target create --core %s
process attach --name %s
 --waitfor
process attach --pid %llu
commands specified to run after file load (via -o or -s) are ignored in REPL mode.
argument to '
' is missing
unknown option: 
Use '
 --help' for a complete list of options.
initialization failed: 
Waiting for background tasks to complete...
attaching
ATTACHING
command
COMMANDS
repl
REPL
scripting
SCRIPTING
<input>
<unknown>
--arch
Tells the debugger to use the specified architecture when starting and running the program.
<architecture>
--attach-name
Tells the debugger to attach to a process with the given name.
<name>
--attach-pid
Tells the debugger to attach to a process with the given pid.
<pid>
Alias for --arch
--batch
Tells the debugger to run the commands from -s, -S, -o & -O, and then quit.
Alias for --batch
--core
Tells the debugger to use the full path to <filename> as the core file.
<filename>
Alias for --core
--debug
Tells the debugger to print out extra information for debugging itself.
Alias for --debug
--editor
Tells the debugger to open source files using the host's "external editor" mechanism.
Alias for --editor
--file
Tells the debugger to use the file <filename> as the program to be debugged.
Alias for --file
--help
Prints out the usage information for the LLDB debugger.
Alias for --help
Alias for --source-on-crash
Alias for --one-line-on-crash
--local-lldbinit
Allow the debugger to parse the .lldbinit files in the current working directory, unless --no-lldbinit is passed.
Alias for --script-language
--no-lldbinit
Do not automatically parse any '.lldbinit' files.
--no-use-colors
Do not use colors.
Alias for --attach-name
--one-line-before-file
Tells the debugger to execute this one-line lldb command before any file provided on the command line has been loaded.
<command>
--one-line-on-crash
When in batch mode, tells the debugger to run this one-line lldb command if the target crashes.
--one-line
Tells the debugger to execute this one-line lldb command after any file provided on the command line has been loaded.
Alias for --one-line-before-file
Alias for --one-line
--print-script-interpreter-info
Prints out a json dictionary with information about the scripting language interpreter.
--python-path
Prints out the path to the lldb.py file for this version of lldb.
Alias for --python-path
Alias for --attach-pid
Alias for --source-quietly
Alias for --repl=<flags>
<flags>
--repl-language
Chooses the language for the REPL.
<language>
--repl=
Runs lldb in REPL mode with a stub process with the given flags.
--repl
Runs lldb in REPL mode with a stub process.
Alias for --repl-language
Alias for --repl
--script-language
Tells the debugger to use the specified scripting language for user-defined scripts.
--source-before-file
Tells the debugger to read in and execute the lldb commands in the given file, before any file has been loaded.
<file>
--source-on-crash
When in batch mode, tells the debugger to source this file of lldb commands if the target crashes.
--source-quietly
Tells the debugger not to echo commands while sourcing files or one-line commands provided on the command line.
--source
Tells the debugger to read in and execute the lldb commands in the given file, after any file has been loaded.
Alias for --source-before-file
Alias for --source
--version
Prints out the current version number of the LLDB debugger.
Alias for --version
--wait-for
Tells the debugger to wait for a process with the given pid or name to launch before attaching.
Alias for --wait-for
Alias for --no-use-color
Alias for --no-lldbinit
 [options]
LLDB
EXAMPLES:
  The debugger can be started in several modes.
  Passing an executable as a positional argument prepares lldb to debug the
  given executable. To disambiguate between arguments passed to lldb and
  arguments passed to the debugged executable, arguments starting with a - must
  be passed after --.
    lldb --arch x86_64 /path/to/program program argument -- --arch armv7
  For convenience, passing the executable after -- is also supported.
    lldb --arch x86_64 -- /path/to/program program argument --arch armv7
  Passing one of the attach options causes lldb to immediately attach to the
  given process.
    lldb -p <pid>
    lldb -n <process-name>
  Passing --repl starts lldb in REPL mode.
    lldb -r
  Passing --core causes lldb to debug the core file.
    lldb -c /path/to/core
  Command options can be combined with these modes and cause lldb to run the
  specified commands before or after events, like loading the file or crashing,
  in the order provided on the command line.
    lldb -O 'settings set stop-disassembly-count 20' -o 'run' -o 'bt'
    lldb -S /source/before/file -s /source/after/file
    lldb -K /source/before/crash -k /source/after/crash
  Note: In REPL mode no file is loaded, so commands specified to run after
  loading the file (via -o or -s) will be ignored.
thread constructor failed
OVERVIEW: 
USAGE: 
OPTIONS
 <value>
<value>
: for the 
 option: 
>...
false
' is invalid value for boolean argument! Try 0 or 1
 (default: 
*no default*
General options
: CommandLine Error: Option '
' registered more than once!
inconsistency in registered CommandLine options
Cannot specify more than one option with cl::ConsumeAfter!
long
char
Error
Multiple errors
Inconvertible error value. An error has occurred that could not be converted to a known std::error_code. Please file a bug.
A file error occurred.
Multiple errors:
LLVM ERROR: 
LLVM ERROR: out of memory
Allocation failed
Program arguments: 
PLEASE submit a bug report to https://developer.apple.com/bug-reporting/ and include the crash backtrace.
Stack dump:
No crash information.
SmallVector unable to grow. Requested capacity (
) is larger than maximum value for size type (
SmallVector capacity unable to grow. Already at maximum size 
Color Options
error: 
warning: 
color
Use colors in output (default=autodetect)
IO failure on output stream: 
/dev/null
0123456789abcdef
-%%%%%%
-%%%%%%.
TMPDIR
TEMP
TEMPDIR
/var/tmp/
TERM
colors
PATH
Child timed out but wouldn't die
Child timed out
Error waiting for child process
Program could not be executed
 (core dumped)
Executable "
" doesn't exist!
Can't redirect stderr to stdout
posix_spawn failed
Couldn't fork
Cannot posix_spawn_file_actions_addopen
Cannot open file '
' for 
input
output
Cannot dup2
llvm-symbolizer
symbolizer-input
symbolizer-output
--functions=linkage
--inlining
--demangle
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
%-2d
 %-*s
 %#0*lx
 + %tu
LLVM_DISABLE_CRASH_REPORT
#{0}
too many signal callbacks already registered
%LaL
invocation function for block in 
template parameter object for 
vtable for 
VTT for 
typeinfo for 
typeinfo name for 
covariant return thunk to 
thread-local wrapper routine for 
thread-local initialization routine for 
virtual thunk to 
non-virtual thunk to 
guard variable for 
reference temporary for 
initializer for module 
construction vtable for 
(anonymous namespace)
auto
decltype
noexcept 
sizeof... 
throw
operator&=
operator=
operator&&
operator&
alignof 
operator co_await
const_cast
operator()
operator,
operator~
operator
operator/=
operator delete[]
dynamic_cast
operator*
operator delete
operator.*
operator.
operator/
operator^=
operator^
operator==
operator>=
operator>
operator[]
operator<<=
operator<=
operator<<
operator<
operator-=
operator*=
operator-
operator--
operator new[]
operator!=
operator!
operator new
operator|=
operator||
operator|
operator+=
operator+
operator->*
operator++
operator->
operator?
operator%=
operator>>=
reinterpret_cast
operator%
operator>>
static_cast
operator<=>
sizeof 
typeid 
wchar_t
signed char
unsigned char
short
unsigned short
__int128
unsigned __int128
nullptr
yptn
'block-literal'
typename 
template<
> typename 
this
 at offset 
sizeof...
operator 
operator"" 
<char, std::char_traits<char>
, std::allocator<char>
allocator
basic_string
basic_istream
basic_ostream
basic_iostream
string literal
 [enable_if:
 volatile
 restrict
void
bool
unsigned int
unsigned long
long long
unsigned long long
float
double
long double
__float128
decimal64
decimal128
decimal32
half
char32_t
char16_t
char8_t
decltype(auto)
std::nullptr_t
 complex
 imaginary
noexcept
unsigned 
pixel vector[
struct
union
enum
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.lldb</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>lldb</string>
<key>CFBundleVersion</key>
<string>1600.0.30.5</string>
<key>SecTaskAccess</key>
<array>
<string>allowed</string>
<string>debug</string>
</array>
</dict>
</plist>
