@(#)PROGRAM:realitytool  PROJECT:RealityTools-448.0.0.500.6
@realitytool
RealityTool
URLResourceKey
NNSURLResourceKey
REStartupOptions
OSLogType
Nos_log_type_t
RETextureASTCCompressionQuality
RETextureASTCCompressionMode
RETextureASTCCompressionBlockSize
REEnvironmentResourceCreateSamplingQuality
RECubeMapCreateLatLongSamplingQuality
Foundation
RealityToolError
UseMetal
StandardError
StandardOutput
OutputDef
LogType
ModuleWithDependenciesError
RKAssetsCustomComponentsSchemaHandler
CustomFileManagerDelegate
DerivedDataError
URLError
RKAssetsCompiler
RKAssetsCompilerError
ArgumentPathSpec
@CreateSchemaCommand
CodingKeys
ImageCommand
CodingKeys
Mode
IblCodingKeys
CubemapCodingKeys
TextureCodingKeys
CompileCommand
CodingKeys
SimulatorToolAdapter
ArgumentParser
CompletionShell
Argument
ArgumentArrayParsingStrategy
InputKey
ExpressibleByArgument
ParsedWrapper
Value
DecodableParsedWrapper
Parsed
ToolInfoHeader
ToolInfoV0
CommandInfoV0
ArgumentInfoV0
NameInfoV0
KindV0
CodingKeys
HelpCommand
CodingKeys
InputOrigin
Element
ArgumentDecoder
ParsedArgumentsContainer
ArrayWrapperProtocol
DecodedArguments
SingleValueDecoder
UnkeyedContainer
ArrayWrapper
SingleValueContainer
Error
CommandConfiguration
ValidationError
ExitCode
CleanExit
Representation
ArgumentDefinitionContainer
Contained Initial
ArgumentDefinitionContainerExpressibleByArgument
ArgumentDefinition
ParsingStrategy
Bare
Update
Help
Kind
Options
ParsedValues
Element
NameSpecification
Element
Representation
CompletionKind
Kind
Option
SingleValueParsingStrategy
ArrayParsingStrategy
Tree
InitializationError
InputIndex
ParsedArgument
Value
Element
Index
SplitArguments
SubIndex
MessageInfo
CommandError
AutodetectedGenerateCompletions
GenerateCompletions
HelpRequested
CodingKeys
OptionGroup
ParsableCommand
StandardError
Platform
ArgumentVisibility
Representation
ParsableArguments
ArgumentSetProvider
_WrappedParsableCommand
CodingKeys
ParserError
InternalParseError
Flag
FlagInversion
FlagExclusivity
Representation
Element
HelpGenerator
Section
DiscussionSection
Header
Name
ArgumentHelp
ArgumentSet
T@"NSNumber",C,N,V_signalNumber
JSONObjectWithData:options:error:
_backtraceQueue
T@"NSArray",R,N,V_frameworkSearchPaths
_registrationID
T@"NSError",&,N,V_error
containsObject:
T@"NSNumber",C,N,V_exitStatus
initWithPlatformName:launchPath:frameworkSearchPaths:arguments:
T@"NSNumber",R,N,V_processIdentifier
isAlive
T@"NSString",C,N,V_processFailureDescription
numberWithBool:
T@"NSString",R,N,V_launchPath
release
T@"RTSimulatorToolLaunchContext",R,N,V_launchContext
T@?,R,C,N,V_terminationHandler
stringByAppendingPathComponent:
Tc,N,V_success
success
.cxx_destruct
T@"NSString",R,N,V_platformName
T@"NSArray",R,N,V_arguments
_device
T@"NSDictionary",C,N,V_additionalEnvironment
arrayWithArray:
T@"NSNumber",C,N,V_exitCode
dealloc
T@"NSNumber",C,N,V_processIdentifier
initWithString:
T@"NSObject<RTSimulatorToolProxyDelegate>",R,W,N,V_proxyDelegate
isProxy
T@"NSString",R,N
processExitType
T@"RTSimulatorToolExecutionContext",R,N,V_executionContext
runtime
T@"SimDevice",R,N,V_device
setWithObjects:
Tc,N,V_shouldRaiseOnFailures
stringFromDate:
Tc,V_isAlive
Tq,N,V_processExitType
_additionalEnvironment
_arguments
_busyCountToolQueue
_cachedDisabledSimulatorJobs
_environmentForBootingDevice
_error
_executionContext
_exitCode
_exitStatus
_frameworkSearchPaths
_isAlive
_keepAlivePipe
_launchContext
_launchPath
_logAtLogLevel:withFormat:
_platformName
_processExitType
_processFailureDescription
_processIdentifier
_proxyDelegate
_queue
_shouldRaiseOnFailures
_signalNumber
_success
_terminationHandler
_toolExitDispatchSource
addEntriesFromDictionary:
addObject:
addObjectsFromArray:
additionalEnvironment
allObjects
allPlatforms
appendFormat:
appendString:
arguments
array
arrayWithObject:
arrayWithObjects:count:
autorelease
availableData
availableDevices
boolForKey:
boolValue
bootDeviceIfNeededWithLaunchContext:error:
bootWithOptions:error:
bundleIdentifier
canonicalName
class
code
componentsJoinedByString:
componentsSeparatedByString:
conformsToProtocol:
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
copy
copyItemAtURL:toURL:error:
count
countByEnumeratingWithState:objects:count:
createDeviceWithType:runtime:name:error:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
currentRunLoop
currentThread
debugDescription
defaultManager
defaultPaths
deleteDevice:error:
description
developerDirectory
device
deviceSetWithPath:error:
deviceType
dictionary
dictionaryRepresentation
dictionaryWithContentsOfFile:
dictionaryWithObjects:forKeys:count:
didLaunchWithPipeToKeepAlive:error:
didShutdownTool:
directoryContents
disabledSimulatorJobs
domain
dvt_cachedEnvironment
dvt_isNonEmpty
dvt_objectsPassingTest:
enumerateKeysAndObjectsUsingBlock:
enumerateObjectsWithOptions:usingBlock:
environment
environmentWithLaunchContext:error:
error
errorWithDomain:code:userInfo:
executionContext
existsInFileSystem
exitCode
exitStatus
family
fileDescriptor
fileExistsAtPath:
fileExistsAtPath:isDirectory:
fileHandleWithStandardError
fileHandleWithStandardOutput
fileManager:shouldCopyItemAtPath:toPath:
fileManager:shouldCopyItemAtURL:toURL:
fileManager:shouldLinkItemAtPath:toPath:
fileManager:shouldLinkItemAtURL:toURL:
fileManager:shouldMoveItemAtPath:toPath:
fileManager:shouldMoveItemAtURL:toURL:
fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:
fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:
fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:
fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:
fileManager:shouldProceedAfterError:movingItemAtPath:toPath:
fileManager:shouldProceedAfterError:movingItemAtURL:toURL:
fileManager:shouldProceedAfterError:removingItemAtPath:
fileManager:shouldProceedAfterError:removingItemAtURL:
fileManager:shouldRemoveItemAtPath:
fileManager:shouldRemoveItemAtURL:
filePathForPathString:
filePathForRelativePathString:
frameworkSearchPaths
frameworkSearchPathsForOverlayToolsForDVTPlatform:
getDeltaTimeString
handshakeWithPlatformToolWithPID:proxyDelegate:launchContext:optionalLifelinePipe:error:
hasSuffix:
hash
ib_addObjectsFromCollection:
ib_aggregatedDescriptionAndFailureReasons
ib_dictionaryByRemovingObjectsForKeys:
ib_errorWithLocalizedDescriptionFormat:
ib_errorWithUnderlyingError:recoverySuggestion:localizedDescriptionFormat:
ib_objectForKey:creatingIfNecessaryWithBlock:
ib_setByIntersectingSet:
ib_setBySubtractingSet:
identifier
init
initWith:
initWithData:encoding:
initWithExecutionContext:launchContext:proxyDelegate:terminationHandler:error:
initWithFileDescriptor:
initWithSimDevice:
initialize
instanceMethodForSelector:
instancesRespondToSelector:
integerForKey:
integerValue
isAbsolutePath
isEqual:
isEqualToString:
isKindOfClass:
isMainThread
isMemberOfClass:
lastPathComponent
launchAndConnectToToolWithLaunchContext:proxyDelegate:error:useMetal:
launchContext
launchJobsScannedForRuntimeRoot:
launchPath
launchToolInSimulator:dvtPlatform:platformVersion:error:useMetal:
length
localizedDescription
logAspectWithName:
logLevel
mainBundle
name
numberWithInt:
numberWithInteger:
objectForKey:
objectForKeyedSubscript:
orderedSet
osPlatform
osPlatformFromSimulator
pathExtension
pathString
pathToOverlayToolNamed:dvtPlatform:platformVersion:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
pipe
platformForIdentifier:
platformForName:
platformName
platformPath
populateDYLDFrameworkSearchPaths:launchContext:
populateEnvironment:launchContext:error:
populateLaunchJobForRuntimeRoot:requiredIdentifiers:disabledIdentifiers:
processFailureDescription
processIdentifier
processInfo
propertyListDictionary
proxyDelegate
realityToolForDVPlatform:platformVersion:arguments:launchError:useMetal:
registerDefaults:
registerNotificationHandlerOnQueue:handler:
removeItemAtURL:error:
removeObjectAtIndex:
removeObjectForKey:
replaceSimDeviceInstanceMethodsIfNeeded
requestedJobsFromRTEnableSimulatorJobs
respondsToSelector:
resultWithFailure
resultWithNSError:
resultWithSuccess
retain
retainCount
root
rtSpawnWithPath:options:terminationQueue:terminationHandler:pid:error:
rtSpawningRTSimulatorToolProcess
rtSwizzledEnvironment
rt_errorWithLocalizedDescription:
rt_errorWithLocalizedDescription:failureReason:recoverySuggestion:
rt_errorWithLocalizedDescription:failureReason:recoverySuggestion:domain:code:
rt_errorWithLocalizedDescription:failureReason:recoverySuggestion:domain:code:recoveryOptions:recoveryAttempter:
runRealityProducer:dvtPlatform:platformVersion:useMetal:
runUntilDate:
runtimeInternalState
sdkForCanonicalName:
self
serviceContextForDeveloperDir:error:
setAdditionalEnvironment:
setDateFormat:
setDelegate:
setError:
setExitCode:
setExitStatus:
setIsAlive:
setObject:forKey:
setProcessExitType:
setProcessFailureDescription:
setProcessIdentifier:
setRtSpawningRTSimulatorToolProcess:
setShouldRaiseOnFailures:
setSignalNumber:
setSuccess:
setupToolExitDispatchSource
shouldRaiseOnFailures
shouldUseDefaultRealityCompilerForPlatform
shutdown
shutdownAndForceToolProxyKill
signalNumber
simulatorPlatform
simulatorPlatformFromOS
simulatorRuntimeFromService:matchingSDK:error:
spawnWithPath:options:terminationQueue:terminationHandler:pid:error:
standardUserDefaults
startTime
state
stringByAppendingFormat:
stringByAppendingString:
stringByDeletingLastPathComponent
stringByDeletingPathExtension
stringByReplacingOccurrencesOfString:withString:options:range:
stringByStandardizingPath
stringByTrimmingCharactersInSet:
stringForKey:
stringWithFormat:
stringWithString:
subpathsOfDirectoryAtPath:error:
substringToIndex:
superclass
supportedDeviceTypes
supportsDeviceType:
temporaryDirectory
terminationHandler
timeInfo
toolName
toolsInfo
unsignedIntegerValue
userDataDirectoryForCurrentApplication
valueForKey:
whitespaceAndNewlineCharacterSet
zone
RTErrorAdditions
PropertyList
Translators
RealityCompilerResult
RTSimulatorPlatformAdapter
RTSimDeviceSpawningsSupport
RTSimulatorToolExecutionContext
Timing
RTSimulatorToolLaunchContext
RTSimulatorToolProxy
@72@0:8@16@24@32@40q48@56@64
@56@0:8@16@24@32@40q48
@40@0:8@16@24@32
@24@0:8@16
c16@0:8
@16@0:8
@20@0:8c16
v20@0:8c16
v24@0:8@16
v16@0:8
@"NSError"
@52@0:8@16@24@32^@40c48
@44@0:8@16@24@32c40
c64@0:8@16@24@32@?40^i48^@56
v40@0:8@16@24@32
c32@0:8@16^@24
v32@0:8@16@24
c40@0:8@16@24^@32
@32@0:8@16^@24
@52@0:8i16@20@28@36^@44
@44@0:8@16@24^@32c40
@"NSDictionary"
@"SimDevice"
{mach_timebase_info="numer"I"denom"I}
@48@0:8@16@24@32@40
q16@0:8
v24@0:8q16
@"NSString"
@"NSArray"
@"NSNumber"
v32@0:8@16^@24
@56@0:8@16@24@32@?40^@48
@?16@0:8
@"NSObject<OS_dispatch_queue>"
@"NSPipe"
@"NSObject<OS_dispatch_source>"
@"RTSimulatorToolExecutionContext"
@"RTSimulatorToolLaunchContext"
@"NSObject<RTSimulatorToolProxyDelegate>"
UseDefaultRealityToolCompiler
simulator
/usr/local/bin/xbs
/dev/null
sysinfo
Failed to spawn xbs process (%s).  Assuming this is not an XBS builder.
xbs process did not exit cleanly (exitStatus = %d).  Assuming this is not an XBS builder.
AppleInternalChecks: xbs output could not be deserialized as JSON (%@): %@.  Assuming this is not an XBS builder.
is-build-machine
flavor
desktop
XBS_IS_CHROOTED
/AppleInternal/XBS/.isChrooted
/BuildSupport/makeProject
/BinaryCache
/Volumes/data/apps-services-system
XBS_REVISION
RC_XBS
RC_BUILDIT
/mnt/baas
BOOL RTIDEInitialize(BOOL, NSError *__autoreleasing *)
/AppleInternal/Library/BuildRoots/1f65ae99-233f-11ef-83b2-e2437461156c/Library/Caches/com.apple.xbs/Sources/RETools/Source/Tools/realitytool/Sources/DVTInitialization.m
!___localError
A method claimed to have succeeded but provided an error! (%@)
___localError
A method claimed to have failed but provided no error!
DVTFilePath * _Nonnull RTPathForPlatformRelativePath(NSString *__strong _Nonnull, DVTPlatform *__strong _Nonnull)
/AppleInternal/Library/BuildRoots/1f65ae99-233f-11ef-83b2-e2437461156c/Library/Caches/com.apple.xbs/Sources/RETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/IDEInterfaceBuilderKit/RTDVTFoundationAdditions.m
((platformRelativePath)) != nil
%@ should not be nil.
(platformRelativePath)
((platform)) != nil
(platform)
NSString *RTPathForPlatformContentWithSuffix(NSString *__strong, NSString *__strong, DVTPlatform *__strong, NSString *__strong)
((contentName)) != nil
(contentName)
macosx
RealityTool
dyldCandidates = %@
platformCandidates = %@
NSArray<DVTFilePath *> *RTDYLDPathsForPlatform(DVTPlatform *__strong, NSString *__strong)
Release
RTDVTFoundationAdditions
%s: Ignoring relative path '%@'
%@-%@
v8@?0
DYLD_FRAMEWORK_PATH
c16@?0@"NSString"8
%s: Empty path component in DYLD_FRAMEWORK_PATH '%@'
NSArray<NSString *> *RTNonEmptyPathsFromDYLDFrameworkPathEnvar(void)_block_invoke_2
RT_LOG_LEVEL_
LogLevel
NSString *RTEnvironmentVariableKeyForLogAspectUserDefaultsKey(NSString *__strong)
/AppleInternal/Library/BuildRoots/1f65ae99-233f-11ef-83b2-e2437461156c/Library/Caches/com.apple.xbs/Sources/RETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/IDEInterfaceBuilder/AssetCatalogFoundation/Utilities/RTLogging.m
[userDefaultsKey hasSuffix:@"LogLevel"]
If you are calling this function, you already know that you should be passing in a user defaults key for log levels
RTLogging
iphoneos
iphonesimulator
iOS %@.simruntime
xros
xrsimulator
xrOS %@.simruntime
+[RTSimulatorPlatformAdapter pathToOverlayToolNamed:dvtPlatform:platformVersion:]
/AppleInternal/Library/BuildRoots/1f65ae99-233f-11ef-83b2-e2437461156c/Library/Caches/com.apple.xbs/Sources/RETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/RTSimulatorPlatformAdapter.m
runtimeDir
"%@" should not be nil.
Developer/Library/Xcode/Overlays
toolPath = '%@'
Developer/Library/PrivateFrameworks
frameworksPath = '%@'
realitytool
Failed to find simulator executable '%@'
+[RTSimulatorPlatformAdapter realityToolForDVPlatform:platformVersion:arguments:launchError:useMetal:]
!(launchError)
A method claimed to have succeeded but provided an error!
(launchError)
Device %@, runtime %@ for %@ does not have a runtime root
delay %d
SIMULATOR_MEMORY_WARNINGS
RTRunDataMigrationWhenLaunchingPlatformTools
RTLaunchPlatformToolsWithLimitedLaunchdJobs_06_2017
-[RTSimulatorToolExecutionContext initWithSimDevice:]
/AppleInternal/Library/BuildRoots/1f65ae99-233f-11ef-83b2-e2437461156c/Library/Caches/com.apple.xbs/Sources/RETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/IDEInterfaceBuilderCocoaTouchIntegration/RTSimulatorToolExecutionContext.m
device
RTEnableSimulatorJobs
Enabling additional simualtor jobs with '%@': %@
System/Library/LaunchDaemons
plist
Label
@"NSMutableSet"8@?0
-[RTSimulatorToolExecutionContext populateLaunchJobForRuntimeRoot:requiredIdentifiers:disabledIdentifiers:]
runtimeRoot
com.apple.CoreSimulator.bridge
com.apple.CoreSimulator.IndigoFramebufferBridge
com.apple.mobilegestalt.xpc
com.apple.backboardd
com.apple.assertiond
com.apple.cfprefsd.xpc.daemon
com.apple.accessibility.axAuditDaemon.deviceservice
com.apple.cloudkit.cktestd
com.apple.cloudkit.partlycloudd
com.apple.GPUTools.MobileService
com.apple.installcoordination_observer_test
com.apple.instruments.deviceservice
com.apple.internal.honeybeed.root
com.apple.internal.prototyped
com.apple.soundanalysisd
com.apple.testmanagerd
com.apple.testrund
-[RTSimulatorToolExecutionContext disabledSimulatorJobs]
__objc_no
Called DVTWarn
![intersectingIdentifiers count]
You cannot have a job both enabled and disabled. These are overlapping: %@
IS_INTERFACE_BUILDER_SIMULATOR
SIM_DISABLE_DATA_MIGRATION_FOR_DEVTOOLS
Device state changed: %@: %@
v16@?0@"NSDictionary"8
Registering notification handler: %ld
Device is shutdown, booting %@
Failed to boot %@
Device is neither shutdown nor booted: %@
Already booted device %@ for context %@
Failed to boot device %@ for context %@
-[RTSimulatorToolExecutionContext bootDeviceIfNeededWithLaunchContext:error:]
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to boot device %@ for context %@", [self device], launchContext]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to boot device %@ for context %@", [self device], launchContext]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
RT_THREAD_NAME
DYLD_INSERT_LIBRARIES
RTTrapPlatformToolForSeconds
RT_TRAP_PLATFORM_TOOL_FOR_SECONDS
user defaults *LogLevel:
    key=%@, value=%@
v32@?0@"NSString"8@16*24
environment %@:
DYLD_LIBRARY_PATH
DYLD_FALLBACK_LIBRARY_PATH
%@:%@
v32@?0@"NSString"8@"NSString"16*24
DEBUG: Added to environment: %@
Failed to determine environment in which to launch %@
-[RTSimulatorToolExecutionContext environmentWithLaunchContext:error:]
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to determine environment in which to launch %@", [launchContext toolName]]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to determine environment in which to launch %@", [launchContext toolName]]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
Connected to %@ with pid %ld
Failed to initialize proxy for context %@: %@
Failed to keep platform tool alive
Try restarting your computer
Failed to keep launch platform tool and keep alive
Invalid pid for %@
Failed to handshake with platform tool
-[RTSimulatorToolExecutionContext handshakeWithPlatformToolWithPID:proxyDelegate:launchContext:optionalLifelinePipe:error:]
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to handshake with platform tool"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to handshake with platform tool"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
-[RTSimulatorToolExecutionContext replaceSimDeviceInstanceMethodsIfNeeded]_block_invoke
Cannot replace %@ because the class %s does not exist.
SimDevice
@"NSDictionary"16@?0@"SimDevice"8
[SimDevice instancesRespondToSelector:@selector((environment))]
Expecting to override an environment property on SimDevice
Going to spawn platform tool via CoreSimulator for context %@ on device %@
Spawning
not 
using
Tool exited with code %d
Tool exited with no error
Tool terminated by signal '%s'
Tool stopped by signal '%s'
Tool stopped/terminated with unkown status %ld
v12@?0i8
Spawned %@ with pid %ld but waiting to connect
Spawned pid = %d
Failed to spawn %@ on %@
Failed to spawn %@, error: %@
Failed to determine launch environment
Failed to launch %@ via CoreSimulator spawn
-[RTSimulatorToolExecutionContext launchAndConnectToToolWithLaunchContext:proxyDelegate:error:useMetal:]
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to launch %@ via CoreSimulator spawn", [launchContext toolName]]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to launch %@ via CoreSimulator spawn", [launchContext toolName]]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
Main Thread
Background Thread
%d:%02d:%02d.%03d
%d:%02d.%03d
-[RTSimulatorToolLaunchContext initWithPlatformName:launchPath:frameworkSearchPaths:arguments:]
/AppleInternal/Library/BuildRoots/1f65ae99-233f-11ef-83b2-e2437461156c/Library/Caches/com.apple.xbs/Sources/RETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/IDEInterfaceBuilderKit/RTSimulatorToolLaunchContext.m
platformName
launchPath
 toolName = %@, platformName = %@
RTSimulatorToolProxy.RemoteShutdownSourceQueue
RTSimulatorToolProxy.queue
RTSimulatorToolProxy.busyCountToolQueue
RTSimulatorToolProxy.backtraceQueue
Looking up device for type %@ and runtime %@
RT Support/Simulator Devices
Using SimDeviceSet at path: %@
RTClearSimulatorDevicesOnLaunch
%@ is set, deleting %@%@
 -- but deleting failed with error %@
Picking device from available devices: %@
No device found with matching runtime and deviceType identifiers, creating new device
Failed to create new simulator device in set %@ that matches %@ for runtime %@ (%@). Available devices: %@
Failed to create SimDeviceSet at path %@. You'll want to check the logs in ~/Library/Logs/CoreSimulator to see why creating the SimDeviceSet failed.
Failed to get shared SimServiceContext with error %@. You'll want to check the logs in ~/Library/Logs/CoreSimulator to see why getting the shared context failed.
Failed to find a suitable device for the type %@ with runtime %@
SimDevice * _Nonnull RTSimDeviceForSimDeviceTypeAndSimRuntime(SimDeviceType *__strong _Nonnull, SimRuntime *__strong _Nonnull, NSError *__autoreleasing * _Nullable)
/AppleInternal/Library/BuildRoots/1f65ae99-233f-11ef-83b2-e2437461156c/Library/Caches/com.apple.xbs/Sources/RETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/IDEInterfaceBuilderCocoaTouchIntegration/RTSimulatorToolUtilities.m
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find a suitable device for the type %@ with runtime %@", deviceType, runtime]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find a suitable device for the type %@ with runtime %@", deviceType, runtime]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
DISABLE_FOCUS_SOUNDS
MallocStackLogging
NSZombieEnabled
v32@?0@"SimDeviceType"8Q16*24
No available runtime found from: [
    %@ ==> %@ does not support runtime
 when matching for %@
Could not find any supported simulator runtimes
Failed to find newest available Device type for %@
SimDeviceType * _Nonnull RTSimDeviceTypeForSimRuntime(SimRuntime *__strong _Nonnull, NSError *__autoreleasing * _Nullable)
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find newest available Device type for %@", simRuntime.name]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find newest available Device type for %@", simRuntime.name]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
Failed to find newest available Simulator runtime for %@
SimRuntime * _Nonnull RTSimDeviceRuntimeForDVTPlatform(DVTPlatform *__strong _Nonnull, NSError *__autoreleasing * _Nullable)
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find newest available Simulator runtime for %@", dvtPlatform.name]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find newest available Simulator runtime for %@", dvtPlatform.name]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
Created shared service context: %@
Unable to load specific SimServiceContext from %@
Failed to create specific shared service context: %@
Disabling RT's simulator service RTDisableSimualtorService=1
Disabling RT's simulator service RTDisableSimulatorService=1
Failed to get shared service context
SimServiceContext *RTSharedInterfaceBuilderSpecificSimulatorServiceContext(NSError *__autoreleasing *)
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to get shared service context"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to get shared service context"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
RTDisableSimualtorService
dvtPlatform.identifier = %@
dvtPlatform.name = %@
dvtPlatform.family = %@
canonicalSDK = %@
Unable to resolve SDK for %@
SimRuntime *_SupportedRuntimeReturningError(DVTPlatform *__strong, NSError *__autoreleasing *)
!(localError)
(localError)
true
false
auto
note
warning
error
Reality Composer Pro Assets Compiler.
Initialization failed.
Reason: 
Failed to get requested engine configuration 
', but realitytool only supports 
', failed to obtain an RE asset platform
realitytool cannot use Metal in this build environment
Enabling Metal for skybox compile
Enabling Metal for IBL Component(s) compile
realitytool/RealityTool.swift
Could not find skybox image asset file
Exception thrown: 
realitytool cannot be run in this build environment, please compile .reality file elsewhere, add to project, and use script build phase to copy into project binary, for this build environment
realitytool cannot be run in this build environment, please see https://at.apple.com/qQz7mO for details
run realitytool in 
 realitytool completed.
', but realitytool '
' is not a valid deploymentTarget
Failed to convert '
' to an RE asset platform
Invalid --deployment-target '
', but Xcode only supports 
', but failed to obtain a valid os from Xcode
', but failed to obtain a valid simulator from Xcode
', but realitytool only supports [
%{public}@ %{public}@
com.apple.realitytool
%{private}@ %{private}@
Fatal error
Down-casted Array element failed to match the target type
Expected 
NSArray element failed to match the Swift Array Element type
Expected 
' does not exist
' does not have expected extension, '
empty path not allowed for file
empty path not allowed for output file
' does not have an expected extension, must be one of 
empty path not allowed for directory
_TtC11realitytool37RKAssetsCustomComponentsSchemaHandler
originalRKAssetsURL
originalRKAssetSubpaths
fileManager
fmDelegate
realitySymbolCache
userCodeRegistry
subscriptions
derivedDataRootURL
schemaURL
_TtC11realitytoolP33_9C34E9C2B61758FE4CDCD282C96BADEA25CustomFileManagerDelegate
c40@0:8@16@24@32
c32@0:8@16@24
@16@0:8
Processing rkassets USD files...
Copying file without alterations: 
Skipping file with no custom components: 
Altered file to prepend custom component references: 
RealityKitCustomComponent
contains deprecated 
 instead. Using fallback mechanism.
realitytool-modified
No CustomComponents in schema .usda, skipping .rkassets patching.
Starting DerivedData process...
Finished processRKAssets() with a failure
Finished processRKAssets() successfully
Starting Swift file(s) preprocess...
Produced a user code stage with 
Finished processSwiftFiles() with a failure '
Finished processSwiftFiles() successfully
Finished processSwiftFiles() with code incompatibility issues, failure
NSFileManagerDelegate
c48@0:8@16@24@32@40
c40@0:8@"NSFileManager"16@"NSString"24@"NSString"32
c40@0:8@"NSFileManager"16@"NSURL"24@"NSURL"32
c48@0:8@"NSFileManager"16@"NSError"24@"NSString"32@"NSString"40
c48@0:8@"NSFileManager"16@"NSError"24@"NSURL"32@"NSURL"40
c32@0:8@"NSFileManager"16@"NSString"24
c32@0:8@"NSFileManager"16@"NSURL"24
c40@0:8@"NSFileManager"16@"NSError"24@"NSString"32
c40@0:8@"NSFileManager"16@"NSError"24@"NSURL"32
NSObject
c24@0:8@16
q16@0:8
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
c16@0:8
c24@0:8#16
c24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
hash
Tq,N,R
superclass
T#,N,R
description
T@"NSString",N,R
debugDescription
c24@0:8@"Protocol"16
@"NSString"16@0:8
Failed reading file '
Failed getting subpaths of '
\s+def\s+RealityKitComponent\s+"(ImageBasedLight|VirtualEnvironmentProbe)"
_TtC11realitytool16RKAssetsCompiler
Preparing to preprocess 
%{public}@
Preparing to compile 
 to output file 
Ordered internal assets (relative to 
Beginning compilation of 
Finished compilation of 
 swift files, timeout is 
 sec. reached, but no result was returned from UserComponentSchema Preprocessor.
Did not create schema '
Failure creating schema - '
Command to parse custom component swift files to create a .usda schema with initial values
Will need to sepecify output .usda file and list of input swift files
Output schema file path
File with list of Swift files for the target and each dependency to preprocess into schema .usda
moduleWithDependencies
Process textures into Reality Assets
Reality Assets expect textures to be in a specific format to avoid processing at load time. The image command allows this to be done as a preprocess in a custom build pipeline rather than every time a texture is loaded or a Reality File is compiled.
Preprocess textures with the command and reference the generated asset directly.
Exporting .realityenv and .ktx formats is supported.
Invalid output file type 
Missing required --platform
Missing required --deployment-target
latlong sampling qualitty '
' is invalid for environement resources
' > sky box size '
Semantic is not a valid option for IBL generation
, .ktx] file path
Required for IBL. Deployment Target for os, like 1.0 for visionOS.
Optional Color space of source texture data.
Optional Output texture width. For cube map generation this is the face size. For IBL generation this applies to the sky box.
Optional Specular cube face size for IBL generation. By default specular cube is the same size as the skybox.
Optional Convert the source image from a lat long texture to a cube map. Outputs a KTX format texture file.
Input texture file
Optional ASTC compression quality when generating textures, defaults to normal if other compression options are set: [
ASTC compression quality is '
Optional ASTC compression mode when generating textures, by default this is inferred from the texture source: [
ASTC compression mode is '
Optional ASTC compression block size when generating textures, defaults to 4x4 if other compression options are set: [
ASTC block size is '
Optional Sampling quality when generating environment resource diffuse and specular cube maps: [
IBL sampling quality is '
Optional Sampling width when converting lat long images to cubemap: [
latllong sampling width is '
Optional Diffuse cube face size for IBL generation. By default diffuse cube is 
Diffuse cube map face size is '
', which could not be parsed as a positive integer
', but realitytool only supports from 1 to 
Specular cube map face size is '
Cube map face size is '
Texture color space is '
', but this is not a supported OCIO color space
Optional Color semantic for compiled texture data [
Texture color semantic is '
Required for IBL. Platform for compile: [
Failed to obtain an RE asset platform '
outputRealityAsset
deploymentTarget
latLongSamplingQuality
iblSamplingQuality
astcCompressionBlockSize
astcCompressionMode
astcCompressionQuality
Invalid number of keys found, expected one.
Failure patching schema into .rkassets - '
Compiles a Reality Composer Pro asset into a runtime file
Will need to sepecify output folder, platform, deploymentTarget, optional schema file, and input .rkassets or .skybox.
Note that schema files are only supported when compiling .rkassets.
Output for compiling Reality Composer Pro projects requires '
--derived-data is not supported for skybox assets
--schema-file is not supported for skybox assets
failed to create temp directory: 
--schema-file <file> must be specified when using --derived-data <path>
Optional .usda schema file generated by the create-schema command.
Optional Derived Data unique directory (requires --schema-file <file>)
Required Platform for compile: [
Required Deployment Target for os, like 1.0 for visionOS.
Input Reality Composer Pro asset
Optional Use Metal: {
_TtC11realitytool20SimulatorToolAdapter
positional
option
flag
long
short
longWithSingleDash
ArgumentParser/CompletionsGenerator.swift
Invalid CompletionShell: 
ArgumentParser/Argument.swift
--------------------------------------------------------------------
Can't read a value from a parsable
argument definition.
This error indicates that a property declared with an `@Argument`,
`@Option`, `@Flag`, or `@OptionGroup` property wrapper was neither
initialized to a value nor decoded from command-line arguments.
To get a valid value, either call one of the static parsing methods
(`parse`, `parseAsRoot`, or `main`) or define an initializer that
initializes _every_ property of your parsable type.
--------------------------------------------------------------------
Argument(*definition*)
ArgumentParser/Parsed.swift
Trying to get the argument set from a resolved/parsed property.
serializationVersion
defaultSubcommand
Show subcommand help information.
_TtC14ArgumentParser15ArgumentDecoder
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
ArgumentParser/ArgumentDecoder.swift
-r -f -a '(command 
 -- --custom (commandline -opc)[1..-1])'
-r -f -a '(__fish_complete_directories)'
-r -f -a '(for i in 
    set -l currentCommands (
 (commandline -opc))
    set -l expectedCommands (string split "
" $argv[1])
    set -l subcommands (string split "
" $argv[2])
    if [ (count $currentCommands) -ge (count $expectedCommands) ]
        for i in (seq (count $expectedCommands))
            if [ $currentCommands[$i] != $expectedCommands[$i] ]
                return 1
            end
        end
        if [ (count $currentCommands) -eq (count $expectedCommands) ]
            return 0
        end
        if [ (count $subcommands) -gt 1 ]
            for i in (seq (count $subcommands))
                if [ $currentCommands[(math (count $expectedCommands) + 1)] = $subcommands[$i] ]
                    return 1
                end
            end
        end
        return 0
    end
    return 1
# A function which filters options which starts with "-" from $argv.
function 
    set -l results
    for i in (seq (count $argv))
        switch (echo $argv[$i] | string sub -l 1)
            case '-'
            case '*'
                echo $argv[$i]
        end
    end
--experimental-dump-help
ArgumentParser/NameSpecification.swift
' has not characters to form short option name.
ArgumentParser/Option.swift
Option(*definition*)
element
parent
children
' for more information.
Unspecified version
experimental-dump-help
ArgumentParser/Flag.swift
ArgumentParser/CommandParser.swift
Unexpected error: 
The ParsableCommand "
" can't have itself as its own subcommand.
generateCompletionScript
ArgumentParser/OptionGroup.swift
OptionGroup(*definition*)
Tree<ParsableCommand.Type>
ArgumentParser/UsageGenerator.swift
preferredName cannot be nil for named arguments
Missing required subcommand.
Invalid option: -
Invalid option: 
' does not take any value, but '
' was specified.
Internal error. Invalid state while parsing command-line arguments.
Internal error. Parsing command-line arguments hit unimplemented code path.
Can't generate completion scripts for '
Please use --generate-completion-script=<shell> with one of:
    
Can't autodetect a supported shell.
Please use --generate-completion-script=<shell> with one of:
    
Unknown option '
'. Did you mean '
Missing value for '
 unexpected arguments: '
Unexpected argument '
Value to be set with 
 had already been set with 
Missing one of: '
Missing expected argument '
No value set for non-argument var 
. Replace with a static variable, or let constant.
' is invalid for '
' is invalid for '<
. Please provide one of the following:
. Please provide one of 
local context state state_descr line
_commandname=$words[1]
typeset -A opt_args
_custom_completion() {
    local completions=("${(@f)$($*)}")
    _describe '' completions
'(-): :->command'
case $state in
    (command)
        local subcommands
        subcommands=(
        )
        _describe "subcommand" subcommands
        ;;
    (arg)
        case ${words[1]} in
        esac
        ;;
esac
() {
    integer ret=1
    local -a args
    args+=(
    )
    _arguments -w -s -S $args[@] && ret=0
    return ret
{_custom_completion $_
{local -a list; list=(${(f)"$(
)"}); _describe '''' list}
Show help information.
Show the version.
SHELL
Flag(*definition*)
offset element 
 <subcommand>' for detailed help.
ArgumentParser/HelpGenerator.swift
    opts="$opts 
    if [[ $COMP_CWORD == "
" ]]; then
        COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
        return
    fi
    case ${COMP_WORDS[
    return
    ;;
    COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
cur="${COMP_WORDS[COMP_CWORD]}"
prev="${COMP_WORDS[COMP_CWORD-1]}"
COMPREPLY=()
COMPREPLY=( $(compgen -W "$("${COMP_WORDS[0]}" 
 "${COMP_WORDS[@]}")" -- "$cur") )
COMPREPLY=( $(compgen -W "
COMPREPLY=( $(compgen -d -- "$cur") )
COMPREPLY=( $(compgen -f -- "$cur") )
$("${COMP_WORDS[0]}" ---completion 
 "${COMP_WORDS[@]}")
realitytool Path = '%@'
Spawning realitytool on device %@
Spawning %sstandalone (%s metal)
Best Sim Runtime %@
_pXpG
So8NSStringC
$sSY
$ss25ExpressibleByArrayLiteralP
$ss10SetAlgebraP
$ss9OptionSetP
$ss21_ObjectiveCBridgeableP
Sg_ABt
ySSG
ySS_SftG
SS_Sft
ySSSf_G
$ss12CaseIterableP
yypG
So9OS_os_logC
ySSypG
SS_ypt
ySSSfG
SaySSG
So13NSFileManagerC
So8NSObjectC
_AAt
ySay
GADGGG
ySay
ySay
_pGIegn_
GIeggg_
ySnySiGG
SS9directory_t
_GSg
SS4path_SS17expectedExtensiont
SS4path_t
Sgz_Xx
ySSSgG
ySbG
SSSg
ySS_
ySS_
ySS_
ySS_
ySS_
ySS_
ypXmT_
ySSG
_pIeggrzo_
qd__
qd__Sg
SSqd__
_pIeggrzo_
Sayqd__G
$s14ArgumentParser13ParsedWrapperP
_SitG
_Sit
ySsG
ySaySSGG
_pXpG
ySiG
8RawValueSYQz
$s14ArgumentParser013ExpressibleByA0P
$s14ArgumentParser22DecodableParsedWrapperP
5Value
ypSg
SaySSGSg
ySaySSGG
_pXpG
SbSg
ySaySSGSSG
SgS2S
_pIegggggrzo_
ySSSay
_pXpGADG
_ypt
$s14ArgumentParser20ArrayWrapperProtocolP
_pXp
$ss30KeyedDecodingContainerProtocolP
SayypG
yypG
_pXpGG
_pXp_AA_pXpt
SayxG
_pXpSg
ySSG
$s14ArgumentParser0A19DefinitionContainerP
$s14ArgumentParser0a32DefinitionContainerExpressibleByA0P
9Contained
ztKc
SS9Contained
_pIeggrzo_
SgSS9Contained
_pIegggggrzo_
7Initial
QzSg
ztKc
SgSS
ztKc
SS_Sb14withSingleDasht
SJ_Sb14allowingJoinedt
SaySSG10extensions_t
SaySSGAAc
yxGSgXw
yxGG
yyXlG
_pXpGACG
_pXpGACSgIegnr_
_pXp
_SSt
SS4text_t
SS7message_SS5usageSS4helpt
SS7message_
8exitCodet
_pSg
_pXmTSg
Sb8inserted_
17memberAfterInsertt
$s14ArgumentParser15ParsableCommandP
_SStG
_SSt
ySi_
SaySsG
$s14ArgumentParser17ParsableArgumentsP
$s14ArgumentParser0A11SetProviderP
SSSg5label_yp5valuet
_pSg
SgSSyp
_pIegggggrzo_
10visibility_t
SSSg5shell_t
_SStG
8previous_AA9duplicateSaySSG13originalInputt
6forKey_t
SgSS
6forKey
_pSg13originalErrort
ypSg_
6forKeyt
Si_Sit
Sayqd__GSg
Sbz_Xx
ySSSgG
yAAyABySaySSSgGACGGSSGG
yAAySaySSSgGACGGSSG
ySaySSSgGACGG
ySaySSSgGABG
SaySSSgG
ySay
GSSG
$ss32ExpressibleByStringInterpolationP
$ss26ExpressibleByStringLiteralP
$ss43ExpressibleByExtendedGraphemeClusterLiteralP
$ss33ExpressibleByUnicodeScalarLiteralP
$sST
SnySiG
$sSl
$sSK
$sSk
_SStSg
rawValue
_rawValue
RawValue
ArrayLiteralElement
Element
_ObjectiveCType
true
false
auto
message
AllCases
RawValue
note
warning
error
logger
osLogType
RawValue
failedToLoadFile
failedToDecodeData
failedToEncodeData
failedToConvertDataToString
failedToWriteFile
originalRKAssetsURL
originalRKAssetSubpaths
fileManager
fmDelegate
realitySymbolCache
userCodeRegistry
subscriptions
derivedDataRootURL
schemaURL
unableToCopy
unableToDeleteOldFiles
invalidURLComponent
sourceCodeIncompatibility
noDerivedDataRootURLProvided
noSchemaURLProvided
failedReadingSchemaFile
noSymbolCache
noUserCodeRegistry
nothingToDo
failedGettingSubpathsOf
failedReadingFile
inputFileBadExtension
rkAssetsIsNotDirectory
outputFolderIsNotDirectory
cannotGetRkassetsContents
originalPath
standardizedPathURL
needToReplace
_outputSchema
_moduleWithDependencies
outputSchema
moduleWithDependencies
_outputRealityAsset
_platform
_deploymentTarget
_semantic
_colorSpace
_cubeFaceSize
_specularSize
_diffuseSize
_latLongSamplingQuality
_iblSamplingQuality
_generateCubeMap
_astcCompressionBlockSize
_astcCompressionMode
_astcCompressionQuality
_inputURL
mode
cubemap
texture
outputRealityAsset
platform
deploymentTarget
semantic
colorSpace
cubeFaceSize
specularSize
diffuseSize
latLongSamplingQuality
iblSamplingQuality
generateCubeMap
astcCompressionBlockSize
astcCompressionMode
astcCompressionQuality
inputURL
_outputReality
_schemaFile
_derivedData
_platform
_deploymentTarget
_useMetal
_inputURL
outputReality
schemaFile
derivedData
platform
deploymentTarget
useMetal
inputURL
RawValue
AllCases
rawValue
Value
_parsedValue
base
name
path
value
definition
RawValue
serializationVersion
command
superCommands
commandName
abstract
discussion
defaultSubcommand
subcommands
arguments
kind
shouldDisplay
sectionTitle
isOptional
isRepeating
names
preferredName
valueName
defaultValue
allValues
name
long
short
longWithSingleDash
positional
option
flag
_subcommands
_help
commandStack
visibility
subcommands
help
_elements
ArrayLiteralElement
argumentIndex
defaultValue
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
underlying
parsedElement
type
value
wrongKeyType
topLevelHasNoUnkeyedContainer
topLevelHasNoSingleValueContainer
singleValueDecoderHasNoContainer
base
currentIndex
array
commandName
_superCommandName
abstract
usage
discussion
version
shouldDisplay
subcommands
defaultSubcommand
helpNames
RawValue
message
rawValue
base
helpRequest
dumpRequest
Contained
Initial
default
scanningForValue
unconditional
upToNextOption
allRemainingInput
postTerminator
allUnrecognized
kind
help
completion
parsingStrategy
update
initial
options
defaultValue
keys
allValues
isComposite
abstract
discussion
valueName
visibility
parentTitle
nullary
unary
named
positional
rawValue
ArrayLiteralElement
Element
RawValue
value
inputOrigin
shouldClearArrayIfParsed
elements
originalInput
capturedUnrecognizedArguments
ArrayLiteralElement
elements
base
customLong
customShort
long
short
kind
list
file
shellCommand
custom
default
directory
Value
_parsedValue
base
element
parent
children
recursiveSubcommand
_elements
firstUnused
originalInput
inputIndex
subIndex
value
index
option
terminator
name
nameWithValue
rawValue
RawValue
complete
help
validation
other
commandStack
parserError
visibility
_generateCompletionScript
generateCompletionScript
Value
_parsedValue
_visibility
_dummy
title
base
default
hidden
private
_options
options
helpRequested
completionScriptRequested
completionScriptCustomResponse
unsupportedShell
unknownOption
invalidOption
nonAlphanumericShortOption
missingValueForOption
unexpectedValueForOption
unexpectedExtraValues
duplicateExclusiveValues
noValue
unableToParseValue
userValidationError
noArguments
versionRequested
dumpHelpRequested
notImplemented
invalidState
missingSubcommand
wrongType
subcommandLevelMismatch
subcommandLevelMissing
subcommandLevelDuplicated
subcommandNameMismatch
expectedCommandButNoneFound
Value
_parsedValue
base
prefixedNo
prefixedEnableDisable
exclusive
chooseFirst
chooseLast
header
elements
discussion
isSubcommands
commandStack
abstract
usage
sections
discussionSections
label
title
positionalArguments
subcommands
options
content
long
short
longWithSingleDash
StringInterpolation
StringLiteralType
ExtendedGraphemeClusterLiteralType
UnicodeScalarLiteralType
abstract
discussion
valueName
visibility
Element
Iterator
Index
SubSequence
Indices
content
namePositions
usda
usdc
usdz
skybox
rkassets
macosx
iphoneos
iphonesimulator
xros
xrsimulator
none
fast
normal
fast
normal
high
veryhigh
10x5
10x6
10x8
10x10
12x10
12x12
linearLDR
sRGBLDR
linearHDR
fast
normal
high
exhaustive
macosx
bash
fish
help
version
@(#)PROGRAM:realitytool  PROJECT:RealityTools-448.0.0.500.6
realitytool
RealityTool
URLResourceKey
NNSURLResourceKey
REStartupOptions
OSLogType
Nos_log_type_t
RETextureASTCCompressionQuality
RETextureASTCCompressionMode
RETextureASTCCompressionBlockSize
REEnvironmentResourceCreateSamplingQuality
RECubeMapCreateLatLongSamplingQuality
Foundation
RealityToolError
UseMetal
StandardError
StandardOutput
OutputDef
LogType
ModuleWithDependenciesError
RKAssetsCustomComponentsSchemaHandler
CustomFileManagerDelegate
DerivedDataError
URLError
RKAssetsCompiler
rkassets
RKAssetsCompilerError
ArgumentPathSpec
CreateSchemaCommand
CodingKeys
$,03<@DJP
ImageCommand
CodingKeys
Mode
IblCodingKeys
CubemapCodingKeys
TextureCodingKeys
CompileCommand
CodingKeys
SimulatorToolAdapter
ArgumentParser
CompletionShell
Argument
ArgumentArrayParsingStrategy
InputKey
ExpressibleByArgument
ParsedWrapper
Value
DecodableParsedWrapper
Parsed
 %.5=EK
ToolInfoHeader
ToolInfoV0
CommandInfoV0
ArgumentInfoV0
NameInfoV0
KindV0
CodingKeys
help
HelpCommand
CodingKeys
InputOrigin
Element
ArgumentDecoder
ParsedArgumentsContainer
ArrayWrapperProtocol
DecodedArguments
SingleValueDecoder
UnkeyedContainer
ArrayWrapper
SingleValueContainer
Error
CommandConfiguration
ValidationError
ExitCode
CleanExit
Representation
ArgumentDefinitionContainer
Contained Initial
ArgumentDefinitionContainerExpressibleByArgument
ArgumentDefinition
ParsingStrategy
Bare
Update
Help
Kind
Options
ParsedValues
Element
NameSpecification
Element
Representation
CompletionKind
Kind
Option
SingleValueParsingStrategy
ArrayParsingStrategy
Tree
InitializationError
InputIndex
ParsedArgument
Value
Element
Index
SplitArguments
SubIndex
MessageInfo
CommandError
AutodetectedGenerateCompletions
GenerateCompletions
HelpRequested
CodingKeys
OptionGroup
ParsableCommand
StandardError
Platform
ArgumentVisibility
Representation
ParsableArguments
ArgumentSetProvider
_WrappedParsableCommand
CodingKeys
ParserError
InternalParseError
Flag
FlagInversion
FlagExclusivity
Representation
Element
HelpGenerator
Section
DiscussionSection
Header
Name
q.Hg
ArgumentHelp
ArgumentSet
RTErrorAdditions
PropertyList
Translators
RealityCompilerResult
RTSimulatorPlatformAdapter
RTSimDeviceSpawningsSupport
RTSimulatorToolExecutionContext
Timing
RTSimulatorToolLaunchContext
RTSimulatorToolProxy
@72@0:8@16@24@32@40q48@56@64
@56@0:8@16@24@32@40q48
@40@0:8@16@24@32
@24@0:8@16
B16@0:8
@16@0:8
@20@0:8B16
v20@0:8B16
v24@0:8@16
v16@0:8
@"NSError"
@52@0:8@16@24@32^@40B48
@44@0:8@16@24@32B40
B64@0:8@16@24@32@?40^i48^@56
v40@0:8@16@24@32
B32@0:8@16^@24
v32@0:8@16@24
B40@0:8@16@24^@32
@32@0:8@16^@24
@52@0:8i16@20@28@36^@44
@44@0:8@16@24^@32B40
@"NSDictionary"
@"SimDevice"
{mach_timebase_info="numer"I"denom"I}
@48@0:8@16@24@32@40
q16@0:8
v24@0:8q16
@"NSString"
@"NSArray"
@"NSNumber"
v32@0:8@16^@24
@56@0:8@16@24@32@?40^@48
@?16@0:8
@"NSObject<OS_dispatch_queue>"
@"NSPipe"
@"NSObject<OS_dispatch_source>"
@"RTSimulatorToolExecutionContext"
@"RTSimulatorToolLaunchContext"
@"NSObject<RTSimulatorToolProxyDelegate>"
UseDefaultRealityToolCompiler
simulator
/usr/local/bin/xbs
/dev/null
sysinfo
Failed to spawn xbs process (%s).  Assuming this is not an XBS builder.
xbs process did not exit cleanly (exitStatus = %d).  Assuming this is not an XBS builder.
AppleInternalChecks: xbs output could not be deserialized as JSON (%@): %@.  Assuming this is not an XBS builder.
is-build-machine
flavor
desktop
XBS_IS_CHROOTED
/AppleInternal/XBS/.isChrooted
/BuildSupport/makeProject
/BinaryCache
/Volumes/data/apps-services-system
XBS_REVISION
RC_XBS
RC_BUILDIT
/mnt/baas
BOOL RTIDEInitialize(BOOL, NSError *__autoreleasing *)
/AppleInternal/Library/BuildRoots/1f65ae99-233f-11ef-83b2-e2437461156c/Library/Caches/com.apple.xbs/Sources/RETools/Source/Tools/realitytool/Sources/DVTInitialization.m
!___localError
A method claimed to have succeeded but provided an error! (%@)
___localError
A method claimed to have failed but provided no error!
DVTFilePath * _Nonnull RTPathForPlatformRelativePath(NSString *__strong _Nonnull, DVTPlatform *__strong _Nonnull)
/AppleInternal/Library/BuildRoots/1f65ae99-233f-11ef-83b2-e2437461156c/Library/Caches/com.apple.xbs/Sources/RETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/IDEInterfaceBuilderKit/RTDVTFoundationAdditions.m
((platformRelativePath)) != nil
%@ should not be nil.
(platformRelativePath)
((platform)) != nil
(platform)
NSString *RTPathForPlatformContentWithSuffix(NSString *__strong, NSString *__strong, DVTPlatform *__strong, NSString *__strong)
((contentName)) != nil
(contentName)
macosx
RealityTool
dyldCandidates = %@
platformCandidates = %@
NSArray<DVTFilePath *> *RTDYLDPathsForPlatform(DVTPlatform *__strong, NSString *__strong)
Release
RTDVTFoundationAdditions
%s: Ignoring relative path '%@'
%@-%@
v8@?0
DYLD_FRAMEWORK_PATH
B16@?0@"NSString"8
%s: Empty path component in DYLD_FRAMEWORK_PATH '%@'
NSArray<NSString *> *RTNonEmptyPathsFromDYLDFrameworkPathEnvar(void)_block_invoke_2
RT_LOG_LEVEL_
LogLevel
NSString *RTEnvironmentVariableKeyForLogAspectUserDefaultsKey(NSString *__strong)
/AppleInternal/Library/BuildRoots/1f65ae99-233f-11ef-83b2-e2437461156c/Library/Caches/com.apple.xbs/Sources/RETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/IDEInterfaceBuilder/AssetCatalogFoundation/Utilities/RTLogging.m
[userDefaultsKey hasSuffix:@"LogLevel"]
If you are calling this function, you already know that you should be passing in a user defaults key for log levels
RTLogging
iphoneos
iphonesimulator
iOS %@.simruntime
xros
xrsimulator
xrOS %@.simruntime
+[RTSimulatorPlatformAdapter pathToOverlayToolNamed:dvtPlatform:platformVersion:]
/AppleInternal/Library/BuildRoots/1f65ae99-233f-11ef-83b2-e2437461156c/Library/Caches/com.apple.xbs/Sources/RETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/RTSimulatorPlatformAdapter.m
runtimeDir
"%@" should not be nil.
Developer/Library/Xcode/Overlays
toolPath = '%@'
Developer/Library/PrivateFrameworks
frameworksPath = '%@'
realitytool
Failed to find simulator executable '%@'
+[RTSimulatorPlatformAdapter realityToolForDVPlatform:platformVersion:arguments:launchError:useMetal:]
!(launchError)
A method claimed to have succeeded but provided an error!
(launchError)
Device %@, runtime %@ for %@ does not have a runtime root
delay %d
SIMULATOR_MEMORY_WARNINGS
RTRunDataMigrationWhenLaunchingPlatformTools
RTLaunchPlatformToolsWithLimitedLaunchdJobs_06_2017
-[RTSimulatorToolExecutionContext initWithSimDevice:]
/AppleInternal/Library/BuildRoots/1f65ae99-233f-11ef-83b2-e2437461156c/Library/Caches/com.apple.xbs/Sources/RETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/IDEInterfaceBuilderCocoaTouchIntegration/RTSimulatorToolExecutionContext.m
device
RTEnableSimulatorJobs
Enabling additional simualtor jobs with '%@': %@
System/Library/LaunchDaemons
plist
Label
@"NSMutableSet"8@?0
-[RTSimulatorToolExecutionContext populateLaunchJobForRuntimeRoot:requiredIdentifiers:disabledIdentifiers:]
runtimeRoot
com.apple.CoreSimulator.bridge
com.apple.CoreSimulator.IndigoFramebufferBridge
com.apple.mobilegestalt.xpc
com.apple.backboardd
com.apple.assertiond
com.apple.cfprefsd.xpc.daemon
com.apple.accessibility.axAuditDaemon.deviceservice
com.apple.cloudkit.cktestd
com.apple.cloudkit.partlycloudd
com.apple.GPUTools.MobileService
com.apple.installcoordination_observer_test
com.apple.instruments.deviceservice
com.apple.internal.honeybeed.root
com.apple.internal.prototyped
com.apple.soundanalysisd
com.apple.testmanagerd
com.apple.testrund
-[RTSimulatorToolExecutionContext disabledSimulatorJobs]
__objc_no
Called DVTWarn
![intersectingIdentifiers count]
You cannot have a job both enabled and disabled. These are overlapping: %@
IS_INTERFACE_BUILDER_SIMULATOR
SIM_DISABLE_DATA_MIGRATION_FOR_DEVTOOLS
Device state changed: %@: %@
v16@?0@"NSDictionary"8
Registering notification handler: %ld
Device is shutdown, booting %@
Failed to boot %@
Device is neither shutdown nor booted: %@
Already booted device %@ for context %@
Failed to boot device %@ for context %@
-[RTSimulatorToolExecutionContext bootDeviceIfNeededWithLaunchContext:error:]
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to boot device %@ for context %@", [self device], launchContext]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to boot device %@ for context %@", [self device], launchContext]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
RT_THREAD_NAME
DYLD_INSERT_LIBRARIES
RTTrapPlatformToolForSeconds
RT_TRAP_PLATFORM_TOOL_FOR_SECONDS
user defaults *LogLevel:
    key=%@, value=%@
v32@?0@"NSString"8@16^B24
environment %@:
DYLD_LIBRARY_PATH
DYLD_FALLBACK_LIBRARY_PATH
%@:%@
v32@?0@"NSString"8@"NSString"16^B24
DEBUG: Added to environment: %@
Failed to determine environment in which to launch %@
-[RTSimulatorToolExecutionContext environmentWithLaunchContext:error:]
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to determine environment in which to launch %@", [launchContext toolName]]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to determine environment in which to launch %@", [launchContext toolName]]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
Connected to %@ with pid %ld
Failed to initialize proxy for context %@: %@
Failed to keep platform tool alive
Try restarting your computer
Failed to keep launch platform tool and keep alive
Invalid pid for %@
Failed to handshake with platform tool
-[RTSimulatorToolExecutionContext handshakeWithPlatformToolWithPID:proxyDelegate:launchContext:optionalLifelinePipe:error:]
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to handshake with platform tool"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to handshake with platform tool"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
-[RTSimulatorToolExecutionContext replaceSimDeviceInstanceMethodsIfNeeded]_block_invoke
Cannot replace %@ because the class %s does not exist.
SimDevice
@"NSDictionary"16@?0@"SimDevice"8
[SimDevice instancesRespondToSelector:@selector((environment))]
Expecting to override an environment property on SimDevice
Going to spawn platform tool via CoreSimulator for context %@ on device %@
Spawning
not 
using
Tool exited with code %d
Tool exited with no error
Tool terminated by signal '%s'
Tool stopped by signal '%s'
Tool stopped/terminated with unkown status %ld
v12@?0i8
Spawned %@ with pid %ld but waiting to connect
Spawned pid = %d
Failed to spawn %@ on %@
Failed to spawn %@, error: %@
Failed to determine launch environment
Failed to launch %@ via CoreSimulator spawn
-[RTSimulatorToolExecutionContext launchAndConnectToToolWithLaunchContext:proxyDelegate:error:useMetal:]
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to launch %@ via CoreSimulator spawn", [launchContext toolName]]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to launch %@ via CoreSimulator spawn", [launchContext toolName]]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
Main Thread
Background Thread
%d:%02d:%02d.%03d
%d:%02d.%03d
-[RTSimulatorToolLaunchContext initWithPlatformName:launchPath:frameworkSearchPaths:arguments:]
/AppleInternal/Library/BuildRoots/1f65ae99-233f-11ef-83b2-e2437461156c/Library/Caches/com.apple.xbs/Sources/RETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/IDEInterfaceBuilderKit/RTSimulatorToolLaunchContext.m
platformName
launchPath
 toolName = %@, platformName = %@
RTSimulatorToolProxy.RemoteShutdownSourceQueue
RTSimulatorToolProxy.queue
RTSimulatorToolProxy.busyCountToolQueue
RTSimulatorToolProxy.backtraceQueue
Looking up device for type %@ and runtime %@
RT Support/Simulator Devices
Using SimDeviceSet at path: %@
RTClearSimulatorDevicesOnLaunch
%@ is set, deleting %@%@
 -- but deleting failed with error %@
Picking device from available devices: %@
No device found with matching runtime and deviceType identifiers, creating new device
Failed to create new simulator device in set %@ that matches %@ for runtime %@ (%@). Available devices: %@
Failed to create SimDeviceSet at path %@. You'll want to check the logs in ~/Library/Logs/CoreSimulator to see why creating the SimDeviceSet failed.
Failed to get shared SimServiceContext with error %@. You'll want to check the logs in ~/Library/Logs/CoreSimulator to see why getting the shared context failed.
Failed to find a suitable device for the type %@ with runtime %@
SimDevice * _Nonnull RTSimDeviceForSimDeviceTypeAndSimRuntime(SimDeviceType *__strong _Nonnull, SimRuntime *__strong _Nonnull, NSError *__autoreleasing * _Nullable)
/AppleInternal/Library/BuildRoots/1f65ae99-233f-11ef-83b2-e2437461156c/Library/Caches/com.apple.xbs/Sources/RETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/IDEInterfaceBuilderCocoaTouchIntegration/RTSimulatorToolUtilities.m
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find a suitable device for the type %@ with runtime %@", deviceType, runtime]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find a suitable device for the type %@ with runtime %@", deviceType, runtime]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
DISABLE_FOCUS_SOUNDS
MallocStackLogging
NSZombieEnabled
v32@?0@"SimDeviceType"8Q16^B24
No available runtime found from: [
    %@ ==> %@ does not support runtime
 when matching for %@
Could not find any supported simulator runtimes
Failed to find newest available Device type for %@
SimDeviceType * _Nonnull RTSimDeviceTypeForSimRuntime(SimRuntime *__strong _Nonnull, NSError *__autoreleasing * _Nullable)
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find newest available Device type for %@", simRuntime.name]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find newest available Device type for %@", simRuntime.name]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
Failed to find newest available Simulator runtime for %@
SimRuntime * _Nonnull RTSimDeviceRuntimeForDVTPlatform(DVTPlatform *__strong _Nonnull, NSError *__autoreleasing * _Nullable)
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find newest available Simulator runtime for %@", dvtPlatform.name]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find newest available Simulator runtime for %@", dvtPlatform.name]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
Created shared service context: %@
Unable to load specific SimServiceContext from %@
Failed to create specific shared service context: %@
Disabling RT's simulator service RTDisableSimualtorService=1
Disabling RT's simulator service RTDisableSimulatorService=1
Failed to get shared service context
SimServiceContext *RTSharedInterfaceBuilderSpecificSimulatorServiceContext(NSError *__autoreleasing *)
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to get shared service context"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to get shared service context"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.realitytool"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
RTDisableSimualtorService
dvtPlatform.identifier = %@
dvtPlatform.name = %@
dvtPlatform.family = %@
canonicalSDK = %@
Unable to resolve SDK for %@
SimRuntime *_SupportedRuntimeReturningError(DVTPlatform *__strong, NSError *__autoreleasing *)
!(localError)
(localError)
true
false
auto
note
warning
error
Reality Composer Pro Assets Compiler.
Initialization failed.
Reason: 
Failed to get requested engine configuration 
', but realitytool only supports 
', failed to obtain an RE asset platform
realitytool cannot use Metal in this build environment
Enabling Metal for skybox compile
Enabling Metal for IBL Component(s) compile
realitytool/RealityTool.swift
Could not find skybox image asset file
Exception thrown: 
run realitytool in 
 realitytool completed.
realitytool cannot be run in this build environment, please compile .reality file elsewhere, add to project, and use script build phase to copy into project binary, for this build environment
realitytool cannot be run in this build environment, please see https://at.apple.com/qQz7mO for details
', but realitytool '
' is not a valid deploymentTarget
Failed to convert '
' to an RE asset platform
Invalid --deployment-target '
', but Xcode only supports 
', but failed to obtain a valid os from Xcode
', but failed to obtain a valid simulator from Xcode
', but realitytool only supports [
%{public}@ %{public}@
com.apple.realitytool
%{private}@ %{private}@
Fatal error
Down-casted Array element failed to match the target type
Expected 
NSArray element failed to match the Swift Array Element type
Expected 
' does not exist
' does not have expected extension, '
empty path not allowed for file
empty path not allowed for output file
' does not have an expected extension, must be one of 
empty path not allowed for directory
_TtC11realitytool37RKAssetsCustomComponentsSchemaHandler
originalRKAssetsURL
originalRKAssetSubpaths
fileManager
fmDelegate
realitySymbolCache
userCodeRegistry
subscriptions
derivedDataRootURL
schemaURL
_TtC11realitytoolP33_9C34E9C2B61758FE4CDCD282C96BADEA25CustomFileManagerDelegate
B40@0:8@16@24@32
B32@0:8@16@24
@16@0:8
Processing rkassets USD files...
Copying file without alterations: 
Skipping file with no custom components: 
Altered file to prepend custom component references: 
RealityKitCustomComponent
contains deprecated 
 instead. Using fallback mechanism.
realitytool-modified
No CustomComponents in schema .usda, skipping .rkassets patching.
Starting DerivedData process...
Finished processRKAssets() with a failure
Finished processRKAssets() successfully
Starting Swift file(s) preprocess...
Produced a user code stage with 
Finished processSwiftFiles() with a failure '
Finished processSwiftFiles() successfully
Finished processSwiftFiles() with code incompatibility issues, failure
NSFileManagerDelegate
B48@0:8@16@24@32@40
B40@0:8@"NSFileManager"16@"NSString"24@"NSString"32
B40@0:8@"NSFileManager"16@"NSURL"24@"NSURL"32
B48@0:8@"NSFileManager"16@"NSError"24@"NSString"32@"NSString"40
B48@0:8@"NSFileManager"16@"NSError"24@"NSURL"32@"NSURL"40
B32@0:8@"NSFileManager"16@"NSString"24
B32@0:8@"NSFileManager"16@"NSURL"24
B40@0:8@"NSFileManager"16@"NSError"24@"NSString"32
B40@0:8@"NSFileManager"16@"NSError"24@"NSURL"32
NSObject
B24@0:8@16
q16@0:8
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
hash
Tq,N,R
superclass
T#,N,R
description
T@"NSString",N,R
debugDescription
B24@0:8@"Protocol"16
@"NSString"16@0:8
Failed reading file '
Failed getting subpaths of '
\s+def\s+RealityKitComponent\s+"(ImageBasedLight|VirtualEnvironmentProbe)"
_TtC11realitytool16RKAssetsCompiler
Preparing to preprocess 
%{public}@
Preparing to compile 
 to output file 
Ordered internal assets (relative to 
Beginning compilation of 
Finished compilation of 
 swift files, timeout is 
 sec. reached, but no result was returned from UserComponentSchema Preprocessor.
Did not create schema '
Failure creating schema - '
Command to parse custom component swift files to create a .usda schema with initial values
Will need to sepecify output .usda file and list of input swift files
Output schema file path
File with list of Swift files for the target and each dependency to preprocess into schema .usda
moduleWithDependencies
Process textures into Reality Assets
Reality Assets expect textures to be in a specific format to avoid processing at load time. The image command allows this to be done as a preprocess in a custom build pipeline rather than every time a texture is loaded or a Reality File is compiled.
Preprocess textures with the command and reference the generated asset directly.
Exporting .realityenv and .ktx formats is supported.
Invalid output file type 
Missing required --platform
Missing required --deployment-target
latlong sampling qualitty '
' is invalid for environement resources
' > sky box size '
Semantic is not a valid option for IBL generation
, .ktx] file path
Required for IBL. Deployment Target for os, like 1.0 for visionOS.
Optional Color space of source texture data.
Optional Output texture width. For cube map generation this is the face size. For IBL generation this applies to the sky box.
Optional Specular cube face size for IBL generation. By default specular cube is the same size as the skybox.
Optional Convert the source image from a lat long texture to a cube map. Outputs a KTX format texture file.
Input texture file
Optional ASTC compression quality when generating textures, defaults to normal if other compression options are set: [
ASTC compression quality is '
Optional ASTC compression mode when generating textures, by default this is inferred from the texture source: [
ASTC compression mode is '
Optional ASTC compression block size when generating textures, defaults to 4x4 if other compression options are set: [
ASTC block size is '
Optional Sampling quality when generating environment resource diffuse and specular cube maps: [
IBL sampling quality is '
Optional Sampling width when converting lat long images to cubemap: [
latllong sampling width is '
Optional Diffuse cube face size for IBL generation. By default diffuse cube is 
Diffuse cube map face size is '
', which could not be parsed as a positive integer
', but realitytool only supports from 1 to 
Specular cube map face size is '
Cube map face size is '
Texture color space is '
', but this is not a supported OCIO color space
Optional Color semantic for compiled texture data [
Texture color semantic is '
Required for IBL. Platform for compile: [
Failed to obtain an RE asset platform '
outputRealityAsset
deploymentTarget
latLongSamplingQuality
iblSamplingQuality
astcCompressionBlockSize
astcCompressionMode
astcCompressionQuality
Invalid number of keys found, expected one.
Failure patching schema into .rkassets - '
Compiles a Reality Composer Pro asset into a runtime file
Will need to sepecify output folder, platform, deploymentTarget, optional schema file, and input .rkassets or .skybox.
Note that schema files are only supported when compiling .rkassets.
Output for compiling Reality Composer Pro projects requires '
--derived-data is not supported for skybox assets
--schema-file is not supported for skybox assets
failed to create temp directory: 
--schema-file <file> must be specified when using --derived-data <path>
Optional .usda schema file generated by the create-schema command.
Optional Derived Data unique directory (requires --schema-file <file>)
Required Platform for compile: [
Required Deployment Target for os, like 1.0 for visionOS.
Input Reality Composer Pro asset
Optional Use Metal: {
_TtC11realitytool20SimulatorToolAdapter
positional
option
flag
long
short
longWithSingleDash
ArgumentParser/CompletionsGenerator.swift
Invalid CompletionShell: 
ArgumentParser/Argument.swift
--------------------------------------------------------------------
Can't read a value from a parsable
argument definition.
This error indicates that a property declared with an `@Argument`,
`@Option`, `@Flag`, or `@OptionGroup` property wrapper was neither
initialized to a value nor decoded from command-line arguments.
To get a valid value, either call one of the static parsing methods
(`parse`, `parseAsRoot`, or `main`) or define an initializer that
initializes _every_ property of your parsable type.
--------------------------------------------------------------------
Argument(*definition*)
ArgumentParser/Parsed.swift
Trying to get the argument set from a resolved/parsed property.
serializationVersion
defaultSubcommand
Show subcommand help information.
_TtC14ArgumentParser15ArgumentDecoder
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
ArgumentParser/ArgumentDecoder.swift
-r -f -a '(command 
 -- --custom (commandline -opc)[1..-1])'
-r -f -a '(__fish_complete_directories)'
-r -f -a '(for i in 
    set -l currentCommands (
 (commandline -opc))
    set -l expectedCommands (string split "
" $argv[1])
    set -l subcommands (string split "
" $argv[2])
    if [ (count $currentCommands) -ge (count $expectedCommands) ]
        for i in (seq (count $expectedCommands))
            if [ $currentCommands[$i] != $expectedCommands[$i] ]
                return 1
            end
        end
        if [ (count $currentCommands) -eq (count $expectedCommands) ]
            return 0
        end
        if [ (count $subcommands) -gt 1 ]
            for i in (seq (count $subcommands))
                if [ $currentCommands[(math (count $expectedCommands) + 1)] = $subcommands[$i] ]
                    return 1
                end
            end
        end
        return 0
    end
    return 1
# A function which filters options which starts with "-" from $argv.
function 
    set -l results
    for i in (seq (count $argv))
        switch (echo $argv[$i] | string sub -l 1)
            case '-'
            case '*'
                echo $argv[$i]
        end
    end
--experimental-dump-help
ArgumentParser/NameSpecification.swift
' has not characters to form short option name.
ArgumentParser/Option.swift
Option(*definition*)
element
parent
children
' for more information.
Unspecified version
experimental-dump-help
ArgumentParser/Flag.swift
ArgumentParser/CommandParser.swift
Unexpected error: 
The ParsableCommand "
" can't have itself as its own subcommand.
generateCompletionScript
ArgumentParser/OptionGroup.swift
OptionGroup(*definition*)
Tree<ParsableCommand.Type>
ArgumentParser/UsageGenerator.swift
preferredName cannot be nil for named arguments
Missing required subcommand.
Invalid option: -
Invalid option: 
' does not take any value, but '
' was specified.
Internal error. Invalid state while parsing command-line arguments.
Internal error. Parsing command-line arguments hit unimplemented code path.
Can't generate completion scripts for '
Please use --generate-completion-script=<shell> with one of:
    
Can't autodetect a supported shell.
Please use --generate-completion-script=<shell> with one of:
    
Unknown option '
'. Did you mean '
Missing value for '
 unexpected arguments: '
Unexpected argument '
Value to be set with 
 had already been set with 
Missing one of: '
Missing expected argument '
No value set for non-argument var 
. Replace with a static variable, or let constant.
' is invalid for '
' is invalid for '<
. Please provide one of the following:
. Please provide one of 
local context state state_descr line
_commandname=$words[1]
typeset -A opt_args
_custom_completion() {
    local completions=("${(@f)$($*)}")
    _describe '' completions
'(-): :->command'
case $state in
    (command)
        local subcommands
        subcommands=(
        )
        _describe "subcommand" subcommands
        ;;
    (arg)
        case ${words[1]} in
        esac
        ;;
esac
() {
    integer ret=1
    local -a args
    args+=(
    )
    _arguments -w -s -S $args[@] && ret=0
    return ret
{_custom_completion $_
{local -a list; list=(${(f)"$(
)"}); _describe '''' list}
Show help information.
Show the version.
SHELL
Flag(*definition*)
offset element 
 <subcommand>' for detailed help.
ArgumentParser/HelpGenerator.swift
    opts="$opts 
    if [[ $COMP_CWORD == "
" ]]; then
        COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
        return
    fi
    case ${COMP_WORDS[
    return
    ;;
    COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
cur="${COMP_WORDS[COMP_CWORD]}"
prev="${COMP_WORDS[COMP_CWORD-1]}"
COMPREPLY=()
COMPREPLY=( $(compgen -W "$("${COMP_WORDS[0]}" 
 "${COMP_WORDS[@]}")" -- "$cur") )
COMPREPLY=( $(compgen -W "
COMPREPLY=( $(compgen -d -- "$cur") )
COMPREPLY=( $(compgen -f -- "$cur") )
$("${COMP_WORDS[0]}" ---completion 
 "${COMP_WORDS[@]}")
T@"NSNumber",C,N,V_signalNumber
JSONObjectWithData:options:error:
_backtraceQueue
T@"NSArray",R,N,V_frameworkSearchPaths
_registrationID
T@"NSError",&,N,V_error
containsObject:
T@"NSNumber",C,N,V_exitStatus
initWithPlatformName:launchPath:frameworkSearchPaths:arguments:
T@"NSNumber",R,N,V_processIdentifier
isAlive
T@"NSString",C,N,V_processFailureDescription
numberWithBool:
T@"NSString",R,N,V_launchPath
release
T@"RTSimulatorToolLaunchContext",R,N,V_launchContext
T@?,R,C,N,V_terminationHandler
stringByAppendingPathComponent:
TB,N,V_success
success
.cxx_destruct
T@"NSString",R,N,V_platformName
T@"NSArray",R,N,V_arguments
_device
T@"NSDictionary",C,N,V_additionalEnvironment
arrayWithArray:
T@"NSNumber",C,N,V_exitCode
dealloc
T@"NSNumber",C,N,V_processIdentifier
initWithString:
T@"NSObject<RTSimulatorToolProxyDelegate>",R,W,N,V_proxyDelegate
isProxy
T@"NSString",R,N
processExitType
T@"RTSimulatorToolExecutionContext",R,N,V_executionContext
runtime
T@"SimDevice",R,N,V_device
setWithObjects:
TB,N,V_shouldRaiseOnFailures
stringFromDate:
TB,V_isAlive
Tq,N,V_processExitType
_additionalEnvironment
_arguments
_busyCountToolQueue
_cachedDisabledSimulatorJobs
_environmentForBootingDevice
_error
_executionContext
_exitCode
_exitStatus
_frameworkSearchPaths
_isAlive
_keepAlivePipe
_launchContext
_launchPath
_logAtLogLevel:withFormat:
_platformName
_processExitType
_processFailureDescription
_processIdentifier
_proxyDelegate
_queue
_shouldRaiseOnFailures
_signalNumber
_success
_terminationHandler
_toolExitDispatchSource
addEntriesFromDictionary:
addObject:
addObjectsFromArray:
additionalEnvironment
allObjects
allPlatforms
appendFormat:
appendString:
arguments
array
arrayWithObject:
arrayWithObjects:count:
autorelease
availableData
availableDevices
boolForKey:
boolValue
bootDeviceIfNeededWithLaunchContext:error:
bootWithOptions:error:
bundleIdentifier
canonicalName
class
code
componentsJoinedByString:
componentsSeparatedByString:
conformsToProtocol:
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
copy
copyItemAtURL:toURL:error:
count
countByEnumeratingWithState:objects:count:
createDeviceWithType:runtime:name:error:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
currentRunLoop
currentThread
debugDescription
defaultManager
defaultPaths
deleteDevice:error:
description
developerDirectory
device
deviceSetWithPath:error:
deviceType
dictionary
dictionaryRepresentation
dictionaryWithContentsOfFile:
dictionaryWithObjects:forKeys:count:
didLaunchWithPipeToKeepAlive:error:
didShutdownTool:
directoryContents
disabledSimulatorJobs
domain
dvt_cachedEnvironment
dvt_isNonEmpty
dvt_objectsPassingTest:
enumerateKeysAndObjectsUsingBlock:
enumerateObjectsWithOptions:usingBlock:
environment
environmentWithLaunchContext:error:
error
errorWithDomain:code:userInfo:
executionContext
existsInFileSystem
exitCode
exitStatus
family
fileDescriptor
fileExistsAtPath:
fileExistsAtPath:isDirectory:
fileHandleWithStandardError
fileHandleWithStandardOutput
fileManager:shouldCopyItemAtPath:toPath:
fileManager:shouldCopyItemAtURL:toURL:
fileManager:shouldLinkItemAtPath:toPath:
fileManager:shouldLinkItemAtURL:toURL:
fileManager:shouldMoveItemAtPath:toPath:
fileManager:shouldMoveItemAtURL:toURL:
fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:
fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:
fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:
fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:
fileManager:shouldProceedAfterError:movingItemAtPath:toPath:
fileManager:shouldProceedAfterError:movingItemAtURL:toURL:
fileManager:shouldProceedAfterError:removingItemAtPath:
fileManager:shouldProceedAfterError:removingItemAtURL:
fileManager:shouldRemoveItemAtPath:
fileManager:shouldRemoveItemAtURL:
filePathForPathString:
filePathForRelativePathString:
frameworkSearchPaths
frameworkSearchPathsForOverlayToolsForDVTPlatform:
getDeltaTimeString
handshakeWithPlatformToolWithPID:proxyDelegate:launchContext:optionalLifelinePipe:error:
hasSuffix:
hash
ib_addObjectsFromCollection:
ib_aggregatedDescriptionAndFailureReasons
ib_dictionaryByRemovingObjectsForKeys:
ib_errorWithLocalizedDescriptionFormat:
ib_errorWithUnderlyingError:recoverySuggestion:localizedDescriptionFormat:
ib_objectForKey:creatingIfNecessaryWithBlock:
ib_setByIntersectingSet:
ib_setBySubtractingSet:
identifier
init
initWith:
initWithData:encoding:
initWithExecutionContext:launchContext:proxyDelegate:terminationHandler:error:
initWithFileDescriptor:
initWithSimDevice:
initialize
instanceMethodForSelector:
instancesRespondToSelector:
integerForKey:
integerValue
isAbsolutePath
isEqual:
isEqualToString:
isKindOfClass:
isMainThread
isMemberOfClass:
lastPathComponent
launchAndConnectToToolWithLaunchContext:proxyDelegate:error:useMetal:
launchContext
launchJobsScannedForRuntimeRoot:
launchPath
launchToolInSimulator:dvtPlatform:platformVersion:error:useMetal:
length
localizedDescription
logAspectWithName:
logLevel
mainBundle
name
numberWithInt:
numberWithInteger:
objectForKey:
objectForKeyedSubscript:
orderedSet
osPlatform
osPlatformFromSimulator
pathExtension
pathString
pathToOverlayToolNamed:dvtPlatform:platformVersion:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
pipe
platformForIdentifier:
platformForName:
platformName
platformPath
populateDYLDFrameworkSearchPaths:launchContext:
populateEnvironment:launchContext:error:
populateLaunchJobForRuntimeRoot:requiredIdentifiers:disabledIdentifiers:
processFailureDescription
processIdentifier
processInfo
propertyListDictionary
proxyDelegate
realityToolForDVPlatform:platformVersion:arguments:launchError:useMetal:
registerDefaults:
registerNotificationHandlerOnQueue:handler:
removeItemAtURL:error:
removeObjectAtIndex:
removeObjectForKey:
replaceSimDeviceInstanceMethodsIfNeeded
requestedJobsFromRTEnableSimulatorJobs
respondsToSelector:
resultWithFailure
resultWithNSError:
resultWithSuccess
retain
retainCount
root
rtSpawnWithPath:options:terminationQueue:terminationHandler:pid:error:
rtSpawningRTSimulatorToolProcess
rtSwizzledEnvironment
rt_errorWithLocalizedDescription:
rt_errorWithLocalizedDescription:failureReason:recoverySuggestion:
rt_errorWithLocalizedDescription:failureReason:recoverySuggestion:domain:code:
rt_errorWithLocalizedDescription:failureReason:recoverySuggestion:domain:code:recoveryOptions:recoveryAttempter:
runRealityProducer:dvtPlatform:platformVersion:useMetal:
runUntilDate:
runtimeInternalState
sdkForCanonicalName:
self
serviceContextForDeveloperDir:error:
setAdditionalEnvironment:
setDateFormat:
setDelegate:
setError:
setExitCode:
setExitStatus:
setIsAlive:
setObject:forKey:
setProcessExitType:
setProcessFailureDescription:
setProcessIdentifier:
setRtSpawningRTSimulatorToolProcess:
setShouldRaiseOnFailures:
setSignalNumber:
setSuccess:
setupToolExitDispatchSource
shouldRaiseOnFailures
shouldUseDefaultRealityCompilerForPlatform
shutdown
shutdownAndForceToolProxyKill
signalNumber
simulatorPlatform
simulatorPlatformFromOS
simulatorRuntimeFromService:matchingSDK:error:
spawnWithPath:options:terminationQueue:terminationHandler:pid:error:
standardUserDefaults
startTime
state
stringByAppendingFormat:
stringByAppendingString:
stringByDeletingLastPathComponent
stringByDeletingPathExtension
stringByReplacingOccurrencesOfString:withString:options:range:
stringByStandardizingPath
stringByTrimmingCharactersInSet:
stringForKey:
stringWithFormat:
stringWithString:
subpathsOfDirectoryAtPath:error:
substringToIndex:
superclass
supportedDeviceTypes
supportsDeviceType:
temporaryDirectory
terminationHandler
timeInfo
toolName
toolsInfo
unsignedIntegerValue
userDataDirectoryForCurrentApplication
valueForKey:
whitespaceAndNewlineCharacterSet
zone
realitytool Path = '%@'
Spawning realitytool on device %@
Spawning %sstandalone (%s metal)
Best Sim Runtime %@
_pXpG
So8NSStringC
$sSY
$ss25ExpressibleByArrayLiteralP
$ss10SetAlgebraP
$ss9OptionSetP
$ss21_ObjectiveCBridgeableP
Sg_ABt
ySSG
ySS_SftG
SS_Sft
ySSSf_G
$ss12CaseIterableP
yypG
So9OS_os_logC
ySSypG
SS_ypt
ySSSfG
SaySSG
So13NSFileManagerC
So8NSObjectC
_AAt
ySay
GADGGG
ySay
ySay
_pGIegn_
GIeggg_
ySnySiGG
SS9directory_t
_GSg
SS4path_SS17expectedExtensiont
SS4path_t
Sgz_Xx
ySSSgG
ySbG
SSSg
ySS_
ySS_
ySS_
ySS_
ySS_
ySS_
ypXmT_
ySSG
_pIeggrzo_
qd__
qd__Sg
SSqd__
_pIeggrzo_
Sayqd__G
$s14ArgumentParser13ParsedWrapperP
_SitG
_Sit
ySsG
ySaySSGG
_pXpG
ySiG
8RawValueSYQz
$s14ArgumentParser013ExpressibleByA0P
$s14ArgumentParser22DecodableParsedWrapperP
5Value
ypSg
SaySSGSg
ySaySSGG
_pXpG
SbSg
ySaySSGSSG
SgS2S
_pIegggggrzo_
ySSSay
_pXpGADG
_ypt
$s14ArgumentParser20ArrayWrapperProtocolP
_pXp
$ss30KeyedDecodingContainerProtocolP
SayypG
yypG
_pXpGG
_pXp_AA_pXpt
SayxG
_pXpSg
ySSG
$s14ArgumentParser0A19DefinitionContainerP
$s14ArgumentParser0a32DefinitionContainerExpressibleByA0P
9Contained
ztKc
SS9Contained
_pIeggrzo_
SgSS9Contained
_pIegggggrzo_
7Initial
QzSg
ztKc
SgSS
ztKc
SS_Sb14withSingleDasht
SJ_Sb14allowingJoinedt
SaySSG10extensions_t
SaySSGAAc
yxGSgXw
yxGG
yyXlG
_pXpGACG
_pXpGACSgIegnr_
_pXp
_SSt
SS4text_t
SS7message_SS5usageSS4helpt
SS7message_
8exitCodet
_pSg
_pXmTSg
Sb8inserted_
17memberAfterInsertt
$s14ArgumentParser15ParsableCommandP
_SStG
_SSt
ySi_
SaySsG
$s14ArgumentParser17ParsableArgumentsP
$s14ArgumentParser0A11SetProviderP
SSSg5label_yp5valuet
_pSg
SgSSyp
_pIegggggrzo_
10visibility_t
SSSg5shell_t
_SStG
8previous_AA9duplicateSaySSG13originalInputt
6forKey_t
SgSS
6forKey
_pSg13originalErrort
ypSg_
6forKeyt
Si_Sit
Sayqd__GSg
Sbz_Xx
ySSSgG
yAAyABySaySSSgGACGGSSGG
yAAySaySSSgGACGGSSG
ySaySSSgGACGG
ySaySSSgGABG
SaySSSgG
ySay
GSSG
$ss32ExpressibleByStringInterpolationP
$ss26ExpressibleByStringLiteralP
$ss43ExpressibleByExtendedGraphemeClusterLiteralP
$ss33ExpressibleByUnicodeScalarLiteralP
$sST
SnySiG
$sSl
$sSK
$sSk
_SStSg
rawValue
_rawValue
RawValue
ArrayLiteralElement
Element
_ObjectiveCType
true
false
auto
message
AllCases
RawValue
note
warning
error
logger
osLogType
RawValue
failedToLoadFile
failedToDecodeData
failedToEncodeData
failedToConvertDataToString
failedToWriteFile
originalRKAssetsURL
originalRKAssetSubpaths
fileManager
fmDelegate
realitySymbolCache
userCodeRegistry
subscriptions
derivedDataRootURL
schemaURL
unableToCopy
unableToDeleteOldFiles
invalidURLComponent
sourceCodeIncompatibility
noDerivedDataRootURLProvided
noSchemaURLProvided
failedReadingSchemaFile
noSymbolCache
noUserCodeRegistry
nothingToDo
failedGettingSubpathsOf
failedReadingFile
inputFileBadExtension
rkAssetsIsNotDirectory
outputFolderIsNotDirectory
cannotGetRkassetsContents
originalPath
standardizedPathURL
needToReplace
_outputSchema
_moduleWithDependencies
outputSchema
moduleWithDependencies
_outputRealityAsset
_platform
_deploymentTarget
_semantic
_colorSpace
_cubeFaceSize
_specularSize
_diffuseSize
_latLongSamplingQuality
_iblSamplingQuality
_generateCubeMap
_astcCompressionBlockSize
_astcCompressionMode
_astcCompressionQuality
_inputURL
mode
cubemap
texture
outputRealityAsset
platform
deploymentTarget
semantic
colorSpace
cubeFaceSize
specularSize
diffuseSize
latLongSamplingQuality
iblSamplingQuality
generateCubeMap
astcCompressionBlockSize
astcCompressionMode
astcCompressionQuality
inputURL
_outputReality
_schemaFile
_derivedData
_platform
_deploymentTarget
_useMetal
_inputURL
outputReality
schemaFile
derivedData
platform
deploymentTarget
useMetal
inputURL
RawValue
AllCases
rawValue
Value
_parsedValue
base
name
path
value
definition
RawValue
serializationVersion
command
superCommands
commandName
abstract
discussion
defaultSubcommand
subcommands
arguments
kind
shouldDisplay
sectionTitle
isOptional
isRepeating
names
preferredName
valueName
defaultValue
allValues
name
long
short
longWithSingleDash
positional
option
flag
_subcommands
_help
commandStack
visibility
subcommands
help
_elements
ArrayLiteralElement
argumentIndex
defaultValue
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
underlying
parsedElement
type
value
wrongKeyType
topLevelHasNoUnkeyedContainer
topLevelHasNoSingleValueContainer
singleValueDecoderHasNoContainer
base
currentIndex
array
commandName
_superCommandName
abstract
usage
discussion
version
shouldDisplay
subcommands
defaultSubcommand
helpNames
RawValue
message
rawValue
base
helpRequest
dumpRequest
Contained
Initial
default
scanningForValue
unconditional
upToNextOption
allRemainingInput
postTerminator
allUnrecognized
kind
help
completion
parsingStrategy
update
initial
options
defaultValue
keys
allValues
isComposite
abstract
discussion
valueName
visibility
parentTitle
nullary
unary
named
positional
rawValue
ArrayLiteralElement
Element
RawValue
value
inputOrigin
shouldClearArrayIfParsed
elements
originalInput
capturedUnrecognizedArguments
ArrayLiteralElement
elements
base
customLong
customShort
long
short
kind
list
file
shellCommand
custom
default
directory
Value
_parsedValue
base
element
parent
children
recursiveSubcommand
_elements
firstUnused
originalInput
inputIndex
subIndex
value
index
option
terminator
name
nameWithValue
rawValue
RawValue
complete
help
validation
other
commandStack
parserError
visibility
_generateCompletionScript
generateCompletionScript
Value
_parsedValue
_visibility
_dummy
title
base
default
hidden
private
_options
options
helpRequested
completionScriptRequested
completionScriptCustomResponse
unsupportedShell
unknownOption
invalidOption
nonAlphanumericShortOption
missingValueForOption
unexpectedValueForOption
unexpectedExtraValues
duplicateExclusiveValues
noValue
unableToParseValue
userValidationError
noArguments
versionRequested
dumpHelpRequested
notImplemented
invalidState
missingSubcommand
wrongType
subcommandLevelMismatch
subcommandLevelMissing
subcommandLevelDuplicated
subcommandNameMismatch
expectedCommandButNoneFound
Value
_parsedValue
base
prefixedNo
prefixedEnableDisable
exclusive
chooseFirst
chooseLast
header
elements
discussion
isSubcommands
commandStack
abstract
usage
sections
discussionSections
label
title
positionalArguments
subcommands
options
content
long
short
longWithSingleDash
StringInterpolation
StringLiteralType
ExtendedGraphemeClusterLiteralType
UnicodeScalarLiteralType
abstract
discussion
valueName
visibility
Element
Iterator
Index
SubSequence
Indices
content
namePositions
usda
usdc
usdz
skybox
rkassets
macosx
iphoneos
iphonesimulator
xros
xrsimulator
none
fast
normal
fast
normal
high
veryhigh
10x5
10x6
10x8
10x10
12x10
12x12
linearLDR
sRGBLDR
linearHDR
fast
normal
high
exhaustive
macosx
bash
fish
help
version
