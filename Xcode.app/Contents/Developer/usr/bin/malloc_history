@(#)PROGRAM:malloc_history  PROJECT:SamplingTools-64566.76
Displays/aggregates allocation histories in a process
<pid | partial-process-name> [options] <mode> [<address> ... | <classes-pattern>]
'mode' should be one of -callTree, -allBySize, -allByCount, -allEvents, or one or more addresses.
The <classes-pattern> for -callTree can be followed by a malloc size specification
of the form [size] or [lowerBound-upperBound], such as 'malloc[1024]' or 'CFData[16k-]'.
allBySize
[mode]
v8@?0
allByCount
allEvents
fullStacks
print backtraces with one line per frame
callTree
debug
uniquingTableStats
print debug information about the stack uniquing table
highWaterMark
show information about allocations and VM regions that were live at the peak memory usage of a target process; requires full mode of MallocStackLogging, in either a live process or a memgraph recorded with -fullStackHistory
machineReadableOutput
showContent
(-allEvents, -callTree only)
readonlyContent
noContent
invert
(-callTree only)
ignoreThreads
collapseRecursion
chargeSystemLibraries
consolidateAllBySymbol
consolidateSystemFramesBySymbol
virtual
(-callTree only) -- show virtual size of VM regions rather than dirty+swapped-purgableVolatile
forkCorpse
generate a corpse fork from process and run malloc_history on it
forkCorpseRetryTime
when creating a process corpse under system pressure, retry for the specified number of seconds
v24@?0@"NSString"8^@16
getCorpseFromParent
quiet
suppress the process description header and footer
forceAnalysisEvenIfFullStackLogsFailedToSave
showTiming
initialization
bad address %@ specified
no process id or name specified
specify only one mode (-callTree, -allBySize, -allByCount, -allEvents, or one or more addresses)
specify only one content level (-showContent, -readonlyContent, -noContent
cannot use -showContent or -readonlyContent with -highWaterMark, since the malloc heap has probably changed since high water mark
<classes-pattern> is only supported by -callTree
do not pass specific addresses or <classes-pattern> with -allEvents
only call tree / all events mode support -showContent or -readonlyContent
cannot use call tree options when not passing -callTree
no mode, address, or <classes-pattern> specified
%s[%d]: [fatal] unable to read input graph: %s
Analyzing anyway since -force argument was passed.
Use -force argument to run analysis anyway.
The target process has no stack logs.  Run it with the MallocStackLogging environment variable set to get stack logs.
int main(int, char **)
malloc_history_main.m
Expected to get VMUGraphStackLogReader from memgraph
Can't show high water mark because memgraph is from target process that ran with lite mode of MallocStackLogging.
Can't show high water mark because memgraph was not saved with -fullStackHistory argument.
malloc_history
finding high water mark
expected no addresses to be passed with -allEvents
v16@?0^v8
generate analysis task
create symbolicator for task
malloc_history was unable to acquire a symbolicator for the target process.
Can't show high water mark when target process is run in lite mode of malloc stack logging.
create process description
%s[%d]: [fatal] %s
%s[%d]: [fatal] unable to introspect malloc zones to get allocation information
Process %d is not debuggable. Due to security restrictions, malloc_history can only show contents of readonly memory of restricted processes.
int main(int, char **)_block_invoke
v16@?0i8I12
v36@?0I8Q12Q20{?=Q}28
Can't report high water mark because full stack history is not available, only allocation backtraces of live allocations.
Can't report high water mark because no stack log information is available.
High water mark of allocated heap + VM memory: %*s  at malloc stack log record index %*s
     Current total allocated heap + VM memory: %*s  at malloc stack log record index %*s
  Cumulative total allocated heap + VM memory: %*s
            Total heap + VM memory operations: %*s  allocations: %*s  deallocations: %*s
High water mark of allocated heap memory
High water mark at malloc stack log record index
Current total allocated heap memory
Current total at malloc stack log record index
Cumulative total allocated heap memory
Total heap memory operations (count)
Total heap memory allocations (count)
Total heap memory deallocations (count)
VM Regions
v52@?0I8{?=Qb60b4@}12@"DVT_VMUVMRegion"36^B44
%d blocks in zone %s
%i: %#qx %s -- 
%ld stack frames
 -- NO STACK !!!
 -- SHORT STACK
  %s
  0x%qx 
%d total blocks
MallocStackLoggingLiteZone
MallocStackLoggingLiteZone_Wrapper
Nodes in Uniquing Table: %llu
printCallTree
step 1 -- build map table with live malloc block addresses as keys
VM: 
step 2 -- enumerate stack log records to record unique backtrace IDs for objects of interest
step 2 -- enumerate stack log records to record unique backtrace IDs for objects that were live at high water mark
HighWaterMarkException
void printCallTree(__strong id<VMUCommonGraphInterface>, CSSymbolicatorRef, HighWaterMarkInfo *, VMUCallTreeOptions, VMUObjectContentLevel, BOOL, BOOL, NSHashTable *__strong, __strong id<VMUStackLogReader>)
Unexpected exception
%qu objects in liveObjectToUniqueBacktraceMap
step 3 -- from liveObjectToUniqueBacktraceMap, create uniqueBacktraceToObjectsMap
%qu unique stacks in uniqueBacktraceToObjectsMap
step 4 -- build call tree by iterating the uniqueBacktraceToObjectsMap
CONTENT:  
step 5 -- print call tree
VM region sizes shown as %s.
virtual size
dirty + swapped/compressed - purgableVolatile
Stack backtrace%s for allocation%s
Stack backtraces for allocations that match pattern '%s'
Malloc blocks with no stack: %6u   total size: %s
   VM regions with no stack: %6u   total size: %s
" PLUS %lu MORE LINES
%@  %@  %@
malloc<%llu>
NSString *generateContentAndTypeLabel(__strong id<VMUCommonGraphInterface>, uint32_t, BOOL)
expected to get vmRegionTypeString for VM region
    
error acquiring stack with identifier: %llu (frame count %u)
void printAllBySizeOrCount(HighWaterMarkInfo *, BOOL, NSHashTable *__strong, __strong id<VMUStackLogReader>)_block_invoke
unexpected stack logging event type
void printAllBySizeOrCount(HighWaterMarkInfo *, BOOL, NSHashTable *__strong, __strong id<VMUStackLogReader>)
%d call%s for %qd bytes: 
v44@?0I8{?=Qb60b4@}12^B36
0x%qx
0x%qx
%s 0x%qx-0x%qx [size=%qu]: %s 
ALLOC
VM_ALLOC
FREE
VM_DEALLOC
0x%qx
%s  0x%qx: 
%s  0x%qx-0x%qx [size=%qu]: 
void printAddressHistory(__strong id<VMUCommonGraphInterface>, HighWaterMarkInfo *, mach_vm_address_t, __strong id<VMUStackLogReader>, VMUObjectContentLevel, BOOL)_block_invoke
void printAddressHistory(__strong id<VMUCommonGraphInterface>, HighWaterMarkInfo *, mach_vm_address_t, __strong id<VMUStackLogReader>, VMUObjectContentLevel, BOOL)
no stack logs found for 0x%qx
not lite zone
Call graph:
Total number in stack -- this line is here to get the correct format for importing with the Sampler instrument in Instruments.app
Stack logging was dynamically enabled in target process, after it was launched,
so no backtraces are available for earlier allocations.
malloc_history Report Version:  2.0
----
.memgraph
%s[%d]: [fatal] unable to suspend target process: %s
%s[%d]: task_stop_peeking failed. (%s)
%s[%d]: mach port for process %d not valid
%s[%d]: %s
%s[%d]: [fatal] mach port for process %d not valid
Command args:    %@
Target process:  %@ [%u]
Parent process:  %@ [%u]
xctest
sharedCode.m should have been built with -DSAMPLING_TOOLS_TESTS for use with xctest
Target process of memgraph:  %@ [%u]
%s[%d]: [fatal] Expected to get a VMUTask of type task.
v16@?0@"DVT_VMUTask"8
SAMPLING_TOOLS_TARGET_PID
%s[%d]: [fatal] failed to open core file: %s
%s[%d]: [fatal] error acquiring target task port from parent.
%s[%d]: %s cannot find any existing process %s a name like '%s'%s.
you have access to which has
with
; try running with `sudo`
%s[%d]: cannot examine itself.
%s[%d]: [fatal] Target task not available for analysis
%s[%d]: [fatal] %s kept pid %u suspended for too long - exiting to prevent watchdog timer from killing that process.
%s[%d]: [fatal] %s analysis of pid %u reached time limit of %llu seconds, exiting.
v16@?0i8B12
SAMPLING_TOOLS_ALL_PROCESSES
Target process is using %s so not generating corpse for better performance.
Target process is an ancestor and permitting live process for ancestors so not generating a corpse to save resources by default.
__check_mach_ports_lookup
: terminated; resuming target task
: interrupted; resuming target task
task from parent for pid %u
%s[%d]: [fatal] Failed to get DYLD info for %s with error %s (%d). Assuming it's a minimal corpse which can't be analyzed, which we sometimes see for processes which use a lot of memory.
%s[%d]: Failed to get DYLD info for %s with error %s (%d). Assuming it's a minimal corpse which can't be analyzed, which we sometimes see for processes which use a lot of memory.
for unknown reasons
for unknown reasons, even though it appears to exist
because it no longer appears to be running
because the process does not exist
because you do not have appropriate privileges to examine it
%s[%d]: %s cannot examine process %d (%s) %s%s.
%s[%d]: %s cannot examine process %d (with name like '%s') %s.
%s[%d]: %s cannot examine process %d %s.
SIMULATOR_ROOT
SIMULATOR_SHARED_RESOURCES_DIRECTORY
libclang_rt.asan
Address Sanitizer
libclang_rt.tsan
Thread Sanitizer
v24@?0{_CSTypeRef=QQ}8
<unknown>
%s[%d]: No process corpse slots currently available, waiting to get one
no corpse slots are available
target process %s (%d) is too large, or system memory pressure is to high
libgmalloc.dylib
possible high VM usage by GuardMalloc
corpse creation encountered the unexpected error %s (%d) for %s (%d)
generated corpse for pid %u
%s[%d]: [fatal] Kernel generated only a minimal corpse from the process with error %s (%d)
%s[%d]: Kernel generated only a minimal corpse from the process with error %s (%d) - examining live process instead
%s[%d]: [fatal] Failed to generate corpse: %s, exiting
%s[%d]: Failed to generate corpse: %s - examining live process instead
BOOL _respawnToolIfNecessaryVMUTaskWithExitStatus(DVT_VMUTask * _Nullable __strong, VMURespawnToolOptions, int *, uint64_t)
Only one of kVMURespawnForAllProcesses and kVMURespawnForAllNonNativeProcesses can be set
DYLD_ROOT_PATH
%s[%d]: [fatal] Failed to create symbolicator for target
SIMULATOR_UDID
DT_NO_RESPAWN
DT_FORCE_RESPAWN
%s[%d]: [fatal] respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but analysis process does not match architecture of target process %d.
%s[%d]: respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but the analysis process does not match the SDK variant of the target process %d.
Analysis of malloc zones may fail.
DT_NO_RESPAWN_TO_OS
DYLD_FRAMEWORK_PATH
DYLD_SHARED_REGION
avoid
DYLD_FORCE_PLATFORM
arm64
x86_64
posix_spawnattr_init
posix_spawnattr_setbinpref_np
%s[%d]: [fatal] 'mach_ports_register' failed: %s (%d)
--al
-atExit
%s[%d]: [fatal] posix_spawn: %s could not be launched as a %d-bit process with architecture %s: %s (%d)
%s[%d]: [fatal] waitpid: %s
_respawnToolIfNecessaryVMUTaskWithExitStatus_block_invoke
sharedCode.m
WIFSIGNALED(child_status)
Child `%s` process died with signal %d %s
v12@?0I8
com.apple.SymbolicationDT
Symbolication.framework/Symbolication
com.apple.CoreSymbolicationDT
CoreSymbolication.framework/CoreSymbolication
64544
/System/Library/PrivateFrameworks/%s
%s/usr/bin/%s
v20@?0I8@?<v@?>12
[fatal] unable to read input graph: %s
malloc_history
finding high water mark
generate analysis task
create symbolicator for task
create process description
[fatal] %s
[fatal] unable to introspect malloc zones to get allocation information
printCallTree
step 1 -- build map table with live malloc block addresses as keys
step 2 -- enumerate stack log records to record unique backtrace IDs for objects of interest
step 2 -- enumerate stack log records to record unique backtrace IDs for objects that were live at high water mark
step 3 -- from liveObjectToUniqueBacktraceMap, create uniqueBacktraceToObjectsMap
step 4 -- build call tree by iterating the uniqueBacktraceToObjectsMap
step 5 -- print call tree
[fatal] unable to suspend target process: %s
[fatal] mach port for process %d not valid
examining %@ [%u]
[fatal] Expected to get a VMUTask of type task.
[fatal] failed to open core file: %s
[fatal] error acquiring target task port from parent.
[fatal] Target task not available for analysis
[fatal] %s kept pid %u suspended for too long - exiting to prevent watchdog timer from killing that process.
[fatal] %s analysis of pid %u reached time limit of %llu seconds, exiting.
[fatal] Failed to get DYLD info for %s with error %s (%d). Assuming it's a minimal corpse which can't be analyzed, which we sometimes see for processes which use a lot of memory.
No process corpse slots currently available, waiting to get one
[fatal] Kernel generated only a minimal corpse from the process with error %s (%d)
Kernel generated only a minimal corpse from the process with error %s (%d) - examining live process instead
[fatal] Failed to generate corpse: %s, exiting
Failed to generate corpse: %s - examining live process instead
[fatal] Failed to create symbolicator for target
[fatal] respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but analysis process does not match architecture of target process %d.
[fatal] 'mach_ports_register' failed: %s (%d)
[fatal] posix_spawn: %s could not be launched as a %d-bit process with architecture %s: %s (%d)
[fatal] waitpid: %s
%s[%d]: [error] 'mach_port_mod_refs' failed: %s (%d)
%s[%d]: [error] 'mach_port_deallocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_allocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_insert_right' failed: %s (%d)
ObjectLocalToThisFile
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>22A380021</string>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.dt.SamplingTools.malloc-history</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>SamplingTools</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>MacOSX</string>
</array>
<key>CFBundleVersion</key>
<string>1.0</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>24A277a</string>
<key>DTPlatformName</key>
<string>macosx</string>
<key>DTPlatformVersion</key>
<string>15.0</string>
<key>DTSDKBuild</key>
<string>24A277a</string>
<key>DTSDKName</key>
<string>macosx15.0.internal</string>
<key>DTXcode</key>
<string>1600</string>
<key>DTXcodeBuild</key>
<string>16A5202f</string>
<key>LSMinimumSystemVersion</key>
<string>13.0</string>
</dict>
</plist>
arrayWithArray:
addAllNodesFromTaskWithError:
enumerateMSLRecordsAndPayloads:
addChildWithName:address:count:numBytes:toNode:
member:
addRange:
setNumberStyle:
appendFormat:
valueForEnvVar:
UTF8String
containsString:
addBacktrace:count:numBytes:
is64Bit
addObject:
allBacktracesHaveBeenAdded
stringByResolvingSymlinksInPath
arguments
attributesOfItemAtPath:error:
binaryImagesDescription
binaryName
bundleWithIdentifier:
code
coldestFrameIsNotThreadId
compare:
componentsJoinedByString:
componentsSeparatedByCharactersInSet:
componentsSeparatedByString:
count
createSymbolicatorWithFlags:andNotification:
currentHandler
dataWithContentsOfFile:options:error:
date
dateWithTimeIntervalSinceNow:
defaultManager
description
directedGraphWithData:error:
diskLogs
displayName
endEvent:
enumerateObjectsWithBlock:
executablePath
fileExistsAtPath:isDirectory:
fileSize
functionNameForPCaddress:
getFramesForAddress:size:inLiteZone:stackFramesBuffer:
getFramesForStackID:stackFramesBuffer:
getPlatform:
handleFailureInFunction:file:lineNumber:description:
hasPrefix:
hasSuffix:
initWithCorePath:originalBinaryPaths:error:
initWithPattern:forArgument:error:
initWithPid:
initWithSymbolicator:sampler:options:
initWithTask:
initWithTask:getBinariesList:
initWithTask:options:
initWithTask:symbolicator:
intValue
invertedNode
isCore
isEqualToString:
isExclave
isExecutableFileAtPath:
isSemiCriticalProcess
isSemiCriticalProcessWithNoTimeLimit
isSimulator
isTranslated
labelForNode:
lastPathComponent
length
localizedDescription
logHandle
mapTableWithKeyOptions:valueOptions:
matchesNodeDetails:orNodeDescription:
memoryCache
name
newlineCharacterSet
nodeDetails:
nodesInUniquingTable
numberWithInt:
numberWithLongLong:
numberWithUnsignedInt:
objectAtIndexedSubscript:
objectForInfoDictionaryKey:
objectForKey:
parentPid
parentProcessPath
parseArguments:withBlock:
parseMacOSArchitectureFromProcessDescription
processDescription
processDescriptionString
processInfo
processName
rangeAtIndex:
rangeOfCharacterFromSet:options:
registerOptionWithLongName:shortName:argumentKind:argumentName:optionDescription:flags:handler:
setCountStyle:
setDiscussion:
setObject:atIndexedSubscript:
setObject:forKey:
setObjectContentLevel:
setPurposeDescription:
setSingleHyphenLongNames:
setStackLogReader:
setSyntaxDescription:
sharedTimer
shouldAnalyzeWithCorpse
signpostID
sort
stackLogReader
startPeeking
startWithCategory:message:
startWithMessage:
stop
stopPeeking
string
stringByAppendingFormat:
stringByAppendingString:
stringByReplacingOccurrencesOfString:withString:
stringFromByteCount:
stringFromCallTreeIndentIfNoBranches:
stringFromNumber:
stringValue
stringWithFormat:
stringWithUTF8String:
symbolStore
symbolicatedBacktraceForStackID:options:
symbolicator
symbolicatorFromBinaryImagesDescription:withArchitecture:
taskPort
taskType
type
typeName
usage:
usesLiteMode
vmuVMRegionForNode:
zoneCount
zoneNameForIndex:
