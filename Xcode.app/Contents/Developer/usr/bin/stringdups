@(#)PROGRAM:stringdups  PROJECT:SamplingTools-64566.76
[-minimumCount <count>] [-stringsOnly] [-nostacks] [-callTrees] [-invertCallTrees] <pid | partial-process-name | memory-graph-file>
help
v8@?0
minimumCount
count
only show information for object descriptions with at least <count> occurrences.  Default count is 2.
v24@?0@"NSString"8^@16
stringsOnly
only show descriptions for C or Pascal strings or __NSCFString objects, not for collection classes etc
nostacks
don't print call trees even if target process ran with MallocStackLogging env var set
fullStacks
print backtraces with one line per frame
callTrees
if stacks are available, consolidation is normally done by stack.  Use -callTrees to consolidate by string instead
invertCallTrees
same as -callTrees but print call trees from hottest to coldest frame (e.g., malloc first)
rawNames
show raw class names instead of display names
forkCorpse
generate a corpse fork from process and run stringdups on it
forkCorpseRetryTime
when creating a process corpse under system pressure, retry for the specified number of seconds
getCorpseFromParent
allProcesses
minimumPid
run stringdups against all processes (or those >= minimumPid), with the given arguments
%s[%d]: [fatal] failed to open core file: %s
unknown argument: %@
no process id or name specified
%s[%d]: [fatal] unable to read input graph: %s
Showing object labels that have at least %lu duplicates.  Pass the "-minimumCount <count>" argument to change the threshold.
v16@?0@"NSString"8
No object labels had %lu duplicates.
stringdups was unable to acquire a symbolicator for the target process.
%s[%d]: [fatal] unable to introspect malloc zones to get allocation information
%s[%d]: [fatal] %s
Process %d is not debuggable. Due to security restrictions, stringdups can only show contents of readonly memory of restricted processes.
v16@?0@"DVT_VMUTask"8
/tmp
The memory graph file only contains labels for contents of readonly memory of the target process, so only those items can be shown.
The memory graph file does not contain any labels for allocations.
.memgraph
%s[%d]: [fatal] unable to suspend target process: %s
%s[%d]: task_stop_peeking failed. (%s)
%s[%d]: mach port for process %d not valid
%s[%d]: %s
%s[%d]: [fatal] mach port for process %d not valid
Command args:    %@
Target process:  %@ [%u]
Parent process:  %@ [%u]
xctest
sharedCode.m should have been built with -DSAMPLING_TOOLS_TESTS for use with xctest
Target process of memgraph:  %@ [%u]
%s[%d]: [fatal] Expected to get a VMUTask of type task.
SAMPLING_TOOLS_TARGET_PID
%s[%d]: [fatal] error acquiring target task port from parent.
%s[%d]: %s cannot find any existing process %s a name like '%s'%s.
you have access to which has
with
; try running with `sudo`
%s[%d]: cannot examine itself.
%s[%d]: [fatal] Target task not available for analysis
%s[%d]: [fatal] %s kept pid %u suspended for too long - exiting to prevent watchdog timer from killing that process.
%s[%d]: [fatal] %s analysis of pid %u reached time limit of %llu seconds, exiting.
v16@?0i8B12
SAMPLING_TOOLS_ALL_PROCESSES
Target process is using %s so not generating corpse for better performance.
Target process is an ancestor and permitting live process for ancestors so not generating a corpse to save resources by default.
__check_mach_ports_lookup
i24@?0r^v8r^v16
%s-%d-%s
DT_RESPAWN_FOR_NONNATIVE
%s/%s[%d]-allProcesses.XXXXXX
%s[%d]: [fatal] Couldn't create output directory from template %s, %s. Exiting
%s[%d]: [fatal] Couldn't change directory to %s
stderr.txt
Couldn't create error file stderr.txt (%s)
Couldn't replace stderr file with stderr.txt (%s)
Writing all output files into %s
Skipping process of wrong architecture:  %d %s
ANALYZING PROCESS %5d: %s
.txt
Couldn't open output file %s (%s)
Couldn't replace output file with %s (%s)
    CHILD ANALYSIS TOOL CRASHED with %s
    %s for %5d: %s
Exception '%s', reason: '%s'
v16@?0i8I12
v40@?0i8r*12B20I24I28^B32
Child analysis tool crashed for these processes:
Wrote output files into %s
To print all files in pid order use:  (cd %s; cat `/bin/ls -tr1 *.txt`) 
: terminated; resuming target task
: interrupted; resuming target task
task from parent for pid %u
%s[%d]: [fatal] Failed to get DYLD info for %s with error %s (%d). Assuming it's a minimal corpse which can't be analyzed, which we sometimes see for processes which use a lot of memory.
%s[%d]: Failed to get DYLD info for %s with error %s (%d). Assuming it's a minimal corpse which can't be analyzed, which we sometimes see for processes which use a lot of memory.
for unknown reasons
for unknown reasons, even though it appears to exist
because it no longer appears to be running
because the process does not exist
because you do not have appropriate privileges to examine it
%s[%d]: %s cannot examine process %d (%s) %s%s.
%s[%d]: %s cannot examine process %d (with name like '%s') %s.
%s[%d]: %s cannot examine process %d %s.
SIMULATOR_ROOT
SIMULATOR_SHARED_RESOURCES_DIRECTORY
libclang_rt.asan
Address Sanitizer
libclang_rt.tsan
Thread Sanitizer
v24@?0{_CSTypeRef=QQ}8
<unknown>
%s[%d]: No process corpse slots currently available, waiting to get one
no corpse slots are available
target process %s (%d) is too large, or system memory pressure is to high
libgmalloc.dylib
possible high VM usage by GuardMalloc
corpse creation encountered the unexpected error %s (%d) for %s (%d)
generated corpse for pid %u
%s[%d]: [fatal] Kernel generated only a minimal corpse from the process with error %s (%d)
%s[%d]: Kernel generated only a minimal corpse from the process with error %s (%d) - examining live process instead
%s[%d]: [fatal] Failed to generate corpse: %s, exiting
%s[%d]: Failed to generate corpse: %s - examining live process instead
BOOL _respawnToolIfNecessaryVMUTaskWithExitStatus(DVT_VMUTask * _Nullable __strong, VMURespawnToolOptions, int *, uint64_t)
Only one of kVMURespawnForAllProcesses and kVMURespawnForAllNonNativeProcesses can be set
DYLD_ROOT_PATH
%s[%d]: [fatal] Failed to create symbolicator for target
SIMULATOR_UDID
DT_NO_RESPAWN
DT_FORCE_RESPAWN
%s[%d]: [fatal] respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but analysis process does not match architecture of target process %d.
%s[%d]: respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but the analysis process does not match the SDK variant of the target process %d.
Analysis of malloc zones may fail.
DT_NO_RESPAWN_TO_OS
DYLD_FRAMEWORK_PATH
DYLD_SHARED_REGION
avoid
DYLD_FORCE_PLATFORM
arm64
x86_64
posix_spawnattr_init
posix_spawnattr_setbinpref_np
%s[%d]: [fatal] 'mach_ports_register' failed: %s (%d)
--al
-atExit
%s[%d]: [fatal] posix_spawn: %s could not be launched as a %d-bit process with architecture %s: %s (%d)
%s[%d]: [fatal] waitpid: %s
_respawnToolIfNecessaryVMUTaskWithExitStatus_block_invoke
sharedCode.m
WIFSIGNALED(child_status)
Child `%s` process died with signal %d %s
v12@?0I8
com.apple.SymbolicationDT
Symbolication.framework/Symbolication
com.apple.CoreSymbolicationDT
CoreSymbolication.framework/CoreSymbolication
64544
/System/Library/PrivateFrameworks/%s
%s/usr/bin/%s
v20@?0I8@?<v@?>12
Running in DT_RESPAWN_FOR_NONNATIVE mode -- respawning only if necessary to match target process arch and/or platform.
[fatal] failed to open core file: %s
[fatal] unable to read input graph: %s
[fatal] unable to introspect malloc zones to get allocation information
[fatal] %s
[fatal] unable to suspend target process: %s
[fatal] mach port for process %d not valid
examining %@ [%u]
[fatal] Expected to get a VMUTask of type task.
[fatal] error acquiring target task port from parent.
[fatal] Target task not available for analysis
[fatal] %s kept pid %u suspended for too long - exiting to prevent watchdog timer from killing that process.
[fatal] %s analysis of pid %u reached time limit of %llu seconds, exiting.
[fatal] Couldn't create output directory from template %s, %s. Exiting
[fatal] Couldn't change directory to %s
[fatal] Failed to get DYLD info for %s with error %s (%d). Assuming it's a minimal corpse which can't be analyzed, which we sometimes see for processes which use a lot of memory.
No process corpse slots currently available, waiting to get one
[fatal] Kernel generated only a minimal corpse from the process with error %s (%d)
Kernel generated only a minimal corpse from the process with error %s (%d) - examining live process instead
[fatal] Failed to generate corpse: %s, exiting
Failed to generate corpse: %s - examining live process instead
[fatal] Failed to create symbolicator for target
[fatal] respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but analysis process does not match architecture of target process %d.
[fatal] 'mach_ports_register' failed: %s (%d)
[fatal] posix_spawn: %s could not be launched as a %d-bit process with architecture %s: %s (%d)
[fatal] waitpid: %s
%s[%d]: [error] 'mach_port_mod_refs' failed: %s (%d)
%s[%d]: [error] 'mach_port_deallocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_allocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_insert_right' failed: %s (%d)
ObjectLocalToThisFile
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>22A380021</string>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.dt.SamplingTools.stringdups</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>SamplingTools</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>MacOSX</string>
</array>
<key>CFBundleVersion</key>
<string>1.0</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>24A277a</string>
<key>DTPlatformName</key>
<string>macosx</string>
<key>DTPlatformVersion</key>
<string>15.0</string>
<key>DTSDKBuild</key>
<string>24A277a</string>
<key>DTSDKName</key>
<string>macosx15.0.internal</string>
<key>DTXcode</key>
<string>1600</string>
<key>DTXcodeBuild</key>
<string>16A5202f</string>
<key>LSMinimumSystemVersion</key>
<string>13.0</string>
</dict>
</plist>
arrayWithArray:
absoluteURL
is64Bit
appendFormat:
setStringsOnly:
attributesOfItemAtPath:error:
valueForEnvVar:
UTF8String
containsString:
addAllNodesFromTaskWithError:
arguments
stringByResolvingSymlinksInPath
binaryImagesDescription
bundleWithIdentifier:
callStackSymbols
compare:
componentsJoinedByString:
componentsSeparatedByString:
count
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
createSymbolicatorWithFlags:andNotification:
currentHandler
dataWithContentsOfFile:options:error:
date
dateWithTimeIntervalSinceNow:
defaultManager
description
detachFromTask
dictionaryWithObjects:forKeys:count:
directedGraphWithData:error:
executablePath
fileExistsAtPath:isDirectory:
fileSize
fileURLWithPath:
findStringDupsByStack:stackLogReader:block:
findStringDupsInGraph:symbolicator:stackLogReader:block:
getPlatform:
handleFailureInFunction:file:lineNumber:description:
hasSuffix:
initWithCorePath:originalBinaryPaths:error:
initWithGraph:options:
initWithGraph:regionIdentifier:debugTimer:
initWithPid:
initWithTask:
initWithTask:getBinariesList:
initWithTask:symbolicator:
initWithVMUTask:options:
intValue
integerValue
isCore
isExclave
isExecutableFileAtPath:
isSemiCriticalProcess
isSemiCriticalProcessWithNoTimeLimit
isSimulator
isTranslated
lastPathComponent
length
localizedDescription
memoryCache
name
numberWithInt:
numberWithUnsignedInt:
objectAtIndexedSubscript:
objectContentLevel
objectForInfoDictionaryKey:
parentPid
parentProcessPath
parseArguments:withBlock:
path
processDescription
processDescriptionString
processInfo
processName
reason
registerOptionWithLongName:shortName:argumentKind:argumentName:optionDescription:flags:handler:
registerOptionWithLongName:shortName:argumentKind:argumentName:optionDescription:handler:
setFullStacks:
setInvertCallTrees:
setMinimumLabelCount:
setObject:atIndexedSubscript:
setObjectContentLevel:
setQuiet:
setShowCallTrees:
setShowRawClassNames:
setShowStacks:
setSingleHyphenLongNames:
setSyntaxDescription:
shouldAnalyzeWithCorpse
stackLogReader
startPeeking
stopPeeking
string
stringValue
stringWithFormat:
stringWithUTF8String:
summaryWithGraph:block:
taskPort
taskType
usage:
