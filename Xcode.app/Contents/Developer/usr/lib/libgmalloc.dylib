@(#)PROGRAM:gmalloc  PROJECT:SamplingTools-64566.76
error vm_deallocating hash bucket arena %p: %s
GuardMalloc internal error: lastBucketAllocated %p is not in current arena %p-%p
error vm_deallocating zone %p: %s
zone %p  %s
unnamed zone
inUse=%u(%ly) allocated=%ly maxSizeInUse=%ly
heapBucketsHashTable: %p
bucketArena: %p
hash table index %u
bucket %p in arena %p   %p, %lu
GuardMalloc_check
DefaultMallocZone
GuardMalloc-
DefaultPurgeableMallocZone
called malloc_make_purgeable() with pointer %p that was not in any registered malloc zone
called malloc_make_nonpurgeable() with pointer %p that was not in any registered malloc zone
free
realloc
attempted %s of pointer %p that was not claimed by any registered malloc zone
Explicitly trapping into debugger!!!
If you run under the debugger, it will automatically break here.
MALLOC_PROTECT_BEFORE=
MALLOC_CHECK_HEADER=0
MALLOC_CHECK_HEADER=NO
MALLOC_CHECK_HEADER=
MALLOC_FILL_SPACE=
MallocScribble=
MALLOC_ALLOW_READS=
MALLOC_WARN_ZERO=
MALLOC_STRICT_SIZE=
MALLOC_WORD_SIZE=
MALLOC_ALTIVEC_SIZE=
The name MALLOC_ALTIVEC_SIZE is deprecated.  Please switch to using MALLOC_VECTOR_SIZE instead.
MALLOC_VECTOR_SIZE=
MALLOC_PERMIT_INSANE_REQUESTS=
MALLOC_ALLOW_LARGE_REQUESTS=
MALLOC_MAXIMUM_VM=
Maximum VM size is %lu
ENABLE_ADDRESS_REUSE=
VM address reuse enabled (the old, slow GuardMalloc behavior)
DISABLE_ADDRESS_REUSE=
MallocErrorAbort=
MallocCorruptionAbort=
MallocHelp=
environment variables that can be set for GuardMalloc:
- MALLOC_PROTECT_BEFORE protects against buffer underruns by placing buffers at start of VM pages
- MALLOC_FILL_SPACE fills buffer with 0xaa upon creation, to help catch uninitialized memory problems
     (similar to MallocScribble)
- MALLOC_ALLOW_READS makes guard pages readable so that reads of bytes in guard pages don't cause crashes
- MALLOC_VECTOR_SIZE places allocations on 16-byte boundaries for use with vector instructions
     (this is the default)
- MALLOC_WORD_SIZE places allocations on 4-byte boundaries
- MALLOC_STRICT_SIZE places allocations on single-byte boundaries, aligned with end of page
     unless MALLOC_PROTECT_BEFORE is set
- MALLOC_ALLOW_LARGE_REQUESTS allows allocations greater than 100MB without error
- MALLOC_CHECK_HEADER=NO turns off validating malloc block header when block is freed or reallocated
MALLOC_ALLOW_READS requires VM address reuse to be enabled, but it was explicitly disabled with DISABLE_ADDRESS_REUSE
MALLOC_ALLOW_READS is set;  this will double VM region use by explicitly allocating guard pages on which to set read permission.
Allocations will be placed on byte boundaries.
 - Overrunning a buffer will cause an immediate crash. (Good.)
 - Applications expecting word-aligned pointers may fail (such as Carbon applications)
 - Applications using vector instructions (e.g., SSE) may fail.
Allocations will be placed on word (4 byte) boundaries.
 - Small buffer overruns may not be noticed.
Allocations will be placed on 16 byte boundaries.
 - Some buffer overruns may not be noticed.
 - Applications using vector instructions (e.g., SSE) should work.
version 064566.76
This process is running with libgmalloc.dylib (GuardMalloc) which may have forced the crash due to a memory access error.
overrun
underrun
without
with
%s: header for block %p-%p has been trashed by a buffer %s. Header magic value at %p is 0x%016lx, not 0x%016lx.  Try running %s MALLOC_PROTECT_BEFORE to catch this error immediately as it happens.
vm_deallocate: %s
could not allocate new zone: %s
GuardMalloc[%s-%d]: 
GuardMalloc[%d]: 
MALLOC_LOG_FILE
Process is restricted, so not opening %s %s. Using stderr instead.
Could not open %s %s, thus using stderr
Only one of MALLOC_STRICT_SIZE, MALLOC_WORD_SIZE, or MALLOC_VECTOR_SIZE is permitted.
debug.toggle_address_reuse
Sysctl (debug.toggle_address_reuse) error
malloc_size is returning a suspiciously large value:  %ld bytes
If this is expected behavior, launch your executable with the environment variable MALLOC_ALLOW_LARGE_REQUESTS set to any value to circumvent this check.
malloc_size of %p is %ld -- seems wrong
Attempting excessively large memory allocation:  %lu bytes
If you really wanted to allocate so much memory, launch your executable with the environment variable MALLOC_ALLOW_LARGE_REQUESTS set to any value to circumvent this check.
Attempting to allocate %lu bytes, with alignment %lu, which causes arithmetic overflow, so allocation fails and NULL will be returned
requested malloc of 0 bytes.
Attempting to allocate %lu to represent %lu bytes, which would bring VM size to %lu. That exceeds the %lu VM maximum set via MALLOC_MAXIMUM_VM env var.
error vm_deallocating leading alignment pages: %s
error vm_deallocating trailing alignment pages: %s
byteCount is zero!  Something really bad happened!
vm_protect: %s
hw.memsize
Failed to allocate %lu to represent %lu bytes; currently allocated memory is %y
GuardMalloc: NO MORE VM SPACE AVAILABLE FOR THIS PROCESS - ABORTING
calloc can't allocate %lu item of size %lu.
Tried to free pointer %p in zone %s which is not currently a pointer to a malloc buffer.
Tried to realloc pointer %p in zone %s which is not currently a pointer to a malloc buffer.
