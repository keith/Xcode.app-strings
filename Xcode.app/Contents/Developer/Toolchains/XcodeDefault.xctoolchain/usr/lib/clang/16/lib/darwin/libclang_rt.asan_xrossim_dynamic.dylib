interceptor_name
interceptor_via_fun
interceptor_via_lib
odr_violation
DYLD_INSERT_LIBRARIES
/usr/lib/dyld
    #%n %p %F %L
??:0
llvm-symbolizer
:DEADLYSIGNAL
: nested bug in the same thread, aborting.
stack-overflow
leak:*_os_trace*
leak:*tls_get_addr*
leak
vptr_check
N11__sanitizer11FlagHandlerIbEE
N11__sanitizer15FlagHandlerBaseE
N11__sanitizer11FlagHandlerIPKcEE
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_allocator.cpp
((ms)) != (0)
((IsAligned((uptr)ptr, alignment))) != (0)
IsPowerOfTwo(boundary)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_allocator_primary32.h
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_allocator_secondary.h
((p)) != (0)
((options.min_redzone)) >= ((16))
((options.max_redzone)) >= ((options.min_redzone))
((options.max_redzone)) <= ((2048))
((IsPowerOfTwo(options.min_redzone))) != (0)
((IsPowerOfTwo(options.max_redzone))) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_quarantine.h
(((size == 0 && cache_size == 0) || cache_size != 0)) != (0)
((res)) < ((kNumPossibleRegions))
TwoLevelMap
((PointerIsMine(p))) != (0)
((IsAligned(p, page_size_))) != (0)
((AsanChunkView(right_chunk).AddrIsAtLeft(addr, 1, &r_offset))) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_list.h
((this)) != ((l))
((cache_size)) >= ((overhead_size))
((size)) >= ((sizeof(QuarantineBatch)))
((!empty())) != (0)
((prev->next)) == ((x))
((old_chunk_state)) == ((CHUNK_QUARANTINE))
((nearest_chunk)) >= ((h->map_beg))
((nearest_chunk)) < ((h->map_beg + h->map_size))
((nearest_chunk)) <= ((p))
((IsAligned((uptr)h, page_size_))) != (0)
((old)) == ((kAllocBegMagic))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_allocator_local_cache.h
((class_id)) != ((0UL))
((class_id)) < ((kNumClasses))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common.h
((x)) != ((0U))
FATAL: Internal error: %s's allocator failed to allocate a transfer batch.
((b->Count())) > ((0))
((IsAligned(res, kRegionSize))) != (0)
((chunks_[idx])) == ((h))
((idx)) < ((n_chunks_))
Stats: LargeMmapAllocator: allocated %zd times, remains %zd (%zd K) max %zd M; by size logs: 
%zd:%zd; 
Quarantine limits: global: %zdMb; thread local: %zdKb
Global quarantine stats: batches: %zd; bytes: %zd (user: %zd); chunks: %zd (capacity: %zd); %d%% chunks used; %d%% memory overhead
((IsPowerOfTwo(x))) != (0)
((atomic_load(&m->chunk_state, memory_order_relaxed))) == ((CHUNK_QUARANTINE))
((b)) != (0)
WARNING: %s: CombinedAllocator allocation overflow: 0x%zx bytes with 0x%zx alignment requested
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_allocator_combined.h
((reinterpret_cast<uptr>(res) & (alignment - 1))) == ((0))
((IsPowerOfTwo(alignment))) != (0)
WARNING: %s: LargeMmapAllocator allocation overflow: 0x%zx bytes with 0x%zx alignment requested
((IsAligned(map_beg, page_size_))) != (0)
((IsAligned(res, alignment))) != (0)
((IsAligned(res, page_size_))) != (0)
((res + size)) >= ((map_beg))
((res + size)) <= ((map_end))
((n)) < ((kMaxNumChunks))
((count)) < ((kSize))
((stack)) != (0)
((IsAligned(needed_size, min_alignment))) != (0)
WARNING: AddressSanitizer failed to allocate 0x%zx bytes
((user_end)) <= ((alloc_end))
((alloc_beg + sizeof(LargeChunkHeader))) <= ((chunk_beg))
((rz_size)) >= ((16))
((rz_size)) <= ((2048))
((IsPowerOfTwo(rz_size))) != (0)
((rz_size)) == ((RZLog2Size(res)))
((rz_log)) < ((8))
((UsedSize())) == ((size))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_mapping.h
((AddrIsInMem(p))) != (0)
((old_ptr && new_size)) != (0)
((beg + 1)) == ((end))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_mutex.h
((atomic_load(&state_, memory_order_relaxed))) == ((1))
((chunks[i])) == ((t))
((AddressSpaceView::Load(chunks[i])->chunk_idx)) == ((i))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_activation.cpp
((!asan_is_deactivated)) != (0)
Deactivating ASan
Activating ASan
Activated with flags:
ASAN_ACTIVATION_OPTIONS
redzone
max_redzone
quarantine_size_mb
thread_local_quarantine_size_kb
alloc_dealloc_mismatch
poison_heap
allocator_may_return_null
malloc_context_size
coverage
coverage_dir
verbosity
help
allocator_release_to_os_interval_ms
ERROR: Invalid value for int option: '%s'
ERROR: Invalid value for bool option: '%s'
false
true
quarantine_size_mb %d, thread_local_quarantine_size_kb %d, max_redzone %d, poison_heap %d, malloc_context_size %d, alloc_dealloc_mismatch %d, allocator_may_return_null %d, coverage %d, coverage_dir %s, allocator_release_to_os_interval_ms %d
low shadow
shadow gap
high shadow
heap
stack
global
heap-invalid
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_debugging.cpp
((region_kind)) != (0)
((new_capacity)) > ((0))
((size_)) <= ((new_capacity))
InternalMmapVector
((i)) < ((size_))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_descriptions.cpp
((((unsigned int)len) < sizeof(name))) != (0)
 (%s)
((context)) != (0)
Thread %s
 created by unknown thread
 created by %s here:
((chunk.AllocTid())) != ((kInvalidTid))
AddressSanitizer can not describe address in more detail (wild memory access suspected).
Address %p is located in the %s area.
initialization-order-fiasco
  registered at:
Address %p is located in stack of thread %s
 at offset %zu in frame%s
AddressSanitizer can't parse the stack frame descriptor: |%s|
  This frame has %zu object(s):
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
%sfreed by thread %s here:%s
%spreviously allocated by thread %s here:%s
%sallocated by thread %s here:%s
Address %p is a wild pointer inside of access range of size %p.
((atomic_load(&state_, memory_order_relaxed) & kWriterLock)) != (0)
((!AddrIsInMem(addr))) != (0)
%p is located %zd bytes before
%p is located %zd bytes after
%p is located %zd bytes inside of
 global variable '%s' defined in '
' (0x%zx) of size %zu
[32m
is inside
partially overflows
overflows
partially underflows
underflows
    [%zd, %zd)
 (line %zd)
%s <== Memory access at offset %zd %s this variable%s
%p is located somewhere around (this is AddressSanitizer bug!)
 %zu-byte region [%p,%p)
((id)) != (0)
((res.trace)) != (0)
[35m
ERROR: AddressSanitizer: attempting %s on %p in thread %s:
ERROR: AddressSanitizer: %s on %p in thread %s:
%s  object passed to delete has wrong type:
  size of the allocated type:   %zd bytes;
  size of the deallocated type: %zd bytes.
%zd bytes
default-aligned
  alignment of the allocated type:   %s;
  alignment of the deallocated type: %s.
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_errors.cpp
((free_stack->size)) > ((0))
HINT: if you don't care about these errors you may set ASAN_OPTIONS=new_delete_type_mismatch=0
ERROR: AddressSanitizer: attempting free on address which was not malloc()-ed: %p in thread %s
INVALID
malloc
operator new
operator new []
free
operator delete
operator delete []
((alloc_type)) != ((dealloc_type))
ERROR: AddressSanitizer: %s (%s vs %s) on %p
((dealloc_stack->size)) > ((0))
HINT: if you don't care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0
ERROR: AddressSanitizer: attempting to call malloc_usable_size() for pointer which is not owned: %p
ERROR: AddressSanitizer: attempting to call __sanitizer_get_allocated_size() for pointer which is not owned: %p
ERROR: AddressSanitizer: calloc parameters overflow: count * size (%zd * %zd) cannot be represented in type size_t (thread %s)
ERROR: AddressSanitizer: reallocarray parameters overflow: count * size (%zd * %zd) cannot be represented in type size_t (thread %s)
ERROR: AddressSanitizer: pvalloc parameters overflow: size 0x%zx rounded up to system page size 0x%zx cannot be represented in type size_t (thread %s)
ERROR: AddressSanitizer: invalid allocation alignment: %zd, alignment must be a power of two (thread %s)
ERROR: AddressSanitizer: invalid alignment requested in aligned_alloc: %zd, alignment must be a power of two and the requested size 0x%zx must be a multiple of alignment (thread %s)
ERROR: AddressSanitizer: invalid alignment requested in posix_memalign: %zd, alignment must be a power of two and a multiple of sizeof(void*) == %zd (thread %s)
ERROR: AddressSanitizer: requested allocation size 0x%zx (0x%zx after adjustments for alignment, red zones etc.) exceeds maximum supported size of 0x%zx (thread %s)
ERROR: AddressSanitizer: specified RSS limit exceeded, currently set to soft_rss_limit_mb=%zd
ERROR: %s: out of memory: allocator is trying to allocate 0x%zx bytes
%s-param-overlap
ERROR: AddressSanitizer: %s: memory ranges [%p,%p) and [%p, %p) overlap
ERROR: AddressSanitizer: %s: (size=%zd)
ERROR: AddressSanitizer: bad parameters to __sanitizer_annotate_contiguous_container:
      beg     : %p
      end     : %p
      old_mid : %p
      new_mid : %p
ERROR: beg is not aligned by %zu
ERROR: AddressSanitizer: bad parameters to __sanitizer_annotate_double_ended_contiguous_container:
      storage_beg        : %p
      storage_end        : %p
      old_container_beg  : %p
      old_container_end  : %p
      new_container_beg  : %p
      new_container_end  : %p
ERROR: storage_beg is not aligned by %zu
ERROR: AddressSanitizer: %s (%p):
  [1] size=%zd '%s' %s
  [2] size=%zd '%s' %s
These globals were registered at these points:
  [1]:
  [2]:
HINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_odr_violation=0
%s: global '%s' at %s
ERROR: AddressSanitizer: %s: %p %p
?-byte
multi-byte
write
read
unknown-crash
heap-buffer-overflow
heap-use-after-free
stack-buffer-underflow
stack-buffer-overflow
stack-use-after-return
use-after-poison
container-overflow
stack-use-after-scope
global-buffer-overflow
intra-object-overflow
dynamic-stack-buffer-overflow
far-from-bounds
ERROR: AddressSanitizer: %s on address %p at pc %p bp %p sp %p
%s%s of size %zu at %p thread %s%s
WRITE
READ
ACCESS
[31m
SCARINESS: %d (%s)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_descriptions.h
((0 && "AddressInformation kind is invalid")) != (0)
[34m
HINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_container_overflow=0.
If you suspect a false positive see also: https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow.
Shadow bytes around the buggy address:
%s%p:
((AddrIsInShadow(p))) != (0)
Shadow byte legend (one shadow byte represents %d application bytes):
  Addressable:           
  Partially addressable: 
  Heap left redzone:       
  Freed heap region:       
  Stack left redzone:      
  Stack mid redzone:       
  Stack right redzone:     
  Stack after return:      
  Stack use after scope:   
  Global redzone:          
  Global init order:       
  Poisoned by user:        
  Container overflow:      
  Array cookie:            
  Intra object redzone:    
  ASan internal:           
  Left alloca redzone:     
  Right alloca redzone:    
FakeStack
T%d: FakeStack created: %p -- %p stack_size_log: %zd; mmapped %zdK, noreserve=%d 
%zd: %zd/%zd; 
T%d: FakeStack destroyed: %s
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_fake_stack.cpp
((class_id)) < ((kNumberOfSizeClasses))
((base)) <= ((ptr))
((ptr)) < ((base + (((uptr)1) << stack_size_log)))
ASAN_SYMBOLIZER_PATH
MallocScribble
MallocPreScribble
ASAN_OPTIONS
LSAN_OPTIONS
UBSAN_OPTIONS
%s: detect_leaks is not supported on this platform.
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_flags.cpp
(((uptr)common_flags()->malloc_context_size)) <= ((kStackTraceMax))
((f->min_uar_stack_size_log)) <= ((f->max_uar_stack_size_log))
((f->redzone)) >= ((16))
((f->max_redzone)) >= ((f->redzone))
((f->max_redzone)) <= ((2048))
((IsPowerOfTwo(f->redzone))) != (0)
((IsPowerOfTwo(f->max_redzone))) != (0)
%s: please use either 'quarantine_size' (deprecated) or quarantine_size_mb, but not both
%s: thread_local_quarantine_size_kb can be set to 0 only when quarantine_size_mb is set to 0
WARNING: strlen interceptor is enabled even though replace_str=0. Use intercept_strlen=0 to disable it.
WARNING: strchr* interceptors are enabled even though replace_str=0. Use intercept_strchr=0 to disable them.
WARNING: strndup* interceptors are enabled even though replace_str=0. Use intercept_strndup=0 to disable them.
quarantine_size
Deprecated, please use quarantine_size_mb.
Size (in Mb) of quarantine used to detect use-after-free errors. Lower value may reduce memory usage but increase the chance of false negatives.
Size (in Kb) of thread local quarantine used to detect use-after-free errors. Lower value may reduce memory usage but increase the chance of false negatives. It is not advised to go lower than 64Kb, otherwise frequent transfers to global quarantine might affect performance.
Minimal size (in bytes) of redzones around heap objects. Requirement: redzone >= 16, is a power of two.
Maximal size (in bytes) of redzones around heap objects.
debug
If set, prints some debugging information and does additional checks.
report_globals
Controls the way to handle globals (0 - don't detect buffer overflow on globals, 1 - detect buffer overflow, 2 - print data about registered globals).
check_initialization_order
If set, attempts to catch initialization order issues.
replace_str
If set, uses custom wrappers and replacements for libc string functions to find more errors.
replace_intrin
If set, uses custom wrappers for memset/memcpy/memmove intrinsics.
detect_stack_use_after_return
Enables stack-use-after-return checking at run-time.
min_uar_stack_size_log
Minimum fake stack size log.
max_uar_stack_size_log
Maximum fake stack size log.
uar_noreserve
Use mmap with 'noreserve' flag to allocate fake stack.
max_malloc_fill_size
ASan allocator flag. max_malloc_fill_size is the maximal amount of bytes that will be filled with malloc_fill_byte on malloc.
max_free_fill_size
ASan allocator flag. max_free_fill_size is the maximal amount of bytes that will be filled with free_fill_byte during free.
malloc_fill_byte
Value used to fill the newly allocated memory.
free_fill_byte
Value used to fill deallocated memory.
allow_user_poisoning
If set, user may manually mark memory regions as poisoned or unpoisoned.
sleep_before_dying
Number of seconds to sleep between printing an error report and terminating the program. Useful for debugging purposes (e.g. when one needs to attach gdb).
sleep_after_init
Number of seconds to sleep after AddressSanitizer is initialized. Useful for debugging purposes (e.g. when one needs to attach gdb).
sleep_before_init
Number of seconds to sleep before AddressSanitizer starts initializing. Useful for debugging purposes (e.g. when one needs to attach gdb).
check_malloc_usable_size
Allows the users to work around the bug in Nvidia drivers prior to 295.*.
unmap_shadow_on_exit
If set, explicitly unmaps the (huge) shadow at exit.
protect_shadow_gap
If set, mprotect the shadow gap
print_stats
Print various statistics after printing an error message or if atexit=1.
print_legend
Print the legend for the shadow bytes.
print_scariness
Print the scariness score. Experimental.
atexit
If set, prints ASan exit stats even after program terminates successfully.
print_full_thread_history
If set, prints thread creation stacks for the threads involved in the report and their ancestors up to the main thread.
Poison (or not) the heap memory on [de]allocation. Zero value is useful for benchmarking the allocator or instrumentator.
poison_partial
If true, poison partially addressable 8-byte aligned words (default=true). This flag affects heap and global buffers, but not stack buffers.
poison_array_cookie
Poison (or not) the array cookie after operator new[].
Report errors on malloc/delete, new/free, new/delete[], etc.
new_delete_type_mismatch
Report errors on mismatch between size of new and delete.
strict_init_order
If true, assume that dynamic initializers can never access globals from other modules, even if the latter are already initialized.
start_deactivated
If true, ASan tweaks a bunch of other flags (quarantine, redzone, heap poisoning) to reduce memory consumption as much as possible, and restores them to original values when the first instrumented module is loaded into the process. This is mainly intended to be used on Android. 
detect_invalid_pointer_pairs
If >= 2, detect operations like <, <=, >, >= and - on invalid pointer pairs (e.g. when pointers belong to different objects); If == 1, detect invalid operations only when both pointers are non-null.
detect_container_overflow
If true, honor the container overflow annotations. See https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow
detect_odr_violation
If >=2, detect violation of One-Definition-Rule (ODR); If ==1, detect ODR-violation only if the two variables have different sizes
suppressions
Suppressions file name.
halt_on_error
Crash the program after printing the first error report (WARNING: USE AT YOUR OWN RISK!)
allocator_frees_and_returns_null_on_realloc_zero
realloc(p, 0) is equivalent to free(p) by default (Same as the POSIX standard). If set to false, realloc(p, 0) will return a pointer to an allocated space which can not be used.
verify_asan_link_order
Check position of ASan runtime in library list (needs to be disabled when other library has to be preloaded system-wide)
windows_hook_rtl_allocators
(Windows only) enable hooking of Rtl(Allocate|Free|Size|ReAllocate)Heap.
Search
  '%s' is ascii string '%s'
%s:%d
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_globals.cpp
((0)) == ((((uptr)stop - (uptr)start) % sizeof(__asan_global)))
=== ID %d; %p %p
((module_name)) != (0)
((asan_inited)) != (0)
DynInitPoison module: %s
%s Global[%p]: beg=%p size=%zu/%zu name=%s module=%s dyn_init=%zu odr_indicator=%p
  location: name=%s, %d
((global_registration_site_vector)) != (0)
Added
((flags()->report_globals)) != (0)
((AddrIsInMem(g->beg))) != (0)
The following global variable is not properly aligned.
This may happen if another global with the same name
resides in another non-instrumented module.
Or the global comes from a C file built w/o -fno-common.
In either case this is likely an ODR violation bug,
but AddressSanitizer can not provide more details.
((AddrIsAlignedByGranularity(g->beg))) != (0)
((AddrIsAlignedByGranularity(g->size_with_redzone))) != (0)
((size_)) == ((capacity()))
((size)) != (0)
((size)) < (((1ULL << (up + 1))))
((size)) > (((1ULL << up)))
Removed
strlen
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc
((!asan_init_is_running)) != (0)
strndup
strcmp
strncmp
strcasecmp
strncasecmp
strstr
strcasestr
strtok
memmem
strchr
strrchr
strspn
strcspn
strpbrk
memcmp
memchr
frexp
frexpf
frexpl
fread
pread
readv
fwrite
pwrite
writev
fgets
fputs
puts
time
localtime
localtime_r
gmtime
gmtime_r
ctime
ctime_r
asctime
asctime_r
mktime
strptime
vscanf
vsscanf
vfscanf
vprintf
vfprintf
vsnprintf
vsprintf
vasprintf
ioctl
((ioctl_initialized)) != (0)
Decoding unknown ioctl 0x%lx
WARNING: failed decoding unknown ioctl 0x%lx
getpwnam
getpwuid
getgrnam
getgrgid
getpwnam_r
getpwuid_r
getgrnam_r
getgrgid_r
getpwent
getgrent
getitimer
setitimer
posix_spawn
posix_spawnp
wait
waitid
waitpid
wait3
wait4
inet_ntop
inet_pton
inet_aton
pthread_getschedparam
getaddrinfo
getnameinfo
getsockname
gethostbyname
gethostbyaddr
gethostent
gethostbyname2
getsockopt
accept
modf
modff
modfl
recvmsg
sendmsg
getpeername
opendir
readdir
readdir_r
setlocale
getcwd
strtoimax
strtoumax
mbstowcs
mbsrtowcs
mbsnrtowcs
wcstombs
wcsrtombs
wcsnrtombs
wcrtomb
((res)) <= ((sizeof(local_dest)))
wctomb
realpath
confstr
strerror_r
getgroups
poll
sigwait
sigemptyset
sigfillset
sigpending
sigprocmask
pthread_sigmask
statfs
fstatfs
initgroups
ether_ntoa
ether_aton
ether_ntohost
ether_hostton
ether_line
pthread_attr_getdetachstate
pthread_attr_getguardsize
pthread_attr_getscope
pthread_attr_getstacksize
pthread_attr_getstack
pthread_attr_getschedparam
pthread_attr_getschedpolicy
pthread_attr_getinheritsched
pthread_mutexattr_getpshared
pthread_mutexattr_gettype
pthread_mutexattr_getprotocol
pthread_mutexattr_getprioceiling
pthread_rwlockattr_getpshared
pthread_condattr_getpshared
tmpnam
ttyname_r
tempnam
remquo
remquof
remquol
lgamma
lgammaf
lgammal
rand_r
times
getifaddrs
if_indextoname
if_nametoindex
ftime
tsearch
fopen
fdopen
freopen
dlopen
getpass
pthread_setcancelstate
pthread_setcanceltype
recv
recvfrom
send
sendto
stat
pututxline
getloadavg
wcslen
wcsnlen
wcscat
wcsncat
wcsdup
strxfrm
strxfrm_l
wcsxfrm
wcsxfrm_l
readlink
readlinkat
strlcpy
strlcat
getmntinfo
setvbuf
setbuf
setbuffer
sysctl
sysctlbyname
sysctlnametomib
nl_langinfo
getfsent
getfsspec
getfsfile
arc4random_buf
arc4random_addrandom
popen
getusershell
sigaltstack
uname
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_signal_interceptors.inc
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_interceptors.cpp
strcat
strncat
strcpy
strdup
strncpy
strtol
strtoll
atoi
atol
atoll
((!was_called_once)) != (0)
AddressSanitizer: libc interceptors initialized
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors_format.inc
((*p)) == ((0))
%s: WARNING: unexpected format specifier in scanf interceptor: %.*s
jztLq
cCsS[
diouxXn
aAeEfFgG
WARNING: unexpected floating-point arg size in printf interceptor: %zu
%s: WARNING: unexpected format specifier in printf interceptor: %.*s (reported once per process)
WARNING: unexpected arg size in printf interceptor: %zu
'-+ #0
cCsS
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors_ioctl.inc
<DECODED_IOCTL>
((!h.created())) != (0)
((h->type == CommonInterceptorMetadata::CIMT_FILE)) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_addrhashmap.h
((!h->remove_)) != (0)
((atomic_load(&c->addr, memory_order_relaxed))) == ((0))
((addr1)) == ((0))
((addr1)) == ((h->addr_))
((h.exists())) != (0)
%s ignores mlock/mlockall/munlock/munlockall
((*endptr >= nptr)) != (0)
AddrHashMap
Duplicate or unsorted ioctl request id %x >= %x (%s vs %s)
((ioctl_table_size < ioctl_table_max)) != (0)
FIOASYNC
FIOCLEX
FIOGETOWN
FIONBIO
FIONCLEX
FIOSETOWN
SIOCATMARK
SIOCGIFCONF
SIOCGPGRP
SIOCSPGRP
TIOCCONS
TIOCEXCL
TIOCGETD
TIOCGPGRP
TIOCGWINSZ
TIOCMBIC
TIOCMBIS
TIOCMGET
TIOCMSET
TIOCNOTTY
TIOCNXCL
TIOCOUTQ
TIOCPKT
TIOCSCTTY
TIOCSETD
TIOCSPGRP
TIOCSTI
TIOCSWINSZ
((args.arg_retval)) == ((t->get_arg()))
memcpy
memset
memmove
__DATA
__asan_globals
asan_dispatch_call_block_and_release(): context: %p, pthread_self: %p
dispatch_async_f(): context: %p, pthread_self: %p
dispatch_sync_f(): context: %p, pthread_self: %p
dispatch_barrier_async_f(): context: %p, pthread_self: %p
dispatch_after_f: %p
dispatch_group_async_f(): context: %p, pthread_self: %p
v8@?0
v28@?0Q8^v16i24
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_malloc_mac.inc
asan-%s
((memptr)) != (0)
__sanitizer_mz_destroy() called -- ignoring
asan
APPLE_ASAN_INIT_FOR_DLOPEN
((0 && "unimplemented")) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_malloc_mac.cpp
((mi->allocator_ptr)) != ((0))
((last_byte_plus_one)) > ((mi->allocator_ptr))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_allocator_dlsym.h
((internal_allocator()->FromPrimary(ptr))) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_memory_profile.cpp
((total_allocated_user_size_)) != (0)
Live Heap Allocations: %zd bytes in %zd chunks; quarantined: %zd bytes in %zd chunks; %zd other chunks; total chunks: %zd; showing top %zd%% (at most %zd unique contexts)
%zd byte(s) (%zd%%) in %zd allocation(s)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_poisoning.cpp
((AddrIsAlignedByGranularity(addr))) != (0)
((AddrIsInMem(addr))) != (0)
((AddrIsAlignedByGranularity(addr + size))) != (0)
((AddrIsInMem(addr + size - (1ULL << 3)))) != (0)
__asan_%spoison_intra_object_redzone [%p,%p) %zd
((size)) <= ((4096))
((IsAligned(end, (1ULL << 3)))) != (0)
Trying to poison memory region [%p, %p)
((beg.offset)) < ((end.offset))
((value)) == ((end.value))
((beg.chunk)) < ((end.chunk))
Trying to unpoison memory region [%p, %p)
((beg)) < ((end))
((0 && "mem_is_zero returned false, but poisoned byte was not found")) != (0)
AddressSanitizer: loaded array cookie from free-d memory; expect a double-free report
poisoning: %p %zx
unpoisoning: %p %zx
contiguous_container: %p %p %p %p
((storage_end - storage_beg)) <= (((1ULL << 40)))
((b2 - b1)) == ((granularity))
contiguous_container: %p %p %p %p %p %p
((beg)) <= ((mid))
((mid)) <= ((end))
((begin)) <= ((end))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_posix.cpp
((0)) == ((sigaltstack(nullptr, &signal_stack)))
sigalt
default
((!tsd_key_inited)) != (0)
((0)) == ((pthread_key_create(&tsd_key, destructor)))
((tsd_key_inited)) != (0)
((0)) == ((pthread_setspecific(tsd_key, tsd)))
AppendToErrorMessageBuffer
kErrorMessageBufferSize >= error_message_buffer_pos
%s%s%x%x%s%s
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_report.cpp
((frame_descr)) != (0)
mz_realloc(%p) -- attempting to realloc unallocated memory.
This is an unrecoverable problem, exiting now.
[36m
[33m
=================================================================
stack-overflow
signal
null-deref
wild-jump
wild-addr-write
wild-addr-read
wild-addr
((current_error_.kind)) == ((kErrorKindInvalid))
ABORTING
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_errors.h
((0)) != (0)
double-free
((second_free_stack->size)) > ((0))
new-delete-type-mismatch
bad-free
alloc-dealloc-mismatch
bad-malloc_usable_size
bad-__sanitizer_get_allocated_size
calloc-overflow
reallocarray-overflow
pvalloc-overflow
invalid-allocation-alignment
invalid-aligned-alloc-alignment
invalid-posix-memalign-alignment
allocation-size-too-big
rss-limit-exceeded
out-of-memory
negative-size-param
bad-__sanitizer_annotate_contiguous_container
bad-__sanitizer_annotate_double_ended_contiguous_container
odr-violation
malloc_zone_from_ptr(%p) = %p, which is %s
malloc_zone_from_ptr(%p) = %p, which doesn't have a name
malloc_zone_from_ptr(%p) = 0
invalid-pointer-pair
|| `[%p, %p]` || HighMem    ||
|| `[%p, %p]` || HighShadow ||
|| `[%p, %p]` || ShadowGap3 ||
|| `[%p, %p]` || MidMem     ||
|| `[%p, %p]` || ShadowGap2 ||
|| `[%p, %p]` || MidShadow  ||
|| `[%p, %p]` || ShadowGap  ||
|| `[%p, %p]` || LowShadow  ||
|| `[%p, %p]` || LowMem     ||
MemToShadow(shadow): %p %p
 %p %p
redzone=%zu
max_redzone=%zu
quarantine_size_mb=%zuM
thread_local_quarantine_size_kb=%zuK
malloc_context_size=%zu
SHADOW_SCALE: %d
SHADOW_GRANULARITY: %d
SHADOW_OFFSET: 0x%zx
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_rtl.cpp
(((((kMidMemBeg) >> 3) + (__asan_shadow_memory_dynamic_address)) > ((((__asan_shadow_memory_dynamic_address ? __asan_shadow_memory_dynamic_address - 1 : 0)) >> 3) + (__asan_shadow_memory_dynamic_address)) && kMidMemBeg > (((kMidMemEnd) >> 3) + (__asan_shadow_memory_dynamic_address)) && (((((((kHighMemEnd) >> 3) + (__asan_shadow_memory_dynamic_address)) + 1)) >> 3) + (__asan_shadow_memory_dynamic_address)) > kMidMemEnd)) != (0)
WARNING: ASan is ignoring requested __asan_handle_no_return: stack type: %s top: %p; bottom %p; size: %p (%zd)
False positive error reports may follow
For details see https://github.com/google/sanitizers/issues/189
((t)) != (0)
AddressSanitizer
((!asan_init_is_running && "ASan init calls itself!")) != (0)
before init
AddressSanitizer init is being performed for dlopen().
((0)) == ((main_thread->tid()))
AddressSanitizer Init done
after init
(((((((kHighMemEnd) >> 3) + (__asan_shadow_memory_dynamic_address)) + 1) % GetMmapGranularity()))) == ((0))
before dying
AddressSanitizer exit stats:
asan_mapping.h:%zd -- %zd
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_shadow_setup.cpp
((((kMidMemBeg ? (((kMidMemBeg) >> 3) + (__asan_shadow_memory_dynamic_address)) : (((((((kHighMemEnd) >> 3) + (__asan_shadow_memory_dynamic_address)) + 1)) >> 3) + (__asan_shadow_memory_dynamic_address))) - 1))) == (((((((((kHighMemEnd) >> 3) + (__asan_shadow_memory_dynamic_address)) + 1)) >> 3) + (__asan_shadow_memory_dynamic_address)) - 1))
((__asan_shadow_memory_dynamic_address != ((((__asan_shadow_memory_dynamic_address ? __asan_shadow_memory_dynamic_address - 1 : 0)) >> 3) + (__asan_shadow_memory_dynamic_address)))) != (0)
mid shadow
Shadow memory range interleaves with an existing memory mapping. ASan cannot proceed correctly. ABORTING.
ASan shadow was supposed to be located in the [%p-%p] range.
protect_shadow_gap=0: not protecting shadow gap, allocating gap's shadow
|| `[%p, %p]` || ShadowGap's shadow ||
unprotected gap shadow
Stats: %zuM malloced (%zuM for red zones) by %zu calls
Stats: %zuM realloced by %zu calls
Stats: %zuM freed by %zu calls
Stats: %zuM really freed by %zu calls
Stats: %zuM (%zuM-%zuM) mmaped; %zu maps, %zu unmaps
  mallocs by size class: 
Stats: malloc large: %zu
%zu:%zu; 
Stats: StackDepot: %zd ids; %zdM allocated
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_suppressions.cpp
((nullptr)) == ((suppression_ctx))
((suppression_ctx)) != (0)
((frames)) != (0)
Create
T%d TSDDtor
T%d exited
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_thread.cpp
((this)) == ((thread))
((this)) != ((GetCurrentThread()))
ERROR: starting fiber switch while in fiber switch
ERROR: finishing a fiber switch that has not started
((flags()->min_uar_stack_size_log)) <= ((flags()->max_uar_stack_size_log))
((this->stack_size())) == ((0U))
((this->stack_size())) > ((0U))
((AddrIsInMem(stack_bottom_))) != (0)
((AddrIsInMem(stack_top_ - 1))) != (0)
T%d: stack [%p,%p) size 0x%zx; local=%p
((tid())) == ((0))
((AddrIsInStack((uptr)&local))) != (0)
((bottom)) != (0)
((ptr[0] == kCurrentStackFrameMagic)) != (0)
((t->context())) != (0)
SetCurrentThread: %p for thread %p
((0)) == ((AsanTSDGet()))
((t->context())) == ((AsanTSDGet()))
__asan_start_switch_fiber called from unknown thread
__asan_finish_switch_fiber called from unknown thread
SizeClassAllocator
LargeMmapAllocator
FATAL: %s: reallocarray parameters overflow: count * size (%zd * %zd) cannot be represented in type size_t
FATAL: %s: calloc parameters overflow: count * size (%zd * %zd) cannot be represented in type size_t
Allocate
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_allocator.cpp
((allocated_end_ - allocated_current_ >= (sptr)size)) != (0)
HINT: if you don't care about these errors you may set allocator_may_return_null=1
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_allocator_combined.h
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_allocator_local_cache.h
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_common.h
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_allocator_primary32.h
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_list.h
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_allocator_secondary.h
FATAL: %s: internal allocator is out of memory trying to allocate 0x%zx bytes
SanitizerTool
ERROR: Failed to mmap
ERROR: %s: out of memory: failed to %s 0x%zx (%zd) bytes of %s (error code: %d)
ERROR: %s failed to %s 0x%zx (%zd) bytes of %s (error code: %d)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_common.cpp
((0 && "unable to mmap")) != (0)
ERROR: Failed to munmap
ERROR: %s failed to deallocate 0x%zx (%zd) bytes at address %p (error code: %d)
((0 && "unable to unmmap")) != (0)
SUMMARY: %s: %s
((s)) >= ((z))
(total_mmaped >> 20) < common_flags()->mmap_limit_mb
Command: 
Sleeping for %u second(s) %s
deadlock detector
WARNING: too long mutex cycle found
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_deadlock_detector1.cpp
((m->id)) == ((path[0]))
((!dd.isHeld(&lt->dd, m->id))) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_deadlock_detector.h
((available_nodes_.empty())) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_bitvector.h
((idx)) < ((size()))
((idx)) <= ((size()))
((epoch_)) == ((current_epoch))
((node)) >= ((size()))
((current_epoch_)) == ((nodeToEpoch(node)))
((!tmp_bv_.getBit(idx))) != (0)
((path[0])) == ((cur_node))
((it2_.hasNext())) != (0)
((n_recursive_locks)) < (((sizeof(recursive_locks)/sizeof((recursive_locks)[0]))))
((n_all_locks_)) < (((sizeof(all_locks_with_contexts_)/sizeof((all_locks_with_contexts_)[0]))))
((!available_nodes_.getBit(idx))) != (0)
((recycled_nodes_.setBit(idx))) != (0)
%s.%s.%zu
%s.%zu
ERROR: Can't open file: 
 (reason: %d)
ERROR: Path is too long: %c%c%c%c%c%c%c%c...
stderr
stdout
ReadFileToBuffer
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_file.cpp
((read_len)) < ((buff->size()))
((buff->size())) <= ((max_len))
PATH
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_mutex.h
ERROR: Can't create directory: 
auto
DEFAULT
sancov
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_flags.cpp
((base)) != (0)
((out < out_end - 1)) != (0)
include
read more options from the given file
include_if_exists
read more options from the given file (if it exists)
symbolize
If set, use the online symbolizer from common sanitizer runtime to turn virtual addresses to file/line locations.
external_symbolizer_path
Path to external symbolizer. If empty, the tool will search $PATH for the symbolizer.
allow_addr2line
If set, allows online symbolizer to run addr2line binary to symbolize stack traces (addr2line will only be used if llvm-symbolizer binary is unavailable.
strip_path_prefix
Strips this prefix from file paths in error reports.
fast_unwind_on_check
If available, use the fast frame-pointer-based unwinder on internal CHECK failures.
fast_unwind_on_fatal
If available, use the fast frame-pointer-based unwinder on fatal errors.
fast_unwind_on_malloc
If available, use the fast frame-pointer-based unwinder on malloc/free.
handle_ioctl
Intercept and handle ioctl requests.
Max number of stack frames kept for each allocation/deallocation.
log_path
Write logs to "log_path.pid". The special values are "stdout" and "stderr". If unspecified, defaults to "stderr".
log_exe_name
Mention name of executable when reporting error and append executable name to logs (as in "log_path.exe_name.pid").
log_suffix
String to append to log file name, e.g. ".txt".
log_to_syslog
Write all sanitizer output to syslog in addition to other means of logging.
Verbosity level (0 - silent, 1 - a bit of output, 2+ - more output).
strip_env
Whether to remove the sanitizer from DYLD_INSERT_LIBRARIES to avoid passing it to children on Apple platforms. Default is true.
verify_interceptors
Verify that interceptors are working on Apple platforms. Default is true.
detect_leaks
Enable memory leak detection.
leak_check_at_exit
Invoke leak checking in an atexit handler. Has no effect if detect_leaks=false, or if __lsan_do_leak_check() is called before the handler has a chance to run.
If false, the allocator will crash instead of returning 0 on out-of-memory.
print_summary
If false, disable printing error summaries in addition to error reports.
print_module_map
Print the process module map where supported (0 - don't print, 1 - print only once before process exits, 2 - print after each report).
check_printf
Check printf arguments.
handle_segv
Controls custom tool's SIGSEGV handler (0 - do not registers the handler, 1 - register the handler and allow user to set own, 2 - registers the handler and block user from changing it). 
handle_sigbus
Controls custom tool's SIGBUS handler (0 - do not registers the handler, 1 - register the handler and allow user to set own, 2 - registers the handler and block user from changing it). 
handle_abort
Controls custom tool's SIGABRT handler (0 - do not registers the handler, 1 - register the handler and allow user to set own, 2 - registers the handler and block user from changing it). 
handle_sigill
Controls custom tool's SIGILL handler (0 - do not registers the handler, 1 - register the handler and allow user to set own, 2 - registers the handler and block user from changing it). 
handle_sigtrap
Controls custom tool's SIGTRAP handler (0 - do not registers the handler, 1 - register the handler and allow user to set own, 2 - registers the handler and block user from changing it). 
handle_sigfpe
Controls custom tool's SIGFPE handler (0 - do not registers the handler, 1 - register the handler and allow user to set own, 2 - registers the handler and block user from changing it). 
allow_user_segv_handler
Deprecated. True has no effect, use handle_sigbus=1. If false, handle_*=1 will be upgraded to handle_*=2.
use_sigaltstack
If set, uses alternate stack for signal handling.
detect_deadlocks
If set, deadlock detection is enabled.
clear_shadow_mmap_threshold
Large shadow regions are zero-filled using mmap(NORESERVE) instead of memset(). This is the threshold size in bytes.
color
Colorize reports: (always|never|auto).
legacy_pthread_cond
Enables support for dynamic libraries linked with libpthread 2.2.5.
intercept_tls_get_addr
Intercept __tls_get_addr.
Print the flag descriptions.
mmap_limit_mb
Limit the amount of mmap-ed memory (excluding shadow) in Mb; not a user-facing flag, used mosly for testing the tools
hard_rss_limit_mb
Hard RSS limit in Mb. If non-zero, a background thread is spawned at startup which periodically reads RSS and aborts the process if the limit is reached
soft_rss_limit_mb
Soft RSS limit in Mb. If non-zero, a background thread is spawned at startup which periodically reads RSS. If the limit is reached all subsequent malloc/new calls will fail or return NULL (depending on the value of allocator_may_return_null) until the RSS goes below the soft limit. This limit does not affect memory allocations other than malloc/new.
max_allocation_size_mb
If non-zero, malloc/new calls larger than this size will return nullptr (or crash if allocator_may_return_null=false).
heap_profile
Experimental heap profiler, asan-only
Only affects a 64-bit allocator. If set, tries to release unused memory to the OS, but not more often than this interval (in milliseconds). Negative values mean do not attempt to release memory to the OS.
can_use_proc_maps_statm
If false, do not attempt to read /proc/maps/statm. Mostly useful for testing sanitizers.
If set, coverage information will be dumped at program shutdown (if the coverage instrumentation was enabled at compile time).
Target directory for coverage dumps. Defaults to the current directory.
cov_8bit_counters_out
If non-empty, write 8bit counters to this file. 
cov_pcs_out
If non-empty, write the coverage pc table to this file. 
full_address_space
Sanitize complete address space; by default kernel area on 32-bit platforms will not be sanitized
print_suppressions
Print matched suppressions at exit.
disable_coredump
Disable core dumping. By default, disable_coredump=1 on 64-bit to avoid dumping a 16T+ core file. Ignored on OSes that don't dump core by default and for sanitizers that don't reserve lots of virtual memory.
use_madv_dontdump
If set, instructs kernel to not store the (huge) shadow in core file.
symbolize_inline_frames
Print inlined frames in stacktraces. Defaults to true.
demangle
Print demangled symbols.
symbolize_vs_style
Print file locations in Visual Studio style (e.g:  file(10,42): ...
dedup_token_length
If positive, after printing a stack trace also print a short string token based on this number of frames that will simplify deduplication of the reports. Example: 'DEDUP_TOKEN: foo-bar-main'. Default is 0.
stack_trace_format
Format string used to render stack frames. See sanitizer_stacktrace_printer.h for the format description. Use DEFAULT to get default format.
compress_stack_depot
Compress stack depot to save memory.
no_huge_pages_for_shadow
If true, the shadow is not allowed to use huge pages. 
strict_string_checks
If set check that string arguments are properly null-terminated
intercept_strstr
If set, uses custom wrappers for strstr and strcasestr functions to find more errors.
intercept_strspn
If set, uses custom wrappers for strspn and strcspn function to find more errors.
intercept_strtok
If set, uses a custom wrapper for the strtok function to find more errors.
intercept_strpbrk
If set, uses custom wrappers for strpbrk function to find more errors.
intercept_strcmp
If set, uses custom wrappers for strcmp functions to find more errors.
intercept_strlen
If set, uses custom wrappers for strlen and strnlen functions to find more errors.
intercept_strndup
If set, uses custom wrappers for strndup functions to find more errors.
intercept_strchr
If set, uses custom wrappers for strchr, strchrnul, and strrchr functions to find more errors.
intercept_memcmp
If set, uses custom wrappers for memcmp function to find more errors.
strict_memcmp
If true, assume that memcmp(p1, p2, n) always reads n bytes before comparing p1 and p2.
intercept_memmem
If set, uses a wrapper for memmem() to find more errors.
intercept_intrin
If set, uses custom wrappers for memset/memcpy/memmove intrinsics to find more errors.
intercept_stat
If set, uses custom wrappers for *stat functions to find more errors.
intercept_send
If set, uses custom wrappers for send* functions to find more errors.
decorate_proc_maps
If set, decorate sanitizer mappings in /proc/self/maps with user-readable names
exitcode
Override the program exit status if the tool found an error
abort_on_error
If set, the tool calls abort() instead of _exit() after printing the error report.
suppress_equal_pcs
Deduplicate multiple reports for single source location in halt_on_error=false mode (asan only).
print_cmdline
Print command line on crash (asan only).
html_cov_report
Generate html coverage report.
sancov_path
Sancov tool location.
dump_instruction_bytes
If true, dump 16 bytes starting at the instruction that caused SEGV
dump_registers
If true, dump values of CPU registers when SEGV happens. Only available on OS X for now.
detect_write_exec
If true, triggers warning when writable-executable pages requests are being made
test_only_emulate_no_memorymap
TEST ONLY fail to read memory mappings to emulate sanitized "init"
FlagHandlerInclude
exclusive
ERROR: Invalid value for signal handler option: '%s'
ERROR: Invalid value for uptr option: '%s'
0x%zx
Available flags for %s:
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_flag_parser.cpp
((buffer[sizeof(buffer) - 1])) == (('\0'))
 Truncated
- %s (Current Value%s: %s)
%s: ERROR: %s
%s: ERROR: expected '=' in %s
expected '='
unterminated string
Flag parsing failed.
%s: %s
<empty>
Failed to read options from '%s': error %d
((n_flags_)) < ((kMaxFlags))
WARNING: found %d unrecognized flag(s):
    %s
((n_unknown_flags_)) < ((kMaxUnknownFlags))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_libc.cpp
((base)) == ((10))
((size)) <= ((1ULL << (40)))
%s: too many ignored libraries (max: %zu)
%s: called_from_lib suppression '%s' is matched against 2 libraries: '%s' and '%s'
Matched called_from_lib suppression '%s' against library '%s'
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_libignore.cpp
((idx)) < (((sizeof(ignored_code_ranges_)/sizeof((ignored_code_ranges_)[0]))))
%s: library '%s' that was matched against called_from_lib suppression '%s' is unloaded
Adding instrumented range 0x%zx-0x%zx from library '%s'
((idx)) < (((sizeof(instrumented_code_ranges_)/sizeof((instrumented_code_ranges_)[0]))))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_mac.cpp
((false && "internal_mremap is unimplemented on Mac")) != (0)
WARNING: Spawning external symbolizer is not allowed under sandbox.
Checking file existence is not allowed under sandbox.
((stack_top)) != (0)
((stack_bottom)) != (0)
((getrlimit(3, &rl))) == ((0))
((environ)) != (0)
((kMaxPathLength)) <= ((buf_len))
((internal_strlen(vers))) >= ((3))
((*p)) == (('.'))
kern.osrelease
((res)) == ((0))
((len)) < ((sizeof(VersStr)))
Cannot get task info. Error: %d
com.apple.sanitizer
UndefinedBehaviorSanitizer
ThreadSanitizer
FindDynamicShadowStart, space_size = %p
Shadow doesn't fit, largest_gap_found = %p, max_occupied_addr = %p
Unable to find a memory range for dynamic shadow.
space_size = %p, largest_gap_found = %p, max_occupied_addr = %p, new_max_vm = %p
((0 && "cannot place shadow")) != (0)
Unable to find a memory range after restricting VM.
((0 && "cannot place shadow after restricting vm")) != (0)
((IsAligned(shadow_start, alignment))) != (0)
((false && "HWASan aliasing is unimplemented on Mac")) != (0)
Register values:
%s = 0x%016llx  
<%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X>
Process module map:
0x%zx-0x%zx %s (%s) %s
End of module map.
SIMULATOR_RUNTIME_VERSION
ERROR: Running in simulator but SIMULATOR_RUNTIME_VERSION env var is not set.
task_set_exc_guard_behavior
dladdr(dlsym(RTLD_DEFAULT, "puts"), &info_puts)
dladdr((void *)&VerifyInterceptorsWorking, &info_runtime)
ERROR: Interceptors are not working. This may be because %s is loaded too late (e.g. via dlopen). Please launch the executable with:
%s=%s
"interceptors not installed" && 0
dladdr((void *)&StripEnv, &info)
new_env
i386
x86_64
x86_64h
armv6
armv7
armv7s
armv7k
arm64
arm64e
arm64_32
loongarch64
riscv64
hexagon
((0 && "Invalid module arch")) != (0)
((thread)) == ((pthread_self()))
file-read-data
process-fork
process-exec*
sandbox_check(%s, %d, %s) failed with errno: %d
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_mutex.cpp
((count)) != ((0))
allocate
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_posix.cpp
((IsPowerOfTwo(size))) != (0)
((end)) < ((map_end))
allocate noreserve
((fd != ((fd_t)-1))) != (0)
((fsize)) != (((uptr)-1))
((fsize)) > ((0))
could not map writable file (%d, %lld, %zu): %zd, errno: %d
((0)) != ((segment.end))
ABRT
SEGV
TRAP
UNKNOWN SIGNAL
/proc/
memory at address 0x%zx
((start1 <= end1)) != (0)
((start2 <= end2)) != (0)
Supported Printf formats: %([0-9]*)?(z|l|ll)?{d,u,x,X}; %p; %[-]([0-9]*)?(\.\*)?s; %c
Provided format: 
format
buff_length > 0
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_printf.cpp
((!((precision >= 0 || left_justified) && *cur != 's'))) != (0)
!have_flags
!have_length
((!have_width || left_justified)) != (0)
false
buff <= buff_end
((buffer_[length()])) == (('\0'))
base == 10 || base == 16
base == 10 || !negative
absolute_value || !negative
minimal_num_length < kMaxLen
AppendNumber buffer overflow
<null>
==%s
==%d==
Failed to lookup the dyld image header in the shared cache on macOS 13+ (or no shared cache in use).  Falling back to lookup via vm_region_recurse_64().
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_procmaps_mac.cpp
((dyld_hdr)) != (0)
((0 && "Invalid subtype of x86_64")) != (0)
((0 && "Invalid subtype of ARM")) != (0)
((0 && "CPU_SUBTYPE_ARM64_32_ALL cpu subtype not supported")) != (0)
((0 && "Invalid CPU type")) != (0)
((cacheStart && cacheLength)) != (0)
((info->version)) >= ((2))
v16@?0r^{dyld_shared_cache_dylib_text_info=QQQ[16C]*Q}8
libclang_rt.
((size_)) > ((0))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_range.cpp
((r.begin)) <= ((r.end))
Failed to get threads for task (errno %d).
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_mac.cpp
((index)) < ((threads_.size()))
Error - unable to get thread ident for a thread
Error - unable to get registers for a thread
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_suppressions.cpp
((suppression_types_num_)) <= ((kMaxSuppressionTypes))
%s: reading suppressions file at %s
%s: failed to read suppressions file '%s'
((can_parse_)) != (0)
%s: parsing '%s'
%s: failed to parse suppressions
%s: parsed suppression entry '%s'
((i)) < ((suppressions_.size()))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.cpp
((0 && "dtls is unsupported on this platform!")) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_thread_arg_retval.cpp
((!t->second.detached)) != (0)
((ptrs)) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_dense_map.h
((!KeyInfoT::isEqual(Val, EmptyKey))) != (0)
((!KeyInfoT::isEqual(Val, TombstoneKey))) != (0)
((TheBucket)) != (0)
((Buckets)) != (0)
((Size)) == ((sizeof(BucketT) * NumBuckets))
((Size * 2)) > ((GetPageSizeCached()))
DenseMap
(((getNumBuckets() & (getNumBuckets() - 1)))) == ((0))
((!FoundVal)) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_thread_registry.cpp
((status == ThreadStatusRunning || status == ThreadStatusFinished)) != (0)
((false)) == ((detached))
((ThreadStatusFinished)) == ((status))
%s: Thread limit (%u threads) exceeded. Dying.
((tctx)) != ((0))
((tid)) != ((kInvalidTid))
((tid)) < ((max_threads_))
((tctx->status)) == ((ThreadStatusInvalid))
((alive_threads_)) == ((max_alive_threads_))
((live_.try_emplace(user_id, tid).second)) != (0)
((0 ? ThreadStatusCreated : ThreadStatusRunning)) == ((tctx->status))
%s: Detach of non-existent thread
%s: Join of non-existent thread
((alive_threads_)) > ((0))
((running_threads_)) > ((0))
((tctx->status)) == ((ThreadStatusCreated))
((ThreadStatusCreated)) == ((tctx->status))
((tctx->status)) == ((ThreadStatusDead))
((tctx->user_id)) == ((user_id))
((tctx->status)) != ((ThreadStatusInvalid))
((tctx->status)) != ((ThreadStatusDead))
((tctx->user_id)) == ((0))
((live_.try_emplace(user_id, tctx->tid).second)) != (0)
((live_.erase(tctx->user_id))) != (0)
%s: CHECK failed: %s:%d "%s" (0x%zx, 0x%zx) (tid=%u)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_common_libcdep.cpp
((IsPowerOfTwo(align))) != (0)
(((beg % GetMmapGranularity()))) == ((0))
((((end + 1) % GetMmapGranularity()))) == ((0))
ReserveShadowMemoryRange failed while trying to map 0x%zx bytes. Perhaps you're using ulimit -v
ERROR: Failed to protect the shadow gap. %s cannot proceed correctly. ABORTING.
high gap
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_mac_libcdep.cpp
((res != ((void *)-1))) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_posix_libcdep.cpp
((!StackSizeIsUnlimited())) != (0)
((AddressSpaceIsUnlimited())) != (0)
((0)) == ((sigaltstack(nullptr, &oldstack)))
SetAlternateSignalStack
((0)) == ((sigaltstack(&altstack, nullptr)))
((0)) == ((sigaltstack(&altstack, &oldstack)))
((size)) < ((page_size * 10))
((14)) == ((write_errno))
((size)) <= ((size_))
((addr + size)) == ((reinterpret_cast<uptr>(base_) + size_))
Sanitizer: increasing stacksize %zu->%zu
Sanitizer: pre-allocated stack size is insufficient: %zu < %zu
Sanitizer: pthread_create is likely to fail.
WARNING: failed to fork (errno %d)
Waiting on the process failed (errno %d).
ERROR: %s getrlimit() failed %d
ERROR: %s setrlimit() failed %d
((0)) == ((getrlimit(res, &rlim)))
((0)) == ((internal_sigaction(signum, &sigact, nullptr)))
Installed the sigaction for signal %d
ERROR: %s failed to allocate 0x%zx (%zd) bytes at address %zx (errno: %d)
SANCOV_OPTIONS
If set, coverage information will be symbolized by sancov tool after dumping.
Print flags help.
ERROR: unknown pc 0x%zx (may happen if dlclose is used)
SanitizerCoverage: %s: %zd PCs written
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_coverage_libcdep_new.cpp
((name)) != (0)
%s/%s.%zd.%s
SanitizerCoverage: failed to open %s for writing (reason: %d)
((!*start)) != (0)
cov_8bit_counters_out: written %zd bytes to %s
cov_pcs_out: written %zd bytes to %s
ERROR: %s: calloc parameters overflow: count * size (%zd * %zd) cannot be represented in type size_t
ERROR: %s: reallocarray parameters overflow: count * size (%zd * %zd) cannot be represented in type size_t
ERROR: %s: pvalloc parameters overflow: size 0x%zx rounded up to system page size 0x%zx cannot be represented in type size_t
ERROR: %s: invalid allocation alignment: %zd, alignment must be a power of two
ERROR: %s: invalid alignment requested in aligned_alloc: %zd, alignment must be a power of two and the requested size 0x%zx must be a multiple of alignment
ERROR: %s: invalid alignment requested in posix_memalign: %zd, alignment must be a power of two and a multiple of sizeof(void*) == %zd
ERROR: %s: requested allocation size 0x%zx exceeds maximum supported size of 0x%zx
ERROR: %s: allocator exceeded the RSS limit
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_stackdepotbase.h
((s & kUnlockMask)) == ((s))
((id & (((u32)-1) >> kReservedBits))) == ((id))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_stack_store.cpp
((block_idx)) < (((sizeof(blocks_)/sizeof((blocks_)[0]))))
((count)) <= ((kBlockSizeFrames))
StackStore
((nullptr)) != ((ptr))
((header->size)) <= ((kBlockSizeBytes))
((header->size)) >= ((sizeof(PackedHeader)))
StackStoreUnpack
((0 && "Unexpected type")) != (0)
((kBlockSizeFrames)) == ((unpacked_end - unpacked))
StackStorePack
Packed block of %zu KiB to %zu KiB
Undo and keep block unpacked
((trace.tag)) == ((static_cast<uptr>(tag)))
((to)) == ((to_end))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_lzw.h
((prefix_to_code.size())) == ((dict_len1.size()))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_stackdepot.cpp
((nullptr)) == ((thread_))
%s: StackDepot compression thread started
%s: StackDepot compression thread stopped
%s: StackDepot released %zu KiB out of %zu KiB in %llu ms
((nullptr)) != ((thread_))
Stack for id %u:
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace.cpp
((size)) <= ((kStackTraceMax))
((max_depth)) >= ((2))
((count)) < ((size))
((stack_top)) > ((stack_bottom))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_libcdep.cpp
((output)) != (0)
    <empty stack>
((printer.ProcessAddressFrames(pc))) != (0)
DEDUP_TOKEN: %s
((out_buf)) != (0)
((request_fast_unwind)) == ((WillUseFastUnwind(request_fast_unwind)))
<can't symbolize>
wrap_
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_printer.cpp
((!info || address == info->address)) != (0)
in %s
+0x%zx
(<unknown module>)
(%p)
Unsupported specifier in stack frame format: %c (%p)!
%s(%d
+0x%zx)
(BuildId: 
%02x
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer.cpp
((start_hook_ == 0 && end_hook_ == 0)) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_libcdep.cpp
((symbolizer_)) != (0)
modules_.size() > 0
CODE
DATA
FRAME
%s "%s" 0x%zx
%s "%s:%s" 0x%zx
WARNING: Command buffer too small
((path_)) != (0)
((path_[0])) != (('\0'))
WARNING: Symbolizer was blocked from starting itself!
WARNING: Failed to use and restart external symbolizer!
WARNING: Can't read from symbolizer at fd %d
WARNING: Can't write to symbolizer at fd %d
((i)) < ((modules_.size()))
--default-arch=x86_64
--demangle
--no-demangle
--inlines
--no-inlines
0x%zx
WARNING: atos failed to symbolize address "0x%zx"
 (in 
WARNING: invalid path to external symbolizer!
Launching Symbolizer process: 
WARNING: failed to spawn external symbolizer (errno: %d)
WARNING: Can't create a socket pair to start external symbolizer (errno: %d)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_posix_libcdep.cpp
((pid)) > ((0))
WARNING: external symbolizer didn't start up correctly!
((infd)) != (0)
((outfd)) != (0)
Symbolizer is disabled.
Cannot use internal symbolizer: out of memory
Using libbacktrace symbolizer.
Using dladdr symbolizer.
External symbolizer is explicitly disabled.
Using llvm-symbolizer at user-specified path: %s
atos
Using atos at user-specified path: %s
addr2line
Using addr2line at user-specified path: %s
ERROR: External symbolizer path is set to '%s' which isn't a known symbolizer. Please set the path to the llvm-symbolizer binary or other known tool.
Using atos found at: %s
Using llvm-symbolizer found at: %s
Using addr2line found at: %s
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_internal.h
((0)) == ((internal_strcmp(module_name, addr2line->module_name())))
0x%zx
0x%zx
swift_demangle
((garbage)) != (0)
%L %F
always
WARNING: %s: writable-executable page usage
w-and-x-usage
ERROR: %s: %s on address %p (pc %p bp %p sp %p T%d)
ERROR: %s: %s on unknown address (pc %p bp %p sp %p T%d)
ERROR: %s: %s on unknown address %p (pc %p bp %p sp %p T%d)
Hint: pc points to the zero page.
UNKNOWN
The signal is caused by a %s memory access.
Hint: this fault was caused by a dereference of a high value address (see register values below).  Disassemble the provided pc to learn which register was used.
Hint: address points to the zero page.
%s can not provide additional info.
First 16 instruction bytes at pc: 
unaccessible
%s%s%x%x%s 
Unmatched call to __lsan_enable().
report_objects
Print addresses of leaked objects after main leak report.
resolution
Aggregate two objects into one leak if this many stack frames match. If zero, the entire stack trace must match.
max_leaks
The number of leaks reported.
use_globals
Root set: include global variables (.data and .bss)
use_stacks
Root set: include thread stacks
use_registers
Root set: include thread registers
use_tls
Root set: include TLS and thread-specific storage
use_root_regions
Root set: include regions added via __lsan_register_root_region().
use_ld_allocations
Root set: mark as reachable all allocations made from dynamic linker. This was the old way to handle dynamic TLS, and will be removed soon. Do not use this flag.
use_unaligned
Consider unaligned pointers valid.
use_poisoned
Consider pointers found in poisoned memory to be valid.
log_pointers
Debug logging
log_threads
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/lsan/lsan_common.cpp
<unknown module>
((tag == kReachable || tag == kIndirectlyLeaked)) != (0)
Scanning %s range %p-%p.
%p is poisoned: ignoring %p pointing into chunk %p-%p of size %zu.
%p: found %p pointing into chunk %p-%p of size %zu.
((allocator_begin)) <= ((allocator_end))
((allocator_end)) <= ((end))
GLOBAL
FAKE STACK
Root region intersects with mapped region at %p-%p
ROOT
-----------------------------------------------------
Suppressions used:
  count      bytes template
%7zu %10zu %s
((tag == kDirectlyLeaked || tag == kIndirectlyLeaked)) != (0)
((leaks_.size() <= kMaxLeaksConsidered)) != (0)
Too many leaks! Only the first %zu leaks encountered will be reported.
The %zu top leak(s):
Omitting %zu more leak(s).
%s leak of %zu byte(s) in %zu object(s) allocated from:
Direct
Indirect
((leaks_[index].stack_trace_id)) != (0)
Objects leaked above:
%p (%zu bytes)
%zu byte(s) leaked in %zu allocation(s).
__lsan_ignore_object(): no heap object found at %p
__lsan_ignore_object(): heap object at %p is already being ignored
__lsan_ignore_object(): ignoring heap object at %p
Registered root region at %p of size %zu
((b)) < ((e))
Unregistered root region at %p of size %zu
__lsan_unregister_root_region(): region at %p of size %zu has not been registered.
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/lsan/../sanitizer_common/sanitizer_common.h
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/lsan/../sanitizer_common/sanitizer_mutex.h
LeakSanitizer is disabled
LeakSanitizer: checking for leaks
LeakSanitizer has encountered a fatal error.
HINT: For debugging, try setting environment variable LSAN_OPTIONS=verbosity=1:log_threads=1
HINT: LeakSanitizer does not work under ptrace (strace, gdb, etc)
WARNING: LeakSanitizer gave up on indirect leaks suppression.
Rerun with %zu suppressed stacks.
((param)) != (0)
((!param->success)) != (0)
Running thread %zu was not suspended. False leaks are possible.
Processing platform-specific allocations.
Scanning leaked chunks.
((arg)) != (0)
Suppressed: chunk %p-%p of size %zu.
Ignored: chunk %p-%p of size %zu.
Processing thread %llu.
Thread %llu not found in registry.
Unable to get registers from thread %llu.
REGISTERS
Stack at %p-%p (SP = %p).
WARNING: stack pointer not in stack range.
Skipped %d guard page(s) to obtain stack %p-%p.
STACK
TLS at %p-%p.
Thread %llu has DTLS under destruction.
DTLS %d at %p-%p.
DTLS
Treating pointer %p from ThreadContext as reachable
HEAP
=================================================================
ERROR: LeakSanitizer: detected memory leaks
((!comp(v[i], v[last]))) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/lsan/../sanitizer_common/sanitizer_dense_map.h
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/lsan/lsan_common_mac.cpp
((internal_strnlen(name, kMaxSegName + 1) <= kMaxSegName)) != (0)
((pthread_key_create(&key, restore_tid_data))) == ((0))
__cfstring
__la_symbol_ptr
__mod_init_func
__mod_term_func
__nl_symbol_ptr
__objc_classlist
__objc_classrefs
__objc_imageinfo
__objc_nlclslist
__objc_protolist
__objc_selrefs
__objc_superrefs
<unknown>
%s runtime error: %s%s
%s note: %s
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/ubsan/ubsan_diag.cpp
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/ubsan/ubsan_diag.h
((NumArgs != MaxArgs)) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/ubsan/../sanitizer_common/sanitizer_common.h
'%s'
%lld
%llu
0x%08x%08x%08x%08x
undefined-behavior
null-pointer-use
nullptr-with-offset
nullptr-with-nonzero-offset
nullptr-after-nonzero-offset
pointer-overflow
misaligned-pointer-use
alignment-assumption
insufficient-object-size
signed-integer-overflow
unsigned-integer-overflow
integer-divide-by-zero
float-divide-by-zero
invalid-builtin-use
invalid-objc-cast
implicit-unsigned-integer-truncation
implicit-signed-integer-truncation
implicit-integer-sign-change
implicit-signed-integer-truncation-or-sign-change
invalid-shift-base
invalid-shift-exponent
out-of-bounds-index
unreachable-call
missing-return
non-positive-vla-index
float-cast-overflow
invalid-bool-load
invalid-enum-load
function-type-mismatch
invalid-null-return
invalid-null-argument
dynamic-type-mismatch
cfi-bad-type
((0 && "unknown ErrorType!")) != (0)
[30m
<memory cannot be printed>
%s%02x
((isMemoryLocation())) != (0)
undefined
null
nullability-assign
alignment
object-size
implicit-signed-integer-truncation,implicit-integer-sign-change
shift-base
shift-exponent
bounds
unreachable
return
vla-bound
bool
enum
function
returns-nonnull-attribute
nullability-return
nonnull-attribute
nullability-arg
vptr
Crash the program after printing the first error report
print_stacktrace
Include full stacktrace into an error report
report_error_type
Print specific error type instead of 'undefined-behavior' in summary.
silence_unsigned_overflow
Do not print non-fatal error reports for unsigned integer overflow. Used to provide fuzzing signal without blowing up logs.
UBSAN_SYMBOLIZER_PATH
load of
store to
reference binding to
member access within
member call on
constructor call on
downcast of
upcast of
cast to virtual base of
_Nonnull binding to
dynamic operation on
%0 null pointer of type %1
%0 misaligned address %1 for type %3, which requires %2 byte alignment
%0 address %1 with insufficient space for an object of type %2
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/ubsan/ubsan_handlers.cpp
((0 && "unexpected error type!")) != (0)
pointer points here
((CallerPC)) != (0)
assumption of %0 byte alignment for pointer of type %1 failed
assumption of %0 byte alignment (with offset of %1 byte) for pointer of type %2 failed
alignment assumption was specified here
%0address is %1 aligned, misalignment offset is %2 bytes
offset 
negation of %0 cannot be represented in type %1; cast to an unsigned type to negate this value to itself
negation of %0 cannot be represented in type %1
division of %0 by -1 cannot be represented in type %1
division by zero
shift exponent %0 is negative
shift exponent %0 is too large for %1-bit type %2
left shift of negative value %0
left shift of %0 by %1 places cannot be represented in type %2
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/ubsan/ubsan_value.h
((isIntegerTy())) != (0)
index %0 out of bounds for type %1
execution reached an unreachable program point
execution reached the end of a value-returning function without returning a value
variable length array bound evaluates to non-positive value %0
%0 is outside the range of representable values of type %2
'bool'
'BOOL'
load of value %0, which is not a valid value for type %1
implicit conversion from type %0 of value %1 (%2-bit, %3signed) to type %4 changed the value to %5 (%6-bit, %7signed)
passing zero to %0, which is not a valid argument
ctz()
clz()
<unknown type>
invalid ObjC cast, object is a '%0', but expected a %1
((0 && "source location pointer is null!")) != (0)
null pointer returned from function declared to never return null
%0 specified here
returns_nonnull attribute
_Nonnull return type annotation
null pointer passed as argument %0, which is declared to never be null
nonnull attribute
_Nonnull type annotation
applying zero offset to null pointer
applying non-zero offset %0 to null pointer
applying non-zero offset to non-null pointer %0 produced null pointer
addition of unsigned offset to %0 overflowed to %1
subtraction of unsigned offset from %0 overflowed to %1
pointer index expression with base %0 overflowed to %1
non-virtual pointer to member function call
indirect function call
control flow integrity check for type %0 failed during %1
(unknown)
%0 defined here
check failed in %0, destination function located in %1
call to function %0 through pointer to incorrect function type %1
%0 integer overflow: %1 %2 %3 cannot be represented in type %4
signed
unsigned
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/ubsan/ubsan_monitor.cpp
((0 && "Invalid arguments passed to __ubsan_get_current_report_data")) != (0)
/usr/lib/libobjc.A.dylib
object_getClassName
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/ubsan/ubsan_value.cpp
((getType().isSignedIntegerTy())) != (0)
((0 && "unexpected bit width")) != (0)
((getType().isUnsignedIntegerTy())) != (0)
((Val >= 0)) != (0)
((getType().isFloatTy())) != (0)
((0 && "unexpected floating point bit width")) != (0)
virtual call
non-virtual call
base-to-derived cast
cast to unrelated type
virtual pointer to member function call
control flow integrity check for type %0 failed during %1 (vtable address %2)
invalid vtable
vtable is of type %0
check failed in %0, vtable located in %1
%0 address %1 which does not point to an object of type %2
object has a possibly invalid vptr: abs(offset to top) too big
possibly invalid vptr
object has invalid vptr
invalid vptr
object is of type %0
vptr for %0
object is base class subobject at offset %0 within object of type %1
vptr for %2 base class of %1
Address Sanitizer reported a failure.
Undefined Behavior Sanitizer reported a failure.
Thread Sanitizer reported a failure.
Sanitizer tool reported a failure.
Consult syslog for more information.
@2i 
@i 
 (08@HPX`hpx
 (08
KKKKKKKKKKKKKKRKKKKKKKKKKKKKK
KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK[DDKbnw
6!9<?$B
interceptor_name
interceptor_via_fun
interceptor_via_lib
odr_violation
DYLD_INSERT_LIBRARIES
/usr/lib/dyld
!    #%n %p %F %L
!$'*-0??
??:0
llvm-symbolizer
:DEADLYSIGNAL
: nested bug in the same thread, aborting.
stack-overflow
leak:*_os_trace*
leak:*tls_get_addr*
leak
vptr_check
N11__sanitizer11FlagHandlerIbEE
N11__sanitizer15FlagHandlerBaseE
N11__sanitizer11FlagHandlerIPKcEE
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_allocator.cpp
((ms)) != (0)
((IsAligned((uptr)ptr, alignment))) != (0)
IsPowerOfTwo(boundary)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_allocator_primary32.h
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_allocator_secondary.h
((p)) != (0)
((options.min_redzone)) >= ((16))
((options.max_redzone)) >= ((options.min_redzone))
((options.max_redzone)) <= ((2048))
((IsPowerOfTwo(options.min_redzone))) != (0)
((IsPowerOfTwo(options.max_redzone))) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_quarantine.h
(((size == 0 && cache_size == 0) || cache_size != 0)) != (0)
((res)) < ((kNumPossibleRegions))
TwoLevelMap
((PointerIsMine(p))) != (0)
((IsAligned(p, page_size_))) != (0)
((AsanChunkView(right_chunk).AddrIsAtLeft(addr, 1, &r_offset))) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_list.h
((this)) != ((l))
((cache_size)) >= ((overhead_size))
((size)) >= ((sizeof(QuarantineBatch)))
((!empty())) != (0)
((prev->next)) == ((x))
((old_chunk_state)) == ((CHUNK_QUARANTINE))
((nearest_chunk)) >= ((h->map_beg))
((nearest_chunk)) < ((h->map_beg + h->map_size))
((nearest_chunk)) <= ((p))
((IsAligned((uptr)h, page_size_))) != (0)
((old)) == ((kAllocBegMagic))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_allocator_local_cache.h
((class_id)) != ((0UL))
((class_id)) < ((kNumClasses))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common.h
((x)) != ((0U))
FATAL: Internal error: %s's allocator failed to allocate a transfer batch.
((b->Count())) > ((0))
((IsAligned(res, kRegionSize))) != (0)
((chunks_[idx])) == ((h))
((idx)) < ((n_chunks_))
Stats: LargeMmapAllocator: allocated %zd times, remains %zd (%zd K) max %zd M; by size logs: 
%zd:%zd; 
Quarantine limits: global: %zdMb; thread local: %zdKb
Global quarantine stats: batches: %zd; bytes: %zd (user: %zd); chunks: %zd (capacity: %zd); %d%% chunks used; %d%% memory overhead
((IsPowerOfTwo(x))) != (0)
((atomic_load(&m->chunk_state, memory_order_relaxed))) == ((CHUNK_QUARANTINE))
((b)) != (0)
WARNING: %s: CombinedAllocator allocation overflow: 0x%zx bytes with 0x%zx alignment requested
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_allocator_combined.h
((reinterpret_cast<uptr>(res) & (alignment - 1))) == ((0))
((IsPowerOfTwo(alignment))) != (0)
WARNING: %s: LargeMmapAllocator allocation overflow: 0x%zx bytes with 0x%zx alignment requested
((IsAligned(map_beg, page_size_))) != (0)
((IsAligned(res, alignment))) != (0)
((IsAligned(res, page_size_))) != (0)
((res + size)) >= ((map_beg))
((res + size)) <= ((map_end))
((n)) < ((kMaxNumChunks))
((count)) < ((kSize))
((stack)) != (0)
((IsAligned(needed_size, min_alignment))) != (0)
WARNING: AddressSanitizer failed to allocate 0x%zx bytes
((user_end)) <= ((alloc_end))
((alloc_beg + sizeof(LargeChunkHeader))) <= ((chunk_beg))
((rz_size)) >= ((16))
((rz_size)) <= ((2048))
((IsPowerOfTwo(rz_size))) != (0)
((rz_size)) == ((RZLog2Size(res)))
((rz_log)) < ((8))
((UsedSize())) == ((size))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_mapping.h
((AddrIsInMem(p))) != (0)
((old_ptr && new_size)) != (0)
((beg + 1)) == ((end))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_mutex.h
((atomic_load(&state_, memory_order_relaxed))) == ((1))
((chunks[i])) == ((t))
((AddressSpaceView::Load(chunks[i])->chunk_idx)) == ((i))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_activation.cpp
((!asan_is_deactivated)) != (0)
Deactivating ASan
Activating ASan
Activated with flags:
ASAN_ACTIVATION_OPTIONS
redzone
max_redzone
quarantine_size_mb
thread_local_quarantine_size_kb
alloc_dealloc_mismatch
poison_heap
allocator_may_return_null
malloc_context_size
coverage
coverage_dir
verbosity
help
allocator_release_to_os_interval_ms
ERROR: Invalid value for int option: '%s'
ERROR: Invalid value for bool option: '%s'
false
true
quarantine_size_mb %d, thread_local_quarantine_size_kb %d, max_redzone %d, poison_heap %d, malloc_context_size %d, alloc_dealloc_mismatch %d, allocator_may_return_null %d, coverage %d, coverage_dir %s, allocator_release_to_os_interval_ms %d
low shadow
shadow gap
high shadow
heap
stack
global
heap-invalid
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_debugging.cpp
((region_kind)) != (0)
((new_capacity)) > ((0))
((size_)) <= ((new_capacity))
InternalMmapVector
((i)) < ((size_))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_descriptions.cpp
((((unsigned int)len) < sizeof(name))) != (0)
 (%s)
((context)) != (0)
Thread %s
 created by unknown thread
 created by %s here:
((chunk.AllocTid())) != ((kInvalidTid))
AddressSanitizer can not describe address in more detail (wild memory access suspected).
Address %p is located in the %s area.
initialization-order-fiasco
  registered at:
Address %p is located in stack of thread %s
 at offset %zu in frame%s
AddressSanitizer can't parse the stack frame descriptor: |%s|
  This frame has %zu object(s):
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
%sfreed by thread %s here:%s
%spreviously allocated by thread %s here:%s
%sallocated by thread %s here:%s
Address %p is a wild pointer inside of access range of size %p.
((atomic_load(&state_, memory_order_relaxed) & kWriterLock)) != (0)
((!AddrIsInMem(addr))) != (0)
%p is located %zd bytes before
%p is located %zd bytes after
%p is located %zd bytes inside of
 global variable '%s' defined in '
' (0x%zx) of size %zu
[32m
is inside
partially overflows
overflows
partially underflows
underflows
    [%zd, %zd)
 (line %zd)
%s <== Memory access at offset %zd %s this variable%s
%p is located somewhere around (this is AddressSanitizer bug!)
 %zu-byte region [%p,%p)
((id)) != (0)
((res.trace)) != (0)
[35m
ERROR: AddressSanitizer: attempting %s on %p in thread %s:
ERROR: AddressSanitizer: %s on %p in thread %s:
%s  object passed to delete has wrong type:
  size of the allocated type:   %zd bytes;
  size of the deallocated type: %zd bytes.
%zd bytes
default-aligned
  alignment of the allocated type:   %s;
  alignment of the deallocated type: %s.
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_errors.cpp
((free_stack->size)) > ((0))
HINT: if you don't care about these errors you may set ASAN_OPTIONS=new_delete_type_mismatch=0
ERROR: AddressSanitizer: attempting free on address which was not malloc()-ed: %p in thread %s
INVALID
malloc
operator new
operator new []
free
operator delete
operator delete []
((alloc_type)) != ((dealloc_type))
ERROR: AddressSanitizer: %s (%s vs %s) on %p
((dealloc_stack->size)) > ((0))
HINT: if you don't care about these errors you may set ASAN_OPTIONS=alloc_dealloc_mismatch=0
ERROR: AddressSanitizer: attempting to call malloc_usable_size() for pointer which is not owned: %p
ERROR: AddressSanitizer: attempting to call __sanitizer_get_allocated_size() for pointer which is not owned: %p
ERROR: AddressSanitizer: calloc parameters overflow: count * size (%zd * %zd) cannot be represented in type size_t (thread %s)
ERROR: AddressSanitizer: reallocarray parameters overflow: count * size (%zd * %zd) cannot be represented in type size_t (thread %s)
ERROR: AddressSanitizer: pvalloc parameters overflow: size 0x%zx rounded up to system page size 0x%zx cannot be represented in type size_t (thread %s)
ERROR: AddressSanitizer: invalid allocation alignment: %zd, alignment must be a power of two (thread %s)
ERROR: AddressSanitizer: invalid alignment requested in aligned_alloc: %zd, alignment must be a power of two and the requested size 0x%zx must be a multiple of alignment (thread %s)
ERROR: AddressSanitizer: invalid alignment requested in posix_memalign: %zd, alignment must be a power of two and a multiple of sizeof(void*) == %zd (thread %s)
ERROR: AddressSanitizer: requested allocation size 0x%zx (0x%zx after adjustments for alignment, red zones etc.) exceeds maximum supported size of 0x%zx (thread %s)
ERROR: AddressSanitizer: specified RSS limit exceeded, currently set to soft_rss_limit_mb=%zd
ERROR: %s: out of memory: allocator is trying to allocate 0x%zx bytes
%s-param-overlap
ERROR: AddressSanitizer: %s: memory ranges [%p,%p) and [%p, %p) overlap
ERROR: AddressSanitizer: %s: (size=%zd)
ERROR: AddressSanitizer: bad parameters to __sanitizer_annotate_contiguous_container:
      beg     : %p
      end     : %p
      old_mid : %p
      new_mid : %p
ERROR: beg is not aligned by %zu
ERROR: AddressSanitizer: bad parameters to __sanitizer_annotate_double_ended_contiguous_container:
      storage_beg        : %p
      storage_end        : %p
      old_container_beg  : %p
      old_container_end  : %p
      new_container_beg  : %p
      new_container_end  : %p
ERROR: storage_beg is not aligned by %zu
ERROR: AddressSanitizer: %s (%p):
  [1] size=%zd '%s' %s
  [2] size=%zd '%s' %s
These globals were registered at these points:
  [1]:
  [2]:
HINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_odr_violation=0
%s: global '%s' at %s
ERROR: AddressSanitizer: %s: %p %p
?-byte
multi-byte
write
read
unknown-crash
heap-buffer-overflow
heap-use-after-free
stack-buffer-underflow
stack-buffer-overflow
stack-use-after-return
use-after-poison
container-overflow
stack-use-after-scope
global-buffer-overflow
intra-object-overflow
dynamic-stack-buffer-overflow
far-from-bounds
ERROR: AddressSanitizer: %s on address %p at pc %p bp %p sp %p
%s%s of size %zu at %p thread %s%s
WRITE
READ
ACCESS
[31m
SCARINESS: %d (%s)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_descriptions.h
((0 && "AddressInformation kind is invalid")) != (0)
[34m
HINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_container_overflow=0.
If you suspect a false positive see also: https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow.
Shadow bytes around the buggy address:
%s%p:
((AddrIsInShadow(p))) != (0)
Shadow byte legend (one shadow byte represents %d application bytes):
  Addressable:           
  Partially addressable: 
  Heap left redzone:       
  Freed heap region:       
  Stack left redzone:      
  Stack mid redzone:       
  Stack right redzone:     
  Stack after return:      
  Stack use after scope:   
  Global redzone:          
  Global init order:       
  Poisoned by user:        
  Container overflow:      
  Array cookie:            
  Intra object redzone:    
  ASan internal:           
  Left alloca redzone:     
  Right alloca redzone:    
FakeStack
T%d: FakeStack created: %p -- %p stack_size_log: %zd; mmapped %zdK, noreserve=%d 
%zd: %zd/%zd; 
T%d: FakeStack destroyed: %s
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_fake_stack.cpp
((class_id)) < ((kNumberOfSizeClasses))
((base)) <= ((ptr))
((ptr)) < ((base + (((uptr)1) << stack_size_log)))
ASAN_SYMBOLIZER_PATH
MallocScribble
MallocPreScribble
ASAN_OPTIONS
LSAN_OPTIONS
UBSAN_OPTIONS
%s: detect_leaks is not supported on this platform.
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_flags.cpp
(((uptr)common_flags()->malloc_context_size)) <= ((kStackTraceMax))
((f->min_uar_stack_size_log)) <= ((f->max_uar_stack_size_log))
((f->redzone)) >= ((16))
((f->max_redzone)) >= ((f->redzone))
((f->max_redzone)) <= ((2048))
((IsPowerOfTwo(f->redzone))) != (0)
((IsPowerOfTwo(f->max_redzone))) != (0)
%s: please use either 'quarantine_size' (deprecated) or quarantine_size_mb, but not both
%s: thread_local_quarantine_size_kb can be set to 0 only when quarantine_size_mb is set to 0
WARNING: strlen interceptor is enabled even though replace_str=0. Use intercept_strlen=0 to disable it.
WARNING: strchr* interceptors are enabled even though replace_str=0. Use intercept_strchr=0 to disable them.
WARNING: strndup* interceptors are enabled even though replace_str=0. Use intercept_strndup=0 to disable them.
quarantine_size
Deprecated, please use quarantine_size_mb.
Size (in Mb) of quarantine used to detect use-after-free errors. Lower value may reduce memory usage but increase the chance of false negatives.
Size (in Kb) of thread local quarantine used to detect use-after-free errors. Lower value may reduce memory usage but increase the chance of false negatives. It is not advised to go lower than 64Kb, otherwise frequent transfers to global quarantine might affect performance.
Minimal size (in bytes) of redzones around heap objects. Requirement: redzone >= 16, is a power of two.
Maximal size (in bytes) of redzones around heap objects.
debug
If set, prints some debugging information and does additional checks.
report_globals
Controls the way to handle globals (0 - don't detect buffer overflow on globals, 1 - detect buffer overflow, 2 - print data about registered globals).
check_initialization_order
If set, attempts to catch initialization order issues.
replace_str
If set, uses custom wrappers and replacements for libc string functions to find more errors.
replace_intrin
If set, uses custom wrappers for memset/memcpy/memmove intrinsics.
detect_stack_use_after_return
Enables stack-use-after-return checking at run-time.
min_uar_stack_size_log
Minimum fake stack size log.
max_uar_stack_size_log
Maximum fake stack size log.
uar_noreserve
Use mmap with 'noreserve' flag to allocate fake stack.
max_malloc_fill_size
ASan allocator flag. max_malloc_fill_size is the maximal amount of bytes that will be filled with malloc_fill_byte on malloc.
max_free_fill_size
ASan allocator flag. max_free_fill_size is the maximal amount of bytes that will be filled with free_fill_byte during free.
malloc_fill_byte
Value used to fill the newly allocated memory.
free_fill_byte
Value used to fill deallocated memory.
allow_user_poisoning
If set, user may manually mark memory regions as poisoned or unpoisoned.
sleep_before_dying
Number of seconds to sleep between printing an error report and terminating the program. Useful for debugging purposes (e.g. when one needs to attach gdb).
sleep_after_init
Number of seconds to sleep after AddressSanitizer is initialized. Useful for debugging purposes (e.g. when one needs to attach gdb).
sleep_before_init
Number of seconds to sleep before AddressSanitizer starts initializing. Useful for debugging purposes (e.g. when one needs to attach gdb).
check_malloc_usable_size
Allows the users to work around the bug in Nvidia drivers prior to 295.*.
unmap_shadow_on_exit
If set, explicitly unmaps the (huge) shadow at exit.
protect_shadow_gap
If set, mprotect the shadow gap
print_stats
Print various statistics after printing an error message or if atexit=1.
print_legend
Print the legend for the shadow bytes.
print_scariness
Print the scariness score. Experimental.
atexit
If set, prints ASan exit stats even after program terminates successfully.
print_full_thread_history
If set, prints thread creation stacks for the threads involved in the report and their ancestors up to the main thread.
Poison (or not) the heap memory on [de]allocation. Zero value is useful for benchmarking the allocator or instrumentator.
poison_partial
If true, poison partially addressable 8-byte aligned words (default=true). This flag affects heap and global buffers, but not stack buffers.
poison_array_cookie
Poison (or not) the array cookie after operator new[].
Report errors on malloc/delete, new/free, new/delete[], etc.
new_delete_type_mismatch
Report errors on mismatch between size of new and delete.
strict_init_order
If true, assume that dynamic initializers can never access globals from other modules, even if the latter are already initialized.
start_deactivated
If true, ASan tweaks a bunch of other flags (quarantine, redzone, heap poisoning) to reduce memory consumption as much as possible, and restores them to original values when the first instrumented module is loaded into the process. This is mainly intended to be used on Android. 
detect_invalid_pointer_pairs
If >= 2, detect operations like <, <=, >, >= and - on invalid pointer pairs (e.g. when pointers belong to different objects); If == 1, detect invalid operations only when both pointers are non-null.
detect_container_overflow
If true, honor the container overflow annotations. See https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow
detect_odr_violation
If >=2, detect violation of One-Definition-Rule (ODR); If ==1, detect ODR-violation only if the two variables have different sizes
suppressions
Suppressions file name.
halt_on_error
Crash the program after printing the first error report (WARNING: USE AT YOUR OWN RISK!)
allocator_frees_and_returns_null_on_realloc_zero
realloc(p, 0) is equivalent to free(p) by default (Same as the POSIX standard). If set to false, realloc(p, 0) will return a pointer to an allocated space which can not be used.
verify_asan_link_order
Check position of ASan runtime in library list (needs to be disabled when other library has to be preloaded system-wide)
windows_hook_rtl_allocators
(Windows only) enable hooking of Rtl(Allocate|Free|Size|ReAllocate)Heap.
Search
  '%s' is ascii string '%s'
%s:%d
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_globals.cpp
((0)) == ((((uptr)stop - (uptr)start) % sizeof(__asan_global)))
=== ID %d; %p %p
((module_name)) != (0)
((asan_inited)) != (0)
DynInitPoison module: %s
%s Global[%p]: beg=%p size=%zu/%zu name=%s module=%s dyn_init=%zu odr_indicator=%p
  location: name=%s, %d
((global_registration_site_vector)) != (0)
Added
((flags()->report_globals)) != (0)
((AddrIsInMem(g->beg))) != (0)
The following global variable is not properly aligned.
This may happen if another global with the same name
resides in another non-instrumented module.
Or the global comes from a C file built w/o -fno-common.
In either case this is likely an ODR violation bug,
but AddressSanitizer can not provide more details.
((AddrIsAlignedByGranularity(g->beg))) != (0)
((AddrIsAlignedByGranularity(g->size_with_redzone))) != (0)
((size_)) == ((capacity()))
((size)) != (0)
((size)) < (((1ULL << (up + 1))))
((size)) > (((1ULL << up)))
Removed
strlen
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc
((!asan_init_is_running)) != (0)
strndup
strcmp
strncmp
strcasecmp
strncasecmp
strstr
strcasestr
strtok
memmem
strchr
strrchr
strspn
strcspn
strpbrk
memcmp
memchr
frexp
frexpf
frexpl
fread
pread
readv
fwrite
pwrite
writev
fgets
fputs
puts
time
localtime
localtime_r
gmtime
gmtime_r
ctime
ctime_r
asctime
asctime_r
mktime
strptime
vscanf
vsscanf
vfscanf
vprintf
vfprintf
vsnprintf
vsprintf
vasprintf
ioctl
((ioctl_initialized)) != (0)
Decoding unknown ioctl 0x%lx
WARNING: failed decoding unknown ioctl 0x%lx
getpwnam
getpwuid
getgrnam
getgrgid
getpwnam_r
getpwuid_r
getgrnam_r
getgrgid_r
getpwent
getgrent
getitimer
setitimer
posix_spawn
posix_spawnp
wait
waitid
waitpid
wait3
wait4
inet_ntop
inet_pton
inet_aton
pthread_getschedparam
getaddrinfo
getnameinfo
getsockname
gethostbyname
gethostbyaddr
gethostent
gethostbyname2
getsockopt
accept
modf
modff
modfl
recvmsg
sendmsg
getpeername
opendir
readdir
readdir_r
setlocale
getcwd
strtoimax
strtoumax
mbstowcs
mbsrtowcs
mbsnrtowcs
wcstombs
wcsrtombs
wcsnrtombs
wcrtomb
((res)) <= ((sizeof(local_dest)))
wctomb
realpath
confstr
strerror_r
getgroups
poll
sigwait
sigemptyset
sigfillset
sigpending
sigprocmask
pthread_sigmask
statfs
fstatfs
initgroups
ether_ntoa
ether_aton
ether_ntohost
ether_hostton
ether_line
pthread_attr_getdetachstate
pthread_attr_getguardsize
pthread_attr_getscope
pthread_attr_getstacksize
pthread_attr_getstack
pthread_attr_getschedparam
pthread_attr_getschedpolicy
pthread_attr_getinheritsched
pthread_mutexattr_getpshared
pthread_mutexattr_gettype
pthread_mutexattr_getprotocol
pthread_mutexattr_getprioceiling
pthread_rwlockattr_getpshared
pthread_condattr_getpshared
tmpnam
ttyname_r
tempnam
remquo
remquof
remquol
lgamma
lgammaf
lgammal
rand_r
times
getifaddrs
if_indextoname
if_nametoindex
ftime
tsearch
fopen
fdopen
freopen
dlopen
getpass
pthread_setcancelstate
pthread_setcanceltype
recv
recvfrom
send
sendto
stat
pututxline
getloadavg
wcslen
wcsnlen
wcscat
wcsncat
wcsdup
strxfrm
strxfrm_l
wcsxfrm
wcsxfrm_l
readlink
readlinkat
strlcpy
strlcat
getmntinfo
setvbuf
setbuf
setbuffer
sysctl
sysctlbyname
sysctlnametomib
nl_langinfo
getfsent
getfsspec
getfsfile
arc4random_buf
arc4random_addrandom
popen
getusershell
sigaltstack
uname
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_signal_interceptors.inc
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_interceptors.cpp
strcat
strncat
strcpy
strdup
strncpy
strtol
strtoll
atoi
atol
atoll
((!was_called_once)) != (0)
AddressSanitizer: libc interceptors initialized
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors_format.inc
((*p)) == ((0))
%s: WARNING: unexpected format specifier in scanf interceptor: %.*s
jztLq
cCsS[
diouxXn
aAeEfFgG
WARNING: unexpected floating-point arg size in printf interceptor: %zu
%s: WARNING: unexpected format specifier in printf interceptor: %.*s (reported once per process)
WARNING: unexpected arg size in printf interceptor: %zu
'-+ #0
cCsS
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors_ioctl.inc
<DECODED_IOCTL>
((!h.created())) != (0)
((h->type == CommonInterceptorMetadata::CIMT_FILE)) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_addrhashmap.h
((!h->remove_)) != (0)
((atomic_load(&c->addr, memory_order_relaxed))) == ((0))
((addr1)) == ((0))
((addr1)) == ((h->addr_))
((h.exists())) != (0)
%s ignores mlock/mlockall/munlock/munlockall
((*endptr >= nptr)) != (0)
AddrHashMap
Duplicate or unsorted ioctl request id %x >= %x (%s vs %s)
((ioctl_table_size < ioctl_table_max)) != (0)
FIOASYNC
FIOCLEX
FIOGETOWN
FIONBIO
FIONCLEX
FIOSETOWN
SIOCATMARK
SIOCGIFCONF
SIOCGPGRP
SIOCSPGRP
TIOCCONS
TIOCEXCL
TIOCGETD
TIOCGPGRP
TIOCGWINSZ
TIOCMBIC
TIOCMBIS
TIOCMGET
TIOCMSET
TIOCNOTTY
TIOCNXCL
TIOCOUTQ
TIOCPKT
TIOCSCTTY
TIOCSETD
TIOCSPGRP
TIOCSTI
TIOCSWINSZ
((args.arg_retval)) == ((t->get_arg()))
memcpy
memset
memmove
__DATA
__asan_globals
asan_dispatch_call_block_and_release(): context: %p, pthread_self: %p
dispatch_async_f(): context: %p, pthread_self: %p
dispatch_sync_f(): context: %p, pthread_self: %p
dispatch_barrier_async_f(): context: %p, pthread_self: %p
dispatch_after_f: %p
dispatch_group_async_f(): context: %p, pthread_self: %p
v8@?0
v28@?0Q8^v16i24
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_malloc_mac.inc
asan-%s
((memptr)) != (0)
__sanitizer_mz_destroy() called -- ignoring
asan
APPLE_ASAN_INIT_FOR_DLOPEN
((0 && "unimplemented")) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_malloc_mac.cpp
((mi->allocator_ptr)) != ((0))
((last_byte_plus_one)) > ((mi->allocator_ptr))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/../sanitizer_common/sanitizer_allocator_dlsym.h
((internal_allocator()->FromPrimary(ptr))) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_memory_profile.cpp
((total_allocated_user_size_)) != (0)
Live Heap Allocations: %zd bytes in %zd chunks; quarantined: %zd bytes in %zd chunks; %zd other chunks; total chunks: %zd; showing top %zd%% (at most %zd unique contexts)
%zd byte(s) (%zd%%) in %zd allocation(s)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_poisoning.cpp
((AddrIsAlignedByGranularity(addr))) != (0)
((AddrIsInMem(addr))) != (0)
((AddrIsAlignedByGranularity(addr + size))) != (0)
((AddrIsInMem(addr + size - (1ULL << 3)))) != (0)
__asan_%spoison_intra_object_redzone [%p,%p) %zd
((size)) <= ((4096))
((IsAligned(end, (1ULL << 3)))) != (0)
Trying to poison memory region [%p, %p)
((beg.offset)) < ((end.offset))
((value)) == ((end.value))
((beg.chunk)) < ((end.chunk))
Trying to unpoison memory region [%p, %p)
((beg)) < ((end))
((0 && "mem_is_zero returned false, but poisoned byte was not found")) != (0)
AddressSanitizer: loaded array cookie from free-d memory; expect a double-free report
poisoning: %p %zx
unpoisoning: %p %zx
contiguous_container: %p %p %p %p
((storage_end - storage_beg)) <= (((1ULL << 40)))
((b2 - b1)) == ((granularity))
contiguous_container: %p %p %p %p %p %p
((beg)) <= ((mid))
((mid)) <= ((end))
((begin)) <= ((end))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_posix.cpp
((0)) == ((sigaltstack(nullptr, &signal_stack)))
sigalt
default
((!tsd_key_inited)) != (0)
((0)) == ((pthread_key_create(&tsd_key, destructor)))
((tsd_key_inited)) != (0)
((0)) == ((pthread_setspecific(tsd_key, tsd)))
AppendToErrorMessageBuffer
kErrorMessageBufferSize >= error_message_buffer_pos
%s%s%x%x%s%s
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_report.cpp
((frame_descr)) != (0)
mz_realloc(%p) -- attempting to realloc unallocated memory.
This is an unrecoverable problem, exiting now.
[36m
[33m
=================================================================
stack-overflow
signal
null-deref
wild-jump
wild-addr-write
wild-addr-read
wild-addr
((current_error_.kind)) == ((kErrorKindInvalid))
ABORTING
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_errors.h
((0)) != (0)
double-free
((second_free_stack->size)) > ((0))
new-delete-type-mismatch
bad-free
alloc-dealloc-mismatch
bad-malloc_usable_size
bad-__sanitizer_get_allocated_size
calloc-overflow
reallocarray-overflow
pvalloc-overflow
invalid-allocation-alignment
invalid-aligned-alloc-alignment
invalid-posix-memalign-alignment
allocation-size-too-big
rss-limit-exceeded
out-of-memory
negative-size-param
bad-__sanitizer_annotate_contiguous_container
bad-__sanitizer_annotate_double_ended_contiguous_container
odr-violation
malloc_zone_from_ptr(%p) = %p, which is %s
malloc_zone_from_ptr(%p) = %p, which doesn't have a name
malloc_zone_from_ptr(%p) = 0
invalid-pointer-pair
|| `[%p, %p]` || HighMem    ||
|| `[%p, %p]` || HighShadow ||
|| `[%p, %p]` || ShadowGap3 ||
|| `[%p, %p]` || MidMem     ||
|| `[%p, %p]` || ShadowGap2 ||
|| `[%p, %p]` || MidShadow  ||
|| `[%p, %p]` || ShadowGap  ||
|| `[%p, %p]` || LowShadow  ||
|| `[%p, %p]` || LowMem     ||
MemToShadow(shadow): %p %p
 %p %p
redzone=%zu
max_redzone=%zu
quarantine_size_mb=%zuM
thread_local_quarantine_size_kb=%zuK
malloc_context_size=%zu
SHADOW_SCALE: %d
SHADOW_GRANULARITY: %d
SHADOW_OFFSET: 0x%zx
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_rtl.cpp
(((((kMidMemBeg) >> 3) + (__asan_shadow_memory_dynamic_address)) > ((((__asan_shadow_memory_dynamic_address ? __asan_shadow_memory_dynamic_address - 1 : 0)) >> 3) + (__asan_shadow_memory_dynamic_address)) && kMidMemBeg > (((kMidMemEnd) >> 3) + (__asan_shadow_memory_dynamic_address)) && (((((((kHighMemEnd) >> 3) + (__asan_shadow_memory_dynamic_address)) + 1)) >> 3) + (__asan_shadow_memory_dynamic_address)) > kMidMemEnd)) != (0)
WARNING: ASan is ignoring requested __asan_handle_no_return: stack type: %s top: %p; bottom %p; size: %p (%zd)
False positive error reports may follow
For details see https://github.com/google/sanitizers/issues/189
((t)) != (0)
AddressSanitizer
((!asan_init_is_running && "ASan init calls itself!")) != (0)
before init
AddressSanitizer init is being performed for dlopen().
((0)) == ((main_thread->tid()))
AddressSanitizer Init done
after init
(((((((kHighMemEnd) >> 3) + (__asan_shadow_memory_dynamic_address)) + 1) % GetMmapGranularity()))) == ((0))
before dying
AddressSanitizer exit stats:
asan_mapping.h:%zd -- %zd
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_shadow_setup.cpp
((((kMidMemBeg ? (((kMidMemBeg) >> 3) + (__asan_shadow_memory_dynamic_address)) : (((((((kHighMemEnd) >> 3) + (__asan_shadow_memory_dynamic_address)) + 1)) >> 3) + (__asan_shadow_memory_dynamic_address))) - 1))) == (((((((((kHighMemEnd) >> 3) + (__asan_shadow_memory_dynamic_address)) + 1)) >> 3) + (__asan_shadow_memory_dynamic_address)) - 1))
((__asan_shadow_memory_dynamic_address != ((((__asan_shadow_memory_dynamic_address ? __asan_shadow_memory_dynamic_address - 1 : 0)) >> 3) + (__asan_shadow_memory_dynamic_address)))) != (0)
mid shadow
Shadow memory range interleaves with an existing memory mapping. ASan cannot proceed correctly. ABORTING.
ASan shadow was supposed to be located in the [%p-%p] range.
protect_shadow_gap=0: not protecting shadow gap, allocating gap's shadow
|| `[%p, %p]` || ShadowGap's shadow ||
unprotected gap shadow
Stats: %zuM malloced (%zuM for red zones) by %zu calls
Stats: %zuM realloced by %zu calls
Stats: %zuM freed by %zu calls
Stats: %zuM really freed by %zu calls
Stats: %zuM (%zuM-%zuM) mmaped; %zu maps, %zu unmaps
  mallocs by size class: 
Stats: malloc large: %zu
%zu:%zu; 
Stats: StackDepot: %zd ids; %zdM allocated
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_suppressions.cpp
((nullptr)) == ((suppression_ctx))
((suppression_ctx)) != (0)
((frames)) != (0)
Create
T%d TSDDtor
T%d exited
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/asan/asan_thread.cpp
((this)) == ((thread))
((this)) != ((GetCurrentThread()))
ERROR: starting fiber switch while in fiber switch
ERROR: finishing a fiber switch that has not started
((flags()->min_uar_stack_size_log)) <= ((flags()->max_uar_stack_size_log))
((this->stack_size())) == ((0U))
((this->stack_size())) > ((0U))
((AddrIsInMem(stack_bottom_))) != (0)
((AddrIsInMem(stack_top_ - 1))) != (0)
T%d: stack [%p,%p) size 0x%zx; local=%p
((tid())) == ((0))
((AddrIsInStack((uptr)&local))) != (0)
((bottom)) != (0)
((ptr[0] == kCurrentStackFrameMagic)) != (0)
((t->context())) != (0)
SetCurrentThread: %p for thread %p
((0)) == ((AsanTSDGet()))
((t->context())) == ((AsanTSDGet()))
__asan_start_switch_fiber called from unknown thread
__asan_finish_switch_fiber called from unknown thread
SizeClassAllocator
LargeMmapAllocator
FATAL: %s: reallocarray parameters overflow: count * size (%zd * %zd) cannot be represented in type size_t
FATAL: %s: calloc parameters overflow: count * size (%zd * %zd) cannot be represented in type size_t
Allocate
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_allocator.cpp
((allocated_end_ - allocated_current_ >= (sptr)size)) != (0)
HINT: if you don't care about these errors you may set allocator_may_return_null=1
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_allocator_combined.h
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_allocator_local_cache.h
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_common.h
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_allocator_primary32.h
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_list.h
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_allocator_secondary.h
FATAL: %s: internal allocator is out of memory trying to allocate 0x%zx bytes
SanitizerTool
ERROR: Failed to mmap
ERROR: %s: out of memory: failed to %s 0x%zx (%zd) bytes of %s (error code: %d)
ERROR: %s failed to %s 0x%zx (%zd) bytes of %s (error code: %d)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_common.cpp
((0 && "unable to mmap")) != (0)
ERROR: Failed to munmap
ERROR: %s failed to deallocate 0x%zx (%zd) bytes at address %p (error code: %d)
((0 && "unable to unmmap")) != (0)
SUMMARY: %s: %s
((s)) >= ((z))
(total_mmaped >> 20) < common_flags()->mmap_limit_mb
Command: 
Sleeping for %u second(s) %s
deadlock detector
WARNING: too long mutex cycle found
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_deadlock_detector1.cpp
((m->id)) == ((path[0]))
((!dd.isHeld(&lt->dd, m->id))) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_deadlock_detector.h
((available_nodes_.empty())) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_bitvector.h
((idx)) < ((size()))
((idx)) <= ((size()))
((epoch_)) == ((current_epoch))
((node)) >= ((size()))
((current_epoch_)) == ((nodeToEpoch(node)))
((!tmp_bv_.getBit(idx))) != (0)
((path[0])) == ((cur_node))
((it2_.hasNext())) != (0)
((n_recursive_locks)) < (((sizeof(recursive_locks)/sizeof((recursive_locks)[0]))))
((n_all_locks_)) < (((sizeof(all_locks_with_contexts_)/sizeof((all_locks_with_contexts_)[0]))))
((!available_nodes_.getBit(idx))) != (0)
((recycled_nodes_.setBit(idx))) != (0)
%s.%s.%zu
%s.%zu
ERROR: Can't open file: 
 (reason: %d)
ERROR: Path is too long: %c%c%c%c%c%c%c%c...
stderr
stdout
ReadFileToBuffer
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_file.cpp
((read_len)) < ((buff->size()))
((buff->size())) <= ((max_len))
PATH
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_mutex.h
ERROR: Can't create directory: 
auto
DEFAULT
sancov
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_flags.cpp
((base)) != (0)
((out < out_end - 1)) != (0)
include
read more options from the given file
include_if_exists
read more options from the given file (if it exists)
symbolize
If set, use the online symbolizer from common sanitizer runtime to turn virtual addresses to file/line locations.
external_symbolizer_path
Path to external symbolizer. If empty, the tool will search $PATH for the symbolizer.
allow_addr2line
If set, allows online symbolizer to run addr2line binary to symbolize stack traces (addr2line will only be used if llvm-symbolizer binary is unavailable.
strip_path_prefix
Strips this prefix from file paths in error reports.
fast_unwind_on_check
If available, use the fast frame-pointer-based unwinder on internal CHECK failures.
fast_unwind_on_fatal
If available, use the fast frame-pointer-based unwinder on fatal errors.
fast_unwind_on_malloc
If available, use the fast frame-pointer-based unwinder on malloc/free.
handle_ioctl
Intercept and handle ioctl requests.
Max number of stack frames kept for each allocation/deallocation.
log_path
Write logs to "log_path.pid". The special values are "stdout" and "stderr". If unspecified, defaults to "stderr".
log_exe_name
Mention name of executable when reporting error and append executable name to logs (as in "log_path.exe_name.pid").
log_suffix
String to append to log file name, e.g. ".txt".
log_to_syslog
Write all sanitizer output to syslog in addition to other means of logging.
Verbosity level (0 - silent, 1 - a bit of output, 2+ - more output).
strip_env
Whether to remove the sanitizer from DYLD_INSERT_LIBRARIES to avoid passing it to children on Apple platforms. Default is true.
verify_interceptors
Verify that interceptors are working on Apple platforms. Default is true.
detect_leaks
Enable memory leak detection.
leak_check_at_exit
Invoke leak checking in an atexit handler. Has no effect if detect_leaks=false, or if __lsan_do_leak_check() is called before the handler has a chance to run.
If false, the allocator will crash instead of returning 0 on out-of-memory.
print_summary
If false, disable printing error summaries in addition to error reports.
print_module_map
Print the process module map where supported (0 - don't print, 1 - print only once before process exits, 2 - print after each report).
check_printf
Check printf arguments.
handle_segv
Controls custom tool's SIGSEGV handler (0 - do not registers the handler, 1 - register the handler and allow user to set own, 2 - registers the handler and block user from changing it). 
handle_sigbus
Controls custom tool's SIGBUS handler (0 - do not registers the handler, 1 - register the handler and allow user to set own, 2 - registers the handler and block user from changing it). 
handle_abort
Controls custom tool's SIGABRT handler (0 - do not registers the handler, 1 - register the handler and allow user to set own, 2 - registers the handler and block user from changing it). 
handle_sigill
Controls custom tool's SIGILL handler (0 - do not registers the handler, 1 - register the handler and allow user to set own, 2 - registers the handler and block user from changing it). 
handle_sigtrap
Controls custom tool's SIGTRAP handler (0 - do not registers the handler, 1 - register the handler and allow user to set own, 2 - registers the handler and block user from changing it). 
handle_sigfpe
Controls custom tool's SIGFPE handler (0 - do not registers the handler, 1 - register the handler and allow user to set own, 2 - registers the handler and block user from changing it). 
allow_user_segv_handler
Deprecated. True has no effect, use handle_sigbus=1. If false, handle_*=1 will be upgraded to handle_*=2.
use_sigaltstack
If set, uses alternate stack for signal handling.
detect_deadlocks
If set, deadlock detection is enabled.
clear_shadow_mmap_threshold
Large shadow regions are zero-filled using mmap(NORESERVE) instead of memset(). This is the threshold size in bytes.
color
Colorize reports: (always|never|auto).
legacy_pthread_cond
Enables support for dynamic libraries linked with libpthread 2.2.5.
intercept_tls_get_addr
Intercept __tls_get_addr.
Print the flag descriptions.
mmap_limit_mb
Limit the amount of mmap-ed memory (excluding shadow) in Mb; not a user-facing flag, used mosly for testing the tools
hard_rss_limit_mb
Hard RSS limit in Mb. If non-zero, a background thread is spawned at startup which periodically reads RSS and aborts the process if the limit is reached
soft_rss_limit_mb
Soft RSS limit in Mb. If non-zero, a background thread is spawned at startup which periodically reads RSS. If the limit is reached all subsequent malloc/new calls will fail or return NULL (depending on the value of allocator_may_return_null) until the RSS goes below the soft limit. This limit does not affect memory allocations other than malloc/new.
max_allocation_size_mb
If non-zero, malloc/new calls larger than this size will return nullptr (or crash if allocator_may_return_null=false).
heap_profile
Experimental heap profiler, asan-only
Only affects a 64-bit allocator. If set, tries to release unused memory to the OS, but not more often than this interval (in milliseconds). Negative values mean do not attempt to release memory to the OS.
can_use_proc_maps_statm
If false, do not attempt to read /proc/maps/statm. Mostly useful for testing sanitizers.
If set, coverage information will be dumped at program shutdown (if the coverage instrumentation was enabled at compile time).
Target directory for coverage dumps. Defaults to the current directory.
cov_8bit_counters_out
If non-empty, write 8bit counters to this file. 
cov_pcs_out
If non-empty, write the coverage pc table to this file. 
full_address_space
Sanitize complete address space; by default kernel area on 32-bit platforms will not be sanitized
print_suppressions
Print matched suppressions at exit.
disable_coredump
Disable core dumping. By default, disable_coredump=1 on 64-bit to avoid dumping a 16T+ core file. Ignored on OSes that don't dump core by default and for sanitizers that don't reserve lots of virtual memory.
use_madv_dontdump
If set, instructs kernel to not store the (huge) shadow in core file.
symbolize_inline_frames
Print inlined frames in stacktraces. Defaults to true.
demangle
Print demangled symbols.
symbolize_vs_style
Print file locations in Visual Studio style (e.g:  file(10,42): ...
dedup_token_length
If positive, after printing a stack trace also print a short string token based on this number of frames that will simplify deduplication of the reports. Example: 'DEDUP_TOKEN: foo-bar-main'. Default is 0.
stack_trace_format
Format string used to render stack frames. See sanitizer_stacktrace_printer.h for the format description. Use DEFAULT to get default format.
compress_stack_depot
Compress stack depot to save memory.
no_huge_pages_for_shadow
If true, the shadow is not allowed to use huge pages. 
strict_string_checks
If set check that string arguments are properly null-terminated
intercept_strstr
If set, uses custom wrappers for strstr and strcasestr functions to find more errors.
intercept_strspn
If set, uses custom wrappers for strspn and strcspn function to find more errors.
intercept_strtok
If set, uses a custom wrapper for the strtok function to find more errors.
intercept_strpbrk
If set, uses custom wrappers for strpbrk function to find more errors.
intercept_strcmp
If set, uses custom wrappers for strcmp functions to find more errors.
intercept_strlen
If set, uses custom wrappers for strlen and strnlen functions to find more errors.
intercept_strndup
If set, uses custom wrappers for strndup functions to find more errors.
intercept_strchr
If set, uses custom wrappers for strchr, strchrnul, and strrchr functions to find more errors.
intercept_memcmp
If set, uses custom wrappers for memcmp function to find more errors.
strict_memcmp
If true, assume that memcmp(p1, p2, n) always reads n bytes before comparing p1 and p2.
intercept_memmem
If set, uses a wrapper for memmem() to find more errors.
intercept_intrin
If set, uses custom wrappers for memset/memcpy/memmove intrinsics to find more errors.
intercept_stat
If set, uses custom wrappers for *stat functions to find more errors.
intercept_send
If set, uses custom wrappers for send* functions to find more errors.
decorate_proc_maps
If set, decorate sanitizer mappings in /proc/self/maps with user-readable names
exitcode
Override the program exit status if the tool found an error
abort_on_error
If set, the tool calls abort() instead of _exit() after printing the error report.
suppress_equal_pcs
Deduplicate multiple reports for single source location in halt_on_error=false mode (asan only).
print_cmdline
Print command line on crash (asan only).
html_cov_report
Generate html coverage report.
sancov_path
Sancov tool location.
dump_instruction_bytes
If true, dump 16 bytes starting at the instruction that caused SEGV
dump_registers
If true, dump values of CPU registers when SEGV happens. Only available on OS X for now.
detect_write_exec
If true, triggers warning when writable-executable pages requests are being made
test_only_emulate_no_memorymap
TEST ONLY fail to read memory mappings to emulate sanitized "init"
FlagHandlerInclude
exclusive
ERROR: Invalid value for signal handler option: '%s'
ERROR: Invalid value for uptr option: '%s'
0x%zx
Available flags for %s:
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_flag_parser.cpp
((buffer[sizeof(buffer) - 1])) == (('\0'))
 Truncated
- %s (Current Value%s: %s)
%s: ERROR: %s
%s: ERROR: expected '=' in %s
expected '='
unterminated string
Flag parsing failed.
%s: %s
<empty>
Failed to read options from '%s': error %d
((n_flags_)) < ((kMaxFlags))
WARNING: found %d unrecognized flag(s):
    %s
((n_unknown_flags_)) < ((kMaxUnknownFlags))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_libc.cpp
((base)) == ((10))
((size)) <= ((1ULL << (40)))
%s: too many ignored libraries (max: %zu)
%s: called_from_lib suppression '%s' is matched against 2 libraries: '%s' and '%s'
Matched called_from_lib suppression '%s' against library '%s'
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_libignore.cpp
((idx)) < (((sizeof(ignored_code_ranges_)/sizeof((ignored_code_ranges_)[0]))))
%s: library '%s' that was matched against called_from_lib suppression '%s' is unloaded
Adding instrumented range 0x%zx-0x%zx from library '%s'
((idx)) < (((sizeof(instrumented_code_ranges_)/sizeof((instrumented_code_ranges_)[0]))))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_mac.cpp
((false && "internal_mremap is unimplemented on Mac")) != (0)
WARNING: Spawning external symbolizer is not allowed under sandbox.
Checking file existence is not allowed under sandbox.
((stack_top)) != (0)
((stack_bottom)) != (0)
((getrlimit(3, &rl))) == ((0))
((environ)) != (0)
((kMaxPathLength)) <= ((buf_len))
((internal_strlen(vers))) >= ((3))
((*p)) == (('.'))
kern.osrelease
((res)) == ((0))
((len)) < ((sizeof(VersStr)))
Cannot get task info. Error: %d
com.apple.sanitizer
UndefinedBehaviorSanitizer
ThreadSanitizer
FindDynamicShadowStart, space_size = %p
Shadow doesn't fit, largest_gap_found = %p, max_occupied_addr = %p
Unable to find a memory range for dynamic shadow.
space_size = %p, largest_gap_found = %p, max_occupied_addr = %p, new_max_vm = %p
((0 && "cannot place shadow")) != (0)
Unable to find a memory range after restricting VM.
((0 && "cannot place shadow after restricting vm")) != (0)
((IsAligned(shadow_start, alignment))) != (0)
((false && "HWASan aliasing is unimplemented on Mac")) != (0)
Register values:
%s = 0x%016llx  
x[0]
x[1]
x[2]
x[3]
x[4]
x[5]
x[6]
x[7]
x[8]
x[9]
x[10]
x[11]
x[12]
x[13]
x[14]
x[15]
x[16]
x[17]
x[18]
x[19]
x[20]
x[21]
x[22]
x[23]
x[24]
x[25]
x[26]
x[27]
x[28]
   %s = 0x%016lx  
<%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X>
Process module map:
0x%zx-0x%zx %s (%s) %s
End of module map.
SIMULATOR_RUNTIME_VERSION
ERROR: Running in simulator but SIMULATOR_RUNTIME_VERSION env var is not set.
task_set_exc_guard_behavior
dladdr(dlsym(RTLD_DEFAULT, "puts"), &info_puts)
dladdr((void *)&VerifyInterceptorsWorking, &info_runtime)
ERROR: Interceptors are not working. This may be because %s is loaded too late (e.g. via dlopen). Please launch the executable with:
%s=%s
"interceptors not installed" && 0
dladdr((void *)&StripEnv, &info)
new_env
i386
x86_64
x86_64h
armv6
armv7
armv7s
armv7k
arm64
arm64e
arm64_32
loongarch64
riscv64
hexagon
((0 && "Invalid module arch")) != (0)
((thread)) == ((pthread_self()))
file-read-data
process-fork
process-exec*
sandbox_check(%s, %d, %s) failed with errno: %d
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_mutex.cpp
((count)) != ((0))
allocate
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_posix.cpp
((IsPowerOfTwo(size))) != (0)
((end)) < ((map_end))
allocate noreserve
((fd != ((fd_t)-1))) != (0)
((fsize)) != (((uptr)-1))
((fsize)) > ((0))
could not map writable file (%d, %lld, %zu): %zd, errno: %d
((0)) != ((segment.end))
ABRT
SEGV
TRAP
UNKNOWN SIGNAL
/proc/
memory at address 0x%zx
((start1 <= end1)) != (0)
((start2 <= end2)) != (0)
Supported Printf formats: %([0-9]*)?(z|l|ll)?{d,u,x,X}; %p; %[-]([0-9]*)?(\.\*)?s; %c
Provided format: 
format
buff_length > 0
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_printf.cpp
((!((precision >= 0 || left_justified) && *cur != 's'))) != (0)
!have_flags
!have_length
((!have_width || left_justified)) != (0)
false
buff <= buff_end
((buffer_[length()])) == (('\0'))
base == 10 || base == 16
base == 10 || !negative
absolute_value || !negative
minimal_num_length < kMaxLen
AppendNumber buffer overflow
<null>
==%s
==%d==
Failed to lookup the dyld image header in the shared cache on macOS 13+ (or no shared cache in use).  Falling back to lookup via vm_region_recurse_64().
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_procmaps_mac.cpp
((dyld_hdr)) != (0)
((0 && "Invalid subtype of x86_64")) != (0)
((0 && "Invalid subtype of ARM")) != (0)
((0 && "CPU_SUBTYPE_ARM64_32_ALL cpu subtype not supported")) != (0)
((0 && "Invalid CPU type")) != (0)
((cacheStart && cacheLength)) != (0)
((info->version)) >= ((2))
v16@?0r^{dyld_shared_cache_dylib_text_info=QQQ[16C]*Q}8
libclang_rt.
((size_)) > ((0))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_range.cpp
((r.begin)) <= ((r.end))
Failed to get threads for task (errno %d).
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_mac.cpp
((index)) < ((threads_.size()))
Error - unable to get thread ident for a thread
Error - unable to get registers for a thread
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_suppressions.cpp
((suppression_types_num_)) <= ((kMaxSuppressionTypes))
%s: reading suppressions file at %s
%s: failed to read suppressions file '%s'
((can_parse_)) != (0)
%s: parsing '%s'
%s: failed to parse suppressions
%s: parsed suppression entry '%s'
((i)) < ((suppressions_.size()))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.cpp
((0 && "dtls is unsupported on this platform!")) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_thread_arg_retval.cpp
((!t->second.detached)) != (0)
((ptrs)) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_dense_map.h
((!KeyInfoT::isEqual(Val, EmptyKey))) != (0)
((!KeyInfoT::isEqual(Val, TombstoneKey))) != (0)
((TheBucket)) != (0)
((Buckets)) != (0)
((Size)) == ((sizeof(BucketT) * NumBuckets))
((Size * 2)) > ((GetPageSizeCached()))
DenseMap
(((getNumBuckets() & (getNumBuckets() - 1)))) == ((0))
((!FoundVal)) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_thread_registry.cpp
((status == ThreadStatusRunning || status == ThreadStatusFinished)) != (0)
((false)) == ((detached))
((ThreadStatusFinished)) == ((status))
%s: Thread limit (%u threads) exceeded. Dying.
((tctx)) != ((0))
((tid)) != ((kInvalidTid))
((tid)) < ((max_threads_))
((tctx->status)) == ((ThreadStatusInvalid))
((alive_threads_)) == ((max_alive_threads_))
((live_.try_emplace(user_id, tid).second)) != (0)
((0 ? ThreadStatusCreated : ThreadStatusRunning)) == ((tctx->status))
%s: Detach of non-existent thread
%s: Join of non-existent thread
((alive_threads_)) > ((0))
((running_threads_)) > ((0))
((tctx->status)) == ((ThreadStatusCreated))
((ThreadStatusCreated)) == ((tctx->status))
((tctx->status)) == ((ThreadStatusDead))
((tctx->user_id)) == ((user_id))
((tctx->status)) != ((ThreadStatusInvalid))
((tctx->status)) != ((ThreadStatusDead))
((tctx->user_id)) == ((0))
((live_.try_emplace(user_id, tctx->tid).second)) != (0)
((live_.erase(tctx->user_id))) != (0)
%s: CHECK failed: %s:%d "%s" (0x%zx, 0x%zx) (tid=%u)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_common_libcdep.cpp
((IsPowerOfTwo(align))) != (0)
(((beg % GetMmapGranularity()))) == ((0))
((((end + 1) % GetMmapGranularity()))) == ((0))
ReserveShadowMemoryRange failed while trying to map 0x%zx bytes. Perhaps you're using ulimit -v
ERROR: Failed to protect the shadow gap. %s cannot proceed correctly. ABORTING.
high gap
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_mac_libcdep.cpp
((res != ((void *)-1))) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_posix_libcdep.cpp
((!StackSizeIsUnlimited())) != (0)
((AddressSpaceIsUnlimited())) != (0)
((0)) == ((sigaltstack(nullptr, &oldstack)))
SetAlternateSignalStack
((0)) == ((sigaltstack(&altstack, nullptr)))
((0)) == ((sigaltstack(&altstack, &oldstack)))
((size)) < ((page_size * 10))
((14)) == ((write_errno))
((size)) <= ((size_))
((addr + size)) == ((reinterpret_cast<uptr>(base_) + size_))
Sanitizer: increasing stacksize %zu->%zu
Sanitizer: pre-allocated stack size is insufficient: %zu < %zu
Sanitizer: pthread_create is likely to fail.
WARNING: failed to fork (errno %d)
Waiting on the process failed (errno %d).
ERROR: %s getrlimit() failed %d
ERROR: %s setrlimit() failed %d
((0)) == ((getrlimit(res, &rlim)))
((0)) == ((internal_sigaction(signum, &sigact, nullptr)))
Installed the sigaction for signal %d
ERROR: %s failed to allocate 0x%zx (%zd) bytes at address %zx (errno: %d)
SANCOV_OPTIONS
If set, coverage information will be symbolized by sancov tool after dumping.
Print flags help.
ERROR: unknown pc 0x%zx (may happen if dlclose is used)
SanitizerCoverage: %s: %zd PCs written
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_coverage_libcdep_new.cpp
((name)) != (0)
%s/%s.%zd.%s
SanitizerCoverage: failed to open %s for writing (reason: %d)
((!*start)) != (0)
cov_8bit_counters_out: written %zd bytes to %s
cov_pcs_out: written %zd bytes to %s
ERROR: %s: calloc parameters overflow: count * size (%zd * %zd) cannot be represented in type size_t
ERROR: %s: reallocarray parameters overflow: count * size (%zd * %zd) cannot be represented in type size_t
ERROR: %s: pvalloc parameters overflow: size 0x%zx rounded up to system page size 0x%zx cannot be represented in type size_t
ERROR: %s: invalid allocation alignment: %zd, alignment must be a power of two
ERROR: %s: invalid alignment requested in aligned_alloc: %zd, alignment must be a power of two and the requested size 0x%zx must be a multiple of alignment
ERROR: %s: invalid alignment requested in posix_memalign: %zd, alignment must be a power of two and a multiple of sizeof(void*) == %zd
ERROR: %s: requested allocation size 0x%zx exceeds maximum supported size of 0x%zx
ERROR: %s: allocator exceeded the RSS limit
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_stackdepotbase.h
((s & kUnlockMask)) == ((s))
((id & (((u32)-1) >> kReservedBits))) == ((id))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_stack_store.cpp
((block_idx)) < (((sizeof(blocks_)/sizeof((blocks_)[0]))))
((count)) <= ((kBlockSizeFrames))
StackStore
((nullptr)) != ((ptr))
((header->size)) <= ((kBlockSizeBytes))
((header->size)) >= ((sizeof(PackedHeader)))
StackStoreUnpack
((0 && "Unexpected type")) != (0)
((kBlockSizeFrames)) == ((unpacked_end - unpacked))
StackStorePack
Packed block of %zu KiB to %zu KiB
Undo and keep block unpacked
((trace.tag)) == ((static_cast<uptr>(tag)))
((to)) == ((to_end))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_lzw.h
((prefix_to_code.size())) == ((dict_len1.size()))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_stackdepot.cpp
((nullptr)) == ((thread_))
%s: StackDepot compression thread started
%s: StackDepot compression thread stopped
%s: StackDepot released %zu KiB out of %zu KiB in %llu ms
((nullptr)) != ((thread_))
Stack for id %u:
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace.cpp
((size)) <= ((kStackTraceMax))
((max_depth)) >= ((2))
((count)) < ((size))
((stack_top)) > ((stack_bottom))
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_libcdep.cpp
((output)) != (0)
    <empty stack>
((printer.ProcessAddressFrames(pc))) != (0)
DEDUP_TOKEN: %s
((out_buf)) != (0)
((request_fast_unwind)) == ((WillUseFastUnwind(request_fast_unwind)))
<can't symbolize>
wrap_
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_printer.cpp
((!info || address == info->address)) != (0)
in %s
+0x%zx
(<unknown module>)
(%p)
Unsupported specifier in stack frame format: %c (%p)!
%s(%d
+0x%zx)
(BuildId: 
%02x
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer.cpp
((start_hook_ == 0 && end_hook_ == 0)) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_libcdep.cpp
((symbolizer_)) != (0)
modules_.size() > 0
CODE
DATA
FRAME
%s "%s" 0x%zx
%s "%s:%s" 0x%zx
WARNING: Command buffer too small
((path_)) != (0)
((path_[0])) != (('\0'))
WARNING: Symbolizer was blocked from starting itself!
WARNING: Failed to use and restart external symbolizer!
WARNING: Can't read from symbolizer at fd %d
WARNING: Can't write to symbolizer at fd %d
((i)) < ((modules_.size()))
--default-arch=arm64
--demangle
--no-demangle
--inlines
--no-inlines
0x%zx
WARNING: atos failed to symbolize address "0x%zx"
 (in 
WARNING: invalid path to external symbolizer!
Launching Symbolizer process: 
WARNING: failed to spawn external symbolizer (errno: %d)
WARNING: Can't create a socket pair to start external symbolizer (errno: %d)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_posix_libcdep.cpp
((pid)) > ((0))
WARNING: external symbolizer didn't start up correctly!
((infd)) != (0)
((outfd)) != (0)
Symbolizer is disabled.
Cannot use internal symbolizer: out of memory
Using libbacktrace symbolizer.
Using dladdr symbolizer.
External symbolizer is explicitly disabled.
Using llvm-symbolizer at user-specified path: %s
atos
Using atos at user-specified path: %s
addr2line
Using addr2line at user-specified path: %s
ERROR: External symbolizer path is set to '%s' which isn't a known symbolizer. Please set the path to the llvm-symbolizer binary or other known tool.
Using atos found at: %s
Using llvm-symbolizer found at: %s
Using addr2line found at: %s
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_internal.h
((0)) == ((internal_strcmp(module_name, addr2line->module_name())))
0x%zx
0x%zx
swift_demangle
((garbage)) != (0)
%L %F
always
WARNING: %s: writable-executable page usage
w-and-x-usage
ERROR: %s: %s on address %p (pc %p bp %p sp %p T%d)
ERROR: %s: %s on unknown address (pc %p bp %p sp %p T%d)
ERROR: %s: %s on unknown address %p (pc %p bp %p sp %p T%d)
Hint: pc points to the zero page.
UNKNOWN
The signal is caused by a %s memory access.
Hint: this fault was caused by a dereference of a high value address (see register values below).  Disassemble the provided pc to learn which register was used.
Hint: address points to the zero page.
%s can not provide additional info.
First 16 instruction bytes at pc: 
unaccessible
%s%s%x%x%s 
Unmatched call to __lsan_enable().
report_objects
Print addresses of leaked objects after main leak report.
resolution
Aggregate two objects into one leak if this many stack frames match. If zero, the entire stack trace must match.
max_leaks
The number of leaks reported.
use_globals
Root set: include global variables (.data and .bss)
use_stacks
Root set: include thread stacks
use_registers
Root set: include thread registers
use_tls
Root set: include TLS and thread-specific storage
use_root_regions
Root set: include regions added via __lsan_register_root_region().
use_ld_allocations
Root set: mark as reachable all allocations made from dynamic linker. This was the old way to handle dynamic TLS, and will be removed soon. Do not use this flag.
use_unaligned
Consider unaligned pointers valid.
use_poisoned
Consider pointers found in poisoned memory to be valid.
log_pointers
Debug logging
log_threads
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/lsan/lsan_common.cpp
<unknown module>
((tag == kReachable || tag == kIndirectlyLeaked)) != (0)
Scanning %s range %p-%p.
%p is poisoned: ignoring %p pointing into chunk %p-%p of size %zu.
%p: found %p pointing into chunk %p-%p of size %zu.
((allocator_begin)) <= ((allocator_end))
((allocator_end)) <= ((end))
GLOBAL
FAKE STACK
Root region intersects with mapped region at %p-%p
ROOT
-----------------------------------------------------
Suppressions used:
  count      bytes template
%7zu %10zu %s
((tag == kDirectlyLeaked || tag == kIndirectlyLeaked)) != (0)
((leaks_.size() <= kMaxLeaksConsidered)) != (0)
Too many leaks! Only the first %zu leaks encountered will be reported.
The %zu top leak(s):
Omitting %zu more leak(s).
%s leak of %zu byte(s) in %zu object(s) allocated from:
Direct
Indirect
((leaks_[index].stack_trace_id)) != (0)
Objects leaked above:
%p (%zu bytes)
%zu byte(s) leaked in %zu allocation(s).
__lsan_ignore_object(): no heap object found at %p
__lsan_ignore_object(): heap object at %p is already being ignored
__lsan_ignore_object(): ignoring heap object at %p
Registered root region at %p of size %zu
((b)) < ((e))
Unregistered root region at %p of size %zu
__lsan_unregister_root_region(): region at %p of size %zu has not been registered.
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/lsan/../sanitizer_common/sanitizer_common.h
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/lsan/../sanitizer_common/sanitizer_mutex.h
LeakSanitizer is disabled
LeakSanitizer: checking for leaks
LeakSanitizer has encountered a fatal error.
HINT: For debugging, try setting environment variable LSAN_OPTIONS=verbosity=1:log_threads=1
HINT: LeakSanitizer does not work under ptrace (strace, gdb, etc)
WARNING: LeakSanitizer gave up on indirect leaks suppression.
Rerun with %zu suppressed stacks.
((param)) != (0)
((!param->success)) != (0)
Running thread %zu was not suspended. False leaks are possible.
Processing platform-specific allocations.
Scanning leaked chunks.
((arg)) != (0)
Suppressed: chunk %p-%p of size %zu.
Ignored: chunk %p-%p of size %zu.
Processing thread %llu.
Thread %llu not found in registry.
Unable to get registers from thread %llu.
REGISTERS
Stack at %p-%p (SP = %p).
WARNING: stack pointer not in stack range.
Skipped %d guard page(s) to obtain stack %p-%p.
STACK
TLS at %p-%p.
Thread %llu has DTLS under destruction.
DTLS %d at %p-%p.
DTLS
Treating pointer %p from ThreadContext as reachable
HEAP
=================================================================
ERROR: LeakSanitizer: detected memory leaks
((!comp(v[i], v[last]))) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/lsan/../sanitizer_common/sanitizer_dense_map.h
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/lsan/lsan_common_mac.cpp
((internal_strnlen(name, kMaxSegName + 1) <= kMaxSegName)) != (0)
((pthread_key_create(&key, restore_tid_data))) == ((0))
__cfstring
__la_symbol_ptr
__mod_init_func
__mod_term_func
__nl_symbol_ptr
__objc_classlist
__objc_classrefs
__objc_imageinfo
__objc_nlclslist
__objc_protolist
__objc_selrefs
__objc_superrefs
<unknown>
%s runtime error: %s%s
%s note: %s
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/ubsan/ubsan_diag.cpp
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/ubsan/ubsan_diag.h
((NumArgs != MaxArgs)) != (0)
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/ubsan/../sanitizer_common/sanitizer_common.h
'%s'
%lld
%llu
0x%08x%08x%08x%08x
undefined-behavior
null-pointer-use
nullptr-with-offset
nullptr-with-nonzero-offset
nullptr-after-nonzero-offset
pointer-overflow
misaligned-pointer-use
alignment-assumption
insufficient-object-size
signed-integer-overflow
unsigned-integer-overflow
integer-divide-by-zero
float-divide-by-zero
invalid-builtin-use
invalid-objc-cast
implicit-unsigned-integer-truncation
implicit-signed-integer-truncation
implicit-integer-sign-change
implicit-signed-integer-truncation-or-sign-change
invalid-shift-base
invalid-shift-exponent
out-of-bounds-index
unreachable-call
missing-return
non-positive-vla-index
float-cast-overflow
invalid-bool-load
invalid-enum-load
function-type-mismatch
invalid-null-return
invalid-null-argument
dynamic-type-mismatch
cfi-bad-type
((0 && "unknown ErrorType!")) != (0)
[30m
<memory cannot be printed>
%s%02x
((isMemoryLocation())) != (0)
undefined
null
nullability-assign
alignment
object-size
implicit-signed-integer-truncation,implicit-integer-sign-change
shift-base
shift-exponent
bounds
unreachable
return
vla-bound
bool
enum
function
returns-nonnull-attribute
nullability-return
nonnull-attribute
nullability-arg
vptr
Crash the program after printing the first error report
print_stacktrace
Include full stacktrace into an error report
report_error_type
Print specific error type instead of 'undefined-behavior' in summary.
silence_unsigned_overflow
Do not print non-fatal error reports for unsigned integer overflow. Used to provide fuzzing signal without blowing up logs.
UBSAN_SYMBOLIZER_PATH
load of
store to
reference binding to
member access within
member call on
constructor call on
downcast of
upcast of
cast to virtual base of
_Nonnull binding to
dynamic operation on
%0 null pointer of type %1
%0 misaligned address %1 for type %3, which requires %2 byte alignment
%0 address %1 with insufficient space for an object of type %2
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/ubsan/ubsan_handlers.cpp
((0 && "unexpected error type!")) != (0)
pointer points here
((CallerPC)) != (0)
assumption of %0 byte alignment for pointer of type %1 failed
assumption of %0 byte alignment (with offset of %1 byte) for pointer of type %2 failed
alignment assumption was specified here
%0address is %1 aligned, misalignment offset is %2 bytes
offset 
negation of %0 cannot be represented in type %1; cast to an unsigned type to negate this value to itself
negation of %0 cannot be represented in type %1
division of %0 by -1 cannot be represented in type %1
division by zero
shift exponent %0 is negative
shift exponent %0 is too large for %1-bit type %2
left shift of negative value %0
left shift of %0 by %1 places cannot be represented in type %2
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/ubsan/ubsan_value.h
((isIntegerTy())) != (0)
index %0 out of bounds for type %1
execution reached an unreachable program point
execution reached the end of a value-returning function without returning a value
variable length array bound evaluates to non-positive value %0
%0 is outside the range of representable values of type %2
'bool'
'BOOL'
load of value %0, which is not a valid value for type %1
implicit conversion from type %0 of value %1 (%2-bit, %3signed) to type %4 changed the value to %5 (%6-bit, %7signed)
passing zero to %0, which is not a valid argument
ctz()
clz()
<unknown type>
invalid ObjC cast, object is a '%0', but expected a %1
((0 && "source location pointer is null!")) != (0)
null pointer returned from function declared to never return null
%0 specified here
returns_nonnull attribute
_Nonnull return type annotation
null pointer passed as argument %0, which is declared to never be null
nonnull attribute
_Nonnull type annotation
applying zero offset to null pointer
applying non-zero offset %0 to null pointer
applying non-zero offset to non-null pointer %0 produced null pointer
addition of unsigned offset to %0 overflowed to %1
subtraction of unsigned offset from %0 overflowed to %1
pointer index expression with base %0 overflowed to %1
non-virtual pointer to member function call
indirect function call
control flow integrity check for type %0 failed during %1
(unknown)
%0 defined here
check failed in %0, destination function located in %1
call to function %0 through pointer to incorrect function type %1
%0 integer overflow: %1 %2 %3 cannot be represented in type %4
signed
unsigned
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/ubsan/ubsan_monitor.cpp
((0 && "Invalid arguments passed to __ubsan_get_current_report_data")) != (0)
/usr/lib/libobjc.A.dylib
object_getClassName
/AppleInternal/Library/BuildRoots/8be405be-2a28-11ef-ac0e-e2437461156c/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/compiler-rt/lib/ubsan/ubsan_value.cpp
((getType().isSignedIntegerTy())) != (0)
((0 && "unexpected bit width")) != (0)
((getType().isUnsignedIntegerTy())) != (0)
((Val >= 0)) != (0)
((getType().isFloatTy())) != (0)
((0 && "unexpected floating point bit width")) != (0)
virtual call
non-virtual call
base-to-derived cast
cast to unrelated type
virtual pointer to member function call
control flow integrity check for type %0 failed during %1 (vtable address %2)
invalid vtable
vtable is of type %0
check failed in %0, vtable located in %1
%0 address %1 which does not point to an object of type %2
object has a possibly invalid vptr: abs(offset to top) too big
possibly invalid vptr
object has invalid vptr
invalid vptr
object is of type %0
vptr for %0
object is base class subobject at offset %0 within object of type %1
vptr for %2 base class of %1
Address Sanitizer reported a failure.
Undefined Behavior Sanitizer reported a failure.
Thread Sanitizer reported a failure.
Sanitizer tool reported a failure.
Consult syslog for more information.
@2i 
@i 
