SaySsG
SJSg
SaySSG
_pSg
_pSg
ySay
ySay
ySSG
SgGG
yAAy
SgGGADG
ySay
SgSg
SgGGAE_G
Sg_G
SgG_G
SaySJG
ySay
_Sbt
Sg_ABt
$s13TestingMacros21RefinedConditionMacroP
$s13TestingMacros14ConditionMacroP
4Base
$s13TestingMacros22ExitTestConditionMacroP
SiSg
ySnySiGG
SSGGG
SbSg
Iegnnr_
ySay
ySay
Si6offset_
7elementt
ySsG
_pSg
ySay
ySJG
7oldNode_AA03newB0t
_Sb15isParentheticaltSg
_Sb15isParentheticalt
Iegnr_
ySay
_pSg
Si6offset_
7elementt
ySay
SgSg
5lower_AA5uppert
_pSg
.__documentationBlock(
.__documentationLine(
$test_container__suite__
@available(*, deprecated, message: "This type is an implementation detail of the testing library. Do not use it directly.")
@frozen enum 
: Testing.__TestContainer {
  static var __tests: [Testing.Test] {
    get async {[
      .__type(
        
      )
    ]}
.__fromSyntaxNode(
.__fromStringLiteral(
.__fromNegation(
Testing.SourceLocation()
Testing.SourceLocation(fileID: 
WithCompletionHandler
TestingMacros/AvailabilityGuards.swift
Fatal error
Unsupported keyword 
_createAvailabilityTraitExpr(from:when:in:)
.__unavailable(message: 
, sourceLocation: 
  if #unavailable(
    return true
  return false
.__available("Swift", obsoleted: 
  #if swift(<
  return true
  #else
  return false
  #endif
  if #available(
, *) {
    return true
  return false
.__available("Swift", introduced: 
  #if swift(>=
TestingMacros/ConditionMacro.swift
Could not find the exit condition for this exit test. Please file a bug report at https://github.com/apple/swift-testing/issues/new
Could not find the body argument to this exit test. Please file a bug report at https://github.com/apple/swift-testing/issues/new
$exit_test_body__
: Testing.__ExitTestContainer {
  static var __sourceLocation: Testing.SourceLocation {
    
  static var __body: @Sendable () async -> Void {
    
  static var __expectedExitCondition: Testing.ExitCondition {
    
_macro
_context
TestingMacros._NestedConditionFinder
init(viewMode:)
__checkClosureCall
get { Swift.fatalError("Unreachable") }
get {
  Testing.Tag.__fromStaticMember(of: 
return [
  .__function(
    named: 
    xcTestCompatibleSelector: 
    parameters: 
    testFunction: 
$test_container__function__
: Testing.__TestContainer {
  static var __tests: [Testing.Test] {
    get async {
      
@available(*, deprecated, message: "This property is an implementation detail of the testing library. Do not use it directly.")
private 
 nonisolated func 
() async -> [Testing.Test] {
    .__function(
      named: 
      xcTestCompatibleSelector: 
      testFunction: {}
    )
Testing.__xcTestCompatibleSelector(
@available(*, deprecated, message: "This function is an implementation detail of the testing library. Do not use it directly.")
@Sendable private 
 async throws -> Void {
try await Testing.__ifMainActorIsolationEnforced { 
, Testing.__requiringTry, Testing.__requiringAwait).0
if try await Testing.__invokeXCTestCaseMethod(
, onInstanceOf: 
.self, sourceLocation: 
try await MainActor.run { try (
, Testing.__requiringTry).0 }
, Testing.__requiringTry).0 }()
The result of this 
 will be discarded during testing
org.swift.testing
enumeration case
 cannot be applied to a generic 
 cannot be applied to 
an extension to type
a generic extension to type
 will not record an issue on failure inside exit test 
 arguments when used with '
 must specify an argument when used with '
 cannot specify arguments when used with '
' because it does not take any
" is invalid and cannot be used with trait '
/AppleInternal/Library/BuildRoots/bc617ecb-1f3f-11ef-96ec-a2cee5656455/Library/Caches/com.apple.xbs/Sources/Citrine_host/Sources/TestingMacros/Support/DiagnosticMessage.swift
 cannot be applied to a function with a parameter marked '
 cannot be applied to non-final class '
 cannot be applied to this 
 because it has been marked '
Change type to 'Tag'
Remove attribute 
 cannot be applied to an instance property
 except in an extension to 'Tag'
extension Tag {
 cannot be applied to a global variable
Declare in an extension to 'Tag'
To unwrap an optional value, add 'as Bool?'
To check if a value is true, add '?? false'
' will be evaluated before 
 is invoked; use 'as?' instead of 'as!' to silence this warning
 here; use 'Bool(
)' to silence this warning
 cannot be applied to a subclass of 'XCTestCase'
 has no effect when applied to an extension
__checkBinaryOperation
.__fromBinaryOperation(
__checkInoutFunctionCall
__checkFunctionCall
.__fromFunctionCall(
__checkPropertyAccess
.__fromPropertyAccess(
context
TestingMacros._SelfRemover
_unavailableFromAsync
TestingMacros/DeclGroupSyntaxAdditions.swift
Unexpected DeclGroupSyntax type 
. Please file a bug report at https://github.com/apple/swift-testing/issues/new
private static let 
Testing.Tag.List.tags
' cannot be used with attribute 
; pass a member of 'Tag' or a string literal instead
TestingMacros
SuiteDeclarationMacro
TestingMacros
Availability
TestingMacros
ConditionMacro
ExpectMacro
RequireMacro
RefinedConditionMacro
Base
AmbiguousRequireMacro
_NestedConditionFinder
ExitTestConditionMacro
ExitTestExpectMacro
ExitTestRequireMacro
TestingMacros
TagMacro
TestingMacros
TestDeclarationMacro
TestingMacros
DiagnosticMessage
TestingMacros
ComponentValues
TestingMacros
Condition
TestingMacros
_SelfRemover
AttributeInfo
TestingMacros
Argument
attribute
platformName
version
message
Base
_macro
_context
syntax
message
diagnosticID
severity
fixIts
major
minor
patch
expandedFunctionName
arguments
expression
context
attribute
displayName
traits
otherArguments
sourceLocation
label
expression
 n;^
Qkkbal
i]Wb
9a&g
MGiI
wn>Jj
#.zf
+o*7
Testing
SaySsG
SJSg
SaySSG
_pSg
_pSg
ySay
ySay
ySSG
SgGG
yAAy
SgGGADG
ySay
SgSg
SgGGAE_G
Sg_G
SgG_G
SaySJG
ySay
_Sbt
Sg_ABt
$s13TestingMacros21RefinedConditionMacroP
$s13TestingMacros14ConditionMacroP
4Base
$s13TestingMacros22ExitTestConditionMacroP
SiSg
ySnySiGG
SSGGG
SbSg
Iegnnr_
ySay
ySay
Si6offset_
7elementt
ySsG
_pSg
ySay
ySJG
7oldNode_AA03newB0t
_Sb15isParentheticaltSg
_Sb15isParentheticalt
Iegnr_
ySay
_pSg
Si6offset_
7elementt
ySay
SgSg
5lower_AA5uppert
_pSg
.__documentationBlock(
.__documentationLine(
$test_container__suite__
@available(*, deprecated, message: "This type is an implementation detail of the testing library. Do not use it directly.")
@frozen enum 
: Testing.__TestContainer {
  static var __tests: [Testing.Test] {
    get async {[
      .__type(
        
      )
    ]}
.__fromSyntaxNode(
.__fromStringLiteral(
.__fromNegation(
Testing.SourceLocation()
Testing.SourceLocation(fileID: 
WithCompletionHandler
TestingMacros/AvailabilityGuards.swift
Fatal error
Unsupported keyword 
_createAvailabilityTraitExpr(from:when:in:)
.__unavailable(message: 
, sourceLocation: 
  if #unavailable(
    return true
  return false
.__available("Swift", obsoleted: 
  #if swift(<
  return true
  #else
  return false
  #endif
  if #available(
, *) {
    return true
  return false
.__available("Swift", introduced: 
  #if swift(>=
TestingMacros/ConditionMacro.swift
Could not find the exit condition for this exit test. Please file a bug report at https://github.com/apple/swift-testing/issues/new
Could not find the body argument to this exit test. Please file a bug report at https://github.com/apple/swift-testing/issues/new
$exit_test_body__
: Testing.__ExitTestContainer {
  static var __sourceLocation: Testing.SourceLocation {
    
  static var __body: @Sendable () async -> Void {
    
  static var __expectedExitCondition: Testing.ExitCondition {
    
_macro
_context
TestingMacros._NestedConditionFinder
init(viewMode:)
__checkClosureCall
get { Swift.fatalError("Unreachable") }
get {
  Testing.Tag.__fromStaticMember(of: 
return [
  .__function(
    named: 
    xcTestCompatibleSelector: 
    parameters: 
    testFunction: 
$test_container__function__
: Testing.__TestContainer {
  static var __tests: [Testing.Test] {
    get async {
      
@available(*, deprecated, message: "This property is an implementation detail of the testing library. Do not use it directly.")
private 
 nonisolated func 
() async -> [Testing.Test] {
    .__function(
      named: 
      xcTestCompatibleSelector: 
      testFunction: {}
    )
Testing.__xcTestCompatibleSelector(
@available(*, deprecated, message: "This function is an implementation detail of the testing library. Do not use it directly.")
@Sendable private 
 async throws -> Void {
try await Testing.__ifMainActorIsolationEnforced { 
, Testing.__requiringTry, Testing.__requiringAwait).0
if try await Testing.__invokeXCTestCaseMethod(
, onInstanceOf: 
.self, sourceLocation: 
try await MainActor.run { try (
, Testing.__requiringTry).0 }
, Testing.__requiringTry).0 }()
The result of this 
 will be discarded during testing
org.swift.testing
enumeration case
 cannot be applied to a generic 
 cannot be applied to 
an extension to type
a generic extension to type
 will not record an issue on failure inside exit test 
 arguments when used with '
 must specify an argument when used with '
 cannot specify arguments when used with '
' because it does not take any
" is invalid and cannot be used with trait '
/AppleInternal/Library/BuildRoots/bc617ecb-1f3f-11ef-96ec-a2cee5656455/Library/Caches/com.apple.xbs/Sources/Citrine_host/Sources/TestingMacros/Support/DiagnosticMessage.swift
 cannot be applied to a function with a parameter marked '
 cannot be applied to non-final class '
 cannot be applied to this 
 because it has been marked '
Change type to 'Tag'
Remove attribute 
 cannot be applied to an instance property
 except in an extension to 'Tag'
extension Tag {
 cannot be applied to a global variable
Declare in an extension to 'Tag'
To unwrap an optional value, add 'as Bool?'
To check if a value is true, add '?? false'
' will be evaluated before 
 is invoked; use 'as?' instead of 'as!' to silence this warning
 here; use 'Bool(
)' to silence this warning
 cannot be applied to a subclass of 'XCTestCase'
 has no effect when applied to an extension
__checkBinaryOperation
.__fromBinaryOperation(
__checkInoutFunctionCall
__checkFunctionCall
.__fromFunctionCall(
__checkPropertyAccess
.__fromPropertyAccess(
context
TestingMacros._SelfRemover
_unavailableFromAsync
TestingMacros/DeclGroupSyntaxAdditions.swift
Unexpected DeclGroupSyntax type 
. Please file a bug report at https://github.com/apple/swift-testing/issues/new
private static let 
Testing.Tag.List.tags
' cannot be used with attribute 
; pass a member of 'Tag' or a string literal instead
TestingMacros
SuiteDeclarationMacro
TestingMacros
Availability
TestingMacros
ConditionMacro
ExpectMacro
RequireMacro
RefinedConditionMacro
Base
AmbiguousRequireMacro
_NestedConditionFinder
ExitTestConditionMacro
ExitTestExpectMacro
ExitTestRequireMacro
TestingMacros
TagMacro
TestingMacros
TestDeclarationMacro
TestingMacros
DiagnosticMessage
TestingMacros
ComponentValues
TestingMacros
Condition
TestingMacros
_SelfRemover
AttributeInfo
TestingMacros
Argument
attribute
platformName
version
message
Base
_macro
_context
syntax
message
diagnosticID
severity
fixIts
major
minor
patch
expandedFunctionName
arguments
expression
context
attribute
displayName
traits
otherArguments
sourceLocation
label
expression
 n;^
Qkkbal
i]Wb
9a&g
MGiI
wn>Jj
#.zf
+o*7
Testing
