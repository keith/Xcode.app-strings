_pSg
ySay
ySay
ySSG
SaySSG
SgGG
yAAy
SgGGADG
ySay
SgSg
SgGGAE_G
Sg_G
SgG_G
SaySJG
_pSg
Sg_ABt
ySay
SgSg
5lower_AA5uppert
_pSg
ySay
_Sbt
SaySsG
SJSg
_Sb15isParentheticaltSg
_Sb15isParentheticalt
Iegnr_
ySay
_pSg
Si6offset_
7elementt
ySJG
7oldNode_AA03newB0t
ySsG
ySay
_pSg
$s13TestingMacros21RefinedConditionMacroP
$s13TestingMacros14ConditionMacroP
4Base
$s13TestingMacros22ExitTestConditionMacroP
SiSg
ySnySiGG
SSGGG
SbSg
Iegnnr_
ySay
ySay
Si6offset_
7elementt
TestingMacros/DeclGroupSyntaxAdditions.swift
Fatal error
Unexpected DeclGroupSyntax type 
. Please file a bug report at https://github.com/apple/swift-testing/issues/new
WithCompletionHandler
_unavailableFromAsync
context
TestingMacros._SelfRemover
init(viewMode:)
TestingMacros/AvailabilityGuards.swift
Unsupported keyword 
_createAvailabilityTraitExpr(from:when:in:)
.__unavailable(message: 
, sourceLocation: 
  if #unavailable(
    return true
  return false
.__available("Swift", obsoleted: 
  #if swift(<
  return true
  #else
  return false
  #endif
  if #available(
, *) {
    return true
  return false
.__available("Swift", introduced: 
  #if swift(>=
.__documentationBlock(
.__documentationLine(
__checkBinaryOperation
.__fromBinaryOperation(
__checkInoutFunctionCall
__checkFunctionCall
.__fromFunctionCall(
__checkPropertyAccess
.__fromPropertyAccess(
 will not record an issue on failure inside exit test 
org.swift.testing
 must specify arguments when used with function '
 cannot specify arguments when used with function '
' because it does not take any
Add 'arguments:' with one collection
Add 'arguments:' with all combinations of 
" is invalid and cannot be used with trait '
 cannot be applied to 
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/Citrine_host/Sources/TestingMacros/Support/DiagnosticMessage.swift
enumeration case
 cannot be applied to a function with a parameter marked '
 cannot be applied to a generic 
 cannot be applied to this 
 because it has been marked '
an extension to type
a generic extension to type
Change type to 'Tag'
Remove attribute 
 cannot be applied to an instance property
 except in an extension to 'Tag'
extension Tag {
 cannot be applied to a global variable
Declare in an extension to 'Tag'
 cannot be applied to a subclass of 'XCTestCase'
 has no effect when applied to an extension
To unwrap an optional value, add 'as Bool?'
To check if a value is true, add '?? false'
' will be evaluated before 
 is invoked; use 'as?' instead of 'as!' to silence this warning
 here; use 'Bool(
)' to silence this warning
private static let 
ParallelizationTrait.serialized
Testing.ParallelizationTrait.serialized
Testing.Tag.List.tags
' cannot be used with attribute 
; pass a member of 'Tag' or a string literal instead
' has no effect when used with a non-parameterized test function
.__fromSyntaxNode(
.__fromStringLiteral(
.__fromNegation(
Testing.SourceLocation.__here()
Testing.SourceLocation(fileID: 
TestingMacros/ConditionMacro.swift
Could not find the exit condition for this exit test. Please file a bug report at https://github.com/apple/swift-testing/issues/new
Could not find the body argument to this exit test. Please file a bug report at https://github.com/apple/swift-testing/issues/new
$exit_test_body__
@available(*, deprecated, message: "This type is an implementation detail of the testing library. Do not use it directly.")
enum 
: Testing.__ExitTestContainer {
  static var __sourceLocation: Testing.SourceLocation {
    
  static var __body: @Sendable () async -> Void {
    
  static var __expectedExitCondition: Testing.ExitCondition {
    
_macro
_context
TestingMacros._NestedConditionFinder
 as [Comment?]).compactMap(\.self)
__checkClosureCall
$test_container__suite__
: Testing.__TestContainer {
  static var __tests: [Testing.Test] {
    get async {[
      .__type(
        
      )
    ]}
get { Swift.fatalError("Unreachable") }
get {
  Testing.Tag.__fromStaticMember(of: 
return [
  .__function(
    named: 
    xcTestCompatibleSelector: 
    parameters: 
    testFunction: 
$test_container__function__
: Testing.__TestContainer {
  static var __tests: [Testing.Test] {
    get async {
      
@available(*, deprecated, message: "This property is an implementation detail of the testing library. Do not use it directly.")
private 
 nonisolated func 
() async -> [Testing.Test] {
    .__function(
      named: 
      xcTestCompatibleSelector: 
      testFunction: {}
    )
Testing.__xcTestCompatibleSelector(
@available(*, deprecated, message: "This function is an implementation detail of the testing library. Do not use it directly.")
@Sendable private 
 async throws -> Void {
try await Testing.__ifMainActorIsolationEnforced { 
, Testing.__requiringTry, Testing.__requiringAwait).0
if try await Testing.__invokeXCTestCaseMethod(
, onInstanceOf: 
.self, sourceLocation: 
try await MainActor.run { try (
, Testing.__requiringTry).0 }
, Testing.__requiringTry).0 }()
The result of this 
 will be discarded during testing
TestingMacros
ComponentValues
Argument
_SelfRemover
AttributeInfo
Availability
Condition
DiagnosticMessage
ConditionMacro
ExpectMacro
RequireMacro
RefinedConditionMacro
Base
AmbiguousRequireMacro
_NestedConditionFinder
ExitTestConditionMacro
ExitTestExpectMacro
ExitTestRequireMacro
SourceLocationMacro
SuiteDeclarationMacro
TagMacro
TestDeclarationMacro
major
minor
patch
label
expression
context
attribute
displayName
traits
otherArguments
sourceLocation
attribute
platformName
version
message
expandedFunctionName
arguments
expression
syntax
message
diagnosticID
severity
fixIts
Base
_macro
_context
 n;^
Qkkbal
i]Wb
9a&g
MGiI
wn>Jj
#.zf
+o*7
Testing
_pSg
ySay
ySay
ySSG
SaySSG
SgGG
yAAy
SgGGADG
ySay
SgSg
SgGGAE_G
Sg_G
SgG_G
SaySJG
_pSg
Sg_ABt
ySay
SgSg
5lower_AA5uppert
_pSg
ySay
_Sbt
SaySsG
SJSg
_Sb15isParentheticaltSg
_Sb15isParentheticalt
Iegnr_
ySay
_pSg
Si6offset_
7elementt
ySJG
7oldNode_AA03newB0t
ySsG
ySay
_pSg
$s13TestingMacros21RefinedConditionMacroP
$s13TestingMacros14ConditionMacroP
4Base
$s13TestingMacros22ExitTestConditionMacroP
SiSg
ySnySiGG
SSGGG
SbSg
Iegnnr_
ySay
ySay
Si6offset_
7elementt
TestingMacros/DeclGroupSyntaxAdditions.swift
Fatal error
Unexpected DeclGroupSyntax type 
. Please file a bug report at https://github.com/apple/swift-testing/issues/new
WithCompletionHandler
_unavailableFromAsync
context
TestingMacros._SelfRemover
init(viewMode:)
TestingMacros/AvailabilityGuards.swift
Unsupported keyword 
_createAvailabilityTraitExpr(from:when:in:)
.__unavailable(message: 
, sourceLocation: 
  if #unavailable(
    return true
  return false
.__available("Swift", obsoleted: 
  #if swift(<
  return true
  #else
  return false
  #endif
  if #available(
, *) {
    return true
  return false
.__available("Swift", introduced: 
  #if swift(>=
.__documentationBlock(
.__documentationLine(
__checkBinaryOperation
.__fromBinaryOperation(
__checkInoutFunctionCall
__checkFunctionCall
.__fromFunctionCall(
__checkPropertyAccess
.__fromPropertyAccess(
 will not record an issue on failure inside exit test 
org.swift.testing
 must specify arguments when used with function '
 cannot specify arguments when used with function '
' because it does not take any
Add 'arguments:' with one collection
Add 'arguments:' with all combinations of 
" is invalid and cannot be used with trait '
 cannot be applied to 
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/Citrine_host/Sources/TestingMacros/Support/DiagnosticMessage.swift
enumeration case
 cannot be applied to a function with a parameter marked '
 cannot be applied to a generic 
 cannot be applied to this 
 because it has been marked '
an extension to type
a generic extension to type
Change type to 'Tag'
Remove attribute 
 cannot be applied to an instance property
 except in an extension to 'Tag'
extension Tag {
 cannot be applied to a global variable
Declare in an extension to 'Tag'
 cannot be applied to a subclass of 'XCTestCase'
 has no effect when applied to an extension
To unwrap an optional value, add 'as Bool?'
To check if a value is true, add '?? false'
' will be evaluated before 
 is invoked; use 'as?' instead of 'as!' to silence this warning
 here; use 'Bool(
)' to silence this warning
private static let 
ParallelizationTrait.serialized
Testing.ParallelizationTrait.serialized
Testing.Tag.List.tags
' cannot be used with attribute 
; pass a member of 'Tag' or a string literal instead
' has no effect when used with a non-parameterized test function
.__fromSyntaxNode(
.__fromStringLiteral(
.__fromNegation(
Testing.SourceLocation.__here()
Testing.SourceLocation(fileID: 
TestingMacros/ConditionMacro.swift
Could not find the exit condition for this exit test. Please file a bug report at https://github.com/apple/swift-testing/issues/new
Could not find the body argument to this exit test. Please file a bug report at https://github.com/apple/swift-testing/issues/new
$exit_test_body__
@available(*, deprecated, message: "This type is an implementation detail of the testing library. Do not use it directly.")
enum 
: Testing.__ExitTestContainer {
  static var __sourceLocation: Testing.SourceLocation {
    
  static var __body: @Sendable () async -> Void {
    
  static var __expectedExitCondition: Testing.ExitCondition {
    
_macro
_context
TestingMacros._NestedConditionFinder
 as [Comment?]).compactMap(\.self)
__checkClosureCall
$test_container__suite__
: Testing.__TestContainer {
  static var __tests: [Testing.Test] {
    get async {[
      .__type(
        
      )
    ]}
get { Swift.fatalError("Unreachable") }
get {
  Testing.Tag.__fromStaticMember(of: 
return [
  .__function(
    named: 
    xcTestCompatibleSelector: 
    parameters: 
    testFunction: 
$test_container__function__
: Testing.__TestContainer {
  static var __tests: [Testing.Test] {
    get async {
      
@available(*, deprecated, message: "This property is an implementation detail of the testing library. Do not use it directly.")
private 
 nonisolated func 
() async -> [Testing.Test] {
    .__function(
      named: 
      xcTestCompatibleSelector: 
      testFunction: {}
    )
Testing.__xcTestCompatibleSelector(
@available(*, deprecated, message: "This function is an implementation detail of the testing library. Do not use it directly.")
@Sendable private 
 async throws -> Void {
try await Testing.__ifMainActorIsolationEnforced { 
, Testing.__requiringTry, Testing.__requiringAwait).0
if try await Testing.__invokeXCTestCaseMethod(
, onInstanceOf: 
.self, sourceLocation: 
try await MainActor.run { try (
, Testing.__requiringTry).0 }
, Testing.__requiringTry).0 }()
The result of this 
 will be discarded during testing
TestingMacros
ComponentValues
Argument
_SelfRemover
AttributeInfo
Availability
Condition
DiagnosticMessage
ConditionMacro
ExpectMacro
RequireMacro
RefinedConditionMacro
Base
AmbiguousRequireMacro
_NestedConditionFinder
ExitTestConditionMacro
ExitTestExpectMacro
ExitTestRequireMacro
SourceLocationMacro
SuiteDeclarationMacro
TagMacro
TestDeclarationMacro
major
minor
patch
label
expression
context
attribute
displayName
traits
otherArguments
sourceLocation
attribute
platformName
version
message
expandedFunctionName
arguments
expression
syntax
message
diagnosticID
severity
fixIts
Base
_macro
_context
 n;^
Qkkbal
i]Wb
9a&g
MGiI
wn>Jj
#.zf
+o*7
Testing
