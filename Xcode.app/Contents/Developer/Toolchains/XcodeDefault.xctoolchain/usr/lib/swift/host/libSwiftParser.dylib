AccessLevelModifier
 !#$'()*+/0
?BDZ\dp{
IfConfigContinuationClauseStartKeyword
CompilerSwiftParser
IncrementalParseTransition
ConcurrentEdits
IncrementalParseLookup
ConcurrentEditsError
SyntaxCursor
CompilerSwiftParser
IdentifierCheckContext
SkippingState
Lookahead
BracketedTokens
AccessLevelModifier
CompilerSwiftParser
NominalTypeDeclarationTrait
PrimaryOrGenerics
CompilerSwiftParser
RawParameterTrait
RawParameterListTrait
ParameterSyntax
RawParameterClauseTrait
Parameters
CompilerSwiftParser
Parser
LookaheadTracker
LookaheadTrackerOwner
LookaheadRanges
CompilerSwiftParser
IncrementalParseResult
CompilerSwiftParser
TokenSpec
CompilerSwiftParser
TokenSpecSet
DeclarationStart
DeclarationModifier
PostfixOperatorLike
BinaryOperatorLike
OperatorLike
AccessorModifier
SwitchCaseStart
CanBeStatementStart
EitherTokenSpecSet
PureDeclarationKeyword
5>R]_kwx
5<JLWbfouy
>GLPR]_jkwx}
>@S\c
HQV^glmrt
CompilerSwiftParser
AsyncEffectSpecifier
ThrowsEffectSpecifier
EffectSpecifier
RawMisplacedEffectSpecifiersTrait
MisspelledAsyncTokenKinds CorrectAsyncTokenKinds MisspelledThrowsTokenKinds CorrectThrowsTokenKinds
RawEffectSpecifiersTrait
MisspelledThrowsTokenKinds
MisspelledAsyncTokenKinds
CorrectThrowsTokenKinds
CorrectAsyncTokenKinds
CompilerSwiftParser
StringLiteralExpressionIndentationChecker
SwiftVersion
CompilerSwiftParser
UnexpectedNodesCombinable
CompilerSwiftParser
TokenConsumer
Token
CompilerSwiftParser
TokenPrecedence
CompilerSwiftParser
TriviaParser
ExperimentalFeatures
CompilerSwiftParser
SyntaxParseable
CompilerSwiftParser
AccessorSpecifierOptions
QuestionOrExclamationMarkOptions
AvailabilityKeywordOptions
LabelOptions
LiteralOptions
SpecifierOptions
DetailOptions
FirstNameOptions
SecondNameOptions
NameOptions
ConsumeKeywordOptions
BaseNameOptions
ArgumentOptions
KindSpecifierOptions
AsyncSpecifierOptions
IdentifierOptions
PoundKeywordOptions
ImportKindSpecifierOptions
OptionalMarkOptions
LayoutSpecifierOptions
ParameterOptions
MetatypeSpecifierOptions
FixitySpecifierOptions
BindingSpecifierOptions
ValueOptions
HigherThanOrLowerThanLabelOptions
EqualOptions
OpeningQuoteOptions
ClosingQuoteOptions
SomeOrAnySpecifierOptions
ThrowsSpecifierOptions
o|,-2&
CompilerSwiftParser
StringLiteralKind
Cursor
State
StateStack
NewlinePresence
Position
LexingDiagnostic
Lexeme
Flags
LexemeSequence
CompilerSwiftParser
Lexer
Element
CompilerSwiftParser
RegexLiteralLexemes
Builder
Kind
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/TokenSpec.swift
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/TokenConsumer.swift
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftSyntax/TokenDiagnostic.swift
visibility
metadata
<#declaration#>
AnyObject
elif
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/Expressions.swift
elements must have an even number of elements
Couldn't be a trailing closure
SwiftParser/Expressions.swift
Postfix #if should only have one element
SwiftParser/IncrementalParseTransition.swift
ConcurrentEdits created by translateSequentialEditsToConcurrentEdits do not satisfy ConcurrentEdits requirements
A single edit doesn't satisfy the ConcurrentEdits requirements?
_TtC19CompilerSwiftParser26IncrementalParseTransition
previousIncrementalParseResult
edits
reusedNodeCallback
Edits passed to ConcurrentEdits(concurrent:) does not satisfy the requirements posed by ConcurrentEdits
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/IncrementalParseTransition.swift
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/Lookahead.swift
If tokenKind has a defaultText, the prefix needs to match it
not checking a brace?
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/Names.swift
_TtC19CompilerSwiftParser21LookaheadTrackerOwner
lookaheadTracker
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/Parser.swift
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftSyntax/SyntaxText.swift
If count is not zero, base address must be exist
To create a TokenSpec for a keyword use the initializer that takes a keyword
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/Specifiers.swift
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/Statements.swift
Fatal error
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/StringLiteralRepresentedLiteralValue.swift
appendUnescapedLiteralValue relies on properly parsed literals
_TtC19CompilerSwiftParserP33_78149DB072C20084E7D780D86E26C3AF41StringLiteralExpressionIndentationChecker
expectedIndentation
arena
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/StringLiterals.swift
String segment produced by the lexer should not have unexpected text or trivia because we would drop it during post-processing
The lexer should only add trailing trivia to a string segment if the newline is escaped by a backslash
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/Lexer/Cursor.swift
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/TriviaParser.swift
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/ParseSourceFile.swift
Caller must handle newlines in non-multiline
Use Result.keyword instead
sourceLocation
else
elseif
endif
available
unavailable
Unexpected start
not a hex literal
not at a hex float exponent?!
Unexpected start of escaped identifier
unexpected operator start
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/Lexer/LexemeSequence.swift
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/Lexer/RegexLiteralLexer.swift
Should have lexed this?
lexing before the operator?
$ss12CaseIterableP
$s19CompilerSwiftParser13TokenConsumerP
5start_t
_AAt
$s19CompilerSwiftParser27NominalTypeDeclarationTraitP
$s19CompilerSwiftParser21RawParameterListTraitP
$s19CompilerSwiftParser23RawParameterClauseTraitP
$s19CompilerSwiftParser17RawParameterTraitP
15ParameterSyntax
10Parameters
$s19CompilerSwiftParser12TokenSpecSetP
yxq_GG
$s19CompilerSwiftParser33RawMisplacedEffectSpecifiersTraitP
22CorrectAsyncTokenKinds
23CorrectThrowsTokenKinds
25MisspelledAsyncTokenKinds
26MisspelledThrowsTokenKinds
$s19CompilerSwiftParser24RawEffectSpecifiersTraitP
$s19CompilerSwiftParser25UnexpectedNodesCombinableP
16closingDelimiter_t
$ss9OptionSetP
$sSY
$ss10SetAlgebraP
$ss25ExpressibleByArrayLiteralP
$s19CompilerSwiftParser15SyntaxParseableP
Si15delimiterLength_t
4kind_Si15delimiterLengtht
Sb11isRawString_t
17stringLiteralKind_t
17stringLiteralKind_Si10parenCountt
5index_SPy
G7lexemest
SaySSG
ySSG
ySiG
$sSt
$sST
$sSl
$sSK
$sSk
SiSg
8slashEnd_Si9numPoundstSg
5IndexSlQzz_x_SlRz
7ElementSTRtzlXX
private
fileprivate
internal
public
open
AllCases
poundElseif
poundElse
pound
AllCases
previousIncrementalParseResult
edits
reusedNodeCallback
editsNotConcurrent
transition
cursor
node
finished
viewMode
variableName
memberAccess
Token
skipSinglePost
skipUntil
skipSingle
lexemes
currentToken
tokensConsumed
swiftVersion
experimentalFeatures
leftParen
leftBrace
leftSquare
poundIf
poundElse
poundElseif
AllCases
private
fileprivate
internal
public
AllCases
PrimaryOrGenerics
ParameterSyntax
Parameters
Token
arena
lexemes
currentToken
nestingLevel
maximumNestingLevel
parseLookup
lookaheadRanges
lookaheadTrackerOwner
swiftVersion
experimentalFeatures
_emptyRawMultipleTrailingClosureElementListSyntax
_emptyRawDeclModifierListSyntax
_emptyRawAttributeListSyntax
_emptyRawTypeSpecifierListSyntax
furthestOffset
lookaheadTracker
tree
lookaheadRanges
rawTokenKind
keyword
remapping
recoveryPrecedence
allowAtStartOfLine
actor
associatedtype
case
class
deinit
enum
extension
func
import
init
macro
operator
precedencegroup
protocol
struct
subscript
typealias
pound
break
continue
defer
fallthrough
discard
guard
repeat
return
switch
then
throw
while
yield
default
__consuming
consuming
borrowing
mutating
nonmutating
binaryOperatorLike
postfixOperatorLike
prefixOperator
binaryOperator
infixQuestionMark
equal
arrow
postfixOperator
exclamationMark
postfixQuestionMark
__setter_access
_const
_local
async
convenience
distributed
dynamic
fileprivate
final
indirect
infix
internal
isolated
lazy
nonisolated
open
optional
override
package
postfix
prefix
private
public
reasync
required
rethrows
sending
static
unowned
weak
_resultDependsOn
_resultDependsOnSelf
declarationModifier
declarationKeyword
AllCases
AllCases
MisspelledAsyncTokenKinds
CorrectAsyncTokenKinds
MisspelledThrowsTokenKinds
CorrectThrowsTokenKinds
async
await
reasync
rethrows
throw
throws
asyncSpecifier
throwsSpecifier
expectedIndentation
arena
weakBracketed
openingBrace
unknownToken
identifierLike
exprKeyword
weakPunctuator
mediumPunctuator
weakBracketClose
stmtKeyword
strongPunctuator
closingBrace
declKeyword
openingPoundIf
closingPoundIf
Element
RawValue
ArrayLiteralElement
rawValue
AllCases
didSet
willSet
unsafeAddress
addressWithOwner
addressWithNativeOwner
unsafeMutableAddress
mutableAddressWithOwner
mutableAddressWithNativeOwner
_read
_modify
init
postfixQuestionMark
exclamationMark
poundAvailable
poundUnavailable
message
renamed
introduced
obsoleted
deprecated
true
false
_version
_underlyingVersion
weak
unowned
safe
unsafe
identifier
wildcard
_move
consume
__consuming
__setter_access
_const
_local
actor
async
borrowing
class
consuming
convenience
distributed
dynamic
fileprivate
final
indirect
infix
internal
isolated
lazy
mutating
nonisolated
nonmutating
open
optional
override
package
postfix
prefix
private
public
reasync
_resultDependsOnSelf
required
static
sending
self
Self
deinit
subscript
dollarIdentifier
binaryOperator
integerLiteral
_forward
reverse
_linear
visibility
metadata
prefixOperator
postfixOperator
poundIf
poundElseif
poundElse
typealias
struct
enum
protocol
func
inout
target
availability
exported
kind
spiModule
_Trivial
_TrivialAtMost
_UnknownLayout
_RefCountedObject
_NativeRefCountedObject
_Class
_NativeClass
_BridgeObject
_TrivialStride
Type
Protocol
_mutating
_borrowing
_consuming
left
right
none
higherThan
lowerThan
stringQuote
multilineStringQuote
__shared
__owned
_resultDependsOn
some
singleQuote
throws
rethrows
singleLine
multiLine
singleQuote
position
previousTokenKind
previousLexemeTrailingNewlinePresence
previousKeyword
stateStack
input
previous
absent
present
topState
afterRawStringDelimiter
inStringLiteral
afterStringLiteral
inStringInterpolationStart
inStringInterpolation
inRegexLiteral
normal
preferRegexOverBinaryOperator
afterClosingStringQuote
kind
Element
RawValue
ArrayLiteralElement
rawTokenKind
flags
diagnostic
start
leadingTriviaByteLength
textByteLength
trailingTriviaByteLength
cursor
rawValue
Element
Iterator
sourceBufferStart
cursor
nextToken
lexerStateAllocator
lookaheadTracker
Element
Iterator
Index
SubSequence
Indices
kind
error
builder
openingPounds
openingSlash
pattern
closingSlash
closingPounds
numOpenPounds
patternByteLength
numClosePounds
_startInput
_patternErrorOffset
_patternErrorKind
_startPrevious
lexemeCount
RawValue
 !"#$%
 !"#$
AccessLevelModifier
 !#$'()*+/0
?BDZ\dp{
!                 
          
IfConfigContinuationClauseStartKeyword
"""#"""""
CompilerSwiftParser
IncrementalParseTransition
ConcurrentEdits
IncrementalParseLookup
ConcurrentEditsError
SyntaxCursor
CompilerSwiftParser
IdentifierCheckContext
SkippingState
Lookahead
BracketedTokens
AccessLevelModifier
CompilerSwiftParser
NominalTypeDeclarationTrait
PrimaryOrGenerics
CompilerSwiftParser
RawParameterTrait
RawParameterListTrait
ParameterSyntax
RawParameterClauseTrait
Parameters
CompilerSwiftParser
Parser
LookaheadTracker
LookaheadTrackerOwner
LookaheadRanges
CompilerSwiftParser
IncrementalParseResult
CompilerSwiftParser
TokenSpec
myIdent
^]]]]]
]]]]
]]]]]
]]]]]]
 ]]"


CompilerSwiftParser
TokenSpecSet
DeclarationStart
DeclarationModifier
PostfixOperatorLike
BinaryOperatorLike
OperatorLike
AccessorModifier
SwitchCaseStart
CanBeStatementStart
EitherTokenSpecSet
PureDeclarationKeyword
5>R]_kwx
5<JLWbfouy
>GLPR]_jkwx}
>@S\c
HQV^glmrt
CompilerSwiftParser
AsyncEffectSpecifier
ThrowsEffectSpecifier
EffectSpecifier
RawMisplacedEffectSpecifiersTrait
MisspelledAsyncTokenKinds CorrectAsyncTokenKinds MisspelledThrowsTokenKinds CorrectThrowsTokenKinds
RawEffectSpecifiersTrait
MisspelledThrowsTokenKinds
MisspelledAsyncTokenKinds
CorrectThrowsTokenKinds
CorrectAsyncTokenKinds
IKGM
CompilerSwiftParser
StringLiteralExpressionIndentationChecker
SwiftVersion
CompilerSwiftParser
UnexpectedNodesCombinable
CompilerSwiftParser
TokenConsumer
Token
, $(
CompilerSwiftParser
TokenPrecedence
CompilerSwiftParser
TriviaParser
ExperimentalFeatures
CompilerSwiftParser
SyntaxParseable
 #&),/258;>ADGJMPSVY\_behk
CompilerSwiftParser
AccessorSpecifierOptions
QuestionOrExclamationMarkOptions
AvailabilityKeywordOptions
LabelOptions
LiteralOptions
SpecifierOptions
DetailOptions
FirstNameOptions
SecondNameOptions
NameOptions
ConsumeKeywordOptions
BaseNameOptions
ArgumentOptions
KindSpecifierOptions
AsyncSpecifierOptions
IdentifierOptions
PoundKeywordOptions
ImportKindSpecifierOptions
OptionalMarkOptions
LayoutSpecifierOptions
ParameterOptions
MetatypeSpecifierOptions
FixitySpecifierOptions
BindingSpecifierOptions
ValueOptions
HigherThanOrLowerThanLabelOptions
EqualOptions
OpeningQuoteOptions
ClosingQuoteOptions
SomeOrAnySpecifierOptions
ThrowsSpecifierOptions
o|,-2&
CompilerSwiftParser
StringLiteralKind
Cursor
State
StateStack
NewlinePresence
Position
LexingDiagnostic
Lexeme
Flags
LexemeSequence
CompilerSwiftParser
Lexer
Element
CompilerSwiftParser
RegexLiteralLexemes
Builder
Kind
222222222222
222222222222222222222222222222
22222222222222222222222222222
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/TokenSpec.swift
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/TokenConsumer.swift
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftSyntax/TokenDiagnostic.swift
visibility
metadata
<#declaration#>
AnyObject
elif
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/Expressions.swift
elements must have an even number of elements
Couldn't be a trailing closure
SwiftParser/Expressions.swift
Postfix #if should only have one element
SwiftParser/IncrementalParseTransition.swift
ConcurrentEdits created by translateSequentialEditsToConcurrentEdits do not satisfy ConcurrentEdits requirements
A single edit doesn't satisfy the ConcurrentEdits requirements?
_TtC19CompilerSwiftParser26IncrementalParseTransition
previousIncrementalParseResult
edits
reusedNodeCallback
Edits passed to ConcurrentEdits(concurrent:) does not satisfy the requirements posed by ConcurrentEdits
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/IncrementalParseTransition.swift
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/Lookahead.swift
If tokenKind has a defaultText, the prefix needs to match it
not checking a brace?
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/Names.swift
_TtC19CompilerSwiftParser21LookaheadTrackerOwner
lookaheadTracker
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/Parser.swift
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftSyntax/SyntaxText.swift
If count is not zero, base address must be exist
To create a TokenSpec for a keyword use the initializer that takes a keyword
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/Specifiers.swift
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/Statements.swift
Fatal error
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/StringLiteralRepresentedLiteralValue.swift
appendUnescapedLiteralValue relies on properly parsed literals
_TtC19CompilerSwiftParserP33_78149DB072C20084E7D780D86E26C3AF41StringLiteralExpressionIndentationChecker
expectedIndentation
arena
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/StringLiterals.swift
String segment produced by the lexer should not have unexpected text or trivia because we would drop it during post-processing
The lexer should only add trailing trivia to a string segment if the newline is escaped by a backslash
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/Lexer/Cursor.swift
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/TriviaParser.swift
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/ParseSourceFile.swift
Caller must handle newlines in non-multiline
Use Result.keyword instead
sourceLocation
else
elseif
endif
available
unavailable
Unexpected start
not a hex literal
not at a hex float exponent?!
Unexpected start of escaped identifier
unexpected operator start
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/Lexer/LexemeSequence.swift
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/swiftlang/swift-syntax/Sources/SwiftParser/Lexer/RegexLiteralLexer.swift
Should have lexed this?
lexing before the operator?
$ss12CaseIterableP
$s19CompilerSwiftParser13TokenConsumerP
5start_t
_AAt
$s19CompilerSwiftParser27NominalTypeDeclarationTraitP
$s19CompilerSwiftParser21RawParameterListTraitP
$s19CompilerSwiftParser23RawParameterClauseTraitP
$s19CompilerSwiftParser17RawParameterTraitP
15ParameterSyntax
10Parameters
$s19CompilerSwiftParser12TokenSpecSetP
yxq_GG
$s19CompilerSwiftParser33RawMisplacedEffectSpecifiersTraitP
22CorrectAsyncTokenKinds
23CorrectThrowsTokenKinds
25MisspelledAsyncTokenKinds
26MisspelledThrowsTokenKinds
$s19CompilerSwiftParser24RawEffectSpecifiersTraitP
$s19CompilerSwiftParser25UnexpectedNodesCombinableP
16closingDelimiter_t
$ss9OptionSetP
$sSY
$ss10SetAlgebraP
$ss25ExpressibleByArrayLiteralP
$s19CompilerSwiftParser15SyntaxParseableP
Si15delimiterLength_t
4kind_Si15delimiterLengtht
Sb11isRawString_t
17stringLiteralKind_t
17stringLiteralKind_Si10parenCountt
5index_SPy
G7lexemest
SaySSG
ySSG
ySiG
$sSt
$sST
$sSl
$sSK
$sSk
SiSg
8slashEnd_Si9numPoundstSg
5IndexSlQzz_x_SlRz
7ElementSTRtzlXX
private
fileprivate
internal
public
open
AllCases
poundElseif
poundElse
pound
AllCases
previousIncrementalParseResult
edits
reusedNodeCallback
editsNotConcurrent
transition
cursor
node
finished
viewMode
variableName
memberAccess
Token
skipSinglePost
skipUntil
skipSingle
lexemes
currentToken
tokensConsumed
swiftVersion
experimentalFeatures
leftParen
leftBrace
leftSquare
poundIf
poundElse
poundElseif
AllCases
private
fileprivate
internal
public
AllCases
PrimaryOrGenerics
ParameterSyntax
Parameters
Token
arena
lexemes
currentToken
nestingLevel
maximumNestingLevel
parseLookup
lookaheadRanges
lookaheadTrackerOwner
swiftVersion
experimentalFeatures
_emptyRawMultipleTrailingClosureElementListSyntax
_emptyRawDeclModifierListSyntax
_emptyRawAttributeListSyntax
_emptyRawTypeSpecifierListSyntax
furthestOffset
lookaheadTracker
tree
lookaheadRanges
rawTokenKind
keyword
remapping
recoveryPrecedence
allowAtStartOfLine
actor
associatedtype
case
class
deinit
enum
extension
func
import
init
macro
operator
precedencegroup
protocol
struct
subscript
typealias
pound
break
continue
defer
fallthrough
discard
guard
repeat
return
switch
then
throw
while
yield
default
__consuming
consuming
borrowing
mutating
nonmutating
binaryOperatorLike
postfixOperatorLike
prefixOperator
binaryOperator
infixQuestionMark
equal
arrow
postfixOperator
exclamationMark
postfixQuestionMark
__setter_access
_const
_local
async
convenience
distributed
dynamic
fileprivate
final
indirect
infix
internal
isolated
lazy
nonisolated
open
optional
override
package
postfix
prefix
private
public
reasync
required
rethrows
sending
static
unowned
weak
_resultDependsOn
_resultDependsOnSelf
declarationModifier
declarationKeyword
AllCases
AllCases
MisspelledAsyncTokenKinds
CorrectAsyncTokenKinds
MisspelledThrowsTokenKinds
CorrectThrowsTokenKinds
async
await
reasync
rethrows
throw
throws
asyncSpecifier
throwsSpecifier
expectedIndentation
arena
weakBracketed
openingBrace
unknownToken
identifierLike
exprKeyword
weakPunctuator
mediumPunctuator
weakBracketClose
stmtKeyword
strongPunctuator
closingBrace
declKeyword
openingPoundIf
closingPoundIf
Element
RawValue
ArrayLiteralElement
rawValue
AllCases
didSet
willSet
unsafeAddress
addressWithOwner
addressWithNativeOwner
unsafeMutableAddress
mutableAddressWithOwner
mutableAddressWithNativeOwner
_read
_modify
init
postfixQuestionMark
exclamationMark
poundAvailable
poundUnavailable
message
renamed
introduced
obsoleted
deprecated
true
false
_version
_underlyingVersion
weak
unowned
safe
unsafe
identifier
wildcard
_move
consume
__consuming
__setter_access
_const
_local
actor
async
borrowing
class
consuming
convenience
distributed
dynamic
fileprivate
final
indirect
infix
internal
isolated
lazy
mutating
nonisolated
nonmutating
open
optional
override
package
postfix
prefix
private
public
reasync
_resultDependsOnSelf
required
static
sending
self
Self
deinit
subscript
dollarIdentifier
binaryOperator
integerLiteral
_forward
reverse
_linear
visibility
metadata
prefixOperator
postfixOperator
poundIf
poundElseif
poundElse
typealias
struct
enum
protocol
func
inout
target
availability
exported
kind
spiModule
_Trivial
_TrivialAtMost
_UnknownLayout
_RefCountedObject
_NativeRefCountedObject
_Class
_NativeClass
_BridgeObject
_TrivialStride
Type
Protocol
_mutating
_borrowing
_consuming
left
right
none
higherThan
lowerThan
stringQuote
multilineStringQuote
__shared
__owned
_resultDependsOn
some
singleQuote
throws
rethrows
singleLine
multiLine
singleQuote
position
previousTokenKind
previousLexemeTrailingNewlinePresence
previousKeyword
stateStack
input
previous
absent
present
topState
afterRawStringDelimiter
inStringLiteral
afterStringLiteral
inStringInterpolationStart
inStringInterpolation
inRegexLiteral
normal
preferRegexOverBinaryOperator
afterClosingStringQuote
kind
Element
RawValue
ArrayLiteralElement
rawTokenKind
flags
diagnostic
start
leadingTriviaByteLength
textByteLength
trailingTriviaByteLength
cursor
rawValue
Element
Iterator
sourceBufferStart
cursor
nextToken
lexerStateAllocator
lookaheadTracker
Element
Iterator
Index
SubSequence
Indices
kind
error
builder
openingPounds
openingSlash
pattern
closingSlash
closingPounds
numOpenPounds
patternByteLength
numClosePounds
_startInput
_patternErrorOffset
_patternErrorKind
_startPrevious
lexemeCount
RawValue
 !"#$%
 !"#$
