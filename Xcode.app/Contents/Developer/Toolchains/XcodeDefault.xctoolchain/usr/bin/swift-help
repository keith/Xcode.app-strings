swift_help
SwiftHelp
CodingKeys
HelpTopic
Subcommand
__sFILE
OSSignpostType
Nos_signpost_type_t
FileAttributeKey
NNSFileAttributeKey
OSLogType
Nos_log_type_t
FileAttributeType
NNSFileAttributeType
Foundation
__sbuf
URLResourceKey
NNSURLResourceKey
TSCBasic
ByteString
TSCBasic
CStringArray
TSCBasic
CacheableSequence
CacheableSequenceIterator
TSCBasic
Closable
TSCBasic
CodableResult
CodingKeys
TSCBasic
Condition
TSCBasic
DeltaAlgorithm
DiagnosticsEngine
TSCBasic
DiagnosticData
DiagnosticLocation
Diagnostic
Behavior
Message
StringDiagnostic
UnknownLocation
TSCBasic
FileInfo
CodingKeys
TSCBasic
FileSystemError
Kind
FileMode
Option
FileSystemAttribute
FileSystem
InMemoryFileSystem
Node
DirectoryContents
RerootedFileSystemView
NodeContents
WeakReference
LocalFileSystem
TSCBasic
GraphError
TSCBasic
HashAlgorithm
SHA256
CryptoKitSHA256
_CryptoKitSHA256
TSCBasic
JSON
JSONSerializable
JSONDecodingError
TSCBasic
JSONMappable
MapError
TSCBasic
KeyedPair
TSCBasic
LazyCache
TSCBasic
Lock
ProcessLockError
FileLock
LockType
TSCBasic
OSLog
OSLogType
OSSignpostType
OSSignpostID
TSCBasic
ObjectIdentifierProtocol
TSCBasic
OrderedDictionary
TSCBasic
OrderedSet
TSCBasic
AbsolutePath
RelativePath
Path
PathValidationError
UNIXPath
TSCBasic
RecursibleDirectoryContentsGenerator
TSCBasic
ProcessResult
Error
ExitStatus
Process
OutputRedirection
State
TSCBasic
ProcessEnvironmentKey
ProcessEnv
TSCBasic
ProcessSetError
ProcessSet
TSCBasic
RegEx
TSCBasic
StringError
CodingKeys
TSCBasic
SortedArray
TSCBasic
LocalizedJoinType
TSCBasic
SynchronizedQueue
Node
TSCBasic
TempFileError
TemporaryFile
MakeDirectoryError
TSCBasic
TerminalController
TerminalType
Color
TSCBasic
Thread
ThreadImpl
TSCBasic
ByteStreamable
WritableByteStream
_WritableByteStreamBase
ThreadSafeOutputByteStream
Format
BufferedOutputByteStream
FileOutputByteStream
LocalFileOutputByteStream
TransformedSeparatedListStreamable
SeparatedListStreamable
JSONEscapedTransformedStringListStreamable
JSONEscapedDictionaryStreamable
JSONEscapedStringListStreamable
JSONEscapedStringStreamable
JSONEscapedDoubleStreamable
JSONEscapedIntStreamable
JSONEscapedBoolStreamable
RepeatingStringStreamable
TSCBasic
CodableRange
SystemError
CodingKeys
TSCUtility
Archiver
ZipArchiver
indexstore_functions_t
CFRunLoop
NCFRunLoopRef
indexstore_unit_dependency_kind_t
indexstore_symbol_subkind_t
indexstore_symbol_kind_t
indexstore_symbol_language_t
indexstore_unit_event_listen_options_t
indexstore_unit_event_kind_t
indexstore_string_ref_t
TSCUtility
ArgumentParserError
ArgumentConversionError
Shell
ShellCompletion
ArgumentKind
StringEnumArgument
PathArgument
ArrayParsingStrategy
ArgumentProtocol
ArgumentKindTy
OptionArgument
PositionalArgument
AnyArgument
ArgumentParserProtocol
ArgumentParser
Result
ArgumentBinder
Parser
Error
Cursor
TSCUtility
Bits
TSCUtility
Bitcode
BitcodeElement
Block
Record
Payload
BlockInfo
Signature
BitstreamVisitor
Bitstream
Abbreviation
Operand
BlockInfoCode
BlockID
AbbreviationID
BitcodeError
Error
TSCUtility
BitstreamReader
TSCUtility
BitstreamWriter
BlockInfo
RecordBuffer
Block
TSCUtility
BuildFlags
CodingKeys
TSCUtility
Context
TSCUtility
DiagnosticDataConvertible
DiagnosticLocationProviding
AnyDiagnostic
PackageLocation
Local
Remote
Diagnostics
TSCUtility
FSWatch
_FileWatcher
FSEventStreamDelegate
FSEventStream
Error
_WatcherDelegate
TSCUtility
TSCUtility
IndexStore
TestCaseClass
TestMethod
IndexStoreAPI
IndexStoreImpl
IndexStoreAPIImpl
_DLHandle
_DLError
TSCUtility
InterruptHandler
TSCUtility
JSONMessageStreamingParserDelegate
Message
JSONMessageStreamingParser
State
ParsingError
TSCUtility
AuthorizationProviding
Netrc
Error
Machine
TSCUtility
SignpostName
TSCUtility
PkgConfigError
PCFileFinder
LoadingContext
PkgConfig
PkgConfigParser
TSCUtility
Platform
LinuxFlavor
TSCUtility
PolymorphicCodableProtocol
PolymorphicCodable
PolymorphicCodableArray
CodingKeys
TSCUtility
ProgressAnimationProtocol
SingleLinePercentProgressAnimation
MultiLineNinjaProgressAnimation
RedrawingNinjaProgressAnimation
NinjaProgressAnimation
MultiLinePercentProgressAnimation
RedrawingLitProgressAnimation
PercentProgressAnimation
DynamicProgressAnimation
TSCUtility
SerializedDiagnostics
Error
Diagnostic
Level
SourceLocation
FixIt
OwnedRecord
BlockID
Payload
TSCUtility
SimplePersistanceProtocol
SimplePersistence
Error
TSCUtility
TracingEventType
TracingEventProtocol
TracingCollectionProtocol
TracingEvent
TracingCollection
CodingKeys
TSCUtility
Triple
Error
Arch
Vendor
CodingKeys
TSCUtility
TSCUtility
Verbosity
TSCUtility
Version
VersionError
TSCUtility
SwiftVersion
Versioning
TSCUtility
DLHandle
DLOpenFlags
DLError
SwiftOptions
DriverKind
SwiftOptions
OptionAttributes
Option
Kind
SwiftOptions
OptionParseError
SwiftOptions
OptionTable
<input>
-cas-path
<path>
Path to CAS
-emit-tbd
Emit a TBD file
-interpret
Immediate mode
Group
SwiftOptions
ParsedOption
Argument
ParsedOptions
SwiftOptions
PrefixTrie
Node
DOTWriter
ArgumentParser
CompletionShell
ArgumentParser
Argument
ArgumentArrayParsingStrategy
ArgumentParser
ArgumentHelp
ArgumentParser
ArgumentVisibility
Representation
ArgumentParser
CompletionKind
Kind
ArgumentParser
ValidationError
ExitCode
CleanExit
Representation
ArgumentParser
Flag
FlagInversion
FlagExclusivity
Representation
ArgumentParser
NameSpecification
Element
Representation
ArgumentParser
Option
SingleValueParsingStrategy
ArrayParsingStrategy
ArgumentParser
OptionGroup
ArgumentParser
AsyncParsableCommand
AsyncMainProtocol
Command
ArgumentParser
CommandConfiguration
ArgumentParser
EnumerableFlag
ArgumentParser
ExpressibleByArgument
ArgumentParser
ParsableArguments
ArgumentSetProvider
_WrappedParsableCommand
CodingKeys
ArgumentParser
ParsableArgumentsValidator
ParsableArgumentsValidatorError
ArgumentParser
ParsableCommand
ArgumentParser
ArgumentDecoder
ParsedArgumentsContainer
ArrayWrapperProtocol
DecodedArguments
SingleValueDecoder
UnkeyedContainer
ArrayWrapper
SingleValueContainer
Error
ArgumentParser
ArgumentDefinitionContainer
Contained Initial
ArgumentDefinitionContainerExpressibleByArgument
ArgumentDefinition
ParsingStrategy
Bare
Update
Help
Kind
Options
ArgumentParser
ArgumentSet
ArgumentParser
CommandError
AutodetectedGenerateCompletions
GenerateCompletions
HelpRequested
CodingKeys
ArgumentParser
InputKey
ArgumentParser
InputOrigin
Element
ArgumentParser
Name
ArgumentParser
ParsedWrapper
Value
DecodableParsedWrapper
Parsed
ArgumentParser
ParsedValues
Element
ArgumentParser
ParserError
InternalParseError
InputIndex
ArgumentParser
ParsedArgument
Value
Element
Index
SplitArguments
SubIndex
ArgumentParser
HelpCommand
CodingKeys
Element
ArgumentParser
HelpGenerator
Section
DiscussionSection
Header
ArgumentParser
MessageInfo
StandardError
ArgumentParser
Platform
ArgumentParser
Tree
InitializationError
ArgumentParserToolInfo
ToolInfoHeader
ToolInfoV0
CommandInfoV0
ArgumentInfoV0
NameInfoV0
KindV0
CodingKeys
swift
swiftc
build
package
test
repl
swift_help/main.swift
cannot find subcommand executable '
USAGE: swift repl <options>
  The Swift REPL runs code interactively with LLDB.
  For most purposes, you can just run `swift repl`.
OPTIONS:
  This mode takes optional Swift Frontend arguments: see `swift --help`.
Welcome to Swift!
Experiment with Swift code interactively
`swift --version`
 for Swift version information.
 for descriptions of available options and flags.
`swift help <subcommand>`
 for more information about a subcommand.
Run package tests
Run a program from a package
Create and work on packages
Build Swift packages
The topic to display help for.
The help subtopics, if applicable.
List hidden (unsupported) options
success
failure
lowerBound
upperBound
DiagnosticsEngine
org.swift.swiftpm.process-set
org.swift.swiftpm.basic.stream
TSCBasic/Base64URL.swift
can't appear here (left=
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_
_TtC8TSCBasic12CStringArray
cArray
items
index
sequence
Did not find a matching key
key value 
DiagnosticsEngine-callback
_TtC8TSCBasic17DiagnosticsEngine
queue
handlerQueue
_diagnostics
handlers
defaultLocation
_TtC8TSCBasic15UnknownLocation
posixPermissions
com.apple.quarantine
TSCBasic/FileSystem.swift
homeDirectory on RerootedFileSystemView is not supported.
cachesDirectory on RerootedFileSystemView is not supported.
tempDirectory on RerootedFileSystemView is not supported.
_TtC8TSCBasic18InMemoryFileSystem
root
lock
lockFiles
lockFilesLock
_TtCC8TSCBasic18InMemoryFileSystemP33_DA6B485C7A646531CFCACE37CF46BC6B4Node
_TtCC8TSCBasic18InMemoryFileSystemP33_DA6B485C7A646531CFCACE37CF46BC6B17DirectoryContents
entries
_TtC8TSCBasic22RerootedFileSystemView
underlyingFileSystem
org.swift.swiftpm.in-memory-file-system.file-queue
TSCBasic/JSON.swift
unexpected object: 
expected array, got 
expected dictionary, got 
expected double, got 
expected bool, got 
expected string, got 
expected int, got 
_TtC8TSCBasic8FileLock
fileDescriptor
lockFile
_TtC8TSCBasic5OSLog
storage
invalid relative path '
'; relative path should not begin with '
invalid absolute path '
'; absolute path must begin with '/'
TSCBasic/Path.swift
_TtC8TSCBasic36RecursibleDirectoryContentsGenerator
current
towalk
shouldRecurse
Swift/x86_64-apple-macos.private.swiftinterface
could not open stdin on this platform
workingDirectory is not supported in this platform
could not find executable for '
illegal UTF8 sequence output
error while executing `
_TtC8TSCBasic7Process
loggingHandler
arguments
environmentBlock
workingDirectory
processID
state
stateLock
completionQueue
_launched
launchedLock
outputRedirection
startNewProcessGroup
swift.org.swift-tsc.process.concurrent
org.swift.tools-support-core.process-completion
<ProcessResult: exit: 
Duplicate values for key: '
_TtC8TSCBasic10ProcessSet
processes
serialQueue
cancelled
killTimeout
killingCondition
shouldKill
Fatal error
Down-casted Array element failed to match the target type
Expected 
NSArray element failed to match the Swift Array Element type
Expected 
head
tail
notEmptyCondition
value
next
<TemporaryFile: 
_TtC8TSCBasic18TerminalController
clearLineString
resetString
boldString
v8@?0
_TtC8TSCBasic6Thread
finishedCondition
isFinished
_TtC8TSCBasicP33_BD395E1927AAEA716B9FD4CEF0145B0F10ThreadImpl
v16@0:8
@24@0:8@?16
@16@0:8
task
TSCBasic.ThreadImpl
init()
TSCBasic/WritableByteStream.swift
Subclasses must implement this
_TtC8TSCBasic23_WritableByteStreamBase
_buffered
_buffer
_TtC8TSCBasic26ThreadSafeOutputByteStream
_TtC8TSCBasic24BufferedOutputByteStream
contents
_TtC8TSCBasic20FileOutputByteStream
_TtC8TSCBasic25LocalFileOutputByteStream
filePointer
error
closeOnDeinit
offset element 
fileCloseImpl() should be implemented by a subclass
org.swift.swiftpm.basic.thread-safe-output-byte-stream
TSCBasic/misc.swift
unsetenv error: 
posix_spawn error: 
strerror_r error: 
generate completion script for Bourne-again shell
generate completion script for Z shell
bash
GIT_TERMINAL_PROMPT
ssh -oBatchMode=yes
asyncBegin
asyncEnd
x86_64
x86_64h
i686
powerpc
powerpc64le
s390x
aarch64
amd64
armv7
armv6
armv5
arm64
arm64e
wasm32
riscv64
mips
mipsel
mips64
mips64el
unknown
apple
darwin
macosx
linux
windows
wasi
openbsd
org.swift.swiftpm.
expected single value for argument: 
expected arguments: 
unexpected argument 
; use --help to list available arguments
 requires a value; provide a value using '
; use --help to print usage
; use --help to list available options
' is not convertible to 
TSCUtility/ArgumentParser.swift
name
shortName
strategy
usage
completion
isOptional
_TtC10TSCUtility11AnyArgument
kind
isArray
parseClosure
_TtC10TSCUtility14ArgumentParser
subparsers
optionArguments
positionalArguments
commandName
overview
seeAlso
isSubparser
canAcceptPositionalArguments
_TtCC10TSCUtility14ArgumentParser6Result
results
parentResult
parser
subparser
bodies
POSITIONAL ARGUMENTS:
Display available options
# Generates completions for 
# In the final compdef file, set the following file header:
#     #compdef 
#     local context state state_descr line
#     typeset -A opt_args
# Parameters
# - the start position of this parser; set to 1 if unknown
    if [[ $COMP_CWORD == $(($1+
    if [[ $COMP_CWORD == $1 ]]; then
        COMPREPLY=( $(compgen -W "
" -- $cur) )
        return
    fi
    case ${COMP_WORDS[$1]} in
 $(($1+1))
            return
        ;;
    COMPREPLY=( $(compgen -W "
" -- $cur) )
    case $prev in
            return
            _filedir
            return
            COMPREPLY=( $(compgen -W "
" -- $cur) )
            return
            return
() {
    arguments=(
    )
    _arguments $arguments && return
    case $state in
        (command)
            local modes
            modes=(
                '
            )
            _describe "mode" modes
            ;;
        (arg)
            case ${words[1]} in
                (
                    
                    ;;
            esac
            ;;
    esac
        '(-): :->command'
        '(-)*:: :->arg'
\[default: .+?\]
TSCUtility/ArgumentParserShellCompletion.swift
TSCUtility/BitstreamReader.swift
TSCUtility/BitstreamWriter.swift
unregistered abbreviation 
cannot emit a field as array or blob
invalid char6 value
lower upper 
endBlock() called with no block registered
_TtC10TSCUtility15BitstreamWriter
currentValue
currentBit
codeBitWidth
currentAbbreviations
blockScope
blockInfoRecords
currentBlockID
_TtCC10TSCUtility15BitstreamWriter9BlockInfo
abbrevs
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789._
cxxCompilerFlags
swiftCompilerFlags
TSCUtility/Context.swift
_TtC10TSCUtility7FSWatch
paths
_watcher
latency
_TtC10TSCUtility13FSEventStream
stream
thread
runLoop
callbacksQueue
org.swift.swiftpm.FSEventStream.callback
check-ref-format
--allow-onelevel
Unable to open store at 
_TtC10TSCUtility10IndexStore
_impl
_TtC10TSCUtility13IndexStoreAPI
_TtC10TSCUtilityP33_B71F9CA8B3630D7C545EABDE61C6A48F14IndexStoreImpl
store
instance
_TtC10TSCUtilityP33_B71F9CA8B3630D7C545EABDE61C6A48F17IndexStoreAPIImpl
path
dylib
_TtC10TSCUtilityP33_B71F9CA8B3630D7C545EABDE61C6A48F9_DLHandle
indexstore_store_create
indexstore_store_get_unit_name_from_output_path
indexstore_unit_reader_create
indexstore_error_get_description
indexstore_unit_reader_dependencies_apply_f
indexstore_unit_reader_get_module_name
indexstore_unit_dependency_get_kind
indexstore_unit_dependency_get_name
indexstore_record_reader_create
indexstore_symbol_get_name
indexstore_symbol_get_properties
indexstore_symbol_get_kind
indexstore_record_reader_occurrences_apply_f
indexstore_occurrence_get_symbol
indexstore_occurrence_relations_apply_f
indexstore_symbol_relation_get_symbol
indexstore_symbol_relation_get_roles
Missing required symbol: 
Unable to get description for error: 
_TtC10TSCUtility16InterruptHandler
signalHandler
delegate
buffer
invalid UTF8 bytes
unexpected JSON message: 
TSCUtility/Netrc.swift
(?:\s*(?<default>default))
(?:\s*account\s+\S++)?
resolution
org.swift.swiftpm
prohibited flag(s): 
parsing error(s): 
couldn't find pc file for 
failed to retrieve search paths with pkg-config; maybe pkg-config is not installed
PKG_CONFIG_SYSROOT_DIR
Unexpected line: 
_TtC10TSCUtility14LoadingContext
pkgConfigStack
Requires.private
Expected version number after 
Text ended before matching quote was found in line: 
Expected a value for variable '
circular dependency detected while parsing 
/usr/local/lib/pkgconfig
/usr/local/share/pkgconfig
/usr/lib/pkgconfig
/usr/share/pkgconfig
/private/var/tmp
/etc/debian_version
/system/bin/toolbox
/system/bin/toybox
/etc/redhat-release
/etc/centos-release
/etc/fedora-release
/etc/system-release
Amazon Linux release 2
Unexpected Codable type code for concrete '
TSCUtility.NinjaProgressAnimation
init(stream:ttyTerminalAnimationFactory:dumbTerminalAnimationFactory:defaultAnimationFactory:)
TSCUtility.PercentProgressAnimation
_TtC10TSCUtility34SingleLinePercentProgressAnimation
header
displayedPercentages
hasDisplayedHeader
_TtC10TSCUtility31MultiLineNinjaProgressAnimation
lastDisplayedText
_TtC10TSCUtility31RedrawingNinjaProgressAnimation
terminal
hasDisplayedProgress
_TtC10TSCUtility22NinjaProgressAnimation
_TtC10TSCUtility33MultiLinePercentProgressAnimation
_TtC10TSCUtility29RedrawingLitProgressAnimation
_TtC10TSCUtility24PercentProgressAnimation
_TtC10TSCUtility24DynamicProgressAnimation
animation
unable to restore state from 
unsupported schema version 
_TtC10TSCUtility17SimplePersistence
fileSystem
schemaVersion
supportedSchemaVersions
statePath
otherStatePaths
prettyPrint
_TtC10TSCUtility17TracingCollection
_events
-print-target-info
TSCUtility/Triple.swift
Failed to parse target info (
Raw compiler output: 
Target info does not contain a triple string (
Target info: 
Failed to parse triple string (
Triple string: 
x86_64-apple-macosx
characters other than alpha-numerics and hyphens in build metadata identifier
characters other than alpha-numerics and hyphens in pre-release identifier
non-numerical characters in version core identifier
empty identifiers in version core '
 identifiers in version core '
non-ASCII characters in version string '
TSCUtility/Version.swift
contains(_:) is unavailable, use contains(version:)
Invalid version string 
 is not a valid version
Swift Package Manager - Swift 
_TtC10TSCUtility8DLHandle
rawValue
Ubuntu clang version 
' is not supported by '
'; did you mean to use '
missing argument value for '
unknown argument: '
SwiftOptions/PrefixTrie.swift
Impossible because we found a child with id 
OVERVIEW: Swift compiler
USAGE: 
Dumping ABI interface
-abort-on-module-fail
Abort if a module failed to load
-access-notes-path
Specify YAML file to override attributes on Swift declarations in this module
-alias-module-names-in-module-interface
When emitting a module interface, disambiguate modules using distinct alias names
-allowable-client
Module names that are allowed to import this module
-always-compile-output-files
Always compile output files even it might not change the results
-analyze-requirement-machine
Print out requirement machine statistics at the end of the compilation job
-api-diff-data-dir
Load platform and version specific API migration data files from <path>. Ignored if -api-diff-data-file is specified.
-api-diff-data-file
API migration data is from <path>
-application-extension-library
Restrict code to those available for App Extension Libraries
-application-extension
Restrict code to those available for App Extensions
Specify the assert_configuration replacement. Possible values are Debug, Release, Unchecked, DisableReplacement.
-assume-single-threaded
Assume that code will be executed in a single-threaded environment
-autolink-force-load
Force ld to link against this module even if no symbols are used
-autolink-library
Add dependent library
-avoid-emit-module-source-info
don't emit Swift source info file
Avoid serializing the file paths of SDK nodes.
-avoid-tool-args
Avoid serializing the arguments for invoking the tool.
-backup-module-interface-path
Directory of module interfaces as backups to those from SDKs
-bad-file-descriptor-retry-count
Number of retrying opening a file if previous open returns a bad file descriptor error.
The path to a directory containing baseline files: macos.json, iphoneos.json, appletvos.json, watchos.json, and iosmac.json
The path to the Json file that we should use as the baseline
-batch-scan-input-file
Specify a JSON file containing modules to perform batch dependencies scanning
add a directory to the baseline framework search path
add a module for baseline input
The path to a blocklist configuration file
-breakage-allowlist-path
An allowlist of breakages to not complain about
-bridging-header-directory-for-print
Directory for bridging header to be printed in compatibility header
-bridging-header-pch-key
Cache Key for bridging header pch
path to the baseline SDK to import frameworks
-bypass-batch-mode-checks
Bypass checks for batch-mode errors.
-bypass-resilience-checks
Ignore all checks for module resilience.
-cache-compile-job
Enable compiler caching
-cache-disable-replay
Skip loading the compilation result from cache
-cache-replay-prefix-map
<prefix=replacement>
Remap paths when replaying outputs from cache
-candidate-module-file
Specify Swift module may be ready to use for an interface
-cas-backend-mode=
native|casid|verify
CASBackendMode for output kind
Enable using CASBackend for object file output
-cas-emit-casid-file
Emit .casid file next to object file when CAS Backend is enabled
Root CASID for CAS FileSystem
-cas-plugin-option
Option pass to CAS Plugin
-cas-plugin-path
Path to CAS Plugin
-check-api-availability-only
Deprecated, has no effect
-check-onone-completeness
Print errors if the compile OnoneSupport module is missing symbols
-checked-async-objc-bridging=
Control whether checked continuations are used when bridging async calls from Swift to ObjC: 'on', 'off' 
-clang-build-session-file
Use the last modification time of <file> as the underlying Clang build session timestamp
-clang-header-expose-decls=
all-public|has-expose-attr
Which declarations should be exposed in the generated clang header.
-clang-header-expose-module
<imported-module-name>=<generated-header-name>
Allow the compiler to assume that APIs from the specified module are exposed to C/C++/Objective-C in another generated header, so that APIs in the current module that depend on declarations from the specified module can be exposed in the generated header.
-clang-include-tree-root
Clang Include Tree CASID
-clang-scanner-module-cache-path
Specifies the Clang dependency scanner module cache path
Separately set the target we should use for internal Clang instance
-code-complete-call-pattern-heuristics
Use heuristics to guess whether we want call pattern completions
-code-complete-inits-in-postfix-expr
Include initializers when completing a postfix expression
-color-diagnostics
Print diagnostics in color
-compare-to-baseline-path
Compare the built module to the baseline at <path> and diagnose breaking changes using the API digester
-compile-module-from-interface
Treat the (single) input as a swiftinterface and produce a module
-compiler-style-diags
Print compiler style diagnostics to stderr.
-concurrency-model
standard|task-to-thread
Which concurrency model is used.  Defaults to standard.
-conditional-runtime-records
Allow removal of runtime metadata records (public types, protocol conformances) based on whether they're used or unused
-const-gather-protocols-file
Specify a list of protocols for extraction of conformances' const values'
-continue-building-after-errors
Continue building, even after errors are encountered
-coverage-prefix-map
Remap source paths in coverage info
-cross-module-optimization
Perform cross-module optimization
-crosscheck-unqualified-lookup
Compare legacy DeclContext- to ASTScope-based unqualified name lookup (for debugging)
-cxx-interop-getters-setters-as-properties
Import getters and setters as computed properties in Swift
-cxx-interoperability-mode=
Enables C++ interoperability; pass 'default' to enable or 'off' to disable
-debug-assert-after-parse
Force an assertion failure after parsing
-debug-assert-immediately
Force an assertion failure immediately
-debug-constraints-attempt
Debug the constraint solver at a given attempt
-debug-constraints-on-line
Debug the constraint solver for expressions on <line>
-debug-constraints
Debug the constraint-based type checker
-debug-crash-after-parse
Force a crash after parsing
-debug-crash-immediately
Force a crash immediately
Print out debug dumps when cycles are detected in evaluation
-debug-diagnostic-names
Include diagnostic names when printing
-debug-emit-invalid-swiftinterface-syntax
Write an invalid declaration into swiftinterface files
-debug-forbid-typecheck-prefix
Triggers llvm fatal_error if typechecker tries to typecheck a decl with the provided prefix name
-debug-generic-signatures
Debug generic signatures
-debug-info-format=
Specify the debug info format type to either 'dwarf' or 'codeview'
-debug-info-store-invocation
Emit the compiler invocation in the debug info.
-debug-inverse-requirements
Print real requirements in -debug_generic_signatures output
Dumping information for debug purposes
-debug-prefix-map
Remap source paths in debug info
-debug-requirement-machine=
Fine-grained debug output from the generics implementation
-debug-time-expression-type-checking
Dumps the time it takes to type-check each expression
-debug-time-function-bodies
Dumps the time it takes to type-check each function body
-debugger-support
Process swift code as if running in the debugger
-debugger-testing-transform
Instrument the code with calls to an intrinsic that record the expected values of local variables so they can be compared against the results from the debugger.
-define-availability
Define an availability macro in the format 'macroName : iOS 13.0, macOS 10.15'
-dependency-scan-cache-path
The path to output the dependency scanner's internal state.
-deprecated-integrated-repl
-deserialize-diff
Deserialize diff items in a JSON file
-deserialize-sdk
Deserialize sdk digester in a JSON file
Diagnose SDK content in JSON file
-diagnostic-documentation-path
Path to diagnostic documentation resources
-diagnostic-style
The formatting style used when printing diagnostics ('swift' or 'llvm')
-diagnostics-editor-mode
Diagnostics will be used in editor
-digester-breakage-allowlist-path
The path to a list of permitted breaking changes the API digester should ignore
Whether the API digester should run in API or ABI mode (defaults to API checking)
-direct-clang-cc1-module-build
Use the specified -Xcc options to build a PCM by using Clang frontend directly, bypassing the Clang driver
-disable-access-control
Don't respect access control restrictions
-disable-actor-data-race-checks
Disable runtime checks for actor data races
-disable-alias-module-names-in-module-interface
When emitting a module interface, disable disambiguating modules using distinct alias names
-disable-all-autolinking
Disable all Swift autolink directives
-disable-arc-opts
Don't run SIL ARC optimization passes.
-disable-ast-verifier
Do not run the AST verifier during compilation. NOTE: This lets the user override the default behavior on whether or not the ASTVerifier is run. The default behavior is to run the verifier when asserts are enabled and not run it when asserts are disabled. NOTE: Can not be used if enable-ast-verifier is used as well
-disable-autolink-frameworks
Disable autolinking against all frameworks
-disable-autolink-framework
Disable autolinking against the provided framework
-disable-autolink-library
Disable autolinking against the provided library
-disable-autolinking-runtime-compatibility-concurrency
Do not use autolinking for the concurrency runtime compatibility library
-disable-autolinking-runtime-compatibility-dynamic-replacements
Do not use autolinking for the dynamic replacement runtime compatibility library
-disable-autolinking-runtime-compatibility
Do not use autolinking for runtime compatibility libraries
-disable-availability-checking
Disable checking for potentially unavailable APIs
-disable-batch-mode
Disable combining frontend jobs into batches
-disable-bridging-pch
Disable automatic generation of bridging PCH files
-disable-building-interface
Disallow building binary module from textual interface
-disable-clang-spi
Don't import Clang SPIs as Swift SPIs
-disable-clang-target
Disable a separately specified target triple for Clang instance to use
-disable-clangimporter-source-import
Disable ClangImporter and forward all requests straight the DWARF importer.
Disable cross-module optimization
-disable-collocate-metadata-functions
Disable collocate metadata functions
-disable-colocate-type-descriptors
Disable colocate type descriptors
-disable-concrete-type-metadata-mangled-name-accessors
Disable concrete type metadata access by mangled name
-disable-constraint-solver-performance-hacks
Disable all the hacks in the constraint solver
-disable-cross-import-overlays
Do not automatically import declared cross-import overlays.
-disable-cxx-interop-requirement-at-import
Do not require C++ interoperability to be enabled when importing a Swift module that enables C++ interoperability
-disable-debugger-shadow-copies
Disable debugger shadow copies of local variables.This option is only useful for testing the compiler.
-disable-deserialization-recovery
Don't attempt to recover from missing xrefs (etc) in swiftmodules
-disable-deserialization-safety
Don't avoid reading potentially unsafe decls in swiftmodules
-disable-diagnostic-passes
Don't run diagnostic passes
-disable-emit-generic-class-ro_t-list
Disable emission of a section with references to class_ro_t of generic class patterns
-disable-experimental-clang-importer-diagnostics
Disable experimental diagnostics when importing C, C++, and Objective-C libraries
-disable-experimental-lifetime-dependence-inference
Disable experimental lifetime dependence inference
-disable-experimental-opened-existential-types
Disable experimental support for implicitly opened existentials
-disable-experimental-parser-round-trip
Disable round trip through the new swift parser
-disable-experimental-string-processing
Disable experimental string processing
-disable-fail-on-error
Don't exit with a nonzero status if errors are emitted
-disable-fragile-relative-protocol-tables
Disable relative protocol witness tables
-disable-generic-metadata-prespecialization
Do not statically specialize metadata for generic types at types that are known to be used in source.
-disable-implicit-backtracing-module-import
Disable the implicit import of the _Backtracing module.
-disable-implicit-concurrency-module-import
Disable the implicit import of the _Concurrency module.
-disable-implicit-string-processing-module-import
Disable the implicit import of the _StringProcessing module.
-disable-implicit-swift-modules
Disable building Swift modules implicitly by the compiler
-disable-import-ptrauth-field-function-pointers
Disable import of custom ptrauth qualified field function pointers
-disable-incremental-imports
Disable cross-module incremental build metadata and driver scheduling for Swift modules
-disable-incremental-llvm-codegen
Disable incremental llvm code generation.
-disable-infer-public-sendable
Disable inference of Sendable conformances for public structs and enums
-disable-interface-lock
Don't lock interface file when building module
-disable-invalid-ephemeralness-as-error
Diagnose invalid ephemeral to non-ephemeral conversions as warnings
-disable-ios-inheritance-for-pound-if-os-on-visionos
Disable '#if os(iOS)' returning 'true' when targeting visionOS against the Internal SDK
-disable-large-loadable-types-reg2mem
Disable large loadable types register to memory pass
-disable-layout-string-value-witnesses-instantiation
Disable runtime instantiation of layout string value witnesses for generic types
-disable-layout-string-value-witnesses
Disable layout string based value witnesses
-disable-legacy-type-info
Completely disable legacy type layout
-disable-lifetime-dependence-diagnostics
Disable lifetime dependence diagnostics for Nonescapable types.
-disable-llvm-optzns
Don't run LLVM optimization passes
-disable-llvm-value-names
Don't add names to local values in LLVM IR
-disable-llvm-verify
Don't run the LLVM IR verifier.
-disable-migrator-fixits
Disable the Migrator phase which automatically applies fix-its
-disable-modules-validate-system-headers
Disable validating system headers in the Clang importer
-disable-named-lazy-import-as-member-loading
Import all of a type's import-as-member globals together, as Swift 5.10 and earlier did; temporary workaround for modules that are sensitive to this change
-disable-named-lazy-member-loading
Disable per-name lazy member loading (obsolete)
-disable-new-llvm-pass-manager
Disable the new llvm pass manager
-disable-new-operator-lookup
Disable the new operator decl and precedencegroup lookup behavior
-disable-nonfrozen-enum-exhaustivity-diagnostics
Allow switches over non-frozen enums without catch-all cases
-disable-nskeyedarchiver-diagnostics
Allow classes with unstable mangled names to adopt NSCoding
-disable-objc-attr-requires-foundation-module
Disable requiring uses of @objc to require importing the Foundation module
-disable-objc-interop
Disable Objective-C interop code generation and config directives
-disable-objective-c-protocol-symbolic-references
Disable objective-c protocol symbolic references
-disable-only-one-dependency-file
Disables incremental build optimization that only produces one dependencies file
-disable-os-checks
Skip OS related diagnostics
-disable-ossa-opts
Don't run SIL OSSA optimization passes.
-disable-playground-transform
Disable playground transformation
-disable-preallocated-instantiation-caches
Avoid preallocating metadata instantiation caches in globals
-disable-previous-implementation-calls-in-dynamic-replacements
Disable calling the previous implementation in dynamic replacements
-disable-print-missing-imports-in-module-interface
Disable adding to the module interface imports used from API and missing from the sources
-disable-readonly-static-objects
Avoid allocating static objects in a read-only data section
-disable-reflection-metadata
Disable emission of reflection metadata for nominal types
-disable-reflection-names
Disable emission of names of stored properties and enum cases inreflection metadata
-disable-relative-protocol-witness-tables
-disable-remove-deprecated-check
Skip diagnosing removal of deprecated symbols
-disable-requirement-machine-concrete-contraction
Disable preprocessing pass to eliminate conformance requirements on generic parameters which are made concrete
-disable-requirement-machine-loop-normalization
Disable stronger minimization algorithm, for debugging only
-disable-requirement-machine-reuse
Disable re-use of requirement machines for minimization, for debugging only
-disable-round-trip-debug-types
Disables verification of debug info mangling
-disable-sandbox
Disable using the sandbox when executing subprocesses
-disable-sil-opaque-values
Disable SIL Opaque Values
-disable-sil-ownership-verifier
Do not verify ownership invariants during SIL Verification 
-disable-sil-partial-apply
Disable use of partial_apply in SIL generation
-disable-sil-perf-optzns
Don't run SIL performance optimization passes
-disable-stack-protector
Disable the stack-protector
-disable-standard-substitutions-in-reflection-mangling
Disable referencing stdlib symbols via mangled names in reflection mangling
-disable-subst-sil-function-types
Disable substituted function types for SIL type lowering of function values
-disable-swift-bridge-attr
Disable using the swift bridge attribute
-disable-swift-specific-llvm-optzns
Don't run Swift specific LLVM optimization passes.
-disable-swift3-objc-inference
-disable-target-os-checking
Disable checking the target OS of serialized modules
-disable-testable-attr-requires-testable-module
Disable checking of @testable
-disable-type-layout
Disable type layout based lowering
-disable-typo-correction
Disable typo correction
-disable-verify-exclusivity
Disable verification of access markers used to enforce exclusivity.
-disallow-use-new-driver
Disable using new swift-driver
-downgrade-typecheck-interface-error
Downgrade error to warning when typechecking emitted module interfaces
-driver-always-rebuild-dependents
Always rebuild dependents of files that have been modified
-driver-batch-count
Use the given number of batch-mode partitions, rather than partitioning dynamically
-driver-batch-seed
Use the given seed value to randomize batch-mode partitions
-driver-batch-size-limit
Use the given number as the upper limit on dynamic batch-mode partition size
-driver-emit-fine-grained-dependency-dot-file-after-every-import
Emit dot files every time driver imports an fine-grained swiftdeps file.
-driver-filelist-threshold
Pass input or output file names as filelists if there are more than <n>
-driver-force-response-files
Force the use of response files for testing
Set the driver mode to either 'swift' or 'swiftc'
-driver-print-actions
Dump list of actions to perform
-driver-print-bindings
Dump list of job inputs and outputs
-driver-print-derived-output-file-map
Dump the contents of the derived output file map
-driver-print-graphviz
Write the job graph as a graphviz file
-driver-print-jobs
Dump list of jobs to execute
-driver-print-output-file-map
Dump the contents of the output file map
-driver-show-incremental
With -v, dump information about why files are being rebuilt
-driver-show-job-lifecycle
Show every step in the lifecycle of driver jobs
-driver-skip-execution
Skip execution of subtasks when performing compilation
-driver-time-compilation
Prints the total time it took to execute all compilation tasks
-driver-use-filelists
Pass input files as filelists whenever possible
-driver-use-frontend-path
Use the given executable to perform compilations. Arguments can be passed as a ';' separated list
-driver-verify-fine-grained-dependency-graph-after-every-import
Debug DriverGraph by verifying it after every import
-driver-warn-unused-options
Emit warnings for any provided options which are unused by the driver
The path to output swift interface files for the compiled source files
Parse and type-check input file(s) and dump AST(s)
-dump-clang-diagnostics
Dump Clang diagnostics to stderr
-dump-clang-lookup-tables
Dump the importer's Swift-name-to-Clang-name lookup tables to stderr
-dump-interface-hash
Parse input file(s) and dump interface token hash(es)
Dump JIT contents
-dump-macro-expansions
Dumps the results of each macro expansion
-dump-migration-states-dir
Dump the input text, output text, and states for migration to <path>
Parse input file(s) and dump AST(s)
Dump debugging information about a precompiled Clang module
-dump-requirement-machine
Enables dumping rewrite systems from the generics implementation
-dump-scope-maps
<expanded-or-list-of-line:column>
Parse and type-check input file(s) and dump the scope map(s)
Dump SDK content to JSON file
Output YAML dump of fixed-size types from all imported modules
-dump-type-refinement-contexts
Type-check input file(s) and dump type refinement contexts(s)
-dump-type-witness-systems
Enables dumping type witness systems from associated type inference
Dump USR for each declaration reference
DWARF debug info version to produce if requested
Marks a conditional compilation flag as true
-embed-bitcode-marker
Embed placeholder LLVM IR data as a marker
Embed LLVM IR bitcode as data
-embed-tbd-for-module
Embed symbols from the module in the emitted tbd file
-emit-abi-descriptor-path
Output the ABI descriptor of current module to <path>
-emit-api-descriptor-path
Output a JSON file describing the module's API to <path>
-emit-api-descriptor
Output a JSON file describing the module's API
Emit assembly file(s) (-S)
Emit LLVM BC file(s)
-emit-clang-header-nonmodular-includes
Augment emitted Objective-C header with textual imports for every included modular import
-emit-const-values-path
Emit the extracted compile-time known values to <path>
-emit-const-values
-emit-dependencies-path
Output basic Make-compatible dependencies file to <path>
-emit-dependencies
Emit basic Make-compatible dependencies files
-emit-digester-baseline-path
Emit a baseline file for the module to <path> using the API digester
-emit-digester-baseline
Emit a baseline file for the module using the API digester
-emit-executable
Emit a linked executable
-emit-extension-block-symbols
Emit 'swift.extension' symbols for extensions to external types instead of directly associating members and conformances with the extended nominal when generating symbol graphs
-emit-fine-grained-dependency-sourcefile-dot-files
Emit dot files for every source file.
-emit-fixits-path
Output compiler fixits as source edits to <path>
-emit-imported-modules
Emit a list of the imported modules
Emit LLVM IR file(s) before LLVM optimizations
Emit LLVM IR file(s) after LLVM optimizations
Emit a linked library
-emit-loaded-module-trace-path
Emit the loaded module trace JSON to <path>
-emit-loaded-module-trace
Emit a JSON file containing information about what modules were loaded
-emit-localized-strings-path
Emit localization keys to <path>
-emit-localized-strings
Emits localization keys for strings passed to APIs needing localization
-emit-macro-expansion-files
Specify when to emit macro expansion file: 'none', 'debug', or 'diagnostics'
-emit-migrated-file-path
Emit the migrated source file to <path>
-emit-module-dependencies-path
Emit a discovered dependencies file for the emit-module task to <path>
-emit-module-doc-path
Output module documentation file <path>
-emit-module-doc
Emit a module documentation file based on documentation comments
-emit-module-interface-path
Output module interface file to <path>
-emit-module-interface
Output module interface file
-emit-module-path
Emit an importable module to <path>
-emit-module-semantic-info-path
Output semantic info of current module to <path>
-emit-module-separately-wmo
Emit module files as a distinct job in wmo builds
-emit-module-serialize-diagnostics-path
Emit a serialized diagnostics file for the emit-module task to <path>
-emit-module-source-info-path
Output module source info file to <path>
-emit-module-source-info
Output module source info file
-emit-module-summary-path
Output module summary file to <path>
-emit-module-summary
Output module summary file
Emit an importable module
-emit-objc-header-path
Emit an Objective-C header file to <path>
-emit-objc-header
Emit an Objective-C header file
Emit object file(s) (-c)
-emit-package-module-interface-path
Output package module interface file to <path>
Emit PCH for imported Objective-C header file
Emit a precompiled Clang module from a module map
-emit-private-module-interface-path
Output private module interface file to <path>
-emit-reference-dependencies-path
Output Swift-style dependencies file to <path>
-emit-reference-dependencies
Emit a Swift-style dependencies file
-emit-remap-file-path
Emit the replacement map describing Swift Migrator changes to <path>
Emit serialized AST + raw SIL file(s)
Emit serialized AST + canonical SIL file(s)
Emit raw SIL file(s)
Emit canonical SIL file(s)
-emit-sorted-sil
When printing SIL, print out all sil entities sorted by name to ease diffing
-emit-stack-promotion-checks
Emit runtime checks for correct stack promotion of objects.
-emit-supported-features
Emit a JSON file including all supported compiler features
-emit-symbol-graph-dir
Emit a symbol graph to directory <dir>
-emit-symbol-graph
Emit a symbol graph
Emit the TBD file to <path>
-emit-verbose-sil
Emit locations during SIL emission
-empty-abi-descriptor
Avoid printing actual module content into ABI descriptor file
Use empty baseline for diagnostics
-enable-access-control
Respect access control restrictions
-enable-actor-data-race-checks
Emit runtime checks for actor data races
-enable-anonymous-context-mangled-names
Enable emission of mangled names in anonymous context descriptors
-enable-ast-verifier
Run the AST verifier during compilation. NOTE: This lets the user override the default behavior on whether or not the ASTVerifier is run. The default behavior is to run the verifier when asserts are enabled and not run it when asserts are disabled. NOTE: Can not be used if disable-ast-verifier is used as well
-enable-autolinking-runtime-compatibility-bytecode-layouts
Enable autolinking for the bytecode layouts runtime compatibility library
-enable-bare-slash-regex
Enable the use of forward slash regular-expression literal syntax
-enable-batch-mode
Enable combining frontend jobs into batches
-enable-bridging-pch
Enable automatic generation of bridging PCH files
-enable-builtin-module
Enables the explicit import of the Builtin module
-enable-cmo-everything
Perform cross-module optimization on everything (all APIs). This is the same level of serialization as Embedded Swift.
-enable-collocate-metadata-functions
Enable collocate metadata functions
-enable-colocate-type-descriptors
Enable colocate type descriptors
-enable-copy-propagation=
true|requested-passes-only|false
Whether to enable copy propagation
-enable-copy-propagation
Run SIL copy propagation with lexical lifetimes to shorten object lifetimes while preserving variable lifetimes.
-enable-cross-import-overlays
Automatically import declared cross-import overlays.
-enable-default-cmo
Perform conservative cross-module optimization
-enable-deserialization-recovery
Attempt to recover from missing xrefs (etc) in swiftmodules
-enable-deserialization-safety
Avoid reading potentially unsafe decls in swiftmodules
-enable-destroy-hoisting=
Whether to enable destroy hoisting
-enable-deterministic-check
Check compiler output determinisim by running it twice
-enable-dynamic-replacement-chaining
Enable chaining of dynamic replacements
-enable-emit-generic-class-ro_t-list
Enable emission of a section with references to class_ro_t of generic class patterns
-enable-experimental-additive-arithmetic-derivation
Enable experimental 'AdditiveArithmetic' derived conformances
-enable-experimental-async-demotion
Enables an optimization pass to demote async functions.
-enable-experimental-async-top-level
Enable experimental concurrency in top-level code
-enable-experimental-concise-pound-file
Enable experimental concise '#file' identifier
-enable-experimental-concurrency
Enable experimental concurrency model
-enable-experimental-cxx-interop
Enable experimental C++ interop code generation and config directives
-enable-experimental-distributed
Enable experimental 'distributed' actors and functions
-enable-experimental-eager-clang-module-diagnostics
Enable experimental eager diagnostics reporting on the importability of all referenced C, C++, and Objective-C libraries
-enable-experimental-feature
Enable an experimental feature
-enable-experimental-flow-sensitive-concurrent-captures
Enable flow-sensitive concurrent captures
-enable-experimental-forward-mode-differentiation
Enable experimental forward mode differentiation
-enable-experimental-lifetime-dependence-inference
Enable experimental lifetime dependence inference
-enable-experimental-move-only
Enable experimental move only
-enable-experimental-named-opaque-types
Enable experimental support for named opaque result types
-enable-experimental-opaque-type-erasure
Type-erases opaque types that conform to @_typeEraser protocols
-enable-experimental-opened-existential-types
Enable experimental support for implicitly opened existentials
-enable-experimental-pairwise-build-block
Enable experimental pairwise 'buildBlock' for result builders
-enable-experimental-static-assert
Enable experimental #assert
-enable-experimental-string-processing
Enable experimental string processing
-enable-explicit-existential-types
Enable experimental support for explicit existential types
-enable-fragile-relative-protocol-tables
Enable relative protocol witness tables
-enable-implicit-backtracing-module-import
Enable the implicit import of the _Backtracing module.
-enable-implicit-dynamic
Add 'dynamic' to all declarations
-enable-import-ptrauth-field-function-pointers
Enable import of custom ptrauth qualified field function pointers
-enable-incremental-imports
Enable cross-module incremental build metadata and driver scheduling for Swift modules
-enable-infer-public-sendable
Enable inference of Sendable conformances for public structs and enums
-enable-invalid-ephemeralness-as-error
Diagnose invalid ephemeral to non-ephemeral conversions as errors
-enable-large-loadable-types-reg2mem
Enable large loadable types register to memory pass
-enable-layout-string-value-witnesses-instantiation
Enable runtime instantiation of layout string value witnesses for generic types
-enable-layout-string-value-witnesses
Enable layout string based value witnesses
-enable-lexical-lifetimes=
Whether to enable lexical lifetimes
-enable-lexical-lifetimes
Enable lexical lifetimes
-enable-library-evolution
Build the module to allow binary-compatible library evolution
-enable-lifetime-dependence-diagnostics
Enable lifetime dependence diagnostics for Nonescapable types.
-enable-llvm-value-names
Add names to local values in LLVM IR
-enable-llvm-vfe
Use LLVM IR Virtual Function Elimination on Swift class virtual tables
-enable-llvm-wme
Use LLVM IR Witness Method Elimination on Swift protocol witness tables
-enable-move-inout-stack-protector
Enable the stack protector by moving values to temporaries
-enable-new-llvm-pass-manager
Enable the new llvm pass manager
-enable-new-operator-lookup
Enable the new operator decl and precedencegroup lookup behavior
-enable-nonfrozen-enum-exhaustivity-diagnostics
Diagnose switches over non-frozen enums without catch-all cases
-enable-nskeyedarchiver-diagnostics
Diagnose classes with unstable mangled names adopting NSCoding
-enable-objc-attr-requires-foundation-module
Enable requiring uses of @objc to require importing the Foundation module
-enable-objc-interop
Enable Objective-C interop code generation and config directives
-enable-objective-c-protocol-symbolic-references
Enable objective-c protocol symbolic references
-enable-only-one-dependency-file
Enables incremental build optimization that only produces one dependencies file
-enable-operator-designated-types
Enable operator designated types
-enable-ossa-complete-lifetimes
Require linear OSSA lifetimes after SILGen
-enable-ossa-modules
Always serialize SIL in ossa form. If this flag is not passed in, when optimizing ownership will be lowered before serializing SIL
-enable-pack-metadata-stack-promotion=
Whether to skip heapifying stack metadata packs when possible.
-enable-pack-metadata-stack-promotion
Skip heapifying stack metadata packs when possible.
-enable-private-imports
Allows this module's internal and private API to be accessed
-enable-relative-protocol-witness-tables
-enable-remove-deprecated-check
Diagnosing removal of deprecated symbols
-enable-requirement-machine-opaque-archetypes
Enable more correct opaque archetype support, which is off by default because it might fail to produce a convergent rewrite system
-enable-resilience
Deprecated, use -enable-library-evolution instead
-enable-round-trip-debug-types
Enables verification of debug info mangling
-enable-sil-opaque-values
Enable SIL Opaque Values
-enable-single-module-llvm-emission
Emit LLVM IR into a single LLVM module in multithreaded mode.
-enable-source-import
Enable importing of Swift source files
-enable-spec-devirt
Enable speculative devirtualization pass.
-enable-stack-protector
Enable the stack protector
-enable-swift3-objc-inference
-enable-target-os-checking
Enable checking the target OS of serialized modules
-enable-testable-attr-requires-testable-module
Enable checking of @testable
Allows this module's internal API to be accessed for testing
-enable-throw-without-try
Allow throwing function calls without 'try'
-enable-type-layout
Enable type layout based lowering
-enable-upcoming-feature
Enable a feature that will be introduced in an upcoming language version
-enable-verify-exclusivity
Enable verification of access markers used to enforce exclusivity.
-enable-volatile-modules
Load Swift modules in memory
-enforce-exclusivity=
Enforce law of exclusivity
-entry-point-function-name
Name of the entry point function
-experimental-allow-module-with-compiler-errors
Attempt to output .swiftmodule, regardless of compilation errors
-experimental-allow-non-resilient-access
Allow non-resilient access by generating all contents besides exportable decls
-experimental-c-foreign-reference-types
Enable experimental C foreign references types (with reference coutning).
-experimental-clang-importer-direct-cc1-scan
Enables swift driver to construct swift-frontend invocations using -direct-clang-cc1-module-build
-experimental-cxx-stdlib
C++ standard library to use; forwarded to Clang's -stdlib flag
-experimental-emit-module-separately
Emit module files as a distinct job
-experimental-force-workaround-broken-modules
Attempt unsafe recovery for imported modules with broken modularization
-experimental-hermetic-seal-at-link
Library code can assume that all clients are visible at linktime, and aggressively strip unused code
-experimental-lazy-typecheck
Type-check lazily as needed to produce requested outputs
-experimental-one-way-closure-params
Enable experimental support for one-way closure parameters
-experimental-package-bypass-resilience
Enable optimization to bypass resilience within a package
-experimental-package-cmo
Enable optimization to perform defalut CMO within a package boundary
-experimental-package-interface-load
Enables loading a package interface if in the same package specified with package-name
-experimental-performance-annotations
-experimental-platform-c-calling-convention
Which calling convention is used to perform non-swift calls. Defaults to llvm's standard C calling convention.
-experimental-print-full-convention
When emitting a module interface or SIL, emit additional @convention arguments, regardless of whether they were written in the source. Also requires -use-clang-function-types to be enabled.
-experimental-skip-all-function-bodies
Skip type-checking function bodies and all SIL generation
-experimental-skip-non-exportable-decls
Skip decls that are not exported to clients
-experimental-skip-non-inlinable-function-bodies-is-lazy
Infer lazy typechecking for -experimental-skip-non-inlinable-function-bodies
-experimental-skip-non-inlinable-function-bodies-without-types
Skip work on non-inlinable function bodies that do not declare nested types
-experimental-skip-non-inlinable-function-bodies
Skip type-checking and SIL generation for non-inlinable function bodies
-experimental-spi-imports
Enable experimental support for SPI imports
-experimental-spi-only-imports
Enable use of @_spiOnly imports
-explain-module-dependency
Emit remark/notes describing why compilaiton may depend on a module with a given name.
-explicit-dependency-graph-format=
Specify the explicit dependency graph output format to either 'json' or 'dot'
-explicit-interface-module-build
Use the specified command-line to build the module from interface, instead of flags specified in the interface
-explicit-module-build
Prebuild module dependencies to make them explicit
-explicit-swift-module-map-file
Specify a JSON file containing information of explicit Swift modules
Module name to use when referenced in clients module interfaces
-external-pass-pipeline-filename
<pass_pipeline_file>
Use the pass pipeline defined by <pass_pipeline_file>
-external-plugin-path
<path>#<plugin-server-path>
Add directory to the plugin search path with a plugin server executable
Executes a line of code provided on the command line
-file-compilation-dir
The compilation directory to embed in the debug info. Coverage mapping is not supported yet.
-file-prefix-map
Remap source paths in debug, coverage, and index info
Specify source inputs in a file rather than on the command line
Find USR for decls by given condition
Apply all fixits from diagnostics without any filtering
-force-public-linkage
Force public linkage for private symbols. Used by LLDB.
-force-struct-type-layouts
Force type layout based lowering for structs
Specifies a framework which should be linked against
-frontend-parseable-output
Emit textual output in a parseable format
Add directory to system framework search path
-function-sections
Emit functions to separate sections.
Add directory to framework search path
Specify a directory where the clang importer and clang linker can find headers and libraries
Emit full DWARF type info.
-generate-empty-baseline
Generate an empty baseline
-generate-migration-script
Compare SDK content in JSON file and generate migration script
-generate-name-correction
Generate name correction template
-gline-tables-only
Emit minimal debug info for backtraces only
Don't emit debug info
-group-info-path
The path to collect the group information of the compiled module
Deprecated, use '-sil-based-debuginfo' instead
Emit debug info. This is the preferred setting for debugging with LLDB.
Display available options, including hidden options
add a directory to the clang importer system framework search path
-ignore-always-inline
Ignore @inline(__always) attributes.
-ignore-module-source-info
Avoid getting source location from .swiftsourceinfo files
-ignore-spi-group
SPI group name to not diagnose about
the file containing USRs of removed decls that the digester should ignore
-import-cf-types
Recognize and import CF types as class types
Implicitly import the specified module
-import-objc-header
Implicitly imports an Objective-C header file
When performing a dependency scan, only identify all imports of the main Swift module sources
-import-underlying-module
Implicitly imports the Objective-C half of a module
Overwrite input file with formatted file.
-include-spi-symbols
Add symbols with SPI information to the symbol graph
Perform an incremental build if possible
-indent-switch-case
Indent cases in switch statements.
Number of characters to indent.
-index-file-path
Produce index data for file <path>
Produce index data for a source file
-index-ignore-clang-modules
Avoid indexing clang modules (pcms)
-index-ignore-stdlib
Avoid emitting index data for the standard library.
-index-ignore-system-modules
Avoid indexing system modules
-index-include-locals
Include local definitions/references in the produced index data.
-index-store-path
Store indexing data to <path>
-index-system-modules
Emit index data for imported serialized swift system modules
-index-unit-output-path-filelist
Specify index unit output paths in a file rather than on the command line
-index-unit-output-path
Use <path> as the output path in the produced index data.
Cache Key for input file
The SDK contents under comparison
-internalize-at-link
Allow internalizing public symbols and vtables at link time (assume all client code of public types is part of the same link unit, or that external symbols are explicitly requested via -exported_symbols_list)
-irgen-always-use-indirect-relative-references
Always emit indirectable relative references as indirect
Add directory to the import search path
JIT compilation mode
Print output in JSON format.
Number of commands to execute in parallel
Specifies the path to the linker to be used
libc runtime library to use
Library distribution level 'api', 'spi' or 'other' (the default)
<start line>:<end line>. Formats a range of lines (1-based). Can only be used with one input file.
-link-objc-runtime
LLDB-enhanced REPL mode
-load-dependency-scan-cache
After performing a dependency scan, serialize the scanner's internal state.
-load-plugin-executable
<path>#<module-names>
Path to a compiler plugin executable and a comma-separated list of module names where the macro types are declared
-load-plugin-library
Path to a dynamic library containing compiler plugins such as macros
Choose a language for diagnostic messages
-localization-path
Path to localized diagnostic messages directory
Filter nodes with the given location.
Perform LTO with <lto-library>
Specify the LTO type to either 'llvm-thin' or 'llvm-full'
Add directory to library link search path
Specifies a library which should be linked against
Merge the input modules without otherwise processing them
-migrate-keep-objc-visibility
When migrating, add '@objc' to declarations that would've been implicitly visible in Swift 3
-migrator-update-sdk
Does nothing. Temporary compatibility flag for Xcode.
-migrator-update-swift
Dump Json suitable for generating migration script
-min-runtime-version
Specify the minimum runtime version to build force on non-Darwin systems
-minimum-access-level
Include symbols with this access level or more
-module-abi-name
ABI name to use for the contents of this module
<alias_name=real_name>
If a source file imports or references module <alias_name>, the <real_name> is used for the contents of the file
-module-cache-path
Specifies the module cache path
-module-interface-preserve-types-as-written
When emitting a module interface, preserve types as they were written in the source
-module-link-name
Library to link against when using this module
-module-list-file
File containing a new-line separated list of modules
-module-load-mode
only-interface|prefer-interface|prefer-serialized|only-serialized
Module loading mode
Name of the module to build
Names of modules
-new-driver-path
Path of the new driver to be used
Diagnose any code that needs to heap allocate (classes, closures, etc.)
-no-clang-include-tree
Do not use clang include tree, fallback to use CAS filesystem to build clang modules
-no-clang-module-breadcrumbs
Don't emit DWARF skeleton CUs for imported Clang modules. Use this when building a redistributable static archive.
-no-color-diagnostics
Do not print diagnostics in color
-no-emit-module-separately-wmo
Force emitting the swiftmodule in the same job in wmo builds
-no-emit-module-separately
Force using merge-module as the incremental build mode
-no-link-objc-runtime
-no-scanner-module-validation
Do not validate binary modules in scanner and delegate the validation to swift-frontend
-no-serialize-debugging-options
Never serialize options for debugging (default: only for apps)
-no-sign-class-ro
Disable signing of the class_ro_t pointer in objc_class structs
disable stack checking
-no-static-executable
Don't statically link the executable
-no-static-stdlib
Don't statically link the Swift standard library
-no-stdlib-rpath
Don't add any rpath entries.
-no-strict-implicit-module-context
Disable the strict forwarding of compilation context to downstream implicit module dependencies
-no-toolchain-stdlib-rpath
Do not add an rpath entry for the toolchain's standard library (default)
-no-verify-emitted-module-interface
Don't check that module interfaces emitted during compilation typecheck
-no-warnings-as-errors
Don't treat warnings as errors
-no-whole-module-optimization
Disable optimizing input files together instead of individually
-nonlib-dependency-scanner
Use calls to `swift-frontend -scan-dependencies` instead of dedicated dependency scanning library
Do not link in the Swift language startup routines
Don't search the standard library import path for modules
Enable multi-threading and specify number of threads
-omit-extension-block-symbols
Directly associate members and conformances with the extended nominal when generating symbol graphs instead of emitting 'swift.extension' symbols for extensions to external types
Compile without any optimization
Compile with optimizations appropriate for a playground
Compile with optimizations and target small code size
Compile with optimizations and remove runtime safety checks
Output directory
-output-file-map
A file which specifies the location of outputs
-output-filelist
Specify outputs in a file rather than on the command line
Compile with optimizations
Write output to <file>
-package-description-version
The version number to be applied on the input for the PackageDescription availability kind
Name of the package the module belongs to
Perform dependency scanning in-parallel.
-parse-as-library
Parse the input file(s) as libraries, not scripts
Parse the input file as SIL code, not Swift source
Parse the input file(s) as the Swift standard library
-parseable-output
Parse input file(s)
Apply the 'program counter simulation' macro
-pch-disable-validation
Disable validating the persistent PCH
Directory to persist automatically created precompiled bridging headers
-placeholder-dependency-module-map-file
Specify a JSON file containing information of external Swift module dependencies
-playground-high-performance
Omit instrumentation that has a high runtime performance impact
-playground-option
Provide an option to the playground transform (if enabled)
Apply the playground semantics and transformation
Add directory to the plugin search path
-prebuilt-module-cache-path
Directory of prebuilt modules for loading module interfaces
-prefix-serialized-debugging-options
Apply debug prefix mappings to serialized debug info in Swiftmodule files
-prespecialize-generic-metadata
Statically specialize metadata for generic types at types that are known to be used in source.
Pretty-print the output JSON
-previous-module-installname-map-file
Path to a Json file indicating module name to installname map for @_originallyDefinedIn
-primary-filelist
Specify primary inputs in a file rather than on the command line
Produce output for this file, not the whole module
Parse and type-check input file(s) and pretty print declarations from AST(s)
Parse and type-check input file(s) and pretty print AST(s)
-print-clang-stats
Print Clang importer statistics
-print-educational-notes
Include educational notes in printed diagnostic output, if available
-print-explicit-dependency-graph
Print the result of module dependency scanning after external module resolution to output
-print-inst-counts
Before IRGen, count all the various SIL instructions. Must be used in conjunction with -print-stats.
-print-llvm-inline-tree
Print the LLVM inline tree.
Print module names in diagnostics
-print-preprocessed-explicit-dependency-graph
Print the result of module dependency scanning to output
Print various statistics
Print target information for the given target <triple>, such as x86_64-apple-macos10.9
-profile-coverage-mapping
Generate coverage data for use with profiled execution counts
-profile-generate
Generate instrumented code to collect execution counts
-profile-stats-entities
Profile changes to stats in -stats-output-dir, subdivided by source entity
-profile-stats-events
Profile changes to stats in -stats-output-dir
Supply a profdata file to enable profile-guided optimization
-protocol-requirement-allow-list
File containing a new-line separated list of protocol names
-public-autolink-library
Add public dependent library
none|failures|all|all-validate
Control access note remarks (default: all)
-Rcache-compile-job
Show remarks for compiler caching
Emit a remark if a cross-import of a module is triggered.
-Rdependency-scan-cache
Emit remarks indicating use of the serialized module dependency scanning cache.
-read-legacy-type-info-path=
Read legacy type layout from the given path instead of default path
-reflection-metadata-for-debugger-only
Emit reflection metadata for debugger only, don't make them available at runtime
-remove-runtime-asserts
Remove runtime safety checks.
REPL mode (the default if there is no input file)
-report-errors-to-debugger
Deprecated, will be removed in future versions.
-require-explicit-availability-target
Suggest fix-its adding @available(<target>, *) to public declarations without availability
-require-explicit-availability=
<error,warn,ignore>
Set diagnostic level to report public declarations without an availability attribute
-require-explicit-availability
Warn on public declarations without an availability attribute
-require-explicit-sendable
Require explicit Sendable annotations on public declarations
-requirement-machine-max-concrete-nesting=
Set the maximum concrete type nesting depth before giving up
-requirement-machine-max-rule-count=
Set the maximum number of rules before giving up
-requirement-machine-max-rule-length=
Set the maximum rule length before giving up
-requirement-machine-max-split-concrete-equiv-class-attempts=
Set the maximum concrete number of attempts at splitting concrete equivalence classes before giving up. There should never be a reason to change this
-resolve-imports
Parse and resolve imports in input file(s)
</usr/lib/swift>
The directory that holds the compiler resource files
-Rindexing-system-module
Emit a remark when indexing a system module
Emit remarks about loaded macro implementations
-Rmodule-api-import
Emit remarks about the import briging in each element composing the API
-Rmodule-interface-rebuild
Emits a remark if an imported module needs to be re-compiled from its module interface
-Rmodule-loading
Emit remarks about loaded module
-Rmodule-recovery
Emit remarks about contextual inconsistencies in loaded modules
-Rmodule-serialization
Emit remarks about module serialization
Report missed transformations by optimization passes whose name matches the given POSIX regular expression
Report performed transformations by optimization passes whose name matches the given POSIX regular expression
-Rskip-explicit-interface-build
Emit a remark if an explicit module interface invocation has an early exit because the expected output is up-to-date
-runtime-compatibility-version
Link compatibility library for Swift runtime version, or 'none'
-sanitize-address-use-odr-indicator
When using AddressSanitizer enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size
-sanitize-coverage=
Specify the type of coverage instrumentation for Sanitizers and additional options separated by commas
-sanitize-recover=
Specify which sanitizer runtime checks (see -sanitize=) will generate instrumentation that allows error recovery. Listed checks should be comma separated. Default behavior is to not allow error recovery.
-sanitize-stable-abi
Link against the Sanitizers stable ABI.
Turn on runtime checks for erroneous behavior.
-save-optimization-record-passes
Only include passes which match a specified regular expression in the generated optimization record (by default, include all passes)
-save-optimization-record-path
Specify the file name of any generated optimization record
-save-optimization-record=
Generate an optimization record file in a specific format (default: YAML)
-save-optimization-record
Generate a YAML optimization record file
Save intermediate compilation results
-scan-dependencies
Scan dependencies of the given Swift sources
-scanner-prefix-map-sdk
Remap paths within SDK reported by dependency scanner
-scanner-prefix-map-toolchain
Remap paths within toolchain directory reported by dependency scanner
-scanner-prefix-map
Remap paths reported by dependency scanner
Compile against <sdk>
-serialize-breaking-changes-path
Serialize breaking changes found by the API digester to <path>
-serialize-debugging-options
Always serialize options for debugging (default: only for apps)
-serialize-dependency-scan-cache
-serialize-diagnostics-path
Emit a serialized diagnostics file to <path>
-serialize-diagnostics
Serialize diagnostics in a binary format
-serialize-module-interface-dependency-hashes
-serialized-path-obfuscate
-show-diagnostics-after-fatal
Keep emitting subsequent diagnostics after a fatal error
Enable signing of the class_ro_t pointer in objc_class structs
-sil-based-debuginfo
Write the SIL into a file and generate debug-info to debug on SIL  level.
-sil-debug-serialization
Do not eliminate functions in Mandatory Inlining/SILCombine dead functions. (for debugging only)
-sil-inline-caller-benefit-reduction-factor
Controls the aggressiveness of performance inlining in -Osize mode by reducing the base benefits of a caller (lower value permits more inlining!)
-sil-inline-threshold
Controls the aggressiveness of performance inlining
-sil-stop-optzns-before-lowering-ownership
Stop optimizing at SIL time before we lower ownership from SIL. Intended only for SIL ossa tests
-sil-unroll-threshold
Controls the aggressiveness of loop unrolling
Verify SIL after each transform
-sil-verify-none
Completely disable SIL verification
-skip-import-in-public-interface
Skip the import statement corresponding to a module name when printing the public interface.
-skip-inherited-docs
Skip emitting doc comments for members inherited through classes or default implementations
-skip-protocol-implementations
Skip emitting symbols that are implementations of protocol requirements or inherited from protocl extensions
-skip-synthesized-members
Skip members inherited through classes or default implementations
-solver-disable-shrink
Disable the shrink phase of expression type checking
-solver-expression-time-threshold=
-solver-memory-threshold
Set the upper bound for memory consumption, in bytes, by the constraint solver
-solver-shrink-unsolved-threshold
Set The upper bound to number of sub-expressions unsolved before termination of the shrink phrase
enable stack checking
-stack-promotion-limit
Limit the size of stack promoted objects to the provided number of bytes.
-static-executable
Statically link the executable
Statically link the Swift standard library
Make this module statically linkable and make the output of -emit-library a static library.
-stats-output-dir
Directory to write unified compilation-statistics files to
-strict-concurrency=
Specify the how strict concurrency checking will be. The value may be 'minimal' (most 'Sendable' checking is disabled), 'targeted' ('Sendable' checking is enabled in code that uses the concurrency model, or 'complete' ('Sendable' and other checking is enabled for all code in the module)
-strict-implicit-module-context
Enable the strict forwarding of compilation context to downstream implicit module dependencies
-string-literals-must-be-ascii-only
Enforce string literals to only allow ASCII characters
-supplementary-output-file-map
Specify supplementary outputs in a file rather than on the command line
-suppress-remarks
Suppress all remarks
-suppress-static-exclusivity-swap
Suppress static violations of exclusive access with swap()
-suppress-warnings
Suppress all warnings
-swift-async-frame-pointer=
One of 'auto', 'always' or 'never'
-swift-isa-ptrauth-mode
Mode for staging isa/super signing. Supported modes are LegacyAndStrip, NewAndStrip and NewAndAuth.
-swift-module-file=
Specify Swift module input explicitly built from textual interface
Only include APIs defined from Swift source
-swift-ptrauth-mode
Mode for staging pointer authentication. Supported modes are LegacyAndStrip, NewAndStrip and NewAndAuth.
Interpret input according to a specific Swift language version number
-switch-checking-invocation-threshold=
-symbol-graph-minimum-access-level
Include symbols with this access level or more when emitting a symbol graph
Width of tab character.
Generate code for a particular CPU variant
-target-min-inlining-version
Require inlinable code with no '@available' attribute to back-deploy to this version of the '-target' OS
-target-sdk-name
Canonical name of the target SDK used for compilation
-target-sdk-version
The version of target SDK used for compilation
-target-variant-sdk-version
The version of target variant SDK used for compilation
Generate 'zippered' code for macCatalyst that can run on the specified variant target triple in addition to the main -target triple
Generate code for the given target <triple>, such as x86_64-apple-macos10.9
-tbd-compatibility-version
The compatibility_version to use in an emitted TBD file
-tbd-current-version
The current_version to use in an emitted TBD file
-tbd-install_name
The install_name to use in an emitted TBD file
-tbd-is-installapi
If the TBD file should indicate it's being generated during InstallAPI
-test-dependency-scan-cache-serialization
After performing a dependency scan, serialize and then deserialize the scanner's internal state.
-testable-import-module
Implicitly import the specified module with @testable
-throws-as-traps
Turn all throw sites into immediate traps
-toolchain-stdlib-rpath
Add an rpath entry for the toolchain's standard library, rather than the OS's
-tools-directory
Look for external executables (ld, clang, binutils) in <directory>
-trace-stats-events
Trace changes to stats in -stats-output-dir
-track-system-dependencies
Track system dependencies while emitting Make-style dependencies
Lower traps to calls to this function instead of trap instructions
-type-info-dump-filter=
One of 'all', 'resilient' or 'fragile'
-typecheck-module-from-interface
Treat the (single) input as a swiftinterface and typecheck it
Parse and type-check input file(s)
-typo-correction-limit
Limit the number of times the compiler will attempt typo correction to <n>
-unavailable-decl-optimization=
Specify the optimization mode for unavailable declarations. The value may be 'none' (no optimization) or 'complete' (code is not generated at all unavailable declarations)
Update Swift code
-use-clang-function-types
Use stored Clang function types for computing canonical types.
-use-frontend-parseable-output
Emit parseable-output from swift-frontend jobs instead of from the driver
-use-interface-for-module
Prefer loading these modules via interface
Register Objective-C classes as if the JIT were in use
Specifies the flavor of the linker to be used
Allocate internal data structures using malloc (for memory debugging)
-use-static-resource-dir
Use resources in the static resource directory
Use tabs for indentation.
-user-module-version
Module version specified from Swift module authors
-validate-clang-modules-once
Don't verify input files for Clang modules if the module has been successfully validated or loaded during this build session
-validate-tbd-against-ir=
Compare the symbols in the IR against the TBD file that would be generated.
-value-recursion-threshold
Set the maximum depth for direct recursion in value types
-verify-additional-file
Verify diagnostics in this file in addition to source files
-verify-additional-prefix
Check for diagnostics with the prefix expected-<PREFIX> as well as expected-
-verify-all-substitution-maps
Verify all SubstitutionMaps on construction
-verify-apply-fixes
Like -verify, but updates the original source file
-verify-debug-info
Verify the binary representation of debug output.
-verify-emitted-module-interface
Check that module interfaces emitted during compilation typecheck
-verify-generic-signatures
Verify the generic signatures in the given module
-verify-ignore-unknown
Allow diagnostics for '<unknown>' location in verify mode
-verify-incremental-dependencies
Enable the dependency verifier for each frontend job
-verify-type-layout
Verify compile-time and runtime type layout information for type
Verify diagnostics against expected-{error|warning|note} annotations
Print version information and exit
Add directory to VFS overlay file
-visualc-tools-root
VisualC++ Tools Root
-visualc-tools-version
VisualC++ ToolSet Version
Show commands to run and use verbose output
-warn-concurrency
Warn about code that is unsafe according to the Swift Concurrency model and will become ill-formed in a future language version
-warn-implicit-overrides
Warn about implicit overrides of protocol members
-warn-long-expression-type-checking
Warns when type-checking a function takes longer than <n> ms
-warn-long-function-bodies
-warn-on-editor-placeholder
Downgrade the editor placeholder error to a warning
-warn-on-potentially-unavailable-enum-case
Deprecated, will be removed in future versions
-warn-swift3-objc-inference-complete
-warn-swift3-objc-inference-minimal
-warnings-as-errors
Treat warnings as errors
-weak-link-at-target
Weakly link symbols for declarations that were introduced at the deployment target. Symbols introduced before the deployment target are still strongly linked.
-whole-module-optimization
Optimize input files together instead of individually
-windows-sdk-root
Windows SDK Root
-windows-sdk-version
Windows SDK Version
-working-directory
Resolve file paths relative to the specified directory
Pass <arg> to the C/C++/Objective-C compiler
Pass <arg> to Clang when it is use for linking.
Pass <arg> to the Swift frontend
Specifies an option which should be passed to the linker
Pass <arg> to LLVM.
<plugin search options>
<linker-specific options>
<swift debug/development internal options>
<swift internal options>
<debug info options>
<automatic crashing options>
<code formatting options>
<optimization level options>
DEBUG/DEVELOPMENT OPTIONS
-working-directory=
-warn-swift3-objc-inference
-warn-long-function-bodies=
-warn-long-expression-type-checking=
--use-interface-for-module
-tbd-install_name=
-tbd-current-version=
-tbd-compatibility-version=
-serialize-parseable-module-interface-dependency-hashes
-serialize-diagnostics-path=
--protocol-requirement-allow-list
-prebuilt-module-cache-path=
-output-file-map=
-module-link-name=
-import-bridging-header
--ignore-spi-group
--generate-name-correction
--generate-migration-script
--generate-empty-baseline
-force-single-frontend-invocation
-experimental-platform-c-calling-convention=
-experimental-explicit-module-build
--enable-remove-deprecated-check
--empty-baseline
-emit-parseable-module-interface
-emit-parseable-module-interface-path
-emit-module-path=
-emit-localized-strings-path=
-emit-loaded-module-trace-path=
-emit-clang-header-path
Emit an Objective-C and C++ header file to <path>
-driver-filelist-threshold=
--disable-remove-deprecated-check
--disable-os-checks
--disable-fail-on-error
-diagnostic-style=
--deserialize-sdk
--deserialize-diff
-debug-constraints-on-line=
-concurrency-model=
--compiler-style-diags
-build-module-from-parseable-interface
-backup-module-interface-path=
--avoid-tool-args
--avoid-location
-access-notes-path=
--abort-on-module-fail
SwiftOptions/ParsedOptions.swift
not a single argument
not a multiple argument
-unlikely-flag-for-testing
label
data
node
labelCounter
nodeIDs
    opts="$opts 
    if [[ $COMP_CWORD == "
" ]]; then
        COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
        return
    fi
    case ${COMP_WORDS[
    return
    ;;
    COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
cur="${COMP_WORDS[COMP_CWORD]}"
prev="${COMP_WORDS[COMP_CWORD-1]}"
COMPREPLY=()
COMPREPLY=( $(compgen -W "$("${COMP_WORDS[0]}" 
 "${COMP_WORDS[@]}")" -- "$cur") )
COMPREPLY=( $(compgen -W "
COMPREPLY=( $(compgen -d -- "$cur") )
COMPREPLY=( $(compgen -f -- "$cur") )
$("${COMP_WORDS[0]}" ---completion 
 "${COMP_WORDS[@]}")
ArgumentParser/CompletionsGenerator.swift
Invalid CompletionShell: 
-r -f -a '(command 
 -- --custom (commandline -opc)[1..-1])'
-r -f -a '(__fish_complete_directories)'
-r -f -a '(for i in 
    set -l currentCommands (
 (commandline -opc))
    set -l expectedCommands (string split "
" $argv[1])
    set -l subcommands (string split "
" $argv[2])
    if [ (count $currentCommands) -ge (count $expectedCommands) ]
        for i in (seq (count $expectedCommands))
            if [ $currentCommands[$i] != $expectedCommands[$i] ]
                return 1
            end
        end
        if [ (count $currentCommands) -eq (count $expectedCommands) ]
            return 0
        end
        if [ (count $subcommands) -gt 1 ]
            for i in (seq (count $subcommands))
                if [ $currentCommands[(math (count $expectedCommands) + 1)] = $subcommands[$i] ]
                    return 1
                end
            end
        end
        return 0
    end
    return 1
# A function which filters options which starts with "-" from $argv.
function 
    set -l results
    for i in (seq (count $argv))
        switch (echo $argv[$i] | string sub -l 1)
            case '-'
            case '*'
                echo $argv[$i]
        end
    end
local context state state_descr line
_commandname=$words[1]
typeset -A opt_args
_custom_completion() {
    local completions=("${(@f)$($*)}")
    _describe '' completions
'(-): :->command'
case $state in
    (command)
        local subcommands
        subcommands=(
        )
        _describe "subcommand" subcommands
        ;;
    (arg)
        case ${words[1]} in
        esac
        ;;
esac
() {
    integer ret=1
    local -a args
    args+=(
    )
    _arguments -w -s -S $args[@] && ret=0
    return ret
{_custom_completion $_
{local -a list; list=(${(f)"$(
)"}); _describe '''' list}
Show help information.
Show the version.
ArgumentParser/Argument.swift
--------------------------------------------------------------------
Can't read a value from a parsable
argument definition.
This error indicates that a property declared with an `@Argument`,
`@Option`, `@Flag`, or `@OptionGroup` property wrapper was neither
initialized to a value nor decoded from command-line arguments.
To get a valid value, either call one of the static parsing methods
(`parse`, `parseAsRoot`, or `main`) or define an initializer that
initializes _every_ property of your parsable type.
--------------------------------------------------------------------
Argument(*definition*)
--experimental-dump-help
ArgumentParser/Flag.swift
Flag(*definition*)
ArgumentParser/NameSpecification.swift
' has not characters to form short option name.
ArgumentParser/Option.swift
Option(*definition*)
ArgumentParser/OptionGroup.swift
OptionGroup(*definition*)
Tree<ParsableCommand.Type>
_TtC14ArgumentParser15ArgumentDecoder
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
ArgumentParser/ArgumentDecoder.swift
experimental-dump-help
ArgumentParser/CommandParser.swift
Unexpected error: 
The ParsableCommand "
" can't have itself as its own subcommand.
generateCompletionScript
ArgumentParser/Parsed.swift
Trying to get the argument set from a resolved/parsed property.
Show subcommand help information.
 <subcommand>' for detailed help.
ArgumentParser/HelpGenerator.swift
' for more information.
Unspecified version
ArgumentParser/UsageGenerator.swift
preferredName cannot be nil for named arguments
Missing required subcommand.
Invalid option: -
Invalid option: 
' does not take any value, but '
' was specified.
Internal error. Invalid state while parsing command-line arguments.
Internal error. Parsing command-line arguments hit unimplemented code path.
Can't generate completion scripts for '
Please use --generate-completion-script=<shell> with one of:
    
Can't autodetect a supported shell.
Please use --generate-completion-script=<shell> with one of:
    
Unknown option '
'. Did you mean '
Missing value for '
 unexpected arguments: '
Unexpected argument '
Value to be set with 
 had already been set with 
Missing one of: '
Missing expected argument '
No value set for non-argument var 
. Replace with a static variable, or let constant.
' is invalid for '
' is invalid for '<
. Please provide one of the following:
. Please provide one of 
SHELL
element
parent
children
long
short
longWithSingleDash
positional
option
flag
serializationVersion
defaultSubcommand
ySaySSGG
ySbG
ySSG
yypG
ySiG
$ss12CaseIterableP
$sSY
xSgz_x_lXX
So8NSStringC
SvSg
SvSgXCSg
SvSg_Spy
GSgAAtXCSg
SvSg_AA
tXCSg
SvSg_SPy
GSgAAtXCSg
_A2At
$sSY
$ss21_ObjectiveCBridgeableP
$ss25ExpressibleByArrayLiteralP
$ss26ExpressibleByStringLiteralP
$ss43ExpressibleByExtendedGraphemeClusterLiteralP
$ss33ExpressibleByUnicodeScalarLiteralP
SaySpy
GSgG
ySaySSGG
SaySSG
_SStG
_SSt
ySSG
ySsG
ySS_SStG
SS_SSt
ySnySiGG
ySS_SitG
SS_Sit
ySpy
GSgG
7ElementSTQz
$sST
$sSt
Say7ElementSTQzG
8IteratorSTQzSg
$s8TSCBasic8ClosableP
yxq_G
yxq__GG
Say7ElementSTQzGIgo_
yypG
So11NSConditionC
_pSg
$s8TSCBasic14DiagnosticDataP
$s8TSCBasic18DiagnosticLocationP
So17OS_dispatch_queueC
Sayy
ySJG
ypSg
ySS_yptG
SS_ypt
4code_t
Si8expected_Si6actualt
$s8TSCBasic10FileSystemP
So6NSLockC
y_So17OS_dispatch_queueCGG
SDySS
xSgXw
_ypt
y_So17OS_dispatch_queueCGSg
y_So17OS_dispatch_queueCG
ySSypG
_yptG
ShyxG
$s8TSCBasic13HashAlgorithmP
SDySS
$s8TSCBasic16JSONSerializableP
SS4json_
_p15underlyingErrort
SayypG
SDySSypG
SS3key_yp5valuetSg
yp3key_yp5valuetSg
$s8TSCBasic12JSONMappableP
SS3key_ypXp8expected
4jsont
SSSg3key_SS7messaget
q_ycxc
q_Sg
5errno_t
$s8TSCBasic24ObjectIdentifierProtocolP
$ss30ExpressibleByDictionaryLiteralP
SnySiG
$sSk
x3key_q_5valuet
yxq_GG
$sSK
$sSl
yxq_GG
SayxG
SDyxq_G
yxGG
yxGG
ySSG
$s8TSCBasic4PathP
4path_
ySaySSGG8iteratort
yS2SG
SSytIegnr_
SSIegg_
ySay
_pGSg
SgXw
SgXwz_Xx
Gz_Xx
GIegg_13stdoutClosure_ABIegg_06stderrB0tSg
ySay
_pGSgz_Xx
So17OS_dispatch_groupC
ScCy
_pGSg
ySay
SaySSG9arguments_
_p15underlyingErrort
6signal_t
ySScSg
SS7program_t
Sb14redirectStderr_t
ySay
Gc6stdout_yABc6stderrSb14redirectStderrt
So17OS_dispatch_groupC4sync_t
ySay
_pG6stdout_AE6stderrt
_pGIegn_
_pGSgz_Xx
y_So17OS_dispatch_queueCGG
So19NSRegularExpressionC
SNySiG
xXMT
yxGG
yxGG
Sbx_xtc
yx_GSg
yx_GSgXw
So12NSFileHandleC
SgXw
SgXwz_Xx
Ieg_
So8NSThreadC
IeyB_
y_xG
$s8TSCBasic14ByteStreamableP
$s8TSCBasic18WritableByteStreamP
SDyS2SG
SSxc
_pxc
Si6offset_SS3key_SS5valuet7elementtSg
SnyxG
_SSt
_SS4pathSaySSG4argst
_SaySSGt
_S2S4destt
SaySsG
ySSG
_pGIegg_
$s10TSCUtility8ArchiverP
GSgSvSgXCSg
ySvSgXCSg
yXCSg
SvSgSPy
GSg_SpyAAGSgtXCSg
SbSvSg_
cSgtXCSg
SbSvSg_
AASbAA_
tXCSgtXCSg
SiSvSgXCSg
SvSgAA_SitXCSg
SbSvSgXCSg
SvSgXCSg
SvSgXCSg
ySvSg_yAAcSgtXCSg
ySvSg_AAyAA_AAtXCSgyAAXCSgtXCSg
SbSvSg_Spy
GSgSiSpyAAGSgtXCSg
ySvSg_SPy
GSgtXCSg
SiSvSg_SPy
GSgSpyABGSgSitXCSg
SbSvSg_SPy
GSgSpy
GSgAGSpyAAGSgtXCSg
SvSgXCSg
SvSgXCSg
SvSgXCSg
SvSgXCSg
SvSgAAXCSg
SbSvSg_SbAAcSgtXCSg
SbSvSg_AASbAA_AAtXCSgtXCSg
ySvSg_Spy
GSgADtXCSg
SvSgAA_SPy
GSgSpyAAGSgtXCSg
SbSvSg_SbAA_SpySbGSgtcSgyAAcSgtXCSg
SbSvSg_S2bAAcSgtXCSg
SbSvSg_
ABSbAAcSgtXCSg
SbSvSg_SpyAAGSgSiACSiSbAAcSgtXCSg
SbSvSg_AASbAA_AASpySbGSgtXCSgAAyAA_AAtXCSgtXCSg
SbSvSg_SbAASbAA_AAtXCSgtXCSg
SbSvSg_
AbASbAA_AAtXCSgtXCSg
SbSvSg_SpyAAGSgSiACSiAASbAA_AAtXCSgtXCSg
ySvSg_Spy
GSgADtXCSg
SvSgXCSg
SvSgXCSg
ySSypG
SS_ypt
ySSSaySS4name_Sb5asynctGG
yS2SG
ySOypG
SO_ypt
ySay
ySSG
$sSY
SaySSG
ypSg
yqd__G
xqd__
_pIeglnzo_
qd__
G0R2_
ySayqd__GG
xSayqd__G
_pIeglgzo_
G0G0R2__
yqd__G
ySayqd__GG
yqd_0_G
xqd__qd_0_
_pIeglnnzo_
qd_0_
G0R3_
yqd_1_G
xqd__qd_0_qd_1_
_pIeglnnnzo_
qd_1_
G0R4_
xqd__Sgqd_0_Sg
_pIeglnnzo_
yqd_0_G
xqd__Sgqd_0_Sgqd_1_Sg
_pIeglnnnzo_
yqd_1_G
G0R5_
xSayqd__GSayqd_0_G
_pIeglggzo_
ySayqd_0_GG
G0G0R3__
G0G0R4__
xSayqd__GSayqd_0_GSayqd_1_G
_pIeglgggzo_
ySayqd_1_GG
G0G0R5__
_pIeglgzo_
$s10TSCUtility16ArgumentProtocolP
SS_SSSg10suggestiont
SS8argument_
5errort
SS6option_t
_SaySSGt
SS5value_t
SS5value_ypXp12expectedTypet
SaySS5value_SS11descriptiontG
$s10TSCUtility12ArgumentKindP
$s10TSCUtility18StringEnumArgumentP
SSSg
_pXp
_pGAA_pXp_
_pztKc
$s10TSCUtility22ArgumentParserProtocolP
SDySS
SDySSypG
Sayyxz_
tKcG
ySsG
ySS4name_
5valuetG
SS4name_
5valuet
_ABtG
_AAt
ySay
ySJG
ySnySiGG
ySS_SbtG
SS_Sbt
ySS4name_Sb5asynctG
SS4name_Sb5asynct
ySJ_SutG
_pIeglgzo_
ySSSgG
yyXlG
SS3key_
5valuet
ySS3key_
5valuetG
ySS_
SaySJG
ySS5value_SS11descriptiontG
ySaySSGG
SnySiG
$sST
$sSl
$sSK
$sSk
$ss12IdentifiableP
$s10TSCUtility16BitstreamVisitorP
8bitWidth_t
13chunkBitWidth_t
8recordID_t
Si5width_t
7blockID_Si06abbrevB0t
7blockID_t
$ss30ExpressibleByDictionaryLiteralP
SDySOypG
yS2SSgG
yS2S4name_Sb5asynctG
ySSSDySSSaySS4name_Sb5asynctGGG
ySSSDyS2SGG
SO3key_yp5valuet
SO3key_yp5valuetSg
_pSg
_pSg
_pSg
_pSg
Iegn_
$s10TSCUtility25DiagnosticDataConvertibleP
$s10TSCUtility27DiagnosticLocationProvidingP
_pSg
SgXw
$s10TSCUtility12_FileWatcher33_523063429DB4EF647B5B8BA741A231EDLLP
$s10TSCUtility21FSEventStreamDelegateP
So17OS_dispatch_queueC
ySay
_SStG
_SSt
ySS6method_Sb5asynctG
SS6method_Sb5asynct
ySS_SStG
SS_SSt
ySiG
SvSg
ySS_yptG
ySaySSGG
SDyS2SG
SDySSSaySS4name_Sb5asynctGG
ySDyS2SGG
ySDySSSaySS4name_Sb5asynctGGG
ySSG
SDySSSDyS2SGG
SDySSSDySSSaySS4name_Sb5asynctGGG
SS_SS4name_Sb5asyncttSg
SS3key_SS4name_Sb5asynct5valuetSg
Ieg_
XDXMT
$s10TSCUtility34JSONMessageStreamingParserDelegateP
7Message
xSgXw
yx_G
Si4size_t
_pSg
$s10TSCUtility22AuthorizationProvidingP
SS4name_t
ySSG
_pXp
$s10TSCUtility26PolymorphicCodableProtocolP
yxGG
$s10TSCUtility25ProgressAnimationProtocolP
ShySiG
ySiG
_AAtG
$s10TSCUtility25SimplePersistanceProtocolP
9stateFile_
_p5errort
_pSg
SaySsG
ySO_yptG
_pSg
$s10TSCUtility20TracingEventProtocolP
$s10TSCUtility25TracingCollectionProtocolP
So6NSLockC
$ss12CaseIterableP
SS6triple_t
SS4arch_t
SS2os_t
$ss26ExpressibleByStringLiteralP
$ss43ExpressibleByExtendedGraphemeClusterLiteralP
$ss33ExpressibleByUnicodeScalarLiteralP
SaySSG_Sb18usesLenientParsingt
Si5major_Si5minorSi5patcht
$ss9OptionSetP
$ss10SetAlgebraP
$ss25ExpressibleByArrayLiteralP
yypG
$sSY
$ss12CaseIterableP
Iegr_
$ss9OptionSetP
$ss10SetAlgebraP
$ss25ExpressibleByArrayLiteralP
ycSg
SSSg
Si5index_SS8argumentt
Si5index_SS8argument
6option
17currentDriverKindt
_SbtG
_Sbt
ySnySiGG
ySSG
SaySsG
ySsG
ySbG
yyXlG
yypG
GGSg
SaySSG
SDySSSay
SaySbG
ySOSSG
ySsSiG
ySSSay
yx_G
yx_GG
SDySsSiG
SDySOSSG
_pXpG
SaySSG
SaySsG
$sSY
$ss12CaseIterableP
SSSg
ySSG
ySSG
_pIeggrzo_
qd__
qd__Sg
SSqd__
_pIeggrzo_
Sayqd__G
$s14ArgumentParser13ParsedWrapperP
$ss32ExpressibleByStringInterpolationP
$ss26ExpressibleByStringLiteralP
$ss43ExpressibleByExtendedGraphemeClusterLiteralP
$ss33ExpressibleByUnicodeScalarLiteralP
SaySSG10extensions_t
SaySSGAAc
_pXpSg
SbSg
Sayqd__GSg
ypSg
Sbz_Xx
$ss25ExpressibleByArrayLiteralP
SS_Sb14withSingleDasht
SJ_Sb14allowingJoinedt
_pSg
$s14ArgumentParser20AsyncParsableCommandP
$s14ArgumentParser17AsyncMainProtocolP
7Command
_pXpG
$s14ArgumentParser14EnumerableFlagP
8RawValueSYQz
$s14ArgumentParser013ExpressibleByA0P
yypG
$s14ArgumentParser17ParsableArgumentsP
$s14ArgumentParser0A11SetProviderP
SSSg5label_yp5valuet
_pSg
SgSSyp
_pIegggggrzo_
$s14ArgumentParser26ParsableArgumentsValidator33_D8B6916CE93C2FC7F7BEDE789FAE65F8LLP
$s14ArgumentParser31ParsableArgumentsValidatorErrorP
$s14ArgumentParser15ParsableCommandP
_SitG
_Sit
_pXpG
ySsG
_SStG
_SSt
ySi_
_pXmTSg
$s14ArgumentParser20ArrayWrapperProtocolP
_pXp
$ss30KeyedDecodingContainerProtocolP
SayypG
yypG
_pXpGG
ySnySiGG
ySaySSGG
ySiG
_pXp_AA_pXpt
SayxG
$s14ArgumentParser0A19DefinitionContainerP
$s14ArgumentParser0a32DefinitionContainerExpressibleByA0P
9Contained
ztKc
SS9Contained
_pIeggrzo_
SgSS9Contained
_pIegggggrzo_
7Initial
QzSg
ztKc
SgSS
ztKc
$ss10SetAlgebraP
$ss9OptionSetP
$sST
SnySiG
$sSl
$sSK
$sSk
yyXlG
_SStSg
_pSg
ySSG
ySbG
SgS2S
_pIegggggrzo_
$s14ArgumentParser22DecodableParsedWrapperP
5Value
_pXpGADG
ySSSay
10visibility_t
SSSg5shell_t
_SStG
8previous_AA9duplicateSaySSG13originalInputt
6forKey_t
SgSS
6forKey
_pSg13originalErrort
ypSg_
6forKeyt
Si_Sit
_SSt
Sb8inserted_
17memberAfterInsertt
ySaySSGG
ySaySSGSSG
SaySSGSg
_ypt
ySSSgG
yAAyABySaySSSgGACGGSSGG
yAAySaySSSgGACGGSSG
ySaySSSgGACGG
ySaySSSgGABG
SaySSSgG
ySay
GSSG
SS4text_t
SS7message_SS5usageSS4helpt
SS7message_
8exitCodet
yxGSgXw
yxGG
_pXpGACG
_pXpGACSgIegnr_
_pXp
SaySSGSg
SaySSG
$sSY
SSSg
_topic
_subtopics
_showHidden
driver
subcommand
intro
topic
subtopics
showHidden
build
package
test
repl
AllCases
RawValue
_rawValue
rawValue
_flags
_file
_lbfsize
_cookie
_close
_read
_seek
_write
_extra
_ubuf
_nbuf
_blksize
_offset
RawValue
_ObjectiveCType
_base
_size
ArrayLiteralElement
StringLiteralType
ExtendedGraphemeClusterLiteralType
UnicodeScalarLiteralType
_bytes
cArray
Element
Iterator
items
index
sequence
result
success
failure
RawValue
_condition
message
location
error
warning
note
remark
ignored
behavior
data
queue
handlerQueue
_diagnostics
handlers
defaultLocation
description
device
inode
size
modTime
posixPermissions
fileType
RawValue
kind
path
ioError
mismatchedByteCount
invalidAccess
isDirectory
noEntry
notDirectory
unsupported
unknownOSError
alreadyExistsAtDestination
couldNotChangeDirectory
userUnWritable
userWritable
executable
recursive
onlyFiles
quarantine
root
lock
lockFiles
lockFilesLock
contents
entries
underlyingFileSystem
reference
file
directory
symlink
unexpectedCycle
underlying
bool
double
string
array
dictionary
orderedDictionary
null
malformed
missingKey
typeMismatch
custom
item
lock
body
cachedValue
_lock
unableToAquireLock
fileDescriptor
lockFile
exclusive
shared
storage
type
Value
Element
Index
SubSequence
Indices
Iterator
array
dict
Element
Index
Iterator
SubSequence
Indices
ArrayLiteralElement
array
_impl
startsWithTilde
invalidAbsolutePath
invalidRelativePath
string
Element
Iterator
current
towalk
shouldRecurse
fileSystem
arguments
environmentBlock
exitStatus
output
stderrOutput
nonZeroExit
systemError
illegalUTF8Sequence
terminated
signalled
loggingHandler
workingDirectory
processID
state
stateLock
completionQueue
_launched
launchedLock
outputRedirection
startNewProcessGroup
missingExecutableProgram
workingDirectoryNotSupported
stdinUnavailable
collect
stream
none
readingOutput
outputReady
complete
failed
idle
StringLiteralType
ExtendedGraphemeClusterLiteralType
UnicodeScalarLiteralType
value
cancelled
processes
serialQueue
killTimeout
killingCondition
shouldKill
regex
description
Element
Index
SubSequence
Indices
Iterator
elements
areInIncreasingOrder
RawValue
conjunction
disjunction
head
tail
notEmptyCondition
value
next
other
couldNotFindTmpDir
couldNotCreateUniqueName
prefix
suffix
path
fileHandle
pathExists
pathTooLong
permissionDenied
unresolvablePathComponent
outOfMemory
stream
clearLineString
resetString
boldString
dumb
file
noColor
green
yellow
cyan
white
black
gray
thread
finishedCondition
isFinished
task
_buffered
_buffer
queue
stream
contents
filePointer
error
closeOnDeinit
path
string
count
value
items
transform
separator
range
chdir
close
exec
pipe
posix_spawn
read
setenv
stat
symlink
unsetenv
waitpid
lowerBound
upperBound
RawValue
fileSystem
error_get_description
error_dispose
format_version
store_create
store_dispose
store_units_apply
store_units_apply_f
unit_event_notification_get_events_count
unit_event_notification_get_event
unit_event_notification_is_initial
unit_event_get_kind
unit_event_get_unit_name
store_set_unit_event_handler
store_set_unit_event_handler_f
store_start_unit_event_listening
store_stop_unit_event_listening
store_discard_unit
store_discard_record
store_purge_stale_data
store_get_unit_name_from_output_path
store_get_unit_modification_time
symbol_get_language
symbol_get_kind
symbol_get_subkind
symbol_get_properties
symbol_get_roles
symbol_get_related_roles
symbol_get_name
symbol_get_usr
symbol_get_codegen_name
symbol_relation_get_roles
symbol_relation_get_symbol
occurrence_get_symbol
occurrence_relations_apply
occurrence_relations_apply_f
occurrence_get_roles
occurrence_get_line_col
record_reader_create
record_reader_dispose
record_reader_search_symbols
record_reader_symbols_apply
record_reader_occurrences_apply
record_reader_occurrences_in_line_range_apply
record_reader_occurrences_of_symbols_apply
record_reader_search_symbols_f
record_reader_symbols_apply_f
record_reader_occurrences_apply_f
record_reader_occurrences_in_line_range_apply_f
record_reader_occurrences_of_symbols_apply_f
unit_reader_create
unit_reader_dispose
unit_reader_get_provider_identifier
unit_reader_get_provider_version
unit_reader_get_modification_time
unit_reader_is_system_unit
unit_reader_is_module_unit
unit_reader_is_debug_compilation
unit_reader_has_main_file
unit_reader_get_main_file
unit_reader_get_module_name
unit_reader_get_working_dir
unit_reader_get_output_file
unit_reader_get_sysroot_path
unit_reader_get_target
unit_dependency_get_kind
unit_dependency_is_system
unit_dependency_get_filepath
unit_dependency_get_modulename
unit_dependency_get_name
unit_include_get_source_path
unit_include_get_target_path
unit_include_get_source_line
unit_reader_dependencies_apply
unit_reader_includes_apply
unit_reader_dependencies_apply_f
unit_reader_includes_apply_f
data
length
rawValue
wait_initial_sync
RawValue
RawValue
ArgumentKindTy
unknownOption
invalidValue
expectedValue
unexpectedArgument
expectedArguments
duplicateArgument
unknown
typeMismatch
custom
bash
function
values
none
unspecified
filename
path
oneByOne
upToNextOption
remaining
name
shortName
strategy
usage
completion
isOptional
kind
isArray
parseClosure
subparsers
optionArguments
positionalArguments
commandName
overview
seeAlso
isSubparser
canAcceptPositionalArguments
results
parentResult
parser
subparser
bodies
currentArgument
associatedArgumentValue
argumentsIterator
buffer
offset
bufferOverflow
Element
Iterator
Index
SubSequence
Indices
RawValue
signature
elements
blockInfo
block
record
fields
payload
array
char6String
blob
none
name
recordNames
value
operands
literal
fixed
char6
setBID
blockName
setRecordName
rawValue
cursor
blockInfo
globalAbbrevs
invalidBlockInfoRecord
abbrevWidthTooSmall
noSuchAbbrev
missingEndBlock
invalidAbbrev
nestedBlockInBlockInfo
missingSETBID
vbrOverflow
data
currentValue
currentBit
codeBitWidth
currentAbbreviations
blockScope
blockInfoRecords
currentBlockID
abbrevs
values
previousCodeWidth
lengthPlaceholderByteIndex
previousAbbrevs
cCompilerFlags
cxxCompilerFlags
linkerFlags
swiftCompilerFlags
Value
backing
anyError
name
packagePath
reference
fatalError
paths
_watcher
latency
stream
delegate
thread
runLoop
callbacksQueue
unknownError
block
_impl
name
module
testMethods
methods
isAsync
store
instance
path
dylib
rawValue
open
close
thread
signalHandler
delegate
buffer
state
decoder
parsingMessage
parsingMessageSize
parsingNewlineAfterMessage
failed
reason
underlyingError
machines
fileNotFound
unreadableFile
invalidFilePath
machineNotFound
invalidDefaultMachinePosition
name
login
password
couldNotFindConfigFile
parsingError
prohibitedFlags
diagnostics
pkgConfigStack
name
pcFile
cFlags
libs
fileSystem
variables
dependencies
privateDependencies
linux
android
darwin
windows
debian
fedora
value
stream
header
displayedPercentages
hasDisplayedHeader
lastDisplayedText
terminal
hasDisplayedProgress
animation
RawValue
versionNumber
diagnostics
badMagic
unexpectedTopLevelRecord
unknownBlock
malformedRecord
noMetadataBlock
unexpectedSubblock
unexpectedRecord
missingInformation
text
level
location
category
flag
ranges
fixIts
ignored
note
warning
error
fatal
remark
filename
line
column
offset
start
metadata
diagnostic
fields
payload
array
char6String
blob
none
fileSystem
schemaVersion
supportedSchemaVersions
statePath
otherStatePaths
prettyPrint
invalidSchemaVersion
restoreFailure
RawValue
asyncBegin
asyncEnd
name
startTs
lock
_events
RawValue
AllCases
tripleString
arch
vendor
osVersion
abiVersion
badFormat
unknownArch
unknownOS
x86_64
x86_64h
i686
powerpc
powerpc64le
s390x
aarch64
amd64
armv7
armv6
armv5
arm64
arm64e
wasm32
riscv64
mips
mipsel
mips64
mips64el
unknown
apple
darwin
macOS
linux
windows
wasi
openbsd
other
android
RawValue
concise
verbose
debug
StringLiteralType
ExtendedGraphemeClusterLiteralType
UnicodeScalarLiteralType
major
minor
patch
prereleaseIdentifiers
buildMetadataIdentifiers
nonASCIIVersionString
invalidVersionCoreIdentifiersCount
nonNumericalOrEmptyVersionCoreIdentifiers
nonAlphaNumerHyphenalPrereleaseIdentifiers
nonAlphaNumerHyphenalBuildMetadataIdentifiers
version
isDevelopment
buildIdentifier
RawValue
Element
ArrayLiteralElement
rawValue
open
close
RawValue
AllCases
interactive
batch
Element
RawValue
ArrayLiteralElement
rawValue
spelling
kind
aliasFunction
attributes
metaVar
helpText
group
input
flag
joined
separate
joinedOrSeparate
remaining
commaJoined
unknownOption
missingArgument
unsupportedOption
options
$__lazy_storage_$_groupMap
codeFormatting
debugCrash
internal
internalDebug
linkerOption
modes
pluginSearch
option
argument
index
single
multiple
none
parsedOptions
optionIndex
groupIndex
consumed
unknownFlags
root
label
data
children
node
labelCounter
nodeIDs
RawValue
AllCases
rawValue
Value
_parsedValue
base
StringInterpolation
StringLiteralType
ExtendedGraphemeClusterLiteralType
UnicodeScalarLiteralType
abstract
discussion
valueName
visibility
base
default
hidden
private
kind
list
file
shellCommand
custom
default
directory
RawValue
message
rawValue
base
helpRequest
dumpRequest
Value
_parsedValue
base
prefixedNo
prefixedEnableDisable
exclusive
chooseFirst
chooseLast
ArrayLiteralElement
elements
base
customLong
customShort
long
short
Value
_parsedValue
base
Value
_parsedValue
_visibility
_dummy
title
commandName
_superCommandName
abstract
usage
discussion
version
shouldDisplay
subcommands
defaultSubcommand
helpNames
_options
options
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
underlying
parsedElement
type
value
wrongKeyType
topLevelHasNoUnkeyedContainer
topLevelHasNoSingleValueContainer
singleValueDecoderHasNoContainer
base
currentIndex
array
Contained
Initial
default
scanningForValue
unconditional
upToNextOption
allRemainingInput
postTerminator
allUnrecognized
kind
help
completion
parsingStrategy
update
initial
options
defaultValue
keys
allValues
isComposite
abstract
discussion
valueName
visibility
parentTitle
nullary
unary
named
positional
rawValue
ArrayLiteralElement
Element
RawValue
Element
Iterator
Index
SubSequence
Indices
content
namePositions
commandStack
parserError
visibility
_generateCompletionScript
generateCompletionScript
name
path
_elements
ArrayLiteralElement
argumentIndex
defaultValue
long
short
longWithSingleDash
value
definition
value
inputOrigin
shouldClearArrayIfParsed
elements
originalInput
capturedUnrecognizedArguments
helpRequested
completionScriptRequested
completionScriptCustomResponse
unsupportedShell
unknownOption
invalidOption
nonAlphanumericShortOption
missingValueForOption
unexpectedValueForOption
unexpectedExtraValues
duplicateExclusiveValues
noValue
unableToParseValue
userValidationError
noArguments
versionRequested
dumpHelpRequested
notImplemented
invalidState
missingSubcommand
wrongType
subcommandLevelMismatch
subcommandLevelMissing
subcommandLevelDuplicated
subcommandNameMismatch
expectedCommandButNoneFound
_elements
firstUnused
originalInput
inputIndex
subIndex
value
index
option
terminator
name
nameWithValue
rawValue
RawValue
complete
_subcommands
_help
commandStack
visibility
subcommands
help
header
elements
discussion
isSubcommands
commandStack
abstract
usage
sections
discussionSections
label
title
positionalArguments
subcommands
options
content
help
validation
other
element
parent
children
recursiveSubcommand
RawValue
serializationVersion
command
superCommands
commandName
abstract
discussion
defaultSubcommand
subcommands
arguments
kind
shouldDisplay
sectionTitle
isOptional
isRepeating
names
preferredName
valueName
defaultValue
allValues
name
long
short
longWithSingleDash
positional
option
flag
dealloc
JSONObjectWithData:options:error:
skipDescendants
.cxx_destruct
initWithString:
URLForDirectory:inDomain:appropriateForURL:create:error:
URLsForDirectory:inDomains:
attributesOfItemAtPath:error:
broadcast
changeCurrentDirectoryPath:
code
contentsOfDirectoryAtPath:error:
copyItemAtURL:toURL:error:
count
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
createSymbolicLinkAtPath:withDestinationPath:error:
currentDirectoryPath
defaultManager
domain
doubleValue
environment
fileExistsAtPath:
fileExistsAtPath:isDirectory:
init
initFileURLWithPath:
initWithBlock:
initWithBool:
initWithFileDescriptor:closeOnDealloc:
initWithInteger:
initWithPattern:options:error:
integerValue
isExecutableFileAtPath:
isReadableFileAtPath:
isWritableFileAtPath:
length
lock
main
matchesInString:options:range:
moveItemAtURL:toURL:error:
nextObject
numberOfRanges
processInfo
range
rangeAtIndex:
rangeWithName:
removeItemAtPath:error:
resourceValuesForKeys:error:
setAttributes:ofItemAtPath:error:
shortValue
signal
start
stringByReplacingMatchesInString:options:range:withTemplate:
substringWithRange:
unlock
unsignedLongLongValue
wait
waitUntilDate:
-abi
<vers>
<path>
<path>
-assert-config
-avoid-location
-baseline-dir
-baseline-path
<path>
-blocklist-file
<path>
<path>
-bsdk
<path>
-cas-backend
-cas-fs
<cas-id>
<name>=<option>
<path>
<cas-id>
-clang-target
<path>
<path>
<line>
-debug-cycles
-debug-mapping
<macro>
-diagnose-sdk
<path>
<style>
<path>
-digester-mode
<api|abi>
-disable-cmo
--driver-mode=
-dump-api-path
-dump-ast
-dump-jit
<path>
-dump-parse
-dump-pcm
-dump-sdk
-dump-type-info
-dump-usr
-dwarf-version=
<version>
-embed-bitcode
<path>
<path>
-emit-assembly
-emit-bc
<path>
<path>
<path>
<path>
-emit-irgen
-emit-ir
-emit-library
<path>
<path>
<path>
<path>
<path>
<path>
<path>
<path>
<path>
<path>
<path>
-emit-module
<path>
-emit-object
<path>
-emit-pch
-emit-pcm
<path>
<path>
<path>
-emit-sibgen
-emit-sib
-emit-silgen
-emit-sil
<dir>
-emit-tbd-path
<path>
-empty-baseline
true|false
true|false
true|false
-enable-testing
<enforcement>
<string>
<path>
-export-as
<path>
-filelist
-find-usr
-fixit-all
-framework
-Fsystem
-gcc-toolchain
<path>
-gdwarf-types
-gnone
-gsil
-help-hidden
-help
-iframework
-ignored-usrs
<path>
-import-module
-import-prescan
-in-place
-incremental
-indent-width
<path>
-index-file
<path>
<path>
-input-file-key
-input-paths
<path>
-jit-build
-json
-ld-path=
-libc
-library-level
<level>
-line-range
<n:n>
Deprecated
-lldb-repl
<path>
-locale
<locale-code>
<path>
-location
<location>
-lto-library
<lto-library>
-lto=
-merge-modules
-migrator
<level>
-module-alias
-module-name
-module
<name>
<path>
-no-allocations
Deprecated
-no-stack-check
-nostartfiles
-nostdimport
-num-threads
-Onone
-Oplayground
-Osize
-Ounchecked
-output-dir
<dir>
<path>
<file>
<vers>
-package-name
-parallel-scan
-parse-sil
-parse-stdlib
-parse
-pc-macro
-pch-output-dir
<path>
-playground
-plugin-path
-pretty-print
<path>
-primary-file
-print-ast-decl
-print-ast
-print-module
-print-stats
<triple>
-profile-use=
<profdata>
<path>
-Raccess-note
-Rcross-import
-repl
<target>
-resource-dir
-Rmacro-loading
-Rpass-missed=
-Rpass=
<type>
<check>
-sanitize=
<check>
<regex>
<format>
-save-temps
<path>
<path>
-sdk
<sdk>
<path>
<path>
-sign-class-ro
<50>
<250>
-sil-verify-all
-stack-check
-static-stdlib
-static
<mode>
<name>=<path>
-swift-only
<mode>
-swift-version
<vers>
<level>
-tab-width
-target-cpu
-target-variant
-target
<triple>
<version>
<version>
<path>
<directory>
-trap-function
<name>
-typecheck
<complete,none>
-update-code
<name>
-use-jit
-use-ld=
-use-malloc
-use-tabs
<vers>
<level>
<module-name>
<type>
-verify
-version
-vfsoverlay
<root>
<version>
<root>
<version>
<path>
-Xcc
<arg>
-Xclang-linker
<arg>
-Xfrontend
<arg>
-Xlinker
-Xllvm
<arg>
bash
GIT_SSH_COMMAND
GIT_SSH_COMMAND
pkg-config
uname
help
version
bash
fish
swift_help
SwiftHelp
CodingKeys
HelpTopic
Subcommand
__sFILE
OSSignpostType
Nos_signpost_type_t
FileAttributeKey
NNSFileAttributeKey
OSLogType
Nos_log_type_t
FileAttributeType
NNSFileAttributeType
Foundation
__sbuf
URLResourceKey
NNSURLResourceKey
'?Wo
TSCBasic
ByteString
TSCBasic
CStringArray
TSCBasic
CacheableSequence
CacheableSequenceIterator
TSCBasic
Closable
TSCBasic
CodableResult
CodingKeys
TSCBasic
Condition
TSCBasic
DeltaAlgorithm
DiagnosticsEngine
TSCBasic
DiagnosticData
DiagnosticLocation
Diagnostic
Behavior
Message
StringDiagnostic
UnknownLocation
TSCBasic
FileInfo
CodingKeys
"*2:
'4AN[
TSCBasic
FileSystemError
Kind
FileMode
Option
FileSystemAttribute
FileSystem
InMemoryFileSystem
Node
DirectoryContents
RerootedFileSystemView
NodeContents
WeakReference
LocalFileSystem
TSCBasic
GraphError
TSCBasic
HashAlgorithm
SHA256
CryptoKitSHA256
_CryptoKitSHA256
FIMR[
TSCBasic
JSON
JSONSerializable
JSONDecodingError
TSCBasic
JSONMappable
MapError
TSCBasic
KeyedPair
TSCBasic
LazyCache
TSCBasic
Lock
ProcessLockError
FileLock
LockType
TSCBasic
OSLog
OSLogType
OSSignpostType
OSSignpostID
TSCBasic
ObjectIdentifierProtocol
TSCBasic
OrderedDictionary
TSCBasic
OrderedSet
TSCBasic
AbsolutePath
RelativePath
Path
PathValidationError
UNIXPath
TSCBasic
RecursibleDirectoryContentsGenerator
TSCBasic
ProcessResult
Error
ExitStatus
Process
OutputRedirection
State
TSCBasic
ProcessEnvironmentKey
ProcessEnv
TSCBasic
ProcessSetError
ProcessSet
TSCBasic
RegEx
TSCBasic
StringError
CodingKeys
TSCBasic
SortedArray
TSCBasic
LocalizedJoinType
TSCBasic
SynchronizedQueue
Node
TSCBasic
TempFileError
TemporaryFile
MakeDirectoryError
TSCBasic
TerminalController
TerminalType
Color
TSCBasic
Thread
ThreadImpl
TSCBasic
ByteStreamable
WritableByteStream
_WritableByteStreamBase
ThreadSafeOutputByteStream
Format
BufferedOutputByteStream
FileOutputByteStream
LocalFileOutputByteStream
TransformedSeparatedListStreamable
SeparatedListStreamable
JSONEscapedTransformedStringListStreamable
JSONEscapedDictionaryStreamable
JSONEscapedStringListStreamable
JSONEscapedStringStreamable
JSONEscapedDoubleStreamable
JSONEscapedIntStreamable
JSONEscapedBoolStreamable
RepeatingStringStreamable
TSCBasic
CodableRange
SystemError
CodingKeys
<self>
TSCUtility
Archiver
ZipArchiver
indexstore_functions_t
CFRunLoop
NCFRunLoopRef
indexstore_unit_dependency_kind_t
indexstore_symbol_subkind_t
indexstore_symbol_kind_t
indexstore_symbol_language_t
indexstore_unit_event_listen_options_t
indexstore_unit_event_kind_t
indexstore_string_ref_t
TSCUtility
ArgumentParserError
ArgumentConversionError
Shell
ShellCompletion
ArgumentKind
StringEnumArgument
PathArgument
ArrayParsingStrategy
ArgumentProtocol
ArgumentKindTy
OptionArgument
PositionalArgument
AnyArgument
ArgumentParserProtocol
ArgumentParser
Result
ArgumentBinder
Parser
Error
Cursor
TSCUtility
Bits
TSCUtility
Bitcode
BitcodeElement
Block
Record
Payload
BlockInfo
Signature
BitstreamVisitor
Bitstream
Abbreviation
Operand
BlockInfoCode
BlockID
AbbreviationID
BitcodeError
Error
TSCUtility
BitstreamReader
TSCUtility
BitstreamWriter
BlockInfo
RecordBuffer
Block
TSCUtility
BuildFlags
CodingKeys
TSCUtility
Context
TSCUtility
DiagnosticDataConvertible
DiagnosticLocationProviding
AnyDiagnostic
PackageLocation
Local
Remote
Diagnostics
TSCUtility
FSWatch
_FileWatcher
FSEventStreamDelegate
FSEventStream
Error
_WatcherDelegate
TSCUtility
TSCUtility
IndexStore
TestCaseClass
TestMethod
IndexStoreAPI
IndexStoreImpl
IndexStoreAPIImpl
_DLHandle
_DLError
TSCUtility
InterruptHandler
TSCUtility
JSONMessageStreamingParserDelegate
Message
JSONMessageStreamingParser
State
ParsingError
TSCUtility
AuthorizationProviding
Netrc
Error
Machine
TSCUtility
SignpostName
TSCUtility
PkgConfigError
PCFileFinder
LoadingContext
PkgConfig
PkgConfigParser
TSCUtility
Platform
LinuxFlavor
TSCUtility
PolymorphicCodableProtocol
PolymorphicCodable
PolymorphicCodableArray
CodingKeys
TSCUtility
ProgressAnimationProtocol
SingleLinePercentProgressAnimation
MultiLineNinjaProgressAnimation
RedrawingNinjaProgressAnimation
NinjaProgressAnimation
MultiLinePercentProgressAnimation
RedrawingLitProgressAnimation
PercentProgressAnimation
DynamicProgressAnimation
TSCUtility
SerializedDiagnostics
Error
Diagnostic
Level
SourceLocation
FixIt
OwnedRecord
BlockID
Payload
TSCUtility
SimplePersistanceProtocol
SimplePersistence
Error
TSCUtility
TracingEventType
TracingEventProtocol
TracingCollectionProtocol
TracingEvent
TracingCollection
CodingKeys
#(-27;@DHNRVZ
5&,0
eQV\`
TSCUtility
Triple
Error
Arch
Vendor
CodingKeys
TSCUtility
TSCUtility
Verbosity
TSCUtility
Version
VersionError
TSCUtility
SwiftVersion
Versioning
TSCUtility
DLHandle
DLOpenFlags
DLError
SwiftOptions
DriverKind
SwiftOptions
OptionAttributes
Option
Kind
SwiftOptions
OptionParseError
SwiftOptions
OptionTable
<input>
-cas-path
<path>
Path to CAS
-emit-tbd
Emit a TBD file
-interpret
Immediate mode
Group
SwiftOptions
ParsedOption
Argument
ParsedOptions
SwiftOptions
PrefixTrie
Node
DOTWriter
<vers>
<path>
<path>
<path>
<cas-id>
<path>
Path to 
<name>=<option>
<path>
<path>
<line>
<macro>
<path>
<style>
<api|abi>
<version>
<path>
<path>
<path>
<path>
<path>
<path>
<path>
<dir>
Emit a TBD file
true|false
<enforcement>
<string>
<path>
<path>
<path>
<path>
Immediate mode
<level>
<n:n>
Deprecated
<path>
<locale-code>
<location>
<lto-library>
<level>
<name>
<dir>
<file>
<vers>
<triple>
<profdata>
<target>
<type>
<check>
<regex>
<format>
<sdk>
<path>
<50>
<250>
<mode>
<name>=<path>
<level>
<triple>
<version>
<directory>
<name>
<complete,none>
<level>
<module-name>
<type>
<root>
<version>
<path>
<arg>
<arg>
<arg>
<cas-id>
<name>=<option>
<style>
<version>
<dir>
@help
q.Hg
ArgumentParser
CompletionShell
ArgumentParser
Argument
ArgumentArrayParsingStrategy
ArgumentParser
ArgumentHelp
ArgumentParser
ArgumentVisibility
Representation
ArgumentParser
CompletionKind
Kind
ArgumentParser
ValidationError
ExitCode
CleanExit
Representation
ArgumentParser
Flag
FlagInversion
FlagExclusivity
Representation
ArgumentParser
NameSpecification
Element
Representation
ArgumentParser
Option
SingleValueParsingStrategy
ArrayParsingStrategy
ArgumentParser
OptionGroup
ArgumentParser
AsyncParsableCommand
AsyncMainProtocol
Command
ArgumentParser
CommandConfiguration
ArgumentParser
EnumerableFlag
ArgumentParser
ExpressibleByArgument
ArgumentParser
ParsableArguments
ArgumentSetProvider
_WrappedParsableCommand
CodingKeys
ArgumentParser
ParsableArgumentsValidator
ParsableArgumentsValidatorError
ArgumentParser
ParsableCommand
ArgumentParser
ArgumentDecoder
ParsedArgumentsContainer
ArrayWrapperProtocol
DecodedArguments
SingleValueDecoder
UnkeyedContainer
ArrayWrapper
SingleValueContainer
Error
ArgumentParser
ArgumentDefinitionContainer
Contained Initial
ArgumentDefinitionContainerExpressibleByArgument
ArgumentDefinition
ParsingStrategy
Bare
Update
Help
Kind
Options
ArgumentParser
ArgumentSet
ArgumentParser
CommandError
AutodetectedGenerateCompletions
GenerateCompletions
HelpRequested
CodingKeys
ArgumentParser
InputKey
ArgumentParser
InputOrigin
Element
ArgumentParser
Name
ArgumentParser
ParsedWrapper
Value
DecodableParsedWrapper
Parsed
ArgumentParser
ParsedValues
Element
ArgumentParser
ParserError
InternalParseError
InputIndex
ArgumentParser
ParsedArgument
Value
Element
Index
SplitArguments
SubIndex
ArgumentParser
HelpCommand
CodingKeys
Element
ArgumentParser
HelpGenerator
Section
DiscussionSection
Header
&33ArgumentParser
MessageInfo
&33StandardError
ArgumentParser
Platform
ArgumentParser
Tree
InitializationError
 %.5=EK
ArgumentParserToolInfo
ToolInfoHeader
ToolInfoV0
CommandInfoV0
ArgumentInfoV0
NameInfoV0
KindV0
CodingKeys
swift
swiftc
build
package
test
repl
swift_help/main.swift
cannot find subcommand executable '
USAGE: swift repl <options>
  The Swift REPL runs code interactively with LLDB.
  For most purposes, you can just run `swift repl`.
OPTIONS:
  This mode takes optional Swift Frontend arguments: see `swift --help`.
Welcome to Swift!
Experiment with Swift code interactively
`swift --version`
 for Swift version information.
 for descriptions of available options and flags.
`swift help <subcommand>`
 for more information about a subcommand.
Run package tests
Run a program from a package
Create and work on packages
Build Swift packages
The topic to display help for.
The help subtopics, if applicable.
List hidden (unsupported) options
success
failure
lowerBound
upperBound
DiagnosticsEngine
org.swift.swiftpm.process-set
org.swift.swiftpm.basic.stream
TSCBasic/Base64URL.swift
can't appear here (left=
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_
_TtC8TSCBasic12CStringArray
cArray
items
index
sequence
Did not find a matching key
key value 
DiagnosticsEngine-callback
_TtC8TSCBasic17DiagnosticsEngine
queue
handlerQueue
_diagnostics
handlers
defaultLocation
_TtC8TSCBasic15UnknownLocation
posixPermissions
com.apple.quarantine
TSCBasic/FileSystem.swift
homeDirectory on RerootedFileSystemView is not supported.
cachesDirectory on RerootedFileSystemView is not supported.
tempDirectory on RerootedFileSystemView is not supported.
_TtC8TSCBasic18InMemoryFileSystem
root
lock
lockFiles
lockFilesLock
_TtCC8TSCBasic18InMemoryFileSystemP33_DA6B485C7A646531CFCACE37CF46BC6B4Node
_TtCC8TSCBasic18InMemoryFileSystemP33_DA6B485C7A646531CFCACE37CF46BC6B17DirectoryContents
entries
_TtC8TSCBasic22RerootedFileSystemView
underlyingFileSystem
org.swift.swiftpm.in-memory-file-system.file-queue
TSCBasic/JSON.swift
unexpected object: 
expected array, got 
expected dictionary, got 
expected double, got 
expected bool, got 
expected string, got 
expected int, got 
_TtC8TSCBasic8FileLock
fileDescriptor
lockFile
_TtC8TSCBasic5OSLog
storage
invalid relative path '
'; relative path should not begin with '
invalid absolute path '
'; absolute path must begin with '/'
TSCBasic/Path.swift
_TtC8TSCBasic36RecursibleDirectoryContentsGenerator
current
towalk
shouldRecurse
Swift/arm64e-apple-macos.private.swiftinterface
could not open stdin on this platform
workingDirectory is not supported in this platform
could not find executable for '
illegal UTF8 sequence output
error while executing `
_TtC8TSCBasic7Process
loggingHandler
arguments
environmentBlock
workingDirectory
processID
state
stateLock
completionQueue
_launched
launchedLock
outputRedirection
startNewProcessGroup
swift.org.swift-tsc.process.concurrent
org.swift.tools-support-core.process-completion
<ProcessResult: exit: 
Duplicate values for key: '
_TtC8TSCBasic10ProcessSet
processes
serialQueue
cancelled
killTimeout
killingCondition
shouldKill
Fatal error
Down-casted Array element failed to match the target type
Expected 
NSArray element failed to match the Swift Array Element type
Expected 
head
tail
notEmptyCondition
value
next
<TemporaryFile: 
_TtC8TSCBasic18TerminalController
clearLineString
resetString
boldString
v8@?0
_TtC8TSCBasic6Thread
finishedCondition
isFinished
_TtC8TSCBasicP33_BD395E1927AAEA716B9FD4CEF0145B0F10ThreadImpl
v16@0:8
@24@0:8@?16
@16@0:8
task
TSCBasic.ThreadImpl
init()
TSCBasic/WritableByteStream.swift
Subclasses must implement this
_TtC8TSCBasic23_WritableByteStreamBase
_buffered
_buffer
_TtC8TSCBasic26ThreadSafeOutputByteStream
_TtC8TSCBasic24BufferedOutputByteStream
contents
_TtC8TSCBasic20FileOutputByteStream
_TtC8TSCBasic25LocalFileOutputByteStream
filePointer
error
closeOnDeinit
offset element 
fileCloseImpl() should be implemented by a subclass
org.swift.swiftpm.basic.thread-safe-output-byte-stream
TSCBasic/misc.swift
unsetenv error: 
posix_spawn error: 
strerror_r error: 
generate completion script for Bourne-again shell
generate completion script for Z shell
bash
GIT_TERMINAL_PROMPT
ssh -oBatchMode=yes
asyncBegin
asyncEnd
x86_64
x86_64h
i686
powerpc
powerpc64le
s390x
aarch64
amd64
armv7
armv6
armv5
arm64
arm64e
wasm32
riscv64
mips
mipsel
mips64
mips64el
unknown
apple
darwin
macosx
linux
windows
wasi
openbsd
org.swift.swiftpm.
expected single value for argument: 
expected arguments: 
unexpected argument 
; use --help to list available arguments
 requires a value; provide a value using '
; use --help to print usage
; use --help to list available options
' is not convertible to 
TSCUtility/ArgumentParser.swift
name
shortName
strategy
usage
completion
isOptional
_TtC10TSCUtility11AnyArgument
kind
isArray
parseClosure
_TtC10TSCUtility14ArgumentParser
subparsers
optionArguments
positionalArguments
commandName
overview
seeAlso
isSubparser
canAcceptPositionalArguments
_TtCC10TSCUtility14ArgumentParser6Result
results
parentResult
parser
subparser
bodies
POSITIONAL ARGUMENTS:
Display available options
# Generates completions for 
# In the final compdef file, set the following file header:
#     #compdef 
#     local context state state_descr line
#     typeset -A opt_args
# Parameters
# - the start position of this parser; set to 1 if unknown
    if [[ $COMP_CWORD == $(($1+
    if [[ $COMP_CWORD == $1 ]]; then
        COMPREPLY=( $(compgen -W "
" -- $cur) )
        return
    fi
    case ${COMP_WORDS[$1]} in
 $(($1+1))
            return
        ;;
    COMPREPLY=( $(compgen -W "
" -- $cur) )
    case $prev in
            return
            _filedir
            return
            COMPREPLY=( $(compgen -W "
" -- $cur) )
            return
            return
() {
    arguments=(
    )
    _arguments $arguments && return
    case $state in
        (command)
            local modes
            modes=(
                '
            )
            _describe "mode" modes
            ;;
        (arg)
            case ${words[1]} in
                (
                    
                    ;;
            esac
            ;;
    esac
        '(-): :->command'
        '(-)*:: :->arg'
\[default: .+?\]
TSCUtility/ArgumentParserShellCompletion.swift
TSCUtility/BitstreamReader.swift
TSCUtility/BitstreamWriter.swift
unregistered abbreviation 
cannot emit a field as array or blob
invalid char6 value
lower upper 
endBlock() called with no block registered
_TtC10TSCUtility15BitstreamWriter
currentValue
currentBit
codeBitWidth
currentAbbreviations
blockScope
blockInfoRecords
currentBlockID
_TtCC10TSCUtility15BitstreamWriter9BlockInfo
abbrevs
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789._
cxxCompilerFlags
swiftCompilerFlags
TSCUtility/Context.swift
_TtC10TSCUtility7FSWatch
paths
_watcher
latency
_TtC10TSCUtility13FSEventStream
stream
thread
runLoop
callbacksQueue
org.swift.swiftpm.FSEventStream.callback
check-ref-format
--allow-onelevel
Unable to open store at 
_TtC10TSCUtility10IndexStore
_impl
_TtC10TSCUtility13IndexStoreAPI
_TtC10TSCUtilityP33_B71F9CA8B3630D7C545EABDE61C6A48F14IndexStoreImpl
store
instance
_TtC10TSCUtilityP33_B71F9CA8B3630D7C545EABDE61C6A48F17IndexStoreAPIImpl
path
dylib
_TtC10TSCUtilityP33_B71F9CA8B3630D7C545EABDE61C6A48F9_DLHandle
indexstore_store_create
indexstore_store_get_unit_name_from_output_path
indexstore_unit_reader_create
indexstore_error_get_description
indexstore_unit_reader_dependencies_apply_f
indexstore_unit_reader_get_module_name
indexstore_unit_dependency_get_kind
indexstore_unit_dependency_get_name
indexstore_record_reader_create
indexstore_symbol_get_name
indexstore_symbol_get_properties
indexstore_symbol_get_kind
indexstore_record_reader_occurrences_apply_f
indexstore_occurrence_get_symbol
indexstore_occurrence_relations_apply_f
indexstore_symbol_relation_get_symbol
indexstore_symbol_relation_get_roles
Missing required symbol: 
Unable to get description for error: 
_TtC10TSCUtility16InterruptHandler
signalHandler
delegate
buffer
invalid UTF8 bytes
unexpected JSON message: 
TSCUtility/Netrc.swift
(?:\s*(?<default>default))
(?:\s*account\s+\S++)?
resolution
org.swift.swiftpm
prohibited flag(s): 
parsing error(s): 
couldn't find pc file for 
failed to retrieve search paths with pkg-config; maybe pkg-config is not installed
PKG_CONFIG_SYSROOT_DIR
Unexpected line: 
_TtC10TSCUtility14LoadingContext
pkgConfigStack
Requires.private
Expected version number after 
Text ended before matching quote was found in line: 
Expected a value for variable '
circular dependency detected while parsing 
/usr/local/lib/pkgconfig
/usr/local/share/pkgconfig
/usr/lib/pkgconfig
/usr/share/pkgconfig
/private/var/tmp
/etc/debian_version
/system/bin/toolbox
/system/bin/toybox
/etc/redhat-release
/etc/centos-release
/etc/fedora-release
/etc/system-release
Amazon Linux release 2
Unexpected Codable type code for concrete '
TSCUtility.NinjaProgressAnimation
init(stream:ttyTerminalAnimationFactory:dumbTerminalAnimationFactory:defaultAnimationFactory:)
TSCUtility.PercentProgressAnimation
_TtC10TSCUtility34SingleLinePercentProgressAnimation
header
displayedPercentages
hasDisplayedHeader
_TtC10TSCUtility31MultiLineNinjaProgressAnimation
lastDisplayedText
_TtC10TSCUtility31RedrawingNinjaProgressAnimation
terminal
hasDisplayedProgress
_TtC10TSCUtility22NinjaProgressAnimation
_TtC10TSCUtility33MultiLinePercentProgressAnimation
_TtC10TSCUtility29RedrawingLitProgressAnimation
_TtC10TSCUtility24PercentProgressAnimation
_TtC10TSCUtility24DynamicProgressAnimation
animation
unable to restore state from 
unsupported schema version 
_TtC10TSCUtility17SimplePersistence
fileSystem
schemaVersion
supportedSchemaVersions
statePath
otherStatePaths
prettyPrint
_TtC10TSCUtility17TracingCollection
_events
-print-target-info
TSCUtility/Triple.swift
Failed to parse target info (
Raw compiler output: 
Target info does not contain a triple string (
Target info: 
Failed to parse triple string (
Triple string: 
x86_64-apple-macosx
characters other than alpha-numerics and hyphens in build metadata identifier
characters other than alpha-numerics and hyphens in pre-release identifier
non-numerical characters in version core identifier
empty identifiers in version core '
 identifiers in version core '
non-ASCII characters in version string '
TSCUtility/Version.swift
contains(_:) is unavailable, use contains(version:)
Invalid version string 
 is not a valid version
Swift Package Manager - Swift 
_TtC10TSCUtility8DLHandle
rawValue
Ubuntu clang version 
' is not supported by '
'; did you mean to use '
missing argument value for '
unknown argument: '
SwiftOptions/PrefixTrie.swift
Impossible because we found a child with id 
OVERVIEW: Swift compiler
USAGE: 
Dumping ABI interface
-abort-on-module-fail
Abort if a module failed to load
-access-notes-path
Specify YAML file to override attributes on Swift declarations in this module
-alias-module-names-in-module-interface
When emitting a module interface, disambiguate modules using distinct alias names
-allowable-client
Module names that are allowed to import this module
-always-compile-output-files
Always compile output files even it might not change the results
-analyze-requirement-machine
Print out requirement machine statistics at the end of the compilation job
-api-diff-data-dir
Load platform and version specific API migration data files from <path>. Ignored if -api-diff-data-file is specified.
-api-diff-data-file
API migration data is from <path>
-application-extension-library
Restrict code to those available for App Extension Libraries
-application-extension
Restrict code to those available for App Extensions
Specify the assert_configuration replacement. Possible values are Debug, Release, Unchecked, DisableReplacement.
-assume-single-threaded
Assume that code will be executed in a single-threaded environment
-autolink-force-load
Force ld to link against this module even if no symbols are used
-autolink-library
Add dependent library
-avoid-emit-module-source-info
don't emit Swift source info file
Avoid serializing the file paths of SDK nodes.
-avoid-tool-args
Avoid serializing the arguments for invoking the tool.
-backup-module-interface-path
Directory of module interfaces as backups to those from SDKs
-bad-file-descriptor-retry-count
Number of retrying opening a file if previous open returns a bad file descriptor error.
The path to a directory containing baseline files: macos.json, iphoneos.json, appletvos.json, watchos.json, and iosmac.json
The path to the Json file that we should use as the baseline
-batch-scan-input-file
Specify a JSON file containing modules to perform batch dependencies scanning
add a directory to the baseline framework search path
add a module for baseline input
The path to a blocklist configuration file
-breakage-allowlist-path
An allowlist of breakages to not complain about
-bridging-header-directory-for-print
Directory for bridging header to be printed in compatibility header
-bridging-header-pch-key
Cache Key for bridging header pch
path to the baseline SDK to import frameworks
-bypass-batch-mode-checks
Bypass checks for batch-mode errors.
-bypass-resilience-checks
Ignore all checks for module resilience.
-cache-compile-job
Enable compiler caching
-cache-disable-replay
Skip loading the compilation result from cache
-cache-replay-prefix-map
<prefix=replacement>
Remap paths when replaying outputs from cache
-candidate-module-file
Specify Swift module may be ready to use for an interface
-cas-backend-mode=
native|casid|verify
CASBackendMode for output kind
Enable using CASBackend for object file output
-cas-emit-casid-file
Emit .casid file next to object file when CAS Backend is enabled
Root CASID for CAS FileSystem
-cas-plugin-option
Option pass to CAS Plugin
-cas-plugin-path
Path to CAS Plugin
-check-api-availability-only
Deprecated, has no effect
-check-onone-completeness
Print errors if the compile OnoneSupport module is missing symbols
-checked-async-objc-bridging=
Control whether checked continuations are used when bridging async calls from Swift to ObjC: 'on', 'off' 
-clang-build-session-file
Use the last modification time of <file> as the underlying Clang build session timestamp
-clang-header-expose-decls=
all-public|has-expose-attr
Which declarations should be exposed in the generated clang header.
-clang-header-expose-module
<imported-module-name>=<generated-header-name>
Allow the compiler to assume that APIs from the specified module are exposed to C/C++/Objective-C in another generated header, so that APIs in the current module that depend on declarations from the specified module can be exposed in the generated header.
-clang-include-tree-root
Clang Include Tree CASID
-clang-scanner-module-cache-path
Specifies the Clang dependency scanner module cache path
Separately set the target we should use for internal Clang instance
-code-complete-call-pattern-heuristics
Use heuristics to guess whether we want call pattern completions
-code-complete-inits-in-postfix-expr
Include initializers when completing a postfix expression
-color-diagnostics
Print diagnostics in color
-compare-to-baseline-path
Compare the built module to the baseline at <path> and diagnose breaking changes using the API digester
-compile-module-from-interface
Treat the (single) input as a swiftinterface and produce a module
-compiler-style-diags
Print compiler style diagnostics to stderr.
-concurrency-model
standard|task-to-thread
Which concurrency model is used.  Defaults to standard.
-conditional-runtime-records
Allow removal of runtime metadata records (public types, protocol conformances) based on whether they're used or unused
-const-gather-protocols-file
Specify a list of protocols for extraction of conformances' const values'
-continue-building-after-errors
Continue building, even after errors are encountered
-coverage-prefix-map
Remap source paths in coverage info
-cross-module-optimization
Perform cross-module optimization
-crosscheck-unqualified-lookup
Compare legacy DeclContext- to ASTScope-based unqualified name lookup (for debugging)
-cxx-interop-getters-setters-as-properties
Import getters and setters as computed properties in Swift
-cxx-interoperability-mode=
Enables C++ interoperability; pass 'default' to enable or 'off' to disable
-debug-assert-after-parse
Force an assertion failure after parsing
-debug-assert-immediately
Force an assertion failure immediately
-debug-constraints-attempt
Debug the constraint solver at a given attempt
-debug-constraints-on-line
Debug the constraint solver for expressions on <line>
-debug-constraints
Debug the constraint-based type checker
-debug-crash-after-parse
Force a crash after parsing
-debug-crash-immediately
Force a crash immediately
Print out debug dumps when cycles are detected in evaluation
-debug-diagnostic-names
Include diagnostic names when printing
-debug-emit-invalid-swiftinterface-syntax
Write an invalid declaration into swiftinterface files
-debug-forbid-typecheck-prefix
Triggers llvm fatal_error if typechecker tries to typecheck a decl with the provided prefix name
-debug-generic-signatures
Debug generic signatures
-debug-info-format=
Specify the debug info format type to either 'dwarf' or 'codeview'
-debug-info-store-invocation
Emit the compiler invocation in the debug info.
-debug-inverse-requirements
Print real requirements in -debug_generic_signatures output
Dumping information for debug purposes
-debug-prefix-map
Remap source paths in debug info
-debug-requirement-machine=
Fine-grained debug output from the generics implementation
-debug-time-expression-type-checking
Dumps the time it takes to type-check each expression
-debug-time-function-bodies
Dumps the time it takes to type-check each function body
-debugger-support
Process swift code as if running in the debugger
-debugger-testing-transform
Instrument the code with calls to an intrinsic that record the expected values of local variables so they can be compared against the results from the debugger.
-define-availability
Define an availability macro in the format 'macroName : iOS 13.0, macOS 10.15'
-dependency-scan-cache-path
The path to output the dependency scanner's internal state.
-deprecated-integrated-repl
-deserialize-diff
Deserialize diff items in a JSON file
-deserialize-sdk
Deserialize sdk digester in a JSON file
Diagnose SDK content in JSON file
-diagnostic-documentation-path
Path to diagnostic documentation resources
-diagnostic-style
The formatting style used when printing diagnostics ('swift' or 'llvm')
-diagnostics-editor-mode
Diagnostics will be used in editor
-digester-breakage-allowlist-path
The path to a list of permitted breaking changes the API digester should ignore
Whether the API digester should run in API or ABI mode (defaults to API checking)
-direct-clang-cc1-module-build
Use the specified -Xcc options to build a PCM by using Clang frontend directly, bypassing the Clang driver
-disable-access-control
Don't respect access control restrictions
-disable-actor-data-race-checks
Disable runtime checks for actor data races
-disable-alias-module-names-in-module-interface
When emitting a module interface, disable disambiguating modules using distinct alias names
-disable-all-autolinking
Disable all Swift autolink directives
-disable-arc-opts
Don't run SIL ARC optimization passes.
-disable-ast-verifier
Do not run the AST verifier during compilation. NOTE: This lets the user override the default behavior on whether or not the ASTVerifier is run. The default behavior is to run the verifier when asserts are enabled and not run it when asserts are disabled. NOTE: Can not be used if enable-ast-verifier is used as well
-disable-autolink-frameworks
Disable autolinking against all frameworks
-disable-autolink-framework
Disable autolinking against the provided framework
-disable-autolink-library
Disable autolinking against the provided library
-disable-autolinking-runtime-compatibility-concurrency
Do not use autolinking for the concurrency runtime compatibility library
-disable-autolinking-runtime-compatibility-dynamic-replacements
Do not use autolinking for the dynamic replacement runtime compatibility library
-disable-autolinking-runtime-compatibility
Do not use autolinking for runtime compatibility libraries
-disable-availability-checking
Disable checking for potentially unavailable APIs
-disable-batch-mode
Disable combining frontend jobs into batches
-disable-bridging-pch
Disable automatic generation of bridging PCH files
-disable-building-interface
Disallow building binary module from textual interface
-disable-clang-spi
Don't import Clang SPIs as Swift SPIs
-disable-clang-target
Disable a separately specified target triple for Clang instance to use
-disable-clangimporter-source-import
Disable ClangImporter and forward all requests straight the DWARF importer.
Disable cross-module optimization
-disable-collocate-metadata-functions
Disable collocate metadata functions
-disable-colocate-type-descriptors
Disable colocate type descriptors
-disable-concrete-type-metadata-mangled-name-accessors
Disable concrete type metadata access by mangled name
-disable-constraint-solver-performance-hacks
Disable all the hacks in the constraint solver
-disable-cross-import-overlays
Do not automatically import declared cross-import overlays.
-disable-cxx-interop-requirement-at-import
Do not require C++ interoperability to be enabled when importing a Swift module that enables C++ interoperability
-disable-debugger-shadow-copies
Disable debugger shadow copies of local variables.This option is only useful for testing the compiler.
-disable-deserialization-recovery
Don't attempt to recover from missing xrefs (etc) in swiftmodules
-disable-deserialization-safety
Don't avoid reading potentially unsafe decls in swiftmodules
-disable-diagnostic-passes
Don't run diagnostic passes
-disable-emit-generic-class-ro_t-list
Disable emission of a section with references to class_ro_t of generic class patterns
-disable-experimental-clang-importer-diagnostics
Disable experimental diagnostics when importing C, C++, and Objective-C libraries
-disable-experimental-lifetime-dependence-inference
Disable experimental lifetime dependence inference
-disable-experimental-opened-existential-types
Disable experimental support for implicitly opened existentials
-disable-experimental-parser-round-trip
Disable round trip through the new swift parser
-disable-experimental-string-processing
Disable experimental string processing
-disable-fail-on-error
Don't exit with a nonzero status if errors are emitted
-disable-fragile-relative-protocol-tables
Disable relative protocol witness tables
-disable-generic-metadata-prespecialization
Do not statically specialize metadata for generic types at types that are known to be used in source.
-disable-implicit-backtracing-module-import
Disable the implicit import of the _Backtracing module.
-disable-implicit-concurrency-module-import
Disable the implicit import of the _Concurrency module.
-disable-implicit-string-processing-module-import
Disable the implicit import of the _StringProcessing module.
-disable-implicit-swift-modules
Disable building Swift modules implicitly by the compiler
-disable-import-ptrauth-field-function-pointers
Disable import of custom ptrauth qualified field function pointers
-disable-incremental-imports
Disable cross-module incremental build metadata and driver scheduling for Swift modules
-disable-incremental-llvm-codegen
Disable incremental llvm code generation.
-disable-infer-public-sendable
Disable inference of Sendable conformances for public structs and enums
-disable-interface-lock
Don't lock interface file when building module
-disable-invalid-ephemeralness-as-error
Diagnose invalid ephemeral to non-ephemeral conversions as warnings
-disable-ios-inheritance-for-pound-if-os-on-visionos
Disable '#if os(iOS)' returning 'true' when targeting visionOS against the Internal SDK
-disable-large-loadable-types-reg2mem
Disable large loadable types register to memory pass
-disable-layout-string-value-witnesses-instantiation
Disable runtime instantiation of layout string value witnesses for generic types
-disable-layout-string-value-witnesses
Disable layout string based value witnesses
-disable-legacy-type-info
Completely disable legacy type layout
-disable-lifetime-dependence-diagnostics
Disable lifetime dependence diagnostics for Nonescapable types.
-disable-llvm-optzns
Don't run LLVM optimization passes
-disable-llvm-value-names
Don't add names to local values in LLVM IR
-disable-llvm-verify
Don't run the LLVM IR verifier.
-disable-migrator-fixits
Disable the Migrator phase which automatically applies fix-its
-disable-modules-validate-system-headers
Disable validating system headers in the Clang importer
-disable-named-lazy-import-as-member-loading
Import all of a type's import-as-member globals together, as Swift 5.10 and earlier did; temporary workaround for modules that are sensitive to this change
-disable-named-lazy-member-loading
Disable per-name lazy member loading (obsolete)
-disable-new-llvm-pass-manager
Disable the new llvm pass manager
-disable-new-operator-lookup
Disable the new operator decl and precedencegroup lookup behavior
-disable-nonfrozen-enum-exhaustivity-diagnostics
Allow switches over non-frozen enums without catch-all cases
-disable-nskeyedarchiver-diagnostics
Allow classes with unstable mangled names to adopt NSCoding
-disable-objc-attr-requires-foundation-module
Disable requiring uses of @objc to require importing the Foundation module
-disable-objc-interop
Disable Objective-C interop code generation and config directives
-disable-objective-c-protocol-symbolic-references
Disable objective-c protocol symbolic references
-disable-only-one-dependency-file
Disables incremental build optimization that only produces one dependencies file
-disable-os-checks
Skip OS related diagnostics
-disable-ossa-opts
Don't run SIL OSSA optimization passes.
-disable-playground-transform
Disable playground transformation
-disable-preallocated-instantiation-caches
Avoid preallocating metadata instantiation caches in globals
-disable-previous-implementation-calls-in-dynamic-replacements
Disable calling the previous implementation in dynamic replacements
-disable-print-missing-imports-in-module-interface
Disable adding to the module interface imports used from API and missing from the sources
-disable-readonly-static-objects
Avoid allocating static objects in a read-only data section
-disable-reflection-metadata
Disable emission of reflection metadata for nominal types
-disable-reflection-names
Disable emission of names of stored properties and enum cases inreflection metadata
-disable-relative-protocol-witness-tables
-disable-remove-deprecated-check
Skip diagnosing removal of deprecated symbols
-disable-requirement-machine-concrete-contraction
Disable preprocessing pass to eliminate conformance requirements on generic parameters which are made concrete
-disable-requirement-machine-loop-normalization
Disable stronger minimization algorithm, for debugging only
-disable-requirement-machine-reuse
Disable re-use of requirement machines for minimization, for debugging only
-disable-round-trip-debug-types
Disables verification of debug info mangling
-disable-sandbox
Disable using the sandbox when executing subprocesses
-disable-sil-opaque-values
Disable SIL Opaque Values
-disable-sil-ownership-verifier
Do not verify ownership invariants during SIL Verification 
-disable-sil-partial-apply
Disable use of partial_apply in SIL generation
-disable-sil-perf-optzns
Don't run SIL performance optimization passes
-disable-stack-protector
Disable the stack-protector
-disable-standard-substitutions-in-reflection-mangling
Disable referencing stdlib symbols via mangled names in reflection mangling
-disable-subst-sil-function-types
Disable substituted function types for SIL type lowering of function values
-disable-swift-bridge-attr
Disable using the swift bridge attribute
-disable-swift-specific-llvm-optzns
Don't run Swift specific LLVM optimization passes.
-disable-swift3-objc-inference
-disable-target-os-checking
Disable checking the target OS of serialized modules
-disable-testable-attr-requires-testable-module
Disable checking of @testable
-disable-type-layout
Disable type layout based lowering
-disable-typo-correction
Disable typo correction
-disable-verify-exclusivity
Disable verification of access markers used to enforce exclusivity.
-disallow-use-new-driver
Disable using new swift-driver
-downgrade-typecheck-interface-error
Downgrade error to warning when typechecking emitted module interfaces
-driver-always-rebuild-dependents
Always rebuild dependents of files that have been modified
-driver-batch-count
Use the given number of batch-mode partitions, rather than partitioning dynamically
-driver-batch-seed
Use the given seed value to randomize batch-mode partitions
-driver-batch-size-limit
Use the given number as the upper limit on dynamic batch-mode partition size
-driver-emit-fine-grained-dependency-dot-file-after-every-import
Emit dot files every time driver imports an fine-grained swiftdeps file.
-driver-filelist-threshold
Pass input or output file names as filelists if there are more than <n>
-driver-force-response-files
Force the use of response files for testing
Set the driver mode to either 'swift' or 'swiftc'
-driver-print-actions
Dump list of actions to perform
-driver-print-bindings
Dump list of job inputs and outputs
-driver-print-derived-output-file-map
Dump the contents of the derived output file map
-driver-print-graphviz
Write the job graph as a graphviz file
-driver-print-jobs
Dump list of jobs to execute
-driver-print-output-file-map
Dump the contents of the output file map
-driver-show-incremental
With -v, dump information about why files are being rebuilt
-driver-show-job-lifecycle
Show every step in the lifecycle of driver jobs
-driver-skip-execution
Skip execution of subtasks when performing compilation
-driver-time-compilation
Prints the total time it took to execute all compilation tasks
-driver-use-filelists
Pass input files as filelists whenever possible
-driver-use-frontend-path
Use the given executable to perform compilations. Arguments can be passed as a ';' separated list
-driver-verify-fine-grained-dependency-graph-after-every-import
Debug DriverGraph by verifying it after every import
-driver-warn-unused-options
Emit warnings for any provided options which are unused by the driver
The path to output swift interface files for the compiled source files
Parse and type-check input file(s) and dump AST(s)
-dump-clang-diagnostics
Dump Clang diagnostics to stderr
-dump-clang-lookup-tables
Dump the importer's Swift-name-to-Clang-name lookup tables to stderr
-dump-interface-hash
Parse input file(s) and dump interface token hash(es)
Dump JIT contents
-dump-macro-expansions
Dumps the results of each macro expansion
-dump-migration-states-dir
Dump the input text, output text, and states for migration to <path>
Parse input file(s) and dump AST(s)
Dump debugging information about a precompiled Clang module
-dump-requirement-machine
Enables dumping rewrite systems from the generics implementation
-dump-scope-maps
<expanded-or-list-of-line:column>
Parse and type-check input file(s) and dump the scope map(s)
Dump SDK content to JSON file
Output YAML dump of fixed-size types from all imported modules
-dump-type-refinement-contexts
Type-check input file(s) and dump type refinement contexts(s)
-dump-type-witness-systems
Enables dumping type witness systems from associated type inference
Dump USR for each declaration reference
DWARF debug info version to produce if requested
Marks a conditional compilation flag as true
-embed-bitcode-marker
Embed placeholder LLVM IR data as a marker
Embed LLVM IR bitcode as data
-embed-tbd-for-module
Embed symbols from the module in the emitted tbd file
-emit-abi-descriptor-path
Output the ABI descriptor of current module to <path>
-emit-api-descriptor-path
Output a JSON file describing the module's API to <path>
-emit-api-descriptor
Output a JSON file describing the module's API
Emit assembly file(s) (-S)
Emit LLVM BC file(s)
-emit-clang-header-nonmodular-includes
Augment emitted Objective-C header with textual imports for every included modular import
-emit-const-values-path
Emit the extracted compile-time known values to <path>
-emit-const-values
-emit-dependencies-path
Output basic Make-compatible dependencies file to <path>
-emit-dependencies
Emit basic Make-compatible dependencies files
-emit-digester-baseline-path
Emit a baseline file for the module to <path> using the API digester
-emit-digester-baseline
Emit a baseline file for the module using the API digester
-emit-executable
Emit a linked executable
-emit-extension-block-symbols
Emit 'swift.extension' symbols for extensions to external types instead of directly associating members and conformances with the extended nominal when generating symbol graphs
-emit-fine-grained-dependency-sourcefile-dot-files
Emit dot files for every source file.
-emit-fixits-path
Output compiler fixits as source edits to <path>
-emit-imported-modules
Emit a list of the imported modules
Emit LLVM IR file(s) before LLVM optimizations
Emit LLVM IR file(s) after LLVM optimizations
Emit a linked library
-emit-loaded-module-trace-path
Emit the loaded module trace JSON to <path>
-emit-loaded-module-trace
Emit a JSON file containing information about what modules were loaded
-emit-localized-strings-path
Emit localization keys to <path>
-emit-localized-strings
Emits localization keys for strings passed to APIs needing localization
-emit-macro-expansion-files
Specify when to emit macro expansion file: 'none', 'debug', or 'diagnostics'
-emit-migrated-file-path
Emit the migrated source file to <path>
-emit-module-dependencies-path
Emit a discovered dependencies file for the emit-module task to <path>
-emit-module-doc-path
Output module documentation file <path>
-emit-module-doc
Emit a module documentation file based on documentation comments
-emit-module-interface-path
Output module interface file to <path>
-emit-module-interface
Output module interface file
-emit-module-path
Emit an importable module to <path>
-emit-module-semantic-info-path
Output semantic info of current module to <path>
-emit-module-separately-wmo
Emit module files as a distinct job in wmo builds
-emit-module-serialize-diagnostics-path
Emit a serialized diagnostics file for the emit-module task to <path>
-emit-module-source-info-path
Output module source info file to <path>
-emit-module-source-info
Output module source info file
-emit-module-summary-path
Output module summary file to <path>
-emit-module-summary
Output module summary file
Emit an importable module
-emit-objc-header-path
Emit an Objective-C header file to <path>
-emit-objc-header
Emit an Objective-C header file
Emit object file(s) (-c)
-emit-package-module-interface-path
Output package module interface file to <path>
Emit PCH for imported Objective-C header file
Emit a precompiled Clang module from a module map
-emit-private-module-interface-path
Output private module interface file to <path>
-emit-reference-dependencies-path
Output Swift-style dependencies file to <path>
-emit-reference-dependencies
Emit a Swift-style dependencies file
-emit-remap-file-path
Emit the replacement map describing Swift Migrator changes to <path>
Emit serialized AST + raw SIL file(s)
Emit serialized AST + canonical SIL file(s)
Emit raw SIL file(s)
Emit canonical SIL file(s)
-emit-sorted-sil
When printing SIL, print out all sil entities sorted by name to ease diffing
-emit-stack-promotion-checks
Emit runtime checks for correct stack promotion of objects.
-emit-supported-features
Emit a JSON file including all supported compiler features
-emit-symbol-graph-dir
Emit a symbol graph to directory <dir>
-emit-symbol-graph
Emit a symbol graph
Emit the TBD file to <path>
-emit-verbose-sil
Emit locations during SIL emission
-empty-abi-descriptor
Avoid printing actual module content into ABI descriptor file
Use empty baseline for diagnostics
-enable-access-control
Respect access control restrictions
-enable-actor-data-race-checks
Emit runtime checks for actor data races
-enable-anonymous-context-mangled-names
Enable emission of mangled names in anonymous context descriptors
-enable-ast-verifier
Run the AST verifier during compilation. NOTE: This lets the user override the default behavior on whether or not the ASTVerifier is run. The default behavior is to run the verifier when asserts are enabled and not run it when asserts are disabled. NOTE: Can not be used if disable-ast-verifier is used as well
-enable-autolinking-runtime-compatibility-bytecode-layouts
Enable autolinking for the bytecode layouts runtime compatibility library
-enable-bare-slash-regex
Enable the use of forward slash regular-expression literal syntax
-enable-batch-mode
Enable combining frontend jobs into batches
-enable-bridging-pch
Enable automatic generation of bridging PCH files
-enable-builtin-module
Enables the explicit import of the Builtin module
-enable-cmo-everything
Perform cross-module optimization on everything (all APIs). This is the same level of serialization as Embedded Swift.
-enable-collocate-metadata-functions
Enable collocate metadata functions
-enable-colocate-type-descriptors
Enable colocate type descriptors
-enable-copy-propagation=
true|requested-passes-only|false
Whether to enable copy propagation
-enable-copy-propagation
Run SIL copy propagation with lexical lifetimes to shorten object lifetimes while preserving variable lifetimes.
-enable-cross-import-overlays
Automatically import declared cross-import overlays.
-enable-default-cmo
Perform conservative cross-module optimization
-enable-deserialization-recovery
Attempt to recover from missing xrefs (etc) in swiftmodules
-enable-deserialization-safety
Avoid reading potentially unsafe decls in swiftmodules
-enable-destroy-hoisting=
Whether to enable destroy hoisting
-enable-deterministic-check
Check compiler output determinisim by running it twice
-enable-dynamic-replacement-chaining
Enable chaining of dynamic replacements
-enable-emit-generic-class-ro_t-list
Enable emission of a section with references to class_ro_t of generic class patterns
-enable-experimental-additive-arithmetic-derivation
Enable experimental 'AdditiveArithmetic' derived conformances
-enable-experimental-async-demotion
Enables an optimization pass to demote async functions.
-enable-experimental-async-top-level
Enable experimental concurrency in top-level code
-enable-experimental-concise-pound-file
Enable experimental concise '#file' identifier
-enable-experimental-concurrency
Enable experimental concurrency model
-enable-experimental-cxx-interop
Enable experimental C++ interop code generation and config directives
-enable-experimental-distributed
Enable experimental 'distributed' actors and functions
-enable-experimental-eager-clang-module-diagnostics
Enable experimental eager diagnostics reporting on the importability of all referenced C, C++, and Objective-C libraries
-enable-experimental-feature
Enable an experimental feature
-enable-experimental-flow-sensitive-concurrent-captures
Enable flow-sensitive concurrent captures
-enable-experimental-forward-mode-differentiation
Enable experimental forward mode differentiation
-enable-experimental-lifetime-dependence-inference
Enable experimental lifetime dependence inference
-enable-experimental-move-only
Enable experimental move only
-enable-experimental-named-opaque-types
Enable experimental support for named opaque result types
-enable-experimental-opaque-type-erasure
Type-erases opaque types that conform to @_typeEraser protocols
-enable-experimental-opened-existential-types
Enable experimental support for implicitly opened existentials
-enable-experimental-pairwise-build-block
Enable experimental pairwise 'buildBlock' for result builders
-enable-experimental-static-assert
Enable experimental #assert
-enable-experimental-string-processing
Enable experimental string processing
-enable-explicit-existential-types
Enable experimental support for explicit existential types
-enable-fragile-relative-protocol-tables
Enable relative protocol witness tables
-enable-implicit-backtracing-module-import
Enable the implicit import of the _Backtracing module.
-enable-implicit-dynamic
Add 'dynamic' to all declarations
-enable-import-ptrauth-field-function-pointers
Enable import of custom ptrauth qualified field function pointers
-enable-incremental-imports
Enable cross-module incremental build metadata and driver scheduling for Swift modules
-enable-infer-public-sendable
Enable inference of Sendable conformances for public structs and enums
-enable-invalid-ephemeralness-as-error
Diagnose invalid ephemeral to non-ephemeral conversions as errors
-enable-large-loadable-types-reg2mem
Enable large loadable types register to memory pass
-enable-layout-string-value-witnesses-instantiation
Enable runtime instantiation of layout string value witnesses for generic types
-enable-layout-string-value-witnesses
Enable layout string based value witnesses
-enable-lexical-lifetimes=
Whether to enable lexical lifetimes
-enable-lexical-lifetimes
Enable lexical lifetimes
-enable-library-evolution
Build the module to allow binary-compatible library evolution
-enable-lifetime-dependence-diagnostics
Enable lifetime dependence diagnostics for Nonescapable types.
-enable-llvm-value-names
Add names to local values in LLVM IR
-enable-llvm-vfe
Use LLVM IR Virtual Function Elimination on Swift class virtual tables
-enable-llvm-wme
Use LLVM IR Witness Method Elimination on Swift protocol witness tables
-enable-move-inout-stack-protector
Enable the stack protector by moving values to temporaries
-enable-new-llvm-pass-manager
Enable the new llvm pass manager
-enable-new-operator-lookup
Enable the new operator decl and precedencegroup lookup behavior
-enable-nonfrozen-enum-exhaustivity-diagnostics
Diagnose switches over non-frozen enums without catch-all cases
-enable-nskeyedarchiver-diagnostics
Diagnose classes with unstable mangled names adopting NSCoding
-enable-objc-attr-requires-foundation-module
Enable requiring uses of @objc to require importing the Foundation module
-enable-objc-interop
Enable Objective-C interop code generation and config directives
-enable-objective-c-protocol-symbolic-references
Enable objective-c protocol symbolic references
-enable-only-one-dependency-file
Enables incremental build optimization that only produces one dependencies file
-enable-operator-designated-types
Enable operator designated types
-enable-ossa-complete-lifetimes
Require linear OSSA lifetimes after SILGen
-enable-ossa-modules
Always serialize SIL in ossa form. If this flag is not passed in, when optimizing ownership will be lowered before serializing SIL
-enable-pack-metadata-stack-promotion=
Whether to skip heapifying stack metadata packs when possible.
-enable-pack-metadata-stack-promotion
Skip heapifying stack metadata packs when possible.
-enable-private-imports
Allows this module's internal and private API to be accessed
-enable-relative-protocol-witness-tables
-enable-remove-deprecated-check
Diagnosing removal of deprecated symbols
-enable-requirement-machine-opaque-archetypes
Enable more correct opaque archetype support, which is off by default because it might fail to produce a convergent rewrite system
-enable-resilience
Deprecated, use -enable-library-evolution instead
-enable-round-trip-debug-types
Enables verification of debug info mangling
-enable-sil-opaque-values
Enable SIL Opaque Values
-enable-single-module-llvm-emission
Emit LLVM IR into a single LLVM module in multithreaded mode.
-enable-source-import
Enable importing of Swift source files
-enable-spec-devirt
Enable speculative devirtualization pass.
-enable-stack-protector
Enable the stack protector
-enable-swift3-objc-inference
-enable-target-os-checking
Enable checking the target OS of serialized modules
-enable-testable-attr-requires-testable-module
Enable checking of @testable
Allows this module's internal API to be accessed for testing
-enable-throw-without-try
Allow throwing function calls without 'try'
-enable-type-layout
Enable type layout based lowering
-enable-upcoming-feature
Enable a feature that will be introduced in an upcoming language version
-enable-verify-exclusivity
Enable verification of access markers used to enforce exclusivity.
-enable-volatile-modules
Load Swift modules in memory
-enforce-exclusivity=
Enforce law of exclusivity
-entry-point-function-name
Name of the entry point function
-experimental-allow-module-with-compiler-errors
Attempt to output .swiftmodule, regardless of compilation errors
-experimental-allow-non-resilient-access
Allow non-resilient access by generating all contents besides exportable decls
-experimental-c-foreign-reference-types
Enable experimental C foreign references types (with reference coutning).
-experimental-clang-importer-direct-cc1-scan
Enables swift driver to construct swift-frontend invocations using -direct-clang-cc1-module-build
-experimental-cxx-stdlib
C++ standard library to use; forwarded to Clang's -stdlib flag
-experimental-emit-module-separately
Emit module files as a distinct job
-experimental-force-workaround-broken-modules
Attempt unsafe recovery for imported modules with broken modularization
-experimental-hermetic-seal-at-link
Library code can assume that all clients are visible at linktime, and aggressively strip unused code
-experimental-lazy-typecheck
Type-check lazily as needed to produce requested outputs
-experimental-one-way-closure-params
Enable experimental support for one-way closure parameters
-experimental-package-bypass-resilience
Enable optimization to bypass resilience within a package
-experimental-package-cmo
Enable optimization to perform defalut CMO within a package boundary
-experimental-package-interface-load
Enables loading a package interface if in the same package specified with package-name
-experimental-performance-annotations
-experimental-platform-c-calling-convention
Which calling convention is used to perform non-swift calls. Defaults to llvm's standard C calling convention.
-experimental-print-full-convention
When emitting a module interface or SIL, emit additional @convention arguments, regardless of whether they were written in the source. Also requires -use-clang-function-types to be enabled.
-experimental-skip-all-function-bodies
Skip type-checking function bodies and all SIL generation
-experimental-skip-non-exportable-decls
Skip decls that are not exported to clients
-experimental-skip-non-inlinable-function-bodies-is-lazy
Infer lazy typechecking for -experimental-skip-non-inlinable-function-bodies
-experimental-skip-non-inlinable-function-bodies-without-types
Skip work on non-inlinable function bodies that do not declare nested types
-experimental-skip-non-inlinable-function-bodies
Skip type-checking and SIL generation for non-inlinable function bodies
-experimental-spi-imports
Enable experimental support for SPI imports
-experimental-spi-only-imports
Enable use of @_spiOnly imports
-explain-module-dependency
Emit remark/notes describing why compilaiton may depend on a module with a given name.
-explicit-dependency-graph-format=
Specify the explicit dependency graph output format to either 'json' or 'dot'
-explicit-interface-module-build
Use the specified command-line to build the module from interface, instead of flags specified in the interface
-explicit-module-build
Prebuild module dependencies to make them explicit
-explicit-swift-module-map-file
Specify a JSON file containing information of explicit Swift modules
Module name to use when referenced in clients module interfaces
-external-pass-pipeline-filename
<pass_pipeline_file>
Use the pass pipeline defined by <pass_pipeline_file>
-external-plugin-path
<path>#<plugin-server-path>
Add directory to the plugin search path with a plugin server executable
Executes a line of code provided on the command line
-file-compilation-dir
The compilation directory to embed in the debug info. Coverage mapping is not supported yet.
-file-prefix-map
Remap source paths in debug, coverage, and index info
Specify source inputs in a file rather than on the command line
Find USR for decls by given condition
Apply all fixits from diagnostics without any filtering
-force-public-linkage
Force public linkage for private symbols. Used by LLDB.
-force-struct-type-layouts
Force type layout based lowering for structs
Specifies a framework which should be linked against
-frontend-parseable-output
Emit textual output in a parseable format
Add directory to system framework search path
-function-sections
Emit functions to separate sections.
Add directory to framework search path
Specify a directory where the clang importer and clang linker can find headers and libraries
Emit full DWARF type info.
-generate-empty-baseline
Generate an empty baseline
-generate-migration-script
Compare SDK content in JSON file and generate migration script
-generate-name-correction
Generate name correction template
-gline-tables-only
Emit minimal debug info for backtraces only
Don't emit debug info
-group-info-path
The path to collect the group information of the compiled module
Deprecated, use '-sil-based-debuginfo' instead
Emit debug info. This is the preferred setting for debugging with LLDB.
Display available options, including hidden options
add a directory to the clang importer system framework search path
-ignore-always-inline
Ignore @inline(__always) attributes.
-ignore-module-source-info
Avoid getting source location from .swiftsourceinfo files
-ignore-spi-group
SPI group name to not diagnose about
the file containing USRs of removed decls that the digester should ignore
-import-cf-types
Recognize and import CF types as class types
Implicitly import the specified module
-import-objc-header
Implicitly imports an Objective-C header file
When performing a dependency scan, only identify all imports of the main Swift module sources
-import-underlying-module
Implicitly imports the Objective-C half of a module
Overwrite input file with formatted file.
-include-spi-symbols
Add symbols with SPI information to the symbol graph
Perform an incremental build if possible
-indent-switch-case
Indent cases in switch statements.
Number of characters to indent.
-index-file-path
Produce index data for file <path>
Produce index data for a source file
-index-ignore-clang-modules
Avoid indexing clang modules (pcms)
-index-ignore-stdlib
Avoid emitting index data for the standard library.
-index-ignore-system-modules
Avoid indexing system modules
-index-include-locals
Include local definitions/references in the produced index data.
-index-store-path
Store indexing data to <path>
-index-system-modules
Emit index data for imported serialized swift system modules
-index-unit-output-path-filelist
Specify index unit output paths in a file rather than on the command line
-index-unit-output-path
Use <path> as the output path in the produced index data.
Cache Key for input file
The SDK contents under comparison
-internalize-at-link
Allow internalizing public symbols and vtables at link time (assume all client code of public types is part of the same link unit, or that external symbols are explicitly requested via -exported_symbols_list)
-irgen-always-use-indirect-relative-references
Always emit indirectable relative references as indirect
Add directory to the import search path
JIT compilation mode
Print output in JSON format.
Number of commands to execute in parallel
Specifies the path to the linker to be used
libc runtime library to use
Library distribution level 'api', 'spi' or 'other' (the default)
<start line>:<end line>. Formats a range of lines (1-based). Can only be used with one input file.
-link-objc-runtime
LLDB-enhanced REPL mode
-load-dependency-scan-cache
After performing a dependency scan, serialize the scanner's internal state.
-load-plugin-executable
<path>#<module-names>
Path to a compiler plugin executable and a comma-separated list of module names where the macro types are declared
-load-plugin-library
Path to a dynamic library containing compiler plugins such as macros
Choose a language for diagnostic messages
-localization-path
Path to localized diagnostic messages directory
Filter nodes with the given location.
Perform LTO with <lto-library>
Specify the LTO type to either 'llvm-thin' or 'llvm-full'
Add directory to library link search path
Specifies a library which should be linked against
Merge the input modules without otherwise processing them
-migrate-keep-objc-visibility
When migrating, add '@objc' to declarations that would've been implicitly visible in Swift 3
-migrator-update-sdk
Does nothing. Temporary compatibility flag for Xcode.
-migrator-update-swift
Dump Json suitable for generating migration script
-min-runtime-version
Specify the minimum runtime version to build force on non-Darwin systems
-minimum-access-level
Include symbols with this access level or more
-module-abi-name
ABI name to use for the contents of this module
<alias_name=real_name>
If a source file imports or references module <alias_name>, the <real_name> is used for the contents of the file
-module-cache-path
Specifies the module cache path
-module-interface-preserve-types-as-written
When emitting a module interface, preserve types as they were written in the source
-module-link-name
Library to link against when using this module
-module-list-file
File containing a new-line separated list of modules
-module-load-mode
only-interface|prefer-interface|prefer-serialized|only-serialized
Module loading mode
Name of the module to build
Names of modules
-new-driver-path
Path of the new driver to be used
Diagnose any code that needs to heap allocate (classes, closures, etc.)
-no-clang-include-tree
Do not use clang include tree, fallback to use CAS filesystem to build clang modules
-no-clang-module-breadcrumbs
Don't emit DWARF skeleton CUs for imported Clang modules. Use this when building a redistributable static archive.
-no-color-diagnostics
Do not print diagnostics in color
-no-emit-module-separately-wmo
Force emitting the swiftmodule in the same job in wmo builds
-no-emit-module-separately
Force using merge-module as the incremental build mode
-no-link-objc-runtime
-no-scanner-module-validation
Do not validate binary modules in scanner and delegate the validation to swift-frontend
-no-serialize-debugging-options
Never serialize options for debugging (default: only for apps)
-no-sign-class-ro
Disable signing of the class_ro_t pointer in objc_class structs
disable stack checking
-no-static-executable
Don't statically link the executable
-no-static-stdlib
Don't statically link the Swift standard library
-no-stdlib-rpath
Don't add any rpath entries.
-no-strict-implicit-module-context
Disable the strict forwarding of compilation context to downstream implicit module dependencies
-no-toolchain-stdlib-rpath
Do not add an rpath entry for the toolchain's standard library (default)
-no-verify-emitted-module-interface
Don't check that module interfaces emitted during compilation typecheck
-no-warnings-as-errors
Don't treat warnings as errors
-no-whole-module-optimization
Disable optimizing input files together instead of individually
-nonlib-dependency-scanner
Use calls to `swift-frontend -scan-dependencies` instead of dedicated dependency scanning library
Do not link in the Swift language startup routines
Don't search the standard library import path for modules
Enable multi-threading and specify number of threads
-omit-extension-block-symbols
Directly associate members and conformances with the extended nominal when generating symbol graphs instead of emitting 'swift.extension' symbols for extensions to external types
Compile without any optimization
Compile with optimizations appropriate for a playground
Compile with optimizations and target small code size
Compile with optimizations and remove runtime safety checks
Output directory
-output-file-map
A file which specifies the location of outputs
-output-filelist
Specify outputs in a file rather than on the command line
Compile with optimizations
Write output to <file>
-package-description-version
The version number to be applied on the input for the PackageDescription availability kind
Name of the package the module belongs to
Perform dependency scanning in-parallel.
-parse-as-library
Parse the input file(s) as libraries, not scripts
Parse the input file as SIL code, not Swift source
Parse the input file(s) as the Swift standard library
-parseable-output
Parse input file(s)
Apply the 'program counter simulation' macro
-pch-disable-validation
Disable validating the persistent PCH
Directory to persist automatically created precompiled bridging headers
-placeholder-dependency-module-map-file
Specify a JSON file containing information of external Swift module dependencies
-playground-high-performance
Omit instrumentation that has a high runtime performance impact
-playground-option
Provide an option to the playground transform (if enabled)
Apply the playground semantics and transformation
Add directory to the plugin search path
-prebuilt-module-cache-path
Directory of prebuilt modules for loading module interfaces
-prefix-serialized-debugging-options
Apply debug prefix mappings to serialized debug info in Swiftmodule files
-prespecialize-generic-metadata
Statically specialize metadata for generic types at types that are known to be used in source.
Pretty-print the output JSON
-previous-module-installname-map-file
Path to a Json file indicating module name to installname map for @_originallyDefinedIn
-primary-filelist
Specify primary inputs in a file rather than on the command line
Produce output for this file, not the whole module
Parse and type-check input file(s) and pretty print declarations from AST(s)
Parse and type-check input file(s) and pretty print AST(s)
-print-clang-stats
Print Clang importer statistics
-print-educational-notes
Include educational notes in printed diagnostic output, if available
-print-explicit-dependency-graph
Print the result of module dependency scanning after external module resolution to output
-print-inst-counts
Before IRGen, count all the various SIL instructions. Must be used in conjunction with -print-stats.
-print-llvm-inline-tree
Print the LLVM inline tree.
Print module names in diagnostics
-print-preprocessed-explicit-dependency-graph
Print the result of module dependency scanning to output
Print various statistics
Print target information for the given target <triple>, such as x86_64-apple-macos10.9
-profile-coverage-mapping
Generate coverage data for use with profiled execution counts
-profile-generate
Generate instrumented code to collect execution counts
-profile-stats-entities
Profile changes to stats in -stats-output-dir, subdivided by source entity
-profile-stats-events
Profile changes to stats in -stats-output-dir
Supply a profdata file to enable profile-guided optimization
-protocol-requirement-allow-list
File containing a new-line separated list of protocol names
-public-autolink-library
Add public dependent library
none|failures|all|all-validate
Control access note remarks (default: all)
-Rcache-compile-job
Show remarks for compiler caching
Emit a remark if a cross-import of a module is triggered.
-Rdependency-scan-cache
Emit remarks indicating use of the serialized module dependency scanning cache.
-read-legacy-type-info-path=
Read legacy type layout from the given path instead of default path
-reflection-metadata-for-debugger-only
Emit reflection metadata for debugger only, don't make them available at runtime
-remove-runtime-asserts
Remove runtime safety checks.
REPL mode (the default if there is no input file)
-report-errors-to-debugger
Deprecated, will be removed in future versions.
-require-explicit-availability-target
Suggest fix-its adding @available(<target>, *) to public declarations without availability
-require-explicit-availability=
<error,warn,ignore>
Set diagnostic level to report public declarations without an availability attribute
-require-explicit-availability
Warn on public declarations without an availability attribute
-require-explicit-sendable
Require explicit Sendable annotations on public declarations
-requirement-machine-max-concrete-nesting=
Set the maximum concrete type nesting depth before giving up
-requirement-machine-max-rule-count=
Set the maximum number of rules before giving up
-requirement-machine-max-rule-length=
Set the maximum rule length before giving up
-requirement-machine-max-split-concrete-equiv-class-attempts=
Set the maximum concrete number of attempts at splitting concrete equivalence classes before giving up. There should never be a reason to change this
-resolve-imports
Parse and resolve imports in input file(s)
</usr/lib/swift>
The directory that holds the compiler resource files
-Rindexing-system-module
Emit a remark when indexing a system module
Emit remarks about loaded macro implementations
-Rmodule-api-import
Emit remarks about the import briging in each element composing the API
-Rmodule-interface-rebuild
Emits a remark if an imported module needs to be re-compiled from its module interface
-Rmodule-loading
Emit remarks about loaded module
-Rmodule-recovery
Emit remarks about contextual inconsistencies in loaded modules
-Rmodule-serialization
Emit remarks about module serialization
Report missed transformations by optimization passes whose name matches the given POSIX regular expression
Report performed transformations by optimization passes whose name matches the given POSIX regular expression
-Rskip-explicit-interface-build
Emit a remark if an explicit module interface invocation has an early exit because the expected output is up-to-date
-runtime-compatibility-version
Link compatibility library for Swift runtime version, or 'none'
-sanitize-address-use-odr-indicator
When using AddressSanitizer enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size
-sanitize-coverage=
Specify the type of coverage instrumentation for Sanitizers and additional options separated by commas
-sanitize-recover=
Specify which sanitizer runtime checks (see -sanitize=) will generate instrumentation that allows error recovery. Listed checks should be comma separated. Default behavior is to not allow error recovery.
-sanitize-stable-abi
Link against the Sanitizers stable ABI.
Turn on runtime checks for erroneous behavior.
-save-optimization-record-passes
Only include passes which match a specified regular expression in the generated optimization record (by default, include all passes)
-save-optimization-record-path
Specify the file name of any generated optimization record
-save-optimization-record=
Generate an optimization record file in a specific format (default: YAML)
-save-optimization-record
Generate a YAML optimization record file
Save intermediate compilation results
-scan-dependencies
Scan dependencies of the given Swift sources
-scanner-prefix-map-sdk
Remap paths within SDK reported by dependency scanner
-scanner-prefix-map-toolchain
Remap paths within toolchain directory reported by dependency scanner
-scanner-prefix-map
Remap paths reported by dependency scanner
Compile against <sdk>
-serialize-breaking-changes-path
Serialize breaking changes found by the API digester to <path>
-serialize-debugging-options
Always serialize options for debugging (default: only for apps)
-serialize-dependency-scan-cache
-serialize-diagnostics-path
Emit a serialized diagnostics file to <path>
-serialize-diagnostics
Serialize diagnostics in a binary format
-serialize-module-interface-dependency-hashes
-serialized-path-obfuscate
-show-diagnostics-after-fatal
Keep emitting subsequent diagnostics after a fatal error
Enable signing of the class_ro_t pointer in objc_class structs
-sil-based-debuginfo
Write the SIL into a file and generate debug-info to debug on SIL  level.
-sil-debug-serialization
Do not eliminate functions in Mandatory Inlining/SILCombine dead functions. (for debugging only)
-sil-inline-caller-benefit-reduction-factor
Controls the aggressiveness of performance inlining in -Osize mode by reducing the base benefits of a caller (lower value permits more inlining!)
-sil-inline-threshold
Controls the aggressiveness of performance inlining
-sil-stop-optzns-before-lowering-ownership
Stop optimizing at SIL time before we lower ownership from SIL. Intended only for SIL ossa tests
-sil-unroll-threshold
Controls the aggressiveness of loop unrolling
Verify SIL after each transform
-sil-verify-none
Completely disable SIL verification
-skip-import-in-public-interface
Skip the import statement corresponding to a module name when printing the public interface.
-skip-inherited-docs
Skip emitting doc comments for members inherited through classes or default implementations
-skip-protocol-implementations
Skip emitting symbols that are implementations of protocol requirements or inherited from protocl extensions
-skip-synthesized-members
Skip members inherited through classes or default implementations
-solver-disable-shrink
Disable the shrink phase of expression type checking
-solver-expression-time-threshold=
-solver-memory-threshold
Set the upper bound for memory consumption, in bytes, by the constraint solver
-solver-shrink-unsolved-threshold
Set The upper bound to number of sub-expressions unsolved before termination of the shrink phrase
enable stack checking
-stack-promotion-limit
Limit the size of stack promoted objects to the provided number of bytes.
-static-executable
Statically link the executable
Statically link the Swift standard library
Make this module statically linkable and make the output of -emit-library a static library.
-stats-output-dir
Directory to write unified compilation-statistics files to
-strict-concurrency=
Specify the how strict concurrency checking will be. The value may be 'minimal' (most 'Sendable' checking is disabled), 'targeted' ('Sendable' checking is enabled in code that uses the concurrency model, or 'complete' ('Sendable' and other checking is enabled for all code in the module)
-strict-implicit-module-context
Enable the strict forwarding of compilation context to downstream implicit module dependencies
-string-literals-must-be-ascii-only
Enforce string literals to only allow ASCII characters
-supplementary-output-file-map
Specify supplementary outputs in a file rather than on the command line
-suppress-remarks
Suppress all remarks
-suppress-static-exclusivity-swap
Suppress static violations of exclusive access with swap()
-suppress-warnings
Suppress all warnings
-swift-async-frame-pointer=
One of 'auto', 'always' or 'never'
-swift-isa-ptrauth-mode
Mode for staging isa/super signing. Supported modes are LegacyAndStrip, NewAndStrip and NewAndAuth.
-swift-module-file=
Specify Swift module input explicitly built from textual interface
Only include APIs defined from Swift source
-swift-ptrauth-mode
Mode for staging pointer authentication. Supported modes are LegacyAndStrip, NewAndStrip and NewAndAuth.
Interpret input according to a specific Swift language version number
-switch-checking-invocation-threshold=
-symbol-graph-minimum-access-level
Include symbols with this access level or more when emitting a symbol graph
Width of tab character.
Generate code for a particular CPU variant
-target-min-inlining-version
Require inlinable code with no '@available' attribute to back-deploy to this version of the '-target' OS
-target-sdk-name
Canonical name of the target SDK used for compilation
-target-sdk-version
The version of target SDK used for compilation
-target-variant-sdk-version
The version of target variant SDK used for compilation
Generate 'zippered' code for macCatalyst that can run on the specified variant target triple in addition to the main -target triple
Generate code for the given target <triple>, such as x86_64-apple-macos10.9
-tbd-compatibility-version
The compatibility_version to use in an emitted TBD file
-tbd-current-version
The current_version to use in an emitted TBD file
-tbd-install_name
The install_name to use in an emitted TBD file
-tbd-is-installapi
If the TBD file should indicate it's being generated during InstallAPI
-test-dependency-scan-cache-serialization
After performing a dependency scan, serialize and then deserialize the scanner's internal state.
-testable-import-module
Implicitly import the specified module with @testable
-throws-as-traps
Turn all throw sites into immediate traps
-toolchain-stdlib-rpath
Add an rpath entry for the toolchain's standard library, rather than the OS's
-tools-directory
Look for external executables (ld, clang, binutils) in <directory>
-trace-stats-events
Trace changes to stats in -stats-output-dir
-track-system-dependencies
Track system dependencies while emitting Make-style dependencies
Lower traps to calls to this function instead of trap instructions
-type-info-dump-filter=
One of 'all', 'resilient' or 'fragile'
-typecheck-module-from-interface
Treat the (single) input as a swiftinterface and typecheck it
Parse and type-check input file(s)
-typo-correction-limit
Limit the number of times the compiler will attempt typo correction to <n>
-unavailable-decl-optimization=
Specify the optimization mode for unavailable declarations. The value may be 'none' (no optimization) or 'complete' (code is not generated at all unavailable declarations)
Update Swift code
-use-clang-function-types
Use stored Clang function types for computing canonical types.
-use-frontend-parseable-output
Emit parseable-output from swift-frontend jobs instead of from the driver
-use-interface-for-module
Prefer loading these modules via interface
Register Objective-C classes as if the JIT were in use
Specifies the flavor of the linker to be used
Allocate internal data structures using malloc (for memory debugging)
-use-static-resource-dir
Use resources in the static resource directory
Use tabs for indentation.
-user-module-version
Module version specified from Swift module authors
-validate-clang-modules-once
Don't verify input files for Clang modules if the module has been successfully validated or loaded during this build session
-validate-tbd-against-ir=
Compare the symbols in the IR against the TBD file that would be generated.
-value-recursion-threshold
Set the maximum depth for direct recursion in value types
-verify-additional-file
Verify diagnostics in this file in addition to source files
-verify-additional-prefix
Check for diagnostics with the prefix expected-<PREFIX> as well as expected-
-verify-all-substitution-maps
Verify all SubstitutionMaps on construction
-verify-apply-fixes
Like -verify, but updates the original source file
-verify-debug-info
Verify the binary representation of debug output.
-verify-emitted-module-interface
Check that module interfaces emitted during compilation typecheck
-verify-generic-signatures
Verify the generic signatures in the given module
-verify-ignore-unknown
Allow diagnostics for '<unknown>' location in verify mode
-verify-incremental-dependencies
Enable the dependency verifier for each frontend job
-verify-type-layout
Verify compile-time and runtime type layout information for type
Verify diagnostics against expected-{error|warning|note} annotations
Print version information and exit
Add directory to VFS overlay file
-visualc-tools-root
VisualC++ Tools Root
-visualc-tools-version
VisualC++ ToolSet Version
Show commands to run and use verbose output
-warn-concurrency
Warn about code that is unsafe according to the Swift Concurrency model and will become ill-formed in a future language version
-warn-implicit-overrides
Warn about implicit overrides of protocol members
-warn-long-expression-type-checking
Warns when type-checking a function takes longer than <n> ms
-warn-long-function-bodies
-warn-on-editor-placeholder
Downgrade the editor placeholder error to a warning
-warn-on-potentially-unavailable-enum-case
Deprecated, will be removed in future versions
-warn-swift3-objc-inference-complete
-warn-swift3-objc-inference-minimal
-warnings-as-errors
Treat warnings as errors
-weak-link-at-target
Weakly link symbols for declarations that were introduced at the deployment target. Symbols introduced before the deployment target are still strongly linked.
-whole-module-optimization
Optimize input files together instead of individually
-windows-sdk-root
Windows SDK Root
-windows-sdk-version
Windows SDK Version
-working-directory
Resolve file paths relative to the specified directory
Pass <arg> to the C/C++/Objective-C compiler
Pass <arg> to Clang when it is use for linking.
Pass <arg> to the Swift frontend
Specifies an option which should be passed to the linker
Pass <arg> to LLVM.
<plugin search options>
<linker-specific options>
<swift debug/development internal options>
<swift internal options>
<debug info options>
<automatic crashing options>
<code formatting options>
<optimization level options>
DEBUG/DEVELOPMENT OPTIONS
-working-directory=
-warn-swift3-objc-inference
-warn-long-function-bodies=
-warn-long-expression-type-checking=
--use-interface-for-module
-tbd-install_name=
-tbd-current-version=
-tbd-compatibility-version=
-serialize-parseable-module-interface-dependency-hashes
-serialize-diagnostics-path=
--protocol-requirement-allow-list
-prebuilt-module-cache-path=
-output-file-map=
-module-link-name=
-import-bridging-header
--ignore-spi-group
--generate-name-correction
--generate-migration-script
--generate-empty-baseline
-force-single-frontend-invocation
-experimental-platform-c-calling-convention=
-experimental-explicit-module-build
--enable-remove-deprecated-check
--empty-baseline
-emit-parseable-module-interface
-emit-parseable-module-interface-path
-emit-module-path=
-emit-localized-strings-path=
-emit-loaded-module-trace-path=
-emit-clang-header-path
Emit an Objective-C and C++ header file to <path>
-driver-filelist-threshold=
--disable-remove-deprecated-check
--disable-os-checks
--disable-fail-on-error
-diagnostic-style=
--deserialize-sdk
--deserialize-diff
-debug-constraints-on-line=
-concurrency-model=
--compiler-style-diags
-build-module-from-parseable-interface
-backup-module-interface-path=
--avoid-tool-args
--avoid-location
-access-notes-path=
--abort-on-module-fail
SwiftOptions/ParsedOptions.swift
not a single argument
not a multiple argument
-unlikely-flag-for-testing
label
data
node
labelCounter
nodeIDs
    opts="$opts 
    if [[ $COMP_CWORD == "
" ]]; then
        COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
        return
    fi
    case ${COMP_WORDS[
    return
    ;;
    COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
cur="${COMP_WORDS[COMP_CWORD]}"
prev="${COMP_WORDS[COMP_CWORD-1]}"
COMPREPLY=()
COMPREPLY=( $(compgen -W "$("${COMP_WORDS[0]}" 
 "${COMP_WORDS[@]}")" -- "$cur") )
COMPREPLY=( $(compgen -W "
COMPREPLY=( $(compgen -d -- "$cur") )
COMPREPLY=( $(compgen -f -- "$cur") )
$("${COMP_WORDS[0]}" ---completion 
 "${COMP_WORDS[@]}")
ArgumentParser/CompletionsGenerator.swift
Invalid CompletionShell: 
-r -f -a '(command 
 -- --custom (commandline -opc)[1..-1])'
-r -f -a '(__fish_complete_directories)'
-r -f -a '(for i in 
    set -l currentCommands (
 (commandline -opc))
    set -l expectedCommands (string split "
" $argv[1])
    set -l subcommands (string split "
" $argv[2])
    if [ (count $currentCommands) -ge (count $expectedCommands) ]
        for i in (seq (count $expectedCommands))
            if [ $currentCommands[$i] != $expectedCommands[$i] ]
                return 1
            end
        end
        if [ (count $currentCommands) -eq (count $expectedCommands) ]
            return 0
        end
        if [ (count $subcommands) -gt 1 ]
            for i in (seq (count $subcommands))
                if [ $currentCommands[(math (count $expectedCommands) + 1)] = $subcommands[$i] ]
                    return 1
                end
            end
        end
        return 0
    end
    return 1
# A function which filters options which starts with "-" from $argv.
function 
    set -l results
    for i in (seq (count $argv))
        switch (echo $argv[$i] | string sub -l 1)
            case '-'
            case '*'
                echo $argv[$i]
        end
    end
local context state state_descr line
_commandname=$words[1]
typeset -A opt_args
_custom_completion() {
    local completions=("${(@f)$($*)}")
    _describe '' completions
'(-): :->command'
case $state in
    (command)
        local subcommands
        subcommands=(
        )
        _describe "subcommand" subcommands
        ;;
    (arg)
        case ${words[1]} in
        esac
        ;;
esac
() {
    integer ret=1
    local -a args
    args+=(
    )
    _arguments -w -s -S $args[@] && ret=0
    return ret
{_custom_completion $_
{local -a list; list=(${(f)"$(
)"}); _describe '''' list}
Show help information.
Show the version.
ArgumentParser/Argument.swift
--------------------------------------------------------------------
Can't read a value from a parsable
argument definition.
This error indicates that a property declared with an `@Argument`,
`@Option`, `@Flag`, or `@OptionGroup` property wrapper was neither
initialized to a value nor decoded from command-line arguments.
To get a valid value, either call one of the static parsing methods
(`parse`, `parseAsRoot`, or `main`) or define an initializer that
initializes _every_ property of your parsable type.
--------------------------------------------------------------------
Argument(*definition*)
--experimental-dump-help
ArgumentParser/Flag.swift
Flag(*definition*)
ArgumentParser/NameSpecification.swift
' has not characters to form short option name.
ArgumentParser/Option.swift
Option(*definition*)
ArgumentParser/OptionGroup.swift
OptionGroup(*definition*)
Tree<ParsableCommand.Type>
_TtC14ArgumentParser15ArgumentDecoder
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
ArgumentParser/ArgumentDecoder.swift
experimental-dump-help
ArgumentParser/CommandParser.swift
Unexpected error: 
The ParsableCommand "
" can't have itself as its own subcommand.
generateCompletionScript
ArgumentParser/Parsed.swift
Trying to get the argument set from a resolved/parsed property.
Show subcommand help information.
 <subcommand>' for detailed help.
ArgumentParser/HelpGenerator.swift
' for more information.
Unspecified version
ArgumentParser/UsageGenerator.swift
preferredName cannot be nil for named arguments
Missing required subcommand.
Invalid option: -
Invalid option: 
' does not take any value, but '
' was specified.
Internal error. Invalid state while parsing command-line arguments.
Internal error. Parsing command-line arguments hit unimplemented code path.
Can't generate completion scripts for '
Please use --generate-completion-script=<shell> with one of:
    
Can't autodetect a supported shell.
Please use --generate-completion-script=<shell> with one of:
    
Unknown option '
'. Did you mean '
Missing value for '
 unexpected arguments: '
Unexpected argument '
Value to be set with 
 had already been set with 
Missing one of: '
Missing expected argument '
No value set for non-argument var 
. Replace with a static variable, or let constant.
' is invalid for '
' is invalid for '<
. Please provide one of the following:
. Please provide one of 
SHELL
element
parent
children
long
short
longWithSingleDash
positional
option
flag
serializationVersion
defaultSubcommand
ySaySSGG
ySbG
ySSG
yypG
ySiG
$ss12CaseIterableP
$sSY
xSgz_x_lXX
So8NSStringC
SvSg
SvSgXCSg
SvSg_Spy
GSgAAtXCSg
SvSg_AA
tXCSg
SvSg_SPy
GSgAAtXCSg
_A2At
$sSY
$ss21_ObjectiveCBridgeableP
$ss25ExpressibleByArrayLiteralP
$ss26ExpressibleByStringLiteralP
$ss43ExpressibleByExtendedGraphemeClusterLiteralP
$ss33ExpressibleByUnicodeScalarLiteralP
SaySpy
GSgG
ySaySSGG
SaySSG
_SStG
_SSt
ySSG
ySsG
ySS_SStG
SS_SSt
ySnySiGG
ySS_SitG
SS_Sit
ySpy
GSgG
7ElementSTQz
$sST
$sSt
Say7ElementSTQzG
8IteratorSTQzSg
$s8TSCBasic8ClosableP
yxq_G
yxq__GG
Say7ElementSTQzGIgo_
yypG
So11NSConditionC
_pSg
$s8TSCBasic14DiagnosticDataP
$s8TSCBasic18DiagnosticLocationP
So17OS_dispatch_queueC
Sayy
ySJG
ypSg
ySS_yptG
SS_ypt
4code_t
Si8expected_Si6actualt
$s8TSCBasic10FileSystemP
So6NSLockC
y_So17OS_dispatch_queueCGG
SDySS
xSgXw
_ypt
y_So17OS_dispatch_queueCGSg
y_So17OS_dispatch_queueCG
ySSypG
_yptG
ShyxG
$s8TSCBasic13HashAlgorithmP
SDySS
$s8TSCBasic16JSONSerializableP
SS4json_
_p15underlyingErrort
SayypG
SDySSypG
SS3key_yp5valuetSg
yp3key_yp5valuetSg
$s8TSCBasic12JSONMappableP
SS3key_ypXp8expected
4jsont
SSSg3key_SS7messaget
q_ycxc
q_Sg
5errno_t
$s8TSCBasic24ObjectIdentifierProtocolP
$ss30ExpressibleByDictionaryLiteralP
SnySiG
$sSk
x3key_q_5valuet
yxq_GG
$sSK
$sSl
yxq_GG
SayxG
SDyxq_G
yxGG
yxGG
ySSG
$s8TSCBasic4PathP
4path_
ySaySSGG8iteratort
yS2SG
SSytIegnr_
SSIegg_
ySay
_pGSg
SgXw
SgXwz_Xx
Gz_Xx
GIegg_13stdoutClosure_ABIegg_06stderrB0tSg
ySay
_pGSgz_Xx
So17OS_dispatch_groupC
ScCy
_pGSg
ySay
SaySSG9arguments_
_p15underlyingErrort
6signal_t
ySScSg
SS7program_t
Sb14redirectStderr_t
ySay
Gc6stdout_yABc6stderrSb14redirectStderrt
So17OS_dispatch_groupC4sync_t
ySay
_pG6stdout_AE6stderrt
_pGIegn_
_pGSgz_Xx
y_So17OS_dispatch_queueCGG
So19NSRegularExpressionC
SNySiG
xXMT
yxGG
yxGG
Sbx_xtc
yx_GSg
yx_GSgXw
So12NSFileHandleC
SgXw
SgXwz_Xx
Ieg_
So8NSThreadC
IeyB_
y_xG
$s8TSCBasic14ByteStreamableP
$s8TSCBasic18WritableByteStreamP
SDyS2SG
SSxc
_pxc
Si6offset_SS3key_SS5valuet7elementtSg
SnyxG
_SSt
_SS4pathSaySSG4argst
_SaySSGt
_S2S4destt
SaySsG
ySSG
_pGIegg_
$s10TSCUtility8ArchiverP
GSgSvSgXCSg
ySvSgXCSg
yXCSg
SvSgSPy
GSg_SpyAAGSgtXCSg
SbSvSg_
cSgtXCSg
SbSvSg_
AASbAA_
tXCSgtXCSg
SiSvSgXCSg
SvSgAA_SitXCSg
SbSvSgXCSg
SvSgXCSg
SvSgXCSg
ySvSg_yAAcSgtXCSg
ySvSg_AAyAA_AAtXCSgyAAXCSgtXCSg
SbSvSg_Spy
GSgSiSpyAAGSgtXCSg
ySvSg_SPy
GSgtXCSg
SiSvSg_SPy
GSgSpyABGSgSitXCSg
SbSvSg_SPy
GSgSpy
GSgAGSpyAAGSgtXCSg
SvSgXCSg
SvSgXCSg
SvSgXCSg
SvSgXCSg
SvSgAAXCSg
SbSvSg_SbAAcSgtXCSg
SbSvSg_AASbAA_AAtXCSgtXCSg
ySvSg_Spy
GSgADtXCSg
SvSgAA_SPy
GSgSpyAAGSgtXCSg
SbSvSg_SbAA_SpySbGSgtcSgyAAcSgtXCSg
SbSvSg_S2bAAcSgtXCSg
SbSvSg_
ABSbAAcSgtXCSg
SbSvSg_SpyAAGSgSiACSiSbAAcSgtXCSg
SbSvSg_AASbAA_AASpySbGSgtXCSgAAyAA_AAtXCSgtXCSg
SbSvSg_SbAASbAA_AAtXCSgtXCSg
SbSvSg_
AbASbAA_AAtXCSgtXCSg
SbSvSg_SpyAAGSgSiACSiAASbAA_AAtXCSgtXCSg
ySvSg_Spy
GSgADtXCSg
SvSgXCSg
SvSgXCSg
ySSypG
SS_ypt
ySSSaySS4name_Sb5asynctGG
yS2SG
ySOypG
SO_ypt
ySay
ySSG
$sSY
SaySSG
ypSg
yqd__G
xqd__
_pIeglnzo_
qd__
G0R2_
ySayqd__GG
xSayqd__G
_pIeglgzo_
G0G0R2__
yqd__G
ySayqd__GG
yqd_0_G
xqd__qd_0_
_pIeglnnzo_
qd_0_
G0R3_
yqd_1_G
xqd__qd_0_qd_1_
_pIeglnnnzo_
qd_1_
G0R4_
xqd__Sgqd_0_Sg
_pIeglnnzo_
yqd_0_G
xqd__Sgqd_0_Sgqd_1_Sg
_pIeglnnnzo_
yqd_1_G
G0R5_
xSayqd__GSayqd_0_G
_pIeglggzo_
ySayqd_0_GG
G0G0R3__
G0G0R4__
xSayqd__GSayqd_0_GSayqd_1_G
_pIeglgggzo_
ySayqd_1_GG
G0G0R5__
_pIeglgzo_
$s10TSCUtility16ArgumentProtocolP
SS_SSSg10suggestiont
SS8argument_
5errort
SS6option_t
_SaySSGt
SS5value_t
SS5value_ypXp12expectedTypet
SaySS5value_SS11descriptiontG
$s10TSCUtility12ArgumentKindP
$s10TSCUtility18StringEnumArgumentP
SSSg
_pXp
_pGAA_pXp_
_pztKc
$s10TSCUtility22ArgumentParserProtocolP
SDySS
SDySSypG
Sayyxz_
tKcG
ySsG
ySS4name_
5valuetG
SS4name_
5valuet
_ABtG
_AAt
ySay
ySJG
ySnySiGG
ySS_SbtG
SS_Sbt
ySS4name_Sb5asynctG
SS4name_Sb5asynct
ySJ_SutG
_pIeglgzo_
ySSSgG
yyXlG
SS3key_
5valuet
ySS3key_
5valuetG
ySS_
SaySJG
ySS5value_SS11descriptiontG
ySaySSGG
SnySiG
$sST
$sSl
$sSK
$sSk
$ss12IdentifiableP
$s10TSCUtility16BitstreamVisitorP
8bitWidth_t
13chunkBitWidth_t
8recordID_t
Si5width_t
7blockID_Si06abbrevB0t
7blockID_t
$ss30ExpressibleByDictionaryLiteralP
SDySOypG
yS2SSgG
yS2S4name_Sb5asynctG
ySSSDySSSaySS4name_Sb5asynctGGG
ySSSDyS2SGG
SO3key_yp5valuet
SO3key_yp5valuetSg
_pSg
_pSg
_pSg
_pSg
Iegn_
$s10TSCUtility25DiagnosticDataConvertibleP
$s10TSCUtility27DiagnosticLocationProvidingP
_pSg
SgXw
$s10TSCUtility12_FileWatcher33_523063429DB4EF647B5B8BA741A231EDLLP
$s10TSCUtility21FSEventStreamDelegateP
So17OS_dispatch_queueC
ySay
_SStG
_SSt
ySS6method_Sb5asynctG
SS6method_Sb5asynct
ySS_SStG
SS_SSt
ySiG
SvSg
ySS_yptG
ySaySSGG
SDyS2SG
SDySSSaySS4name_Sb5asynctGG
ySDyS2SGG
ySDySSSaySS4name_Sb5asynctGGG
ySSG
SDySSSDyS2SGG
SDySSSDySSSaySS4name_Sb5asynctGGG
SS_SS4name_Sb5asyncttSg
SS3key_SS4name_Sb5asynct5valuetSg
Ieg_
XDXMT
$s10TSCUtility34JSONMessageStreamingParserDelegateP
7Message
xSgXw
yx_G
Si4size_t
_pSg
$s10TSCUtility22AuthorizationProvidingP
SS4name_t
ySSG
_pXp
$s10TSCUtility26PolymorphicCodableProtocolP
yxGG
$s10TSCUtility25ProgressAnimationProtocolP
ShySiG
ySiG
_AAtG
$s10TSCUtility25SimplePersistanceProtocolP
9stateFile_
_p5errort
_pSg
SaySsG
ySO_yptG
_pSg
$s10TSCUtility20TracingEventProtocolP
$s10TSCUtility25TracingCollectionProtocolP
So6NSLockC
$ss12CaseIterableP
SS6triple_t
SS4arch_t
SS2os_t
$ss26ExpressibleByStringLiteralP
$ss43ExpressibleByExtendedGraphemeClusterLiteralP
$ss33ExpressibleByUnicodeScalarLiteralP
SaySSG_Sb18usesLenientParsingt
Si5major_Si5minorSi5patcht
$ss9OptionSetP
$ss10SetAlgebraP
$ss25ExpressibleByArrayLiteralP
yypG
$sSY
$ss12CaseIterableP
Iegr_
$ss9OptionSetP
$ss10SetAlgebraP
$ss25ExpressibleByArrayLiteralP
ycSg
SSSg
Si5index_SS8argumentt
Si5index_SS8argument
6option
17currentDriverKindt
_SbtG
_Sbt
ySnySiGG
ySSG
SaySsG
ySsG
ySbG
yyXlG
yypG
GGSg
SaySSG
SDySSSay
SaySbG
ySOSSG
ySsSiG
ySSSay
yx_G
yx_GG
SDySsSiG
SDySOSSG
_pXpG
SaySSG
SaySsG
$sSY
$ss12CaseIterableP
SSSg
ySSG
ySSG
_pIeggrzo_
qd__
qd__Sg
SSqd__
_pIeggrzo_
Sayqd__G
$s14ArgumentParser13ParsedWrapperP
$ss32ExpressibleByStringInterpolationP
$ss26ExpressibleByStringLiteralP
$ss43ExpressibleByExtendedGraphemeClusterLiteralP
$ss33ExpressibleByUnicodeScalarLiteralP
SaySSG10extensions_t
SaySSGAAc
_pXpSg
SbSg
Sayqd__GSg
ypSg
Sbz_Xx
$ss25ExpressibleByArrayLiteralP
SS_Sb14withSingleDasht
SJ_Sb14allowingJoinedt
_pSg
$s14ArgumentParser20AsyncParsableCommandP
$s14ArgumentParser17AsyncMainProtocolP
7Command
_pXpG
$s14ArgumentParser14EnumerableFlagP
8RawValueSYQz
$s14ArgumentParser013ExpressibleByA0P
yypG
$s14ArgumentParser17ParsableArgumentsP
$s14ArgumentParser0A11SetProviderP
SSSg5label_yp5valuet
_pSg
SgSSyp
_pIegggggrzo_
$s14ArgumentParser26ParsableArgumentsValidator33_D8B6916CE93C2FC7F7BEDE789FAE65F8LLP
$s14ArgumentParser31ParsableArgumentsValidatorErrorP
$s14ArgumentParser15ParsableCommandP
_SitG
_Sit
_pXpG
ySsG
_SStG
_SSt
ySi_
_pXmTSg
$s14ArgumentParser20ArrayWrapperProtocolP
_pXp
$ss30KeyedDecodingContainerProtocolP
SayypG
yypG
_pXpGG
ySnySiGG
ySaySSGG
ySiG
_pXp_AA_pXpt
SayxG
$s14ArgumentParser0A19DefinitionContainerP
$s14ArgumentParser0a32DefinitionContainerExpressibleByA0P
9Contained
ztKc
SS9Contained
_pIeggrzo_
SgSS9Contained
_pIegggggrzo_
7Initial
QzSg
ztKc
SgSS
ztKc
$ss10SetAlgebraP
$ss9OptionSetP
$sST
SnySiG
$sSl
$sSK
$sSk
yyXlG
_SStSg
_pSg
ySSG
ySbG
SgS2S
_pIegggggrzo_
$s14ArgumentParser22DecodableParsedWrapperP
5Value
_pXpGADG
ySSSay
10visibility_t
SSSg5shell_t
_SStG
8previous_AA9duplicateSaySSG13originalInputt
6forKey_t
SgSS
6forKey
_pSg13originalErrort
ypSg_
6forKeyt
Si_Sit
_SSt
Sb8inserted_
17memberAfterInsertt
ySaySSGG
ySaySSGSSG
SaySSGSg
_ypt
ySSSgG
yAAyABySaySSSgGACGGSSGG
yAAySaySSSgGACGGSSG
ySaySSSgGACGG
ySaySSSgGABG
SaySSSgG
ySay
GSSG
SS4text_t
SS7message_SS5usageSS4helpt
SS7message_
8exitCodet
yxGSgXw
yxGG
_pXpGACG
_pXpGACSgIegnr_
_pXp
SaySSGSg
SaySSG
$sSY
SSSg
_topic
_subtopics
_showHidden
driver
subcommand
intro
topic
subtopics
showHidden
build
package
test
repl
AllCases
RawValue
_rawValue
rawValue
_flags
_file
_lbfsize
_cookie
_close
_read
_seek
_write
_extra
_ubuf
_nbuf
_blksize
_offset
RawValue
_ObjectiveCType
_base
_size
ArrayLiteralElement
StringLiteralType
ExtendedGraphemeClusterLiteralType
UnicodeScalarLiteralType
_bytes
cArray
Element
Iterator
items
index
sequence
result
success
failure
RawValue
_condition
message
location
error
warning
note
remark
ignored
behavior
data
queue
handlerQueue
_diagnostics
handlers
defaultLocation
description
device
inode
size
modTime
posixPermissions
fileType
RawValue
kind
path
ioError
mismatchedByteCount
invalidAccess
isDirectory
noEntry
notDirectory
unsupported
unknownOSError
alreadyExistsAtDestination
couldNotChangeDirectory
userUnWritable
userWritable
executable
recursive
onlyFiles
quarantine
root
lock
lockFiles
lockFilesLock
contents
entries
underlyingFileSystem
reference
file
directory
symlink
unexpectedCycle
underlying
bool
double
string
array
dictionary
orderedDictionary
null
malformed
missingKey
typeMismatch
custom
item
lock
body
cachedValue
_lock
unableToAquireLock
fileDescriptor
lockFile
exclusive
shared
storage
type
Value
Element
Index
SubSequence
Indices
Iterator
array
dict
Element
Index
Iterator
SubSequence
Indices
ArrayLiteralElement
array
_impl
startsWithTilde
invalidAbsolutePath
invalidRelativePath
string
Element
Iterator
current
towalk
shouldRecurse
fileSystem
arguments
environmentBlock
exitStatus
output
stderrOutput
nonZeroExit
systemError
illegalUTF8Sequence
terminated
signalled
loggingHandler
workingDirectory
processID
state
stateLock
completionQueue
_launched
launchedLock
outputRedirection
startNewProcessGroup
missingExecutableProgram
workingDirectoryNotSupported
stdinUnavailable
collect
stream
none
readingOutput
outputReady
complete
failed
idle
StringLiteralType
ExtendedGraphemeClusterLiteralType
UnicodeScalarLiteralType
value
cancelled
processes
serialQueue
killTimeout
killingCondition
shouldKill
regex
description
Element
Index
SubSequence
Indices
Iterator
elements
areInIncreasingOrder
RawValue
conjunction
disjunction
head
tail
notEmptyCondition
value
next
other
couldNotFindTmpDir
couldNotCreateUniqueName
prefix
suffix
path
fileHandle
pathExists
pathTooLong
permissionDenied
unresolvablePathComponent
outOfMemory
stream
clearLineString
resetString
boldString
dumb
file
noColor
green
yellow
cyan
white
black
gray
thread
finishedCondition
isFinished
task
_buffered
_buffer
queue
stream
contents
filePointer
error
closeOnDeinit
path
string
count
value
items
transform
separator
range
chdir
close
exec
pipe
posix_spawn
read
setenv
stat
symlink
unsetenv
waitpid
lowerBound
upperBound
RawValue
fileSystem
error_get_description
error_dispose
format_version
store_create
store_dispose
store_units_apply
store_units_apply_f
unit_event_notification_get_events_count
unit_event_notification_get_event
unit_event_notification_is_initial
unit_event_get_kind
unit_event_get_unit_name
store_set_unit_event_handler
store_set_unit_event_handler_f
store_start_unit_event_listening
store_stop_unit_event_listening
store_discard_unit
store_discard_record
store_purge_stale_data
store_get_unit_name_from_output_path
store_get_unit_modification_time
symbol_get_language
symbol_get_kind
symbol_get_subkind
symbol_get_properties
symbol_get_roles
symbol_get_related_roles
symbol_get_name
symbol_get_usr
symbol_get_codegen_name
symbol_relation_get_roles
symbol_relation_get_symbol
occurrence_get_symbol
occurrence_relations_apply
occurrence_relations_apply_f
occurrence_get_roles
occurrence_get_line_col
record_reader_create
record_reader_dispose
record_reader_search_symbols
record_reader_symbols_apply
record_reader_occurrences_apply
record_reader_occurrences_in_line_range_apply
record_reader_occurrences_of_symbols_apply
record_reader_search_symbols_f
record_reader_symbols_apply_f
record_reader_occurrences_apply_f
record_reader_occurrences_in_line_range_apply_f
record_reader_occurrences_of_symbols_apply_f
unit_reader_create
unit_reader_dispose
unit_reader_get_provider_identifier
unit_reader_get_provider_version
unit_reader_get_modification_time
unit_reader_is_system_unit
unit_reader_is_module_unit
unit_reader_is_debug_compilation
unit_reader_has_main_file
unit_reader_get_main_file
unit_reader_get_module_name
unit_reader_get_working_dir
unit_reader_get_output_file
unit_reader_get_sysroot_path
unit_reader_get_target
unit_dependency_get_kind
unit_dependency_is_system
unit_dependency_get_filepath
unit_dependency_get_modulename
unit_dependency_get_name
unit_include_get_source_path
unit_include_get_target_path
unit_include_get_source_line
unit_reader_dependencies_apply
unit_reader_includes_apply
unit_reader_dependencies_apply_f
unit_reader_includes_apply_f
data
length
rawValue
wait_initial_sync
RawValue
RawValue
ArgumentKindTy
unknownOption
invalidValue
expectedValue
unexpectedArgument
expectedArguments
duplicateArgument
unknown
typeMismatch
custom
bash
function
values
none
unspecified
filename
path
oneByOne
upToNextOption
remaining
name
shortName
strategy
usage
completion
isOptional
kind
isArray
parseClosure
subparsers
optionArguments
positionalArguments
commandName
overview
seeAlso
isSubparser
canAcceptPositionalArguments
results
parentResult
parser
subparser
bodies
currentArgument
associatedArgumentValue
argumentsIterator
buffer
offset
bufferOverflow
Element
Iterator
Index
SubSequence
Indices
RawValue
signature
elements
blockInfo
block
record
fields
payload
array
char6String
blob
none
name
recordNames
value
operands
literal
fixed
char6
setBID
blockName
setRecordName
rawValue
cursor
blockInfo
globalAbbrevs
invalidBlockInfoRecord
abbrevWidthTooSmall
noSuchAbbrev
missingEndBlock
invalidAbbrev
nestedBlockInBlockInfo
missingSETBID
vbrOverflow
data
currentValue
currentBit
codeBitWidth
currentAbbreviations
blockScope
blockInfoRecords
currentBlockID
abbrevs
values
previousCodeWidth
lengthPlaceholderByteIndex
previousAbbrevs
cCompilerFlags
cxxCompilerFlags
linkerFlags
swiftCompilerFlags
Value
backing
anyError
name
packagePath
reference
fatalError
paths
_watcher
latency
stream
delegate
thread
runLoop
callbacksQueue
unknownError
block
_impl
name
module
testMethods
methods
isAsync
store
instance
path
dylib
rawValue
open
close
thread
signalHandler
delegate
buffer
state
decoder
parsingMessage
parsingMessageSize
parsingNewlineAfterMessage
failed
reason
underlyingError
machines
fileNotFound
unreadableFile
invalidFilePath
machineNotFound
invalidDefaultMachinePosition
name
login
password
couldNotFindConfigFile
parsingError
prohibitedFlags
diagnostics
pkgConfigStack
name
pcFile
cFlags
libs
fileSystem
variables
dependencies
privateDependencies
linux
android
darwin
windows
debian
fedora
value
stream
header
displayedPercentages
hasDisplayedHeader
lastDisplayedText
terminal
hasDisplayedProgress
animation
RawValue
versionNumber
diagnostics
badMagic
unexpectedTopLevelRecord
unknownBlock
malformedRecord
noMetadataBlock
unexpectedSubblock
unexpectedRecord
missingInformation
text
level
location
category
flag
ranges
fixIts
ignored
note
warning
error
fatal
remark
filename
line
column
offset
start
metadata
diagnostic
fields
payload
array
char6String
blob
none
fileSystem
schemaVersion
supportedSchemaVersions
statePath
otherStatePaths
prettyPrint
invalidSchemaVersion
restoreFailure
RawValue
asyncBegin
asyncEnd
name
startTs
lock
_events
RawValue
AllCases
tripleString
arch
vendor
osVersion
abiVersion
badFormat
unknownArch
unknownOS
x86_64
x86_64h
i686
powerpc
powerpc64le
s390x
aarch64
amd64
armv7
armv6
armv5
arm64
arm64e
wasm32
riscv64
mips
mipsel
mips64
mips64el
unknown
apple
darwin
macOS
linux
windows
wasi
openbsd
other
android
RawValue
concise
verbose
debug
StringLiteralType
ExtendedGraphemeClusterLiteralType
UnicodeScalarLiteralType
major
minor
patch
prereleaseIdentifiers
buildMetadataIdentifiers
nonASCIIVersionString
invalidVersionCoreIdentifiersCount
nonNumericalOrEmptyVersionCoreIdentifiers
nonAlphaNumerHyphenalPrereleaseIdentifiers
nonAlphaNumerHyphenalBuildMetadataIdentifiers
version
isDevelopment
buildIdentifier
RawValue
Element
ArrayLiteralElement
rawValue
open
close
RawValue
AllCases
interactive
batch
Element
RawValue
ArrayLiteralElement
rawValue
spelling
kind
aliasFunction
attributes
metaVar
helpText
group
input
flag
joined
separate
joinedOrSeparate
remaining
commaJoined
unknownOption
missingArgument
unsupportedOption
options
$__lazy_storage_$_groupMap
codeFormatting
debugCrash
internal
internalDebug
linkerOption
modes
pluginSearch
option
argument
index
single
multiple
none
parsedOptions
optionIndex
groupIndex
consumed
unknownFlags
root
label
data
children
node
labelCounter
nodeIDs
RawValue
AllCases
rawValue
Value
_parsedValue
base
StringInterpolation
StringLiteralType
ExtendedGraphemeClusterLiteralType
UnicodeScalarLiteralType
abstract
discussion
valueName
visibility
base
default
hidden
private
kind
list
file
shellCommand
custom
default
directory
RawValue
message
rawValue
base
helpRequest
dumpRequest
Value
_parsedValue
base
prefixedNo
prefixedEnableDisable
exclusive
chooseFirst
chooseLast
ArrayLiteralElement
elements
base
customLong
customShort
long
short
Value
_parsedValue
base
Value
_parsedValue
_visibility
_dummy
title
commandName
_superCommandName
abstract
usage
discussion
version
shouldDisplay
subcommands
defaultSubcommand
helpNames
_options
options
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
underlying
parsedElement
type
value
wrongKeyType
topLevelHasNoUnkeyedContainer
topLevelHasNoSingleValueContainer
singleValueDecoderHasNoContainer
base
currentIndex
array
Contained
Initial
default
scanningForValue
unconditional
upToNextOption
allRemainingInput
postTerminator
allUnrecognized
kind
help
completion
parsingStrategy
update
initial
options
defaultValue
keys
allValues
isComposite
abstract
discussion
valueName
visibility
parentTitle
nullary
unary
named
positional
rawValue
ArrayLiteralElement
Element
RawValue
Element
Iterator
Index
SubSequence
Indices
content
namePositions
commandStack
parserError
visibility
_generateCompletionScript
generateCompletionScript
name
path
_elements
ArrayLiteralElement
argumentIndex
defaultValue
long
short
longWithSingleDash
value
definition
value
inputOrigin
shouldClearArrayIfParsed
elements
originalInput
capturedUnrecognizedArguments
helpRequested
completionScriptRequested
completionScriptCustomResponse
unsupportedShell
unknownOption
invalidOption
nonAlphanumericShortOption
missingValueForOption
unexpectedValueForOption
unexpectedExtraValues
duplicateExclusiveValues
noValue
unableToParseValue
userValidationError
noArguments
versionRequested
dumpHelpRequested
notImplemented
invalidState
missingSubcommand
wrongType
subcommandLevelMismatch
subcommandLevelMissing
subcommandLevelDuplicated
subcommandNameMismatch
expectedCommandButNoneFound
_elements
firstUnused
originalInput
inputIndex
subIndex
value
index
option
terminator
name
nameWithValue
rawValue
RawValue
complete
_subcommands
_help
commandStack
visibility
subcommands
help
header
elements
discussion
isSubcommands
commandStack
abstract
usage
sections
discussionSections
label
title
positionalArguments
subcommands
options
content
help
validation
other
element
parent
children
recursiveSubcommand
RawValue
serializationVersion
command
superCommands
commandName
abstract
discussion
defaultSubcommand
subcommands
arguments
kind
shouldDisplay
sectionTitle
isOptional
isRepeating
names
preferredName
valueName
defaultValue
allValues
name
long
short
longWithSingleDash
positional
option
flag
dealloc
JSONObjectWithData:options:error:
skipDescendants
.cxx_destruct
initWithString:
URLForDirectory:inDomain:appropriateForURL:create:error:
URLsForDirectory:inDomains:
attributesOfItemAtPath:error:
broadcast
changeCurrentDirectoryPath:
code
contentsOfDirectoryAtPath:error:
copyItemAtURL:toURL:error:
count
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
createSymbolicLinkAtPath:withDestinationPath:error:
currentDirectoryPath
defaultManager
domain
doubleValue
environment
fileExistsAtPath:
fileExistsAtPath:isDirectory:
init
initFileURLWithPath:
initWithBlock:
initWithBool:
initWithFileDescriptor:closeOnDealloc:
initWithInteger:
initWithPattern:options:error:
integerValue
isExecutableFileAtPath:
isReadableFileAtPath:
isWritableFileAtPath:
length
lock
main
matchesInString:options:range:
moveItemAtURL:toURL:error:
nextObject
numberOfRanges
processInfo
range
rangeAtIndex:
rangeWithName:
removeItemAtPath:error:
resourceValuesForKeys:error:
setAttributes:ofItemAtPath:error:
shortValue
signal
start
stringByReplacingMatchesInString:options:range:withTemplate:
substringWithRange:
unlock
unsignedLongLongValue
wait
waitUntilDate:
-abi
<vers>
<path>
<path>
-assert-config
-avoid-location
-baseline-dir
-baseline-path
<path>
-blocklist-file
<path>
<path>
-bsdk
<path>
-cas-backend
-cas-fs
<cas-id>
<name>=<option>
<path>
<cas-id>
-clang-target
<path>
<path>
<line>
-debug-cycles
-debug-mapping
<macro>
-diagnose-sdk
<path>
<style>
<path>
-digester-mode
<api|abi>
-disable-cmo
--driver-mode=
-dump-api-path
-dump-ast
-dump-jit
<path>
-dump-parse
-dump-pcm
-dump-sdk
-dump-type-info
-dump-usr
-dwarf-version=
<version>
-embed-bitcode
<path>
<path>
-emit-assembly
-emit-bc
<path>
<path>
<path>
<path>
-emit-irgen
-emit-ir
-emit-library
<path>
<path>
<path>
<path>
<path>
<path>
<path>
<path>
<path>
<path>
<path>
-emit-module
<path>
-emit-object
<path>
-emit-pch
-emit-pcm
<path>
<path>
<path>
-emit-sibgen
-emit-sib
-emit-silgen
-emit-sil
<dir>
-emit-tbd-path
<path>
-empty-baseline
true|false
true|false
true|false
-enable-testing
<enforcement>
<string>
<path>
-export-as
<path>
-filelist
-find-usr
-fixit-all
-framework
-Fsystem
-gcc-toolchain
<path>
-gdwarf-types
-gnone
-gsil
-help-hidden
-help
-iframework
-ignored-usrs
<path>
-import-module
-import-prescan
-in-place
-incremental
-indent-width
<path>
-index-file
<path>
<path>
-input-file-key
-input-paths
<path>
-jit-build
-json
-ld-path=
-libc
-library-level
<level>
-line-range
<n:n>
Deprecated
-lldb-repl
<path>
-locale
<locale-code>
<path>
-location
<location>
-lto-library
<lto-library>
-lto=
-merge-modules
-migrator
<level>
-module-alias
-module-name
-module
<name>
<path>
-no-allocations
Deprecated
-no-stack-check
-nostartfiles
-nostdimport
-num-threads
-Onone
-Oplayground
-Osize
-Ounchecked
-output-dir
<dir>
<path>
<file>
<vers>
-package-name
-parallel-scan
-parse-sil
-parse-stdlib
-parse
-pc-macro
-pch-output-dir
<path>
-playground
-plugin-path
-pretty-print
<path>
-primary-file
-print-ast-decl
-print-ast
-print-module
-print-stats
<triple>
-profile-use=
<profdata>
<path>
-Raccess-note
-Rcross-import
-repl
<target>
-resource-dir
-Rmacro-loading
-Rpass-missed=
-Rpass=
<type>
<check>
-sanitize=
<check>
<regex>
<format>
-save-temps
<path>
<path>
-sdk
<sdk>
<path>
<path>
-sign-class-ro
<50>
<250>
-sil-verify-all
-stack-check
-static-stdlib
-static
<mode>
<name>=<path>
-swift-only
<mode>
-swift-version
<vers>
<level>
-tab-width
-target-cpu
-target-variant
-target
<triple>
<version>
<version>
<path>
<directory>
-trap-function
<name>
-typecheck
<complete,none>
-update-code
<name>
-use-jit
-use-ld=
-use-malloc
-use-tabs
<vers>
<level>
<module-name>
<type>
-verify
-version
-vfsoverlay
<root>
<version>
<root>
<version>
<path>
-Xcc
<arg>
-Xclang-linker
<arg>
-Xfrontend
<arg>
-Xlinker
-Xllvm
<arg>
bash
GIT_SSH_COMMAND
GIT_SSH_COMMAND
pkg-config
uname
help
version
bash
fish
