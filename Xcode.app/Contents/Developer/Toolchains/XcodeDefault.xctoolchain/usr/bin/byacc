@(#)PROGRAM:byacc  PROJECT:byacc-4
defines
Hfile-prefix
bgraph
ghelp
hname-prefix
pno-lines
loutput
oversion
V  -b file_prefix        set filename prefix (default "y.")
  -B                    create a backtracking parser
  -d                    write definitions (.tab.h)
  -h                    print this help-message
  -H defines_file       write definitions to defines_file
  -i                    write interface (y.tab.i)
  -g                    write a graphical description
  -l                    suppress #line directives
  -L                    enable position processing, e.g., "%locations"
  -o output_file        (default ".tab.c")
  -p symbol_prefix      set symbol prefix (default "yy")
  -P                    create a reentrant parser, e.g., "%pure-parser"
  -r                    produce separate code and table files (y.code.c)
  -s                    suppress #define's for quoted names in %token lines
  -t                    add debugging support
  -v                    write description (y.output)
  -V                    show version information and exit
%s: f - %s
%s: f - out of space
%s: f - cannot open "%s"
%s: e - line %d of "%s", missing '}'
%s: e - line %d of "%s", unexpected end-of-file
%s: e - line %d of "%s", syntax error
%s: e - line %d of "%s", unmatched /*
%s: e - line %d of "%s", unterminated string
%s: e - line %d of "%s", unmatched %%{
%s: e - line %d of "%s", unterminated %%union declaration
%s: e - line %d of "%s", too many %%union declarations
%s: e - line %d of "%s", illegal tag
%s: e - line %d of "%s", illegal character
%s: e - line %d of "%s", illegal use of reserved symbol %s
%s: e - line %d of "%s", the start symbol %s cannot be declared to be a token
%s: w - line %d of "%s", the type of %s has been redeclared
%s: w - line %d of "%s", the precedence of %s has been redeclared
%s: w - line %d of "%s", the value of %s has been redeclared
%s: e - line %d of "%s", the start symbol %s is a token
%s: w - line %d of "%s", the start symbol has been redeclared
%s: e - line %d of "%s", no grammar has been specified
%s: e - line %d of "%s", a token appears on the lhs of a production
%s: w - line %d of  "%s", conflicting %%prec specifiers
%s: e - line %d of "%s", unterminated action
%s: w - line %d of "%s", $%d references beyond the end of the current rule
%s: e - line %d of "%s", illegal $-name
%s: e - line %d of "%s", $$ is untyped
%s: e - line %d of "%s", $%d (%s) is untyped
%s: e - line %d of "%s", $%d is untyped
%s: w - line %d of "%s", the default action for %s assigns an undefined value to $$
%s: e - the start symbol %s is undefined
%s: w - the symbol %s is undefined
%s: w - %s flag unsupported, %s
q%d -> q%d [label="%s"];
q%d [label="%d:\l
  %s -> 
too many gotos
map_goto
lalr.c
low <= high
add_lookback_edge
found
lr0.c
get_state
0 <= key && key < nitems
too many states
%s: 1 rule never reduced
%s: %ld rules never reduced
%s: 
1 shift/reduce conflict
%d shift/reduce conflicts
1 reduce/reduce conflict
%d reduce/reduce conflicts
expected %d shift/reduce conflict%s.
expected %d reduce/reduce conflict%s.
#include "%s"
/* %%code "%s" block start */
/* %%code "%s" block end */
#line %d "%s"
(null)
yyparse
yylex
yyerror
yychar
yyval
yylval
yydebug
yynerrs
yyerrflag
yylhs
yylen
yydefred
yydgoto
yysindex
yyrindex
yygindex
yytable
yycheck
yyname
yyrule
#define YYPREFIX "%s"
#ifndef %s
#define %-10s %s%s
#endif /* %s */
#define YYPURE %d
text_file
#if ! defined(YYSTYPE) && ! defined(YYSTYPE_IS_DECLARED)
/* Default: YYSTYPE is the semantic value type. */
typedef int YYSTYPE;
# define YYSTYPE_IS_DECLARED 1
#endif
/* compatibility with bison */
#ifdef YYPARSE_PARAM
/* compatibility with FreeBSD */
# ifdef YYPARSE_PARAM_TYPE
#  define YYPARSE_DECL() yyparse(YYPARSE_PARAM_TYPE YYPARSE_PARAM)
# else
#  define YYPARSE_DECL() yyparse(void *YYPARSE_PARAM)
# endif
#else
# define YYPARSE_DECL() yyparse(
%s%s%s%s%s
void
/* Parameters sent to lex. */
#ifdef YYLEX_PARAM
# ifdef YYLEX_PARAM_TYPE
#  define YYLEX_DECL() yylex(YYSTYPE *yylval, YYLEX_PARAM_TYPE YYLEX_PARAM)
#  define YYLEX_DECL() yylex(YYSTYPE *yylval, void * YYLEX_PARAM)
# define YYLEX yylex(&yylval, YYLEX_PARAM)
# define YYLEX_DECL() yylex(void *YYLEX_PARAM)
# define YYLEX yylex(YYLEX_PARAM)
# define YYLEX_DECL() yylex(YYSTYPE *yylval, 
# define YYLEX yylex(&yylval, 
# define YYLEX_DECL() yylex(YYSTYPE *yylval)
# define YYLEX yylex(&yylval)
# define YYLEX_DECL() yylex(
# define YYLEX yylex(
# define YYLEX_DECL() yylex(void)
# define YYLEX yylex()
#if !(defined(yylex) || defined(YYSTATE))
int YYLEX_DECL();
%s%s
/* Parameters sent to yyerror. */
#ifndef YYERROR_DECL
#define YYERROR_DECL() yyerror(
const char *s)
#ifndef YYERROR_CALL
#define YYERROR_CALL(msg) yyerror(
msg)
#ifndef YYDEBUG
#define YYDEBUG %d
extern
#define 
 %ld
#define YYERRCODE %ld
#undef yytname
#define yytname yyname
extern YYSTYPE %slval;
%sconst YYINT %s%s[] = {%*d,
static 
%5d,
defred
dgoto
pack_vector
output.c
maximum table size exceeded
sindex
rindex
gindex
YYTABLESIZE: %ld
Table is longer than %ld elements.
#define YYTABLESIZE %ld
table
check
#define YYFINAL %ld
#define YYMAXTOKEN %d
#define YYUNDFTOKEN %d
#define YYTRANSLATE(a) ((a) > YYMAXTOKEN ? YYUNDFTOKEN : (a))
end-of-file
illegal-symbol
#undef yytname
#define yytname yyname
#if YYDEBUG
name
\"",
"'\"'",
rule
"%s :
\\\\
\\%c
 '\"'
 '\\\\
 '\\%c
 '%c'
#endif
%sconst char *const %s%s[] = {
typedef %s YYINT;
reader.c
line
cachec
cinc >= 0
#ident "
requires
provides
imports
#ifdef YYSTYPE
#undef  YYSTYPE_IS_DECLARED
#define YYSTYPE_IS_DECLARED 1
#ifndef YYSTYPE_IS_DECLARED
typedef union
 YYSTYPE;
#endif /* !YYSTYPE_IS_DECLARED */
$accept
$end
insert_empty_rule
cache
cache_size >= CACHE_SIZE
$$%d
case %d:
yyval.%s
yystack.l_mark[%d].%s
yystack.l_mark[%ld].%s
yystack.l_mark[%d]
yystack.l_mark[%ld]
break;
pack_symbols
i == ntokens && j == nsyms
v[1] != 0
%4d  %s :
%4d  
free_tags
tag_table[i]
make_bucket
symtab.c
name != 0
error
hash
name && *name
%ld terminals, %ld nonterminals
%ld grammar rules, %ld states
Rules never reduced:
%s :
  (%d)
State %d contains 
%ld shift/reduce conflict%s
%ld reduce/reduce conflict%s
state %d
%d: shift/reduce conflict (accept, reduce %ld) on $end
%d: shift/reduce conflict (shift %ld, reduce %ld) on %s
%d: reduce/reduce conflict (reduce %ld, reduce %ld) on %s
%s : 
  (%ld)
%s : .  (%ld)
$end  accept
%s  shift %ld
.  error
%s  reduce %d
.  reduce %d
%s  goto %d
/* original parser id follows */
/* yysccsid[] = "@(#)yaccpar
1.9 (Berkeley) 02/21/93" */
/* (use YYMAJOR/YYMINOR for ifdefs dependent on parser version) */
#define YYBYACC 1
#define YYMAJOR 2
#define YYMINOR 0
#define YYPATCH 20230201
#define YYEMPTY        (-1)
#define yyclearin      (yychar = YYEMPTY)
#define yyerrok        (yyerrflag = 0)
#define YYRECOVERING() (yyerrflag != 0)
#define YYENOMEM       (-2)
#define YYEOF          0
extern int YYPARSE_DECL();
extern YYINT yylhs[];
extern YYINT yylen[];
extern YYINT yydefred[];
extern YYINT yydgoto[];
extern YYINT yysindex[];
extern YYINT yyrindex[];
extern YYINT yygindex[];
extern YYINT yytable[];
extern YYINT yycheck[];
#if YYDEBUG || defined(yytname)
extern char *yyname[];
extern char *yyrule[];
int      yydebug;
int      yyerrflag;
int      yychar;
YYSTYPE  yyval;
YYSTYPE  yylval;
int      yynerrs;
/* define the initial stack-sizes */
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH  YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#define YYSTACKSIZE 10000
#define YYMAXDEPTH  10000
#define YYINITSTACKSIZE 200
typedef struct {
    unsigned stacksize;
    YYINT    *s_base;
    YYINT    *s_mark;
    YYINT    *s_last;
    YYSTYPE  *l_base;
    YYSTYPE  *l_mark;
} YYSTACKDATA;
/* variables for the parser stack */
static YYSTACKDATA yystack;
    int      yyerrflag;
    int      yychar;
    YYSTYPE  yyval;
    YYSTYPE  yylval;
    int      yynerrs;
    /* variables for the parser stack */
    YYSTACKDATA yystack;
#include <stdio.h>
/* needed for printf */
#include <stdlib.h>
/* needed for malloc, etc */
#include <string.h>
/* needed for memset */
/* allocate initial stack or double stack size, up to YYMAXDEPTH */
static int yygrowstack(YYSTACKDATA *data)
    int i;
    unsigned newsize;
    YYINT *newss;
    YYSTYPE *newvs;
    if ((newsize = data->stacksize) == 0)
        newsize = YYINITSTACKSIZE;
    else if (newsize >= YYMAXDEPTH)
        return YYENOMEM;
    else if ((newsize *= 2) > YYMAXDEPTH)
        newsize = YYMAXDEPTH;
    i = (int) (data->s_mark - data->s_base);
    newss = (YYINT *)realloc(data->s_base, newsize * sizeof(*newss));
    if (newss == NULL)
    data->s_base = newss;
    data->s_mark = newss + i;
    newvs = (YYSTYPE *)realloc(data->l_base, newsize * sizeof(*newvs));
    if (newvs == NULL)
    data->l_base = newvs;
    data->l_mark = newvs + i;
    data->stacksize = newsize;
    data->s_last = data->s_base + newsize - 1;
    return 0;
#if YYPURE || defined(YY_NO_LEAKS)
static void yyfreestack(YYSTACKDATA *data)
    free(data->s_base);
    free(data->l_base);
    memset(data, 0, sizeof(*data));
#define yyfreestack(data) /* nothing */
#define YYABORT  goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
YYPARSE_DECL()
    int yym, yyn, yystate;
    const char *yys;
    if ((yys = getenv("YYDEBUG")) != NULL)
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
    memset(&yyval,  0, sizeof(yyval));
    memset(&yylval, 0, sizeof(yylval));
    /* yym is set below */
    /* yyn is set below */
    yynerrs = 0;
    yyerrflag = 0;
    yychar = YYEMPTY;
    yystate = 0;
#if YYPURE
    memset(&yystack, 0, sizeof(yystack));
    if (yystack.s_base == NULL && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
    yystack.s_mark = yystack.s_base;
    yystack.l_mark = yystack.l_base;
    *yystack.s_mark = 0;
yyloop:
    if ((yyn = yydefred[yystate]) != 0) goto yyreduce;
    if (yychar < 0)
        yychar = YYLEX;
        if (yychar < 0) yychar = YYEOF;
        if (yydebug)
        {
            if ((yys = yyname[YYTRANSLATE(yychar)]) == NULL) yys = yyname[YYUNDFTOKEN];
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
    if (((yyn = yysindex[yystate]) != 0) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) yychar)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
        if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
        yystate = yytable[yyn];
        *++yystack.s_mark = yytable[yyn];
        *++yystack.l_mark = yylval;
        yychar = YYEMPTY;
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    if (((yyn = yyrindex[yystate]) != 0) && (yyn += yychar) >= 0 &&
        yyn = yytable[yyn];
        goto yyreduce;
    if (yyerrflag != 0) goto yyinrecovery;
    YYERROR_CALL("syntax error");
    goto yyerrlab; /* redundant goto avoids 'unused label' warning */
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
        yyerrflag = 3;
        for (;;)
            if (((yyn = yysindex[*yystack.s_mark]) != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) YYERRCODE)
            {
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yystack.s_mark, yytable[yyn]);
                if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
                yystate = yytable[yyn];
                *++yystack.s_mark = yytable[yyn];
                *++yystack.l_mark = yylval;
                goto yyloop;
            }
            else
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yystack.s_mark);
                if (yystack.s_mark <= yystack.s_base) goto yyabort;
                --yystack.s_mark;
                --yystack.l_mark;
    else
        if (yychar == YYEOF) goto yyabort;
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
yyreduce:
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
    yym = yylen[yyn];
    if (yym > 0)
        yyval = yystack.l_mark[1-yym];
        memset(&yyval, 0, sizeof yyval);
    switch (yyn)
    yystack.s_mark -= yym;
    yystate = *yystack.s_mark;
    yystack.l_mark -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
        yystate = YYFINAL;
        *++yystack.s_mark = YYFINAL;
        *++yystack.l_mark = yyval;
        if (yychar < 0)
            yychar = YYLEX;
            if (yychar < 0) yychar = YYEOF;
            if (yydebug)
                if ((yys = yyname[YYTRANSLATE(yychar)]) == NULL) yys = yyname[YYUNDFTOKEN];
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
        if (yychar == YYEOF) goto yyaccept;
    if (((yyn = yygindex[yym]) != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) yystate)
        yystate = yydgoto[yym];
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yystack.s_mark, yystate);
    if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
    *++yystack.s_mark = (YYINT) yystate;
    *++yystack.l_mark = yyval;
    goto yyloop;
yyoverflow:
    YYERROR_CALL("yacc stack overflow");
yyabort:
    yyfreestack(&yystack);
    return (1);
yyaccept:
    return (0);
yacc
Bb:dghH:ilLo:Pp:rstVvy
invalid option: %s
Usage: %s [options] filename
Options:
Long options:
  --%-20s-%c
reconfigure with --enable-btyacc
%s - %s
2.0 20230201
action_file
digraph %s {
edge [fontsize=10];
node [shape=box,fontsize=10];
orientation=landscape;
rankdir=LR;
margin=0.2;
page="8.27,11.69"; // for A4 printing
ratio=auto;
union_file
.tab.h
.tab.i
.tab.c
.code.c
.output
.dot
TMPDIR
TEMP
/var/tmp/
%s/%.*sXXXXXX
binary
code
debug
error-verbose
expect
expect-rr
ident
left
lex-param
nonassoc
parse-param
pure-parser
right
start
term
token
token-table
type
union
yacc
@(#)PROGRAM:byacc  PROJECT:byacc-4
defines
Hfile-prefix
bgraph
ghelp
hname-prefix
pno-lines
loutput
oversion
V  -b file_prefix        set filename prefix (default "y.")
  -B                    create a backtracking parser
  -d                    write definitions (.tab.h)
  -h                    print this help-message
  -H defines_file       write definitions to defines_file
  -i                    write interface (y.tab.i)
  -g                    write a graphical description
  -l                    suppress #line directives
  -L                    enable position processing, e.g., "%locations"
  -o output_file        (default ".tab.c")
  -p symbol_prefix      set symbol prefix (default "yy")
  -P                    create a reentrant parser, e.g., "%pure-parser"
  -r                    produce separate code and table files (y.code.c)
  -s                    suppress #define's for quoted names in %token lines
  -t                    add debugging support
  -v                    write description (y.output)
  -V                    show version information and exit
%s: f - %s
%s: f - out of space
%s: f - cannot open "%s"
%s: e - line %d of "%s", missing '}'
%s: e - line %d of "%s", unexpected end-of-file
%s: e - line %d of "%s", syntax error
%s: e - line %d of "%s", unmatched /*
%s: e - line %d of "%s", unterminated string
%s: e - line %d of "%s", unmatched %%{
%s: e - line %d of "%s", unterminated %%union declaration
%s: e - line %d of "%s", too many %%union declarations
%s: e - line %d of "%s", illegal tag
%s: e - line %d of "%s", illegal character
%s: e - line %d of "%s", illegal use of reserved symbol %s
%s: e - line %d of "%s", the start symbol %s cannot be declared to be a token
%s: w - line %d of "%s", the type of %s has been redeclared
%s: w - line %d of "%s", the precedence of %s has been redeclared
%s: w - line %d of "%s", the value of %s has been redeclared
%s: e - line %d of "%s", the start symbol %s is a token
%s: w - line %d of "%s", the start symbol has been redeclared
%s: e - line %d of "%s", no grammar has been specified
%s: e - line %d of "%s", a token appears on the lhs of a production
%s: w - line %d of  "%s", conflicting %%prec specifiers
%s: e - line %d of "%s", unterminated action
%s: w - line %d of "%s", $%d references beyond the end of the current rule
%s: e - line %d of "%s", illegal $-name
%s: e - line %d of "%s", $$ is untyped
%s: e - line %d of "%s", $%d (%s) is untyped
%s: e - line %d of "%s", $%d is untyped
%s: w - line %d of "%s", the default action for %s assigns an undefined value to $$
%s: e - the start symbol %s is undefined
%s: w - the symbol %s is undefined
%s: w - %s flag unsupported, %s
q%d -> q%d [label="%s"];
q%d [label="%d:\l
  %s -> 
too many gotos
map_goto
lalr.c
low <= high
add_lookback_edge
found
lr0.c
get_state
0 <= key && key < nitems
too many states
%s: 1 rule never reduced
%s: %ld rules never reduced
%s: 
1 shift/reduce conflict
%d shift/reduce conflicts
1 reduce/reduce conflict
%d reduce/reduce conflicts
expected %d shift/reduce conflict%s.
expected %d reduce/reduce conflict%s.
#include "%s"
/* %%code "%s" block start */
/* %%code "%s" block end */
#line %d "%s"
(null)
yyparse
yylex
yyerror
yychar
yyval
yylval
yydebug
yynerrs
yyerrflag
yylhs
yylen
yydefred
yydgoto
yysindex
yyrindex
yygindex
yytable
yycheck
yyname
yyrule
#define YYPREFIX "%s"
#ifndef %s
#define %-10s %s%s
#endif /* %s */
#define YYPURE %d
text_file
#if ! defined(YYSTYPE) && ! defined(YYSTYPE_IS_DECLARED)
/* Default: YYSTYPE is the semantic value type. */
typedef int YYSTYPE;
# define YYSTYPE_IS_DECLARED 1
#endif
/* compatibility with bison */
#ifdef YYPARSE_PARAM
/* compatibility with FreeBSD */
# ifdef YYPARSE_PARAM_TYPE
#  define YYPARSE_DECL() yyparse(YYPARSE_PARAM_TYPE YYPARSE_PARAM)
# else
#  define YYPARSE_DECL() yyparse(void *YYPARSE_PARAM)
# endif
#else
# define YYPARSE_DECL() yyparse(
%s%s%s%s%s
void
/* Parameters sent to lex. */
#ifdef YYLEX_PARAM
# ifdef YYLEX_PARAM_TYPE
#  define YYLEX_DECL() yylex(YYSTYPE *yylval, YYLEX_PARAM_TYPE YYLEX_PARAM)
#  define YYLEX_DECL() yylex(YYSTYPE *yylval, void * YYLEX_PARAM)
# define YYLEX yylex(&yylval, YYLEX_PARAM)
# define YYLEX_DECL() yylex(void *YYLEX_PARAM)
# define YYLEX yylex(YYLEX_PARAM)
# define YYLEX_DECL() yylex(YYSTYPE *yylval, 
# define YYLEX yylex(&yylval, 
# define YYLEX_DECL() yylex(YYSTYPE *yylval)
# define YYLEX yylex(&yylval)
# define YYLEX_DECL() yylex(
# define YYLEX yylex(
# define YYLEX_DECL() yylex(void)
# define YYLEX yylex()
#if !(defined(yylex) || defined(YYSTATE))
int YYLEX_DECL();
%s%s
/* Parameters sent to yyerror. */
#ifndef YYERROR_DECL
#define YYERROR_DECL() yyerror(
const char *s)
#ifndef YYERROR_CALL
#define YYERROR_CALL(msg) yyerror(
msg)
#ifndef YYDEBUG
#define YYDEBUG %d
extern
#define 
 %ld
#define YYERRCODE %ld
#undef yytname
#define yytname yyname
extern YYSTYPE %slval;
%sconst YYINT %s%s[] = {%*d,
static 
%5d,
defred
dgoto
pack_vector
output.c
maximum table size exceeded
sindex
rindex
gindex
YYTABLESIZE: %ld
Table is longer than %ld elements.
#define YYTABLESIZE %ld
table
check
#define YYFINAL %ld
#define YYMAXTOKEN %d
#define YYUNDFTOKEN %d
#define YYTRANSLATE(a) ((a) > YYMAXTOKEN ? YYUNDFTOKEN : (a))
end-of-file
illegal-symbol
#undef yytname
#define yytname yyname
#if YYDEBUG
name
\"",
"'\"'",
rule
"%s :
\\\\
\\%c
 '\"'
 '\\\\
 '\\%c
 '%c'
#endif
%sconst char *const %s%s[] = {
typedef %s YYINT;
reader.c
line
cachec
cinc >= 0
#ident "
requires
provides
imports
#ifdef YYSTYPE
#undef  YYSTYPE_IS_DECLARED
#define YYSTYPE_IS_DECLARED 1
#ifndef YYSTYPE_IS_DECLARED
typedef union
 YYSTYPE;
#endif /* !YYSTYPE_IS_DECLARED */
$accept
$end
insert_empty_rule
cache
cache_size >= CACHE_SIZE
$$%d
case %d:
yyval.%s
yystack.l_mark[%d].%s
yystack.l_mark[%ld].%s
yystack.l_mark[%d]
yystack.l_mark[%ld]
break;
pack_symbols
i == ntokens && j == nsyms
v[1] != 0
%4d  %s :
%4d  
free_tags
tag_table[i]
make_bucket
symtab.c
name != 0
error
hash
name && *name
%ld terminals, %ld nonterminals
%ld grammar rules, %ld states
Rules never reduced:
%s :
  (%d)
State %d contains 
%ld shift/reduce conflict%s
%ld reduce/reduce conflict%s
state %d
%d: shift/reduce conflict (accept, reduce %ld) on $end
%d: shift/reduce conflict (shift %ld, reduce %ld) on %s
%d: reduce/reduce conflict (reduce %ld, reduce %ld) on %s
%s : 
  (%ld)
%s : .  (%ld)
$end  accept
%s  shift %ld
.  error
%s  reduce %d
.  reduce %d
%s  goto %d
/* original parser id follows */
/* yysccsid[] = "@(#)yaccpar
1.9 (Berkeley) 02/21/93" */
/* (use YYMAJOR/YYMINOR for ifdefs dependent on parser version) */
#define YYBYACC 1
#define YYMAJOR 2
#define YYMINOR 0
#define YYPATCH 20230201
#define YYEMPTY        (-1)
#define yyclearin      (yychar = YYEMPTY)
#define yyerrok        (yyerrflag = 0)
#define YYRECOVERING() (yyerrflag != 0)
#define YYENOMEM       (-2)
#define YYEOF          0
extern int YYPARSE_DECL();
extern YYINT yylhs[];
extern YYINT yylen[];
extern YYINT yydefred[];
extern YYINT yydgoto[];
extern YYINT yysindex[];
extern YYINT yyrindex[];
extern YYINT yygindex[];
extern YYINT yytable[];
extern YYINT yycheck[];
#if YYDEBUG || defined(yytname)
extern char *yyname[];
extern char *yyrule[];
int      yydebug;
int      yyerrflag;
int      yychar;
YYSTYPE  yyval;
YYSTYPE  yylval;
int      yynerrs;
/* define the initial stack-sizes */
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH  YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#define YYSTACKSIZE 10000
#define YYMAXDEPTH  10000
#define YYINITSTACKSIZE 200
typedef struct {
    unsigned stacksize;
    YYINT    *s_base;
    YYINT    *s_mark;
    YYINT    *s_last;
    YYSTYPE  *l_base;
    YYSTYPE  *l_mark;
} YYSTACKDATA;
/* variables for the parser stack */
static YYSTACKDATA yystack;
    int      yyerrflag;
    int      yychar;
    YYSTYPE  yyval;
    YYSTYPE  yylval;
    int      yynerrs;
    /* variables for the parser stack */
    YYSTACKDATA yystack;
#include <stdio.h>
/* needed for printf */
#include <stdlib.h>
/* needed for malloc, etc */
#include <string.h>
/* needed for memset */
/* allocate initial stack or double stack size, up to YYMAXDEPTH */
static int yygrowstack(YYSTACKDATA *data)
    int i;
    unsigned newsize;
    YYINT *newss;
    YYSTYPE *newvs;
    if ((newsize = data->stacksize) == 0)
        newsize = YYINITSTACKSIZE;
    else if (newsize >= YYMAXDEPTH)
        return YYENOMEM;
    else if ((newsize *= 2) > YYMAXDEPTH)
        newsize = YYMAXDEPTH;
    i = (int) (data->s_mark - data->s_base);
    newss = (YYINT *)realloc(data->s_base, newsize * sizeof(*newss));
    if (newss == NULL)
    data->s_base = newss;
    data->s_mark = newss + i;
    newvs = (YYSTYPE *)realloc(data->l_base, newsize * sizeof(*newvs));
    if (newvs == NULL)
    data->l_base = newvs;
    data->l_mark = newvs + i;
    data->stacksize = newsize;
    data->s_last = data->s_base + newsize - 1;
    return 0;
#if YYPURE || defined(YY_NO_LEAKS)
static void yyfreestack(YYSTACKDATA *data)
    free(data->s_base);
    free(data->l_base);
    memset(data, 0, sizeof(*data));
#define yyfreestack(data) /* nothing */
#define YYABORT  goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab
YYPARSE_DECL()
    int yym, yyn, yystate;
    const char *yys;
    if ((yys = getenv("YYDEBUG")) != NULL)
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
    memset(&yyval,  0, sizeof(yyval));
    memset(&yylval, 0, sizeof(yylval));
    /* yym is set below */
    /* yyn is set below */
    yynerrs = 0;
    yyerrflag = 0;
    yychar = YYEMPTY;
    yystate = 0;
#if YYPURE
    memset(&yystack, 0, sizeof(yystack));
    if (yystack.s_base == NULL && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
    yystack.s_mark = yystack.s_base;
    yystack.l_mark = yystack.l_base;
    *yystack.s_mark = 0;
yyloop:
    if ((yyn = yydefred[yystate]) != 0) goto yyreduce;
    if (yychar < 0)
        yychar = YYLEX;
        if (yychar < 0) yychar = YYEOF;
        if (yydebug)
        {
            if ((yys = yyname[YYTRANSLATE(yychar)]) == NULL) yys = yyname[YYUNDFTOKEN];
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
    if (((yyn = yysindex[yystate]) != 0) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) yychar)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
        if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
        yystate = yytable[yyn];
        *++yystack.s_mark = yytable[yyn];
        *++yystack.l_mark = yylval;
        yychar = YYEMPTY;
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    if (((yyn = yyrindex[yystate]) != 0) && (yyn += yychar) >= 0 &&
        yyn = yytable[yyn];
        goto yyreduce;
    if (yyerrflag != 0) goto yyinrecovery;
    YYERROR_CALL("syntax error");
    goto yyerrlab; /* redundant goto avoids 'unused label' warning */
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
        yyerrflag = 3;
        for (;;)
            if (((yyn = yysindex[*yystack.s_mark]) != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) YYERRCODE)
            {
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yystack.s_mark, yytable[yyn]);
                if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
                yystate = yytable[yyn];
                *++yystack.s_mark = yytable[yyn];
                *++yystack.l_mark = yylval;
                goto yyloop;
            }
            else
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yystack.s_mark);
                if (yystack.s_mark <= yystack.s_base) goto yyabort;
                --yystack.s_mark;
                --yystack.l_mark;
    else
        if (yychar == YYEOF) goto yyabort;
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
yyreduce:
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
    yym = yylen[yyn];
    if (yym > 0)
        yyval = yystack.l_mark[1-yym];
        memset(&yyval, 0, sizeof yyval);
    switch (yyn)
    yystack.s_mark -= yym;
    yystate = *yystack.s_mark;
    yystack.l_mark -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
        yystate = YYFINAL;
        *++yystack.s_mark = YYFINAL;
        *++yystack.l_mark = yyval;
        if (yychar < 0)
            yychar = YYLEX;
            if (yychar < 0) yychar = YYEOF;
            if (yydebug)
                if ((yys = yyname[YYTRANSLATE(yychar)]) == NULL) yys = yyname[YYUNDFTOKEN];
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
        if (yychar == YYEOF) goto yyaccept;
    if (((yyn = yygindex[yym]) != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == (YYINT) yystate)
        yystate = yydgoto[yym];
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yystack.s_mark, yystate);
    if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack) == YYENOMEM) goto yyoverflow;
    *++yystack.s_mark = (YYINT) yystate;
    *++yystack.l_mark = yyval;
    goto yyloop;
yyoverflow:
    YYERROR_CALL("yacc stack overflow");
yyabort:
    yyfreestack(&yystack);
    return (1);
yyaccept:
    return (0);
yacc
Bb:dghH:ilLo:Pp:rstVvy
invalid option: %s
Usage: %s [options] filename
Options:
Long options:
  --%-20s-%c
reconfigure with --enable-btyacc
%s - %s
2.0 20230201
action_file
digraph %s {
edge [fontsize=10];
node [shape=box,fontsize=10];
orientation=landscape;
rankdir=LR;
margin=0.2;
page="8.27,11.69"; // for A4 printing
ratio=auto;
union_file
.tab.h
.tab.i
.tab.c
.code.c
.output
.dot
TMPDIR
TEMP
/var/tmp/
%s/%.*sXXXXXX
binary
code
debug
error-verbose
expect
expect-rr
ident
left
lex-param
nonassoc
parse-param
pure-parser
right
start
term
token
token-table
type
union
yacc
