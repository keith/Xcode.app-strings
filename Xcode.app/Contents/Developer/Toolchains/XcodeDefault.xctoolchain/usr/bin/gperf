@(#)PROGRAM:gperf  PROJECT:gperf-15
.@15Keyword_Factory
18KeywordExt_Factory
?14Output_Defines
16Output_Constants
11Output_Enum
12Output_Expr1
11Output_Expr
21Output_Compare_Strcmp
14Output_Compare
22Output_Compare_Strncmp
21Output_Compare_Memcmp
getstr
getline.cc
*n - nchars_avail == (size_t) (read_pos - *lineptr)
%s: option `%s' is ambiguous
%s: option `--%s' doesn't allow an argument
%s: option `%c%s' doesn't allow an argument
%s: option `%s' requires an argument
%s: unrecognized option `--%s'
%s: unrecognized option `%c%s'
%s: illegal option -- %c
%s: invalid option -- %c
%s: option requires an argument -- %c
_getopt_internal
getopt.c
longopts
%s: option `-W %s' is ambiguous
                                               %s: option `-W %s' doesn't allow an argument
POSIXLY_CORRECT
dumping boolean array information
size = %d
iteration number = %d
end of array dump
dumping the hash table
total available table slots = %d, total bytes = %d, total collisions = %d
location, %*s, keyword
keysig
%8d, 
, %.*s
end dumping hash table
%s: error while reading input file
%s: The input file is empty!
%s:%u: warning: junk after %%%% is ignored
%s:%u:
%s:%u: only one %%{...%%} section is allowed
%s:%u: %%} outside of %%{...%%} section
%s:%u: %%{...%%} section already closed
%s:%u: warning: junk after %%} is ignored
%s:%u: warning: %% directives are ignored inside the %%{...%%} section
delimiters
struct-type
ignore-case
language
slot-name
initializer-suffix
hash-function-name
lookup-function-name
class-name
7bit
compare-lengths
compare-strncmp
readonly-tables
enum
includes
global-table
string-pool-name
null-strings
word-array-name
length-table-name
switch
%s:%u: number of switches %s must be a positive number
omit-struct-type
%s:%u: unrecognized %% directive
%s:%u: unterminated %%{ section
%s: missing struct declaration for option --struct-type
%s:%u: declarations are not allowed in the keywords section.
To declare a keyword starting with %%, enclose it in double-quotes.
%s:%u: unterminated string
%s:%u: octal escape out of range
%s:%u: hexadecimal escape without any hex digits
%s:%u: hexadecimal escape out of range
%s:%u: invalid escape sequence in string
%s:%u: string not followed by delimiter
%s: No keywords in input file!
(standard input)
%s:%u: missing argument in %%%s=ARG declaration.
%s:%u: junk after declaration
define
%s:%u: missing argument in %%define %s ARG declaration.
Cannot open input file '%s'
Cannot open output file '%s'
error while writing output file
Try '%s --help' for more information.
GNU 'gperf' generates perfect hash functions.
Usage: %s [OPTION]... [INPUT-FILE]
If a long option shows an argument as mandatory, then it is mandatory
for the equivalent short option also.
Output file location:
      --output-file=FILE Write output to specified file.
The results are written to standard output if no output file is specified
or if it is -.
Input file interpretation:
  -e, --delimiters=DELIMITER-LIST
                         Allow user to provide a string containing delimiters
                         used to separate keywords from their attributes.
                         Default is ",".
  -t, --struct-type      Allows the user to include a structured type
                         declaration for generated code. Any text before %%%%
                         is considered part of the type declaration. Key
                         words and additional fields may follow this, one
                         group of fields per line.
      --ignore-case      Consider upper and lower case ASCII characters as
                         equivalent. Note that locale dependent case mappings
                         are ignored.
Language for the output code:
  -L, --language=LANGUAGE-NAME
                         Generates code in the specified language. Languages
                         handled are currently C++, ANSI-C, C, and KR-C. The
                         default is C.
Details in the output code:
  -K, --slot-name=NAME   Select name of the keyword component in the keyword
                         structure.
  -F, --initializer-suffix=INITIALIZERS
                         Initializers for additional components in the keyword
                         structure.
  -H, --hash-function-name=NAME
                         Specify name of generated hash function. Default is
                         'hash'.
  -N, --lookup-function-name=NAME
                         Specify name of generated lookup function. Default
                         name is 'in_word_set'.
  -Z, --class-name=NAME  Specify name of generated C++ class. Default name is
                         'Perfect_Hash'.
  -7, --seven-bit        Assume 7-bit characters.
  -l, --compare-lengths  Compare key lengths before trying a string
                         comparison. This is necessary if the keywords
                         contain NUL bytes. It also helps cut down on the
                         number of string comparisons made during the lookup.
  -c, --compare-strncmp  Generate comparison code using strncmp rather than
                         strcmp.
  -C, --readonly-tables  Make the contents of generated lookup tables
                         constant, i.e., readonly.
  -E, --enum             Define constant values using an enum local to the
                         lookup function rather than with defines.
  -I, --includes         Include the necessary system include file <string.h>
                         at the beginning of the code.
  -G, --global-table     Generate the static table of keywords as a static
                         global variable, rather than hiding it inside of the
                         lookup function (which is the default behavior).
  -P, --pic              Optimize the generated table for inclusion in shared
                         libraries.  This reduces the startup time of programs
                         using a shared library containing the generated code.
  -Q, --string-pool-name=NAME
                         Specify name of string pool generated by option --pic.
                         Default name is 'stringpool'.
      --null-strings     Use NULL strings instead of empty strings for empty
                         keyword table entries.
  -W, --word-array-name=NAME
                         Specify name of word list array. Default name is
                         'wordlist'.
      --length-table-name=NAME
                         Specify name of length table array. Default name is
                         'lengthtable'.
  -S, --switch=COUNT     Causes the generated C code to use a switch
                         statement scheme, rather than an array lookup table.
                         This can lead to a reduction in both time and space
                         requirements for some keyfiles. The COUNT argument
                         determines how many switch statements are generated.
                         A value of 1 generates 1 switch containing all the
                         elements, a value of 2 generates 2 tables with 1/2
                         the elements in each table, etc. If COUNT is very
                         large, say 1000000, the generated C code does a
                         binary search.
  -T, --omit-struct-type
                         Prevents the transfer of the type declaration to the
                         output file. Use this option if the type is already
                         defined elsewhere.
      --size-type=TYPE   Specify the type for length parameters. Default type is
                         'unsigned int'.
Algorithm employed by gperf:
  -k, --key-positions=KEYS
                         Select the key positions used in the hash function.
                         The allowable choices range between 1-%d, inclusive.
                         The positions are separated by commas, ranges may be
                         used, and key positions may occur in any order.
                         Also, the meta-character '*' causes the generated
                         hash function to consider ALL key positions, and $
                         indicates the "final character" of a key, e.g.,
                         $,1,2,4,6-10.
  -D, --duplicates       Handle keywords that hash to duplicate values. This
                         is useful for certain highly redundant keyword sets.
  -m, --multiple-iterations=ITERATIONS
                         Perform multiple choices of the -i and -j values,
                         and choose the best results. This increases the
                         running time by a factor of ITERATIONS but does a
                         good job minimizing the generated table size.
  -i, --initial-asso=N   Provide an initial value for the associate values
                         array. Default is 0. Setting this value larger helps
                         inflate the size of the final table.
  -j, --jump=JUMP-VALUE  Affects the "jump value", i.e., how far to advance
                         the associated character value upon collisions. Must
                         be an odd number, default is %d.
  -n, --no-strlen        Do not include the length of the keyword when
                         computing the hash function.
  -r, --random           Utilizes randomness to initialize the associated
                         values table.
  -s, --size-multiple=N  Affects the size of the generated hash table. The
                         numeric argument N indicates "how many times larger
                         or smaller" the associated value range should be,
                         in relationship to the number of keys, e.g. a value
                         of 3 means "allow the maximum associated value to
                         be about 3 times larger than the number of input
                         keys". Conversely, a value of 1/3 means "make the
                         maximum associated value about 3 times smaller than
                         the number of input keys". A larger table should
                         decrease the time required for an unsuccessful
                         search, at the expense of extra table space. Default
                         value is 1.
Informative output:
  -h, --help             Print this message.
  -v, --version          Print the gperf version number.
  -d, --debug            Enables the debugging option (produces verbose
                         output to the standard error).
Report bugs to <bug-gnu-gperf@gnu.org>.
/* Command-line: 
 !"#$&'()*;<>?[\]`{|}~
in_word_set
name
Perfect_Hash
hash
wordlist
lengthtable
stringpool
unsigned int
dumping Options:
TYPE is........: %s
UPPERLOWER is..: %s
KRC is.........: %s
C is...........: %s
ANSIC is.......: %s
CPLUSPLUS is...: %s
SEVENBIT is....: %s
LENTABLE is....: %s
COMP is........: %s
CONST is.......: %s
ENUM is........: %s
INCLUDE is.....: %s
GLOBAL is......: %s
NULLSTRINGS is.: %s
SHAREDLIB is...: %s
SWITCH is......: %s
NOTYPE is......: %s
DUP is.........: %s
NOLENGTH is....: %s
RANDOM is......: %s
DEBUG is.......: %s
lookup function name = %s
hash function name = %s
word list name = %s
length table name = %s
string pool name = %s
slot name = %s
initializer suffix = %s
asso_values iterations = %d
jump value = %d
hash table size multiplier = %g
initial associated value = %d
delimiters = %s
size type = %s
number of switch statements = %d
enabled
disabled
all characters are used in the hash function
maximum keysig size = %d
key positions are: 
finished dumping Options
KR-C
ANSI-C
unsupported language option %s, defaulting to C
acCdDe:Ef:F:gGhH:i:Ij:k:K:lL:m:nN:oOpPQ:rs:S:tTvW:Z:7
Starting program %s, version %s, with debugging on.
Initial value %d should be non-zero, ignoring and continuing.
warning, -r option superceeds -i, ignoring -i option and continuing
Jump value %d must be a positive number.
Jump value %d should be odd, adding 1 and continuing...
Invalid position value or range, use 1,2,3-%d,'$' or '*'.
Duplicate key positions selected
No key positions selected.
asso_iterations value must not be negative, assuming 0
warning, -r option supersedes -i, disabling -i option and continuing
Invalid value for option -s.
Size multiple %g is excessive, did you really mean this?! (try '%s --help' for help)
Size multiple %g is extremely small, did you really mean this?! (try '%s --help' for help)
number of switches %s must be a positive number
GNU gperf %s
Copyright (C) %s Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
1989-1998, 2000-2004, 2006-2007
Written by %s and %s.
Douglas C. Schmidt
Bruno Haible
Extra trailing arguments to %s.
output-file
hash-fn-name
lookup-fn-name
seven-bit
size-type
key-positions
compare-strlen
duplicates
fast
initial-asso
jump
multiple-iterations
no-strlen
occurrence-sort
optimized-collision-resolution
random
size-multiple
help
version
debug
#define %s %d
%senum
%s  {
%s    %s = %d
%s  };
TOTAL_KEYWORDS
MIN_WORD_LENGTH
MAX_WORD_LENGTH
MIN_HASH_VALUE
MAX_HASH_VALUE
(((unsigned char)*
 ^ (unsigned char)*
) & ~32) == 0
 == *
 && !
gperf_case_
strcmp (
 + 1, 
 + 1
strncmp (
 + 1, len - 1
, len
) && 
[len] == '\0'
memcmp (
asso_values[
(unsigned char)
str[len - 1]
str[%d]
inline 
static 
%s::
(str, len)
     register char *str;
     register %s len;
(str, len)
     register const char *str;
     register %s len;
(register const char *str, register %s len)
/* %s */
  static %s%s asso_values[] =
    {
     
  return %s;
  return %s
len + 
  register unsigned int hval = %s;
  switch (%s)
    {
      default:
hval
      case %d:
        hval += 
        break;
    }
  return hval
%sstatic %s%s %s[] =
%s  {
%s   
%s  };
%sstruct %s_t
%s  {
%s    char %s_str%d[sizeof(
%s  };
%sstatic %sstruct %s_t %s_contents =
%s  {
%s    
%s#define %s ((%schar *) &%s_contents)
%sstatic 
%s[] =
%s  {
keyword = %.*s, index = %d
static linked keyword = %.*s, index = %d
output_lookup_array
output.cc
dup_ptr->count >= 2
dup_ptr[%ld]: hash_value = %d, index = %d, count = %d
lookup_array[dup_ptr->hash_value] == dup_ptr->index
%sstatic %s%s lookup[] =
%s  {
%s  };
  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = %s (str, len);
          register %s%s *lengthptr;
          register 
          register %sresword;
%*smulticompare:
%*s  while (wordptr < wordendptr)
%*s    {
%*s      if (len == *lengthptr)
%*s        {
%*s      register %schar *s = 
wordptr->%s
*wordptr
 + %s
%*s      if (
%*s        return %s;
wordptr
%*s        }
%*s      lengthptr++;
%*s      wordptr++;
%*s    }
%*s  return 0;
          {
            register %schar *s = resword->%s
            if (
          if (
resword
%*s{
%*s  register int index = lookup[key];
%*s  if (index >= 0)
%*s    {
%*s      if (len == %s[index])
%*s    {
%*s      register %schar *s = %s[index]
%*s        return 
&%s[index]
%*s    }
%*s    }
%*s  else if (index < -TOTAL_KEYWORDS)
%*s    {
%*s      register int offset = - 1 - TOTAL_KEYWORDS - index;
%*s      register %s%s *lengthptr = &%s[TOTAL_KEYWORDS + lookup[offset]];
%*s      register 
*wordptr = &%s[TOTAL_KEYWORDS + lookup[offset]];
%*s      while (wordptr < wordendptr)
%*s        {
%*s          if (len == *lengthptr)
%*s            {
%*s          register %schar *s = 
%*s          if (
%*s            return %s;
%*s            }
%*s          lengthptr++;
%*s          wordptr++;
%*s        }
%*s    }
%*s}
%*sif (len == %s[key])
%*s{
%*s  register int o = %s[key]
%*s  if (o >= 0)
%*s    {
%*s  register %schar *s = o
%*s{
%*s  register %schar *s = %s[key]
%*s  if (
s && 
%*s    return 
&%s[key]
%s%s
const 
const char *
char *
 code produced by gperf version %s */
/* Computed positions: -k'
#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
      && ('%%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
/* The character set is not based on ISO-646.  */
%s "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
error
#error
/* maximum key range = %d, duplicates = %d */
class %s
private:
  static inline unsigned int %s (const char *str, %s len);
public:
  static %s%s%s (const char *str, %s len);
unsigned char
unsigned short
%s %s
%s%s 
(char*)0
offsetof(struct %s_t, %s_str%d)
 /* hash value = %d, index = %d */
signed char
short
%*s/* know %d <= key <= %d, contains %d cases */
%*sif (key < %d)
%*s  {
%*s  }
%*selse
%*s  {
%*s  }
output_switches
min_hash_value <= lowest_case_value
lowest_case_value <= max_hash_value
%*sif (key == %d)
%*s  {
%*sswitch (key)
%*sswitch (key - %d)
%*s  {
%*s    case %d:
%*s      break;
%*s/* hash value = %4d, keyword = "%.*s" */
%*slengthptr = &%s[%d];
%*swordptr = &%s[%d];
%*swordendptr = wordptr + %d;
%*sgoto multicompare;
%*sif (len == %d)
%*s  {
%*sresword = 
&%s[%d]
%*sgoto compare;
#line %u 
#ifndef GPERF_DOWNCASE
#define GPERF_DOWNCASE 1
static unsigned char gperf_downcase[256] =
 %3d
#ifndef GPERF_CASE_MEMCMP
#define GPERF_CASE_MEMCMP 1
static int
gperf_case_memcmp 
(s1, s2, n)
     register char *s1;
     register char *s2;
     register unsigned int n;
(s1, s2, n)
     register const char *s1;
     register const char *s2;
     register unsigned int n;
(register const char *s1, register const char *s2, register unsigned int n)
#ifndef GPERF_CASE_STRNCMP
#define GPERF_CASE_STRNCMP 1
static int
gperf_case_strncmp 
#ifndef GPERF_CASE_STRCMP
#define GPERF_CASE_STRCMP 1
static int
gperf_case_strcmp 
(s1, s2)
     register char *s1;
     register char *s2;
(s1, s2)
     register const char *s1;
     register const char *s2;
(register const char *s1, register const char *s2)
      /*FALLTHROUGH*/
    };
/*ARGSUSED*/
#ifdef __GNUC__
__inline
#else
#ifdef __cplusplus
inline
#endif
#endif
      if (key <= MAX_HASH_VALUE)
    }
  return 0;
*wordendptr = wordptr + -lookup[offset + 1];
      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          return 0;
        compare:
            return resword;
        }
              return resword;
          }
*resword;
*wordptr;
*wordendptr;
' */
#include <string.h>
#include <stddef.h>
  };
#endif
  for (; n > 0;)
    {
      unsigned char c1 = gperf_downcase[(unsigned char)*s1++];
      unsigned char c2 = gperf_downcase[(unsigned char)*s2++];
      if (c1 == c2)
        {
          n--;
          continue;
        }
      return (int)c1 - (int)c2;
    }
  return 0;
  for (; n > 0;)
    {
      unsigned char c1 = gperf_downcase[(unsigned char)*s1++];
      unsigned char c2 = gperf_downcase[(unsigned char)*s2++];
      if (c1 != 0 && c1 == c2)
        {
          n--;
          continue;
        }
      return (int)c1 - (int)c2;
    }
  return 0;
  for (;;)
    {
      unsigned char c1 = gperf_downcase[(unsigned char)*s1++];
      unsigned char c2 = gperf_downcase[(unsigned char)*s2++];
      if (c1 != 0 && c1 == c2)
        continue;
      return (int)c1 - (int)c2;
    }
#endif
Positions::add internal error: overflow
Positions::add internal error: duplicate
Positions::remove internal error: not found
Empty input keyword is not allowed.
To recognize an empty input keyword, your code should check for
len == 0 before calling the gperf generated lookup function.
Option --seven-bit has been specified,
but keyword "%.*s" contains non-ASCII characters.
Try removing option --seven-bit.
Computed positions: 
find_alpha_inc
search.cc
nindices > 0
Computed alpha increments: 
%u:+%u
prepare_asso_values
prev
Key link: "%.*s" = "%.*s", with key set "
%d input keys have identical hash values, examine output carefully...
%d input keys have identical hash values,
try different key positions or use option -D.
use option -D.
total non-linked keys = %d
maximum associated value is %d
maximum size of generated hash table is %d
dumping the keyword list without duplicates
keyword #, %*s, keyword
%9d, 
end of keyword list
Step %u chooses _asso_values[
'%c'
], expected number of iterations between %g and %g.
Keyword equivalence classes:
  %.*s
Step %u chose _asso_values[
] in %u iterations.
Internal error, unexpected duplicate hash code
try options -m or -r, or use new key positions.
try options -m or -r.
dumping occurrence and associated values tables
asso_values[%c] = %6d, occurrences[%c] = %6d
end table dumping
Dumping key list information:
total non-static linked keywords = %d
total keywords = %d
total duplicates = %d
maximum key length = %d
List contents are:
(hash value, key length, index, %*s, keyword):
selchars
%11d,%11d,%6d, 
End dumping list.
bool array size = %d, total bytes = %d
(re-initialized bool_array)
3.0.3
@(#)PROGRAM:gperf  PROJECT:gperf-15
)15Keyword_Factory
18KeywordExt_Factory
14Output_Defines
16Output_Constants
11Output_Enum
12Output_Expr1
11Output_Expr
21Output_Compare_Strcmp
14Output_Compare
22Output_Compare_Strncmp
21Output_Compare_Memcmp
getstr
getline.cc
*n - nchars_avail == (size_t) (read_pos - *lineptr)
%s: option `%s' is ambiguous
%s: option `--%s' doesn't allow an argument
%s: option `%c%s' doesn't allow an argument
%s: option `%s' requires an argument
%s: unrecognized option `--%s'
%s: unrecognized option `%c%s'
%s: illegal option -- %c
%s: invalid option -- %c
%s: option requires an argument -- %c
_getopt_internal
getopt.c
longopts
%s: option `-W %s' is ambiguous
                                               %s: option `-W %s' doesn't allow an argument
POSIXLY_CORRECT
dumping boolean array information
size = %d
iteration number = %d
end of array dump
dumping the hash table
total available table slots = %d, total bytes = %d, total collisions = %d
location, %*s, keyword
keysig
%8d, 
, %.*s
end dumping hash table
%s: error while reading input file
%s: The input file is empty!
%s:%u: warning: junk after %%%% is ignored
%s:%u:
%s:%u: only one %%{...%%} section is allowed
%s:%u: %%} outside of %%{...%%} section
%s:%u: %%{...%%} section already closed
%s:%u: warning: junk after %%} is ignored
%s:%u: warning: %% directives are ignored inside the %%{...%%} section
delimiters
struct-type
ignore-case
language
slot-name
initializer-suffix
hash-function-name
lookup-function-name
class-name
7bit
compare-lengths
compare-strncmp
readonly-tables
enum
includes
global-table
string-pool-name
null-strings
word-array-name
length-table-name
switch
%s:%u: number of switches %s must be a positive number
omit-struct-type
%s:%u: unrecognized %% directive
%s:%u: unterminated %%{ section
%s: missing struct declaration for option --struct-type
%s:%u: declarations are not allowed in the keywords section.
To declare a keyword starting with %%, enclose it in double-quotes.
%s:%u: unterminated string
%s:%u: octal escape out of range
%s:%u: hexadecimal escape without any hex digits
%s:%u: hexadecimal escape out of range
%s:%u: invalid escape sequence in string
%s:%u: string not followed by delimiter
%s: No keywords in input file!
(standard input)
%s:%u: missing argument in %%%s=ARG declaration.
%s:%u: junk after declaration
define
%s:%u: missing argument in %%define %s ARG declaration.
Cannot open input file '%s'
Cannot open output file '%s'
error while writing output file
Try '%s --help' for more information.
GNU 'gperf' generates perfect hash functions.
Usage: %s [OPTION]... [INPUT-FILE]
If a long option shows an argument as mandatory, then it is mandatory
for the equivalent short option also.
Output file location:
      --output-file=FILE Write output to specified file.
The results are written to standard output if no output file is specified
or if it is -.
Input file interpretation:
  -e, --delimiters=DELIMITER-LIST
                         Allow user to provide a string containing delimiters
                         used to separate keywords from their attributes.
                         Default is ",".
  -t, --struct-type      Allows the user to include a structured type
                         declaration for generated code. Any text before %%%%
                         is considered part of the type declaration. Key
                         words and additional fields may follow this, one
                         group of fields per line.
      --ignore-case      Consider upper and lower case ASCII characters as
                         equivalent. Note that locale dependent case mappings
                         are ignored.
Language for the output code:
  -L, --language=LANGUAGE-NAME
                         Generates code in the specified language. Languages
                         handled are currently C++, ANSI-C, C, and KR-C. The
                         default is C.
Details in the output code:
  -K, --slot-name=NAME   Select name of the keyword component in the keyword
                         structure.
  -F, --initializer-suffix=INITIALIZERS
                         Initializers for additional components in the keyword
                         structure.
  -H, --hash-function-name=NAME
                         Specify name of generated hash function. Default is
                         'hash'.
  -N, --lookup-function-name=NAME
                         Specify name of generated lookup function. Default
                         name is 'in_word_set'.
  -Z, --class-name=NAME  Specify name of generated C++ class. Default name is
                         'Perfect_Hash'.
  -7, --seven-bit        Assume 7-bit characters.
  -l, --compare-lengths  Compare key lengths before trying a string
                         comparison. This is necessary if the keywords
                         contain NUL bytes. It also helps cut down on the
                         number of string comparisons made during the lookup.
  -c, --compare-strncmp  Generate comparison code using strncmp rather than
                         strcmp.
  -C, --readonly-tables  Make the contents of generated lookup tables
                         constant, i.e., readonly.
  -E, --enum             Define constant values using an enum local to the
                         lookup function rather than with defines.
  -I, --includes         Include the necessary system include file <string.h>
                         at the beginning of the code.
  -G, --global-table     Generate the static table of keywords as a static
                         global variable, rather than hiding it inside of the
                         lookup function (which is the default behavior).
  -P, --pic              Optimize the generated table for inclusion in shared
                         libraries.  This reduces the startup time of programs
                         using a shared library containing the generated code.
  -Q, --string-pool-name=NAME
                         Specify name of string pool generated by option --pic.
                         Default name is 'stringpool'.
      --null-strings     Use NULL strings instead of empty strings for empty
                         keyword table entries.
  -W, --word-array-name=NAME
                         Specify name of word list array. Default name is
                         'wordlist'.
      --length-table-name=NAME
                         Specify name of length table array. Default name is
                         'lengthtable'.
  -S, --switch=COUNT     Causes the generated C code to use a switch
                         statement scheme, rather than an array lookup table.
                         This can lead to a reduction in both time and space
                         requirements for some keyfiles. The COUNT argument
                         determines how many switch statements are generated.
                         A value of 1 generates 1 switch containing all the
                         elements, a value of 2 generates 2 tables with 1/2
                         the elements in each table, etc. If COUNT is very
                         large, say 1000000, the generated C code does a
                         binary search.
  -T, --omit-struct-type
                         Prevents the transfer of the type declaration to the
                         output file. Use this option if the type is already
                         defined elsewhere.
      --size-type=TYPE   Specify the type for length parameters. Default type is
                         'unsigned int'.
Algorithm employed by gperf:
  -k, --key-positions=KEYS
                         Select the key positions used in the hash function.
                         The allowable choices range between 1-%d, inclusive.
                         The positions are separated by commas, ranges may be
                         used, and key positions may occur in any order.
                         Also, the meta-character '*' causes the generated
                         hash function to consider ALL key positions, and $
                         indicates the "final character" of a key, e.g.,
                         $,1,2,4,6-10.
  -D, --duplicates       Handle keywords that hash to duplicate values. This
                         is useful for certain highly redundant keyword sets.
  -m, --multiple-iterations=ITERATIONS
                         Perform multiple choices of the -i and -j values,
                         and choose the best results. This increases the
                         running time by a factor of ITERATIONS but does a
                         good job minimizing the generated table size.
  -i, --initial-asso=N   Provide an initial value for the associate values
                         array. Default is 0. Setting this value larger helps
                         inflate the size of the final table.
  -j, --jump=JUMP-VALUE  Affects the "jump value", i.e., how far to advance
                         the associated character value upon collisions. Must
                         be an odd number, default is %d.
  -n, --no-strlen        Do not include the length of the keyword when
                         computing the hash function.
  -r, --random           Utilizes randomness to initialize the associated
                         values table.
  -s, --size-multiple=N  Affects the size of the generated hash table. The
                         numeric argument N indicates "how many times larger
                         or smaller" the associated value range should be,
                         in relationship to the number of keys, e.g. a value
                         of 3 means "allow the maximum associated value to
                         be about 3 times larger than the number of input
                         keys". Conversely, a value of 1/3 means "make the
                         maximum associated value about 3 times smaller than
                         the number of input keys". A larger table should
                         decrease the time required for an unsuccessful
                         search, at the expense of extra table space. Default
                         value is 1.
Informative output:
  -h, --help             Print this message.
  -v, --version          Print the gperf version number.
  -d, --debug            Enables the debugging option (produces verbose
                         output to the standard error).
Report bugs to <bug-gnu-gperf@gnu.org>.
/* Command-line: 
 !"#$&'()*;<>?[\]`{|}~
in_word_set
name
Perfect_Hash
hash
wordlist
lengthtable
stringpool
unsigned int
dumping Options:
TYPE is........: %s
UPPERLOWER is..: %s
KRC is.........: %s
C is...........: %s
ANSIC is.......: %s
CPLUSPLUS is...: %s
SEVENBIT is....: %s
LENTABLE is....: %s
COMP is........: %s
CONST is.......: %s
ENUM is........: %s
INCLUDE is.....: %s
GLOBAL is......: %s
NULLSTRINGS is.: %s
SHAREDLIB is...: %s
SWITCH is......: %s
NOTYPE is......: %s
DUP is.........: %s
NOLENGTH is....: %s
RANDOM is......: %s
DEBUG is.......: %s
lookup function name = %s
hash function name = %s
word list name = %s
length table name = %s
string pool name = %s
slot name = %s
initializer suffix = %s
asso_values iterations = %d
jump value = %d
hash table size multiplier = %g
initial associated value = %d
delimiters = %s
size type = %s
number of switch statements = %d
enabled
disabled
all characters are used in the hash function
maximum keysig size = %d
key positions are: 
finished dumping Options
KR-C
ANSI-C
unsupported language option %s, defaulting to C
acCdDe:Ef:F:gGhH:i:Ij:k:K:lL:m:nN:oOpPQ:rs:S:tTvW:Z:7
Starting program %s, version %s, with debugging on.
Initial value %d should be non-zero, ignoring and continuing.
warning, -r option superceeds -i, ignoring -i option and continuing
Jump value %d must be a positive number.
Jump value %d should be odd, adding 1 and continuing...
Invalid position value or range, use 1,2,3-%d,'$' or '*'.
Duplicate key positions selected
No key positions selected.
asso_iterations value must not be negative, assuming 0
warning, -r option supersedes -i, disabling -i option and continuing
Invalid value for option -s.
Size multiple %g is excessive, did you really mean this?! (try '%s --help' for help)
Size multiple %g is extremely small, did you really mean this?! (try '%s --help' for help)
number of switches %s must be a positive number
GNU gperf %s
Copyright (C) %s Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
1989-1998, 2000-2004, 2006-2007
Written by %s and %s.
Douglas C. Schmidt
Bruno Haible
Extra trailing arguments to %s.
output-file
hash-fn-name
lookup-fn-name
seven-bit
size-type
key-positions
compare-strlen
duplicates
fast
initial-asso
jump
multiple-iterations
no-strlen
occurrence-sort
optimized-collision-resolution
random
size-multiple
help
version
debug
#define %s %d
%senum
%s  {
%s    %s = %d
%s  };
TOTAL_KEYWORDS
MIN_WORD_LENGTH
MAX_WORD_LENGTH
MIN_HASH_VALUE
MAX_HASH_VALUE
(((unsigned char)*
 ^ (unsigned char)*
) & ~32) == 0
 == *
 && !
gperf_case_
strcmp (
 + 1, 
 + 1
strncmp (
 + 1, len - 1
, len
) && 
[len] == '\0'
memcmp (
asso_values[
(unsigned char)
str[len - 1]
str[%d]
inline 
static 
%s::
(str, len)
     register char *str;
     register %s len;
(str, len)
     register const char *str;
     register %s len;
(register const char *str, register %s len)
/* %s */
  static %s%s asso_values[] =
    {
     
  return %s;
  return %s
len + 
  register unsigned int hval = %s;
  switch (%s)
    {
      default:
hval
      case %d:
        hval += 
        break;
    }
  return hval
%sstatic %s%s %s[] =
%s  {
%s   
%s  };
%sstruct %s_t
%s  {
%s    char %s_str%d[sizeof(
%s  };
%sstatic %sstruct %s_t %s_contents =
%s  {
%s    
%s#define %s ((%schar *) &%s_contents)
%sstatic 
%s[] =
%s  {
keyword = %.*s, index = %d
static linked keyword = %.*s, index = %d
output_lookup_array
output.cc
dup_ptr->count >= 2
dup_ptr[%ld]: hash_value = %d, index = %d, count = %d
lookup_array[dup_ptr->hash_value] == dup_ptr->index
%sstatic %s%s lookup[] =
%s  {
%s  };
  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = %s (str, len);
          register %s%s *lengthptr;
          register 
          register %sresword;
%*smulticompare:
%*s  while (wordptr < wordendptr)
%*s    {
%*s      if (len == *lengthptr)
%*s        {
%*s      register %schar *s = 
wordptr->%s
*wordptr
 + %s
%*s      if (
%*s        return %s;
wordptr
%*s        }
%*s      lengthptr++;
%*s      wordptr++;
%*s    }
%*s  return 0;
          {
            register %schar *s = resword->%s
            if (
          if (
resword
%*s{
%*s  register int index = lookup[key];
%*s  if (index >= 0)
%*s    {
%*s      if (len == %s[index])
%*s    {
%*s      register %schar *s = %s[index]
%*s        return 
&%s[index]
%*s    }
%*s    }
%*s  else if (index < -TOTAL_KEYWORDS)
%*s    {
%*s      register int offset = - 1 - TOTAL_KEYWORDS - index;
%*s      register %s%s *lengthptr = &%s[TOTAL_KEYWORDS + lookup[offset]];
%*s      register 
*wordptr = &%s[TOTAL_KEYWORDS + lookup[offset]];
%*s      while (wordptr < wordendptr)
%*s        {
%*s          if (len == *lengthptr)
%*s            {
%*s          register %schar *s = 
%*s          if (
%*s            return %s;
%*s            }
%*s          lengthptr++;
%*s          wordptr++;
%*s        }
%*s    }
%*s}
%*sif (len == %s[key])
%*s{
%*s  register int o = %s[key]
%*s  if (o >= 0)
%*s    {
%*s  register %schar *s = o
%*s{
%*s  register %schar *s = %s[key]
%*s  if (
s && 
%*s    return 
&%s[key]
%s%s
const 
const char *
char *
 code produced by gperf version %s */
/* Computed positions: -k'
#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
      && ('%%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
/* The character set is not based on ISO-646.  */
%s "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
error
#error
/* maximum key range = %d, duplicates = %d */
class %s
private:
  static inline unsigned int %s (const char *str, %s len);
public:
  static %s%s%s (const char *str, %s len);
unsigned char
unsigned short
%s %s
%s%s 
(char*)0
offsetof(struct %s_t, %s_str%d)
 /* hash value = %d, index = %d */
signed char
short
%*s/* know %d <= key <= %d, contains %d cases */
%*sif (key < %d)
%*s  {
%*s  }
%*selse
%*s  {
%*s  }
output_switches
min_hash_value <= lowest_case_value
lowest_case_value <= max_hash_value
%*sif (key == %d)
%*s  {
%*sswitch (key)
%*sswitch (key - %d)
%*s  {
%*s    case %d:
%*s      break;
%*s/* hash value = %4d, keyword = "%.*s" */
%*slengthptr = &%s[%d];
%*swordptr = &%s[%d];
%*swordendptr = wordptr + %d;
%*sgoto multicompare;
%*sif (len == %d)
%*s  {
%*sresword = 
&%s[%d]
%*sgoto compare;
#line %u 
#ifndef GPERF_DOWNCASE
#define GPERF_DOWNCASE 1
static unsigned char gperf_downcase[256] =
 %3d
#ifndef GPERF_CASE_MEMCMP
#define GPERF_CASE_MEMCMP 1
static int
gperf_case_memcmp 
(s1, s2, n)
     register char *s1;
     register char *s2;
     register unsigned int n;
(s1, s2, n)
     register const char *s1;
     register const char *s2;
     register unsigned int n;
(register const char *s1, register const char *s2, register unsigned int n)
#ifndef GPERF_CASE_STRNCMP
#define GPERF_CASE_STRNCMP 1
static int
gperf_case_strncmp 
#ifndef GPERF_CASE_STRCMP
#define GPERF_CASE_STRCMP 1
static int
gperf_case_strcmp 
(s1, s2)
     register char *s1;
     register char *s2;
(s1, s2)
     register const char *s1;
     register const char *s2;
(register const char *s1, register const char *s2)
      /*FALLTHROUGH*/
    };
/*ARGSUSED*/
#ifdef __GNUC__
__inline
#else
#ifdef __cplusplus
inline
#endif
#endif
      if (key <= MAX_HASH_VALUE)
    }
  return 0;
*wordendptr = wordptr + -lookup[offset + 1];
      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          return 0;
        compare:
            return resword;
        }
              return resword;
          }
*resword;
*wordptr;
*wordendptr;
' */
#include <string.h>
#include <stddef.h>
  };
#endif
  for (; n > 0;)
    {
      unsigned char c1 = gperf_downcase[(unsigned char)*s1++];
      unsigned char c2 = gperf_downcase[(unsigned char)*s2++];
      if (c1 == c2)
        {
          n--;
          continue;
        }
      return (int)c1 - (int)c2;
    }
  return 0;
  for (; n > 0;)
    {
      unsigned char c1 = gperf_downcase[(unsigned char)*s1++];
      unsigned char c2 = gperf_downcase[(unsigned char)*s2++];
      if (c1 != 0 && c1 == c2)
        {
          n--;
          continue;
        }
      return (int)c1 - (int)c2;
    }
  return 0;
  for (;;)
    {
      unsigned char c1 = gperf_downcase[(unsigned char)*s1++];
      unsigned char c2 = gperf_downcase[(unsigned char)*s2++];
      if (c1 != 0 && c1 == c2)
        continue;
      return (int)c1 - (int)c2;
    }
#endif
Positions::add internal error: overflow
Positions::add internal error: duplicate
Positions::remove internal error: not found
Empty input keyword is not allowed.
To recognize an empty input keyword, your code should check for
len == 0 before calling the gperf generated lookup function.
Option --seven-bit has been specified,
but keyword "%.*s" contains non-ASCII characters.
Try removing option --seven-bit.
Computed positions: 
find_alpha_inc
search.cc
nindices > 0
Computed alpha increments: 
%u:+%u
prepare_asso_values
prev
Key link: "%.*s" = "%.*s", with key set "
%d input keys have identical hash values, examine output carefully...
%d input keys have identical hash values,
try different key positions or use option -D.
use option -D.
total non-linked keys = %d
maximum associated value is %d
maximum size of generated hash table is %d
dumping the keyword list without duplicates
keyword #, %*s, keyword
%9d, 
end of keyword list
Step %u chooses _asso_values[
'%c'
], expected number of iterations between %g and %g.
Keyword equivalence classes:
  %.*s
Step %u chose _asso_values[
] in %u iterations.
Internal error, unexpected duplicate hash code
try options -m or -r, or use new key positions.
try options -m or -r.
dumping occurrence and associated values tables
asso_values[%c] = %6d, occurrences[%c] = %6d
end table dumping
Dumping key list information:
total non-static linked keywords = %d
total keywords = %d
total duplicates = %d
maximum key length = %d
List contents are:
(hash value, key length, index, %*s, keyword):
selchars
%11d,%11d,%6d, 
End dumping list.
bool array size = %d, total bytes = %d
(re-initialized bool_array)
3.0.3
