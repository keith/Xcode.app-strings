%L
% L
%"L
%$L
%&L
%(L
%*L
%,L
%.L
%0L
%2L
%4L
%6L
%8L
%:L
%<L
%>L
%@L
%BL
%DL
%FL
%HL
%JL
%LL
%NL
%PL
%RL
%TL
%VL
%XL
%bL
%dL
%nL
%pL
%rL
%tL
%vL
%xL
%zL
%|L
%~L
% M
%"M
%$M
%&M
%(M
%*M
%,M
%.M
%0M
%2M
%4M
%6M
%8M
%:M
%<M
%>M
%@M
%BM
%DM
%FM
%HM
%JM
%LM
%NM
%PM
%RM
%TM
%VM
%XM
%ZM
%\M
%^M
%`M
%bM
%dM
                
0123456789ABCDEF
0000000000000000
----------------H
                                                                                
:&L<(R
xsd1
:&L<(R
K@~\\\\\\\\\\\\\\\\\\\\\\\\
[0;30m
[0;31m
[0;32m
[0;33m
[0;34m
[0;35m
[0;36m
[0;37m
[0;1;30m
[0;1;31m
[0;1;32m
[0;1;33m
[0;1;34m
[0;1;35m
[0;1;36m
[0;1;37m
[0;40m
[0;41m
[0;42m
[0;43m
[0;44m
[0;45m
[0;46m
[0;47m
[0;1;40m
[0;1;41m
[0;1;42m
[0;1;43m
[0;1;44m
[0;1;45m
[0;1;46m
[0;1;47m
LLVM_DISABLE_SYMBOLIZATION
LLVM_SYMBOLIZER_PATH
_saved_registersno_caller_saved_randomize_layoutno_randomize_laysanitize_addressno_sanitize_addr_safety_analysisno_address_safetno_sanitize_thread
trument_functionno_profile_instrno_instrument_fuo_call_used_regszero_call_used_rlign_arg_pointerforce_align_arg_transparent_union
warn_unused_result
on_entry
patchable_functi_pointer
xnu_returns_dataer_with_type_tagpointer_with_typnt_with_type_tagargument_with_tyanalyzer_suppress
aarch64_vector_pcs
ar_address_spaceaarch64_far_addrrm_builtin_alias__clang_arm_builno_thread_safetyruntime_protocolobjc_non_runtimee_load_hardeningno_speculative_lretained_on_zeroos_returns_retaiated_initializerobjc_designated_ssing_restrictedobjc_subclassingd_only_placementenforce_read_onlined_on_non_zerons_inner_pointerobjc_returns_innspeculative_loadobjc_runtime_name
ownership_returnswift_async_error
rame_larger_thanerror_if_stack_fdisable_tail_calls
enum_extensibility
iboutletcollection
mig_server_routine
no_sanitize_memory
no_stack_protector
objc_method_family
objc_nonlazy_class
opencl_global_host
sycl_special_claswift_error_resudirect_call_onlyenforce_tcb_leafinternal_linkagemin_vector_widthns_consumes_selfneon_vector_typeos_consumes_thispass_object_sizerns_not_retainedcf_returns_not_rrns_autoreleasedns_returns_autorns_returns_not_ros_returns_not_rmp_table
cfi_canonical_juretained
objc_externally_ect_size
pass_dynamic_objfootnote
symbol_metadata_audited_transfercf_audited_transreturns_retainedcf_returns_retaiunknown_transfercf_unknown_transgnose_as_builtindiagnose_as_builns_returns_retaic_bridge_mutableobjc_bridge_mutac_bridge_relatedobjc_bridge_relac_direct_membersobjc_direct_membc_requires_superobjc_requires_suft_async_contextswift_async_contafe_buffer_usageunsafe_buffer_us_usage_semanticsxnu_usage_semantal_source_symbolexternal_source_ndependent_classobjc_independentmemory_operationtyped_memory_opeh_vtable_pointerptrauth_vtable_plways_instrumentxray_always_instized
loader_uninitialtype
neon_polyvector_ible
objc_runtime_visrect
objc_suppress_divice
opencl_global_deping
transparent_steprve_access_indexpreserve_access_isibility_publiclto_visibility_pprecise_lifetimeobjc_precise_lif_indirect_resultswift_indirect_rtag_for_datatypetype_tag_for_datnever_instrumentxray_never_instrgpu_waves_per_euamdgpu_waves_per_work_group_sizeamdgpu_flat_workacquire_capabilihared_capabilityacquire_shared_cpability
assert_shared_caassert_capability
shared_capabilitet_state_on_readconsumable_set_s_auto_cast_stateconsumable_auto_t_initializationrequire_constantrelease_shared_ctry_acquire_sharrequired
exclusive_locks_neric_capabilityrelease_generic_requires_shared_uires_capabilityrequires_capabilreturn_typestatestandalone_debugrelease_capabilid_locks_requiredshared_locks_reqquire_capabilitytry_acquire_capacarries_dependency
no_unique_addresDispatchThreadIDSV_DispatchThreanounroll_and_jam__launch_bounds__
n_surface_type____device_builtinn_texture_type____cudart_builtin__
analyzer_noreturtion
shared_lock_funcve_lock_functionexclusive_lock_focally_streamingarm_locally_streassert_shared_lock
t_exclusive_lockassert_exclusive_sve_vector_bitsarm_sve_vector_bng_builtin_aliasclang_builtin_almpatible
arm_streaming_cotin_surface_typedevice_builtin_stin_texture_typedevice_builtin_te_nonsecure_callcmse_nonsecure_cntry
cmse_nonsecure_etrylock_functionexclusive_trylocfinition
objc_complete_ded_sub_group_sizeintel_reqd_sub_gopencl_unroll_hint
shared_trylock_fsize
reqd_work_group_hint
work_group_size_swift_objc_members
swift_async_name_rvv_vector_bitsriscv_rvv_vector_bridged_typedefswift_bridged_ty
#pragma-messages
#warnings
CFString-literal
IndependentClass-attribute
NSObject-attribute
absolute-value
abstract-final-class
abstract-vbase-init
address
address-of-packed-member
address-of-temporary
aggregate-return
aix-compat
align-mismatch
alloca
alloca-with-align-alignof
always-inline-coroutine
ambiguous-delete
ambiguous-ellipsis
ambiguous-macro
ambiguous-member-template
ambiguous-reversed-operator
analyzer-incompatible-plugin
anon-enum-enum-conversion
anonymous-pack-parens
apinotes
arc%arc-bridge-casts-disallowed-in-nonarc
arc-maybe-repeated-use-of-weak
arc-non-pod-memaccess
arc-performSelector-leaks
arc-repeated-use-of-weak
arc-retain-cycles
arc-unsafe-retained-assign
argument-outside-range
argument-undefined-behaviourarray-bounds
array-bounds-pointer-arithmetic
array-parameter
asm-operand-widths
assign-enum
assume
at-protocol
atimport-in-framework-header
atomic-access
atomic-alignment
atomic-implicit-seq-cst
atomic-memory-ordering
atomic-properties*atomic-property-with-user-defined-accessor
attribute-packed-for-bitfield
attribute-warning
attributes
auto-disable-vptr-sanitizer
auto-import
auto-storage-class
auto-var-idavailability
avr-rtlib-linking-quirks
backend-plugin
backslash-newline-escape
bad-function-cast
binary-literal
bind-to-temporary-copy
binding-in-condition
bit-int-extension
bitfield-constant-conversion
bitfield-enum-conversion
bitfield-width
bitwise-conditional-parentheses
bitwise-instead-of-logical
bitwise-op-parentheses
block-capture-autoreleasing
bool-conversion
bool-conversions
bool-operation*bounds-attributes-cxx-experimental-ignored$bounds-attributes-extern-array-countBbounds-attributes-implicit-conversion-single-to-explicit-indexable'bounds-attributes-init-list-side-effect+bounds-attributes-objc-experimental-ignored
bounds-attributes-redundant#bounds-safety-adoption-mode-ignored5bounds-safety-conversion-single-to-implicit-indexableObounds-safety-conversion-single-to-implicit-indexable-then-convert-at-call-siteQbounds-safety-conversion-single-to-implicit-indexable-then-convert-to-larger-type
bounds-safety-init-list
bounds-safety-nullability+bounds-safety-relaxed-system-headers-ignore2bounds-safety-single-to-indexable-bounds-truncated'bounds-safety-strict-terminated-by-cast
braced-scalar-init
branch-protection
bridge-cast builtin-assume-aligned-alignment
builtin-macro-redefined
builtin-memcpy-chk-size
builtin-requires-header
c++-compatc++0x-compat
c++0x-extensions
c++0x-narrowingc++11-compat(c++11-compat-deprecated-writable-strings
c++11-compat-pedantic*c++11-compat-reserved-user-defined-literal
c++11-extensions
c++11-extra-semi
c++11-inline-namespace
c++11-long-long
c++11-narrowing
c++14-attribute-extensions
c++14-binary-literalc++14-compat
c++14-compat-pedantic
c++14-extensions
c++17-attribute-extensionsc++17-compat
c++17-compat-mangling
c++17-compat-pedantic
c++17-extensions
c++1y-extensionsc++1z-compat
c++1z-compat-mangling
c++1z-extensions
c++20-attribute-extensionsc++20-compat
c++20-compat-pedantic
c++20-designator
c++20-extensions$c++23-default-comp-relaxed-constexpr
c++23-extensions
c++26-extensionsc++2a-compat
c++2a-compat-pedantic
c++2a-extensions
c++2b-extensions
c++2c-extensions
c++98-c++11-c++14-c++17-compat'c++98-c++11-c++14-c++17-compat-pedantic
c++98-c++11-c++14-compat!c++98-c++11-c++14-compat-pedantic
c++98-c++11-compat!c++98-c++11-compat-binary-literal
c++98-c++11-compat-pedanticc++98-compat#c++98-compat-bind-to-temporary-copy
c++98-compat-extra-semi%c++98-compat-local-type-template-args
c++98-compat-pedantic'c++98-compat-unnamed-type-template-args
c11-extensions
c2x-compat
c2x-extensions
c99-compat
c99-designator
c99-extensions#call-to-pure-virtual-from-ctor-dtor
called-once-parameter
cast-align
cast-calling-convention
cast-function-type
cast-function-type-strict
cast-of-sel-type
cast-qual
cast-qual-unrelated
char-align
char-subscripts
clang-cacheclang-cl-pch
class-conversion
class-varargs
cmse-union-leak
comma
comment
comments
compare-distinct-pointer-types
compile-job-cache
compile-job-cache-hit
compile-job-cache-miss
compile-job-cache-timing
completion-handler
complex-component-init
compound-token-split
compound-token-split-by-macro
compound-token-split-by-space
conditional-type-mismatch
conditional-uninitialized
config-macros
constant-conversion
constant-evaluated
constant-logical-operand
constexpr-not-const
consumed
conversion
conversion-null$coro-non-aligned-allocation-function
coroutine%coroutine-missing-unhandled-exception
covered-switch-default
cstring-format-directive
ctad-maybe-unsupported
ctor-dtor-privacy
cuda-compat
custom-atomic-properties
cxx-attribute-extension
dangling
dangling-else
dangling-fielddangling-gsl
dangling-initializer-list
darwin-sdk-settings
date-time
dealloc-in-category
debug-compression-unavailable
declaration-after-statement
defaulted-function-deleted
delegating-ctor-cycles delete-abstract-non-virtual-dtor
delete-incomplete$delete-non-abstract-non-virtual-dtor
delete-non-virtual-dtor#delimited-escape-sequence-extension
deprecate-lax-vec-conv-all
deprecated
deprecated-altivec-src-compat$deprecated-anon-enum-enum-conversion
deprecated-array-compare
deprecated-attributes
deprecated-builtins
deprecated-comma-subscript
deprecated-copy
deprecated-copy-dtor
deprecated-copy-with-dtor'deprecated-copy-with-user-provided-copy'deprecated-copy-with-user-provided-dtor
deprecated-coroutine
deprecated-declarations!deprecated-dynamic-exception-spec
deprecated-enum-compare#deprecated-enum-compare-conditional
deprecated-enum-enum-conversion deprecated-enum-float-conversion
deprecated-implementations
deprecated-increment-bool
deprecated-literal-operator
deprecated-non-prototype
deprecated-objc-isa-usage%deprecated-objc-pointer-introspection5deprecated-objc-pointer-introspection-performSelector
deprecated-pragma)deprecated-redundant-constexpr-static-def
deprecated-register
deprecated-static-analyzer-flag
deprecated-this-capture
deprecated-type
deprecated-volatile
deprecated-writable-strings
direct-ivar-access
disabled-macro-expansion
disabled-optimizationdiscard-qual
distributed-object-modifiers
div-by-zero
division-by-zero
dll-attribute-on-redeclaration%dllexport-explicit-instantiation-decl
dllimport-static-field-def
documentation
documentation-deprecated-sync
documentation-html
documentation-pedantic
documentation-unknown-command
dollar-in-identifier-extension
double-promotion
dtor-namedtor-typedef
duplicate-decl-specifier
duplicate-enum
duplicate-method-arg
duplicate-method-match
duplicate-protocol
dxil-validation
dynamic-class-memaccess
dynamic-exception-spec
eager-load-cxx-named-modules
effc++
elaborated-enum-base
elaborated-enum-class
embedded-directive
empty-body
empty-decomposition
empty-init-stmt
empty-translation-unit
encode-typeendif-labelsenum-compare
enum-compare-conditional
enum-compare-switch
enum-constexpr-conversion
enum-conversion
enum-enum-conversion
enum-float-conversion
enum-too-large
exceptions
excess-initializers
exit-time-destructors
expansion-to-defined
experimental-header-units
explicit-initialize-call
explicit-ownership-type
export-unnamed
extern-c-compat
extern-initializer
extra
extra-qualification
extra-semi
extra-semi-stmtextra-tokens
extractapi-misuse
final-dtor-non-final-class
final-macro
firebloom-incomplete-array firebloom-init-list-partial-null
firebloom-single-to-count
fixed-enum-extension
fixed-point-overflow
flag-enum
flexible-array-extensions
float-conversion
float-equal
float-overflow-conversion
float-zero-conversion
for-loop-analysis
format
format-extra-args
format-insufficient-args
format-invalid-specifier
format-non-iso
format-nonliteral
format-pedantic
format-security
format-type-confusion
format-y2k
format-zero-length
format=2
fortify-source
four-char-constants
frame-address
frame-larger-than
frame-larger-than=%framework-include-private-from-public
free-nonheap-object
function-def-in-objc-container
function-multiversionfuse-ld-path
future-attribute-extensions
future-compat
gcc-compat
generic-type-extension
global-constructors
global-isel
gnu-alignof-expression
gnu-anonymous-struct
gnu-array-member-paren-init
gnu-auto-type
gnu-binary-literal
gnu-case-range
gnu-complex-integer gnu-compound-literal-initializer
gnu-conditional-omitted-operand
gnu-designator
gnu-empty-initializer
gnu-empty-struct
gnu-flexible-array-initializer
gnu-flexible-array-union-member
gnu-folding-constant
gnu-imaginary-constant
gnu-include-next
gnu-inline-cpp-without-extern
gnu-label-as-value
gnu-line-marker
gnu-null-pointer-arithmetic
gnu-offsetof-extensions
gnu-pointer-arith
gnu-redeclared-enum
gnu-statement-expression-gnu-statement-expression-from-macro-expansion
gnu-static-float-init$gnu-string-literal-operator-template
gnu-union-cast"gnu-variable-sized-type-not-at-end
gnu-zero-line-directive!gnu-zero-variadic-macro-arguments
gpu-maybe-wrong-sideheader-guard
header-hygiene
hip-omp-target-directives
hip-only
hlsl-extensions
idiomatic-parentheses
ignored-attributes)ignored-availability-without-sdk-settings
ignored-optimization-argument
ignored-pragma-intrinsic
ignored-pragma-optimize
ignored-pragmas
ignored-qualifiers
ignored-reference-qualifiers
implicit
implicit-atomic-properties#implicit-const-int-float-conversion*implicit-conversion-floating-point-to-bool implicit-exception-spec-mismatch
implicit-fallthrough!implicit-fallthrough-per-function
implicit-fixed-point-conversion
implicit-float-conversion
implicit-function-declarationimplicit-int
implicit-int-conversion
implicit-int-float-conversion
implicit-retain-self
implicitly-unsigned-literal
import&import-preprocessor-directive-pedantic
inaccessible-base
include-next-absolute-path
include-next-outside-header
incompatible-exception-spec#incompatible-function-pointer-types*incompatible-function-pointer-types-strict"incompatible-library-redeclaration
incompatible-ms-struct
incompatible-pointer-types.incompatible-pointer-types-discards-qualifiers
incompatible-property-type
incompatible-sysroot'incomplete-framework-module-declaration
incomplete-implementation
incomplete-module
incomplete-setjmp-declaration
incomplete-umbrella
inconsistent-dllimport(inconsistent-missing-destructor-override
inconsistent-missing-override
increment-bool
index-store
infinite-recursion
init-self
initializer-overrides
injected-class-name
inline
inline-asm#inline-namespace-reopened-noninline
inline-new-delete"instantiation-after-specialization
int-conversion
int-conversions
int-in-bool-context
int-to-pointer-cast
int-to-void-pointer-cast
integer-overflow
interrupt-service-routine
invalid-command-line-argument
invalid-constexpr
invalid-iboutlet&invalid-initializer-from-system-header
invalid-ios-deployment-target
invalid-no-builtin-names
invalid-noreturn
invalid-offsetof invalid-or-nonexistent-directory
invalid-partial-specialization
invalid-pch
invalid-pp-token
invalid-source-encoding
invalid-static-assert-message
invalid-token-paste
invalid-unevaluated-stringinvalid-utf8
jump-seh-finally
keyword-compat
keyword-macro
knr-promoted-parameter
language-extension-token
large-by-value-copy
liblto
linker-warnings
literal-conversion
literal-range
local-type-template-args
logical-not-parentheses
logical-op-parentheses
long-long
loop-analysis
macro-redefined
main
main-return-type
malformed-warning-check
many-braces-around-scalar-init*mathematical-notation-identifier-extension
max-tokens
max-unsigned-zero
memset-transposed-args
memsize-comparison
method-signatures
microsoft
microsoft-abstract
microsoft-anon-tag
microsoft-cast
microsoft-charize
microsoft-comment-paste
microsoft-const-init
microsoft-cpp-macro"microsoft-default-arg-redefinition
microsoft-drectve-section
microsoft-end-of-file microsoft-enum-forward-reference
microsoft-enum-value
microsoft-exception-spec
microsoft-exists#microsoft-explicit-constructor-call
microsoft-extra-qualification
microsoft-fixed-enum
microsoft-flexible-array
microsoft-goto
microsoft-inaccessible-base
microsoft-include
microsoft-init-from-predefined
microsoft-mutable-reference
microsoft-pure-definition
microsoft-redeclare-static
microsoft-sealed
microsoft-static-assert
microsoft-template
microsoft-template-shadow microsoft-union-member-reference
microsoft-unqualified-friend
microsoft-using-decl
microsoft-void-pseudo-dtor
misexpect
misleading-indentation
mismatched-new-delete
mismatched-parameter-types
mismatched-return-types
mismatched-tags
missing-braces
missing-constinit
missing-declarations
missing-exception-spec
missing-field-initializers
missing-format-attribute
missing-include-dirs
missing-method-return-type
missing-multilib
missing-noescape
missing-noreturn
missing-prototype-for-cc
missing-prototypes
missing-selector-name
missing-sysroot
missing-variable-declarations
misspelled-assumptionmodule-build
module-conflict
module-file-config-mismatch
module-file-extension
module-import
module-import-in-extern-c
module-include-translation
module-lock"modules-ambiguous-internal-linkage
modules-import-nested-redundant
most
movemsvc-include
msvc-not-found
multi-gpu
multichar
multiple-move-vbase
narrowing
nested-anon-types
nested-externs
new-returns-null
newline-eof
noderef
noexcept-type
non-c-typedef-for-linkage
non-gcc
non-literal-null-conversion'non-modular-include-in-framework-module
non-modular-include-in-module
non-pod-varargs
non-power-of-two-alignment
non-virtual-dtor
nonnull
nonportable-cfstrings
nonportable-include-path!nonportable-private-apinotes-path(nonportable-private-system-apinotes-path
nonportable-system-include-path!nonportable-vector-initialization
nontrivial-memaccess
nsconsumed-mismatch
nsreturns-mismatch
null-arithmetic
null-character
null-conversion
null-dereference
null-pointer-arithmetic
null-pointer-subtraction
nullability
nullability-completeness"nullability-completeness-on-arrays
nullability-declspec
nullability-extension#nullability-inferred-on-nested-type
nullable-to-nonnull-conversion+objc-autosynthesis-property-ivar-name-match
objc-bool-constant-conversion
objc-boxing
objc-circular-container
objc-cocoa-api
objc-designated-initializers
objc-dictionary-duplicate-keys"objc-duplicate-category-definition
objc-flexible-array
objc-forward-class-redefinition
objc-interface-ivars
objc-literal-compare
objc-literal-conversion
objc-load-method
objc-macro-redefinition
objc-messaging-id
objc-method-access
objc-missing-property-synthesis
objc-missing-super-calls
objc-multiple-method-names"objc-noncopy-retain-block-property
objc-nonunified-exceptions#objc-property-assign-on-object-type
objc-property-implementation
objc-property-implicit-mismatch*objc-property-matches-cocoa-ownership-rule
objc-property-no-attribute
objc-property-synthesis#objc-protocol-method-implementation objc-protocol-property-synthesis
objc-protocol-qualifiers"objc-readonly-with-setter-property
objc-redundant-api-use
objc-redundant-literal-use
objc-root-class
objc-signed-char-bool/objc-signed-char-bool-implicit-float-conversion-objc-signed-char-bool-implicit-int-conversion
objc-string-compare
objc-string-concatenation
objc-unsafe-perform-selector
objc-weak-compat
old-style-cast
old-style-definition
opencl-unsupported-rgba
openmp
openmp-51-extensions
openmp-clauses
openmp-loop-form
openmp-mapping
openmp-target
option-ignored!ordered-compare-function-pointers
ossharedptr-misuse
out-of-line-declaration
out-of-scope-functionover-aligned
overflow
overlength-strings
overloaded-shift-op-parentheses
overloaded-virtual
override-init
override-module
overriding-method-mismatch
overriding-t-option
packed
packed-non-pod
padded
parentheses
parentheses-equality
partial-availability
pass
pass-analysis
pass-failed
pass-missed
pch-date-timepch-vfs-diff
pedantic
pedantic-core-features
pedantic-macros
pessimizing-move
pointer-arith
pointer-bool-conversion
pointer-compare
pointer-integer-comparepointer-sign
pointer-to-enum-cast
pointer-to-int-cast
pointer-type-mismatch
poison-system-directories
potentially-direct-selector potentially-evaluated-expression
pragma-clang-attribute
pragma-once-outside-header
pragma-pack
pragma-pack-suspicious-include#pragma-system-header-outside-header
pragmas
pre-c++14-compat
pre-c++14-compat-pedantic
pre-c++17-compat
pre-c++17-compat-pedantic
pre-c++20-compat
pre-c++20-compat-pedantic
pre-c++23-compat
pre-c++23-compat-pedantic
pre-c++26-compat
pre-c++26-compat-pedantic
pre-c++2c-compat
pre-c++2c-compat-pedantic
pre-c2x-compat
pre-c2x-compat-pedantic
pre-openmp-51-compat&predefined-identifier-outside-function
private-extern
private-header
private-module
profile-instr-missing
profile-instr-out-of-date
profile-instr-unprofiled
property-access-dot-syntax
property-attribute-mismatch
protocol%protocol-property-synthesis-ambiguity
psabi
ptrauth-null-pointers
qualified-void-return-type"quoted-include-in-framework-header
range-loop-analysis
range-loop-bind-reference
range-loop-construct
read-modules-implicitly
read-only-types
readonly-iboutlet-property
receiver-expr
receiver-forward-class
redeclared-class-member
redundant-consteval-if
redundant-decls
redundant-move
redundant-parens
register
reinterpret-base-class
remark-backend-plugin
reorderreorder-ctor
reorder-init-list
reproducible-caching
requires-super-attribute
reserved-id-macro
reserved-identifier
reserved-macro-identifier
reserved-module-identifier
reserved-user-defined-literal
restrict-expansion
retained-language-linkage
return-local-addr
return-stack-address
return-std-move
return-type
return-type-c-linkage
rewrite-not-bool
round-trip-cc1-args
rtti
sanitize-address
sarif-format-unstable
search-path-usage
section
selector
selector-type-mismatch
self-assign
self-assign-field
self-assign-overloaded
self-move
semicolon-before-method-body
sentinel
sequence-point
serialized-diagnostics
shadow
shadow-allshadow-field
shadow-field-in-constructor$shadow-field-in-constructor-modified
shadow-ivar
shadow-uncaptured-local
shift-count-negative
shift-count-overflow
shift-negative-value
shift-op-parentheses
shift-overflow
shift-sign-overflow
shorten-64-to-32sign-compare
sign-conversion
sign-promo
signed-enum-bitfield
signed-unsigned-wchar'single-bit-bitfield-constant-conversion
sizeof-array-argument
sizeof-array-decay
sizeof-array-div
sizeof-pointer-div
sizeof-pointer-memaccess
slash-u-filenameslh-asm-goto
sloc-usage
sometimes-uninitialized
source-mgr
source-uses-openmp
spir-compatspirv-compat
stack-exhausted
stack-protector
static-float-init
static-in-inline$static-inline-explicit-instantiation
static-local-in-inline
static-self-init
stdlibcxx-not-found
strict-aliasing
strict-aliasing=0
strict-aliasing=1
strict-aliasing=2
strict-overflow
strict-overflow=0
strict-overflow=1
strict-overflow=2
strict-overflow=3
strict-overflow=4
strict-overflow=5"strict-potentially-direct-selector
strict-prototypes
strict-selector-match
string-compare
string-concatenation
string-conversion
string-plus-char
string-plus-int
strlcpy-strlcat-sizestrncat-size
suggest-destructor-override
suggest-override
super-class-method-mismatch
suspicious-bzero
suspicious-memaccess
swift-name-attribute
swift-newtype-attribute
switch
switch-bool
switch-default
switch-enum
sync-alignment%sync-fetch-and-nand-semantics-changed
synth
target-clones-mixed-specifiers
tautological-bitwise-compare
tautological-compare
tautological-constant-compare&tautological-constant-in-range-compare*tautological-constant-out-of-range-compare
tautological-objc-bool-compare
tautological-overlap-compare
tautological-pointer-compare
tautological-type-limit-compare
tautological-undefined-compare'tautological-unsigned-char-zero-compare'tautological-unsigned-enum-zero-compare"tautological-unsigned-zero-compare tautological-value-range-compare
tcb-enforcement$tentative-definition-incomplete-type
thread-safety
thread-safety-analysis
thread-safety-attributes
thread-safety-beta
thread-safety-negative
thread-safety-precise
thread-safety-reference
thread-safety-verbose
trigraphs
type-limits
type-safety
typed-memory-inference-failure
typedef-redefinition
typename-missing
unable-to-open-stats-file
unaligned-access!unaligned-qualifier-implicit-cast
unavailable-declarations
undeclared-selector
undefundef-prefix
undefined-arm-streaming
undefined-arm-za
undefined-bool-conversion
undefined-func-template
undefined-inline
undefined-internal
undefined-internal-type
undefined-reinterpret-cast
undefined-var-template
underaligned-exception-object
unevaluated-expression
unguarded-availability
unguarded-availability-new
unicode
unicode-homoglyph
unicode-whitespace
unicode-zero-width
uninitialized
uninitialized-const-reference
unknown-argument
unknown-assumption
unknown-attributes
unknown-cuda-version
unknown-directives
unknown-escape-sequence
unknown-pragmas
unknown-sanitizers
unknown-warning-option
unnamed-type-template-args
unneeded-internal-declaration
unneeded-member-function
unqualified-std-cast-call
unreachable-code
unreachable-code-aggressive
unreachable-code-break
unreachable-code-fallthrough
unreachable-code-generic-assoc
unreachable-code-loop-increment
unreachable-code-return
unsafe-buffer-usage unsafe-buffer-usage-in-container
unsequenced
unsupported-abi
unsupported-abs
unsupported-availability-guard
unsupported-cb#unsupported-dll-base-class-template
unsupported-floating-point-opt
unsupported-friend
unsupported-gpopt
unsupported-nan
unsupported-target-opt
unsupported-visibility
unusable-partial-specialization
unused
unused-argument
unused-but-set-parameter
unused-but-set-variable
unused-command-line-argument
unused-comparison
unused-const-variable
unused-exception-parameter
unused-function
unused-getter-return-valueunused-label
unused-lambda-capture
unused-local-typedef
unused-local-typedefs
unused-macros
unused-member-function
unused-parameter
unused-private-field
unused-property-ivar
unused-result
unused-templateunused-value
unused-variable
unused-volatile-lvalue
used-but-marked-unused
user-defined-literals
user-defined-warnings
varargs
variadic-macros
vec-elem-size
vector-conversion
vector-conversionsvexing-parse
visibility
vla-extension
void-pointer-to-enum-cast
void-pointer-to-int-cast
void-ptr-dereference
volatile-register-var
wasm-exception-spec
weak-template-vtablesweak-vtables
writable-strings
write-strings
xor-used-as-pow
zero-as-null-pointer-constant
zero-length-array
API notes file not found at '%0'
NSInvocation's %0 is not safe to be used with an object with ownership other than __unsafe_unretained
invalid type %0 in asm %select{input|output}1
invalid type %0 in asm input for constraint '%1'
%0%select{ attribute|}1 cannot be applied to types
uuid attribute contains a malformed GUID
cannot open file '%0': %1
%select{pointer|reference}0 to %select{|subobject of }1%select{type_info object|string literal|temporary object|predefined '%3' variable}2 is not allowed in a template argument
'size_t' suffix for literals is a C++23 feature
only special member functions %select{|and comparison operators }0may be defaulted
only functions can have deleted definitions
duplicate '%0' declaration specifier
enumeration cannot be a template
expected %0
expected %1 after %0
method name referenced in property setter attribute must end with ':'
expected %0 or %1
expected namespace name
expected string literal %select{in %1|for diagnostic message in static_assert|for optional message in 'availability' attribute|for %select{language name|source container name|USR}1 in 'external_source_symbol' attribute}0
file '%0' modified since it was first processed
sorry, unsupported: file '%0' is too large for Clang to process
compile with '-ffixed-point' to enable fixed point types
'%0' is invalid in friend declarations
sorry, this include generates a translation unit too large for Clang to process.
integer literal is too large to be represented in any %select{signed |}0integer type
character literal with user-defined suffix cannot be used here
invalid feature combination: %0
%select{data member |non-public member function |static member function |user-declared constructor|user-declared destructor|operator |nested class }0%1 is not permitted within an interface type
numeric literal with user-defined suffix cannot be used here
invalid storage class specifier in function declarator
string literal with user-defined suffix cannot be used here
%0 is not supported on this target
'%0' can only be used if the target supports the mfhc1 and mthc1 instructions
module '%0' is needed but has not been provided, and implicit use of module files is disabled
build a shadowed submodule '%0'
cyclic dependency in module '%0': %1
no handler registered for module format '%0'
%select{|umbrella }0header '%1' not found
could not build module '%0'
module '%0' not found
error in loading module '%0' from prebuilt module path
cannot rebuild module '%0' as it is already finalized
import of shadowed module '%0'
module '%0' %select{is incompatible with|requires}1 feature '%2'
an inline asm block cannot have an operand which is a bit-field
[rewriter] %0
nullability specifier %0 conflicts with existing specifier %1
directive '#pragma omp %0' cannot contain more than one '%1' clause%select{| with '%3' name modifier| with 'source' dependence}2
directive '#pragma omp %0' requires the '%1' clause
options %0 and %1 are set to different values
feature %0 requires support of %1 feature
%0 does not support the '%1' %select{type qualifier|storage class specifier}2
'%0' is not supported in C++ for OpenCL
option '%0' cannot be specified on this target
option '%0' cannot be specified with '%1'
option '%0' cannot be specified without '%1'
redefinition of parameter %0
%0 only allowed in __except block or filter expression
%0 only allowed in __except filter expression
%0 only allowed in __finally block
expected '__except' or '__finally' block
%select{signed |}0'size_t' literal is out of range of possible %select{signed |}0'size_t' values
unknown target ABI '%0'
unknown target CPU '%0'
unknown FP unit '%0'
unknown target triple '%0'
ABI '%0' is not supported on CPU '%1'
ABI '%0' is not supported for '%1'
micromips is not supported for target CPU '%0'
execute only is not supported for the %0 sub-architecture
the '%0' unit is not supported with this instruction set
-mcmse is not supported for %0
hardware TLS register is not supported for the %0 sub-architecture
the %0 sub-architecture does not support unaligned accesses
this value is too large for this fixed point type
unable to make temporary file: %0
unable to rename temporary '%0' to output file '%1': '%2'
conversion between fixed point and %0 is not yet supported
no analyzer checkers or packages are associated with '%0'
'%0' can only be used with the '%1' ABI
%0 byte order mark detected in '%1', but encoding is not supported
must use '%1' tag to refer to type %0%select{| in this scope}2
'_BitInt' suffix for literals is a C2x extension
'long long' is an extension when C99 mode is not enabled
use of an empty initializer is a C2x extension
'diagnose_if' is a clang extension
'enable_if' is a clang extension
'long long' is a C++11 extension
'size_t' suffix for literals is a C++23 extension
duplicate '%0' declaration specifier
integer literal is too large to be represented in a signed integer type, interpreting as unsigned
integer literal is too large to be represented in type 'long' and is subject to undefined behavior under C++98, interpreting as 'unsigned long'; this literal will %select{have type 'long long'|be ill-formed}0 in C++11 onwards
variadic templates are a C++11 extension
duplicate '%0' declaration specifier
too many errors emitted, stopping now
also found
%select{pointer|reference}0 to %select{|subobject of }1%select{type_info object|string literal|temporary object|predefined '%3' variable}2 is not allowed in a template argument
%1 %0 is hidden by a non-type declaration of %0 here
declared here
previous case defined here
%0 additional files entered using a total of %1B of space
file entered %0 time%s0 using %1B of space%plural{0:|: plus %2B for macro expansions}2
forward declaration of %0
subexpression not valid in a constant expression
to match this %0
[rewriter] %0
one possibility
#pragma entered here
previous declaration is here
previous definition is here
previous implicit declaration is here
previous use is here
use -analyzer-disable-all-checks to disable all static analyzer checkers
%0B in local locations, %1B in locations loaded from AST files, for a total of %2B (%3%% of available space)
definition of %0 is not complete until the closing '}'
using
valid target CPU values are: %0
could not acquire lock file for module '%0': %1
timed out waiting to acquire lock file for module '%0'
source manager location address space usage:
private API notes file for module '%0' should be named '%0_private.apinotes', not '%1'
private API notes file for module '%0' should be named '%0_private.apinotes', not '%1'
[rewriter] call returns pointer to GC managed memory; it will become unmanaged in ARC
%0 attribute ignored
'_BitInt' suffix for literals is incompatible with C standards before C2x
use of an empty initializer is incompatible with C standards before C2x
conflicting nullability specifier on parameter types, %0 conflicts with existing specifier %1
conflicting nullability specifier on return types, %0 conflicts with existing specifier %1
'consteval' specifier is incompatible with C++ standards before C++20
'size_t' suffix for literals is incompatible with C++ standards before C++23
'long long' is incompatible with C++98
variadic templates are incompatible with C++98
duplicate definition of category %1 on interface %0
duplicate '%0' declaration specifier
'%0' is ignored since it is only supported for HIP
'-mbranch-protection=' option is incompatible with the '%0' architecture
redeclaration of method parameter %0
redefinition of method parameter %0
type specifier missing, defaults to 'int'
[rewriter] %0
duplicate nullability specifier %0
integer literal is too large to be represented in type 'long', interpreting as 'unsigned long' per C89; this literal will %select{have type 'long long'|be ill-formed}0 in C99 onwards
integer literal is too large to be represented in type 'long', interpreting as 'unsigned long' per C++98; this literal will %select{have type 'long long'|be ill-formed}0 in C++11 onwards
%0 is a core feature in %select{OpenCL C|C++ for OpenCL}1 version %2 but not supported on this target
include location '%0' is unsafe for cross-compilation
missing argument to debug command '%0'
unexpected argument to debug command
speculative load hardening does not protect functions with asm goto
unable to protect inline asm that clobbers stack pointer against stack clash
stack nearly exhausted; compilation time may suffer, and crashes due to stack overflow are likely
mismatch between architecture and environment in target triple '%0'; did you mean '%1'?
ignoring the 'branch-protection' attribute because the '%0' architecture does not support it
unknown attribute %0 ignored
The default Altivec ABI on AIX is not yet supported, use '-mabi=vec-extabi' for the extended Altivec ABI
TLS model '%0' is not yet supported on AIX
checker cannot be enabled with analyzer option '%0' == %1
invalid input for checker option '%0', that expects %1
checker '%0' has no option called '%1'
invalid input for analyzer-config option '%0', that expects %1 value
analyzer-config option '%0' should contain only one '='
analyzer-config option '%0' has a key but no value
unknown analyzer-config '%0'
analyzer constraint manager 'z3' is only available if LLVM was built with -DLLVM_ENABLE_Z3_SOLVER=ON
-fobjc-arc is not supported on platforms using the legacy runtime
-fobjc-arc is not supported on versions of OS X prior to 10.6
architecture '%0' does not support '%1' execution mode
original arguments parse failed, then succeeded in round-trip
generated arguments do not match in round-trip
generated arguments parse failed in round-trip
minimum vscale must be an unsigned integer greater than 0
cmse is not compatible with %select{RWPI|ROPI}0
CPU '%0' does not support '%1' execution mode
'%0' not supported, please use -iquote instead
cannot deduce implicit triple value for -Xopenmp-target, specify triple using -Xopenmp-target=<triple>
alignment is not a power of 2 in '%0'
invalid argument '-mno-amdgpu-ieee' only allowed with relaxed NaN handling
option '%0' requires input to be LLVM bitcode
invalid argument '%0' not allowed with '%1'
invalid argument '%0' only allowed with '%1'
invalid offload arch combinations: '%0' and '%1' (for a specific processor, a feature should either exist in all offload archs, or not exist in any offload archs)
invalid target ID '%0'; format is a processor name followed by an optional colon-delimited list of features followed by an enable/disable sign (e.g., 'gfx908:sramecc+:xnack-')
-fembed-bitcode is not supported on versions of iOS prior to 6.0
cannot specify '%1' along with '%0'
configuration file '%0' cannot be opened: %1
cannot read randomize layout seed file '%0'
cannot read configuration file '%0': %1
unable to open CC_PRINT_OPTIONS file: %0
the clang compiler does not support '%0'
the clang compiler does not support '%0' for C++ on Darwin/i386
the clang compiler does not support '%0', %1
the clang compiler does not support -pg option on %select{Darwin|versions of OS X 10.9 and later}0
%0 command failed with exit code %1 (use -v to see invocation)
unable to execute command: %0
%0 command failed due to signal (use -v to see invocation)
compilation database '%0' could not be opened: %1
configuration file '%0' cannot be found
conflicting deployment targets, both '%0' and '%1' are present in environment
unsupported CUDA gpu architecture: %0
unsupported architecture '%0' for host compilation
CUDA offload target is supported only along with --emit-llvm
GPU arch %0 is supported by CUDA versions between %1 and %2 (inclusive), but installation at %3 is %4; use '--cuda-path' to specify a different CUDA install, pass a different GPU arch with '--cuda-gpu-arch', or pass '--no-cuda-version-check'
SDK does not contain 'libarclite' at the path '%0'; try increasing the minimum deployment target
defsym must be of the form: sym=value: %0
value is not an integer: %0
no more than one option '--config' is allowed
target profile option (-T) is missing
-emit-llvm cannot be used when linking
failed to expand response file: %0
'-fopenmp-targets' must be used in conjunction with a '-fopenmp' option compatible with offloading; e.g., '-fopenmp=libomp' or '-fopenmp=libiomp5'
header file '%0' input '%1' does not match the type of prior input in api extraction; use '-x %2' to override
failed to deduce triple for target architecture '%0'; specify the triple using '-fopenmp-targets' and '-Xopenmp-target' instead.
failing because %select{environment variable 'FORCE_CLANG_DIAGNOSTICS_CRASH' is set|'-gen-reproducer' is used}0
GNUstep Objective-C runtime version %0 incompatible with target binary format
multiple inputs are not valid for header units (first extra '%0')
'--hip-path' must be specified when offloading to SPIR-V%select{| unless %1 is given}0.
HLSL code generation is unsupported for target '%0'
OpenMP target architecture '%0' pointer size is incompatible with host '%1'
passing incompatible option '%0' with '-fcas-include-tree'
the combination of '%0' and '%1' is incompatible
--rtlib=libgcc requires --unwindlib=libgcc
passing input files is incompatible with '-fcas-include-tree'
invalid Xarch argument: '%0', options requiring arguments are unsupported
invalid -Xopenmp-target argument: '%0', options requiring arguments are unsupported
invalid arch name '%0'
invalid argument '%0' to -%1
invalid CoreFoundation Runtime ABI '%0'; must be one of 'objc', 'standalone', 'swift', 'swift-5.0', 'swift-4.2', 'swift-4.1'
invalid Darwin version number: %0
invalid argument in '%0', only integer or 'auto' is supported
invalid argument in '%0', only integers are supported
invalid profile : %0
invalid validator version : %0
If validator major version is 0, minor version must also be 0.
invalid validator version : %0
Format of validator version is "<major>.<minor>" (ex:"1.4").
'%0' does not contain a GCC installation
invalid output type '%0' for use with gcc tool
invalid integral value '%1' in '%0'
invalid linker name in argument '%0'
invalid argument '%0' to -malign-branch=; each element must be one of: %1
invalid float ABI '%0'
invalid thread pointer reading mode '%0'
OBJECT_MODE setting %0 is not recognized and is not a valid setting
OpenMP target is invalid: '%0'
invalid or unsupported offload target: '%0'
invalid OS value '%0' in '%1'
cannot use '%0' output with multiple -arch options
invalid validator version : %0
Validator version must be less than or equal to current internal version.
invalid option '%0' not of the form <from-file>;<to-file>
invalid arch name '%0', %1
cpu '%0' does not support rv%select{32|64}1
invalid runtime library name in argument '%0'
invalid library name in argument '%0'
'-msve-vector-bits' is not supported without SVE enabled
invalid thread model '%0' in '%1' for this target
invalid unwind library name in argument '%0'
invalid value '%1' in '%0'
invalid value '%1' in '%0', expected one of: %2
invalid version number in '%0'
invalid argument '%0' to -mfpu=; must be one of: 64, 32, none, 0 (alias for none)
LTO requires -fuse-ld=lld
malformed sanitizer coverage allowlist: '%0'
malformed sanitizer coverage ignorelist: '%0'
malformed sanitizer ignorelist: '%0'
malformed sanitizer metadata ignorelist: '%0'
option '-MG' requires '-M' or '-MM'
'-fminimize-whitespace' invalid for input of type %0
missing argument to '%0'
argument to '%0' is missing (expected %1 value%s1)
missing sanitizer ignorelist: '%0'
Must provide a symbol graph output directory using --symbol-graph-dir=<directory>
mixed CUDA and HIP compilation is not supported
header file '%0' input type '%1' does not match type of prior input in module compilation; use '-x %2' to override
option '-fmodule-output' can't be used with multiple arch options
option '-fmodules-validate-once-per-build-session' requires '-fbuild-session-timestamp=<seconds since Epoch>' or '-fbuild-session-file=<file>'
%0 requires HVX, use -mhvx/-mhvx= to enable it
%0 is not supported on HVX %1
invalid value '%1' in '%0', value must be 'none' or a positive integer
'%0': unable to use AST files with this tool
cannot find CUDA installation; provide its path via '--cuda-path', or pass '-nocudainc' to build without CUDA includes
cannot find libdevice for %0; provide path to different CUDA installation via '--cuda-path', or pass '-nocudalib' to build without linking with libdevice
cannot find HIP runtime; provide its path via '--rocm-path', or pass '-nogpuinc' to build without HIP runtime
cannot find HIP device library%select{| for %1}0; provide its path via '--hip-path' or '--hip-device-lib-path', or pass '-nogpulib' to build without HIP device library
no input files
'%0': unable to pass LLVM bit-code files to linker
'%0': unable to use module files with this tool
[no]neon is not accepted as modifier, please use [no]simd instead
cannot find ROCm device library%select{| for %1|for ABI version %1}0; provide its path via '--rocm-path' or '--rocm-device-lib-path', or pass '-nogpulib' to build without ROCm device library
no such file or directory: '%0'
no such file or directory: '%0'; did you mean '%1'?
unsupported %0 gpu architecture: %1
provided host compiler IR file '%0' is required to generate code for OpenMP target regions but cannot be found
target '%0' is not a supported OpenMP host target
bitcode library '%0' does not exist
NVPTX target requires CUDA 9.2 or above; CUDA %0 detected
no library '%0' found in the default clang lib directory or in LIBRARY_PATH; use '--libomptarget-%1-bc-path' to specify %1 bitcode library
only one offload target is supported
unknown remark serializer format: '%0'
in pattern '%1': %0
cannot use '%0' without using '%1'
cannot specify '%0%1' when compiling multiple source files
cannot specify -o when generating multiple output files
incorrect format for -preamble-bytes=N,END
environment variable CC_PRINT_HEADERS_%select{FORMAT|FILTERING}0 has invalid value %1
unsupported combination: CC_PRINT_HEADERS_FORMAT=%0 and CC_PRINT_HEADERS_FILTERING=%1
unsupported combination: -header-include-format=%0 and -header-include-filtering=%1
target '%0' does not support native pointer authentication
%0 is unsupported with RISC-V linker relaxation (-mrelax)
ROPI is not compatible with c++
embedded and GOT-based position independence are incompatible
invalid value '%1' in '%0', value must be '%2' or greater
'%0' is used without '-mstack-protector-guard-offset', and there is no default
unsupported '%0' value '%1'; use 'ios-macabi' instead
'-ftrivial-auto-var-init-stop-after=*' only accepts positive integers
'-ftrivial-auto-var-init-stop-after=*' is used without '-ftrivial-auto-var-init=zero' or '-ftrivial-auto-var-init=pattern'
unable to remove file: %0
unable to set working directory: %0
cannot determine %0 architecture: %1; consider passing it via '%2'
Unexpected output symbol graph '%1'; please provide --symbol-graph-dir=<directory> instead
unknown argument: '%0'
unknown argument '%0'; did you mean '%1'?
unknown '-mindirect-jump=' option '%0'
language not recognized: '%0'
unknown or ill-formed Objective-C runtime '%0'
-E or -x required when input is from standard input
use /Tc or /Tp to set input type for standard input
unknown target triple '%0'
%0 is not supported with -fembed-bitcode
the second argument of '-fpatchable-function-entry' must be smaller than the first argument
'-mindirect-jump=%0' is unsupported with the '%1' architecture
position-independent code requires '-mabicalls'
unsupported option '%0'
unsupported option '%0' for language mode '%1'
unsupported option '%0' for target '%1'
unsupported option '%0'; did you mean '%1'?
unsupported argument '%1' to option '%0'
unsupported runtime library '%0' for platform '%1'
static %0 runtime is not supported on darwin
invalid C++ ABI name '%0'
32-bit targets are not supported when building for Mac Catalyst
standard C++ modules require the -fmodules-local-submodule-visibility -cc1 option
there is no external assembler that can be used on this platform
-fobjc-weak is not supported on the current deployment target
-fobjc-weak is not supported in Objective-C garbage collection
-mxcoff-roptr is not supported with -shared
-mxcoff-roptr is supported only with -fdata-sections
-mharden-sls is only supported on armv7-a or later
'-fsanitize=memtag-stack' requires hardware support (+memtag). For Armv8 or Armv9, try compiling with -march=armv8a+memtag or -march=armv9a+memtag
the target architecture '%0' is not supported by the target '%1'
-ftest-module-file-extension argument '%0' is not of the required form 'blockname:major:minor:hashed:user info'
C++ ABI '%0' is not supported on target triple '%1'
generated arguments #%0 in round-trip: %1
original arguments in round-trip: %0
AddressSanitizer doesn't support linking with debug runtime libraries yet
available multilibs are:%0
diagnostic msg: %0
was searched for in the directory: %0
the last '/TC' or '/TP' option takes precedence over earlier instances
use '%0'%select{| or '%3'|, '%3', or '%4'|, '%3', '%4', or '%5'}2 for '%1' standard
-verify prefixes must start with a letter and contain only alphanumeric characters, hyphens, and underscores
use '--' to treat subsequent arguments as filenames
generated arguments #%0 in round-trip: %1
-O4 is equivalent to -O3
analyzer option '%0' is deprecated. This flag will be removed in %1, and passing this option will be an error.
analyzer option '%0' is deprecated. This flag will be removed in %1, and passing this option will be an error. Use '%2' instead.
ignoring -fapple-kext which is valid for C++ and Objective-C++ only
cannot compress debug sections (%0 not enabled)
unknown platform, assuming -mfloat-abi=%0
support for linking stdlibs for microcontroller '%0' is not implemented
no avr-libc installation can be found on the system, cannot link standard libraries
support for passing the data section address to the linker for microcontroller '%0' is not implemented
no target microcontroller specified on command line, cannot link standard libraries, please pass -mmcu=<mcu name>
standard library not linked and so no interrupt vector table or compiler runtime routines will be linked
the clang compiler does not support '%0'
compiler_rt-static.a is being deprecated, please use -fapple-link-rtlib instead. Clang will substitute -lcompiler_rt-static with libclang_rt.a
SDK settings were ignored as 'SDKSettings.json' could not be parsed
argument '%0' is deprecated, use '%1' instead
libstdc++ is deprecated; move to libc++%select{ with a minimum deployment target of %1|}0
argument '%0' requires profile-guided optimization information
argument '%0' requires profile-guided optimization information
implicitly disabling vptr sanitizer because rtti wasn't enabled
debug information option '%0' is not supported; requires DWARF-%2 but target '%1' only provides DWARF-%3
dxv not found. Resulting DXIL will not be validated or signed for use in release environments.
joined argument expects additional value: '%0'
option '-ffine-grained-bitfield-accesses' cannot be enabled together with a sanitizer; flag ignored
-fjmc works only for ELF; option ignored
'-fuse-ld=' taking a path is deprecated; use '--ld-path=' instead
-fglobal-isel support for the '%0' architecture is incomplete
-fglobal-isel support is incomplete for this architecture at the current optimization level
%0: '%1' input unused%select{ when '%3' is present|}2
%0: '%1' input unused in cpp mode
ignoring invalid /arch: argument '%0'; for %select{64|32}1-bit expected one of %2
%0 requires debug info. Use %1 or debug options that enable debugger's stepping function; option ignored
include path for libstdc++ headers not found; pass '-stdlib=libc++' on the command line to use the libc++ standard library instead
ignoring '%0' as it conflicts with that implied by '%1' (%2)
no multilib found matching flags: %0
missing plugin argument for plugin %0 in %1
missing plugin name in %0
'%0' does not support '-%1'; flag ignored
'%0' does not support '-moutline'; flag ignored
the given MCU supports %0 hardware multiply, but '-mhwmult' is set to %1
no MCU device specified, but '-mhwmult' is set to 'auto', assuming no hardware multiply; use '-mmcu' to specify an MSP430 device, or '-mhwmult' to set the hardware multiply type explicitly
the given MCU does not support hardware multiply, but '-mhwmult' is set to %0
unable to find a Visual Studio installation; try running Clang from a developer command prompt
multiple %0 architectures are detected: %1; only the first one is used for '%2'
%0 requires HVX, use -mhvx/-mhvx= to enable it
CUDA version%0 is newer than the latest%select{| partially}1 supported version %2
'%0': selected processor lacks floating point registers
the object size sanitizer has no effect at -O0, but is explicitly enabled: %0
OpenMP offloading target '%0' is similar to target '%1' already specified; will be ignored
optimization level '%0' is not supported; using '%1%2' instead
overriding '%0' option with '%1'
CUDA version %0 is only partially supported
precompiled header '%0' was ignored because '%1' is not first '-include'
joined argument treated as '%0'; did you mean '%1'?
%0: previously preprocessed input%select{ unused when '%2' is present|}1
option '%0' was ignored by the %1 toolchain, using '-fPIC'
diagnostic formatting in SARIF mode is currently unstable
treating '%0' input as '%1' when in C++ mode, this behavior is deprecated
unable to find %0 directory, expected to be in '%1' found via %2
unknown argument ignored in clang-cl: '%0'
unknown argument ignored in clang-cl '%0'; did you mean '%1'?
debug information option '%0' is not supported for target '%1'
The warning option '-%0' is not supported
float ABI '%0' is not supported by current library
ignoring '-mgpopt' option as it cannot be used with %select{|the implicit usage of }0-mabicalls
ignoring '-mlong-calls' option as it is not currently supported with %select{|the implicit usage of }0-mabicalls
optimization flag '%0' is not supported for target '%1'
the argument '%0' is not supported for option '%1'. Mapping to '%1%2'
ignoring '%0' option for offload arch '%1' as it is not currently supported there. Use it with an offload arch containing '%2' instead
ignoring '%0' option as it is not currently supported for processor '%1'
ignoring '%0' option as it is not currently supported for target '%1'
ignoring '%0' option as it cannot be used with %select{implicit usage of|}1 -mabicalls and the N64 ABI
ignoring '-msmall-data-limit=' with -mcmodel=large for -fpic or RV64
argument unused during compilation: '%0'
'-x %0' after last input file has no effect
support for '/Yc' with more than one source file not implemented yet; flag ignored
support for '/Yc' and '/Yu' with different filenames not implemented yet; flags ignored
the flag '%0' has been deprecated and will be ignored
optimization flag '%0' is not supported
ignoring -fdiscard-value-names for LLVM Bitcode
ignoring invalid -ftabstop value '%0', using default value %1
ignoring -fverify-debuginfo-preserve-export=%0 because -fverify-debuginfo-preserve wasn't enabled
using sysroot for '%0' but targeting '%1'
invalid iOS deployment version '%0', iOS 10 is the maximum deployment target for 32-bit targets
no such sysroot directory: '%0'
'/U%0' treated as the '/U' option
/arm64EC has been overridden by specified target: %0; option ignored
ignoring '-mabs=2008' option because the '%0' architecture does not support it
ignoring '-mabs=legacy' option because the '%0' architecture does not support it
ignoring '-mcompact-branches=' option because the '%0' architecture does not support it
ignoring extension '%0' because the '%1' architecture does not support it
ignoring '-mnan=2008' option because the '%0' architecture does not support it
ignoring '-mnan=legacy' option because the '%0' architecture does not support it
invalid branch protection option '%0' in '%1'
%select{alias|ifunc}0 must point to a defined %select{variable or |}1function
AVX vector %select{return|argument}0 of type %1 without '%2' enabled changes the ABI
%0 needs target feature %1
%select{alias|ifunc}0 definition is part of a cycle
definition with same mangled name '%0' as another definition
file '%0' specified by '--extract-api-ignores=' not found
action %0 not compiled in
call to '%0' declared with 'error' attribute: %1
%0 (%1) exceeds limit (%2) in '%3'
-dependency-file requires at least one -MT or -MQ option
error in backend: %0
error opening '%0': %1
error reading '%0': %1
error reading stdin: %0
error writing '%0': %1
expected a clang compiler command
unable to handle compilation, expected exactly one compiler job in '%0'
'%0' is incompatible with remote caching backend
invalid value '%1' in '%0'; alignment must be a power of 2
cannot locate code-completion file %0
invalid exception model '%select{none|sjlj|seh|dwarf|wasm}0' for target '%1'
unable to find plugin '%0'
environment variable 'SOURCE_DATE_EPOCH' ('%0') must be a non-negative decimal integer <= %1
cannot link module '%0': %1
no suitable precompiled header file found in directory '%0'
could not remap from missing file '%0'
could not remap file '%0' to the contents of file '%1'
unable to create target: '%0'
unable to interface with target machine
unable to load basic block sections function list: '%0'
unable to load the CAS include-tree '%0': '%1'
unable to load PCH file
unable to load plugin '%0': '%1'
unable to open output file '%0': '%1'
initializing value is out of valid range
always_inline function %1 requires target feature '%2', but would be inlined into function %0 that is compiled without support for '%2'
hidden visibility cannot be applied to 'dllexport' declaration
ifunc resolver function must return a pointer
option 'ffp-eval-method' cannot be used with option %select{'fapprox-func'|'mreassociate'|'freciprocal'}0
inline asm is used in the module with -fno-gnu-inline-asm
invalid virtual filesystem overlay file '%0'
invalid stat cache file '%0'
no module named '%0' declared in module map file '%1'
no module named '%0' declared in include-tree module map '%1'
no module name provided; specify one with -fmodule-name=
virtual filesystem overlay file '%0' not found
stat cache file '%0' not found
module compilation requires '-fmodules'
cannot create includes file for module %0: %1
module header file '%0' not found
module interface compilation requires '-std=c++20'
module map file '%0' not found
file '%0' specified by '-fmodules-embed-file=' not found
-fapinotes was provided without -fmodules-cache-path=<directory>
no submodule named %0 in module '%1'
no submodule named %0 in module '%1'; did you mean '%2'?
non-default visibility cannot be applied to 'dllimport' declaration
must specify system root with -isysroot when building a relocatable PCH file
test module file extension '%0' has different version (%1.%2) than expected (%3.%4)
unable to load a node from the CAS include-tree: '%0'
reference to marker '%0' is ambiguous
'%0' diagnostics %select{expected|seen}1 but not %select{seen|expected}1: %2
invalid expected %0: %1
%select{expected|'expected-no-diagnostics'}0 directive cannot follow %select{'expected-no-diagnostics' directive|other expected directives}0
invalid range following '-' in expected %0
cannot find end ('}}') of expected %0
file '%0' could not be located in expected %1
missing or invalid line number following '@' in expected %0
cannot find start of regex ('{{') in %0
cannot find start ('{{') of expected %0
no expected directives found: consider use of 'expected-no-diagnostics'
use of undefined marker '%0'
qualifier 'const' is needed for variables in address space '%0'
firebloom is supported only for C language
function by that name is mangled as "%0"
the %select{function or variable|function}0 specified in an %select{alias|ifunc}1 must refer to its mangled name
could not determine the original source location for %0:%1:%2
%0 (%1) exceeds limit (%2) in '%3'
instantiated into assembly here
linking module '%0': %1
FIX-IT applied suggested code changes
FIX-IT unable to apply suggested code changes
FIX-IT unable to apply suggested code changes in a macro
FIX-IT detected an error it cannot fix
current API version is '%0', but plugin was compiled with version '%1'
macro was %select{defined|#undef'd}0 here
module imported here
module defined here
ambiguous marker '%0' is defined here
%0; allow reordering by specifying '#pragma clang loop vectorize(enable)' before the loop. If the arrays will always be independent specify '#pragma clang loop vectorize(assume_safety)' before the loop or provide the '__restrict__' qualifier with the independent array arguments. Erroneous results will occur if these options are incorrectly applied!
%0; allow reordering by specifying '#pragma clang loop vectorize(enable)' before the loop or by providing the compiler option '-ffast-math'.
producing index data for module file '%0'
building module '%0' as '%1'
finished building module '%0'
locking '%0' to build module '%1'
%select{alias|ifunc}2 will always resolve to %0 even if weak definition of %1 is overridden
%select{alias|ifunc}1 will not be in section '%0' but in the same section as the %select{aliasee|resolver}2
misaligned atomic operation may incur significant performance penalty; the expected alignment (%0 bytes) exceeds the actual alignment (%1 bytes)
large atomic operation may incur significant performance penalty; the access size (%0 bytes) exceeds the max lock-free size (%1  bytes)
AVX vector %select{return|argument}0 of type %1 without '%2' enabled changes the ABI
-fbounds-attributes-cxx-experimental without -fbounds-attributes is ignored
-fbounds-attributes-objc-experimental without -fbounds-attributes is ignored
-fbounds-safety-adoption-mode without -fbounds-safety is ignored
-fno-bounds-safety-relaxed-system-headers without -fbounds-safety is ignored
feature flag '%0' must start with either '+' to enable the feature or '-' to disable it; flag ignored
feature flag '%0' is ignored since the feature is read only
%0 (%1) exceeds limit (%2) in '%3'
overriding currently unsupported use of floating point exceptions on this target
overriding currently unsupported rounding mode on this target
call to '%0' declared with 'warning' attribute: %1
unable to open CC_LOG_DIAGNOSTICS file: %0 (using stderr)
unable to open CC_PRINT_HEADERS file: %0 (using stderr)
stack frame size (%0) exceeds limit (%1) in '%2'
linking module '%0': %1
macro '%0' contains embedded newline; text after the newline is ignored
overriding the module target triple with %0
unable to open file %0 for serializing diagnostics (%1)
Received warning after diagnostic serialization teardown was underway: %0
unable to merge a subprocess's serialized diagnostics
unable to open statistics output file '%0': '%1'
FIX-IT detected errors it could not fix; no output will be generated
checker plugin '%0' is not compatible with this version of the analyzer
missing submodule '%0'
Missing symbol graph output directory, defaulting to working directory
%select{definition|#undef}0 of configuration macro '%1' has no effect on the import of '%2'; pass '%select{-D%1=...|-U%1}0' on the command line to configure the module
module file %0 cannot be loaded due to a configuration mismatch with the current compilation
no submodule named %0 in module '%1'; using top level '%2'
%0 does not support the option '%1'
Potential performance regression from use of __builtin_expect(): Annotation was correct on %0 of profiled executions.
profile data may be incomplete: of %0 function%s0, %1 %plural{1:has|:have}1 no data
profile data may be out of date: of %0 function%s0, %1 %plural{1:has|:have}1 mismatched data that will be ignored
no profile data available for file "%0"
__sync builtin operation MUST have natural alignment (consider using __atomic).
unknown %select{warning|remark}0 option '%1'%select{|; did you mean '%3'?}2
unknown %0 warning specifier: '%1'
file '%1' is not a valid precompiled %select{PCH|module|AST}0 file
%select{PCH|module|AST}0 file '%1' not found%select{|: %3}2
%select{PCH|module|AST}0 file '%1' is out of date and needs to be rebuilt%select{|: %3}2
file '%0' has been modified since the %select{precompiled header|module file|AST file}1 '%2' was built: %select{size|mtime|content}3 changed%select{| (was %5, now %6)}4
input is not a PCH file: '%0'
file '%0' from the precompiled header has been overridden
malformed or corrupted AST file: '%0'
malformed block record in PCH file: '%0'
unable to read PCH file %0: '%1'
module '%0' %select{in|imported by}4 AST file '%1' found in a different module map file (%2) than when the importing AST file was built (%3)
module '%0' in AST file '%1' %select{(imported by AST file '%2') |}4is not defined in any loaded module map file; maybe you need to load '%3'?
module '%0' was built in directory '%1' but now resides in directory '%2'
module '%0' %select{uses|does not use}1 additional module map '%2'%select{| not}1 used when the module was built
module '%0' is defined in both '%1' and '%2'
module file '%0' is missing its top-level submodule
AST file '%0' was not built as a module
cannot emit module %0: %select{size|mtime}1 must be explicitly specified for missing header file "%2"
instantiation of %q0 is different in different modules
%q0 from module '%1' is not present in definition of %q2%select{ in module '%4'| provided earlier}3
failed to hash content for '%0' because memory buffer cannot be retrieved
%0 is currently enabled, but was not in the PCH file
PCH file built from a different branch (%0) than the compiler (%1)
%0 was %select{disabled|enabled}1 in PCH file but is currently %select{disabled|enabled}2
%0 differs in PCH file vs. current file
definition of macro '%0' differs between the precompiled header ('%1') and the command line ('%2')
macro '%0' was %select{defined|undef'd}1 in the precompiled header but %select{undef'd|defined}1 on the command line
PCH was compiled with module cache path '%0', but the path is currently '%1'
%select{command line contains|precompiled header was built with}0 '-detailed-preprocessing-record' but %select{precompiled header was not built with it|it is not present on the command line}0
%select{AST file was|current translation unit is}0 compiled with the target feature '%1' but the %select{current translation unit is|AST file was}0 not
PCH file was compiled for the %0 '%1' but the current translation unit is being compiled for target '%2'
%select{command line contains|precompiled header was built with}0 '-undef' but %select{precompiled header was not built with it|it is not present on the command line}0
PCH file uses a newer PCH format that cannot be read
PCH file uses an older PCH format that is no longer supported
PCH file contains compiler errors
consider adding '%0' to the header search path
after modifying system headers, please delete the module cache at '%0'
this is generally caused by modules with the same name found in multiple paths
imported by %select{|module '%2' in }1'%0'
definition has no member %0
declaration of %0 does not match
please rebuild precompiled header '%0'
'%0' required by '%1'
%select{PCH|current translation unit}0 has no VFS overlays
%select{PCH|current translation unit}0 has the following VFS overlays:
importing module '%0'%select{| into '%3'}2 from '%1'
duplicate module file extension block name '%0'
the form '-fmodule-file=<BMI-path>' is deprecated for standard C++ named modules;consider to use '-fmodule-file=<module-name>=<BMI-path>' instead
module file '%0' was validated as a system module and is now being imported as a non-system module; any difference in diagnostic options will be ignored
%select{precompiled header|module}0 uses __DATE__ or __TIME__
PCH was compiled with different VFS overlay files than are currently in use
it is deprecated to read module '%0' implicitly; it is going to be removed in clang 18; consider to specify the dependencies explicitly
backslash and newline separated by space
_Pragma takes a parenthesized string literal
illegal character encoding in character literal
illegal character encoding in string literal
unexpected character <U+%0>
character <U+%0> not allowed %select{in|at the start of}1 an identifier
character too large for enclosing character literal type
version control conflict marker in file
'defined' cannot be used as a macro name
delimited escape sequence cannot be empty
invalid digit '%0' in escape sequence
expected '{' after '\%0' escape sequence
could not find ';' after @import
unexpected extra tokens at end of @import declaration
digit separator cannot appear at %select{start|end}0 of digit sequence
embedding a #%0 directive within macro arguments is not supported
%select{hex|octal}0 escape sequence out of range
expected a module name in '__building_module' expression
exponent has no digits
builtin feature check macro requires a parenthesized identifier
header file %0 (aka '%1') cannot be imported because it is not known to be a header unit
semicolon terminating header import declaration cannot be produced by a macro
hexadecimal floating %select{constant|literal}0 requires %select{an exponent|a significand}1
\%0 used with no following hex digits
'__FLT_EVAL_METHOD__' cannot be expanded inside a scope containing '#pragma clang fp eval_method'
invalid character '%0' character in raw string delimiter; use PREFIX( )PREFIX to delimit raw string
invalid argument to convert to character
invalid digit '%0' in %select{decimal|octal|binary}1 constant
invalid suffix '%0' on %select{integer|floating|fixed-point}1 constant
'%0' is not a valid Unicode character name
source file is not valid UTF-8
failure when lexing a character literal
failure when lexing a numeric literal
failure when lexing a string literal
configuration macros are only allowed in top-level modules
conflicting re-export of module '%0' as '%1' or '%2'
header attribute '%0' specified multiple times
expected an attribute name
expected configuration macro name after ','
expected ',' after conflicting module name
expected a message describing the conflict with '%0'
only '*' can be exported from an inferred submodule
expected a feature name
expected a header name after '%0'
expected a header attribute name ('size' or 'mtime')
expected %select{module exclusion with 'exclude'|'export *'}0
expected '{' to start module '%0'
expected '{' to start inferred submodule
expected %select{library|framework}0 name as a string
expected umbrella, header, submodule, or module export
expected a module map file name
expected module declaration
expected module name
expected '}'
expected ']' to close attribute
inferred framework modules cannot be 'explicit'
'explicit' is not permitted on top-level modules
inferred submodule cannot be a framework submodule
inferred submodules require a module with an umbrella
redefinition of inferred submodule
expected integer literal as value for header attribute '%0'
expected excluded module name
no module named '%0' in '%1'
no module named '%0' visible from '%1'
no module named '%0' %select{found|in '%2'}1, parent module must be defined before the submodule
expected a module name or '*'
redefinition of module '%0'
qualified module name can only be used to define modules at the top level
only top-level modules can be re-exported as public
only submodules and framework modules may be inferred with wildcard syntax
umbrella for module '%0' already covers this directory
skipping stray token
use declarations are only allowed in top-level modules
%select{wide|Unicode}0 character literals may not contain multiple characters
Pascal string is too long
'##' cannot appear at end of macro expansion
'##' cannot appear at start of macro expansion
editor placeholder in source file
expected 'set(attr1 [attr2 ...])'
expected 'begin' or 'end'
expected 'begin' or 'end'
pasting formed '%0', an invalid preprocessing token
':' without preceding '?'
%0 must be used within a preprocessing directive
division by zero in preprocessor expression
already inside '#pragma clang arc_cf_code_audited'
already inside '#pragma clang assume_nonnull'
already inside '#pragma unsafe_buffer_usage'
duplicate macro parameter name %0
empty filename
encountered non-reproducible token, caching failed
#endif without #if
'#pragma clang arc_cf_code_audited' was not ended within this file
'#pragma clang assume_nonnull' was not ended within this file
error opening file '%0': %1
missing %1 after %0
expected comma in macro parameter list
expected end of line in preprocessor expression
expected identifier in macro parameter list
expected %select{identifier after '.' in |}0module name
expected ')' in preprocessor expression
expected value in expression
expected "FILENAME" or <FILENAME>
token is not a valid binary operator in a preprocessor subexpression
function-like macro %0 is not defined
invalid token at start of a preprocessor expression
'%0' file not found
'%0' file not found with <angled> %select{include|import}1; use "quotes" instead
'%0' file not found, did you mean '%1'?
cannot convert %0 token to an identifier
floating point literal in preprocessor expression
#import of type library is an unsupported Microsoft feature
cannot %select{#include files|import headers}0 inside '#pragma clang arc_cf_code_audited'
cannot %select{#include files|import headers}0 inside '#pragma clang assume_nonnull'
#include nested too deeply
main file cannot be included recursively when building a preamble
invalid preprocessing directive%select{|, did you mean '#%1'?}0
can only poison identifier tokens
invalid token in macro parameter list
%select{character|integer}0 literal with user-defined suffix cannot be used in preprocessor constant expression
%select{#line|GNU line marker}0 directive requires a simple digit sequence
invalid filename for #line directive
#line directive requires a positive integer argument
invalid filename for line marker directive
invalid flag line marker directive
invalid line marker flag '2': cannot pop empty include stack
line marker directive requires a positive integer argument
macro name must be an identifier
invalid #ident directive
missing '(' following __VA_OPT__
macro name missing
no module named '%0' declared in include-tree module map
missing ')' in macro parameter list
no module map available for module %0
submodule %0.%1 not declared in module map
no matching '#pragma clang module end' for this '#pragma clang module begin'
must specify '-fmodule-name=%0' to enter %select{|submodule of }1this module%select{ (current module is %3)|}2
no matching '#pragma clang module endbuild' for this '#pragma clang module build'
no matching '#pragma clang module begin' for this '#pragma clang module end'
nested parentheses not permitted in %0
C++ operator %0 (aka %1) used as a macro name
#pragma hdrstop not seen while attempting to use precompiled header
Expected 'begin' or 'end'
remainder by zero in preprocessor expression
'%select{#|#@}0' is not followed by a macro parameter
'%0' required for precompiled header not found
#include of '%0' not seen while attempting to %select{create|use}1 precompiled header
'#pragma unsafe_buffer_usage' was not ended
not currently inside '#pragma unsafe_buffer_usage'
not currently inside '#pragma clang arc_cf_code_audited'
not currently inside '#pragma clang assume_nonnull'
unterminated conditional directive
attempt to use a poisoned identifier
__VA_OPT__ cannot be nested within its own replacement tokens
no macro named %0
pragma %select{message|warning|error}0 requires parenthesized string
pragma %0 requires a parenthesized string
raw string delimiter longer than 16 characters; use PREFIX( )PREFIX to delimit raw string
differing user-defined suffixes ('%0' and '%1') in string literal concatenation
too few arguments provided to function-like macro invocation
too many arguments provided to function-like macro invocation
universal character name refers to a control character
character '%0' cannot be specified by a universal character name
incomplete universal character name
invalid universal character
module %0 does not depend on a module exporting '%1'
module %0 does not directly depend on a module exporting '%1', which is part of indirectly-used module %2
invalid escape sequence '%0' in an unevaluated string literal
an unevaluated string literal cannot have an encoding prefix
an unevaluated string literal cannot be a user-defined literal
unsupported non-standard concatenation of string literals
unterminated function-like macro invocation
missing terminating ')' character
unterminated /* comment
raw string missing terminating delimiter )%0"
'##' cannot appear at end of __VA_OPT__ argument
'##' cannot appear at start of __VA_OPT__ argument
escaped newline between */ characters at block comment end
binary integer literals are a GNU extension
binary integer literals are a C++14 extension
use of a '#%select{<BUG IF SEEN>|elifdef|elifndef}0' directive is a C2x extension
ISO C99 requires whitespace after the macro name
charizing operator #@ is a Microsoft extension
pasting two '/' tokens into a '//' comment is a Microsoft extension
treating Ctrl-Z as end-of-file is a Microsoft extension
use of a '#%select{<BUG IF SEEN>|elifdef|elifndef}0' directive is a C++23 extension
%select{delimited|named}0 escape sequences are a %select{Clang|C++23}1 extension
'$' in identifier
embedding a directive within macro arguments has undefined behavior
empty character constant
empty macro arguments are a C99 feature
hexadecimal floating constants are a C99 feature
hexadecimal floating literals are a C++17 feature
// comments are not allowed in this language
mathematical notation character <U+%0> in an identifier is a Clang extension
must specify at least one argument for '...' parameter of variadic macro
whitespace required after macro name
invalid suffix on literal; C++11 requires a space between literal and identifier
multi-line // comment
named variadic macros are a GNU extension
no newline at end of file
use of non-standard escape character '\%0'
expected 'ON' or 'OFF' or 'DEFAULT' in pragma
token pasting of ',' and __VA_ARGS__ is a GNU extension
pasting formed '%0', an invalid preprocessing token
__VA_ARGS__ can only appear in the expansion of a C99 variadic macro
__VA_OPT__ can only appear in the expansion of a variadic macro
comma operator in operand of #if
extra tokens at end of #%0 directive
this style of line directive is a GNU extension
#ident is a language extension
#import is a language extension
#include_next is a language extension
#include resolved using non-portable Microsoft search rules as: %0
C requires #line number to be less than %0, allowed as extension
#line directive with zero argument is a GNU extension
%0 macro redefined
variadic macros are a Clang extension in OpenCL
C++ operator %0 (aka %1) used as a macro name
redefining builtin macro
undefining builtin macro
#warning is a %select{C2x|C++23}0 extension
expected end of directive in pragma
invalid suffix on literal; C++11 requires a space between literal and identifier
string literal of length %0 exceeds maximum length %1 that %select{C90|ISO C99|C++}2 compilers are required to support
extension used
treating Unicode character as whitespace
unknown escape sequence '\%0'
missing terminating %select{'|'"'}0 character
variadic macros are a C99 feature
%0 is defined here; did you mean %1?
submodule of top-level module '%0' implicitly imported here
cannot use initializer list at the beginning of a macro argument
did you mean %0 ('%2' U+%1)?
characters names in Unicode escape sequences are sensitive to case and whitespaces
expansion of macro %0 requested here
macro %0 defined here
use 'framework module' to declare module '%0'
to match this '{'
to match this ']'
previously defined here
rename '%0' to ensure it can be found by name
expanding this definition of %0
other definition of %0
did not find header '%0' in framework '%1' (loaded from '%2')
macro marked '%select{deprecated|restrict_expansion|final}0' here
entering module '%0' due to this pragma
parentheses are required around macro argument containing braced initializer list
did you mean to use '\u'?
null character(s) preserved in %select{char|string}0 literal
null character ignored
disabled expansion of recursive macro
%select{#elif|#elifdef|#elifndef}0 after #else
%select{#elif|#elifdef|#elifndef}0 without #if
#else after #else
#else without #if
the #__include_macros directive is only for internal use by -imacros
#include_next in file found relative to primary source file or found by absolute path; will search from start of include path
#include_next in primary source file; will search from start of include path
invalid string literal, ignoring final '\'
macro is not used
non-portable path to file '%0'; specified path differs in case from file name on disk
non-portable path to file '%0'; specified path differs in case from file name on disk
current file is older than dependency %0
poisoning existing macro
#pragma once in main file
#pragma system_header ignored in main file
treating #%select{include|import|include_next|__include_macros}0 as an import of module '%1'
search path used: '%0'
trigraph converted to '%0' character
trigraph ends block comment
trigraph ignored
ignored trigraph would end block comment
illegal character encoding in character literal
illegal character encoding in string literal
digit separators are incompatible with C standards before C2x
universal character name referring to a control character is incompatible with C standards before C2x
specifying character '%0' with a universal character name is incompatible with C standards before C2x
use of a '#%select{<BUG IF SEEN>|elifdef|elifndef}0' directive is incompatible with C standards before C2x
#warning is incompatible with C standards before C2x
'%0' is a keyword in C2x
%select{using this character in an identifier|starting an identifier with this character}0 is incompatible with C99
unicode literals are incompatible with C99
'%0' is a keyword in C99
character constant too long for its type
binary integer literals are incompatible with C++ standards before C++14
digit separators are incompatible with C++ standards before C++14
identifier after literal will be treated as a reserved user-defined literal suffix in C++11
identifier after literal will be treated as a user-defined literal suffix in C++11
'%0' is a keyword in C++11
unicode literals are incompatible with C++ standards before C++17
passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20
'<=>' operator is incompatible with C++ standards before C++20
hexadecimal floating literals are incompatible with C++ standards before C++17
'<=>' is a single token in C++20; add a space to avoid a change in behavior
'%0' is a keyword in C++20
use of a '#%select{<BUG IF SEEN>|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23
#warning is incompatible with C++ standards before C++23
%select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23
empty macro arguments are incompatible with C++98
'<::' is treated as digraph '<:' (aka '[') followed by ':' in C++98
universal character name referring to a control character is incompatible with C++98
specifying character '%0' with a universal character name is incompatible with C++98
C++98 requires newline at end of file
#line number greater than 32767 is incompatible with C++98
raw string literals are incompatible with C++98
unicode literals are incompatible with C++98
variadic macros are incompatible with C++98
macro expansion producing 'defined' has undefined behavior
macro expansion producing 'defined' has undefined behavior
empty delimited universal character name; treating as '\' '%0' '{' '}'
incomplete delimited universal character name; treating as '\' '%0' '{' identifier
multi-character character constant
public framework header includes private framework header '%0'
__has_warning expected option name (e.g. "-Wundef")
%0 is used as a header guard here, followed by #define of a different macro
invalid UTF-8 in comment
whitespace recommended after macro name
skipping '%0' because module declaration of '%1' lacks the 'framework' qualifier
expected canonical name for private module '%0'
private submodule '%0' in private module map, expected top-level module
module '%0' already re-exported as '%1'
umbrella directory '%0' not found
unknown attribute '%0'
module '%0' conflicts with already-imported module '%1': %2
multi-character character constant
'/*' within block comment
no newline at end of file
include of non-modular header inside framework module '%0': '%1'
include of non-modular header inside module '%0': '%1'
ambiguous expansion of macro %0
%select{left|right}0 side of operator converted from negative value to unsigned: %1
expansion of date or time macro is not reproducible
encountered non-reproducible token, caching will be skipped
integer overflow in preprocessor expression
#pragma hdrstop filename not supported, /Fp can be used to specify precompiled header filename
invalid preprocessing directive%select{|, did you mean '#%1'?}0
%select{#line|GNU line marker}0 directive interprets number as decimal, not octal
definition of macro %0 does not match definition in precompiled header
keyword is hidden by macro definition
macro name is a reserved identifier
ignoring redefinition of Objective-C qualifier macro
%0 is not defined, evaluates to 0
%0 is not defined, evaluates to 0
missing debug command
unexpected debug command '%0'
unknown module '%0'
macro %0 has been marked as deprecated%select{|: %2}1
pragma diagnostic pop could not pop, no matching push
pragma diagnostic expected 'error', 'warning', 'ignored', 'fatal', 'push', or 'pop'
pragma diagnostic expected option name (e.g. "-Wundef")
unexpected token in pragma diagnostic
unknown warning group '%0', ignored
#pragma execution_character_set expected '%0'
#pragma execution_character_set invalid value '%0', only 'UTF-8' is supported
#pragma execution_character_set expected 'push' or 'pop'
macro %0 has been marked as final and should not be %select{undefined|redefined}1
unknown pragma ignored
pragma include_alias expected '%0'
pragma include_alias expected include filename
angle-bracketed include <%0> cannot be aliased to double-quoted include "%1"
double-quoted include "%0" cannot be aliased to angle-bracketed include <%1>
pragma pop_macro could not pop '%0', no matching push_macro
macro %0 has been marked as unsafe for use in headers%select{|: %2}1
#pragma warning expected '%0'
#pragma warning expected a warning number
#pragma warning(push, level) requires a level between 0 and 4
#pragma warning expected 'push', 'pop', 'default', 'disable', 'error', 'once', 'suppress', 1, 2, 3, or 4
double-quoted include "%0" in framework header, expected angle-bracketed instead
incomplete universal character name; treating as '\' followed by identifier
\%0 used with no following hex digits; treating as '\' followed by identifier
universal character name refers to a surrogate character
universal character names are only valid in C99 or C++; treating as '\' followed by identifier
universal character names are only valid in C99 or C++
umbrella header for module '%0' does not include header '%1'
encoding prefix '%0' on an unevaluated string literal has no effect%select{| and is incompatible with c++2c}1
use of private header from outside its module: '%0'
treating Unicode character <U+%0> as an identifier character rather than as '%1' symbol
identifier contains Unicode character <U+%0> that is invisible in some environments
interface types cannot specify '%select{private|protected}0' access
use of address-of-label extension outside of a function body
name defined in alias declaration must be an identifier
alias declaration cannot be a pack expansion
%select{partial specialization|explicit specialization|explicit instantiation}0 of alias templates is not permitted
anonymous bit-field cannot have a default member initializer
declaration of anonymous %0 must be a definition
ISO C++ only allows ':' in member enumeration declaration to introduce a fixed underlying type, not an anonymous bit-field
unknown cast annotation __bridge_retain; did you mean __bridge_retained?
argument required after attribute
duplicate asm qualifier '%0'
__asm used with no assembly instructions
cannot use %select{unicode|wide|an empty}0 string literal in 'asm'
expected 'volatile', 'inline', 'goto', or '('
@defs is not supported in Objective-C++
unexpected '@' in member specification
use of '@import' when modules are disabled
use of '@import' when C++ modules are disabled, consider using -fmodules and -fcxx-modules
attribute %0 does not support argument pack expansion
%0 attribute cannot be applied to a module import
%0 attribute cannot be applied to a module
parentheses must be omitted if %0 attribute's argument list is empty
misplaced attributes; expected attributes here
an attribute list cannot appear here
expected a platform name here
unrecognized platform name %0
expected 'introduced', 'deprecated', or 'obsoleted'
expected a platform name, e.g., 'macos'
version for '%0' already specified
'*' query has already been specified
must handle potential future platforms with '*'
redundant %0 availability change; only the last specified change will be used
%0 is not an availability stage; use 'introduced', 'deprecated', or 'obsoleted'
redeclaration of C++ built-in type 'bool'
bracket nesting level exceeded maximum of %0
brackets are not allowed here; to declare an array, place the brackets after the %select{identifier|name}0
'_Noreturn' keyword must precede function declarator
capture default must be first
template template parameter requires 'class'%select{| or 'typename'}0 after the parameter list
name defined in concept definition must be an identifier
ISO C++ does not permit the 'bool' keyword after 'concept'
missing return type for function %0; did you mean the constructor name %1?
missing ',' between base or member initializers
attribute %0 cannot have an argument list
attribute %0 cannot be used as an attribute pack
declaration does not declare a parameter
'%0' qualifier may not appear after the virtual specifier '%1'
unexpected end of default argument expression
'= %select{default|delete}0' is a function definition and must occur in a standalone declaration
default template argument for a template template parameter must be a class template
destructor name %0 does not refer to a template
expected a class name after '~' to name a destructor
'~' in destructor name should be after nested name specifier
duplicate 'virtual' in base specifier
class already marked '%0'
duplicate default generic association
class member already marked '%0'
cannot have both throw() and noexcept() clause on the same function
use of empty enum
a requires expression must contain at least one requirement
missing ',' between enumerators
unnamed enumeration must be a definition
unexpected end of exception specification
'#pragma omp end assumes' with no matching '#pragma omp begin assumes'
'#pragma omp end declare variant' with no matching '#pragma omp begin declare variant'
expected variable name or 'this' in lambda capture list
expected 'case' keyword before expression
expected catch
expected class name
'typename' is redundant; base classes are implicitly types
expected '::' after '__super'
expected ',' or '>' in template-parameter-list
expected ',' or ']' in lambda capture list
expected '#pragma omp end declare %select{target|variant}0'
expected '= constant-expression' or end of enumerator definition
expected '=' or another designator
expected expression
expected external declaration
expected a field designator, such as '.field = 4'
expected function body after function declarator
expected a foldable binary operator in fold expression
variable declaration in condition must have an initializer
variable declaration in condition cannot have a parenthesized initializer
expected body of lambda expression
expected '{' after base class list
expected '{' in compound literal
expected '<' after '%0'
expected '(' after '%0'
expected '(' for function-style cast or type construction
expected member name or ';' after declaration specifiers
expected member name or ';' after declaration specifiers; %0 is a keyword in Objective-C++
expected class member or base class name
expected method body
method type specifier must start with '-' or '+'
'@end' must appear in an Objective-C context
expected the name of a parameter pack
expected parentheses around type name in %0 expression
expected property name
expected ')' or ',' after '%0'
expected a qualified name after 'typename'
expected ')' after '%0'
expected selector for Objective-C method
expected HLSL Semantic identifier
expected ';' after attribute list
expected ';' after expression
expected ';' after method prototype
expected ';' after namespace name
expected ';' after '%0'
expected ';' after %0 statement
expected ';' at end of declaration list
expected ';' at end of declaration
expected ';' in 'for' statement specifier
expected ';' at end of requirement
expected an OpenMP 'directive' or 'sequence' attribute argument
expected 'this' following '*' in lambda capture list
expected statement
expected template
expected template parameter
expected %0; %1 is a keyword in Objective-C++
expected a type
expected an identifier or template-id after '::'
expected %select{identifier|unqualified-id}0
expected a version of the form 'major[.minor[.subminor]]'
expected 'while' in do/while loop
enumerations cannot be explicitly instantiated
explicit template instantiation cannot have a definition; if this definition is meant to be an explicit specialization, add '<>' after the 'template' keyword
explicit %select{specialization|instantiation}0 of %select{non-|undeclared }3template %1 %2
export declaration cannot be empty
duplicate %0 clause in an 'external_source_symbol' attribute
expected 'language', 'defined_in', 'generated_declaration', or 'USR'
extraneous closing brace ('}')
extraneous ')' after condition, expected a statement
extraneous '%0' before ';'
operators in fold expression must be the same
'co_await' modifier can only be applied to range-based for loop
for range declaration must declare a variable
range-based for loop requires type for loop variable
cannot define a type in a friend declaration
friend cannot be declared in an explicit instantiation; if this declaration is meant to be a friend declaration, remove the 'template' keyword
'friend' used outside of class
function definition does not declare parameters
function definition declared 'typedef'
function definition is not allowed here
unexpected %0 in function call; perhaps remove the %0?
function scope depth exceeded maximum of %0
meaningless '%0' on asm outside function
'module;' introducing a global module fragment can appear only at the start of the translation unit
GNU-style inline assembly is disabled
wrong argument format for hlsl attribute, use %0 instead
expected template name after 'template' keyword in nested name specifier
%0 declared as a reference to a reference
cannot cast 'super' (it isn't an expression)
module%select{| partition}0 imports cannot be in the %select{global|private}1 module fragment
imports must immediately follow the module declaration
array bound cannot be deduced from a default member initializer
initializer list cannot be used on the %select{left|right}0 hand side of operator '%1'
namespace alias cannot be inline
nested namespace definition cannot be 'inline'
invalid declaration inside %select{tbuffer|cbuffer}0
cannot use %select{dot|arrow}0 operator on a type
'%0' qualifier may not be applied to a reference
invalid %0 at end of declaration; did you mean '='?
expected ';' after top level declarator
invalid parameter name: '%0' is a keyword
misplaced %0; expected %0 here
%0 cannot appear here
%0 cannot be applied to a module import
%0 cannot be applied to a module
C++11 only allows consecutive left square brackets when introducing an attribute
'[]' after delete interpreted as 'delete[]'; add parentheses to treat this as a lambda-expression
ellipsis in pack %select{|init-}0capture must appear %select{after|before}0 the name of the capture
multiple ellipses in pack capture
%select{'mutable'|'static'|'constexpr'|'consteval'}0 cannot appear multiple times in a lambda declarator
lambda template parameter list cannot be empty
string literal after 'operator' must be '""'
string literal after 'operator' cannot have an encoding prefix
'...' must %select{immediately precede declared identifier|be innermost component of anonymous pack declaration}0
expected %0 at end of module
@try statement without a @catch and @finally clause
C requires a comma prior to the ellipsis in a variadic function type
use 'template' keyword to treat '%0' as a dependent template name
missing '}' at end of definition of %q0
expected parameter declarator
found '<::' after a %select{template name|addrspace_cast|const_cast|dynamic_cast|reinterpret_cast|static_cast}0 which forms the digraph '<:' (aka '[') and a ':', did you mean '< ::'?
missing ':' after %0 modifier
expected a module name after '%select{module|import}0'
expected ';' after module name
%select{global|private}0 module fragment cannot be exported
'__declspec' attributes are not enabled; use '-fdeclspec' or '-fms-extensions' to enable support for __declspec attributes
__declspec attributes must be an identifier or string literal
property declaration specifies '%0' accessor twice
expected name of accessor method
expected ',' or ')' at end of property accessor list
expected '=' after '%0'
putter for property must be specified as 'put', not 'set'
property declaration cannot have a default member initializer
missing 'get=' or 'put='
property does not specify a getter or a putter
expected 'get' or 'put' in property declaration
MS-style inline assembly is not available: %0
unsupported architecture '%0' for MS-style inline assembly
%select{|a template declaration|an explicit template specialization|an explicit template instantiation}0 can only %select{|declare|declare|instantiate}0 a single entity
namespaces can only be defined in global or namespace scope
parameter named %0 is missing
@%0 must be followed by a number to form an NSNumber object
unexpected token after Objective-C string
directive may only be specified in protocols only
expected '=' for Objective-C getter
expected '=' for Objective-C setter
unknown property attribute %0
expected selector for Objective-C %select{setter|getter}0
expected type parameter name
illegal interface qualifier
illegal visibility specification
missing '@end'
@implementation cannot have type parameters
postfix attributes are not allowed on Objective-C directives
postfix attributes are not allowed on Objective-C directives, place them in front of '%select{@interface|@protocol}0'
property name cannot be a bit-field
property requires fields to be named
protocol qualifiers must precede type arguments
'@end' appears where closing brace '}' is expected
prefix attribute must be followed by an interface, protocol, or implementation
expected an Objective-C directive after '@'
expected a related ObjectiveC class name, e.g., 'NSColor'
expected a class method selector with single argument, e.g., 'colorWithCGColor:'
unexpected '(', only 'to', 'link' or 'device_type' clauses expected for 'begin declare target' directive
function declaration is expected after 'declare %select{simd|variant}0' directive
unexpected '%0' clause, '%1' is specified already
only 'device_type(any)' clause is allowed with indirect clause
expected at least one %select{'enter' or 'link'|'enter', 'link' or 'indirect'}0 clause
expected at least one %select{'to' or 'link'|'to', 'link' or 'indirect'}0 clause
%0 appears multiple times in clauses on the same declare target directive
unexpected '%0' clause, only %select{'device_type'|'to' or 'link'|'to', 'link' or 'device_type'|'device_type', 'indirect'|'to', 'link', 'device_type' or 'indirect'}1 clauses expected
unexpected '%0' clause, only %select{'device_type'|'enter' or 'link'|'enter', 'link' or 'device_type'|'device_type', 'indirect'|'enter', 'link', 'device_type' or 'indirect'}1 clauses expected
unexpected 'enter' clause, use 'to' instead
unexpected 'to' clause, use 'enter' instead
unexpected clause after an implicit 'enter' clause
unexpected clause after an implicit 'to' clause
nested OpenMP context selector contains duplicated trait '%0' in selector '%1' and set '%2' with different score
nested user conditions in OpenMP context selector not supported (yet)
expected %select{'match'|'match', 'adjust_args', or 'append_args'}0 clause on 'omp declare variant' directive
expected at least one clause on '#pragma omp %0' directive
expected '%0' clause with an argument on '#pragma omp %1' construct
missing ':' in %0
expected valid context selector in %0
expected '=' in iterator specifier
expected identifier specifying the name of the 'omp critical' directive
expected interop type: 'target' and/or 'targetsync'
expected ',' or ')' in '%0' %select{clause|directive}1
expected ',' after interop modifier
expected ',' or ')' after iterator specifier
expected identifier or one of the following operators: '+', '-', '*', '&', '|', '^', '&&', or '||'
'#pragma omp %0' %select{|with '%2' clause }1cannot be an immediate substatement
data-sharing attribute '%0' in '%1' clause requires OpenMP version %2 or above
missing map type
missing map type modifier
expected declarator on 'omp declare mapper' directive
illegal OpenMP user-defined mapper identifier
reserved locator 'omp_all_memory' requires 'out' or 'inout' dependency types
 '%0 %select{sink:|source:}1' must be with '%select{omp_cur_iteration - 1|omp_cur_iteration}1'
unexpected operation specified in 'append_args' clause, expected 'interop'
unexpected OpenMP clause '%0' in directive '#pragma omp %1'
unexpected OpenMP directive %select{|'#pragma omp %1'}0
unexpected 'execution' modifier in non-executable context
expected an OpenMP directive
incorrect map type, expected one of 'to', 'from', 'tofrom', 'alloc', 'release', or 'delete'
incorrect map type modifier, expected one of: 'always', 'close', 'mapper'%select{|, 'present'|, 'present', 'iterator'}0%select{|, 'ompx_hold'}1
only a single match extension allowed per OpenMP context selector
^^ is a reserved operator in OpenCL
taking address of function is not allowed
virtual functions are not supported in C++ for OpenCL
out-of-line constructor for %0 cannot have template arguments
'%0' keyword not permitted with interface types
missing parentheses around the size of parameter pack %0
module partition imports must be within a module purview
expected 'auto' or 'decltype(auto)' after concept name
expression cannot be followed by a postfix %0 operator; add parentheses
duplicate attribute subject matcher '%0'
expected an attribute after '('
expected identifier that represents an attribute name
expected an attribute that is specified using the GNU, C++11 or '__declspec' syntax
expected '.' after pragma attribute namespace %0
expected 'push', 'pop', or '(' after '#pragma clang attribute'
expected an identifier that corresponds to an attribute subject rule
expected an identifier that corresponds to an attribute subject matcher sub-rule; '%0' matcher %select{does not support sub-rules|supports the following sub-rules: %2|}1
extra tokens after attribute in a '#pragma clang attribute push'
unexpected argument '%0' to '#pragma clang attribute'; expected 'push' or 'pop'
expected attribute subject set specifier 'apply_to'
namespace can only apply to 'push' or 'pop' directives
unknown attribute subject rule '%0'
%select{invalid use of|unknown}2 attribute subject matcher sub-rule '%0'; '%1' matcher %select{does not support sub-rules|supports the following sub-rules: %3}2
attribute %0 is not supported by '#pragma clang attribute'
force_cuda_host_device end pragma without matching force_cuda_host_device begin
expected '=' following '#pragma clang section %select{invalid|bss|data|rodata|text|relro}0'
pragma comment requires parenthesized identifier and optional string
unknown kind of pragma comment
pragma detect_mismatch is malformed; it requires two comma-separated string literals
expected one of [bss|data|rodata|text|relro] section kind in '#pragma %0'
expected an integer argument in '#pragma %0'
'#pragma %0' can only appear at file scope or at the start of a compound statement
pragma float_control is malformed; use 'float_control({push|pop})' or 'float_control({precise|except}, {on|off} [,push])'
unexpected argument '%0' to '#pragma clang fp %1'; expected %select{'fast' or 'on' or 'off'|'on' or 'off'|'ignore', 'maytrap' or 'strict'|'source', 'double' or 'extended'}2
%select{invalid|missing}0 option%select{ %1|}0; expected 'contract', 'reassociate' or 'exceptions'
invalid argument; expected 'enable'%select{|, 'full'}0%select{|, 'assume_safety'}1 or 'disable'
%select{invalid|missing}0 option%select{ %1|}0; expected vectorize, vectorize_width, interleave, interleave_count, unroll, unroll_count, pipeline, pipeline_initiation_interval, vectorize_predicate, or distribute
vectorize_width loop hint malformed; use vectorize_width(X, fixed) or vectorize_width(X, scalable) where X is an integer, or vectorize_width('fixed' or 'scalable')
missing argument; expected %select{an integer value|'enable'%select{|, 'full'}1%select{|, 'assume_safety'}2 or 'disable'}0
this pragma cannot appear in %0 declaration
missing argument to '#pragma %0'%select{|; expected %2}1
unexpected extra argument '%0' to '#pragma clang optimize'
unexpected argument '%0' to '#pragma clang optimize'; expected 'on' or 'off'
invalid argument; expected 'disable'
unexpected %0, expected to see one of %select{|'best_case', 'full_generality', }1'single_inheritance', 'multiple_inheritance', or 'virtual_inheritance'
expected ';' after private module fragment declaration
trailing requires clause should be placed outside parentheses
trailing return type must appear before trailing requires clause
trailing requires clause can only be used when declaring a function
expected concept name with optional arguments
requires expression in requirement body; did you intend to place it in a nested requirement? (add another 'requires' before the expression)
expected '->' before expression type requirement
varargs not allowed in requires expression
'noexcept' can only be used in a compound requirement (with '{' '}' around the expression)
a space is required between a right angle bracket and an equals sign (use '> =')
scoped enumeration requires a name
range-based 'for' statement uses ':', not '='
expected parenthesized parameter pack name in 'sizeof...' expression
static lambdas are a C++23 extension
a static lambda cannot have any captures
lambda cannot be both mutable and static
statement expression not allowed at file scope
'__super' cannot be used with a using declaration
expected a property name in @synthesize
%select{function|class|variable}0 cannot be defined in an explicit instantiation; if this declaration is meant to be a %select{function|class|variable}0 definition, remove the 'template' keyword
identifier followed by '<' indicates a class template specialization but %0 %select{does not refer to a template|refers to a function template|<unused>|refers to a variable template|<unused>|<unused>|refers to a concept}1
a static_assert declaration cannot be a template
cannot template a using %select{directive|declaration}0
'this' cannot be captured by reference
a space is required between consecutive right angle brackets (use '> >')
invalid comparison flag %0; use 'layout_compatible' or 'must_be_null'
type trait requires %0%select{| or more}1 argument%select{|s}2; have %3 argument%s3
unparsed tokens following type
typename is allowed for identifiers only
type name does not allow %select{<ERROR>|constexpr|consteval|constinit}0 specifier to be specified
type name does not allow function specifier to be specified
type name does not allow storage class to be specified
typename specifier refers to a non-type template
type name requires a specifier or qualifier
unexpected '@' in program
unexpected ':' in nested name specifier; did you mean '::'?
module declaration can only appear at the top level
attributes cannot be specified on namespace alias
attributes cannot be specified on a nested namespace definition
@implementation declaration cannot be protocol qualified
unexpected namespace scope prior to decltype
unexpected ';' before %0
'template' keyword not permitted after 'using' keyword
'template' keyword not permitted in destructor name
'template' keyword not permitted here
'%0' cannot be a part of nested name specifier; did you mean ':'?
unexpected type name %0: expected identifier
type-id cannot have a name
unknown HLSL semantic %0
unknown template name %0
parentheses are required around this expression in a requires clause
'static' may not be used without an array size
'static' may not be used with an unspecified variable length array size
module partitions are only supported for C++20 onwards
attribute with scope specifier cannot follow default scope specifier
using enum %select{requires an enum or typedef name|does not permit an elaborated enum specifier}0
'using namespace' is not allowed in classes
'%0' specifier is not allowed outside a class definition
while loop outside of a function
version number must have non-zero major, minor, or sub-minor version
ISO C++11 requires a parenthesized pack declaration to have a name
alias declarations are a C++11 extension
alias declaration in this context is a C++23 extension
%0 applied to an expression is a GNU extension
'auto' storage class specifier is not permitted in C++11, and will not be supported in future releases
'__auto_type' is a GNU extension
'_BitInt' in %select{C17 and earlier|C++}0 is a Clang extension
default member initializer for bit-field is a C++20 extension
'%0' is a C11 extension
compound literals are a C99-specific feature
'%0' is a C99 extension
variable declaration in for loop is a C99-specific feature
label at end of compound statement is a C2x extension
'nullptr' is a C2x extension
'_Static_assert' with no message is a C2x extension
enumeration types with a fixed underlying type are a Clang extension
consteval if is a C++23 extension
constexpr if is a C++17 extension
'constexpr' on lambda expressions is a C++17 extension
ISO C++ does not allow %select{an attribute list|%0}1 to appear here
enumeration types with a fixed underlying type are a C++11 extension
label at end of compound statement is a C++23 extension
'static_assert' with no message is a C++17 extension
%select{an attribute specifier sequence|%0}1 in this position is a C++23 extension
'decltype(auto)' type specifier is a C++14 extension
ISO C++17 does not allow a decomposition group to be empty
%select{defaulted|deleted}0 function definitions are a C++11 extension
ISO C++17 does not allow dynamic exception specifications
reference to enumeration must use 'enum' not 'enum %select{struct|class}0'
exception specification of '...' is a Microsoft extension
ISO C requires a translation unit to contain at least one declaration
non-defining declaration of enumeration with a fixed underlying type is only permitted as a standalone declaration%select{|; missing list of enumerators?}0
commas at the end of enumerator lists are a C99-specific feature
commas at the end of enumerator lists are a C++11 extension
expected ';' at end of declaration list
explicit(bool) is a C++20 extension
extern templates are a C++11 extension
extra ';' %select{outside of a function|inside a %1|inside instance variable list|after member function definition}0
extra ';' outside of a function is a C++11 extension
pack fold expression is a C++17 extension
range-based for loop is a C++11 extension
range-based for loop initialization statements are a C++20 extension
generalized initializer lists are a C++11 extension
passing a type argument as the first operand to '_Generic' is a Clang extension
use of GNU address-of-label extension
use of GNU array range extension
use of GNU case range extension
use of GNU ?: conditional expression extension, omitting middle operand
use of GNU indirect-goto extension
use of GNU 'missing =' extension in designator
use of GNU old-style field designator extension
use of GNU statement expression extension
use of GNU statement expression extension from macro expansion
access specifiers are a clang HLSL extension
type-less parameter names in function declaration
'%select{if|switch}0' initialization statements are a C++17 extension
inline namespaces are a C++11 feature
inline nested namespace definition is a C++20 extension
keyword '%0' will be made available as an identifier %select{here|for the remainder of the translation unit}1
lambda without a parameter clause is a C++23 extension
explicit template parameter list for lambdas is a C++20 extension
'abstract' keyword is a Microsoft extension
enumeration types with a fixed underlying type are a Microsoft extension
'sealed' keyword is a Microsoft extension
use of 'static_assert' without inclusion of <assert.h> is a Microsoft extension
use of multiple declarators in a single using declaration is a C++17 extension
nested namespace definition is a C++17 extension; define each namespace separately
default member initializer for non-static data member is a C++11 extension
attributes on %select{a namespace|an enumerator}0 declaration are a C++17 extension
type nullability specifier %0 is a Clang extension
specifying OpenMP directives with [[]] is an OpenMP 5.1 extension
'%0' keyword is a C++11 extension
reference qualifiers on functions are a C++11 extension
rvalue references are a C++11 extension
scoped enumerations are a C++11 extension
unknown pragma in STDC namespace
template template parameter using 'typename' is a C++17 extension
'__thread' before '%0'
default scope specifier for attributes is a C++17 extension
pack expansion of using declaration is a C++17 extension
using enum declaration is a C++20 extension
__final is a GNU extension, consider using C++11 final
use -fbracket-depth=N to increase maximum nesting level
%select{|second }0%1 token is here
use '%0' instead
comma separating Objective-C messaging arguments
or insert whitespace before ':' to use %0 as parameter name and have an empty entry in the selector
total token limit set here
did you mean to use 'typename'?
insert ',' before '...' to silence this warning
place '...' %select{immediately before declared identifier|here}0 to declare a function parameter pack
preceding '...' declares a function parameter pack
still within definition of %q0 here
introduce a parameter name to make %0 part of the selector
%select{class|protocol|category|class extension|implementation|category implementation}0 started here
the ignored tokens spans until here
the context property '%0' can be nested in the context selector '%1' which is nested in the context set '%2'; try 'match(%2={%1(%0)})'
the context selector '%0' can be nested in the context set '%1'; try 'match(%1={%0%select{|(property)}2})'
the ignored %select{set|selector|property}0 spans until here
'%0' is a context %select{set|selector|property}1 not a context %select{set|selector|property}2
context %select{set|selector|property}0 options are: %1
try 'match(%0={%1%2})'
the previous context %select{set|selector|property}0 '%1' used here
omit the namespace to add attributes to the most-recently pushed attribute group
use the GNU '__attribute__' syntax
vectorize_width loop hint malformed; use vectorize_width(X, fixed) or vectorize_width(X, scalable) where X is an integer, or vectorize_width('fixed' or 'scalable')
previous default generic association is here
previous statement is here
parentheses are required around this expression in a requires clause
'%0' casts have no effect when not using ARC
use of '@import' in framework header is discouraged, including this header requires -fmodules
attribute %0 ignored, because it is not attached to a declaration
GCC does not allow %0 attribute in this position on a function definition
'unavailable' availability overrides all other availability information
'%0' is incompatible with C standards before C2x
label at end of compound statement is incompatible with C standards before C2x
'_Static_assert' with no message is incompatible with C standards before C2x
expected string literal in 'clause %0' - ignoring
%select{%1 and |}0%2 tokens %select{introducing statement expression|terminating statement expression|introducing attribute|terminating attribute|forming pointer to member type}3 appear in different macro expansion contexts
%select{%1 and |}0%2 tokens %select{introducing statement expression|terminating statement expression|introducing attribute|terminating attribute|forming pointer to member type}3 are separated by whitespace
use of C-style parameters in Objective-C method declarations is deprecated
nvcc does not allow '__%0__' to appear after the parameter list in lambdas
'decltype(auto)' type specifier is incompatible with C++ standards before C++14
use of right-shift operator ('>>') in template argument will require parentheses in C++11
constexpr if is incompatible with C++ standards before C++17
constexpr on lambda expressions is incompatible with C++ standards before C++17
pack fold expression is incompatible with C++ standards before C++17
%select{if|switch}0 initialization statements are incompatible with C++ standards before C++17
nested namespace definition is incompatible with C++ standards before C++17
attributes on %select{a namespace|an enumerator}0 declaration are incompatible with C++ standards before C++17
'static_assert' with no message is incompatible with C++ standards before C++17
template template parameter using 'typename' is incompatible with C++ standards before C++17
default scope specifier for attributes is incompatible with C++ standards before C++17
default member initializer for bit-field is incompatible with C++ standards before C++20
explicit(bool) is incompatible with C++ standards before C++20
range-based for loop initialization statements are incompatible with C++ standards before C++20
inline nested namespace definition is incompatible with C++ standards before C++20
explicit template parameter list for lambdas is incompatible with C++ standards before C++20
use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17
pack expansion using declaration is incompatible with C++ standards before C++17
using enum declaration is incompatible with C++ standards before C++20
alias declaration in this context is incompatible with C++ standards before C++23
consteval if is incompatible with C++ standards before C++23
%select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23
this expression will be parsed as explicit(bool) in C++20
label at end of compound statement is incompatible with C++ standards before C++23
static lambdas are incompatible with C++ standards before C++23
alias declarations are incompatible with C++98
'alignas' is incompatible with C++98
alignof expressions are incompatible with C++98
[[]] attributes are incompatible with C++ standards before C++11
'decltype' type specifier is incompatible with C++98
%select{defaulted|deleted}0 function definitions are incompatible with C++98
enumeration types with a fixed underlying type are incompatible with C++98
commas at the end of enumerator lists are incompatible with C++98
extern templates are incompatible with C++98
range-based for loop is incompatible with C++98
generalized initializer lists are incompatible with C++98
inline namespaces are incompatible with C++98
lambda expressions are incompatible with C++98
literal operators are incompatible with C++98
noexcept specifications are incompatible with C++98
noexcept expressions are incompatible with C++98
default member initializer for non-static data members is incompatible with C++98
'nullptr' is incompatible with C++98
'%0' keyword is incompatible with C++98
reference qualifiers on functions are incompatible with C++98
rvalue references are incompatible with C++98
scoped enumerations are incompatible with C++98
'static_assert' declarations are incompatible with C++98
extra ';' outside of a function is incompatible with C++98
trailing return types are incompatible with C++98
consecutive right angle brackets are incompatible with C++98 (use '> >')
add explicit braces to avoid dangling else
'for co_await' belongs to CoroutineTS instead of C++20, which is deprecated
empty initialization statement of '%select{if|switch|range-based for}0' has no effect
dynamic exception specifications are deprecated
use same version number separators '_' or '.'; as in 'major[.minor[.subminor]]'
expected a qualified name after 'typename'
[[]] attributes are a C2x extension
[[]] attributes are a C++11 extension
'_ExtInt' is deprecated; use '_BitInt' instead
extra ';' after member function definition
GCC does not allow an attribute in this position on a function declaration
GCC does not allow variable declarations in for loop initializers before C99
the number of preprocessor source tokens (%0) exceeds this token limit (%1)
the total number of preprocessor source tokens (%0) exceeds the token limit (%1)
dependent %select{__if_not_exists|__if_exists}0 declarations are ignored
qualifiers after comma in declarator list are ignored
misleading indentation; statement is not part of the previous '%select{if|else|for|while}0'
'...' in this location creates a C-style varargs function%select{, not a function parameter pack|}0
use 'template' keyword to treat '%0' as a dependent template name
%0 used as the name of the previous parameter rather than as part of the selector
Setting the floating point evaluation method to `source` on a target without SSE is not supported.
empty expression statement has no effect; remove unnecessary ';' to silence this warning
protocol has no object type specified; defaults to qualified 'id'
specifying OpenMP directives with [[]] is incompatible with OpenMP standards before OpenMP 5.1
the context property '%0' is not valid for the context selector '%1' and the context set '%2'; property ignored
the context selector '%0' in the context set '%1' cannot have a score ('%2'); score ignored
the context selector '%0' is not valid for the context set '%1'; selector ignored
the context selector '%0' in context set '%1' requires a context property defined in parentheses; selector ignored
the context %select{set|selector|property}0 '%1' was used already in the same 'omp declare variant' directive; %select{set|selector|property}0 ignored
'%0' is not a valid context property for the context selector '%1' and the context set '%2'; property ignored
'%0' is not a valid context selector for the context set '%1'; selector ignored
'%0' is not a valid context set in a `declare variant`; set ignored
expected '%0' after the %1; '%0' assumed
expected identifier or string literal describing a context %select{set|selector|property}0; %select{set|selector|property}0 skipped
'depend' clause for 'ordered' is deprecated; use 'doacross' instead
extra tokens at the end of '#pragma omp %0' are ignored
more than one 'device_type' clause is specified
interop type '%0' cannot be specified more than once
reserved locator 'omp_all_memory' cannot be specified more than once
valid %0 clauses start with %1; %select{token|tokens}2 will be ignored
%0 clause should not be followed by arguments; tokens will be ignored
expected '=' following '#pragma %select{align|options align}0' - ignored
invalid alignment option in '#pragma %select{align|options align}0' - ignored
'#pragma comment %0' ignored
%select{value|type}0-dependent expression passed as an argument to debug command
expected action or ')' in '#pragma %0' - ignored
missing ':' after %0 - ignoring
missing ':' or ')' after %0 - ignoring
expected ',' in '#pragma %0'
expected identifier in '#pragma %0' - ignored
expected 'compiler', 'lib', 'user', or a string literal for the section name in '#pragma %0' - ignored
expected integer between %0 and %1 inclusive in '#pragma %2' - ignored
missing '(' after '#pragma %0' - ignoring
expected non-wide string literal in '#pragma %0'
expected %select{'enable', 'disable', 'begin' or 'end'|'disable'}0 - ignoring
expected ')' or ',' in '#pragma %0'
missing ')' after '#pragma %0' - ignoring
expected a stack label or a string literal for the section name in '#pragma %0' - ignored
expected a string literal for the section name in '#pragma %0' - ignored
expected push, pop or a string literal for the section name in '#pragma %0' - ignored
expected string literal in '#pragma %0' - ignoring
OpenCL extension %0 is core feature or supported optional core feature - ignoring
extra tokens at end of '#pragma %0' - ignored
incorrect use of #pragma clang force_cuda_host_device begin|end
'#pragma %0' is not supported on this target - ignored
'#pragma init_seg' is only supported when targeting a Microsoft environment
%0 is not a recognized builtin%select{|; consider including <intrin.h> to access non-builtin intrinsics}1
unknown action for '#pragma %0' - ignored
unexpected argument '%0' to '#pragma %1'%select{|; expected %3}2
unknown action '%1' for '#pragma %0' - ignored
missing argument to '#pragma %0'%select{|; expected %2}1
incorrect use of '#pragma fenv_access (on|off)' - ignored
incorrect use of '#pragma ms_struct on|off' - ignored
unexpected '#pragma omp ...' in program
expected 'align' following '#pragma options' - ignored
expected integer or identifier in '#pragma pack' - ignored
OpenCL extension %0 unknown or does not require pragma - ignoring
argument to '#pragma unroll' should not be in parentheses in CUDA C/C++
known but unsupported action '%1' for '#pragma %0' - ignored
unsupported OpenCL extension %0 - ignoring
expected '#pragma unused' argument to be a variable name
[[]] attributes are incompatible with C standards before C2x
semicolon before method body is ignored
ignoring '%select{static|inline}0' keyword on explicit template instantiation
pragma STDC FENV_ROUND is not supported
invalid or unsupported rounding mode in '#pragma STDC FENV_ROUND' - ignored
isa trait '%0' is not known to the current target; verify the spelling or consider restricting the context selector with the 'arch' selector further
'__clang__' is a predefined macro name, not an attribute scope specifier; did you mean '_Clang' instead?
empty symbolic operand name in inline assembly string
invalid %% escape in inline assembly string
invalid operand number in inline asm string
unknown symbolic operand name in inline assembly string
unterminated symbolic operand name in inline assembly string
the experimental clang interpreter failed to evaluate an expression
cannot get %select{lower,upper}0 bound because object size is unknown
%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{%4 base %plural{1:class|:classes}4|%4 virtual base %plural{1:class|:classes}4|%ordinal4 base class with type %5|%ordinal4 %select{non-virtual|virtual}5 base class %6|%ordinal4 base class %5 with %select{public|protected|private|no}6 access specifier}3
%q0 has different definitions in different modules; %select{definition in module '%2' is here|defined here}1
%q0 has different definitions in different modules; %select{definition in module '%2'|defined here}1 first difference is %select{enum that is %select{not scoped|scoped}4|enum scoped with keyword %select{struct|class}4|enum %select{without|with}4 specified type|enum with specified type %4|enum with %4 element%s4|%ordinal4 element has name %5|%ordinal4 element %5 %select{has|does not have}6 an initializer|%ordinal4 element %5 has an initializer|}3
%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{field %4|field %4 with type %5|%select{non-|}5bitfield %4|bitfield %4 with one width expression|%select{non-|}5mutable field %4|field %4 with %select{no|an}5 initializer|field %4 with an initializer}3
%q0 has different definitions in different modules; %select{definition in module '%2'|defined here}1 first difference is %select{return type is %4|%ordinal4 parameter with name %5|%ordinal4 parameter with type %5%select{| decayed from %7}6|%ordinal4 parameter with%select{out|}5 a default argument|%ordinal4 parameter with a default argument|function body}3
%0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{%select{method %5|constructor|destructor}4 that has %6 parameter%s6|%select{method %5|constructor|destructor}4 with %ordinal6 parameter of type %7%select{| decayed from %9}8|%select{method %5|constructor|destructor}4 with %ordinal6 parameter named %7}3
%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{end of class|public access specifier|private access specifier|protected access specifier|static assert|field|method|type alias|typedef|data member|friend declaration|function template|method|instance variable|property}3
%q0 %select{with definition in module '%2'|defined here}1 has different definitions in different modules; first difference is this %select{||||static assert|field|method|type alias|typedef|data member|friend declaration|function template|method|instance variable|property|unexpected decl}3
%0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{%select{no super class|super class with type %5}4|instance variable '%4' access control is %select{|@private|@protected|@public|@package}5}3
%0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{method %4 with return type %5|%select{class|instance}5 method %4|%select{no|'required'|'optional'}4 method control|method %4 with %select{no designated initializer|designated initializer}5|%select{regular|direct}5 method %4|method %4}3
%0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{property %4|property %4 with type %5|%select{no|'required'|'optional'}4 property control|property %4 with %select{default |}6'%select{none|readonly|getter|assign|readwrite|retain|copy|nonatomic|setter|atomic|weak|strong|unsafe_unretained|nullability|null_resettable|class|direct}5' attribute}3
%0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{static assert with condition|static assert with message|static assert with %select{|no }4message|%select{method %5|constructor|destructor}4|%select{method %5|constructor|destructor}4 is %select{not deleted|deleted}6|%select{method %5|constructor|destructor}4 is %select{not defaulted|defaulted}6|%select{method %5|constructor|destructor}4 is %select{|pure }6%select{not virtual|virtual}7|%select{method %5|constructor|destructor}4 is %select{not static|static}6|%select{method %5|constructor|destructor}4 is %select{not volatile|volatile}6|%select{method %5|constructor|destructor}4 is %select{not const|const}6|%select{method %5|constructor|destructor}4 is %select{not inline|inline}6|%select{method %5|constructor|destructor}4 with %ordinal6 parameter with%select{out|}7 a default argument|%select{method %5|constructor|destructor}4 with %ordinal6 parameter with a default argument|%select{method %5|constructor|destructor}4 with %select{no |}6template arguments|%select{method %5|constructor|destructor}4 with %6 template argument%s6|%select{method %5|constructor|destructor}4 with %6 for %ordinal7 template argument|%select{method %5|constructor|destructor}4 with %select{no body|body}6|%select{method %5|constructor|destructor}4 with body|friend %select{class|function}4|friend %4|friend function %4|function template %4 with %5 template parameter%s5|function template %4 with %ordinal5 template parameter being a %select{type|non-type|template}6 template parameter|function template %4 with %ordinal5 template parameter %select{with no name|named %7}6|function template %4 with %ordinal5 template parameter with %select{no |}6default argument|function template %4 with %ordinal5 template parameter with default argument %6|function template %4 with %ordinal5 template parameter with one type|function template %4 with %ordinal5 template parameter %select{not |}6being a template parameter pack|%select{no attribute|%5}4|}3
%0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{%4 referenced %plural{1:protocol|:protocols}4|%ordinal4 referenced protocol with name %5}3
%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{unnamed template parameter|template parameter %5|template parameter with %select{no |}4default argument|template parameter with default argument}3
%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{%select{typedef|type alias}4 name %5|%select{typedef|type alias}4 %5 with underlying type %6}3
%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{data member with name %4|data member %4 with type %5|data member %4 with%select{out|}5 an initializer|data member %4 with an initializer|data member %4 %select{is constexpr|is not constexpr}5}3
template parameter lists have a different number of parameters (%0 vs %1)
template parameter has different kinds in different translation units
field %0 declared with incompatible types in different translation units (%1 vs. %2)
external function %0 declared with incompatible types in different translation units (%1 vs. %2)
instance variable %0 declared with incompatible types in different translation units (%1 vs. %2)
non-type template parameter declared with incompatible types in different translation units (%0 vs. %1)
%select{class|instance}0 method %1 has a different number of parameters in different translation units (%2 vs. %3)
%select{class|instance}0 method %1 has a parameter with a different types in different translation units (%2 vs. %3)
%select{class|instance}0 method %1 has incompatible result types in different translation units (%2 vs. %3)
%select{class|instance}0 method %1 is variadic in one translation unit and not variadic in another
property %0 is implemented with %select{@synthesize|@dynamic}1 in one translation but %select{@dynamic|@synthesize}1 in another translation unit
property %0 declared with incompatible types in different translation units (%1 vs. %2)
class %0 has incompatible superclasses
property %0 is synthesized to different ivars in different translation units (%1 vs. %2)
parameter kind mismatch; parameter is %select{not a|a}0 parameter pack
type %0 has incompatible definitions in different translation units
external variable %0 defined in multiple translation units
external variable %0 declared with incompatible types in different translation units (%1 vs. %2)
cannot import unsupported AST node %0
ambiguous vftable component for %0 introduced via covariant thunks; this is an inherent limitation of the ABI
%select{pointer|reference}0 to a consteval declaration is not a constant expression
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of}0 heap allocated object that has been deleted
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of subobject of|destruction of}0 member %1 of union with %select{active member %3|no active member}2 is not allowed in a constant expression
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of}0 mutable member %1 is not allowed in a constant expression
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of}0 dereferenced null pointer is not allowed in a constant expression
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of}0 dereferenced one-past-the-end pointer is not allowed in a constant expression
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|reconstruction of|destruction of}0 temporary is not allowed in a constant expression outside the expression that created the temporary
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of subobject of|destruction of}0 %select{object outside its lifetime|uninitialized object}1 is not allowed in a constant expression
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of}0 object '%1' whose value is not known
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of}0 element of array without known bound is not allowed in a constant expression
%select{read of|read of|assignment to|increment of|decrement of|<ERROR>|<ERROR>|<ERROR>|<ERROR>}0 volatile %select{temporary|object %2|member %2}1 is not allowed in a constant expression
%select{read of|read of|assignment to|increment of|decrement of|<ERROR>|<ERROR>|<ERROR>|<ERROR>}0 volatile-qualified type %1 is not allowed in a constant expression
cannot constant evaluate the result of adjusting alignment to %0
cannot constant evaluate whether run-time alignment is at least %0
requested alignment must be %0 or less for type %1; %2 is invalid
cannot refer to element %0 of %select{array of %2 element%plural{1:|:s}2|non-array object}1 in a constant expression
%select{alignment of|offset of the aligned pointer from}0 the base pointee object (%1 %plural{1:byte|:bytes}1) is %select{less than|not a multiple of}0 the asserted %2 %plural{1:byte|:bytes}2
value of the aligned pointer (%0) is not a multiple of the asserted %1 %plural{1:byte|:bytes}1
indeterminate value can only initialize an object of type 'unsigned char'%select{, 'char',|}1 or 'std::byte'; %0 is invalid
invalid type %0 is a %select{member|base}1 of %2
bit_cast %select{from|to}0 a %select{|type with a }1%select{union|pointer|member pointer|volatile|reference}2 %select{type|member}1 is not allowed in a constant expression
value %1 cannot be represented in type %0
constexpr bit_cast involving bit-field is not yet supported
constexpr bit_cast involving type %0 is not yet supported
in call to '%0'
constexpr evaluation hit maximum call limit
(skipping %0 call%s0 in backtrace; use -fconstexpr-backtrace-limit=0 to see all)
comparison of pointer to virtual member function %0 has unspecified value
both arms of conditional operator are unable to produce a constant expression
construction of individual component of complex number is not yet supported in constant expressions
'std::allocator<...>::deallocate' used to delete a null pointer
delete of object with dynamic type %1 through pointer to base class type %0 with non-virtual destructor
delete of pointer '%0' that does not point to a heap-allocated object
delete of pointer%select{ to subobject|}1 '%0' %select{|that does not point to complete object}1
constexpr evaluation exceeded maximum depth of %0 calls
destruction of individual component of complex number is not yet supported in constant expressions
destroying object '%0' whose lifetime has already ended
delete of pointer that has already been deleted
destruction of object that is already being destroyed
%select{pointer|reference}0 to %select{|subobject of }1heap-allocated object is not a constant expression
heap allocation performed here
reference dynamic_cast failed: %select{static type %1 of operand is a non-public base class of dynamic type %2|dynamic type %2 of operand does not have a base class of type %3|%3 is an ambiguous base class of dynamic type %2 of operand|%3 is a non-public base class of dynamic type %2 of operand}0
cannot evaluate this expression if rounding mode is dynamic
floating point arithmetic produces %select{an infinity|a NaN}0
compile time floating point arithmetic suppressed in strict evaluation modes
function parameter %0 with unknown value cannot be used in a constant expression
constexpr evaluation hit maximum heap allocation limit
in implicit initialization for inherited constructor of %0
requested alignment %0 is not a positive power of two
%select{reinterpret_cast|dynamic_cast|%select{this conversion|cast that performs the conversions of a reinterpret_cast}1|cast from %1}0 is not allowed in a constant expression%select{| in C++ standards before C++20||}0
cannot cast object of dynamic type %0 to type %1
%select{non-constexpr|undefined}0 %select{function|constructor}1 %2 cannot be used in a constant expression
constructor inherited from base class %0 cannot be used in a constant expression; derived class cannot be implicitly initialized
cast from %0 is not allowed in a constant expression %select{in C++ standards before C++2c|because the pointed object type %2 is not similar to the target type %3}1
shift count %0 >= width of type %1 (%2 bit%s2)
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of}0 %select{temporary|variable}1 whose %plural{8:storage duration|:lifetime}0 has ended
comparison of addresses of literals has unspecified value
signed left shift discards bits
left shift of negative value %0
read of incomplete type %0 is not allowed in a constant expression
read of non-const variable %0 is not allowed in a constant expression
read of non-constexpr variable %0 is not allowed in a constant expression
read of variable %0 of non-integral, non-enumeration type %1 is not allowed in a constant expression
comparison against pointer to weak member %q0 can only be performed at runtime
constant evaluation of %0 on array of type %1 is not supported; only arrays of narrow character types can be searched
constant evaluation of %0 between arrays of types %1 and %2 is not supported; only arrays of narrow character types can be compared
cannot constant evaluate '%select{memcpy|memmove}0' between objects of incomplete type %1
cannot constant evaluate '%select{memcpy|memmove}0' between objects of non-trivially-copyable type %1
%select{source|destination}2 of '%select{%select{memcpy|wmemcpy}1|%select{memmove|wmemmove}1}0' is %3
'%select{memcpy|wmemcpy}0' between overlapping memory regions
cannot constant evaluate '%select{memcpy|memmove}0' from object of type %1 to object of type %2
'%select{%select{memcpy|wmemcpy}1|%select{memmove|wmemmove}1}0' not supported: %select{size to copy (%4) is not a multiple of size of element type %3 (%5)|source is not a contiguous array of at least %4 elements of type %3|destination is not a contiguous array of at least %4 elements of type %3}2
allocation performed here was not deallocated%plural{0:|: (along with %0 other memory leak%s0)}0
modification of object of const-qualified type %0 is not allowed in a constant expression
a constant expression cannot modify an object that is visible outside that expression
negative shift count %0
dynamic memory allocation is not permitted in constant expressions until C++20
%plural{2:'delete' used to delete pointer to object allocated with 'std::allocator<...>::allocate'|:%select{non-array delete|array delete|'std::allocator<...>::deallocate'}0 used to delete pointer to %select{array object of type %2|non-array object of type %2|object allocated with 'new'}0}1
cannot allocate array; evaluated array bound %0 is negative
call to %select{placement|class-specific}0 %1
cannot allocate memory of %select{incomplete|function}0 type %1
this placement new expression is not yet supported in constant expressions
cannot allocate array; evaluated array bound %0 is too large
cannot allocate array; evaluated array bound %0 is too small to hold %1 explicitly initialized elements
cannot allocate untyped memory in a constant expression; use 'std::allocator<T>::allocate' to allocate memory of type 'T'
control reached end of constexpr function
%select{pointer|reference}0 to %select{|subobject of }1%select{temporary|%3}2 is not a constant expression
non-literal type %0 cannot be used in a constant expression
address of non-static constexpr variable %0 may differ on each invocation of the enclosing function; add 'static' to give it a constant address
'%0' evaluates to a null function pointer
cannot %select{access base class of|access derived class of|access field of|access array element of|perform pointer arithmetic on|access real component of|access imaginary component of}0 null pointer
allocated size %0 is not a multiple of size %1 of element type %2
value %0 is outside the range of representable values of type %1
dereferenced pointer past the end of %select{|subobject of }0%select{temporary|%2}1 is not a constant expression
cannot %select{access base class of|access derived class of|access field of|access array element of|ERROR|access real component of|access imaginary component of}0 pointer past the end of object
placement new would change type of storage from %0 to %1
comparison of addresses of subobjects of different base classes has unspecified value
comparison of address of base class subobject %0 of class %1 to field %2 has unspecified value
comparison of address of fields %0 and %2 of %4 with differing access specifiers (%1 vs %3) has unspecified value
comparison against pointer '%0' that points past the end of a complete object has unspecified value
comparison between '%0' and '%1' has unspecified value
comparison of pointers '%0' and '%1' to unrelated zero-sized objects
comparison of numeric address '%0' with pointer '%1' can only be performed at runtime
subtracted pointers are not elements of the same array
subtraction of pointers to type %0 of zero size
comparison against address of weak declaration '%0' can only be performed at runtime
%select{|||||virtual function called on|dynamic_cast applied to|typeid applied to|construction of|destruction of}0 object '%1' whose dynamic type is not constant
pseudo-destructor call is not permitted in constant expressions until C++20
pure virtual function %q0 called
control flows through the definition of a %select{static|thread_local}0 variable
constexpr evaluation hit maximum step limit; possible infinite loop?
this use of statement expressions is not supported in a constant expression
subobject declared here
temporary created here
%select{|implicit }0use of 'this' pointer is only allowed within the evaluation of a call to a 'constexpr' member function
typeid applied to expression of polymorphic type %0 is not allowed in a constant expression in C++ standards before C++20
subobject %select{of type |}0%1 is not initialized
constructor of base class %0 is not called
assignment would change active union member during the initialization of a different member of the same union
indexing of array without known bound is not allowed in a constant expression
non-trivial destruction of type %0 in a constant expression is not supported
flexible array initialization is not yet supported
type %0 has unexpected layout
non-trivial destruction of lifetime-extended temporary with type %0 used in the result of a constant expression is not yet supported
array-to-pointer decay of array member without known bound is not supported
use of reference outside its lifetime is not allowed in a constant expression
initializer of %0 is not a constant expression
initializer of %0 is unknown
initializer of weak variable %0 is not considered constant because it may be different at runtime
cannot construct object of type %0 with virtual base class in a constant expression
cannot evaluate call to virtual function in a constant expression in C++ standards before C++20
comparison between unequal pointers to void has unspecified result
volatile %select{temporary created|object declared|member declared}0 here
covariant thunk required by %0
division by zero
in first definition, possible difference is here
but in '%0' found %select{%2 base %plural{1:class|:classes}2|%2 virtual base %plural{1:class|:classes}2|%ordinal2 base class with different type %3|%ordinal2 %select{non-virtual|virtual}3 base class %4|%ordinal2 base class %3 with %select{public|protected|private|no}4 access specifier}1
definition in module '%0' is here
but in '%0' found %select{enum that is %select{not scoped|scoped}2|enum scoped with keyword %select{struct|class}2|enum %select{without|with}2 specified type|enum with specified type %2|enum with %2 element%s2|%ordinal2 element has name %3|%ordinal2 element %3 %select{has|does not have}4 an initializer|%ordinal2 element %3 has different initializer|}1
but in %select{'%1'|definition here}0 found %select{field %3|field %3 with type %4|%select{non-|}4bitfield %3|bitfield %3 with different width expression|%select{non-|}4mutable field %3|field %3 with %select{no|an}4 initializer|field %3 with a different initializer}2
but in '%0' found %select{different return type %2|%ordinal2 parameter with name %3|%ordinal2 parameter with type %3%select{| decayed from %5}4|%ordinal2 parameter with%select{out|}3 a default argument|%ordinal2 parameter with a different default argument|a different body}1
but in %select{'%1'|definition here}0 found %select{%select{method %4|constructor|destructor}3 that has %5 parameter%s5|%select{method %4|constructor|destructor}3 with %ordinal5 parameter of type %6%select{| decayed from %8}7|%select{method %4|constructor|destructor}3 with %ordinal5 parameter named %6}2
but in %select{'%1'|definition here}0 found %select{end of class|public access specifier|private access specifier|protected access specifier|static assert|field|method|type alias|typedef|data member|friend declaration|function template|method|instance variable|property}2
but in %select{'%1'|definition here}0 found %select{||||different static assert|different field|different method|different type alias|different typedef|different data member|different friend declaration|different function template|different method|different instance variable|different property|another unexpected decl}2
but in %select{'%1'|definition here}0 found %select{%select{no super class|super class with type %4}3|instance variable '%3' access control is %select{|@private|@protected|@public|@package}4}2
but in %select{'%1'|definition here}0 found %select{method %3 with different return type %4|method %3 as %select{class|instance}4 method|%select{no|'required'|'optional'}3 method control|method %3 with %select{no designated initializer|designated initializer}4|%select{regular|direct}4 method %3|different method %3}2
but in %select{'%1'|definition here}0 found %select{property %3|property %3 with type %4|%select{no|'required'|'optional'}3 property control|property %3 with different '%select{none|readonly|getter|assign|readwrite|retain|copy|nonatomic|setter|atomic|weak|strong|unsafe_unretained|nullability|null_resettable|class|direct}4' attribute}2
but in '%0' found %select{static assert with different condition|static assert with different message|static assert with %select{|no }2message|%select{method %3|constructor|destructor}2|%select{method %3|constructor|destructor}2 is %select{not deleted|deleted}4|%select{method %3|constructor|destructor}2 is %select{not defaulted|defaulted}4|%select{method %3|constructor|destructor}2 is %select{|pure }4%select{not virtual|virtual}5|%select{method %3|constructor|destructor}2 is %select{not static|static}4|%select{method %3|constructor|destructor}2 is %select{not volatile|volatile}4|%select{method %3|constructor|destructor}2 is %select{not const|const}4|%select{method %3|constructor|destructor}2 is %select{not inline|inline}4|%select{method %3|constructor|destructor}2 with %ordinal4 parameter with%select{out|}5 a default argument|%select{method %3|constructor|destructor}2 with %ordinal4 parameter with a different default argument|%select{method %3|constructor|destructor}2 with %select{no |}4template arguments|%select{method %3|constructor|destructor}2 with %4 template argument%s4|%select{method %3|constructor|destructor}2 with %4 for %ordinal5 template argument|%select{method %3|constructor|destructor}2 with %select{no body|body}4|%select{method %3|constructor|destructor}2 with different body|friend %select{class|function}2|friend %2|friend function %2|function template %2 with %3 template parameter%s3|function template %2 with %ordinal3 template paramter being a %select{type|non-type|template}4 template parameter|function template %2 with %ordinal3 template parameter %select{with no name|named %5}4|function template %2 with %ordinal3 template parameter with %select{no |}4default argument|function template %2 with %ordinal3 template parameter with default argument %4|function template %2 with %ordinal3 template parameter with different type|function template %2 with %ordinal3 template parameter %select{not |}4being a template parameter pack|%select{no attribute|%3}2|}1
but in %select{'%1'|definition here}0 found %select{%3 referenced %plural{1:protocol|:protocols}3|%ordinal3 referenced protocol with different name %4}2
but in '%0' found %select{unnamed template parameter %2|template parameter %3|template parameter with %select{no |}2default argument|template parameter with different default argument}1
but in '%0' found %select{%select{typedef|type alias}2 name %3|%select{typedef|type alias}2 %3 with different underlying type %4}1
but in '%0' found %select{data member with name %2|data member %2 with different type %3|data member %2 with%select{out|}3 an initializer|data member %2 with a different initializer|data member %2 %select{is constexpr|is not constexpr}3}1
null passed to a callee that requires a non-null argument
class has base type %0
enumerator %0 with value %1 here
field %0 has type %1 here
field has name %0 here
friend declared here
no corresponding base class here
no corresponding enumerator here
no corresponding field here
no corresponding friend here
class has %0 base %plural{1:class|:classes}0
%select{class|instance}0 method %1 also declared here
no corresponding superclass here
property %0 is implemented with %select{@synthesize|@dynamic}1 here
inherits from superclass %0 here
property is synthesized to ivar %0 here
%select{parameter|parameter pack}0 declared here
%0 is a %select{struct|interface|union|class|enum}1 here
template parameter declared here
template parameter list also declared here
declared here with type %0
%select{non-virtual|virtual}0 derivation here
in second definition, possible difference is here
unimplemented constexpr lambda feature: %0 (coming soon!)
-fsanitize-address-field-padding applied to %0
-fsanitize-address-field-padding ignored for %0 because it %select{is not C++|is packed|is a union|is trivially copyable|has trivial destructor|is standard layout|is in a ignorelisted file|is ignorelisted}1
integer value %0 is outside the valid range of values [%1, %2] for the enumeration type %3
overflow in expression; result is %0 with type %1
overflow in expression; result is %0 with type %1
'%0' will always evaluate to 'true' in a manifestly constant-evaluated expression
ms_struct may not produce Microsoft-compatible layouts with fundamental data types with sizes that aren't a power of two
template parameter lists have a different number of parameters (%0 vs %1)
template parameter has different kinds in different translation units
field %0 declared with incompatible types in different translation units (%1 vs. %2)
external function %0 declared with incompatible types in different translation units (%1 vs. %2)
instance variable %0 declared with incompatible types in different translation units (%1 vs. %2)
non-type template parameter declared with incompatible types in different translation units (%0 vs. %1)
%select{class|instance}0 method %1 has a different number of parameters in different translation units (%2 vs. %3)
%select{class|instance}0 method %1 has a parameter with a different types in different translation units (%2 vs. %3)
%select{class|instance}0 method %1 has incompatible result types in different translation units (%2 vs. %3)
%select{class|instance}0 method %1 is variadic in one translation unit and not variadic in another
property %0 is implemented with %select{@synthesize|@dynamic}1 in one translation but %select{@dynamic|@synthesize}1 in another translation unit
property %0 declared with incompatible types in different translation units (%1 vs. %2)
class %0 has incompatible superclasses
property %0 is synthesized to different ivars in different translation units (%1 vs. %2)
parameter kind mismatch; parameter is %select{not a|a}0 parameter pack
type %0 has incompatible definitions in different translation units
external variable %0 defined in multiple translation units
external variable %0 declared with incompatible types in different translation units (%1 vs. %2)
padding %select{struct|interface|class}0 %1 with %2 %select{byte|bit}3%s2 to align anonymous bit-field
padding %select{struct|interface|class}0 %1 with %2 %select{byte|bit}3%s2 to align %4
padding size of %0 with %1 %select{byte|bit}2%s1 to alignment boundary
field %1 within %0 is less aligned than %2 and is usually due to %0 being packed, which can lead to unaligned accesses
packed attribute is unnecessary for %0
not packing field %0 as it is non-POD for the purposes of layout
add a deprecation attribute to the declaration to silence this warning
previous command '%select{\|@}0%1' here
previous command '%select{\|@}0%1' (an alias of '\%2') here
end tag
HTML tag started here
did you mean '%0'?
previous documentation
did you mean '%0'?
previous documentation
unknown command tag name '%0'; did you mean '%1'?
'%select{\|@}0%select{class|interface|protocol|struct|union}1' command should not be used in a comment attached to a non-%select{class|interface|protocol|struct|union}2 declaration
duplicated command '%select{\|@}0%1'
empty paragraph passed to '%select{\|@}0%1' command
'%select{\|@}0%select{classdesign|coclass|dependency|helper|helperclass|helps|instancesize|ownership|performance|security|superclass}1' command should not be used in a comment attached to a non-container declaration
declaration is marked with '%select{\|@}0deprecated' command but does not have a deprecation attribute
'%select{\|@}0%select{function|functiongroup|method|methodgroup|callback}1' command should be used in a comment attached to %select{a function|a function|an Objective-C method|an Objective-C method|a pointer to function}2 declaration
HTML end tag '%0' is forbidden
HTML end tag does not match any start tag
HTML tag '%0' requires an end tag
HTML start tag '%0' closed by '%1'
HTML start tag prematurely ended, expected attribute name or '>'
expected quoted string after equals sign
'%select{\|@}0%1' command has %plural{0:no|:%2}2 word argument%s2, expected %3
parameter '%0' is already documented
unrecognized parameter passing direction, valid directions are '[in]', '[out]' and '[in,out]'
'%select{\|@}0param' command used in a comment that is not attached to a function declaration
parameter '%0' not found in the function declaration
whitespace is not allowed in parameter passing direction
'%select{\|@}0%1' command used in a comment that is attached to a %select{function returning void|constructor|destructor|method returning void}2
'%select{\|@}0%1' command used in a comment that is not attached to a function or method declaration
template parameter '%0' is already documented
'%select{\|@}0tparam' command used in a comment that is not attached to a template declaration
template parameter '%0' not found in the template declaration
unknown command tag name
'%select{\|@}0%1' command does not terminate a verbatim text block
error opening '%0': required by the CrossTU functionality
error parsing index file: '%0' line: %1 '<USR-Length>:<USR> <File-Path>' format expected
multiple definitions are found for the same key in index 
imported AST from '%0' had been generated for a different target, current: %1, imported: %2
this builtin is only available on 32-bit targets
this builtin is only available on 64-bit targets
cannot add 'abi_tag' attribute in a redeclaration
%select{return|parameter|variable|field|instance variable|synthesized instance variable}0 type %1 is an abstract class
%1 is a %select{private|protected}0 member of %3
%select{base class|inherited virtual base class}0 %1 has %select{private|protected}3 %select{default |copy |move |*ERROR* |*ERROR* |*ERROR*|}2constructor
calling a %select{private|protected}0 constructor of class %2
ISO C++11 does not allow access declarations; use using declarations instead
calling a %select{private|protected}1 destructor of class %0
base class %0 has %select{private|protected}1 destructor
exception object of type %0 has %select{private|protected}1 destructor
field of type %1 has %select{private|protected}2 destructor
instance variable of type %0 has %select{private|protected}1 destructor
temporary of type %0 has %select{private|protected}1 destructor
variable of type %1 has %select{private|protected}2 destructor
inherited virtual base class %1 has %select{private|protected}2 destructor
field of type %0 has %select{private|protected}2 %select{default |copy |move |*ERROR* |*ERROR* |*ERROR* |}1constructor
friend function %1 is a %select{private|protected}0 member of %3
capture of variable '%0' as type %1 calls %select{private|protected}3 %select{default |copy |move |*ERROR* |*ERROR* |*ERROR* |}2constructor
address of overloaded function %0 is ambiguous
cannot form member pointer of type %0 without '&' and class name
address of overloaded function %0 does not match required type %1
address of overloaded function %0 cannot be converted to type %1
cannot take address of function %0 because parameter %1 has pass_object_size attribute
conflicting address space qualifiers are provided between types %0 and %1
'delete' cannot delete objects of type %0 in address space '%1'
'new' cannot allocate objects of type %0 in address space '%1'
cannot take address of function %0 because its constraints are not satisfied
cannot take address of function %0 because it has one or more non-tautological enable_if conditions
TLS model '%0' is not yet supported on AIX
alias definition of %0 after tentative definition
definition %0 cannot also be an %select{alias|ifunc}1
aliases are not supported on darwin
CUDA does not support aliases
extraneous template parameter list in alias template declaration
'align_value' attribute requires integer constant
%0 attribute cannot be applied to %select{a function parameter|a variable with 'register' storage class|a 'catch' variable|a bit-field|an enumeration}1
redeclaration has different alignment requirement (%1 vs %0)
%0 must be specified on definition if it is specified on any declaration
requested alignment is less than minimum alignment of %1 for type %0
aligned %select{allocation|deallocation}0 function of type '%1' is %select{only|not}4 available on %2%select{ %3 or newer|}4
'aligned' attribute requires integer constant
requested alignment is dependent but declaration is not dependent
requested alignment is not a power of 2
requested alignment must be %0 or smaller
requested alignment must be %0 or greater
invalid application of 'alignof' to a field of a class still being defined
allocating an object of abstract class type %0
expected initializer
ambiguous cast from base %0 to derived %1:%2
ambiguous conversion of delete expression of type %0 to a pointer
ambiguous conversion from derived class %0 to base class %1:%2
destructor of class %0 is ambiguous
constructor of %0 inherited from multiple base class subobjects
member %0 found in multiple base classes of different types
non-static member %0 found in multiple base-class subobjects of type %1:%2
ambiguous conversion from pointer to member of %select{base|derived}0 class %1 to pointer to member of %select{derived|base}0 class %2:%3
reference to %0 is ambiguous
multiple suitable %0 functions in %1
a type named %0 is hidden by a declaration in a different namespace
anonymous bit-field has negative width (%0)
anonymous bit-field cannot have qualifiers
anonymous property is not supported
anonymous %select{struct|union}0 can only contain non-static data members
member of anonymous %select{struct|union}0 redeclares %1
anonymous %select{struct|union}0 cannot contain a %select{private|protected}1 data member
functions cannot be declared in an anonymous %select{struct|union}0
static members cannot be declared in an anonymous %select{struct|union}0
types cannot be declared in an anonymous %select{struct|union}0
anonymous %select{structs|structs and classes}0 must be %select{struct or union|class}0 members
anonymous unions at namespace or global scope must be declared 'static'
anonymous union at class scope must not have a storage specifier
%select{x86|x86-64}0 'interrupt' attribute only applies to functions that have %select{a 'void' return type|only a pointer parameter optionally followed by an integer parameter|a pointer as the first parameter|a %2 type as the second parameter}1
interrupt service routine cannot be called directly
must explicitly describe intended ownership of an object array parameter
existing instance variable %1 for property %0 with %select{unsafe_unretained|assign}2 attribute must be __unsafe_unretained
cannot perform atomic operation on a pointer to type %0: type has non-trivial ownership
cannot capture __autoreleasing variable in a %select{block|lambda by copy}0
%select{__block variables|global variables|fields|instance variables}0 cannot have __autoreleasing ownership
incompatible types casting %0 to %1 with a %select{__bridge|__bridge_transfer|__bridge_retained}2 cast
cast of %select{Objective-C|block|C}0 pointer type %1 to %select{Objective-C|block|C}2 pointer type %3 cannot use %select{__bridge|__bridge_transfer|__bridge_retained}4
%select{cast|implicit conversion}0 of %select{Objective-C|block|C}1 pointer type %2 to %select{Objective-C|block|C}3 pointer type %4 requires a bridged cast
collection expression type %0 is a forward declaration
%select{implicit conversion|cast}0 of weak-unavailable object of type %1 to a __weak object of type %2
method implementation does not match its declaration
ARC forbids explicit message send of %0
ARC forbids %select{implementation|synthesis}0 of %1
ARC forbids use of %0 in a @selector
%select{|unsafe_unretained|strong|weak}1 property %0 may not also be declared %select{|__unsafe_unretained|__strong|__weak|__autoreleasing}2
%select{pointer|reference}1 to non-const type %0 with no explicit ownership
init methods must return a type related to the receiver type
method was declared as %select{an 'alloc'|a 'copy'|an 'init'|a 'new'}0 method, but its implementation doesn't match because %select{its result type is not an object pointer|its result type is unrelated to its receiver type}1
no visible @interface for %0 declares the selector %1
no known %select{instance|class}1 method for selector %0
%select{implicit conversion|cast}0 of %select{%2|a non-Objective-C pointer type %2|a block pointer|an Objective-C pointer|an indirect pointer to an Objective-C pointer}1 to %3 is disallowed with ARC
multiple methods named %0 found with mismatched result, parameter type or attributes
'new' cannot allocate an array of %0 with no explicit ownership
explicit ownership qualifier on cast result has no effect
passing address of %select{non-local|non-scalar}0 object to __autoreleasing parameter for write-back
ARC forbids synthesizing a property of an Objective-C object with unspecified ownership or storage attribute
performSelector names a selector which retains the object
pseudo-destructor destroys object of type %0 with inconsistently-qualified type %1
receiver %0 for class message is a forward declaration
receiver type %0 for instance message is a forward declaration
existing instance variable %1 for strong property %0 may not be %select{|__unsafe_unretained||__weak}2
thread-local variable has non-trivial ownership: type is %0
incompatible pointer types passing retainable parameter of type %0to a CF function expecting %1 type
class is incompatible with __weak references
the result of a delegate init call must be immediately returned or assigned to 'self'
cannot create __weak reference in file using manual reference counting
dereferencing a __weak pointer is not allowed due to possible null value caused by race condition, assign it to strong variable first
cannot create __weak reference because the current deployment target does not support weak references
assignment of a weak-unavailable object to a __weak object
synthesizing __weak instance variable of type %0, which does not support weak references
parameter may not be qualified with an address space
argument value %0 is outside the valid range [%1, %2]
argument %0 value should represent a contiguous bit field
argument should be a multiple of %0
argument should be a power of 2
argument should be an 8-bit value shifted by a multiple of 8 bits
argument should be an 8-bit value shifted by a multiple of 8 bits, or in the form 0x??FF
arithmetic on pointer to interface %0, which is not a constant size for this architecture and platform
coprocessor %0 must be configured as %select{GCP|CDE}1
invalid special register for builtin
array designator range [%0, %1] is empty
array designator value '%0' is negative
array designator cannot initialize non-array type %0
array designator index (%0) exceeds array bounds (%1)
size of array element of type %0 (%1 bytes) isn't a multiple of its alignment (%2 bytes)
array has %select{incomplete|sizeless}0 element type %1
cannot initialize array %diff{of type $ with array of type $|with different type of array}0,1
initializing wide char array with incompatible wide string literal
initializing wide char array with non-wide string literal
cannot initialize array %diff{of type $ with non-constant array of type $|with different type of array}0,1
array initializer must be an initializer list%select{| or string literal| or wide string literal}0
initializing 'char8_t' array with plain string literal
initialization of %select{|signed }0char array with UTF-8 string literal is not permitted by %select{'-fchar8_t'|C++20}1
initializing char array with wide string literal
array size must be specified in new expression with no initializer
array of abstract class type %0
array section does not specify contiguous storage
array section does not specify length for outermost dimension
ambiguous conversion of array size expression of type %0 to an integral or enumeration type
array size expression of type %0 requires explicit conversion to type %1
array size expression has incomplete class type %0
size of array has non-integer type %0
array size expression must have integral or %select{|unscoped }0enumeration type, not %1
variable length array must be bound in function definition
star modifier used outside of function prototype
%0 used in non-outermost array type derivation
%0 used in array declarator outside of function prototype
array is too large (%0 elements)
automatic variable qualified with an%select{| invalid}0 address space
bad type for named register variable
asm operand has incomplete type %0
more than one input constraint matches the same output '%0'
register '%0' unsuitable for global register variables on this target
invalid input constraint '%0' in asm
invalid input size for constraint '%0'
invalid lvalue in asm input for constraint '%0'
invalid lvalue in asm output
invalid output constraint '%0' in asm
invalid output size for constraint '%0'
parameter references not allowed in naked functions
'this' pointer references not allowed in naked functions
reference to a %select{bit-field|vector element|global register variable}0 in asm %select{input|output}1 with a memory constraint '%2'
cannot pass a pointer-to-member through register-constrained inline assembly parameter
size of register '%0' does not match variable size
unsupported inline asm: input with type %diff{$ matching output with type $|}0,1
asm constraint has an unexpected number of alternatives: %0 vs %1
unknown register name '%0' in asm
unwind clobber can't be used with asm goto
type %0 in generic association compatible with previously specified type %1
type %0 in generic association incomplete
type %0 in generic association not an object type
type %0 in generic association is a variably modified type
use of @defs is not supported on this architecture and platform
argument to atomic builtin of type '_BitInt' is not supported
address argument to atomic builtin cannot be const-qualified (%0 invalid)
Atomic memory operand must have a power-of-two size
address argument to atomic builtin must be a pointer (%0 invalid)
address argument to atomic builtin must be a pointer to integer, floating-point or pointer (%0 invalid)
address argument to atomic builtin must be a pointer to integer or pointer (%0 invalid)
address argument to atomic builtin must be a pointer to 1,2,4,8 or 16 byte type (%0 invalid)
address argument to load or store exclusive builtin must be a pointer to 1,2,4 or 8 byte type (%0 invalid)
atomic %select{load|store}0 requires runtime support that is not available for this target
synchronization scope argument to atomic operation is invalid
address argument to atomic operation must be a pointer to _Atomic type (%0 invalid)
address argument to atomic operation must be a pointer to %select{|atomic }0integer (%1 invalid)
address argument to atomic operation must be a pointer to %select{|atomic }0integer or supported floating point type (%1 invalid)
address argument to atomic operation must be a pointer to %select{|atomic }0integer or pointer (%1 invalid)
address argument to atomic operation must be a pointer to %select{|atomic }0integer, pointer or supported floating point type (%1 invalid)
address argument to %select{atomic|__sync}0 operation must be a pointer to a non address discriminated type (%1 invalid)
address argument to atomic operation must be a pointer to non-%select{const|constant}0 _Atomic type (%1 invalid)
address argument to atomic operation must be a pointer to non-const type (%0 invalid)
address argument to atomic operation must be a pointer to a trivially-copyable type (%0 invalid)
atomic property of reference type %0 cannot have non-trivial assignment operator
_Atomic cannot be applied to %select{incomplete |array |function |reference |atomic |qualified |sizeless ||integer }0type %1 %select{|||||||which is not trivially copyable|}0
%0 attribute expression never produces a constant expression
the type %0 is already explicitly ownership-qualified
%0 attribute can only be applied to a %select{function|method}1 with an error parameter
%0 attribute with '%1' convention can only be applied to a %select{function|method}2 returning %select{an integral type|a pointer}3
tls_model must be "global-dynamic", "local-dynamic", "initial-exec" or "local-exec"
function type may not be qualified with an address space
multiple address spaces specified for type
address space is negative
address space is larger than the maximum supported (%0)
requested alignment must be %0 bytes or smaller
%0 attribute only applies to integer arguments
%0 attribute argument is invalid: %select{max must be 0 since min is 0|min must not be greater than max}1
%0 attribute must be greater than 0
%0 attribute requires parameter %1 to be %select{int or bool|an integer constant|a string|an identifier|a constant expression|a builtin function}2
%0 attribute parameter %1 is out of bounds
%0 attribute parameter %1 is out of bounds: %plural{0:no parameters to index into|1:can only be 1, since there is one parameter|:must be between 1 and %2}2
%0 attribute requires integer constant between %1 and %2 inclusive
%0 attribute requires %select{int or bool|an integer constant|a string|an identifier}1
%0 attribute requires an integer type argument
%0 attribute requires a pointer type argument
'__clang_arm_builtin_alias' attribute can only be applied to an ARM builtin
%0 is only supported when '-msve-vector-bits=<bits>' is specified with a value of 128, 256, 512, 1024 or 2048.
'__clang_arm_mve_strict_polymorphism' attribute can only be applied to an MVE/NEON vector type
Neon vector size must be 64 or 128 bits
invalid RVV vector size '%0', expected size is '%1' based on LMUL of type and '-mrvv-vector-bits'
invalid SVE vector size '%0', must match value set by '-msve-vector-bits' ('%1')
%0 attribute references parameter %1, but the function %2 has only %3 parameters
%0 attribute can only be applied to a ARM, HLSL or RISC-V builtin
'cleanup' argument %select{|%1 |%1 }0is not a %select{||single }0function
'cleanup' function %0 parameter has %diff{type $ which is incompatible with type $|incompatible type}1,2
'cleanup' function %0 must take 1 parameter
'__declspec(dllexport)' cannot be applied to more than one default constructor in %0
attribute %q0 cannot be applied to a deleted function
lambda cannot be declared %0
attribute %q0 cannot be applied to member of %q1 class
%q0 must have external linkage when declared %q1
redeclaration of %q0 cannot add %q1 attribute
%q0 cannot be thread local when declared %q1
definition of dllimport data
dllimport cannot be applied to non-inline function definition
cannot define non-inline dllimport template specialization
definition of dllimport static field not allowed
%0 attribute argument may only refer to a function parameter of integer type
%select{a reference type|an array type|a non-vector or non-vectorizable scalar type}0 is an invalid argument to attribute %1
invalid argument expression to bounds attribute
'_BitInt' vector element width must be %select{a power of 2|at least as wide as 'CHAR_BIT'}0
%0 attribute is invalid for the implicit this argument
invalid matrix element type %0
%0%select{ attribute|}1 cannot be applied to a declaration
%0 attribute applied to non-RVV type %1
vector size not an integral multiple of component size
%0 attribute applied to non-SVE type %1
invalid vector element type %0
%0 attribute does not appear on the first declaration
multiple garbage collection attributes specified for type
%0 attribute has no effect on defaulted or deleted functions
%0 attribute is permitted on definitions only
empty %0 cannot be composed with named ones
%0 attribute cannot be applied to non-static member functions
%0 attribute cannot be used with pointers to members
function type with %0 attribute must have C linkage
%0 attribute is not supported in %select{C|C++|Objective-C}1
%0 attribute is not supported on '%1'
%0 attribute can only be applied once per parameter
attribute only applies to output parameters
redeclaration of %0 must %select{not |}1have the 'overloadable' attribute
at most one overload for a given name may lack the 'overloadable' attribute
'overloadable' function %0 must have a prototype
%0 attribute parameter types do not match: parameter %1 of function %2 has type %3, but parameter %4 of function %5 has type %6
%0 attribute only applies to%select{| constant}1 pointer arguments
argument %0 to 'preferred_name' attribute is not a typedef for a specialization of %1
'regparm' parameter must be between 0 and %0 inclusive
'regparm' is not valid on this platform
attribute %0 is supported in the OpenCL version %1%select{| onwards}2
%0 attribute requires a %select{positive|non-negative}1 integral compile time constant expression
%0 is only supported when '-mrvv-vector-bits=<bits>' is specified with a value of "zvl" or a power 2 in the range [64,65536]
argument to %select{'code_seg'|'section'}1 attribute is not valid for this target: %0
'selectany' can only be applied to data items with external linkage
'sentinel' parameter 1 less than zero
'sentinel' parameter 2 not 0 or 1
%0 size too large
%0 attribute cannot be applied to sizeless type %1
'symbol_metadata_footnote' attributes must use section names that are between 1 and 9 characters long, excluding the leading underscores.
%0 attribute takes at least %1 argument%s1
%0 attribute takes no more than %1 argument%s1
%0 attribute is not supported on targets missing %1; specify an appropriate -march= or -mcpu=
the vecreturn attribute can only be used on a POD (plain old data) class or structure (i.e. no virtual functions)
the vecreturn attribute can only be used on a class or structure with one member, which must be a vector
weak declaration cannot have internal linkage
weakref declaration of %0 must be in a global context
weakref declaration must have internal linkage
weakref declaration of %0 must also have an alias attribute
'__funcref' attribute can only be applied to a function pointer type
%0%select{ attribute|}1 only applies to %select{functions|unions|variables and functions|functions and methods|functions, methods and blocks|functions, methods, and parameters|variables|variables and fields|variables, data members and tag types|types and namespaces|variables, functions and classes|kernel functions|non-K&R-style functions}2
%0%select{ attribute|}1 only applies to %2
%0 attribute %plural{0:takes no arguments|1:takes one argument|:requires exactly %1 arguments}1
%0 attribute references function %1, which %plural{0:takes no arguments|1:takes one argument|:takes exactly %2 arguments}2
zero %0 size
%0 and %1%select{ attributes|}2 are not compatible
cannot pass bit-field as __auto_type initializer in C
%select{'auto'|'decltype(auto)'|'__auto_type'|template arguments}0 deduced as %1 in declaration of %2 and deduced as %3 in declaration of %4
functional-style cast to %0 has incompatible initializer of type %1
initializer for functional-style cast to %0 contains multiple expressions
initializer for functional-style cast to %0 is empty
cannot deduce actual type for %1 from %select{parenthesized|nested}0 initializer list
cannot deduce return type %0 from returned value of type %1
'%select{auto|decltype(auto)}0' in return type deduced as %1 here but deduced as %2 in earlier return statement
cannot deduce return type %0 for function with no return statements
cannot deduce return type from initializer list
cannot deduce return type %0 from omitted return expression
function %0 with deduced return type cannot be used before it is defined
function with deduced return type cannot be virtual
deduced conflicting types %diff{($ vs $) |}0,1for initializer list element type
cannot use __auto_type with initializer list in C
'auto' return without trailing return type; deduced return types are a C++14 extension
new expression for type %0 contains multiple constructor arguments
new expression for type %0 has incompatible constructor argument of type %1
new expression for type %0 requires a constructor argument
%select{function with deduced return type|declaration with trailing return type}0 must be the only declaration in its group
%select{'auto'|'decltype(auto)'|'__auto_type'|use of %select{class template|function template|variable template|alias template|template template parameter|concept|template}2 %3 requires template arguments; argument deduction}0 not allowed %select{in function prototype|in non-static struct member|in struct member|in non-static union member|in union member|in non-static class member|in interface member|in exception declaration|in template parameter until C++17|in block literal|in template argument|in typedef|in type alias|in function return type|in conversion function type|here|in lambda parameter|in type allocated by 'new'|in K&R-style function parameter|in template parameter|in friend declaration|in function prototype that is not a function declaration|in requires expression parameter}1
'auto' variable template instantiation is not allowed
variable %0 with type %1 has incompatible initializer of type %2
cannot deduce actual type for variable %0 with type %1 from initializer list
initializer for variable %0 with type %1 contains multiple expressions
initializer for variable %0 with type %1 is empty
cannot deduce type for variable %1 with type %2 from %select{parenthesized|nested}0 initializer list
declaration of variable %0 with deduced type %1 requires an initializer
variable %0 declared with deduced type %1 cannot appear in its own initializer
unknown platform %0 in availability macro
return type of 'await_suspend' is required to be 'void' or 'bool' (have %0)
%0 is an incomplete type
property implementation must have its declaration in the category %0
%select{const_cast||||C-style cast|functional-style cast|}0 to %2, which is not a reference, pointer-to-object, or pointer-to-data-member
address of overloaded function %0 cannot be cast to type %1
%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|addrspace_cast}0 from %1 to %2 converts between mismatching address spaces
%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from bit-field lvalue to reference type %2
%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|addrspace_cast}0 from %1 to %2 is not allowed
cannot %select{||reinterpret_cast||C-style cast||}0 from member pointer type %1 to member pointer type %2 of different size
%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2 casts away qualifiers
%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|addrspace_cast}0 from rvalue to reference type %2
%select{||reinterpret_cast||C-style cast||}0 from scalar %1 to vector %2 of different size
%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2, which are not related by inheritance, is not allowed
%select{||reinterpret_cast||C-style cast||}0 from vector %1 to scalar %2 of different size
%select{||reinterpret_cast||C-style cast||}0 from vector %1 to vector %2 of different size
%0 is not a class type
%0 is not polymorphic
cannot use dynamic_cast to convert from %0 to %1
invalid target type %0 for dynamic_cast; target type must be a reference or pointer type to a defined class
%0 cannot be used as the type of a kernel parameter
cannot cast from lvalue of type %1 to rvalue reference type %2; types are not compatible
left hand operand to %0 must be a %select{|pointer to }1class compatible with the right hand operand, but is %2
right hand operand to %0 has non-pointer-to-member type %1
function multiversioning doesn't support %select{feature|architecture}0 '%1'
cannot allocate %select{function|reference}1 type %0 with new
%0 cannot be the name of a parameter
parameter name cannot have template arguments
property implementation must be in a class or category implementation
property implementation must have its declaration in interface %0 or one of its extensions
bad receiver type %0
reinterpret_cast cannot resolve overloaded function %0 to type %1
reinterpret_cast of a %0 to %1 needs its address, which is not allowed
cast from pointer to smaller type %2 loses information
cannot cast from rvalue of type %1 to rvalue reference type %2; types are not compatible
cannot cast from type %1 to member pointer type %2
address of overloaded function %0 cannot be static_cast to type %1
cannot cast from type %1 to pointer type %2
%0 cannot be the name of a variable or data member
base class %0 has a flexible array member
unions cannot have base classes
base class initializer %0 names both a direct base class and an inherited virtual base class
constructor initializer %0 does not name a class
base specifier must name a class
%0%select{ attribute|}1 cannot be applied to a base specifier
binding %0 cannot appear in the initializer of its own decomposition declaration
__builtin_bit_cast %select{source|destination}0 type must be trivially copyable
__builtin_bit_cast source size does not equal destination size (%0 vs %1)
%select{signed|unsigned}0 _BitInt must have a bit size of at least %select{2|1}0
%select{signed|unsigned}0 _BitInt of bit sizes greater than %1 not supported
bit-field %0 has negative width (%1)
named bit-field %0 has zero width
%select{bit-field %1|anonymous bit-field}0 is too wide (%2 bits)
width of%select{ anonymous|}0 bit-field%select{| %1}0 (%2 bits) exceeds the %select{width|size}3 of its type (%4 bit%s4)
variable is not assignable (missing __block type specifier)
declaration of block scope identifier with linkage cannot have an initializer
__block attribute not allowed, only allowed on local variables
__block attribute not allowed on declaration with a variably modified type
non-void block should return a value
block cannot return %select{array|function}0 type %1
blocks support disabled - compile with -fblocks or %select{pick a deployment target that supports them|for OpenCL C 2.0 or OpenCL C 3.0 with __opencl_c_device_enqueue feature}0
reference to non-static member function must be called%select{|; did you mean to call it with no arguments?}0
cannot combine %select{'__counted_by_or_null'|'__sized_by_or_null'}0 and %1; did you mean %select{'__counted_by'|'__sized_by'}0 instead?
%select{array objects|flexible array members}1 cannot be null; did you mean %select{__counted_by|__sized_by}0 instead?
%select{string|character|boolean|numeric}0 literal must be prefixed by '@' in a collection
'break' statement not in loop or switch statement
__builtin_btf_type_id argument %0 not a constant
first argument to __builtin_annotation must be an integer
second argument to __builtin_annotation must be a non-wide string constant
this builtin is not supported on the requested cpu, please specify -mcpu=%0 or newer
definition of builtin function %0
builtin functions must be directly called
function-style cast to a builtin type can only take one argument
%ordinal0 argument must be a %select{vector, integer or floating point type|matrix|pointer to a valid matrix element type|signed integer or floating point type|vector type|floating point type|vector of integers}1 (was %2)
%select{non-pointer|function pointer|void pointer}0 argument to '__builtin_launder' is not allowed
argument to __builtin_longjmp must be a constant 1
__builtin_longjmp is not supported for the current target
matrix types extension is disabled. Pass -fenable-matrix to enable it
%0 dimension is outside the allowed range [1, %1]
the pointee of the 2nd argument must match the element type of the 1st argument (%0 != %1)
%0 argument must be a constant unsigned integer expression
cannot store matrix to read-only pointer
stride must be greater or equal to the number of rows
unsupported signature for %q0
call to '%select{__builtin_operator_new|__builtin_operator_delete}0' selects non-usual %select{allocation|deallocation}0 function
argument %0 is not an unqualified class type
cannot redeclare builtin function %0
'%0' is only available in %1
__builtin_setjmp is not supported for the current target
builtin is not supported on this target
argument to __builtin_verbose_trap must be a pointer to a constant string
this builtin is only available on x86-64 and aarch64 targets
%select{qualifier in |static |}0array size %select{||'[*] '}0is a C99 feature, not permitted in C++
calling %0 with incomplete return type %1
argument type %0 is incomplete
calling function with incomplete return type %0
'callback' attribute argument %0 is not a known function parameter
'callback' attribute specifies invalid callback callee
multiple 'callback' attributes specified
'callback' attribute specifies no callback callee
'callback' attribute callee may not be variadic
'callback' attribute callee does not have function type
'callback' argument at position %0 references unavailable implicit 'this'
'called_once' attribute only applies to function-like parameters
cannot find suitable %select{getter|setter}0 for property %1
cannot form a pointer-to-member to member %0 of reference type %1
cannot pass non-trivial C object of type %0 by value to variadic %select{function|block|method|constructor}1
cannot pass object with interface type %0 by value through variadic %select{function|block|method|constructor}1
cannot pass object with interface type %1 by value to variadic %select{function|block|method|constructor}2; expected type from format string was %3
cannot pass %select{expression of type %1|initializer list}0 to variadic %select{function|block|method|constructor}2
cannot pass %select{expression of type %1|initializer list}0 to variadic %select{function|block|method|constructor}2; expected type from format string was %3
capture host variable %0 by reference in device or host device lambda function
capturing a structured binding is not yet supported in OpenMP
__block variable %0 cannot be captured in a %select{lambda expression|captured statement}1
non-local lambda expression cannot have a capture-default
%0 in capture list does not name a variable
%0 can appear only once in a capture list
%0 cannot be captured because it does not have automatic storage duration
by-copy capture of value of abstract type %0
by-copy capture of variable %0 with %select{incomplete|sizeless}1 type %2
%select{function|parameter}0 declared '[[carries_dependency]]' after its first declaration
'[[carries_dependency]]' attribute only allowed on parameter in a function declaration or lambda
'case' statement not in switch statement
casting from randomized structure pointer type %0 to %1
operand of type %0 cannot be cast to a pointer type
pointer cannot be cast to type %0
cannot type cast @selector expression
cannot catch incomplete type %0
cannot catch pointer to incomplete type %0
cannot catch reference to incomplete type %0
@catch parameter is not a pointer to an interface type
cannot catch exceptions by rvalue reference
cannot catch %select{|reference to }0sizeless type %1
cannot catch variably modified type %0
cannot define %select{category|class extension}0 for undefined class %1
property declared in category %0 cannot be implemented in class implementation
function declared '%0' here was previously declared %select{'%2'|without calling convention}1
parameter %0 must have a complete type to use function %1 with the %2 calling convention
function with no prototype cannot use the %0 calling convention
variadic function cannot use %0 calling convention
CFString literal is not a string constant
circular inheritance between %0 and %1
cannot declare class extension for %0 after class implementation
base %0 is marked '%select{final|sealed}1'
property %0 is a class property; did you mean to access it with class '%1'?
%0 redeclared with '%1' access
'objc_class_stub' attribute cannot be specified on a class that does not have the 'objc_subclassing_restricted' attribute
property follows Cocoa naming convention for returning 'owned' objects
the type %0 is not a pointer to a fast-enumerable object
type of machine mode does not support base vector types
compound literal in function scope may not be qualified with an address space
%select{block pointer|pointer|reference}0 to function type %select{%2 |}1cannot have '%3' qualifier
concept declarations may only appear in global or namespace scope
extraneous template parameter list in concept definition
concept cannot have associated constraints
concept template parameter list must have at least one parameter; explicit specialization of concepts is not allowed
conditional expression returns %select{values with incompatible nested pointer types|functions with incompatible firebloom attributes}2%diff{ $ and $|}0,1
operands to conditional of types%diff{ $ and $|}0,1 are incompatible in ARC mode
conditional expression is ambiguous; %diff{$ can be converted to $ and vice versa|types can be convert to each other}0,1
conditional expression is ambiguous; %diff{$ and $|types}0,1 can be converted to several common types
cannot mix vectors and extended vectors in a vector conditional
vector condition type %0 and result type %1 do not have elements of the same size
GNU vector conditional operand cannot be %select{void|a throw expression}0
vector operands to the vector conditional must be the same type %diff{($ and $)|}0,1}
enumeration type %0 is not allowed in a vector conditional
vector condition type %0 and result type %1 do not have the same number of elements
%select{left|right}1 operand to ? is void, but %select{right|left}1 operand is of type %0
CUDA special function '%0' must have scalar return type
conflicting types for alias %0
conflicting option '-fcoro-aligned-allocation' and '-fno-aligned-allocation'
conflicting attributes for state '%0'
conflicting code segment specifiers
instance variable %0 has conflicting bit-field width
conflicting instance variable names: %0 vs %1
instance variable %0 has conflicting type%diff{: $ vs $|}1,2
virtual function %0 has different attributes %diff{($) than the function it overrides (which has $)|than the function it overrides}1,2
virtual function %0 has different calling convention attributes %diff{($) than the function it overrides (which has calling convention $)|than the function it overrides}1,2
conflicting super class name %0
conflicting types for %0
argument to %0 must be a constant integer
consteval function %0 cannot override a non-consteval function
statement not allowed in %select{constexpr|consteval}1 %select{function|constructor}0
no return statement in %select{constexpr|consteval}0 function
destructor cannot be declared %select{<ERROR>|constexpr|consteval|constinit}0
destructor cannot be declared %select{<ERROR>|constexpr|consteval|constinit}0 because %select{data member %2|base class %3}1 does not have a constexpr destructor
constexpr if condition is not a constant expression
variable of non-literal type %1 cannot be defined in a constexpr %select{function|constructor}0 before C++23
'main' is not allowed to be declared %select{constexpr|consteval}0
%select{constexpr|consteval}2 %select{function|constructor}1's %ordinal0 parameter type %3 is not a literal type
%select{constexpr|consteval}0 function's return type %1 is not a literal type
%select{non-constexpr|constexpr|consteval}1 declaration of %0 follows %select{non-constexpr|constexpr|consteval}2 declaration
non-void %select{constexpr|consteval}1 function %0 should return a value
declaration of constexpr static data member %0 requires an initializer
%select{class|struct|interface|union|enum|enum class|enum struct}0 cannot be marked %select{<ERROR>|constexpr|consteval|constinit}1
constexpr variable cannot have non-literal type %0
constexpr variable %0 must have constant destruction
constexpr variable %0 must be initialized by a constant expression
virtual function cannot be constexpr
constexpr %select{member function|constructor}0 not allowed in %select{struct|interface|class}1 with virtual base %plural{1:class|:classes}2
variably-modified type %0 cannot be used in a constexpr %select{function|constructor}1
%select{<ERROR>|constexpr|consteval|constinit}0 can only be used in %select{|variable and function|function|variable}0 declarations
'constinit' specifier added after initialization of variable
local variable cannot be declared 'constinit'
non-templated function cannot have a requires clause
virtual function cannot have a requires clause
satisfaction of constraint '%0' depends on itself
copy constructor must pass its first argument by reference
constructor cannot be declared '%0'
constructor cannot be redeclared
constructor cannot have a return type
class extension has no primary class
cannot jump from this continue statement to the loop increment; jump bypasses initialization of loop condition variable
'continue' statement not in loop statement
conversion function must be a non-static member function
conversion function cannot be redeclared
conversion function cannot have a return type
conversion function cannot convert to an array type
conversion function cannot convert to a function type
conversion function cannot be variadic
cannot specify any part of a return type in the declaration of a conversion function%select{; put the complete type after 'operator'|; use a typedef to declare a conversion to %1|; use an alias template to declare a conversion to %1|}0
conversion function cannot have any parameters
first two arguments to __builtin_convertvector must have the same number of elements
first argument to __builtin_convertvector must be a vector
second argument to __builtin_convertvector must be a vector type
'&' must precede a capture when the capture default is '='
the GNU address of label extension is not allowed in coroutines.
std::coroutine_handle must have a member named '%0'
'%1' cannot be used in %select{a constructor|a destructor|the 'main' function|a constexpr function|a function with a deduced return type|a varargs function|a consteval function}0
Objective-C methods as coroutines are not yet supported
'%0' cannot be used outside a function
the expression 'co_await __promise.final_suspend()' is required to be non-throwing
%0: 'get_return_object_on_allocation_failure()' must be a static member function
the coroutine promise type %0 declares both 'return_value' and 'return_void'
%0 is required to have a non-throwing noexcept specification when the promise type declares 'get_return_object_on_allocation_failure()'
this function cannot be a coroutine: %0 is an incomplete type
%0 is required to declare the member 'unhandled_exception()'
this function cannot be a coroutine: missing definition of specialization %0
'%0' cannot be used in an unevaluated context
unable to find %select{'::operator new(size_t, nothrow_t)'|'::operator new(size_t, align_val_t, nothrow_t)'}1 for %0
'operator new' provided by %0 is not usable with the function signature of %1
'%0' cannot be used in the handler of a try block
return type of virtual function %3 is not covariant with the return type of the function it overrides (ambiguous conversion from derived class %0 to base class %1:%2)
invalid covariant return for virtual function: %1 is a %select{private|protected}2 base class of %0
return type of virtual function %0 is not covariant with the return type of the function it overrides (%1 is incomplete)
return type of virtual function %0 is not covariant with the return type of the function it overrides (%1 is not derived from %2)
return type of virtual function %0 is not covariant with the return type of the function it overrides (class type %1 is more qualified than class type %2
return type of virtual function %0 is not covariant with the return type of the function it overrides (%1 has different qualifiers than %2)
'cpu_dispatch' function redeclared with different CPUs
multiple 'cpu_specific' functions cannot specify the same CPU: %0
%select{constructor|destructor}1 %0 must not return void expression
illegal device builtin %select{surface|texture}0 reference class template %1 declared here
illegal device builtin %select{surface|texture}0 reference type %1 declared here
cannot use '%0' in %select{__device__|__global__|__host__|__host__ __device__}1 function
__shared__ variable %0 cannot be 'extern'
__shared__ local variables not allowed in %select{__device__|__global__|__host__|__host__ __device__}0 functions
__constant__, __device__, and __managed__ are not allowed on non-static local variables
%select{__device__|__global__|__host__|__host__ __device__}0 function %1 cannot overload %select{__device__|__global__|__host__|__host__ __device__}2 function %3
constexpr function %0 without __host__ or __device__ attributes cannot overload __device__ function with same signature.  Add a __host__ attribute, or build with -fno-cuda-host-device-constexpr.
cannot use variable-length arrays in %select{__device__|__global__|__host__|__host__ __device__}0 functions
module name '%0' specified on command line does not match name of module
%select{reference|backing array for 'std::initializer_list'}2 %select{|subobject of }1member %0 %select{binds to|is}2 a temporary object whose lifetime would be shorter than the lifetime of the constructed object
dealloc return type must be correctly specified as 'void' under ARC, instead of %0
GNU decimal type extension not supported
%0%select{ attribute|}1 cannot be applied to a statement
'%0' declared as an array with a negative size
declarator requires an identifier
%0 cannot appear here, place it after "%select{class|struct|interface|union|enum}1" to apply it to the type declaration
'__declspec(thread)' applied to variable that already has a thread-local storage specifier
'decltype(auto)' cannot be combined with other type specifiers
cannot form %select{pointer to|reference to|array of}0 'decltype(auto)'
'decltype(auto)' can only be used as a return type in a function declaration
cannot deduce 'decltype(auto)' from initializer list
'decltype(auto)' not allowed here
'decltype' cannot be used to name a declaration
cannot decompose members of ambiguous base class %1 of %0:%2
cannot decompose class type %0 because it has an anonymous %select{struct|union}1 member
decomposition declaration cannot be declared with constrained 'auto'
decomposition declaration not permitted in this context
cannot decompose members of inaccessible base class %1 of %0
cannot decompose %select{private|protected}0 member %1 of %3
cannot decompose lambda closure type
cannot decompose class type %1: %select{its base classes %2 and|both it and its base class}0 %3 have non-static data members
decomposition declaration must be the only declaration in its group
decomposition declaration cannot be declared with parentheses
decomposition declaration %0 requires an initializer
decomposition declaration cannot be declared %plural{1:'%1'|:with '%1' specifiers}0
cannot decompose this type; 'std::tuple_element<%0>::type' does not name a type
cannot decompose this type; 'std::tuple_size<%0>::value' is not a valid integral constant expression
decomposition declaration template not supported
decomposition declaration cannot be declared with type %0; declared type must be 'auto' or reference to 'auto'
cannot decompose %select{union|non-class, non-array}1 type %2
type %0 decomposes into %3 %plural{1:element|:elements}2, but %select{%plural{0:no|:only %1}1|%1}4 %plural{1:name was|:names were}1 provided
cannot decrement expression of type bool
cannot %select{form pointer to|form reference to|form array of|form function returning|use parentheses when declaring variable with}0 deduced class template specialization type
ambiguous deduction for template arguments of %0
no viable constructor or deduction guide for deduction of template arguments of %0
class template argument deduction for %0 selected a deleted constructor
class template argument deduction for %0 selected an explicit %select{constructor|deduction guide}1 for copy-list-initialization
template %0 has no definition and no %select{|viable }1deduction guides for deduction of template arguments
%select{<error>|function template|variable template|alias template|template template parameter|concept|template}0 %1 requires template arguments; argument deduction only allowed for class templates
deduced non-type template argument does not have the same type as the corresponding template parameter%diff{ ($ vs $)|}0,1
deduced return types are a C++14 extension
typename specifier refers to %select{class template|function template|variable template|alias template|template template parameter|template}0; argument deduction not allowed here
deduced type %1 of deduction guide is not %select{|written as }2a specialization of template %0
deduction guide cannot have a function definition
deduction guide cannot be declared '%0'
cannot specify deduction guide for %select{<error>|function template|variable template|alias template|template template parameter|concept|dependent template name}0 %1
deduction guide declaration without trailing return type
redeclaration of deduction guide
deduction guide cannot be %select{explicitly instantiated|explicitly specialized}0
deduction guide template contains %select{a template parameter|template parameters}0 that cannot be deduced
cannot specify any part of a return type in the declaration of a deduction guide
deduction guide has different access from the corresponding member template
deduction guide must be declared in the same scope as template %q0
exception specifications of %select{return|argument}0 types differ
default template argument in a class template partial specialization
addition of default argument on redeclaration makes this constructor a %select{default|copy|move}0 constructor
default initialization of an object of const type %0%select{| without a user-provided default constructor}1
default member initializer for %0 uses itself
default member initializer for %1 needed within definition of enclosing class %0 outside of member functions
'default' statement not in switch statement
return type of defaulted 'operator<=>' cannot be deduced because three-way comparison for %select{|member|base class}0 %1 has a deduced return type and is not yet defined
deduced return type for defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator must be 'auto', not %1
defaulted member %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator must be const-qualified
%select{<ERROR>|equality|three-way|equality|relational}0 comparison operator is not a friend of %select{|incomplete class }1%2
%select{non-member|member}0 %select{<ERROR>|equality|three-way|equality|relational}1 comparison operator comparison operator must have %select{2|1}0 parameters
invalid parameter type for defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator; found %1, expected %2%select{| or %4}3
parameters for defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator must have the same type%diff{ (found $ vs $)|}1,2
invalid parameter type for non-member defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator; found %1, expected class or reference to a constant class
return type for defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator must be 'bool', not %1
comparison operator template cannot be defaulted
the parameter for an explicitly-defaulted copy assignment operator must be an lvalue reference type
the parameter for this explicitly-defaulted copy %select{constructor|assignment operator}0 is const, but a member or base requires it to be non-const
the parameter for an explicitly-defaulted move %select{constructor|assignment operator}0 may not be const
an explicitly-defaulted %select{|copy |move }0constructor cannot have default arguments
an explicitly-defaulted %select{copy|move}0 assignment operator may not have 'const'%select{, 'constexpr'|}1 or 'volatile' qualifiers
explicitly-defaulted %select{copy|move}0 assignment operator must return %1
an explicitly-defaulted %select{|copy |move }0constructor cannot be variadic
the parameter for an explicitly-defaulted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 may not be volatile
definition of explicitly defaulted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor|function}0
definition of implicitly declared %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor|function}1
delegating constructors are permitted only in C++11
an initializer for a delegating constructor must appear alone
converting delete expression from type %0 to type %1 invokes an explicit conversion function
deleting incomplete class type %0; no conversions to pointer type
cannot delete expression of type %0
deleted definition must be first declaration
attempt to use a deleted function
constructor inherited by %0 from base class %1 is implicitly deleted
'main' is not allowed to be deleted
deleted function %0 cannot override a non-deleted function
typename specifier refers to %select{class template|function template|variable template|alias template|template template parameter|template}0 member in %1; argument deduction not allowed here
no candidate function template was found for dependent friend function template specialization
nested name specifier for a declaration cannot depend on a template parameter
type of specialized non-type template argument depends on a template parameter of the partial specialization
%select{declaration|definition}0 of %select{struct|interface|union|class|enum}1 in a dependent scope
non-type template argument specializes a template parameter with dependent type %0
dereference operator in '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null}0' is only allowed for function parameters
dereference of pointer to incomplete type %0
'objc_designated_initializer' attribute only applies to init methods of interface or class extension declarations
initialization of non-aggregate type %0 with a designated initializer list
designator in initializer for %select{scalar|indivisible sizeless}0 type %1
designator into flexible array member subobject
%select{no_destroy|always_destroy}0 attribute can only be applied to a variable with static or thread storage duration
destroying operator delete can have only an optional size and optional alignment parameter
destructor cannot be declared '%0'
identifier %0 in object destruction expression does not name the type %1 of the object being destroyed
identifier %0 in object destruction expression does not name a type
destructor type %0 in object destruction expression does not match the type %1 of the object being destroyed
expected the class name after '~' to name the enclosing class
identifier %0 after '~' in destructor name does not name a type
destructor must be a non-static member function
destructor cannot be redeclared
destructor cannot have a return type
destructor cannot be declared as a template
destructor cannot be variadic
destructor cannot have any parameters
invalid diagnostic type for 'diagnose_if'; use "error" or "warning" instead
conflicting asm label
declaration of %0 has a different language linkage
conflicting pass_object_size attributes on parameters
virtual function %0 has a different return type %diff{($) than the function it overrides (which has return type $)|than the function it overrides}1,2
dimension expression does not evaluate to a constant unsigned int
@selector expression formed with direct selector %0
attribute %0 cannot appear more than once on a declaration
exception specifications are not allowed beyond a single level of indirection
cannot cast %select{private|protected}2 base class %1 to %0
reference to %select{destructor|pseudo-destructor}0 must be called%select{|; did you mean to call it with no arguments?}1
reimplementation of category %1 for class %0
reimplementation of class %0
base class %0 specified more than once as a direct base class
duplicate case value '%0'
duplicate case value: '%0' and '%1' both equal '%2'
duplicate interface definition for class %0
instance variable is already declared
synthesized properties %0 and %1 both claim instance variable %2
duplicate member %0
duplicate declaration of method %0
property has a previous declaration
multiple vtable pointer authentication policies on %0
dynamic property cannot have instance variable specification
dynamic initialization is not supported for __device__, __constant__, __shared__, and __managed__ variables.
catch-all handler must come last
ISO C requires a named parameter before '...'
only function and template parameters can be parameter packs
scalar initializer cannot be empty
initializer for sizeless type %0 cannot be empty
non-integral type %0 is an invalid underlying type
mode %0 is not supported for enumeration types
enumeration previously declared with %select{non|}0fixed underlying type
enumeration previously declared as %select{un|}0scoped
enumeration redeclared with different underlying type %0 (was %1)
enumerator %0 does not exist in instantiation of %1
enumerator value is not representable in the underlying type %0
enumerator value %0 is not representable in the underlying type %1
the event_t type can only be used with __private address space qualifier
exception specification of %0 uses itself
exception specifications are not allowed in %select{typedefs|type aliases}0
exception specification needed for member of incomplete class %0
exception specification is not available until end of class definition
cannot use '%0' with exceptions disabled
excess elements in %select{array|vector|scalar|union|struct}0 initializer
excess elements in initializer for indivisible sizeless type %0
excess elements in char array initializer
expected an 'allocator' clause inside of the target region; provide an 'allocator' clause or use 'requires' directive with the 'dynamic_allocators' clause
expected an allocator expression inside of the target region; provide an allocator expression or use 'requires' directive with the 'dynamic_allocators' clause
expected a callable expression as %ordinal0 argument to %1, found %2
%0 is not a class%select{ or namespace|, namespace, or enumeration}1
kernel must have void return type
expected pointer to struct as %ordinal0 argument to %1, found %2
partial ordering for explicit instantiation of %0 is ambiguous
explicit instantiation cannot be 'constexpr'
explicit instantiation refers to static data member %q0 that is not an instantiation
explicit instantiation declaration (with 'extern') follows explicit instantiation definition (without 'extern')
explicit instantiation has dependent template arguments
duplicate explicit instantiation of %0
explicit instantiation of %0 in class scope
explicit instantiation cannot be 'inline'
explicit instantiation declaration of %0 with internal linkage
explicit instantiation refers to member function %q0 that is not an instantiation
explicit instantiation of %0 must occur at global scope
explicit instantiation of non-templated type %0
explicit instantiation of %0 does not refer to a function template, variable template, member function, member class, or static data member
explicit instantiation of typedef %0
explicit instantiation of %0 not in a namespace enclosing %1
explicit instantiation declaration requires a name
explicit instantiation cannot have a storage class
explicit instantiation of undefined function template %0
explicit instantiation of undefined %select{member class|member function|static data member}0 %1 of class template %2
explicit instantiation of undefined variable template %q0
explicit instantiation of %q0 must occur in namespace %1
explicit instantiation of %q0 must specify a template argument list
'explicit' can only be applied to a constructor or conversion function
'explicit' can only appear on non-static member functions
'explicit' can only be specified inside the class definition
explicit specialization has extraneous, inconsistent storage class '%select{none|extern|static|__private_extern__|auto|register}0'
anonymous namespaces cannot be exported
export declaration cannot be used in a private module fragment
inline function not defined%select{| before the private module fragment}0
declaration of %0 with internal linkage cannot be exported
cannot export %0 as it is not at namespace scope
export declaration can only be used within a module purview
module partition implementations cannot be exported
using declaration referring to %1 with %select{internal|module|unknown}0 linkage cannot be exported
export declaration appears within anonymous namespace
export declaration appears within another export declaration
%select{case value|enumerator value|non-type template argument|array size|explicit specifier argument|noexcept specifier argument|call to 'size()'|call to 'data()'}0 is not a constant expression
expression is not an %select{integer|integral}0 constant expression
expression is not a string literal
vector component access exceeds type %0
illegal vector component name '%0'
declaration of %1 %select{with C language linkage|in global scope}0 conflicts with declaration %select{in global scope|with C language linkage}0
non-inline external definitions are not permitted in C++ header units
extern declaration of %0 follows non-extern declaration
non-void block does not return a value
fallthrough annotation does not directly precede switch label
fallthrough annotation is outside switch statement
%0 attribute is only allowed on empty statements
field %0 declared as a function
field designator cannot initialize a %select{non-struct, non-union|non-class}0 type %1
field designator %0 does not refer to a non-static data member
field designator %0 does not refer to any field in type %1
field designator %0 does not refer to any field in type %1; did you mean %2?
field has %select{incomplete|sizeless}0 type %1
data member instantiated with function type %0
field may not be qualified with an address space
filter expression has non-integral type %0
declaration of %0 overrides a '%select{final|sealed}1' function
%0 cannot be set as a default pointer attribute
parameter of array type %0 decays to a __single pointer, and will not allow arithmetic
address argument to atomic arithmetic operation must be a pointer to '__unsafe_indexable' pointer (%0 invalid)
atomic operation on '%select{__indexable|__bidi_indexable|__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by}0' pointer is not yet supported
_Atomic on '%select{__indexable|__bidi_indexable|__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by|__terminated_by|end}0' pointer is not yet supported
passing %select{'__counted_by'|'__sized_by'|'__counted_by_or_null'|'__sized_by_or_null'|'__ended_by'|end}0 pointer as __auto_type initializer is not yet supported
parameter '%0' with '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by}1' attribute depending on an indirect count is implicitly read-only and cannot be passed as an indirect argument
arrays with an explicit size decay to counted pointers and cannot also have a count attribute
pointer cannot be '%0' and '__%select{bidi_indexable|indexable}1' at the same time
pointer cannot have count and range at the same time
%select{array|pointer}0 cannot have more than one %select{bound|type|count|end|terminator}1 attribute
cannot apply '__counted_by%select{|_or_null}2' attribute to %0 because %1 has unknown size%select{|; did you mean to use '__sized_by%select{|_or_null}2' instead?}3
cannot reference '%0' after it is changed during consecutive assignments
not allowed to change out parameter used as dependent count expression of other parameter
not allowed to change out parameter with dependent count
assignments to dependent variables should not have side effects between them
external count of a pointer cannot be used with inline assembly
argument of '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by}0' attribute cannot refer to declaration of a different lifetime
argument of '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by}0' attribute cannot refer to declaration from a different scope
initalizer for %select{count|size|'__counted_by' pointer|'__sized_by' pointer|'__counted_by_or_null' pointer|'__sized_by_or_null' pointer|'__ended_by' pointer|end pointer}0 with side effects is not yet supported
compound assignment on dynamic bound pointer type %0 with side effects is not yet supported;instead, use seperate assignment and binary expressions
%select{negative|positive}0 pointer arithmetic on %select{'__counted_by' |'__sized_by' |'__counted_by_or_null' |'__sized_by_or_null' |end |}1pointer%select{||||| that starts the '__ended_by' chain}1 always traps
conflicting '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by|__terminated_by}0' attribute with the previous %select{function|variable}1 declaration
argument of '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null}0' attribute can only reference function with 'const' attribute
argument of function call '%0' in '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null}1' attribute is not a constant expression
end-pointer must be '__single'
variable %0 cannot be used in multiple '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by}1' attributes
Firebloom forbids arithmetic on pointers to types with a flexible array member
flexible array member is initialized without a count
flexible array member is initialized with %0 element%select{|s}2, but count value is initialized to %1
'__unsafe_forge_%select{bidi_indexable|single|terminated_by}0' requires a pointer, array or integer address argument
'__unsafe_forge_bidi_indexable' requires an integer size argument
negative %select{address|size}0 argument to '__unsafe_forge_%select{bidi_indexable|single|terminated_by}1'
function pointers cannot be indexable
pointer with '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by}0' and the argument of the attribute must be defined in the same translation unit
incompatible count expression (%0) vs. (%1) in argument to function
type of %0, %1, is incompatible with parameter of type %2
incompatible dynamic count pointer argument to parameter of type %0
passing%select{| address of}1 %0 referred to by '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null}2' to a parameter that is not referred to by the same attribute
%select{%diff{assigning to $ from incompatible type $|assigning type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1|}2 is an unsafe operation; use '__unsafe_terminated_by_from_indexable()' or '__unsafe_forge_terminated_by()' to perform this conversion
%select{%diff{assigning to $ from incompatible type $|assigning type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1|}2 that adds '__terminated_by' attribute is not allowed
'__terminated_by' pointer converted from a string literal must be NUL-terminated
pointers with incompatible terminators %select{%diff{assigning to $ from incompatible type $|assigning type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1|}2
%select{%diff{assigning to $ from incompatible type $|assigning type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1|}2 requires a linear search for the terminator; use '__terminated_by_to_indexable()' to perform this conversion explicitly
%select{%diff{assigning to $ from incompatible type $|assigning type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1|}2 that discards '__terminated_by' attribute is not allowed
cannot %select{assign to indexable pointer with type %0 from __single pointer to incomplete type %1%select{|; consider declaring pointer '%3' as '__single'}4|pass __single pointer to incomplete type argument %0 when parameter is an indexable pointer %1; consider making the%select{| '%3'}4 parameter '__single'|return __single pointer to incomplete type %0 when return type is an indexable pointer %1; consider making the return type '__single'|convert __single pointer to incomplete type %0 to indexable pointer %1; consider making the destination '__single'|initialize indexable pointer with type %0 from __single pointer to incomplete type %1%select{|; consider declaring pointer '%3' as '__single'}4|send __single to incomplete type %0 to indexable pointer %1; consider making the destination '__single'|cast from __single pointer to incomplete type %0 to indexable pointer type %1}2
incrementing '%0' without updating '%1' always traps
incrementing '%0' always traps
decremented indexable pointer '%0' is out of bounds
array subscript with a negative index on indexable pointer '%0' is out of bounds
%select{|implicitly }0initializing negative %select{count|size}1 for %select{'__counted_by'|'__sized_by'}1 pointer%select{| field}3 %2
cannot initialize %select{'__counted_by'|'__sized_by'|'__counted_by_or_null'|'__sized_by_or_null'}0 pointer field %2 with %select{count|size}1 %3 which is larger than the actual %select{count|size}1 of the field initializer '%4'
bounds attribute '%select{__bidi_indexable|__indexable|__single|__unsafe_indexable}0' cannot be applied to attributed type %1 in this context%select{| due to the surrounding 'typeof' specifier}2
local dependent count decl should be declared side by side to its dependent pointer
attribute %0 is not allowed for local variables with external storage
base of member reference is a null pointer
incompatible pointer types assigning %0 with an expression with mismatching size attributes %1
assignment to %select{%2 |}3'%0' requires corresponding assignment to %select{|%2 }3'%1'; add self assignment '%1 = %1' if the value has not changed
multiple consecutive assignments to a %select{dynamic count|dynamic count pointer|ranged pointer}0 %1 must be simplified; keep only one of the assignments
negative %select{count|size}0 expression
%0 attribute on nested pointer type is only allowed on indirect parameters
%0 is not allowed for nested pointers
cannot extract the %select{lower|upper}0 bound of %1 because %select{it is not a pointer|it has no bounds specification|its bounds are not contained within the pointer}2
assignment to '%0' requires an immediately preceding assignment to '%1' with a wide pointer
local variable %0 must be declared right next to its dependent decl
non-pointer to safe pointer conversion is not allowed with firebloom; use '__unsafe_forge_single' or '__unsafe_forge_bidi_indexable'
array subscript on %select{single|'__terminated_by'}0 pointer '%1' %select{must use a constant index of 0 to be in bounds|is not allowed}0
pointer with bounds cannot be used with inline assembly
Pointer authentication is currently unsupported on indexable pointers
parameter '%0' with '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null}1' attribute depending on an indirect count is implicitly read-only
parameter '%0' %select{with '__ended_by' attribute depending on an indirect end pointer|referred to by an indirect '__ended_by' pointer}1 is implicitly read-only
attribute %0 is only allowed for struct fields or function parameters
pointer arithmetic on single pointer '%0' is out of bounds%select{|; consider adding '__counted_by' to '%2'}1
%0 cannot apply to arrays: use 'counted_by' instead
variable referred to by '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by}0' cannot be pointed to by any other variable; exception is when the variable is passed as a compatible argument to a function
pointer with '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by}0' cannot be pointed to by any other variable; exception is when the variable is passed as a compatible argument to a function
'__terminated_by' attribute cannot be applied to empty arrays
pointee types of the pointer and pointer to terminator arguments must be the same
pointee type of the pointer argument must be an integer or a non-wide pointer
pointer to terminator argument must be a pointer (%0 invalid)
pointer argument must be a safe pointer (%0 invalid)
incomplete array '%0' with '__terminated_by' attribute must be initialized with at least one element
pointer arithmetic on '__terminated_by' pointer '%0' can only increase the value by one
cannot decrement '__terminated_by' pointer '%0'
terminator in array '%0' must be a compile-time constant
array '%0' with '__terminated_by' attribute is initialized with an incorrect terminator (expected: %1; got %2)
terminator value is not a constant expression
pointer argument must be a '__terminated_by' pointer (%0 invalid)
pointer argument must be terminated by %0 (got %1)
array '%0' with '__terminated_by' attribute must be initialized
%select{element|pointee}0 type of %select{array|pointer}0 with '__terminated_by' attribute must be an integer or a non-wide pointer
array '%0' with '__terminated_by' attribute must be initialized with a string literal or an initializer list
'__terminated_by' attribute currently can be applied only to '__single' pointers
'__terminated_by' attribute can be applied to pointers, constant-length arrays or incomplete arrays
%0 inside typedef is only allowed for function type
__typeof__ on an expression of type %0 is not yet supported
conversion from pointer type %0 to a counted pointer of %1 elements never succeeds
conversion from pointer type %0 with pointee of size %1 to sized pointer type with greater size %2 never succeeds
bounds attribute '%select{__bidi_indexable|__indexable|__single|__unsafe_indexable}0' cannot be applied to an undeduced type
%select{%diff{assigning to $ from incompatible type $|assigning type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1|}2 casts away '__unsafe_indexable' qualifier; use '__unsafe_forge_single' or '__unsafe_forge_bidi_indexable' to perform this conversion
taking the address of an incomplete __counted_by array is not yet supported
passing%select{| address of}1 %0 as an indirect parameter; must also pass %2 %select{|or its address }3because the type of %select{%0|%2}4, %5, refers to %select{%2|%0}4
void pointers must use a byte count attribute instead of an item count
first argument to __builtin_call_with_static_chain must not be a block call
first argument to __builtin_call_with_static_chain must not be a builtin call
first argument to __builtin_call_with_static_chain must be a non-member call expression
first argument to __builtin_call_with_static_chain must not be a pseudo-destructor call
first argument to 'va_arg' is of type %0 and not 'va_list'
ARC forbids flexible array members with retainable object type
flexible array member %0 not allowed in otherwise empty %select{struct|interface|union|class|enum}1
flexible array member %0 of type %1 with non-trivial destruction
initialization of flexible array member is not allowed
flexible array requires brace-enclosed initializer
Firebloom forbids passing %0 by copy because it has a flexible array member
flexible array member %0 with type %1 is not at the end of %select{struct|interface|union|class|enum}2
flexible array member %0 in a union is not allowed
flexible array member %0 not allowed in %select{struct|interface|union|class|enum}1 which has a virtual base class
expression not permitted as operand of fold expression
unary fold expression has empty expansion for operator '%0' with no fallback value
instantiating fold expression with %0 arguments exceeded expression nesting limit of %1
binary fold expression has unexpanded parameter packs in both operands
for range declaration must declare a variable
cannot use type %0 as a range
invalid range expression of type %0; did you mean to dereference it with '*'?
cannot use incomplete type %0 as a range
invalid range expression of type %0; no viable '%select{begin|end}1' function available
cannot use type %0 as an iterator
loop variable %0 may not be declared %select{'extern'|'static'|'__private_extern__'|'auto'|'register'|'constexpr'|'thread_local'}1
format attribute cannot specify the implicit this argument as the format string
format argument not a string type
function does not return %0
strftime format attribute requires 3rd parameter to be 0
ISO C++ forbids forward references to 'enum' types
attempting to use the forward class %0 as superclass of %1
explicit qualification required to use member %0 from dependent base class
member %0 used before its declaration
friend declaration of %0 does not match any declaration in %1
friend declaration specifying a default argument must be a definition
friend declaration specifying a default argument must be the only declaration
friend function cannot be defined in a local class
friends cannot be members of the declaring class
'friend' must appear first in a non-function declaration
incomplete result type %0 in function definition
function cannot return %select{array|function}0 type %1
function cannot return qualified void type %0
function declared with %0 attribute was previously declared without the %0 attribute
functions may not be declared with 'cmse_nonsecure_call' attribute
%0 marked 'override' but does not override any member functions
type %0 of function parameter pack does not contain any unexpanded parameter packs
argument must be a function
function template partial specialization is not allowed
function template specialization %0 ambiguously refers to more than one function template; explicitly specify%select{| additional}1 template arguments to identify a particular function template
no function template matches function template specialization %0
weak attribute declared on a __strong type property in GC mode
controlling expression type %0 compatible with %1 generic association types
controlling expression type %0 not compatible with any generic association type
__builtin_get_vtable_pointer requires an argument of%select{| polymorphic}0 class pointer type, but %1 %select{was provided|has no virtual methods}0
__builtin_get_vtable_pointer requires an argument with a complete type, but %0 is incomplete
no getter method for read from property
call to global function %0 not configured
cannot jump from this goto statement to its label
cannot jump from this goto statement to label %0 inside an inline assembly block
half precision constant requires cl_khr_fp16
invalid argument: symbol must be a device-side function or global variable
attribute %0 only applies to %1
attribute %0 only applies to a field or parameter of type '%1'
attribute %0 is unsupported in %select{Pixel|Vertex|Geometry|Hull|Domain|Compute|Library|RayGeneration|Intersection|AnyHit|ClosestHit|Miss|Callable|Mesh|Amplification|Invalid}1 shaders, requires %2
%0 attribute parameters do not match the previous declaration
%0 attribute on entry function does not match the pipeline stage
invalid space specifier '%0' used; expected 'space' followed by an integer, like space1
initializer priorities are not supported in HLSL
missing numthreads attribute for %0 shader entry
semantic annotations must be present for all parameters of an entry function or patch constant function
argument '%select{X|Y|Z}0' to numthreads attribute cannot exceed %1
total number of threads cannot exceed %0
the '%select{&|*|->}0' operator is unsupported in HLSL
%select{pointers|references}0 are unsupported in HLSL
register number should be an integer
invalid resource class specifier '%0' used; expected 'b', 's', 't', or 'u'
type argument of iboutletcollection attribute cannot be a builtin type
invalid type %0 as argument of iboutletcollection attribute
ambiguous conversion from type %0 to an integral or unscoped enumeration type
integral constant expression requires explicit conversion from %0 to %1
integral constant expression has incomplete class type %0
%select{integer|integral}1 constant expression must have %select{integer|integral or unscoped enumeration}1 type, not %0
integer constant expression evaluates to value %0 that cannot be represented in a %1-bit %select{signed|unsigned}2 integer type
a parameter list without types is only allowed in a function definition
illegal operation on Objective-C container subscripting
'%0' declared as array of functions of type %1
'%0' declared as array of references of type %1
'%0' does not point into a class
'%0' declared as a member pointer to a reference of type %1
'%0' declared as a member pointer to void
'%0' declared as a pointer to a reference of type %1
illegal initializer (only variables can be initialized)
illegal initializer type %0
Objective-C message has incomplete result type %0
illegal qualifiers on @catch parameter
%select{anonymous struct|union}0 member %1 has a non-trivial %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}2
imaginary types are not supported
immediate function %0 used before it is defined
implicit conversion from %0 to %1 is not permitted in C++
cannot declare implementation of a class declared with the 'objc_class_stub' attribute
std::nothrow was not found; include <new> before defining a coroutine which uses get_return_object_on_allocation_failure()
initializer for aggregate with no elements requires explicit braces
implicit instantiation of undefined member %0
cannot %select{use builtin operator '<=>'|default 'operator<=>'}1 because type '%0' was not found; include <compare>
%0 type was not found; include <coroutine> before defining a coroutine
this function cannot be a coroutine: %0 is not a class
this function cannot be a coroutine: %q0 has no member named 'promise_type'
cannot deduce type of initializer list because std::initializer_list was not found; include <initializer_list>
static data member of type %0 must be initialized out of line
in-class initializer for static data member of type %0 requires 'constexpr' specifier
non-const static data member must be initialized out of line
in-class initializer for static data member is not a constant expression
static const volatile data member must be initialized out of line
attribute %0 is already applied with different arguments
target exception specification is not superset of source
conversion between pointers to functions with incompatible firebloom attributes
%select{%diff{assigning to $ from incompatible type $|assigning to type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1}2
API notes replacement type %0 has a different size from original type %1
incompatible vector types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2
base class has incomplete type
enumeration %0 is incomplete
%select{|pointer to |reference to }0incomplete type %1 is not allowed in exception specification
member access into incomplete type %0
incomplete type %0 named in nested name specifier
incomplete type in call to object of type %0
incomplete receiver type %0
cannot synthesize property %0 with incomplete type %1
incomplete type %0 where a complete type is required
'@encode' of incomplete type %0
incomplete type %0 used in type trait expression
cannot set vtable pointer authentication on an incomplete type %0
'typeid' of incomplete type %0
inconsistent number of instance variables specified
defaulted declaration of %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 cannot be consteval because implicit definition is not constexpr
defaulted definition of %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 is not constexpr
number of elements must be either one or match the size of the vector
cannot %select{decrement|increment}0 expression of enum type %1
cannot jump from this %select{indirect|asm}0 goto statement to one of its possible targets
indirect goto in function with no address-of-label expressions
cannot deduce type for lambda capture %0 from initializer of type %2
cannot deduce type for lambda capture %0 from initializer list
initializer for lambda capture %0 contains multiple expressions
initializer missing for lambda capture %0
cannot deduce type for lambda capture %1 from %select{parenthesized|nested}0 initializer list
cannot initialize %select{a variable|a parameter|template parameter|return object|statement expression result|an exception object|a member subobject|an array element|a new value|a value|a base class|a constructor delegation|a vector element|a block element|a block element|a complex element|a lambda capture|a compound literal initializer|a related result|a parameter of CF audited function|a structured binding|a member subobject}0 %diff{of type $ with an %select{rvalue|lvalue}2 of type $|with an %select{rvalue|lvalue}2 of incompatible type}1,3%select{|: different classes%diff{ ($ vs $)|}5,6|: different number of parameters (%5 vs %6)|: type mismatch at %ordinal5 parameter%diff{ ($ vs $)|}6,7|: different return type%diff{ ($ vs $)|}5,6|: different qualifiers (%5 vs %6)|: different exception specifications}4
initializer element is not a compile-time constant
cannot create object of function type %0
initialization of incomplete type %0
%select{|non-aggregate }0type %1 cannot be initialized with an initializer list
init methods must return an object pointer type, not %0
initialization of non-aggregate type %0 with an initializer list
cannot initialize Objective-C class type %0
can only use 'init_priority' attribute on file-scope definitions of objects of class type
reference member of type %0 uninitialized
initializer would partially override prior initialization of object of type %1 with non-trivial destruction
initializer-string for char array is too long, array size is %0 but initializer has size %1 (including the null terminating character)
inline declaration of %0 follows non-inline definition
inline declaration of %0 not allowed in block scope
'main' is not allowed to be declared inline
non-inline namespace cannot be reopened as inline
cannot declare the namespace 'std' to be inline
'inline' can only appear on functions%select{| and non-local variables}0
invalid block pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2
integer sequences must have integral element type
integer sequences must have non-negative sequence length
%plural{[0,2]:must use a qualified name when declaring|3:cannot declare}0 a %select{constructor|destructor|conversion operator|deduction guide}0 as a friend
invalid address discrimination mode %0
invalid use of a cast in a inline asm context requiring an lvalue: remove the cast or build with -fheinous-gnu-extensions
value '%0' out of range for constraint '%1'
invalid reinterpretation: sizes of %0 and %1 must match
invalid authentication key %0
interface type cannot inherit from %select{struct|non-public interface|class}0 %1
invalid or misplaced branch protection specification '%0'
collection element of type %0 is not an Objective-C object
'_Complex %0' is invalid
call to %select{immediate|consteval}1 function %q0 is not a constant expression
%0 cannot be declared consteval
cannot take address of %select{immediate|consteval}2 %select{function|call operator of}1 %0 outside of an immediate invocation
%select{function parameter|typedef}0 cannot be %select{<ERROR>|constexpr|consteval|constinit}1
non-static data member cannot be constexpr%select{; did you intend to make it %select{const|static}0?|}1
constexpr variable declaration must be a definition
invalid conversion between ext-vector type %0 and %1
conversion between matrix type %0 and incompatible type %1 is not allowed
conversion between matrix types%diff{ $ and $|}0,1 of different size is not allowed
invalid conversion between vector type %0 and integer type %1 of different size
invalid conversion between vector type %0 and scalar type %1
invalid conversion between vector type%diff{ $ and $|}0,1 of different size
invalid cpu name for builtin
invalid option '%0' for %select{cpu_specific|cpu_dispatch}1
invalid cpu feature string for builtin
invalid custom discrimination
count expression %select{on struct field|in function declaration}0 may only reference %select{other fields of the same struct|parameters of that function}0
cannot use %0 on union fields
cannot combine with previous '%0' declaration specifier
invalid declaration specifier in template non-type parameter
definition or redeclaration of %0 cannot name the global scope
definition or redeclaration of %0 not allowed inside a block
definition or redeclaration of %0 not allowed inside a function
cannot define or redeclare %0 here because namespace %1 does not enclose namespace %2
invalid extra discrimination selection %0
cannot create a non-constant pointer to member function
invalid use of incomplete type %0
mask type size must be between 1-byte and 8-bytes
invalid use of member %0 in static member function
%0 is an invalid name for a module
incompatible constant for this __builtin_neon function
invalid use of non-static data member %0
%0 is not a valid literal type for NSNumber
invalid PCS type
'__pixel' must be preceded by '__vector'.  '%0' declaration specifier not allowed here
%0 is not a valid property name (accessing an object of type %1)
invalid protocol qualifiers on non-ObjC type
'%0' qualifier is not allowed on a constructor
'%0' qualifier is not allowed on a destructor
%select{non-member function|static member function|deduction guide}0 %select{of type %2 |}1cannot have '%3' qualifier
receiver type %0 is not an Objective-C class
'super' is only valid in a method body
function %0 can only be directly called
'_Sat' specifier is only valid on '_Fract' or '_Accum', not '%0'
'%0' cannot be signed or unsigned
invalid use of '__super', this keyword can only be used inside class or member function scope
invalid use of 'this' outside of a non-static member function
'%0' is only allowed on variable declarations
the %0 type cannot be used to declare a program scope variable
invalid application of __builtin_xnu_type_%select{signature|summary}0 to %select{variable array}1 type %2
an array type is not allowed here
a function type is not allowed here
type %2 of %select{explicit instantiation|explicit specialization|partial specialization|redeclaration}0 of %1 does not match expected type %3
cannot use '%0' with '__vector bool'
use of '__int128' with '__vector bool' requires VSX support enabled (on POWER10 or later)
cannot combine with previous '%0' declaration specifier. '__vector' must be first
use of 'double' with '__vector' requires VSX support to be enabled (available on POWER7 or later)
cannot use 'float' with '__vector'
use of '__int128' with '__vector' requires extended Altivec support (available on POWER8 or later)
cannot use 'long' with '__vector'
cannot use 'long double' with '__vector'
use of 'long long' with '__vector' requires VSX support (available on POWER7 or later) to be enabled
'%select{|short|long|long long}0 %1' is invalid
property %0 not found on object of type %1; did you mean to access instance variable %2?
property %0 attempting to use instance variable %1 declared in super class %2
instance variables cannot be of reference type
instance variable %0 accessed in class method
kernel call to non-global function %0
kernel function %0 must be a free function or static member function
kernel function type %0 must have void return type
pointer arguments to kernel functions must reside in '__global', '__constant' or '__local' address space
unnamed variable cannot be implicitly captured in a lambda expression
lambda expression in default argument cannot capture any entity
variable %0 with flexible array member cannot be captured in a lambda expression
cannot assign to a variable captured by copy in a non-mutable lambda
variable %0 cannot be implicitly captured in a lambda with no capture-default specified
a lambda expression may not appear inside of a constant expression
a lambda expression cannot appear in this context
incomplete result type %0 in lambda expression
cannot deduce lambda return type from initializer list
lambda expression in an unevaluated operand
unknown linkage language
cannot apply asm label to %select{variable|function}0 after its first use
'lifetimebound' attribute cannot be applied to a %select{constructor|destructor}0
'lifetimebound' attribute cannot be applied; %select{static |non-}0member function has no implicit object parameter
cannot initialize %select{non-class|reference}0 type %1 with a parenthesized initializer list
non-template literal operator must have one or two parameters
literal operator cannot have a default argument
literal operator must have C++ linkage
non-namespace scope '%0' cannot have a literal operator member
parameter of literal operator must have type 'unsigned long long', 'long double', 'char', 'wchar_t', 'char16_t', 'char32_t', or 'const char *'
literal operator %0 must be in a namespace or global scope
invalid literal operator parameter type %0, did you mean %1?
template parameter list for literal operator must be either 'char...' or 'typename T, T...'
literal operator template cannot have any parameters
second argument to __builtin_load_member_function_pointer must be the address of a C++ member function: for example '&Foo::func', or null
first argument to __builtin_load_member_function_pointer must have C++ class type
variable with 'loader_uninitialized' attribute cannot have an initializer
variable %0 cannot be declared both 'extern' and with the 'loader_uninitialized' attribute
redeclaration cannot add 'loader_uninitialized' attribute
variable with 'loader_uninitialized' attribute must have a trivial default constructor
'__local' variable cannot have an initializer
this builtin requires target: loongarch32
this builtin requires target: loongarch64
%select{non-const|volatile}0 lvalue reference to type %1 cannot bind to an initializer list temporary
%select{non-const|volatile}0 lvalue reference %diff{to type $ cannot bind to a temporary of type $|cannot bind to incompatible temporary}1,2
%select{non-const|volatile}0 lvalue reference %diff{to type $ cannot bind to a value of unrelated type $|cannot bind to a value of unrelated type}1,2
rvalue reference %diff{to type $ cannot bind to lvalue of type $|cannot bind to incompatible lvalue}0,1
%select{unknown|unsupported}0 machine mode %1
%select{first|second|third|fourth}0 parameter of 'main' (%select{argument count|argument array|environment|platform-specific data}0) must be of type %1
main cannot be declared as global variable
'main' must return 'int'
too many parameters (%0) for 'main': must be 0, 2, or 3
%0 cannot be a template
'%select{make_unsigned|make_signed}0' is only compatible with non-%select{bool|_BitInt(1)}1 integers and enum types, but was given %2%select{| whose underlying type is %4}3
std::coroutine_handle isn't a class template
std::coroutine_traits isn't a class template
std::initializer_list must be a class template with a single type parameter
std::nothrow must be a valid variable declaration
single subscript expressions are not allowed for matrix values
matrix %select{row|column}0 index is not an integer
matrix %select{row|column}0 index is outside the allowed range [0, %1)
matrix row and column subscripts cannot be separated by any expression
comma expressions are not allowed as indices in matrix subscript expressions
non-void block does not return a value in all control paths
member initializer %0 does not name a non-static data member or base class
initializer %0 does not name a non-static data member or base class; did you mean the %select{base class|member}1 %2?
call to non-static member function without an object argument
out-of-line %select{declaration|definition}2 of %0 does not match any declaration in %1
out-of-line %select{declaration|definition}2 of %0 does not match any declaration in %1; did you mean %3?
return type of out-of-line definition of %q0 differs from that in the declaration
out-of-line definition of %0 from class %1 without definition
extra qualification on member %0
'this' argument to member function %0 has type %1, but function is not marked %select{const|restrict|const or restrict|volatile|const or volatile|volatile or restrict|const, volatile, or restrict}2
'this' argument to member function %0 is an %select{lvalue|rvalue}1, but function has %select{non-const lvalue|rvalue}2 ref-qualifier
cannot initialize object parameter of type %0 with an expression of type %1
initializer on function does not look like a pure-specifier
member %0 has the same name as its class
no member %0 in %1; it has not yet been instantiated
non-friend class member %0 cannot have a qualified name
class member cannot be redeclared
multiple overloads of %0 instantiate to the same signature %1
base of member reference is a function; perhaps you meant to call it%select{| with no arguments}0?
member %0 cannot have template arguments
member pointer refers into non-class type %0
conversion from pointer to member of class %0 to pointer to member of class %1 via virtual base %2 is not allowed
member pointer has incomplete base type %0
at least one argument of MTE builtin function must be a pointer (%0, %1 invalid)
%0 argument of MTE builtin function must be an integer type (%1 invalid)
%0 argument of MTE builtin function must be a pointer (%1 invalid)
%0 argument of MTE builtin function must be a null or a pointer (%1 invalid)
messaging a Class with a method that is possibly direct
messaging super with a direct method
messaging unqualified id with a method that is possibly direct
kernel functions cannot be class members
%select{instance|class}1 method %0 not found ; did you mean %2?
this builtin requires 'dsp' ASE, please use -mdsp
this builtin requires 'dsp r2' ASE, please use -mdspr2
this builtin requires 'msa' ASE, please use -mmsa
derived class must specify the same code segment as its base classes
overriding virtual function must specify the same code segment as its overridden function
exception specification in declaration does not match previous declaration
exception specification in explicit instantiation does not match instantiated one
inheritance model does not match %select{definition|previous declaration}0
declaration of %0 in %select{the global module|module %2}1 follows declaration in %select{the global module|module %4}3
uuid does not match previous declaration
visibility does not match previous declaration
instance variables may not be placed in %select{categories|class extension}0
missing actual type specifier for pipe
missing state for %0
%select{string|numeric}0 literal must be prefixed by '@'
missing custom discrimination
%select{constructor for %1 must explicitly initialize the|implicit default constructor for %1 must explicitly initialize the|cannot use constructor inherited from base class %4;}0 %select{base class|member}2 %3 %select{which|which|of %1}0 does not have a default constructor
%0 is missing exception specification '%1'
missing context for method declaration
missing '[' at start of message send expression
missing context for property implementation declaration
property implementation in a category with no category declaration
synthesized property %0 must either be named the same as a compatible instance variable or must explicitly name an instance variable
a type specifier is required for all declarations
cannot use %select{C++ 'try'|Objective-C '@try'}0 in the same function as SEH '__try'
mode attribute only supported for integer and floating-point types
type of machine mode does not match type of base type
'module' declaration found while building header unit
'module' declaration found while building module from module map
module declaration must occur at the start of the translation unit
missing 'export module' declaration in module interface unit
missing 'module' declaration at end of global module fragment introduced here
@import of module '%0' in implementation of '%1'; use #import
import of module '%0' appears within %1
missing 'export' specifier in module declaration while building module interface
definition of module '%0' is not available; use -fmodule-file= to specify path to precompiled module interface
%select{local variable|parameter|typedef}0 %1 cannot be declared __module_private__
local %select{struct|interface|union|class|enum}0 cannot be declared __module_private__
%select{template|partial|member}0 specialization cannot be declared __module_private__
translation unit contains multiple module declarations
redefinition of module '%0'
import of module '%0' appears within same top-level module '%1'
import of module '%0' appears within its own %select{interface|implementation}1
%select{declaration|definition|default argument|explicit specialization|partial specialization}0 of %1 must be imported from module '%2' before it is required
%select{missing '#include'|missing '#include %3'}2; %select{||default argument of |explicit specialization of |partial specialization of }0%1 must be %select{declared|defined|defined|declared|declared}0 before it is used
%select{declaration|definition|default argument|explicit specialization|partial specialization}0 of %1 must be imported from one of the following modules before it is required:%2
'__leave' statement not in __try block
'__builtin_ms_va_start' used in System V ABI function
arguments to __annotation must be wide string constants
multiple initializations given for base %0
multiple coupled declarations in a firebloom attribute are not supported yet
multiple default labels in one switch
virtual function %q0 has more than one final overrider in %1
multiple initializations given for non-static member %0
initializing multiple members of union
function declaration cannot become a multiversioned function after first usage
multiversioned function declaration has a different %select{calling convention|return type|constexpr specification|inline specification|linkage|language linkage}0
attribute '%select{|target|cpu_specific|cpu_dispatch|target_clones|target_version}0' multiversioning cannot be combined with attribute %1
attribute '%select{|target|cpu_specific|cpu_dispatch|target_clones|target_version}0' multiversioned functions do not yet support %select{function templates|virtual functions|deduced return types|constructors|destructors|deleted functions|defaulted functions|constexpr functions|consteval function|lambdas}1
multiversioned function redeclarations require identical target attributes
multiversioned function must have a prototype
'main' cannot be a multiversioned function
function multiversioning is not supported on the current target
function declaration is missing %select{'target'|'cpu_specific' or 'cpu_dispatch'|'target_version'}0 attribute in a multiversioned function
multiversioning attributes cannot be combined
cannot perform a tail call to function%select{| %1}0 because it uses an incompatible calling convention
%0 attribute cannot be used from %select{a block|an Objective-C function|this context}1
%select{non-member|static member|non-static member}0 function cannot perform a tail call to %select{non-member|static member|non-static member|pointer-to-member}1 function%select{| %3}2
cannot perform a tail call to function%select{| %1}0 because its signature is incompatible with the calling function
%0 attribute requires that the return value is the result of a function call
%0 attribute requires that both caller and callee functions have a prototype
tail call requires that the return value, all parameters, and any temporaries created by the expression are trivially destructible
%0 attribute may not be used with variadic functions
cannot perform a tail call from this return statement
cannot perform a tail call %select{from|to}0 a %select{constructor|destructor}1
'mutable' and 'const' cannot be mixed
'mutable' cannot be applied to functions
'mutable' can only be applied to member variables
'mutable' cannot be applied to references
no matching %0 function for non-allocating placement new expression; include <new>
you need to include <typeinfo> before using the 'typeid' operator
%select{%diff{assigning to $ from $|assigning to incompatible nested pointer type}0,1|%diff{passing $ to parameter of incompatible nested pointer type $|passing to parameter of incompatible nested pointer type}0,1|%diff{returning $ from a function with result of incompatible nested pointer type $|returning from function with return of incompatible nested pointer type}0,1|%diff{converting $ to incompatible nested pointer type $|converting between incompatible nested pointer types}0,1|%diff{initializing $ with an expression of incompatible nested pointer type $|initializing with expression of incompatible nested pointer type}0,1|%diff{sending $ to parameter of incompatible nested pointer type $|sending to parameter of incompatible nested pointer type}0,1|%diff{casting $ to incompatible nested pointer type $|casting between incompatible nested pointer types}0,1}2; use explicit cast to perform this conversion
lookup of %0 in member access expression is ambiguous
%0 cannot appear before '::' because it is not a class%select{ or namespace|, namespace, or enumeration}1; did you mean ':'?
type %0 cannot be used prior to '::' because it has no members
%select{call to non-static member function|use of non-static data member}0 %2 of %1 from nested type %3
%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers in nested pointer types
nested redefinition of %0
'abi_tag' %0 missing in original declaration
array 'new' cannot have initialization arguments
only the first dimension of an allocated array may have dynamic size
cannot allocate array of 'auto'
cannot determine allocated array size from initializer
allocation of %select{incomplete|sizeless}0 type %1
no %select{getter|setter}0 defined for property %1
invalid use of '__super', %0 has no base classes
declaration does not declare anything
cannot specify a default vtable pointer authentication %select{key|address discrimination mode|discriminator}0 with no default set
use of dynamic_cast requires -frtti
no matching function found in local scope
no matching function %0 found in local scope; did you mean %3?
no member named %0 in %1
no member named %0 in %1; did you mean to use '->' instead of '.'?
no member named %0 in %1; did you mean %select{|simply }2%3?
no template named %0 in %1
no template named %0 in %1; did you mean %select{|simply }2%3?
cannot find interface declaration for %0
expression is not assignable
no suitable member %0 in %1
no @interface declaration found in class messaging of %0
no template named %0
no template named %0; did you mean %1?
use of typeid requires -frtti
no viable destructor found for class %0
a getter method is needed to perform a compound assignment on a property
no getter method %1 for %select{increment|decrement}0 of property
non-ASM statement in naked function is not supported
atomic constraint must be of type 'bool' (found %0)
anonymous non-C-compatible type given name for linkage purposes by %select{typedef|alias}0 declaration after its linkage was computed; add a tag name here to establish linkage prior to definition
substitution into constraint expression resulted in a non-constant expression
non-consteval function %0 cannot override a consteval function
non-deleted function %0 cannot override a deleted function
a randomized struct can only be initialized with a designated initializer
non-extern declaration of %0 follows extern declaration
defaulting %select{this %select{<ERROR>|equality|three-way|equality|relational}1 comparison operator|the corresponding implicit 'operator==' for this defaulted 'operator<=>'}0 would delete it after its first declaration
defaulting this %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator is not allowed because it was already declared outside the class
declaration of non-local variable in 'for' loop
cannot set vtable pointer authentication on monomorphic type %0
non-static declaration of %0 follows static declaration
member %0 of %1 is not a template; did you mean %select{|simply }2%3?
%0 does not name a template but is followed by template arguments
%0 does not name a template but is followed by template arguments; did you mean %1?
non-thread-local declaration of %0 follows thread-local declaration
cannot set vtable pointer authentication on %0 which is a subclass of polymorphic type %1
cannot %select{use type %1 for a function/method parameter|use type %1 for function/method return|default-initialize an object of type %1|declare an automatic variable of type %1|copy-initialize an object of type %1|assign to a variable of type %1|construct an automatic compound literal of type %1|capture a variable of type %1|cannot use volatile type %1 where it causes an lvalue-to-rvalue conversion}3 since it %select{contains|is}2 a union that is non-trivial to %select{default-initialize|destruct|copy}0
template argument / label address difference / what did you expect?
non-type template argument refers to subobject '%0'
sorry, non-type template argument of type %0 is not yet supported
qualified name refers into a specialization of %select{function|variable}0 template %1
non-type template parameter %0 with type %1 has incompatible initializer of type %2
non-variable declaration in 'for' loop
%0 is not virtual and cannot be declared pure
block pointer to non-function type is invalid
non-static data member defined out-of-line
address argument to nontemporal builtin must be a pointer (%0 invalid)
address argument to nontemporal builtin must be a pointer to integer, float, pointer, or a vector of such types (%0 invalid)
block declared 'noreturn' should not return
lambda declared 'noreturn' should not return
'_Noreturn' can only appear on functions
%select{assignment to readonly property|no setter method %1 for assignment to property}0
%select{%select{increment|decrement}1 of readonly property|no setter method %2 for %select{increment|decrement}1 of property}0
cannot specialize a %select{dependent template|template template parameter}0
type %0 is not a direct or virtual base of %1
call to function %0 that is neither visible in the template definition nor found by argument-dependent lookup
anonymous bit-field has non-integral type %0
bit-field %0 has non-integral type %1
no %select{struct|interface|union|class|enum}0 named %1 in %2
%0 attribute only applies to %select{Objective-C object|pointer|pointer-to-CF-pointer}1 parameters
overriding method has mismatched ns_consumed attribute on its parameter
domain argument %select{|%1 }0does not refer to global constant
domain argument %0 does not point to an NSString or CFString constant
'NSObject' attribute is for pointer types only
overriding method has mismatched ns_returns_%select{not_retained|retained}0 attributes
nullability keyword %0 cannot be applied to multi-level pointer type %1
nullability specifier %0 cannot be applied to non-pointer type %1
cannot cast an object of type %select{'nullptr_t' to %1|%1 to 'nullptr_t'}0
array of interface %0 is invalid (probably should be an array of pointers)
parameter of %0 attribute must be a single name of an Objective-C %select{class|protocol}1
attribute %0 can only be applied to @protocol definitions, not forward declarations
parameter of %0 attribute must be 'id' when used on a typedef
'objc_bridge(id)' is only allowed on structs and typedefs of void pointers
could not find Objective-C class %0 to convert %1 to %2
%0 must be name of an Objective-C class to be able to convert %1 to %2
%0 must be explicitly converted to %1; use %select{%objcclass2|%objcinstance2}3 method for this conversion
CF object of type %0 is bridged to %1, which is not an Objective-C class
Objective-C declarations may only appear in global scope
%select{|direct }0%select{method|property}1 declaration conflicts with previous %select{|direct }2declaration of %select{method|property}1 %3
direct property cannot be @dynamic
direct method was declared in %select{the primary interface|an extension|a category}0 but is implemented in %select{the primary interface|a category|a different category}1
direct method implementation was previously declared not direct
methods that %select{override superclass methods|implement protocol requirements}0 cannot be direct
'objc_direct' attribute cannot be applied to %select{methods|properties}0 declared in an Objective-C protocol
%select{category %1|class extension}0 cannot conform to protocol %2 because of direct members declared in interface %3
cannot use '%0' with Objective-C exceptions disabled
initialization statement is not supported when iterating over Objective-C collection
illegal type %0 used in a boxed expression
incomplete type %0 used in a boxed expression
Objective-C index expression has incomplete class type %0
method for accessing %select{dictionary|array}1 element must have Objective-C object return type instead of %0
'__kindof' specifier cannot be applied to non-object type %0
'__kindof' type specifier must precede the declarator
literal construction method %0 has incompatible signature
%select{an array|a dictionary|a numeric literal|a boxed expression|}0 literal can only be used at file scope if %select{its contents are all also constant literals|its contents are all also constant literals and its keys are string literals|constant|constant}0
%0 %select{parameter|return}1 type is unsupported; support for vector types for this target is introduced in %2
indexing expression is invalid because subscript type %0 has multiple type conversion functions
cannot use a protocol declared 'objc_non_runtime_protocol' in a @protocol expression
non-trivially copyable type %0 cannot be used in a boxed expression
ObjectiveC object of type %0 is bridged to %1, which is not valid CF object
cannot assign to class object (%0 invalid)
cannot catch an Objective-C object by value
cannot override a method that is declared direct by a superclass
%select{extension|category}0 of non-parameterized class %1 cannot have type parameters
forward declaration of non-parameterized class %0 cannot have type parameters
class %0 previously declared with type parameters
objc_precise_lifetime only applies to retainable types; type here is %0
property attributes '%0' and '%1' are mutually exclusive
property with '%0' attribute must be of object type
objc_root_class attribute may only be specified on a root class declaration
cannot implement a category for class %0 that is only visible via the Objective-C runtime
cannot implement subclass %0 of a superclass %1 that is only visible via the Objective-C runtime
%select{dictionary|array}1 subscript base type %0 is not an Objective-C object
method object parameter type %0 is not object type
method index parameter type %0 is not integral type
method key parameter type %0 is not object type
expected method to %select{read|write}1 %select{dictionary|array}2 element not found on object of type %0
cannot assign to this %select{dictionary|array}1 because assigning method's 2nd parameter of type %0 is not an Objective-C pointer type
indexing expression is invalid because subscript type %0 is not an Objective-C pointer
indexing expression is invalid because subscript type %0 is not an integral or Objective-C pointer type
@synchronized requires an Objective-C object type (%0 invalid)
@throw requires an Objective-C object type (%0 invalid)
type argument %0 does not satisfy the bound (%1) of type parameter %2
type argument %0 cannot explicitly specify nullability
no type or protocol named %0
type argument %0 must be a pointer (requires a '*')
type argument %0 is neither an Objective-C object nor a block type
type argument %0 cannot be qualified with '%1'
angle brackets contain both a %select{type|protocol}0 (%1) and a %select{protocol|type}0 (%2)
type arguments cannot be applied to non-class type %0
type arguments cannot be applied to non-parameterized class %0
type arguments cannot be applied to already-specialized class type %0
too %select{many|few}0 type arguments for class %1 (have %2, expected %3)
%select{forward class declaration|class definition|category|extension}0 has too %select{few|many}1 type parameters (expected %2, have %3)
type bound %0 for type parameter %1 conflicts with %select{implicit|previous}2 bound %3%select{for type parameter %5|}4
type parameter %0 bound %1 cannot explicitly specify nullability
missing type bound %0 for type parameter %1 in %select{@interface|@class}2
missing '*' in type bound %0 for type parameter %1
type bound %0 for type parameter %1 is not an Objective-C pointer type
type bound %1 for type parameter %0 cannot be qualified with '%2'
redeclaration of type parameter %0
%select{in|co|contra}0variant type parameter %1 conflicts with previous %select{in|co|contra}2variant type parameter %3
cannot declare variable inside @interface or @protocol
field %0 with variable sized type %1 is not at the end of class
interface type %1 cannot be %select{returned|passed}0 by value; did you forget * in %1?
offsetof requires array type, %0 invalid
cannot compute offset of bit-field %0
invalid application of 'offsetof' to a field of a virtual base
offsetof of incomplete type %0
offsetof requires struct, union, or class type, %0 invalid
'adjust_arg' argument %0 used in multiple clauses
argument of aligned clause should be array%select{ or pointer|, pointer, reference to array or reference to pointer}1, not %0
allocator must be specified in the 'uses_allocators' clause
allocators used in 'uses_allocators' clause cannot appear in other data-sharing or data-mapping attribute clauses
ambiguous conversion from type %0 to an integral or unscoped enumeration type
'append_args' is not allowed with varargs functions
expected pointer, array, reference to pointer, or reference to array in 'is_device_ptr clause'
OpenMP array section is not allowed here
OpenMP array shaping operation is not allowed here
expected at least one 'to' clause or 'from' clause specified to '#pragma omp target update'
the statement for 'atomic capture' must be a compound statement of form '{v = x; x binop= expr;}', '{x binop= expr; v = x;}', '{v = x; x = x binop expr;}', '{v = x; x = expr binop x;}', '{x = x binop expr; v = x;}', '{x = expr binop x; v = x;}' or '{v = x; x = expr;}', '{v = x; x++;}', '{v = x; ++x;}', '{++x; v = x;}', '{x++; v = x;}', '{v = x; x--;}', '{v = x; --x;}', '{--x; v = x;}', '{x--; v = x;}' where x is an lvalue expression with scalar type
the statement for 'atomic capture' must be an expression statement of form 'v = ++x;', 'v = --x;', 'v = x++;', 'v = x--;', 'v = x binop= expr;', 'v = x = x binop expr' or 'v = x = expr binop x', where x and v are both lvalue expressions with scalar type
the statement for 'atomic compare' must be a compound statement of form '{x = expr ordop x ? expr : x;}', '{x = x ordop expr? expr : x;}', '{x = x == e ? d : x;}', '{x = e == x ? d : x;}', or 'if(expr ordop x) {x = expr;}', 'if(x ordop expr) {x = expr;}', 'if(x == e) {x = d;}', 'if(e == x) {x = d;}' where 'x' is an lvalue expression with scalar type, 'expr', 'e', and 'd' are expressions with scalar type, and 'ordop' is one of '<' or '>'.
the statement for 'atomic compare capture' must be a compound statement of form '{v = x; cond-up-stmt}', ''{cond-up-stmt v = x;}', '{if(x == e) {x = d;} else {v = x;}}', '{r = x == e; if(r) {x = d;}}', or '{r = x == e; if(r) {x = d;} else {v = x;}}', where 'cond-update-stmt' can have one of the following forms: 'if(expr ordop x) {x = expr;}', 'if(x ordop expr) {x = expr;}', 'if(x == e) {x = d;}', or 'if(e == x) {x = d;}' where 'x', 'r', and 'v' are lvalue expressions with scalar type, 'expr', 'e', and 'd' are expressions with scalar type, and 'ordop' is one of '<' or '>'.
directive '#pragma omp atomic%select{ %0|}1' cannot be used with '%2' clause
the statement for 'atomic' must be an expression statement of form '++x;', '--x;', 'x++;', 'x--;', 'x binop= expr;', 'x = x binop expr' or 'x = expr binop x', where x is an lvalue expression with scalar type
the statement for 'atomic read' must be an expression statement of form 'v = x;', where v and x are both lvalue expressions with scalar type
directive '#pragma omp atomic' cannot contain more than one 'read', 'write', 'update', 'capture', or 'compare' clause
the statement for 'atomic update' must be an expression statement of form '++x;', '--x;', 'x++;', 'x--;', 'x binop= expr;', 'x = x binop expr' or 'x = expr binop x', where x is an lvalue expression with scalar type
the statement for 'atomic write' must be an expression statement of form 'x = expr;', where x is a lvalue expression with scalar type
bit fields cannot be used to specify storage in a '%0' clause
the host cannot update a declare target variable that is not externally visible.
arguments of OpenMP clause '%0' with bitwise operators cannot be of floating type
arguments of OpenMP clause '%0' for 'min' or 'max' must be of %select{scalar|arithmetic}1 type
'%0' clause requires 'dispatch' context selector
'%0' and '%1' clause are mutually exclusive and may not appear on the same directive
const-qualified list item cannot be %0
const-qualified variable without mutable fields cannot be %0
const-qualified variable cannot be %0
constructs with the same name must have a 'hint' clause with the same value
redefinition of user-defined mapper for type %0 with name %1
only variable %0 is allowed in map clauses of this 'omp declare mapper' directive
redefinition of user-defined reduction for type %0
%0 must not appear in both clauses 'to' and 'link'
function with '#pragma omp declare variant' has a different %select{calling convention|return type|constexpr specification|inline specification|storage class|linkage}0
'#pragma omp declare variant' does not support %select{function templates|virtual functions|deduced return types|constructors|destructors|deleted functions|defaulted functions|constexpr functions|consteval function}0
'#pragma omp declare variant' is not compatible with any target-specific attributes
variant in '#pragma omp declare variant' with type %0 is incompatible with type %1%select{| with appended arguments}2
function with '#pragma omp declare variant' must have a prototype when 'append_args' is used
variant in '#pragma omp declare variant' is the same as the base function
the user condition in the OpenMP context selector needs to be constant; %0 is not
variable %0 must have explicitly specified data sharing attributes, data mapping attributes, or in an is_device_ptr clause
'%0' clauses cannot be mixed with '%1' clause
expected iterator specification as depend modifier
expected%select{| %1}0 loop iteration variable
expected '+' or '-' operation
depend modifier cannot be used with 'sink' or 'source' depend type
unexpected expression: number of expressions is larger than the number of associated loops
zero-length array section is not allowed in 'depend' clause
expected depobj expression
exactly one of 'depend', 'destroy', or 'update' clauses is expected
Device clause with ancestor device-modifier used without specifying 'requires reverse_offload'
'device_type(%0)' does not match previously specified 'device_type(%1)' for the same declaration
'%0' region encountered before requires directive with '%1' clause
statement after '#pragma omp dispatch' must be a direct call to a target function or an assignment to one
same map type modifier has been specified more than once
same motion modifier has been specified more than once
expected access to data field
expected addressable lvalue expression, array element%select{ or array section|, array section or array shaping expression}0%select{| of non 'omp_depend_t' type}1
expected constant sized array of 'omp_alloctrait_t' elements, not %0
expected variable name as a base of the array %select{subscript|section}0
expected a reference to an integer-typed parameter
expected expression containing only member accesses and/or array sections based on named variables
expected lvalue expression%select{ of 'omp_depend_t' type, not %1|}0
expected one of the predefined allocators for the variables with the static storage: 'omp_default_mem_alloc', 'omp_large_cap_mem_alloc', 'omp_const_mem_alloc', 'omp_high_bw_mem_alloc', 'omp_low_lat_mem_alloc', 'omp_cgroup_mem_alloc', 'omp_pteam_mem_alloc' or 'omp_thread_mem_alloc'
the referenced item is not found in any private clause on the same directive
expected a reference to a parameter specified in a 'uniform' clause
%0 is not a global variable, static local variable or static data member
%0 is not a global variable, static local variable or static data member; did you mean %1
expected variable name%select{| or data member of current class}0
expected variable name%select{|, data member of current class}0, array element or array section
expected variable%select{| or static data member|, static data member, or non-static data member of current class}0 of type '%1'
expression requires explicit conversion from %0 to %1
a firstprivate variable with incomplete type %0
'flush' directive with memory order clause '%0' cannot have the list
'#pragma omp declare %select{simd|variant}0' can only be applied to functions
function name is not allowed in 'link' clause
arguments of '#pragma omp %0' must have %select{global storage|static storage duration}1
the name of the construct must be specified in presence of 'hint' clause
'%0' type not found; include <omp.h>
the list item must appear in 'reduction' clause with the 'inscan' modifier of the parent directive
expression has incomplete class type %0
expected 'reduction' clause with the 'inscan' modifier
instantiation of '%0' not supported yet
'depend' clause requires the 'targetsync' interop type
prefer_list item must be a string literal or constant integral expression
'omp_interop_t' must be defined when 'append_args' clause is used; include <omp.h>
interop variable %0 used in multiple action clauses
expected%select{| non-const}0 variable of type 'omp_interop_t'
interop variable must be of type 'omp_interop_t'
invalid 'this' expression on 'map' clause
%select{map type '%1' is not allowed|map type must be specified}0 for '#pragma omp %2'
map type modifier '%0' is not allowed for '#pragma omp %1'
cannot find a valid user-defined mapper for type %0 with name %1
'#pragma omp %0' directive must appear only in file scope
%0 used in declare target directive is not a variable or a function name
expected loop invariant expression
expected loop invariant expression or '<invariant1> * %0 + <invariant2>' kind of expression
expected integral or pointer type as the iterator-type, not %0
iterator step expression %0 evaluates to 0
iterator step expression %0 is not the integral expression
OpenMP iterator is not allowed here
variable captured in declare target region must appear in a to clause
expected list item of scalar type in 'lastprivate' clause with 'conditional' modifier
a lastprivate variable with incomplete type %0
only loop iteration variables are allowed in 'lastprivate' clause in 'omp %0' directives
only loop iteration variables are allowed in 'linear' clause in distribute directives
argument of a linear clause should be of integral or pointer type, not %0
a linear variable with incomplete type %0
'linear' clause cannot be specified along with 'ordered' clause with a parameter
variable with local storage in initial value of threadprivate variable
'%0' statement cannot be used in OpenMP for loop
could not calculate number of iterations calling 'operator-' with upper and lower loop bounds
increment expression must cause %0 to %select{decrease|increase}1 on each iteration of OpenMP for loop
condition of OpenMP for loop must be a relational comparison ('<', '<=', '>', %select{or '>='|'>=', or '!='}0) of loop variable %1
increment clause of OpenMP for loop must perform simple addition or subtraction on loop variable %0
initialization clause of OpenMP for loop is not in canonical form ('var = init' or 'T var = init')
loop iteration variable in the associated loop of 'omp %1' directive may not be %0, predetermined as %2
variable must be of integer or %select{pointer|random access iterator}0 type
expected iterator specification as map modifier
variable already marked as mapped in current construct
mapper type must be of struct, union or class type
multiple array elements associated with the same variable are not allowed in map clauses of the same construct
argument to '%0' clause must be a %select{non-negative|strictly positive}1 integer value
expected at least one %0 clause for '#pragma omp %1'
variable %0 must have explicitly specified data sharing attributes
no more 'if' clause is allowed
expected addressable lvalue in '%0' clause
expected expression with a pointer to a complete type as a base of an array shaping operation
non-predefined allocator must have traits specified
%select{statement after '#pragma omp %1' must be a for loop|expected %2 for loops after '#pragma omp %1'%select{|, but found only %4}3}0
expression must have integral or unscoped enumeration type, not %0
unable to resolve declare reduction construct for type %0
directive '#pragma omp taskwait' cannot use 'nowait' clause without 'depend' clause
variable can appear only once in OpenMP '%0' clause
variable can appear only once in OpenMP 'target update' construct
at most one defaultmap clause for each variable-category can appear on the directive
'ordered' directive %select{without any clauses|with 'threads' clause}0 cannot be closely nested inside ordered region with specified parameter
'ordered' directive with '%0' clause cannot be closely nested inside ordered region without specified parameter
'ordered' clause with a parameter can not be specified in '#pragma omp %0' directive
original storage of expression in data environment is shared but data environment do not fully contain mapped expression storage
orphaned 'omp %0' directives are prohibited; perhaps you forget to enclose the directive into a %select{|||target |teams|for, simd, for simd, parallel for, or parallel for simd }1region?
%select{orphaned 'omp section' directives are prohibited, it|'omp section' directive}0 must be closely nested to a sections region%select{|, not a %1 region}0
argument of a reduction clause of a %0 construct must not appear in a firstprivate clause on a task construct
the statement for '#pragma omp parallel sections' must be a compound statement
statement in 'omp parallel sections' directive must be enclosed into a section region
expected reference to one of the parameters of function %0%select{| or 'this'}1
parent region for 'omp %select{cancellation point|cancel}0' construct cannot be nowait
parent region for 'omp %select{cancellation point|cancel}0' construct cannot be ordered
pointer cannot be mapped along with a section derived from itself
predefined allocator cannot have traits specified
a private variable with incomplete type %0
region cannot be%select{| closely}0 nested inside '%1' region%select{|; perhaps you forget to enclose 'omp %3' directive into a parallel region?|; perhaps you forget to enclose 'omp %3' directive into a for or a parallel for region with 'ordered' clause?|; perhaps you forget to enclose 'omp %3' directive into a target region?|; perhaps you forget to enclose 'omp %3' directive into a teams region?|; perhaps you forget to enclose 'omp %3' directive into a for, simd, for simd, parallel for, or parallel for simd region?}2
OpenMP constructs may not be nested inside an atomic region
cannot nest 'critical' regions having the same name %0
construct '%0' not allowed in a region associated with a directive with 'order' clause
OpenMP constructs may not be nested inside a simd region%select{| except for ordered simd, simd, scan, or atomic directive}0
list item of type %0 is not valid for specified reduction operation: unable to provide default initialization value
in_reduction variable must have the same reduction operation as in a task_reduction clause
reduction variables may not be accessed in an explicit task
a reduction list item with incomplete type %0
expected addressable reduction item for the task-based directives
the inscan reduction list item must appear as a list item in an 'inclusive' or 'exclusive' clause on an inner 'omp scan' directive
argument of OpenMP clause '%0' must reference the same object in all threads
'reduction' clause with 'task' modifier allowed only on non-simd parallel or worksharing constructs
cannot generate code for reduction on %select{|array section, which requires a }0variable length array
'reduction' clause cannot be used with 'nogroup' clause
reduction type cannot be %select{qualified with 'const', 'volatile' or 'restrict'|a function|a reference|an array}0 type
arguments of '#pragma omp %0' cannot be of reference type %1
directive must be at file or namespace scope
%0 variable must be %1
Only one %0 clause can appear on a requires directive in a single translation unit
same pointer dereferenced in multiple different ways in map clause expressions
exactly one of 'inclusive' or 'exclusive' clauses is expected
'nonmonotonic' modifier can only be specified with 'dynamic' or 'guided' schedule kind
section of pointer to function type %0
section of pointer to incomplete type %0
section length is evaluated to a negative value %0
section length is unspecified and cannot be inferred because subscripted value is %select{not an array|an array of unknown bound}0
array section must be a subset of the original array
section stride is evaluated to a non-positive value %0
the statement for '#pragma omp sections' must be a compound statement
statement in 'omp sections' directive must be enclosed into a section region
exactly one '%0' directive must appear in the loop body of an enclosing directive
directive '#pragma omp %0' cannot contain more than one %select{'seq_cst', 'relaxed', |}1'acq_rel', 'acquire' or 'release' clause
array shaping dimension is evaluated to a non-positive value %0
'%0' statement cannot be used in OpenMP simd region
'%0' clause with '%1' modifier cannot be specified if an 'ordered' clause is specified
the 'copyprivate' clause must not be used with the 'nowait' clause
single declaration is expected after 'declare %select{simd|variant}0' directive
'%0(%select{source|sink:vec}1)' clause%select{|s}1 cannot be mixed with '%0(%select{sink:vec|source}1)' clause%select{s|}1
the loop %select{initializer|condition}0 expression depends on the current loop control variable
target construct with nested teams region contains statements outside of the teams construct
'mutexinoutset' modifier not allowed in 'depend' clause on 'taskwait' directive
threadprivate variables are not allowed in '%0' clause
threadprivate variables cannot be used in target constructs
threadprivate variable with incomplete type %0
array section %select{lower bound|length}0 is not an integer
subscripted value is not an array or pointer
array shaping operation dimension is not an integer
calls to OpenMP runtime API are not allowed within a region that corresponds to a construct with an order clause that specifies concurrent
expected %0 in OpenMP clause '%1'
modifier '%0' cannot be used along with modifier '%1'
mapping of union members is not allowed
incorrect reduction identifier, expected one of '+', '-', '*', '&', '|', '^', '&&', '||', 'min' or 'max' or declare reduction for type %0
incorrect reduction identifier, expected one of '+', '*', '&', '|', '^', '&&', '||', 'min' or 'max' or declare reduction for type %0
expected%select{| one of}0 %1 directive name modifier%select{|s}0
loop to be fully unrolled must have a constant trip count
%select{a variable|a parameter|'this'}0 cannot appear in more than one %1 clause
expected pointer or reference to pointer in 'use_device_ptr' clause
expected variable of the '%0' type%select{|, not %2}1
'#pragma omp %0' must appear in the scope of the %q1 variable declaration
variable %0 cannot be threadprivate because it is %select{thread-local|a global named register variable}1
'#pragma omp %0' must precede all references to variable %q1
%0 variable cannot be in a %1 clause in '#pragma omp %2' directive
arguments of OpenMP clause '%0' in '#pragma omp %2' directive cannot be of variably-modified type %1
one of 'for', 'parallel', 'sections' or 'taskgroup' is expected
expected an integer or a pointer type of the outer loop counter '%0' for non-rectangular nests
function with 'device_type(%0)' is not available on %select{device|host}1
%0 variable cannot be %1
directive name modifier '%0' is not allowed for '#pragma omp %1'
'inscan' modifier can be used only in 'omp for', 'omp simd', 'omp for simd', 'omp parallel for', or 'omp parallel for simd' directive
expected %select{'val' modifier|one of 'ref', val' or 'uval' modifiers}0
variable of non-reference type %0 can be used only with 'val' modifier, but used with '%1'
the parameter of the 'ordered' clause must be greater than or equal to the parameter of the 'collapse' clause
the value of 'simdlen' parameter must be less than or equal to the value of the 'safelen' parameter
only %select{'omp_priv' or 'omp_orig'|'omp_in' or 'omp_out'}0 variables are allowed in %select{initializer|combiner}0 expression
access specifier can only have annotation attributes
only constructors take base initializers
only enumeration types have underlying types
variables in the %0 address space can only be declared in the outermost scope of a kernel function
atomic variable can be %select{assigned|initialized}0 to a variable only in global address space
bit-fields are not supported in OpenCL
cannot refer to a block inside block
the __block storage type is not permitted
illegal call to %0, expected %1 argument type
invalid number of arguments to function: %0
first argument to %0 must be a pipe type
invalid pipe access modifier (expecting %0)
invalid argument type to function %0 (expecting %1 having %2)
invalid argument %0 to function: %1, expecting a generic pointer argument
cannot cast non-zero value '%0' to 'event_t'
casting to type %0 is not allowed
variable in constant address space must be initialized
blocks with parameters are not accepted in this prototype of enqueue_kernel call
blocks used in enqueue_kernel call are expected to have parameters of type 'local void*'
illegal call to enqueue_kernel, incorrect argument types
illegal call to enqueue_kernel, parameter needs to be specified as integer type
mismatch in number of block parameters and local size arguments passed
vector component access has invalid length %0.  Supported: 1,2,3,4,8,16.
invalid block variable declaration - using 'extern' storage class is disallowed
%select{pointers|references}0 to functions are not allowed
%select{non-kernel function|function scope}0 variable cannot be declared in %1 address space
%select{program scope|static local|extern}0 variable must reside in %1 address space
declaring variable of type %0 is not allowed
%select{loading directly from|assigning directly to}0 pointer to type %1 requires cl_khr_fp16. Use vector data %select{load|store}0 builtin functions instead
implicit conversions between vector types (%0 and %1) are not permitted
access qualifier can only be used for pipe and image type
invalid block variable declaration - must be %select{const qualified|initialized}0
declaring function parameter of type %0 is not allowed%select{; did you forget * ?|}1
access qualifier %0 can not be used for %1 %select{|prior to OpenCL C version 2.0 or in version 3.0 and without __opencl_c_read_write_images feature}2
declaring function return value of type %0 is not allowed %select{; did you forget * ?|}1
array of %0 type is invalid in OpenCL
attribute %0 can only be applied to an OpenCL kernel function
multiple access qualifiers
%select{function|kernel}0 cannot be called 'main'
global sampler requires a const or constant address space qualifier
pointer to type %0 is invalid in OpenCL
kernel parameter cannot be declared as a pointer to a pointer
use of %select{type|declaration}0 %1 requires %2 support
scalar operand type has greater rank than the type of the vector element. (%0 and %1)
invalid application of '%0' to a void type
taking address of a capture is not allowed
block type cannot be used as expression in ternary expression in OpenCL
type %0 can only be used as a function parameter in OpenCL
%0 type %1 not found; include the base header with -finclude-default-header
the %0 type cannot be used to declare a structure or union field
invalid prototype, variadic arguments are not allowed in OpenCL
variable length arrays are not supported in OpenCL
use of placement new requires explicit declaration
invalid application of '__builtin_omp_required_simd_align' to an expression, only type is allowed
variable length arrays are not supported in OpenMP tasking regions with 'untied' clause
circular pointer delegation detected
use of 'operator->' on type %0 would invoke a sequence of more than %1 'operator->' calls
%0 cannot take a dependent type as first parameter; use %1 instead
first parameter of %0 must have type %1
parameter of %0 cannot have a default argument
%0 cannot be declared inside a namespace
%0 cannot be declared static in global scope
%0 cannot have a dependent return type; use %1 instead
%0 must return type %1
%0 template must have at least two parameters
%0 must have at least one parameter
%0 cannot take a dependent type as first parameter; use size_t (%1) instead
%0 takes type size_t (%1) as first parameter
parameter of overloaded %0 cannot have a default argument
overloaded %0 must be a %select{unary|binary|unary or binary}2 operator (has %1 parameter%s1)
overloaded %0 must be a non-static member function
overloaded %0 must have at least one parameter of class or enumeration type
parameter of overloaded post-%select{increment|decrement}1 operator must have type 'int' (not %0)
overloaded %0 cannot be a static member function
overloaded %0 cannot be variadic
os_log() argument %0 is too big (%1 bytes, max %2)
os_log() format argument is not a string constant
defaulting this %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 would delete it after its first declaration
qualified reference to %0 is a constructor name rather than a %select{template name|type}1 in this context
__builtin_mul_overflow does not support 'signed _BitInt' operands of more than %0 bits
operand argument to overflow builtin must be an integer (%0 invalid)
result argument to overflow builtin must be a pointer to a non-const integer (%0 invalid)
exception specification of overriding function is more lax than base version
call to %0 is ambiguous
ambiguous conversion for %select{|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2
call to constructor of %0 is ambiguous
call to member function %0 is ambiguous
call to object of type %0 is ambiguous
use of overloaded operator '%0' is ambiguous (with operand types %1 and %2)
use of overloaded operator '%0' is ambiguous (operand type %1)
call to subscript operator of type %0 is ambiguous
call to deleted function %0
object of type %0 cannot be compared because its %1 is implicitly deleted
%select{|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2 uses deleted function
call to deleted constructor of %0
call to deleted member function %0
call to deleted function call operator in type %0
overload resolution selected deleted operator '%0'
call to implicitly-deleted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor|function}0 of %1
object of type %0 cannot be %select{constructed|copied|moved|assigned|assigned|destroyed}1 because its %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}1 is implicitly deleted
functions that differ only in their return type cannot be overloaded
cannot convert %1 to %2 without a conversion operator
type %0 does not provide a %select{subscript|call}1 operator
no matching conversion for %select{|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2
no matching function for call to %0
no matching constructor for initialization of %0
no matching literal operator for call to %0%select{| with argument of type %2| with arguments of types %2 and %3}1%select{| or 'const char *'}4%select{|, and no matching literal operator template}5
no matching member function for call to %0
no matching function for call to object of type %0
no viable overloaded '%0'
no viable overloaded operator[] for type %0
return type %0 of selected 'operator==' function for rewritten '%1' comparison is not 'bool'
static and non-static member functions with the same parameter types cannot be overloaded
reference to %select{overloaded|multiversioned}1 function could not be resolved; did you mean to call it%select{| with no arguments}0?
'ownership_returns' attribute index does not match; here it is %0
%0 attribute only applies to %select{pointer|integer}1 arguments
pack expansion contains parameter packs %0 and %1 that have different lengths (%2 vs. %3)
pack expansion contains parameter pack %0 that has a different length (%1 vs. %2) from outer parameter packs
pack expansion contains parameter pack %0 that has a different length (at least %1 vs. %2) from outer parameter packs
pack expansion for initialization of member %0
pack expansion does not contain any unexpanded parameter packs
C does not support default arguments
default arguments cannot be added to an out-of-line definition of a member of a %select{class template|class template partial specialization|nested class in a template}0
missing default argument on parameter
missing default argument on parameter %0
default arguments can only be specified for parameters in a function declaration
parameter pack cannot have a default argument
redefinition of default argument
default argument references local variable %0 of enclosing function
default argument references parameter %0
default argument references 'this'
default arguments cannot be added to a function template that has already been declared
argument may not have 'void' type
a lambda parameter cannot shadow an explicitly captured entity
%select{parameters|function return value}0 cannot have __fp16 type; did you forget * ?
cannot parenthesize the name of a method when forming a member pointer
%select{class|variable}0 template partial specialization does not specialize any template argument; to %select{declare|define}1 the primary template, remove the template argument list
partial specialization of %0 does not use any of its template parameters
ambiguous partial specializations of %0
class template partial specialization %0 cannot be redeclared
partial specialization cannot be declared as a friend
deduced type %0 does not satisfy %1
'new' expression with placement arguments refers to non-placement 'operator delete'
call to pointer to member function of type %0 drops '%1' qualifier%s2
pointer-to-member function type %0 can only be called on an %select{rvalue|lvalue}1
invalid use of pointer to member type after %select{.*|->*}0
this builtin requires ABI -mabi=%0
expected a 'float', 'double' or '__float128' for the first argument
invalid use of PPC MMA type
'#pragma alloc_text' is applicable only to functions with C linkage
'#pragma alloc_text' is applicable only to functions
'#pragma clang attribute' attribute with no matching '#pragma clang attribute push'
attribute %0 can't be applied to %1
negated attribute subject matcher sub-rule '%0' contradicts sub-rule '%1'
redundant attribute subject matcher sub-rule '%0'; '%1' already matches those declarations
unterminated '#pragma clang attribute push' at end of file
'#pragma clang attribute %select{%1.|}0pop' with no matching '#pragma clang attribute %select{%1.|}0push'
'#pragma %0' can only appear at file scope
'#pragma float_control(except, on)' is illegal when precise is disabled
'#pragma float_control(precise, off)' is illegal when except is enabled
'#pragma float_control(precise, off)' is illegal when fenv_access is enabled
'#pragma float_control push/pop' can only appear at file or namespace scope or within a language linkage specification
'#pragma STDC FENV_ACCESS ON' is illegal when precise is disabled
%select{incompatible|duplicate}0 directives '%1' and '%2'
invalid argument of type %0; expected an integer type
%select{invalid value '%0'; must be positive|value '%0' is too large}1
expected a for, while, or do-while loop to follow '%0'
mac68k alignment pragma is not supported on this target
specifying an identifier within `#pragma pack` is not supported on this target
expected #pragma pack parameter to be '1', '2', '4', '8', or '16'
#pragma visibility pop with no matching #pragma visibility push
#pragma visibility push with no matching #pragma visibility pop
argument to #pragma section is not valid for this target: %0
__builtin_preserve_enum_value argument %0 invalid
__builtin_preserve_enum_value argument %0 not a constant
__builtin_preserve_field_info argument %0 not a constant
__builtin_preserve_field_info argument %0 not a field access
__builtin_preserve_type_info argument %0 invalid
__builtin_preserve_type_info argument %0 not a constant
instance variable %0 is private
private module fragment declaration with no preceding module declaration
private module fragment in module implementation unit
private module fragment redefined
probability argument to __builtin_expect_with_probability must be constant floating-point expression
probability argument to __builtin_expect_with_probability is outside the range [0.0, 1.0]
type of property %0 (%1) does not match type of accessor %2 (%3)
property %0 found on object of type %1; did you mean to access it with the "." operator?
use of Objective-C property in function nested in Objective-C container not supported, move function outside its container
property %0 is already implemented
property %0 has a variably modified type
type of property %0 (%1) does not match type of instance variable %2 (%3)
property access is using %0 method which is unavailable
property %0 refers to an incomplete Objective-C class %1 (with no @interface available)
property %0 not found on object of type %1
property %0 cannot be found in forward class object %1
property %0 not found on object of type %1; did you mean %2?
synthesized properties %0 and %1 both claim setter %2 - use of this setter will cause unexpected behavior
property cannot have array or function type %0
instance variable %0 is protected
protocol has circular dependency
property %select{of type %1|with attribute '%1'|without attribute '%1'|with getter %1|with setter %1}0 was selected for synthesis
object expression of non-scalar type %0 cannot be used in a pseudo-destructor expression
call to pseudo-destructor cannot have any arguments
%0 does not refer to a type name in pseudo-destructor expression; expected the name of type %1
the type of object expression %diff{($) does not match the type being destroyed ($)|does not match the type being destroyed}0,1 in pseudo-destructor expression
address discrimination flag for __ptrauth must be 0 or 1; value is %0
argument to %select{__ptrauth|ptrauth_struct}0 must be an integer constant expression
discriminator argument to ptrauth_sign_constant must be a constant integer, the address of the global variable where the result will be stored, or a blend of the two
argument to ptrauth_sign_constant must refer to a global variable or function
pointer authentication is disabled for the current target
this target does not support pointer authentication
empty __ptrauth authentication option
extra discriminator for %select{__ptrauth|ptrauth_struct}2 must be between 0 and %1; value is %0
%select{static locals|globals}0 with authenticated null values are currently unsupported
%0 does not identify a valid pointer authentication key for the current target
invalid character in __ptrauth options
missing comma between __ptrauth options
attribute ptrauth_struct cannot be used on class %0 or its subclasses because it is a dynamic class
__ptrauth options must be a string of comma separated flags, found '%0'
%0 qualifier must take between 1 and 4 arguments
cast types may not be qualified with __ptrauth; type is %0
%select{return types|parameter types|properties}2 may not be qualified with %select{__ptrauth|__ptrauth_restricted_intptr}1; type is %0
__ptrauth qualifier may only be applied to pointer types; type here is %0
type %0 is already %1-qualified
signed pointer types may not be qualified with __ptrauth(ptrauth_key_none); type is %0
argument to %0 parameter is not an authenticated value
repeated __ptrauth authentication %select{mode|option}0
__ptrauth_restricted_intptr qualifier may only be applied to pointer sized integer types; type here is %0
argument must be a string literal%select{| of char type}0
argument to '__builtin_ptrauth_type_discriminator' isn't a record type
%0 is signed differently from the previous declaration
cannot pass undiscriminated type %0 to '__builtin_ptrauth_type_discriminator'
unknown __ptrauth authentication option '%0'
%select{signed value|extra discriminator|blended pointer|blended integer}0 must have %select{pointer|integer|pointer or integer}1 type; type here is %2
friend declaration cannot have a pure-specifier
exception declarator cannot be qualified
friend function definition cannot be qualified with '%0'
friend declaration of %0 does not match any declaration in %1
type operand %0 of 'typeid' cannot have '%1' qualifier
qualified member access refers to a member in %0
%q0 is not a member of class %1
%select{property|instance variable}0 access cannot be qualified with '%1'
@catch parameter declarator cannot be qualified
parameter declarator cannot be qualified
typedef declarator cannot be qualified
cannot build range expression with array function parameter %0 since parameter with array type %1 is treated as pointer type %2
assigning to 'readonly' return result of an Objective-C message not allowed
invalid type %0 to %1 operator
%select{struct|union}0 kernel parameters may not contain pointers
recursive evaluation of default argument
trying to recursively use %0 as superclass of %1
redeclaration of %0 with a different type%diff{: $ vs $|}1,2
cannot export redeclaration %0 here since the previous declaration %select{is not exported|has internal linkage|has module linkage}1
redefinition of %0
redefinition of concept %0 with different template parameters or requirements
redefinition of %0 as different kind of symbol
redefinition of %0 as an alias for a different namespace
redefinition of %0 with a different type%diff{: $ vs $|}1,2
%select{typedef|type alias|type alias template}0 redefinition with different types%diff{ ($ vs $)|}1,2
redefinition of a 'extern inline' function %0 is not supported in %select{C99 mode|C++}1
redefinition of enumerator %0
redefinition of label %0
redefinition of %select{typedef|type alias}0 for variably-modified type %1
cannot refer to declaration with an array type inside block
reference to %select{__device__|__global__|__host__|__host__ __device__}0 %select{function|variable}1 %2 in %select{__device__|__global__|__host__|__host__ __device__}3 function
reference to %select{__device__|__global__|__host__|__host__ __device__}0 function %1 in global initializer
cannot refer to declaration of structure variable with flexible array member inside block
reference initialization of type %0 with initializer of type %1 is ambiguous
%0 does not refer to a value
ref-qualifier '&&' is not allowed on a defaulted comparison operator
ref-qualifier '%select{&&|&}0' is not allowed on a constructor
ref-qualifier '%select{&&|&}0' is not allowed on a destructor
cannot overload a member function %select{without a ref-qualifier|with ref-qualifier '&'|with ref-qualifier '&&'}0 with a member function %select{without a ref-qualifier|with ref-qualifier '&'|with ref-qualifier '&&'}1
cannot refer to declaration with a variably modified type inside block
binding reference %diff{of type $ to value of type $|to value}0,1 %select{drops %3 qualifier%plural{1:|2:|4:|:s}4|changes address space|not permitted due to incompatible qualifiers}2
reference %diff{to %select{type|incomplete type}1 $ could not bind to an %select{rvalue|lvalue}2 of type $|could not bind to %select{rvalue|lvalue}2 of incompatible type}0,3
reference to type %0 cannot bind to an initializer list
reference of type %0 cannot bind to a temporary object because of address space mismatch
%select{non-const|volatile}0 reference cannot bind to bit-field%select{| %1}2
%select{non-const|volatile}0 reference cannot bind to matrix element
%select{non-const|volatile}0 reference cannot bind to vector element
'&' cannot precede a capture when the capture default is '&'
reference cannot be initialized with multiple values
pipes packet types cannot be of reference type
invalid reference to function %0: constraints not satisfied
reference to local %select{variable|binding}1 %0 declared in enclosing %select{%3|block literal|lambda expression|context}2
cannot form a reference to 'void'
declaration of reference variable %0 requires an initializer
reference to type %0 requires an initializer
function declared with regparm(%0) attribute was previously declared %plural{0:without the regparm|:with the regparm(%1)}1 attribute
%0 attribute cannot be repeated
variable does not have a constant initializer
default arguments not allowed for parameters of a requires expression
constraint variable %0 cannot be used in an evaluated context
cannot subclass a class that was declared with the 'objc_subclassing_restricted' attribute
returning block that lives on the local stack
@throw (rethrow) used outside of a @catch block
void block should not return a value
cannot return from %0
return in the catch of a function try block of a constructor is illegal
return statement not allowed in coroutine; did you mean 'co_return'?
%select{void function|void method|constructor|destructor}1 %0 must not return a value
return type cannot be qualified with address space
LMUL argument must be in the range [0,3] or [5,7]
builtin requires%select{| at least one of the following extensions to be enabled}0: %1
RISC-V type %0 requires the '%1' extension
%0 cannot use 'super' because it is a root class
argument should be the value 90 or 270
argument should be the value 0, 90, 180 or 270
rvalue reference type %0 is not allowed in exception specification
sampler_t variable required - got %0
sampler_t initialization requires 32-bit integer, not %0
second argument to __builtin_call_with_static_chain must be of pointer type
second argument to 'va_arg' is of abstract type %0
second argument to 'va_arg' is of incomplete type %0
%0 causes a section type conflict with %1
cannot use SEH '__try' in a coroutine when C++ exceptions are enabled
cannot use SEH '__try' in blocks, captured regions, or Obj-C method decls
SEH '__try' is not supported on this target
chosen constructor is explicit in copy-initialization
selector element of type %0 cannot be a constant lvalue expression
selector element is not a valid lvalue
selector element type %0 is not a valid object
type of setter must be void
%select{'#pragma clang fp eval_method'|option 'ffp-eval-method'}0 cannot be used with %select{option 'fapprox-func'|option 'mreassociate'|option 'freciprocal'|option 'ffp-eval-method'|'#pragma clang fp reassociate'}1
initialization is not supported for __shared__ variables.
requested shift is a vector of type %0 but the first operand is not a vector (%1)
index for __builtin_shufflevector must be less than the total number of vector elements
index for __builtin_shufflevector must be a constant integer
%select{|reference to }0sizeless type %1 is not allowed in exception specification
non-local variable with sizeless type %0
invalid application of '%0' to a function type
invalid application of '%0' to %select{an incomplete|sizeless}1 type %2
invalid application of '%select{sizeof|alignof|typeof|typeof_unqual}0' to bit-field
application of '%select{alignof|sizeof}1' to interface %0 is not supported on this architecture and platform
%0 does not refer to the name of a parameter pack
%0 does not refer to the name of a parameter pack; did you mean %1?
function declared %0 was previously declared %1, which has different SME function attributes
call to a streaming function requires 'sme'
function executed in streaming-SVE mode requires 'sme'
function using ZA state requires 'sme'
function using ZT0 state requires 'sme2'
streaming function cannot be multi-versioned
call to a shared ZA function requires the caller to have ZA state
call to a shared ZT0 function requires the caller to have ZT0 state
argument to 'operator<=>' %select{cannot be narrowed from type %1 to %2|evaluates to %1, which cannot be narrowed to type %2}0
specialization of member %q0 does not specialize an instantiated member
explicit specialization of %0 after instantiation
cannot reference member of primary template because deduced class template specialization %0 is %select{instantiated from a partial|an explicit}1 specialization
cannot specialize %select{|(with 'template<>') }0a member of an unspecialized template
forward declaration of %select{class|struct|interface|union|enum|enum class|enum struct}0 cannot have a nested name specifier
static assertion expression is not an integral constant expression
static assertion failed%select{: %1|}0
the message in a static assertion must have a '%select{size|data}0()' member function returning an object convertible to '%select{std::size_t|const char *}0'
the message in a static assertion must be a string literal or an object with 'data()' and 'size()' member functions
the message in a static assertion must be produced by a constant expression
the message object in this static assertion is missing %select{a 'size()' member function|a 'data()' member function|'data()' and 'size()' member functions}0
static assertion failed due to requirement '%0'%select{: %2|}1
function declared in block scope cannot have 'static' storage class
static data member %0 not allowed in anonymous %select{struct|interface|union|class|enum}1
static data member %0 not allowed in local %select{struct|interface|union|class|enum}2 %1
static data member %0 already has an initializer
cannot cast %0 to %1 via virtual base %2
variables in function scope cannot be declared static
the 'static' modifier for the array size is not legal in new expressions
kernel functions cannot be declared static
'main' is not allowed to be declared static
static declaration of %0 follows non-static declaration
static member %0 cannot be a bit-field
'static' can only be specified inside the class definition
'static' member function %0 overrides a virtual function in a base class
interface type cannot be statically allocated
standard library implementation of %0 is not supported; %select{member '%2' does not have expected form|member '%2' is missing|the type is not trivially copyable|the type does not have the expected form}1
'std::source_location::__impl' must be standard-layout and have only two 'const char *' fields '_M_file_name' and '_M_function_name', and two integral fields '_M_line' and '_M_column'
'std::source_location::__impl' was not found; it must be defined before '__builtin_source_location' is called
unsupported standard library implementation: 'std::%0' is not a class template
default %select{argument|non-type template argument}0 may not use a GNU statement expression
static data member definition cannot specify a storage class
@catch parameter cannot have storage specifier '%0'
storage class specified for a member declaration
impossible constraint in asm: can't store value into a register
existing instance variable %1 for strong property %0 may not be __weak
subscript of pointer to function type %0
subscript of pointer to %select{incomplete|sizeless}0 type %1
subscript requires size of interface %0, which is not constant for this architecture and platform
subscript of svbool_t is not allowed
use of '__super' inside a lambda is unsupported
SVE vector type %0 cannot be used in a target without sve
'%0' parameter must have pointer%select{| to unqualified pointer}1 type; type here is %2
'swift_async' completion handler parameter must have block type returning 'void', type here is %0
%0 attribute with 'nonnull_error' convention can only be applied to a %select{function|method}1 with a completion handler with an error parameter
%0 attribute with '%1' convention must have an integral-typed parameter in completion handler at index %2, type here is %3
%0 attribute must be applied to a %select{function|method}1 annotated with non-'none' attribute 'swift_async'
first argument to 'swift_async' must be either 'none', 'swift_private', or 'not_swift_private'
'swift_error_result' parameter must follow 'swift_context' parameter
'swift_indirect_result' parameters must be first parameters of function
'%0' parameter can only be used with swiftcall%select{ or swiftasynccall|}1 calling convention%select{|s}1
switch condition type %0 requires explicit conversion to %1
switch condition has incomplete class type %0
cannot jump from switch statement to this case label
multiple conversions from switch condition type %0 to an integral or enumeration type
types with 'sycl_special_class' attribute must have one and only one '__init' method defined
@synthesize not allowed in a category's implementation
@synthesize not allowed on a class property %0
synthesized property with variable size type %0 requires an existing instance variable
cannot synthesize weak property in file using manual reference counting
cannot synthesize weak property because the current deployment target does not support weak references
invalid transaction abort code
definition of type %0 conflicts with %select{typedef|type alias}1 of the same name
%select{type tag|argument}0 index %1 is greater than the number of arguments specified
implicit declaration introduced by elaborated type conflicts with a %select{non-struct type|non-class type|non-union type|non-enum type|typedef|type alias|template|type alias template|template template argument}0 of the same name
%select{non-struct type|non-class type|non-union type|non-enum type|typedef|type alias|template|type alias template|template template argument}1 %0 cannot be referenced with a %select{struct|interface|union|class|enum}2 specifier
friend type templates must use an elaborated type
'target_clones' attribute does not match previous declaration
'target_clones' multiversioning requires a default target
%0 requires %select{|%2 bit size}1 %3 %select{|return }4type support, but target '%5' does not support it
attributes '%0("%2")' and '%1("%2")' are mutually exclusive
ambiguous constructor call when %select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}0 of type %1
%select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}0 of type %1 invokes deleted constructor
copying a temporary object of incomplete type %0
no viable constructor %select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}0 of type %1
address taken in non-type template argument for template parameter of reference type %0
deduced incomplete pack %0 for template parameter %1
non-type template argument refers to non-static data member %0
non-type template argument '%0' is invalid
constraints not satisfied for %select{class template|function template|variable template|alias template|template template parameter|template}0 %1%2
%select{too few|too many}0 template arguments for %select{class template|function template|variable template|alias template|template template parameter|concept|template}1 %2
sorry, non-type template argument of pointer-to-member type %1 that refers to member %q0 of a different class is not supported yet
non-type template argument refers to non-static member function %0
template argument for non-type template parameter must be an expression
template argument for template template parameter must be a class template%select{| or type alias template}0
template argument for template type parameter must be a type
template argument for template type parameter must be a type; did you forget 'typename'?
non-type template parameter of reference type %diff{$ cannot bind to template argument of type $|cannot bind to template of incompatible argument type}0,1
template argument for non-type template parameter is treated as function type %0
non-type template argument of type %0 is not a constant expression
non-type template argument for template parameter of pointer type %0 must have its address taken
non-type template argument of type %0 cannot be converted to a value of type %1
non-type template argument does not refer to any declaration
non-type template argument of type %0 is not an integral constant expression
non-type template argument of type %0 must have an integral or enumeration type
non-type template argument does not refer to an object or function
non-type template argument is not a pointer to member constant
template argument does not refer to a class or alias template, or template template parameter
non-type template argument refers to %select{function|object}0 %1 that does not have linkage
template argument is the type of an unresolved overloaded function
reference binding of non-type template parameter %diff{of type $ to template argument of type $|to template argument}0,1 ignores qualifiers
non-type template argument of reference type %0 is not an object
template template argument has different template parameters than its corresponding template template parameter
non-type template argument refers to thread-local object
null non-type template argument must be cast to template parameter type %0
null non-type template argument of type %0 does not match template parameter of type %1
requires clause differs in template redeclaration
type constraint differs in template redeclaration
pack expansion used as argument for non-pack parameter of %select{alias template|concept}0
template name refers to non-type template %0
templates cannot be declared inside of a local class
%select{implicit|explicit}0 instantiation of undefined template %1
%select{implicit|explicit}0 instantiation of template %1 within its own definition
kernel functions cannot be used in a template declaration, instantiation or specialization
missing 'template' keyword prior to dependent template name '%0%1'
%0%select{| following the 'template' keyword}1 cannot refer to a dependent template
%0%select{| following the 'template' keyword}1 does not refer to a template
'%0%1' is expected to be a non-type template, but instantiated to a %select{class|type alias}2 template
templates must have C++ linkage
member %0 declared as a template
extraneous 'template<>' in declaration of member %0
use of %select{class template|function template|variable template|alias template|template template parameter|concept|template}0 %1 requires template arguments
a non-type template parameter cannot have type %0 before C++20
a non-type template parameter cannot have type %0
template non-type parameter has a different type %0 in template %select{|template parameter }1redeclaration
non-type template parameter has incomplete type %0
non-type template parameter has non-literal type %0
type %0 of non-type template parameter is not a structural type
non-type template parameter has rvalue reference type %0
templates can only be declared in namespace or class scope
template parameter default argument is inconsistent with previous definition
template parameter missing a default argument
template parameter redefines default argument
template parameter has a different kind in template %select{|template parameter }0redeclaration
%select{too few|too many}0 template parameters in template %select{|template parameter }1redeclaration
template parameter list matching the non-templated nested type %0 should be empty ('template<>')
template parameter pack cannot have a default argument
template parameter pack must be the last template parameter
declaration of %0 shadows template parameter
default template argument not permitted on a friend template
cannot add a default template argument to the definition of a member of a class template
%select{template type|non-type template|template template}0 parameter%select{| pack}1 conflicts with previous %select{template type|non-type template|template template}0 parameter%select{ pack|}1
nested name specifier '%0' for declaration does not refer into a class, class template or class template partial specialization
recursive template instantiation exceeded maximum depth of %0
cannot declare an explicit specialization in a friend
explicit specialization of %0 in function scope
default argument not permitted on an explicit %select{instantiation|specialization}0 of function %1
extraneous template parameter list in template specialization or out-of-line template definition
template specialization declaration cannot be a friend
template specialization requires 'template<>'
template specialization or definition requires a template parameter list corresponding to the nested type %0
%select{class template|class template partial|variable template|variable template partial|function template|member function|static data member|member class|member enumeration}0 specialization of %1 must occur at global scope
%select{class template|class template partial|variable template|variable template partial|function template|member function|static data member|member class|member enumeration}0 specialization of %1 not in %select{a namespace enclosing %2|class %2 or an enclosing namespace}3
can only provide an explicit specialization for a class template, function template, variable template, or a member function, static data member, %select{or member class|member class, or member enumeration}0 of a class template
extraneous 'template<>' in declaration of %0 %1
template template argument %0 is more constrained than template template parameter %1
template template parameter must have its own template parameters
a typedef cannot be a template
cannot declare a class template with no name
extraneous 'template<>' in declaration of variable %0
tentative definition has type %0 that is never completed
'this' cannot be %select{implicitly |}0captured in this context
'this' cannot be%select{| implicitly}0 used in a static member function declaration
initializer for thread-local variable must be a constant expression
'%0' variables must have global storage
thread-local declaration of %0 follows non-thread-local declaration
type of thread-local variable has non-trivial destruction
thread-local declaration of %0 with %select{static|dynamic}1 initialization follows declaration with %select{dynamic|static}1 initialization
thread-local storage is not supported for the current target
three-way comparison between vectors is not supported
cannot throw an object of abstract type %0
cannot throw object of incomplete type %0
cannot throw pointer to object of incomplete type %0
cannot throw object of sizeless type %0
alignment (%0) of thread-local variable %1 is greater than the maximum supported alignment (%2) for a thread-local variable on this target
%select{untyped|typed}0 memory operation %1 %select{cannot be a variadic function|cannot be an instance method|must have a prototype|must be a function}2
invalid parameter type for inference at index %0. %1 is not an integer type
the typed_memory_operations attribute can only be applied to functions
typed memory operation %0 has multiple overloads
typed memory operation %0 has incompatible type (%diff{$ vs $|}1,2)
only one element declaration is allowed
deduction guide cannot have a requires clause
trailing return type may not be nested within parentheses
function with trailing return type must specify return type 'auto', not %0
'%0' only applies to %select{function|pointer|Objective-C object or block pointer}1 types; type here is %2
cannot use type '%0' within '#pragma clang fp eval_method'; type is set according to the default eval method for the translation unit
%0 requires more than 1 template argument; provide the remaining arguments explicitly to use it here
concept named in type constraint is not a type concept
%0 cannot be defined in a type alias template
%0 cannot be defined in a condition
%0 cannot be defined in an enumeration
types may not be defined in a for range declaration
%0 cannot be defined in a parameter type
%0 cannot be defined in the result type of a function
%0 cannot be defined in a type specifier
type of property %0 in class extension does not match property type in primary class
a parameter pack may not be accessed at an out of bounds index
'type_tag_for_datatype' attribute requires the initializer to be an %select{integer|integral}0 constant expression
'type_tag_for_datatype' attribute requires the initializer to be an %select{integer|integral}0 constant expression that can be represented by a 64 bit integer
%0 is not supported on this target
address of %select{bit-field|vector element|property expression|register variable|matrix element}0 requested
taking the address of a destructor
taking the address of a temporary object of type %0
conversion %diff{from $ to $|between types}0,1 is ambiguous
variable declared with 'objc_externally_retained' cannot be modified in ARC
cannot assign to 'self' outside of a method in the init family
cannot assign to 'self' in a class method
arithmetic on a pointer to %select{an incomplete|sizeless}0 type %1
fast enumeration variables cannot be modified in ARC by default; declare the variable __strong to allow this
array type %0 is not assignable
%select{cannot assign to return value because function %1 returns a const value|cannot assign to variable %1 with const-qualified type %2|cannot assign to %select{non-|}1static data member %2 with const-qualified type %3|cannot assign to non-static data member within const member function %1|cannot assign to %select{variable %2|non-static data member %2|lvalue}1 with %select{|nested }3const-qualified data member %4|read-only variable is not assignable}0
value of type %0 is not contextually convertible to 'bool'
arguments are of different types%diff{ ($ vs $)|}0,1
ordered compare requires two args of floating point type%diff{ ($ and $)|}0,1
floating point classification requires argument of floating point type (passed in %0)
called object type %0 is not a function or function pointer
argument type %0 is not a real floating point type
too few %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected %1, have %2
too few %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected at least %1, have %2
too few %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, at least argument %1 must be specified
too few %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected at least %1, have %2; did you mean %3?
too few %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, single argument %1 was not specified
too few %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected %1, have %2; did you mean %3?
too many %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected %1, have %2
too many %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected at most %1, have %2
too many %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected at most single argument %1, have %2 arguments
too many %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected at most %1, have %2; did you mean %3?
too many %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected single argument %1, have %2 arguments
too many %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected %1, have %2; did you mean %3?
cast to incomplete type %0
cast to union type from type %0 not present in union
'__builtin_choose_expr' requires a constant expression
comparison of distinct block types%diff{ ($ and $)|}0,1
comparison of distinct pointer types%diff{ ($ and $)|}0,1
equality comparison between function pointer and void pointer (%0 and %1)
comparison between pointer and integer (%0 and %1)
used type %0 where integer or floating point type is required
used type %0 where floating point type is not allowed
used type %0 where arithmetic or pointer type is required
incompatible operand types%diff{ ($ and $)|}0,1
non-pointer operand type %0 incompatible with %select{NULL|nullptr}1
__ptrauth qualification mismatch%diff{ ($ and $)|}0,1
%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers
%select{%diff{assigning to $ from incompatible type $|assigning to type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3%select{|: different classes%diff{ ($ vs $)|}5,6|: different number of parameters (%5 vs %6)|: type mismatch at %ordinal5 parameter%diff{ ($ vs $)|}6,7|: different return type%diff{ ($ vs $)|}5,6|: different qualifiers (%5 vs %6)|: different exception specifications}4
incompatible block pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2
incompatible function pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3
incompatible pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3
%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 converts between pointers to integer types %select{with different sign|where one is of the unique plain 'char' type and the other is not}3
incompatible integer to pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3
incompatible pointer to integer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3
%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 converts between void pointer and function pointer
value of type %0 is not implicitly convertible to %1
conversion from %0 to %1 is not allowed in a converted constant expression
conversion from %0 to %1 in converted constant expression would bind reference to a temporary
variable has incomplete type %0
conversion function %diff{from $ to $|between types}0,1 invokes a deleted function
vector is not assignable (contains duplicate components)
invalid operand of type %0 where floating, complex or a vector of such types is required
used type %0 where integer is required
operand of type %0 where arithmetic or pointer type is required
expression is not assignable
fields must have a constant size: 'variable length array in structure' extension will never be supported
cannot %select{decrement|increment}1 value of type %0
%select{%diff{assigning $ to $|assigning to different types}1,0|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 changes address space of pointer
%select{%diff{assigning $ to $|assigning to different types}1,0|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 changes address space of nested pointer
%select{%diff{assigning $ to $|assigning to different types}1,0|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 changes retain/release properties of pointer
%select{%diff{assigning $ to $|assigning to different types}1,0|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 changes pointer-authentication of pointee type
definition of variable with array type needs an explicit size or an initializer
incomplete definition of type %0
incomplete type %0 is not assignable
indirection requires pointer operand (%0 invalid)
cannot take the address of an rvalue of type %0
extra '&' taking address of overloaded function
invalid operands to binary expression (%0 and %1)
pointer to function type %0 may not be 'restrict' qualified
restrict requires a pointer or reference (%0 is invalid)
restrict requires a pointer or reference
instance variables must have a constant size
logical expression with vector %select{type %1 and non-vector type %2|types %1 and %2}0 is only supported in C++
assignment to cast is illegal, lvalue casts are not supported
member reference type %0 is not a pointer
%0 does not have a member named %1
%0 does not have a member named %1; did you mean %2?
member reference base type %0 is not a structure or union
member reference type %0 is %select{a|not a}1 pointer; did you mean to use '%select{->|.}1'?
cannot refer to type member %0 in %1 with '%select{.|->}2'
cannot refer to member %0 in %1 with '%select{.|->}2'
%diff{return type $ must match previous return type $|return type must match previous return type}0,1 when %select{block literal|lambda expression}2 has unspecified explicit return type
array size is negative
non-object type %0 is not assignable
no viable conversion%select{%diff{ from $ to $|}1,2|%diff{ from returned value of type $ to function return type $|}1,2}0
no viable conversion%diff{ from $ to incomplete type $|}0,1
%select{comparison between %diff{ ($ and $)|}0,1|arithmetic operation with operands of type %diff{ ($ and $)|}0,1|conditional operator with the second and third operands of type %diff{ ($ and $)|}0,1}2 which are pointers to non-overlapping address spaces
ordered comparison of function pointers (%0 and %1)
ordered comparison between pointer and zero (%0 and %1)
arithmetic on%select{ a|}0 pointer%select{|s}0 to%select{ the|}2 function type%select{|s}2 %1%select{| and %3}2
arithmetic on%select{ a|}0 pointer%select{|s}0 to void
illegal storage class on file-scoped variable
illegal storage class on function
statement requires expression of integer type (%0 invalid)
statement requires expression of scalar type (%0 invalid)
%diff{$ and $ are not pointers to compatible types|pointers to incompatible types}0,1
array subscript is not an integer
subscripted value is not an array, pointer, or vector
cannot combine fixed-length and sizeless %select{SVE|RVV}0 vectors in expression, result is ambiguous (%1 and %2)
cannot combine GNU and %select{SVE|RVV}0 vectors in expression, result is ambiguous (%1 and %2)
three-way comparison between pointer and zero
invalid argument type %0 to unary expression
vector operands do not have the same number of elements (%0 and %1)
cannot convert between vector values of different size (%0 and %1)
cannot convert between %select{scalar|vector}0 type %1 and vector type %2 as implicit conversion would cause truncation
cannot convert between vector and non-scalar values (%0 and %1)
only zero-length WebAssembly tables are currently supported
zero-length arrays are not permitted in %select{C++|SYCL device code}0
__type_descriptor_t must be a 64bit enum type when using typed operator new
typed allocation of over aligned types is not supported
scoped typed operator new and delete are not permitted
unsupported: anonymous type given name for linkage purposes by %select{typedef|alias}0 declaration after its linkage was computed; add a tag name here to establish linkage prior to definition
typedef member %0 cannot be a bit-field
typedef name must be an identifier
missing 'typename' prior to dependent type name '%0%1'
missing 'typename' prior to dependent type template name '%0%1'
no type named %0 in %1
no type named 'type' in %0; 'enable_if' cannot be used to disable this declaration
failed requirement '%0'; 'enable_if' cannot be used to disable this declaration
typename specifier refers to non-type member %0 in %1
typename specifier refers to non-type %0
typename specifier refers to a dependent using declaration for a value %0 in %1
%0 is unavailable
%0 is unavailable in ARC
%0 is unavailable: %1
%0 has unknown return type; cast the call to its declared return type
no known method %select{%objcinstance1|%objcclass1}0; cast the message send to the method's return type
%0 has unknown type; cast it to its declared type to use it
declaration of %0 is missing in %1 class
undeclared identifier %0 in destructor name
use of undeclared label %0
definition of class %0 must be available to use Objective-C %select{array literals|dictionary literals|numeric literals|boxed expressions|string literals}1
cannot find protocol declaration for %0
cannot find protocol declaration for %0; did you mean %1?
use of undeclared %0
use of undeclared %0; did you mean %1?
use of undeclared identifier %0
use of undeclared identifier %0; did you mean %1?
cannot find interface declaration for %0
cannot find interface declaration for %0; did you mean %1?
cannot find interface declaration for %0, superclass of %1
cannot find interface declaration for %0, superclass of %1; did you mean %2?
inline variable %q0 is not defined
%select{function|variable}0 %q1 is used but not defined in this translation unit, and cannot be defined in any other translation unit because its type does not have linkage
cannot determine underlying type of incomplete enumeration type %0
%select{expression|base type|declaration type|data member type|bit-field size|static assertion|fixed underlying type|enumerator value|using declaration|friend declaration|qualifier|initializer|default argument|non-type template parameter type|exception type|partial specialization|__if_exists name|__if_not_exists name|lambda|block|type constraint|requirement|requires clause}0 contains%plural{0: an|:}1 unexpanded parameter pack%plural{0:|1: %2|2:s %2 and %3|:s %2, %3, ...}1
friends can only be classes or functions
unexpected interface name %0: expected expression
unexpected namespace name %0: expected expression
unexpected type name %0: expected expression
cannot define the implicit copy assignment operator for %0, because non-static %select{reference|const}1 member %2 cannot use copy assignment operator
%select{constructor for %1|implicit default constructor for %1|cannot use constructor inherited from %1:}0 must explicitly initialize the %select{reference|const}2 member %3
unions cannot be base classes
union member %0 has reference type %1
the address of a declaration with unknown type can only be cast to a pointer type
address-of operator cannot be applied to a call to a function with unknown return type
function %0 with unknown type must be given a function type
variable %0 with unknown type cannot be given a function type
unknown state '%0'
no type named %0 in %1; did you mean %select{|simply }2%3?
unknown receiver %0; did you mean %1?
unknown %select{type|class}1 name %0; did you mean %2?
unknown type name %0
unknown type name %0; did you mean %1?
must explicitly qualify name of member function when taking its address
constrained placeholder types other than simple 'auto' on non-type template parameters not supported yet
call to unsupported expression with unknown type
%0 has unknown type, which is not supported for this kind of declaration
unsupported expression with unknown type
cannot cast %0 to its %select{private|protected}2 base class %1
illegal redeclaration of property in class extension %0 (attribute must be 'readwrite', while its primary must be 'readonly')
illegal redeclaration of 'readwrite' property in class extension %0 (perhaps you intended this to be a 'readwrite' redeclaration of a 'readonly' public property?)
use of default argument to function %0 that is declared later in class %1
reference to unresolved using declaration
taking address of non-addressable standard library function
use of %0 with tag type that does not match previous declaration
using declaration cannot refer to class member
using declaration cannot refer to a namespace
target of using declaration conflicts with declaration already in scope
declaration conflicts with target of using declaration already in scope
using declaration cannot refer to a constructor
%0 is not a direct base of %1, cannot inherit constructors
using declaration cannot refer to a destructor
cannot befriend target of using declaration
using declaration refers to its own class
using declaration refers into '%0', which is not a base class of %1
using declaration in class refers into '%0', which is not a class
redeclaration of using declaration
using declaration pack expansion at block scope produces multiple values
using declaration cannot refer to a template specialization
dependent using declaration resolved to type without 'typename'
no namespace named %0 in %1; did you mean %select{|simply }2%3?
no namespace named %0; did you mean %1?
redeclaration of using-enum declaration
using-enum cannot name a dependent type
%0 is not an enumerated type
'using_if_exists' attribute cannot be applied to an inheriting constructor
%select{|member}0 using declaration %1 instantiates to an empty pack
using declaration requires a qualified name
'typename' keyword used on a non-type
cannot call operator __uuidof on a type with multiple GUIDs
cannot call operator __uuidof on a type with no GUID
CUDA device code does not support va_arg
'va_start' cannot be used in a captured statement
'va_start' used in function with fixed args
'va_start' cannot be used outside a function
'va_start' used in %select{System V|Win64}0 ABI function
array types cannot be value-initialized
variable template partial specialization %0 cannot be redefined
no variable template matches%select{| partial}0 specialization
no variable template matches specialization; did you mean to use %0 as function template instead?
%select{variable|static data member}0 instantiated with function type %1
variable-sized object may not be initialized
'new' cannot allocate object of variably modified type %0
non-type template parameter of variably modified type %0
variably modified type %0 cannot be used as a template argument
'typeid' of variably modified type %0
CUDA device code does not support variadic functions
first two arguments to %0 must have the same type
first two arguments to %0 must be vectors
'vec_step' requires built-in scalar or vector type, %0 invalid
%select{too many|too few}0 elements in vector initialization (expected %1 elements, have %2)
unions cannot have virtual functions
second argument to __builtin_virtual_member_address must be the address of a virtual C++ member function: for example '&Foo::func'
'virtual' cannot be specified on member function templates
first argument to __builtin_virtual_member_address must have a type deriving from class where second argument was defined
first argument to __builtin_virtual_member_address must have C++ class type
'virtual' can only appear on non-static member functions
'virtual' can only be specified inside the class definition
variable length array declaration cannot have 'extern' linkage
variable length array declaration cannot have 'static' storage duration
variable length array declaration not allowed at file scope
variable length array cannot be formed during template argument deduction
variable length arrays are not supported for %select{the current target|'%1'}0
variably modified type declaration cannot have 'extern' linkage
variably modified type declaration not allowed at file scope
function declaration cannot have variably modified type
'void' must be the first and only parameter if specified
'void' as parameter must not have type qualifiers
defaulted comparison function must not be volatile
argument %0 to %1 must be a 2-bit unsigned literal (i.e. 0, 1, 2 or 3)
%ordinal0 argument must be an integer
%ordinal0 argument must be a WebAssembly table
%ordinal0 argument must match the element type of the WebAssembly table in the %ordinal1 argument
cannot %select{capture|take address of}0 WebAssembly reference
cannot cast %select{to|from}0 a WebAssembly table
invalid use of '__funcref' keyword outside the WebAssembly triple
%select{pointer|reference}0 to WebAssembly reference type is not allowed
WebAssembly reference type not allowed in exception specification
multi-dimensional arrays of WebAssembly references are not allowed
cannot %select{throw|catch}0 a WebAssembly reference type
cannot %select{assign|return|throw|subscript}0 a WebAssembly table
cannot use WebAssembly table as a function parameter
cannot use a WebAssembly table within a branch of a conditional expression
WebAssembly table cannot be declared within a function
invalid application of '%0' to WebAssembly table
WebAssembly table must be static
cannot form a %select{pointer|reference}0 to a WebAssembly table
existing instance variable %1 for __weak property %0 must be __weak
sampler type cannot be used with the __local and __global address space qualifiers
invalid rounding argument
scale argument must be 1, 2, 4, or 8
tile arguments must refer to different tiles
%0 attribute can only be applied to a typedef or a field declaration
%0 attribute can only be applied to non-record types
invalid type signature semantic kind %1
%0 attribute can only be applied once per declaration
semantics kind '%1' repeated more than once
%0 calling convention is not supported %select{for this target|on variadic function|on constructor/destructor|on builtin function}1
duplicate use of asm operand name "%0"
asm-specifier for input or output variable conflicts with asm clobber list
overloaded %0 cannot have %select{no|a defaulted|more than one}1 parameter before C++23
use of function template name with no prior declaration in function call with explicit template arguments is a C++20 extension
initializer for aggregate is not a compile-time constant
anonymous types declared in an anonymous %select{struct|union}0 are an extension
types declared in an anonymous %select{struct|union}0 are a Microsoft extension
anonymous %select{struct|union}0 cannot be '%1'
anonymous unions are a C11 extension
initialization of an array %diff{of type $ from a compound literal of type $|from a compound literal}0,1 is a GNU extension
parenthesized initialization of a member array is a GNU extension
implicit conversion from array size expression of type %0 to %select{integral|enumeration}1 type %2 is a C++11 extension
ISO C++ standards before C++17 do not allow new expression for type %0 to use list-initialization
'auto' type specifier is a C++11 extension
ISO C++ does not allow %select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2 because it casts away qualifiers, even though the source and destination types are unrelated
anonymous structs are a C11 extension
%select{qualifier in |static |}0array size %select{||'[*] '}0is a C99 feature
flexible array members are a C99 feature
'trivial_abi' cannot be applied to %0
captured structured bindings are a C++20 extension
cast between pointer-to-function and pointer-to-object is an extension
%select{case value|enumerator value|non-type template argument|array size|explicit specifier argument|noexcept specifier argument}0 %select{cannot be narrowed from type %2 to %3|evaluates to %2, which cannot be narrowed to type %3}1
complex initialization specifying real and imaginary components is an extension
use of this statement in a constexpr %select{function|constructor}0 is a C++14 extension
use of this statement in a constexpr %select{function|constructor}0 is a C++20 extension
use of this statement in a constexpr %select{function|constructor}0 is a C++23 extension
multiple return statements in constexpr function is a C++14 extension
constexpr constructor that does not initialize all members is a C++20 extension
%select{constexpr|consteval}1 %select{function|constructor}0 never produces a constant expression
function try block in constexpr %select{function|constructor}0 is a C++20 extension
variable declaration in a constexpr %select{function|constructor}0 is a C++14 extension
uninitialized variable in a constexpr %select{function|constructor}0 is a C++20 extension
definition of a %select{static|thread_local}1 variable in a constexpr %select{function|constructor}0 is a C++23 extension
type definition in a constexpr %select{function|constructor}0 is a C++14 extension
constexpr union constructor that does not initialize any member is a C++20 extension
'constinit' specifier missing on initializing declaration of %0
use of the %0 attribute is a C++14 extension
use of the %0 attribute is a C++17 extension
use of the %0 attribute is a C++20 extension
designated initializers are a C++20 extension
decomposition declarations are a C++17 extension
ISO C++17 does not permit structured binding declaration in a condition
decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is a C++20 extension
default initialization of an object of const type %0%select{| without a user-provided default constructor}1 is a Microsoft extension
defaulted comparison operators are a C++20 extension
defaulted definition of %select{%select{<ERROR>|equality|three-way|equality|relational}1 comparison operator|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is a C++23 extension
cannot delete expression with pointer-to-'void' type %0
ISO C++11 does not allow conversion from string literal to %0
designated initializers are a C99 feature
array designators are a C99 extension
brace elision for designated initializer is a C99 extension
mixture of designated and non-designated initializers in the same initializer list is a C99 extension
nested designators are a C99 extension
ISO C++ requires field designators to be specified in declaration order; field %1 will be initialized after field %0
destructor cannot be declared using a %select{typedef|type alias}1 %0 of the class name
ISO C++ considers this destructor name lookup to be ambiguous
ISO C++ requires the name after '::~' to be found in the same scope as the name before '::~'
empty %select{struct|union}0 is a GNU extension
befriending enumeration type %0 is a C++11 extension
enumeration values exceed range of largest integer
ISO C restricts enumerator values to range of 'int' (%0 is too %select{small|large}1)
incremented enumerator value %0 is not representable in the largest integer type
enumerator value is not representable in the underlying type %0
explicit capture of 'this' with a capture default of '=' is a C++20 extension
ambiguous use of internal linkage declaration %0 defined in multiple modules
excess elements in %select{array|vector|scalar|union|struct}0 initializer
excess elements in initializer for indivisible sizeless type %0
excess elements in char array initializer
explicit conversion functions are a C++11 extension
duplicate explicit instantiation of %0 ignored as a Microsoft extension
qualifier in explicit instantiation of %q0 requires a template-id (a typedef is not permitted)
explicit specialization cannot have a storage class
expression is not an %select{integer|integral}0 constant expression; folding it to a constant is a GNU extension
flexible array member %0 in otherwise empty %select{struct|interface|union|class|enum}1 is a GNU extension
flexible array member %0 in otherwise empty %select{struct|interface|union|class|enum}1 is a Microsoft extension
%0 may not be used as an array element due to flexible array member
%0 may not be nested in a struct due to flexible array member
flexible array initialization is a GNU extension
flexible array member %0 in a union is a GNU extension
flexible array member %0 in a union is a Microsoft extension
'begin' and 'end' returning different types (%0 and %1) is a C++17 extension
ISO C forbids forward references to 'enum' types
redeclaration of already-defined enum %0 is a GNU extension
use of member %0 found via unqualified lookup into dependent bases of class templates is a Microsoft extension
use of member %0 before its declaration is a Microsoft extension
complex numbers are an extension in a freestanding C99 implementation
unqualified friend declaration referring to type outside of the nearest enclosing namespace is a Microsoft extension; add a nested name specifier
anonymous structs are a GNU extension
arithmetic on%select{ a|}0 pointer%select{|s}0 to%select{ the|}2 function type%select{|s}2 %1%select{| and %3}2 is a GNU extension
subscript of a pointer to void is a GNU extension
arithmetic on%select{ a|}0 pointer%select{|s}0 to void is a GNU extension
jump from this goto statement to its label is a Microsoft extension
imaginary constants are a GNU extension
function previously declared with an %select{explicit|implicit}0 exception specification redeclared with an %select{implicit|explicit}0 exception specification
call to undeclared function %0; ISO C99 and later do not support implicit function declarations
implicitly declaring library function '%0' with type %1
call to undeclared library function '%0' with type %1; ISO C99 and later do not support implicit function declarations
missing 'typename' prior to dependent type name %0%1; implicit 'typename' is a C++20 extension
in-class initializer for static data member of type %0 is a GNU extension
in-class initializer for static data member of type %0 requires 'constexpr' specifier
in-class initializer for static data member is not a constant expression; folding it to a constant is a GNU extension
%select{|pointer to |reference to }0incomplete type %1 is not allowed in exception specification
ISO C++17 does not allow incrementing expression of type bool
initialized lambda captures are a C++14 extension
initialized lambda pack captures are a C++20 extension
initializing an array from a '%0' predefined identifier is a Microsoft extension
constant expression evaluates to %0 which cannot be narrowed to type %1
type %0 cannot be narrowed to %1 in initializer list
non-constant-expression cannot be narrowed from type %0 to %1 in initializer list
initializer %select{partially |}0overrides prior initialization of this subobject
initializer-string for char array is too long
initializer %select{partially |}0overrides prior initialization of this subobject
inline variables are a C++17 extension
ISO C does not support '~' for complex conjugation of %0
complex integer types are a GNU extension
ISO C does not support '++'/'--' on complex integer type %0
static %select{function|variable}0 %1 is used in an inline function with external linkage
static %select{function|variable}0 %1 is used in an inline function with external linkage
return type of 'main' is not 'int'
ISO C++ does not allow 'main' to be used by a program
too many braces around %select{scalar |}0initializer
class member cannot be redeclared
exception specification in declaration does not match previous declaration
exception specification in explicit instantiation does not match instantiated one
%0 is missing exception specification '%1'
type specifier missing, defaults to 'int'; ISO C99 and later do not support implicit int
mixing declarations and code is a C99 extension
import of C++ module '%0' appears within extern "C" language linkage specification
redundant #include of module '%0' appears within %1
accessing inaccessible direct base %0 of %1 is a Microsoft extension
anonymous %select{structs|unions}0 are a Microsoft extension
static_cast between pointer-to-function and pointer-to-object is a Microsoft extension
using the undeclared type %0 as a default template argument is a Microsoft extension
non-type template argument containing a dereference operation is a Microsoft extension
explicit constructor calls are a Microsoft extension
forward references to 'enum' types are a Microsoft extension
implicit conversion between pointer-to-function and pointer-to-object is a Microsoft extension
%select{class template|class template partial|variable template|variable template partial|function template|member function|static data member|member class|member enumeration}0 specialization of %1 not in %select{a namespace enclosing %2|class %2 or an enclosing namespace}3 is a Microsoft extension
template argument for template type parameter must be a type; omitted 'typename' is a Microsoft extension
using declaration referring to inaccessible member '%0' (which refers to accessible member '%1') is a Microsoft compatibility extension
'mutable' on a reference type is a Microsoft extension
lookup of %0 in member access expression is ambiguous; using member of %1
use of enumeration in a nested name specifier is a C++11 extension
%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers in nested pointer types
when type is in parentheses, array cannot have dynamic size
declaration does not declare anything
%select{struct|union}0 without named members is a GNU extension
anonymous non-C-compatible type given name for linkage purposes by %select{typedef|alias}0 declaration; add a tag name here
non-class friend type %0 is a C++11 extension
'main' is not allowed to be declared _Noreturn
offset of on non-POD type %0
offset of on non-standard-layout type %0
initialization clause of OpenMP for loop is not in canonical form ('var = init' or 'T var = init')
Clang permits use of type 'double' regardless pragma if 'cl_khr_fp64' is supported
vector component name '%0' is a feature from OpenCL version 3.0 onwards
replacement function %0 cannot be declared 'inline'
declaring overloaded %0 as 'static' is a C++23 extension
out-of-line declaration of a member must be a definition
ISO C++ specifies that qualified reference to %0 is a constructor name rather than a %select{template name|type}1 in this context, despite preceding %select{'typename'|'template'}2 keyword
exception specification of overriding function is more lax than base version
ISO C++20 considers use of overloaded operator '%0' (with operand types %1 and %2) to be ambiguous despite there being a unique best viable function%select{ with non-reversed arguments|}3
ISO C++20 requires return type of selected 'operator==' function for rewritten '%1' comparison to be 'bool', not %0
redefinition of default argument
parameter %0 was not declared, defaults to 'int'; ISO C99 and later do not support implicit int
%diff{promoted type $ of K&R function parameter is not compatible with the parameter type $|promoted type of K&R function parameter is not compatible with parameter type}0,1 declared in a previous prototype
omitting the parameter name in a function definition is a C2x extension
%select{class|variable}0 template partial specialization is not more specialized than the primary template
%select{class|variable}0 template partial specialization contains %select{a template parameter|template parameters}1 that cannot be deduced; this partial specialization will never be used
plain '_Complex' requires a type specifier; assuming '_Complex double'
invoking a pointer to a 'const &' member function on an rvalue is a C++20 extension
predefined identifier is only valid inside function
pseudo-destructors on type void are a Microsoft extension
function definition with pure-specifier is a Microsoft extension
qualified destructor name only found in lexical scope; omit the qualifier to find this type name by unqualified lookup
redefinition of typedef %0 is a C11 feature
ISO C++17 does not allow 'register' storage class specifier
friend function %0 retaining previous language linkage is an extension
%select{void function|void method|constructor|destructor}1 %0 should not return a value
void %select{function|method|block}1 %0 should not return void expression
non-void %select{function|method}1 %0 should return a value
C++98 requires an accessible copy constructor for class %2 when binding a reference to a temporary; was %select{private|protected}0
no viable constructor %select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}0 of type %1; C++98 requires a copy constructor when binding a reference to a temporary
invalid application of '%0' to a function type
invalid application of '%0' to a void type
'%0' is not permitted on a declaration of a type
capture of '*this' by copy is a C++17 extension
static data member %0 in union is a C++11 extension
redeclaring non-static %0 as static is a Microsoft extension
'static' can only be specified inside the class definition
string literal operator templates are a GNU extension
ISO C90 does not allow subscripting non-lvalue array
overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension
address non-type template argument cannot be surrounded by parentheses
template argument uses local type %0
non-type template argument referring to %select{function|object}0 %1 with internal linkage is a C++11 extension
template argument uses unnamed type
'template' keyword outside of a template
declaration of %0 shadows template parameter
default template arguments for a function template are a C++11 extension
defining a type within '%select{__builtin_offsetof|offsetof}0' is a Clang extension
taking the address of a temporary object of type %0
ISO C forbids taking the address of an expression of type 'void'
method parameter type %diff{$ does not match super class method parameter type $|does not match super class method parameter type}0,1
C99 forbids casting nonscalar type %0 to the same type
cast to union type is a GNU extension
pointer comparisons before C11 need to be between two complete or two incomplete types; %0 is %select{|in}2complete and %1 is %select{|in}3complete
comparison of distinct pointer types%diff{ ($ and $)|}0,1
equality comparison between function pointer and void pointer (%0 and %1)
comparison between pointer and integer (%0 and %1)
incompatible operand types (%0 and %1)
pointer type mismatch%diff{ ($ and $)|}0,1
C99 forbids conditional expressions with only one void side
pointer/integer type mismatch in conditional expression%diff{ ($ and $)|}0,1
%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers
incompatible function pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3
incompatible pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3
%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 converts between pointers to integer types %select{with different sign|where one is of the unique plain 'char' type and the other is not}3
incompatible integer to pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3
incompatible pointer to integer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3
%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 converts between void pointer and function pointer
tentative definition of variable with internal linkage has incomplete non-array type %0
ISO C does not allow indirection on operand of type %0
ISO C++ does not allow indirection on operand of type %0
ordered comparison of function pointers (%0 and %1)
ordered comparison between pointer and zero (%0 and %1) is an extension
ordered comparison between pointer and integer (%0 and %1)
zero size arrays are an extension
typedef requires a name
missing 'typename' prior to dependent type name '%0%1'
'typename' occurs outside of a template
use of undeclared identifier %0; unqualified lookup into dependent bases of class template %1 is a Microsoft extension
ISO C++ requires a definition in this translation unit for %select{function|variable}0 %q1 because its type does not have linkage
unelaborated friend declaration is a C++11 extension; specify '%select{struct|interface|union|class|enum}0' to befriend %1
union member %0 has reference type %1, which is a Microsoft extension
unqualified base initializer of class templates is a Microsoft extension
use of out-of-scope declaration of %0%select{| whose type is not compatible with that of an implicit declaration}1
using declaration naming a scoped enumerator is a C++20 extension
using directive refers to implicitly-defined namespace 'std'
field %0 with variable sized type %1 not at the end of a struct or class is a GNU extension
variable templates are a C++14 extension
'main' is not allowed to be declared variadic
variable length arrays are a C99 feature
variable length array folded to constant array as an extension
'%0' cannot be signed or unsigned
constrained by %select{|implicitly }1%select{private|protected}0 inheritance here
%select{|implicitly }1declared %select{private|protected}0 here
protected %select{constructor|destructor}0 can only be used to %select{construct|destroy}0 a base class subobject
must name member using the type of the current context %0
can only access this member on an object of type %0
add stubs for missing protocol requirements
add a '@synthesize' directive
add a pair of parentheses to declare a variable
candidate function made ineligible by enable_if
declared with %0 attribute here
allocated with 'new%select{[]|}0' here
lookup in the object type %0 refers here
lookup from the current scope refers here
similar constraint expressions not considered equivalent; constraint expressions cannot be considered equivalent unless they originate from the same concept
similar constraint expression here
candidate found by name lookup is %q0
inherited from base class %0 here
member found by ambiguous name lookup
member type %0 found by ambiguous name lookup
because of ambiguity in conversion %diff{of $ to $|between types}0,1
anonymous namespace begins here
use __bridge to convert directly (no change in ownership)
use %select{__bridge_retained|CFBridgingRetain call}1 to make an ARC object available as a +1 %0
use %select{__bridge_transfer|CFBridgingRelease call}1 to transfer ownership of a +1 %0 into ARC
use __bridge with C-style cast to convert directly (no change in ownership)
use __bridge_retained with C-style cast to make an ARC object available as a +1 %0
use __bridge_transfer with C-style cast to transfer ownership of a +1 %0 into ARC
field has non-trivial ownership qualification
declaration uses type that is ill-formed in ARC
declaration in interface is not in the '%select{alloc|copy|init|new}0' family because %select{its result type is not an object pointer|its result type is unrelated to its receiver type}1
init method must return a type related to its receiver type
declaration in interface
block will be retained by %select{the captured object|an object strongly retained by the captured object}0
also accessed here
declaration uses __weak, but ARC is disabled
declaration uses __weak, which the current deployment target does not support
array %0 declared here
add 'u8' prefix to form a 'char8_t' string literal
conversion to %select{integral|enumeration}0 type %1 declared here
constraint '%0' is already present here
use constraint modifier "%0"
type %0 is incomplete
%select{and|because}0 '%1' evaluated to false
%select{and|because}0 '%1' (%2 %3 %4) evaluated to false
setter and getter must both be synthesized, or both be user defined, or the property must be nonatomic
attribute is here
annotating the 'if %select{constexpr|consteval}0' statement here
annotating the infinite loop here
previous %select{unmarked |}0overload of function is here
property should be changed to be readwrite
%0 has been explicitly marked %select{unavailable|deleted|deprecated}1 here
return type of 'await_ready' is required to be contextually convertible to 'bool'
explicitly cast the pointer to silence this warning
base class %0 specified here
bit-field is declared here
did you mean to use __block %0?
in call to printing function with arguments '(%0)' while dumping struct
called by %0
previous call is here%select{; set to nil to indicate it cannot be called afterwards|}0
%0 declared here
callee declares array parameter as static here
'trivial_abi' is disallowed on %0 because %select{its copy constructors and move constructors are all deleted|it is polymorphic|it has a base of a non-trivial class type|it has a virtual base|it has a __weak field|it has a field of a non-trivial class type|it has an address-discriminated __ptrauth field}1
declaration missing '[[carries_dependency]]' attribute is here
cast one or both operands to int to silence this warning
cast expression to void to silence warning
%select{category|class extension}0 conforms to protocol %1 which defines method %2
consider making the bitfield type %select{unsigned|signed}0
consider defining %0 with the '%1' calling convention
while checking constraint satisfaction for class template partial specialization '%0' required here
while checking constraint satisfaction for function '%0' required here
while checking constraint satisfaction for template '%0' required here
while checking constraint satisfaction for variable template partial specialization '%0' required here
class is declared here
explicitly declare getter %objcinstance0 with '%1' to return an 'unowned' object
parameter of the 'collapse' clause
in defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator for %1 first required here
compatible type %0 specified here
place parentheses around the string literal to silence warning
%select{and|because}0 '%1' evaluated to false
while checking the satisfaction of concept '%0' requested here
place parentheses around the assignment to silence this warning
use '==' to turn this assignment into an equality comparison
use '!=' to turn this compound assignment into an inequality comparison
conflicting attribute is here
conflicting prototype is here
conflicting %0 here
previous return statement is here
member not initialized by constructor
%select{data member %1|base class %2}0 declared here
virtual base class declared here
add the %select{'require_constant_initialization' attribute|'constinit' specifier}0 to the initializing declaration here
variable declared constinit here
while calculating associated constraint of template '%0' here
constraint depends on a previously diagnosed expression
while substituting template arguments into constraint expression here
type conversion function declared here
use 'static' to give inline function %0 internal linkage
must be declared with 'noexcept'
call to %0 implicitly required by coroutine function here
call to 'await_transform' implicitly required by 'co_await' here
call to '%select{initial_suspend|final_suspend}0' implicitly required by the %select{initial suspend point|final suspend point}0
conflicting __device__ function declared here
const variable cannot be emitted on device side due to dynamic initialization
the %select{1st|2nd|3rd}1 template parameter of %0 needs to be %select{a type|an integer or enum value}2
%0 needs to have exactly %1 template parameters
%0 needs to be instantiated from a class template with proper template arguments
host variable declared here
candidate template ignored: target attributes do not match
remove 'u8' prefix to avoid a change of behavior; Clang encodes unprefixed narrow string literals as UTF-8
annotate %select{%1|anonymous %1}0 with an availability attribute to silence this warning
this declaration is not a prototype; add %select{'void'|parameter declarations}0 to make it %select{a prototype for a zero-parameter function|one}0
declare the parameter __strong or capture a __block __strong variable to keep values alive across autorelease pools
function is a coroutine due to use of '%0' here
declared %select{'returns_nonnull'|'nonnull'}0 here
required by %select{'require_constant_initialization' attribute|'constinit' specifier}0 here
during template argument deduction for %select{class|variable}0 template %select{partial specialization |}1%2 %3
deduction guide declared %0 by intervening access specifier
member template declared %0 here
in instantiation of default argument for '%0' required here
default argument declared here
in instantiation of default function argument expression for '%0' required here
default member initializer declared here
defaulted %0 is implicitly deleted because implied %select{|'==' |'<' }1comparison %select{|for member %3 |for base class %3 }2is ambiguous
defaulted %0 is implicitly deleted because it would invoke a deleted comparison function%select{| for member %2| for base class %2}1
return type of defaulted 'operator<=>' cannot be deduced because return type %2 of three-way comparison for %select{|member|base class}0 %1 is not a standard comparison category type
selected 'operator<=>' for %select{|member|base class}0 %1 declared here
%select{|member|base class}0 %1 declared here
defaulted %0 is implicitly deleted because it would invoke a %select{private|protected}3 %4%select{ member of %6| member of %6 to compare member %2| to compare base class %2}1
defaulted %0 is implicitly deleted because there is no viable %select{three-way comparison function|'operator=='}1 for %select{|member |base class }2%3
three-way comparison cannot be synthesized because there is no viable function for %select{'=='|'<'}0 comparison
non-constexpr comparison function would be used to compare %select{|member %1|base class %1}0
non-constexpr comparison function declared here
defaulted %0 is implicitly deleted because this non-rewritten comparison function would be the best match for the comparison
defaulted %0 is implicitly deleted because a builtin comparison function using this conversion would be the best match for the comparison
defaulted %0 is implicitly deleted because class %1 has a reference member
defaulted %0 is implicitly deleted because %2 is a %select{union-like class|union}1 with variant members
%0 defined here
conversion to pointer type %0
qualify call to silence this warning
%select{copy|move}0 assignment operator of %1 is implicitly deleted because field %2 is of %select{reference|const-qualified}4 type %3
copy constructor of %0 is implicitly deleted because field %1 is of rvalue reference type %2
copy %select{constructor|assignment operator}0 is implicitly deleted because %1 has a user-declared move %select{constructor|assignment operator}2
%select{default constructor of|constructor inherited by}0 %1 is implicitly deleted because all %select{data members|data members of an anonymous union member}2 are const-qualified
%select{default constructor of|constructor inherited by}0 %1 is implicitly deleted because field %2 of %select{reference|const-qualified}4 type %3 would not be initialized
virtual destructor requires an unambiguous, accessible 'operator delete'
%select{default constructor of|copy constructor of|move constructor of|copy assignment operator of|move assignment operator of|destructor of|constructor inherited by}0 %1 is implicitly deleted because %select{base class %3|%select{||||variant }4field %3}2 %select{has %select{no|a deleted|multiple|an inaccessible|a non-trivial}4 %select{%select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor|%select{default|corresponding|default|default|default}4 constructor}0|destructor}5%select{||s||}4|is an ObjC pointer|has an address-discriminated ptrauth qualifier}6
function is implicitly deleted because its declared type does not match the type of an implicit %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0
candidate ignored: %select{not a function template|not a member of the enclosing namespace; did you mean to explicitly qualify the specialization?}0
must qualify identifier to find this declaration in dependent base class
template parameter is used in default argument declared here
add an explicit capture of 'this' to capture '*this' by reference
first non-designated initializer is here
non-type declaration found by destructor name lookup
type %0 found by destructor name lookup
direct member declared here
direct method %0 declared here
due to %0 being dllexported%select{|; try compiling in C++11 mode}1
asm operand name "%0" first referenced here
element %0 also has value %1
put the semicolon on a separate line to silence this warning
remove parentheses to declare a variable
change this ',' to a ';' to call %0
replace parentheses with an initializer to declare a variable
using declaration annotated with 'using_if_exists' here
type was declared read-only here
jump enters lifetime of block which captures a destructible C++ object
jump enters lifetime of block which captures a C struct that is non-trivial to destroy
jump enters lifetime of block which strongly captures a variable
jump enters lifetime of block which weakly captures a variable
jump enters lifetime of a compound literal that is non-trivial to destruct
jump enters a statement expression
%0 declared here
enum %0 was explicitly specialized here
remove extraneous parentheses around the comparison to silence this warning
use '=' to turn this equality comparison into an assignment
declared here%select{ in module '%1'|}0
place parentheses around comparison expression to evaluate it first
in evaluation of exception specification for %q0 needed here
jump exits scope of __block variable
jump exits lifetime of block which captures a destructible C++ object
jump exits lifetime of block which captures a C struct that is non-trivial to destroy
jump exits lifetime of block which strongly captures a variable
jump exits lifetime of block which weakly captures a variable
jump exits scope of variable with __attribute__((cleanup))
jump exits lifetime of a compound literal that is non-trivial to destruct
jump exits catch block
jump exits try block
jump exits scope of variable with non-trivial destructor
jump exits autoreleasepool block
jump exits @catch block
jump exits @finally block
jump exits scope of __strong variable
jump exits @synchronized block
jump exits @try block
jump exits scope of __weak variable
jump exits __except block
jump exits __finally block
jump exits __try block
jump exits scope of lifetime-extended temporary with non-trivial destructor
explicit %select{constructor|deduction guide}0 declared here
explicit instantiation candidate function %q0 template here %1
explicit instantiation definition is here
explicit instantiation refers here
while substituting explicitly-specified template arguments into function template %0 %1
'template<>' header not required for explicitly-specialized class %0 declared here
export block begins here
expression evaluates to '%0 %1 %2'
%select{and|because}0 type constraint '%1' was not satisfied:
%select{and|because}0 %1 does not satisfy %2:
%select{and|because}0 '%1' would be invalid: %2
%select{and|because}0 '%1' would be invalid
%select{and|because}0 '%1' may throw an exception
%select{and|because}0 '%1' would be invalid: %2
%select{and|because}0 '%1' would be invalid
extern "C" language linkage specification begins here
declared %select{in global scope|with C language linkage}0 here
did you forget ';'?
field designator refers here
add missing switch cases
mark %0 as '%select{final|sealed}1' to silence this warning
final overrider of %q0 in %1
add a count attribute within the declarator brackets or convert the parameter to a pointer with a count or size attribute
conflicting arguments for %select{count|end|terminator}0 were '%1' and '%2'
consider adding '%1' to '%0'
'%0' has been assigned here
'%0' is initialized with a '__single' pointer
previously assigned here
remove '&' to get address as %0 instead of %1
cast to %0 first to keep bounds of %1
silence by making the destination '__single'
%select{count|size}0 passed here
consider using '__null_terminated_to_indexable()' to perform this conversion. Note this conversion requires a linear scan of memory to find the null terminator
consider using '__unsafe_null_terminated_from_indexable()' to perform this conversion. Note this performs a linear scan of memory to find the null terminator
consider using '__unsafe_null_terminated_from_indexable()' with a pointer to the null terminator to perform this conversion. Note this performs the conversion in constant time
initialized flexible array member %0 is here
selected '%select{begin|end}0' %select{function|template }1%2 with iterator type %3
in implicit call to 'operator%select{!=|*|++}0' for iterator of type %1
member is not a candidate because range type %0 has no '%select{end|begin}1' member
did you mean to use '%0'?
treat the string as an argument to avoid this
format string is defined here
forward declaration of class here
%0 is not defined, but forward declared here; conversion would be valid if it was derived from %1
forward declaration of template entity is here
found near match '%0'
from 'diagnose_if' attribute on %0:
add enclosing parentheses to perform a function-style cast
did you mean %0?
while substituting deduced template arguments into function template %0 %1
in instantiation of function template specialization %q0 requested here
function template %q0 matches specialization %1
suffix with parentheses to turn this into a function call
prefix with the address-of operator to silence this warning
or because setter is declared here, but no getter method %0 is found
add 'module;' to the start of the file to introduce a global module fragment
inline assembly label %0 declared here
guarded_by declared here
hidden overloaded virtual function %q0 declared here%select{|: different classes%diff{ ($ vs $)|}2,3|: different number of parameters (%2 vs %3)|: type mismatch at %ordinal2 parameter%diff{ ($ vs $)|}3,4|: different return type%diff{ ($ vs $)|}2,3|: different qualifiers (%2 vs %3)|: different exception specifications}1
type declaration hidden
declaration hides type
conversion to %select{integral|enumeration}0 type %1 declared here
field of illegal %select{type|pointer type}0 %1 declared here
%0 is an immediate %select{function|constructor}5 because %select{its body|the%select{| default}7 initializer of %8}6 %select{evaluates the address of %select{an immediate|a consteval}2 function %1|contains a call to %select{an immediate|a consteval}2 %select{function|constructor}4 %1 and that call is not a constant expression}3
class implementation is declared here
when implemented by class %0
while checking implicit 'delete this' for virtual destructor
implicit %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 inferred target collision: call to both %select{__device__|__global__|__host__|__host__ __device__}1 and %select{__device__|__global__|__host__|__host__ __device__}2 members
%0 is an implicit parameter
explicitly defaulted function was implicitly deleted here
in implicit initialization of binding declaration %0
add 'constexpr'
while declaring the corresponding implicit 'operator==' for this defaulted 'operator<=>'
while declaring the implicit %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}1 for %0
when looking up '%select{begin|end}0' function for range expression of type %1
in implicit initialization of %select{array element %1 with omitted initializer|field %1 with omitted initializer|trailing array elements in runtime-sized array new}0
in initialization of temporary of type %0 created to list-initialize this reference
include the header <%0> or explicitly provide a declaration for '%1'
conformance of forward class %0 to protocol %1 can not be confirmed
possible target of %select{indirect|asm}0 goto statement
consider using __builtin_trap() or qualifying pointer with 'volatile'
use '|=' to turn this inequality comparison into an or-assignment
insert an explicit cast to silence this issue
initializing field %0 with default member initializer
%select{field|base class}0 %1 will be initialized after %select{field|base}2 %3
insert 'break;' to avoid fall-through
insert '%0;' to silence this warning
add an explicit instantiation declaration to suppress this warning if %q0 is explicitly instantiated in another translation unit
(skipping %0 context%s0 in backtrace; use -ftemplate-backtrace-limit=0 to see all)
%select{implicit|explicit}0 instantiation first required here
in the default initializer of %0
initialized here %0
it delegates to
instance variable is declared here
%select{implicitly |}2captured%select{| by reference}3%select{%select{ due to use|}2 here| via initialization of lambda capture %0}1
lambda expression begins here
default capture by %select{value|reference}0
while substituting into a lambda expression here
explicitly capture 'this'
implicit capture of lambda object due to conversion to block pointer here
capture %0 by %select{value|reference}1
%select{%select{reference|'std::initializer_list'}0 member|member with %select{reference|'std::initializer_list'}0 subobject}1 declared here
local declaration nearly matches
type of %ordinal0 parameter of local declaration does not match definition%diff{ ($ vs $)|}1,2
%select{via initialization of|binding reference}0 variable %select{%2 |}1here
the other acquisition of %0 '%1' is here
%0 acquired here
use '%0' for a bitwise operation
remove constant to silence this warning
add parentheses after the '!' to evaluate the %select{comparison|bitwise operator}0 first
add parentheses around left hand side expression to silence this warning
%select{decremented|incremented}0 here
change return type to 'int'
remove '_Noreturn'
member is declared here
member %0 declared here
member declaration does not match because it %select{is|is not}0 const qualified
member declaration nearly matches
type of %ordinal0 parameter of member declaration does not match definition%diff{ ($ vs $)|}1,2
member %0 first declared here
'->' applied to return value of the operator->() declared here
in %select{implicit|defaulted}0 %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}1 for %2 first required here
explicitly cast the argument to size_t to silence this warning
did you mean to compare the result of %0 instead?
method %0 declared here
compiler has implicitly changed method %0 return type
method %0 is used for the forward class
passing byval argument %0 with potentially incompatible alignment here
%0 begins here
function multiversioning caused by this declaration
target function has calling convention %1 (expected %0)
%0 declared here
add 'void' to the parameter list to turn an old-style K&R function declaration into a prototype
target function %select{is a member of different class%diff{ (expected $ but has $)|}1,2|has different number of parameters (expected %1 but has %2)|has type mismatch at %ordinal3 parameter%diff{ (expected $ but has $)|}1,2|has different return type%diff{ ($ expected but has $)|}1,2}0
target %select{constructor|destructor}0 is declared here
namespace %0 defined here
consider using vld1_%0%1() to initialize a vector from memory, or vcreate_%0%1() to initialize from an integer constant
consider using vld1q_%0%1() to initialize a vector from memory, or vcombine_%0%1(vcreate_%0%1(), vcreate_%0%1()) to initialize from integer constants
while checking the satisfaction of nested requirement requested here
%select{and|because}0 '%1' would be invalid%2
%select{and|because}0 '%1' would be invalid
next field declaration is here
next %select{instance variable declaration|synthesized instance variable}0 is here
type is not C-compatible due to this %select{base class|default member initializer|lambda expression|friend declaration|member declaration}0
non-deducible template parameter %0
not-yet-instantiated member is declared here
%0 is not literal because it has base class %1 of non-literal type
%0 is not literal because it has data member %1 of %select{non-literal|volatile}3 type %2
incomplete type %0 is not a literal type
lambda closure types are non-literal types before C++17
%0 is not literal because it is not an aggregate and has no constexpr constructors other than copy or move constructors
%0 is not literal because its destructor is not constexpr
%0 is not literal because it has a non-trivial destructor
%0 is not literal because it has a user-provided destructor
%select{struct|interface|class}0 with virtual base %plural{1:class|:classes}1 is not a literal type
non-template declaration found by name lookup
%select{%2 has subobjects that are|%3 has type %2 that is}0 non-trivial to %select{default-initialize|destruct|copy}1
non-usual %0 declared here
non-templated declaration is here
because it has a default argument
because field %0 has an initializer
field is non-trivial to %select{copy|default-initialize}0
because type %0 has a virtual %select{member function|base class}1
because no %select{<<ERROR>>|constructor|constructor|assignment operator|assignment operator|<<ERROR>>}2 can be used to %select{<<ERROR>>|copy|move|copy|move|<<ERROR>>}2 %select{base class|field|an object}0 of type %3
because %select{base class of |field of |}0type %1 has no default constructor
because type %0 has a member with %select{no|no|__strong|__weak|__autoreleasing}1 ownership
because its parameter is %diff{of type $, not $|of the wrong type}2,3
because the function selected to %select{construct|copy|move|copy|move|destroy}2 %select{base class|field}0 of type %1 is not trivial
because %select{base class of |field of |}0type %1 has a user-provided %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}2
because it is a variadic function
destructor for %0 is not trivial because it is virtual
%0 should be declared prior to the call site%select{| or in %2| or in an associated namespace of one of its arguments}1
add 'export' here if this is intended to be a module interface unit
%0 is not a structural type because it has a mutable non-static data member
%0 is not a structural type because it has a %select{non-static data member|base class}1 that is not public
%0 is not a structural type because it has a non-static data member of rvalue reference type
%0 is not a structural type because it has a %select{non-static data member|base class}1 of non-structural type %2
previous equal key is here
insert '%select{_Nonnull|_Nullable|_Null_unspecified}0' if the %select{pointer|block pointer|member pointer|array parameter}1 %select{should never be null|may be null|should not declare nullability}0
%0 specified here
use nullability type specifier %0 to affect the innermost pointer type of %1
%0 declared here
method marked as designated initializer of the class here
use 'isEqual:' instead
%select{first|second|third}0 parameter has unexpected type %1 (should be %2)
method returns unexpected type %0 (should be an object type)
add a super class to fix this problem
type parameter %0 declared here
method %0 that returns %1 declared here
%select{expected assignment expression|expected compound statement|expected exactly two expression statements|expected in right hand side of the first expression}0
%select{expected compound statement|expected exactly one expression statement|expected assignment statement|expected conditional operator|expect result value to be at false expression|expect binary operator in conditional expression|expect '<', '>' or '==' as order operator|expect comparison in a form of 'x == e', 'e == x', 'x ordop expr', or 'expr ordop x'|expect lvalue for result value|expect scalar value|expect integer value|unexpected 'else' statement|expect '==' operator|expect an assignment statement 'v = x'|expect a 'if' statement|expect no more than two statements|expect a compound statement|expect 'else' statement|expect a form 'r = x == e; if (r) ...'}0
%select{expected an expression statement|expected built-in assignment operator|expected expression of scalar type|expected lvalue expression}0
%select{expected an expression statement|expected built-in binary or unary operator|expected unary decrement/increment operation|expected expression of scalar type|expected assignment expression|expected built-in binary operator|expected one of '+', '*', '-', '/', '&', '^', '%|', '<<', or '>>' built-in operations|expected in right hand side of expression}0
as specified in %select{'collapse'|'ordered'|'collapse' and 'ordered'}0 clause%select{||s}0
conversion to %select{integral|enumeration}0 type %1 declared here
%select{|previous }0'hint' clause with value '%1'
%select{|previous }0directive with no 'hint' clause specified
explicit data sharing attribute requested here
explicit data sharing attribute, data mapping attribute, or is_device_ptr clause requested here
'%0' directive found here
jump exits scope of OpenMP structured block
defined as %0
memory order clause '%0' is specified here
implicitly determined as %0
expected length on mapping of 'this' array section expression to be '1'
expected lower bound on mapping of 'this' array section expression to be '0' or not specified
expected 'this' subscript expression on map clause to be 'this[0]'
loop step is expected to be %select{negative|positive}0 due to this condition
marked as 'declare variant' here
marked as 'device_type(%0)' here
%select{statement|directive}0 outside teams construct here
nested teams construct here
'nowait' clause is here
'ordered' clause%select{| with specified parameter}0
predefined trait '%0' used here
%select{static data member is predetermined as shared|variable with static storage duration is predetermined as shared|loop iteration variable is predetermined as private|loop iteration variable is predetermined as linear|loop iteration variable is predetermined as lastprivate|constant variable is predetermined as shared|global variable is predetermined as shared|non-shared variable in a task construct is predetermined as firstprivate|variable with automatic storage duration is predetermined as private}0%select{|; perhaps you forget to enclose 'omp %2' directive into a parallel or another task region?}1
previous allocator is specified here
'%0' clause is specified here
previous 'critical' region starts here
previous '%0' directive used here
'reduction' clause with 'inscan' modifier is used here
'%0' clause used here
previous clause with directive name modifier specified here
previously marked as task_reduction with different reduction operation
jump bypasses OpenMP structured block
previously referenced here
'%0' previously encountered here
%0 clause previously used here
predetermined as a firstprivate in a task construct here
previously declared '%0' here
use -foperator-arrow-depth=N to increase 'operator->' limit
'operator->' declared here produces an object of type %0
(skipping %0 'operator->'%s0 in backtrace)
parameter of overridden method is annotated with __attribute__((noescape))
overridden method is here
overridden virtual function is here
mark 'operator==' as const or add a matching 'operator!=' to resolve the ambiguity
ambiguous candidate function with reversed arguments
ambiguity is between a regular call to this operator and a call with the argument order reversed
candidate function with non-reversed arguments
built-in candidate %0
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %3}1%select{| has different class%diff{ (expected $ but has $)|}5,6| has different number of parameters (expected %5 but has %6)| has type mismatch at %ordinal5 parameter%diff{ (expected $ but has $)|}6,7| has different return type%diff{ ($ expected but has $)|}5,6| has different qualifiers (expected %5 but found %6)| has different exception specification}4
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: requires%select{ at least| at most|}3 %4 argument%s4, but %5 %plural{1:was|:were}5 provided
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: %select{requires at least|allows at most single|requires single}3 argument %4, but %plural{0:no|:%5}5 arguments were provided
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: cannot %select{pass pointer to|bind reference in}5 %3 %select{as a pointer to|to object in}5 %4 in %ordinal6 argument
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: 'this' object is in %3, but method expects object in %4
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: cannot implicitly convert argument %diff{of type $ to $|type to parameter type}3,4 for %select{%ordinal6 argument|object argument}5 under ARC
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: cannot %select{convert from|convert from|bind}3 %select{base class pointer|superclass|base class object of type}3 %4 to %select{derived class pointer|subclass|derived class reference}3 %5 for %ordinal6 argument
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: no known conversion %diff{from $ to $|from argument type to parameter type}3,4 for %select{%ordinal6 argument|object argument}5%select{|; dereference the argument with *|; take the address of the argument with &|; remove *|; remove &}7
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: cannot convert argument of incomplete type %diff{$ to $|to parameter type}3,4 for %select{%ordinal6 argument|object argument}5%select{|; dereference the argument with *|; take the address of the argument with &|; remove *|; remove &}7
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: %ordinal5 argument (%3) would lose %select{const|restrict|const and restrict|volatile|const and volatile|volatile and restrict|const, volatile, and restrict}4 qualifier%select{||s||s|s|s}4
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: 'this' argument has type %3, but method is not marked %select{const|restrict|const or restrict|volatile|const or volatile|volatile or restrict|const, volatile, or restrict}4
candidate template ignored: failed template argument deduction
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: %select{%ordinal7|'this'}6 argument (%3) has %select{no|__weak|__strong}4 ownership, but parameter has %select{no|__weak|__strong}5 ownership
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: %select{cannot convert initializer list|too few initializers in list|too many initializers in list}7 argument to %4
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: no overload of %4 matching %3 for %ordinal5 argument
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: %select{%ordinal7|'this'}6 argument (%3) has %select{no|__unsafe_unretained|__strong|__weak|__autoreleasing}4 ownership, but parameter has %select{no|__unsafe_unretained|__strong|__weak|__autoreleasing}5 ownership
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: %ordinal8 argument (%3) has %select{no ptrauth|%5}4 qualifier, but parameter has %select{no ptrauth|%7}6 qualifier
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: call to %select{__device__|__global__|__host__|__host__ __device__|invalid}3 function from %select{__device__|__global__|__host__|__host__ __device__|invalid}4 function
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: expects an %select{lvalue|rvalue}5 for %select{%ordinal4 argument|object argument}3
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: constraints not satisfied
candidate template ignored: deduced type %diff{$ of %select{|element of }4%ordinal0 parameter does not match adjusted type $ of %select{|element of }4argument|of %select{|element of }4%ordinal0 parameter does not match adjusted type of %select{|element of }4argument}1,2%3
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 has been %select{explicitly made unavailable|explicitly deleted|implicitly deleted}3
candidate template ignored: disabled by %0%1
candidate disabled: %0
candidate template ignored: requirement '%0' was not satisfied%1
explicit %select{constructor|conversion function|deduction guide}0 is not a candidate%select{| (explicit specifier evaluates to true)}1
candidate template ignored: invalid explicitly-specified argument for template parameter %0
candidate template ignored: invalid explicitly-specified argument for %ordinal0 template parameter
candidate address cannot be taken because parameter %0 has pass_object_size attribute
candidate %select{constructor|template}0 ignored: instantiation %select{takes|would take}0 its own class type by value
candidate constructor ignored: cannot be used to construct an object in address space %0
candidate template ignored: couldn't infer template argument %0
candidate template ignored: deduced too few arguments for expanded pack %0; no argument for %ordinal1 expanded parameter in deduced argument pack %2
candidate template ignored: deduced %select{conflicting types|conflicting values|conflicting templates|packs of different lengths}0 for parameter %1%diff{ ($ vs. $)|}2,3
candidate template ignored: deduced values %diff{of conflicting types for parameter %0 (%1 of type $ vs. %3 of type $)|%1 and %3 of conflicting types for parameter %0}2,4
constructor from base class %0 inherited here
candidate %select{constructor|template}0 ignored: inherited constructor cannot be used to %select{copy|move}1 object
candidate template ignored: substitution exceeded maximum template instantiation depth
candidate template ignored: could not match %diff{$ against $|types}0,1
candidate template ignored: could not match %q0 against %q1
candidate template ignored: substitution failure%0%1
candidate template ignored: cannot deduce a type for %0 that would make %2 equal %1
candidate template ignored: constraints not satisfied%0
conversion candidate of type %0
conversion candidate %0 not viable: constraints not satisfied
remaining %0 candidate%s0 omitted; pass -fshow-overloads=all to show them
declared with index %0 here
passing argument to parameter here
while substituting into concept arguments here; substitution failures not allowed in concept arguments
passing argument to parameter %0 here
parameter pack %0 declared here
parameter of type %0 is declared here
%0 has been marked as being introduced in %1 %2 here, but the deployment target is %1 %3
partial specialization matches %0
inline function performs a conversion which is forbidden in ARC
pointer %0 assigned here
pointer %0 declared here
pointer '%0' declared here
pointer %0 initialized here
possible target for call
when applied to this declaration
'#pragma clang attribute push' regions ends here
previous '#pragma pack' directive that modifies alignment is here
did you intend to use '#pragma pack (pop)' instead of '#pragma pack()'?
place parentheses around the %0 expression to evaluate it first
place parentheses around the '?:' expression to evaluate it first
place parentheses around the '%0' expression to silence this warning
previous module declaration is here
previously defined here
module loaded from '%0'
previous declaration of class template partial specialization %0 is here
previously declared '%1' here
previous attribute is here
%0 is a builtin with type %1
%0 declared here
previously declared as %0 here
for type %0
previous explicit instantiation is here
previous initialization for field %0 is here
previous initialization %select{|with side effects }0is here%select{| (side effects will not occur at run time)}0
previous inheritance model specified here
previously defined as an alias for %0
previous declaration of %0 is here
previous template specialization is here
previous uuid specified here
did you mean to call the %0 method?
while substituting prior template arguments into %select{non-type|template}0 template parameter%1 %2
use __attribute__((visibility("hidden"))) attribute instead
private module fragment begins here
property %0 is declared %select{deprecated|unavailable|partial}1 here
property declared here
property synthesized here
jump bypasses setup of __block variable
jump bypasses initialization of variable with __attribute__((cleanup))
jump enters controlled statement of consteval if
jump enters controlled statement of constexpr if
jump bypasses initialization of catch block
jump bypasses initialization of try block
jump enters controlled statement of if available
jump bypasses initialization of variable of non-trivial C struct type
jump bypasses auto release push of @autoreleasepool block
jump bypasses initialization of @catch block
jump enters Objective-C fast enumeration loop
jump bypasses initialization of @finally block
jump bypasses initialization of __strong variable
jump bypasses initialization of @synchronized block
jump bypasses initialization of @try block
jump bypasses initialization of __weak variable
jump bypasses initialization of __except block
jump bypasses initialization of __finally block
jump bypasses initialization of __try block
jump bypasses variable initialization
jump bypasses initialization of non-POD variable
jump bypasses variable with a non-trivial destructor
jump bypasses initialization of variable length array
jump bypasses initialization of VLA type alias
jump bypasses initialization of VLA typedef
protocol is declared here
protocol %0 has no definition
protocol method is here
it could also be property %select{of type %1|without attribute '%1'|with attribute '%1'|with getter %1|with setter %1}0 declared here
options parameter evaluated to '%0'
previous __ptrauth authentication %select{mode|option}0
%0 is incomplete
cannot take an address of a virtual member function if its return or argument types are incomplete
qualified call to %0::%1 is treated as a virtual call to %1 due to -fapple-kext
unimplemented pure virtual method %0 in %1
add a variable name to declare a %0 initialized with %1
receiver is instance of class declared here
receiver expression is here
receiver is treated with 'id' type for purpose of method lookup
default argument used here
'%0' included multiple times, additional include site here
'%0' included multiple times, additional include site in header from module '%1'
%select{reference|pointer}0 member declared here
%select{const|reference}0 member %1 will never be initialized
%0 returns a reference
%select{class|type alias}0 template declared here
use 'static_cast' to adjust the pointer correctly while %select{upcasting|downcasting}0
%select{overridden|current}0 method is explicitly declared 'instancetype'%select{| and is expected to return an instance of its class type}0
%select{overridden|current}0 method is part of the '%select{|alloc|copy|init|mutableCopy|new|autorelease|dealloc|finalize|release|retain|retainCount|self}1' method family%select{| and is expected to return an instance of its class type}0
%select{class|instance}0 method %1 is assumed to return an instance of its receiver type (%2)
overridden method returns an instance of its class type
remove the call to '%0' since unsigned values cannot be negative
remove call to max function and unsigned zero argument
remove std::move call here
remove parentheses to silence this warning
use function '%0' instead
replace 'default' with 'delete'
while rewriting comparison as call to 'operator<=>' declared here
repeated RISC-V 'interrupt' attribute is here
safe buffers debug: %0
pass -fsafe-buffer-usage-suggestions to receive code hardening suggestions
%select{function|method|block}0 has been explicitly marked sentinel here
declared here
if you supply your own aligned allocation functions, use -faligned-allocation to silence this diagnostic
%select{and|because}0 %1 does not satisfy %2
__single %select{parameter|global|local variable|return value from call to|element from array|struct member|union member}0 %1 assigned to %2 here
__single %select{parameter|global|local variable|return value from call to|element from array|struct member|union member}0 %1 assigned to %2 here results in %2 having the bounds of a single %3 (%4 bytes)%select{| but conversion of %2 to %6 requires %7 bytes or more}5
__single %select{parameter|global|local variable|return value from call to|element from array|struct member|union member}0 %1 %select{assigned to|used to initialize}9 %2 here results in %2 having the bounds of a single %3 (%4 bytes) but %select{%8|cast of %2 to %8}7 has pointee type %5 (%6 bytes)
attempt to specialize declaration here
explicitly specialized declaration is here
declare 'static' if the %select{variable|function}0 is not intended to be used outside of this translation unit
use array indexing to silence this warning
change size argument to be the size of the destination
change the argument to be the free space in the destination buffer minus the terminating null byte
did you mean %select{struct|interface|class}0 here?
because substituted constraint expression is ill-formed%0
add a deduction guide to suppress this warning
class with specified objc_requires_property_definitions attribute is declared here
surrounding namespace with visibility attribute ends here
surrounding namespace with visibility attribute starts here
parenthesize the second argument to silence
%select{parenthesize the third argument|cast the second argument to 'int'}0 to silence
conversion to %select{integral|enumeration}0 type %1
tail call required by %0 attribute here
non-type template argument refers to %select{function|object}0 here
non-type template argument refers here
template argument refers to function template %0, here
class template %0 was explicitly specialized here
in instantiation of template class %q0 requested here
class template %0 was instantiated here
template is declared here
%select{function template|class template|variable template|type alias template|template template parameter}0 %1 declared here
while checking a default template argument used here
in instantiation of enumeration %q0 requested here
in instantiation of exception specification for %0 requested here
declared as a non-template here
in instantiation of member class %q0 requested here
in instantiation of member function %q0 requested here
template non-type parameter has a different type %0 in template argument
previous non-type template parameter with type %0 is here
in instantiation of default member initializer %q0 requested here
template parameter has a different kind in template argument
template parameter is declared here
%select{too few|too many}0 template parameters in template template argument
previous default template argument defined here
previous default template argument defined in module %0
previous %select{template type|non-type template|template template}0 parameter%select{| pack}1 declared here
%select{template type|non-type template|template template}0 parameter%select{| pack}1 does not match %select{template type|non-type template|template template}0 parameter%select{ pack|}1 in template argument
previous template %select{declaration|template parameter}0 is here
use -ftemplate-depth=N to increase recursive template instantiation depth
in instantiation of requirement here
in instantiation of requirement parameters here
in instantiation of static data member %q0 requested here
in instantiation of template type alias %0 requested here
unnamed type used in template argument was declared here
in instantiation of variable template specialization %q0 requested here
thread warning in function %0
%select{destructor|deallocator}0 has a %select{non-throwing|implicit non-throwing}1 exception specification
function declared non-throwing here
required alignment of type %0 (%1 bytes) is larger than the supported alignment of C++ exception objects on this target (%2 bytes)
rewrite target here
%select{alignment|size}0 of first field is %1 bits
%0 is incomplete
%select{and|because}0 '%1' would be invalid: %2
%select{and|because}0 '%1' would be invalid
%select{function %1 which returns const-qualified type %2 declared here|variable %1 declared const here|%select{non-|}1static data member %2 declared const here|member function %q1 is declared const here|%select{|nested }1data member %2 declared const here}0
%select{first|second}0 operand was implicitly converted to type %1
did you mean to use '.' instead?
type is given name %0 for linkage purposes by this %select{typedef|alias}1 declaration
referenced member %0 is declared here
referenced %0 is declared here
enclose %0 in %select{an @available|a __builtin_available}1 check to silence this warning
remove the %select{'%1' if its condition|condition if it}0 is always %select{false|true}2
during field initialization in %select{this|the implicit default}0 constructor
uninitialized reference member is here
%select{uninitialized use occurs|variable is captured by block}0 here
%0 released here
pointer declared here
%select{declaration|definition|default argument declared|explicit specialization declared|partial specialization declared}0 here is not %select{visible|reachable|reachable|reachable|reachable|reachable}0
silence by adding parentheses to mark code as explicitly dead
used%select{| in pointer arithmetic| in buffer access}0 here
change type of %0 to '%select{std::span' to preserve bounds information|std::array' to label it for hardening|std::span::iterator' to preserve bounds information}1%select{|, and change %2 to '%select{std::span|std::array|std::span::iterator}1' to propagate bounds information between them}3
change type of %0 to '%select{std::span' to preserve bounds information|std::array' to label it for hardening|std::span::iterator' to preserve bounds information}1%select{|, and change %2 to safe types to make function %4 bounds-safe}3
unguarded header; consider using #ifdef guards or #pragma once
use non-reference type %0
use reference type %0 to prevent copying
use 'thread_local' to allow this
use non-reference type %0 to make construction explicit or type %1 to prevent copying
used here
used in initialization here
implicit default constructor suppressed by user-declared constructor
%select{|previous }0using declaration
use %select{an alias declaration|a typedef declaration|a reference|a const variable|a constexpr variable}0 instead
conflicting declaration
target of using declaration
%select{|previous }0using-enum declaration
add 'typename' to treat this using declaration as a type
in value-initialization of type %0 here
variable %0 is declared here
variable %0 is%select{| explicitly}1 captured here
initialize the variable %0 to silence this warning
previous declaration of variable template partial specialization is here
%select{%1 is a virtual base class of base class %2 declared here|virtual base class %1 declared here}0
variable length arrays are not supported for the current target
which delegates to
detected while default synthesizing properties in class implementation
widen this field to %0 bits to store all values of %1
within field of type %0 declared here
replace expression with '%0' %select{|or use 'xor' instead of '^' }1to silence this warning
non-virtual member function marked '%0' hides virtual member %select{function|functions}1
only virtual member functions can be marked '%0'
absolute value function %0 given an argument of type %1 but has parameter of type %2 which may cause truncation of value
abstract class is marked '%select{final|sealed}0'
initializer for virtual base class %0 of abstract class %1 will never be used
access declarations are deprecated; use using declarations instead
type of property %0 does not match type of accessor %1
acquiring %0 '%1' requires negative capability '%2'
%0 '%1' must be acquired before '%2'
Cycle in acquired_before/after dependencies, starting with '%0'
operator '%0' has lower precedence than '%1'; '%1' will be evaluated first
reference cannot be bound to dereferenced null pointer in well-defined C++ code; pointer may be assumed to always convert to true
reference cannot be bound to dereferenced null pointer in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0
requested alignment is less than minimum alignment of %1 for type %0
%select{aligning a value|the result of checking whether a value is aligned}0 to 1 byte is %select{a no-op|always true}0
requested alignment is not a power of 2
use of function %0 is discouraged; there is no way to check for failure but failure may still occur, resulting in a possibly exploitable security vulnerability
second argument to __builtin_alloca_with_align is supposed to be in bits
this coroutine may be split into pieces; not every piece is guaranteed to be inlined
multiple suitable %0 functions for %1; no 'operator delete' function will be invoked if initialization throws an exception
interrupt service routine should only call a function with attribute 'no_caller_saved_registers'
ARC %select{unused|__unsafe_unretained|__strong|__weak|__autoreleasing}0 lifetime qualifier on return type is ignored
assigning %select{array literal|dictionary literal|numeric literal|boxed expression|<should not happen>|block literal}0 to a weak %select{property|variable}1; object will be released after assignment
%select{destination for|source of}0 this %1 call is a pointer to ownership-qualified type %2
performSelector may cause a leak because its selector is unknown
weak %select{variable|property|implicit property|instance variable}0 %1 may be accessed multiple times in this %select{function|method|block|lambda}2 and may be unpredictably set to nil; assign to a strong variable to keep the object alive
weak %select{variable|property|implicit property|instance variable}0 %1 is accessed multiple times in this %select{function|method|block|lambda}2 but may be unpredictably set to nil; assign to a strong variable to keep the object alive
capturing %0 strongly in this block is likely to lead to a retain cycle
assigning retained object to %select{weak|unsafe_unretained}0 %select{property|variable}1; object will be released after assignment
assigning retained object to unsafe property; object will be released after assignment
method parameter of type %0 with no explicit ownership
argument value %0 is outside the valid range [%1, %2]
argument value %0 will result in undefined behaviour
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3 is deprecated
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated
call to function without interrupt attribute could clobber interruptee's VFP registers
array index %0 is past the end of the array (that has type %1%select{|, cast to %3}2)
array index %0 refers past the last possible element for an array in %1-bit address space containing %2-bit (%3-byte) elements (max possible %4 element%s5)
array index %0 is before the beginning of the array
ignored asm label '%0' on automatic variable
value size does not match register size specified by the constraint and modifier
requested alignment must be %0 bytes or smaller; maximum alignment assumed
unknown assumption string '%0'; attribute is potentially ignored
unknown assumption string '%0' may be misspelled; attribute is potentially ignored, did you mean '%1'?
the argument to %0 has side effects that will be discarded
%select{@available|__builtin_available}0 does not guard availability here; use if (%select{@available|__builtin_available}0) instead
specifying 'uuid' as an ATL attribute is deprecated; use __declspec instead
implicit use of sequentially-consistent atomic may incur stronger memory barriers than necessary
accessing a member of an atomic structure or union is undefined behavior
memory order argument to atomic operation is invalid
writable atomic property %0 cannot pair a synthesized %select{getter|setter}1 with a user defined %select{getter|setter}2
@protocol is using a forward protocol declaration of %0
'abi_tag' attribute on %select{non-inline|anonymous}0 namespace ignored
consumed analysis attribute is attached to member of class %0 which isn't marked as consumable
%0 attribute cannot be applied to this declaration
%0 attribute cannot be applied to a %select{function|method}1 with no parameters
%0 attribute argument must be a string literal specifying a Swift function name
%0 attribute for getter must not have any parameters besides 'self:'
%0 attribute has invalid identifier for the %select{base|context|parameter}1 name
%0 attribute is missing parameter label clause
%0 attribute cannot specify more than one 'self:' parameter
too %select{few|many}0 parameters in the signature specified by the %1 attribute (expected %2; got %3)
%0 attribute for setter must have one parameter for new value
%0 attribute for 'subscript' getter cannot have a 'newValue:' parameter
%0 attribute for 'subscript' must %select{be a getter or setter|have at least one parameter|have a 'self:' parameter}1
%0 attribute for 'subscript' setter cannot have multiple 'newValue:' parameters
%0 attribute for 'subscript' setter must have a 'newValue:' parameter
multiple identical address spaces specified for type
attribute %0 after definition is ignored
%0 attribute parameter %1 is negative and will be ignored
builtin call has undefined behaviour when called from a %0 function
builtin call is not valid when calling from a function without active ZA state
'cmse_nonsecure_entry' cannot be applied to functions with internal linkage
propagating dll attribute to %select{already instantiated|explicitly specialized}0 base class template without dll attribute is not supported
redeclaration of %q0 should not add %q1 attribute
explicit instantiation declaration should not be 'dllexport'
'dllexport' attribute ignored on explicit instantiation definition
definition of dllimport static field
attribute %0 has no effect when annotating an 'if %select{constexpr|consteval}1' statement
attribute %0 has no effect when annotating an infinite loop
%0 attribute can only be applied to instance variables or properties
%0 attribute ignored for field of type %1
%0 attribute is ignored because there exists no call expression inside the statement
%0 attribute is ignored because %1 is not a function pointer
%0 attribute ignored on inline function
%0 attribute ignored on a non-definition declaration
'%0' attribute cannot be specified on a definition
'%0' is not a valid builtin name for %1
'noescape' attribute ignored on parameter of non-pointer type %0
'nonnull' attribute applied to function with no pointer arguments
'nonnull' attribute when used on parameters takes no arguments
%0 attribute ignored when parsing type
'packed' attribute was ignored on bit-fields with single-byte alignment in older versions of GCC and Clang
%0 attribute only applies to a pointer or reference (%1 is invalid)
%0 attribute only applies to%select{| constant}1 pointer arguments
attribute declaration must precede definition
target does not support 'protected' visibility; using 'default'
%0 attribute only applies to return values that are pointers
%0 attribute only applies to return values that are pointers or references
#pragma %0(".drectve") has undefined behavior, use #pragma comment(linker, ...) instead
section attribute is specified on redeclared variable
'sentinel' attribute requires named arguments
'sentinel' attribute only supported for variadic %select{functions|blocks}0
%0 attribute argument not supported: %1
%0 attribute argument '%1' not supported on a global variable
unknown visibility %0
attribute %0 cannot be applied to %select{functions|Objective-C method}1 without return value
__weak attribute cannot be specified on a field declaration
__weak attribute cannot be specified on an automatic variable when ARC is not enabled
%0%select{ attribute|}1 only applies to %select{functions|unions|variables and functions|functions and methods|functions, methods and blocks|functions, methods, and parameters|variables|variables and fields|variables, data members and tag types|types and namespaces|variables, functions and classes|kernel functions|non-K&R-style functions}2
%0%select{ attribute|}1 only applies to %2
conflicting attributes %0 are ignored
property is assumed atomic when auto-synthesizing the property
readonly IBOutlet property %0 when auto-synthesized may not work correctly with 'nib' loader
'auto' storage class specifier is redundant and incompatible with C++11
auto property synthesis will not synthesize property %0 declared in protocol %1
'auto' deduced as 'id' in declaration of %0
auto property synthesis will not synthesize property %0; it will be implemented by its superclass, use @dynamic to acknowledge intention
autosynthesized property %0 will use %select{|synthesized}1 instance variable %2, not existing instance variable %3
Fuchsia API Level prohibits specifying a minor or sub-minor version
ignoring availability attribute %select{on '+load' method|with constructor attribute|with destructor attribute}0
only 'unavailable' and 'deprecated' are supported for Swift availability
unknown platform %0 in availability macro
feature cannot be %select{introduced|deprecated|obsoleted}0 in %1 version %2 before it was %select{introduced|deprecated|obsoleted}3 in version %4; attribute ignored
%select{reinterpret_cast|C-style cast}0 from %1 to %2 changes address space of nested pointers
cast from function call of type %0 to non-matching type %1
receiver type %0 is not 'id' or interface pointer, consider casting it to 'id'
base class %0 is uninitialized when used here to access %q1
binding reference member %0 to stack allocated %select{variable|parameter}2 %1
binding dereferenced null pointer to reference has undefined behavior
bit-field %0 is not wide enough to store all enumerators of %1
width of bit-field %0 (%1 bits) exceeds the width of its type; value will be truncated to %2 bit%s2
use of bitwise '%0' with boolean operands
bitwise negation of a boolean expression%select{;| always evaluates to 'true';}0 did you mean logical negation?
'%0' within '%1'
block captures an autoreleasing out-parameter, which may result in use-after-free bugs
attribute %0 ignored, because it cannot be applied to omitted return type
'%0' qualifier on omitted return type %1 has no effect
switch condition has boolean value
combining %select{'__counted_by'|'__sized_by'}0 with non-zero %select{count|size}0 (which cannot be null) and '_Nullable'; did you mean %select{'__counted_by_or_null'|'__sized_by_or_null'}0 instead?
combining %select{'__counted_by_or_null'|'__sized_by_or_null'}0 and '_Nonnull'; did you mean %select{'__counted_by'|'__sized_by'}0 instead?
braces around %select{scalar |}0initializer
'break' is bound to loop, GCC binds it to switch
'%0' will always overflow; destination buffer has size %1, but size argument is %2
use of unknown builtin %0
'...' as the only parameter of a function is incompatible with C standards before C2x
call to pure virtual member function %0 has undefined behavior; overrides of %0 in subclasses are not available in the %select{constructor|destructor}1 of %2
too %select{few|many}0 arguments in call to %1
%0 parameter marked 'called_once' is called twice
%select{|captured }1%0 parameter marked 'called_once' is never called
%0 parameter marked 'called_once' is never %select{used|called}1 when %select{taking true branch|taking false branch|handling this case|none of the cases applies|entering the loop|skipping the loop|taking one of the branches}2
cannot pass object of %select{non-POD|non-trivial}0 type %1 through variadic %select{function|block|method|constructor}2; call will abort at runtime
cannot resolve lock expression
empty case range specified
overflow converting case value to switch condition type (%0 to %1)
cast from %0 to %1 increases required alignment from %2 to %3
cast between incompatible calling conventions '%0' and '%1'; calls through this pointer may abort at runtime
cast %diff{from $ to $ |}0,1converts to incompatible function type
cast %diff{from $ to $ |}0,1converts to incompatible function type
nonnull %select{function call|parameter}0 '%1' will evaluate to 'true' on first encounter
cast of type %0 to %1 is deprecated; use sel_getName instead
cast from %0 to %1 drops %select{const and volatile qualifiers|const qualifier|volatile qualifier}2
cast from %0 to %1 must have all intermediate pointers const qualified to be safe
category is implementing a method which will also be implemented by its primary class
function with no prototype cannot use the %0 calling convention
%0 calling convention is not supported %select{for this target|on variadic function|on constructor/destructor|on builtin function}1
cannot refer to a non-static member from the handler of a %select{constructor|destructor}0 function try block
input conversion stopped due to an input byte that does not belong to the input codeset UTF-8
%select{class|category}0 %1 does not conform to protocol%plural{1: %3|2:s %3 and %4|3:s %3, %4 and %5|:s %3, %4, %5, ...}2
class method %objcclass0 not found (return type defaults to 'id')
class method %objcclass0 not found (return type defaults to 'id'); did you mean %objcclass2?
GCC does not allow the 'cleanup' attribute argument to be anything other than a simple identifier
passing union across security boundary via %select{parameter %1|return value}0 may leak information
property follows Cocoa naming convention for returning 'owned' objects
collection expression type %0 may not respond to %1
possible misuse of comma operator here
%select{self-|array }0comparison always evaluates to %select{a constant|true|false|'std::strong_ordering::equal'}1
bitwise comparison always evaluates to %select{false|true}0
bitwise or with non-zero value always evaluates to true
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated
comparison of different enumeration types in switch statement%diff{ ($ and $)|}0,1
completion handler is called twice
%select{|captured }1completion handler is never called
completion handler is never %select{used|called}1 when %select{taking true branch|taking false branch|handling this case|none of the cases applies|entering the loop|skipping the loop|taking one of the branches}2
suspicious concatenation of string literals in an array initialization; did you mean to separate the elements with a comma?
concatenated NSString literal for an NSArray expression - possibly missing a comma
using the result of an assignment as a condition without parentheses
using the result of an assignment as a condition without parentheses
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated
conflicting distributed object modifiers on parameter type in declaration of %0
conflicting parameter types in declaration of %0%diff{: $ vs $|}1,2
conflicting distributed object modifiers on return type in declaration of %0
conflicting return type in declaration of %0%diff{: $ vs $|}1,2
conflicting variadic declaration of method and its implementation
conflicting distributed object modifiers on parameter type in implementation of %0
conflicting parameter types in implementation of %0%diff{: $ vs $|}1,2
conflicting distributed object modifiers on return type in implementation of %0
conflicting return type in implementation of %0%diff{: $ vs $|}1,2
conflicting variadic declaration of method and its implementation
consteval if is always true in an %select{unevaluated|immediate}0 context
conversion function converting %0 to its base class %1 will never be used
conversion function converting %0 to itself will never be used
conversion function converting %0 to %1 will never be used
return type of 'coroutine_handle<>::address should be 'void*' (have %0) in order to get capability with existing async C API.
%0 is required to declare the member 'unhandled_exception()' when exceptions are enabled
%select{destination for|source of|first operand of|second operand of}0 this %1 call is a pointer to record %2 that is not trivial to %select{primitive-default-initialize|primitive-copy}3
%0 may not intend to support class template argument deduction
constructor parameter %0 shadows the field %1 of %2
use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14
multiple return statements in constexpr function is incompatible with C++ standards before C++14
constexpr function with no return statements is incompatible with C++ standards before C++14
variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14
type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14
return type deduction is incompatible with C++ standards before C++14
generic lambdas are incompatible with C++11
initialized lambda captures are incompatible with C++ standards before C++14
variable templates are incompatible with C++ standards before C++14
attribute %0 ignored, because it cannot be applied to a type
class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0
'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior
decomposition declarations are incompatible with C++ standards before C++17
inline variables are incompatible with C++ standards before C++17
by value capture of '*this' is incompatible with C++ standards before C++17
non-type template parameters declared with %0 are incompatible with C++ standards before C++17
use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20
aggregate initialization of type %0 from a parenthesized list of values is a C++20 extension
captured structured bindings are incompatible with C++ standards before C++20
use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20
constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20
function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20
uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20
constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20
virtual constexpr functions are incompatible with C++ standards before C++20
decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20
defaulted comparison operators are incompatible with C++ standards before C++20
explicitly defaulting this %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 with a type different from the implicit type is incompatible with C++ standards before C++20
designated initializers are incompatible with C++ standards before C++20
explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20
mangled name of %0 will change in C++17 due to non-throwing exception specification in function signature
use of implicit 'typename' is incompatible with C++ standards before C++20
initialized lambda capture packs are incompatible with C++ standards before C++20
%select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20
invoking a pointer to a 'const &' member function on an rvalue is incompatible with C++ standards before C++20
non-type template parameter of type %0 is incompatible with C++ standards before C++20
'char8_t' type specifier is incompatible with C++ standards before C++20
member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20
member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20
using declaration naming a scoped enumerator is incompatible with C++ standards before C++20
aggregate initialization of type %0 with user-declared constructors is incompatible with C++20
'auto' as a functional-style cast is incompatible with C++ standards before C++23
use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23
definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23
'constinit' specifier is incompatible with C++ standards before C++20
declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23
taking address of non-addressable standard library function is incompatible with C++20
type of UTF-8 string literal will change from array of const char to array of const char8_t in C++20
defaulted definition of %select{%select{<ERROR>|equality|three-way|equality|relational}1 comparison operator|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23
implicit conversion from array size expression of type %0 to %select{integral|enumeration}1 type %2 is incompatible with C++98
'auto' type specifier is incompatible with C++98
cast between pointer-to-function and pointer-to-object is incompatible with C++98
'constexpr' specifier is incompatible with C++98
constructor call from initializer list is incompatible with C++98
delegating constructors are incompatible with C++98
scalar initialized from empty initializer list is incompatible with C++98
initializing %0 from an empty initializer list is incompatible with C++98
befriending enumeration type %0 is incompatible with C++98
enumeration type in nested name specifier is incompatible with C++98
explicit conversion functions are incompatible with C++98
friend declaration naming a member of the declaring class is incompatible with C++98
jump from this goto statement to its label is incompatible with C++98
jump from this %select{indirect|asm}0 goto statement to one of its possible targets is incompatible with C++98
initialization of initializer_list object is incompatible with C++98
use of non-static data member %0 in an unevaluated context is incompatible with C++98
non-class friend type %0 is incompatible with C++98
%select{anonymous struct|union}0 member %1 with a non-trivial %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}2 is incompatible with C++98
passing object of trivial but non-POD type %0 through variadic %select{function|block|method|constructor}1 is incompatible with C++98
reference initialized from initializer list is incompatible with C++98
substitution failure due to access control is incompatible with C++98
static data member %0 in union is incompatible with C++98
jump from switch statement to this case label is incompatible with C++98
%select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}1 of type %2 when binding a reference to a temporary would %select{invoke an inaccessible constructor|find no viable constructor|find ambiguous constructors|invoke a deleted constructor}0 in C++98
redundant parentheses surrounding address non-type template argument are incompatible with C++98
local type %0 as template argument is incompatible with C++98
use of null pointer as non-type template argument is incompatible with C++98
non-type template argument referring to %select{function|object}0 %1 with internal linkage is incompatible with C++98
unnamed type as template argument is incompatible with C++98
use of 'template' keyword outside of a template is incompatible with C++98
default template arguments for a function template are incompatible with C++98
use of 'typename' outside of a template is incompatible with C++98
befriending %1 without '%select{struct|interface|union|class|enum}0' keyword is incompatible with C++98
'%0' type specifier is incompatible with C++98
inheriting constructors are incompatible with C++98
ms_struct may not produce Microsoft-compatible layouts for classes with base classes or virtual functions
object backing the pointer will be destroyed at the end of the full-expression
initializing pointer member %0 to point to a temporary object whose lifetime is shorter than the lifetime of the constructed object
%select{reference|backing array for 'std::initializer_list'}2 %select{|subobject of }1member %0 %select{binds to|is}2 a temporary object whose lifetime is shorter than the lifetime of the constructed object
%select{temporary %select{whose address is used as value of|%select{|implicitly }2bound to}4 %select{%select{|reference }4member of local variable|local %select{variable|reference}4}1|array backing %select{initializer list subobject of local variable|local initializer list}1}0 %select{%3 |}2will be destroyed at the end of the full-expression
-dealloc is being overridden in a category
declaration of %0 will not be visible outside of this function
declaration shadows a %select{local variable|variable in %2|static data member of %2|field of %2|typedef in %2|type alias in %2|structured binding}1
declaration shadows a %select{local variable|variable in %2|static data member of %2|field of %2|typedef in %2|type alias in %2|structured binding}1
ignoring __declspec(allocator) because the function return type %0 is not a pointer or reference type
attribute %0 is ignored, place it after "%select{class|struct|interface|union|enum|enum class|enum struct}1" to apply attribute to type declaration
exception specifications of %select{return|argument}0 types differ
%plural{1:enumeration value %1 not explicitly handled in switch|2:enumeration values %1 and %2 not explicitly handled in switch|3:enumeration values %1, %2, and %3 not explicitly handled in switch|:%0 enumeration values not explicitly handled in switch: %1, %2, %3...}0
atomic by default property %0 has a user defined %select{getter|setter}1 (property should be marked 'atomic' if this is intended)
explicitly defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator is implicitly deleted
explicitly defaulted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 is implicitly deleted
constructor for %0 creates a delegation cycle
%select{delete|destructor}0 called on %1 that is abstract but has non-virtual destructor
'delete' applied to a pointer-to-array type %0 treated as 'delete[]'
deleting pointer to incomplete type %0 may cause undefined behavior
%select{delete|destructor}0 called on non-final %1 that has virtual functions but non-virtual destructor
comparison between two arrays is deprecated; to compare array addresses, use unary '+' to decay operands to pointers
%0 is deprecated
Current handling of vector bool and vector pixel types in this context are deprecated. The default behaviour will soon change to that implied by the '-altivec-compat=xl' option
'deprecated' attribute on anonymous namespace ignored
builtin %0 is deprecated; use %1 instead
top-level comma expression in array subscript is deprecated in C++20 and unsupported in C++23
definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-declared copy %select{assignment operator|constructor}1
definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-declared destructor
definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-provided copy %select{assignment operator|constructor}1
definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-provided destructor
implementing deprecated %select{method|class|category}0
%0 may be deprecated because the receiver type is unknown
%0 currently has no effect on a using declaration
%select{decrement|increment}0 of object of volatile-qualified type %1 is deprecated
Implicit conversion between vector types ('%0' and '%1') is deprecated. In the future, the behavior implied by '-fno-lax-vector-conversions' will be the default.
identifier %0 preceded by whitespace in a literal operator declaration is deprecated
%0 is deprecated: %1
the '[[_Noreturn]]' attribute spelling is deprecated in C2x; use '[[noreturn]]' instead
out-of-line definition of constexpr static data member is redundant in C++17 and is deprecated
'register' storage class specifier is deprecated and incompatible with C++17
use of result of assignment to object of volatile-qualified type %0 is deprecated
conversion from string literal to %0 is deprecated
implicit capture of 'this' with a capture default of '=' is deprecated
volatile-qualified parameter type %0 is deprecated
volatile-qualified return type %0 is deprecated
volatile qualifier in structured binding declaration is deprecated
dereferencing %0; was declared with a 'noderef' type
dereferencing expression marked as 'noderef'
explicit call to +initialize results in duplicate call to +initialize
instance variable %0 is being directly accessed
explicit call to [super initialize] should only be in implementation of +initialize
body of cpu_dispatch function will be ignored
expression does not compute the number of elements in this array; element type is %0, not %1
'%0' will return the size of the pointer, not the array itself
%q0 redeclared inline; %1 attribute ignored
double precision constant requires %select{cl_khr_fp64|cl_khr_fp64 and __opencl_c_fp64}0, casting to single precision
acquiring %0 '%1' that is already held
attribute %0 is already applied with different arguments
attribute %0 is already applied
duplicate code segment specifiers
element %0 has been implicitly assigned %1 which another element has been assigned
multiple declarations of method %0 found and ignored
duplicate protocol definition of %0 is ignored
%select{destination for|source of|first operand of|second operand of}0 this %1 call is a pointer to %select{|class containing a }2dynamic class %3; vtable pointer will be %select{overwritten|copied|moved|compared}4
for loop has empty body
format string is empty
if statement has empty body
empty parentheses interpreted as a function declaration
range-based for loop has empty body
switch statement has empty body
while loop has empty body
converting the enum constant to a boolean
overflow in enumeration value
equality comparison with extraneous parentheses
exception of type %0 will be caught by earlier handler
declaration requires an exit-time destructor
expecting %0 '%1' to be held at start of each loop
expecting %0 '%1' to be held at the end of function
the implementation of header units is in an experimental phase
explicit instantiation of %0 that occurs after an explicit specialization has no effect
explicit instantiation cannot be 'inline'
explicit instantiation of %0 must occur at global scope
explicit instantiation of %0 not in a namespace enclosing %1
explicit instantiation of %q0 must occur in namespace %1
'extern' variable has an initializer
non-void coroutine does not return a value
non-void function does not return a value
non-void lambda does not return a value
function declared 'noreturn' should not return
field %0 is uninitialized when used here
class with destructor marked '%select{final|sealed}0' cannot be inherited from
%select{indexing into|pointer arithmetic over}1 a __bidi_indexable local variable %2 %select{assigned|initialized}3 from __single %select{parameter|global|local variable|return value from call to|element from array|struct member|union member}0 %4 results in %select{a trap when the offset is non-zero|an out-of-bounds pointer%select{| if the offset is >= %6| if the offset is >= %6 or < 0| if the offset is < 0}5}1
%select{UNUSED|UNUSED|UNUSED|UNUSED|assigning from|returning|passing|casting}0 __bidi_indexable local variable %1 will %select{UNUSED|likely trap|trap|trap (unless %1 is null)|UNUSED}2%select{ | in a future compiler version }6when converting to %3 due to %1 having the bounds of a __single pointer%select{. If %1 is non-null then any %select{count|size}7 > %8 will trap%select{. If %1 is null then any %select{count|size}7 != 0 will trap|}5|}4
%select{indexing into|pointer arithmetic over}0 __bidi_indexable local variable %1 that is assigned from a __single pointer results in %select{a trap when the offset is non-zero|an out-of-bounds pointer%select{| if the offset is >= %3| if the offset is >= %3 or < 0| if the offset is < 0}2}0
%select{indexing|UNUSED|dereferencing|accessing field %3 through|assigning from|returning|passing|UNUSED}0 __bidi_indexable %1%select{ at offset zero|||||||}0 will %select{access out-of-bounds memory and will trap in a future compiler version|UNUSED|access out-of-bounds memory and will trap in a future compiler version|always trap|propagate an out-of-bounds pointer|return an out-of-bounds pointer|pass an out-of-bounds pointer|UNUSED}0. At runtime %1 is assigned a __single pointer that results in %1 having bounds smaller than a single %2
%select{explicit|implicit}0 cast of __bidi_indexable %1 to a larger pointee type creates an out-of-bounds pointer. Later uses of the result may trap
%select{explicit|implicit}0 cast of out-of-bounds __bidi_indexable to __single will trap in a future compiler version due to the bounds of %1 being too small to access a single element of type %2
%select{array|pointer}0 annotated with %select{__unsafe_indexable|__bidi_indexable|__indexable|__single|__terminated_by}1 multiple times. Annotate only once to remove this warning
array with '%select{__counted_by|__sized_by}0' and the argument of the attribute should be defined in the same translation unit
%select{%diff{assigning to%select{ __indexable| __bidi_indexable|}3 type $ from%select{ __single|}4 type $|assigning%select{ __indexable| __bidi_indexable|}3 type from%select{ __single|}4 type}0,1|%diff{passing%select{ __single|}4 type $ to parameter of%select{ __indexable| __bidi_indexable|}3 type $|passing%select{ __single|}4 type to parameter of%select{ __indexable| __bidi_indexable|}3 type}0,1|%diff{returning%select{ __single|}4 type $ from a function with%select{ __indexable| __bidi_indexable|}3 result type $|returning%select{ __single|}4 type from a function with%select{ __indexable| __bidi_indexable|}3 result type}0,1|%diff{converting%select{ __single|}4 type $ to%select{ __indexable| __bidi_indexable|}3 type $|converting%select{ __single|}4 type to%select{ __indexable| __bidi_indexable|}3 type}0,1|%diff{initializing%select{ __indexable| __bidi_indexable|}3 type $ with an expression of%select{ __single|}4 type $|initializing%select{ __indexable| __bidi_indexable|}3 type with an expression of%select{ __single|}4 type}0,1|%diff{sending%select{ __single|}4 type $ to parameter of%select{ __indexable| __bidi_indexable|}3 type $|sending%select{ __single|}4 type to parameter of%select{ __indexable| __bidi_indexable|}3 type}0,1|%diff{casting%select{ __single|}4 type $ to%select{ __indexable| __bidi_indexable|}3 type $|casting%select{ __single|}4 type to%select{ __indexable| __bidi_indexable|}3 type}0,1|}2 results in %select{an __indexable|a __bidi_indexable}5 pointer that will trap if a non-zero offset is dereferenced%select{|. consider adding '__counted_by' to '%7'}6
%select{%diff{assigning to $ from incompatible type $|assigning type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1|}2 is an unsafe operation; use '__unsafe_terminated_by_from_indexable()' or '__unsafe_forge_terminated_by()' to perform this conversion
%select{%diff{assigning to $ from incompatible type $|assigning type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1|}2 that adds '__terminated_by' attribute is not allowed
non-null initialization of %select{'__counted_by_or_null'|'__sized_by_or_null'}0 pointer%select{| field}2 %1 with %select{count|size}0 %3 always fails
implicit zero-initialization of %select{'__counted_by'|'__sized_by'|'__counted_by_or_null'|'__sized_by_or_null'}0 %select{count|size}2 %select{field|variable}3 %1 against non-null pointer creates a non-dereferenceable pointer
%select{|implicit }0zero-initialization of %select{'__counted_by'|'__sized_by'}1 pointer%select{| field}3 %2 with non-zero %select{count|size}1 never succeeds
%select{|implicitly }0initializing field %1 of type %2 to NULL while '%3' is initialized with a value rarely succeeds
accessing elements of an unannotated incomplete array always fails at runtime
casting %0 to %1 creates a '%select{__indexable|__bidi_indexable}2' pointer %select{with bounds containing only one %3|with zero length due to %3 having unknown size)}4
initializer %0 has a side effect; this may lead to an unexpected result because the evaluation order of initialization list expressions is indeterminate
%select{count|size}0 value is not statically known: conversion from %4 to a %select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null}2 pointer type is invalid for any %select{count other than 0 or 1|size greater than %3}0%select{| unless the pointer is null}1
enumeration value %0 is out of range of flags in enumeration type %1
floating-point comparison is always %select{true|false}0; constant cannot be represented exactly in type %1
magnitude of floating-point constant too large for type %0; maximum is %1
magnitude of floating-point constant too small for type %0; minimum is %1
comparing floating point with == or != is unsafe
'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17
loop variable %0 %diff{of type $ binds to a temporary constructed from type $|binds to a temporary constructed from a different type}1,2
loop variable %0 creates a copy from type %1
loop variable %0 binds to a temporary value produced by a range of type %1
using '%%P' format specifier without precision
%select{values of type|enum values with underlying type}2 '%0' should not be used as format arguments; add an explicit cast to %1 instead
%select{values of type|enum values with underlying type}2 '%0' should not be used as format arguments; add an explicit cast to %1 instead
using '%0' format specifier, but argument has boolean value
format specifies type %0 but the argument has %select{type|underlying type}2 %1
format specifies type %0 but the argument has %select{type|underlying type}2 %1
format specifies type %0 but the argument has %select{type|underlying type}2 %1
using '%0' format specifier annotation outside of os_log()/os_trace()
invalid conversion specifier '%0'
invalid position specified for %select{field width|field precision}0
cannot mix positional and non-positional arguments in format string
'%0' %select{length modifier|conversion specifier}1 is not supported by ISO C
using length modifier '%0' with conversion specifier '%1' is not supported by ISO C
positional arguments are not supported by ISO C
format string is not a string literal
format string is not a string literal (potentially insecure)
length modifier '%0' results in undefined behavior or no effect with '%1' conversion specifier
format string should not be a wide string
position arguments in format strings start counting at 1 (not 0)
'%0' may overflow; destination buffer in argument %1 has size %2, but the corresponding specifier may require size %3
'%0' will always overflow; destination buffer has size %1, but format string expands to at least %2
'%0' will always overflow; destination buffer has size %1, but size argument is %2
'%0' size argument is too large; destination buffer has size %1, but size argument is %2
'%0' will always overflow; destination buffer has size %1, but the source string has length %2 (including NUL byte)
redefinition of forward class %0 of a typedef name of an object type is ignored
calling '%0' with a nonzero argument is unsafe
attempt to call %0 on non-heap %select{object %2|object: block expression|object: lambda-to-function-pointer conversion}1
cannot call function '%1' while %0 '%2' is held
calling function %1 requires holding %0 %select{'%2'|'%2' exclusively}3
calling function %1 requires holding %0 %select{'%2'|'%2' exclusively}3
calling function %0 requires negative capability '%1'
instantiation of function %q0 required here, but no definition is available
attribute is ignored on this statement as it only applies to functions; use '%0' on statements
function definition inside an Objective-C container is deprecated
statement attribute %0 has higher precedence than function attribute '%select{always_inline|flatten|noinline}1'
Objective-C GC does not allow weak variables on the stack
GCC does not allow the %0 attribute to be written on a type
GCC requires a function with the %0 attribute to be variadic
declaration requires a global constructor
declaration requires a global destructor
'gnu_inline' attribute requires function to be marked 'inline', attribute ignored
'gnu_inline' attribute without 'extern' in C++ treated as externally available, this changed in Clang 10
arithmetic on a null pointer treated as a cast from integer to pointer is a GNU extension
passing variable %1 by reference requires holding %0 %select{'%2'|'%2' exclusively}3
HIP does not support OpenMP target directives; directive has been ignored
%select{instance variable|property}2 with %0 attribute must be an object type (invalid %1)
IBOutletCollection properties should be copy/strong and not assign
assigning %select{field|instance variable}0 to itself
inheritance model ignored on %select{primary template|partial specialization}0
'objc_externally_retained' can only be applied to local variables %select{of retainable type|with strong ownership}0
implicit cast from type %0 to type %1 drops __unaligned qualifier
implicit truncation from %2 to bit-field changes value from %0 to %1
initialization of pointer of type %0 to null from a constant boolean expression
implicit conversion discards imaginary component: %0 to %1
implicit conversion from constant value %0 to 'BOOL'; the only well defined values for 'BOOL' are YES and NO
implicit conversion from enumeration type %0 to different enumeration type %1
implicit conversion increases floating-point precision: %0 to %1
implicit conversion from %0 cannot fit within the range of values for %1
implicit conversion turns floating-point number into integer: %0 to %1
implicit conversion loses floating-point precision: %0 to %1
implicit conversion when assigning computation result loses floating-point precision: %0 to %1
implicit conversion from %0 to %1 changes value from %2 to %3
implicit conversion of out of range value from %0 to %1 is undefined
implicit conversion from %0 to %1 changes non-zero value from %2 to %3
implicit conversion from floating-point type %0 to 'BOOL'
implicit conversion turns floating-point number into bool: %0 to %1
higher order bits are zeroes after implicit conversion
implicit conversion from integral type %0 to 'BOOL'
implicit conversion loses integer precision: %0 to %1
implicit conversion from %0 to %1 may lose precision
implicit conversion from %2 to %3 changes value from %0 to %1
implicit conversion loses integer precision: %0 to %1
implicit conversion from %2 to %3 changes value from %0 to %1
implicit conversion changes signedness: %0 to %1
operand of ? changes signedness: %0 to %1
implicit conversion from %0 to %1 changes value from %2 to %3
implicit conversion of out of range value from %0 to %1 is undefined
the resulting value is always non-negative after implicit conversion
implicit conversion of %select{NULL|nullptr}0 constant to %1
implicit boolean conversion of Objective-C object literal always evaluates to true
address of%select{| function| array}0 '%1' will always evaluate to 'true'
implicit truncation from %2 to a one-bit wide bit-field changes value from %0 to %1
implicit conversion turns string literal into bool: %0 to %1
implicit conversion turns vector to scalar: %0 to %1
class property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this class implementation
class property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this category
default assign attribute on property %0 which implements NSCopying protocol is not appropriate with -fobjc-gc[-only]
property is assumed atomic by default
declaration of built-in function '%0' requires the declaration of the 'jmp_buf' type, commonly provided in the header <setjmp.h>.
declaration of built-in function '%1' requires inclusion of the header <%0>
implicit declaration of function %0
block implicitly retains 'self'; explicitly mention 'self' to indicate this is intended behavior
import %select{module|name}0 cannot be applied to a function with a definition
direct base %0 is inaccessible due to ambiguity:%1
target exception specification is not superset of source
%select{%diff{assigning to $ from incompatible type $|assigning to type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1}2
incompatible vector types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2
encoding of %0 type is incomplete because %1 component has unknown encoding
argument %0 of type %1 with mismatched bound
%0 overrides a destructor but is not marked 'override'
%0 overrides a member function but is not marked 'override'
incrementing expression of type bool is deprecated and incompatible with C++17
'objc_independent_class' attribute may be put on a typedef only; attribute is ignored
indirection of non-volatile null pointer will be deleted, not trap
all paths through this function will call itself
constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11
type %0 cannot be narrowed to %1 in initializer list in C++11
non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11
initializing pointer member %0 with the stack address of %select{variable|parameter}2 %1
%select{field|base class}0 %1 will be initialized after %select{field|base}2 %3
initializer %select{partially |}0overrides prior initialization of this subobject
inline namespace reopened as a non-inline namespace
instance method %objcinstance0 not found (return type defaults to 'id')
instance method %objcinstance0 not found (return type defaults to 'id'); did you mean %objcinstance2?
instance method %0 found instead of class method %1
cast to %1 from smaller integer type %0
cast to %1 from smaller integer type %0
converting the result of '?:' with integer constants to a boolean always evaluates to 'true'
'internal_linkage' attribute on a non-static local variable is ignored
%select{MIPS|MSP430|RISC-V}0 'interrupt' attribute only applies to functions that have %select{no parameters|a 'void' return type}1
invalid use of a cast in an inline asm context requiring an lvalue: accepted due to -fheinous-gnu-extensions, but clang may remove support for this in the future
invalid constructor from class in system header, should not be explicit
local declaration of %0 hides instance variable
declaration of instance variables in the interface is deprecated
jump out of __finally block has undefined behavior
ignored 'inline' attribute on kernel function %0
kernel function %0 is a member function; this may not be accepted by nvcc
converting the result of '<<' to a boolean always evaluates to %select{false|true}0
converting the result of '<<' to a boolean; did you mean '(%0) != 0'?
first argument to __builtin_load_member_function_pointer must have a type deriving from class where second argument was defined
second argument to __builtin_load_member_function_pointer must be the address of a C++ member function: for example '&Foo::func', not null
%0 '%1' is acquired exclusively and shared in the same scope
%0 '%1' is not held on every path through here
'&&' within '||'
use of logical '%0' with constant operand
logical not is only applied to the left hand side of this %select{comparison|bitwise operator}0
'%0' is bound to current loop, GCC binds it to the enclosing loop
state of variable '%0' must match at the entry and exit of loop
only one parameter on 'main' declaration
variable named 'main' with external linkage has undefined behavior
bool literal returned from 'main'
taking the max of %select{a value and unsigned zero|unsigned zero and a value}0 is always equal to the other value
capture host side class data member by this pointer in device or host device lambda function may result in invalid memory access if this pointer is not accessible on device side
non-void coroutine does not return a value in all control paths
non-void function does not return a value in all control paths
non-void lambda does not return a value in all control paths
variable %0 may be uninitialized when %select{used here|captured by block}1
%0 may not respond to %1
extra qualification on member %0
size argument in %0 call is a comparison
messaging unqualified id
'mig_server_routine' attribute only applies to routines that return a kern_return_t
availability does not match previous declaration
%select{|overriding }4method %select{introduced after|deprecated before|obsoleted before}0 %select{the protocol method it implements|overridden method}4 on %1 (%2 vs. %3)
%select{|overriding }1method cannot be unavailable on %0 when %select{the protocol method it implements|its overridden method}1 is available
'delete%select{|[]}0' applied to a pointer that was allocated with 'new%select{[]|}0'; did you mean 'delete%select{[]|}0'?
import %select{module|name}0 (%1) does not match the import %select{module|name}0 (%2) of the previous declaration
nullability specifier %0 conflicts with existing specifier %1
%select{codeseg|section}0 does not match previous declaration
use of OSPtr outside of a return type
suggest braces around initialization of subobject
%plural{1:enumeration value %1 not handled in switch|2:enumeration values %1 and %2 not handled in switch|3:enumeration values %1, %2, and %3 not handled in switch|:%0 enumeration values not handled in switch: %1, %2, %3...}0
no case matching constant switch condition '%0'
auto property synthesis is synthesizing property not explicitly synthesized
missing field %0 initializer
format string missing
method has no return type specified; defaults to 'id'
no previous prototype for function %0
%0 availability is ignored without a valid 'SDKSettings.json' in the SDK
missing sentinel in %select{function call|method dispatch|block call}0
no previous extern declaration for non-static variable %0
mixing declarations and code is incompatible with standards before C99
comparison of integers of different signs: %0 and %1
modifying constructor parameter %0 that shadows a field of %1
multiple methods named %0 found
several methods with selector %0 of mismatched types are found for the @selector expression
CPU list contains duplicate entries; attribute ignored
extra qualification on member %0
vector initializers are not compatible with NEON intrinsics in big endian mode
array backing %select{initializer list subobject of the allocated object|the allocated initializer list}0 will be destroyed at the end of the full-expression
temporary bound to reference member of allocated object will be destroyed at the end of the full-expression
auto property synthesis will not synthesize property %0 because it is 'readwrite' but it will be synthesized 'readonly' via another property
auto property synthesis will not synthesize property %0 because it cannot share an ivar with another synthesized property
%select{struct|interface|union|class|enum}0 %1 does not declare any constructor to initialize its non-modifiable members
dynamic_cast will not work since RTTI data is disabled by %select{-fno-rtti-data|/GR-}0
typeid will not work since RTTI data is disabled by %select{-fno-rtti-data|/GR-}0
enums in the Microsoft ABI are signed integers by default; consider giving the enum %0 an unsigned underlying type to make this code portable
%0 '%1' is still held at the end of function
'nocf_check' attribute ignored; use -fcf-protection to enable the attribute
'noderef' can only be used on an array or pointer type
casting to dereferenceable pointer removes 'noderef' attribute
under -fcoro-aligned-allocation, the non-aligned allocation function for the promise type %0 has higher precedence than the global aligned allocation function
conflicting parameter types in declaration of %0: %1 vs %2
conflicting parameter types in implementation of %0: %1 vs %2
conflicting return type in declaration of %0: %1 vs %2
conflicting return type in implementation of %0: %1 vs %2
expression which evaluates to zero treated as a null pointer constant of type %0
cannot pass %select{non-POD|non-trivial}0 object of type %1 to variadic %select{function|block|method|constructor}2; expected type from format string was %3
a function %select{declaration|definition}0 without a prototype is deprecated in all versions of C %select{and is not supported in C2x|and is treated as a zero-parameter prototype in C2x, conflicting with a %select{previous|subsequent}2 %select{declaration|definition}3}1
%0 has virtual functions but non-virtual destructor
comparison of nonnull %select{function call|parameter}0 '%1' %select{not |}2equal to a null pointer is '%select{true|false}2' on first encounter
function %0 declared 'noreturn' should not return
not a Doxygen trailing comment
use of unary operator that may be intended as compound assignment (%0=)
not enough variable arguments in %0 declaration to fit a sentinel
case value not in enumerated type %0
integer constant not in range of enumerated type %0
alignment of 16 bytes for a struct member is not binary compatible with IBM XL C/C++ for AIX 16.1.0 or older
'nothrow' attribute conflicts with exception specification; attribute ignored
%0 attribute only applies to %select{Objective-C object|pointer|pointer-to-CF-pointer|pointer/reference-to-OSObject-pointer}1 parameters
%0 attribute only applies to %select{functions|methods|properties}1 that return %select{an Objective-C object|a pointer|a non-retainable pointer}2
overriding method has mismatched ns_consumed attribute on its parameter
duplicate key in dictionary literal
'NSObject' attribute may be put on a typedef only; attribute is ignored
overriding method has mismatched ns_returns_%select{not_retained|retained}0 attributes
null passed to a callee that requires a non-null argument
use of NULL in arithmetic operation
comparison between NULL and non-pointer %select{(%1 and NULL)|(NULL and %1)}0
comparison of %select{address of|function|array}0 '%1' %select{not |}2equal to a null pointer is always %select{true|false}2
synthesized setter %0 for null_resettable property %1 does not handle nil
null returned from %select{function|method}0 that requires a non-null return value
nullability specifier %0 cannot be applied to non-pointer type %1; did you mean to apply the specifier to the %select{pointer|block pointer|member pointer|function pointer|member function pointer}2?
inferring '_Nonnull' for pointer type within %select{array|reference}0 is deprecated
implicit conversion from nullable pointer %0 to non-nullable pointer type %1
%select{pointer|block pointer|member pointer}0 is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified)
array parameter is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified)
string is ill-formed as UTF-8 and will become a null %0 when boxed
using %0 directive in %select{NSString|CFString}1 which is being passed as a formatting argument to the formatting %select{method|CFfunction}2
adding %0 to %1 might cause circular dependency in container
object of type %0 is not compatible with %select{array element type|dictionary key type|dictionary value type}1 %2
designated initializer missing a 'super' call to a designated initializer of the super class
designated initializer invoked a non-designated initializer
designated initializer should only invoke a designated initializer on 'super'
%0 attribute isn't implemented by this Objective-C runtime
direct attribute on property %0 ignored (not implemented by this Objective-C runtime)
method override for the designated initializer of the superclass %objcinstance0 not found
%0 bridges to %1, not %2
%0 cannot bridge to %1
assignment to Objective-C's isa is deprecated in favor of object_setClass()
direct access to Objective-C's isa is deprecated in favor of object_getClass()
direct comparison of %select{an array literal|a dictionary literal|a numeric literal|a boxed expression|}0 has undefined behavior
'+load' is called at app startup and can increase launch time; consider using '+initialize' instead
method possibly missing a [super %0] call
cannot catch an exception thrown with @throw in C++ in the non-unified exception model
bitmasking for introspection of Objective-C object pointers is strongly discouraged
bitmasking for introspection of Objective-C object pointers is strongly discouraged
objc_precise_lifetime is not meaningful for %select{__unsafe_unretained|__autoreleasing}0 objects
'assign' property of object type may become a dangling reference; consider using 'unsafe_unretained'
'copy' attribute must be specified for the block property when -fobjc-gc-only is specified
default property attribute 'assign' not appropriate for object
no 'assign', 'retain', or 'copy' attribute is specified - 'assign' is assumed
retain'ed block property does not copy the block - use copy attribute instead
setter cannot be specified for a readonly property
using %0 with a literal is redundant
parameterized class %0 already conforms to the protocols listed; did you forget a '*'?
%0 attribute cannot be applied to %select{methods in protocols|dealloc}1
class %0 defined without specifying a base class
convenience initializer missing a 'self' call to another initializer
convenience initializer should not invoke an initializer on 'super'
direct comparison of a string literal has undefined behavior
'objc_direct' attribute is ignored as 'objc_suppress_direct' attribute is applied
'objc_suppress_direct' attribute is ignored
%0 is incompatible with selectors that return a %select{struct|union|vector}1 type
the meaning of __weak has changed in manual reference-counting
%0 was declared with __weak, but __weak is ignored in files using manual reference counting
ignoring __weak in file using manual reference counting
use of old-style cast
aligned clause will be ignored because the requested alignment is not a power of 2
allocator with the 'thread' trait access has unspecified behavior on '%0' directive
declaration marked as declare target after first use, it may lead to incorrect results
'#pragma omp declare variant' cannot be applied to the function that was defined already; the original function might be used
'#pragma omp declare variant' cannot be applied for function after first usage; the original function might be used
variant function in '#pragma omp declare variant' is itself marked as '#pragma omp declare variant'
score expressions in the OpenMP context selector need to be constant; %0 is not and will be ignored
zero linear step (%0 %select{|and other variables in clause }1should probably be const)
OpenMP loop iteration variable cannot have more than 64 bits size and will be narrowed
minus(-) operator for reductions is deprecated; use + or user defined reduction instead
OpenMP only allows an ordered construct with the simd clause nested in a simd construct
Type %0 is not trivially copyable and not guaranteed to be mapped correctly
declaration is not declared in any declare target region
array section %select{lower bound|length}0 is of type 'char'
expected '#pragma omp end declare target' at end of file to match '#pragma omp %0'
allocate directive specifies %select{default|'%1'}0 allocator while previously used %select{default|'%3'}2
class implementation may not have super class
%0 attribute is deprecated and ignored in %1
passing non-generic address space pointer to %0 may cause dynamic conversion affecting performance
%0 should not return a null pointer unless it is declared 'throw()'%select{| or 'noexcept'}1
os_log() '%%n' format specifier is not allowed
result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4
type %0 requires %1 bytes of alignment and the default allocator only guarantees %2 bytes
overloaded operator %select{>>|<<}0 has higher precedence than comparison operator
%q0 hides overloaded virtual %select{function|functions}1
parameter of overriding method should be annotated with __attribute__((noescape))
passing %0-byte aligned argument to %1-byte aligned parameter %2%select{| of %4}3 may result in an unaligned pointer access
parameter '%0' not in expected state when the function returns: expected '%1', observed '%2'
argument not in expected state; expected '%0', observed '%1'
%0 is a large (%1 bytes) pass-by-value argument; pass it by reference instead ?
parentheses were disambiguated as a function declaration
parentheses were disambiguated as redundant parentheses around declaration of variable named %0
passing object of class type %0 through variadic %select{function|block|method|constructor}1%select{|; did you mean to call '%3'?}2
moving a temporary object prevents copy elision
moving a local object in a return statement prevents copy elision
taking the absolute value of %select{pointer|function|array}0 type %1 is suspicious
performing pointer arithmetic on a null pointer has undefined behavior%select{| if the offset is nonzero}0
comparing a pointer to a null character constant; did you mean to compare to %select{NULL|(void *)0}0?
dereference of type %1 that was reinterpret_cast from type %0 has undefined behavior
performing pointer subtraction with a null pointer %select{has|may have}0 undefined behavior
cast to smaller integer type %1 from %0
cast to smaller integer type %1 from %0
@selector expression formed with potentially direct selector %0
#pragma align(packed) may not be compatible with objects generated with AIX XL C/C++
unused attribute %0 in '#pragma clang attribute push' region
#pragma options align=reset failed: %0
expected #pragma pack parameter to be '1', '2', '4', '8', or '16'
the current #pragma pack alignment value is modified in the included file
unterminated '#pragma pack (push, ...)' at end of file
non-default #pragma pack value changes the alignment of struct or union members in the included file
specifying both a name and alignment to 'pop' is undefined
value of #pragma pack(show) == %0
#pragma %0(pop, ...) failed: %1
only variables can be arguments to '#pragma unused'
undeclared variable %0 used as an argument for '#pragma unused'
operator '?:' has lower precedence than '%0'; '%0' will be evaluated first
%0 has lower precedence than %1; %1 will be evaluated first
operator '?:' has lower precedence than '%0'; '%0' will be evaluated first
object format flags cannot be used with '%0' conversion specifier
'%select{*|.*}0' specified field %select{width|precision}0 is missing a matching 'int' argument
field %select{width|precision}0 should have type %1, but argument has type %2
data argument not used by format string
missing object format flag
format string contains '\0' within the string body
format string is not null-terminated
flag '%0' is ignored when flag '%1' is present
incomplete format specifier
more '%%' conversions than data arguments
'%0' is not a valid object format flag
'%%n' specifier not supported on this platform
flag '%0' results in undefined behavior with '%1' conversion specifier
%select{field width|precision}0 used with '%1' conversion specifier, resulting in undefined behavior
data argument position '%0' exceeds the number of data arguments (%1)
use of __private_extern__ on a declaration may not produce external symbol private to the linkage unit and is deprecated
property %0 not found on object of type %1; did you mean to access property %2?
property attribute in class extension does not match the primary class
'%1' attribute on property %0 does not match the property inherited from %2
property declared as returning non-retained objects; getter returning retained objects
primary property declaration is implicitly strong while redeclaration in class extension is weak
property access is using %0 method which is deprecated
getter name mismatch between property redeclaration (%1) and its original declaration (%0)
property type %0 is incompatible with type %1 inherited from %2
property %select{of type %1|with attribute '%1'|without attribute '%1'|with getter %1|with setter %1}0 was selected for synthesis
passing the value that %1 points to by reference requires holding %0 %select{'%2'|'%2' exclusively}3
the pointer incremented by %0 refers past the end of the array (that has type %1)
the pointer incremented by %0 refers past the last possible element for an array in %1-bit address space containing %2-bit (%3-byte) elements (max possible %4 element%s5)
the pointer decremented by %0 refers before the beginning of the array
'objc_independent_class' attribute may be put on Objective-C object pointer type only; attribute is ignored
authenticating a null pointer will almost certainly trap
signing a null pointer will yield a non-null pointer
'%0' type qualifier%s1 on return type %plural{1:has|:have}1 no effect
attribute 'readonly' of property %0 restricts attribute 'readwrite' of property inherited from %1
receiver %0 is a forward class and corresponding @interface may not exist
receiver type %0 for instance message is a forward declaration
incompatible redeclaration of library function %0
%q0 redeclared without %1 attribute: previous %1 ignored
%q0 redeclared without 'dllimport' attribute: 'dllexport' attribute added
#pragma redefine_extname is applicable to external C declarations only; not applied to %select{function|variable}0 %1
redefinition of %0 will not be visible outside of this function
variable %0 is %select{decremented|incremented}1 both in the loop header and in the loop body
redundant move in return statement
redundant parentheses surrounding declarator
reference %0 is not yet bound to a value when used here
'register' storage specifier on @catch parameter will be ignored
'reinterpret_cast' %select{from|to}3 class %0 %select{to|from}3 its %select{virtual base|base at non-zero offset}2 %1 behaves differently from 'static_cast'
method is expected to return an instance of its class type %diff{$, but is declared to return $|, but is declared to return different type}0,1
protocol method is expected to return an instance of the implementing class, but is declared to return %0
%select{remainder|division}0 by zero is undefined
'require_constant_initialization' attribute added after initialization of variable
identifier %0 is reserved because %select{<ERROR>|it starts with '_' at global scope|it starts with '_' and has C language linkage|it starts with '__'|it starts with '_' followed by a capital letter|it contains '__'}1
%0 is a reserved name for a module
returning address of label, which is local
returning %select{address of|reference to}0 local temporary object
%select{address of|reference to}0 stack memory associated with %select{local variable|parameter}2 %1 returned
manual %0 of an OSSharedPtr is error-prone
non-void %select{function|method}1 %0 should return a value
return state set for an unconsumable type '%0'
return value not in expected state; expected '%0', observed '%1'
return value of %0 is a large (%1 bytes) pass-by-value object; pass it by reference instead ?
%0 has C-linkage specified, but returns user-defined type %1 which is incompatible with C
%0 has C-linkage specified, but returns incomplete type %1 which could be incompatible with C
repeated RISC-V 'interrupt' attribute
instance method %0 is being used on 'Class' which is not in the root class
sampler initializer has invalid %0 bits
zero field width in scanf format string is unused
no closing ']' for '%%[' in scanf format string
second argument to 'va_start' is not the last named parameter
second argument to 'va_arg' is of promotable type %0; this va_arg has undefined behavior because arguments will be promoted to %1
second argument to 'va_arg' is of non-POD type %0
second argument to 'va_arg' is of ARC ownership-qualified type %0
explicitly assigning value of variable of type %0 to itself%select{|; did you mean to assign to member %2?}1
explicitly assigning value of variable of type %0 to itself%select{|; did you mean to assign to member %2?}1
explicitly moving variable of type %0 to itself%select{|; did you mean to move to member %2?}1
property %0 requires method %1 to be defined - use @synthesize, @dynamic or provide a method implementation in this class implementation
property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this category
%select{parameter|non-static data member}3 %0 %select{|of %1 }3shadows member inherited from type %2
shift count >= width of type
shifting a negative signed value is undefined
shift count is negative
signed shift result (%0) requires %1 bits to represent, but %2 only has %3 bits
signed shift result (%0) sets the sign bit of the shift expression's type (%1) and becomes negative
expression with side effects will be evaluated despite being used as an operand to 'typeid'
expression with side effects has no effect in an unevaluated context
signed bit-field %0 needs an extra bit to represent the largest positive enumerators of %1
sizeof on pointer operation will return size of %0 instead of %1
sizeof on array function parameter will return size of %0 instead of %1
'%0' call operates on objects of type %1 while the size is based on a different type %2
did you mean to %select{dereference the argument to 'sizeof' (and multiply it by the number of elements)|remove the addressof in the argument to 'sizeof' (and multiply it by the number of elements)|provide an explicit length}0?
argument to 'sizeof' in %0 call is the same pointer type %1 as the %select{destination|source}2; expected %3 or an explicit length
initializer order does not match the declaration order
variable %0 is %select{used|captured}1 uninitialized whenever %select{'%3' condition is %select{true|false}4|'%3' loop %select{is entered|exits because its condition is false}4|'%3' loop %select{condition is true|exits because its condition is false}4|switch %3 is taken|its declaration is reached|%3 is called}2
line splicing in Doxygen comments are not supported
'%0' ignored on this declaration
array argument is too small; %select{contains %0 elements|is of size %0}2, callee requires at least %1
the message in this static assertion is not a constant expression
non-constant static local variable in inline function may be different in different files
'main' should not be declared static
static variable %0 is suspiciously used within its own initialization
multiple methods named %0 found
@selector expression formed with potentially direct selector %0
a %select{function|block}0 declaration without a prototype is deprecated %select{in all versions of C|}0
passing arguments to %select{a function|%1}0 without a prototype is deprecated in all versions of C and is not supported in C2x
adding %0 to a string pointer does not append to the string
adding %0 to a string does not append to the string
result of comparison against %select{a string literal|@encode}0 is unspecified (use an explicit string comparison function instead)
size argument in %0 call appears to be size of the source; expected the size of the destination
the value of the size argument in 'strncat' is too large, might lead to a buffer overflow
size argument in 'strncat' call appears to be size of the source
the value of the size argument to 'strncat' is wrong
%2 defined as %select{a struct|an interface|a class}0%select{| template}1 here but previously declared as %select{a struct|an interface|a class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI
%select{struct|interface|class}0%select{| template}1 %2 was previously declared as a %select{struct|interface|class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI
subtraction of pointers to type %0 of zero size has undefined behavior
array subscript is of type 'char'
%0 overrides a destructor but is not marked 'override'
%0 overrides a member function but is not marked 'override'
block could be declared with attribute 'noreturn'
%select{function|method}0 %1 could be declared with attribute 'noreturn'
field %0 can overwrite instance variable %1 with variable sized type %2 in superclass %3
'size' argument to bzero is '0'
%select{'size' argument to memset is '0'|setting buffer to a 'sizeof' expression}0; did you mean to transpose the last two arguments?
'swift_newtype' attribute may be put on a typedef only; attribute is ignored
template parameter of a function template with the 'sycl_kernel' attribute cannot be a non-type template parameter
function template with 'sycl_kernel' attribute must have a single parameter
'sycl_kernel' attribute only applies to a function template with at least two template parameters
function template with 'sycl_kernel' attribute must have a 'void' return type
the semantics of this intrinsic changed with GCC version 4.4 - the newer semantics are provided here
taking address of packed member %0 of class or structure %q1 may result in an unaligned pointer value
version list contains duplicate entries
mixing 'target_clones' specifier mechanisms is permitted for GCC compatibility; use a comma separated sequence of string literals, or a string literal containing a comma-separated list of versions
version list contains entries that don't impact code generation
result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4
result of comparison of constant %0 with expression of type 'BOOL' is always %1, as the only well defined values for 'BOOL' are YES and NO
result of comparison of %select{%4|%1-bit %select{signed|unsigned}2 value}0 %3 %select{%1-bit %select{signed|unsigned}2 value|%4}0 is always %5
result of comparison %select{%3|%1}0 %2 %select{%1|%3}0 is always %4
overlapping comparisons always evaluate to %select{false|true}0
calling %0 is a violation of trusted computing base '%1'
non-type template argument with value '%0' converted to '%1' for unsigned template parameter of type %2
non-type template argument value '%0' truncated to '%1' for template parameter of type %2
exported templates are unsupported
dependent nested name specifier '%0' for friend template declaration is not supported; ignoring this friend declaration
dependent nested name specifier '%0' for friend class declaration is not supported; turning off access control for %1
extraneous template parameter list in template specialization
tentative array definition assumed to have one element
'this' pointer cannot be null in well-defined C++ code; pointer may be assumed to always convert to true
'this' pointer cannot be null in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0
%0 attribute requires arguments whose type is annotated with 'capability' attribute; type here is %1
%0 attribute can only be applied in a context annotated with 'capability' attribute
%0 only applies to pointer types; type here is %1
ignoring %0 attribute because its argument is invalid
%0 attribute without capability arguments refers to 'this', but %1 isn't annotated with 'capability' or 'scoped_lockable' attribute
%0 attribute without capability arguments can only be applied to non-static methods of a class
thread safety beta warning
thread safety verbose warning
%0 has a non-throwing exception specification but can still throw
underaligned exception object thrown
could not infer allocation type in call to '%0'
%select{alignment|size}0 of field %1 (%2 bits) does not match the %select{alignment|size}0 of the first field in transparent union; transparent_union attribute ignored
first field of a transparent union cannot have %select{floating point|vector}0 type %1; transparent_union attribute ignored
transparent_union attribute can only be applied to a union definition; attribute ignored
transparent union definition must contain at least one field; transparent_union attribute ignored
applying attribute %0 to a declaration is deprecated; apply it to the type instead
'%0' only applies to %select{function|pointer|Objective-C object or block pointer}1 types; type here is %2
specified %0 type tag requires a null pointer
argument type %0 doesn't match specified %1 type tag %select{that requires %3|}2
this type tag was not designed to be used with this function
incompatible function pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3
'%0' qualifier on function type %1 has no effect
'%0' qualifier on function type %1 has unspecified behavior
ordered comparison of function pointers (%0 and %1)
'%0' qualifier on reference type %1 has no effect
vector operands do not have the same elements sizes (%0 and %1)
unannotated fall-through between switch labels
unannotated fall-through between switch labels in partly-annotated function
implementing unavailable method
%0 may be unavailable because the receiver type is unknown
undeclared selector %0
undeclared selector %0; did you mean %1?
cannot find interface declaration for %0
cannot find interface declaration for %0; did you mean %1?
method definition for %0 not found
cannot find protocol definition for %0
inline function %q0 is not defined
%select{function|variable}0 %q1 has internal linkage but is not defined
reinterpret_cast from %0 to %1 has undefined behavior
%0 is only available on %1 %2 or newer
%0 is only available on %1 %2 or newer
__declspec attribute %0 is not supported
method %0 in protocol %1 not implemented
no method with selector %0 is implemented in this translation unit
block pointer variable %0 is %select{uninitialized|null}1 when captured by block
variable %0 is uninitialized when passed as a const reference argument here
variable %0 is uninitialized when used within its own initialization
reference %0 is not yet bound to a value when used within its own initialization
variable %0 is uninitialized when %select{used here|captured by block}1
unknown sanitizer '%0' ignored
releasing %0 '%1' that was not held
releasing %0 '%1' using %select{shared|exclusive}2 access, expected %select{shared|exclusive}3 access
%select{function|variable}0 %1 is not needed and will not be emitted
member function %0 is not needed and will not be emitted
'static' function %0 declared in header file should be declared 'static inline'
unqualified call to '%0'
code will never be executed
due to lvalue conversion of the controlling expression, association of type %0 will never be selected because it is %select{of array type|qualified}1
'break' will never be executed
default label in switch which covers all enumeration values
fallthrough annotation in unreachable code
loop will run at most once (loop increment never executed)
'return' will never be executed
%select{unsafe pointer operation|unsafe pointer arithmetic|unsafe buffer access|function introduces unsafe buffer manipulation|unsafe invocation of span::data}0
the two-parameter std::span construction is unsafe as it can introduce mismatch between buffer size and the bound information
%0 is an %select{unsafe pointer used for buffer access|unsafe buffer that does not perform bounds checks}1
multiple unsequenced modifications to %0
unsequenced modification and access to %0
taking the absolute value of unsigned type %0 has no effect
result of comparison of %select{%3|unsigned expression}0 %2 %select{unsigned expression|%3}0 is always %4
assigning value of signed enum type %1 to unsigned bit-field %0; negative enumerators of enum %1 will be converted to positive values
result of comparison of %select{%3|char expression}0 %2 %select{char expression|%3}0 is always %4, since char is interpreted as unsigned
result of comparison of %select{%3|unsigned enum expression}0 %2 %select{unsigned enum expression|%3}0 is always %4
unsupported branch protection specification '%0'
sorry, lifetime extension of %select{temporary|backing array of initializer list}0 created by aggregate initialization using default member initializer is not supported; lifetime of %select{temporary|backing array}0 will end at the end of the full-expression
%select{unsupported|duplicate|unknown}0%select{| CPU| tune CPU}1 '%2' in the '%select{target|target_clones|target_version}3' attribute string; '%select{target|target_clones|target_version}3' attribute ignored
parameter %0 set but not used
variable %0 set but not used
ignoring return value of function declared with %0 attribute
left operand of comma operator has no effect
%select{equality|inequality|relational|three-way}0 comparison result unused
unused variable %0
ignoring temporary created by a constructor declared with %0 attribute
ignoring temporary created by a constructor declared with %0 attribute: %1
container access result unused - container access should not be used for side effects
unused exception parameter %0
expression result unused
unused function %0
unused label %0
lambda capture %0 is not %select{used|required to be captured for this use}1
unused %select{typedef|type alias}0 %1
unused member function %0
unused parameter %0
private field %0 is not used
ivar %0 which backs the property is not referenced in this property's accessor
property access result unused - getters should not be used for side effects
ignoring return value of function declared with %0 attribute
ignoring return value of function declared with %0 attribute: %1
'[[%select{nodiscard|gnu::warn_unused_result}0]]' attribute ignored when applied to a typedef; consider using '__attribute__((warn_unused_result))' or '[[clang::warn_unused_result]]' instead
unused %select{function|variable}0 template %1
unused variable %0
expression result unused; should this cast be to 'void'?
expression result unused; assign into a variable to force a volatile load
invalid invocation of method '%0' on object '%1' while it is in the '%2' state
invalid invocation of method '%0' on a temporary object while it is in the '%1' state
%0 was marked unused but was used
user-defined literal suffixes %select{<ERROR>|not starting with '_'|containing '__'}0 are reserved%select{; no literal will invoke this operator|}1
using namespace directive in global context in header
passing %select{an object that undergoes default argument promotion|an object of reference type|a parameter declared with the 'register' keyword}0 to 'va_start' has undefined behavior
object of type %0 cannot be placed in read-only memory
%select{reading|writing}1 the value pointed to by %0 requires holding %select{any mutex|any mutex exclusively}1
%select{reading|writing}3 the value pointed to by %1 requires holding %0 %select{'%2'|'%2' exclusively}3
%select{reading|writing}3 the value pointed to by %1 requires holding %0 %select{'%2'|'%2' exclusively}3
instantiation of variable %q0 required here, but no definition is available
%select{reading|writing}1 variable %0 requires holding %select{any mutex|any mutex exclusively}1
%select{reading|writing}3 variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3
%select{reading|writing}3 variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3
field %0 with variable sized type %1 is not visible to subclasses and can conflict with their instance variables
variable%select{s| %1|s %1 and %2|s %1, %2, and %3|s %1, %2, %3, and %4}0 used in loop condition not modified in loop body
defaulted move assignment operator of %0 will move assign virtual base class %1 multiple times
Use of 'long' with '__vector' is deprecated
specifying vector types with the 'mode' attribute is deprecated; use the 'vector_size' attribute instead
variable length array used
cast to smaller integer type %1 from %0
cast to smaller integer type %1 from %0
dynamic exception specifications with types are currently ignored in wasm
weak identifier %0 never declared
an already-declared variable is made a weak_import declaration %0
this warning is no longer in use and will be removed in the next release
%0 has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit
using %select{integer|floating point|complex}1 absolute value function %0 when argument is of %select{integer|floating point|complex}2 type
result of '%0' is %1; did you mean exponentiation?
result of '%0' is %1; did you mean '%2'?
result of '%0' is %1; did you mean '%2' (%3)?
zero as null pointer constant
%select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++
%select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++
%0 is only available on %1 %2 and %3 %4 or newer
the selected methods are already implemented
method %0 cannot be renamed because it overrides a method declared in a system framework
no %select{implementation file|@implementation declaration}0 for the selected %select{declaration|@interface}0 %1; please add one and run the refactoring action again
the selected code is not a part of a function's / method's body
the selected expression can't be extracted
the selected expression is too simple to extract
refactoring action can't be initiated without a selection
the provided selection does not overlap with the AST nodes of interest
there is no symbol at the given location
%0 is a builtin function that cannot be renamed
%0 is declared in a %1 file; rename can be initiated in a %1 file only
%0 cannot be renamed because it is declared in a system header
caching backend error: %0
caching failed because the output can be non-deterministic
CAS cannot be initialized from the specified '-fcas-*' options: %0
CAS cannot load module with key '%0' from %1: %2
cannot load APINotes from include-tree-id '%0'
CAS cannot parse include-tree-id '%0'
CAS cannot parse root-id '%0' specified by -fcas-fs
CAS cannot parse root-id '%0' for module '%1'
Failed to establish connection with depscan daemon: %0
CAS-based dependency scan failed: %0
CAS filesystem cannot be initialized from root-id '%0': %1
CAS filesystem cannot set working directory to '%0' specified by -fcas-fs-working-directory
CAS missing expected include-tree '%0'
CAS missing expected root-id '%0'
failed to store to CAS: %0
clang-cache cannot find compiler binary %0
clang-cache failed to execute compiler: %0
missing compiler command for clang-cache
missing arguments for dep-scanning server mode
compile job cache backend did not find output '%0' for key '%1' (output ID: '%2')
compile job cache hit for '%0' => '%1'
compile job cache miss for '%0'
compile job cache miss for '%0' (result not found: '%1')
compile job cache skipped for '%0'
compile job cache backend key query time: %0
compile job cache backend key update time: %0
compile job cache backend load artifacts time: %0
compile job cache backend store artifacts time: %0
compile job dependency scanning time: %0
caching disabled because %0
__include_macrosestricted_intptr__ptrauth_restriuiltin_FILE_NAME__builtin_FILE_N__builtin_offsetof
__builtin_FUNCTION
ltin_choose_expr__builtin_choosereinterpret_castpes_compatible_p__builtin_types__source_location__builtin_source__builtin_COLUMN__builtin_va_arg__is_polymorphic__remove_pointer__is_scoped_enum__is_lvalue_expr__is_rvalue_exprly_constructible__is_trivially_clvalue_reference__add_lvalue_refrvalue_reference__add_rvalue_refstructor
__has_trivial_de__has_virtual_demove_constructor__has_trivial_moow_constructible__is_nothrow_con__is_constructible
__has_nothrow_copy
__has_trivial_cothrow_assignable__is_nothrow_assivially_copyablerow_destructible__is_nothrow_deshrow_move_assign__has_nothrow_movial_move_assignhrow_constructorvial_constructorially_assignable__is_trivially_ally_destructible__is_trivially_dlass
__is_interface_csign
__has_nothrow_as__has_trivial_asyout
__is_standard_laents
__remove_all_extce_t
__remove_referenRETTY_FUNCTION____PRETTY_FUNCTIOs_convertible_to__is_convertiblerray
__is_unbounded_a__is_bounded_array
__is_referenceab__can_pass_in_regs
ally_relocatable__is_trivially_raa_t
image2d_array_msth_t
image2d_msaa_depmo_get_type_data__builtin_tmo_geh_schema_options__builtin_ptrautauth_struct_discr_object_pointer__is_member_objexnu_type_summary__builtin_xnu_tyray_msaa_depth_tfunction_pointer__is_member_funcrauth_struct_keyrauth_schema_keyu_type_signature__is_fundamental__builtin_astypeimage1d_buffer_t__is_lvalue_refe__is_rvalue_refe2d_array_depth_timage2d_array_de__is_complete_type
__private_extern__module_privates_floating_point__is_floating_pos_member_pointer__is_member_poinaming_compatible__arm_streaming_uiltin_available__builtin_availa__builtin_bit_cain_convertvector__builtin_conver__arm_locally_sttual_inheritance__virtual_inheriiple_inheritance__multiple_inherance
__single_inherit_Nullable_resultnds_to_temporary__reference_bindtypes_compatible__builtin_FUNCSIG
__is_destructibl__remove_restrict
__remove_volatil__underlying_typ__bridge_transfe__bridge_retained
_Null_unspecifie__unknown_anytyp
in_stddef_wint_t_Builtin_stddef_ddef_max_align_t
ions
clang-format off        
 ]*import[
 ]+(static[
 ]*)?([^
 ]*)[
 ]*;
// clang-format on
// clang-format off
^[\t\ ]*#[\t\ ]*(import|include)[^"<]*(["<][^">]*[">])
module.modulemap////////////////A
_virtual_inherit__is_literal_typ__builtin_alignof
_multiple_inheriodulemap
module.private.mmodule_private.map
import_as_memberswift_infer_impoeclared_includesno_undeclared_inturn
_Builtin_stdnore_Builtin_stdbool_Builtin_stdatomic
_Builtin_inttype_Builtin_stdalig
scoped_allocatorinitializer_listcondition_variabnsafe_unretained__unsafe_unretai
address_sanitizeddress_sanitizerhwaddress_sanitiute_availabilityattribute_availanalyzer_noreturnattribute_analyzcoverage_sanitizer
ability_bridgeoslability_watchosvailability_tvosbility_driverkithavior_sanitizerundefined_behaviailability_swiftattribute_cf_ret_ext_vector_typeattribute_ext_vebute_ns_consumedattribute_ns_conbute_cf_consumedattribute_cf_conobjc_ivar_unusedattribute_objc_iattribute_ns_retjc_method_familyattribute_objc_mute_overloadableattribute_overlounused_on_fieldsattribute_unuseddiagnose_if_objcattribute_diagnoafety_attributesc_thread_safety_rator_attributesenumerator_attrilized_swift_namegeneralized_swifbility_on_arraysnullability_on_amemory_sanitizerthread_sanitizer_nullable_resultnullability_nulldataflow_sanitizptrauth_intrinsiptrauth_qualifieptrauth_objc_isahod_list_pointerptrauth_objc_metc_signable_classptrauth_objc_sigjc_interface_selptrauth_objc_intsa_authenticatesh_objc_isa_signs_objc_isa_stripsh_indirect_gotosptrauth_indirect_masking
lock_descriptorsptrauth_signed_bobjc_instancetypalifier_manglingobjc_protocol_qu_explicit_atomicobjc_property_exc_nonfragile_abiobjc_nonfragile_literals
objc_dictionary_c_array_literalsobjc_array_literobjc_subscripting
oxed_expressionsobjc_boxed_exprealue_expressionsobjc_boxed_nsvalonstant_literalsobjc_constant_li_cf_code_auditedarc_cf_code_audie_id_on_typedefsobjc_bridge_id_oenerics_varianceobjc_generics_vasert
objc_c_static_asc_class_propertyobjc_class_propexx_static_assertobjc_cxx_static_c_generic_selects_control_sfinaecxx_access_contr_alias_templatescxx_alias_templa_string_builtinscxx_constexpr_staulted_functionscxx_defaulted_fuing_constructorscxx_delegating_celeted_functionscxx_deleted_funcversions
cxx_explicit_conzed_initializerscxx_generalized_cxx_implicit_moves
cxx_inheriting_cnline_namespacescxx_inline_namespe_template_argscxx_local_type_tatic_member_initcxx_nonstatic_metrol
cxx_override_con_string_literalscxx_raw_string_lvalue_referencescxx_rvalue_refercxx_strong_enumscxx_static_assercxx_thread_local_trailing_returncxx_trailing_retrals
cxx_unicode_liteestricted_unionscxx_unrestrictedcxx_user_literalriadic_templatescxx_variadic_tem_aggregate_nsdmicxx_aggregate_ns_binary_literalscxx_binary_litertual_conversionscxx_contextual_ccxx_decltype_auto
_generic_lambdascxx_generic_lambcxx_init_captureelaxed_constexprcxx_relaxed_consn_type_deductioncxx_return_type_riable_templatescxx_variable_temhas_nothrow_assign
has_nothrow_copyhas_nothrow_conshas_trivial_assihas_trivial_copyhas_trivial_consivial_destructorhas_trivial_destrtual_destructorhas_virtual_destis_constructibleis_convertible_tis_standard_layout
is_trivially_assis_trivially_conis_trivially_copshadow_call_stack
rary
experimental_lib_relative_vtablecxx_abi_relativenoinline_keywordcuda_noinline_keemory_operationslete
typed_cxx_new_detyped_cxx_deletetarget_os_macrosdefine_target_os_scalar_divisionmatrix_types_scaith_outputs_fullgnu_asm_goto_witoto_with_outputsoadable_unmarkedoverloadable_unm__is_target_archype_pack_element__type_pack_elem__make_integer_seq
__is_target_vendrget_environment__is_target_enviiant
__has_target_variant_environment__is_target_variarget_variant_osafe_forge_single__builtin_unsafe
Alias for -help
Clang-format options
offset
Format a range starting at this byte offset.
Multiple ranges can be formatted by specifying
several -offset and -length pairs.
Can only be used with one input file.
length
Format a range of this length (in bytes).
Multiple ranges can be formatted by specifying
several -offset and -length pairs.
When only a single -offset is specified without
-length, clang-format will format up to the end
of the file.
Can only be used with one input file.
lines
<start line>:<end line> - format a range of
lines (both 1-based).
Multiple ranges can be formatted by specifying
several -lines arguments.
Can't be used with -offset and -length.
Can only be used with one input file.
style
fallback-style
The name of the predefined style used as a
fallback in case clang-format is invoked with
-style=file, but can not find the .clang-format
file to use. Defaults to 'LLVM'.
Use -fallback-style=none to skip formatting.
assume-filename
Set filename used to determine the language and to find
.clang-format file.
Only used when reading from stdin.
If this is not passed, the .clang-format file is searched
relative to the current working directory when reading stdin.
Unrecognized filenames are treated as C++.
supported:
  CSharp: .cs
  Java: .java
  JavaScript: .mjs .js .ts
  Json: .json
  Objective-C: .m .mm
  Proto: .proto .protodevel
  TableGen: .td
  TextProto: .textpb .pb.txt .textproto .asciipb
  Verilog: .sv .svh .v .vh
<stdin>
Inplace edit <file>s, if specified.
output-replacements-xml
Output replacements as XML.
dump-config
Dump configuration options to stdout and exit.
Can be used with -style option.
cursor
The position of the cursor when invoking
clang-format from an editor integration
sort-includes
If set, overrides the include sorting behavior
determined by the SortIncludes style flag
qualifier-alignment
If set, overrides the qualifier alignment style
determined by the QualifierAlignment style flag
files
A file containing a list of files to process, one per line.
filename
verbose
If set, shows the list of processed files
dry-run
If set, do not actually make the formatting changes
Alias for --dry-run
Wclang-format-violations
Warnings about individual formatting changes needed. Used only with --dry-run or -n
Wno-clang-format-violations
Do not warn about individual formatting changes needed. Used only with --dry-run or -n
ferror-limit
Set the maximum number of clang-format errors to emit
before stopping (0 = no limit).
Used only with --dry-run or -n
Werror
If set, changes formatting warnings to errors
Wno-error
If set don't error out on the specified warning type.
unknown
If set, unknown format options are only warned about.
This can be used to enable formatting, even if the
configuration contains unknown (newer) options.
Use with caution, as this might lead to dramatically
differing format depending on an option being
supported or not.
fcolor-diagnostics
If set, and on a color-capable terminal controls whether or not to print diagnostics in color
fno-color-diagnostics
[<file> ...]
A tool to format C/C++/Java/JavaScript/JSON/Objective-C/Protobuf/C# code.
If no arguments are specified, it formats the code from standard input
and writes the result to the standard output.
If <file>s are given, it reformats the files. If -i is specified
together with <file>s, the files are edited in-place. Otherwise, the
result is written to the standard output.
Clang-formating 
 files
error: -offset, -length and -lines can only be used for single file.
Formatting [
Cannot find option named '
clang-format
error: cannot use -i when reading from stdin.
error: encoding with unsupported byte order mark "
" detected
 in file '
error: empty filenames are not allowed
const
volatile
type
x = 
Bad Json variable insertion
{ "Cursor": 
, "IncompleteFormat": 
false
true
, "Line": 
<irrelevant>
error: cannot use -lines with -offset/-length
error: invalid <start line>:<end line> pair
error: start line should be at least 1
error: start line should not exceed end line
error: number of -offset and -length arguments must match.
error: offset 
 is outside the file
error: invalid length 
, offset + length (
) is outside the file.
code should be clang-formatted [-Wclang-format-violations]
<?xml version='1.0'?>
<replacements xml:space='preserve' incomplete_format='
 line='
<cursor>
</cursor>
</replacements>
<replacement 
offset='
length='
</replacement>
&#10;
&#13;
&lt;
&amp;
clang-format error:
cl::alias must only have one cl::aliasopt(...) specified!
cl::alias must have argument name specified!
cl::alias must have an cl::aliasopt(option) specified!
cl::alias must not have cl::sub(), aliased option's cl::sub() will be used!
0123456789abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
cannot not open file '
Could not convert UTF16 to UTF8
cannot not find configuration file: 
cannot get absolute path for: 
recursive expansion of: '
cannot open file: 
: for the 
 option: 
>...
' is invalid value for boolean argument! Try 0 or 1
' value invalid for uint argument!
' value invalid for ullong argument!
    
 (default: 
*no default*
= *cannot print option value*
General options
: CommandLine Error: Option '
' registered more than once!
inconsistency in registered CommandLine options
Cannot specify more than one option with cl::ConsumeAfter!
requires a value!
multi-valued option specified with ValueDisallowed modifier!
does not allow a value! '
' specified.
not enough values!
error - this positional option will never be matched, because it does not Require a value, and a cl::ConsumeAfter option is active!
error - option can never match, because another positional argument will match an unbounded number of values, and this option does not require a value!
' is all messed up!
: Unknown command line argument '
'.  Try: '
 --help'
: Did you mean '
This argument does not take a value.
Instead, it consumes any positional arguments until the next recognized option.
: Not enough positional command line arguments specified!
Must specify at least 
 positional argument
: See: 
 --help
: Too many positional arguments specified!
Can specify at most 
 positional arguments: See: 
must be specified at least once!
may not occur within a group!
=<value>
<empty>
    =
Generic Options
help-list
Display list of available options (--help-list-hidden for more)
help-list-hidden
Display list of all available options
help
Display available options (--help-hidden for more)
Alias for --help
help-hidden
Display all available options
print-options
Print non-default options after command line parsing
print-all-options
Print all option values after command line parsing
version
Display the version of this program
  This option category has no options.
cl::location(x) specified more than once!
OVERVIEW: 
USAGE: 
 [subcommand]
 [options]
SUBCOMMAND '
SUBCOMMANDS:
  Type "
 <subcommand> --help" to get more help on a specific subcommand
OPTIONS:
Apple
LLVM
 version 
16.0.0
Optimized build
uint
ulong
string
DebugCounter Error: 
 does not have an = in it
 is not a number
 is not a registered counter
 does not end with -skip or -count
debug-counter
Comma separated list of debug counter skip and count
print-debug-counter
Print out debug counter info after all counters accumulated
cl::location(x) specified more than once!
 -   
Error
Inconvertible error value. An error has occurred that could not be converted to a known std::error_code. Please file a bug.
A file error occurred.
Multiple errors:
line 
LLVM ERROR: 
LLVM ERROR: out of memory
Allocation failed
Allocation failed
view-background
Execute graph viewer in the background. Creates tmp file litter.
<stdin>
Program arguments: 
rng-seed
seed
Seed for the random number generator
Allocation failed
Allocation failed
SmallVector unable to grow. Requested capacity (
) is larger than maximum value for size type (
SmallVector capacity unable to grow. Already at maximum size 
Included from 
<unknown>
stats
Enable statistics output from program (available with Asserts)
stats-json
Display statistics as json data
Statistics are disabled.  
Build with asserts or with -DLLVM_FORCE_ENABLE_STATS
cl::location(x) specified more than once!
Allocation failed
Error opening info-output-file '
 for appending!
%9lld  
  Total Execution Time: %5.4f seconds (%5.4f wall clock)
   ---User Time---
   --System Time--
   --User+System--
   ---Wall Time---
  ---Mem---
  ---Instr---
  --- Name ---
Total
Miscellaneous Ungrouped Timers
        -----     
  %7.4f (%5.1f%%)
track-memory
Enable -time-passes memory tracking (this may be slow)
info-output-file
File to append -stats and -timer output to
sort-timers
In the report, sort the timers in each group in wall clock time order
treat-scalable-fixed-error-as-warning
Treat issues where a fixed-width property is requested from a scalable type as a warning, instead of an error
HANGUL JUNGSEONG O-E
HANGUL SYLLABLE 
CJK UNIFIED IDEOGRAPH-
TANGUT IDEOGRAPH-
KHITAN SMALL SCRIPT CHARACTER-
NUSHU CHARACTER-
CJK COMPATIBILITY IDEOGRAPH-
 _-ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789PER BODY TILTING FROM HIP JOINTS BETWEEN MIDDLE AND RING FINGERSFACE WITH SYMBOLS COVERING MOUTHLE-LINE EQUAL ABOVE GREATER-THANLE COMMA QUOTATION MARK ORNAMENTLAR SIGN WITH OVERLAID BACKSLASH BAR AT END OF HORIZONTAL STROKEWNWARDS ARROW WITH TIP LEFTWARDSLAGAB TIMES U OVER LAGAB TIMES UWO DOTS ABOVE AND TWO DOTS BELOWAND LEFTWARDS OPEN CIRCLE ARROWSFT-POINTING ANGLE QUOTATION MARKWO DOTS OVER ONE DOT PUNCTUATIONUPPER AND LOWER ONE EIGHTH BLOCKTRIANGLE-HEADED RIGHTWARDS ARROWAND MIDDLE RIGHT TO LOWER CENTRE SHADOWED WHITE RIGHTWARDS ARROWLOWER LEFT CURLY BRACKET SECTIONROFLEX CLICK WITH RETROFLEX HOOKL ARABIC LETTER TAH AND TWO DOTSRONG CENTRALIZATION STROKE BELOWOWNWARDS HARPOON WITH BARB RIGHTOWER RIGHT CURLY BRACKET SECTIONGREATER-THAN ABOVE SLANTED EQUALTOP HALF DIVIDED BY VERTICAL BARAISING BOTH HANDS IN CELEBRATION DOWNWARDS EQUILATERAL ARROWHEADUG2 OVER TUG2 TUG2 OVER TUG2 PAP DOWNWARDS TRIANGLE-HEADED ARROWLL BUT UPPER LEFT QUADRANT BLACKEN ARM ENDING IN ARROW POINTING DIFIER LETTER LABIALIZATION MARKDIC KASHMIRI INDEPENDENT SVARITARIGHT SEMICIRCLE WITH THREE DOTS CONTAINING SMALL WHITE TRIANGLE HORIZONTAL STROKES TO THE RIGHTER ARROWS CIRCLING ANTICLOCKWISEER IGI SHIR OVER SHIR UD OVER UDRONT-TILTED SHADOWED WHITE ARROWER TAB NI OVER NI DISH OVER DISHDED HIGH STOP WITH FILLED CENTRELEFTWARDS HARPOON WITH BARB DOWN KORANIC STOP SIGN ISOLATED FORMESS-THAN ABOVE DOUBLE-LINE EQUAL LEFTWARDS TRIANGLE-HEADED ARROW LETTER BYELORUSSIAN-UKRAINIAN IETALLED BLACK AND WHITE FLORETTE LOWER HALF INVERSE MEDIUM SHADERIGHTWARDS TRIANGLE-HEADED ARROWD ARROW WITH TRIANGLE ARROWHEADSHT-POINTING ANGLE QUOTATION MARKED ARABIC-INDIC DIGIT FOUR ABOVETER-THAN ABOVE DOUBLE-LINE EQUALNORMAL FACTOR SEMIDIRECT PRODUCTTICAL BAR DOUBLE RIGHT TURNSTILEE SQUARED LATIN CAPITAL LETTER PIRECT PRODUCT WITH BOTTOM CLOSEDROXIMATELY NOR ACTUALLY EQUAL TOIGHTWARDS HARPOON WITH BARB DOWNATHARVAVEDIC INDEPENDENT SVARITARIANGLE-HEADED OPEN CIRCLE ARROWINTING DOWNWARDS THEN NORTH EASTED ARABIC-INDIC DIGIT FOUR BELOWHUR KAZAKH KIRGHIZ ALEF MAKSURA THIRD WHITE RIGHT POINTING INDEXVED STEM PARAGRAPH SIGN ORNAMENTS VERTICALLY BELOW AND SMALL TAHIDE AND JOINED WITH INTERSECTIONE CONTAINING BLACK SMALL LOZENGEOF UPWARDS TRIANGLE-HEADED ARROWE-POINTED BLACK RIGHTWARDS ARROWE TO MIDDLE LEFT TO LOWER CENTRE-SHADOWED WHITE RIGHTWARDS ARROW-POINTING ANGLE BRACKET ORNAMENTSEMICIRCULAR ANTICLOCKWISE ARROWH HAMZA ABOVE WITH ALEF MAKSURA H HORIZONTAL MIDDLE BLACK STRIPEMARK WITH LEFT RIGHT ARROW ABOVESWIRL BIRGA WITH DOUBLE ORNAMENTH SUPERSCRIPT ALEF ISOLATED FORMTOM-LIGHTED RIGHTWARDS ARROWHEADVE LESS-THAN ABOVE SLANTED EQUALS AND UPWARDS OPEN CIRCLE ARROWS TORTOISE SHELL BRACKET ORNAMENT TRIANGULAR THREE QUARTERS BLOCKHAND WITH MIDDLE FINGER EXTENDEDEDIUM SHADE AND RIGHT HALF BLOCKM LEFT MEMBER OF DOUBLE VERTICALTION SIGN WITH CIRCUMFLEX ACCENTEDIUM SHADE AND LOWER HALF BLOCKARDROP-SPOKED PROPELLER ASTERISKARDS ARROW ABOVE LEFTWARDS ARROWED UPWARDS EQUILATERAL ARROWHEADARDS HARPOON WITH BARB DOWNWARDSTIMES ASH2 KU OVER HI TIMES ASH2OUBLE-LINE EQUAL ABOVE LESS-THANED COMMA QUOTATION MARK ORNAMENTONE HUNDRED THIRTY-FIVE DEGREESAISED HAND WITH FINGERS SPLAYEDLEFTWARDS EQUILATERAL ARROWHEADETALLED OUTLINED BLACK FLORETTERIGHTWARDS HARPOON WITH BARB UPRING OVER TWO RINGS PUNCTUATIONRINGS OVER ONE RING PUNCTUATIONAND MIDDLE LEFT TO LOWER CENTRETNAMESE ALTERNATE READING MARK UPWARDS HARPOON WITH BARB RIGHTIN WHITE CIRCLE IN BLACK SQUAREACK-TILTED SHADOWED WHITE ARROW CROSSING ASH OVER ASH OVER ASHINDEX THUMB CURVE THUMB INSIDEHT CENTRALIZATION STROKE BELOWDOWNWARDS AND RIGHTWARDS ARROW-HIRAGANA PROLONGED SOUND MARKAGGRAVATED INDEPENDENT SVARITAGREATER-THAN ABOVE EQUALS SIGNGHT FOUR POINTED PINWHEEL STARDOT BELOW AND THREE DOTS ABOVEEFT SEMICIRCLE WITH THREE DOTSOPEN CENTRE EIGHT POINTED STARAND JOINED BY DASH WITH SUBSETMODIFIER LETTER LEFT HALF RINGMINTON RACQUET AND SHUTTLECOCKQAF WITH LAM WITH ALEF MAKSURAMAKSURA WITH SUPERSCRIPT ALEF DIVIDED BY HORIZONTAL BAR AND HIGH-REVERSED-9 QUOTATION MARKSAD WITH LAM WITH ALEF MAKSURAEART EXCLAMATION MARK ORNAMENTON WITH RIGHTWARDS ARROW ABOVEDOWN HEAVY AND RIGHT UP LIGHTONAL INDICATOR SYMBOL LETTER DOT OVER TWO DOTS PUNCTUATION WITH REVERSED NEGATION SLASHDOWN MIDDLE THUMB INDEX CROSS DOWN INDEX THUMB HOOK MIDDLENS-SERIF INTERROBANG ORNAMENTCKED FACE WITH EXPLODING HEADEFTWARDS HARPOON WITH BARB UPOMBINING ANUSVARA ABOVE RIGHTCONTAINING BLACK SMALL CIRCLEUP HEAVY AND RIGHT DOWN LIGHT OVER RIGHTWARDS ARROW TO BARWITH RIGHTWARDS ARROW AT LEFTPUNCTUATION CHINOOK FULL STOPEXTENDED ARABIC-INDIC DIGIT TEVERSED LUNATE EPSILON SYMBOLSUPERSCRIPT ALEF INITIAL FORMSEMICIRCULAR PATH AROUND POLELIGHT FOUR POINTED BLACK CUSPEFT ARC GREATER-THAN BRACKETACE DIRECTION POSITION NOSE DOWN HEAVY AND LEFT UP LIGHTFTING POINT RIGHTWARDS ARROWEDGE-TAILED RIGHTWARDS ARROWLEFTWARDS OF DOWNWARDS ARROWUPPER CENTRE TO MIDDLE RIGHTDOUBLE ANUSVARA ANTARGOMUKHASALTIRE WITH ROUNDED CORNERSBESIDE AND JOINED WITH UNIONMONOGRAMMOS TESSERA DODEKATAUP HEAVY AND LEFT DOWN LIGHTLIQUID MEASURE FIRST SUBUNITHREE HUNDRED FIFTEEN DEGREESHADED WHITE RIGHTWARDS ARROWOUND-TIPPED RIGHTWARDS ARROWU ALAYHI WAAALIHEE WA-SALLAMASTERISKS ALIGNED VERTICALLYT LITTER IN ITS PLACE SYMBOLISMILLAH AR-RAHMAN AR-RAHEEMRECTANGULAR PATH AROUND POLEIBE SYLLABLE BOUNDARY MARKERMIDDLE RING LITTLE CONJOINEDUPWARDS AND RIGHTWARDS ARROWBRDA RNYING YIG MGO MDUN MAPPY PERSON RAISING ONE HANDBRDA RNYING YIG MGO SGAB MAFINGER COVERING CLOSED LIPSOUR BALLOON-SPOKED ASTERISKHEAD MARK WITH MOON AND SUNTALIC LATIN CAPITAL LETTER ZERO FOR ODD POWERS OF FOURCONTINUOUS UNDERLINE SYMBOL AND LEFT SEMICIRCLE ARROWSLOWER MIDDLE LEFT TO LOWER STRUMENTAL NOTATION SYMBOL-KATHAKA INDEPENDENT SVARITARIGHT ARC LESS-THAN BRACKETIDE ARC ANTICLOCKWISE ARROWCIRCLE WITH NORTHWEST ARROWIDE-HEADED RIGHTWARDS ARROWLOWER TONAL RANGE INDICATORBETWEEN TWO HORIZONTAL BARSEAVY WHITE RIGHTWARDS ARROWRIPLE VERTICAL BAR OPERATORPHARYNGEAL VOICED FRICATIVEWO DOTS BELOW AND DOT ABOVEFOUR FINGERS CONJOINED BENT-FEATHERED RIGHTWARDS ARROW BARREE WITH TWO DOTS BELOWHANDED INTERLACED PENTAGRAMLARGE EQUILATERAL ARROWHEADUPPER MIDDLE LEFT TO UPPER LIGHT CENTRALIZATION STROKEDOUBLE PRIME QUOTATION MARKDOUBLE ANGLE QUOTATION MARKTWO HUNDRED SEVENTY DEGREESWALLPLANE SHOULDER HIP MOVELESS-THAN ABOVE EQUALS SIGNEMICIRCULAR CLOCKWISE ARROW DIVIDED BY HORIZONTAL RULERIANGULAR ONE QUARTER BLOCKIMPERFECTUM CUM PROLATIONE ONE LARGE AND ONE SMALL EYEENTATION FORM FOR VERTICAL CRIPT LIGATURE ET ORNAMENTU REVERSED OVER U REVERSEDMEEM WITH HAH WITH TATWEELCAT FACE WITH SMILING EYESOORPLANE SHOULDER HIP MOVELINE FEED SEPARATOR SYMBOLMARRIED PARTNERSHIP SYMBOLUNEVEN EYES AND WAVY MOUTHRIGHT PARENTHESIS ORNAMENTMODIFIER FITZPATRICK TYPE-LLALLAHOU ALAYHE WASSALLAMRIPLE DOT PUNCTUATION MARKDROP-SHADOWED WHITE SQUARETHREE DOTS ABOVE DOWNWARDS OR APPROXIMATELY EQUAL TOSSIAN ASTROLOGICAL SYMBOL AND MIDDLE FINGERS CROSSEDCLOCKWISE ARROW WITH MINUSE ONE-WAY LEFT WAY TRAFFICIDEOGRAPHIC ITERATION MARKAND RIGHT ONE EIGHTH BLOCKLEFTWARDS OF UPWARDS ARROWJECT REPLACEMENT CHARACTERLANTED SOUTH ARROW WITH HOERSTRASS ELLIPTIC FUNCTIONDOTTED SUBSTITUTION MARKERBLE TENNIS PADDLE AND BALLALEF MAKSURA ISOLATED FORM GAD OVER GAD GAR OVER GARHTORA SKLIRON CHROMA VASISDOTTED LUNATE SIGMA SYMBOL LESS THAN THE DENOMINATORWITH LEFTWARDS ARROW ABOVEINDUSTRIAL STANDARD SYMBOLOCKED FEMALE AND MALE SIGN NEGATED WITH VERTICAL BARORTHOGONAL CROSSHATCH FILLONOMICAL SYMBOL FOR URANUSOTATED FLORAL HEART BULLETYAJURVEDIC MIDLINE SVARITA WITHIN TRIANGLE ARROWHEADSTROKE AND TWO DOTS ABOVETTED SUBSTITUTION BRACKETLEFTWARDS ARROW WITH HOOKRIGHT DIAGONAL HALF BLACKTAB OVER TAB GAR OVER GARDOUBLE CANDRABINDU VIRAMABUT NOT ACTUALLY EQUAL TODIAERESIS AND HOOK SYMBOLOLD ASSYRIAN WORD DIVIDERELD HOCKEY STICK AND BALLINVERTED EXCLAMATION MARKMULTIPLICATION SIGN BELOWLEFT PARENTHESIS ORNAMENTTERNION INTEGRAL OPERATORLOW QUILT SQUARE ORNAMENTBREVE WITH INVERTED BREVERIST CIRCLE HITTING WALL REE-HUNDRED-AND-TWENTIETHFECTIVENESS OR DISTORTION WITH DOUBLE VERTICAL BAR WITH DOUBLE GRAVE ACCENTMBINING CRYPTOGRAMMIC DOTCROSSING NORTH EAST ARROW OVER NUN LAGAR TIMES SALMEDIUM TRIANGLE ARROWHEADCAT FACE WITH CLOSED EYESOUTLINED RIGHTWARDS ARROWRANCH BANK IDENTIFICATION WITH CIRCLED ONE OVERLAYOUBLE BIRGA WITH ORNAMENTING ON THE FLOOR LAUGHINGDRY MEASURE FIRST SUBUNITONE UNDER EIGHTEEN SYMBOLNIVERSAL RECYCLING SYMBOLFFICULTY AT THE BEGINNING WITH DOUBLE MIDDLE TILDERIPLE BIRGA WITH ORNAMENTWELVE POINTED BLACK STARORIZONTAL BAR WITH NOTCHUPWARD POINTING TRIANGLEGLOTTAL STOP WITH STROKEWITH CANCELLATION STROKET BLACK RIGHTWARDS ARROWEQUAL TO OR GREATER-THANTED INTERPOLATION MARKERMALL CIRCLE TO THE RIGHTUPRIGHT RECTANGULAR ZEROHEAVY BLACK HEART BULLETDESCENDING MUSICAL NOTESARM CIRCLE HITTING WALL REVERSED NINE-LIKE BHALESMALL ARABIC LETTER TAH ISOSCELES RIGHT TRIANGLESYLLABLE REPETITION MARKBLIC ADDRESS LOUDSPEAKERTEARDROP-SPOKED ASTERISKARROW POINTING DIRECTLY OTTOM-SHADED WHITE ARROWGREATER-THAN OR EQUAL TOLICATION PROGRAM COMMANDOTTOM SHADED WHITE ARROWBUSINESS SUIT LEVITATINGDIAGONAL CROSSHATCH FILLDOWNSCALING FACTOR KIIZHBLACK LENTICULAR BRACKETSTROKE THROUGH DESCENDERINTERSECTION WITH SERIFSLINE HORIZONTAL ELLIPSISSINGLE-LINE NOT EQUAL TOPERSCRIPT ALEF MOKHASSASBERKANAN BEORC BJARKAN BING FACE WITH OPEN MOUTHWITH UPWARDS ARROW ABOVECOMPATIBILITY IDEOGRAPH- OVER TOP SQUARE BRACKETPOINTING DOWNWARDS ABOVEAND MALE AND FEMALE SIGNWO DOTS VERTICALLY ABOVE POINTING BACKHAND INDEXEYES AND HAND OVER MOUTHLY-RECYCLED PAPER SYMBOLCULINE ORDINAL INDICATORIGATURE OPEN ET ORNAMENTCONSECUTIVE EQUALS SIGNSDOUBLE HORIZONTAL STROKERIGHTWARDS THEN CURVING LARGE TRIANGLE ARROWHEADALTERNATE SECTION MARKERFINGER AND THUMB CROSSEDE PLUS A PLUS SU PLUS NAMTAVRULI CAPITAL LETTER ONE-HUNDRED-AND-SIXTIETHVOICED LARYNGEAL SPIRANTLEFT DIAGONAL HALF BLACKORAH WITH NINE BRANCHESPUNCTUATION END OF TEXTRIGHT DIAGONAL ELLIPSISIVE FINGERS SPREAD OPENGREEK SMALL LETTER IOTAWESTERN PWO KAREN TONE-RIGHT HORIZONTAL SECANTRIGHT-POINTING TRIANGLEISTED RIGHTWARDS ARROWSOVERLAPPING LOGICAL ANDOVER RIGHTWARDS HARPOON WITH HALF-CIRCLE BELOWIGHT-SHADED WHITE ARROWMITIAN CONJUGATE MATRIXRTOISE SHELL BRACKETED HREE POINTED BLACK STARSOLIDUS BINARY RELATIONHANKED RIGHTWARDS ARROWININE ORDINAL INDICATORLSCHREIBER PAUSE SYMBOLUBLE VERTICAL BAR BELOWAVOURING DELICIOUS FOODORIGINAL OF OR EQUAL TOBARBED RIGHTWARDS ARROWLEFT-SHADED WHITE ARROWDOWNWARDS THEN CURVING HT TRIFOLIATE SNOWFLAKERAISED OMISSION BRACKETARABIC LETTER TAH ABOVEESS OUTLINED WHITE STARCURRENT SYMBOL FORM TWOCLUSTER-INITIAL LETTER PA OVER PA GAR OVER GAR ROTATED NINETY DEGREESANG DEPARTING TONE MARKWO-WAY LEFT WAY TRAFFICUP SPREAD THUMB FORWARDZANTINE MUSICAL SYMBOL  CAKE WITH SWIRL DESIGN HUNDRED TWENTY-EIGHTH ASCENDING MUSICAL NOTESIDE ARC CLOCKWISE ARROW POINTING AT THE VIEWERAND WOMAN HOLDING HANDSSING DIAGONAL CROSSING CIRCUMFLEX ACCENT ABOVEREE VARIATION SELECTOR ARTY HORN AND PARTY HATDOT BELOW AND DOT ABOVEWHITE FOUR POINTED CUSPALEF MAKSURA FINAL FORMUPWARDS THEN NORTH WESTATTACHING VERTICAL OMETALGAMATION OR COPRODUCTVERTICAL BISECTING LINEP WITH EXCLAMATION MARKSHAPE WITH A DOT INSIDEWITH HORIZONTAL STROKEDOMAIN ANTIRESTRICTIONLONG HORIZONTAL STROKERECTILINEAR BLACK STARSHORT VERTICAL STROKESINVERTED SMALL V ABOVE WITH DECORATIVE COVERQUESTION MARK ORNAMENTLE BESIDE VERTICAL BARYIAKENG PUACHUE HMONG TWO HORIZONTAL STROKESINVERTED SMALL V BELOWNOT INCLUDING THE POLEUBSCRIPT SMALL LETTER ARMENIAN ETERNITY SIGNDOUBLE-LINED HEAD MARKDOUBLE VERTICAL STROKELEFT TRIANGLE OPERATORING HEAD IN SILHOUETTEPUNCTUATION KUNDDALIYAROUND A POINT OPERATOR WITH THREE DOTS ABOVEHORT HORIZONTAL STROKEWASALLAM ISOLATED FORMDOUBLE SOLIDUS OVERLAYCURLY BRACKET ORNAMENT WITH SINGLE ZAPYATAYAWITH JEEM INITIAL FORMHEXIFORM LONG ANUSVARAEAST-POINTING AIRPLANEIN DEPARTING TONE MARKUIGHUR KIRGHIZ YEH WITGREATER-THAN DIAERESISLOW PARAPHRASE BRACKETND RECORDING COPYRIGHTKEEPING STILL MOUNTAINCONSONANT SIGN MEDIAL CONSONANT MODIFIER BAR SYMBOL FOR LIGHTHOUSETRIPLE RIGHT TURNSTILEDOWN-POINTING TRIANGLE-ROTATED DIVISION SIGNUSTOMER ACCOUNT NUMBERI YFESIS TETARTIMORIONTRIPLE VERTICAL STROKEUPPER RIGHT AND LOWER REE-CIRCLE ALTERNATE ICJK UNIFIED IDEOGRAPH-RROW WITH ROUNDED HEADRIGHT-POINTING FLEURONREASE FONT SIZE SYMBOL OVER STAMPED ENVELOPEDRESSED TO THE SUBJECTSEMI-VOICED SOUND MARKMNYAM YIG GI MGO RGYANPRECEDED BY APOSTROPHEIGEL LONG-BRANCH-SOL S WITH CIRCUMFLEX ABOVESYMPTOTICALLY EQUAL TOINDIRECT QUESTION MARKDOWNWARDS ZIGZAG ARROW RIGHT ARROWHEAD ABOVEACKSLANTED SOUTH ARROWLATIN CAPITAL LETTER SWITH VOICED SOUND MARKSHORT RIGHTWARDS ARROWPERSET OF NOR EQUAL TOPOINTING UPWARDS BELOWBAR ABOVE INTERSECTIONOVER LEFTWARDS HARPOONOVER NU11 BUR OVER BUROVER SHIR BUR OVER BURUPPER ONE EIGHTH BLOCKMALE WITH STROKE SIGNBESIDE RIGHT TRIANGLETEEN POINTED ASTERISKINVERTED BRIDGE BELOWRELICT HOUSE BUILDINGOP SHADED WHITE ARROWOHAMMAD ISOLATED FORMHOUSAND MILLIONS SIGNINTERSECTION OPERATOROCAL NOTATION SYMBOL--SHAPED BAG DELIMITER-ROUND NOTEHEAD DOWN BOTTOM U-SHAPED ARROWTHICK LETTER SELECTORHORIZONTAL TABULATIONINTERSECTING LOGICAL YIG MGO TSHEG SHAD MAREVERSED FEATHER MARKOPPOSING AN PLUS NAGAMORPHOLOGICAL DIVIDERALLING DIAGONAL SLASHSIDE TO SIDE SCISSORSCTOR OR CROSS PRODUCTFINAL CONSONANT SIGN CRUCIFORM NUMBER FOURCROSSE STICK AND BALLVOICED ITERATION MARKLATTENED OPEN A ABOVEFLATTENED PARENTHESISSHORT LEFTWARDS ARROWRISING DIAGONAL SLASHTRIANGULAR HALF BLOCKDOWN HORIZONTAL HEAVYDOWN HORIZONTAL LIGHTAND VOWEL LENGTH MARKWO-CIRCLE ALTERNATE IPAP PLUS PAP PLUS LU3WO-CIRCLE NUKTA ABOVELESS-THAN OR EQUAL TOEIGHT SPOKED ASTERISKELATIONAL COMPOSITIONACUTE AND HOOK SYMBOLRATING SYSTEM COMMANDDIGRAMMOS EX DODEKATAEFT-POINTING TRIANGLELETTER SMALL CAPITAL EQUAL TO OR LESS-THANER RIGHT CORNER ANGLEINVERTED GLOTTAL STOPDELIMITER TSHEG BSTARAKIA TELOUS ICHIMATOSDOUBLE LEFT TURNSTILEEFT OPEN BOX OPERATORMIDDLE RING LITTLE ONQUADRANT CIRCULAR ARCEFT HORIZONTAL SECANTWITH INVERTED V ABOVEABOVE SHORT DOWN TACK AND SLANTED PARALLELDOWNWARDS ARROW ABOVEVERTICAL LINE OVERLAYXTRA SHORT VOWEL MARKBUT NOT EQUIVALENT TOGRUENT WITH DOT ABOVESH AMPERSAND ORNAMENTARYSTIAN FIVE HUNDREDND TELEPHONE RECEIVERARKENING OF THE LIGHTHALF TRIANGULAR COLONARD SHELL FLOPPY DISKVERY HEAVY BARB ARROWGHT OPEN BOX OPERATOR WITH VERTICAL STROKENTISTRY SYMBOL LIGHT HAND INTERIOR PRODUCTHOCKEY STICK AND PUCKGRAMMOS OKTO DODEKATA WITH SHORT RIGHT LEGTILDE OPERATOR ABOVE TOUCHING INSIDE MOUTHWITH FOUR DOTS ABOVELEFT-TO-RIGHT SECANTNIS RACQUET AND BALLARXIS KAI FTHORA VOUSINGLE DOT TONE MARKINVERSE WHITE CIRCLEINDEX RING LITTLE ONYIG MGO PHUR SHAD MASCRIPTION CHARACTER 79 OVER LAK-079 GUNUIRCLES HITTING WALL WARE-FUNCTION SYMBOLINVERTED CANDRABINDUE POINTED WHITE STARMULTIPLE PUNCTUATIONL FUNCTIONAL SYMBOL WET CULTIVATION SIGNANGE ANTIRESTRICTIONSTAR WITH MIDDLE DOTWORD REPETITION MARKAND SOUTH WEST ARROWAND SOUTH EAST ARROWAND NORTH WEST ARROWA- SHOG GI MGO RGYANAND NORTH EAST ARROWKHAMTI REDUPLICATIONSIDEWAYS NOON GHUNNAINSIDE MOUTH RELAXEDLASHING SWEAT SYMBOLLATALIZED HOOK BELOWINING OBLIQUE STROKEJUDEO-SPANISH VARIKAWITH SOROCHYA NOZHKASEPARATOR MIDDLE DOTLE WITH POPPING CORKSEPARATOR KEY SYMBOLLEFT AND LOWER RIGHTHIGH RATHA OR LOW PAHIGH TONE APOSTROPHERIGHT-POINTING ANGLERIGHT U-SHAPED ARROWOTLESS J WITH STROKEUBHAANAHU WA TAAALAABSET OF NOR EQUAL TOTHROUGH SMALL CIRCLEENARMONIOS ANTIFONIAHORIZONTAL BAR WITH RIGHT QUADRANT BLACKEVERSED ROTATED RANAEMESTVENNY ZADERZHKADOTLESS HEAD OF KHAHDOUBLE ANGLE BRACKETREAN STANDARD SYMBOLDOUBLE DOT TONE MARK BEGIN LOGOGRAM MARKHREE-DOT NUKTA ABOVEDOWN ARROWHEAD BELOWYRENAIC TWO DRACHMASCRESCENT MOON SYMBOLFOUR RAISED KNUCKLESCONSONANT SIGN HAARUPLUS GISH TIMES TAK4TRANSPOSITION MARKERGHTWARDS ARROW BELOWFORMS LIGHT VERTICALCHEMICAL SYMBOL FOR POTABLE WATER SYMBOL OVER TUR ZA OVER ZAGRA GCAN -CHAR RTAGSCHARACTER INTRODUCER WITH HORIZONTAL BARFIVE SPOKED ASTERISK OVER LAGAR GUNU SHEOVER LEFTWARDS ARROWCENTRE VERTICAL LINEFINAL CONSONANT MARKCURRENCY SYMBOL RIELCURVED ANGLE BRACKETHALF CIRCLE WITH DOTHAR2 TIMES GAL PLUS UP-POINTING TRIANGLERIGHT ANGLE WITH DOT ABOVE LEFT TRIANGLEE CONSONANT MODIFIERREVERSED ONE HUNDREDONCAVE-SIDED DIAMONDVAL WITH OVAL INSIDEIMAGE OF OR EQUAL TOONE MARK SGAW KAREN RUMAI PALAUNG TONE-5 AND DIAGONAL STROKEBETWEEN PALM FACINGSALTERNATE LAKH MARKSYMBOL FOR BEGINNERNETWORKED COMPUTERSVASTNESS OR WASTINGOVER E NUN OVER NUNSEVEN EIGHTHS BLOCKIMIDIA SEXTULA SIGNPREFIXED NASAL SIGNHURISAZ THURS THORNNE HUNDRED TWENTY PTO LOWER RIGHT FILLSH PLUS HU PLUS ASHNDRED POINTS SYMBOLFIVE FINGERS SPREADRROW NO-BREAK SPACED CIRCUMFLEX ACCENTEVEN POWERS OF FOURARENTHESIS NOTEHEADLEFT TO LOWER RIGHTLEFT POINTING INDEXQUADRUPLE CRESCENTSHEAD-SHAPED POINTERHAND COVERING MOUTHARABIC FORM SHAPINGDOWN AND HORIZONTALTWENTY-FIVE DEGREESTURNED SECTION MARKSEQUENCE INTRODUCERTURNED PADA PISELEHLEADING MCHAN RTAGSGAPPED CIRCLE ARROWTRANNO MALO POVYSHEVARIANT FORM ILIMMUTHANG LONG ANUSVARAPARAGRAPH SEPARATORCIRCLED SANS-SERIF IN CHEN SPUNGS SHADCIRCLED WHITE ARROWMOVES AGAINST CHEEKWOMEN HOLDING HANDSRY CULTIVATION SIGNLANTED EQUAL ABOVE MSHELL MOBILE PHONEFT-POINTING FLEURONA END LOGOGRAM MARKDOWN POINTING INDEXNAXIAN FIVE HUNDREDOW-9 QUOTATION MARKVARIATION INDICATORVARIANT WITH SQUARESLANTED NORTH ARROWANSPOSITION BRACKETANS-SERIF CAPITAL LILDING CONSTRUCTIONFLOORPLANE TWISTINGSTRATIAN FIFTY MNASSTRAIGHT THUMB BENTWITH YEH FINAL FORMGIBBOUS MOON SYMBOLKULL AND CROSSBONESREE-QUARTER CIRCLE RIGHT TO LOWER LEFTRAILING MCHAN RTAGSUBLE DOT WITHIN DOTOTATED ARDHAVISARGAING SHIRT WITH SASHVERSE FINAL BARLINEAHU ALAYHI WA-AALIHLF MADDA OVER MADDA AND PROSGEGRAMMENI WITH STRIKETHROUGHLUB-SPOKED ASTERISK IN A RECTANGLE BOXTIGHTLY-CLOSED EYESDENOMINATOR SIXTEENARTIAL DIFFERENTIALNORTH ARROW WITH HORIGHT MIDDLE STROKEBETWEEN MIDDLE RINGTART OF RUB EL HIZBOP SEMICIRCLE ARROWHORT STROKE OVERLAYINSIDE CIRCLE BELOWRATUM SUPER STRATUMIGATURE AYIN-DALETH LOVE YOU HAND SIGNATED TELLER MACHINE FLUTTERING IN WIND WITH VERTICAL TAIL AND RETROFLEX HOOKVERSAL INTERSECTIONISPUTED END OF AYAHUP HORIZONTAL HEAVYC DIGRAPH WITH CURLQUESTION MARK ABOVEUP HORIZONTAL LIGHTNOGRAPHIC FULL STOPITED LIABILITY SIGNET WITH WHITE CROSSVERTICAL TABULATIONURRENCY SYMBOL BAHTLEFT U-SHAPED ARROW KASKAL U GUNU DISHLOWER MIDDLE RIGHTCTLY EQUIVALENT TOSMALL RED TRIANGLE FOR SIMALUNGUN SAFORTY-FIVE DEGREESSOUL ISOLATED FORMLEFT MIDDLE STROKE AND SMASH PRODUCTQUARTER NOTE STEM TYPE A ELECTRONICSEVERSED CHELYUSTKA AND YPOGEGRAMMENICOPPER ANTIMONIATEUPPER MIDDLE RIGHTEVENTEEN FULL STOPCONTINUING OVERLAPLOSED CIRCLE ARROWBAARAKA WA-TAAALAACUP WITHOUT HANDLEDOUBLE PUNCTUATIONEAST POINTING LEAF AND NO DOTS ABOVESINGLE PUNCTUATIONERTICAL BAR VIRAMASMALL CIRCLE ABOVE OVER INVERTED SHUFIVE EIGHTHS BLOCKWEST POINTING LEAFWHITE VERTICAL BAREPIGRAPHIC LETTER FORKED PARAGRAPHOSPUNCTUATION BINDU UP ARROWHEAD BELOWABBREVIATION MARK DOWN-OUTPUT SYMBOLENTY-TWO POINT TWOENTERING TONE MARKU-SHAPED ORNAMENTSWITH STROKE SYMBOLMATHEMATICAL SPACE NOT LITTER SYMBOLUM WITH DRUMSTICKSLEFT-STEM TONE BARWITH JUSTIFICATIONHILOSOPHERS SULFURCANTILLATION SIGN VERY SMALL DIAMONDSYMMETRIC SWAPPINGHAIS LUS NTOG NTOGS PRESSED TOGETHERSEPTUPLE CRESCENTSNORMAL SUBGROUP OFARROW SHAFT WIDTH TO LOWER LEFT FILL WITH KAVYKA ABOVEJEEM ISOLATED FORMSET OVER BUILDINGSOU ALAYHE WASALLAMS INSIDE AND ABOVEOTLESS DALATH RISHIGATURE ZAYIN-YODHIRROR HORIZONTALLYKANTAJA NAASIKYAYAOUCHTONE TELEPHONE WITH FLOWING SANDBOTTOM RIGHT KASRAATIN SMALL LETTER HORIZONTALLY BELOWTILTING FROM WAISTORK ON THE DECAYEDNITE PART INTEGRALNISH VERSE DIVIDER THUMB INDEX THUMBITAN SMALL SCRIPT  WITH CROSSED-TAILHOUSANDS SEPARATOR WITH CIRCLE BELOW WITH CIRCLE ABOVEHUNDREDS UNIT MARKNINETEEN FULL STOPIX SPOKED ASTERISKINDEPENDENT VOWEL KOREAN CHARACTER OPACING CANDRABINDU SPREAD THUMB SIDEGGLY VERTICAL LINEBASELINE ROUND DOTASTED SWEET POTATOGATIVE ACKNOWLEDGEGISH CROSSING GISHTROFLEX HOOK BELOWRYUKOVAYA SVETLAYAATERRESTRIAL ALIENPERFIXED LETTER RAVARIANT FORM LIMMUYLLABLE LENGTHENERASTROLOGICAL SIGN IGSAW PUZZLE PIECEIN POSSESSION SIGNOW TONE APOSTROPHEYPTIAN HIEROGLYPH KBAR ISOLATED FORMHOLDING BACK TEARSAND LOW RIGHT RINGRIST CIRCLE FRONT NYET THYOOM TA-ROLUTLINED BLACK STARSHAN REDUPLICATIONTOP U-SHAPED ARROWNYOOGA NAAKSIKYAYAAEUM ONE PLETHRONBRACKET EXTENSIONEMICOLON UNDERBARVERAGE WITH SLASHHORIZONTAL SINGLEHORIZONTAL DOUBLETERSYLLABIC TSHEGRIATION SELECTOR-VARIANT FORM ASH9A PLUS HA PLUS DAVARIANT FORM IMINVARIANT FORM USSUEAR SCREEN SYMBOLINEAR ANNOTATION TEN THOUSAND SIGNBE WITH MERIDIANSIGHTEEN FULL STOPING POLE AND FISHABBREVIATION SIGNATHERING TOGETHERBERBER ACADEMY YAULAR MEDIUM SHADEVEE WITH UNDERBARINITIAL LETTER RAAUKAZ LAGU LOGR LIDEOGRAPHIC COMMAICTED LEFT ENTRY-IASTRE MARK ABOVEBOTTOM HALF BLACKTARTING FROM SIGNGENERIC MATERIALSCTION APPLICATIONAPLI DYO DODEKATAGREATER-THAN SIGNFINGER-POST ARROWLD PERMIC LETTER ALTERNATE NUMBER GREATER-THAN NOR CROSS PUNCTUATIONKE BOTTLE AND CUPAMBDA WITH STROKEFLICK ALTERNATINGVOCALIZATION MARKKHAH INITIAL FORMSTRAIGHT MOVEMENTCIRCLES WITH DOTSCONTOURED OUTLINEAMPHYLIAN DIGAMMALAPPING LESS-THANCONTINUATION SIGNCLOSED LITTLE YUSTRIPLE DASH ARROWCONSONANT SIGN PALAH ISOLATED FORMLAGOLITIC LETTER COMBINING NUMBER AND BLACK SQUARESFRACTION ONE HALFURNED DAMMA BELOWBRIGHTNESS SYMBOLASTERN PWO KAREN TAN ISOLATED FORMTHREE SOUND WAVESLIAN HIEROGLYPH ALHOUETTE OF JAPANTIAL ARTS UNIFORMHIRTEEN FULL STOPDENTAL PERCUSSIVEBUT RELIEVED FACEDELPHIC FIVE MNASUP AND HORIZONTALFROM SMALL CIRCLEINVERTED MCHU CANVRE TOURNOIS SIGNURNED COMMA ABOVECAL SYMBOL BOTTOMCANCELLATION MARKUP POINTING INDEXHEART-SHAPED EYESCANDRABINDU ABOVEVERY SMALL SQUAREFACING BABY CHICKSQUARED TIMES KURHAH ISOLATED FORMTONAL RANGE MARK MANENT PAPER SIGNY ON BLACK SQUAREREATIONAL VEHICLE LAGAB TIMES ASH2 LAGAR OVER LAGAR TO BLACK DIAMONDWITH NOT EQUAL TOMILITARY AIRPLANEQUAT REVERSED ESHMEEM INITIAL FORM WITH BULLET NOSE OVER ZU PLUS SARMALL WHITE CIRCLEYEH ISOLATED FORMONE EIGHTH BLOCK-0 WHEELED CHARIOT GRAVEYARD SYMBOLPINWHEEL ASTERISKRYBLION BASE SIGNRIGHT HALF CIRCLEOURTEEN FULL STOPNE EYEBROW RAISEDNEGATIVE CIRCLED MEDIUM BARB ARROW PLUS SHA3 PLUS AOWER NUMERAL SIGNWO VERTICAL DOTS NAUDIZ NYD NAUD NSIGN O WITH CROSSPRIZNAK MODIFIER NFORMATION SOURCE ALTERNATION MARKS REVOLVING LIGHT-HEIGHT LEFT HOOKSERVER EYE SYMBOL WITH TILDE ABOVEPRESSIONLESS FACEPUNCTUATION SIGN  WITH SOUND WAVESOPEN-HEADED ARROW-GAAHLAA TTUDDAAGPRECEDING SOLIDUS AND PALATAL HOOKNASALIZATION MARKWHITE PARENTHESISWHITE SHOGI PIECENG STROKE OVERLAYPLACEHOLDER MARKFLOORPLANE SPACESTRING FRETBOARDINDEPENDENT SHINFFERENCE BETWEENUPPER OVER LOWERVARIANT FORM ESHRIZONTAL ELLIPSEMIDDLE AND BELOWSTICKING OUT FARMIDDLE AND RIGHTMESTVENNY KLYUCHCOMPRESSED ARROWRISING TONE MARKFALLING DIAGONALPRECHGESANG STEMCREAMING IN FEARINES CONVERGING POSTPOSITION MENOLD TAMIL VIRAMAWITH CENTRED DOTPRECEDING SUBSETCORNER LEFTWARDSCORNER DOWNWARDSB2 TENU PLUS TABINDEX THUMB SIDESTRAIGHT STRETCHOLD WHITE CIRCLE OR THE IMAGE OF PLUS KAK PLUS ANAL DIGIT SHAPESYIR MKPARAQ MEUNPLE MEASURE RESTCONSONANT JOINERHMATULLAH ALAYHECASIAN ALBANIAN IFTEEN FULL STOP WITH BUNNY EARSSHU2 PLUS KASKALLD ASSYRIAN ONE  WITH DOT INSIDEIDED GREEK CROSS WITH HEADSTROKEHIGH SPACING DOTHOLDING TOGETHERHYPHENATION MARKANABAZAR SQUARE BOTTOM HALF RINGORIZONTAL JOINERBOLD GREEK CROSSSTERISK OPERATORPEN CENTRE CROSSVOWEL LENGTHENERWITH HAMZA ABOVEWITH HEARING AIDIMENSIONAL ANGLE SMALL ROTATIONSTRIPLE CRESCENTSLEFT HALF CIRCLEWITH LEFT UPTURN TIMES DISH TENUCH WITH UMBRELLALEFT ARROW ABOVEIGHTH NOTE STEM  TIMES GAN2 TENUTAKANA-HIRAGANA DOTTED CRESCENTSSMALL NOON ABOVESMALL CAPITAL ELRIGHT HALF BLACKUDLY CRYING FACENTAIGANA LETTER IRCLE X NOTEHEADRAYS AND DOTTED DITORIAL CORONIS AND LIGHT RIGHTEN MILLIONS SIGNIPPER-MOUTH FACE AND HEAVY RIGHTECIMAL SEPARATORWAVY HAMZA BELOWSANS-SERIF ARROWEND OF TEXT MARKRAIDO RAD REID RSTUCK-OUT TONGUEDVUMYA ZAPYATYMIRIGHT DOWN BARB LTERNATE HASANTADOWN RIGHT BARB EFORE COMPLETIONDOUBLE ZAPYATAYADOUBLE TURNSTILEREPETITION MARK-RECORD SEPARATOR CAPPED MOUNTAINISTOS DISC SIGN ULDERED OPEN BOXRESH-AYIN-DALETHIVE POINTED STARDOUBLE HEAD MARKDOUBLE DOT ABOVELOWER OVER UPPERDOUBLE CRESCENTSSITION INDICATORK PERMITTED HERERIGHT HALF BELOWVERY HEAVY SHAFTARENTHESES ABOVEO-MINOAN SIGN CM LIGHT MOON ARTAENTRE WHITE STARUP MIDDLE HINGEDQUALS SIGN BELOWUP-OUTPUT SYMBOLEVERSED VISARGA AFFRICATION MARKEVERY OTHER TIMESERIFS AT BOTTOMVIEWING CEREMONYSIGN RISING TONEWALLED ENCLOSURELIGHT BARB ARROWLIGHT AND RIGHT E PLUS GAN2 TENUUPERSCRIPT ALAPHQ WITH HOOK TAILMAGNIFYING GLASSENUMERATION SIGNUBJOINED LETTER ADIAN SYLLABICS DEWAYS U BRACKETUMBER SIGN ABOVEEPSILON UNDERBARYATHOS BASE SIGN INSERTION POINTERCURY SUBLIMATER PLUS GAN2 TENUNION WITH SERIFSSLANTED EQUAL TOLLOW PAN OF FOODBINDING BRACKETITH FINGERNAILSBAR ABOVE UNIONIDING ENCLOSURE-PIECE SWIMSUITNJOINING MACRONVERTICAL SECANTORIZONTAL COLONUSTER NOTEHEAD BLOCK DIAGONAL -NO-EVIL MONKEYTHREE DISH TENUIAMOND UNDERBARXTEEN FULL STOPINUS SIGN BELOWATA LINK ESCAPEINVERTED LAZY SNVERTED UBADAMA2 CHARIOT FRAMESALTER PAHLAVI OLIDUS OPERATORON TOP OF MODEMATINATE MYSLITEODIFIER DAMAGEDS ELEVATUS MARKS IN SILHOUETTEODO SOFT HYPHENING SYMBOL FOR OGOGRAM KHAMTI INGLE HEAD MARKNOT APPROXIMATEBENT OVER INDEXBELOW LONG DASHNOON FINAL FORMONTOUR INTEGRALBELGTHOR SYMBOLNOON WITH KASRAONJOINED HINGEDNO GOOD GESTUREIGN PALI VIRAMATAI LAING TONE-IZED WHEELCHAIRIRCUMFLEX BELOWOND PLACE MEDALIMISEOS CHRONOUIMPERFECTA RESTINVERTED STROKEYNCHRONOUS IDLERIGHT RERENGGANESIDE LESS-THANR WITH FISHHOOKERICAN FOOTBALLDESCENDING TONEDI ALLAHOU ANHUDIALYTIKA TONOSESSARON CHRONONUBLE RING BELOWDIGA AELA-PILLARIGHT HALF RINGDOING CARTWHEELEH INITIAL FORMRIGHTWARDS TICKPRISHTHAMATRA EPUT SYMBOL FOR TVIMADUR SYMBOLZERO WITH SLASH NEPOSTOYANNAYAEXPONENT SYMBOL DEYTEROU ICHOUQUADRUPLE ARROWQUADRUPLE DASH DAGESH OR MAPIQTWO WITH STROKEETIC VERSE SIGNRIGHTWARDS AND U PLUS U PLUS UULTIPLICATION XDOWNWARDS TREND AND LOWER LEFTREVERSE SOLIDUS AND BOTTOM ENDREVERSED OPEN EUMAI PALAUNG FAE ISOLATED FORME MUSICAL NOTES ALTERNATE FORME OVER INFINITYDOWN SEQUENTIALUGMENTATION DOTDOUBLE TRIANGLERECITATIVE MARKRECEPTIVE EARTHREAMY EYEBROWS  CLOUD AND RAINEFT REPEAT SIGNEFTWARDS ARROWS CORNER BRACKETHAKING PARALLELHEH MEDIAL FORM WITH DESCENDERTIP ON THE LEFTCAPITAL LETTERSHALF FILL SPACE TOUCHING INDEX WITH DIAERESIS TIMES IGI GUNUGROUP SEPARATORUR POINTED STAR THUMB STRAIGHT THROUGH CIRCLETHROWING A KISSHOUSAND STATERS-CARRIER LETTERORT EQUALS SIGNHORIZONTAL FILLBREAKING HYPHENHORIZONTAL DASHBROWS STRAIGHT OW-FALLING TONEHOOKED INDEX UP WITH RIGHT LEGOUBLE BACKSLASHTILDE DIAERESIS PLUS HI PLUS AFTER COMPLETIONFRACTION DIGIT FOUR ENCLOSURESFOUR DOTS WITH PERTHO PEORTH PPLUS SIGN BELOWFORWARD TILTING PARESTIGMENON CORNER WITH DOT OVER SIG4 SHU2FIVE-LIKE BHALE OVER MOUNTAINSHREE DOTS BELOWCLOSED BY CURVETRIANGULAR MARKRMAN PENNY SIGNPENSION RAILWAYPEN SQUARED DOTCKET CALCULATORRNAMENT STROKE-CIRCUIT-OUTPUT GEMINATION MARKGGLY LINE BELOWGHT REPEAT SIGNOWER HALF BLACKTOP RIGHT FATHAZAIN FINAL FORMVOWEL SHORTENERSTROKE NOT SIGNALMOST EQUAL TOACHES THE LIMITALIF LENGTHENERLEFT DOWN BARB ND OF PARAGRAPHLEFT HALF BELOWLEFT HAND INDEXVOWEL SEPARATORALAYHE ASSALLAMWITH RAIN DROPSMIDDLE DIAGONALWITH DOWN ARROWWHITE DOT RIGHTLETTER CAPITAL LOSED INSULAR GLEVEL TONE MARKLEVEN FULL STOPAI LAING DIGIT SSICAL BUILDINGNA DOUBLE HELIXSTERESIS SYMBOLN-ARY SUMMATIONAND PARALLEL TOSHITA PLUS GISHMURDA MAHAPRANAKTOVIK NUMERAL ST SYRIAC CROSSST QUARTER MOONLEFT HALF BLACKSHORT OVER LONGAMOUNT OF CHECKKISIM5 TIMES BISIXTEENTH NOTESNASALIZED TONE-LATION FUNCTIONAMARITAN SOURCEMARRYING MAIDENLD TAMIL SHORT LONG VOWEL SIGNLOOK OF TRIUMPHWALLPLANE SPACELMOST EQUAL TO MEEM FINAL FORMMALAKON CHROMA LONG HOOK BELOWLIGHT AND LEFT HIRD-STAGE HLIENDED MULTIMAPSMALL LETTER DOT TILDE ABOVETHREE POINTED MOTHETIC ABOVEOSITION SYMBOLAMNUC PII KUUHENNA WITH BARSTIMES OPERATOROUR OBOLS SIGNERTICAL JOINERSQUIGGLE ARROW WITH BACK YERLOWER DIAGONALMEDIUM DIAMONDTIMES SHU TENUERIAL ARAMAIC HESIVE BANDAGEERIC INDICATORREATIVE HEAVEN WITH LONG LEG-CURRENCY SIGNOTHERS CIRCLEDSMALL LETTER JDIAGONAL PATH THALAN ETHEL OTHAKA ANUDATTAEPENTHETIC YUTOOTNOTE MARKERTETARTOS ICHOSDEYTEROS ICHOSDIAGONAL MOUTHSHESHIG TIMES UNIT SEPARATORLACE OF SAJDAHBHATTIPROLU AAIGHTWARDS VANEUNION OPERATORTERMINAL MARK-IKHAYA PUTNAYATELPIECE CLOCKYOUTHFUL FOLLYONE SOUND WAVEDI ALLAAHU ANH HASER FOR VAVTHOUSANDS MARKOUSING THUNDERMRACHNOTIKHAYAUSPENSION MARKHREE-LEGGED TEUBHAYATO MUKHADOUBLE-STRUCK THOUSANDS SIGNORANGE DIAMONDBLADE SCISSORSBLACK TRIANGLEOPPOSING PIRIGTHER CHRISTMASREE-LINE STAFFRIGHT CROSSBARREH FINAL FORMAND COLD SWEATD-UP NEWSPAPERLETTER OVERLAPEMIVOWEL SIGN TWO ENCLOSURESDIRECTION FLIPFORWARD INDEX LESS-THAN NOR PLITTING APARTPPED MIDDLE UPPLETE INFINITYPLE WITH HEARTLEFTWARDS TICKMID-LEVEL TONEWITH DOT BELOWAFETY SCISSORSVRON SNOWFLAKEUP RIGHT BARB LEFTWARDS AND UNDER RELATIONFFICE BUILDINGEXTENDED BHALERING MEGAPHONETWO DOT LEADERUPPED INDEX UPSPEECH BUBBLESFATHATAN ABOVETURKIC LETTER FFED FLATBREADPROTECTED AREAAI LENGTH MARKFINAL ANUSVARALEVEN TWELFTHSLIGHTLY SMALL EXCLAMATION OHDIO MICROPHONELINE EXTENSIONCRIFICIAL WINEMENSION ORIGINCEPTER OF JOVEDASIA PNEUMATAQUINARIUS SIGNVONIC ASTERISKSMOKING SYMBOLRD PLACE MEDALCERTAINTY SIGNOVER GUD LUGALTOP HALF BLACKWITH LEFT HOOKCENTURIAL SIGNGUNU TIMES ASHGYPTOLOGICAL AROSS ON SHIELDEND OF SECTION CROSSING ESH2ALLAJALALOUHOUSIDE-DOWN FACEUAL WHEELCHAIRCOLON OPERATORUND MARK ABOVETWO WHITE DOTSWITH FATHATAN PEN MARK BELOWLITTLE SECTIONTRIANGLE WITH DOES NOT EXISTPARTMENT STOREZAH WITH MEEM PARATED SYMBOLLOTUS POSITIONGERED TREMOLO-TRANSMIT STATEPAO KAREN TONESMALL TRIANGLEGHT WITH STARSZAKAYA LANTERNSEPARATOR MARKALF TREE TRUNKREVERSED-SCHWAIRCULAR VIRAMAANGLE OPENING SHAN MEDIAL WAED SYMBOL FOR ISSION TICKETSIVE OBOLS SIGNSEL LOCOMOTIVEXO EKFONITIKONNORTH ARABIAN DUN3 GUNU GUNUOBLIQUE HYPHENVERTICAL COLONIWAZ TIR TYR TSECOND SUBUNITSURROUND FROM VERTICAL LIGHT1 OVER LAK-081VERTICAL HEAVYAROUND-PROFILEJOINED SQUARESING HANDS SIGNINOLOGICAL DOTINSERTION SIGNISED ROUND DOT AND DIAERESISIVE KEY SYMBOLINFINITY BELOWVERTICAL ABOVEOLD RESOLUTIONAU LENGTH MARKVENIENCE STOREITA PLUS GISH WORD SEPARATORBAG MEMBERSHIPINVERTED BIRGASTRONG ISOLATEINVERTED DAMMANYI ZLA NAA DAHINESE TONE YAUDATE CHRIVIWITH INTEGRAL WITH JEGOGANMARKS CHAPTERDOUBLE MUCAADSIGN AVAGRAHA WITH OVERBARUPWARDS TRENDLEFT CROSSBARVERGREEN TREEDOUBLE HYPHENHIEROGLYPHIC VEN POINT ONEMODIFIER MARKNUMERATOR ONETOP HALF RINGSSAGE WAITINGPLUS OPERATORCHRYSANTHEMUMARRED TRIDENTURNED W BELOW WITH INK PEN OF THE HORNSWITH ASTERISKBY DEFINITIONDOUBLE STROKEVERTICAL FILLCHECKER BOARDMESSENIAN TENLATERAL CLICKUPERIMPOSED XSIGN PAMUDPODFOREMENTIONEDOGOTYPE SIGN VERLAY MIDDLEITING THROUGH WITHOUT SNOWINVERTED TURNDIAERESIZED UEHU FEOH FE F DIRECTIONAL SAMYOK SANNYASMALL LETTERSK WORK SYMBOLUFFLE PRODUCTOTEHEAD BLACKUPONDIUS SIGNINVERTED FORKS KAI APOTHESS KRYZHEM ON VERTICAL BARSWAW-AYIN-RESH WITH TEE TOP BZHI MIG CAN TIMES KASKALGYA GRAM SHADHAM DIGIT ONEISH LIRA SIGNCROSSING MUSHEAVENLY EARTHMINUS SIMILARPAIRED ARROWS VARIANT FORMALL LOST SIGNPREPONDERANCEMINUS WHITE XGTER TSHEG MAFINAL SEMKATHTIRTA TUMETESMINDER RIBBONSAL PLUS TUG2OUT MIDDLE UPH-TYPE SYMBOLGIFT ENVELOPEDOTTED ZLAMA EMPHATIC TONEPPOSING LUGALCROSSING GABAYUUKALEAPINTU CROSSING KA2HAKASSIAN CHECROSSING GAN2OURTH SUBUNITPA NJI PIPAEMOBLIQUE LINE APPED PRESENTRIPLE SVARITACULATED LORRYKAPYEOUNPIEUPMOBILE PHONESMASORA CIRCLEINTEREST SIGNCRIPTION TAKEFIXED-FORM RAHERICAL ANGLENUMERIC SIGN RANKS CASKET DOUBLE CIRCLEFINAL LETTER S UP TOGETHERROTATED BIRGALVE FULL STOPVICE CONTROL ACCOMMODATIONW RING INSIDE OPPOSING KUR DIMINUTION-1TU WAS-SALAAMFICATION CARDARROW OVERLAYSIA-AUSTRALIACRIPTIONAL PARTABLE STEREOZHOU NUMERAL OLVING HEARTSUDDISA SIRRAHNTY FULL STOPIFI ROHINGYA OMAN NUMERAL FT ARROWHEAD AR WITH QUILLSTERTIUS SIGNOON NOTEHEAD NING MOVEMENTLOCATION SIGNSELECTED AREALVEOLAR CLICKSHESH PLUS KI-OFF CALENDARED PAPERCLIPSU WITH STROKECITATION MARKIOT SYLLABLE ARGOSYNTHETONGAW KAREN SHAIVE SLOW SIGNIGHT TWELFTHSIDE LOST SIGNERTION SYMBOLFROWNING FACEGAR FRACTION -OR-PLUS SIGN-PER-EM SPACERN PENTATHLONUPSILON WITH FULL SURROUNDEDIC ANUSVARAL-TYPE SYMBOLILE SEPARATORNG TERMINATOR AND SKI BOOTIMAGE BRACKETYOD YOD PATAHWO-LINE STAFFTED HAND SIGNLOSING SPIRALONAL COMPUTER HEADED ARROWRIZONTAL TAILBALL AND HOOPTROFLEX CLICKEELING PERSONER BOARD FILLRACKETS ABOVE AND YEN SIGNIRCLED INDEX YMBOL TAU RHOLOCK WITH KEYONGRATULATIONVOWEL SIGN PAVE-LINE STAFFONG-LEGGED DERIGHT HARPOONARCHAIC KOPPANINE TWELFTHSSYNDESMOS NEOONG RIGHT LEGILABIAL CLICKBASAN LETTER MELODIC QITSAEVERSED DAMMASILI PNEUMATAARLAUG SYMBOLEUROPE-AFRICAQUARTERS SIGNMAILBOX WITH BOWING DEEPLYED DOUBLE VERTE ORDER MARKANNED LEATHERLEGETOS ICHOSBOTTOM CORNERDVOECHELNAYA USHING UPWARDAMUHU ALAYNAAMALO POVYSHE USICAL LEIMMAAWELLEMET YAZAN RUPEE SIGN-ESASA DOTTEDHREE TWELFTHSBOHAIRIC KHEICIRCLE INSIDEDIC MARK SIGNOPPOSING NAGAWAVY LOW LINEMALL LETTER Z B BAR SYMBOLSTABLE SYMBOLI WITH STROKEUE OF LIBERTYMULTIOCULAR OMEDIUM SQUARERRIAGE RETURNTHIRD SUBUNITLISION SYMBOLIVE POINT ONERPENTRY PLANEWAVY OVERLINEJES SU NGA RO BAT AND BALLNAP PIZZICATOENT ARROW POIRTY-SECOND EMELY HEAVY FOLDED HANDSEMISOFT SIGNFORMING ARTSMIDDLE PIECELER CONSTANTUBSCRIPT TWOPOETRY MARK-FOUNTAIN PENNOTCHED HOOKVICTORY HANDKANA REPEAT FT RERENGGANPORT CONTROLRISTMAS TREESAZ IS ISS ISH ZIDA TENUSUR OVER SURNOTCHED TAIL LINE SYMBOLDE MARK SIGNAR DIAERESISLLE PATTERN MEDIUM SHAFTQUIRREL TAILSMALL TRIPLELL MODIFIER-DASHED ARROWDICTION SIGNETRETES SIGNNERSHIP SIGNLINKING MARKLINGING FIRENJALA GONDI QUARTER SIGNNEPOSTOYANNYNGLE BARLINEARALLELOGRAMRAFFIC LIGHTRIGHT SINGLERAH BEN YOMOMADDA ABOVE MEDARY CAMELENOS CHRONOUM NSHUT NYAMEVERING FACEDENTAL CLICK IN TRIANGLEXIRON KLASMASMILING FACEERPENDICULARIVE TWELFTHS KLYUCHEVAYADIGRAPH YORIRIAGE SYMBOLPROTOS ICHOSCROSSING NUNCROSSING LU2CROSSING KALCROSSING GI4ACUTE ACCENT OVER KISIM5FERENCE MARK OVER MIDDLEUPPER CORNERFLAG ON POSTEAGULL BELOWCRESCENT BARPOUTING FACENORTHERN TSE OVER TWO PIMETA STAVROUSECTION SIGNQUARED ARROWENARIUS SIGNAFU LEERAEWAT MONGKEUAEQLIMBS DIGITSLICKING LIPSRANCHING OUTRING OVERLAY OF ANTIMONYRIAL TRAMWAYFALLING DOTSRION CHRONONDIGRAPH KOTOFEMININE DOT ON PEDESTALING HAND FANKHAMTI TONE-BRATION MODELARGE TRIPLEKHMIMIC KHEIOID NOTEHEADOING TO MEETING OPERATORING HITTING OK HAND SIGNLARGE DOUBLETHREE HEARTSOHAZARD SIGN-DZUD RTAGS MPHASIS MARKMPTY CENTRE HREE FINGERSING ENVELOPES ABOVE SIGNLAM WITH YEHREVERSE MARKKLYUCHEVAYA BLUE DIAMONDBLOWING FACENARROW SHAFTUN WITH RAYSALTERNATING SS-THAN SIGNHIBITED SIGNLAYING CARDS WITH INDEX INTEGRATION BYSMAL WATERWDATA SQUAREBUTTON MOUSEDUG TIMES NIOTTOM HALF OLOWERED FLAGMANNAZ MAN MTHODOX CROSSSHORT RIKRIKUSEATED FACEBSCRIPT ALEFOGOGRAM NYAJRIGHT DOUBLEMONOGRAPH UKBRIDGE ABOVE WITH UPTURNROUNDED ZEROLATALIZATIONN ELEMENT OF-SIMPLIFIED IGATURE SHRIUTH-SLAVEY KSHED BARLINEREN CROSSINGEEPING SMALLYMBOL BINDU AND OPERATORBACK OF HANDBEHIND CLOUDSMALL DOUBLEONISHED FACE-SHAPED SIGNTERNATE AYININ MIDDLE UPYOUTHFULNESS AND TOP ENDLU PLUS ESH2ANG KHANG GYON US SYMBOLILLED CIRCLEVAKRAHASANYAYOD TRIANGLE AND PICTURETEARS OF JOYBAHIRGOMUKHAHYPHEN-MINUSTE SEPARATOROQ NSHUT YUMBLACK CIRCLEUGHT BALLOONDOWN HARPOONTHIC LETTER THETA SYMBOLBINING MARK -MAIL SYMBOLOPPOSING LU2INDEX MIDDLEREFACE COLONMALL SECTIONDOWN NEUTRALOPLE HUGGINGOPENING LEFTAND CRESCENTIDENTICAL TOBETWEEN LIPSMUM TIMES PAUTH ARABIAN UH PLUS GISHDOT OPERATORRCHAIC SAMPI SKEWED LEFTLEFT HARPOONTRAGRAM FOR ROLLING EYESTOP-LIGHTED LUS NOTEHEADCHARACTER-1BCHARACTER-18WIGGLY FENCECHAIR SYMBOLOVER KASKAL GREEN DRAGONGROUND SLIDEVOLTAGE SIGNPHEME JOINERTRIPLE FLAMETRIPLE DANDALEFT-LIGHTEDIRAGANA HOKANDING PERSONKAPPA SYMBOLCK-O-LANTERNRNAM BCAD MAGAW KAREN EUOUCHES THUMBEIGHTH NOTESGBY FOOTBALLNUITY SYMBOLCIRCLES AND AA AS-SALAAMCIRCLED PLUSGEBA KAREN ICIAN LETTER OUR TWELFTHSS SUBPUNCTISHAND FORMAT CALENDAR PAD WITH DAGESHDOUBLE ARROWATNAH HAFUKHULL NOTEHEADALT PAN SIGNOUGHT BUBBLEACE INTEGRALHASIS SYMBOLDOUBLE ARCH LOWER CORNERVER EQUAL TOHEAD-BANDAGEATTOOED HEADNCK CONSTANT CROSSING GUINUSOID SIGNINVERTEBRATECABBAGE-TREECENDING NODEMBELLISHMENTGUARDED AREAYAN NUMERAL UME INTEGRALNATURAL SIGNHAH WITH DALLEADING EYESALLPOINT PEN6 LONG NGGOOWITH SMALL VMING TO MEETHALF BRACKETENG DIGRAPHEDICAL MASKRIGHT GUARDRIGHT HEAVYME LONG CANUISHED FACEZZA WA JALLLOSED ENTRYMACING FACEMED RGYINGSRESPONDS TOLOTI NAGRI SMALL CLOUDE2 TIMES ANLU PLUS IGIEEZING FACELTED FLOWERULO TWO SUMLT OF CLOTHMBLER GLASSRANSMISSIONLUPOVODNAYAUG RTAGS GYRIGHT LIGHTEAVER DENE MBA BAYANNARAISED FLAGLTERNATE AALTERNATE YALOSING MARKSINGLE AND RCHAIC JNYAUBLE TONGUEE WITH VEILUETTE BREADREAKTHROUGHEN STRAIGHTSHEQEL SIGNOPPOSING IMOPPOSING ENTHAM DIGIT MUNCIA SIGNIEN MONSTERTH-THALATHATETRAFONIASMUUSIKATOANONIAN SIGN N THE VERGETENS DIGIT IL FRAGMENTILCROW SIGNILIQUA SIGNL TIMES LALL OF THREADSTEAMY ROOMSTERED SIGNRUNNING MANHREE BALUDATIEE SHEUOQHITE DRAGONHLETIC SHOEHOKHLOM ON LATIN CROSSMONOCULAR OTHREE TIMESHORA DIGIT MOVED BELOWORT BARLINERPOON ABOVEORCE SYMBOLOR OPERATORTHIRDS SIGNI TIMES BADI TIMES NUNLACKLETTER LACK SULFURIBLE-CREE YJOYOUS LAKENUMBER ZERONUMBER SIGNIPLE TONGUENTIMONY OREIRCLED TEXTKAARA POLLUNSE CHEEKS ISIGOTHIC ZTA EQUAL TOSHAAYATHIYASECOND MARKSVASTI SIGNJIHVAMULIYANITIAL IZHEIVERY TRUCKJECT SYMBOLIX TWELFTHSSYURA SASAKNIKOLSBURG NG LEFT LEGSYMBOL VIDJIMULTANEOUSIN EQUAL TOOMAN SIYAQ KTIESELSKABRYVNIA SIGNINDERGARTENSTORIC SITEINDICESIMA OLD NUBIAN SSANGKIYEOKOHINGYA YEHOF MASHFAATOF ENVELOPENBLENDED UKNYIS -KHYILND ODD SIGNND OF PIECENUSVARA ONENUN HAFUKHALETION MARKPUT MORTUUMSPEED TRAINTUNE COOKIEFGHANI SIGNFINAL SIGMALEU SATANGAFIRE ENGINERIPLE PRIMEMFON PIPAEMPOST OFFICESPIRATED FAMICAL HEARTPODCHASHIEMRISING DOTSMIDDLE BENTFOURTH ROOTRITING HANDESH DIGRAPHENTHESIZED EORGIAN NARLON SKEWED EPIDAUREAN RADITIONAL RACHMA SIGNRA SOMPENG ERCENT SIGNRIGHT-HAND RIGHT-LIGHTPHNAEK MUANQUIQUADRATEQUERED FLAGETEI MAYEK SIMILE SIGNEUNJOMNDEUQTY THOUSANDLINE FILLERTWO FINGERSRING LIQUIDHAWH HMONG GSUM -KHYILGUISED FACEROSS ACCENTOUTHERN TSETONAL MARK HAGGAR YAZHLEEP SYMBOLLEAF CLOVERHANG KHUDAMOVERSTRUCK OUNDED FACELD SCRIPT XHEATED FACEHEAVEN MARKLD POLISH OHEELED SHOELCE TSA CANOUBLE DANDAHIGH STROKEOUBLE ACUTETIGHT ACUTETRUNCATED AMIDDLE HOOKPERISPOMENIGAP FILLER-LEFT SYMBOLLEFT SINGLEGAYANUKITTATRIAN CAMELGE AT NIGHTMIDDLE STEMPARAKALESMAGENTLE WINDTRESVETLAYATRESS SIGN GHAIN WITH TRAIGHT WAWROKUTASTI ARONTHISMATAROR-BARRED GRAMMA SIGNGRAVE-ACUTELEFT DOUBLEAILLESS PHIAESHAE NYAMCK SEXTANT--OFF SYMBOLBETA SYMBOL PLUS NUNUZ PLUS MASH2AGAZ DAEG D DECORATIONUTH CORNERSAGONAL SIGNUTING WHALEBELOW RIGHT-MINUS SIGNCOMBINATIONXAGRAM FOR VYKA ABOVE VA V CHELNUCOND SCREENCONTAIN AS DIATONON DI0 FOOTSTOOLBANK SYMBOLDOUBLE AND  WRIST FLEXUSHING HANDACKED COMMABOTTOM MARKACTIVE SIGNACUTE-GRAVECHING CHICKDOUBLE SHADDOUBLE RINGDOUBLE MARKVAMAGOMUKHAWASLA ABOVE-COPPER OREWO TWELFTHS PROPORTIONDONG TSHUGSBLACK ARROWDOLLAR SIGNDOACHASHMEEAESCULAPIUSARM SPIRAL  I ZAPYATOYVISARGA ONEASE TO THE YEORINHIEUH OF FORTUNECURVED BENDXTINGUISHER OF FLOWERSARPEGGIATO DE KIKAKUI ARMS RAISEDZERO THIRDSUPADHMANIYAARAM GONDI DASH SYMBOLDALETH-RESHCROSSING URVARYS ICHOSCREDIT SIGNXESTES SIGNVE OF PEACEAWNING FACECROSSING BUUNIT DIGIT CROSSING ENCROSSING IMZIGZAG LINECROSSING PIWING NEEDLEDESK PERSONUNJO WYNN WCTION MARK CTION MARK- OVER IDIM  OVER BULUGATION SPACEATION POINT3 LONG NGGOXI RADICAL AMUSED FACEATH PRODUCTDENT EMBLEM WITH PLATEWHITE JOKER UPPER HALF WITH JACKSCCUMULATIONDYO CHRONON AND MACRONCELANDIC-YRWINKING EYECAN RGYINGSWITH GARDEN6 LONG NGGEDUATION CAP WITH DASIACARET TILDE TIMES ESH2 WITH CARON WITH COMMA WITH MAPIQCH AND LAMPCE OF PIZZA WITH TRILL WITH TITLO5 LONG MBOOBREVE BELOWUMAN FIGUREBZHI -KHYIL S ZAPYATOY SHOE STILEURRENT SIGN TACK BELOWBUMPY ABOVE WITH FLASHWE PALAUNG OUT INDEX  TIMES SHEVERAGE BOXHAAPRAANA CURLED WAWION BOTTLEASTERISCUSTAMAN SIGNASPIRATIONCURLY HAIR1 LONG MBE1 PLASTICSTIMES SIGNING-SHIFT OLING FACEC WITH DOTGUA PI MAOTOP CORNEROLON EQUALINHERENT AOUR FIFTHS WITH BASEUR YIG MGOCROSS MARKPPOPOTAMUSBA SATANGACROPHONIC HERMOMETERATRICHISMAATTY WITH OUTHERN TAOUTER JOINVEL SLIDER OVER KAD5FFICULTIESROEZENIAN FINAL HETHPRALINEAR INITIAL RAAUTOMOBILEDA SATANGAUP NEUTRALUP OR DOWNEUTRAL YERTWO THIRDSTWO SHORTSSYLLABLE MAR ECLIPSEHAN DIGIT DA PLUS HAOANDAKHIATIXTHS DISHEVERSED PED WITH DOTT AND BOLTZH DIGRAPHNTITY MARKNTO SHRINEKAI SYMBOLKA SATANGAK2 PLUS BUNUMBER TENTYPE COLON2 LONG MBOHAMZA MARKJONG TILE ISMUTH ORERING THUMBITH DIGIT IT MBAAKETF SHE-GOATYEH BARREE OF DHARMAHEAVY BEATFAHRENHEITOF HYGIEIACY MESSAGERING ABOVED KEYBOARDCAPITAL ETTAIL GLASSTING HEARTURIPIGMENTTWENTIETHSCIRCLED CAGBAKURUNENICAL TAPERCISIVENESS WITH PLUS WITH RAINPEDAL MARK-LUE KARANTRETCHED C POVODNAYAI ARCHAION SCHROEDERBLACK FLAGGAS BZUNG OPEN SHELF WITH LOW IED SHRIMPGANDA MARK PLUS SHU2IDEOGRAPH IDDLE MARK WITH PAGETHAPASCAN GOLUBCHIK ICK FIGURETHDAY CAKEHREE ABOVE WITH TAILGHT LIFTERHOOK ABOVEBOLD SHAFTBSTRUCTIONROUNDED ERORTHERN TAOSSED SHEI WITH TICKBROKEN BAROSTAL MARKHOTIC HOOKUSEL HORSEGGRAVATIONOTING STARTRESS AND GGING FACEURVED OMETTHMIKON N ZAR AMULET WITH RINGTREFACTIONRKING FACEOROME SIGNHUNGARIAN BLUE HEART RESUPINUS RGYA GRAMGREE SLASHFORMATTING WITH BELTCHAD RTAGSUPPER HOOKCH BALLOONILE FOLDEROUND OMEGAROAD OMEGACOMPONENT-COMPONENT TEMPLATIONIKRON ISONZEIRO SIGNINDU BELOWAYER BEADSYMBOL AIVAINDEX BENTOMMA BELOWPOUND SIGNGIMEL-HETHON MEDIAL FOR RECORDRUPEE MARKPOLICE CARPASSIMBANG-SHAPED HAUR CORNERSPLUS ERIN2TRIPLE DOTTESE CROSSRSI SYMBOL WITH EGGSPLUS BELOWG MUNDARI UTH OR SPYIGATURE OECHECK MARKIGATING RAOP NKAARAEGAGE CLAIMRUDIMENTA FRONT WALLTERNATIVE FTOGGOS OUCOLATE BAROON LILITHOON SELENAUR HUNDREDBELOW LEFTPLUS NAGA AB2 TIMES ENS SYMBOLABATA TREELEFT HEAVYLTIC CROSSXED BICEPSLEFT GUARDUBLE DASH SHMIRI YEHENTHUSIASM5 PLASTICSRESH BELOWEDESTRIANSLEFT SERIFACE FILLERDIATONIKI LOWER HOOKLEFT-HAND LPAPRAANA ENETRATIONMOTORCYCLEALEF LAMEDALEF WITH EEKING EYEALENT SIGNLEFT LIGHTLTERNATE URAGGISMATASSANGARAEAED FINGERSED FIGURE-MONOGRAM BRIGHT SIGNMONOFONIASA PLUS KURNGUAGE TAGA PLUS IGISSANGPIEUP AND KNIFEUNKIA SIGNMADDA MARKSELINE ESHWITH STRAWWITH SPOONM STALLION3 PLASTICSNGLICANA WLE-DELAYEDALLY MARK  AND MOUSEA TANG LAILE LETTER MONTH SIGNMONOSPACE SS OF MILKWITH WINGSEONGCHIEUMN NGGEUAETRED DRAGONLINDRICITYLOGICAL ORLIMITATION4 PLASTICSLIGHT BULBELT BUCKLELIGHT BEATNDA PA NJILHAG RTAGSNAKE BELOWRECIPITATESMILO SIGNLLOW HEARTEIGHTIETHSAEDA-PILLASPACE MARKSHARP SIGNNANGMONTHOEICH STARKNASPIRATEDRDHACANDRALEK ATTAK SGOR RTAGS DRAWINGS SMALL TAH LENDED YUSDIGIT ZERORIGHT HOOKAKKHANGYAONDU TEMPLERCHAIC KHAWO SHORTS LGIZ EOLHXLONG FINALAILED BIRDDIRGA MUREW OR MODELLONG OVER LET SYMBOLLONG TSHEGADDA WITH DOUBLE BARADAK BINDIY AND RICEQUISH QUADRHO SYMBOLSTRAL SIGNU2 PLUS BAUMAN EARTHSE-CREE SKKRYZHEVAYAEARLY FORMEARTH MARKANGKHANKHUDED PERSONUAM TSHOOJRGE SQUAREMILLE SIGNSIXTEENTHSRGE CIRCLEANDHI MARK KABA TENU2 PLUS ASHETTA-PILLAMEEM ABOVEVIE CAMERAMEL SYMBOLU CIN HAU E PLUS SUMWING HEART2 PLASTICSSTRUCTION SBUB -CHALSCAN LINE-STROM SIGNME PLUS ENEQUIHOPPERUM ROTUNDAKINDI MVOP LATE FORMNOTE WITH ANGULAR TO7 PLASTICSUP HARPOONEBENSTIMMEWHOLE NOTE AND ARROWLACK JOKERUARDEDNESSMINO TILE VIOUS PAGEST-FEEDINGST PALETTEREVERSED ISIDEWAYS IWHITE HAIR AND BREVEWHITE FLAGMALL ALEPHLANE MERGEDUOUS TREEXHEEJ CEEV6 PLASTICSLA USED AS AND ACUTEZU OVER ZUR2 PLUS SUMHANCHOLLROTATION-CAPITAL QADMA GDANHWAZ EH EHINOCEROSMETOBELUSCAPITAL ISMALL YUSMBROIDERYCAPITAL DLOND HAIRURNED GANURUZ UR UWASH TAILHARACTERSHARD SIGNMAEMGBIEEOUTH WINDOUT MOUTHBING CANE-KHYUD PAWING STARIALECT-P MUKPHRENGBITE LIPSHIMA SIMAIA SYMBOLBKHASIAN I PLUS LI TIMES UDMRACHNAYAOW KAVYKAM HE-GOAT5 CYPERUS TIMES HAMALL RINGBOTH BENTOURA SIGNHI SYMBOL TROMIKONOVER GAN2HOT SASAKSIVE FACEACE NOTE OTAL SIGNLOWER DOT5 LONG JOTIMES PAPABOVE TO BRUL SHADTIMES NA2HEADSCARFURNED AYBLVIN SIGNURLY LOOPRPORATIONCANG TE-U-AMMONIACA PLUS NAORT-TWIG-ORTH WINDZ DIGRAPHLONG TIP ADEG ADEGBO BAIMAIWITH FACE5 BATHTUBBO GYFU GOVER MUSHHREE FOR HOOK MARKHIYYAALAACARTRIDGEMARK SHADMARK CIM STAL BALLTANDSTILLVISARGAYATAKHALLUSLACKFOOT OF STIMMEIRST MARKNING SIGNAS MEMBERVINE LEAFISEN-ISENTABE SIGNL ME HANDYEH WITH ANEROSIS ODIASTOLESTEBASKETKYO TOWEROKED HEADVOETOCHIESEMICOLONNIGGAHITANIGHT OF VOCALIC RINNYIIYHESSANGSIOSVELOPMENTNIHSHVASAOKOUFISMAOKED TAILNO TELEIAATTACHED LARGEMENTVER LUGALXHAUSTIONS DIGRAPHATHAMASATLAN SIGN VERLONG AANTHAKHATKING BOOTVEUAENGAMVIGINTILE2 GARMENTJERUSALEMNVERTED RANSKRIT SANTAYALANNSERT AT NUSVARAYAKEMPHRENGAOS ICHOSK GESTUREVICE MARKNTERPRISENTESSENCEKA- SHOG NTRACTIONKAMEYTSA YEH ABOVEOCCLUSIONANG CITI ANGGEUAETKU RU KHA247 DIPTET ON BONEITRA SIGNT OF MEATY BLOSSOMKSTREPTON1 CHARIOTARM CLOCKARISTERA YEAR SIGNIVE-PULL-IVINATIONY-FOURTH ARCHAIC MY-FOURTHSSTRELNAYANDAILING WRINKLES IGH HAMZA-STACCATORTER MARKIGHTH ASHAINTBRUSHAISED DOTBEER MUGSWRY SMILEUTRA MARKSHAB CEEBRTS MEDALUURDHAJA SPIRITUS UVUZHAKKUIGN NUKTAIGN SAFHAIGN TOMPIOO DENNENAJANYALANBASE UNITIDEOGRAM NA KHONNALLABLE OM-LOW TONEICE CREAMLLABLE B0SOF PASUQ-MID TONELIVERANCELITTLE UPLISSANDO BICYCLISTBIAL SIGNXCITEMENTWORDSPACEIDEWAYS UAF PERSONAFFE FACELINE FACEYRANISMA LIGHTNINGNCLOSING OP HALF ONGER SHIPRWARI DDAALI GALI SEPTEMBERING CARD NGER ROOTING DOLLSING GLOVENG SANDAL3 PLUS ANOM SYMBOLING LANESING STONEAVE ARROWALPAPRANAINISHMENTNGUN SIGNONGSEONG ILE TILDETEH ABOVEAL RUNOUTILIPPINE ONG GRAVENFORZANDORUM CLEF-VRAKHIYA ONE THIRDONE MARK-TED PLANTALAYALAM LEFT TACK0 LONG LEVANAGARI LEFT RINGIN SQUAREON TEUAEQON GROUNDINAL NOTEINARBORASB DIGRAPHTRESVETLO APODEXIA RA OR RITREDECILEEEN WITH CHOSEONG  AND TAIL OF PAPERTUTEYASATDRAM SIGN RICKSHAWPROJECTORTUKWENTISCUBE ROOTDOWN SIGNZIR SASAKDOWN STEPCULTATIONENTRY SAWUNGLASSESUNGSEONG FEH WITH ULL BLANKED DIGIT D SALTIREUMED HEADRNEY PARAZAL SASAK AND CURLRO WIDTH CHAVIYANIDEPARTUREDUS RTAGS OF BLOOD FROM BARTRAIGHT UPENTASEMEZERO SIGNPENT SIGN GARSHUNIGITTARIUSED PLANETRCHAIC RAEMBEDDINGCRESCENDO PLUS GALFLAT SIGNCOIN SIGNEIGHT OF  PLUS GUDG IN HOLE PLUS KU3CLOSED PLUPPER DOTPPOINTED CORN FACEFOUR BENTELEGRAPH CONJOINERREAK HERE PLUS LALRDEL DKARCOMPLETEDELLOWSHIPUBSTITUTEPOSITIONSTTED STEMFROM WALLDOWN HAND PLUS TURFINAL NUNFINAL NGAREFORMED FINAL MEMUPTSTIMMEEFORMED TEFAIDRIN  PLUS ZA7 OVER BALZENE RINGPIDERY HAPLE HEART DIVIDERSRCHAIC IIUE MAEMBAPPOSITIONFISH TAILRED JOKERFACING UP OVER LUMREDNE ON  PLUS SAGEMPTY SET AND BELTZAKRYTAYAE AT LEFTETER SIGNRFUL FACE STREAMERDAD WITH DENT AND URAMAZDAAEAVY DOWNTO CORNERHAIKSUKI  SPARKLERQUADCOLONTONE MAI ERTY LINERIED FACEES AKURU EURO SIGNQUEEN OF ER BUBBLEP ELAMITEESAME DOTP DIGRAPHR PLUS RAERCIAL ATPANYANGGAETTI BALLROJECTIONETRASIMOUEBIT SIGNCHANICAL PAA-PILLAGRIK SIGNHALF SIGNQUSHSHAYAUR-DE-LISHALF NOTEHALSHELETGREATER YPADE SUITL-LAKUNATTO MARKEN NTEUM OTTAVA ING ROD XCELLENTAVY BANDDANTAJA OM NTEUMVE SASAKETA SIGN1 BARLEYING BELL OVER KGANE TREEKATAKANAKASRATANLESSER YAIYANNOIYIDDISH PRECEDESNEIFORM LESS SHANO SLASHOLLOWINGDIM GUNUSUCCEEDSUNG DASHNO THUMBDAMMATANFINAL THL POLISHETRASEMEFILE BOXNED FOODNAVIYANINCE SIGNFOR STOPBACKWARDUNDERDOTINAGARI WRINKLEDNOTE PAD LANTANGESH LOOP CURRENTCOUNCIL RDEL NAGSE WEDGEIMANSIS FLOURISHDDY BEARELEPHANTONE FOR COUNTERS OVER MULF RING AY-NIGHTOMANIAN ANS SIGNNRES TOSVERGENCEING BOWLWRITING ET SHOESSPERSIONW PRINTS OVER ZIY POPPEROMMA BARAZHAAKKUEST WINDQUINTILE KEMBANGDIT CARDLFWIDTH TTENTIONNOVEMBERSCRIPT GUNDERTIEY BEETLEUAREG YAOCK SALTEOUT BOXEVEN OF ER TRUTHUBJOINER NUTILLUYAMAKKANOCALIC M HANDLESSENTAGONPUSHPIKALEANING ARTYRIA ALLIANCESWIMMINGARSI YEHODESTONETAALUJA ERAL URNSQUEEZEDITA MFONARRIVINGOCUS OF UP TRUCKVESSEL BYBEYFILIJAVIYANIARCASITEUATRILLOEVERANCENINE OF NI ABOVEAR TSHESD BUBBLET NGGEETD CROSS QAIRTHRAARKLEAN LATION XOBOOFILIEXCHANGEAMS HORNSALT OF RILLIONSASTERN WTAR EYESEREVODKARASMIAN AST WINDEUFEUAET1 HELMETCURLICUEERDIGRISFEBRUARYOHM SIGNLA LENGARAUGHTS SANYAKA 3 ARMOURSUPERSETJUNCTIONDIFONIASATH MARKJACK OF PROSTAYAATEBOARDATE MARKATAKANA APITAL FPUN IYEK FACING PUB DAWBCURSIVE YENISEI TAI LUE RAMMA GGVOMITING ON LEFTVOLUTION OF YARNIS FORM IS WHEELIS-PILLAYESIEUNGNITIAL ZTURNED MENICIAN NG RTAGSKAIYARAAANC SIGNYER YAGHIRD MARKS OCHKOM ANTENNAMARRATANABAAFILILTRY LEGBLINEAR  RASWADITHOSCOPEBLED CAROVER BU PAKPAK EBLE SIGNABOAFILIPAIRTHRAHREE OF WO ABOVESMA SIGNCHINESE ROSHTHI CEILING  YUQ NAEBOL SIGNPALOCHKALUB SUITSHOE JOTTRI DISHOREHEAD THIOPIC LOW STOPHAGALL HLOW DOUBCANDICUSYRILLIC BINOVILEWBOY HATORM FEEDCAL DISCZWARAKAYLOZHITIERIYOOSAN-CREE TH-EM DASHOVER GA2BOT FACEGENITIVEUKEUTNDAOVER GI4I SHAKTISHKIR KATO-LEFT TICK IN BUNDANCECER BALLMON TIMEED BRICK TTUDDAG SCOTS S SATCHELDVANTAGEOTIFIED RESVETLYC SIYAQ DS-CREE  SLIDINGMIONIAN GREAT SAZAKRYTOEECH YIWNMALL AXECHATTAWAPAVIYANIMMATION EBEEFILIDUSHENNAGORAZDO HESPIAN MANDARINMANGALAMWN HEARTOT MBUAESHORT ERM ALLAAHCABLEWAYSIX DOTSA SIGN ATOWARDS 56 TURO2HOP BELLDVISVARAGLASNAYAULLS LEGROSSED OPENTAGONBRA FACEBOX TRAYME WITH HARMONICOVERRIDEHARBAHAYZWJ THAJAEN NYAMN-JOINERSNA LDANWON SIGNSIGN LAECOMBINEDDOCUMENT CEDILLATIRRUP RLOCATIVEWASH KAFCLIMBINGRED HAIRTRICOLONIGMOID SME BADGEBER POLECLOSED TV OVER MYPORROONBATBEIT FRAKTUR MEM-QOPHHAN-AKATTISMOS E-X BELOW TALENTSHALF GURE OF POO0 BRONZEEK ONKARNAMENNY 8 KANAKO PLUS DU PLUS DIOO TYPE NA METEKFRICAN D-KHIEUKHREATNESSUDAWADI TER FACELKULIZMYSOFTNESSCASSETTECK CHARTMY HOUSE AT DUSKGBASINNARSE DUNGLONG S TGARITIC BIEE FONOVER TIRLORRAINEOVER SAGOVER SHEICHAEAN BILLIONSEGORIAN  PLUS RUACKSPACE POLNAYALONG BAR-PHIEUPHSIFISTONREE MARKBEVERAGEMINGKALKOMBUVAKPAK WAMBOL B0ER THANLAMITE EAD ORETIVATE Y HEART9 CLOTHMEETORUEAVY YAKOQNDONECEMBERL SEGNODEAVOURMINIMA RDO RJE2 WOMANKYLISMAANGLED SIGN UDAN MARKKORONISERNIN AE DRINK7 NGGUAANGKUOQLAGIOS SEGMENTMARCATO3 EIGHT ISLANDXOPHONENJAEMLI9 NGGAAUM IYEKRA REPAAND END26 EYYYMERICAS KEFULASTERINGWIFRUITANDERERKUTAARU3 AREPALAK-050ST TUBEE GLASSMANCHU WIGNYANR2 GUNUMASSAGEY GREEN7 NGUANDYNAMICSEXTILEAD NECKLEUT KA BUTTONZQAPHA WO WAENLEYBALLWAZ EOHWO FOR SHIFT TWO MARKACTER TAELAENGSPRINGSLEK TOONESTED EN LEAFRAYANNALENGTH-NEQUDAAVYSOKO SOLDIERREATHY RD FACESHAKINGLIGHT XWORSHIPNAYANNARD DISK CHIKI UBUFILIAETMEUNNANCIALEL PUMPDISIMOUDIPLOUNLF FACELLYFISHEIGHT KDOFONONAHAPAKHSOV ROGLJUDIJE CER-WAED RICELAYANNAAM ALEFRESILLOALTILLOLYGISMASHORT ARAKHANGDRIL BUVOICINGLE LEAFSIDDHAMA -PHRUNIKAHITLASHES 6 NGGOOMAI SATA NAME 3 OMEGA3 MONTHDU NJAAMAAYYAA3 WHEELNG MASKUKKAKHARANGKEPENSHUETRARIETYDIARGONMUNGKAHSERPINAALLOT XDHALATHMRACHNYREREKAN3 SPICE5 NGGEEUN MEUT APLOUN3 SWORDWDRIVERALESMA GOLIAN VANESE BAIRKANVAPOURSYNAMIC POMOFO TORNADO PLOPHUHIUCHUS0 SPEARPECTIVECRACKERFLUENCEPAYEROKON FACEPAYANNA0 WHEATPOVODNYRIPPLE VAV YODOMERANGVAYANNA-WELSH IL DRUMONGONANBARREKHONG UEXCONTACTTSECHKAILLEANNCOPTIC RMUKHI PEGERMAFORKINGBUFFALOBAMBOOSIMILAR BULANCEFINAGH TIKRAMAAUNTLETOLAPUK OKRYTIEAULDRONTASHEELVEMENT-AU MARK SHAKERINNABARATH OF ATAEAN  WAAJIB OPEN-OASUTORUTTHACANVE DOT TCHFORKAY SIGNTAYANNAYMAIC LGRADUALAXIMATARY FACECHEINAPTTILIK PPROACHFINAL Y1 ARROWIBIFILITHIEUTHORCULUSIANGQI THESEOSBORZAYA-KIYEOKIC WAND-MACRONCHIEUCHGAYANNAICOPTERTRAINERBOURINGBIG YUSICYCLESCK LIMEHYAAUSHUSSYERUGHEUGHEORTIETH RAMBATPERVISEBOARDERTHKUQI ORKHON -CREE RI NTEUMGENERALI RTAGSRRECTUSBLACHKOPHUTHAOOREVMA RTHIAN CLOTHESGLAGOLI-SHIFT-COASTERTROLLEYPENGKALCOMING TRYASKAUYGHUR -THIRTYONTIEEN-TIKEUTIKHAHITUT TIME-MU-MO-OT NGOMCHEVRONTHALIYACLEAVEROT REPH WOLOSOPRENKHAIFIED EBREVIS BERRIESPLOYAN BERGINEOP MARKRISIMOUCLOSE E MUQDAMJIBWAY HEADINGCAYANNAVEW NOWSANGAN  MUOMAEHAYANNAUP MARK MENDUTP PIEETSANDHI CAP TENEULEUNGNUMBERSTYSCAPEQUARIUSJARATI T ASHESHAARKAAUP TACKYAYANNAUP STEPROGRESSSYNAGMADA FACEJAIN OMJAYANNAURATIONJECTIVESAMPHAOUP SIGNCANDRA JERAN JROKEN LQUEEZE DANESE KEUAERIURGLASSKHA YATSCOOTERESTIVAL TEDUNGOX BACKDANCINGURFACE OWILO SDAYANNAKKURUNIYA LAMPVILIK BVILLAINANGLONGANGOLATUP HAND LONSUMSUKUUDO MAELEE2 OLIVEAPEZIUM STRIDEHALANTAYAH LI YANMAR ETNAHTAKARO BANTAINS HANGUL OW ALEFSAYANNAKAYANNAOX LINECABINETISIBLE CELSIUSPURPLE PUSHPINTA MARKOVER ANS-SAJDAITALIC OCTOBEROCTAGONFATIGUEASH FROOGDIAN TAISYOUPANESE HEXAGONF SASAKOFFICEROF SOAPFAYANNAASHTRA OUT HUBPANSIOSAS SIGNYELLOW IVE OF ITON RATALL AASA VAH ARRED BD MADDAD MOUTHPALLAWAPSTICKSARDNESSOUR OF OVER DU OCLOCKARRED OHI SIGNPTHAHA  SLOWLYF DAVID5 WOOLMPLINGROCKETOSETTE6 TREEYSTICKOW TIE8 HOOUPECIALPBOARDPENCIL6 NGGERICORN7 MBEEPEAKS OTTED-7 MBUU6 HUAN SPLIT7 NDOO6 GUEI7 NGONPEPPERSICKLE AGUNG7 GUANWN BOXPALUTAWN BOW7 KAPO TIKHYPWATCHS SHOENGGONGS TENT1 WINERAKLITODHADH3 NGGAOCIETYOCENCE MURDAQAMATSQETANAOBELOSSAADIY1 GOLDNEUME  EPOCHOITIC  EQUID1 HORNRIISAP1 NDEEOGONEKOFOUNDNGBAT PUFFEDNTIIMUSAUCERNTEVMANSUZ ANOKHUKNSANAQ KAPALNOZHEKNOWMANNOR BUZHITSA LELET3 GBEEXIMIZEXO NEONIRUGU3 HEEIRACINGRAAKANYAKASHNISTER2 KPOO MELIKNIZKO 2 MBOO2 NGGUNKNOWNNTOGENOPEN PPIRIT WO OF YRENE OPITSARSENICN DASH-IEUNGOPEN D-PIEUPRSHANAN YANGRSIAN N-NISFOOPED RKAANU QATAN5 MERISHMAAMRENGTHRISEMEREMEDY-HIDET-HIEUHPICKET00-1024 MUANWRENCHON KEY4 KPEE DIPLINDA TA4 DEERNCH FR4 DARTYIN-DORBITSAX FACE1 GBOORAVEL-4 NYINOOMUUT CARETNACLESSHAYIMONOCLEWORKERYOMBO 0 NGGI0 NGGO4 NJOOPOKOJIPOMMEE4 NGEN0 NYON0 NYUNAPYRUSSWORDSGBASAQCKNESSGEADALGEDOLAARADDOSYNAFIARBUTAGGLINGKAYAH CODILESUCKEDCLOSETIYANNATRIKE APISMASURANGSURED APLI MGANGIAITABLEISSIMOISSHARISSANTARSEOSCHESS GLAZ HCHEMA TAIKHUIRINGUGNANT CHURCHIXTY PSYOUWAGHAMALIX OF TRAPLIVERTKAGHETTIGHEUAECHO CHCHIRETT NJAQITULUMITHER LAMADHLASTONFAMILYFATHA LAMEDHCUPPEDTUXEDOSSLESSTURBANCUMBERFF OF VIRIAMANCHORLAFRONEVENTHEXHALEEXISTSSTANCEEYANNAUPNAYAF CLEFLD MAPF MAREKNIFE KLITONANIMALSTROFOKILLERVILIANKEYCAPFORMEEFORTISKE PHOANUARYANGKATSTANCYKY WAYKUSHU2KTIKO STLERSKRISISSTOLI CREASECRAYONBETAN BGBIEETIMATEIDE ESHEUAEPHIBIT THAKKUC CLEFIB YAMIASMA BEFILICALATETERON IGGLESTEUWENHEISEIURNAMAIEVAN HERMESHO HOIHUMBS BLINK HIVETEBOFILIHUR PAHORT IBOWTIEBISCUSBISHOPHIMAHUTIKENOI MAIMI HOOKHINGE BURGERAUTUMNCEVITUTAU ROINHALETAUROSINSHIPGS-PA INGAATGURAMUTAMINGASHGABCHEIKHGO NGUGOBLINASSINGGORGONTOPBARTARGETGRASP ATTERYATTIC CHAMKOCHADINHAMILOILLAGETIRYAKILBOATCARIK HAMEDHHASHKAUZEIROUYANNAHE MGOUUMISHINDHI TE TSEINCUNXINAGMATE USEIN YEHBAFILICATAWACASTLEHALF HBANWA HAM AIENTIMAACINTHENIKI WBERRYDICINEAASHAEEN GHEUNGAAMWEORTHEMPUS EMASTIA-KARAUBLE XM BOARM BULLAGOGUEUAEQTUUP BOWDE DOGLIGIONLIGON SOUNAPAFFIX ERMATAUANGXIELLITELISHA AESURALITIKIDERMA LLIPOPAEMMAEEPACT DGEHOGLONG EEENTH-9 NJEE9 MUENED ICEED CAPDUCEUSME DIEWINDOWDVANCEMECHIK8 NYEN8 NYANEAHMUK8 MBEEE WAVESKAPI MADDAHMADR MUCIBLEUDARKAA HAAMEIGHTYSIXTHSDIESISDOKMAIMALGAMMALL FUGGAGEMANYA SPLIT U MBITSPADESLEVEL-ET KUTAKEUAEAJANI AK-668AILUREEUREUTEUNYAMAKABATEUAENASPITALSPATHIEU MBUESTAN AGRANTDAGGERZSEKAEIDON TELU CAPOEGL HDOTS-EGALIEGIONTINNEHAYINCANUSHATHIURINEFAAFUHASE-TUUMUFAIHUTIPPIHANNAEUAEM COATPSILIEKEETPAATOCCEPTCCOLIHADDATON AHAALUCECAKCECEKROGOMRDIONUBUTSGVANGTKAANHALQA TABSPTUNERONOSFEARNHALA TMAAUEISMACAUDACAUSEUDAATHAINU CHWVRIEENRILLAHISTIDWICHHIRIQTIGMAHIUTHRIEULEURAEEBALLOUNCEHIMELOTHAL MOODZYGOSBREW BSTERE GEEOTERI ALLOHOLARHOLAM AMPSEAGLERICEMDAIC RELAAUMMERF COWREPHAF EWEUKARARELA CAKESREIWACAKRAF SOWEESHIUGUSTREGIAURITYURTLEQAAFUEYBUSDSMANCALYAEYYALHI ROTILESCAANGHETHECKAGEET TUFLAGSPITERDEPTHGAZE-DENCEUNOO RACHYCKTIEGAMANPPAGEGAMALGALGA ICONGESH2TTOCK FUJIUNITYCHULA GORACHUTEDELTACIEUCRAIDA HAA PI RORITSIGEAN UBITODESTYTSERER-RUB KAWIDATUSTSEEBPOLI FLUTEFORCEU U UPONSEDBOATQUIRYESHE3 LACAESO E ILUTPLHAUCLIFFTRIOLGADOLCLONEZIDI FLICTEOPLEERINECLUBSERKHAPLUTAPLUTOPMUNKTSADIFSAAQPCHA EMLJAPASEQPATAKGORGIUNGBAPEAN UQUETTORSOGOGI TUEUMCTRICDLINGUBURUGULUSDKAR CEREK DEKARCHIDEMAKEZHAINCHADACUBEDEMBICCHESTZILDEENENGPEPETENJETCHIMEGHULUCROWNCHOOICHOOLGHNUTTTORUENUTOEO-EUPEN-PENANOEVAL  SARIPEITHRATERTOYORCHERYRASHATRACKENDEPTRAIFALLEY3 RA3NGENTALGARLEASE3 VEE3 WEI3-VASAMEKHLATIKNIEUN3 NDIVRIDOSENTONGUE LAYARALPHAALOG NGMANALLI AGMA 4 LEE4 LOO4 MBO4 MONNCORA4 NDO4 KPUWAQFANASHI4 TOO4 VOOSHANGSPINE32 JELENISVZMETNENOENEMKAWUAETNEGARWU3184 ABBWAAVU4 GBI2 PTEVIET NSYONKBALLNSUAEKERETNSIEEKESH22 POOKHAPHANNON2 SEEKNOBSNTXIV2 MBUK-0202 NJANUENG2 NJUKO LASUKUNNTHA KARORSAUILLAGUSLABORSEGOL3 BOO3 FOONNAN 3 HIN3 HONNINTHXING LAMDAVITAESTORMSTNUTSOLVEANGELKURONXYOOJKUSMAKWAENXW XWXTRA-L NETL-JUZ7 FUAMINDU9 WVE6 WEE9 WVA9 PU26-VASMALONWIANG9 NUNMIEUM7 GBE7 HUN7 JEEMAQAF9 NON7 MIN6 KOOMAI KMAIZESHTINMMOTHSICLE9 NDEMISRA6 RA26 SIA6 SOO9-VASMINGO9 YEE6 TA28 NWAWISAD8 RO28 FEEWINDUMEPET8 GBUMENOEMETEG8 NANSILA3MELON8 MANMEIZIWINJA8 KPOMEEMU8 KPE9 DEE7 NEN9 NDA9 MUN7 NIN9 MEN7 TWE9 KUAWIDE MADYA7-VASMI RO8-VASMETRYLOUREADULTLOMKAWATTOLOBE ACHKA5 KEEMUOY NABLA4 WOOSHAR2SHARA4 WUISHARUNADA 4-VASAEREENA POAEMAELOAN A UNAMPIREWFISHMPAREA YUE5-VASLWAY M RAMWLINESKATEMAAEHMAALA6 GBAMACUSAAMAEWBOAT5 MBI5 NDUMUHORMUCH 2-VASSHOOKMSHAEMROCKLURALAADHUAWAY IAUDAOMBIERRITOIARDS0-VASRYASOAVROSBISAHVATOROMMAEOQPENRUSH ICHONINTHUI KOIIPINGIPEHAATAF OJKI ATIYAI-RESBAARUOKARAOKEE THING1 FAN1 DWEINNA AUTHSOLD XYIZET0 DOOUTEUXVAAVU0 BEEBASA RULAIIKURUBASSATENSE-RINGIKARABENDEUTIESRUHUAIHVUSRUDAA-SIOSBEITHOPLETBACUS0 OILBALAGIMMERICRONIMMA 0 MANIMGBABHETHSUTUH0 JOO0 HEE0 HANBHADH0 GEEILVER0 GBORUMP-0 DWOILLU TEGEHOCADO2 HENORUTOARERU2 HOOYECEKJERVIOBYLAOSTERITUALHOUR HOTELITHI YSTERO KAIJANG SALADO BOXO PLAO RUASAKTAO ANGHROOMYURIISAKINNZEUMYAMOKBOOTSROWN BORZYAR AESADHEJUEUI2 KPIASAR HUMP -BEAMSURYAHUTA ASEIAJUDUL1 PEE1-VAS2 MBA2 MBEBLAKOIRACYASPER-ALAFISTLE1 YOO2 KPA1 WVIJUDGE1 TEEYENAPAPPLE1 TWOTFONZZY ULU UTTYSIKIROUTSLURRT TRSO-UHURRROIYWAAUMEAUNAHUGU URUSRPSESINKRIFYSHTAUSA UTANUTAESHYAYUKUZIZ2YUDHUNAVTURUVIYOSELFTUKISEEVZELOSEENVEDEROARVOS XEIAZETAROA YEUXTWAAXEYNVEUXVESTZATAVEUMSUABVIDAVEYZSA-IVUEQZAYNYAWNWAW ROOKSOKAZIETRUNGWDERRUISRUKUWAAKWAHAWAETTAXIRUTUTZELSEYEWULUUON SONGRUSIHEYSHEENHEEPHEROHERUHEYNHEYT2 VIHHWAHID HIINHILD2 YAHAVEHAYN2 NOHUB2HUEN2 QOHWAA2 PEHSHU2 L22 KAIANOIARA2 BU2 SOHMI 2 ROHOKEHOM HOSTHSDA3 MEFIRIFITAFFIN3 LE3 L33 KU3 MUEURI3 YU3 TAEZZO3 RI3 PA3 JOFAIBFAST3 MIFEEMFETHFEUQGORTGIDAGIEAGIR2GOALGIBAGROMGRU 3 A3FWAA3 JE3 EEGAMEGAMLGEDEGGWSGHOMGHWAKMA 1 INKOBAKOETKOKEKOKOKPEN1 HAKWAA1 GA1 DU1 DO1 DALAANKALIKAPHKCET1 KU1 KIKICKKINILFERLFIELIFULIUMLIWN028BLOLLKAKOILETILUYINORINY IPODIFATIGERIQAAIITOJOT 1 YIJEONJIIM1 VU1 SU1 SI1 SA1 RA1 QI1 POKAAFKAD31358ISI ARA3ARGIARUM7 BE7 EIAPAQAPON7 DD7 DA6 JO6 L6BAGSBALD6 LABASH6 JEBAYI6 HIBBIT6 HEATIMATYAAN X6 WU6 SE6 RU6 QA6 PO6 NAAAMU8 FO8 EN8 GU8 DU8 BO9 TU9 PA9 PI9 JA9 SE9 SI9 SO9 TA9 TOAFEL8 WE8 SU8 QEA IE8 PI8 KOA-HA8 JIALDAALTA7 JA7 VOAHAD7 ZA7 TI7 RE7 LU7 KI5 BB5 AU5 A2DZHAEAAEEEEEEENG4 ZE5 GI5 FEDGER5 FADIM2EESU5 DE4 DOEHEH4 WIEETA4 WA4 TU4 TE4 NEDEAD4 L44 KEEIPTEIRTEIWS4 FIEKAACASEBUOYBUNGCAYN5 WE5 WA5 VECHAU5 VACHEHBETH6 FUBERD6 DIBOOKBORE5 OOCWAA5 NU5 MO5 LIDAGSDAIR5 JUDDAKDDHI5 INCORE5 TOCOONHUVA5 TECRETMUINMWAA0 HOMVAT PODPLUGPLUMOPUSPOLOMUAS0 BINUUNNAG PHABNWAANAAUPHINORIIORAXOONUQASRMMU2QEF ODLEQHAU WEBMLYAQOPAO-YOOPOD0 JUMPET0 KOPRILNUNGOOTHOBATOBRO OHMNSHENHAYNGA2NSUBNNNA-ONEOXIANEO NJAMNOWCNPEANRUA-RAY-UM NCERNTOCPEEPNANANAM2PEUXOUBTPARDPAWNNTAANDAPPEEIOJOD0 NIREIARAFELUMNOJI MARULUISMARY0 PUMESOLOVO R SOFUMMFAARGU20 WI0 SAMIIMMIIN0 RA0 ZO C D0 YECIG5 UUEZ4 ECAICAHCA9UDYEIEDJAUMXUOPE80DA2D70D42RQACWIWOQDE64-0UKYZOOZJEZORQUFVOKVOYAL2VUUQARPUQQ00QIFQIGVNOQOFQOTA7A8 IZUP9E39818F0REXWI ZZEAG-72CWAU8 AXAUBIBB895-0BXGBUD550B575575B66D7POQAZUVAUAYD6-0AWX620AUJ155YOTIMNMU 14DI-IY00HOJHOXIHI18D0 E0 U0B9SJELK LJE0-0LULLFAYIT04ASUS1 XSUUJHAK00IWR1211-21-0JAHJAWJEUMAUKUGKAQSIIFOMOAYFLYTUJFAJ3 D3 IO YES-X0031CXANEOWOGHXEHEYKF14F8COIX3-0305NII2-020BGVENIBHAQXWVXWG2532DD3638G3830929171648401F1D494B4E1AL0HZP0VDC09990QWG0F3R7
InMemoryFileSystem
RealFileSystem using 
process
 CWD
Color Options
error: 
warning: 
note: 
remark: 
color
Use colors in output (default=autodetect)
Cannot consume non-ascii characters
Could not find expected : for simple key
Expected quote at end of scalar
Found unexpected ':' while scanning a plain scalar
Found invalid tab character in indentation
Got empty plain scalar
Got empty alias or anchor
Expected a line break after block scalar header
Leading all-spaces line must be smaller than the block indent
A text line is less indented than the block scalar
Unrecognized character while tokenizing.
Can only iterate over the stream once
Unknown tag handle 
tag:yaml.org,2002:null
tag:yaml.org,2002:str
tag:yaml.org,2002:map
tag:yaml.org,2002:seq
Unrecognized escape code
Null key in Key Value.
Unexpected token in Key Value.
Unexpected token. Expected Key or Block End
Unexpected token. Expected Key, Flow Entry, or Flow Mapping End.
Unexpected token. Expected Block Entry or Block End.
Could not find closing ]!
Expected , between entries!
tag:yaml.org,2002:
Already encountered an anchor for this node!
Already encountered a tag for this node!
Unexpected token
not a mapping
missing required key '
unknown key '
not a sequence
unknown enumerated scalar
expected sequence of bit values
unexpected scalar in sequence of bit values
unknown bit value
unexpected scalar
Map key must be a scalar
Map value must not be empty
duplicated mapping key '
unknown node kind
invalid call
                
true
false
invalid boolean
invalid number
out of range number
null
IO failure on output stream: 
.temp-stream-%%%%%%
[:<:]]
[:>:]]
alnum
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
alpha
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
blank
cntrl
digit
0123456789
graph
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
lower
abcdefghijklmnopqrstuvwxyz
print
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~ 
punct
!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
space
upper
ABCDEFGHIJKLMNOPQRSTUVWXYZ
xdigit
0123456789ABCDEFabcdef
alert
backspace
newline
vertical-tab
form-feed
carriage-return
exclamation-mark
quotation-mark
number-sign
dollar-sign
percent-sign
ampersand
apostrophe
left-parenthesis
right-parenthesis
asterisk
plus-sign
comma
hyphen
hyphen-minus
period
full-stop
slash
solidus
zero
three
four
five
seven
eight
nine
colon
semicolon
less-than-sign
equals-sign
greater-than-sign
question-mark
commercial-at
left-square-bracket
backslash
reverse-solidus
right-square-bracket
circumflex
circumflex-accent
underscore
low-line
grave-accent
left-brace
left-curly-bracket
vertical-line
right-brace
right-curly-bracket
tilde
REG_0x%x
REG_NOMATCH
llvm_regexec() failed to match
REG_BADPAT
invalid regular expression
REG_ECOLLATE
invalid collating element
REG_ECTYPE
invalid character class
REG_EESCAPE
trailing backslash (\)
REG_ESUBREG
invalid backreference number
REG_EBRACK
brackets ([ ]) not balanced
REG_EPAREN
parentheses not balanced
REG_EBRACE
braces not balanced
REG_BADBR
invalid repetition count(s)
REG_ERANGE
invalid character range
REG_ESPACE
out of memory
REG_BADRPT
repetition-operator operand invalid
REG_EMPTY
empty (sub)expression
REG_ASSERT
"can't happen" -- you found a bug
REG_INVARG
invalid argument to regex routine
*** unknown regexp error code ***
0123456789abcdef
HOME
TMPDIR
TEMP
TEMPDIR
TERM
colors
PATH
input
output
llvm-symbolizer
LLVM_DISABLE_CRASH_REPORT
too many signal callbacks already registered
disable-symbolication
Disable symbolizing crash backtraces.
crash-diagnostics-dir
directory
Directory for crash diagnostic files.
__gnu__
_Clang
clang
sequence
objc_arc_weak_reference_unavailable
__clang_arm_mve_strict_polymorphism
assume
available_only_in_default_eval_method
constant
global
_Noreturn
__const
disable_sanitizer_instrumentation
error_if_stack_frame_larger_than_zero
exclude_from_explicit_instantiation
register
objc_protocol_requires_explicit_implementation
NSObject
objc_requires_property_definitions
kernel
packed
Pointer
pure
restrict
property
not a builtin function
__builtin_atan2
__builtin_atan2f
__builtin_atan2l
LdLdLd
__builtin_atan2f128
LLdLLdLLd
__builtin_abs
__builtin_copysign
ncFE
__builtin_copysignf
__builtin_copysignf16
__builtin_copysignl
__builtin_copysignf128
__builtin_fabs
__builtin_fabsf
__builtin_fabsl
LdLd
__builtin_fabsf16
__builtin_fabsf128
LLdLLd
__builtin_fmod
__builtin_fmodf
__builtin_fmodf16
__builtin_fmodl
__builtin_fmodf128
__builtin_frexp
ddi*
__builtin_frexpf
ffi*
__builtin_frexpl
LdLdi*
__builtin_frexpf128
LLdLLdi*
__builtin_frexpf16
hhi*
__builtin_huge_val
__builtin_huge_valf
__builtin_huge_vall
__builtin_huge_valf16
__builtin_huge_valf128
__builtin_inf
__builtin_inff
__builtin_infl
__builtin_inff16
__builtin_inff128
__builtin_labs
LiLi
__builtin_llabs
LLiLLi
__builtin_ldexp
__builtin_ldexpf
__builtin_ldexpl
LdLdi
__builtin_ldexpf128
LLdLLdi
__builtin_ldexpf16
__builtin_modf
ddd*
__builtin_modff
fff*
__builtin_modfl
LdLdLd*
__builtin_modff128
LLdLLdLLd*
__builtin_nan
dcC*
FnUE
__builtin_nanf
fcC*
__builtin_nanl
LdcC*
__builtin_nanf16
xcC*
__builtin_nanf128
LLdcC*
__builtin_nans
__builtin_nansf
__builtin_nansl
__builtin_nansf16
__builtin_nansf128
__builtin_powi
__builtin_powif
__builtin_powil
__builtin_pow
__builtin_powf
__builtin_powf16
__builtin_powl
__builtin_powf128
__builtin_acos
__builtin_acosf
__builtin_acosl
__builtin_acosf128
__builtin_acosh
__builtin_acoshf
__builtin_acoshl
__builtin_acoshf128
__builtin_asin
__builtin_asinf
__builtin_asinl
__builtin_asinf128
__builtin_asinh
__builtin_asinhf
__builtin_asinhl
__builtin_asinhf128
__builtin_atan
__builtin_atanf
__builtin_atanl
__builtin_atanf128
__builtin_atanh
__builtin_atanhf
__builtin_atanhl
__builtin_atanhf128
__builtin_cbrt
__builtin_cbrtf
__builtin_cbrtl
__builtin_cbrtf128
__builtin_ceil
__builtin_ceilf
__builtin_ceilf16
__builtin_ceill
__builtin_ceilf128
__builtin_cos
__builtin_cosf
__builtin_cosf16
__builtin_cosh
__builtin_coshf
__builtin_coshl
__builtin_coshf128
__builtin_cosl
__builtin_cosf128
__builtin_erf
__builtin_erff
__builtin_erfl
__builtin_erff128
__builtin_erfc
__builtin_erfcf
__builtin_erfcl
__builtin_erfcf128
__builtin_exp
__builtin_expf
__builtin_expf16
__builtin_expl
__builtin_expf128
__builtin_exp2
__builtin_exp2f
__builtin_exp2f16
__builtin_exp2l
__builtin_exp2f128
__builtin_expm1
__builtin_expm1f
__builtin_expm1l
__builtin_expm1f128
__builtin_fdim
__builtin_fdimf
__builtin_fdiml
__builtin_fdimf128
__builtin_floor
__builtin_floorf
__builtin_floorf16
__builtin_floorl
__builtin_floorf128
__builtin_fma
dddd
__builtin_fmaf
ffff
__builtin_fmaf16
hhhh
__builtin_fmal
LdLdLdLd
__builtin_fmaf128
LLdLLdLLdLLd
__builtin_fmax
FncE
__builtin_fmaxf
__builtin_fmaxf16
__builtin_fmaxl
__builtin_fmaxf128
__builtin_fmin
__builtin_fminf
__builtin_fminf16
__builtin_fminl
__builtin_fminf128
__builtin_hypot
__builtin_hypotf
__builtin_hypotl
__builtin_hypotf128
__builtin_ilogb
__builtin_ilogbf
__builtin_ilogbl
__builtin_ilogbf128
iLLd
__builtin_lgamma
__builtin_lgammaf
__builtin_lgammal
__builtin_lgammaf128
__builtin_llrint
LLid
__builtin_llrintf
LLif
__builtin_llrintl
LLiLd
__builtin_llrintf128
LLiLLd
__builtin_llround
__builtin_llroundf
__builtin_llroundl
__builtin_llroundf128
__builtin_log
__builtin_log10
__builtin_log10f
__builtin_log10f16
__builtin_log10l
__builtin_log10f128
__builtin_log1p
__builtin_log1pf
__builtin_log1pl
__builtin_log1pf128
__builtin_log2
__builtin_log2f
__builtin_log2f16
__builtin_log2l
__builtin_log2f128
__builtin_logb
__builtin_logbf
__builtin_logbl
__builtin_logbf128
__builtin_logf
__builtin_logf16
__builtin_logl
__builtin_logf128
__builtin_lrint
__builtin_lrintf
__builtin_lrintl
LiLd
__builtin_lrintf128
LiLLd
__builtin_lround
__builtin_lroundf
__builtin_lroundl
__builtin_lroundf128
__builtin_nearbyint
__builtin_nearbyintf
__builtin_nearbyintl
__builtin_nearbyintf128
__builtin_nextafter
__builtin_nextafterf
__builtin_nextafterl
__builtin_nextafterf128
__builtin_nexttoward
ddLd
__builtin_nexttowardf
ffLd
__builtin_nexttowardl
__builtin_nexttowardf128
__builtin_remainder
__builtin_remainderf
__builtin_remainderl
__builtin_remainderf128
__builtin_remquo
dddi*
__builtin_remquof
fffi*
__builtin_remquol
LdLdLdi*
__builtin_remquof128
LLdLLdLLdi*
__builtin_rint
__builtin_rintf
__builtin_rintf16
__builtin_rintl
__builtin_rintf128
__builtin_round
__builtin_roundf
__builtin_roundf16
__builtin_roundl
__builtin_roundf128
__builtin_roundeven
__builtin_roundevenf
__builtin_roundevenf16
__builtin_roundevenl
__builtin_roundevenf128
__builtin_scalbln
ddLi
__builtin_scalblnf
ffLi
__builtin_scalblnl
LdLdLi
__builtin_scalblnf128
LLdLLdLi
__builtin_scalbn
__builtin_scalbnf
__builtin_scalbnl
__builtin_scalbnf128
__builtin_sin
__builtin_sinf
__builtin_sinf16
__builtin_sinh
__builtin_sinhf
__builtin_sinhl
__builtin_sinhf128
__builtin_sinl
__builtin_sinf128
__builtin_sqrt
__builtin_sqrtf
__builtin_sqrtf16
__builtin_sqrtl
__builtin_sqrtf128
__builtin_tan
__builtin_tanf
__builtin_tanh
__builtin_tanhf
__builtin_tanhl
__builtin_tanhf128
__builtin_tanl
__builtin_tanf128
__builtin_tgamma
__builtin_tgammaf
__builtin_tgammal
__builtin_tgammaf128
__builtin_trunc
__builtin_truncf
__builtin_truncl
__builtin_truncf128
__builtin_truncf16
__builtin_flt_rounds
__builtin_set_flt_rounds
__builtin_cabs
__builtin_cabsf
__builtin_cabsl
LdXLd
__builtin_cacos
XdXd
__builtin_cacosf
XfXf
__builtin_cacosh
__builtin_cacoshf
__builtin_cacoshl
XLdXLd
__builtin_cacosl
__builtin_carg
__builtin_cargf
__builtin_cargl
__builtin_casin
__builtin_casinf
__builtin_casinh
__builtin_casinhf
__builtin_casinhl
__builtin_casinl
__builtin_catan
__builtin_catanf
__builtin_catanh
__builtin_catanhf
__builtin_catanhl
__builtin_catanl
__builtin_ccos
__builtin_ccosf
__builtin_ccosl
__builtin_ccosh
__builtin_ccoshf
__builtin_ccoshl
__builtin_cexp
__builtin_cexpf
__builtin_cexpl
__builtin_cimag
__builtin_cimagf
__builtin_cimagl
__builtin_conj
__builtin_conjf
__builtin_conjl
__builtin_clog
__builtin_clogf
__builtin_clogl
__builtin_cproj
__builtin_cprojf
__builtin_cprojl
__builtin_cpow
XdXdXd
__builtin_cpowf
XfXfXf
__builtin_cpowl
XLdXLdXLd
__builtin_creal
__builtin_crealf
__builtin_creall
__builtin_csin
__builtin_csinf
__builtin_csinl
__builtin_csinh
__builtin_csinhf
__builtin_csinhl
__builtin_csqrt
__builtin_csqrtf
__builtin_csqrtl
__builtin_ctan
__builtin_ctanf
__builtin_ctanl
__builtin_ctanh
__builtin_ctanhf
__builtin_ctanhl
__builtin_complex
nctE
__builtin_isgreater
Fnct
__builtin_isgreaterequal
__builtin_isless
__builtin_islessequal
__builtin_islessgreater
__builtin_isunordered
__builtin_fpclassify
iiiiii.
FnctE
__builtin_isfinite
__builtin_isinf
__builtin_isinf_sign
__builtin_isnan
__builtin_isnormal
__builtin_isfpclass
__builtin_signbit
__builtin_signbitf
__builtin_signbitl
__builtin_canonicalize
__builtin_canonicalizef
__builtin_canonicalizef16
__builtin_canonicalizel
__builtin_clzs
__builtin_clz
__builtin_clzl
iULi
__builtin_clzll
iULLi
__builtin_ctzs
__builtin_ctz
__builtin_ctzl
__builtin_ctzll
__builtin_ffs
__builtin_ffsl
__builtin_ffsll
iLLi
__builtin_parity
__builtin_parityl
__builtin_parityll
__builtin_popcount
__builtin_popcountl
__builtin_popcountll
__builtin_clrsb
__builtin_clrsbl
__builtin_clrsbll
__builtin_bswap16
UsUs
__builtin_bswap32
UZiUZi
__builtin_bswap64
UWiUWi
__builtin_bitreverse8
UcUc
__builtin_bitreverse16
__builtin_bitreverse32
__builtin_bitreverse64
__builtin_rotateleft8
UcUcUc
__builtin_rotateleft16
UsUsUs
__builtin_rotateleft32
UZiUZiUZi
__builtin_rotateleft64
UWiUWiUWi
__builtin_rotateright8
__builtin_rotateright16
__builtin_rotateright32
__builtin_rotateright64
__builtin_calloc
v*zz
__builtin_constant_p
nctuE
__builtin_classify_type
__builtin___CFStringMakeConstantString
FC*cC*
__builtin___NSStringMakeConstantString
__builtin_va_start
__builtin_va_end
__builtin_va_copy
__builtin_stdarg_start
__builtin_assume_aligned
v*vC*z.
__builtin_bcmp
ivC*vC*z
__builtin_bcopy
vv*v*z
__builtin_bzero
vv*z
__builtin_free
__builtin_malloc
__builtin_memchr
v*vC*iz
__builtin_memcmp
__builtin_memcpy
v*v*vC*z
__builtin_memcpy_inline
vv*vC*Iz
__builtin_memmove
__builtin_mempcpy
__builtin_memset
v*v*iz
__builtin_memset_inline
vv*iIz
__builtin_stpcpy
c*c*cC*
__builtin_stpncpy
c*c*cC*z
__builtin_strcasecmp
icC*cC*
__builtin_strcat
__builtin_strchr
c*cC*i
__builtin_strcmp
__builtin_strcpy
__builtin_strcspn
zcC*cC*
__builtin_strdup
c*cC*
__builtin_strlen
zcC*
__builtin_strncasecmp
icC*cC*z
__builtin_strncat
__builtin_strncmp
__builtin_strncpy
__builtin_strndup
c*cC*z
__builtin_strpbrk
c*cC*cC*
__builtin_strrchr
__builtin_strspn
__builtin_strstr
__builtin_wcschr
w*wC*w
__builtin_wcscmp
iwC*wC*
__builtin_wcslen
zwC*
__builtin_wcsncmp
iwC*wC*z
__builtin_wmemchr
w*wC*wz
__builtin_wmemcmp
__builtin_wmemcpy
w*w*wC*z
__builtin_wmemmove
__builtin_realloc
v*v*z
__builtin_return_address
v*IUi
__builtin_extract_return_addr
v*v*
__builtin_frame_address
__builtin___clear_cache
vc*c*
__builtin_setjmp
iv**
__builtin_longjmp
vv**i
__builtin_unwind_init
__builtin_eh_return_data_regno
__builtin_fprintf
iP*RcC*R.
nFp:1:
__builtin_printf
icC*R.
nFp:0:
__builtin_sprintf
ic*RcC*R.
__builtin_snprintf
ic*RzcC*R.
nFp:2:
__builtin_vprintf
icC*Ra
nFP:0:
__builtin_vfprintf
iP*RcC*Ra
nFP:1:
__builtin_vsprintf
ic*RcC*Ra
__builtin_vsnprintf
ic*RzcC*Ra
nFP:2:
__builtin_fscanf
Fs:1:
__builtin_scanf
Fs:0:
__builtin_sscanf
icC*RcC*R.
__builtin_vfscanf
FS:1:
__builtin_vscanf
FS:0:
__builtin_vsscanf
icC*RcC*Ra
__builtin_thread_pointer
__builtin_launder
__builtin_is_constant_evaluated
__builtin_get_vtable_pointer
__builtin_eh_return
vzv*
__builtin_frob_return_addr
__builtin_dwarf_cfa
__builtin_init_dwarf_reg_size_table
__builtin_dwarf_sp_column
__builtin_extend_pointer
ULLiv*
__builtin_object_size
zvC*i
__builtin_dynamic_object_size
__builtin___memcpy_chk
v*v*vC*zz
__builtin___memccpy_chk
v*v*vC*izz
__builtin___memmove_chk
__builtin___mempcpy_chk
__builtin___memset_chk
v*v*izz
__builtin___stpcpy_chk
__builtin___strcat_chk
__builtin___strcpy_chk
__builtin___strlcat_chk
zc*cC*zz
__builtin___strlcpy_chk
__builtin___strncat_chk
c*c*cC*zz
__builtin___strncpy_chk
__builtin___stpncpy_chk
__builtin___snprintf_chk
ic*RzizcC*R.
Fp:4:
__builtin___sprintf_chk
ic*RizcC*R.
Fp:3:
__builtin___vsnprintf_chk
ic*RzizcC*Ra
FP:4:
__builtin___vsprintf_chk
ic*RizcC*Ra
FP:3:
__builtin___fprintf_chk
iP*RicC*R.
Fp:2:
__builtin___printf_chk
iicC*R.
Fp:1:
__builtin___vfprintf_chk
iP*RicC*Ra
FP:2:
__builtin___vprintf_chk
iicC*Ra
FP:1:
__builtin_unpredictable
__builtin_expect
LiLiLi
__builtin_expect_with_probability
LiLiLid
__builtin_prefetch
vvC*.
__builtin_readcyclecounter
ULLi
__builtin_trap
__builtin_verbose_trap
vcC*
__builtin_debugtrap
__builtin_unreachable
__builtin_shufflevector
__builtin_convertvector
__builtin_alloca
__builtin_alloca_uninitialized
__builtin_alloca_with_align
v*zIz
__builtin_alloca_with_align_uninitialized
__builtin_call_with_static_chain
__builtin_nondeterministic_value
__builtin_elementwise_abs
__builtin_elementwise_max
__builtin_elementwise_min
__builtin_elementwise_ceil
__builtin_elementwise_cos
__builtin_elementwise_exp
__builtin_elementwise_exp2
__builtin_elementwise_floor
__builtin_elementwise_log
__builtin_elementwise_log2
__builtin_elementwise_log10
__builtin_elementwise_pow
__builtin_elementwise_roundeven
__builtin_elementwise_round
__builtin_elementwise_rint
__builtin_elementwise_nearbyint
__builtin_elementwise_sin
__builtin_elementwise_trunc
__builtin_elementwise_canonicalize
__builtin_elementwise_copysign
__builtin_elementwise_fma
__builtin_elementwise_add_sat
__builtin_elementwise_sub_sat
__builtin_reduce_max
__builtin_reduce_min
__builtin_reduce_xor
__builtin_reduce_or
__builtin_reduce_and
__builtin_reduce_add
__builtin_reduce_mul
__builtin_matrix_transpose
__builtin_matrix_column_major_load
__builtin_matrix_column_major_store
__sync_fetch_and_add
__sync_fetch_and_add_1
ccD*c.
__sync_fetch_and_add_2
ssD*s.
__sync_fetch_and_add_4
iiD*i.
__sync_fetch_and_add_8
LLiLLiD*LLi.
__sync_fetch_and_add_16
LLLiLLLiD*LLLi.
__sync_fetch_and_sub
__sync_fetch_and_sub_1
__sync_fetch_and_sub_2
__sync_fetch_and_sub_4
__sync_fetch_and_sub_8
__sync_fetch_and_sub_16
__sync_fetch_and_or
__sync_fetch_and_or_1
__sync_fetch_and_or_2
__sync_fetch_and_or_4
__sync_fetch_and_or_8
__sync_fetch_and_or_16
__sync_fetch_and_and
__sync_fetch_and_and_1
__sync_fetch_and_and_2
__sync_fetch_and_and_4
__sync_fetch_and_and_8
__sync_fetch_and_and_16
__sync_fetch_and_xor
__sync_fetch_and_xor_1
__sync_fetch_and_xor_2
__sync_fetch_and_xor_4
__sync_fetch_and_xor_8
__sync_fetch_and_xor_16
__sync_fetch_and_nand
__sync_fetch_and_nand_1
__sync_fetch_and_nand_2
__sync_fetch_and_nand_4
__sync_fetch_and_nand_8
__sync_fetch_and_nand_16
__sync_add_and_fetch
__sync_add_and_fetch_1
__sync_add_and_fetch_2
__sync_add_and_fetch_4
__sync_add_and_fetch_8
__sync_add_and_fetch_16
__sync_sub_and_fetch
__sync_sub_and_fetch_1
__sync_sub_and_fetch_2
__sync_sub_and_fetch_4
__sync_sub_and_fetch_8
__sync_sub_and_fetch_16
__sync_or_and_fetch
__sync_or_and_fetch_1
__sync_or_and_fetch_2
__sync_or_and_fetch_4
__sync_or_and_fetch_8
__sync_or_and_fetch_16
__sync_and_and_fetch
__sync_and_and_fetch_1
__sync_and_and_fetch_2
__sync_and_and_fetch_4
__sync_and_and_fetch_8
__sync_and_and_fetch_16
__sync_xor_and_fetch
__sync_xor_and_fetch_1
__sync_xor_and_fetch_2
__sync_xor_and_fetch_4
__sync_xor_and_fetch_8
__sync_xor_and_fetch_16
__sync_nand_and_fetch
__sync_nand_and_fetch_1
__sync_nand_and_fetch_2
__sync_nand_and_fetch_4
__sync_nand_and_fetch_8
__sync_nand_and_fetch_16
__sync_bool_compare_and_swap
__sync_bool_compare_and_swap_1
bcD*cc.
__sync_bool_compare_and_swap_2
bsD*ss.
__sync_bool_compare_and_swap_4
biD*ii.
__sync_bool_compare_and_swap_8
bLLiD*LLiLLi.
__sync_bool_compare_and_swap_16
bLLLiD*LLLiLLLi.
__sync_val_compare_and_swap
__sync_val_compare_and_swap_1
ccD*cc.
__sync_val_compare_and_swap_2
ssD*ss.
__sync_val_compare_and_swap_4
iiD*ii.
__sync_val_compare_and_swap_8
LLiLLiD*LLiLLi.
__sync_val_compare_and_swap_16
LLLiLLLiD*LLLiLLLi.
__sync_lock_test_and_set
__sync_lock_test_and_set_1
__sync_lock_test_and_set_2
__sync_lock_test_and_set_4
__sync_lock_test_and_set_8
__sync_lock_test_and_set_16
__sync_lock_release
__sync_lock_release_1
vcD*.
__sync_lock_release_2
vsD*.
__sync_lock_release_4
viD*.
__sync_lock_release_8
vLLiD*.
__sync_lock_release_16
vLLLiD*.
__sync_swap
__sync_swap_1
__sync_swap_2
__sync_swap_4
__sync_swap_8
__sync_swap_16
__c11_atomic_init
__c11_atomic_load
__c11_atomic_store
__c11_atomic_exchange
__c11_atomic_compare_exchange_strong
__c11_atomic_compare_exchange_weak
__c11_atomic_fetch_add
__c11_atomic_fetch_sub
__c11_atomic_fetch_and
__c11_atomic_fetch_or
__c11_atomic_fetch_xor
__c11_atomic_fetch_nand
__c11_atomic_fetch_max
__c11_atomic_fetch_min
__c11_atomic_thread_fence
__c11_atomic_signal_fence
__c11_atomic_is_lock_free
__atomic_load
__atomic_load_n
__atomic_store
__atomic_store_n
__atomic_exchange
__atomic_exchange_n
__atomic_compare_exchange
__atomic_compare_exchange_n
__atomic_fetch_add
__atomic_fetch_sub
__atomic_fetch_and
__atomic_fetch_or
__atomic_fetch_xor
__atomic_fetch_nand
__atomic_add_fetch
__atomic_sub_fetch
__atomic_and_fetch
__atomic_or_fetch
__atomic_xor_fetch
__atomic_max_fetch
__atomic_min_fetch
__atomic_nand_fetch
__atomic_test_and_set
bvD*i
__atomic_clear
vvD*i
__atomic_thread_fence
__atomic_signal_fence
__atomic_always_lock_free
bzvCD*
__atomic_is_lock_free
__opencl_atomic_init
__opencl_atomic_load
__opencl_atomic_store
__opencl_atomic_exchange
__opencl_atomic_compare_exchange_strong
__opencl_atomic_compare_exchange_weak
__opencl_atomic_fetch_add
__opencl_atomic_fetch_sub
__opencl_atomic_fetch_and
__opencl_atomic_fetch_or
__opencl_atomic_fetch_xor
__opencl_atomic_fetch_min
__opencl_atomic_fetch_max
__atomic_fetch_min
__atomic_fetch_max
__hip_atomic_load
__hip_atomic_store
__hip_atomic_compare_exchange_weak
__hip_atomic_compare_exchange_strong
__hip_atomic_exchange
__hip_atomic_fetch_add
__hip_atomic_fetch_sub
__hip_atomic_fetch_and
__hip_atomic_fetch_or
__hip_atomic_fetch_xor
__hip_atomic_fetch_min
__hip_atomic_fetch_max
__sync_synchronize
__sync_fetch_and_min
iiD*i
__sync_fetch_and_max
__sync_fetch_and_umin
UiUiD*Ui
__sync_fetch_and_umax
__builtin_abort
__builtin_index
__builtin_rindex
__warn_memset_zero_len
_alloca
__annotation
wC*.
__assume
_bittest
UcNiC*Ni
_bittestandcomplement
UcNi*Ni
_bittestandreset
_bittestandset
_bittest64
UcWiC*Wi
_bittestandcomplement64
UcWi*Wi
_bittestandreset64
_bittestandset64
_byteswap_ushort
_byteswap_ulong
UNiUNi
_byteswap_uint64
ULLiULLi
__debugbreak
__exception_code
_exception_code
__exception_info
_exception_info
__abnormal_termination
_abnormal_termination
__GetExceptionInfo
zntu
_InterlockedAnd8
ccD*c
_InterlockedAnd16
ssD*s
_InterlockedAnd
NiNiD*Ni
_InterlockedCompareExchange8
ccD*cc
_InterlockedCompareExchange16
ssD*ss
_InterlockedCompareExchange
NiNiD*NiNi
_InterlockedCompareExchange64
LLiLLiD*LLiLLi
_InterlockedCompareExchangePointer
v*v*D*v*v*
_InterlockedCompareExchangePointer_nf
_InterlockedDecrement16
ssD*
_InterlockedDecrement
NiNiD*
_InterlockedExchange
_InterlockedExchange8
_InterlockedExchange16
_InterlockedExchangeAdd8
_InterlockedExchangeAdd16
_InterlockedExchangeAdd
_InterlockedExchangePointer
v*v*D*v*
_InterlockedExchangeSub8
_InterlockedExchangeSub16
_InterlockedExchangeSub
_InterlockedIncrement16
_InterlockedIncrement
_InterlockedOr8
_InterlockedOr16
_InterlockedOr
_InterlockedXor8
_InterlockedXor16
_InterlockedXor
_interlockedbittestandreset
UcNiD*Ni
_interlockedbittestandreset64
UcWiD*Wi
_interlockedbittestandreset_acq
_interlockedbittestandreset_nf
_interlockedbittestandreset_rel
_interlockedbittestandset
_interlockedbittestandset64
_interlockedbittestandset_acq
_interlockedbittestandset_nf
_interlockedbittestandset_rel
__iso_volatile_load8
ccCD*
__iso_volatile_load16
ssCD*
__iso_volatile_load32
iiCD*
__iso_volatile_load64
LLiLLiCD*
__iso_volatile_store8
vcD*c
__iso_volatile_store16
vsD*s
__iso_volatile_store32
viD*i
__iso_volatile_store64
vLLiD*LLi
__noop
__lzcnt16
__lzcnt
UiUi
__lzcnt64
__popcnt16
__popcnt
__popcnt64
_ReturnAddress
_rotl8
_rotl16
UsUsUc
_rotl
UiUii
_lrotl
UNiUNii
_rotl64
UWiUWii
_rotr8
_rotr16
_rotr
_lrotr
_rotr64
__va_start
vc**.
__fastfail
_setjmpex
va_start
va_end
va_copy
abort
calloc
exit
_Exit
malloc
realloc
free
strtod
dcC*c**
strtof
fcC*c**
strtold
LdcC*c**
strtol
LicC*c**i
strtoll
LLicC*c**i
strtoul
ULicC*c**i
strtoull
ULLicC*c**i
aligned_alloc
memcpy
memcmp
memmove
strcpy
strncpy
strcmp
strncmp
strcat
strncat
strxfrm
zc*cC*z
memchr
strchr
strcspn
strpbrk
strrchr
strspn
strstr
strtok
memset
strerror
strlen
printf
icC*.
fp:0:
fprintf
iP*cC*.
fp:1:
snprintf
ic*zcC*.
fp:2:
sprintf
ic*cC*.
vprintf
icC*a
fP:0:
vfprintf
iP*cC*a
fP:1:
vsnprintf
ic*zcC*a
fP:2:
vsprintf
ic*cC*a
scanf
fs:0:
fscanf
fs:1:
sscanf
vscanf
fS:0:
vfscanf
fS:1:
vsscanf
fopen
P*cC*cC*
fread
zv*zzP*
fwrite
zvC*zzP*
isalnum
isalpha
isblank
iscntrl
isdigit
isgraph
islower
isprint
ispunct
isspace
isupper
isxdigit
tolower
toupper
wcschr
wcscmp
wcslen
wcsncmp
wmemchr
wmemcmp
wmemcpy
wmemmove
setjmp
longjmp
alloca
memalign
memccpy
v*v*vC*iz
mempcpy
stpcpy
stpncpy
strdup
strndup
index
rindex
bzero
bcmp
strcasecmp
strncasecmp
_exit
vfork
pthread_create
fC<2,3>
_setjmp
__sigsetjmp
iSJi
sigsetjmp
savectx
getcontext
_longjmp
siglongjmp
vSJi
strlcpy
strlcat
objc_msgSend
GGH.
objc_msgSend_fpret
LdGH.
objc_msgSend_fp2ret
XLdGH.
objc_msgSend_stret
vGH.
objc_msgSendSuper
GM*H.
objc_msgSendSuper_stret
vM*H.
objc_getClass
GcC*
objc_getMetaClass
objc_enumerationMutation
objc_read_weak
objc_assign_weak
GGG*
objc_assign_ivar
GGGY
objc_assign_global
objc_assign_strongCast
objc_exception_extract
objc_exception_try_enter
objc_exception_try_exit
objc_exception_match
objc_exception_throw
objc_sync_enter
objc_sync_exit
__builtin_objc_memmove_collectable
NSLog
NSLogv
atan2
atan2f
atan2l
labs
llabs
copysign
copysignf
copysignl
fabs
fabsf
fabsl
finite
finitef
finitel
__finite
__finitef
__finitel
fmod
fmodf
fmodl
frexp
frexpf
frexpl
ldexp
ldexpf
ldexpl
modf
modff
modfl
nanf
nanl
powf
powl
acos
acosf
acosl
acosh
acoshf
acoshl
asin
asinf
asinl
asinh
asinhf
asinhl
atan
atanf
atanl
atanh
atanhf
atanhl
cbrt
cbrtf
cbrtl
ceil
ceilf
ceill
cosf
cosl
cosh
coshf
coshl
erff
erfl
erfc
erfcf
erfcl
expf
expl
exp2
exp2f
exp2l
expm1
expm1f
expm1l
fdim
fdimf
fdiml
floor
floorf
floorl
fmaf
fmal
fmax
fmaxf
fmaxl
fmin
fminf
fminl
hypot
hypotf
hypotl
ilogb
ilogbf
ilogbl
lgamma
lgammaf
lgammal
llrint
llrintf
llrintl
llround
llroundf
llroundl
logf
logl
log10
log10f
log10l
log1p
log1pf
log1pl
log2
log2f
log2l
logb
logbf
logbl
lrint
lrintf
lrintl
lround
lroundf
lroundl
nearbyint
nearbyintf
nearbyintl
nextafter
nextafterf
nextafterl
nexttoward
nexttowardf
nexttowardl
remainder
remainderf
remainderl
remquo
remquof
remquol
rint
rintf
rintl
round
roundf
roundl
roundeven
roundevenf
roundevenl
scalbln
scalblnf
scalblnl
scalbn
scalbnf
scalbnl
sinf
sinl
sinh
sinhf
sinhl
sqrt
sqrtf
sqrtl
tanf
tanl
tanh
tanhf
tanhl
tgamma
tgammaf
tgammal
trunc
truncf
truncl
cabs
cabsf
cabsl
cacos
cacosf
cacosl
cacosh
cacoshf
cacoshl
carg
cargf
cargl
casin
casinf
casinl
casinh
casinhf
casinhl
catan
catanf
catanl
catanh
catanhf
catanhl
ccos
ccosf
ccosl
ccosh
ccoshf
ccoshl
cexp
cexpf
cexpl
cimag
cimagf
cimagl
conj
conjf
conjl
clog
clogf
clogl
cproj
cprojf
cprojl
cpow
cpowf
cpowl
creal
crealf
creall
csin
csinf
csinl
csinh
csinhf
csinhl
csqrt
csqrtf
csqrtl
ctan
ctanf
ctanl
ctanh
ctanhf
ctanhl
__sinpi
__sinpif
__cospi
__cospif
__tanpi
__tanpif
__exp10
__exp10f
_Block_object_assign
vv*vC*iC
_Block_object_dispose
vvC*iC
addressof
v*v&
zfncThE
__addressof
zfncTE
as_const
v&v&
forward
forward_like
move
move_if_noexcept
__builtin_annotation
__builtin_assume
__builtin_assume_separate_storage
vvCD*vCD*
__builtin_addcb
UcUcCUcCUcCUc*
__builtin_addcs
UsUsCUsCUsCUs*
__builtin_addc
UiUiCUiCUiCUi*
__builtin_addcl
ULiULiCULiCULiCULi*
__builtin_addcll
ULLiULLiCULLiCULLiCULLi*
__builtin_subcb
__builtin_subcs
__builtin_subc
__builtin_subcl
__builtin_subcll
__builtin_add_overflow
__builtin_sub_overflow
__builtin_mul_overflow
__builtin_uadd_overflow
bUiCUiCUi*
__builtin_uaddl_overflow
bULiCULiCULi*
__builtin_uaddll_overflow
bULLiCULLiCULLi*
__builtin_usub_overflow
__builtin_usubl_overflow
__builtin_usubll_overflow
__builtin_umul_overflow
__builtin_umull_overflow
__builtin_umulll_overflow
__builtin_sadd_overflow
bSiCSiCSi*
__builtin_saddl_overflow
bSLiCSLiCSLi*
__builtin_saddll_overflow
bSLLiCSLLiCSLLi*
__builtin_ssub_overflow
__builtin_ssubl_overflow
__builtin_ssubll_overflow
__builtin_smul_overflow
__builtin_smull_overflow
__builtin_smulll_overflow
__builtin_addressof
__builtin_function_start
__builtin_operator_new
__builtin_operator_delete
__builtin_char_memchr
c*cC*iz
__builtin_dump_struct
__builtin_preserve_access_index
__builtin_is_aligned
bvC*z
__builtin_align_up
v*vC*z
__builtin_align_down
__builtin___get_unsafe_stack_start
__builtin___get_unsafe_stack_bottom
__builtin___get_unsafe_stack_top
__builtin___get_unsafe_stack_ptr
__builtin_nontemporal_store
__builtin_nontemporal_load
__builtin_coro_resume
__builtin_coro_destroy
__builtin_coro_done
__builtin_coro_promise
v*v*IiIb
__builtin_coro_size
__builtin_coro_align
__builtin_coro_frame
__builtin_coro_noop
__builtin_coro_free
__builtin_coro_id
v*Iiv*v*v*
__builtin_coro_alloc
__builtin_coro_begin
__builtin_coro_end
bv*Ib
__builtin_coro_suspend
__builtin_ptrauth_strip
v*v*i
__builtin_ptrauth_blend_discriminator
zv*i
__builtin_ptrauth_sign_constant
v*v*iv*
tncE
__builtin_ptrauth_sign_unauthenticated
__builtin_ptrauth_sign_generic_data
zv*v*
__builtin_ptrauth_auth_and_resign
v*v*iv*iv*
__builtin_ptrauth_auth
__builtin_ptrauth_string_discriminator
__builtin_virtual_member_address
v*v*v*
__builtin_load_member_function_pointer
read_pipe
write_pipe
reserve_read_pipe
reserve_write_pipe
commit_write_pipe
commit_read_pipe
sub_group_reserve_read_pipe
sub_group_reserve_write_pipe
sub_group_commit_read_pipe
sub_group_commit_write_pipe
work_group_reserve_read_pipe
work_group_reserve_write_pipe
work_group_commit_read_pipe
work_group_commit_write_pipe
get_pipe_num_packets
get_pipe_max_packets
enqueue_kernel
get_kernel_work_group_size
get_kernel_preferred_work_group_size_multiple
get_kernel_max_sub_group_size_for_ndrange
get_kernel_sub_group_count_for_ndrange
to_global
to_local
to_private
__builtin_store_half
vdh*
__builtin_store_halff
vfh*
__builtin_load_half
dhC*
__builtin_load_halff
fhC*
__builtin_os_log_format_buffer_size
zcC*.
p:0:nutE
__builtin_os_log_format
v*v*cC*.
p:0:nt
__builtin_get_device_side_mangled_name
cC*.
__builtin_hlsl_wave_active_count_bits
__builtin_hlsl_create_handle
v*Uc
__xray_customevent
vcC*z
__xray_typedevent
vzcC*z
__builtin_ms_va_start
vc*&.
__builtin_ms_va_end
vc*&
__builtin_ms_va_copy
vc*&c*&
__arithmetic_fence
__builtin_tmo_get_id
zvC*
__builtin_tmo_get_size
__builtin_tmo_get_flags
__builtin_tmo_get_version
__builtin_tmo_get_alignment
__builtin_tmo_get_xnu_description
cC*vC*
__builtin_tmo_get_json_description
(null)
<can't format argument>
identifier
Lexical or Preprocessor Issue
Semantic Issue
Lambda Issue
Parse Issue
ARC Semantic Issue
ARC and @properties
ARC Casting Rules
ARC Parse Issue
ARC Weak References
ARC Restrictions
OpenMP Issue
Inline Assembly Issue
AST Deserialization Issue
Firebloom Pointer Attributes Issue
Modules Issue
Coroutines Issue
Concepts Issue
Dependency Directive Source Scanner Issue
Backend Issue
SourceMgr Reported Issue
Refactoring Continuation Issue
API Notes Issue
Related Result Type Issue
Rename Issue
AST Serialization Issue
Nullability Issue
Generics Issue
User-Defined Issue
Refactoring Invocation Issue
VTable ABI Issue
Value Conversion Issue
Documentation Issue
ARC Retain Cycle
Deprecations
Format String Issue
Cocoa API Issue
#pragma message Directive
Instrumentation Issue
Unused Entity Issue
<scratch space>
More fine grained information about the stack layout is available by adding the
`-Rpass-analysis=stack-frame-layout` command-line flag to the compiler
invocation.
The diagnostic information can be saved to a file in a machine readable format,
like YAML by adding the `-foptimization-record-file=<file>` command-line flag.
Results can be filtered by function name by passing
`-mllvm -filter-print-funcs=foo`, where `foo` is the target function's name.
   .. code-block: console
      clang -c a.cpp -Rpass-analysis=stack-frame-layout -mllvm -filter-print-funcs=foo
   .. code-block: console
      clang -c a.cpp -Rpass-analysis=stack-frame-layout -foptimization-record-file=<file>
The warning is issued if the number of pre-processor tokens exceeds
the token limit, which can be set in three ways:
1. As a limit at a specific point in a file, using the ``clang max_tokens_here``
   pragma:
   .. code-block: c++
      #pragma clang max_tokens_here 1234
2. As a per-translation unit limit, using the ``-fmax-tokens=`` command-line
   flag:
   .. code-block: console
      clang -c a.cpp -fmax-tokens=1234
3. As a per-translation unit limit using the ``clang max_tokens_total`` pragma,
   which works like and overrides the ``-fmax-tokens=`` flag:
   .. code-block: c++
      #pragma clang max_tokens_total 1234
These limits can be helpful in limiting code growth through included files.
Setting a token limit of zero means no limit.
Note that the warning is disabled by default, so -Wmax-tokens must be used
in addition with the pragmas or -fmax-tokens flag to get any warnings.
**Note:** enabling this warning in C will change the semantic behavior of the
program by treating all string literals as having type ``const char *``
instead of ``char *``. This can cause unexpected behaviors with type-sensitive
constructs like ``_Generic``.
file-search
NumDirLookups
Number of directory lookups.
NumDirCacheMisses
Number of directory cache misses.
NumFileLookups
Number of file lookups.
NumFileCacheMisses
Number of file cache misses.
auto
break
case
char
continue
default
double
else
enum
extern
float
goto
_ExtInt
_BitInt
long
return
short
signed
sizeof
static
struct
switch
typedef
union
unsigned
void
while
_Alignas
_Alignof
_Atomic
_Bool
_Complex
_Generic
_Imaginary
_Static_assert
_Thread_local
__func__
__objc_yes
__objc_no
__ptrauth
__ptrauth_restricted_intptr
bool
catch
class
const_cast
delete
dynamic_cast
explicit
export
friend
mutable
namespace
operator
private
protected
public
reinterpret_cast
static_cast
template
this
throw
typename
typeid
using
virtual
wchar_t
and_eq
bitand
bitor
compl
not_eq
or_eq
xor_eq
inline
alignas
alignof
char16_t
char32_t
constexpr
decltype
noexcept
nullptr
static_assert
thread_local
co_await
co_return
co_yield
module
import
consteval
constinit
concept
requires
char8_t
_Float16
typeof
typeof_unqual
_Accum
_Fract
_Sat
_Decimal32
_Decimal64
_Decimal128
__null
__alignof
__attribute
__builtin_choose_expr
__builtin_offsetof
__builtin_FILE
__builtin_FILE_NAME
__builtin_FUNCTION
__builtin_FUNCSIG
__builtin_LINE
__builtin_COLUMN
__builtin_source_location
__builtin_types_compatible_p
__builtin_va_arg
__extension__
__float128
__ibm128
__imag
__int128
__label__
__real
__thread
__FUNCTION__
__PRETTY_FUNCTION__
__auto_type
__FUNCDNAME__
__FUNCSIG__
L__FUNCTION__
L__FUNCSIG__
__is_interface_class
__is_sealed
__is_destructible
__is_trivially_destructible
__is_nothrow_destructible
__is_nothrow_assignable
__is_constructible
__is_nothrow_constructible
__is_assignable
__has_nothrow_move_assign
__has_trivial_move_assign
__has_trivial_move_constructor
__has_nothrow_assign
__has_nothrow_copy
__has_nothrow_constructor
__has_trivial_assign
__has_trivial_copy
__has_trivial_constructor
__has_trivial_destructor
__has_virtual_destructor
__is_abstract
__is_aggregate
__is_base_of
__is_class
__is_convertible_to
__is_empty
__is_enum
__is_final
__is_literal
__is_literal_type
__is_pod
__is_polymorphic
__is_standard_layout
__is_trivial
__is_trivially_assignable
__is_trivially_constructible
__is_trivially_copyable
__is_union
__has_unique_object_representations
__add_lvalue_reference
__add_pointer
__add_rvalue_reference
__decay
__make_signed
__make_unsigned
__remove_all_extents
__remove_const
__remove_cv
__remove_cvref
__remove_extent
__remove_pointer
__remove_reference_t
__remove_restrict
__remove_volatile
__underlying_type
__is_trivially_relocatable
__is_trivially_equality_comparable
__is_bounded_array
__is_unbounded_array
__is_nullptr
__is_scoped_enum
__is_referenceable
__can_pass_in_regs
__reference_binds_to_temporary
__is_lvalue_expr
__is_rvalue_expr
__is_arithmetic
__is_floating_point
__is_integral
__is_complete_type
__is_void
__is_array
__is_function
__is_reference
__is_lvalue_reference
__is_rvalue_reference
__is_fundamental
__is_object
__is_scalar
__is_compound
__is_pointer
__is_member_object_pointer
__is_member_function_pointer
__is_member_pointer
__is_const
__is_volatile
__is_signed
__is_unsigned
__is_same
__is_convertible
__array_rank
__array_extent
__is_same_as
__private_extern__
__module_private__
__builtin_ptrauth_type_discriminator
__builtin_ptrauth_struct_key
__builtin_ptrauth_struct_disc
__builtin_ptrauth_has_authentication
__builtin_ptrauth_schema_key
__builtin_ptrauth_schema_is_address_discriminated
__builtin_ptrauth_schema_extra_discriminator
__builtin_ptrauth_schema_options
__builtin_xnu_type_signature
__builtin_xnu_type_summary
__builtin_xnu_types_compatible
__builtin_tmo_get_type_data
__builtin_tmo_get_type_descriptor
__declspec
__cdecl
__stdcall
__fastcall
__thiscall
__regcall
__vectorcall
__forceinline
__unaligned
__super
__global
__local
__constant
__private
__generic
local
generic
__kernel
__read_only
__write_only
__read_write
read_only
write_only
read_write
__builtin_astype
vec_step
image1d_t
image1d_array_t
image1d_buffer_t
image2d_t
image2d_array_t
image2d_depth_t
image2d_array_depth_t
image2d_msaa_t
image2d_array_msaa_t
image2d_msaa_depth_t
image2d_array_msaa_depth_t
image3d_t
pipe
addrspace_cast
__noinline__
cbuffer
tbuffer
groupshared
__builtin_omp_required_simd_align
__pascal
__vector
__pixel
__bool
__fp16
__bf16
half
__bridge
__bridge_transfer
__bridge_retained
__bridge_retain
__covariant
__contravariant
__kindof
__alignof__
__asm
__asm__
__attribute__
__complex
__complex__
__const__
__decltype
__imag__
__inline
__inline__
__nullptr
__real__
__restrict
__restrict__
__signed
__signed__
__typeof
__typeof__
__volatile
__volatile__
_Nonnull
_Nullable
_Nullable_result
_Null_unspecified
__funcref
__ptr64
__ptr32
__sptr
__uptr
__w64
__uuidof
__try
__finally
__leave
__int64
__if_exists
__if_not_exists
__single_inheritance
__multiple_inheritance
__virtual_inheritance
__interface
__int8
__int16
__int32
__wchar_t
__builtin_alignof
_asm
_alignof
_cdecl
_declspec
_fastcall
_finally
_forceinline
_inline
_int8
_int16
_int32
_int64
_leave
_multiple_inheritance
_ptr32
_ptr64
_restrict
_stdcall
_thiscall
_try
_vectorcall
_unaligned
_uptr
_uuidof
_virtual_inheritance
_w64
_pascal
__builtin_convertvector
__char16_t
__char32_t
__builtin_bit_cast
__builtin_available
__builtin_sycl_unique_stable_name
__arm_in
__arm_inout
__arm_locally_streaming
__arm_new
__arm_out
__arm_preserves
__arm_streaming
__arm_streaming_compatible
not_keyword
compatibility_alias
defs
encode
implementation
interface
protocol
selector
finally
synchronized
autoreleasepool
package
required
optional
synthesize
dynamic
available
FILE
jmp_buf
sigjmp_buf
ucontext_t
float_t
double_t
__unknown_anytype
__ieee128
elif
line
endif
ident
ifdef
undef
assert
ifndef
elifdef
elifndef
__public_macro
__private_macro
c++11
c++14
c++17
c++20
ptrauth
UTF-32 (BE)
UTF-32 (LE)
UTF-16 (BE)
UTF-16 (LE)
UTF-7
UTF-1
UTF-EBCDIC
SCSU
BOCU-1
GB-18030
<<<INVALID BUFFER>>
<<<<<INVALID SOURCE LOCATION>>>>>
<<<<INVALID BUFFER>>>>
<invalid loc>
<invalid buffer>
_REENTRANT
_GNU_SOURCE
_THREAD_SAFE
_XOPEN_SOURCE
_FILE_OFFSET_BITS
_LARGEFILE64_SOURCE
small
rand
_FORTIFY_SOURCE
medium
auto
break
case
char
const
continue
default
double
else
enum
extern
float
goto
_ExtInt
_BitInt
long
register
return
short
signed
sizeof
static
struct
switch
typedef
union
unsigned
void
volatile
while
_Alignas
_Alignof
_Atomic
_Bool
_Complex
_Generic
_Imaginary
_Noreturn
_Static_assert
_Thread_local
__func__
__objc_yes
__objc_no
__ptrauth
__ptrauth_restricted_intptr
bool
catch
class
const_cast
delete
dynamic_cast
explicit
export
false
friend
mutable
namespace
operator
private
protected
public
reinterpret_cast
static_cast
template
this
throw
true
typename
typeid
using
virtual
wchar_t
restrict
inline
alignas
alignof
char16_t
char32_t
constexpr
decltype
noexcept
nullptr
static_assert
thread_local
co_await
co_return
co_yield
module
import
consteval
constinit
concept
requires
char8_t
_Float16
typeof
typeof_unqual
_Accum
_Fract
_Sat
_Decimal32
_Decimal64
_Decimal128
__null
__alignof
__attribute
__builtin_choose_expr
__builtin_offsetof
__builtin_FILE
__builtin_FILE_NAME
__builtin_FUNCTION
__builtin_FUNCSIG
__builtin_LINE
__builtin_COLUMN
__builtin_source_location
__builtin_types_compatible_p
__builtin_va_arg
__extension__
__float128
__ibm128
__imag
__int128
__label__
__real
__thread
__FUNCTION__
__PRETTY_FUNCTION__
__auto_type
__FUNCDNAME__
__FUNCSIG__
L__FUNCTION__
L__FUNCSIG__
__is_interface_class
__is_sealed
__is_destructible
__is_trivially_destructible
__is_nothrow_destructible
__is_nothrow_assignable
__is_constructible
__is_nothrow_constructible
__is_assignable
__has_nothrow_move_assign
__has_trivial_move_assign
__has_trivial_move_constructor
__has_nothrow_assign
__has_nothrow_copy
__has_nothrow_constructor
__has_trivial_assign
__has_trivial_copy
__has_trivial_constructor
__has_trivial_destructor
__has_virtual_destructor
__is_abstract
__is_aggregate
__is_base_of
__is_class
__is_convertible_to
__is_empty
__is_enum
__is_final
__is_literal
__is_pod
__is_polymorphic
__is_standard_layout
__is_trivial
__is_trivially_assignable
__is_trivially_constructible
__is_trivially_copyable
__is_union
__has_unique_object_representations
__add_lvalue_reference
__add_pointer
__add_rvalue_reference
__decay
__make_signed
__make_unsigned
__remove_all_extents
__remove_const
__remove_cv
__remove_cvref
__remove_extent
__remove_pointer
__remove_reference_t
__remove_restrict
__remove_volatile
__underlying_type
__is_trivially_relocatable
__is_trivially_equality_comparable
__is_bounded_array
__is_unbounded_array
__is_nullptr
__is_scoped_enum
__is_referenceable
__can_pass_in_regs
__reference_binds_to_temporary
__is_lvalue_expr
__is_rvalue_expr
__is_arithmetic
__is_floating_point
__is_integral
__is_complete_type
__is_void
__is_array
__is_function
__is_reference
__is_lvalue_reference
__is_rvalue_reference
__is_fundamental
__is_object
__is_scalar
__is_compound
__is_pointer
__is_member_object_pointer
__is_member_function_pointer
__is_member_pointer
__is_const
__is_volatile
__is_signed
__is_unsigned
__is_same
__is_convertible
__array_rank
__array_extent
__private_extern__
__module_private__
__builtin_ptrauth_type_discriminator
__builtin_ptrauth_struct_key
__builtin_ptrauth_struct_disc
__builtin_ptrauth_has_authentication
__builtin_ptrauth_schema_key
__builtin_ptrauth_schema_is_address_discriminated
__builtin_ptrauth_schema_extra_discriminator
__builtin_ptrauth_schema_options
__builtin_xnu_type_signature
__builtin_xnu_type_summary
__builtin_xnu_types_compatible
__builtin_tmo_get_type_data
__builtin_tmo_get_type_descriptor
__declspec
__cdecl
__stdcall
__fastcall
__thiscall
__regcall
__vectorcall
__forceinline
__unaligned
__super
__global
__local
__constant
__private
__generic
__kernel
__read_only
__write_only
__read_write
__builtin_astype
vec_step
image1d_t
image1d_array_t
image1d_buffer_t
image2d_t
image2d_array_t
image2d_depth_t
image2d_array_depth_t
image2d_msaa_t
image2d_array_msaa_t
image2d_msaa_depth_t
image2d_array_msaa_depth_t
image3d_t
pipe
addrspace_cast
__noinline__
cbuffer
tbuffer
groupshared
__builtin_omp_required_simd_align
__pascal
__vector
__pixel
__bool
__bf16
half
__bridge
__bridge_transfer
__bridge_retained
__bridge_retain
__covariant
__contravariant
__kindof
_Nonnull
_Nullable
_Nullable_result
_Null_unspecified
__funcref
__ptr64
__ptr32
__sptr
__uptr
__w64
__uuidof
__try
__finally
__leave
__int64
__if_exists
__if_not_exists
__single_inheritance
__multiple_inheritance
__virtual_inheritance
__interface
__builtin_convertvector
__builtin_bit_cast
__builtin_available
__builtin_sycl_unique_stable_name
__arm_in
__arm_inout
__arm_locally_streaming
__arm_new
__arm_out
__arm_preserves
__arm_streaming
__arm_streaming_compatible
__unknown_anytype
unknown
code_completion
comment
identifier
raw_identifier
numeric_constant
char_constant
wide_char_constant
utf8_char_constant
utf16_char_constant
utf32_char_constant
string_literal
wide_string_literal
header_name
utf8_string_literal
utf16_string_literal
utf32_string_literal
l_square
r_square
l_paren
r_paren
l_brace
r_brace
period
ellipsis
ampamp
ampequal
star
starequal
plus
plusplus
plusequal
minus
arrow
minusminus
minusequal
tilde
exclaim
exclaimequal
slash
slashequal
percent
percentequal
less
lessless
lessequal
lesslessequal
spaceship
greater
greatergreater
greaterequal
greatergreaterequal
caret
caretequal
pipepipe
pipeequal
question
colon
semi
equal
equalequal
comma
hash
hashhash
hashat
periodstar
arrowstar
coloncolon
lesslessless
greatergreatergreater
caretcaret
annot_cxxscope
annot_typename
annot_template_id
annot_non_type
annot_non_type_undeclared
annot_non_type_dependent
annot_overload_set
annot_primary_expr
annot_decltype
annot_pragma_unused
annot_pragma_vis
annot_pragma_pack
annot_pragma_parser_crash
annot_pragma_captured
annot_pragma_dump
annot_pragma_msstruct
annot_pragma_align
annot_pragma_weak
annot_pragma_weakalias
annot_pragma_redefine_extname
annot_pragma_fp_contract
annot_pragma_fenv_access
annot_pragma_fenv_access_ms
annot_pragma_fenv_round
annot_pragma_float_control
annot_pragma_ms_pointers_to_members
annot_pragma_ms_vtordisp
annot_pragma_ms_pragma
annot_pragma_opencl_extension
annot_attr_openmp
annot_pragma_openmp
annot_pragma_openmp_end
annot_pragma_loop_hint
annot_pragma_fp
annot_pragma_attribute
annot_pragma_riscv
annot_module_include
annot_module_begin
annot_module_end
annot_header_unit
annot_repl_input_end
clang-1600.0.20.10
Apple 
 version 16.0.0
clang-format on
clang-format off
@param
@return
@returns
@throws
@type
@template
@see
@deprecated
@define
@exports
@mods
@private
^[1-9][0-9]?\.
^[1-9][0-9]?\. 
///<
//!<
####
function
Failed to update the prefix delimiter of a raw string: 
Failed to update the suffix delimiter of a raw string: 
Failed to reformat raw string: 
_T("
clang-format.parse_error
Invalid argument
trailing comma insertion cannot be used with bin packing
Invalid qualifier specified in QualifierOrder
Duplicate qualifier specified in QualifierOrder
Missing type in QualifierOrder
Missing QualifierOrder
^ IWYU pragma:
foreach
^"(llvm|llvm-c|clang|clang-c)/
^(<|"(gtest|gmock|isl|json)/)
(Test)?$
QT_REQUIRE_VERSION
BOOST_PP_STRINGIZE
([-_](test|unittest))?$
google
PARSE_PARTIAL_TEXT_PROTO
(taze:|^/[ 
]*<|tslint:|@see)
com.google.android.apps.chrome
chromium
mozilla
webkit
microsoft
R"([][A-Za-z0-9_{}#<>%:;.?*+/^&\$|~!=,'-]*)\(
Error adding replacements : 
Set coding style. <string> can be:
1. A preset: LLVM, GNU, Google, Chromium, Microsoft,
   Mozilla, WebKit.
2. 'file' to load style configuration from a
   .clang-format file in one of the parent directories
   of the source file (for stdin, see --assume-filename).
   If no .clang-format file is found, falls back to
   --fallback-style.
   --style=file is the default.
3. 'file:<format_file_path>' to explicitly specify
   the configuration file.
4. "{key: value, ...}" to set specific parameters, e.g.:
   --style="{BasedOnStyle: llvm, IndentWidth: 8}"
guess.h
file
Invalid fallback style "
<command-line>
Error parsing -style: 
Error reading 
Invalid value for -style
Configuration file(s) do(es) not support 
CGFloat
CGPoint
CGPointMake
CGPointZero
CGRect
CGRectEdge
CGRectInfinite
CGRectMake
CGRectNull
CGRectZero
CGSize
CGSizeMake
CGVector
CGVectorMake
FOUNDATION_EXPORT
FOUNDATION_EXTERN
NSAffineTransform
NSArray
NSAttributedString
NSBlockOperation
NSBundle
NSCache
NSCalendar
NSCharacterSet
NSCountedSet
NSData
NSDataDetector
NSDecimal
NSDecimalNumber
NSDictionary
NSEdgeInsets
NSError
NSErrorDomain
NSHashTable
NSIndexPath
NSIndexSet
NSInteger
NSInvocationOperation
NSLocale
NSMapTable
NSMutableArray
NSMutableAttributedString
NSMutableCharacterSet
NSMutableData
NSMutableDictionary
NSMutableIndexSet
NSMutableOrderedSet
NSMutableSet
NSMutableString
NSNumber
NSNumberFormatter
NSOperation
NSOperationQueue
NSOperationQueuePriority
NSOrderedSet
NSPoint
NSPointerArray
NSQualityOfService
NSRange
NSRect
NSRegularExpression
NSSet
NSSize
NSString
NSTimeZone
NSUInteger
NSURL
NSURLComponents
NSURLQueryItem
NSUUID
NSValue
NS_ASSUME_NONNULL_BEGIN
UIImage
UIView
CSharp
Objective-C
Java
JavaScript
Json
Proto
TableGen
TextProto
Verilog
Unknown
/* clang-format on */
/* clang-format off */
Language
Google
Chromium
Mozilla
WebKit
Microsoft
# BasedOnStyle
BasedOnStyle
Unknown value for BasedOnStyle: 
AlignEscapedNewlinesLeft
AllowAllConstructorInitializersOnNextLine
BreakBeforeInheritanceComma
BreakConstructorInitializersBeforeComma
ConstructorInitializerAllOnOneLineOrOnePerLine
DeriveLineEnding
DerivePointerBinding
IndentFunctionDeclarationAfterType
IndentRequires
PointerBindsToType
SpaceAfterControlStatementKeyword
SpaceInEmptyParentheses
SpacesInConditionalStatement
SpacesInCStyleCastParentheses
SpacesInParentheses
UseCRLF
AccessModifierOffset
AlignAfterOpenBracket
AlignArrayOfStructures
AlignConsecutiveAssignments
AlignConsecutiveBitFields
AlignConsecutiveDeclarations
AlignConsecutiveMacros
AlignConsecutiveShortCaseStatements
AlignEscapedNewlines
AlignOperands
AlignTrailingComments
AllowAllArgumentsOnNextLine
AllowAllParametersOfDeclarationOnNextLine
AllowShortBlocksOnASingleLine
AllowShortCaseLabelsOnASingleLine
AllowShortEnumsOnASingleLine
AllowShortFunctionsOnASingleLine
AllowShortIfStatementsOnASingleLine
AllowShortLambdasOnASingleLine
AllowShortLoopsOnASingleLine
AlwaysBreakAfterDefinitionReturnType
AlwaysBreakAfterReturnType
AlwaysBreakBeforeMultilineStrings
AlwaysBreakTemplateDeclarations
AttributeMacros
BinPackArguments
BinPackParameters
BitFieldColonSpacing
BracedInitializerIndentWidth
BraceWrapping
BreakAfterAttributes
BreakAfterJavaFieldAnnotations
BreakArrays
BreakBeforeBinaryOperators
BreakBeforeConceptDeclarations
BreakBeforeBraces
BreakBeforeInlineASMColon
BreakBeforeTernaryOperators
BreakConstructorInitializers
BreakInheritanceList
BreakStringLiterals
ColumnLimit
CommentPragmas
CompactNamespaces
ConstructorInitializerIndentWidth
ContinuationIndentWidth
Cpp11BracedListStyle
DerivePointerAlignment
DisableFormat
EmptyLineAfterAccessModifier
EmptyLineBeforeAccessModifier
ExperimentalAutoDetectBinPacking
FixNamespaceComments
ForEachMacros
IfMacros
IncludeBlocks
IncludeCategories
IncludeIsMainRegex
IncludeIsMainSourceRegex
IndentAccessModifiers
IndentCaseBlocks
IndentCaseLabels
IndentExternBlock
IndentGotoLabels
IndentPPDirectives
IndentRequiresClause
IndentWidth
IndentWrappedFunctionNames
InsertBraces
InsertNewlineAtEOF
InsertTrailingCommas
IntegerLiteralSeparator
JavaImportGroups
JavaScriptQuotes
JavaScriptWrapImports
KeepEmptyLinesAtTheStartOfBlocks
KeepEmptyLinesAtEOF
LambdaBodyIndentation
LineEnding
MacroBlockBegin
MacroBlockEnd
MaxEmptyLinesToKeep
NamespaceIndentation
NamespaceMacros
ObjCBinPackProtocolList
ObjCBlockIndentWidth
ObjCBreakBeforeNestedBlockParam
ObjCSpaceAfterProperty
ObjCSpaceBeforeProtocolList
PackConstructorInitializers
PenaltyBreakAssignment
PenaltyBreakBeforeFirstCallParameter
PenaltyBreakComment
PenaltyBreakFirstLessLess
PenaltyBreakOpenParenthesis
PenaltyBreakString
PenaltyBreakTemplateDeclaration
PenaltyExcessCharacter
PenaltyIndentedWhitespace
PenaltyReturnTypeOnItsOwnLine
PointerAlignment
PPIndentWidth
QualifierAlignment
QualifierOrder
RawStringFormats
ReferenceAlignment
ReflowComments
RemoveBracesLLVM
RemoveParentheses
RemoveSemicolon
RequiresClausePosition
RequiresExpressionIndentation
SeparateDefinitionBlocks
ShortNamespaceLines
SortIncludes
SortJavaStaticImport
SortUsingDeclarations
SpaceAfterCStyleCast
SpaceAfterLogicalNot
SpaceAfterTemplateKeyword
SpaceAroundPointerQualifiers
SpaceBeforeAssignmentOperators
SpaceBeforeCaseColon
SpaceBeforeCpp11BracedList
SpaceBeforeCtorInitializerColon
SpaceBeforeInheritanceColon
SpaceBeforeJsonColon
SpaceBeforeParens
SpaceBeforeParensOptions
SpaceBeforeRangeBasedForLoopColon
SpaceBeforeSquareBrackets
SpaceInEmptyBlock
SpacesBeforeTrailingComments
SpacesInAngles
SpacesInContainerLiterals
SpacesInLineCommentPrefix
SpacesInParens
SpacesInParensOptions
SpacesInSquareBrackets
Standard
StatementAttributeLikeMacros
StatementMacros
TabWidth
TypeNames
TypenameMacros
UseTab
VerilogBreakBetweenInstancePorts
WhitespaceSensitiveMacros
Macros
ObjC
-?:\,[]{}#&*!|>'"%@`
0123456789abcdefABCDEF
DontAlign
Left
Right
Middle
Never
ControlStatements
ControlStatementsExceptControlMacros
NonEmptyParentheses
Always
Custom
ControlStatementsExceptForEachMacros
Align
AlwaysBreak
BlockIndent
None
Consecutive
AcrossEmptyLines
AcrossComments
AcrossEmptyLinesAndComments
Enabled
AlignCompound
PadOperators
AlignCaseColons
AlignAfterOperator
Leave
Kind
OverEmptyLines
Empty
Inline
InlineOnly
WithoutElse
OnlyFirstIf
AllIfsAndElse
TopLevel
TopLevelDefinitions
AllDefinitions
MultiLine
Both
Before
After
AfterCaseLabel
AfterClass
AfterControlStatement
AfterEnum
AfterExternBlock
AfterFunction
AfterNamespace
AfterObjCDeclaration
AfterStruct
AfterUnion
BeforeCatch
BeforeElse
BeforeLambdaBody
BeforeWhile
IndentBraces
SplitEmptyFunction
SplitEmptyRecord
SplitEmptyNamespace
NonAssignment
Allowed
Attach
Linux
Stroustrup
Allman
Whitesmiths
OnlyMultiline
BeforeColon
BeforeComma
AfterColon
AfterComma
LogicalBlock
Indent
NoIndent
AfterHash
BeforeHash
Wrapped
Binary
BinaryMinDigits
Decimal
DecimalMinDigits
HexMinDigits
Single
Double
Signature
OuterScope
CRLF
DeriveLF
DeriveCRLF
Inner
Auto
BinPack
CurrentLine
NextLine
NextLineOnly
Delimiters
EnclosingFunctions
CanonicalDelimiter
MultipleParentheses
ReturnStatement
OwnLine
WithPreceding
WithFollowing
SingleLine
Keyword
CaseInsensitive
CaseSensitive
Lexicographic
LexicographicNumeric
Default
AfterControlStatements
AfterForeachMacros
AfterFunctionDefinitionName
AfterFunctionDeclarationName
AfterIfMacros
AfterOverloadedOperator
AfterRequiresInClause
AfterRequiresInExpression
BeforeNonEmptyParentheses
Minimum
Maximum
InCStyleCasts
InConditionalStatements
InEmptyParentheses
Other
c++03
C++03
Cpp03
C++11
Latest
Cpp11
ForIndentation
ForContinuationAndIndentation
AlignWithSpaces
assembly
field
event
method
param
>>>>>>>
^s?[bdho]
^('|``?|\\(\\(
)|[^[:space:]])*)
final
override
CF_CLOSED_ENUM
CF_ENUM
CF_OPTIONS
NS_CLOSED_ENUM
NS_ENUM
NS_ERROR_ENUM
NS_OPTIONS
async
await
declare
from
infer
readonly
yield
abstract
extends
implements
instanceof
native
throws
__except
__has_include
__has_include_next
mark
region
extend
option
repeated
returns
signals
Q_SIGNALS
slots
Q_SLOTS
__CLANG_FORMAT_INTERNAL_IDENT_AFTER_DEFINE__
dollar
base
byte
checked
decimal
delegate
fixed
init
implicit
internal
lock
object
params
stackalloc
sbyte
sealed
unchecked
unsafe
ushort
when
where
always
always_comb
always_ff
always_latch
assign
automatic
before
begin
begin_keywords
bins
binsof
casex
casez
celldefine
checker
clocking
constraint
cover
covergroup
coverpoint
default_decay_time
default_nettype
default_trireg_strength
delay_mode_distributed
delay_mode_path
delay_mode_unit
delay_mode_zero
disable
dist
edge
elsif
end_keywords
endcase
endcelldefine
endchecker
endclass
endclocking
endfunction
endgenerate
endgroup
endinterface
endmodule
endpackage
endprimitive
endprogram
endproperty
endsequence
endspecify
endtable
endtask
forever
fork
generate
highz0
highz1
ifnone
ignore_bins
illegal_bins
initial
inout
inside
interconnect
intersect
join
join_any
join_none
large
localparam
macromodule
matches
negedge
nounconnected_drive
parameter
posedge
primitive
priority
program
pull0
pull1
randc
randcase
randsequence
repeat
resetall
sample
scalared
soft
solve
specify
specparam
strong0
strong1
supply0
supply1
table
tagged
task
timescale
tri0
tri1
triand
trior
trireg
unconnected_drive
undefineall
unique
unique0
uwire
vectored
wand
weak0
weak1
wildcard
wire
with
_himnsuyd
Error while updating namespace end comment: 
Error while adding namespace end comment: 
^/[/*] *(end (of )?)? *(anonymous|unnamed)? *namespace( +([a-zA-Z0-9:_]+))?\.? *(\*/)?$
^/[/*] *(end (of )?)? *(anonymous|unnamed)? *([a-zA-Z0-9_]+)\(([a-zA-Z0-9:_]*)\)\.? *(\*/)?$
^/[/*] *( +([a-zA-Z0-9:_]+))?\.? *(\*/)?$
Error while rearranging Qualifier : 
Error while sorting using declarations: 
typename 
unable to overwrite file %0: %1
New replacement: 
Existing replacement: 
Failed to apply a replacement.
The new replacement's file path is different from the file path of existing replacements
The new replacement overlaps with an existing replacement.
The new insertion has the same insert location as an existing replacement.
Regex
Priority
SortPriority
CaseSensitive
Preserve
Merge
Regroup
Private
.framework
.system_framework
Modules
module.modulemap
module.map
module.private.modulemap
NumIncluded
Number of attempted #includes.
NumMultiIncludeFileOptzn
Number of #includes skipped due to the multi-include optimization.
NumFrameworkLookups
Number of framework lookups.
NumSubFrameworkLookups
Number of subframework lookups.
module_private.map
Headers
PrivateHeaders
<<<<
Allocation failed
Frameworks
exclude
header
textual
umbrella
framework module
_ATFILE_SOURCE
_BSD_SOURCE
_CRT_NONSTDC_NO_WARNINGS
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
_CRT_SECURE_NO_WARNINGS
_GLIBCXX_ASSERTIONS
_GLIBCXX_CONCEPT_CHECKS
_GLIBCXX_DEBUG
_GLIBCXX_DEBUG_PEDANTIC
_GLIBCXX_PARALLEL
_GLIBCXX_PARALLEL_ASSERTIONS
_GLIBCXX_SANITIZE_VECTOR
_GLIBCXX_USE_CXX11_ABI
_GLIBCXX_USE_DEPRECATED
_ISOC11_SOURCE
_ISOC95_SOURCE
_ISOC99_SOURCE
_POSIX_C_SOURCE
_SVID_SOURCE
_XOPEN_SOURCE_EXTENDED
__STDCPP_WANT_MATH_SPEC_FUNCS__
__STDC_FORMAT_MACROS
'defined'
 to 
??? ??? ?? ??:??:?? ????
"%s %2d %4d"
??? ?? ????
"%02d:%02d:%02d"
??:??:??
attribute_availability_with_message
attribute_availability_app_extension
attribute_availability_with_version_underscores
attribute_availability_with_strict
attribute_availability_with_replacement
attribute_availability_in_templates
attribute_cf_returns_not_retained
attribute_cf_returns_on_parameters
attribute_deprecated_with_message
attribute_deprecated_with_replacement
attribute_ns_returns_not_retained
attribute_unavailable_with_message
attribute_symbol_metadata_footnote
ptrauth_qualifier_authentication_mode
ptrauth_restricted_intptr_qualifier
ptrauth_vtable_pointer_address_discrimination
ptrauth_vtable_pointer_type_discrimination
ptrauth_type_info_discriminated_vtable_pointer
ptrauth_member_function_pointer_type_discrimination
ptrauth_function_pointer_type_discrimination
objc_default_synthesize_properties
cxx_decltype_incomplete_return_types
cxx_default_function_template_args
cxx_reference_qualified_functions
c_generic_selection_with_controlling_type
pragma_clang_attribute_namespaces
pragma_clang_attribute_external_declaration
statement_attributes_with_gnu_syntax
cxx_attributes_on_using_declarations
__builtin_unsafe_forge_bidi_indexable
__builtin_unsafe_forge_terminated_by
__builtin_get_pointer_lower_bound
__builtin_get_pointer_upper_bound
'__has_warning'
unknown-unknown-
pragma hdrstop
v5te
v6-m
v6kz
v7-a
v7-r
v7-m
v7e-m
aarch64
arm64
v8-a
v8.1-a
v8.2-a
v8.3-a
v8.4-a
v8.5-a
v8.6-a
v8.7-a
v8.8-a
v8.9-a
v8-r
v9-a
v9.1-a
v9.2-a
v9.3-a
v9.4-a
v8-m.base
v8-m.main
v8.1-m.main
thumb
invalid
iwmmxt
xscale
armv4
armv4t
+v4t
armv5t
armv5te
+v5e
armv5tej
5TEJ
armv6
armv6k
+v6k
armv6t2
+v6t2
armv6kz
+v6kz
armv6-m
+v6m
armv7-a
armv7ve
+v7ve
armv7-r
+v7r
armv7-m
+v7m
armv7e-m
7E-M
+v7em
armv8-a
+v8a
armv8.1-a
8.1-A
+v8.1a
armv8.2-a
8.2-A
+v8.2a
armv8.3-a
8.3-A
+v8.3a
armv8.4-a
8.4-A
+v8.4a
armv8.5-a
8.5-A
+v8.5a
armv8.6-a
8.6-A
+v8.6a
armv8.7-a
8.7-A
+v8.7a
armv8.8-a
8.8-A
+v8.8a
armv8.9-a
8.9-A
+v8.9a
armv9-a
+v9a
armv9.1-a
9.1-A
+v9.1a
armv9.2-a
9.2-A
+v9.2a
armv9.3-a
9.3-A
+v9.3a
armv9.4-a
9.4-A
+v9.4a
armv8-r
+v8r
armv8-m.base
8-M.Baseline
+v8m.base
armv8-m.main
8-M.Mainline
+v8m.main
armv8.1-m.main
8.1-M.Mainline
+v8.1m.main
iwmmxt2
armv7s
+v7s
armv7k
+v7k
aV,m
F,C
Epr@
"jU7
#mGs/
@%uQO
i@)0T=
1E5L@+,T9
1@,F
M@,p
-AD 
@.$W)
@2)G
4`OdC
@6gB
7|RLt
D/G@7
;xKo
<+C\
<qG58
@=$Dm!
RNZ@>E
~@?3
@@EB
@@[F
9@@q
L@B4
@B@G
BvR+z
C@D?K@CLF
CXQV
@E#E
;@Hw
@IMB
J#QW(
JsMz
E(y@K
NaNn]
@OuL
@P8B
@R{C
TUG3
_8Mx
x@V+
0YEiL
(@Vk
W)SBF@W;
k@Xh
[WNt
^xHVa
\ G3
@\JC
@^BF
EF@^
@_9O
_EM&
XCFF
@cVC
@e_E
fuRJ|@f{G
@gfG
J)Gi
0@hv
XQS=
@lLJ
M{@mlK
oNFv
@oTKo
~@uo
RI\@v
uyKo
wlCh
@xnF
xzNs
z-B)
zWB2
zoB08
{AG*
@}tG
~GIV
@~MB
:@~c
Nm)@~
 EF
HFU-
Ob6@
O0Oj
T?]@
8D[
O-l@
G V@
iqQQr@
F)S@
WEA.@
uiJR
t)C?h@
qD{I@
`E>q
E1X@
AQE+
SEQ@
MzV@
9E?M@
SGK
DaI@
HB9<
B9<@
Ob'@
0GTo@
1HQU
0F7^
HQPb
71I8
GTo@
u9Ch
P]2@
PB08
yB08
"B08
o0QU
RAG3
RPOb
A#$C
A#bD
wA#~
A$rB
A')B
A(J#
NA1i
5xKo
7"Nq
74Nta
M0E'^A8
5A;uE
I~!AI
AVFI
JAVx
aGV)AY
D5KAZ
)QQaA[
hA^-
^CD"q
A_NE
,Ad*
e(T>
AePD[
PZBAe
)Ak:G
kFCE
Al^G
lAn*
Ao&G
rAvR
Ax[B
A},
MA}N
E@<A
U8SA
=B&QA
0I9(
xC]j
xXG}
3XO0
DqJo
0HDB
9F`K
)LRq
J_rA
OjLA
M;NA
NI8A
N!0A
9!D[A
5!QO
zAB-A
bB-A
DGK
^YA
;G!y
QM}bB
B6F
KQgB
VHVaB
$IHK
vB"a
B"yC
rB#}
E27B$
&aD"q
B&QB&
B'dE
,B+VG
,B+c
,B,'
,B-EG
,B-m
.PDd
!aDd
$aDb
=B4#
B4eC
B4}D
5'OgmB5E
B6+I
;xM{@B;~
=WFw.
G7qB>
CxO_
K0E+
A7F+
sPMz
PC?zBE
lBHf
q9Ch
BP9F
lBPQ
BQ5H
,BQS
RtJ8
BTBJu8
U1I-m
X"Od
X(LRqBX4P_r
7BXRE
VBXd
BXzE
BZ$D
B["H
B`EHm
[B`]
NB`u
Ba&I
BaxD
bcSB
b{D[Bb
cG"BcOB
*Bg
$BgV
`NI8
lBh7I
BhUP
oBhy
kBiC
mzI@2
uBo&
BoxF
;`I4$
y) Bye&
|xH<
O)E'
D:tB
EOCB
hU2
`@B#
y1G3
iC/S
0H"C
7B&Q
[D!1
H/8B
&C&QB
$iDb
m!BeB
F'B
XD.`
D.`B
IAuB
^Nh@
POh?B
;aGjb
FfB
CUE
GjbC
$IMkZC
21F/
PG9E
(C6;
P\bC
>C w
He3C 
7!E-
D.`C"
"2E-
"FF-
D.`C"
lC#6
#TE-
#^D.`C#hC
F?6C#
C$"C.a
lC$P
xC.a
%:D.`C%F
lC%v
JsMC%
JsMC%
&6F-
&pEQ
JsMC&
(@G;
*YI)
C*_I)
C*kI)
C*wI)
,(Cu
3C0#
kC;CF
<\G!y
kC>d
CBoD)
EcCl
CEoD
LhI;M
M'E<
'CRK
,CV6
29F/
kCY8
.CYrI
.CY~I
/C[%
C[1F 
}C[RF 
}C[p
lC]>
lC]\
lC]t
lC^ZC
^fC.aC^v
D.`C^
JsMC_
_XEQ
C_hD.`
C.aC_
oC``
lCa
`D.`
aNEQ
a|C.aCa
Cf3Q
VCfW
CzKCi
l,&ClH
l|"Cl
kCmnEA
CnBG:
CoeE
otF;
CpyF
ZiEw
VCsN
VCsZ
yCt>
KaD)
kCy2F
kCy>G
kCz7
C|]F
C|iL
EFC}?
C}WC
kC}{F
~*G~
$xGZ5
NJsMC
CUC
GLC
SD!C
`C.aC
FkmC
L{tC
lM~s
YFs{C
Iu9C
0123456789ABCDEF
misc
*#fTZ
,,,,,,
,,,,,,,,,,,,,
,,,,,, ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,$
MmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmQXA
&&&&&&&&&&&&&&&&&&
I333333K3Zq-
SSSS^Sm
                                                                                
40ddddddd
dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddRd0
KQ]hl
KQ]hl
:&L<(R
xsd1
:&L<(R
[0;30m
[0;31m
[0;32m
[0;33m
[0;34m
[0;35m
[0;36m
[0;37m
[0;1;30m
[0;1;31m
[0;1;32m
[0;1;33m
[0;1;34m
[0;1;35m
[0;1;36m
[0;1;37m
[0;40m
[0;41m
[0;42m
[0;43m
[0;44m
[0;45m
[0;46m
[0;47m
[0;1;40m
[0;1;41m
[0;1;42m
[0;1;43m
[0;1;44m
[0;1;45m
[0;1;46m
[0;1;47m
LLVM_DISABLE_SYMBOLIZATION
LLVM_SYMBOLIZER_PATH
;(h(
*1+`+
/8/P/k/
U"U"U"U"U"
<T<v
$60n0
0&%~1s%
#pragma-messages
#warnings
CFString-literal
IndependentClass-attribute
NSObject-attribute
absolute-value
abstract-final-class
abstract-vbase-init
address
address-of-packed-member
address-of-temporary
aggregate-return
aix-compat
align-mismatch
alloca
alloca-with-align-alignof
always-inline-coroutine
ambiguous-delete
ambiguous-ellipsis
ambiguous-macro
ambiguous-member-template
ambiguous-reversed-operator
analyzer-incompatible-plugin
anon-enum-enum-conversion
anonymous-pack-parens
apinotes
arc%arc-bridge-casts-disallowed-in-nonarc
arc-maybe-repeated-use-of-weak
arc-non-pod-memaccess
arc-performSelector-leaks
arc-repeated-use-of-weak
arc-retain-cycles
arc-unsafe-retained-assign
argument-outside-range
argument-undefined-behaviourarray-bounds
array-bounds-pointer-arithmetic
array-parameter
asm-operand-widths
assign-enum
assume
at-protocol
atimport-in-framework-header
atomic-access
atomic-alignment
atomic-implicit-seq-cst
atomic-memory-ordering
atomic-properties*atomic-property-with-user-defined-accessor
attribute-packed-for-bitfield
attribute-warning
attributes
auto-disable-vptr-sanitizer
auto-import
auto-storage-class
auto-var-idavailability
avr-rtlib-linking-quirks
backend-plugin
backslash-newline-escape
bad-function-cast
binary-literal
bind-to-temporary-copy
binding-in-condition
bit-int-extension
bitfield-constant-conversion
bitfield-enum-conversion
bitfield-width
bitwise-conditional-parentheses
bitwise-instead-of-logical
bitwise-op-parentheses
block-capture-autoreleasing
bool-conversion
bool-conversions
bool-operation*bounds-attributes-cxx-experimental-ignored$bounds-attributes-extern-array-countBbounds-attributes-implicit-conversion-single-to-explicit-indexable'bounds-attributes-init-list-side-effect+bounds-attributes-objc-experimental-ignored
bounds-attributes-redundant#bounds-safety-adoption-mode-ignored5bounds-safety-conversion-single-to-implicit-indexableObounds-safety-conversion-single-to-implicit-indexable-then-convert-at-call-siteQbounds-safety-conversion-single-to-implicit-indexable-then-convert-to-larger-type
bounds-safety-init-list
bounds-safety-nullability+bounds-safety-relaxed-system-headers-ignore2bounds-safety-single-to-indexable-bounds-truncated'bounds-safety-strict-terminated-by-cast
braced-scalar-init
branch-protection
bridge-cast builtin-assume-aligned-alignment
builtin-macro-redefined
builtin-memcpy-chk-size
builtin-requires-header
c++-compatc++0x-compat
c++0x-extensions
c++0x-narrowingc++11-compat(c++11-compat-deprecated-writable-strings
c++11-compat-pedantic*c++11-compat-reserved-user-defined-literal
c++11-extensions
c++11-extra-semi
c++11-inline-namespace
c++11-long-long
c++11-narrowing
c++14-attribute-extensions
c++14-binary-literalc++14-compat
c++14-compat-pedantic
c++14-extensions
c++17-attribute-extensionsc++17-compat
c++17-compat-mangling
c++17-compat-pedantic
c++17-extensions
c++1y-extensionsc++1z-compat
c++1z-compat-mangling
c++1z-extensions
c++20-attribute-extensionsc++20-compat
c++20-compat-pedantic
c++20-designator
c++20-extensions$c++23-default-comp-relaxed-constexpr
c++23-extensions
c++26-extensionsc++2a-compat
c++2a-compat-pedantic
c++2a-extensions
c++2b-extensions
c++2c-extensions
c++98-c++11-c++14-c++17-compat'c++98-c++11-c++14-c++17-compat-pedantic
c++98-c++11-c++14-compat!c++98-c++11-c++14-compat-pedantic
c++98-c++11-compat!c++98-c++11-compat-binary-literal
c++98-c++11-compat-pedanticc++98-compat#c++98-compat-bind-to-temporary-copy
c++98-compat-extra-semi%c++98-compat-local-type-template-args
c++98-compat-pedantic'c++98-compat-unnamed-type-template-args
c11-extensions
c2x-compat
c2x-extensions
c99-compat
c99-designator
c99-extensions#call-to-pure-virtual-from-ctor-dtor
called-once-parameter
cast-align
cast-calling-convention
cast-function-type
cast-function-type-strict
cast-of-sel-type
cast-qual
cast-qual-unrelated
char-align
char-subscripts
clang-cacheclang-cl-pch
class-conversion
class-varargs
cmse-union-leak
comma
comment
comments
compare-distinct-pointer-types
compile-job-cache
compile-job-cache-hit
compile-job-cache-miss
compile-job-cache-timing
completion-handler
complex-component-init
compound-token-split
compound-token-split-by-macro
compound-token-split-by-space
conditional-type-mismatch
conditional-uninitialized
config-macros
constant-conversion
constant-evaluated
constant-logical-operand
constexpr-not-const
consumed
conversion
conversion-null$coro-non-aligned-allocation-function
coroutine%coroutine-missing-unhandled-exception
covered-switch-default
cstring-format-directive
ctad-maybe-unsupported
ctor-dtor-privacy
cuda-compat
custom-atomic-properties
cxx-attribute-extension
dangling
dangling-else
dangling-fielddangling-gsl
dangling-initializer-list
darwin-sdk-settings
date-time
dealloc-in-category
debug-compression-unavailable
declaration-after-statement
defaulted-function-deleted
delegating-ctor-cycles delete-abstract-non-virtual-dtor
delete-incomplete$delete-non-abstract-non-virtual-dtor
delete-non-virtual-dtor#delimited-escape-sequence-extension
deprecate-lax-vec-conv-all
deprecated
deprecated-altivec-src-compat$deprecated-anon-enum-enum-conversion
deprecated-array-compare
deprecated-attributes
deprecated-builtins
deprecated-comma-subscript
deprecated-copy
deprecated-copy-dtor
deprecated-copy-with-dtor'deprecated-copy-with-user-provided-copy'deprecated-copy-with-user-provided-dtor
deprecated-coroutine
deprecated-declarations!deprecated-dynamic-exception-spec
deprecated-enum-compare#deprecated-enum-compare-conditional
deprecated-enum-enum-conversion deprecated-enum-float-conversion
deprecated-implementations
deprecated-increment-bool
deprecated-literal-operator
deprecated-non-prototype
deprecated-objc-isa-usage%deprecated-objc-pointer-introspection5deprecated-objc-pointer-introspection-performSelector
deprecated-pragma)deprecated-redundant-constexpr-static-def
deprecated-register
deprecated-static-analyzer-flag
deprecated-this-capture
deprecated-type
deprecated-volatile
deprecated-writable-strings
direct-ivar-access
disabled-macro-expansion
disabled-optimizationdiscard-qual
distributed-object-modifiers
div-by-zero
division-by-zero
dll-attribute-on-redeclaration%dllexport-explicit-instantiation-decl
dllimport-static-field-def
documentation
documentation-deprecated-sync
documentation-html
documentation-pedantic
documentation-unknown-command
dollar-in-identifier-extension
double-promotion
dtor-namedtor-typedef
duplicate-decl-specifier
duplicate-enum
duplicate-method-arg
duplicate-method-match
duplicate-protocol
dxil-validation
dynamic-class-memaccess
dynamic-exception-spec
eager-load-cxx-named-modules
effc++
elaborated-enum-base
elaborated-enum-class
embedded-directive
empty-body
empty-decomposition
empty-init-stmt
empty-translation-unit
encode-typeendif-labelsenum-compare
enum-compare-conditional
enum-compare-switch
enum-constexpr-conversion
enum-conversion
enum-enum-conversion
enum-float-conversion
enum-too-large
exceptions
excess-initializers
exit-time-destructors
expansion-to-defined
experimental-header-units
explicit-initialize-call
explicit-ownership-type
export-unnamed
extern-c-compat
extern-initializer
extra
extra-qualification
extra-semi
extra-semi-stmtextra-tokens
extractapi-misuse
final-dtor-non-final-class
final-macro
firebloom-incomplete-array firebloom-init-list-partial-null
firebloom-single-to-count
fixed-enum-extension
fixed-point-overflow
flag-enum
flexible-array-extensions
float-conversion
float-equal
float-overflow-conversion
float-zero-conversion
for-loop-analysis
format
format-extra-args
format-insufficient-args
format-invalid-specifier
format-non-iso
format-nonliteral
format-pedantic
format-security
format-type-confusion
format-y2k
format-zero-length
format=2
fortify-source
four-char-constants
frame-address
frame-larger-than
frame-larger-than=%framework-include-private-from-public
free-nonheap-object
function-def-in-objc-container
function-multiversionfuse-ld-path
future-attribute-extensions
future-compat
gcc-compat
generic-type-extension
global-constructors
global-isel
gnu-alignof-expression
gnu-anonymous-struct
gnu-array-member-paren-init
gnu-auto-type
gnu-binary-literal
gnu-case-range
gnu-complex-integer gnu-compound-literal-initializer
gnu-conditional-omitted-operand
gnu-designator
gnu-empty-initializer
gnu-empty-struct
gnu-flexible-array-initializer
gnu-flexible-array-union-member
gnu-folding-constant
gnu-imaginary-constant
gnu-include-next
gnu-inline-cpp-without-extern
gnu-label-as-value
gnu-line-marker
gnu-null-pointer-arithmetic
gnu-offsetof-extensions
gnu-pointer-arith
gnu-redeclared-enum
gnu-statement-expression-gnu-statement-expression-from-macro-expansion
gnu-static-float-init$gnu-string-literal-operator-template
gnu-union-cast"gnu-variable-sized-type-not-at-end
gnu-zero-line-directive!gnu-zero-variadic-macro-arguments
gpu-maybe-wrong-sideheader-guard
header-hygiene
hip-omp-target-directives
hip-only
hlsl-extensions
idiomatic-parentheses
ignored-attributes)ignored-availability-without-sdk-settings
ignored-optimization-argument
ignored-pragma-intrinsic
ignored-pragma-optimize
ignored-pragmas
ignored-qualifiers
ignored-reference-qualifiers
implicit
implicit-atomic-properties#implicit-const-int-float-conversion*implicit-conversion-floating-point-to-bool implicit-exception-spec-mismatch
implicit-fallthrough!implicit-fallthrough-per-function
implicit-fixed-point-conversion
implicit-float-conversion
implicit-function-declarationimplicit-int
implicit-int-conversion
implicit-int-float-conversion
implicit-retain-self
implicitly-unsigned-literal
import&import-preprocessor-directive-pedantic
inaccessible-base
include-next-absolute-path
include-next-outside-header
incompatible-exception-spec#incompatible-function-pointer-types*incompatible-function-pointer-types-strict"incompatible-library-redeclaration
incompatible-ms-struct
incompatible-pointer-types.incompatible-pointer-types-discards-qualifiers
incompatible-property-type
incompatible-sysroot'incomplete-framework-module-declaration
incomplete-implementation
incomplete-module
incomplete-setjmp-declaration
incomplete-umbrella
inconsistent-dllimport(inconsistent-missing-destructor-override
inconsistent-missing-override
increment-bool
index-store
infinite-recursion
init-self
initializer-overrides
injected-class-name
inline
inline-asm#inline-namespace-reopened-noninline
inline-new-delete"instantiation-after-specialization
int-conversion
int-conversions
int-in-bool-context
int-to-pointer-cast
int-to-void-pointer-cast
integer-overflow
interrupt-service-routine
invalid-command-line-argument
invalid-constexpr
invalid-iboutlet&invalid-initializer-from-system-header
invalid-ios-deployment-target
invalid-no-builtin-names
invalid-noreturn
invalid-offsetof invalid-or-nonexistent-directory
invalid-partial-specialization
invalid-pch
invalid-pp-token
invalid-source-encoding
invalid-static-assert-message
invalid-token-paste
invalid-unevaluated-stringinvalid-utf8
jump-seh-finally
keyword-compat
keyword-macro
knr-promoted-parameter
language-extension-token
large-by-value-copy
liblto
linker-warnings
literal-conversion
literal-range
local-type-template-args
logical-not-parentheses
logical-op-parentheses
long-long
loop-analysis
macro-redefined
main
main-return-type
malformed-warning-check
many-braces-around-scalar-init*mathematical-notation-identifier-extension
max-tokens
max-unsigned-zero
memset-transposed-args
memsize-comparison
method-signatures
microsoft
microsoft-abstract
microsoft-anon-tag
microsoft-cast
microsoft-charize
microsoft-comment-paste
microsoft-const-init
microsoft-cpp-macro"microsoft-default-arg-redefinition
microsoft-drectve-section
microsoft-end-of-file microsoft-enum-forward-reference
microsoft-enum-value
microsoft-exception-spec
microsoft-exists#microsoft-explicit-constructor-call
microsoft-extra-qualification
microsoft-fixed-enum
microsoft-flexible-array
microsoft-goto
microsoft-inaccessible-base
microsoft-include
microsoft-init-from-predefined
microsoft-mutable-reference
microsoft-pure-definition
microsoft-redeclare-static
microsoft-sealed
microsoft-static-assert
microsoft-template
microsoft-template-shadow microsoft-union-member-reference
microsoft-unqualified-friend
microsoft-using-decl
microsoft-void-pseudo-dtor
misexpect
misleading-indentation
mismatched-new-delete
mismatched-parameter-types
mismatched-return-types
mismatched-tags
missing-braces
missing-constinit
missing-declarations
missing-exception-spec
missing-field-initializers
missing-format-attribute
missing-include-dirs
missing-method-return-type
missing-multilib
missing-noescape
missing-noreturn
missing-prototype-for-cc
missing-prototypes
missing-selector-name
missing-sysroot
missing-variable-declarations
misspelled-assumptionmodule-build
module-conflict
module-file-config-mismatch
module-file-extension
module-import
module-import-in-extern-c
module-include-translation
module-lock"modules-ambiguous-internal-linkage
modules-import-nested-redundant
most
movemsvc-include
msvc-not-found
multi-gpu
multichar
multiple-move-vbase
narrowing
nested-anon-types
nested-externs
new-returns-null
newline-eof
noderef
noexcept-type
non-c-typedef-for-linkage
non-gcc
non-literal-null-conversion'non-modular-include-in-framework-module
non-modular-include-in-module
non-pod-varargs
non-power-of-two-alignment
non-virtual-dtor
nonnull
nonportable-cfstrings
nonportable-include-path!nonportable-private-apinotes-path(nonportable-private-system-apinotes-path
nonportable-system-include-path!nonportable-vector-initialization
nontrivial-memaccess
nsconsumed-mismatch
nsreturns-mismatch
null-arithmetic
null-character
null-conversion
null-dereference
null-pointer-arithmetic
null-pointer-subtraction
nullability
nullability-completeness"nullability-completeness-on-arrays
nullability-declspec
nullability-extension#nullability-inferred-on-nested-type
nullable-to-nonnull-conversion+objc-autosynthesis-property-ivar-name-match
objc-bool-constant-conversion
objc-boxing
objc-circular-container
objc-cocoa-api
objc-designated-initializers
objc-dictionary-duplicate-keys"objc-duplicate-category-definition
objc-flexible-array
objc-forward-class-redefinition
objc-interface-ivars
objc-literal-compare
objc-literal-conversion
objc-load-method
objc-macro-redefinition
objc-messaging-id
objc-method-access
objc-missing-property-synthesis
objc-missing-super-calls
objc-multiple-method-names"objc-noncopy-retain-block-property
objc-nonunified-exceptions#objc-property-assign-on-object-type
objc-property-implementation
objc-property-implicit-mismatch*objc-property-matches-cocoa-ownership-rule
objc-property-no-attribute
objc-property-synthesis#objc-protocol-method-implementation objc-protocol-property-synthesis
objc-protocol-qualifiers"objc-readonly-with-setter-property
objc-redundant-api-use
objc-redundant-literal-use
objc-root-class
objc-signed-char-bool/objc-signed-char-bool-implicit-float-conversion-objc-signed-char-bool-implicit-int-conversion
objc-string-compare
objc-string-concatenation
objc-unsafe-perform-selector
objc-weak-compat
old-style-cast
old-style-definition
opencl-unsupported-rgba
openmp
openmp-51-extensions
openmp-clauses
openmp-loop-form
openmp-mapping
openmp-target
option-ignored!ordered-compare-function-pointers
ossharedptr-misuse
out-of-line-declaration
out-of-scope-functionover-aligned
overflow
overlength-strings
overloaded-shift-op-parentheses
overloaded-virtual
override-init
override-module
overriding-method-mismatch
overriding-t-option
packed
packed-non-pod
padded
parentheses
parentheses-equality
partial-availability
pass
pass-analysis
pass-failed
pass-missed
pch-date-timepch-vfs-diff
pedantic
pedantic-core-features
pedantic-macros
pessimizing-move
pointer-arith
pointer-bool-conversion
pointer-compare
pointer-integer-comparepointer-sign
pointer-to-enum-cast
pointer-to-int-cast
pointer-type-mismatch
poison-system-directories
potentially-direct-selector potentially-evaluated-expression
pragma-clang-attribute
pragma-once-outside-header
pragma-pack
pragma-pack-suspicious-include#pragma-system-header-outside-header
pragmas
pre-c++14-compat
pre-c++14-compat-pedantic
pre-c++17-compat
pre-c++17-compat-pedantic
pre-c++20-compat
pre-c++20-compat-pedantic
pre-c++23-compat
pre-c++23-compat-pedantic
pre-c++26-compat
pre-c++26-compat-pedantic
pre-c++2c-compat
pre-c++2c-compat-pedantic
pre-c2x-compat
pre-c2x-compat-pedantic
pre-openmp-51-compat&predefined-identifier-outside-function
private-extern
private-header
private-module
profile-instr-missing
profile-instr-out-of-date
profile-instr-unprofiled
property-access-dot-syntax
property-attribute-mismatch
protocol%protocol-property-synthesis-ambiguity
psabi
ptrauth-null-pointers
qualified-void-return-type"quoted-include-in-framework-header
range-loop-analysis
range-loop-bind-reference
range-loop-construct
read-modules-implicitly
read-only-types
readonly-iboutlet-property
receiver-expr
receiver-forward-class
redeclared-class-member
redundant-consteval-if
redundant-decls
redundant-move
redundant-parens
register
reinterpret-base-class
remark-backend-plugin
reorderreorder-ctor
reorder-init-list
reproducible-caching
requires-super-attribute
reserved-id-macro
reserved-identifier
reserved-macro-identifier
reserved-module-identifier
reserved-user-defined-literal
restrict-expansion
retained-language-linkage
return-local-addr
return-stack-address
return-std-move
return-type
return-type-c-linkage
rewrite-not-bool
round-trip-cc1-args
rtti
sanitize-address
sarif-format-unstable
search-path-usage
section
selector
selector-type-mismatch
self-assign
self-assign-field
self-assign-overloaded
self-move
semicolon-before-method-body
sentinel
sequence-point
serialized-diagnostics
shadow
shadow-allshadow-field
shadow-field-in-constructor$shadow-field-in-constructor-modified
shadow-ivar
shadow-uncaptured-local
shift-count-negative
shift-count-overflow
shift-negative-value
shift-op-parentheses
shift-overflow
shift-sign-overflow
shorten-64-to-32sign-compare
sign-conversion
sign-promo
signed-enum-bitfield
signed-unsigned-wchar'single-bit-bitfield-constant-conversion
sizeof-array-argument
sizeof-array-decay
sizeof-array-div
sizeof-pointer-div
sizeof-pointer-memaccess
slash-u-filenameslh-asm-goto
sloc-usage
sometimes-uninitialized
source-mgr
source-uses-openmp
spir-compatspirv-compat
stack-exhausted
stack-protector
static-float-init
static-in-inline$static-inline-explicit-instantiation
static-local-in-inline
static-self-init
stdlibcxx-not-found
strict-aliasing
strict-aliasing=0
strict-aliasing=1
strict-aliasing=2
strict-overflow
strict-overflow=0
strict-overflow=1
strict-overflow=2
strict-overflow=3
strict-overflow=4
strict-overflow=5"strict-potentially-direct-selector
strict-prototypes
strict-selector-match
string-compare
string-concatenation
string-conversion
string-plus-char
string-plus-int
strlcpy-strlcat-sizestrncat-size
suggest-destructor-override
suggest-override
super-class-method-mismatch
suspicious-bzero
suspicious-memaccess
swift-name-attribute
swift-newtype-attribute
switch
switch-bool
switch-default
switch-enum
sync-alignment%sync-fetch-and-nand-semantics-changed
synth
target-clones-mixed-specifiers
tautological-bitwise-compare
tautological-compare
tautological-constant-compare&tautological-constant-in-range-compare*tautological-constant-out-of-range-compare
tautological-objc-bool-compare
tautological-overlap-compare
tautological-pointer-compare
tautological-type-limit-compare
tautological-undefined-compare'tautological-unsigned-char-zero-compare'tautological-unsigned-enum-zero-compare"tautological-unsigned-zero-compare tautological-value-range-compare
tcb-enforcement$tentative-definition-incomplete-type
thread-safety
thread-safety-analysis
thread-safety-attributes
thread-safety-beta
thread-safety-negative
thread-safety-precise
thread-safety-reference
thread-safety-verbose
trigraphs
type-limits
type-safety
typed-memory-inference-failure
typedef-redefinition
typename-missing
unable-to-open-stats-file
unaligned-access!unaligned-qualifier-implicit-cast
unavailable-declarations
undeclared-selector
undefundef-prefix
undefined-arm-streaming
undefined-arm-za
undefined-bool-conversion
undefined-func-template
undefined-inline
undefined-internal
undefined-internal-type
undefined-reinterpret-cast
undefined-var-template
underaligned-exception-object
unevaluated-expression
unguarded-availability
unguarded-availability-new
unicode
unicode-homoglyph
unicode-whitespace
unicode-zero-width
uninitialized
uninitialized-const-reference
unknown-argument
unknown-assumption
unknown-attributes
unknown-cuda-version
unknown-directives
unknown-escape-sequence
unknown-pragmas
unknown-sanitizers
unknown-warning-option
unnamed-type-template-args
unneeded-internal-declaration
unneeded-member-function
unqualified-std-cast-call
unreachable-code
unreachable-code-aggressive
unreachable-code-break
unreachable-code-fallthrough
unreachable-code-generic-assoc
unreachable-code-loop-increment
unreachable-code-return
unsafe-buffer-usage unsafe-buffer-usage-in-container
unsequenced
unsupported-abi
unsupported-abs
unsupported-availability-guard
unsupported-cb#unsupported-dll-base-class-template
unsupported-floating-point-opt
unsupported-friend
unsupported-gpopt
unsupported-nan
unsupported-target-opt
unsupported-visibility
unusable-partial-specialization
unused
unused-argument
unused-but-set-parameter
unused-but-set-variable
unused-command-line-argument
unused-comparison
unused-const-variable
unused-exception-parameter
unused-function
unused-getter-return-valueunused-label
unused-lambda-capture
unused-local-typedef
unused-local-typedefs
unused-macros
unused-member-function
unused-parameter
unused-private-field
unused-property-ivar
unused-result
unused-templateunused-value
unused-variable
unused-volatile-lvalue
used-but-marked-unused
user-defined-literals
user-defined-warnings
varargs
variadic-macros
vec-elem-size
vector-conversion
vector-conversionsvexing-parse
visibility
vla-extension
void-pointer-to-enum-cast
void-pointer-to-int-cast
void-ptr-dereference
volatile-register-var
wasm-exception-spec
weak-template-vtablesweak-vtables
writable-strings
write-strings
xor-used-as-pow
zero-as-null-pointer-constant
zero-length-array
API notes file not found at '%0'
NSInvocation's %0 is not safe to be used with an object with ownership other than __unsafe_unretained
invalid type %0 in asm %select{input|output}1
invalid type %0 in asm input for constraint '%1'
%0%select{ attribute|}1 cannot be applied to types
uuid attribute contains a malformed GUID
cannot open file '%0': %1
%select{pointer|reference}0 to %select{|subobject of }1%select{type_info object|string literal|temporary object|predefined '%3' variable}2 is not allowed in a template argument
'size_t' suffix for literals is a C++23 feature
only special member functions %select{|and comparison operators }0may be defaulted
only functions can have deleted definitions
duplicate '%0' declaration specifier
enumeration cannot be a template
expected %0
expected %1 after %0
method name referenced in property setter attribute must end with ':'
expected %0 or %1
expected namespace name
expected string literal %select{in %1|for diagnostic message in static_assert|for optional message in 'availability' attribute|for %select{language name|source container name|USR}1 in 'external_source_symbol' attribute}0
file '%0' modified since it was first processed
sorry, unsupported: file '%0' is too large for Clang to process
compile with '-ffixed-point' to enable fixed point types
'%0' is invalid in friend declarations
sorry, this include generates a translation unit too large for Clang to process.
integer literal is too large to be represented in any %select{signed |}0integer type
character literal with user-defined suffix cannot be used here
invalid feature combination: %0
%select{data member |non-public member function |static member function |user-declared constructor|user-declared destructor|operator |nested class }0%1 is not permitted within an interface type
numeric literal with user-defined suffix cannot be used here
invalid storage class specifier in function declarator
string literal with user-defined suffix cannot be used here
%0 is not supported on this target
'%0' can only be used if the target supports the mfhc1 and mthc1 instructions
module '%0' is needed but has not been provided, and implicit use of module files is disabled
build a shadowed submodule '%0'
cyclic dependency in module '%0': %1
no handler registered for module format '%0'
%select{|umbrella }0header '%1' not found
could not build module '%0'
module '%0' not found
error in loading module '%0' from prebuilt module path
cannot rebuild module '%0' as it is already finalized
import of shadowed module '%0'
module '%0' %select{is incompatible with|requires}1 feature '%2'
an inline asm block cannot have an operand which is a bit-field
[rewriter] %0
nullability specifier %0 conflicts with existing specifier %1
directive '#pragma omp %0' cannot contain more than one '%1' clause%select{| with '%3' name modifier| with 'source' dependence}2
directive '#pragma omp %0' requires the '%1' clause
options %0 and %1 are set to different values
feature %0 requires support of %1 feature
%0 does not support the '%1' %select{type qualifier|storage class specifier}2
'%0' is not supported in C++ for OpenCL
option '%0' cannot be specified on this target
option '%0' cannot be specified with '%1'
option '%0' cannot be specified without '%1'
redefinition of parameter %0
%0 only allowed in __except block or filter expression
%0 only allowed in __except filter expression
%0 only allowed in __finally block
expected '__except' or '__finally' block
%select{signed |}0'size_t' literal is out of range of possible %select{signed |}0'size_t' values
unknown target ABI '%0'
unknown target CPU '%0'
unknown FP unit '%0'
unknown target triple '%0'
ABI '%0' is not supported on CPU '%1'
ABI '%0' is not supported for '%1'
micromips is not supported for target CPU '%0'
execute only is not supported for the %0 sub-architecture
the '%0' unit is not supported with this instruction set
-mcmse is not supported for %0
hardware TLS register is not supported for the %0 sub-architecture
the %0 sub-architecture does not support unaligned accesses
this value is too large for this fixed point type
unable to make temporary file: %0
unable to rename temporary '%0' to output file '%1': '%2'
conversion between fixed point and %0 is not yet supported
no analyzer checkers or packages are associated with '%0'
'%0' can only be used with the '%1' ABI
%0 byte order mark detected in '%1', but encoding is not supported
must use '%1' tag to refer to type %0%select{| in this scope}2
'_BitInt' suffix for literals is a C2x extension
'long long' is an extension when C99 mode is not enabled
use of an empty initializer is a C2x extension
'diagnose_if' is a clang extension
'enable_if' is a clang extension
'long long' is a C++11 extension
'size_t' suffix for literals is a C++23 extension
duplicate '%0' declaration specifier
integer literal is too large to be represented in a signed integer type, interpreting as unsigned
integer literal is too large to be represented in type 'long' and is subject to undefined behavior under C++98, interpreting as 'unsigned long'; this literal will %select{have type 'long long'|be ill-formed}0 in C++11 onwards
variadic templates are a C++11 extension
duplicate '%0' declaration specifier
too many errors emitted, stopping now
also found
%select{pointer|reference}0 to %select{|subobject of }1%select{type_info object|string literal|temporary object|predefined '%3' variable}2 is not allowed in a template argument
%1 %0 is hidden by a non-type declaration of %0 here
declared here
previous case defined here
%0 additional files entered using a total of %1B of space
file entered %0 time%s0 using %1B of space%plural{0:|: plus %2B for macro expansions}2
forward declaration of %0
subexpression not valid in a constant expression
to match this %0
[rewriter] %0
one possibility
#pragma entered here
previous declaration is here
previous definition is here
previous implicit declaration is here
previous use is here
use -analyzer-disable-all-checks to disable all static analyzer checkers
%0B in local locations, %1B in locations loaded from AST files, for a total of %2B (%3%% of available space)
definition of %0 is not complete until the closing '}'
using
valid target CPU values are: %0
could not acquire lock file for module '%0': %1
timed out waiting to acquire lock file for module '%0'
source manager location address space usage:
private API notes file for module '%0' should be named '%0_private.apinotes', not '%1'
private API notes file for module '%0' should be named '%0_private.apinotes', not '%1'
[rewriter] call returns pointer to GC managed memory; it will become unmanaged in ARC
%0 attribute ignored
'_BitInt' suffix for literals is incompatible with C standards before C2x
use of an empty initializer is incompatible with C standards before C2x
conflicting nullability specifier on parameter types, %0 conflicts with existing specifier %1
conflicting nullability specifier on return types, %0 conflicts with existing specifier %1
'consteval' specifier is incompatible with C++ standards before C++20
'size_t' suffix for literals is incompatible with C++ standards before C++23
'long long' is incompatible with C++98
variadic templates are incompatible with C++98
duplicate definition of category %1 on interface %0
duplicate '%0' declaration specifier
'%0' is ignored since it is only supported for HIP
'-mbranch-protection=' option is incompatible with the '%0' architecture
redeclaration of method parameter %0
redefinition of method parameter %0
type specifier missing, defaults to 'int'
[rewriter] %0
duplicate nullability specifier %0
integer literal is too large to be represented in type 'long', interpreting as 'unsigned long' per C89; this literal will %select{have type 'long long'|be ill-formed}0 in C99 onwards
integer literal is too large to be represented in type 'long', interpreting as 'unsigned long' per C++98; this literal will %select{have type 'long long'|be ill-formed}0 in C++11 onwards
%0 is a core feature in %select{OpenCL C|C++ for OpenCL}1 version %2 but not supported on this target
include location '%0' is unsafe for cross-compilation
missing argument to debug command '%0'
unexpected argument to debug command
speculative load hardening does not protect functions with asm goto
unable to protect inline asm that clobbers stack pointer against stack clash
stack nearly exhausted; compilation time may suffer, and crashes due to stack overflow are likely
mismatch between architecture and environment in target triple '%0'; did you mean '%1'?
ignoring the 'branch-protection' attribute because the '%0' architecture does not support it
unknown attribute %0 ignored
The default Altivec ABI on AIX is not yet supported, use '-mabi=vec-extabi' for the extended Altivec ABI
TLS model '%0' is not yet supported on AIX
checker cannot be enabled with analyzer option '%0' == %1
invalid input for checker option '%0', that expects %1
checker '%0' has no option called '%1'
invalid input for analyzer-config option '%0', that expects %1 value
analyzer-config option '%0' should contain only one '='
analyzer-config option '%0' has a key but no value
unknown analyzer-config '%0'
analyzer constraint manager 'z3' is only available if LLVM was built with -DLLVM_ENABLE_Z3_SOLVER=ON
-fobjc-arc is not supported on platforms using the legacy runtime
-fobjc-arc is not supported on versions of OS X prior to 10.6
architecture '%0' does not support '%1' execution mode
original arguments parse failed, then succeeded in round-trip
generated arguments do not match in round-trip
generated arguments parse failed in round-trip
minimum vscale must be an unsigned integer greater than 0
cmse is not compatible with %select{RWPI|ROPI}0
CPU '%0' does not support '%1' execution mode
'%0' not supported, please use -iquote instead
cannot deduce implicit triple value for -Xopenmp-target, specify triple using -Xopenmp-target=<triple>
alignment is not a power of 2 in '%0'
invalid argument '-mno-amdgpu-ieee' only allowed with relaxed NaN handling
option '%0' requires input to be LLVM bitcode
invalid argument '%0' not allowed with '%1'
invalid argument '%0' only allowed with '%1'
invalid offload arch combinations: '%0' and '%1' (for a specific processor, a feature should either exist in all offload archs, or not exist in any offload archs)
invalid target ID '%0'; format is a processor name followed by an optional colon-delimited list of features followed by an enable/disable sign (e.g., 'gfx908:sramecc+:xnack-')
-fembed-bitcode is not supported on versions of iOS prior to 6.0
cannot specify '%1' along with '%0'
configuration file '%0' cannot be opened: %1
cannot read randomize layout seed file '%0'
cannot read configuration file '%0': %1
unable to open CC_PRINT_OPTIONS file: %0
the clang compiler does not support '%0'
the clang compiler does not support '%0' for C++ on Darwin/i386
the clang compiler does not support '%0', %1
the clang compiler does not support -pg option on %select{Darwin|versions of OS X 10.9 and later}0
%0 command failed with exit code %1 (use -v to see invocation)
unable to execute command: %0
%0 command failed due to signal (use -v to see invocation)
compilation database '%0' could not be opened: %1
configuration file '%0' cannot be found
conflicting deployment targets, both '%0' and '%1' are present in environment
unsupported CUDA gpu architecture: %0
unsupported architecture '%0' for host compilation
CUDA offload target is supported only along with --emit-llvm
GPU arch %0 is supported by CUDA versions between %1 and %2 (inclusive), but installation at %3 is %4; use '--cuda-path' to specify a different CUDA install, pass a different GPU arch with '--cuda-gpu-arch', or pass '--no-cuda-version-check'
SDK does not contain 'libarclite' at the path '%0'; try increasing the minimum deployment target
defsym must be of the form: sym=value: %0
value is not an integer: %0
no more than one option '--config' is allowed
target profile option (-T) is missing
-emit-llvm cannot be used when linking
failed to expand response file: %0
'-fopenmp-targets' must be used in conjunction with a '-fopenmp' option compatible with offloading; e.g., '-fopenmp=libomp' or '-fopenmp=libiomp5'
header file '%0' input '%1' does not match the type of prior input in api extraction; use '-x %2' to override
failed to deduce triple for target architecture '%0'; specify the triple using '-fopenmp-targets' and '-Xopenmp-target' instead.
failing because %select{environment variable 'FORCE_CLANG_DIAGNOSTICS_CRASH' is set|'-gen-reproducer' is used}0
GNUstep Objective-C runtime version %0 incompatible with target binary format
multiple inputs are not valid for header units (first extra '%0')
'--hip-path' must be specified when offloading to SPIR-V%select{| unless %1 is given}0.
HLSL code generation is unsupported for target '%0'
OpenMP target architecture '%0' pointer size is incompatible with host '%1'
passing incompatible option '%0' with '-fcas-include-tree'
the combination of '%0' and '%1' is incompatible
--rtlib=libgcc requires --unwindlib=libgcc
passing input files is incompatible with '-fcas-include-tree'
invalid Xarch argument: '%0', options requiring arguments are unsupported
invalid -Xopenmp-target argument: '%0', options requiring arguments are unsupported
invalid arch name '%0'
invalid argument '%0' to -%1
invalid CoreFoundation Runtime ABI '%0'; must be one of 'objc', 'standalone', 'swift', 'swift-5.0', 'swift-4.2', 'swift-4.1'
invalid Darwin version number: %0
invalid argument in '%0', only integer or 'auto' is supported
invalid argument in '%0', only integers are supported
invalid profile : %0
invalid validator version : %0
If validator major version is 0, minor version must also be 0.
invalid validator version : %0
Format of validator version is "<major>.<minor>" (ex:"1.4").
'%0' does not contain a GCC installation
invalid output type '%0' for use with gcc tool
invalid integral value '%1' in '%0'
invalid linker name in argument '%0'
invalid argument '%0' to -malign-branch=; each element must be one of: %1
invalid float ABI '%0'
invalid thread pointer reading mode '%0'
OBJECT_MODE setting %0 is not recognized and is not a valid setting
OpenMP target is invalid: '%0'
invalid or unsupported offload target: '%0'
invalid OS value '%0' in '%1'
cannot use '%0' output with multiple -arch options
invalid validator version : %0
Validator version must be less than or equal to current internal version.
invalid option '%0' not of the form <from-file>;<to-file>
invalid arch name '%0', %1
cpu '%0' does not support rv%select{32|64}1
invalid runtime library name in argument '%0'
invalid library name in argument '%0'
'-msve-vector-bits' is not supported without SVE enabled
invalid thread model '%0' in '%1' for this target
invalid unwind library name in argument '%0'
invalid value '%1' in '%0'
invalid value '%1' in '%0', expected one of: %2
invalid version number in '%0'
invalid argument '%0' to -mfpu=; must be one of: 64, 32, none, 0 (alias for none)
LTO requires -fuse-ld=lld
malformed sanitizer coverage allowlist: '%0'
malformed sanitizer coverage ignorelist: '%0'
malformed sanitizer ignorelist: '%0'
malformed sanitizer metadata ignorelist: '%0'
option '-MG' requires '-M' or '-MM'
'-fminimize-whitespace' invalid for input of type %0
missing argument to '%0'
argument to '%0' is missing (expected %1 value%s1)
missing sanitizer ignorelist: '%0'
Must provide a symbol graph output directory using --symbol-graph-dir=<directory>
mixed CUDA and HIP compilation is not supported
header file '%0' input type '%1' does not match type of prior input in module compilation; use '-x %2' to override
option '-fmodule-output' can't be used with multiple arch options
option '-fmodules-validate-once-per-build-session' requires '-fbuild-session-timestamp=<seconds since Epoch>' or '-fbuild-session-file=<file>'
%0 requires HVX, use -mhvx/-mhvx= to enable it
%0 is not supported on HVX %1
invalid value '%1' in '%0', value must be 'none' or a positive integer
'%0': unable to use AST files with this tool
cannot find CUDA installation; provide its path via '--cuda-path', or pass '-nocudainc' to build without CUDA includes
cannot find libdevice for %0; provide path to different CUDA installation via '--cuda-path', or pass '-nocudalib' to build without linking with libdevice
cannot find HIP runtime; provide its path via '--rocm-path', or pass '-nogpuinc' to build without HIP runtime
cannot find HIP device library%select{| for %1}0; provide its path via '--hip-path' or '--hip-device-lib-path', or pass '-nogpulib' to build without HIP device library
no input files
'%0': unable to pass LLVM bit-code files to linker
'%0': unable to use module files with this tool
[no]neon is not accepted as modifier, please use [no]simd instead
cannot find ROCm device library%select{| for %1|for ABI version %1}0; provide its path via '--rocm-path' or '--rocm-device-lib-path', or pass '-nogpulib' to build without ROCm device library
no such file or directory: '%0'
no such file or directory: '%0'; did you mean '%1'?
unsupported %0 gpu architecture: %1
provided host compiler IR file '%0' is required to generate code for OpenMP target regions but cannot be found
target '%0' is not a supported OpenMP host target
bitcode library '%0' does not exist
NVPTX target requires CUDA 9.2 or above; CUDA %0 detected
no library '%0' found in the default clang lib directory or in LIBRARY_PATH; use '--libomptarget-%1-bc-path' to specify %1 bitcode library
only one offload target is supported
unknown remark serializer format: '%0'
in pattern '%1': %0
cannot use '%0' without using '%1'
cannot specify '%0%1' when compiling multiple source files
cannot specify -o when generating multiple output files
incorrect format for -preamble-bytes=N,END
environment variable CC_PRINT_HEADERS_%select{FORMAT|FILTERING}0 has invalid value %1
unsupported combination: CC_PRINT_HEADERS_FORMAT=%0 and CC_PRINT_HEADERS_FILTERING=%1
unsupported combination: -header-include-format=%0 and -header-include-filtering=%1
target '%0' does not support native pointer authentication
%0 is unsupported with RISC-V linker relaxation (-mrelax)
ROPI is not compatible with c++
embedded and GOT-based position independence are incompatible
invalid value '%1' in '%0', value must be '%2' or greater
'%0' is used without '-mstack-protector-guard-offset', and there is no default
unsupported '%0' value '%1'; use 'ios-macabi' instead
'-ftrivial-auto-var-init-stop-after=*' only accepts positive integers
'-ftrivial-auto-var-init-stop-after=*' is used without '-ftrivial-auto-var-init=zero' or '-ftrivial-auto-var-init=pattern'
unable to remove file: %0
unable to set working directory: %0
cannot determine %0 architecture: %1; consider passing it via '%2'
Unexpected output symbol graph '%1'; please provide --symbol-graph-dir=<directory> instead
unknown argument: '%0'
unknown argument '%0'; did you mean '%1'?
unknown '-mindirect-jump=' option '%0'
language not recognized: '%0'
unknown or ill-formed Objective-C runtime '%0'
-E or -x required when input is from standard input
use /Tc or /Tp to set input type for standard input
unknown target triple '%0'
%0 is not supported with -fembed-bitcode
the second argument of '-fpatchable-function-entry' must be smaller than the first argument
'-mindirect-jump=%0' is unsupported with the '%1' architecture
position-independent code requires '-mabicalls'
unsupported option '%0'
unsupported option '%0' for language mode '%1'
unsupported option '%0' for target '%1'
unsupported option '%0'; did you mean '%1'?
unsupported argument '%1' to option '%0'
unsupported runtime library '%0' for platform '%1'
static %0 runtime is not supported on darwin
invalid C++ ABI name '%0'
32-bit targets are not supported when building for Mac Catalyst
standard C++ modules require the -fmodules-local-submodule-visibility -cc1 option
there is no external assembler that can be used on this platform
-fobjc-weak is not supported on the current deployment target
-fobjc-weak is not supported in Objective-C garbage collection
-mxcoff-roptr is not supported with -shared
-mxcoff-roptr is supported only with -fdata-sections
-mharden-sls is only supported on armv7-a or later
'-fsanitize=memtag-stack' requires hardware support (+memtag). For Armv8 or Armv9, try compiling with -march=armv8a+memtag or -march=armv9a+memtag
the target architecture '%0' is not supported by the target '%1'
-ftest-module-file-extension argument '%0' is not of the required form 'blockname:major:minor:hashed:user info'
C++ ABI '%0' is not supported on target triple '%1'
generated arguments #%0 in round-trip: %1
original arguments in round-trip: %0
AddressSanitizer doesn't support linking with debug runtime libraries yet
available multilibs are:%0
diagnostic msg: %0
was searched for in the directory: %0
the last '/TC' or '/TP' option takes precedence over earlier instances
use '%0'%select{| or '%3'|, '%3', or '%4'|, '%3', '%4', or '%5'}2 for '%1' standard
-verify prefixes must start with a letter and contain only alphanumeric characters, hyphens, and underscores
use '--' to treat subsequent arguments as filenames
generated arguments #%0 in round-trip: %1
-O4 is equivalent to -O3
analyzer option '%0' is deprecated. This flag will be removed in %1, and passing this option will be an error.
analyzer option '%0' is deprecated. This flag will be removed in %1, and passing this option will be an error. Use '%2' instead.
ignoring -fapple-kext which is valid for C++ and Objective-C++ only
cannot compress debug sections (%0 not enabled)
unknown platform, assuming -mfloat-abi=%0
support for linking stdlibs for microcontroller '%0' is not implemented
no avr-libc installation can be found on the system, cannot link standard libraries
support for passing the data section address to the linker for microcontroller '%0' is not implemented
no target microcontroller specified on command line, cannot link standard libraries, please pass -mmcu=<mcu name>
standard library not linked and so no interrupt vector table or compiler runtime routines will be linked
the clang compiler does not support '%0'
compiler_rt-static.a is being deprecated, please use -fapple-link-rtlib instead. Clang will substitute -lcompiler_rt-static with libclang_rt.a
SDK settings were ignored as 'SDKSettings.json' could not be parsed
argument '%0' is deprecated, use '%1' instead
libstdc++ is deprecated; move to libc++%select{ with a minimum deployment target of %1|}0
argument '%0' requires profile-guided optimization information
argument '%0' requires profile-guided optimization information
implicitly disabling vptr sanitizer because rtti wasn't enabled
debug information option '%0' is not supported; requires DWARF-%2 but target '%1' only provides DWARF-%3
dxv not found. Resulting DXIL will not be validated or signed for use in release environments.
joined argument expects additional value: '%0'
option '-ffine-grained-bitfield-accesses' cannot be enabled together with a sanitizer; flag ignored
-fjmc works only for ELF; option ignored
'-fuse-ld=' taking a path is deprecated; use '--ld-path=' instead
-fglobal-isel support for the '%0' architecture is incomplete
-fglobal-isel support is incomplete for this architecture at the current optimization level
%0: '%1' input unused%select{ when '%3' is present|}2
%0: '%1' input unused in cpp mode
ignoring invalid /arch: argument '%0'; for %select{64|32}1-bit expected one of %2
%0 requires debug info. Use %1 or debug options that enable debugger's stepping function; option ignored
include path for libstdc++ headers not found; pass '-stdlib=libc++' on the command line to use the libc++ standard library instead
ignoring '%0' as it conflicts with that implied by '%1' (%2)
no multilib found matching flags: %0
missing plugin argument for plugin %0 in %1
missing plugin name in %0
'%0' does not support '-%1'; flag ignored
'%0' does not support '-moutline'; flag ignored
the given MCU supports %0 hardware multiply, but '-mhwmult' is set to %1
no MCU device specified, but '-mhwmult' is set to 'auto', assuming no hardware multiply; use '-mmcu' to specify an MSP430 device, or '-mhwmult' to set the hardware multiply type explicitly
the given MCU does not support hardware multiply, but '-mhwmult' is set to %0
unable to find a Visual Studio installation; try running Clang from a developer command prompt
multiple %0 architectures are detected: %1; only the first one is used for '%2'
%0 requires HVX, use -mhvx/-mhvx= to enable it
CUDA version%0 is newer than the latest%select{| partially}1 supported version %2
'%0': selected processor lacks floating point registers
the object size sanitizer has no effect at -O0, but is explicitly enabled: %0
OpenMP offloading target '%0' is similar to target '%1' already specified; will be ignored
optimization level '%0' is not supported; using '%1%2' instead
overriding '%0' option with '%1'
CUDA version %0 is only partially supported
precompiled header '%0' was ignored because '%1' is not first '-include'
joined argument treated as '%0'; did you mean '%1'?
%0: previously preprocessed input%select{ unused when '%2' is present|}1
option '%0' was ignored by the %1 toolchain, using '-fPIC'
diagnostic formatting in SARIF mode is currently unstable
treating '%0' input as '%1' when in C++ mode, this behavior is deprecated
unable to find %0 directory, expected to be in '%1' found via %2
unknown argument ignored in clang-cl: '%0'
unknown argument ignored in clang-cl '%0'; did you mean '%1'?
debug information option '%0' is not supported for target '%1'
The warning option '-%0' is not supported
float ABI '%0' is not supported by current library
ignoring '-mgpopt' option as it cannot be used with %select{|the implicit usage of }0-mabicalls
ignoring '-mlong-calls' option as it is not currently supported with %select{|the implicit usage of }0-mabicalls
optimization flag '%0' is not supported for target '%1'
the argument '%0' is not supported for option '%1'. Mapping to '%1%2'
ignoring '%0' option for offload arch '%1' as it is not currently supported there. Use it with an offload arch containing '%2' instead
ignoring '%0' option as it is not currently supported for processor '%1'
ignoring '%0' option as it is not currently supported for target '%1'
ignoring '%0' option as it cannot be used with %select{implicit usage of|}1 -mabicalls and the N64 ABI
ignoring '-msmall-data-limit=' with -mcmodel=large for -fpic or RV64
argument unused during compilation: '%0'
'-x %0' after last input file has no effect
support for '/Yc' with more than one source file not implemented yet; flag ignored
support for '/Yc' and '/Yu' with different filenames not implemented yet; flags ignored
the flag '%0' has been deprecated and will be ignored
optimization flag '%0' is not supported
ignoring -fdiscard-value-names for LLVM Bitcode
ignoring invalid -ftabstop value '%0', using default value %1
ignoring -fverify-debuginfo-preserve-export=%0 because -fverify-debuginfo-preserve wasn't enabled
using sysroot for '%0' but targeting '%1'
invalid iOS deployment version '%0', iOS 10 is the maximum deployment target for 32-bit targets
no such sysroot directory: '%0'
'/U%0' treated as the '/U' option
/arm64EC has been overridden by specified target: %0; option ignored
ignoring '-mabs=2008' option because the '%0' architecture does not support it
ignoring '-mabs=legacy' option because the '%0' architecture does not support it
ignoring '-mcompact-branches=' option because the '%0' architecture does not support it
ignoring extension '%0' because the '%1' architecture does not support it
ignoring '-mnan=2008' option because the '%0' architecture does not support it
ignoring '-mnan=legacy' option because the '%0' architecture does not support it
invalid branch protection option '%0' in '%1'
%select{alias|ifunc}0 must point to a defined %select{variable or |}1function
AVX vector %select{return|argument}0 of type %1 without '%2' enabled changes the ABI
%0 needs target feature %1
%select{alias|ifunc}0 definition is part of a cycle
definition with same mangled name '%0' as another definition
file '%0' specified by '--extract-api-ignores=' not found
action %0 not compiled in
call to '%0' declared with 'error' attribute: %1
%0 (%1) exceeds limit (%2) in '%3'
-dependency-file requires at least one -MT or -MQ option
error in backend: %0
error opening '%0': %1
error reading '%0': %1
error reading stdin: %0
error writing '%0': %1
expected a clang compiler command
unable to handle compilation, expected exactly one compiler job in '%0'
'%0' is incompatible with remote caching backend
invalid value '%1' in '%0'; alignment must be a power of 2
cannot locate code-completion file %0
invalid exception model '%select{none|sjlj|seh|dwarf|wasm}0' for target '%1'
unable to find plugin '%0'
environment variable 'SOURCE_DATE_EPOCH' ('%0') must be a non-negative decimal integer <= %1
cannot link module '%0': %1
no suitable precompiled header file found in directory '%0'
could not remap from missing file '%0'
could not remap file '%0' to the contents of file '%1'
unable to create target: '%0'
unable to interface with target machine
unable to load basic block sections function list: '%0'
unable to load the CAS include-tree '%0': '%1'
unable to load PCH file
unable to load plugin '%0': '%1'
unable to open output file '%0': '%1'
initializing value is out of valid range
always_inline function %1 requires target feature '%2', but would be inlined into function %0 that is compiled without support for '%2'
hidden visibility cannot be applied to 'dllexport' declaration
ifunc resolver function must return a pointer
option 'ffp-eval-method' cannot be used with option %select{'fapprox-func'|'mreassociate'|'freciprocal'}0
inline asm is used in the module with -fno-gnu-inline-asm
invalid virtual filesystem overlay file '%0'
invalid stat cache file '%0'
no module named '%0' declared in module map file '%1'
no module named '%0' declared in include-tree module map '%1'
no module name provided; specify one with -fmodule-name=
virtual filesystem overlay file '%0' not found
stat cache file '%0' not found
module compilation requires '-fmodules'
cannot create includes file for module %0: %1
module header file '%0' not found
module interface compilation requires '-std=c++20'
module map file '%0' not found
file '%0' specified by '-fmodules-embed-file=' not found
-fapinotes was provided without -fmodules-cache-path=<directory>
no submodule named %0 in module '%1'
no submodule named %0 in module '%1'; did you mean '%2'?
non-default visibility cannot be applied to 'dllimport' declaration
must specify system root with -isysroot when building a relocatable PCH file
test module file extension '%0' has different version (%1.%2) than expected (%3.%4)
unable to load a node from the CAS include-tree: '%0'
reference to marker '%0' is ambiguous
'%0' diagnostics %select{expected|seen}1 but not %select{seen|expected}1: %2
invalid expected %0: %1
%select{expected|'expected-no-diagnostics'}0 directive cannot follow %select{'expected-no-diagnostics' directive|other expected directives}0
invalid range following '-' in expected %0
cannot find end ('}}') of expected %0
file '%0' could not be located in expected %1
missing or invalid line number following '@' in expected %0
cannot find start of regex ('{{') in %0
cannot find start ('{{') of expected %0
no expected directives found: consider use of 'expected-no-diagnostics'
use of undefined marker '%0'
qualifier 'const' is needed for variables in address space '%0'
firebloom is supported only for C language
function by that name is mangled as "%0"
the %select{function or variable|function}0 specified in an %select{alias|ifunc}1 must refer to its mangled name
could not determine the original source location for %0:%1:%2
%0 (%1) exceeds limit (%2) in '%3'
instantiated into assembly here
linking module '%0': %1
FIX-IT applied suggested code changes
FIX-IT unable to apply suggested code changes
FIX-IT unable to apply suggested code changes in a macro
FIX-IT detected an error it cannot fix
current API version is '%0', but plugin was compiled with version '%1'
macro was %select{defined|#undef'd}0 here
module imported here
module defined here
ambiguous marker '%0' is defined here
%0; allow reordering by specifying '#pragma clang loop vectorize(enable)' before the loop. If the arrays will always be independent specify '#pragma clang loop vectorize(assume_safety)' before the loop or provide the '__restrict__' qualifier with the independent array arguments. Erroneous results will occur if these options are incorrectly applied!
%0; allow reordering by specifying '#pragma clang loop vectorize(enable)' before the loop or by providing the compiler option '-ffast-math'.
producing index data for module file '%0'
building module '%0' as '%1'
finished building module '%0'
locking '%0' to build module '%1'
%select{alias|ifunc}2 will always resolve to %0 even if weak definition of %1 is overridden
%select{alias|ifunc}1 will not be in section '%0' but in the same section as the %select{aliasee|resolver}2
misaligned atomic operation may incur significant performance penalty; the expected alignment (%0 bytes) exceeds the actual alignment (%1 bytes)
large atomic operation may incur significant performance penalty; the access size (%0 bytes) exceeds the max lock-free size (%1  bytes)
AVX vector %select{return|argument}0 of type %1 without '%2' enabled changes the ABI
-fbounds-attributes-cxx-experimental without -fbounds-attributes is ignored
-fbounds-attributes-objc-experimental without -fbounds-attributes is ignored
-fbounds-safety-adoption-mode without -fbounds-safety is ignored
-fno-bounds-safety-relaxed-system-headers without -fbounds-safety is ignored
feature flag '%0' must start with either '+' to enable the feature or '-' to disable it; flag ignored
feature flag '%0' is ignored since the feature is read only
%0 (%1) exceeds limit (%2) in '%3'
overriding currently unsupported use of floating point exceptions on this target
overriding currently unsupported rounding mode on this target
call to '%0' declared with 'warning' attribute: %1
unable to open CC_LOG_DIAGNOSTICS file: %0 (using stderr)
unable to open CC_PRINT_HEADERS file: %0 (using stderr)
stack frame size (%0) exceeds limit (%1) in '%2'
linking module '%0': %1
macro '%0' contains embedded newline; text after the newline is ignored
overriding the module target triple with %0
unable to open file %0 for serializing diagnostics (%1)
Received warning after diagnostic serialization teardown was underway: %0
unable to merge a subprocess's serialized diagnostics
unable to open statistics output file '%0': '%1'
FIX-IT detected errors it could not fix; no output will be generated
checker plugin '%0' is not compatible with this version of the analyzer
missing submodule '%0'
Missing symbol graph output directory, defaulting to working directory
%select{definition|#undef}0 of configuration macro '%1' has no effect on the import of '%2'; pass '%select{-D%1=...|-U%1}0' on the command line to configure the module
module file %0 cannot be loaded due to a configuration mismatch with the current compilation
no submodule named %0 in module '%1'; using top level '%2'
%0 does not support the option '%1'
Potential performance regression from use of __builtin_expect(): Annotation was correct on %0 of profiled executions.
profile data may be incomplete: of %0 function%s0, %1 %plural{1:has|:have}1 no data
profile data may be out of date: of %0 function%s0, %1 %plural{1:has|:have}1 mismatched data that will be ignored
no profile data available for file "%0"
__sync builtin operation MUST have natural alignment (consider using __atomic).
unknown %select{warning|remark}0 option '%1'%select{|; did you mean '%3'?}2
unknown %0 warning specifier: '%1'
file '%1' is not a valid precompiled %select{PCH|module|AST}0 file
%select{PCH|module|AST}0 file '%1' not found%select{|: %3}2
%select{PCH|module|AST}0 file '%1' is out of date and needs to be rebuilt%select{|: %3}2
file '%0' has been modified since the %select{precompiled header|module file|AST file}1 '%2' was built: %select{size|mtime|content}3 changed%select{| (was %5, now %6)}4
input is not a PCH file: '%0'
file '%0' from the precompiled header has been overridden
malformed or corrupted AST file: '%0'
malformed block record in PCH file: '%0'
unable to read PCH file %0: '%1'
module '%0' %select{in|imported by}4 AST file '%1' found in a different module map file (%2) than when the importing AST file was built (%3)
module '%0' in AST file '%1' %select{(imported by AST file '%2') |}4is not defined in any loaded module map file; maybe you need to load '%3'?
module '%0' was built in directory '%1' but now resides in directory '%2'
module '%0' %select{uses|does not use}1 additional module map '%2'%select{| not}1 used when the module was built
module '%0' is defined in both '%1' and '%2'
module file '%0' is missing its top-level submodule
AST file '%0' was not built as a module
cannot emit module %0: %select{size|mtime}1 must be explicitly specified for missing header file "%2"
instantiation of %q0 is different in different modules
%q0 from module '%1' is not present in definition of %q2%select{ in module '%4'| provided earlier}3
failed to hash content for '%0' because memory buffer cannot be retrieved
%0 is currently enabled, but was not in the PCH file
PCH file built from a different branch (%0) than the compiler (%1)
%0 was %select{disabled|enabled}1 in PCH file but is currently %select{disabled|enabled}2
%0 differs in PCH file vs. current file
definition of macro '%0' differs between the precompiled header ('%1') and the command line ('%2')
macro '%0' was %select{defined|undef'd}1 in the precompiled header but %select{undef'd|defined}1 on the command line
PCH was compiled with module cache path '%0', but the path is currently '%1'
%select{command line contains|precompiled header was built with}0 '-detailed-preprocessing-record' but %select{precompiled header was not built with it|it is not present on the command line}0
%select{AST file was|current translation unit is}0 compiled with the target feature '%1' but the %select{current translation unit is|AST file was}0 not
PCH file was compiled for the %0 '%1' but the current translation unit is being compiled for target '%2'
%select{command line contains|precompiled header was built with}0 '-undef' but %select{precompiled header was not built with it|it is not present on the command line}0
PCH file uses a newer PCH format that cannot be read
PCH file uses an older PCH format that is no longer supported
PCH file contains compiler errors
consider adding '%0' to the header search path
after modifying system headers, please delete the module cache at '%0'
this is generally caused by modules with the same name found in multiple paths
imported by %select{|module '%2' in }1'%0'
definition has no member %0
declaration of %0 does not match
please rebuild precompiled header '%0'
'%0' required by '%1'
%select{PCH|current translation unit}0 has no VFS overlays
%select{PCH|current translation unit}0 has the following VFS overlays:
importing module '%0'%select{| into '%3'}2 from '%1'
duplicate module file extension block name '%0'
the form '-fmodule-file=<BMI-path>' is deprecated for standard C++ named modules;consider to use '-fmodule-file=<module-name>=<BMI-path>' instead
module file '%0' was validated as a system module and is now being imported as a non-system module; any difference in diagnostic options will be ignored
%select{precompiled header|module}0 uses __DATE__ or __TIME__
PCH was compiled with different VFS overlay files than are currently in use
it is deprecated to read module '%0' implicitly; it is going to be removed in clang 18; consider to specify the dependencies explicitly
backslash and newline separated by space
_Pragma takes a parenthesized string literal
illegal character encoding in character literal
illegal character encoding in string literal
unexpected character <U+%0>
character <U+%0> not allowed %select{in|at the start of}1 an identifier
character too large for enclosing character literal type
version control conflict marker in file
'defined' cannot be used as a macro name
delimited escape sequence cannot be empty
invalid digit '%0' in escape sequence
expected '{' after '\%0' escape sequence
could not find ';' after @import
unexpected extra tokens at end of @import declaration
digit separator cannot appear at %select{start|end}0 of digit sequence
embedding a #%0 directive within macro arguments is not supported
%select{hex|octal}0 escape sequence out of range
expected a module name in '__building_module' expression
exponent has no digits
builtin feature check macro requires a parenthesized identifier
header file %0 (aka '%1') cannot be imported because it is not known to be a header unit
semicolon terminating header import declaration cannot be produced by a macro
hexadecimal floating %select{constant|literal}0 requires %select{an exponent|a significand}1
\%0 used with no following hex digits
'__FLT_EVAL_METHOD__' cannot be expanded inside a scope containing '#pragma clang fp eval_method'
invalid character '%0' character in raw string delimiter; use PREFIX( )PREFIX to delimit raw string
invalid argument to convert to character
invalid digit '%0' in %select{decimal|octal|binary}1 constant
invalid suffix '%0' on %select{integer|floating|fixed-point}1 constant
'%0' is not a valid Unicode character name
source file is not valid UTF-8
failure when lexing a character literal
failure when lexing a numeric literal
failure when lexing a string literal
configuration macros are only allowed in top-level modules
conflicting re-export of module '%0' as '%1' or '%2'
header attribute '%0' specified multiple times
expected an attribute name
expected configuration macro name after ','
expected ',' after conflicting module name
expected a message describing the conflict with '%0'
only '*' can be exported from an inferred submodule
expected a feature name
expected a header name after '%0'
expected a header attribute name ('size' or 'mtime')
expected %select{module exclusion with 'exclude'|'export *'}0
expected '{' to start module '%0'
expected '{' to start inferred submodule
expected %select{library|framework}0 name as a string
expected umbrella, header, submodule, or module export
expected a module map file name
expected module declaration
expected module name
expected '}'
expected ']' to close attribute
inferred framework modules cannot be 'explicit'
'explicit' is not permitted on top-level modules
inferred submodule cannot be a framework submodule
inferred submodules require a module with an umbrella
redefinition of inferred submodule
expected integer literal as value for header attribute '%0'
expected excluded module name
no module named '%0' in '%1'
no module named '%0' visible from '%1'
no module named '%0' %select{found|in '%2'}1, parent module must be defined before the submodule
expected a module name or '*'
redefinition of module '%0'
qualified module name can only be used to define modules at the top level
only top-level modules can be re-exported as public
only submodules and framework modules may be inferred with wildcard syntax
umbrella for module '%0' already covers this directory
skipping stray token
use declarations are only allowed in top-level modules
%select{wide|Unicode}0 character literals may not contain multiple characters
Pascal string is too long
'##' cannot appear at end of macro expansion
'##' cannot appear at start of macro expansion
editor placeholder in source file
expected 'set(attr1 [attr2 ...])'
expected 'begin' or 'end'
expected 'begin' or 'end'
pasting formed '%0', an invalid preprocessing token
':' without preceding '?'
%0 must be used within a preprocessing directive
division by zero in preprocessor expression
already inside '#pragma clang arc_cf_code_audited'
already inside '#pragma clang assume_nonnull'
already inside '#pragma unsafe_buffer_usage'
duplicate macro parameter name %0
empty filename
encountered non-reproducible token, caching failed
#endif without #if
'#pragma clang arc_cf_code_audited' was not ended within this file
'#pragma clang assume_nonnull' was not ended within this file
error opening file '%0': %1
missing %1 after %0
expected comma in macro parameter list
expected end of line in preprocessor expression
expected identifier in macro parameter list
expected %select{identifier after '.' in |}0module name
expected ')' in preprocessor expression
expected value in expression
expected "FILENAME" or <FILENAME>
token is not a valid binary operator in a preprocessor subexpression
function-like macro %0 is not defined
invalid token at start of a preprocessor expression
'%0' file not found
'%0' file not found with <angled> %select{include|import}1; use "quotes" instead
'%0' file not found, did you mean '%1'?
cannot convert %0 token to an identifier
floating point literal in preprocessor expression
#import of type library is an unsupported Microsoft feature
cannot %select{#include files|import headers}0 inside '#pragma clang arc_cf_code_audited'
cannot %select{#include files|import headers}0 inside '#pragma clang assume_nonnull'
#include nested too deeply
main file cannot be included recursively when building a preamble
invalid preprocessing directive%select{|, did you mean '#%1'?}0
can only poison identifier tokens
invalid token in macro parameter list
%select{character|integer}0 literal with user-defined suffix cannot be used in preprocessor constant expression
%select{#line|GNU line marker}0 directive requires a simple digit sequence
invalid filename for #line directive
#line directive requires a positive integer argument
invalid filename for line marker directive
invalid flag line marker directive
invalid line marker flag '2': cannot pop empty include stack
line marker directive requires a positive integer argument
macro name must be an identifier
invalid #ident directive
missing '(' following __VA_OPT__
macro name missing
no module named '%0' declared in include-tree module map
missing ')' in macro parameter list
no module map available for module %0
submodule %0.%1 not declared in module map
no matching '#pragma clang module end' for this '#pragma clang module begin'
must specify '-fmodule-name=%0' to enter %select{|submodule of }1this module%select{ (current module is %3)|}2
no matching '#pragma clang module endbuild' for this '#pragma clang module build'
no matching '#pragma clang module begin' for this '#pragma clang module end'
nested parentheses not permitted in %0
C++ operator %0 (aka %1) used as a macro name
#pragma hdrstop not seen while attempting to use precompiled header
Expected 'begin' or 'end'
remainder by zero in preprocessor expression
'%select{#|#@}0' is not followed by a macro parameter
'%0' required for precompiled header not found
#include of '%0' not seen while attempting to %select{create|use}1 precompiled header
'#pragma unsafe_buffer_usage' was not ended
not currently inside '#pragma unsafe_buffer_usage'
not currently inside '#pragma clang arc_cf_code_audited'
not currently inside '#pragma clang assume_nonnull'
unterminated conditional directive
attempt to use a poisoned identifier
__VA_OPT__ cannot be nested within its own replacement tokens
no macro named %0
pragma %select{message|warning|error}0 requires parenthesized string
pragma %0 requires a parenthesized string
raw string delimiter longer than 16 characters; use PREFIX( )PREFIX to delimit raw string
differing user-defined suffixes ('%0' and '%1') in string literal concatenation
too few arguments provided to function-like macro invocation
too many arguments provided to function-like macro invocation
universal character name refers to a control character
character '%0' cannot be specified by a universal character name
incomplete universal character name
invalid universal character
module %0 does not depend on a module exporting '%1'
module %0 does not directly depend on a module exporting '%1', which is part of indirectly-used module %2
invalid escape sequence '%0' in an unevaluated string literal
an unevaluated string literal cannot have an encoding prefix
an unevaluated string literal cannot be a user-defined literal
unsupported non-standard concatenation of string literals
unterminated function-like macro invocation
missing terminating ')' character
unterminated /* comment
raw string missing terminating delimiter )%0"
'##' cannot appear at end of __VA_OPT__ argument
'##' cannot appear at start of __VA_OPT__ argument
escaped newline between */ characters at block comment end
binary integer literals are a GNU extension
binary integer literals are a C++14 extension
use of a '#%select{<BUG IF SEEN>|elifdef|elifndef}0' directive is a C2x extension
ISO C99 requires whitespace after the macro name
charizing operator #@ is a Microsoft extension
pasting two '/' tokens into a '//' comment is a Microsoft extension
treating Ctrl-Z as end-of-file is a Microsoft extension
use of a '#%select{<BUG IF SEEN>|elifdef|elifndef}0' directive is a C++23 extension
%select{delimited|named}0 escape sequences are a %select{Clang|C++23}1 extension
'$' in identifier
embedding a directive within macro arguments has undefined behavior
empty character constant
empty macro arguments are a C99 feature
hexadecimal floating constants are a C99 feature
hexadecimal floating literals are a C++17 feature
// comments are not allowed in this language
mathematical notation character <U+%0> in an identifier is a Clang extension
must specify at least one argument for '...' parameter of variadic macro
whitespace required after macro name
invalid suffix on literal; C++11 requires a space between literal and identifier
multi-line // comment
named variadic macros are a GNU extension
no newline at end of file
use of non-standard escape character '\%0'
expected 'ON' or 'OFF' or 'DEFAULT' in pragma
token pasting of ',' and __VA_ARGS__ is a GNU extension
pasting formed '%0', an invalid preprocessing token
__VA_ARGS__ can only appear in the expansion of a C99 variadic macro
__VA_OPT__ can only appear in the expansion of a variadic macro
comma operator in operand of #if
extra tokens at end of #%0 directive
this style of line directive is a GNU extension
#ident is a language extension
#import is a language extension
#include_next is a language extension
#include resolved using non-portable Microsoft search rules as: %0
C requires #line number to be less than %0, allowed as extension
#line directive with zero argument is a GNU extension
%0 macro redefined
variadic macros are a Clang extension in OpenCL
C++ operator %0 (aka %1) used as a macro name
redefining builtin macro
undefining builtin macro
#warning is a %select{C2x|C++23}0 extension
expected end of directive in pragma
invalid suffix on literal; C++11 requires a space between literal and identifier
string literal of length %0 exceeds maximum length %1 that %select{C90|ISO C99|C++}2 compilers are required to support
extension used
treating Unicode character as whitespace
unknown escape sequence '\%0'
missing terminating %select{'|'"'}0 character
variadic macros are a C99 feature
%0 is defined here; did you mean %1?
submodule of top-level module '%0' implicitly imported here
cannot use initializer list at the beginning of a macro argument
did you mean %0 ('%2' U+%1)?
characters names in Unicode escape sequences are sensitive to case and whitespaces
expansion of macro %0 requested here
macro %0 defined here
use 'framework module' to declare module '%0'
to match this '{'
to match this ']'
previously defined here
rename '%0' to ensure it can be found by name
expanding this definition of %0
other definition of %0
did not find header '%0' in framework '%1' (loaded from '%2')
macro marked '%select{deprecated|restrict_expansion|final}0' here
entering module '%0' due to this pragma
parentheses are required around macro argument containing braced initializer list
did you mean to use '\u'?
null character(s) preserved in %select{char|string}0 literal
null character ignored
disabled expansion of recursive macro
%select{#elif|#elifdef|#elifndef}0 after #else
%select{#elif|#elifdef|#elifndef}0 without #if
#else after #else
#else without #if
the #__include_macros directive is only for internal use by -imacros
#include_next in file found relative to primary source file or found by absolute path; will search from start of include path
#include_next in primary source file; will search from start of include path
invalid string literal, ignoring final '\'
macro is not used
non-portable path to file '%0'; specified path differs in case from file name on disk
non-portable path to file '%0'; specified path differs in case from file name on disk
current file is older than dependency %0
poisoning existing macro
#pragma once in main file
#pragma system_header ignored in main file
treating #%select{include|import|include_next|__include_macros}0 as an import of module '%1'
search path used: '%0'
trigraph converted to '%0' character
trigraph ends block comment
trigraph ignored
ignored trigraph would end block comment
illegal character encoding in character literal
illegal character encoding in string literal
digit separators are incompatible with C standards before C2x
universal character name referring to a control character is incompatible with C standards before C2x
specifying character '%0' with a universal character name is incompatible with C standards before C2x
use of a '#%select{<BUG IF SEEN>|elifdef|elifndef}0' directive is incompatible with C standards before C2x
#warning is incompatible with C standards before C2x
'%0' is a keyword in C2x
%select{using this character in an identifier|starting an identifier with this character}0 is incompatible with C99
unicode literals are incompatible with C99
'%0' is a keyword in C99
character constant too long for its type
binary integer literals are incompatible with C++ standards before C++14
digit separators are incompatible with C++ standards before C++14
identifier after literal will be treated as a reserved user-defined literal suffix in C++11
identifier after literal will be treated as a user-defined literal suffix in C++11
'%0' is a keyword in C++11
unicode literals are incompatible with C++ standards before C++17
passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20
'<=>' operator is incompatible with C++ standards before C++20
hexadecimal floating literals are incompatible with C++ standards before C++17
'<=>' is a single token in C++20; add a space to avoid a change in behavior
'%0' is a keyword in C++20
use of a '#%select{<BUG IF SEEN>|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23
#warning is incompatible with C++ standards before C++23
%select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23
empty macro arguments are incompatible with C++98
'<::' is treated as digraph '<:' (aka '[') followed by ':' in C++98
universal character name referring to a control character is incompatible with C++98
specifying character '%0' with a universal character name is incompatible with C++98
C++98 requires newline at end of file
#line number greater than 32767 is incompatible with C++98
raw string literals are incompatible with C++98
unicode literals are incompatible with C++98
variadic macros are incompatible with C++98
macro expansion producing 'defined' has undefined behavior
macro expansion producing 'defined' has undefined behavior
empty delimited universal character name; treating as '\' '%0' '{' '}'
incomplete delimited universal character name; treating as '\' '%0' '{' identifier
multi-character character constant
public framework header includes private framework header '%0'
__has_warning expected option name (e.g. "-Wundef")
%0 is used as a header guard here, followed by #define of a different macro
invalid UTF-8 in comment
whitespace recommended after macro name
skipping '%0' because module declaration of '%1' lacks the 'framework' qualifier
expected canonical name for private module '%0'
private submodule '%0' in private module map, expected top-level module
module '%0' already re-exported as '%1'
umbrella directory '%0' not found
unknown attribute '%0'
module '%0' conflicts with already-imported module '%1': %2
multi-character character constant
'/*' within block comment
no newline at end of file
include of non-modular header inside framework module '%0': '%1'
include of non-modular header inside module '%0': '%1'
ambiguous expansion of macro %0
%select{left|right}0 side of operator converted from negative value to unsigned: %1
expansion of date or time macro is not reproducible
encountered non-reproducible token, caching will be skipped
integer overflow in preprocessor expression
#pragma hdrstop filename not supported, /Fp can be used to specify precompiled header filename
invalid preprocessing directive%select{|, did you mean '#%1'?}0
%select{#line|GNU line marker}0 directive interprets number as decimal, not octal
definition of macro %0 does not match definition in precompiled header
keyword is hidden by macro definition
macro name is a reserved identifier
ignoring redefinition of Objective-C qualifier macro
%0 is not defined, evaluates to 0
%0 is not defined, evaluates to 0
missing debug command
unexpected debug command '%0'
unknown module '%0'
macro %0 has been marked as deprecated%select{|: %2}1
pragma diagnostic pop could not pop, no matching push
pragma diagnostic expected 'error', 'warning', 'ignored', 'fatal', 'push', or 'pop'
pragma diagnostic expected option name (e.g. "-Wundef")
unexpected token in pragma diagnostic
unknown warning group '%0', ignored
#pragma execution_character_set expected '%0'
#pragma execution_character_set invalid value '%0', only 'UTF-8' is supported
#pragma execution_character_set expected 'push' or 'pop'
macro %0 has been marked as final and should not be %select{undefined|redefined}1
unknown pragma ignored
pragma include_alias expected '%0'
pragma include_alias expected include filename
angle-bracketed include <%0> cannot be aliased to double-quoted include "%1"
double-quoted include "%0" cannot be aliased to angle-bracketed include <%1>
pragma pop_macro could not pop '%0', no matching push_macro
macro %0 has been marked as unsafe for use in headers%select{|: %2}1
#pragma warning expected '%0'
#pragma warning expected a warning number
#pragma warning(push, level) requires a level between 0 and 4
#pragma warning expected 'push', 'pop', 'default', 'disable', 'error', 'once', 'suppress', 1, 2, 3, or 4
double-quoted include "%0" in framework header, expected angle-bracketed instead
incomplete universal character name; treating as '\' followed by identifier
\%0 used with no following hex digits; treating as '\' followed by identifier
universal character name refers to a surrogate character
universal character names are only valid in C99 or C++; treating as '\' followed by identifier
universal character names are only valid in C99 or C++
umbrella header for module '%0' does not include header '%1'
encoding prefix '%0' on an unevaluated string literal has no effect%select{| and is incompatible with c++2c}1
use of private header from outside its module: '%0'
treating Unicode character <U+%0> as an identifier character rather than as '%1' symbol
identifier contains Unicode character <U+%0> that is invisible in some environments
interface types cannot specify '%select{private|protected}0' access
use of address-of-label extension outside of a function body
name defined in alias declaration must be an identifier
alias declaration cannot be a pack expansion
%select{partial specialization|explicit specialization|explicit instantiation}0 of alias templates is not permitted
anonymous bit-field cannot have a default member initializer
declaration of anonymous %0 must be a definition
ISO C++ only allows ':' in member enumeration declaration to introduce a fixed underlying type, not an anonymous bit-field
unknown cast annotation __bridge_retain; did you mean __bridge_retained?
argument required after attribute
duplicate asm qualifier '%0'
__asm used with no assembly instructions
cannot use %select{unicode|wide|an empty}0 string literal in 'asm'
expected 'volatile', 'inline', 'goto', or '('
@defs is not supported in Objective-C++
unexpected '@' in member specification
use of '@import' when modules are disabled
use of '@import' when C++ modules are disabled, consider using -fmodules and -fcxx-modules
attribute %0 does not support argument pack expansion
%0 attribute cannot be applied to a module import
%0 attribute cannot be applied to a module
parentheses must be omitted if %0 attribute's argument list is empty
misplaced attributes; expected attributes here
an attribute list cannot appear here
expected a platform name here
unrecognized platform name %0
expected 'introduced', 'deprecated', or 'obsoleted'
expected a platform name, e.g., 'macos'
version for '%0' already specified
'*' query has already been specified
must handle potential future platforms with '*'
redundant %0 availability change; only the last specified change will be used
%0 is not an availability stage; use 'introduced', 'deprecated', or 'obsoleted'
redeclaration of C++ built-in type 'bool'
bracket nesting level exceeded maximum of %0
brackets are not allowed here; to declare an array, place the brackets after the %select{identifier|name}0
'_Noreturn' keyword must precede function declarator
capture default must be first
template template parameter requires 'class'%select{| or 'typename'}0 after the parameter list
name defined in concept definition must be an identifier
ISO C++ does not permit the 'bool' keyword after 'concept'
missing return type for function %0; did you mean the constructor name %1?
missing ',' between base or member initializers
attribute %0 cannot have an argument list
attribute %0 cannot be used as an attribute pack
declaration does not declare a parameter
'%0' qualifier may not appear after the virtual specifier '%1'
unexpected end of default argument expression
'= %select{default|delete}0' is a function definition and must occur in a standalone declaration
default template argument for a template template parameter must be a class template
destructor name %0 does not refer to a template
expected a class name after '~' to name a destructor
'~' in destructor name should be after nested name specifier
duplicate 'virtual' in base specifier
class already marked '%0'
duplicate default generic association
class member already marked '%0'
cannot have both throw() and noexcept() clause on the same function
use of empty enum
a requires expression must contain at least one requirement
missing ',' between enumerators
unnamed enumeration must be a definition
unexpected end of exception specification
'#pragma omp end assumes' with no matching '#pragma omp begin assumes'
'#pragma omp end declare variant' with no matching '#pragma omp begin declare variant'
expected variable name or 'this' in lambda capture list
expected 'case' keyword before expression
expected catch
expected class name
'typename' is redundant; base classes are implicitly types
expected '::' after '__super'
expected ',' or '>' in template-parameter-list
expected ',' or ']' in lambda capture list
expected '#pragma omp end declare %select{target|variant}0'
expected '= constant-expression' or end of enumerator definition
expected '=' or another designator
expected expression
expected external declaration
expected a field designator, such as '.field = 4'
expected function body after function declarator
expected a foldable binary operator in fold expression
variable declaration in condition must have an initializer
variable declaration in condition cannot have a parenthesized initializer
expected body of lambda expression
expected '{' after base class list
expected '{' in compound literal
expected '<' after '%0'
expected '(' after '%0'
expected '(' for function-style cast or type construction
expected member name or ';' after declaration specifiers
expected member name or ';' after declaration specifiers; %0 is a keyword in Objective-C++
expected class member or base class name
expected method body
method type specifier must start with '-' or '+'
'@end' must appear in an Objective-C context
expected the name of a parameter pack
expected parentheses around type name in %0 expression
expected property name
expected ')' or ',' after '%0'
expected a qualified name after 'typename'
expected ')' after '%0'
expected selector for Objective-C method
expected HLSL Semantic identifier
expected ';' after attribute list
expected ';' after expression
expected ';' after method prototype
expected ';' after namespace name
expected ';' after '%0'
expected ';' after %0 statement
expected ';' at end of declaration list
expected ';' at end of declaration
expected ';' in 'for' statement specifier
expected ';' at end of requirement
expected an OpenMP 'directive' or 'sequence' attribute argument
expected 'this' following '*' in lambda capture list
expected statement
expected template
expected template parameter
expected %0; %1 is a keyword in Objective-C++
expected a type
expected an identifier or template-id after '::'
expected %select{identifier|unqualified-id}0
expected a version of the form 'major[.minor[.subminor]]'
expected 'while' in do/while loop
enumerations cannot be explicitly instantiated
explicit template instantiation cannot have a definition; if this definition is meant to be an explicit specialization, add '<>' after the 'template' keyword
explicit %select{specialization|instantiation}0 of %select{non-|undeclared }3template %1 %2
export declaration cannot be empty
duplicate %0 clause in an 'external_source_symbol' attribute
expected 'language', 'defined_in', 'generated_declaration', or 'USR'
extraneous closing brace ('}')
extraneous ')' after condition, expected a statement
extraneous '%0' before ';'
operators in fold expression must be the same
'co_await' modifier can only be applied to range-based for loop
for range declaration must declare a variable
range-based for loop requires type for loop variable
cannot define a type in a friend declaration
friend cannot be declared in an explicit instantiation; if this declaration is meant to be a friend declaration, remove the 'template' keyword
'friend' used outside of class
function definition does not declare parameters
function definition declared 'typedef'
function definition is not allowed here
unexpected %0 in function call; perhaps remove the %0?
function scope depth exceeded maximum of %0
meaningless '%0' on asm outside function
'module;' introducing a global module fragment can appear only at the start of the translation unit
GNU-style inline assembly is disabled
wrong argument format for hlsl attribute, use %0 instead
expected template name after 'template' keyword in nested name specifier
%0 declared as a reference to a reference
cannot cast 'super' (it isn't an expression)
module%select{| partition}0 imports cannot be in the %select{global|private}1 module fragment
imports must immediately follow the module declaration
array bound cannot be deduced from a default member initializer
initializer list cannot be used on the %select{left|right}0 hand side of operator '%1'
namespace alias cannot be inline
nested namespace definition cannot be 'inline'
invalid declaration inside %select{tbuffer|cbuffer}0
cannot use %select{dot|arrow}0 operator on a type
'%0' qualifier may not be applied to a reference
invalid %0 at end of declaration; did you mean '='?
expected ';' after top level declarator
invalid parameter name: '%0' is a keyword
misplaced %0; expected %0 here
%0 cannot appear here
%0 cannot be applied to a module import
%0 cannot be applied to a module
C++11 only allows consecutive left square brackets when introducing an attribute
'[]' after delete interpreted as 'delete[]'; add parentheses to treat this as a lambda-expression
ellipsis in pack %select{|init-}0capture must appear %select{after|before}0 the name of the capture
multiple ellipses in pack capture
%select{'mutable'|'static'|'constexpr'|'consteval'}0 cannot appear multiple times in a lambda declarator
lambda template parameter list cannot be empty
string literal after 'operator' must be '""'
string literal after 'operator' cannot have an encoding prefix
'...' must %select{immediately precede declared identifier|be innermost component of anonymous pack declaration}0
expected %0 at end of module
@try statement without a @catch and @finally clause
C requires a comma prior to the ellipsis in a variadic function type
use 'template' keyword to treat '%0' as a dependent template name
missing '}' at end of definition of %q0
expected parameter declarator
found '<::' after a %select{template name|addrspace_cast|const_cast|dynamic_cast|reinterpret_cast|static_cast}0 which forms the digraph '<:' (aka '[') and a ':', did you mean '< ::'?
missing ':' after %0 modifier
expected a module name after '%select{module|import}0'
expected ';' after module name
%select{global|private}0 module fragment cannot be exported
'__declspec' attributes are not enabled; use '-fdeclspec' or '-fms-extensions' to enable support for __declspec attributes
__declspec attributes must be an identifier or string literal
property declaration specifies '%0' accessor twice
expected name of accessor method
expected ',' or ')' at end of property accessor list
expected '=' after '%0'
putter for property must be specified as 'put', not 'set'
property declaration cannot have a default member initializer
missing 'get=' or 'put='
property does not specify a getter or a putter
expected 'get' or 'put' in property declaration
MS-style inline assembly is not available: %0
unsupported architecture '%0' for MS-style inline assembly
%select{|a template declaration|an explicit template specialization|an explicit template instantiation}0 can only %select{|declare|declare|instantiate}0 a single entity
namespaces can only be defined in global or namespace scope
parameter named %0 is missing
@%0 must be followed by a number to form an NSNumber object
unexpected token after Objective-C string
directive may only be specified in protocols only
expected '=' for Objective-C getter
expected '=' for Objective-C setter
unknown property attribute %0
expected selector for Objective-C %select{setter|getter}0
expected type parameter name
illegal interface qualifier
illegal visibility specification
missing '@end'
@implementation cannot have type parameters
postfix attributes are not allowed on Objective-C directives
postfix attributes are not allowed on Objective-C directives, place them in front of '%select{@interface|@protocol}0'
property name cannot be a bit-field
property requires fields to be named
protocol qualifiers must precede type arguments
'@end' appears where closing brace '}' is expected
prefix attribute must be followed by an interface, protocol, or implementation
expected an Objective-C directive after '@'
expected a related ObjectiveC class name, e.g., 'NSColor'
expected a class method selector with single argument, e.g., 'colorWithCGColor:'
unexpected '(', only 'to', 'link' or 'device_type' clauses expected for 'begin declare target' directive
function declaration is expected after 'declare %select{simd|variant}0' directive
unexpected '%0' clause, '%1' is specified already
only 'device_type(any)' clause is allowed with indirect clause
expected at least one %select{'enter' or 'link'|'enter', 'link' or 'indirect'}0 clause
expected at least one %select{'to' or 'link'|'to', 'link' or 'indirect'}0 clause
%0 appears multiple times in clauses on the same declare target directive
unexpected '%0' clause, only %select{'device_type'|'to' or 'link'|'to', 'link' or 'device_type'|'device_type', 'indirect'|'to', 'link', 'device_type' or 'indirect'}1 clauses expected
unexpected '%0' clause, only %select{'device_type'|'enter' or 'link'|'enter', 'link' or 'device_type'|'device_type', 'indirect'|'enter', 'link', 'device_type' or 'indirect'}1 clauses expected
unexpected 'enter' clause, use 'to' instead
unexpected 'to' clause, use 'enter' instead
unexpected clause after an implicit 'enter' clause
unexpected clause after an implicit 'to' clause
nested OpenMP context selector contains duplicated trait '%0' in selector '%1' and set '%2' with different score
nested user conditions in OpenMP context selector not supported (yet)
expected %select{'match'|'match', 'adjust_args', or 'append_args'}0 clause on 'omp declare variant' directive
expected at least one clause on '#pragma omp %0' directive
expected '%0' clause with an argument on '#pragma omp %1' construct
missing ':' in %0
expected valid context selector in %0
expected '=' in iterator specifier
expected identifier specifying the name of the 'omp critical' directive
expected interop type: 'target' and/or 'targetsync'
expected ',' or ')' in '%0' %select{clause|directive}1
expected ',' after interop modifier
expected ',' or ')' after iterator specifier
expected identifier or one of the following operators: '+', '-', '*', '&', '|', '^', '&&', or '||'
'#pragma omp %0' %select{|with '%2' clause }1cannot be an immediate substatement
data-sharing attribute '%0' in '%1' clause requires OpenMP version %2 or above
missing map type
missing map type modifier
expected declarator on 'omp declare mapper' directive
illegal OpenMP user-defined mapper identifier
reserved locator 'omp_all_memory' requires 'out' or 'inout' dependency types
 '%0 %select{sink:|source:}1' must be with '%select{omp_cur_iteration - 1|omp_cur_iteration}1'
unexpected operation specified in 'append_args' clause, expected 'interop'
unexpected OpenMP clause '%0' in directive '#pragma omp %1'
unexpected OpenMP directive %select{|'#pragma omp %1'}0
unexpected 'execution' modifier in non-executable context
expected an OpenMP directive
incorrect map type, expected one of 'to', 'from', 'tofrom', 'alloc', 'release', or 'delete'
incorrect map type modifier, expected one of: 'always', 'close', 'mapper'%select{|, 'present'|, 'present', 'iterator'}0%select{|, 'ompx_hold'}1
only a single match extension allowed per OpenMP context selector
^^ is a reserved operator in OpenCL
taking address of function is not allowed
virtual functions are not supported in C++ for OpenCL
out-of-line constructor for %0 cannot have template arguments
'%0' keyword not permitted with interface types
missing parentheses around the size of parameter pack %0
module partition imports must be within a module purview
expected 'auto' or 'decltype(auto)' after concept name
expression cannot be followed by a postfix %0 operator; add parentheses
duplicate attribute subject matcher '%0'
expected an attribute after '('
expected identifier that represents an attribute name
expected an attribute that is specified using the GNU, C++11 or '__declspec' syntax
expected '.' after pragma attribute namespace %0
expected 'push', 'pop', or '(' after '#pragma clang attribute'
expected an identifier that corresponds to an attribute subject rule
expected an identifier that corresponds to an attribute subject matcher sub-rule; '%0' matcher %select{does not support sub-rules|supports the following sub-rules: %2|}1
extra tokens after attribute in a '#pragma clang attribute push'
unexpected argument '%0' to '#pragma clang attribute'; expected 'push' or 'pop'
expected attribute subject set specifier 'apply_to'
namespace can only apply to 'push' or 'pop' directives
unknown attribute subject rule '%0'
%select{invalid use of|unknown}2 attribute subject matcher sub-rule '%0'; '%1' matcher %select{does not support sub-rules|supports the following sub-rules: %3}2
attribute %0 is not supported by '#pragma clang attribute'
force_cuda_host_device end pragma without matching force_cuda_host_device begin
expected '=' following '#pragma clang section %select{invalid|bss|data|rodata|text|relro}0'
pragma comment requires parenthesized identifier and optional string
unknown kind of pragma comment
pragma detect_mismatch is malformed; it requires two comma-separated string literals
expected one of [bss|data|rodata|text|relro] section kind in '#pragma %0'
expected an integer argument in '#pragma %0'
'#pragma %0' can only appear at file scope or at the start of a compound statement
pragma float_control is malformed; use 'float_control({push|pop})' or 'float_control({precise|except}, {on|off} [,push])'
unexpected argument '%0' to '#pragma clang fp %1'; expected %select{'fast' or 'on' or 'off'|'on' or 'off'|'ignore', 'maytrap' or 'strict'|'source', 'double' or 'extended'}2
%select{invalid|missing}0 option%select{ %1|}0; expected 'contract', 'reassociate' or 'exceptions'
invalid argument; expected 'enable'%select{|, 'full'}0%select{|, 'assume_safety'}1 or 'disable'
%select{invalid|missing}0 option%select{ %1|}0; expected vectorize, vectorize_width, interleave, interleave_count, unroll, unroll_count, pipeline, pipeline_initiation_interval, vectorize_predicate, or distribute
vectorize_width loop hint malformed; use vectorize_width(X, fixed) or vectorize_width(X, scalable) where X is an integer, or vectorize_width('fixed' or 'scalable')
missing argument; expected %select{an integer value|'enable'%select{|, 'full'}1%select{|, 'assume_safety'}2 or 'disable'}0
this pragma cannot appear in %0 declaration
missing argument to '#pragma %0'%select{|; expected %2}1
unexpected extra argument '%0' to '#pragma clang optimize'
unexpected argument '%0' to '#pragma clang optimize'; expected 'on' or 'off'
invalid argument; expected 'disable'
unexpected %0, expected to see one of %select{|'best_case', 'full_generality', }1'single_inheritance', 'multiple_inheritance', or 'virtual_inheritance'
expected ';' after private module fragment declaration
trailing requires clause should be placed outside parentheses
trailing return type must appear before trailing requires clause
trailing requires clause can only be used when declaring a function
expected concept name with optional arguments
requires expression in requirement body; did you intend to place it in a nested requirement? (add another 'requires' before the expression)
expected '->' before expression type requirement
varargs not allowed in requires expression
'noexcept' can only be used in a compound requirement (with '{' '}' around the expression)
a space is required between a right angle bracket and an equals sign (use '> =')
scoped enumeration requires a name
range-based 'for' statement uses ':', not '='
expected parenthesized parameter pack name in 'sizeof...' expression
static lambdas are a C++23 extension
a static lambda cannot have any captures
lambda cannot be both mutable and static
statement expression not allowed at file scope
'__super' cannot be used with a using declaration
expected a property name in @synthesize
%select{function|class|variable}0 cannot be defined in an explicit instantiation; if this declaration is meant to be a %select{function|class|variable}0 definition, remove the 'template' keyword
identifier followed by '<' indicates a class template specialization but %0 %select{does not refer to a template|refers to a function template|<unused>|refers to a variable template|<unused>|<unused>|refers to a concept}1
a static_assert declaration cannot be a template
cannot template a using %select{directive|declaration}0
'this' cannot be captured by reference
a space is required between consecutive right angle brackets (use '> >')
invalid comparison flag %0; use 'layout_compatible' or 'must_be_null'
type trait requires %0%select{| or more}1 argument%select{|s}2; have %3 argument%s3
unparsed tokens following type
typename is allowed for identifiers only
type name does not allow %select{<ERROR>|constexpr|consteval|constinit}0 specifier to be specified
type name does not allow function specifier to be specified
type name does not allow storage class to be specified
typename specifier refers to a non-type template
type name requires a specifier or qualifier
unexpected '@' in program
unexpected ':' in nested name specifier; did you mean '::'?
module declaration can only appear at the top level
attributes cannot be specified on namespace alias
attributes cannot be specified on a nested namespace definition
@implementation declaration cannot be protocol qualified
unexpected namespace scope prior to decltype
unexpected ';' before %0
'template' keyword not permitted after 'using' keyword
'template' keyword not permitted in destructor name
'template' keyword not permitted here
'%0' cannot be a part of nested name specifier; did you mean ':'?
unexpected type name %0: expected identifier
type-id cannot have a name
unknown HLSL semantic %0
unknown template name %0
parentheses are required around this expression in a requires clause
'static' may not be used without an array size
'static' may not be used with an unspecified variable length array size
module partitions are only supported for C++20 onwards
attribute with scope specifier cannot follow default scope specifier
using enum %select{requires an enum or typedef name|does not permit an elaborated enum specifier}0
'using namespace' is not allowed in classes
'%0' specifier is not allowed outside a class definition
while loop outside of a function
version number must have non-zero major, minor, or sub-minor version
ISO C++11 requires a parenthesized pack declaration to have a name
alias declarations are a C++11 extension
alias declaration in this context is a C++23 extension
%0 applied to an expression is a GNU extension
'auto' storage class specifier is not permitted in C++11, and will not be supported in future releases
'__auto_type' is a GNU extension
'_BitInt' in %select{C17 and earlier|C++}0 is a Clang extension
default member initializer for bit-field is a C++20 extension
'%0' is a C11 extension
compound literals are a C99-specific feature
'%0' is a C99 extension
variable declaration in for loop is a C99-specific feature
label at end of compound statement is a C2x extension
'nullptr' is a C2x extension
'_Static_assert' with no message is a C2x extension
enumeration types with a fixed underlying type are a Clang extension
consteval if is a C++23 extension
constexpr if is a C++17 extension
'constexpr' on lambda expressions is a C++17 extension
ISO C++ does not allow %select{an attribute list|%0}1 to appear here
enumeration types with a fixed underlying type are a C++11 extension
label at end of compound statement is a C++23 extension
'static_assert' with no message is a C++17 extension
%select{an attribute specifier sequence|%0}1 in this position is a C++23 extension
'decltype(auto)' type specifier is a C++14 extension
ISO C++17 does not allow a decomposition group to be empty
%select{defaulted|deleted}0 function definitions are a C++11 extension
ISO C++17 does not allow dynamic exception specifications
reference to enumeration must use 'enum' not 'enum %select{struct|class}0'
exception specification of '...' is a Microsoft extension
ISO C requires a translation unit to contain at least one declaration
non-defining declaration of enumeration with a fixed underlying type is only permitted as a standalone declaration%select{|; missing list of enumerators?}0
commas at the end of enumerator lists are a C99-specific feature
commas at the end of enumerator lists are a C++11 extension
expected ';' at end of declaration list
explicit(bool) is a C++20 extension
extern templates are a C++11 extension
extra ';' %select{outside of a function|inside a %1|inside instance variable list|after member function definition}0
extra ';' outside of a function is a C++11 extension
pack fold expression is a C++17 extension
range-based for loop is a C++11 extension
range-based for loop initialization statements are a C++20 extension
generalized initializer lists are a C++11 extension
passing a type argument as the first operand to '_Generic' is a Clang extension
use of GNU address-of-label extension
use of GNU array range extension
use of GNU case range extension
use of GNU ?: conditional expression extension, omitting middle operand
use of GNU indirect-goto extension
use of GNU 'missing =' extension in designator
use of GNU old-style field designator extension
use of GNU statement expression extension
use of GNU statement expression extension from macro expansion
access specifiers are a clang HLSL extension
type-less parameter names in function declaration
'%select{if|switch}0' initialization statements are a C++17 extension
inline namespaces are a C++11 feature
inline nested namespace definition is a C++20 extension
keyword '%0' will be made available as an identifier %select{here|for the remainder of the translation unit}1
lambda without a parameter clause is a C++23 extension
explicit template parameter list for lambdas is a C++20 extension
'abstract' keyword is a Microsoft extension
enumeration types with a fixed underlying type are a Microsoft extension
'sealed' keyword is a Microsoft extension
use of 'static_assert' without inclusion of <assert.h> is a Microsoft extension
use of multiple declarators in a single using declaration is a C++17 extension
nested namespace definition is a C++17 extension; define each namespace separately
default member initializer for non-static data member is a C++11 extension
attributes on %select{a namespace|an enumerator}0 declaration are a C++17 extension
type nullability specifier %0 is a Clang extension
specifying OpenMP directives with [[]] is an OpenMP 5.1 extension
'%0' keyword is a C++11 extension
reference qualifiers on functions are a C++11 extension
rvalue references are a C++11 extension
scoped enumerations are a C++11 extension
unknown pragma in STDC namespace
template template parameter using 'typename' is a C++17 extension
'__thread' before '%0'
default scope specifier for attributes is a C++17 extension
pack expansion of using declaration is a C++17 extension
using enum declaration is a C++20 extension
__final is a GNU extension, consider using C++11 final
use -fbracket-depth=N to increase maximum nesting level
%select{|second }0%1 token is here
use '%0' instead
comma separating Objective-C messaging arguments
or insert whitespace before ':' to use %0 as parameter name and have an empty entry in the selector
total token limit set here
did you mean to use 'typename'?
insert ',' before '...' to silence this warning
place '...' %select{immediately before declared identifier|here}0 to declare a function parameter pack
preceding '...' declares a function parameter pack
still within definition of %q0 here
introduce a parameter name to make %0 part of the selector
%select{class|protocol|category|class extension|implementation|category implementation}0 started here
the ignored tokens spans until here
the context property '%0' can be nested in the context selector '%1' which is nested in the context set '%2'; try 'match(%2={%1(%0)})'
the context selector '%0' can be nested in the context set '%1'; try 'match(%1={%0%select{|(property)}2})'
the ignored %select{set|selector|property}0 spans until here
'%0' is a context %select{set|selector|property}1 not a context %select{set|selector|property}2
context %select{set|selector|property}0 options are: %1
try 'match(%0={%1%2})'
the previous context %select{set|selector|property}0 '%1' used here
omit the namespace to add attributes to the most-recently pushed attribute group
use the GNU '__attribute__' syntax
vectorize_width loop hint malformed; use vectorize_width(X, fixed) or vectorize_width(X, scalable) where X is an integer, or vectorize_width('fixed' or 'scalable')
previous default generic association is here
previous statement is here
parentheses are required around this expression in a requires clause
'%0' casts have no effect when not using ARC
use of '@import' in framework header is discouraged, including this header requires -fmodules
attribute %0 ignored, because it is not attached to a declaration
GCC does not allow %0 attribute in this position on a function definition
'unavailable' availability overrides all other availability information
'%0' is incompatible with C standards before C2x
label at end of compound statement is incompatible with C standards before C2x
'_Static_assert' with no message is incompatible with C standards before C2x
expected string literal in 'clause %0' - ignoring
%select{%1 and |}0%2 tokens %select{introducing statement expression|terminating statement expression|introducing attribute|terminating attribute|forming pointer to member type}3 appear in different macro expansion contexts
%select{%1 and |}0%2 tokens %select{introducing statement expression|terminating statement expression|introducing attribute|terminating attribute|forming pointer to member type}3 are separated by whitespace
use of C-style parameters in Objective-C method declarations is deprecated
nvcc does not allow '__%0__' to appear after the parameter list in lambdas
'decltype(auto)' type specifier is incompatible with C++ standards before C++14
use of right-shift operator ('>>') in template argument will require parentheses in C++11
constexpr if is incompatible with C++ standards before C++17
constexpr on lambda expressions is incompatible with C++ standards before C++17
pack fold expression is incompatible with C++ standards before C++17
%select{if|switch}0 initialization statements are incompatible with C++ standards before C++17
nested namespace definition is incompatible with C++ standards before C++17
attributes on %select{a namespace|an enumerator}0 declaration are incompatible with C++ standards before C++17
'static_assert' with no message is incompatible with C++ standards before C++17
template template parameter using 'typename' is incompatible with C++ standards before C++17
default scope specifier for attributes is incompatible with C++ standards before C++17
default member initializer for bit-field is incompatible with C++ standards before C++20
explicit(bool) is incompatible with C++ standards before C++20
range-based for loop initialization statements are incompatible with C++ standards before C++20
inline nested namespace definition is incompatible with C++ standards before C++20
explicit template parameter list for lambdas is incompatible with C++ standards before C++20
use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17
pack expansion using declaration is incompatible with C++ standards before C++17
using enum declaration is incompatible with C++ standards before C++20
alias declaration in this context is incompatible with C++ standards before C++23
consteval if is incompatible with C++ standards before C++23
%select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23
this expression will be parsed as explicit(bool) in C++20
label at end of compound statement is incompatible with C++ standards before C++23
static lambdas are incompatible with C++ standards before C++23
alias declarations are incompatible with C++98
'alignas' is incompatible with C++98
alignof expressions are incompatible with C++98
[[]] attributes are incompatible with C++ standards before C++11
'decltype' type specifier is incompatible with C++98
%select{defaulted|deleted}0 function definitions are incompatible with C++98
enumeration types with a fixed underlying type are incompatible with C++98
commas at the end of enumerator lists are incompatible with C++98
extern templates are incompatible with C++98
range-based for loop is incompatible with C++98
generalized initializer lists are incompatible with C++98
inline namespaces are incompatible with C++98
lambda expressions are incompatible with C++98
literal operators are incompatible with C++98
noexcept specifications are incompatible with C++98
noexcept expressions are incompatible with C++98
default member initializer for non-static data members is incompatible with C++98
'nullptr' is incompatible with C++98
'%0' keyword is incompatible with C++98
reference qualifiers on functions are incompatible with C++98
rvalue references are incompatible with C++98
scoped enumerations are incompatible with C++98
'static_assert' declarations are incompatible with C++98
extra ';' outside of a function is incompatible with C++98
trailing return types are incompatible with C++98
consecutive right angle brackets are incompatible with C++98 (use '> >')
add explicit braces to avoid dangling else
'for co_await' belongs to CoroutineTS instead of C++20, which is deprecated
empty initialization statement of '%select{if|switch|range-based for}0' has no effect
dynamic exception specifications are deprecated
use same version number separators '_' or '.'; as in 'major[.minor[.subminor]]'
expected a qualified name after 'typename'
[[]] attributes are a C2x extension
[[]] attributes are a C++11 extension
'_ExtInt' is deprecated; use '_BitInt' instead
extra ';' after member function definition
GCC does not allow an attribute in this position on a function declaration
GCC does not allow variable declarations in for loop initializers before C99
the number of preprocessor source tokens (%0) exceeds this token limit (%1)
the total number of preprocessor source tokens (%0) exceeds the token limit (%1)
dependent %select{__if_not_exists|__if_exists}0 declarations are ignored
qualifiers after comma in declarator list are ignored
misleading indentation; statement is not part of the previous '%select{if|else|for|while}0'
'...' in this location creates a C-style varargs function%select{, not a function parameter pack|}0
use 'template' keyword to treat '%0' as a dependent template name
%0 used as the name of the previous parameter rather than as part of the selector
Setting the floating point evaluation method to `source` on a target without SSE is not supported.
empty expression statement has no effect; remove unnecessary ';' to silence this warning
protocol has no object type specified; defaults to qualified 'id'
specifying OpenMP directives with [[]] is incompatible with OpenMP standards before OpenMP 5.1
the context property '%0' is not valid for the context selector '%1' and the context set '%2'; property ignored
the context selector '%0' in the context set '%1' cannot have a score ('%2'); score ignored
the context selector '%0' is not valid for the context set '%1'; selector ignored
the context selector '%0' in context set '%1' requires a context property defined in parentheses; selector ignored
the context %select{set|selector|property}0 '%1' was used already in the same 'omp declare variant' directive; %select{set|selector|property}0 ignored
'%0' is not a valid context property for the context selector '%1' and the context set '%2'; property ignored
'%0' is not a valid context selector for the context set '%1'; selector ignored
'%0' is not a valid context set in a `declare variant`; set ignored
expected '%0' after the %1; '%0' assumed
expected identifier or string literal describing a context %select{set|selector|property}0; %select{set|selector|property}0 skipped
'depend' clause for 'ordered' is deprecated; use 'doacross' instead
extra tokens at the end of '#pragma omp %0' are ignored
more than one 'device_type' clause is specified
interop type '%0' cannot be specified more than once
reserved locator 'omp_all_memory' cannot be specified more than once
valid %0 clauses start with %1; %select{token|tokens}2 will be ignored
%0 clause should not be followed by arguments; tokens will be ignored
expected '=' following '#pragma %select{align|options align}0' - ignored
invalid alignment option in '#pragma %select{align|options align}0' - ignored
'#pragma comment %0' ignored
%select{value|type}0-dependent expression passed as an argument to debug command
expected action or ')' in '#pragma %0' - ignored
missing ':' after %0 - ignoring
missing ':' or ')' after %0 - ignoring
expected ',' in '#pragma %0'
expected identifier in '#pragma %0' - ignored
expected 'compiler', 'lib', 'user', or a string literal for the section name in '#pragma %0' - ignored
expected integer between %0 and %1 inclusive in '#pragma %2' - ignored
missing '(' after '#pragma %0' - ignoring
expected non-wide string literal in '#pragma %0'
expected %select{'enable', 'disable', 'begin' or 'end'|'disable'}0 - ignoring
expected ')' or ',' in '#pragma %0'
missing ')' after '#pragma %0' - ignoring
expected a stack label or a string literal for the section name in '#pragma %0' - ignored
expected a string literal for the section name in '#pragma %0' - ignored
expected push, pop or a string literal for the section name in '#pragma %0' - ignored
expected string literal in '#pragma %0' - ignoring
OpenCL extension %0 is core feature or supported optional core feature - ignoring
extra tokens at end of '#pragma %0' - ignored
incorrect use of #pragma clang force_cuda_host_device begin|end
'#pragma %0' is not supported on this target - ignored
'#pragma init_seg' is only supported when targeting a Microsoft environment
%0 is not a recognized builtin%select{|; consider including <intrin.h> to access non-builtin intrinsics}1
unknown action for '#pragma %0' - ignored
unexpected argument '%0' to '#pragma %1'%select{|; expected %3}2
unknown action '%1' for '#pragma %0' - ignored
missing argument to '#pragma %0'%select{|; expected %2}1
incorrect use of '#pragma fenv_access (on|off)' - ignored
incorrect use of '#pragma ms_struct on|off' - ignored
unexpected '#pragma omp ...' in program
expected 'align' following '#pragma options' - ignored
expected integer or identifier in '#pragma pack' - ignored
OpenCL extension %0 unknown or does not require pragma - ignoring
argument to '#pragma unroll' should not be in parentheses in CUDA C/C++
known but unsupported action '%1' for '#pragma %0' - ignored
unsupported OpenCL extension %0 - ignoring
expected '#pragma unused' argument to be a variable name
[[]] attributes are incompatible with C standards before C2x
semicolon before method body is ignored
ignoring '%select{static|inline}0' keyword on explicit template instantiation
pragma STDC FENV_ROUND is not supported
invalid or unsupported rounding mode in '#pragma STDC FENV_ROUND' - ignored
isa trait '%0' is not known to the current target; verify the spelling or consider restricting the context selector with the 'arch' selector further
'__clang__' is a predefined macro name, not an attribute scope specifier; did you mean '_Clang' instead?
empty symbolic operand name in inline assembly string
invalid %% escape in inline assembly string
invalid operand number in inline asm string
unknown symbolic operand name in inline assembly string
unterminated symbolic operand name in inline assembly string
the experimental clang interpreter failed to evaluate an expression
cannot get %select{lower,upper}0 bound because object size is unknown
%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{%4 base %plural{1:class|:classes}4|%4 virtual base %plural{1:class|:classes}4|%ordinal4 base class with type %5|%ordinal4 %select{non-virtual|virtual}5 base class %6|%ordinal4 base class %5 with %select{public|protected|private|no}6 access specifier}3
%q0 has different definitions in different modules; %select{definition in module '%2' is here|defined here}1
%q0 has different definitions in different modules; %select{definition in module '%2'|defined here}1 first difference is %select{enum that is %select{not scoped|scoped}4|enum scoped with keyword %select{struct|class}4|enum %select{without|with}4 specified type|enum with specified type %4|enum with %4 element%s4|%ordinal4 element has name %5|%ordinal4 element %5 %select{has|does not have}6 an initializer|%ordinal4 element %5 has an initializer|}3
%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{field %4|field %4 with type %5|%select{non-|}5bitfield %4|bitfield %4 with one width expression|%select{non-|}5mutable field %4|field %4 with %select{no|an}5 initializer|field %4 with an initializer}3
%q0 has different definitions in different modules; %select{definition in module '%2'|defined here}1 first difference is %select{return type is %4|%ordinal4 parameter with name %5|%ordinal4 parameter with type %5%select{| decayed from %7}6|%ordinal4 parameter with%select{out|}5 a default argument|%ordinal4 parameter with a default argument|function body}3
%0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{%select{method %5|constructor|destructor}4 that has %6 parameter%s6|%select{method %5|constructor|destructor}4 with %ordinal6 parameter of type %7%select{| decayed from %9}8|%select{method %5|constructor|destructor}4 with %ordinal6 parameter named %7}3
%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{end of class|public access specifier|private access specifier|protected access specifier|static assert|field|method|type alias|typedef|data member|friend declaration|function template|method|instance variable|property}3
%q0 %select{with definition in module '%2'|defined here}1 has different definitions in different modules; first difference is this %select{||||static assert|field|method|type alias|typedef|data member|friend declaration|function template|method|instance variable|property|unexpected decl}3
%0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{%select{no super class|super class with type %5}4|instance variable '%4' access control is %select{|@private|@protected|@public|@package}5}3
%0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{method %4 with return type %5|%select{class|instance}5 method %4|%select{no|'required'|'optional'}4 method control|method %4 with %select{no designated initializer|designated initializer}5|%select{regular|direct}5 method %4|method %4}3
%0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{property %4|property %4 with type %5|%select{no|'required'|'optional'}4 property control|property %4 with %select{default |}6'%select{none|readonly|getter|assign|readwrite|retain|copy|nonatomic|setter|atomic|weak|strong|unsafe_unretained|nullability|null_resettable|class|direct}5' attribute}3
%0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{static assert with condition|static assert with message|static assert with %select{|no }4message|%select{method %5|constructor|destructor}4|%select{method %5|constructor|destructor}4 is %select{not deleted|deleted}6|%select{method %5|constructor|destructor}4 is %select{not defaulted|defaulted}6|%select{method %5|constructor|destructor}4 is %select{|pure }6%select{not virtual|virtual}7|%select{method %5|constructor|destructor}4 is %select{not static|static}6|%select{method %5|constructor|destructor}4 is %select{not volatile|volatile}6|%select{method %5|constructor|destructor}4 is %select{not const|const}6|%select{method %5|constructor|destructor}4 is %select{not inline|inline}6|%select{method %5|constructor|destructor}4 with %ordinal6 parameter with%select{out|}7 a default argument|%select{method %5|constructor|destructor}4 with %ordinal6 parameter with a default argument|%select{method %5|constructor|destructor}4 with %select{no |}6template arguments|%select{method %5|constructor|destructor}4 with %6 template argument%s6|%select{method %5|constructor|destructor}4 with %6 for %ordinal7 template argument|%select{method %5|constructor|destructor}4 with %select{no body|body}6|%select{method %5|constructor|destructor}4 with body|friend %select{class|function}4|friend %4|friend function %4|function template %4 with %5 template parameter%s5|function template %4 with %ordinal5 template parameter being a %select{type|non-type|template}6 template parameter|function template %4 with %ordinal5 template parameter %select{with no name|named %7}6|function template %4 with %ordinal5 template parameter with %select{no |}6default argument|function template %4 with %ordinal5 template parameter with default argument %6|function template %4 with %ordinal5 template parameter with one type|function template %4 with %ordinal5 template parameter %select{not |}6being a template parameter pack|%select{no attribute|%5}4|}3
%0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{%4 referenced %plural{1:protocol|:protocols}4|%ordinal4 referenced protocol with name %5}3
%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{unnamed template parameter|template parameter %5|template parameter with %select{no |}4default argument|template parameter with default argument}3
%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{%select{typedef|type alias}4 name %5|%select{typedef|type alias}4 %5 with underlying type %6}3
%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{data member with name %4|data member %4 with type %5|data member %4 with%select{out|}5 an initializer|data member %4 with an initializer|data member %4 %select{is constexpr|is not constexpr}5}3
template parameter lists have a different number of parameters (%0 vs %1)
template parameter has different kinds in different translation units
field %0 declared with incompatible types in different translation units (%1 vs. %2)
external function %0 declared with incompatible types in different translation units (%1 vs. %2)
instance variable %0 declared with incompatible types in different translation units (%1 vs. %2)
non-type template parameter declared with incompatible types in different translation units (%0 vs. %1)
%select{class|instance}0 method %1 has a different number of parameters in different translation units (%2 vs. %3)
%select{class|instance}0 method %1 has a parameter with a different types in different translation units (%2 vs. %3)
%select{class|instance}0 method %1 has incompatible result types in different translation units (%2 vs. %3)
%select{class|instance}0 method %1 is variadic in one translation unit and not variadic in another
property %0 is implemented with %select{@synthesize|@dynamic}1 in one translation but %select{@dynamic|@synthesize}1 in another translation unit
property %0 declared with incompatible types in different translation units (%1 vs. %2)
class %0 has incompatible superclasses
property %0 is synthesized to different ivars in different translation units (%1 vs. %2)
parameter kind mismatch; parameter is %select{not a|a}0 parameter pack
type %0 has incompatible definitions in different translation units
external variable %0 defined in multiple translation units
external variable %0 declared with incompatible types in different translation units (%1 vs. %2)
cannot import unsupported AST node %0
ambiguous vftable component for %0 introduced via covariant thunks; this is an inherent limitation of the ABI
%select{pointer|reference}0 to a consteval declaration is not a constant expression
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of}0 heap allocated object that has been deleted
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of subobject of|destruction of}0 member %1 of union with %select{active member %3|no active member}2 is not allowed in a constant expression
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of}0 mutable member %1 is not allowed in a constant expression
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of}0 dereferenced null pointer is not allowed in a constant expression
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of}0 dereferenced one-past-the-end pointer is not allowed in a constant expression
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|reconstruction of|destruction of}0 temporary is not allowed in a constant expression outside the expression that created the temporary
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of subobject of|destruction of}0 %select{object outside its lifetime|uninitialized object}1 is not allowed in a constant expression
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of}0 object '%1' whose value is not known
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of}0 element of array without known bound is not allowed in a constant expression
%select{read of|read of|assignment to|increment of|decrement of|<ERROR>|<ERROR>|<ERROR>|<ERROR>}0 volatile %select{temporary|object %2|member %2}1 is not allowed in a constant expression
%select{read of|read of|assignment to|increment of|decrement of|<ERROR>|<ERROR>|<ERROR>|<ERROR>}0 volatile-qualified type %1 is not allowed in a constant expression
cannot constant evaluate the result of adjusting alignment to %0
cannot constant evaluate whether run-time alignment is at least %0
requested alignment must be %0 or less for type %1; %2 is invalid
cannot refer to element %0 of %select{array of %2 element%plural{1:|:s}2|non-array object}1 in a constant expression
%select{alignment of|offset of the aligned pointer from}0 the base pointee object (%1 %plural{1:byte|:bytes}1) is %select{less than|not a multiple of}0 the asserted %2 %plural{1:byte|:bytes}2
value of the aligned pointer (%0) is not a multiple of the asserted %1 %plural{1:byte|:bytes}1
indeterminate value can only initialize an object of type 'unsigned char'%select{, 'char',|}1 or 'std::byte'; %0 is invalid
invalid type %0 is a %select{member|base}1 of %2
bit_cast %select{from|to}0 a %select{|type with a }1%select{union|pointer|member pointer|volatile|reference}2 %select{type|member}1 is not allowed in a constant expression
value %1 cannot be represented in type %0
constexpr bit_cast involving bit-field is not yet supported
constexpr bit_cast involving type %0 is not yet supported
in call to '%0'
constexpr evaluation hit maximum call limit
(skipping %0 call%s0 in backtrace; use -fconstexpr-backtrace-limit=0 to see all)
comparison of pointer to virtual member function %0 has unspecified value
both arms of conditional operator are unable to produce a constant expression
construction of individual component of complex number is not yet supported in constant expressions
'std::allocator<...>::deallocate' used to delete a null pointer
delete of object with dynamic type %1 through pointer to base class type %0 with non-virtual destructor
delete of pointer '%0' that does not point to a heap-allocated object
delete of pointer%select{ to subobject|}1 '%0' %select{|that does not point to complete object}1
constexpr evaluation exceeded maximum depth of %0 calls
destruction of individual component of complex number is not yet supported in constant expressions
destroying object '%0' whose lifetime has already ended
delete of pointer that has already been deleted
destruction of object that is already being destroyed
%select{pointer|reference}0 to %select{|subobject of }1heap-allocated object is not a constant expression
heap allocation performed here
reference dynamic_cast failed: %select{static type %1 of operand is a non-public base class of dynamic type %2|dynamic type %2 of operand does not have a base class of type %3|%3 is an ambiguous base class of dynamic type %2 of operand|%3 is a non-public base class of dynamic type %2 of operand}0
cannot evaluate this expression if rounding mode is dynamic
floating point arithmetic produces %select{an infinity|a NaN}0
compile time floating point arithmetic suppressed in strict evaluation modes
function parameter %0 with unknown value cannot be used in a constant expression
constexpr evaluation hit maximum heap allocation limit
in implicit initialization for inherited constructor of %0
requested alignment %0 is not a positive power of two
%select{reinterpret_cast|dynamic_cast|%select{this conversion|cast that performs the conversions of a reinterpret_cast}1|cast from %1}0 is not allowed in a constant expression%select{| in C++ standards before C++20||}0
cannot cast object of dynamic type %0 to type %1
%select{non-constexpr|undefined}0 %select{function|constructor}1 %2 cannot be used in a constant expression
constructor inherited from base class %0 cannot be used in a constant expression; derived class cannot be implicitly initialized
cast from %0 is not allowed in a constant expression %select{in C++ standards before C++2c|because the pointed object type %2 is not similar to the target type %3}1
shift count %0 >= width of type %1 (%2 bit%s2)
%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of}0 %select{temporary|variable}1 whose %plural{8:storage duration|:lifetime}0 has ended
comparison of addresses of literals has unspecified value
signed left shift discards bits
left shift of negative value %0
read of incomplete type %0 is not allowed in a constant expression
read of non-const variable %0 is not allowed in a constant expression
read of non-constexpr variable %0 is not allowed in a constant expression
read of variable %0 of non-integral, non-enumeration type %1 is not allowed in a constant expression
comparison against pointer to weak member %q0 can only be performed at runtime
constant evaluation of %0 on array of type %1 is not supported; only arrays of narrow character types can be searched
constant evaluation of %0 between arrays of types %1 and %2 is not supported; only arrays of narrow character types can be compared
cannot constant evaluate '%select{memcpy|memmove}0' between objects of incomplete type %1
cannot constant evaluate '%select{memcpy|memmove}0' between objects of non-trivially-copyable type %1
%select{source|destination}2 of '%select{%select{memcpy|wmemcpy}1|%select{memmove|wmemmove}1}0' is %3
'%select{memcpy|wmemcpy}0' between overlapping memory regions
cannot constant evaluate '%select{memcpy|memmove}0' from object of type %1 to object of type %2
'%select{%select{memcpy|wmemcpy}1|%select{memmove|wmemmove}1}0' not supported: %select{size to copy (%4) is not a multiple of size of element type %3 (%5)|source is not a contiguous array of at least %4 elements of type %3|destination is not a contiguous array of at least %4 elements of type %3}2
allocation performed here was not deallocated%plural{0:|: (along with %0 other memory leak%s0)}0
modification of object of const-qualified type %0 is not allowed in a constant expression
a constant expression cannot modify an object that is visible outside that expression
negative shift count %0
dynamic memory allocation is not permitted in constant expressions until C++20
%plural{2:'delete' used to delete pointer to object allocated with 'std::allocator<...>::allocate'|:%select{non-array delete|array delete|'std::allocator<...>::deallocate'}0 used to delete pointer to %select{array object of type %2|non-array object of type %2|object allocated with 'new'}0}1
cannot allocate array; evaluated array bound %0 is negative
call to %select{placement|class-specific}0 %1
cannot allocate memory of %select{incomplete|function}0 type %1
this placement new expression is not yet supported in constant expressions
cannot allocate array; evaluated array bound %0 is too large
cannot allocate array; evaluated array bound %0 is too small to hold %1 explicitly initialized elements
cannot allocate untyped memory in a constant expression; use 'std::allocator<T>::allocate' to allocate memory of type 'T'
control reached end of constexpr function
%select{pointer|reference}0 to %select{|subobject of }1%select{temporary|%3}2 is not a constant expression
non-literal type %0 cannot be used in a constant expression
address of non-static constexpr variable %0 may differ on each invocation of the enclosing function; add 'static' to give it a constant address
'%0' evaluates to a null function pointer
cannot %select{access base class of|access derived class of|access field of|access array element of|perform pointer arithmetic on|access real component of|access imaginary component of}0 null pointer
allocated size %0 is not a multiple of size %1 of element type %2
value %0 is outside the range of representable values of type %1
dereferenced pointer past the end of %select{|subobject of }0%select{temporary|%2}1 is not a constant expression
cannot %select{access base class of|access derived class of|access field of|access array element of|ERROR|access real component of|access imaginary component of}0 pointer past the end of object
placement new would change type of storage from %0 to %1
comparison of addresses of subobjects of different base classes has unspecified value
comparison of address of base class subobject %0 of class %1 to field %2 has unspecified value
comparison of address of fields %0 and %2 of %4 with differing access specifiers (%1 vs %3) has unspecified value
comparison against pointer '%0' that points past the end of a complete object has unspecified value
comparison between '%0' and '%1' has unspecified value
comparison of pointers '%0' and '%1' to unrelated zero-sized objects
comparison of numeric address '%0' with pointer '%1' can only be performed at runtime
subtracted pointers are not elements of the same array
subtraction of pointers to type %0 of zero size
comparison against address of weak declaration '%0' can only be performed at runtime
%select{|||||virtual function called on|dynamic_cast applied to|typeid applied to|construction of|destruction of}0 object '%1' whose dynamic type is not constant
pseudo-destructor call is not permitted in constant expressions until C++20
pure virtual function %q0 called
control flows through the definition of a %select{static|thread_local}0 variable
constexpr evaluation hit maximum step limit; possible infinite loop?
this use of statement expressions is not supported in a constant expression
subobject declared here
temporary created here
%select{|implicit }0use of 'this' pointer is only allowed within the evaluation of a call to a 'constexpr' member function
typeid applied to expression of polymorphic type %0 is not allowed in a constant expression in C++ standards before C++20
subobject %select{of type |}0%1 is not initialized
constructor of base class %0 is not called
assignment would change active union member during the initialization of a different member of the same union
indexing of array without known bound is not allowed in a constant expression
non-trivial destruction of type %0 in a constant expression is not supported
flexible array initialization is not yet supported
type %0 has unexpected layout
non-trivial destruction of lifetime-extended temporary with type %0 used in the result of a constant expression is not yet supported
array-to-pointer decay of array member without known bound is not supported
use of reference outside its lifetime is not allowed in a constant expression
initializer of %0 is not a constant expression
initializer of %0 is unknown
initializer of weak variable %0 is not considered constant because it may be different at runtime
cannot construct object of type %0 with virtual base class in a constant expression
cannot evaluate call to virtual function in a constant expression in C++ standards before C++20
comparison between unequal pointers to void has unspecified result
volatile %select{temporary created|object declared|member declared}0 here
covariant thunk required by %0
division by zero
in first definition, possible difference is here
but in '%0' found %select{%2 base %plural{1:class|:classes}2|%2 virtual base %plural{1:class|:classes}2|%ordinal2 base class with different type %3|%ordinal2 %select{non-virtual|virtual}3 base class %4|%ordinal2 base class %3 with %select{public|protected|private|no}4 access specifier}1
definition in module '%0' is here
but in '%0' found %select{enum that is %select{not scoped|scoped}2|enum scoped with keyword %select{struct|class}2|enum %select{without|with}2 specified type|enum with specified type %2|enum with %2 element%s2|%ordinal2 element has name %3|%ordinal2 element %3 %select{has|does not have}4 an initializer|%ordinal2 element %3 has different initializer|}1
but in %select{'%1'|definition here}0 found %select{field %3|field %3 with type %4|%select{non-|}4bitfield %3|bitfield %3 with different width expression|%select{non-|}4mutable field %3|field %3 with %select{no|an}4 initializer|field %3 with a different initializer}2
but in '%0' found %select{different return type %2|%ordinal2 parameter with name %3|%ordinal2 parameter with type %3%select{| decayed from %5}4|%ordinal2 parameter with%select{out|}3 a default argument|%ordinal2 parameter with a different default argument|a different body}1
but in %select{'%1'|definition here}0 found %select{%select{method %4|constructor|destructor}3 that has %5 parameter%s5|%select{method %4|constructor|destructor}3 with %ordinal5 parameter of type %6%select{| decayed from %8}7|%select{method %4|constructor|destructor}3 with %ordinal5 parameter named %6}2
but in %select{'%1'|definition here}0 found %select{end of class|public access specifier|private access specifier|protected access specifier|static assert|field|method|type alias|typedef|data member|friend declaration|function template|method|instance variable|property}2
but in %select{'%1'|definition here}0 found %select{||||different static assert|different field|different method|different type alias|different typedef|different data member|different friend declaration|different function template|different method|different instance variable|different property|another unexpected decl}2
but in %select{'%1'|definition here}0 found %select{%select{no super class|super class with type %4}3|instance variable '%3' access control is %select{|@private|@protected|@public|@package}4}2
but in %select{'%1'|definition here}0 found %select{method %3 with different return type %4|method %3 as %select{class|instance}4 method|%select{no|'required'|'optional'}3 method control|method %3 with %select{no designated initializer|designated initializer}4|%select{regular|direct}4 method %3|different method %3}2
but in %select{'%1'|definition here}0 found %select{property %3|property %3 with type %4|%select{no|'required'|'optional'}3 property control|property %3 with different '%select{none|readonly|getter|assign|readwrite|retain|copy|nonatomic|setter|atomic|weak|strong|unsafe_unretained|nullability|null_resettable|class|direct}4' attribute}2
but in '%0' found %select{static assert with different condition|static assert with different message|static assert with %select{|no }2message|%select{method %3|constructor|destructor}2|%select{method %3|constructor|destructor}2 is %select{not deleted|deleted}4|%select{method %3|constructor|destructor}2 is %select{not defaulted|defaulted}4|%select{method %3|constructor|destructor}2 is %select{|pure }4%select{not virtual|virtual}5|%select{method %3|constructor|destructor}2 is %select{not static|static}4|%select{method %3|constructor|destructor}2 is %select{not volatile|volatile}4|%select{method %3|constructor|destructor}2 is %select{not const|const}4|%select{method %3|constructor|destructor}2 is %select{not inline|inline}4|%select{method %3|constructor|destructor}2 with %ordinal4 parameter with%select{out|}5 a default argument|%select{method %3|constructor|destructor}2 with %ordinal4 parameter with a different default argument|%select{method %3|constructor|destructor}2 with %select{no |}4template arguments|%select{method %3|constructor|destructor}2 with %4 template argument%s4|%select{method %3|constructor|destructor}2 with %4 for %ordinal5 template argument|%select{method %3|constructor|destructor}2 with %select{no body|body}4|%select{method %3|constructor|destructor}2 with different body|friend %select{class|function}2|friend %2|friend function %2|function template %2 with %3 template parameter%s3|function template %2 with %ordinal3 template paramter being a %select{type|non-type|template}4 template parameter|function template %2 with %ordinal3 template parameter %select{with no name|named %5}4|function template %2 with %ordinal3 template parameter with %select{no |}4default argument|function template %2 with %ordinal3 template parameter with default argument %4|function template %2 with %ordinal3 template parameter with different type|function template %2 with %ordinal3 template parameter %select{not |}4being a template parameter pack|%select{no attribute|%3}2|}1
but in %select{'%1'|definition here}0 found %select{%3 referenced %plural{1:protocol|:protocols}3|%ordinal3 referenced protocol with different name %4}2
but in '%0' found %select{unnamed template parameter %2|template parameter %3|template parameter with %select{no |}2default argument|template parameter with different default argument}1
but in '%0' found %select{%select{typedef|type alias}2 name %3|%select{typedef|type alias}2 %3 with different underlying type %4}1
but in '%0' found %select{data member with name %2|data member %2 with different type %3|data member %2 with%select{out|}3 an initializer|data member %2 with a different initializer|data member %2 %select{is constexpr|is not constexpr}3}1
null passed to a callee that requires a non-null argument
class has base type %0
enumerator %0 with value %1 here
field %0 has type %1 here
field has name %0 here
friend declared here
no corresponding base class here
no corresponding enumerator here
no corresponding field here
no corresponding friend here
class has %0 base %plural{1:class|:classes}0
%select{class|instance}0 method %1 also declared here
no corresponding superclass here
property %0 is implemented with %select{@synthesize|@dynamic}1 here
inherits from superclass %0 here
property is synthesized to ivar %0 here
%select{parameter|parameter pack}0 declared here
%0 is a %select{struct|interface|union|class|enum}1 here
template parameter declared here
template parameter list also declared here
declared here with type %0
%select{non-virtual|virtual}0 derivation here
in second definition, possible difference is here
unimplemented constexpr lambda feature: %0 (coming soon!)
-fsanitize-address-field-padding applied to %0
-fsanitize-address-field-padding ignored for %0 because it %select{is not C++|is packed|is a union|is trivially copyable|has trivial destructor|is standard layout|is in a ignorelisted file|is ignorelisted}1
integer value %0 is outside the valid range of values [%1, %2] for the enumeration type %3
overflow in expression; result is %0 with type %1
overflow in expression; result is %0 with type %1
'%0' will always evaluate to 'true' in a manifestly constant-evaluated expression
ms_struct may not produce Microsoft-compatible layouts with fundamental data types with sizes that aren't a power of two
template parameter lists have a different number of parameters (%0 vs %1)
template parameter has different kinds in different translation units
field %0 declared with incompatible types in different translation units (%1 vs. %2)
external function %0 declared with incompatible types in different translation units (%1 vs. %2)
instance variable %0 declared with incompatible types in different translation units (%1 vs. %2)
non-type template parameter declared with incompatible types in different translation units (%0 vs. %1)
%select{class|instance}0 method %1 has a different number of parameters in different translation units (%2 vs. %3)
%select{class|instance}0 method %1 has a parameter with a different types in different translation units (%2 vs. %3)
%select{class|instance}0 method %1 has incompatible result types in different translation units (%2 vs. %3)
%select{class|instance}0 method %1 is variadic in one translation unit and not variadic in another
property %0 is implemented with %select{@synthesize|@dynamic}1 in one translation but %select{@dynamic|@synthesize}1 in another translation unit
property %0 declared with incompatible types in different translation units (%1 vs. %2)
class %0 has incompatible superclasses
property %0 is synthesized to different ivars in different translation units (%1 vs. %2)
parameter kind mismatch; parameter is %select{not a|a}0 parameter pack
type %0 has incompatible definitions in different translation units
external variable %0 defined in multiple translation units
external variable %0 declared with incompatible types in different translation units (%1 vs. %2)
padding %select{struct|interface|class}0 %1 with %2 %select{byte|bit}3%s2 to align anonymous bit-field
padding %select{struct|interface|class}0 %1 with %2 %select{byte|bit}3%s2 to align %4
padding size of %0 with %1 %select{byte|bit}2%s1 to alignment boundary
field %1 within %0 is less aligned than %2 and is usually due to %0 being packed, which can lead to unaligned accesses
packed attribute is unnecessary for %0
not packing field %0 as it is non-POD for the purposes of layout
add a deprecation attribute to the declaration to silence this warning
previous command '%select{\|@}0%1' here
previous command '%select{\|@}0%1' (an alias of '\%2') here
end tag
HTML tag started here
did you mean '%0'?
previous documentation
did you mean '%0'?
previous documentation
unknown command tag name '%0'; did you mean '%1'?
'%select{\|@}0%select{class|interface|protocol|struct|union}1' command should not be used in a comment attached to a non-%select{class|interface|protocol|struct|union}2 declaration
duplicated command '%select{\|@}0%1'
empty paragraph passed to '%select{\|@}0%1' command
'%select{\|@}0%select{classdesign|coclass|dependency|helper|helperclass|helps|instancesize|ownership|performance|security|superclass}1' command should not be used in a comment attached to a non-container declaration
declaration is marked with '%select{\|@}0deprecated' command but does not have a deprecation attribute
'%select{\|@}0%select{function|functiongroup|method|methodgroup|callback}1' command should be used in a comment attached to %select{a function|a function|an Objective-C method|an Objective-C method|a pointer to function}2 declaration
HTML end tag '%0' is forbidden
HTML end tag does not match any start tag
HTML tag '%0' requires an end tag
HTML start tag '%0' closed by '%1'
HTML start tag prematurely ended, expected attribute name or '>'
expected quoted string after equals sign
'%select{\|@}0%1' command has %plural{0:no|:%2}2 word argument%s2, expected %3
parameter '%0' is already documented
unrecognized parameter passing direction, valid directions are '[in]', '[out]' and '[in,out]'
'%select{\|@}0param' command used in a comment that is not attached to a function declaration
parameter '%0' not found in the function declaration
whitespace is not allowed in parameter passing direction
'%select{\|@}0%1' command used in a comment that is attached to a %select{function returning void|constructor|destructor|method returning void}2
'%select{\|@}0%1' command used in a comment that is not attached to a function or method declaration
template parameter '%0' is already documented
'%select{\|@}0tparam' command used in a comment that is not attached to a template declaration
template parameter '%0' not found in the template declaration
unknown command tag name
'%select{\|@}0%1' command does not terminate a verbatim text block
error opening '%0': required by the CrossTU functionality
error parsing index file: '%0' line: %1 '<USR-Length>:<USR> <File-Path>' format expected
multiple definitions are found for the same key in index 
imported AST from '%0' had been generated for a different target, current: %1, imported: %2
this builtin is only available on 32-bit targets
this builtin is only available on 64-bit targets
cannot add 'abi_tag' attribute in a redeclaration
%select{return|parameter|variable|field|instance variable|synthesized instance variable}0 type %1 is an abstract class
%1 is a %select{private|protected}0 member of %3
%select{base class|inherited virtual base class}0 %1 has %select{private|protected}3 %select{default |copy |move |*ERROR* |*ERROR* |*ERROR*|}2constructor
calling a %select{private|protected}0 constructor of class %2
ISO C++11 does not allow access declarations; use using declarations instead
calling a %select{private|protected}1 destructor of class %0
base class %0 has %select{private|protected}1 destructor
exception object of type %0 has %select{private|protected}1 destructor
field of type %1 has %select{private|protected}2 destructor
instance variable of type %0 has %select{private|protected}1 destructor
temporary of type %0 has %select{private|protected}1 destructor
variable of type %1 has %select{private|protected}2 destructor
inherited virtual base class %1 has %select{private|protected}2 destructor
field of type %0 has %select{private|protected}2 %select{default |copy |move |*ERROR* |*ERROR* |*ERROR* |}1constructor
friend function %1 is a %select{private|protected}0 member of %3
capture of variable '%0' as type %1 calls %select{private|protected}3 %select{default |copy |move |*ERROR* |*ERROR* |*ERROR* |}2constructor
address of overloaded function %0 is ambiguous
cannot form member pointer of type %0 without '&' and class name
address of overloaded function %0 does not match required type %1
address of overloaded function %0 cannot be converted to type %1
cannot take address of function %0 because parameter %1 has pass_object_size attribute
conflicting address space qualifiers are provided between types %0 and %1
'delete' cannot delete objects of type %0 in address space '%1'
'new' cannot allocate objects of type %0 in address space '%1'
cannot take address of function %0 because its constraints are not satisfied
cannot take address of function %0 because it has one or more non-tautological enable_if conditions
TLS model '%0' is not yet supported on AIX
alias definition of %0 after tentative definition
definition %0 cannot also be an %select{alias|ifunc}1
aliases are not supported on darwin
CUDA does not support aliases
extraneous template parameter list in alias template declaration
'align_value' attribute requires integer constant
%0 attribute cannot be applied to %select{a function parameter|a variable with 'register' storage class|a 'catch' variable|a bit-field|an enumeration}1
redeclaration has different alignment requirement (%1 vs %0)
%0 must be specified on definition if it is specified on any declaration
requested alignment is less than minimum alignment of %1 for type %0
aligned %select{allocation|deallocation}0 function of type '%1' is %select{only|not}4 available on %2%select{ %3 or newer|}4
'aligned' attribute requires integer constant
requested alignment is dependent but declaration is not dependent
requested alignment is not a power of 2
requested alignment must be %0 or smaller
requested alignment must be %0 or greater
invalid application of 'alignof' to a field of a class still being defined
allocating an object of abstract class type %0
expected initializer
ambiguous cast from base %0 to derived %1:%2
ambiguous conversion of delete expression of type %0 to a pointer
ambiguous conversion from derived class %0 to base class %1:%2
destructor of class %0 is ambiguous
constructor of %0 inherited from multiple base class subobjects
member %0 found in multiple base classes of different types
non-static member %0 found in multiple base-class subobjects of type %1:%2
ambiguous conversion from pointer to member of %select{base|derived}0 class %1 to pointer to member of %select{derived|base}0 class %2:%3
reference to %0 is ambiguous
multiple suitable %0 functions in %1
a type named %0 is hidden by a declaration in a different namespace
anonymous bit-field has negative width (%0)
anonymous bit-field cannot have qualifiers
anonymous property is not supported
anonymous %select{struct|union}0 can only contain non-static data members
member of anonymous %select{struct|union}0 redeclares %1
anonymous %select{struct|union}0 cannot contain a %select{private|protected}1 data member
functions cannot be declared in an anonymous %select{struct|union}0
static members cannot be declared in an anonymous %select{struct|union}0
types cannot be declared in an anonymous %select{struct|union}0
anonymous %select{structs|structs and classes}0 must be %select{struct or union|class}0 members
anonymous unions at namespace or global scope must be declared 'static'
anonymous union at class scope must not have a storage specifier
%select{x86|x86-64}0 'interrupt' attribute only applies to functions that have %select{a 'void' return type|only a pointer parameter optionally followed by an integer parameter|a pointer as the first parameter|a %2 type as the second parameter}1
interrupt service routine cannot be called directly
must explicitly describe intended ownership of an object array parameter
existing instance variable %1 for property %0 with %select{unsafe_unretained|assign}2 attribute must be __unsafe_unretained
cannot perform atomic operation on a pointer to type %0: type has non-trivial ownership
cannot capture __autoreleasing variable in a %select{block|lambda by copy}0
%select{__block variables|global variables|fields|instance variables}0 cannot have __autoreleasing ownership
incompatible types casting %0 to %1 with a %select{__bridge|__bridge_transfer|__bridge_retained}2 cast
cast of %select{Objective-C|block|C}0 pointer type %1 to %select{Objective-C|block|C}2 pointer type %3 cannot use %select{__bridge|__bridge_transfer|__bridge_retained}4
%select{cast|implicit conversion}0 of %select{Objective-C|block|C}1 pointer type %2 to %select{Objective-C|block|C}3 pointer type %4 requires a bridged cast
collection expression type %0 is a forward declaration
%select{implicit conversion|cast}0 of weak-unavailable object of type %1 to a __weak object of type %2
method implementation does not match its declaration
ARC forbids explicit message send of %0
ARC forbids %select{implementation|synthesis}0 of %1
ARC forbids use of %0 in a @selector
%select{|unsafe_unretained|strong|weak}1 property %0 may not also be declared %select{|__unsafe_unretained|__strong|__weak|__autoreleasing}2
%select{pointer|reference}1 to non-const type %0 with no explicit ownership
init methods must return a type related to the receiver type
method was declared as %select{an 'alloc'|a 'copy'|an 'init'|a 'new'}0 method, but its implementation doesn't match because %select{its result type is not an object pointer|its result type is unrelated to its receiver type}1
no visible @interface for %0 declares the selector %1
no known %select{instance|class}1 method for selector %0
%select{implicit conversion|cast}0 of %select{%2|a non-Objective-C pointer type %2|a block pointer|an Objective-C pointer|an indirect pointer to an Objective-C pointer}1 to %3 is disallowed with ARC
multiple methods named %0 found with mismatched result, parameter type or attributes
'new' cannot allocate an array of %0 with no explicit ownership
explicit ownership qualifier on cast result has no effect
passing address of %select{non-local|non-scalar}0 object to __autoreleasing parameter for write-back
ARC forbids synthesizing a property of an Objective-C object with unspecified ownership or storage attribute
performSelector names a selector which retains the object
pseudo-destructor destroys object of type %0 with inconsistently-qualified type %1
receiver %0 for class message is a forward declaration
receiver type %0 for instance message is a forward declaration
existing instance variable %1 for strong property %0 may not be %select{|__unsafe_unretained||__weak}2
thread-local variable has non-trivial ownership: type is %0
incompatible pointer types passing retainable parameter of type %0to a CF function expecting %1 type
class is incompatible with __weak references
the result of a delegate init call must be immediately returned or assigned to 'self'
cannot create __weak reference in file using manual reference counting
dereferencing a __weak pointer is not allowed due to possible null value caused by race condition, assign it to strong variable first
cannot create __weak reference because the current deployment target does not support weak references
assignment of a weak-unavailable object to a __weak object
synthesizing __weak instance variable of type %0, which does not support weak references
parameter may not be qualified with an address space
argument value %0 is outside the valid range [%1, %2]
argument %0 value should represent a contiguous bit field
argument should be a multiple of %0
argument should be a power of 2
argument should be an 8-bit value shifted by a multiple of 8 bits
argument should be an 8-bit value shifted by a multiple of 8 bits, or in the form 0x??FF
arithmetic on pointer to interface %0, which is not a constant size for this architecture and platform
coprocessor %0 must be configured as %select{GCP|CDE}1
invalid special register for builtin
array designator range [%0, %1] is empty
array designator value '%0' is negative
array designator cannot initialize non-array type %0
array designator index (%0) exceeds array bounds (%1)
size of array element of type %0 (%1 bytes) isn't a multiple of its alignment (%2 bytes)
array has %select{incomplete|sizeless}0 element type %1
cannot initialize array %diff{of type $ with array of type $|with different type of array}0,1
initializing wide char array with incompatible wide string literal
initializing wide char array with non-wide string literal
cannot initialize array %diff{of type $ with non-constant array of type $|with different type of array}0,1
array initializer must be an initializer list%select{| or string literal| or wide string literal}0
initializing 'char8_t' array with plain string literal
initialization of %select{|signed }0char array with UTF-8 string literal is not permitted by %select{'-fchar8_t'|C++20}1
initializing char array with wide string literal
array size must be specified in new expression with no initializer
array of abstract class type %0
array section does not specify contiguous storage
array section does not specify length for outermost dimension
ambiguous conversion of array size expression of type %0 to an integral or enumeration type
array size expression of type %0 requires explicit conversion to type %1
array size expression has incomplete class type %0
size of array has non-integer type %0
array size expression must have integral or %select{|unscoped }0enumeration type, not %1
variable length array must be bound in function definition
star modifier used outside of function prototype
%0 used in non-outermost array type derivation
%0 used in array declarator outside of function prototype
array is too large (%0 elements)
automatic variable qualified with an%select{| invalid}0 address space
bad type for named register variable
asm operand has incomplete type %0
more than one input constraint matches the same output '%0'
register '%0' unsuitable for global register variables on this target
invalid input constraint '%0' in asm
invalid input size for constraint '%0'
invalid lvalue in asm input for constraint '%0'
invalid lvalue in asm output
invalid output constraint '%0' in asm
invalid output size for constraint '%0'
parameter references not allowed in naked functions
'this' pointer references not allowed in naked functions
reference to a %select{bit-field|vector element|global register variable}0 in asm %select{input|output}1 with a memory constraint '%2'
cannot pass a pointer-to-member through register-constrained inline assembly parameter
size of register '%0' does not match variable size
unsupported inline asm: input with type %diff{$ matching output with type $|}0,1
asm constraint has an unexpected number of alternatives: %0 vs %1
unknown register name '%0' in asm
unwind clobber can't be used with asm goto
type %0 in generic association compatible with previously specified type %1
type %0 in generic association incomplete
type %0 in generic association not an object type
type %0 in generic association is a variably modified type
use of @defs is not supported on this architecture and platform
argument to atomic builtin of type '_BitInt' is not supported
address argument to atomic builtin cannot be const-qualified (%0 invalid)
Atomic memory operand must have a power-of-two size
address argument to atomic builtin must be a pointer (%0 invalid)
address argument to atomic builtin must be a pointer to integer, floating-point or pointer (%0 invalid)
address argument to atomic builtin must be a pointer to integer or pointer (%0 invalid)
address argument to atomic builtin must be a pointer to 1,2,4,8 or 16 byte type (%0 invalid)
address argument to load or store exclusive builtin must be a pointer to 1,2,4 or 8 byte type (%0 invalid)
atomic %select{load|store}0 requires runtime support that is not available for this target
synchronization scope argument to atomic operation is invalid
address argument to atomic operation must be a pointer to _Atomic type (%0 invalid)
address argument to atomic operation must be a pointer to %select{|atomic }0integer (%1 invalid)
address argument to atomic operation must be a pointer to %select{|atomic }0integer or supported floating point type (%1 invalid)
address argument to atomic operation must be a pointer to %select{|atomic }0integer or pointer (%1 invalid)
address argument to atomic operation must be a pointer to %select{|atomic }0integer, pointer or supported floating point type (%1 invalid)
address argument to %select{atomic|__sync}0 operation must be a pointer to a non address discriminated type (%1 invalid)
address argument to atomic operation must be a pointer to non-%select{const|constant}0 _Atomic type (%1 invalid)
address argument to atomic operation must be a pointer to non-const type (%0 invalid)
address argument to atomic operation must be a pointer to a trivially-copyable type (%0 invalid)
atomic property of reference type %0 cannot have non-trivial assignment operator
_Atomic cannot be applied to %select{incomplete |array |function |reference |atomic |qualified |sizeless ||integer }0type %1 %select{|||||||which is not trivially copyable|}0
%0 attribute expression never produces a constant expression
the type %0 is already explicitly ownership-qualified
%0 attribute can only be applied to a %select{function|method}1 with an error parameter
%0 attribute with '%1' convention can only be applied to a %select{function|method}2 returning %select{an integral type|a pointer}3
tls_model must be "global-dynamic", "local-dynamic", "initial-exec" or "local-exec"
function type may not be qualified with an address space
multiple address spaces specified for type
address space is negative
address space is larger than the maximum supported (%0)
requested alignment must be %0 bytes or smaller
%0 attribute only applies to integer arguments
%0 attribute argument is invalid: %select{max must be 0 since min is 0|min must not be greater than max}1
%0 attribute must be greater than 0
%0 attribute requires parameter %1 to be %select{int or bool|an integer constant|a string|an identifier|a constant expression|a builtin function}2
%0 attribute parameter %1 is out of bounds
%0 attribute parameter %1 is out of bounds: %plural{0:no parameters to index into|1:can only be 1, since there is one parameter|:must be between 1 and %2}2
%0 attribute requires integer constant between %1 and %2 inclusive
%0 attribute requires %select{int or bool|an integer constant|a string|an identifier}1
%0 attribute requires an integer type argument
%0 attribute requires a pointer type argument
'__clang_arm_builtin_alias' attribute can only be applied to an ARM builtin
%0 is only supported when '-msve-vector-bits=<bits>' is specified with a value of 128, 256, 512, 1024 or 2048.
'__clang_arm_mve_strict_polymorphism' attribute can only be applied to an MVE/NEON vector type
Neon vector size must be 64 or 128 bits
invalid RVV vector size '%0', expected size is '%1' based on LMUL of type and '-mrvv-vector-bits'
invalid SVE vector size '%0', must match value set by '-msve-vector-bits' ('%1')
%0 attribute references parameter %1, but the function %2 has only %3 parameters
%0 attribute can only be applied to a ARM, HLSL or RISC-V builtin
'cleanup' argument %select{|%1 |%1 }0is not a %select{||single }0function
'cleanup' function %0 parameter has %diff{type $ which is incompatible with type $|incompatible type}1,2
'cleanup' function %0 must take 1 parameter
'__declspec(dllexport)' cannot be applied to more than one default constructor in %0
attribute %q0 cannot be applied to a deleted function
lambda cannot be declared %0
attribute %q0 cannot be applied to member of %q1 class
%q0 must have external linkage when declared %q1
redeclaration of %q0 cannot add %q1 attribute
%q0 cannot be thread local when declared %q1
definition of dllimport data
dllimport cannot be applied to non-inline function definition
cannot define non-inline dllimport template specialization
definition of dllimport static field not allowed
%0 attribute argument may only refer to a function parameter of integer type
%select{a reference type|an array type|a non-vector or non-vectorizable scalar type}0 is an invalid argument to attribute %1
invalid argument expression to bounds attribute
'_BitInt' vector element width must be %select{a power of 2|at least as wide as 'CHAR_BIT'}0
%0 attribute is invalid for the implicit this argument
invalid matrix element type %0
%0%select{ attribute|}1 cannot be applied to a declaration
%0 attribute applied to non-RVV type %1
vector size not an integral multiple of component size
%0 attribute applied to non-SVE type %1
invalid vector element type %0
%0 attribute does not appear on the first declaration
multiple garbage collection attributes specified for type
%0 attribute has no effect on defaulted or deleted functions
%0 attribute is permitted on definitions only
empty %0 cannot be composed with named ones
%0 attribute cannot be applied to non-static member functions
%0 attribute cannot be used with pointers to members
function type with %0 attribute must have C linkage
%0 attribute is not supported in %select{C|C++|Objective-C}1
%0 attribute is not supported on '%1'
%0 attribute can only be applied once per parameter
attribute only applies to output parameters
redeclaration of %0 must %select{not |}1have the 'overloadable' attribute
at most one overload for a given name may lack the 'overloadable' attribute
'overloadable' function %0 must have a prototype
%0 attribute parameter types do not match: parameter %1 of function %2 has type %3, but parameter %4 of function %5 has type %6
%0 attribute only applies to%select{| constant}1 pointer arguments
argument %0 to 'preferred_name' attribute is not a typedef for a specialization of %1
'regparm' parameter must be between 0 and %0 inclusive
'regparm' is not valid on this platform
attribute %0 is supported in the OpenCL version %1%select{| onwards}2
%0 attribute requires a %select{positive|non-negative}1 integral compile time constant expression
%0 is only supported when '-mrvv-vector-bits=<bits>' is specified with a value of "zvl" or a power 2 in the range [64,65536]
argument to %select{'code_seg'|'section'}1 attribute is not valid for this target: %0
'selectany' can only be applied to data items with external linkage
'sentinel' parameter 1 less than zero
'sentinel' parameter 2 not 0 or 1
%0 size too large
%0 attribute cannot be applied to sizeless type %1
'symbol_metadata_footnote' attributes must use section names that are between 1 and 9 characters long, excluding the leading underscores.
%0 attribute takes at least %1 argument%s1
%0 attribute takes no more than %1 argument%s1
%0 attribute is not supported on targets missing %1; specify an appropriate -march= or -mcpu=
the vecreturn attribute can only be used on a POD (plain old data) class or structure (i.e. no virtual functions)
the vecreturn attribute can only be used on a class or structure with one member, which must be a vector
weak declaration cannot have internal linkage
weakref declaration of %0 must be in a global context
weakref declaration must have internal linkage
weakref declaration of %0 must also have an alias attribute
'__funcref' attribute can only be applied to a function pointer type
%0%select{ attribute|}1 only applies to %select{functions|unions|variables and functions|functions and methods|functions, methods and blocks|functions, methods, and parameters|variables|variables and fields|variables, data members and tag types|types and namespaces|variables, functions and classes|kernel functions|non-K&R-style functions}2
%0%select{ attribute|}1 only applies to %2
%0 attribute %plural{0:takes no arguments|1:takes one argument|:requires exactly %1 arguments}1
%0 attribute references function %1, which %plural{0:takes no arguments|1:takes one argument|:takes exactly %2 arguments}2
zero %0 size
%0 and %1%select{ attributes|}2 are not compatible
cannot pass bit-field as __auto_type initializer in C
%select{'auto'|'decltype(auto)'|'__auto_type'|template arguments}0 deduced as %1 in declaration of %2 and deduced as %3 in declaration of %4
functional-style cast to %0 has incompatible initializer of type %1
initializer for functional-style cast to %0 contains multiple expressions
initializer for functional-style cast to %0 is empty
cannot deduce actual type for %1 from %select{parenthesized|nested}0 initializer list
cannot deduce return type %0 from returned value of type %1
'%select{auto|decltype(auto)}0' in return type deduced as %1 here but deduced as %2 in earlier return statement
cannot deduce return type %0 for function with no return statements
cannot deduce return type from initializer list
cannot deduce return type %0 from omitted return expression
function %0 with deduced return type cannot be used before it is defined
function with deduced return type cannot be virtual
deduced conflicting types %diff{($ vs $) |}0,1for initializer list element type
cannot use __auto_type with initializer list in C
'auto' return without trailing return type; deduced return types are a C++14 extension
new expression for type %0 contains multiple constructor arguments
new expression for type %0 has incompatible constructor argument of type %1
new expression for type %0 requires a constructor argument
%select{function with deduced return type|declaration with trailing return type}0 must be the only declaration in its group
%select{'auto'|'decltype(auto)'|'__auto_type'|use of %select{class template|function template|variable template|alias template|template template parameter|concept|template}2 %3 requires template arguments; argument deduction}0 not allowed %select{in function prototype|in non-static struct member|in struct member|in non-static union member|in union member|in non-static class member|in interface member|in exception declaration|in template parameter until C++17|in block literal|in template argument|in typedef|in type alias|in function return type|in conversion function type|here|in lambda parameter|in type allocated by 'new'|in K&R-style function parameter|in template parameter|in friend declaration|in function prototype that is not a function declaration|in requires expression parameter}1
'auto' variable template instantiation is not allowed
variable %0 with type %1 has incompatible initializer of type %2
cannot deduce actual type for variable %0 with type %1 from initializer list
initializer for variable %0 with type %1 contains multiple expressions
initializer for variable %0 with type %1 is empty
cannot deduce type for variable %1 with type %2 from %select{parenthesized|nested}0 initializer list
declaration of variable %0 with deduced type %1 requires an initializer
variable %0 declared with deduced type %1 cannot appear in its own initializer
unknown platform %0 in availability macro
return type of 'await_suspend' is required to be 'void' or 'bool' (have %0)
%0 is an incomplete type
property implementation must have its declaration in the category %0
%select{const_cast||||C-style cast|functional-style cast|}0 to %2, which is not a reference, pointer-to-object, or pointer-to-data-member
address of overloaded function %0 cannot be cast to type %1
%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|addrspace_cast}0 from %1 to %2 converts between mismatching address spaces
%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from bit-field lvalue to reference type %2
%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|addrspace_cast}0 from %1 to %2 is not allowed
cannot %select{||reinterpret_cast||C-style cast||}0 from member pointer type %1 to member pointer type %2 of different size
%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2 casts away qualifiers
%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|addrspace_cast}0 from rvalue to reference type %2
%select{||reinterpret_cast||C-style cast||}0 from scalar %1 to vector %2 of different size
%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2, which are not related by inheritance, is not allowed
%select{||reinterpret_cast||C-style cast||}0 from vector %1 to scalar %2 of different size
%select{||reinterpret_cast||C-style cast||}0 from vector %1 to vector %2 of different size
%0 is not a class type
%0 is not polymorphic
cannot use dynamic_cast to convert from %0 to %1
invalid target type %0 for dynamic_cast; target type must be a reference or pointer type to a defined class
%0 cannot be used as the type of a kernel parameter
cannot cast from lvalue of type %1 to rvalue reference type %2; types are not compatible
left hand operand to %0 must be a %select{|pointer to }1class compatible with the right hand operand, but is %2
right hand operand to %0 has non-pointer-to-member type %1
function multiversioning doesn't support %select{feature|architecture}0 '%1'
cannot allocate %select{function|reference}1 type %0 with new
%0 cannot be the name of a parameter
parameter name cannot have template arguments
property implementation must be in a class or category implementation
property implementation must have its declaration in interface %0 or one of its extensions
bad receiver type %0
reinterpret_cast cannot resolve overloaded function %0 to type %1
reinterpret_cast of a %0 to %1 needs its address, which is not allowed
cast from pointer to smaller type %2 loses information
cannot cast from rvalue of type %1 to rvalue reference type %2; types are not compatible
cannot cast from type %1 to member pointer type %2
address of overloaded function %0 cannot be static_cast to type %1
cannot cast from type %1 to pointer type %2
%0 cannot be the name of a variable or data member
base class %0 has a flexible array member
unions cannot have base classes
base class initializer %0 names both a direct base class and an inherited virtual base class
constructor initializer %0 does not name a class
base specifier must name a class
%0%select{ attribute|}1 cannot be applied to a base specifier
binding %0 cannot appear in the initializer of its own decomposition declaration
__builtin_bit_cast %select{source|destination}0 type must be trivially copyable
__builtin_bit_cast source size does not equal destination size (%0 vs %1)
%select{signed|unsigned}0 _BitInt must have a bit size of at least %select{2|1}0
%select{signed|unsigned}0 _BitInt of bit sizes greater than %1 not supported
bit-field %0 has negative width (%1)
named bit-field %0 has zero width
%select{bit-field %1|anonymous bit-field}0 is too wide (%2 bits)
width of%select{ anonymous|}0 bit-field%select{| %1}0 (%2 bits) exceeds the %select{width|size}3 of its type (%4 bit%s4)
variable is not assignable (missing __block type specifier)
declaration of block scope identifier with linkage cannot have an initializer
__block attribute not allowed, only allowed on local variables
__block attribute not allowed on declaration with a variably modified type
non-void block should return a value
block cannot return %select{array|function}0 type %1
blocks support disabled - compile with -fblocks or %select{pick a deployment target that supports them|for OpenCL C 2.0 or OpenCL C 3.0 with __opencl_c_device_enqueue feature}0
reference to non-static member function must be called%select{|; did you mean to call it with no arguments?}0
cannot combine %select{'__counted_by_or_null'|'__sized_by_or_null'}0 and %1; did you mean %select{'__counted_by'|'__sized_by'}0 instead?
%select{array objects|flexible array members}1 cannot be null; did you mean %select{__counted_by|__sized_by}0 instead?
%select{string|character|boolean|numeric}0 literal must be prefixed by '@' in a collection
'break' statement not in loop or switch statement
__builtin_btf_type_id argument %0 not a constant
first argument to __builtin_annotation must be an integer
second argument to __builtin_annotation must be a non-wide string constant
this builtin is not supported on the requested cpu, please specify -mcpu=%0 or newer
definition of builtin function %0
builtin functions must be directly called
function-style cast to a builtin type can only take one argument
%ordinal0 argument must be a %select{vector, integer or floating point type|matrix|pointer to a valid matrix element type|signed integer or floating point type|vector type|floating point type|vector of integers}1 (was %2)
%select{non-pointer|function pointer|void pointer}0 argument to '__builtin_launder' is not allowed
argument to __builtin_longjmp must be a constant 1
__builtin_longjmp is not supported for the current target
matrix types extension is disabled. Pass -fenable-matrix to enable it
%0 dimension is outside the allowed range [1, %1]
the pointee of the 2nd argument must match the element type of the 1st argument (%0 != %1)
%0 argument must be a constant unsigned integer expression
cannot store matrix to read-only pointer
stride must be greater or equal to the number of rows
unsupported signature for %q0
call to '%select{__builtin_operator_new|__builtin_operator_delete}0' selects non-usual %select{allocation|deallocation}0 function
argument %0 is not an unqualified class type
cannot redeclare builtin function %0
'%0' is only available in %1
__builtin_setjmp is not supported for the current target
builtin is not supported on this target
argument to __builtin_verbose_trap must be a pointer to a constant string
this builtin is only available on x86-64 and aarch64 targets
%select{qualifier in |static |}0array size %select{||'[*] '}0is a C99 feature, not permitted in C++
calling %0 with incomplete return type %1
argument type %0 is incomplete
calling function with incomplete return type %0
'callback' attribute argument %0 is not a known function parameter
'callback' attribute specifies invalid callback callee
multiple 'callback' attributes specified
'callback' attribute specifies no callback callee
'callback' attribute callee may not be variadic
'callback' attribute callee does not have function type
'callback' argument at position %0 references unavailable implicit 'this'
'called_once' attribute only applies to function-like parameters
cannot find suitable %select{getter|setter}0 for property %1
cannot form a pointer-to-member to member %0 of reference type %1
cannot pass non-trivial C object of type %0 by value to variadic %select{function|block|method|constructor}1
cannot pass object with interface type %0 by value through variadic %select{function|block|method|constructor}1
cannot pass object with interface type %1 by value to variadic %select{function|block|method|constructor}2; expected type from format string was %3
cannot pass %select{expression of type %1|initializer list}0 to variadic %select{function|block|method|constructor}2
cannot pass %select{expression of type %1|initializer list}0 to variadic %select{function|block|method|constructor}2; expected type from format string was %3
capture host variable %0 by reference in device or host device lambda function
capturing a structured binding is not yet supported in OpenMP
__block variable %0 cannot be captured in a %select{lambda expression|captured statement}1
non-local lambda expression cannot have a capture-default
%0 in capture list does not name a variable
%0 can appear only once in a capture list
%0 cannot be captured because it does not have automatic storage duration
by-copy capture of value of abstract type %0
by-copy capture of variable %0 with %select{incomplete|sizeless}1 type %2
%select{function|parameter}0 declared '[[carries_dependency]]' after its first declaration
'[[carries_dependency]]' attribute only allowed on parameter in a function declaration or lambda
'case' statement not in switch statement
casting from randomized structure pointer type %0 to %1
operand of type %0 cannot be cast to a pointer type
pointer cannot be cast to type %0
cannot type cast @selector expression
cannot catch incomplete type %0
cannot catch pointer to incomplete type %0
cannot catch reference to incomplete type %0
@catch parameter is not a pointer to an interface type
cannot catch exceptions by rvalue reference
cannot catch %select{|reference to }0sizeless type %1
cannot catch variably modified type %0
cannot define %select{category|class extension}0 for undefined class %1
property declared in category %0 cannot be implemented in class implementation
function declared '%0' here was previously declared %select{'%2'|without calling convention}1
parameter %0 must have a complete type to use function %1 with the %2 calling convention
function with no prototype cannot use the %0 calling convention
variadic function cannot use %0 calling convention
CFString literal is not a string constant
circular inheritance between %0 and %1
cannot declare class extension for %0 after class implementation
base %0 is marked '%select{final|sealed}1'
property %0 is a class property; did you mean to access it with class '%1'?
%0 redeclared with '%1' access
'objc_class_stub' attribute cannot be specified on a class that does not have the 'objc_subclassing_restricted' attribute
property follows Cocoa naming convention for returning 'owned' objects
the type %0 is not a pointer to a fast-enumerable object
type of machine mode does not support base vector types
compound literal in function scope may not be qualified with an address space
%select{block pointer|pointer|reference}0 to function type %select{%2 |}1cannot have '%3' qualifier
concept declarations may only appear in global or namespace scope
extraneous template parameter list in concept definition
concept cannot have associated constraints
concept template parameter list must have at least one parameter; explicit specialization of concepts is not allowed
conditional expression returns %select{values with incompatible nested pointer types|functions with incompatible firebloom attributes}2%diff{ $ and $|}0,1
operands to conditional of types%diff{ $ and $|}0,1 are incompatible in ARC mode
conditional expression is ambiguous; %diff{$ can be converted to $ and vice versa|types can be convert to each other}0,1
conditional expression is ambiguous; %diff{$ and $|types}0,1 can be converted to several common types
cannot mix vectors and extended vectors in a vector conditional
vector condition type %0 and result type %1 do not have elements of the same size
GNU vector conditional operand cannot be %select{void|a throw expression}0
vector operands to the vector conditional must be the same type %diff{($ and $)|}0,1}
enumeration type %0 is not allowed in a vector conditional
vector condition type %0 and result type %1 do not have the same number of elements
%select{left|right}1 operand to ? is void, but %select{right|left}1 operand is of type %0
CUDA special function '%0' must have scalar return type
conflicting types for alias %0
conflicting option '-fcoro-aligned-allocation' and '-fno-aligned-allocation'
conflicting attributes for state '%0'
conflicting code segment specifiers
instance variable %0 has conflicting bit-field width
conflicting instance variable names: %0 vs %1
instance variable %0 has conflicting type%diff{: $ vs $|}1,2
virtual function %0 has different attributes %diff{($) than the function it overrides (which has $)|than the function it overrides}1,2
virtual function %0 has different calling convention attributes %diff{($) than the function it overrides (which has calling convention $)|than the function it overrides}1,2
conflicting super class name %0
conflicting types for %0
argument to %0 must be a constant integer
consteval function %0 cannot override a non-consteval function
statement not allowed in %select{constexpr|consteval}1 %select{function|constructor}0
no return statement in %select{constexpr|consteval}0 function
destructor cannot be declared %select{<ERROR>|constexpr|consteval|constinit}0
destructor cannot be declared %select{<ERROR>|constexpr|consteval|constinit}0 because %select{data member %2|base class %3}1 does not have a constexpr destructor
constexpr if condition is not a constant expression
variable of non-literal type %1 cannot be defined in a constexpr %select{function|constructor}0 before C++23
'main' is not allowed to be declared %select{constexpr|consteval}0
%select{constexpr|consteval}2 %select{function|constructor}1's %ordinal0 parameter type %3 is not a literal type
%select{constexpr|consteval}0 function's return type %1 is not a literal type
%select{non-constexpr|constexpr|consteval}1 declaration of %0 follows %select{non-constexpr|constexpr|consteval}2 declaration
non-void %select{constexpr|consteval}1 function %0 should return a value
declaration of constexpr static data member %0 requires an initializer
%select{class|struct|interface|union|enum|enum class|enum struct}0 cannot be marked %select{<ERROR>|constexpr|consteval|constinit}1
constexpr variable cannot have non-literal type %0
constexpr variable %0 must have constant destruction
constexpr variable %0 must be initialized by a constant expression
virtual function cannot be constexpr
constexpr %select{member function|constructor}0 not allowed in %select{struct|interface|class}1 with virtual base %plural{1:class|:classes}2
variably-modified type %0 cannot be used in a constexpr %select{function|constructor}1
%select{<ERROR>|constexpr|consteval|constinit}0 can only be used in %select{|variable and function|function|variable}0 declarations
'constinit' specifier added after initialization of variable
local variable cannot be declared 'constinit'
non-templated function cannot have a requires clause
virtual function cannot have a requires clause
satisfaction of constraint '%0' depends on itself
copy constructor must pass its first argument by reference
constructor cannot be declared '%0'
constructor cannot be redeclared
constructor cannot have a return type
class extension has no primary class
cannot jump from this continue statement to the loop increment; jump bypasses initialization of loop condition variable
'continue' statement not in loop statement
conversion function must be a non-static member function
conversion function cannot be redeclared
conversion function cannot have a return type
conversion function cannot convert to an array type
conversion function cannot convert to a function type
conversion function cannot be variadic
cannot specify any part of a return type in the declaration of a conversion function%select{; put the complete type after 'operator'|; use a typedef to declare a conversion to %1|; use an alias template to declare a conversion to %1|}0
conversion function cannot have any parameters
first two arguments to __builtin_convertvector must have the same number of elements
first argument to __builtin_convertvector must be a vector
second argument to __builtin_convertvector must be a vector type
'&' must precede a capture when the capture default is '='
the GNU address of label extension is not allowed in coroutines.
std::coroutine_handle must have a member named '%0'
'%1' cannot be used in %select{a constructor|a destructor|the 'main' function|a constexpr function|a function with a deduced return type|a varargs function|a consteval function}0
Objective-C methods as coroutines are not yet supported
'%0' cannot be used outside a function
the expression 'co_await __promise.final_suspend()' is required to be non-throwing
%0: 'get_return_object_on_allocation_failure()' must be a static member function
the coroutine promise type %0 declares both 'return_value' and 'return_void'
%0 is required to have a non-throwing noexcept specification when the promise type declares 'get_return_object_on_allocation_failure()'
this function cannot be a coroutine: %0 is an incomplete type
%0 is required to declare the member 'unhandled_exception()'
this function cannot be a coroutine: missing definition of specialization %0
'%0' cannot be used in an unevaluated context
unable to find %select{'::operator new(size_t, nothrow_t)'|'::operator new(size_t, align_val_t, nothrow_t)'}1 for %0
'operator new' provided by %0 is not usable with the function signature of %1
'%0' cannot be used in the handler of a try block
return type of virtual function %3 is not covariant with the return type of the function it overrides (ambiguous conversion from derived class %0 to base class %1:%2)
invalid covariant return for virtual function: %1 is a %select{private|protected}2 base class of %0
return type of virtual function %0 is not covariant with the return type of the function it overrides (%1 is incomplete)
return type of virtual function %0 is not covariant with the return type of the function it overrides (%1 is not derived from %2)
return type of virtual function %0 is not covariant with the return type of the function it overrides (class type %1 is more qualified than class type %2
return type of virtual function %0 is not covariant with the return type of the function it overrides (%1 has different qualifiers than %2)
'cpu_dispatch' function redeclared with different CPUs
multiple 'cpu_specific' functions cannot specify the same CPU: %0
%select{constructor|destructor}1 %0 must not return void expression
illegal device builtin %select{surface|texture}0 reference class template %1 declared here
illegal device builtin %select{surface|texture}0 reference type %1 declared here
cannot use '%0' in %select{__device__|__global__|__host__|__host__ __device__}1 function
__shared__ variable %0 cannot be 'extern'
__shared__ local variables not allowed in %select{__device__|__global__|__host__|__host__ __device__}0 functions
__constant__, __device__, and __managed__ are not allowed on non-static local variables
%select{__device__|__global__|__host__|__host__ __device__}0 function %1 cannot overload %select{__device__|__global__|__host__|__host__ __device__}2 function %3
constexpr function %0 without __host__ or __device__ attributes cannot overload __device__ function with same signature.  Add a __host__ attribute, or build with -fno-cuda-host-device-constexpr.
cannot use variable-length arrays in %select{__device__|__global__|__host__|__host__ __device__}0 functions
module name '%0' specified on command line does not match name of module
%select{reference|backing array for 'std::initializer_list'}2 %select{|subobject of }1member %0 %select{binds to|is}2 a temporary object whose lifetime would be shorter than the lifetime of the constructed object
dealloc return type must be correctly specified as 'void' under ARC, instead of %0
GNU decimal type extension not supported
%0%select{ attribute|}1 cannot be applied to a statement
'%0' declared as an array with a negative size
declarator requires an identifier
%0 cannot appear here, place it after "%select{class|struct|interface|union|enum}1" to apply it to the type declaration
'__declspec(thread)' applied to variable that already has a thread-local storage specifier
'decltype(auto)' cannot be combined with other type specifiers
cannot form %select{pointer to|reference to|array of}0 'decltype(auto)'
'decltype(auto)' can only be used as a return type in a function declaration
cannot deduce 'decltype(auto)' from initializer list
'decltype(auto)' not allowed here
'decltype' cannot be used to name a declaration
cannot decompose members of ambiguous base class %1 of %0:%2
cannot decompose class type %0 because it has an anonymous %select{struct|union}1 member
decomposition declaration cannot be declared with constrained 'auto'
decomposition declaration not permitted in this context
cannot decompose members of inaccessible base class %1 of %0
cannot decompose %select{private|protected}0 member %1 of %3
cannot decompose lambda closure type
cannot decompose class type %1: %select{its base classes %2 and|both it and its base class}0 %3 have non-static data members
decomposition declaration must be the only declaration in its group
decomposition declaration cannot be declared with parentheses
decomposition declaration %0 requires an initializer
decomposition declaration cannot be declared %plural{1:'%1'|:with '%1' specifiers}0
cannot decompose this type; 'std::tuple_element<%0>::type' does not name a type
cannot decompose this type; 'std::tuple_size<%0>::value' is not a valid integral constant expression
decomposition declaration template not supported
decomposition declaration cannot be declared with type %0; declared type must be 'auto' or reference to 'auto'
cannot decompose %select{union|non-class, non-array}1 type %2
type %0 decomposes into %3 %plural{1:element|:elements}2, but %select{%plural{0:no|:only %1}1|%1}4 %plural{1:name was|:names were}1 provided
cannot decrement expression of type bool
cannot %select{form pointer to|form reference to|form array of|form function returning|use parentheses when declaring variable with}0 deduced class template specialization type
ambiguous deduction for template arguments of %0
no viable constructor or deduction guide for deduction of template arguments of %0
class template argument deduction for %0 selected a deleted constructor
class template argument deduction for %0 selected an explicit %select{constructor|deduction guide}1 for copy-list-initialization
template %0 has no definition and no %select{|viable }1deduction guides for deduction of template arguments
%select{<error>|function template|variable template|alias template|template template parameter|concept|template}0 %1 requires template arguments; argument deduction only allowed for class templates
deduced non-type template argument does not have the same type as the corresponding template parameter%diff{ ($ vs $)|}0,1
deduced return types are a C++14 extension
typename specifier refers to %select{class template|function template|variable template|alias template|template template parameter|template}0; argument deduction not allowed here
deduced type %1 of deduction guide is not %select{|written as }2a specialization of template %0
deduction guide cannot have a function definition
deduction guide cannot be declared '%0'
cannot specify deduction guide for %select{<error>|function template|variable template|alias template|template template parameter|concept|dependent template name}0 %1
deduction guide declaration without trailing return type
redeclaration of deduction guide
deduction guide cannot be %select{explicitly instantiated|explicitly specialized}0
deduction guide template contains %select{a template parameter|template parameters}0 that cannot be deduced
cannot specify any part of a return type in the declaration of a deduction guide
deduction guide has different access from the corresponding member template
deduction guide must be declared in the same scope as template %q0
exception specifications of %select{return|argument}0 types differ
default template argument in a class template partial specialization
addition of default argument on redeclaration makes this constructor a %select{default|copy|move}0 constructor
default initialization of an object of const type %0%select{| without a user-provided default constructor}1
default member initializer for %0 uses itself
default member initializer for %1 needed within definition of enclosing class %0 outside of member functions
'default' statement not in switch statement
return type of defaulted 'operator<=>' cannot be deduced because three-way comparison for %select{|member|base class}0 %1 has a deduced return type and is not yet defined
deduced return type for defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator must be 'auto', not %1
defaulted member %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator must be const-qualified
%select{<ERROR>|equality|three-way|equality|relational}0 comparison operator is not a friend of %select{|incomplete class }1%2
%select{non-member|member}0 %select{<ERROR>|equality|three-way|equality|relational}1 comparison operator comparison operator must have %select{2|1}0 parameters
invalid parameter type for defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator; found %1, expected %2%select{| or %4}3
parameters for defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator must have the same type%diff{ (found $ vs $)|}1,2
invalid parameter type for non-member defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator; found %1, expected class or reference to a constant class
return type for defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator must be 'bool', not %1
comparison operator template cannot be defaulted
the parameter for an explicitly-defaulted copy assignment operator must be an lvalue reference type
the parameter for this explicitly-defaulted copy %select{constructor|assignment operator}0 is const, but a member or base requires it to be non-const
the parameter for an explicitly-defaulted move %select{constructor|assignment operator}0 may not be const
an explicitly-defaulted %select{|copy |move }0constructor cannot have default arguments
an explicitly-defaulted %select{copy|move}0 assignment operator may not have 'const'%select{, 'constexpr'|}1 or 'volatile' qualifiers
explicitly-defaulted %select{copy|move}0 assignment operator must return %1
an explicitly-defaulted %select{|copy |move }0constructor cannot be variadic
the parameter for an explicitly-defaulted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 may not be volatile
definition of explicitly defaulted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor|function}0
definition of implicitly declared %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor|function}1
delegating constructors are permitted only in C++11
an initializer for a delegating constructor must appear alone
converting delete expression from type %0 to type %1 invokes an explicit conversion function
deleting incomplete class type %0; no conversions to pointer type
cannot delete expression of type %0
deleted definition must be first declaration
attempt to use a deleted function
constructor inherited by %0 from base class %1 is implicitly deleted
'main' is not allowed to be deleted
deleted function %0 cannot override a non-deleted function
typename specifier refers to %select{class template|function template|variable template|alias template|template template parameter|template}0 member in %1; argument deduction not allowed here
no candidate function template was found for dependent friend function template specialization
nested name specifier for a declaration cannot depend on a template parameter
type of specialized non-type template argument depends on a template parameter of the partial specialization
%select{declaration|definition}0 of %select{struct|interface|union|class|enum}1 in a dependent scope
non-type template argument specializes a template parameter with dependent type %0
dereference operator in '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null}0' is only allowed for function parameters
dereference of pointer to incomplete type %0
'objc_designated_initializer' attribute only applies to init methods of interface or class extension declarations
initialization of non-aggregate type %0 with a designated initializer list
designator in initializer for %select{scalar|indivisible sizeless}0 type %1
designator into flexible array member subobject
%select{no_destroy|always_destroy}0 attribute can only be applied to a variable with static or thread storage duration
destroying operator delete can have only an optional size and optional alignment parameter
destructor cannot be declared '%0'
identifier %0 in object destruction expression does not name the type %1 of the object being destroyed
identifier %0 in object destruction expression does not name a type
destructor type %0 in object destruction expression does not match the type %1 of the object being destroyed
expected the class name after '~' to name the enclosing class
identifier %0 after '~' in destructor name does not name a type
destructor must be a non-static member function
destructor cannot be redeclared
destructor cannot have a return type
destructor cannot be declared as a template
destructor cannot be variadic
destructor cannot have any parameters
invalid diagnostic type for 'diagnose_if'; use "error" or "warning" instead
conflicting asm label
declaration of %0 has a different language linkage
conflicting pass_object_size attributes on parameters
virtual function %0 has a different return type %diff{($) than the function it overrides (which has return type $)|than the function it overrides}1,2
dimension expression does not evaluate to a constant unsigned int
@selector expression formed with direct selector %0
attribute %0 cannot appear more than once on a declaration
exception specifications are not allowed beyond a single level of indirection
cannot cast %select{private|protected}2 base class %1 to %0
reference to %select{destructor|pseudo-destructor}0 must be called%select{|; did you mean to call it with no arguments?}1
reimplementation of category %1 for class %0
reimplementation of class %0
base class %0 specified more than once as a direct base class
duplicate case value '%0'
duplicate case value: '%0' and '%1' both equal '%2'
duplicate interface definition for class %0
instance variable is already declared
synthesized properties %0 and %1 both claim instance variable %2
duplicate member %0
duplicate declaration of method %0
property has a previous declaration
multiple vtable pointer authentication policies on %0
dynamic property cannot have instance variable specification
dynamic initialization is not supported for __device__, __constant__, __shared__, and __managed__ variables.
catch-all handler must come last
ISO C requires a named parameter before '...'
only function and template parameters can be parameter packs
scalar initializer cannot be empty
initializer for sizeless type %0 cannot be empty
non-integral type %0 is an invalid underlying type
mode %0 is not supported for enumeration types
enumeration previously declared with %select{non|}0fixed underlying type
enumeration previously declared as %select{un|}0scoped
enumeration redeclared with different underlying type %0 (was %1)
enumerator %0 does not exist in instantiation of %1
enumerator value is not representable in the underlying type %0
enumerator value %0 is not representable in the underlying type %1
the event_t type can only be used with __private address space qualifier
exception specification of %0 uses itself
exception specifications are not allowed in %select{typedefs|type aliases}0
exception specification needed for member of incomplete class %0
exception specification is not available until end of class definition
cannot use '%0' with exceptions disabled
excess elements in %select{array|vector|scalar|union|struct}0 initializer
excess elements in initializer for indivisible sizeless type %0
excess elements in char array initializer
expected an 'allocator' clause inside of the target region; provide an 'allocator' clause or use 'requires' directive with the 'dynamic_allocators' clause
expected an allocator expression inside of the target region; provide an allocator expression or use 'requires' directive with the 'dynamic_allocators' clause
expected a callable expression as %ordinal0 argument to %1, found %2
%0 is not a class%select{ or namespace|, namespace, or enumeration}1
kernel must have void return type
expected pointer to struct as %ordinal0 argument to %1, found %2
partial ordering for explicit instantiation of %0 is ambiguous
explicit instantiation cannot be 'constexpr'
explicit instantiation refers to static data member %q0 that is not an instantiation
explicit instantiation declaration (with 'extern') follows explicit instantiation definition (without 'extern')
explicit instantiation has dependent template arguments
duplicate explicit instantiation of %0
explicit instantiation of %0 in class scope
explicit instantiation cannot be 'inline'
explicit instantiation declaration of %0 with internal linkage
explicit instantiation refers to member function %q0 that is not an instantiation
explicit instantiation of %0 must occur at global scope
explicit instantiation of non-templated type %0
explicit instantiation of %0 does not refer to a function template, variable template, member function, member class, or static data member
explicit instantiation of typedef %0
explicit instantiation of %0 not in a namespace enclosing %1
explicit instantiation declaration requires a name
explicit instantiation cannot have a storage class
explicit instantiation of undefined function template %0
explicit instantiation of undefined %select{member class|member function|static data member}0 %1 of class template %2
explicit instantiation of undefined variable template %q0
explicit instantiation of %q0 must occur in namespace %1
explicit instantiation of %q0 must specify a template argument list
'explicit' can only be applied to a constructor or conversion function
'explicit' can only appear on non-static member functions
'explicit' can only be specified inside the class definition
explicit specialization has extraneous, inconsistent storage class '%select{none|extern|static|__private_extern__|auto|register}0'
anonymous namespaces cannot be exported
export declaration cannot be used in a private module fragment
inline function not defined%select{| before the private module fragment}0
declaration of %0 with internal linkage cannot be exported
cannot export %0 as it is not at namespace scope
export declaration can only be used within a module purview
module partition implementations cannot be exported
using declaration referring to %1 with %select{internal|module|unknown}0 linkage cannot be exported
export declaration appears within anonymous namespace
export declaration appears within another export declaration
%select{case value|enumerator value|non-type template argument|array size|explicit specifier argument|noexcept specifier argument|call to 'size()'|call to 'data()'}0 is not a constant expression
expression is not an %select{integer|integral}0 constant expression
expression is not a string literal
vector component access exceeds type %0
illegal vector component name '%0'
declaration of %1 %select{with C language linkage|in global scope}0 conflicts with declaration %select{in global scope|with C language linkage}0
non-inline external definitions are not permitted in C++ header units
extern declaration of %0 follows non-extern declaration
non-void block does not return a value
fallthrough annotation does not directly precede switch label
fallthrough annotation is outside switch statement
%0 attribute is only allowed on empty statements
field %0 declared as a function
field designator cannot initialize a %select{non-struct, non-union|non-class}0 type %1
field designator %0 does not refer to a non-static data member
field designator %0 does not refer to any field in type %1
field designator %0 does not refer to any field in type %1; did you mean %2?
field has %select{incomplete|sizeless}0 type %1
data member instantiated with function type %0
field may not be qualified with an address space
filter expression has non-integral type %0
declaration of %0 overrides a '%select{final|sealed}1' function
%0 cannot be set as a default pointer attribute
parameter of array type %0 decays to a __single pointer, and will not allow arithmetic
address argument to atomic arithmetic operation must be a pointer to '__unsafe_indexable' pointer (%0 invalid)
atomic operation on '%select{__indexable|__bidi_indexable|__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by}0' pointer is not yet supported
_Atomic on '%select{__indexable|__bidi_indexable|__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by|__terminated_by|end}0' pointer is not yet supported
passing %select{'__counted_by'|'__sized_by'|'__counted_by_or_null'|'__sized_by_or_null'|'__ended_by'|end}0 pointer as __auto_type initializer is not yet supported
parameter '%0' with '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by}1' attribute depending on an indirect count is implicitly read-only and cannot be passed as an indirect argument
arrays with an explicit size decay to counted pointers and cannot also have a count attribute
pointer cannot be '%0' and '__%select{bidi_indexable|indexable}1' at the same time
pointer cannot have count and range at the same time
%select{array|pointer}0 cannot have more than one %select{bound|type|count|end|terminator}1 attribute
cannot apply '__counted_by%select{|_or_null}2' attribute to %0 because %1 has unknown size%select{|; did you mean to use '__sized_by%select{|_or_null}2' instead?}3
cannot reference '%0' after it is changed during consecutive assignments
not allowed to change out parameter used as dependent count expression of other parameter
not allowed to change out parameter with dependent count
assignments to dependent variables should not have side effects between them
external count of a pointer cannot be used with inline assembly
argument of '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by}0' attribute cannot refer to declaration of a different lifetime
argument of '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by}0' attribute cannot refer to declaration from a different scope
initalizer for %select{count|size|'__counted_by' pointer|'__sized_by' pointer|'__counted_by_or_null' pointer|'__sized_by_or_null' pointer|'__ended_by' pointer|end pointer}0 with side effects is not yet supported
compound assignment on dynamic bound pointer type %0 with side effects is not yet supported;instead, use seperate assignment and binary expressions
%select{negative|positive}0 pointer arithmetic on %select{'__counted_by' |'__sized_by' |'__counted_by_or_null' |'__sized_by_or_null' |end |}1pointer%select{||||| that starts the '__ended_by' chain}1 always traps
conflicting '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by|__terminated_by}0' attribute with the previous %select{function|variable}1 declaration
argument of '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null}0' attribute can only reference function with 'const' attribute
argument of function call '%0' in '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null}1' attribute is not a constant expression
end-pointer must be '__single'
variable %0 cannot be used in multiple '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by}1' attributes
Firebloom forbids arithmetic on pointers to types with a flexible array member
flexible array member is initialized without a count
flexible array member is initialized with %0 element%select{|s}2, but count value is initialized to %1
'__unsafe_forge_%select{bidi_indexable|single|terminated_by}0' requires a pointer, array or integer address argument
'__unsafe_forge_bidi_indexable' requires an integer size argument
negative %select{address|size}0 argument to '__unsafe_forge_%select{bidi_indexable|single|terminated_by}1'
function pointers cannot be indexable
pointer with '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by}0' and the argument of the attribute must be defined in the same translation unit
incompatible count expression (%0) vs. (%1) in argument to function
type of %0, %1, is incompatible with parameter of type %2
incompatible dynamic count pointer argument to parameter of type %0
passing%select{| address of}1 %0 referred to by '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null}2' to a parameter that is not referred to by the same attribute
%select{%diff{assigning to $ from incompatible type $|assigning type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1|}2 is an unsafe operation; use '__unsafe_terminated_by_from_indexable()' or '__unsafe_forge_terminated_by()' to perform this conversion
%select{%diff{assigning to $ from incompatible type $|assigning type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1|}2 that adds '__terminated_by' attribute is not allowed
'__terminated_by' pointer converted from a string literal must be NUL-terminated
pointers with incompatible terminators %select{%diff{assigning to $ from incompatible type $|assigning type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1|}2
%select{%diff{assigning to $ from incompatible type $|assigning type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1|}2 requires a linear search for the terminator; use '__terminated_by_to_indexable()' to perform this conversion explicitly
%select{%diff{assigning to $ from incompatible type $|assigning type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1|}2 that discards '__terminated_by' attribute is not allowed
cannot %select{assign to indexable pointer with type %0 from __single pointer to incomplete type %1%select{|; consider declaring pointer '%3' as '__single'}4|pass __single pointer to incomplete type argument %0 when parameter is an indexable pointer %1; consider making the%select{| '%3'}4 parameter '__single'|return __single pointer to incomplete type %0 when return type is an indexable pointer %1; consider making the return type '__single'|convert __single pointer to incomplete type %0 to indexable pointer %1; consider making the destination '__single'|initialize indexable pointer with type %0 from __single pointer to incomplete type %1%select{|; consider declaring pointer '%3' as '__single'}4|send __single to incomplete type %0 to indexable pointer %1; consider making the destination '__single'|cast from __single pointer to incomplete type %0 to indexable pointer type %1}2
incrementing '%0' without updating '%1' always traps
incrementing '%0' always traps
decremented indexable pointer '%0' is out of bounds
array subscript with a negative index on indexable pointer '%0' is out of bounds
%select{|implicitly }0initializing negative %select{count|size}1 for %select{'__counted_by'|'__sized_by'}1 pointer%select{| field}3 %2
cannot initialize %select{'__counted_by'|'__sized_by'|'__counted_by_or_null'|'__sized_by_or_null'}0 pointer field %2 with %select{count|size}1 %3 which is larger than the actual %select{count|size}1 of the field initializer '%4'
bounds attribute '%select{__bidi_indexable|__indexable|__single|__unsafe_indexable}0' cannot be applied to attributed type %1 in this context%select{| due to the surrounding 'typeof' specifier}2
local dependent count decl should be declared side by side to its dependent pointer
attribute %0 is not allowed for local variables with external storage
base of member reference is a null pointer
incompatible pointer types assigning %0 with an expression with mismatching size attributes %1
assignment to %select{%2 |}3'%0' requires corresponding assignment to %select{|%2 }3'%1'; add self assignment '%1 = %1' if the value has not changed
multiple consecutive assignments to a %select{dynamic count|dynamic count pointer|ranged pointer}0 %1 must be simplified; keep only one of the assignments
negative %select{count|size}0 expression
%0 attribute on nested pointer type is only allowed on indirect parameters
%0 is not allowed for nested pointers
cannot extract the %select{lower|upper}0 bound of %1 because %select{it is not a pointer|it has no bounds specification|its bounds are not contained within the pointer}2
assignment to '%0' requires an immediately preceding assignment to '%1' with a wide pointer
local variable %0 must be declared right next to its dependent decl
non-pointer to safe pointer conversion is not allowed with firebloom; use '__unsafe_forge_single' or '__unsafe_forge_bidi_indexable'
array subscript on %select{single|'__terminated_by'}0 pointer '%1' %select{must use a constant index of 0 to be in bounds|is not allowed}0
pointer with bounds cannot be used with inline assembly
Pointer authentication is currently unsupported on indexable pointers
parameter '%0' with '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null}1' attribute depending on an indirect count is implicitly read-only
parameter '%0' %select{with '__ended_by' attribute depending on an indirect end pointer|referred to by an indirect '__ended_by' pointer}1 is implicitly read-only
attribute %0 is only allowed for struct fields or function parameters
pointer arithmetic on single pointer '%0' is out of bounds%select{|; consider adding '__counted_by' to '%2'}1
%0 cannot apply to arrays: use 'counted_by' instead
variable referred to by '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by}0' cannot be pointed to by any other variable; exception is when the variable is passed as a compatible argument to a function
pointer with '%select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null|__ended_by}0' cannot be pointed to by any other variable; exception is when the variable is passed as a compatible argument to a function
'__terminated_by' attribute cannot be applied to empty arrays
pointee types of the pointer and pointer to terminator arguments must be the same
pointee type of the pointer argument must be an integer or a non-wide pointer
pointer to terminator argument must be a pointer (%0 invalid)
pointer argument must be a safe pointer (%0 invalid)
incomplete array '%0' with '__terminated_by' attribute must be initialized with at least one element
pointer arithmetic on '__terminated_by' pointer '%0' can only increase the value by one
cannot decrement '__terminated_by' pointer '%0'
terminator in array '%0' must be a compile-time constant
array '%0' with '__terminated_by' attribute is initialized with an incorrect terminator (expected: %1; got %2)
terminator value is not a constant expression
pointer argument must be a '__terminated_by' pointer (%0 invalid)
pointer argument must be terminated by %0 (got %1)
array '%0' with '__terminated_by' attribute must be initialized
%select{element|pointee}0 type of %select{array|pointer}0 with '__terminated_by' attribute must be an integer or a non-wide pointer
array '%0' with '__terminated_by' attribute must be initialized with a string literal or an initializer list
'__terminated_by' attribute currently can be applied only to '__single' pointers
'__terminated_by' attribute can be applied to pointers, constant-length arrays or incomplete arrays
%0 inside typedef is only allowed for function type
__typeof__ on an expression of type %0 is not yet supported
conversion from pointer type %0 to a counted pointer of %1 elements never succeeds
conversion from pointer type %0 with pointee of size %1 to sized pointer type with greater size %2 never succeeds
bounds attribute '%select{__bidi_indexable|__indexable|__single|__unsafe_indexable}0' cannot be applied to an undeduced type
%select{%diff{assigning to $ from incompatible type $|assigning type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1|}2 casts away '__unsafe_indexable' qualifier; use '__unsafe_forge_single' or '__unsafe_forge_bidi_indexable' to perform this conversion
taking the address of an incomplete __counted_by array is not yet supported
passing%select{| address of}1 %0 as an indirect parameter; must also pass %2 %select{|or its address }3because the type of %select{%0|%2}4, %5, refers to %select{%2|%0}4
void pointers must use a byte count attribute instead of an item count
first argument to __builtin_call_with_static_chain must not be a block call
first argument to __builtin_call_with_static_chain must not be a builtin call
first argument to __builtin_call_with_static_chain must be a non-member call expression
first argument to __builtin_call_with_static_chain must not be a pseudo-destructor call
first argument to 'va_arg' is of type %0 and not 'va_list'
ARC forbids flexible array members with retainable object type
flexible array member %0 not allowed in otherwise empty %select{struct|interface|union|class|enum}1
flexible array member %0 of type %1 with non-trivial destruction
initialization of flexible array member is not allowed
flexible array requires brace-enclosed initializer
Firebloom forbids passing %0 by copy because it has a flexible array member
flexible array member %0 with type %1 is not at the end of %select{struct|interface|union|class|enum}2
flexible array member %0 in a union is not allowed
flexible array member %0 not allowed in %select{struct|interface|union|class|enum}1 which has a virtual base class
expression not permitted as operand of fold expression
unary fold expression has empty expansion for operator '%0' with no fallback value
instantiating fold expression with %0 arguments exceeded expression nesting limit of %1
binary fold expression has unexpanded parameter packs in both operands
for range declaration must declare a variable
cannot use type %0 as a range
invalid range expression of type %0; did you mean to dereference it with '*'?
cannot use incomplete type %0 as a range
invalid range expression of type %0; no viable '%select{begin|end}1' function available
cannot use type %0 as an iterator
loop variable %0 may not be declared %select{'extern'|'static'|'__private_extern__'|'auto'|'register'|'constexpr'|'thread_local'}1
format attribute cannot specify the implicit this argument as the format string
format argument not a string type
function does not return %0
strftime format attribute requires 3rd parameter to be 0
ISO C++ forbids forward references to 'enum' types
attempting to use the forward class %0 as superclass of %1
explicit qualification required to use member %0 from dependent base class
member %0 used before its declaration
friend declaration of %0 does not match any declaration in %1
friend declaration specifying a default argument must be a definition
friend declaration specifying a default argument must be the only declaration
friend function cannot be defined in a local class
friends cannot be members of the declaring class
'friend' must appear first in a non-function declaration
incomplete result type %0 in function definition
function cannot return %select{array|function}0 type %1
function cannot return qualified void type %0
function declared with %0 attribute was previously declared without the %0 attribute
functions may not be declared with 'cmse_nonsecure_call' attribute
%0 marked 'override' but does not override any member functions
type %0 of function parameter pack does not contain any unexpanded parameter packs
argument must be a function
function template partial specialization is not allowed
function template specialization %0 ambiguously refers to more than one function template; explicitly specify%select{| additional}1 template arguments to identify a particular function template
no function template matches function template specialization %0
weak attribute declared on a __strong type property in GC mode
controlling expression type %0 compatible with %1 generic association types
controlling expression type %0 not compatible with any generic association type
__builtin_get_vtable_pointer requires an argument of%select{| polymorphic}0 class pointer type, but %1 %select{was provided|has no virtual methods}0
__builtin_get_vtable_pointer requires an argument with a complete type, but %0 is incomplete
no getter method for read from property
call to global function %0 not configured
cannot jump from this goto statement to its label
cannot jump from this goto statement to label %0 inside an inline assembly block
half precision constant requires cl_khr_fp16
invalid argument: symbol must be a device-side function or global variable
attribute %0 only applies to %1
attribute %0 only applies to a field or parameter of type '%1'
attribute %0 is unsupported in %select{Pixel|Vertex|Geometry|Hull|Domain|Compute|Library|RayGeneration|Intersection|AnyHit|ClosestHit|Miss|Callable|Mesh|Amplification|Invalid}1 shaders, requires %2
%0 attribute parameters do not match the previous declaration
%0 attribute on entry function does not match the pipeline stage
invalid space specifier '%0' used; expected 'space' followed by an integer, like space1
initializer priorities are not supported in HLSL
missing numthreads attribute for %0 shader entry
semantic annotations must be present for all parameters of an entry function or patch constant function
argument '%select{X|Y|Z}0' to numthreads attribute cannot exceed %1
total number of threads cannot exceed %0
the '%select{&|*|->}0' operator is unsupported in HLSL
%select{pointers|references}0 are unsupported in HLSL
register number should be an integer
invalid resource class specifier '%0' used; expected 'b', 's', 't', or 'u'
type argument of iboutletcollection attribute cannot be a builtin type
invalid type %0 as argument of iboutletcollection attribute
ambiguous conversion from type %0 to an integral or unscoped enumeration type
integral constant expression requires explicit conversion from %0 to %1
integral constant expression has incomplete class type %0
%select{integer|integral}1 constant expression must have %select{integer|integral or unscoped enumeration}1 type, not %0
integer constant expression evaluates to value %0 that cannot be represented in a %1-bit %select{signed|unsigned}2 integer type
a parameter list without types is only allowed in a function definition
illegal operation on Objective-C container subscripting
'%0' declared as array of functions of type %1
'%0' declared as array of references of type %1
'%0' does not point into a class
'%0' declared as a member pointer to a reference of type %1
'%0' declared as a member pointer to void
'%0' declared as a pointer to a reference of type %1
illegal initializer (only variables can be initialized)
illegal initializer type %0
Objective-C message has incomplete result type %0
illegal qualifiers on @catch parameter
%select{anonymous struct|union}0 member %1 has a non-trivial %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}2
imaginary types are not supported
immediate function %0 used before it is defined
implicit conversion from %0 to %1 is not permitted in C++
cannot declare implementation of a class declared with the 'objc_class_stub' attribute
std::nothrow was not found; include <new> before defining a coroutine which uses get_return_object_on_allocation_failure()
initializer for aggregate with no elements requires explicit braces
implicit instantiation of undefined member %0
cannot %select{use builtin operator '<=>'|default 'operator<=>'}1 because type '%0' was not found; include <compare>
%0 type was not found; include <coroutine> before defining a coroutine
this function cannot be a coroutine: %0 is not a class
this function cannot be a coroutine: %q0 has no member named 'promise_type'
cannot deduce type of initializer list because std::initializer_list was not found; include <initializer_list>
static data member of type %0 must be initialized out of line
in-class initializer for static data member of type %0 requires 'constexpr' specifier
non-const static data member must be initialized out of line
in-class initializer for static data member is not a constant expression
static const volatile data member must be initialized out of line
attribute %0 is already applied with different arguments
target exception specification is not superset of source
conversion between pointers to functions with incompatible firebloom attributes
%select{%diff{assigning to $ from incompatible type $|assigning to type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1}2
API notes replacement type %0 has a different size from original type %1
incompatible vector types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2
base class has incomplete type
enumeration %0 is incomplete
%select{|pointer to |reference to }0incomplete type %1 is not allowed in exception specification
member access into incomplete type %0
incomplete type %0 named in nested name specifier
incomplete type in call to object of type %0
incomplete receiver type %0
cannot synthesize property %0 with incomplete type %1
incomplete type %0 where a complete type is required
'@encode' of incomplete type %0
incomplete type %0 used in type trait expression
cannot set vtable pointer authentication on an incomplete type %0
'typeid' of incomplete type %0
inconsistent number of instance variables specified
defaulted declaration of %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 cannot be consteval because implicit definition is not constexpr
defaulted definition of %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 is not constexpr
number of elements must be either one or match the size of the vector
cannot %select{decrement|increment}0 expression of enum type %1
cannot jump from this %select{indirect|asm}0 goto statement to one of its possible targets
indirect goto in function with no address-of-label expressions
cannot deduce type for lambda capture %0 from initializer of type %2
cannot deduce type for lambda capture %0 from initializer list
initializer for lambda capture %0 contains multiple expressions
initializer missing for lambda capture %0
cannot deduce type for lambda capture %1 from %select{parenthesized|nested}0 initializer list
cannot initialize %select{a variable|a parameter|template parameter|return object|statement expression result|an exception object|a member subobject|an array element|a new value|a value|a base class|a constructor delegation|a vector element|a block element|a block element|a complex element|a lambda capture|a compound literal initializer|a related result|a parameter of CF audited function|a structured binding|a member subobject}0 %diff{of type $ with an %select{rvalue|lvalue}2 of type $|with an %select{rvalue|lvalue}2 of incompatible type}1,3%select{|: different classes%diff{ ($ vs $)|}5,6|: different number of parameters (%5 vs %6)|: type mismatch at %ordinal5 parameter%diff{ ($ vs $)|}6,7|: different return type%diff{ ($ vs $)|}5,6|: different qualifiers (%5 vs %6)|: different exception specifications}4
initializer element is not a compile-time constant
cannot create object of function type %0
initialization of incomplete type %0
%select{|non-aggregate }0type %1 cannot be initialized with an initializer list
init methods must return an object pointer type, not %0
initialization of non-aggregate type %0 with an initializer list
cannot initialize Objective-C class type %0
can only use 'init_priority' attribute on file-scope definitions of objects of class type
reference member of type %0 uninitialized
initializer would partially override prior initialization of object of type %1 with non-trivial destruction
initializer-string for char array is too long, array size is %0 but initializer has size %1 (including the null terminating character)
inline declaration of %0 follows non-inline definition
inline declaration of %0 not allowed in block scope
'main' is not allowed to be declared inline
non-inline namespace cannot be reopened as inline
cannot declare the namespace 'std' to be inline
'inline' can only appear on functions%select{| and non-local variables}0
invalid block pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2
integer sequences must have integral element type
integer sequences must have non-negative sequence length
%plural{[0,2]:must use a qualified name when declaring|3:cannot declare}0 a %select{constructor|destructor|conversion operator|deduction guide}0 as a friend
invalid address discrimination mode %0
invalid use of a cast in a inline asm context requiring an lvalue: remove the cast or build with -fheinous-gnu-extensions
value '%0' out of range for constraint '%1'
invalid reinterpretation: sizes of %0 and %1 must match
invalid authentication key %0
interface type cannot inherit from %select{struct|non-public interface|class}0 %1
invalid or misplaced branch protection specification '%0'
collection element of type %0 is not an Objective-C object
'_Complex %0' is invalid
call to %select{immediate|consteval}1 function %q0 is not a constant expression
%0 cannot be declared consteval
cannot take address of %select{immediate|consteval}2 %select{function|call operator of}1 %0 outside of an immediate invocation
%select{function parameter|typedef}0 cannot be %select{<ERROR>|constexpr|consteval|constinit}1
non-static data member cannot be constexpr%select{; did you intend to make it %select{const|static}0?|}1
constexpr variable declaration must be a definition
invalid conversion between ext-vector type %0 and %1
conversion between matrix type %0 and incompatible type %1 is not allowed
conversion between matrix types%diff{ $ and $|}0,1 of different size is not allowed
invalid conversion between vector type %0 and integer type %1 of different size
invalid conversion between vector type %0 and scalar type %1
invalid conversion between vector type%diff{ $ and $|}0,1 of different size
invalid cpu name for builtin
invalid option '%0' for %select{cpu_specific|cpu_dispatch}1
invalid cpu feature string for builtin
invalid custom discrimination
count expression %select{on struct field|in function declaration}0 may only reference %select{other fields of the same struct|parameters of that function}0
cannot use %0 on union fields
cannot combine with previous '%0' declaration specifier
invalid declaration specifier in template non-type parameter
definition or redeclaration of %0 cannot name the global scope
definition or redeclaration of %0 not allowed inside a block
definition or redeclaration of %0 not allowed inside a function
cannot define or redeclare %0 here because namespace %1 does not enclose namespace %2
invalid extra discrimination selection %0
cannot create a non-constant pointer to member function
invalid use of incomplete type %0
mask type size must be between 1-byte and 8-bytes
invalid use of member %0 in static member function
%0 is an invalid name for a module
incompatible constant for this __builtin_neon function
invalid use of non-static data member %0
%0 is not a valid literal type for NSNumber
invalid PCS type
'__pixel' must be preceded by '__vector'.  '%0' declaration specifier not allowed here
%0 is not a valid property name (accessing an object of type %1)
invalid protocol qualifiers on non-ObjC type
'%0' qualifier is not allowed on a constructor
'%0' qualifier is not allowed on a destructor
%select{non-member function|static member function|deduction guide}0 %select{of type %2 |}1cannot have '%3' qualifier
receiver type %0 is not an Objective-C class
'super' is only valid in a method body
function %0 can only be directly called
'_Sat' specifier is only valid on '_Fract' or '_Accum', not '%0'
'%0' cannot be signed or unsigned
invalid use of '__super', this keyword can only be used inside class or member function scope
invalid use of 'this' outside of a non-static member function
'%0' is only allowed on variable declarations
the %0 type cannot be used to declare a program scope variable
invalid application of __builtin_xnu_type_%select{signature|summary}0 to %select{variable array}1 type %2
an array type is not allowed here
a function type is not allowed here
type %2 of %select{explicit instantiation|explicit specialization|partial specialization|redeclaration}0 of %1 does not match expected type %3
cannot use '%0' with '__vector bool'
use of '__int128' with '__vector bool' requires VSX support enabled (on POWER10 or later)
cannot combine with previous '%0' declaration specifier. '__vector' must be first
use of 'double' with '__vector' requires VSX support to be enabled (available on POWER7 or later)
cannot use 'float' with '__vector'
use of '__int128' with '__vector' requires extended Altivec support (available on POWER8 or later)
cannot use 'long' with '__vector'
cannot use 'long double' with '__vector'
use of 'long long' with '__vector' requires VSX support (available on POWER7 or later) to be enabled
'%select{|short|long|long long}0 %1' is invalid
property %0 not found on object of type %1; did you mean to access instance variable %2?
property %0 attempting to use instance variable %1 declared in super class %2
instance variables cannot be of reference type
instance variable %0 accessed in class method
kernel call to non-global function %0
kernel function %0 must be a free function or static member function
kernel function type %0 must have void return type
pointer arguments to kernel functions must reside in '__global', '__constant' or '__local' address space
unnamed variable cannot be implicitly captured in a lambda expression
lambda expression in default argument cannot capture any entity
variable %0 with flexible array member cannot be captured in a lambda expression
cannot assign to a variable captured by copy in a non-mutable lambda
variable %0 cannot be implicitly captured in a lambda with no capture-default specified
a lambda expression may not appear inside of a constant expression
a lambda expression cannot appear in this context
incomplete result type %0 in lambda expression
cannot deduce lambda return type from initializer list
lambda expression in an unevaluated operand
unknown linkage language
cannot apply asm label to %select{variable|function}0 after its first use
'lifetimebound' attribute cannot be applied to a %select{constructor|destructor}0
'lifetimebound' attribute cannot be applied; %select{static |non-}0member function has no implicit object parameter
cannot initialize %select{non-class|reference}0 type %1 with a parenthesized initializer list
non-template literal operator must have one or two parameters
literal operator cannot have a default argument
literal operator must have C++ linkage
non-namespace scope '%0' cannot have a literal operator member
parameter of literal operator must have type 'unsigned long long', 'long double', 'char', 'wchar_t', 'char16_t', 'char32_t', or 'const char *'
literal operator %0 must be in a namespace or global scope
invalid literal operator parameter type %0, did you mean %1?
template parameter list for literal operator must be either 'char...' or 'typename T, T...'
literal operator template cannot have any parameters
second argument to __builtin_load_member_function_pointer must be the address of a C++ member function: for example '&Foo::func', or null
first argument to __builtin_load_member_function_pointer must have C++ class type
variable with 'loader_uninitialized' attribute cannot have an initializer
variable %0 cannot be declared both 'extern' and with the 'loader_uninitialized' attribute
redeclaration cannot add 'loader_uninitialized' attribute
variable with 'loader_uninitialized' attribute must have a trivial default constructor
'__local' variable cannot have an initializer
this builtin requires target: loongarch32
this builtin requires target: loongarch64
%select{non-const|volatile}0 lvalue reference to type %1 cannot bind to an initializer list temporary
%select{non-const|volatile}0 lvalue reference %diff{to type $ cannot bind to a temporary of type $|cannot bind to incompatible temporary}1,2
%select{non-const|volatile}0 lvalue reference %diff{to type $ cannot bind to a value of unrelated type $|cannot bind to a value of unrelated type}1,2
rvalue reference %diff{to type $ cannot bind to lvalue of type $|cannot bind to incompatible lvalue}0,1
%select{unknown|unsupported}0 machine mode %1
%select{first|second|third|fourth}0 parameter of 'main' (%select{argument count|argument array|environment|platform-specific data}0) must be of type %1
main cannot be declared as global variable
'main' must return 'int'
too many parameters (%0) for 'main': must be 0, 2, or 3
%0 cannot be a template
'%select{make_unsigned|make_signed}0' is only compatible with non-%select{bool|_BitInt(1)}1 integers and enum types, but was given %2%select{| whose underlying type is %4}3
std::coroutine_handle isn't a class template
std::coroutine_traits isn't a class template
std::initializer_list must be a class template with a single type parameter
std::nothrow must be a valid variable declaration
single subscript expressions are not allowed for matrix values
matrix %select{row|column}0 index is not an integer
matrix %select{row|column}0 index is outside the allowed range [0, %1)
matrix row and column subscripts cannot be separated by any expression
comma expressions are not allowed as indices in matrix subscript expressions
non-void block does not return a value in all control paths
member initializer %0 does not name a non-static data member or base class
initializer %0 does not name a non-static data member or base class; did you mean the %select{base class|member}1 %2?
call to non-static member function without an object argument
out-of-line %select{declaration|definition}2 of %0 does not match any declaration in %1
out-of-line %select{declaration|definition}2 of %0 does not match any declaration in %1; did you mean %3?
return type of out-of-line definition of %q0 differs from that in the declaration
out-of-line definition of %0 from class %1 without definition
extra qualification on member %0
'this' argument to member function %0 has type %1, but function is not marked %select{const|restrict|const or restrict|volatile|const or volatile|volatile or restrict|const, volatile, or restrict}2
'this' argument to member function %0 is an %select{lvalue|rvalue}1, but function has %select{non-const lvalue|rvalue}2 ref-qualifier
cannot initialize object parameter of type %0 with an expression of type %1
initializer on function does not look like a pure-specifier
member %0 has the same name as its class
no member %0 in %1; it has not yet been instantiated
non-friend class member %0 cannot have a qualified name
class member cannot be redeclared
multiple overloads of %0 instantiate to the same signature %1
base of member reference is a function; perhaps you meant to call it%select{| with no arguments}0?
member %0 cannot have template arguments
member pointer refers into non-class type %0
conversion from pointer to member of class %0 to pointer to member of class %1 via virtual base %2 is not allowed
member pointer has incomplete base type %0
at least one argument of MTE builtin function must be a pointer (%0, %1 invalid)
%0 argument of MTE builtin function must be an integer type (%1 invalid)
%0 argument of MTE builtin function must be a pointer (%1 invalid)
%0 argument of MTE builtin function must be a null or a pointer (%1 invalid)
messaging a Class with a method that is possibly direct
messaging super with a direct method
messaging unqualified id with a method that is possibly direct
kernel functions cannot be class members
%select{instance|class}1 method %0 not found ; did you mean %2?
this builtin requires 'dsp' ASE, please use -mdsp
this builtin requires 'dsp r2' ASE, please use -mdspr2
this builtin requires 'msa' ASE, please use -mmsa
derived class must specify the same code segment as its base classes
overriding virtual function must specify the same code segment as its overridden function
exception specification in declaration does not match previous declaration
exception specification in explicit instantiation does not match instantiated one
inheritance model does not match %select{definition|previous declaration}0
declaration of %0 in %select{the global module|module %2}1 follows declaration in %select{the global module|module %4}3
uuid does not match previous declaration
visibility does not match previous declaration
instance variables may not be placed in %select{categories|class extension}0
missing actual type specifier for pipe
missing state for %0
%select{string|numeric}0 literal must be prefixed by '@'
missing custom discrimination
%select{constructor for %1 must explicitly initialize the|implicit default constructor for %1 must explicitly initialize the|cannot use constructor inherited from base class %4;}0 %select{base class|member}2 %3 %select{which|which|of %1}0 does not have a default constructor
%0 is missing exception specification '%1'
missing context for method declaration
missing '[' at start of message send expression
missing context for property implementation declaration
property implementation in a category with no category declaration
synthesized property %0 must either be named the same as a compatible instance variable or must explicitly name an instance variable
a type specifier is required for all declarations
cannot use %select{C++ 'try'|Objective-C '@try'}0 in the same function as SEH '__try'
mode attribute only supported for integer and floating-point types
type of machine mode does not match type of base type
'module' declaration found while building header unit
'module' declaration found while building module from module map
module declaration must occur at the start of the translation unit
missing 'export module' declaration in module interface unit
missing 'module' declaration at end of global module fragment introduced here
@import of module '%0' in implementation of '%1'; use #import
import of module '%0' appears within %1
missing 'export' specifier in module declaration while building module interface
definition of module '%0' is not available; use -fmodule-file= to specify path to precompiled module interface
%select{local variable|parameter|typedef}0 %1 cannot be declared __module_private__
local %select{struct|interface|union|class|enum}0 cannot be declared __module_private__
%select{template|partial|member}0 specialization cannot be declared __module_private__
translation unit contains multiple module declarations
redefinition of module '%0'
import of module '%0' appears within same top-level module '%1'
import of module '%0' appears within its own %select{interface|implementation}1
%select{declaration|definition|default argument|explicit specialization|partial specialization}0 of %1 must be imported from module '%2' before it is required
%select{missing '#include'|missing '#include %3'}2; %select{||default argument of |explicit specialization of |partial specialization of }0%1 must be %select{declared|defined|defined|declared|declared}0 before it is used
%select{declaration|definition|default argument|explicit specialization|partial specialization}0 of %1 must be imported from one of the following modules before it is required:%2
'__leave' statement not in __try block
'__builtin_ms_va_start' used in System V ABI function
arguments to __annotation must be wide string constants
multiple initializations given for base %0
multiple coupled declarations in a firebloom attribute are not supported yet
multiple default labels in one switch
virtual function %q0 has more than one final overrider in %1
multiple initializations given for non-static member %0
initializing multiple members of union
function declaration cannot become a multiversioned function after first usage
multiversioned function declaration has a different %select{calling convention|return type|constexpr specification|inline specification|linkage|language linkage}0
attribute '%select{|target|cpu_specific|cpu_dispatch|target_clones|target_version}0' multiversioning cannot be combined with attribute %1
attribute '%select{|target|cpu_specific|cpu_dispatch|target_clones|target_version}0' multiversioned functions do not yet support %select{function templates|virtual functions|deduced return types|constructors|destructors|deleted functions|defaulted functions|constexpr functions|consteval function|lambdas}1
multiversioned function redeclarations require identical target attributes
multiversioned function must have a prototype
'main' cannot be a multiversioned function
function multiversioning is not supported on the current target
function declaration is missing %select{'target'|'cpu_specific' or 'cpu_dispatch'|'target_version'}0 attribute in a multiversioned function
multiversioning attributes cannot be combined
cannot perform a tail call to function%select{| %1}0 because it uses an incompatible calling convention
%0 attribute cannot be used from %select{a block|an Objective-C function|this context}1
%select{non-member|static member|non-static member}0 function cannot perform a tail call to %select{non-member|static member|non-static member|pointer-to-member}1 function%select{| %3}2
cannot perform a tail call to function%select{| %1}0 because its signature is incompatible with the calling function
%0 attribute requires that the return value is the result of a function call
%0 attribute requires that both caller and callee functions have a prototype
tail call requires that the return value, all parameters, and any temporaries created by the expression are trivially destructible
%0 attribute may not be used with variadic functions
cannot perform a tail call from this return statement
cannot perform a tail call %select{from|to}0 a %select{constructor|destructor}1
'mutable' and 'const' cannot be mixed
'mutable' cannot be applied to functions
'mutable' can only be applied to member variables
'mutable' cannot be applied to references
no matching %0 function for non-allocating placement new expression; include <new>
you need to include <typeinfo> before using the 'typeid' operator
%select{%diff{assigning to $ from $|assigning to incompatible nested pointer type}0,1|%diff{passing $ to parameter of incompatible nested pointer type $|passing to parameter of incompatible nested pointer type}0,1|%diff{returning $ from a function with result of incompatible nested pointer type $|returning from function with return of incompatible nested pointer type}0,1|%diff{converting $ to incompatible nested pointer type $|converting between incompatible nested pointer types}0,1|%diff{initializing $ with an expression of incompatible nested pointer type $|initializing with expression of incompatible nested pointer type}0,1|%diff{sending $ to parameter of incompatible nested pointer type $|sending to parameter of incompatible nested pointer type}0,1|%diff{casting $ to incompatible nested pointer type $|casting between incompatible nested pointer types}0,1}2; use explicit cast to perform this conversion
lookup of %0 in member access expression is ambiguous
%0 cannot appear before '::' because it is not a class%select{ or namespace|, namespace, or enumeration}1; did you mean ':'?
type %0 cannot be used prior to '::' because it has no members
%select{call to non-static member function|use of non-static data member}0 %2 of %1 from nested type %3
%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers in nested pointer types
nested redefinition of %0
'abi_tag' %0 missing in original declaration
array 'new' cannot have initialization arguments
only the first dimension of an allocated array may have dynamic size
cannot allocate array of 'auto'
cannot determine allocated array size from initializer
allocation of %select{incomplete|sizeless}0 type %1
no %select{getter|setter}0 defined for property %1
invalid use of '__super', %0 has no base classes
declaration does not declare anything
cannot specify a default vtable pointer authentication %select{key|address discrimination mode|discriminator}0 with no default set
use of dynamic_cast requires -frtti
no matching function found in local scope
no matching function %0 found in local scope; did you mean %3?
no member named %0 in %1
no member named %0 in %1; did you mean to use '->' instead of '.'?
no member named %0 in %1; did you mean %select{|simply }2%3?
no template named %0 in %1
no template named %0 in %1; did you mean %select{|simply }2%3?
cannot find interface declaration for %0
expression is not assignable
no suitable member %0 in %1
no @interface declaration found in class messaging of %0
no template named %0
no template named %0; did you mean %1?
use of typeid requires -frtti
no viable destructor found for class %0
a getter method is needed to perform a compound assignment on a property
no getter method %1 for %select{increment|decrement}0 of property
non-ASM statement in naked function is not supported
atomic constraint must be of type 'bool' (found %0)
anonymous non-C-compatible type given name for linkage purposes by %select{typedef|alias}0 declaration after its linkage was computed; add a tag name here to establish linkage prior to definition
substitution into constraint expression resulted in a non-constant expression
non-consteval function %0 cannot override a consteval function
non-deleted function %0 cannot override a deleted function
a randomized struct can only be initialized with a designated initializer
non-extern declaration of %0 follows extern declaration
defaulting %select{this %select{<ERROR>|equality|three-way|equality|relational}1 comparison operator|the corresponding implicit 'operator==' for this defaulted 'operator<=>'}0 would delete it after its first declaration
defaulting this %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator is not allowed because it was already declared outside the class
declaration of non-local variable in 'for' loop
cannot set vtable pointer authentication on monomorphic type %0
non-static declaration of %0 follows static declaration
member %0 of %1 is not a template; did you mean %select{|simply }2%3?
%0 does not name a template but is followed by template arguments
%0 does not name a template but is followed by template arguments; did you mean %1?
non-thread-local declaration of %0 follows thread-local declaration
cannot set vtable pointer authentication on %0 which is a subclass of polymorphic type %1
cannot %select{use type %1 for a function/method parameter|use type %1 for function/method return|default-initialize an object of type %1|declare an automatic variable of type %1|copy-initialize an object of type %1|assign to a variable of type %1|construct an automatic compound literal of type %1|capture a variable of type %1|cannot use volatile type %1 where it causes an lvalue-to-rvalue conversion}3 since it %select{contains|is}2 a union that is non-trivial to %select{default-initialize|destruct|copy}0
template argument / label address difference / what did you expect?
non-type template argument refers to subobject '%0'
sorry, non-type template argument of type %0 is not yet supported
qualified name refers into a specialization of %select{function|variable}0 template %1
non-type template parameter %0 with type %1 has incompatible initializer of type %2
non-variable declaration in 'for' loop
%0 is not virtual and cannot be declared pure
block pointer to non-function type is invalid
non-static data member defined out-of-line
address argument to nontemporal builtin must be a pointer (%0 invalid)
address argument to nontemporal builtin must be a pointer to integer, float, pointer, or a vector of such types (%0 invalid)
block declared 'noreturn' should not return
lambda declared 'noreturn' should not return
'_Noreturn' can only appear on functions
%select{assignment to readonly property|no setter method %1 for assignment to property}0
%select{%select{increment|decrement}1 of readonly property|no setter method %2 for %select{increment|decrement}1 of property}0
cannot specialize a %select{dependent template|template template parameter}0
type %0 is not a direct or virtual base of %1
call to function %0 that is neither visible in the template definition nor found by argument-dependent lookup
anonymous bit-field has non-integral type %0
bit-field %0 has non-integral type %1
no %select{struct|interface|union|class|enum}0 named %1 in %2
%0 attribute only applies to %select{Objective-C object|pointer|pointer-to-CF-pointer}1 parameters
overriding method has mismatched ns_consumed attribute on its parameter
domain argument %select{|%1 }0does not refer to global constant
domain argument %0 does not point to an NSString or CFString constant
'NSObject' attribute is for pointer types only
overriding method has mismatched ns_returns_%select{not_retained|retained}0 attributes
nullability keyword %0 cannot be applied to multi-level pointer type %1
nullability specifier %0 cannot be applied to non-pointer type %1
cannot cast an object of type %select{'nullptr_t' to %1|%1 to 'nullptr_t'}0
array of interface %0 is invalid (probably should be an array of pointers)
parameter of %0 attribute must be a single name of an Objective-C %select{class|protocol}1
attribute %0 can only be applied to @protocol definitions, not forward declarations
parameter of %0 attribute must be 'id' when used on a typedef
'objc_bridge(id)' is only allowed on structs and typedefs of void pointers
could not find Objective-C class %0 to convert %1 to %2
%0 must be name of an Objective-C class to be able to convert %1 to %2
%0 must be explicitly converted to %1; use %select{%objcclass2|%objcinstance2}3 method for this conversion
CF object of type %0 is bridged to %1, which is not an Objective-C class
Objective-C declarations may only appear in global scope
%select{|direct }0%select{method|property}1 declaration conflicts with previous %select{|direct }2declaration of %select{method|property}1 %3
direct property cannot be @dynamic
direct method was declared in %select{the primary interface|an extension|a category}0 but is implemented in %select{the primary interface|a category|a different category}1
direct method implementation was previously declared not direct
methods that %select{override superclass methods|implement protocol requirements}0 cannot be direct
'objc_direct' attribute cannot be applied to %select{methods|properties}0 declared in an Objective-C protocol
%select{category %1|class extension}0 cannot conform to protocol %2 because of direct members declared in interface %3
cannot use '%0' with Objective-C exceptions disabled
initialization statement is not supported when iterating over Objective-C collection
illegal type %0 used in a boxed expression
incomplete type %0 used in a boxed expression
Objective-C index expression has incomplete class type %0
method for accessing %select{dictionary|array}1 element must have Objective-C object return type instead of %0
'__kindof' specifier cannot be applied to non-object type %0
'__kindof' type specifier must precede the declarator
literal construction method %0 has incompatible signature
%select{an array|a dictionary|a numeric literal|a boxed expression|}0 literal can only be used at file scope if %select{its contents are all also constant literals|its contents are all also constant literals and its keys are string literals|constant|constant}0
%0 %select{parameter|return}1 type is unsupported; support for vector types for this target is introduced in %2
indexing expression is invalid because subscript type %0 has multiple type conversion functions
cannot use a protocol declared 'objc_non_runtime_protocol' in a @protocol expression
non-trivially copyable type %0 cannot be used in a boxed expression
ObjectiveC object of type %0 is bridged to %1, which is not valid CF object
cannot assign to class object (%0 invalid)
cannot catch an Objective-C object by value
cannot override a method that is declared direct by a superclass
%select{extension|category}0 of non-parameterized class %1 cannot have type parameters
forward declaration of non-parameterized class %0 cannot have type parameters
class %0 previously declared with type parameters
objc_precise_lifetime only applies to retainable types; type here is %0
property attributes '%0' and '%1' are mutually exclusive
property with '%0' attribute must be of object type
objc_root_class attribute may only be specified on a root class declaration
cannot implement a category for class %0 that is only visible via the Objective-C runtime
cannot implement subclass %0 of a superclass %1 that is only visible via the Objective-C runtime
%select{dictionary|array}1 subscript base type %0 is not an Objective-C object
method object parameter type %0 is not object type
method index parameter type %0 is not integral type
method key parameter type %0 is not object type
expected method to %select{read|write}1 %select{dictionary|array}2 element not found on object of type %0
cannot assign to this %select{dictionary|array}1 because assigning method's 2nd parameter of type %0 is not an Objective-C pointer type
indexing expression is invalid because subscript type %0 is not an Objective-C pointer
indexing expression is invalid because subscript type %0 is not an integral or Objective-C pointer type
@synchronized requires an Objective-C object type (%0 invalid)
@throw requires an Objective-C object type (%0 invalid)
type argument %0 does not satisfy the bound (%1) of type parameter %2
type argument %0 cannot explicitly specify nullability
no type or protocol named %0
type argument %0 must be a pointer (requires a '*')
type argument %0 is neither an Objective-C object nor a block type
type argument %0 cannot be qualified with '%1'
angle brackets contain both a %select{type|protocol}0 (%1) and a %select{protocol|type}0 (%2)
type arguments cannot be applied to non-class type %0
type arguments cannot be applied to non-parameterized class %0
type arguments cannot be applied to already-specialized class type %0
too %select{many|few}0 type arguments for class %1 (have %2, expected %3)
%select{forward class declaration|class definition|category|extension}0 has too %select{few|many}1 type parameters (expected %2, have %3)
type bound %0 for type parameter %1 conflicts with %select{implicit|previous}2 bound %3%select{for type parameter %5|}4
type parameter %0 bound %1 cannot explicitly specify nullability
missing type bound %0 for type parameter %1 in %select{@interface|@class}2
missing '*' in type bound %0 for type parameter %1
type bound %0 for type parameter %1 is not an Objective-C pointer type
type bound %1 for type parameter %0 cannot be qualified with '%2'
redeclaration of type parameter %0
%select{in|co|contra}0variant type parameter %1 conflicts with previous %select{in|co|contra}2variant type parameter %3
cannot declare variable inside @interface or @protocol
field %0 with variable sized type %1 is not at the end of class
interface type %1 cannot be %select{returned|passed}0 by value; did you forget * in %1?
offsetof requires array type, %0 invalid
cannot compute offset of bit-field %0
invalid application of 'offsetof' to a field of a virtual base
offsetof of incomplete type %0
offsetof requires struct, union, or class type, %0 invalid
'adjust_arg' argument %0 used in multiple clauses
argument of aligned clause should be array%select{ or pointer|, pointer, reference to array or reference to pointer}1, not %0
allocator must be specified in the 'uses_allocators' clause
allocators used in 'uses_allocators' clause cannot appear in other data-sharing or data-mapping attribute clauses
ambiguous conversion from type %0 to an integral or unscoped enumeration type
'append_args' is not allowed with varargs functions
expected pointer, array, reference to pointer, or reference to array in 'is_device_ptr clause'
OpenMP array section is not allowed here
OpenMP array shaping operation is not allowed here
expected at least one 'to' clause or 'from' clause specified to '#pragma omp target update'
the statement for 'atomic capture' must be a compound statement of form '{v = x; x binop= expr;}', '{x binop= expr; v = x;}', '{v = x; x = x binop expr;}', '{v = x; x = expr binop x;}', '{x = x binop expr; v = x;}', '{x = expr binop x; v = x;}' or '{v = x; x = expr;}', '{v = x; x++;}', '{v = x; ++x;}', '{++x; v = x;}', '{x++; v = x;}', '{v = x; x--;}', '{v = x; --x;}', '{--x; v = x;}', '{x--; v = x;}' where x is an lvalue expression with scalar type
the statement for 'atomic capture' must be an expression statement of form 'v = ++x;', 'v = --x;', 'v = x++;', 'v = x--;', 'v = x binop= expr;', 'v = x = x binop expr' or 'v = x = expr binop x', where x and v are both lvalue expressions with scalar type
the statement for 'atomic compare' must be a compound statement of form '{x = expr ordop x ? expr : x;}', '{x = x ordop expr? expr : x;}', '{x = x == e ? d : x;}', '{x = e == x ? d : x;}', or 'if(expr ordop x) {x = expr;}', 'if(x ordop expr) {x = expr;}', 'if(x == e) {x = d;}', 'if(e == x) {x = d;}' where 'x' is an lvalue expression with scalar type, 'expr', 'e', and 'd' are expressions with scalar type, and 'ordop' is one of '<' or '>'.
the statement for 'atomic compare capture' must be a compound statement of form '{v = x; cond-up-stmt}', ''{cond-up-stmt v = x;}', '{if(x == e) {x = d;} else {v = x;}}', '{r = x == e; if(r) {x = d;}}', or '{r = x == e; if(r) {x = d;} else {v = x;}}', where 'cond-update-stmt' can have one of the following forms: 'if(expr ordop x) {x = expr;}', 'if(x ordop expr) {x = expr;}', 'if(x == e) {x = d;}', or 'if(e == x) {x = d;}' where 'x', 'r', and 'v' are lvalue expressions with scalar type, 'expr', 'e', and 'd' are expressions with scalar type, and 'ordop' is one of '<' or '>'.
directive '#pragma omp atomic%select{ %0|}1' cannot be used with '%2' clause
the statement for 'atomic' must be an expression statement of form '++x;', '--x;', 'x++;', 'x--;', 'x binop= expr;', 'x = x binop expr' or 'x = expr binop x', where x is an lvalue expression with scalar type
the statement for 'atomic read' must be an expression statement of form 'v = x;', where v and x are both lvalue expressions with scalar type
directive '#pragma omp atomic' cannot contain more than one 'read', 'write', 'update', 'capture', or 'compare' clause
the statement for 'atomic update' must be an expression statement of form '++x;', '--x;', 'x++;', 'x--;', 'x binop= expr;', 'x = x binop expr' or 'x = expr binop x', where x is an lvalue expression with scalar type
the statement for 'atomic write' must be an expression statement of form 'x = expr;', where x is a lvalue expression with scalar type
bit fields cannot be used to specify storage in a '%0' clause
the host cannot update a declare target variable that is not externally visible.
arguments of OpenMP clause '%0' with bitwise operators cannot be of floating type
arguments of OpenMP clause '%0' for 'min' or 'max' must be of %select{scalar|arithmetic}1 type
'%0' clause requires 'dispatch' context selector
'%0' and '%1' clause are mutually exclusive and may not appear on the same directive
const-qualified list item cannot be %0
const-qualified variable without mutable fields cannot be %0
const-qualified variable cannot be %0
constructs with the same name must have a 'hint' clause with the same value
redefinition of user-defined mapper for type %0 with name %1
only variable %0 is allowed in map clauses of this 'omp declare mapper' directive
redefinition of user-defined reduction for type %0
%0 must not appear in both clauses 'to' and 'link'
function with '#pragma omp declare variant' has a different %select{calling convention|return type|constexpr specification|inline specification|storage class|linkage}0
'#pragma omp declare variant' does not support %select{function templates|virtual functions|deduced return types|constructors|destructors|deleted functions|defaulted functions|constexpr functions|consteval function}0
'#pragma omp declare variant' is not compatible with any target-specific attributes
variant in '#pragma omp declare variant' with type %0 is incompatible with type %1%select{| with appended arguments}2
function with '#pragma omp declare variant' must have a prototype when 'append_args' is used
variant in '#pragma omp declare variant' is the same as the base function
the user condition in the OpenMP context selector needs to be constant; %0 is not
variable %0 must have explicitly specified data sharing attributes, data mapping attributes, or in an is_device_ptr clause
'%0' clauses cannot be mixed with '%1' clause
expected iterator specification as depend modifier
expected%select{| %1}0 loop iteration variable
expected '+' or '-' operation
depend modifier cannot be used with 'sink' or 'source' depend type
unexpected expression: number of expressions is larger than the number of associated loops
zero-length array section is not allowed in 'depend' clause
expected depobj expression
exactly one of 'depend', 'destroy', or 'update' clauses is expected
Device clause with ancestor device-modifier used without specifying 'requires reverse_offload'
'device_type(%0)' does not match previously specified 'device_type(%1)' for the same declaration
'%0' region encountered before requires directive with '%1' clause
statement after '#pragma omp dispatch' must be a direct call to a target function or an assignment to one
same map type modifier has been specified more than once
same motion modifier has been specified more than once
expected access to data field
expected addressable lvalue expression, array element%select{ or array section|, array section or array shaping expression}0%select{| of non 'omp_depend_t' type}1
expected constant sized array of 'omp_alloctrait_t' elements, not %0
expected variable name as a base of the array %select{subscript|section}0
expected a reference to an integer-typed parameter
expected expression containing only member accesses and/or array sections based on named variables
expected lvalue expression%select{ of 'omp_depend_t' type, not %1|}0
expected one of the predefined allocators for the variables with the static storage: 'omp_default_mem_alloc', 'omp_large_cap_mem_alloc', 'omp_const_mem_alloc', 'omp_high_bw_mem_alloc', 'omp_low_lat_mem_alloc', 'omp_cgroup_mem_alloc', 'omp_pteam_mem_alloc' or 'omp_thread_mem_alloc'
the referenced item is not found in any private clause on the same directive
expected a reference to a parameter specified in a 'uniform' clause
%0 is not a global variable, static local variable or static data member
%0 is not a global variable, static local variable or static data member; did you mean %1
expected variable name%select{| or data member of current class}0
expected variable name%select{|, data member of current class}0, array element or array section
expected variable%select{| or static data member|, static data member, or non-static data member of current class}0 of type '%1'
expression requires explicit conversion from %0 to %1
a firstprivate variable with incomplete type %0
'flush' directive with memory order clause '%0' cannot have the list
'#pragma omp declare %select{simd|variant}0' can only be applied to functions
function name is not allowed in 'link' clause
arguments of '#pragma omp %0' must have %select{global storage|static storage duration}1
the name of the construct must be specified in presence of 'hint' clause
'%0' type not found; include <omp.h>
the list item must appear in 'reduction' clause with the 'inscan' modifier of the parent directive
expression has incomplete class type %0
expected 'reduction' clause with the 'inscan' modifier
instantiation of '%0' not supported yet
'depend' clause requires the 'targetsync' interop type
prefer_list item must be a string literal or constant integral expression
'omp_interop_t' must be defined when 'append_args' clause is used; include <omp.h>
interop variable %0 used in multiple action clauses
expected%select{| non-const}0 variable of type 'omp_interop_t'
interop variable must be of type 'omp_interop_t'
invalid 'this' expression on 'map' clause
%select{map type '%1' is not allowed|map type must be specified}0 for '#pragma omp %2'
map type modifier '%0' is not allowed for '#pragma omp %1'
cannot find a valid user-defined mapper for type %0 with name %1
'#pragma omp %0' directive must appear only in file scope
%0 used in declare target directive is not a variable or a function name
expected loop invariant expression
expected loop invariant expression or '<invariant1> * %0 + <invariant2>' kind of expression
expected integral or pointer type as the iterator-type, not %0
iterator step expression %0 evaluates to 0
iterator step expression %0 is not the integral expression
OpenMP iterator is not allowed here
variable captured in declare target region must appear in a to clause
expected list item of scalar type in 'lastprivate' clause with 'conditional' modifier
a lastprivate variable with incomplete type %0
only loop iteration variables are allowed in 'lastprivate' clause in 'omp %0' directives
only loop iteration variables are allowed in 'linear' clause in distribute directives
argument of a linear clause should be of integral or pointer type, not %0
a linear variable with incomplete type %0
'linear' clause cannot be specified along with 'ordered' clause with a parameter
variable with local storage in initial value of threadprivate variable
'%0' statement cannot be used in OpenMP for loop
could not calculate number of iterations calling 'operator-' with upper and lower loop bounds
increment expression must cause %0 to %select{decrease|increase}1 on each iteration of OpenMP for loop
condition of OpenMP for loop must be a relational comparison ('<', '<=', '>', %select{or '>='|'>=', or '!='}0) of loop variable %1
increment clause of OpenMP for loop must perform simple addition or subtraction on loop variable %0
initialization clause of OpenMP for loop is not in canonical form ('var = init' or 'T var = init')
loop iteration variable in the associated loop of 'omp %1' directive may not be %0, predetermined as %2
variable must be of integer or %select{pointer|random access iterator}0 type
expected iterator specification as map modifier
variable already marked as mapped in current construct
mapper type must be of struct, union or class type
multiple array elements associated with the same variable are not allowed in map clauses of the same construct
argument to '%0' clause must be a %select{non-negative|strictly positive}1 integer value
expected at least one %0 clause for '#pragma omp %1'
variable %0 must have explicitly specified data sharing attributes
no more 'if' clause is allowed
expected addressable lvalue in '%0' clause
expected expression with a pointer to a complete type as a base of an array shaping operation
non-predefined allocator must have traits specified
%select{statement after '#pragma omp %1' must be a for loop|expected %2 for loops after '#pragma omp %1'%select{|, but found only %4}3}0
expression must have integral or unscoped enumeration type, not %0
unable to resolve declare reduction construct for type %0
directive '#pragma omp taskwait' cannot use 'nowait' clause without 'depend' clause
variable can appear only once in OpenMP '%0' clause
variable can appear only once in OpenMP 'target update' construct
at most one defaultmap clause for each variable-category can appear on the directive
'ordered' directive %select{without any clauses|with 'threads' clause}0 cannot be closely nested inside ordered region with specified parameter
'ordered' directive with '%0' clause cannot be closely nested inside ordered region without specified parameter
'ordered' clause with a parameter can not be specified in '#pragma omp %0' directive
original storage of expression in data environment is shared but data environment do not fully contain mapped expression storage
orphaned 'omp %0' directives are prohibited; perhaps you forget to enclose the directive into a %select{|||target |teams|for, simd, for simd, parallel for, or parallel for simd }1region?
%select{orphaned 'omp section' directives are prohibited, it|'omp section' directive}0 must be closely nested to a sections region%select{|, not a %1 region}0
argument of a reduction clause of a %0 construct must not appear in a firstprivate clause on a task construct
the statement for '#pragma omp parallel sections' must be a compound statement
statement in 'omp parallel sections' directive must be enclosed into a section region
expected reference to one of the parameters of function %0%select{| or 'this'}1
parent region for 'omp %select{cancellation point|cancel}0' construct cannot be nowait
parent region for 'omp %select{cancellation point|cancel}0' construct cannot be ordered
pointer cannot be mapped along with a section derived from itself
predefined allocator cannot have traits specified
a private variable with incomplete type %0
region cannot be%select{| closely}0 nested inside '%1' region%select{|; perhaps you forget to enclose 'omp %3' directive into a parallel region?|; perhaps you forget to enclose 'omp %3' directive into a for or a parallel for region with 'ordered' clause?|; perhaps you forget to enclose 'omp %3' directive into a target region?|; perhaps you forget to enclose 'omp %3' directive into a teams region?|; perhaps you forget to enclose 'omp %3' directive into a for, simd, for simd, parallel for, or parallel for simd region?}2
OpenMP constructs may not be nested inside an atomic region
cannot nest 'critical' regions having the same name %0
construct '%0' not allowed in a region associated with a directive with 'order' clause
OpenMP constructs may not be nested inside a simd region%select{| except for ordered simd, simd, scan, or atomic directive}0
list item of type %0 is not valid for specified reduction operation: unable to provide default initialization value
in_reduction variable must have the same reduction operation as in a task_reduction clause
reduction variables may not be accessed in an explicit task
a reduction list item with incomplete type %0
expected addressable reduction item for the task-based directives
the inscan reduction list item must appear as a list item in an 'inclusive' or 'exclusive' clause on an inner 'omp scan' directive
argument of OpenMP clause '%0' must reference the same object in all threads
'reduction' clause with 'task' modifier allowed only on non-simd parallel or worksharing constructs
cannot generate code for reduction on %select{|array section, which requires a }0variable length array
'reduction' clause cannot be used with 'nogroup' clause
reduction type cannot be %select{qualified with 'const', 'volatile' or 'restrict'|a function|a reference|an array}0 type
arguments of '#pragma omp %0' cannot be of reference type %1
directive must be at file or namespace scope
%0 variable must be %1
Only one %0 clause can appear on a requires directive in a single translation unit
same pointer dereferenced in multiple different ways in map clause expressions
exactly one of 'inclusive' or 'exclusive' clauses is expected
'nonmonotonic' modifier can only be specified with 'dynamic' or 'guided' schedule kind
section of pointer to function type %0
section of pointer to incomplete type %0
section length is evaluated to a negative value %0
section length is unspecified and cannot be inferred because subscripted value is %select{not an array|an array of unknown bound}0
array section must be a subset of the original array
section stride is evaluated to a non-positive value %0
the statement for '#pragma omp sections' must be a compound statement
statement in 'omp sections' directive must be enclosed into a section region
exactly one '%0' directive must appear in the loop body of an enclosing directive
directive '#pragma omp %0' cannot contain more than one %select{'seq_cst', 'relaxed', |}1'acq_rel', 'acquire' or 'release' clause
array shaping dimension is evaluated to a non-positive value %0
'%0' statement cannot be used in OpenMP simd region
'%0' clause with '%1' modifier cannot be specified if an 'ordered' clause is specified
the 'copyprivate' clause must not be used with the 'nowait' clause
single declaration is expected after 'declare %select{simd|variant}0' directive
'%0(%select{source|sink:vec}1)' clause%select{|s}1 cannot be mixed with '%0(%select{sink:vec|source}1)' clause%select{s|}1
the loop %select{initializer|condition}0 expression depends on the current loop control variable
target construct with nested teams region contains statements outside of the teams construct
'mutexinoutset' modifier not allowed in 'depend' clause on 'taskwait' directive
threadprivate variables are not allowed in '%0' clause
threadprivate variables cannot be used in target constructs
threadprivate variable with incomplete type %0
array section %select{lower bound|length}0 is not an integer
subscripted value is not an array or pointer
array shaping operation dimension is not an integer
calls to OpenMP runtime API are not allowed within a region that corresponds to a construct with an order clause that specifies concurrent
expected %0 in OpenMP clause '%1'
modifier '%0' cannot be used along with modifier '%1'
mapping of union members is not allowed
incorrect reduction identifier, expected one of '+', '-', '*', '&', '|', '^', '&&', '||', 'min' or 'max' or declare reduction for type %0
incorrect reduction identifier, expected one of '+', '*', '&', '|', '^', '&&', '||', 'min' or 'max' or declare reduction for type %0
expected%select{| one of}0 %1 directive name modifier%select{|s}0
loop to be fully unrolled must have a constant trip count
%select{a variable|a parameter|'this'}0 cannot appear in more than one %1 clause
expected pointer or reference to pointer in 'use_device_ptr' clause
expected variable of the '%0' type%select{|, not %2}1
'#pragma omp %0' must appear in the scope of the %q1 variable declaration
variable %0 cannot be threadprivate because it is %select{thread-local|a global named register variable}1
'#pragma omp %0' must precede all references to variable %q1
%0 variable cannot be in a %1 clause in '#pragma omp %2' directive
arguments of OpenMP clause '%0' in '#pragma omp %2' directive cannot be of variably-modified type %1
one of 'for', 'parallel', 'sections' or 'taskgroup' is expected
expected an integer or a pointer type of the outer loop counter '%0' for non-rectangular nests
function with 'device_type(%0)' is not available on %select{device|host}1
%0 variable cannot be %1
directive name modifier '%0' is not allowed for '#pragma omp %1'
'inscan' modifier can be used only in 'omp for', 'omp simd', 'omp for simd', 'omp parallel for', or 'omp parallel for simd' directive
expected %select{'val' modifier|one of 'ref', val' or 'uval' modifiers}0
variable of non-reference type %0 can be used only with 'val' modifier, but used with '%1'
the parameter of the 'ordered' clause must be greater than or equal to the parameter of the 'collapse' clause
the value of 'simdlen' parameter must be less than or equal to the value of the 'safelen' parameter
only %select{'omp_priv' or 'omp_orig'|'omp_in' or 'omp_out'}0 variables are allowed in %select{initializer|combiner}0 expression
access specifier can only have annotation attributes
only constructors take base initializers
only enumeration types have underlying types
variables in the %0 address space can only be declared in the outermost scope of a kernel function
atomic variable can be %select{assigned|initialized}0 to a variable only in global address space
bit-fields are not supported in OpenCL
cannot refer to a block inside block
the __block storage type is not permitted
illegal call to %0, expected %1 argument type
invalid number of arguments to function: %0
first argument to %0 must be a pipe type
invalid pipe access modifier (expecting %0)
invalid argument type to function %0 (expecting %1 having %2)
invalid argument %0 to function: %1, expecting a generic pointer argument
cannot cast non-zero value '%0' to 'event_t'
casting to type %0 is not allowed
variable in constant address space must be initialized
blocks with parameters are not accepted in this prototype of enqueue_kernel call
blocks used in enqueue_kernel call are expected to have parameters of type 'local void*'
illegal call to enqueue_kernel, incorrect argument types
illegal call to enqueue_kernel, parameter needs to be specified as integer type
mismatch in number of block parameters and local size arguments passed
vector component access has invalid length %0.  Supported: 1,2,3,4,8,16.
invalid block variable declaration - using 'extern' storage class is disallowed
%select{pointers|references}0 to functions are not allowed
%select{non-kernel function|function scope}0 variable cannot be declared in %1 address space
%select{program scope|static local|extern}0 variable must reside in %1 address space
declaring variable of type %0 is not allowed
%select{loading directly from|assigning directly to}0 pointer to type %1 requires cl_khr_fp16. Use vector data %select{load|store}0 builtin functions instead
implicit conversions between vector types (%0 and %1) are not permitted
access qualifier can only be used for pipe and image type
invalid block variable declaration - must be %select{const qualified|initialized}0
declaring function parameter of type %0 is not allowed%select{; did you forget * ?|}1
access qualifier %0 can not be used for %1 %select{|prior to OpenCL C version 2.0 or in version 3.0 and without __opencl_c_read_write_images feature}2
declaring function return value of type %0 is not allowed %select{; did you forget * ?|}1
array of %0 type is invalid in OpenCL
attribute %0 can only be applied to an OpenCL kernel function
multiple access qualifiers
%select{function|kernel}0 cannot be called 'main'
global sampler requires a const or constant address space qualifier
pointer to type %0 is invalid in OpenCL
kernel parameter cannot be declared as a pointer to a pointer
use of %select{type|declaration}0 %1 requires %2 support
scalar operand type has greater rank than the type of the vector element. (%0 and %1)
invalid application of '%0' to a void type
taking address of a capture is not allowed
block type cannot be used as expression in ternary expression in OpenCL
type %0 can only be used as a function parameter in OpenCL
%0 type %1 not found; include the base header with -finclude-default-header
the %0 type cannot be used to declare a structure or union field
invalid prototype, variadic arguments are not allowed in OpenCL
variable length arrays are not supported in OpenCL
use of placement new requires explicit declaration
invalid application of '__builtin_omp_required_simd_align' to an expression, only type is allowed
variable length arrays are not supported in OpenMP tasking regions with 'untied' clause
circular pointer delegation detected
use of 'operator->' on type %0 would invoke a sequence of more than %1 'operator->' calls
%0 cannot take a dependent type as first parameter; use %1 instead
first parameter of %0 must have type %1
parameter of %0 cannot have a default argument
%0 cannot be declared inside a namespace
%0 cannot be declared static in global scope
%0 cannot have a dependent return type; use %1 instead
%0 must return type %1
%0 template must have at least two parameters
%0 must have at least one parameter
%0 cannot take a dependent type as first parameter; use size_t (%1) instead
%0 takes type size_t (%1) as first parameter
parameter of overloaded %0 cannot have a default argument
overloaded %0 must be a %select{unary|binary|unary or binary}2 operator (has %1 parameter%s1)
overloaded %0 must be a non-static member function
overloaded %0 must have at least one parameter of class or enumeration type
parameter of overloaded post-%select{increment|decrement}1 operator must have type 'int' (not %0)
overloaded %0 cannot be a static member function
overloaded %0 cannot be variadic
os_log() argument %0 is too big (%1 bytes, max %2)
os_log() format argument is not a string constant
defaulting this %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 would delete it after its first declaration
qualified reference to %0 is a constructor name rather than a %select{template name|type}1 in this context
__builtin_mul_overflow does not support 'signed _BitInt' operands of more than %0 bits
operand argument to overflow builtin must be an integer (%0 invalid)
result argument to overflow builtin must be a pointer to a non-const integer (%0 invalid)
exception specification of overriding function is more lax than base version
call to %0 is ambiguous
ambiguous conversion for %select{|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2
call to constructor of %0 is ambiguous
call to member function %0 is ambiguous
call to object of type %0 is ambiguous
use of overloaded operator '%0' is ambiguous (with operand types %1 and %2)
use of overloaded operator '%0' is ambiguous (operand type %1)
call to subscript operator of type %0 is ambiguous
call to deleted function %0
object of type %0 cannot be compared because its %1 is implicitly deleted
%select{|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2 uses deleted function
call to deleted constructor of %0
call to deleted member function %0
call to deleted function call operator in type %0
overload resolution selected deleted operator '%0'
call to implicitly-deleted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor|function}0 of %1
object of type %0 cannot be %select{constructed|copied|moved|assigned|assigned|destroyed}1 because its %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}1 is implicitly deleted
functions that differ only in their return type cannot be overloaded
cannot convert %1 to %2 without a conversion operator
type %0 does not provide a %select{subscript|call}1 operator
no matching conversion for %select{|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2
no matching function for call to %0
no matching constructor for initialization of %0
no matching literal operator for call to %0%select{| with argument of type %2| with arguments of types %2 and %3}1%select{| or 'const char *'}4%select{|, and no matching literal operator template}5
no matching member function for call to %0
no matching function for call to object of type %0
no viable overloaded '%0'
no viable overloaded operator[] for type %0
return type %0 of selected 'operator==' function for rewritten '%1' comparison is not 'bool'
static and non-static member functions with the same parameter types cannot be overloaded
reference to %select{overloaded|multiversioned}1 function could not be resolved; did you mean to call it%select{| with no arguments}0?
'ownership_returns' attribute index does not match; here it is %0
%0 attribute only applies to %select{pointer|integer}1 arguments
pack expansion contains parameter packs %0 and %1 that have different lengths (%2 vs. %3)
pack expansion contains parameter pack %0 that has a different length (%1 vs. %2) from outer parameter packs
pack expansion contains parameter pack %0 that has a different length (at least %1 vs. %2) from outer parameter packs
pack expansion for initialization of member %0
pack expansion does not contain any unexpanded parameter packs
C does not support default arguments
default arguments cannot be added to an out-of-line definition of a member of a %select{class template|class template partial specialization|nested class in a template}0
missing default argument on parameter
missing default argument on parameter %0
default arguments can only be specified for parameters in a function declaration
parameter pack cannot have a default argument
redefinition of default argument
default argument references local variable %0 of enclosing function
default argument references parameter %0
default argument references 'this'
default arguments cannot be added to a function template that has already been declared
argument may not have 'void' type
a lambda parameter cannot shadow an explicitly captured entity
%select{parameters|function return value}0 cannot have __fp16 type; did you forget * ?
cannot parenthesize the name of a method when forming a member pointer
%select{class|variable}0 template partial specialization does not specialize any template argument; to %select{declare|define}1 the primary template, remove the template argument list
partial specialization of %0 does not use any of its template parameters
ambiguous partial specializations of %0
class template partial specialization %0 cannot be redeclared
partial specialization cannot be declared as a friend
deduced type %0 does not satisfy %1
'new' expression with placement arguments refers to non-placement 'operator delete'
call to pointer to member function of type %0 drops '%1' qualifier%s2
pointer-to-member function type %0 can only be called on an %select{rvalue|lvalue}1
invalid use of pointer to member type after %select{.*|->*}0
this builtin requires ABI -mabi=%0
expected a 'float', 'double' or '__float128' for the first argument
invalid use of PPC MMA type
'#pragma alloc_text' is applicable only to functions with C linkage
'#pragma alloc_text' is applicable only to functions
'#pragma clang attribute' attribute with no matching '#pragma clang attribute push'
attribute %0 can't be applied to %1
negated attribute subject matcher sub-rule '%0' contradicts sub-rule '%1'
redundant attribute subject matcher sub-rule '%0'; '%1' already matches those declarations
unterminated '#pragma clang attribute push' at end of file
'#pragma clang attribute %select{%1.|}0pop' with no matching '#pragma clang attribute %select{%1.|}0push'
'#pragma %0' can only appear at file scope
'#pragma float_control(except, on)' is illegal when precise is disabled
'#pragma float_control(precise, off)' is illegal when except is enabled
'#pragma float_control(precise, off)' is illegal when fenv_access is enabled
'#pragma float_control push/pop' can only appear at file or namespace scope or within a language linkage specification
'#pragma STDC FENV_ACCESS ON' is illegal when precise is disabled
%select{incompatible|duplicate}0 directives '%1' and '%2'
invalid argument of type %0; expected an integer type
%select{invalid value '%0'; must be positive|value '%0' is too large}1
expected a for, while, or do-while loop to follow '%0'
mac68k alignment pragma is not supported on this target
specifying an identifier within `#pragma pack` is not supported on this target
expected #pragma pack parameter to be '1', '2', '4', '8', or '16'
#pragma visibility pop with no matching #pragma visibility push
#pragma visibility push with no matching #pragma visibility pop
argument to #pragma section is not valid for this target: %0
__builtin_preserve_enum_value argument %0 invalid
__builtin_preserve_enum_value argument %0 not a constant
__builtin_preserve_field_info argument %0 not a constant
__builtin_preserve_field_info argument %0 not a field access
__builtin_preserve_type_info argument %0 invalid
__builtin_preserve_type_info argument %0 not a constant
instance variable %0 is private
private module fragment declaration with no preceding module declaration
private module fragment in module implementation unit
private module fragment redefined
probability argument to __builtin_expect_with_probability must be constant floating-point expression
probability argument to __builtin_expect_with_probability is outside the range [0.0, 1.0]
type of property %0 (%1) does not match type of accessor %2 (%3)
property %0 found on object of type %1; did you mean to access it with the "." operator?
use of Objective-C property in function nested in Objective-C container not supported, move function outside its container
property %0 is already implemented
property %0 has a variably modified type
type of property %0 (%1) does not match type of instance variable %2 (%3)
property access is using %0 method which is unavailable
property %0 refers to an incomplete Objective-C class %1 (with no @interface available)
property %0 not found on object of type %1
property %0 cannot be found in forward class object %1
property %0 not found on object of type %1; did you mean %2?
synthesized properties %0 and %1 both claim setter %2 - use of this setter will cause unexpected behavior
property cannot have array or function type %0
instance variable %0 is protected
protocol has circular dependency
property %select{of type %1|with attribute '%1'|without attribute '%1'|with getter %1|with setter %1}0 was selected for synthesis
object expression of non-scalar type %0 cannot be used in a pseudo-destructor expression
call to pseudo-destructor cannot have any arguments
%0 does not refer to a type name in pseudo-destructor expression; expected the name of type %1
the type of object expression %diff{($) does not match the type being destroyed ($)|does not match the type being destroyed}0,1 in pseudo-destructor expression
address discrimination flag for __ptrauth must be 0 or 1; value is %0
argument to %select{__ptrauth|ptrauth_struct}0 must be an integer constant expression
discriminator argument to ptrauth_sign_constant must be a constant integer, the address of the global variable where the result will be stored, or a blend of the two
argument to ptrauth_sign_constant must refer to a global variable or function
pointer authentication is disabled for the current target
this target does not support pointer authentication
empty __ptrauth authentication option
extra discriminator for %select{__ptrauth|ptrauth_struct}2 must be between 0 and %1; value is %0
%select{static locals|globals}0 with authenticated null values are currently unsupported
%0 does not identify a valid pointer authentication key for the current target
invalid character in __ptrauth options
missing comma between __ptrauth options
attribute ptrauth_struct cannot be used on class %0 or its subclasses because it is a dynamic class
__ptrauth options must be a string of comma separated flags, found '%0'
%0 qualifier must take between 1 and 4 arguments
cast types may not be qualified with __ptrauth; type is %0
%select{return types|parameter types|properties}2 may not be qualified with %select{__ptrauth|__ptrauth_restricted_intptr}1; type is %0
__ptrauth qualifier may only be applied to pointer types; type here is %0
type %0 is already %1-qualified
signed pointer types may not be qualified with __ptrauth(ptrauth_key_none); type is %0
argument to %0 parameter is not an authenticated value
repeated __ptrauth authentication %select{mode|option}0
__ptrauth_restricted_intptr qualifier may only be applied to pointer sized integer types; type here is %0
argument must be a string literal%select{| of char type}0
argument to '__builtin_ptrauth_type_discriminator' isn't a record type
%0 is signed differently from the previous declaration
cannot pass undiscriminated type %0 to '__builtin_ptrauth_type_discriminator'
unknown __ptrauth authentication option '%0'
%select{signed value|extra discriminator|blended pointer|blended integer}0 must have %select{pointer|integer|pointer or integer}1 type; type here is %2
friend declaration cannot have a pure-specifier
exception declarator cannot be qualified
friend function definition cannot be qualified with '%0'
friend declaration of %0 does not match any declaration in %1
type operand %0 of 'typeid' cannot have '%1' qualifier
qualified member access refers to a member in %0
%q0 is not a member of class %1
%select{property|instance variable}0 access cannot be qualified with '%1'
@catch parameter declarator cannot be qualified
parameter declarator cannot be qualified
typedef declarator cannot be qualified
cannot build range expression with array function parameter %0 since parameter with array type %1 is treated as pointer type %2
assigning to 'readonly' return result of an Objective-C message not allowed
invalid type %0 to %1 operator
%select{struct|union}0 kernel parameters may not contain pointers
recursive evaluation of default argument
trying to recursively use %0 as superclass of %1
redeclaration of %0 with a different type%diff{: $ vs $|}1,2
cannot export redeclaration %0 here since the previous declaration %select{is not exported|has internal linkage|has module linkage}1
redefinition of %0
redefinition of concept %0 with different template parameters or requirements
redefinition of %0 as different kind of symbol
redefinition of %0 as an alias for a different namespace
redefinition of %0 with a different type%diff{: $ vs $|}1,2
%select{typedef|type alias|type alias template}0 redefinition with different types%diff{ ($ vs $)|}1,2
redefinition of a 'extern inline' function %0 is not supported in %select{C99 mode|C++}1
redefinition of enumerator %0
redefinition of label %0
redefinition of %select{typedef|type alias}0 for variably-modified type %1
cannot refer to declaration with an array type inside block
reference to %select{__device__|__global__|__host__|__host__ __device__}0 %select{function|variable}1 %2 in %select{__device__|__global__|__host__|__host__ __device__}3 function
reference to %select{__device__|__global__|__host__|__host__ __device__}0 function %1 in global initializer
cannot refer to declaration of structure variable with flexible array member inside block
reference initialization of type %0 with initializer of type %1 is ambiguous
%0 does not refer to a value
ref-qualifier '&&' is not allowed on a defaulted comparison operator
ref-qualifier '%select{&&|&}0' is not allowed on a constructor
ref-qualifier '%select{&&|&}0' is not allowed on a destructor
cannot overload a member function %select{without a ref-qualifier|with ref-qualifier '&'|with ref-qualifier '&&'}0 with a member function %select{without a ref-qualifier|with ref-qualifier '&'|with ref-qualifier '&&'}1
cannot refer to declaration with a variably modified type inside block
binding reference %diff{of type $ to value of type $|to value}0,1 %select{drops %3 qualifier%plural{1:|2:|4:|:s}4|changes address space|not permitted due to incompatible qualifiers}2
reference %diff{to %select{type|incomplete type}1 $ could not bind to an %select{rvalue|lvalue}2 of type $|could not bind to %select{rvalue|lvalue}2 of incompatible type}0,3
reference to type %0 cannot bind to an initializer list
reference of type %0 cannot bind to a temporary object because of address space mismatch
%select{non-const|volatile}0 reference cannot bind to bit-field%select{| %1}2
%select{non-const|volatile}0 reference cannot bind to matrix element
%select{non-const|volatile}0 reference cannot bind to vector element
'&' cannot precede a capture when the capture default is '&'
reference cannot be initialized with multiple values
pipes packet types cannot be of reference type
invalid reference to function %0: constraints not satisfied
reference to local %select{variable|binding}1 %0 declared in enclosing %select{%3|block literal|lambda expression|context}2
cannot form a reference to 'void'
declaration of reference variable %0 requires an initializer
reference to type %0 requires an initializer
function declared with regparm(%0) attribute was previously declared %plural{0:without the regparm|:with the regparm(%1)}1 attribute
%0 attribute cannot be repeated
variable does not have a constant initializer
default arguments not allowed for parameters of a requires expression
constraint variable %0 cannot be used in an evaluated context
cannot subclass a class that was declared with the 'objc_subclassing_restricted' attribute
returning block that lives on the local stack
@throw (rethrow) used outside of a @catch block
void block should not return a value
cannot return from %0
return in the catch of a function try block of a constructor is illegal
return statement not allowed in coroutine; did you mean 'co_return'?
%select{void function|void method|constructor|destructor}1 %0 must not return a value
return type cannot be qualified with address space
LMUL argument must be in the range [0,3] or [5,7]
builtin requires%select{| at least one of the following extensions to be enabled}0: %1
RISC-V type %0 requires the '%1' extension
%0 cannot use 'super' because it is a root class
argument should be the value 90 or 270
argument should be the value 0, 90, 180 or 270
rvalue reference type %0 is not allowed in exception specification
sampler_t variable required - got %0
sampler_t initialization requires 32-bit integer, not %0
second argument to __builtin_call_with_static_chain must be of pointer type
second argument to 'va_arg' is of abstract type %0
second argument to 'va_arg' is of incomplete type %0
%0 causes a section type conflict with %1
cannot use SEH '__try' in a coroutine when C++ exceptions are enabled
cannot use SEH '__try' in blocks, captured regions, or Obj-C method decls
SEH '__try' is not supported on this target
chosen constructor is explicit in copy-initialization
selector element of type %0 cannot be a constant lvalue expression
selector element is not a valid lvalue
selector element type %0 is not a valid object
type of setter must be void
%select{'#pragma clang fp eval_method'|option 'ffp-eval-method'}0 cannot be used with %select{option 'fapprox-func'|option 'mreassociate'|option 'freciprocal'|option 'ffp-eval-method'|'#pragma clang fp reassociate'}1
initialization is not supported for __shared__ variables.
requested shift is a vector of type %0 but the first operand is not a vector (%1)
index for __builtin_shufflevector must be less than the total number of vector elements
index for __builtin_shufflevector must be a constant integer
%select{|reference to }0sizeless type %1 is not allowed in exception specification
non-local variable with sizeless type %0
invalid application of '%0' to a function type
invalid application of '%0' to %select{an incomplete|sizeless}1 type %2
invalid application of '%select{sizeof|alignof|typeof|typeof_unqual}0' to bit-field
application of '%select{alignof|sizeof}1' to interface %0 is not supported on this architecture and platform
%0 does not refer to the name of a parameter pack
%0 does not refer to the name of a parameter pack; did you mean %1?
function declared %0 was previously declared %1, which has different SME function attributes
call to a streaming function requires 'sme'
function executed in streaming-SVE mode requires 'sme'
function using ZA state requires 'sme'
function using ZT0 state requires 'sme2'
streaming function cannot be multi-versioned
call to a shared ZA function requires the caller to have ZA state
call to a shared ZT0 function requires the caller to have ZT0 state
argument to 'operator<=>' %select{cannot be narrowed from type %1 to %2|evaluates to %1, which cannot be narrowed to type %2}0
specialization of member %q0 does not specialize an instantiated member
explicit specialization of %0 after instantiation
cannot reference member of primary template because deduced class template specialization %0 is %select{instantiated from a partial|an explicit}1 specialization
cannot specialize %select{|(with 'template<>') }0a member of an unspecialized template
forward declaration of %select{class|struct|interface|union|enum|enum class|enum struct}0 cannot have a nested name specifier
static assertion expression is not an integral constant expression
static assertion failed%select{: %1|}0
the message in a static assertion must have a '%select{size|data}0()' member function returning an object convertible to '%select{std::size_t|const char *}0'
the message in a static assertion must be a string literal or an object with 'data()' and 'size()' member functions
the message in a static assertion must be produced by a constant expression
the message object in this static assertion is missing %select{a 'size()' member function|a 'data()' member function|'data()' and 'size()' member functions}0
static assertion failed due to requirement '%0'%select{: %2|}1
function declared in block scope cannot have 'static' storage class
static data member %0 not allowed in anonymous %select{struct|interface|union|class|enum}1
static data member %0 not allowed in local %select{struct|interface|union|class|enum}2 %1
static data member %0 already has an initializer
cannot cast %0 to %1 via virtual base %2
variables in function scope cannot be declared static
the 'static' modifier for the array size is not legal in new expressions
kernel functions cannot be declared static
'main' is not allowed to be declared static
static declaration of %0 follows non-static declaration
static member %0 cannot be a bit-field
'static' can only be specified inside the class definition
'static' member function %0 overrides a virtual function in a base class
interface type cannot be statically allocated
standard library implementation of %0 is not supported; %select{member '%2' does not have expected form|member '%2' is missing|the type is not trivially copyable|the type does not have the expected form}1
'std::source_location::__impl' must be standard-layout and have only two 'const char *' fields '_M_file_name' and '_M_function_name', and two integral fields '_M_line' and '_M_column'
'std::source_location::__impl' was not found; it must be defined before '__builtin_source_location' is called
unsupported standard library implementation: 'std::%0' is not a class template
default %select{argument|non-type template argument}0 may not use a GNU statement expression
static data member definition cannot specify a storage class
@catch parameter cannot have storage specifier '%0'
storage class specified for a member declaration
impossible constraint in asm: can't store value into a register
existing instance variable %1 for strong property %0 may not be __weak
subscript of pointer to function type %0
subscript of pointer to %select{incomplete|sizeless}0 type %1
subscript requires size of interface %0, which is not constant for this architecture and platform
subscript of svbool_t is not allowed
use of '__super' inside a lambda is unsupported
SVE vector type %0 cannot be used in a target without sve
'%0' parameter must have pointer%select{| to unqualified pointer}1 type; type here is %2
'swift_async' completion handler parameter must have block type returning 'void', type here is %0
%0 attribute with 'nonnull_error' convention can only be applied to a %select{function|method}1 with a completion handler with an error parameter
%0 attribute with '%1' convention must have an integral-typed parameter in completion handler at index %2, type here is %3
%0 attribute must be applied to a %select{function|method}1 annotated with non-'none' attribute 'swift_async'
first argument to 'swift_async' must be either 'none', 'swift_private', or 'not_swift_private'
'swift_error_result' parameter must follow 'swift_context' parameter
'swift_indirect_result' parameters must be first parameters of function
'%0' parameter can only be used with swiftcall%select{ or swiftasynccall|}1 calling convention%select{|s}1
switch condition type %0 requires explicit conversion to %1
switch condition has incomplete class type %0
cannot jump from switch statement to this case label
multiple conversions from switch condition type %0 to an integral or enumeration type
types with 'sycl_special_class' attribute must have one and only one '__init' method defined
@synthesize not allowed in a category's implementation
@synthesize not allowed on a class property %0
synthesized property with variable size type %0 requires an existing instance variable
cannot synthesize weak property in file using manual reference counting
cannot synthesize weak property because the current deployment target does not support weak references
invalid transaction abort code
definition of type %0 conflicts with %select{typedef|type alias}1 of the same name
%select{type tag|argument}0 index %1 is greater than the number of arguments specified
implicit declaration introduced by elaborated type conflicts with a %select{non-struct type|non-class type|non-union type|non-enum type|typedef|type alias|template|type alias template|template template argument}0 of the same name
%select{non-struct type|non-class type|non-union type|non-enum type|typedef|type alias|template|type alias template|template template argument}1 %0 cannot be referenced with a %select{struct|interface|union|class|enum}2 specifier
friend type templates must use an elaborated type
'target_clones' attribute does not match previous declaration
'target_clones' multiversioning requires a default target
%0 requires %select{|%2 bit size}1 %3 %select{|return }4type support, but target '%5' does not support it
attributes '%0("%2")' and '%1("%2")' are mutually exclusive
ambiguous constructor call when %select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}0 of type %1
%select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}0 of type %1 invokes deleted constructor
copying a temporary object of incomplete type %0
no viable constructor %select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}0 of type %1
address taken in non-type template argument for template parameter of reference type %0
deduced incomplete pack %0 for template parameter %1
non-type template argument refers to non-static data member %0
non-type template argument '%0' is invalid
constraints not satisfied for %select{class template|function template|variable template|alias template|template template parameter|template}0 %1%2
%select{too few|too many}0 template arguments for %select{class template|function template|variable template|alias template|template template parameter|concept|template}1 %2
sorry, non-type template argument of pointer-to-member type %1 that refers to member %q0 of a different class is not supported yet
non-type template argument refers to non-static member function %0
template argument for non-type template parameter must be an expression
template argument for template template parameter must be a class template%select{| or type alias template}0
template argument for template type parameter must be a type
template argument for template type parameter must be a type; did you forget 'typename'?
non-type template parameter of reference type %diff{$ cannot bind to template argument of type $|cannot bind to template of incompatible argument type}0,1
template argument for non-type template parameter is treated as function type %0
non-type template argument of type %0 is not a constant expression
non-type template argument for template parameter of pointer type %0 must have its address taken
non-type template argument of type %0 cannot be converted to a value of type %1
non-type template argument does not refer to any declaration
non-type template argument of type %0 is not an integral constant expression
non-type template argument of type %0 must have an integral or enumeration type
non-type template argument does not refer to an object or function
non-type template argument is not a pointer to member constant
template argument does not refer to a class or alias template, or template template parameter
non-type template argument refers to %select{function|object}0 %1 that does not have linkage
template argument is the type of an unresolved overloaded function
reference binding of non-type template parameter %diff{of type $ to template argument of type $|to template argument}0,1 ignores qualifiers
non-type template argument of reference type %0 is not an object
template template argument has different template parameters than its corresponding template template parameter
non-type template argument refers to thread-local object
null non-type template argument must be cast to template parameter type %0
null non-type template argument of type %0 does not match template parameter of type %1
requires clause differs in template redeclaration
type constraint differs in template redeclaration
pack expansion used as argument for non-pack parameter of %select{alias template|concept}0
template name refers to non-type template %0
templates cannot be declared inside of a local class
%select{implicit|explicit}0 instantiation of undefined template %1
%select{implicit|explicit}0 instantiation of template %1 within its own definition
kernel functions cannot be used in a template declaration, instantiation or specialization
missing 'template' keyword prior to dependent template name '%0%1'
%0%select{| following the 'template' keyword}1 cannot refer to a dependent template
%0%select{| following the 'template' keyword}1 does not refer to a template
'%0%1' is expected to be a non-type template, but instantiated to a %select{class|type alias}2 template
templates must have C++ linkage
member %0 declared as a template
extraneous 'template<>' in declaration of member %0
use of %select{class template|function template|variable template|alias template|template template parameter|concept|template}0 %1 requires template arguments
a non-type template parameter cannot have type %0 before C++20
a non-type template parameter cannot have type %0
template non-type parameter has a different type %0 in template %select{|template parameter }1redeclaration
non-type template parameter has incomplete type %0
non-type template parameter has non-literal type %0
type %0 of non-type template parameter is not a structural type
non-type template parameter has rvalue reference type %0
templates can only be declared in namespace or class scope
template parameter default argument is inconsistent with previous definition
template parameter missing a default argument
template parameter redefines default argument
template parameter has a different kind in template %select{|template parameter }0redeclaration
%select{too few|too many}0 template parameters in template %select{|template parameter }1redeclaration
template parameter list matching the non-templated nested type %0 should be empty ('template<>')
template parameter pack cannot have a default argument
template parameter pack must be the last template parameter
declaration of %0 shadows template parameter
default template argument not permitted on a friend template
cannot add a default template argument to the definition of a member of a class template
%select{template type|non-type template|template template}0 parameter%select{| pack}1 conflicts with previous %select{template type|non-type template|template template}0 parameter%select{ pack|}1
nested name specifier '%0' for declaration does not refer into a class, class template or class template partial specialization
recursive template instantiation exceeded maximum depth of %0
cannot declare an explicit specialization in a friend
explicit specialization of %0 in function scope
default argument not permitted on an explicit %select{instantiation|specialization}0 of function %1
extraneous template parameter list in template specialization or out-of-line template definition
template specialization declaration cannot be a friend
template specialization requires 'template<>'
template specialization or definition requires a template parameter list corresponding to the nested type %0
%select{class template|class template partial|variable template|variable template partial|function template|member function|static data member|member class|member enumeration}0 specialization of %1 must occur at global scope
%select{class template|class template partial|variable template|variable template partial|function template|member function|static data member|member class|member enumeration}0 specialization of %1 not in %select{a namespace enclosing %2|class %2 or an enclosing namespace}3
can only provide an explicit specialization for a class template, function template, variable template, or a member function, static data member, %select{or member class|member class, or member enumeration}0 of a class template
extraneous 'template<>' in declaration of %0 %1
template template argument %0 is more constrained than template template parameter %1
template template parameter must have its own template parameters
a typedef cannot be a template
cannot declare a class template with no name
extraneous 'template<>' in declaration of variable %0
tentative definition has type %0 that is never completed
'this' cannot be %select{implicitly |}0captured in this context
'this' cannot be%select{| implicitly}0 used in a static member function declaration
initializer for thread-local variable must be a constant expression
'%0' variables must have global storage
thread-local declaration of %0 follows non-thread-local declaration
type of thread-local variable has non-trivial destruction
thread-local declaration of %0 with %select{static|dynamic}1 initialization follows declaration with %select{dynamic|static}1 initialization
thread-local storage is not supported for the current target
three-way comparison between vectors is not supported
cannot throw an object of abstract type %0
cannot throw object of incomplete type %0
cannot throw pointer to object of incomplete type %0
cannot throw object of sizeless type %0
alignment (%0) of thread-local variable %1 is greater than the maximum supported alignment (%2) for a thread-local variable on this target
%select{untyped|typed}0 memory operation %1 %select{cannot be a variadic function|cannot be an instance method|must have a prototype|must be a function}2
invalid parameter type for inference at index %0. %1 is not an integer type
the typed_memory_operations attribute can only be applied to functions
typed memory operation %0 has multiple overloads
typed memory operation %0 has incompatible type (%diff{$ vs $|}1,2)
only one element declaration is allowed
deduction guide cannot have a requires clause
trailing return type may not be nested within parentheses
function with trailing return type must specify return type 'auto', not %0
'%0' only applies to %select{function|pointer|Objective-C object or block pointer}1 types; type here is %2
cannot use type '%0' within '#pragma clang fp eval_method'; type is set according to the default eval method for the translation unit
%0 requires more than 1 template argument; provide the remaining arguments explicitly to use it here
concept named in type constraint is not a type concept
%0 cannot be defined in a type alias template
%0 cannot be defined in a condition
%0 cannot be defined in an enumeration
types may not be defined in a for range declaration
%0 cannot be defined in a parameter type
%0 cannot be defined in the result type of a function
%0 cannot be defined in a type specifier
type of property %0 in class extension does not match property type in primary class
a parameter pack may not be accessed at an out of bounds index
'type_tag_for_datatype' attribute requires the initializer to be an %select{integer|integral}0 constant expression
'type_tag_for_datatype' attribute requires the initializer to be an %select{integer|integral}0 constant expression that can be represented by a 64 bit integer
%0 is not supported on this target
address of %select{bit-field|vector element|property expression|register variable|matrix element}0 requested
taking the address of a destructor
taking the address of a temporary object of type %0
conversion %diff{from $ to $|between types}0,1 is ambiguous
variable declared with 'objc_externally_retained' cannot be modified in ARC
cannot assign to 'self' outside of a method in the init family
cannot assign to 'self' in a class method
arithmetic on a pointer to %select{an incomplete|sizeless}0 type %1
fast enumeration variables cannot be modified in ARC by default; declare the variable __strong to allow this
array type %0 is not assignable
%select{cannot assign to return value because function %1 returns a const value|cannot assign to variable %1 with const-qualified type %2|cannot assign to %select{non-|}1static data member %2 with const-qualified type %3|cannot assign to non-static data member within const member function %1|cannot assign to %select{variable %2|non-static data member %2|lvalue}1 with %select{|nested }3const-qualified data member %4|read-only variable is not assignable}0
value of type %0 is not contextually convertible to 'bool'
arguments are of different types%diff{ ($ vs $)|}0,1
ordered compare requires two args of floating point type%diff{ ($ and $)|}0,1
floating point classification requires argument of floating point type (passed in %0)
called object type %0 is not a function or function pointer
argument type %0 is not a real floating point type
too few %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected %1, have %2
too few %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected at least %1, have %2
too few %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, at least argument %1 must be specified
too few %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected at least %1, have %2; did you mean %3?
too few %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, single argument %1 was not specified
too few %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected %1, have %2; did you mean %3?
too many %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected %1, have %2
too many %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected at most %1, have %2
too many %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected at most single argument %1, have %2 arguments
too many %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected at most %1, have %2; did you mean %3?
too many %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected single argument %1, have %2 arguments
too many %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected %1, have %2; did you mean %3?
cast to incomplete type %0
cast to union type from type %0 not present in union
'__builtin_choose_expr' requires a constant expression
comparison of distinct block types%diff{ ($ and $)|}0,1
comparison of distinct pointer types%diff{ ($ and $)|}0,1
equality comparison between function pointer and void pointer (%0 and %1)
comparison between pointer and integer (%0 and %1)
used type %0 where integer or floating point type is required
used type %0 where floating point type is not allowed
used type %0 where arithmetic or pointer type is required
incompatible operand types%diff{ ($ and $)|}0,1
non-pointer operand type %0 incompatible with %select{NULL|nullptr}1
__ptrauth qualification mismatch%diff{ ($ and $)|}0,1
%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers
%select{%diff{assigning to $ from incompatible type $|assigning to type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3%select{|: different classes%diff{ ($ vs $)|}5,6|: different number of parameters (%5 vs %6)|: type mismatch at %ordinal5 parameter%diff{ ($ vs $)|}6,7|: different return type%diff{ ($ vs $)|}5,6|: different qualifiers (%5 vs %6)|: different exception specifications}4
incompatible block pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2
incompatible function pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3
incompatible pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3
%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 converts between pointers to integer types %select{with different sign|where one is of the unique plain 'char' type and the other is not}3
incompatible integer to pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3
incompatible pointer to integer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3
%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 converts between void pointer and function pointer
value of type %0 is not implicitly convertible to %1
conversion from %0 to %1 is not allowed in a converted constant expression
conversion from %0 to %1 in converted constant expression would bind reference to a temporary
variable has incomplete type %0
conversion function %diff{from $ to $|between types}0,1 invokes a deleted function
vector is not assignable (contains duplicate components)
invalid operand of type %0 where floating, complex or a vector of such types is required
used type %0 where integer is required
operand of type %0 where arithmetic or pointer type is required
expression is not assignable
fields must have a constant size: 'variable length array in structure' extension will never be supported
cannot %select{decrement|increment}1 value of type %0
%select{%diff{assigning $ to $|assigning to different types}1,0|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 changes address space of pointer
%select{%diff{assigning $ to $|assigning to different types}1,0|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 changes address space of nested pointer
%select{%diff{assigning $ to $|assigning to different types}1,0|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 changes retain/release properties of pointer
%select{%diff{assigning $ to $|assigning to different types}1,0|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 changes pointer-authentication of pointee type
definition of variable with array type needs an explicit size or an initializer
incomplete definition of type %0
incomplete type %0 is not assignable
indirection requires pointer operand (%0 invalid)
cannot take the address of an rvalue of type %0
extra '&' taking address of overloaded function
invalid operands to binary expression (%0 and %1)
pointer to function type %0 may not be 'restrict' qualified
restrict requires a pointer or reference (%0 is invalid)
restrict requires a pointer or reference
instance variables must have a constant size
logical expression with vector %select{type %1 and non-vector type %2|types %1 and %2}0 is only supported in C++
assignment to cast is illegal, lvalue casts are not supported
member reference type %0 is not a pointer
%0 does not have a member named %1
%0 does not have a member named %1; did you mean %2?
member reference base type %0 is not a structure or union
member reference type %0 is %select{a|not a}1 pointer; did you mean to use '%select{->|.}1'?
cannot refer to type member %0 in %1 with '%select{.|->}2'
cannot refer to member %0 in %1 with '%select{.|->}2'
%diff{return type $ must match previous return type $|return type must match previous return type}0,1 when %select{block literal|lambda expression}2 has unspecified explicit return type
array size is negative
non-object type %0 is not assignable
no viable conversion%select{%diff{ from $ to $|}1,2|%diff{ from returned value of type $ to function return type $|}1,2}0
no viable conversion%diff{ from $ to incomplete type $|}0,1
%select{comparison between %diff{ ($ and $)|}0,1|arithmetic operation with operands of type %diff{ ($ and $)|}0,1|conditional operator with the second and third operands of type %diff{ ($ and $)|}0,1}2 which are pointers to non-overlapping address spaces
ordered comparison of function pointers (%0 and %1)
ordered comparison between pointer and zero (%0 and %1)
arithmetic on%select{ a|}0 pointer%select{|s}0 to%select{ the|}2 function type%select{|s}2 %1%select{| and %3}2
arithmetic on%select{ a|}0 pointer%select{|s}0 to void
illegal storage class on file-scoped variable
illegal storage class on function
statement requires expression of integer type (%0 invalid)
statement requires expression of scalar type (%0 invalid)
%diff{$ and $ are not pointers to compatible types|pointers to incompatible types}0,1
array subscript is not an integer
subscripted value is not an array, pointer, or vector
cannot combine fixed-length and sizeless %select{SVE|RVV}0 vectors in expression, result is ambiguous (%1 and %2)
cannot combine GNU and %select{SVE|RVV}0 vectors in expression, result is ambiguous (%1 and %2)
three-way comparison between pointer and zero
invalid argument type %0 to unary expression
vector operands do not have the same number of elements (%0 and %1)
cannot convert between vector values of different size (%0 and %1)
cannot convert between %select{scalar|vector}0 type %1 and vector type %2 as implicit conversion would cause truncation
cannot convert between vector and non-scalar values (%0 and %1)
only zero-length WebAssembly tables are currently supported
zero-length arrays are not permitted in %select{C++|SYCL device code}0
__type_descriptor_t must be a 64bit enum type when using typed operator new
typed allocation of over aligned types is not supported
scoped typed operator new and delete are not permitted
unsupported: anonymous type given name for linkage purposes by %select{typedef|alias}0 declaration after its linkage was computed; add a tag name here to establish linkage prior to definition
typedef member %0 cannot be a bit-field
typedef name must be an identifier
missing 'typename' prior to dependent type name '%0%1'
missing 'typename' prior to dependent type template name '%0%1'
no type named %0 in %1
no type named 'type' in %0; 'enable_if' cannot be used to disable this declaration
failed requirement '%0'; 'enable_if' cannot be used to disable this declaration
typename specifier refers to non-type member %0 in %1
typename specifier refers to non-type %0
typename specifier refers to a dependent using declaration for a value %0 in %1
%0 is unavailable
%0 is unavailable in ARC
%0 is unavailable: %1
%0 has unknown return type; cast the call to its declared return type
no known method %select{%objcinstance1|%objcclass1}0; cast the message send to the method's return type
%0 has unknown type; cast it to its declared type to use it
declaration of %0 is missing in %1 class
undeclared identifier %0 in destructor name
use of undeclared label %0
definition of class %0 must be available to use Objective-C %select{array literals|dictionary literals|numeric literals|boxed expressions|string literals}1
cannot find protocol declaration for %0
cannot find protocol declaration for %0; did you mean %1?
use of undeclared %0
use of undeclared %0; did you mean %1?
use of undeclared identifier %0
use of undeclared identifier %0; did you mean %1?
cannot find interface declaration for %0
cannot find interface declaration for %0; did you mean %1?
cannot find interface declaration for %0, superclass of %1
cannot find interface declaration for %0, superclass of %1; did you mean %2?
inline variable %q0 is not defined
%select{function|variable}0 %q1 is used but not defined in this translation unit, and cannot be defined in any other translation unit because its type does not have linkage
cannot determine underlying type of incomplete enumeration type %0
%select{expression|base type|declaration type|data member type|bit-field size|static assertion|fixed underlying type|enumerator value|using declaration|friend declaration|qualifier|initializer|default argument|non-type template parameter type|exception type|partial specialization|__if_exists name|__if_not_exists name|lambda|block|type constraint|requirement|requires clause}0 contains%plural{0: an|:}1 unexpanded parameter pack%plural{0:|1: %2|2:s %2 and %3|:s %2, %3, ...}1
friends can only be classes or functions
unexpected interface name %0: expected expression
unexpected namespace name %0: expected expression
unexpected type name %0: expected expression
cannot define the implicit copy assignment operator for %0, because non-static %select{reference|const}1 member %2 cannot use copy assignment operator
%select{constructor for %1|implicit default constructor for %1|cannot use constructor inherited from %1:}0 must explicitly initialize the %select{reference|const}2 member %3
unions cannot be base classes
union member %0 has reference type %1
the address of a declaration with unknown type can only be cast to a pointer type
address-of operator cannot be applied to a call to a function with unknown return type
function %0 with unknown type must be given a function type
variable %0 with unknown type cannot be given a function type
unknown state '%0'
no type named %0 in %1; did you mean %select{|simply }2%3?
unknown receiver %0; did you mean %1?
unknown %select{type|class}1 name %0; did you mean %2?
unknown type name %0
unknown type name %0; did you mean %1?
must explicitly qualify name of member function when taking its address
constrained placeholder types other than simple 'auto' on non-type template parameters not supported yet
call to unsupported expression with unknown type
%0 has unknown type, which is not supported for this kind of declaration
unsupported expression with unknown type
cannot cast %0 to its %select{private|protected}2 base class %1
illegal redeclaration of property in class extension %0 (attribute must be 'readwrite', while its primary must be 'readonly')
illegal redeclaration of 'readwrite' property in class extension %0 (perhaps you intended this to be a 'readwrite' redeclaration of a 'readonly' public property?)
use of default argument to function %0 that is declared later in class %1
reference to unresolved using declaration
taking address of non-addressable standard library function
use of %0 with tag type that does not match previous declaration
using declaration cannot refer to class member
using declaration cannot refer to a namespace
target of using declaration conflicts with declaration already in scope
declaration conflicts with target of using declaration already in scope
using declaration cannot refer to a constructor
%0 is not a direct base of %1, cannot inherit constructors
using declaration cannot refer to a destructor
cannot befriend target of using declaration
using declaration refers to its own class
using declaration refers into '%0', which is not a base class of %1
using declaration in class refers into '%0', which is not a class
redeclaration of using declaration
using declaration pack expansion at block scope produces multiple values
using declaration cannot refer to a template specialization
dependent using declaration resolved to type without 'typename'
no namespace named %0 in %1; did you mean %select{|simply }2%3?
no namespace named %0; did you mean %1?
redeclaration of using-enum declaration
using-enum cannot name a dependent type
%0 is not an enumerated type
'using_if_exists' attribute cannot be applied to an inheriting constructor
%select{|member}0 using declaration %1 instantiates to an empty pack
using declaration requires a qualified name
'typename' keyword used on a non-type
cannot call operator __uuidof on a type with multiple GUIDs
cannot call operator __uuidof on a type with no GUID
CUDA device code does not support va_arg
'va_start' cannot be used in a captured statement
'va_start' used in function with fixed args
'va_start' cannot be used outside a function
'va_start' used in %select{System V|Win64}0 ABI function
array types cannot be value-initialized
variable template partial specialization %0 cannot be redefined
no variable template matches%select{| partial}0 specialization
no variable template matches specialization; did you mean to use %0 as function template instead?
%select{variable|static data member}0 instantiated with function type %1
variable-sized object may not be initialized
'new' cannot allocate object of variably modified type %0
non-type template parameter of variably modified type %0
variably modified type %0 cannot be used as a template argument
'typeid' of variably modified type %0
CUDA device code does not support variadic functions
first two arguments to %0 must have the same type
first two arguments to %0 must be vectors
'vec_step' requires built-in scalar or vector type, %0 invalid
%select{too many|too few}0 elements in vector initialization (expected %1 elements, have %2)
unions cannot have virtual functions
second argument to __builtin_virtual_member_address must be the address of a virtual C++ member function: for example '&Foo::func'
'virtual' cannot be specified on member function templates
first argument to __builtin_virtual_member_address must have a type deriving from class where second argument was defined
first argument to __builtin_virtual_member_address must have C++ class type
'virtual' can only appear on non-static member functions
'virtual' can only be specified inside the class definition
variable length array declaration cannot have 'extern' linkage
variable length array declaration cannot have 'static' storage duration
variable length array declaration not allowed at file scope
variable length array cannot be formed during template argument deduction
variable length arrays are not supported for %select{the current target|'%1'}0
variably modified type declaration cannot have 'extern' linkage
variably modified type declaration not allowed at file scope
function declaration cannot have variably modified type
'void' must be the first and only parameter if specified
'void' as parameter must not have type qualifiers
defaulted comparison function must not be volatile
argument %0 to %1 must be a 2-bit unsigned literal (i.e. 0, 1, 2 or 3)
%ordinal0 argument must be an integer
%ordinal0 argument must be a WebAssembly table
%ordinal0 argument must match the element type of the WebAssembly table in the %ordinal1 argument
cannot %select{capture|take address of}0 WebAssembly reference
cannot cast %select{to|from}0 a WebAssembly table
invalid use of '__funcref' keyword outside the WebAssembly triple
%select{pointer|reference}0 to WebAssembly reference type is not allowed
WebAssembly reference type not allowed in exception specification
multi-dimensional arrays of WebAssembly references are not allowed
cannot %select{throw|catch}0 a WebAssembly reference type
cannot %select{assign|return|throw|subscript}0 a WebAssembly table
cannot use WebAssembly table as a function parameter
cannot use a WebAssembly table within a branch of a conditional expression
WebAssembly table cannot be declared within a function
invalid application of '%0' to WebAssembly table
WebAssembly table must be static
cannot form a %select{pointer|reference}0 to a WebAssembly table
existing instance variable %1 for __weak property %0 must be __weak
sampler type cannot be used with the __local and __global address space qualifiers
invalid rounding argument
scale argument must be 1, 2, 4, or 8
tile arguments must refer to different tiles
%0 attribute can only be applied to a typedef or a field declaration
%0 attribute can only be applied to non-record types
invalid type signature semantic kind %1
%0 attribute can only be applied once per declaration
semantics kind '%1' repeated more than once
%0 calling convention is not supported %select{for this target|on variadic function|on constructor/destructor|on builtin function}1
duplicate use of asm operand name "%0"
asm-specifier for input or output variable conflicts with asm clobber list
overloaded %0 cannot have %select{no|a defaulted|more than one}1 parameter before C++23
use of function template name with no prior declaration in function call with explicit template arguments is a C++20 extension
initializer for aggregate is not a compile-time constant
anonymous types declared in an anonymous %select{struct|union}0 are an extension
types declared in an anonymous %select{struct|union}0 are a Microsoft extension
anonymous %select{struct|union}0 cannot be '%1'
anonymous unions are a C11 extension
initialization of an array %diff{of type $ from a compound literal of type $|from a compound literal}0,1 is a GNU extension
parenthesized initialization of a member array is a GNU extension
implicit conversion from array size expression of type %0 to %select{integral|enumeration}1 type %2 is a C++11 extension
ISO C++ standards before C++17 do not allow new expression for type %0 to use list-initialization
'auto' type specifier is a C++11 extension
ISO C++ does not allow %select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2 because it casts away qualifiers, even though the source and destination types are unrelated
anonymous structs are a C11 extension
%select{qualifier in |static |}0array size %select{||'[*] '}0is a C99 feature
flexible array members are a C99 feature
'trivial_abi' cannot be applied to %0
captured structured bindings are a C++20 extension
cast between pointer-to-function and pointer-to-object is an extension
%select{case value|enumerator value|non-type template argument|array size|explicit specifier argument|noexcept specifier argument}0 %select{cannot be narrowed from type %2 to %3|evaluates to %2, which cannot be narrowed to type %3}1
complex initialization specifying real and imaginary components is an extension
use of this statement in a constexpr %select{function|constructor}0 is a C++14 extension
use of this statement in a constexpr %select{function|constructor}0 is a C++20 extension
use of this statement in a constexpr %select{function|constructor}0 is a C++23 extension
multiple return statements in constexpr function is a C++14 extension
constexpr constructor that does not initialize all members is a C++20 extension
%select{constexpr|consteval}1 %select{function|constructor}0 never produces a constant expression
function try block in constexpr %select{function|constructor}0 is a C++20 extension
variable declaration in a constexpr %select{function|constructor}0 is a C++14 extension
uninitialized variable in a constexpr %select{function|constructor}0 is a C++20 extension
definition of a %select{static|thread_local}1 variable in a constexpr %select{function|constructor}0 is a C++23 extension
type definition in a constexpr %select{function|constructor}0 is a C++14 extension
constexpr union constructor that does not initialize any member is a C++20 extension
'constinit' specifier missing on initializing declaration of %0
use of the %0 attribute is a C++14 extension
use of the %0 attribute is a C++17 extension
use of the %0 attribute is a C++20 extension
designated initializers are a C++20 extension
decomposition declarations are a C++17 extension
ISO C++17 does not permit structured binding declaration in a condition
decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is a C++20 extension
default initialization of an object of const type %0%select{| without a user-provided default constructor}1 is a Microsoft extension
defaulted comparison operators are a C++20 extension
defaulted definition of %select{%select{<ERROR>|equality|three-way|equality|relational}1 comparison operator|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is a C++23 extension
cannot delete expression with pointer-to-'void' type %0
ISO C++11 does not allow conversion from string literal to %0
designated initializers are a C99 feature
array designators are a C99 extension
brace elision for designated initializer is a C99 extension
mixture of designated and non-designated initializers in the same initializer list is a C99 extension
nested designators are a C99 extension
ISO C++ requires field designators to be specified in declaration order; field %1 will be initialized after field %0
destructor cannot be declared using a %select{typedef|type alias}1 %0 of the class name
ISO C++ considers this destructor name lookup to be ambiguous
ISO C++ requires the name after '::~' to be found in the same scope as the name before '::~'
empty %select{struct|union}0 is a GNU extension
befriending enumeration type %0 is a C++11 extension
enumeration values exceed range of largest integer
ISO C restricts enumerator values to range of 'int' (%0 is too %select{small|large}1)
incremented enumerator value %0 is not representable in the largest integer type
enumerator value is not representable in the underlying type %0
explicit capture of 'this' with a capture default of '=' is a C++20 extension
ambiguous use of internal linkage declaration %0 defined in multiple modules
excess elements in %select{array|vector|scalar|union|struct}0 initializer
excess elements in initializer for indivisible sizeless type %0
excess elements in char array initializer
explicit conversion functions are a C++11 extension
duplicate explicit instantiation of %0 ignored as a Microsoft extension
qualifier in explicit instantiation of %q0 requires a template-id (a typedef is not permitted)
explicit specialization cannot have a storage class
expression is not an %select{integer|integral}0 constant expression; folding it to a constant is a GNU extension
flexible array member %0 in otherwise empty %select{struct|interface|union|class|enum}1 is a GNU extension
flexible array member %0 in otherwise empty %select{struct|interface|union|class|enum}1 is a Microsoft extension
%0 may not be used as an array element due to flexible array member
%0 may not be nested in a struct due to flexible array member
flexible array initialization is a GNU extension
flexible array member %0 in a union is a GNU extension
flexible array member %0 in a union is a Microsoft extension
'begin' and 'end' returning different types (%0 and %1) is a C++17 extension
ISO C forbids forward references to 'enum' types
redeclaration of already-defined enum %0 is a GNU extension
use of member %0 found via unqualified lookup into dependent bases of class templates is a Microsoft extension
use of member %0 before its declaration is a Microsoft extension
complex numbers are an extension in a freestanding C99 implementation
unqualified friend declaration referring to type outside of the nearest enclosing namespace is a Microsoft extension; add a nested name specifier
anonymous structs are a GNU extension
arithmetic on%select{ a|}0 pointer%select{|s}0 to%select{ the|}2 function type%select{|s}2 %1%select{| and %3}2 is a GNU extension
subscript of a pointer to void is a GNU extension
arithmetic on%select{ a|}0 pointer%select{|s}0 to void is a GNU extension
jump from this goto statement to its label is a Microsoft extension
imaginary constants are a GNU extension
function previously declared with an %select{explicit|implicit}0 exception specification redeclared with an %select{implicit|explicit}0 exception specification
call to undeclared function %0; ISO C99 and later do not support implicit function declarations
implicitly declaring library function '%0' with type %1
call to undeclared library function '%0' with type %1; ISO C99 and later do not support implicit function declarations
missing 'typename' prior to dependent type name %0%1; implicit 'typename' is a C++20 extension
in-class initializer for static data member of type %0 is a GNU extension
in-class initializer for static data member of type %0 requires 'constexpr' specifier
in-class initializer for static data member is not a constant expression; folding it to a constant is a GNU extension
%select{|pointer to |reference to }0incomplete type %1 is not allowed in exception specification
ISO C++17 does not allow incrementing expression of type bool
initialized lambda captures are a C++14 extension
initialized lambda pack captures are a C++20 extension
initializing an array from a '%0' predefined identifier is a Microsoft extension
constant expression evaluates to %0 which cannot be narrowed to type %1
type %0 cannot be narrowed to %1 in initializer list
non-constant-expression cannot be narrowed from type %0 to %1 in initializer list
initializer %select{partially |}0overrides prior initialization of this subobject
initializer-string for char array is too long
initializer %select{partially |}0overrides prior initialization of this subobject
inline variables are a C++17 extension
ISO C does not support '~' for complex conjugation of %0
complex integer types are a GNU extension
ISO C does not support '++'/'--' on complex integer type %0
static %select{function|variable}0 %1 is used in an inline function with external linkage
static %select{function|variable}0 %1 is used in an inline function with external linkage
return type of 'main' is not 'int'
ISO C++ does not allow 'main' to be used by a program
too many braces around %select{scalar |}0initializer
class member cannot be redeclared
exception specification in declaration does not match previous declaration
exception specification in explicit instantiation does not match instantiated one
%0 is missing exception specification '%1'
type specifier missing, defaults to 'int'; ISO C99 and later do not support implicit int
mixing declarations and code is a C99 extension
import of C++ module '%0' appears within extern "C" language linkage specification
redundant #include of module '%0' appears within %1
accessing inaccessible direct base %0 of %1 is a Microsoft extension
anonymous %select{structs|unions}0 are a Microsoft extension
static_cast between pointer-to-function and pointer-to-object is a Microsoft extension
using the undeclared type %0 as a default template argument is a Microsoft extension
non-type template argument containing a dereference operation is a Microsoft extension
explicit constructor calls are a Microsoft extension
forward references to 'enum' types are a Microsoft extension
implicit conversion between pointer-to-function and pointer-to-object is a Microsoft extension
%select{class template|class template partial|variable template|variable template partial|function template|member function|static data member|member class|member enumeration}0 specialization of %1 not in %select{a namespace enclosing %2|class %2 or an enclosing namespace}3 is a Microsoft extension
template argument for template type parameter must be a type; omitted 'typename' is a Microsoft extension
using declaration referring to inaccessible member '%0' (which refers to accessible member '%1') is a Microsoft compatibility extension
'mutable' on a reference type is a Microsoft extension
lookup of %0 in member access expression is ambiguous; using member of %1
use of enumeration in a nested name specifier is a C++11 extension
%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers in nested pointer types
when type is in parentheses, array cannot have dynamic size
declaration does not declare anything
%select{struct|union}0 without named members is a GNU extension
anonymous non-C-compatible type given name for linkage purposes by %select{typedef|alias}0 declaration; add a tag name here
non-class friend type %0 is a C++11 extension
'main' is not allowed to be declared _Noreturn
offset of on non-POD type %0
offset of on non-standard-layout type %0
initialization clause of OpenMP for loop is not in canonical form ('var = init' or 'T var = init')
Clang permits use of type 'double' regardless pragma if 'cl_khr_fp64' is supported
vector component name '%0' is a feature from OpenCL version 3.0 onwards
replacement function %0 cannot be declared 'inline'
declaring overloaded %0 as 'static' is a C++23 extension
out-of-line declaration of a member must be a definition
ISO C++ specifies that qualified reference to %0 is a constructor name rather than a %select{template name|type}1 in this context, despite preceding %select{'typename'|'template'}2 keyword
exception specification of overriding function is more lax than base version
ISO C++20 considers use of overloaded operator '%0' (with operand types %1 and %2) to be ambiguous despite there being a unique best viable function%select{ with non-reversed arguments|}3
ISO C++20 requires return type of selected 'operator==' function for rewritten '%1' comparison to be 'bool', not %0
redefinition of default argument
parameter %0 was not declared, defaults to 'int'; ISO C99 and later do not support implicit int
%diff{promoted type $ of K&R function parameter is not compatible with the parameter type $|promoted type of K&R function parameter is not compatible with parameter type}0,1 declared in a previous prototype
omitting the parameter name in a function definition is a C2x extension
%select{class|variable}0 template partial specialization is not more specialized than the primary template
%select{class|variable}0 template partial specialization contains %select{a template parameter|template parameters}1 that cannot be deduced; this partial specialization will never be used
plain '_Complex' requires a type specifier; assuming '_Complex double'
invoking a pointer to a 'const &' member function on an rvalue is a C++20 extension
predefined identifier is only valid inside function
pseudo-destructors on type void are a Microsoft extension
function definition with pure-specifier is a Microsoft extension
qualified destructor name only found in lexical scope; omit the qualifier to find this type name by unqualified lookup
redefinition of typedef %0 is a C11 feature
ISO C++17 does not allow 'register' storage class specifier
friend function %0 retaining previous language linkage is an extension
%select{void function|void method|constructor|destructor}1 %0 should not return a value
void %select{function|method|block}1 %0 should not return void expression
non-void %select{function|method}1 %0 should return a value
C++98 requires an accessible copy constructor for class %2 when binding a reference to a temporary; was %select{private|protected}0
no viable constructor %select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}0 of type %1; C++98 requires a copy constructor when binding a reference to a temporary
invalid application of '%0' to a function type
invalid application of '%0' to a void type
'%0' is not permitted on a declaration of a type
capture of '*this' by copy is a C++17 extension
static data member %0 in union is a C++11 extension
redeclaring non-static %0 as static is a Microsoft extension
'static' can only be specified inside the class definition
string literal operator templates are a GNU extension
ISO C90 does not allow subscripting non-lvalue array
overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension
address non-type template argument cannot be surrounded by parentheses
template argument uses local type %0
non-type template argument referring to %select{function|object}0 %1 with internal linkage is a C++11 extension
template argument uses unnamed type
'template' keyword outside of a template
declaration of %0 shadows template parameter
default template arguments for a function template are a C++11 extension
defining a type within '%select{__builtin_offsetof|offsetof}0' is a Clang extension
taking the address of a temporary object of type %0
ISO C forbids taking the address of an expression of type 'void'
method parameter type %diff{$ does not match super class method parameter type $|does not match super class method parameter type}0,1
C99 forbids casting nonscalar type %0 to the same type
cast to union type is a GNU extension
pointer comparisons before C11 need to be between two complete or two incomplete types; %0 is %select{|in}2complete and %1 is %select{|in}3complete
comparison of distinct pointer types%diff{ ($ and $)|}0,1
equality comparison between function pointer and void pointer (%0 and %1)
comparison between pointer and integer (%0 and %1)
incompatible operand types (%0 and %1)
pointer type mismatch%diff{ ($ and $)|}0,1
C99 forbids conditional expressions with only one void side
pointer/integer type mismatch in conditional expression%diff{ ($ and $)|}0,1
%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers
incompatible function pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3
incompatible pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3
%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 converts between pointers to integer types %select{with different sign|where one is of the unique plain 'char' type and the other is not}3
incompatible integer to pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3
incompatible pointer to integer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3
%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 converts between void pointer and function pointer
tentative definition of variable with internal linkage has incomplete non-array type %0
ISO C does not allow indirection on operand of type %0
ISO C++ does not allow indirection on operand of type %0
ordered comparison of function pointers (%0 and %1)
ordered comparison between pointer and zero (%0 and %1) is an extension
ordered comparison between pointer and integer (%0 and %1)
zero size arrays are an extension
typedef requires a name
missing 'typename' prior to dependent type name '%0%1'
'typename' occurs outside of a template
use of undeclared identifier %0; unqualified lookup into dependent bases of class template %1 is a Microsoft extension
ISO C++ requires a definition in this translation unit for %select{function|variable}0 %q1 because its type does not have linkage
unelaborated friend declaration is a C++11 extension; specify '%select{struct|interface|union|class|enum}0' to befriend %1
union member %0 has reference type %1, which is a Microsoft extension
unqualified base initializer of class templates is a Microsoft extension
use of out-of-scope declaration of %0%select{| whose type is not compatible with that of an implicit declaration}1
using declaration naming a scoped enumerator is a C++20 extension
using directive refers to implicitly-defined namespace 'std'
field %0 with variable sized type %1 not at the end of a struct or class is a GNU extension
variable templates are a C++14 extension
'main' is not allowed to be declared variadic
variable length arrays are a C99 feature
variable length array folded to constant array as an extension
'%0' cannot be signed or unsigned
constrained by %select{|implicitly }1%select{private|protected}0 inheritance here
%select{|implicitly }1declared %select{private|protected}0 here
protected %select{constructor|destructor}0 can only be used to %select{construct|destroy}0 a base class subobject
must name member using the type of the current context %0
can only access this member on an object of type %0
add stubs for missing protocol requirements
add a '@synthesize' directive
add a pair of parentheses to declare a variable
candidate function made ineligible by enable_if
declared with %0 attribute here
allocated with 'new%select{[]|}0' here
lookup in the object type %0 refers here
lookup from the current scope refers here
similar constraint expressions not considered equivalent; constraint expressions cannot be considered equivalent unless they originate from the same concept
similar constraint expression here
candidate found by name lookup is %q0
inherited from base class %0 here
member found by ambiguous name lookup
member type %0 found by ambiguous name lookup
because of ambiguity in conversion %diff{of $ to $|between types}0,1
anonymous namespace begins here
use __bridge to convert directly (no change in ownership)
use %select{__bridge_retained|CFBridgingRetain call}1 to make an ARC object available as a +1 %0
use %select{__bridge_transfer|CFBridgingRelease call}1 to transfer ownership of a +1 %0 into ARC
use __bridge with C-style cast to convert directly (no change in ownership)
use __bridge_retained with C-style cast to make an ARC object available as a +1 %0
use __bridge_transfer with C-style cast to transfer ownership of a +1 %0 into ARC
field has non-trivial ownership qualification
declaration uses type that is ill-formed in ARC
declaration in interface is not in the '%select{alloc|copy|init|new}0' family because %select{its result type is not an object pointer|its result type is unrelated to its receiver type}1
init method must return a type related to its receiver type
declaration in interface
block will be retained by %select{the captured object|an object strongly retained by the captured object}0
also accessed here
declaration uses __weak, but ARC is disabled
declaration uses __weak, which the current deployment target does not support
array %0 declared here
add 'u8' prefix to form a 'char8_t' string literal
conversion to %select{integral|enumeration}0 type %1 declared here
constraint '%0' is already present here
use constraint modifier "%0"
type %0 is incomplete
%select{and|because}0 '%1' evaluated to false
%select{and|because}0 '%1' (%2 %3 %4) evaluated to false
setter and getter must both be synthesized, or both be user defined, or the property must be nonatomic
attribute is here
annotating the 'if %select{constexpr|consteval}0' statement here
annotating the infinite loop here
previous %select{unmarked |}0overload of function is here
property should be changed to be readwrite
%0 has been explicitly marked %select{unavailable|deleted|deprecated}1 here
return type of 'await_ready' is required to be contextually convertible to 'bool'
explicitly cast the pointer to silence this warning
base class %0 specified here
bit-field is declared here
did you mean to use __block %0?
in call to printing function with arguments '(%0)' while dumping struct
called by %0
previous call is here%select{; set to nil to indicate it cannot be called afterwards|}0
%0 declared here
callee declares array parameter as static here
'trivial_abi' is disallowed on %0 because %select{its copy constructors and move constructors are all deleted|it is polymorphic|it has a base of a non-trivial class type|it has a virtual base|it has a __weak field|it has a field of a non-trivial class type|it has an address-discriminated __ptrauth field}1
declaration missing '[[carries_dependency]]' attribute is here
cast one or both operands to int to silence this warning
cast expression to void to silence warning
%select{category|class extension}0 conforms to protocol %1 which defines method %2
consider making the bitfield type %select{unsigned|signed}0
consider defining %0 with the '%1' calling convention
while checking constraint satisfaction for class template partial specialization '%0' required here
while checking constraint satisfaction for function '%0' required here
while checking constraint satisfaction for template '%0' required here
while checking constraint satisfaction for variable template partial specialization '%0' required here
class is declared here
explicitly declare getter %objcinstance0 with '%1' to return an 'unowned' object
parameter of the 'collapse' clause
in defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator for %1 first required here
compatible type %0 specified here
place parentheses around the string literal to silence warning
%select{and|because}0 '%1' evaluated to false
while checking the satisfaction of concept '%0' requested here
place parentheses around the assignment to silence this warning
use '==' to turn this assignment into an equality comparison
use '!=' to turn this compound assignment into an inequality comparison
conflicting attribute is here
conflicting prototype is here
conflicting %0 here
previous return statement is here
member not initialized by constructor
%select{data member %1|base class %2}0 declared here
virtual base class declared here
add the %select{'require_constant_initialization' attribute|'constinit' specifier}0 to the initializing declaration here
variable declared constinit here
while calculating associated constraint of template '%0' here
constraint depends on a previously diagnosed expression
while substituting template arguments into constraint expression here
type conversion function declared here
use 'static' to give inline function %0 internal linkage
must be declared with 'noexcept'
call to %0 implicitly required by coroutine function here
call to 'await_transform' implicitly required by 'co_await' here
call to '%select{initial_suspend|final_suspend}0' implicitly required by the %select{initial suspend point|final suspend point}0
conflicting __device__ function declared here
const variable cannot be emitted on device side due to dynamic initialization
the %select{1st|2nd|3rd}1 template parameter of %0 needs to be %select{a type|an integer or enum value}2
%0 needs to have exactly %1 template parameters
%0 needs to be instantiated from a class template with proper template arguments
host variable declared here
candidate template ignored: target attributes do not match
remove 'u8' prefix to avoid a change of behavior; Clang encodes unprefixed narrow string literals as UTF-8
annotate %select{%1|anonymous %1}0 with an availability attribute to silence this warning
this declaration is not a prototype; add %select{'void'|parameter declarations}0 to make it %select{a prototype for a zero-parameter function|one}0
declare the parameter __strong or capture a __block __strong variable to keep values alive across autorelease pools
function is a coroutine due to use of '%0' here
declared %select{'returns_nonnull'|'nonnull'}0 here
required by %select{'require_constant_initialization' attribute|'constinit' specifier}0 here
during template argument deduction for %select{class|variable}0 template %select{partial specialization |}1%2 %3
deduction guide declared %0 by intervening access specifier
member template declared %0 here
in instantiation of default argument for '%0' required here
default argument declared here
in instantiation of default function argument expression for '%0' required here
default member initializer declared here
defaulted %0 is implicitly deleted because implied %select{|'==' |'<' }1comparison %select{|for member %3 |for base class %3 }2is ambiguous
defaulted %0 is implicitly deleted because it would invoke a deleted comparison function%select{| for member %2| for base class %2}1
return type of defaulted 'operator<=>' cannot be deduced because return type %2 of three-way comparison for %select{|member|base class}0 %1 is not a standard comparison category type
selected 'operator<=>' for %select{|member|base class}0 %1 declared here
%select{|member|base class}0 %1 declared here
defaulted %0 is implicitly deleted because it would invoke a %select{private|protected}3 %4%select{ member of %6| member of %6 to compare member %2| to compare base class %2}1
defaulted %0 is implicitly deleted because there is no viable %select{three-way comparison function|'operator=='}1 for %select{|member |base class }2%3
three-way comparison cannot be synthesized because there is no viable function for %select{'=='|'<'}0 comparison
non-constexpr comparison function would be used to compare %select{|member %1|base class %1}0
non-constexpr comparison function declared here
defaulted %0 is implicitly deleted because this non-rewritten comparison function would be the best match for the comparison
defaulted %0 is implicitly deleted because a builtin comparison function using this conversion would be the best match for the comparison
defaulted %0 is implicitly deleted because class %1 has a reference member
defaulted %0 is implicitly deleted because %2 is a %select{union-like class|union}1 with variant members
%0 defined here
conversion to pointer type %0
qualify call to silence this warning
%select{copy|move}0 assignment operator of %1 is implicitly deleted because field %2 is of %select{reference|const-qualified}4 type %3
copy constructor of %0 is implicitly deleted because field %1 is of rvalue reference type %2
copy %select{constructor|assignment operator}0 is implicitly deleted because %1 has a user-declared move %select{constructor|assignment operator}2
%select{default constructor of|constructor inherited by}0 %1 is implicitly deleted because all %select{data members|data members of an anonymous union member}2 are const-qualified
%select{default constructor of|constructor inherited by}0 %1 is implicitly deleted because field %2 of %select{reference|const-qualified}4 type %3 would not be initialized
virtual destructor requires an unambiguous, accessible 'operator delete'
%select{default constructor of|copy constructor of|move constructor of|copy assignment operator of|move assignment operator of|destructor of|constructor inherited by}0 %1 is implicitly deleted because %select{base class %3|%select{||||variant }4field %3}2 %select{has %select{no|a deleted|multiple|an inaccessible|a non-trivial}4 %select{%select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor|%select{default|corresponding|default|default|default}4 constructor}0|destructor}5%select{||s||}4|is an ObjC pointer|has an address-discriminated ptrauth qualifier}6
function is implicitly deleted because its declared type does not match the type of an implicit %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0
candidate ignored: %select{not a function template|not a member of the enclosing namespace; did you mean to explicitly qualify the specialization?}0
must qualify identifier to find this declaration in dependent base class
template parameter is used in default argument declared here
add an explicit capture of 'this' to capture '*this' by reference
first non-designated initializer is here
non-type declaration found by destructor name lookup
type %0 found by destructor name lookup
direct member declared here
direct method %0 declared here
due to %0 being dllexported%select{|; try compiling in C++11 mode}1
asm operand name "%0" first referenced here
element %0 also has value %1
put the semicolon on a separate line to silence this warning
remove parentheses to declare a variable
change this ',' to a ';' to call %0
replace parentheses with an initializer to declare a variable
using declaration annotated with 'using_if_exists' here
type was declared read-only here
jump enters lifetime of block which captures a destructible C++ object
jump enters lifetime of block which captures a C struct that is non-trivial to destroy
jump enters lifetime of block which strongly captures a variable
jump enters lifetime of block which weakly captures a variable
jump enters lifetime of a compound literal that is non-trivial to destruct
jump enters a statement expression
%0 declared here
enum %0 was explicitly specialized here
remove extraneous parentheses around the comparison to silence this warning
use '=' to turn this equality comparison into an assignment
declared here%select{ in module '%1'|}0
place parentheses around comparison expression to evaluate it first
in evaluation of exception specification for %q0 needed here
jump exits scope of __block variable
jump exits lifetime of block which captures a destructible C++ object
jump exits lifetime of block which captures a C struct that is non-trivial to destroy
jump exits lifetime of block which strongly captures a variable
jump exits lifetime of block which weakly captures a variable
jump exits scope of variable with __attribute__((cleanup))
jump exits lifetime of a compound literal that is non-trivial to destruct
jump exits catch block
jump exits try block
jump exits scope of variable with non-trivial destructor
jump exits autoreleasepool block
jump exits @catch block
jump exits @finally block
jump exits scope of __strong variable
jump exits @synchronized block
jump exits @try block
jump exits scope of __weak variable
jump exits __except block
jump exits __finally block
jump exits __try block
jump exits scope of lifetime-extended temporary with non-trivial destructor
explicit %select{constructor|deduction guide}0 declared here
explicit instantiation candidate function %q0 template here %1
explicit instantiation definition is here
explicit instantiation refers here
while substituting explicitly-specified template arguments into function template %0 %1
'template<>' header not required for explicitly-specialized class %0 declared here
export block begins here
expression evaluates to '%0 %1 %2'
%select{and|because}0 type constraint '%1' was not satisfied:
%select{and|because}0 %1 does not satisfy %2:
%select{and|because}0 '%1' would be invalid: %2
%select{and|because}0 '%1' would be invalid
%select{and|because}0 '%1' may throw an exception
%select{and|because}0 '%1' would be invalid: %2
%select{and|because}0 '%1' would be invalid
extern "C" language linkage specification begins here
declared %select{in global scope|with C language linkage}0 here
did you forget ';'?
field designator refers here
add missing switch cases
mark %0 as '%select{final|sealed}1' to silence this warning
final overrider of %q0 in %1
add a count attribute within the declarator brackets or convert the parameter to a pointer with a count or size attribute
conflicting arguments for %select{count|end|terminator}0 were '%1' and '%2'
consider adding '%1' to '%0'
'%0' has been assigned here
'%0' is initialized with a '__single' pointer
previously assigned here
remove '&' to get address as %0 instead of %1
cast to %0 first to keep bounds of %1
silence by making the destination '__single'
%select{count|size}0 passed here
consider using '__null_terminated_to_indexable()' to perform this conversion. Note this conversion requires a linear scan of memory to find the null terminator
consider using '__unsafe_null_terminated_from_indexable()' to perform this conversion. Note this performs a linear scan of memory to find the null terminator
consider using '__unsafe_null_terminated_from_indexable()' with a pointer to the null terminator to perform this conversion. Note this performs the conversion in constant time
initialized flexible array member %0 is here
selected '%select{begin|end}0' %select{function|template }1%2 with iterator type %3
in implicit call to 'operator%select{!=|*|++}0' for iterator of type %1
member is not a candidate because range type %0 has no '%select{end|begin}1' member
did you mean to use '%0'?
treat the string as an argument to avoid this
format string is defined here
forward declaration of class here
%0 is not defined, but forward declared here; conversion would be valid if it was derived from %1
forward declaration of template entity is here
found near match '%0'
from 'diagnose_if' attribute on %0:
add enclosing parentheses to perform a function-style cast
did you mean %0?
while substituting deduced template arguments into function template %0 %1
in instantiation of function template specialization %q0 requested here
function template %q0 matches specialization %1
suffix with parentheses to turn this into a function call
prefix with the address-of operator to silence this warning
or because setter is declared here, but no getter method %0 is found
add 'module;' to the start of the file to introduce a global module fragment
inline assembly label %0 declared here
guarded_by declared here
hidden overloaded virtual function %q0 declared here%select{|: different classes%diff{ ($ vs $)|}2,3|: different number of parameters (%2 vs %3)|: type mismatch at %ordinal2 parameter%diff{ ($ vs $)|}3,4|: different return type%diff{ ($ vs $)|}2,3|: different qualifiers (%2 vs %3)|: different exception specifications}1
type declaration hidden
declaration hides type
conversion to %select{integral|enumeration}0 type %1 declared here
field of illegal %select{type|pointer type}0 %1 declared here
%0 is an immediate %select{function|constructor}5 because %select{its body|the%select{| default}7 initializer of %8}6 %select{evaluates the address of %select{an immediate|a consteval}2 function %1|contains a call to %select{an immediate|a consteval}2 %select{function|constructor}4 %1 and that call is not a constant expression}3
class implementation is declared here
when implemented by class %0
while checking implicit 'delete this' for virtual destructor
implicit %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 inferred target collision: call to both %select{__device__|__global__|__host__|__host__ __device__}1 and %select{__device__|__global__|__host__|__host__ __device__}2 members
%0 is an implicit parameter
explicitly defaulted function was implicitly deleted here
in implicit initialization of binding declaration %0
add 'constexpr'
while declaring the corresponding implicit 'operator==' for this defaulted 'operator<=>'
while declaring the implicit %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}1 for %0
when looking up '%select{begin|end}0' function for range expression of type %1
in implicit initialization of %select{array element %1 with omitted initializer|field %1 with omitted initializer|trailing array elements in runtime-sized array new}0
in initialization of temporary of type %0 created to list-initialize this reference
include the header <%0> or explicitly provide a declaration for '%1'
conformance of forward class %0 to protocol %1 can not be confirmed
possible target of %select{indirect|asm}0 goto statement
consider using __builtin_trap() or qualifying pointer with 'volatile'
use '|=' to turn this inequality comparison into an or-assignment
insert an explicit cast to silence this issue
initializing field %0 with default member initializer
%select{field|base class}0 %1 will be initialized after %select{field|base}2 %3
insert 'break;' to avoid fall-through
insert '%0;' to silence this warning
add an explicit instantiation declaration to suppress this warning if %q0 is explicitly instantiated in another translation unit
(skipping %0 context%s0 in backtrace; use -ftemplate-backtrace-limit=0 to see all)
%select{implicit|explicit}0 instantiation first required here
in the default initializer of %0
initialized here %0
it delegates to
instance variable is declared here
%select{implicitly |}2captured%select{| by reference}3%select{%select{ due to use|}2 here| via initialization of lambda capture %0}1
lambda expression begins here
default capture by %select{value|reference}0
while substituting into a lambda expression here
explicitly capture 'this'
implicit capture of lambda object due to conversion to block pointer here
capture %0 by %select{value|reference}1
%select{%select{reference|'std::initializer_list'}0 member|member with %select{reference|'std::initializer_list'}0 subobject}1 declared here
local declaration nearly matches
type of %ordinal0 parameter of local declaration does not match definition%diff{ ($ vs $)|}1,2
%select{via initialization of|binding reference}0 variable %select{%2 |}1here
the other acquisition of %0 '%1' is here
%0 acquired here
use '%0' for a bitwise operation
remove constant to silence this warning
add parentheses after the '!' to evaluate the %select{comparison|bitwise operator}0 first
add parentheses around left hand side expression to silence this warning
%select{decremented|incremented}0 here
change return type to 'int'
remove '_Noreturn'
member is declared here
member %0 declared here
member declaration does not match because it %select{is|is not}0 const qualified
member declaration nearly matches
type of %ordinal0 parameter of member declaration does not match definition%diff{ ($ vs $)|}1,2
member %0 first declared here
'->' applied to return value of the operator->() declared here
in %select{implicit|defaulted}0 %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}1 for %2 first required here
explicitly cast the argument to size_t to silence this warning
did you mean to compare the result of %0 instead?
method %0 declared here
compiler has implicitly changed method %0 return type
method %0 is used for the forward class
passing byval argument %0 with potentially incompatible alignment here
%0 begins here
function multiversioning caused by this declaration
target function has calling convention %1 (expected %0)
%0 declared here
add 'void' to the parameter list to turn an old-style K&R function declaration into a prototype
target function %select{is a member of different class%diff{ (expected $ but has $)|}1,2|has different number of parameters (expected %1 but has %2)|has type mismatch at %ordinal3 parameter%diff{ (expected $ but has $)|}1,2|has different return type%diff{ ($ expected but has $)|}1,2}0
target %select{constructor|destructor}0 is declared here
namespace %0 defined here
consider using vld1_%0%1() to initialize a vector from memory, or vcreate_%0%1() to initialize from an integer constant
consider using vld1q_%0%1() to initialize a vector from memory, or vcombine_%0%1(vcreate_%0%1(), vcreate_%0%1()) to initialize from integer constants
while checking the satisfaction of nested requirement requested here
%select{and|because}0 '%1' would be invalid%2
%select{and|because}0 '%1' would be invalid
next field declaration is here
next %select{instance variable declaration|synthesized instance variable}0 is here
type is not C-compatible due to this %select{base class|default member initializer|lambda expression|friend declaration|member declaration}0
non-deducible template parameter %0
not-yet-instantiated member is declared here
%0 is not literal because it has base class %1 of non-literal type
%0 is not literal because it has data member %1 of %select{non-literal|volatile}3 type %2
incomplete type %0 is not a literal type
lambda closure types are non-literal types before C++17
%0 is not literal because it is not an aggregate and has no constexpr constructors other than copy or move constructors
%0 is not literal because its destructor is not constexpr
%0 is not literal because it has a non-trivial destructor
%0 is not literal because it has a user-provided destructor
%select{struct|interface|class}0 with virtual base %plural{1:class|:classes}1 is not a literal type
non-template declaration found by name lookup
%select{%2 has subobjects that are|%3 has type %2 that is}0 non-trivial to %select{default-initialize|destruct|copy}1
non-usual %0 declared here
non-templated declaration is here
because it has a default argument
because field %0 has an initializer
field is non-trivial to %select{copy|default-initialize}0
because type %0 has a virtual %select{member function|base class}1
because no %select{<<ERROR>>|constructor|constructor|assignment operator|assignment operator|<<ERROR>>}2 can be used to %select{<<ERROR>>|copy|move|copy|move|<<ERROR>>}2 %select{base class|field|an object}0 of type %3
because %select{base class of |field of |}0type %1 has no default constructor
because type %0 has a member with %select{no|no|__strong|__weak|__autoreleasing}1 ownership
because its parameter is %diff{of type $, not $|of the wrong type}2,3
because the function selected to %select{construct|copy|move|copy|move|destroy}2 %select{base class|field}0 of type %1 is not trivial
because %select{base class of |field of |}0type %1 has a user-provided %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}2
because it is a variadic function
destructor for %0 is not trivial because it is virtual
%0 should be declared prior to the call site%select{| or in %2| or in an associated namespace of one of its arguments}1
add 'export' here if this is intended to be a module interface unit
%0 is not a structural type because it has a mutable non-static data member
%0 is not a structural type because it has a %select{non-static data member|base class}1 that is not public
%0 is not a structural type because it has a non-static data member of rvalue reference type
%0 is not a structural type because it has a %select{non-static data member|base class}1 of non-structural type %2
previous equal key is here
insert '%select{_Nonnull|_Nullable|_Null_unspecified}0' if the %select{pointer|block pointer|member pointer|array parameter}1 %select{should never be null|may be null|should not declare nullability}0
%0 specified here
use nullability type specifier %0 to affect the innermost pointer type of %1
%0 declared here
method marked as designated initializer of the class here
use 'isEqual:' instead
%select{first|second|third}0 parameter has unexpected type %1 (should be %2)
method returns unexpected type %0 (should be an object type)
add a super class to fix this problem
type parameter %0 declared here
method %0 that returns %1 declared here
%select{expected assignment expression|expected compound statement|expected exactly two expression statements|expected in right hand side of the first expression}0
%select{expected compound statement|expected exactly one expression statement|expected assignment statement|expected conditional operator|expect result value to be at false expression|expect binary operator in conditional expression|expect '<', '>' or '==' as order operator|expect comparison in a form of 'x == e', 'e == x', 'x ordop expr', or 'expr ordop x'|expect lvalue for result value|expect scalar value|expect integer value|unexpected 'else' statement|expect '==' operator|expect an assignment statement 'v = x'|expect a 'if' statement|expect no more than two statements|expect a compound statement|expect 'else' statement|expect a form 'r = x == e; if (r) ...'}0
%select{expected an expression statement|expected built-in assignment operator|expected expression of scalar type|expected lvalue expression}0
%select{expected an expression statement|expected built-in binary or unary operator|expected unary decrement/increment operation|expected expression of scalar type|expected assignment expression|expected built-in binary operator|expected one of '+', '*', '-', '/', '&', '^', '%|', '<<', or '>>' built-in operations|expected in right hand side of expression}0
as specified in %select{'collapse'|'ordered'|'collapse' and 'ordered'}0 clause%select{||s}0
conversion to %select{integral|enumeration}0 type %1 declared here
%select{|previous }0'hint' clause with value '%1'
%select{|previous }0directive with no 'hint' clause specified
explicit data sharing attribute requested here
explicit data sharing attribute, data mapping attribute, or is_device_ptr clause requested here
'%0' directive found here
jump exits scope of OpenMP structured block
defined as %0
memory order clause '%0' is specified here
implicitly determined as %0
expected length on mapping of 'this' array section expression to be '1'
expected lower bound on mapping of 'this' array section expression to be '0' or not specified
expected 'this' subscript expression on map clause to be 'this[0]'
loop step is expected to be %select{negative|positive}0 due to this condition
marked as 'declare variant' here
marked as 'device_type(%0)' here
%select{statement|directive}0 outside teams construct here
nested teams construct here
'nowait' clause is here
'ordered' clause%select{| with specified parameter}0
predefined trait '%0' used here
%select{static data member is predetermined as shared|variable with static storage duration is predetermined as shared|loop iteration variable is predetermined as private|loop iteration variable is predetermined as linear|loop iteration variable is predetermined as lastprivate|constant variable is predetermined as shared|global variable is predetermined as shared|non-shared variable in a task construct is predetermined as firstprivate|variable with automatic storage duration is predetermined as private}0%select{|; perhaps you forget to enclose 'omp %2' directive into a parallel or another task region?}1
previous allocator is specified here
'%0' clause is specified here
previous 'critical' region starts here
previous '%0' directive used here
'reduction' clause with 'inscan' modifier is used here
'%0' clause used here
previous clause with directive name modifier specified here
previously marked as task_reduction with different reduction operation
jump bypasses OpenMP structured block
previously referenced here
'%0' previously encountered here
%0 clause previously used here
predetermined as a firstprivate in a task construct here
previously declared '%0' here
use -foperator-arrow-depth=N to increase 'operator->' limit
'operator->' declared here produces an object of type %0
(skipping %0 'operator->'%s0 in backtrace)
parameter of overridden method is annotated with __attribute__((noescape))
overridden method is here
overridden virtual function is here
mark 'operator==' as const or add a matching 'operator!=' to resolve the ambiguity
ambiguous candidate function with reversed arguments
ambiguity is between a regular call to this operator and a call with the argument order reversed
candidate function with non-reversed arguments
built-in candidate %0
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %3}1%select{| has different class%diff{ (expected $ but has $)|}5,6| has different number of parameters (expected %5 but has %6)| has type mismatch at %ordinal5 parameter%diff{ (expected $ but has $)|}6,7| has different return type%diff{ ($ expected but has $)|}5,6| has different qualifiers (expected %5 but found %6)| has different exception specification}4
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: requires%select{ at least| at most|}3 %4 argument%s4, but %5 %plural{1:was|:were}5 provided
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: %select{requires at least|allows at most single|requires single}3 argument %4, but %plural{0:no|:%5}5 arguments were provided
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: cannot %select{pass pointer to|bind reference in}5 %3 %select{as a pointer to|to object in}5 %4 in %ordinal6 argument
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: 'this' object is in %3, but method expects object in %4
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: cannot implicitly convert argument %diff{of type $ to $|type to parameter type}3,4 for %select{%ordinal6 argument|object argument}5 under ARC
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: cannot %select{convert from|convert from|bind}3 %select{base class pointer|superclass|base class object of type}3 %4 to %select{derived class pointer|subclass|derived class reference}3 %5 for %ordinal6 argument
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: no known conversion %diff{from $ to $|from argument type to parameter type}3,4 for %select{%ordinal6 argument|object argument}5%select{|; dereference the argument with *|; take the address of the argument with &|; remove *|; remove &}7
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: cannot convert argument of incomplete type %diff{$ to $|to parameter type}3,4 for %select{%ordinal6 argument|object argument}5%select{|; dereference the argument with *|; take the address of the argument with &|; remove *|; remove &}7
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: %ordinal5 argument (%3) would lose %select{const|restrict|const and restrict|volatile|const and volatile|volatile and restrict|const, volatile, and restrict}4 qualifier%select{||s||s|s|s}4
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: 'this' argument has type %3, but method is not marked %select{const|restrict|const or restrict|volatile|const or volatile|volatile or restrict|const, volatile, or restrict}4
candidate template ignored: failed template argument deduction
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: %select{%ordinal7|'this'}6 argument (%3) has %select{no|__weak|__strong}4 ownership, but parameter has %select{no|__weak|__strong}5 ownership
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: %select{cannot convert initializer list|too few initializers in list|too many initializers in list}7 argument to %4
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: no overload of %4 matching %3 for %ordinal5 argument
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: %select{%ordinal7|'this'}6 argument (%3) has %select{no|__unsafe_unretained|__strong|__weak|__autoreleasing}4 ownership, but parameter has %select{no|__unsafe_unretained|__strong|__weak|__autoreleasing}5 ownership
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: %ordinal8 argument (%3) has %select{no ptrauth|%5}4 qualifier, but parameter has %select{no ptrauth|%7}6 qualifier
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: call to %select{__device__|__global__|__host__|__host__ __device__|invalid}3 function from %select{__device__|__global__|__host__|__host__ __device__|invalid}4 function
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: expects an %select{lvalue|rvalue}5 for %select{%ordinal4 argument|object argument}3
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: constraints not satisfied
candidate template ignored: deduced type %diff{$ of %select{|element of }4%ordinal0 parameter does not match adjusted type $ of %select{|element of }4argument|of %select{|element of }4%ordinal0 parameter does not match adjusted type of %select{|element of }4argument}1,2%3
candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 has been %select{explicitly made unavailable|explicitly deleted|implicitly deleted}3
candidate template ignored: disabled by %0%1
candidate disabled: %0
candidate template ignored: requirement '%0' was not satisfied%1
explicit %select{constructor|conversion function|deduction guide}0 is not a candidate%select{| (explicit specifier evaluates to true)}1
candidate template ignored: invalid explicitly-specified argument for template parameter %0
candidate template ignored: invalid explicitly-specified argument for %ordinal0 template parameter
candidate address cannot be taken because parameter %0 has pass_object_size attribute
candidate %select{constructor|template}0 ignored: instantiation %select{takes|would take}0 its own class type by value
candidate constructor ignored: cannot be used to construct an object in address space %0
candidate template ignored: couldn't infer template argument %0
candidate template ignored: deduced too few arguments for expanded pack %0; no argument for %ordinal1 expanded parameter in deduced argument pack %2
candidate template ignored: deduced %select{conflicting types|conflicting values|conflicting templates|packs of different lengths}0 for parameter %1%diff{ ($ vs. $)|}2,3
candidate template ignored: deduced values %diff{of conflicting types for parameter %0 (%1 of type $ vs. %3 of type $)|%1 and %3 of conflicting types for parameter %0}2,4
constructor from base class %0 inherited here
candidate %select{constructor|template}0 ignored: inherited constructor cannot be used to %select{copy|move}1 object
candidate template ignored: substitution exceeded maximum template instantiation depth
candidate template ignored: could not match %diff{$ against $|types}0,1
candidate template ignored: could not match %q0 against %q1
candidate template ignored: substitution failure%0%1
candidate template ignored: cannot deduce a type for %0 that would make %2 equal %1
candidate template ignored: constraints not satisfied%0
conversion candidate of type %0
conversion candidate %0 not viable: constraints not satisfied
remaining %0 candidate%s0 omitted; pass -fshow-overloads=all to show them
declared with index %0 here
passing argument to parameter here
while substituting into concept arguments here; substitution failures not allowed in concept arguments
passing argument to parameter %0 here
parameter pack %0 declared here
parameter of type %0 is declared here
%0 has been marked as being introduced in %1 %2 here, but the deployment target is %1 %3
partial specialization matches %0
inline function performs a conversion which is forbidden in ARC
pointer %0 assigned here
pointer %0 declared here
pointer '%0' declared here
pointer %0 initialized here
possible target for call
when applied to this declaration
'#pragma clang attribute push' regions ends here
previous '#pragma pack' directive that modifies alignment is here
did you intend to use '#pragma pack (pop)' instead of '#pragma pack()'?
place parentheses around the %0 expression to evaluate it first
place parentheses around the '?:' expression to evaluate it first
place parentheses around the '%0' expression to silence this warning
previous module declaration is here
previously defined here
module loaded from '%0'
previous declaration of class template partial specialization %0 is here
previously declared '%1' here
previous attribute is here
%0 is a builtin with type %1
%0 declared here
previously declared as %0 here
for type %0
previous explicit instantiation is here
previous initialization for field %0 is here
previous initialization %select{|with side effects }0is here%select{| (side effects will not occur at run time)}0
previous inheritance model specified here
previously defined as an alias for %0
previous declaration of %0 is here
previous template specialization is here
previous uuid specified here
did you mean to call the %0 method?
while substituting prior template arguments into %select{non-type|template}0 template parameter%1 %2
use __attribute__((visibility("hidden"))) attribute instead
private module fragment begins here
property %0 is declared %select{deprecated|unavailable|partial}1 here
property declared here
property synthesized here
jump bypasses setup of __block variable
jump bypasses initialization of variable with __attribute__((cleanup))
jump enters controlled statement of consteval if
jump enters controlled statement of constexpr if
jump bypasses initialization of catch block
jump bypasses initialization of try block
jump enters controlled statement of if available
jump bypasses initialization of variable of non-trivial C struct type
jump bypasses auto release push of @autoreleasepool block
jump bypasses initialization of @catch block
jump enters Objective-C fast enumeration loop
jump bypasses initialization of @finally block
jump bypasses initialization of __strong variable
jump bypasses initialization of @synchronized block
jump bypasses initialization of @try block
jump bypasses initialization of __weak variable
jump bypasses initialization of __except block
jump bypasses initialization of __finally block
jump bypasses initialization of __try block
jump bypasses variable initialization
jump bypasses initialization of non-POD variable
jump bypasses variable with a non-trivial destructor
jump bypasses initialization of variable length array
jump bypasses initialization of VLA type alias
jump bypasses initialization of VLA typedef
protocol is declared here
protocol %0 has no definition
protocol method is here
it could also be property %select{of type %1|without attribute '%1'|with attribute '%1'|with getter %1|with setter %1}0 declared here
options parameter evaluated to '%0'
previous __ptrauth authentication %select{mode|option}0
%0 is incomplete
cannot take an address of a virtual member function if its return or argument types are incomplete
qualified call to %0::%1 is treated as a virtual call to %1 due to -fapple-kext
unimplemented pure virtual method %0 in %1
add a variable name to declare a %0 initialized with %1
receiver is instance of class declared here
receiver expression is here
receiver is treated with 'id' type for purpose of method lookup
default argument used here
'%0' included multiple times, additional include site here
'%0' included multiple times, additional include site in header from module '%1'
%select{reference|pointer}0 member declared here
%select{const|reference}0 member %1 will never be initialized
%0 returns a reference
%select{class|type alias}0 template declared here
use 'static_cast' to adjust the pointer correctly while %select{upcasting|downcasting}0
%select{overridden|current}0 method is explicitly declared 'instancetype'%select{| and is expected to return an instance of its class type}0
%select{overridden|current}0 method is part of the '%select{|alloc|copy|init|mutableCopy|new|autorelease|dealloc|finalize|release|retain|retainCount|self}1' method family%select{| and is expected to return an instance of its class type}0
%select{class|instance}0 method %1 is assumed to return an instance of its receiver type (%2)
overridden method returns an instance of its class type
remove the call to '%0' since unsigned values cannot be negative
remove call to max function and unsigned zero argument
remove std::move call here
remove parentheses to silence this warning
use function '%0' instead
replace 'default' with 'delete'
while rewriting comparison as call to 'operator<=>' declared here
repeated RISC-V 'interrupt' attribute is here
safe buffers debug: %0
pass -fsafe-buffer-usage-suggestions to receive code hardening suggestions
%select{function|method|block}0 has been explicitly marked sentinel here
declared here
if you supply your own aligned allocation functions, use -faligned-allocation to silence this diagnostic
%select{and|because}0 %1 does not satisfy %2
__single %select{parameter|global|local variable|return value from call to|element from array|struct member|union member}0 %1 assigned to %2 here
__single %select{parameter|global|local variable|return value from call to|element from array|struct member|union member}0 %1 assigned to %2 here results in %2 having the bounds of a single %3 (%4 bytes)%select{| but conversion of %2 to %6 requires %7 bytes or more}5
__single %select{parameter|global|local variable|return value from call to|element from array|struct member|union member}0 %1 %select{assigned to|used to initialize}9 %2 here results in %2 having the bounds of a single %3 (%4 bytes) but %select{%8|cast of %2 to %8}7 has pointee type %5 (%6 bytes)
attempt to specialize declaration here
explicitly specialized declaration is here
declare 'static' if the %select{variable|function}0 is not intended to be used outside of this translation unit
use array indexing to silence this warning
change size argument to be the size of the destination
change the argument to be the free space in the destination buffer minus the terminating null byte
did you mean %select{struct|interface|class}0 here?
because substituted constraint expression is ill-formed%0
add a deduction guide to suppress this warning
class with specified objc_requires_property_definitions attribute is declared here
surrounding namespace with visibility attribute ends here
surrounding namespace with visibility attribute starts here
parenthesize the second argument to silence
%select{parenthesize the third argument|cast the second argument to 'int'}0 to silence
conversion to %select{integral|enumeration}0 type %1
tail call required by %0 attribute here
non-type template argument refers to %select{function|object}0 here
non-type template argument refers here
template argument refers to function template %0, here
class template %0 was explicitly specialized here
in instantiation of template class %q0 requested here
class template %0 was instantiated here
template is declared here
%select{function template|class template|variable template|type alias template|template template parameter}0 %1 declared here
while checking a default template argument used here
in instantiation of enumeration %q0 requested here
in instantiation of exception specification for %0 requested here
declared as a non-template here
in instantiation of member class %q0 requested here
in instantiation of member function %q0 requested here
template non-type parameter has a different type %0 in template argument
previous non-type template parameter with type %0 is here
in instantiation of default member initializer %q0 requested here
template parameter has a different kind in template argument
template parameter is declared here
%select{too few|too many}0 template parameters in template template argument
previous default template argument defined here
previous default template argument defined in module %0
previous %select{template type|non-type template|template template}0 parameter%select{| pack}1 declared here
%select{template type|non-type template|template template}0 parameter%select{| pack}1 does not match %select{template type|non-type template|template template}0 parameter%select{ pack|}1 in template argument
previous template %select{declaration|template parameter}0 is here
use -ftemplate-depth=N to increase recursive template instantiation depth
in instantiation of requirement here
in instantiation of requirement parameters here
in instantiation of static data member %q0 requested here
in instantiation of template type alias %0 requested here
unnamed type used in template argument was declared here
in instantiation of variable template specialization %q0 requested here
thread warning in function %0
%select{destructor|deallocator}0 has a %select{non-throwing|implicit non-throwing}1 exception specification
function declared non-throwing here
required alignment of type %0 (%1 bytes) is larger than the supported alignment of C++ exception objects on this target (%2 bytes)
rewrite target here
%select{alignment|size}0 of first field is %1 bits
%0 is incomplete
%select{and|because}0 '%1' would be invalid: %2
%select{and|because}0 '%1' would be invalid
%select{function %1 which returns const-qualified type %2 declared here|variable %1 declared const here|%select{non-|}1static data member %2 declared const here|member function %q1 is declared const here|%select{|nested }1data member %2 declared const here}0
%select{first|second}0 operand was implicitly converted to type %1
did you mean to use '.' instead?
type is given name %0 for linkage purposes by this %select{typedef|alias}1 declaration
referenced member %0 is declared here
referenced %0 is declared here
enclose %0 in %select{an @available|a __builtin_available}1 check to silence this warning
remove the %select{'%1' if its condition|condition if it}0 is always %select{false|true}2
during field initialization in %select{this|the implicit default}0 constructor
uninitialized reference member is here
%select{uninitialized use occurs|variable is captured by block}0 here
%0 released here
pointer declared here
%select{declaration|definition|default argument declared|explicit specialization declared|partial specialization declared}0 here is not %select{visible|reachable|reachable|reachable|reachable|reachable}0
silence by adding parentheses to mark code as explicitly dead
used%select{| in pointer arithmetic| in buffer access}0 here
change type of %0 to '%select{std::span' to preserve bounds information|std::array' to label it for hardening|std::span::iterator' to preserve bounds information}1%select{|, and change %2 to '%select{std::span|std::array|std::span::iterator}1' to propagate bounds information between them}3
change type of %0 to '%select{std::span' to preserve bounds information|std::array' to label it for hardening|std::span::iterator' to preserve bounds information}1%select{|, and change %2 to safe types to make function %4 bounds-safe}3
unguarded header; consider using #ifdef guards or #pragma once
use non-reference type %0
use reference type %0 to prevent copying
use 'thread_local' to allow this
use non-reference type %0 to make construction explicit or type %1 to prevent copying
used here
used in initialization here
implicit default constructor suppressed by user-declared constructor
%select{|previous }0using declaration
use %select{an alias declaration|a typedef declaration|a reference|a const variable|a constexpr variable}0 instead
conflicting declaration
target of using declaration
%select{|previous }0using-enum declaration
add 'typename' to treat this using declaration as a type
in value-initialization of type %0 here
variable %0 is declared here
variable %0 is%select{| explicitly}1 captured here
initialize the variable %0 to silence this warning
previous declaration of variable template partial specialization is here
%select{%1 is a virtual base class of base class %2 declared here|virtual base class %1 declared here}0
variable length arrays are not supported for the current target
which delegates to
detected while default synthesizing properties in class implementation
widen this field to %0 bits to store all values of %1
within field of type %0 declared here
replace expression with '%0' %select{|or use 'xor' instead of '^' }1to silence this warning
non-virtual member function marked '%0' hides virtual member %select{function|functions}1
only virtual member functions can be marked '%0'
absolute value function %0 given an argument of type %1 but has parameter of type %2 which may cause truncation of value
abstract class is marked '%select{final|sealed}0'
initializer for virtual base class %0 of abstract class %1 will never be used
access declarations are deprecated; use using declarations instead
type of property %0 does not match type of accessor %1
acquiring %0 '%1' requires negative capability '%2'
%0 '%1' must be acquired before '%2'
Cycle in acquired_before/after dependencies, starting with '%0'
operator '%0' has lower precedence than '%1'; '%1' will be evaluated first
reference cannot be bound to dereferenced null pointer in well-defined C++ code; pointer may be assumed to always convert to true
reference cannot be bound to dereferenced null pointer in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0
requested alignment is less than minimum alignment of %1 for type %0
%select{aligning a value|the result of checking whether a value is aligned}0 to 1 byte is %select{a no-op|always true}0
requested alignment is not a power of 2
use of function %0 is discouraged; there is no way to check for failure but failure may still occur, resulting in a possibly exploitable security vulnerability
second argument to __builtin_alloca_with_align is supposed to be in bits
this coroutine may be split into pieces; not every piece is guaranteed to be inlined
multiple suitable %0 functions for %1; no 'operator delete' function will be invoked if initialization throws an exception
interrupt service routine should only call a function with attribute 'no_caller_saved_registers'
ARC %select{unused|__unsafe_unretained|__strong|__weak|__autoreleasing}0 lifetime qualifier on return type is ignored
assigning %select{array literal|dictionary literal|numeric literal|boxed expression|<should not happen>|block literal}0 to a weak %select{property|variable}1; object will be released after assignment
%select{destination for|source of}0 this %1 call is a pointer to ownership-qualified type %2
performSelector may cause a leak because its selector is unknown
weak %select{variable|property|implicit property|instance variable}0 %1 may be accessed multiple times in this %select{function|method|block|lambda}2 and may be unpredictably set to nil; assign to a strong variable to keep the object alive
weak %select{variable|property|implicit property|instance variable}0 %1 is accessed multiple times in this %select{function|method|block|lambda}2 but may be unpredictably set to nil; assign to a strong variable to keep the object alive
capturing %0 strongly in this block is likely to lead to a retain cycle
assigning retained object to %select{weak|unsafe_unretained}0 %select{property|variable}1; object will be released after assignment
assigning retained object to unsafe property; object will be released after assignment
method parameter of type %0 with no explicit ownership
argument value %0 is outside the valid range [%1, %2]
argument value %0 will result in undefined behaviour
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3 is deprecated
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated
call to function without interrupt attribute could clobber interruptee's VFP registers
array index %0 is past the end of the array (that has type %1%select{|, cast to %3}2)
array index %0 refers past the last possible element for an array in %1-bit address space containing %2-bit (%3-byte) elements (max possible %4 element%s5)
array index %0 is before the beginning of the array
ignored asm label '%0' on automatic variable
value size does not match register size specified by the constraint and modifier
requested alignment must be %0 bytes or smaller; maximum alignment assumed
unknown assumption string '%0'; attribute is potentially ignored
unknown assumption string '%0' may be misspelled; attribute is potentially ignored, did you mean '%1'?
the argument to %0 has side effects that will be discarded
%select{@available|__builtin_available}0 does not guard availability here; use if (%select{@available|__builtin_available}0) instead
specifying 'uuid' as an ATL attribute is deprecated; use __declspec instead
implicit use of sequentially-consistent atomic may incur stronger memory barriers than necessary
accessing a member of an atomic structure or union is undefined behavior
memory order argument to atomic operation is invalid
writable atomic property %0 cannot pair a synthesized %select{getter|setter}1 with a user defined %select{getter|setter}2
@protocol is using a forward protocol declaration of %0
'abi_tag' attribute on %select{non-inline|anonymous}0 namespace ignored
consumed analysis attribute is attached to member of class %0 which isn't marked as consumable
%0 attribute cannot be applied to this declaration
%0 attribute cannot be applied to a %select{function|method}1 with no parameters
%0 attribute argument must be a string literal specifying a Swift function name
%0 attribute for getter must not have any parameters besides 'self:'
%0 attribute has invalid identifier for the %select{base|context|parameter}1 name
%0 attribute is missing parameter label clause
%0 attribute cannot specify more than one 'self:' parameter
too %select{few|many}0 parameters in the signature specified by the %1 attribute (expected %2; got %3)
%0 attribute for setter must have one parameter for new value
%0 attribute for 'subscript' getter cannot have a 'newValue:' parameter
%0 attribute for 'subscript' must %select{be a getter or setter|have at least one parameter|have a 'self:' parameter}1
%0 attribute for 'subscript' setter cannot have multiple 'newValue:' parameters
%0 attribute for 'subscript' setter must have a 'newValue:' parameter
multiple identical address spaces specified for type
attribute %0 after definition is ignored
%0 attribute parameter %1 is negative and will be ignored
builtin call has undefined behaviour when called from a %0 function
builtin call is not valid when calling from a function without active ZA state
'cmse_nonsecure_entry' cannot be applied to functions with internal linkage
propagating dll attribute to %select{already instantiated|explicitly specialized}0 base class template without dll attribute is not supported
redeclaration of %q0 should not add %q1 attribute
explicit instantiation declaration should not be 'dllexport'
'dllexport' attribute ignored on explicit instantiation definition
definition of dllimport static field
attribute %0 has no effect when annotating an 'if %select{constexpr|consteval}1' statement
attribute %0 has no effect when annotating an infinite loop
%0 attribute can only be applied to instance variables or properties
%0 attribute ignored for field of type %1
%0 attribute is ignored because there exists no call expression inside the statement
%0 attribute is ignored because %1 is not a function pointer
%0 attribute ignored on inline function
%0 attribute ignored on a non-definition declaration
'%0' attribute cannot be specified on a definition
'%0' is not a valid builtin name for %1
'noescape' attribute ignored on parameter of non-pointer type %0
'nonnull' attribute applied to function with no pointer arguments
'nonnull' attribute when used on parameters takes no arguments
%0 attribute ignored when parsing type
'packed' attribute was ignored on bit-fields with single-byte alignment in older versions of GCC and Clang
%0 attribute only applies to a pointer or reference (%1 is invalid)
%0 attribute only applies to%select{| constant}1 pointer arguments
attribute declaration must precede definition
target does not support 'protected' visibility; using 'default'
%0 attribute only applies to return values that are pointers
%0 attribute only applies to return values that are pointers or references
#pragma %0(".drectve") has undefined behavior, use #pragma comment(linker, ...) instead
section attribute is specified on redeclared variable
'sentinel' attribute requires named arguments
'sentinel' attribute only supported for variadic %select{functions|blocks}0
%0 attribute argument not supported: %1
%0 attribute argument '%1' not supported on a global variable
unknown visibility %0
attribute %0 cannot be applied to %select{functions|Objective-C method}1 without return value
__weak attribute cannot be specified on a field declaration
__weak attribute cannot be specified on an automatic variable when ARC is not enabled
%0%select{ attribute|}1 only applies to %select{functions|unions|variables and functions|functions and methods|functions, methods and blocks|functions, methods, and parameters|variables|variables and fields|variables, data members and tag types|types and namespaces|variables, functions and classes|kernel functions|non-K&R-style functions}2
%0%select{ attribute|}1 only applies to %2
conflicting attributes %0 are ignored
property is assumed atomic when auto-synthesizing the property
readonly IBOutlet property %0 when auto-synthesized may not work correctly with 'nib' loader
'auto' storage class specifier is redundant and incompatible with C++11
auto property synthesis will not synthesize property %0 declared in protocol %1
'auto' deduced as 'id' in declaration of %0
auto property synthesis will not synthesize property %0; it will be implemented by its superclass, use @dynamic to acknowledge intention
autosynthesized property %0 will use %select{|synthesized}1 instance variable %2, not existing instance variable %3
Fuchsia API Level prohibits specifying a minor or sub-minor version
ignoring availability attribute %select{on '+load' method|with constructor attribute|with destructor attribute}0
only 'unavailable' and 'deprecated' are supported for Swift availability
unknown platform %0 in availability macro
feature cannot be %select{introduced|deprecated|obsoleted}0 in %1 version %2 before it was %select{introduced|deprecated|obsoleted}3 in version %4; attribute ignored
%select{reinterpret_cast|C-style cast}0 from %1 to %2 changes address space of nested pointers
cast from function call of type %0 to non-matching type %1
receiver type %0 is not 'id' or interface pointer, consider casting it to 'id'
base class %0 is uninitialized when used here to access %q1
binding reference member %0 to stack allocated %select{variable|parameter}2 %1
binding dereferenced null pointer to reference has undefined behavior
bit-field %0 is not wide enough to store all enumerators of %1
width of bit-field %0 (%1 bits) exceeds the width of its type; value will be truncated to %2 bit%s2
use of bitwise '%0' with boolean operands
bitwise negation of a boolean expression%select{;| always evaluates to 'true';}0 did you mean logical negation?
'%0' within '%1'
block captures an autoreleasing out-parameter, which may result in use-after-free bugs
attribute %0 ignored, because it cannot be applied to omitted return type
'%0' qualifier on omitted return type %1 has no effect
switch condition has boolean value
combining %select{'__counted_by'|'__sized_by'}0 with non-zero %select{count|size}0 (which cannot be null) and '_Nullable'; did you mean %select{'__counted_by_or_null'|'__sized_by_or_null'}0 instead?
combining %select{'__counted_by_or_null'|'__sized_by_or_null'}0 and '_Nonnull'; did you mean %select{'__counted_by'|'__sized_by'}0 instead?
braces around %select{scalar |}0initializer
'break' is bound to loop, GCC binds it to switch
'%0' will always overflow; destination buffer has size %1, but size argument is %2
use of unknown builtin %0
'...' as the only parameter of a function is incompatible with C standards before C2x
call to pure virtual member function %0 has undefined behavior; overrides of %0 in subclasses are not available in the %select{constructor|destructor}1 of %2
too %select{few|many}0 arguments in call to %1
%0 parameter marked 'called_once' is called twice
%select{|captured }1%0 parameter marked 'called_once' is never called
%0 parameter marked 'called_once' is never %select{used|called}1 when %select{taking true branch|taking false branch|handling this case|none of the cases applies|entering the loop|skipping the loop|taking one of the branches}2
cannot pass object of %select{non-POD|non-trivial}0 type %1 through variadic %select{function|block|method|constructor}2; call will abort at runtime
cannot resolve lock expression
empty case range specified
overflow converting case value to switch condition type (%0 to %1)
cast from %0 to %1 increases required alignment from %2 to %3
cast between incompatible calling conventions '%0' and '%1'; calls through this pointer may abort at runtime
cast %diff{from $ to $ |}0,1converts to incompatible function type
cast %diff{from $ to $ |}0,1converts to incompatible function type
nonnull %select{function call|parameter}0 '%1' will evaluate to 'true' on first encounter
cast of type %0 to %1 is deprecated; use sel_getName instead
cast from %0 to %1 drops %select{const and volatile qualifiers|const qualifier|volatile qualifier}2
cast from %0 to %1 must have all intermediate pointers const qualified to be safe
category is implementing a method which will also be implemented by its primary class
function with no prototype cannot use the %0 calling convention
%0 calling convention is not supported %select{for this target|on variadic function|on constructor/destructor|on builtin function}1
cannot refer to a non-static member from the handler of a %select{constructor|destructor}0 function try block
input conversion stopped due to an input byte that does not belong to the input codeset UTF-8
%select{class|category}0 %1 does not conform to protocol%plural{1: %3|2:s %3 and %4|3:s %3, %4 and %5|:s %3, %4, %5, ...}2
class method %objcclass0 not found (return type defaults to 'id')
class method %objcclass0 not found (return type defaults to 'id'); did you mean %objcclass2?
GCC does not allow the 'cleanup' attribute argument to be anything other than a simple identifier
passing union across security boundary via %select{parameter %1|return value}0 may leak information
property follows Cocoa naming convention for returning 'owned' objects
collection expression type %0 may not respond to %1
possible misuse of comma operator here
%select{self-|array }0comparison always evaluates to %select{a constant|true|false|'std::strong_ordering::equal'}1
bitwise comparison always evaluates to %select{false|true}0
bitwise or with non-zero value always evaluates to true
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated
comparison of different enumeration types in switch statement%diff{ ($ and $)|}0,1
completion handler is called twice
%select{|captured }1completion handler is never called
completion handler is never %select{used|called}1 when %select{taking true branch|taking false branch|handling this case|none of the cases applies|entering the loop|skipping the loop|taking one of the branches}2
suspicious concatenation of string literals in an array initialization; did you mean to separate the elements with a comma?
concatenated NSString literal for an NSArray expression - possibly missing a comma
using the result of an assignment as a condition without parentheses
using the result of an assignment as a condition without parentheses
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2
%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated
conflicting distributed object modifiers on parameter type in declaration of %0
conflicting parameter types in declaration of %0%diff{: $ vs $|}1,2
conflicting distributed object modifiers on return type in declaration of %0
conflicting return type in declaration of %0%diff{: $ vs $|}1,2
conflicting variadic declaration of method and its implementation
conflicting distributed object modifiers on parameter type in implementation of %0
conflicting parameter types in implementation of %0%diff{: $ vs $|}1,2
conflicting distributed object modifiers on return type in implementation of %0
conflicting return type in implementation of %0%diff{: $ vs $|}1,2
conflicting variadic declaration of method and its implementation
consteval if is always true in an %select{unevaluated|immediate}0 context
conversion function converting %0 to its base class %1 will never be used
conversion function converting %0 to itself will never be used
conversion function converting %0 to %1 will never be used
return type of 'coroutine_handle<>::address should be 'void*' (have %0) in order to get capability with existing async C API.
%0 is required to declare the member 'unhandled_exception()' when exceptions are enabled
%select{destination for|source of|first operand of|second operand of}0 this %1 call is a pointer to record %2 that is not trivial to %select{primitive-default-initialize|primitive-copy}3
%0 may not intend to support class template argument deduction
constructor parameter %0 shadows the field %1 of %2
use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14
multiple return statements in constexpr function is incompatible with C++ standards before C++14
constexpr function with no return statements is incompatible with C++ standards before C++14
variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14
type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14
return type deduction is incompatible with C++ standards before C++14
generic lambdas are incompatible with C++11
initialized lambda captures are incompatible with C++ standards before C++14
variable templates are incompatible with C++ standards before C++14
attribute %0 ignored, because it cannot be applied to a type
class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0
'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior
decomposition declarations are incompatible with C++ standards before C++17
inline variables are incompatible with C++ standards before C++17
by value capture of '*this' is incompatible with C++ standards before C++17
non-type template parameters declared with %0 are incompatible with C++ standards before C++17
use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++20
aggregate initialization of type %0 from a parenthesized list of values is a C++20 extension
captured structured bindings are incompatible with C++ standards before C++20
use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20
constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20
function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20
uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20
constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20
virtual constexpr functions are incompatible with C++ standards before C++20
decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20
defaulted comparison operators are incompatible with C++ standards before C++20
explicitly defaulting this %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 with a type different from the implicit type is incompatible with C++ standards before C++20
designated initializers are incompatible with C++ standards before C++20
explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20
mangled name of %0 will change in C++17 due to non-throwing exception specification in function signature
use of implicit 'typename' is incompatible with C++ standards before C++20
initialized lambda capture packs are incompatible with C++ standards before C++20
%select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20
invoking a pointer to a 'const &' member function on an rvalue is incompatible with C++ standards before C++20
non-type template parameter of type %0 is incompatible with C++ standards before C++20
'char8_t' type specifier is incompatible with C++ standards before C++20
member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20
member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20
using declaration naming a scoped enumerator is incompatible with C++ standards before C++20
aggregate initialization of type %0 with user-declared constructors is incompatible with C++20
'auto' as a functional-style cast is incompatible with C++ standards before C++23
use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23
definition of a %select{static variable|thread_local variable|variable of non-literal type}1 in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23
'constinit' specifier is incompatible with C++ standards before C++20
declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23
taking address of non-addressable standard library function is incompatible with C++20
type of UTF-8 string literal will change from array of const char to array of const char8_t in C++20
defaulted definition of %select{%select{<ERROR>|equality|three-way|equality|relational}1 comparison operator|three-way comparison operator}0 that is declared %select{constexpr|consteval}2 but%select{|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function is incompatible with C++ standards before C++23
implicit conversion from array size expression of type %0 to %select{integral|enumeration}1 type %2 is incompatible with C++98
'auto' type specifier is incompatible with C++98
cast between pointer-to-function and pointer-to-object is incompatible with C++98
'constexpr' specifier is incompatible with C++98
constructor call from initializer list is incompatible with C++98
delegating constructors are incompatible with C++98
scalar initialized from empty initializer list is incompatible with C++98
initializing %0 from an empty initializer list is incompatible with C++98
befriending enumeration type %0 is incompatible with C++98
enumeration type in nested name specifier is incompatible with C++98
explicit conversion functions are incompatible with C++98
friend declaration naming a member of the declaring class is incompatible with C++98
jump from this goto statement to its label is incompatible with C++98
jump from this %select{indirect|asm}0 goto statement to one of its possible targets is incompatible with C++98
initialization of initializer_list object is incompatible with C++98
use of non-static data member %0 in an unevaluated context is incompatible with C++98
non-class friend type %0 is incompatible with C++98
%select{anonymous struct|union}0 member %1 with a non-trivial %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}2 is incompatible with C++98
passing object of trivial but non-POD type %0 through variadic %select{function|block|method|constructor}1 is incompatible with C++98
reference initialized from initializer list is incompatible with C++98
substitution failure due to access control is incompatible with C++98
static data member %0 in union is incompatible with C++98
jump from switch statement to this case label is incompatible with C++98
%select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}1 of type %2 when binding a reference to a temporary would %select{invoke an inaccessible constructor|find no viable constructor|find ambiguous constructors|invoke a deleted constructor}0 in C++98
redundant parentheses surrounding address non-type template argument are incompatible with C++98
local type %0 as template argument is incompatible with C++98
use of null pointer as non-type template argument is incompatible with C++98
non-type template argument referring to %select{function|object}0 %1 with internal linkage is incompatible with C++98
unnamed type as template argument is incompatible with C++98
use of 'template' keyword outside of a template is incompatible with C++98
default template arguments for a function template are incompatible with C++98
use of 'typename' outside of a template is incompatible with C++98
befriending %1 without '%select{struct|interface|union|class|enum}0' keyword is incompatible with C++98
'%0' type specifier is incompatible with C++98
inheriting constructors are incompatible with C++98
ms_struct may not produce Microsoft-compatible layouts for classes with base classes or virtual functions
object backing the pointer will be destroyed at the end of the full-expression
initializing pointer member %0 to point to a temporary object whose lifetime is shorter than the lifetime of the constructed object
%select{reference|backing array for 'std::initializer_list'}2 %select{|subobject of }1member %0 %select{binds to|is}2 a temporary object whose lifetime is shorter than the lifetime of the constructed object
%select{temporary %select{whose address is used as value of|%select{|implicitly }2bound to}4 %select{%select{|reference }4member of local variable|local %select{variable|reference}4}1|array backing %select{initializer list subobject of local variable|local initializer list}1}0 %select{%3 |}2will be destroyed at the end of the full-expression
-dealloc is being overridden in a category
declaration of %0 will not be visible outside of this function
declaration shadows a %select{local variable|variable in %2|static data member of %2|field of %2|typedef in %2|type alias in %2|structured binding}1
declaration shadows a %select{local variable|variable in %2|static data member of %2|field of %2|typedef in %2|type alias in %2|structured binding}1
ignoring __declspec(allocator) because the function return type %0 is not a pointer or reference type
attribute %0 is ignored, place it after "%select{class|struct|interface|union|enum|enum class|enum struct}1" to apply attribute to type declaration
exception specifications of %select{return|argument}0 types differ
%plural{1:enumeration value %1 not explicitly handled in switch|2:enumeration values %1 and %2 not explicitly handled in switch|3:enumeration values %1, %2, and %3 not explicitly handled in switch|:%0 enumeration values not explicitly handled in switch: %1, %2, %3...}0
atomic by default property %0 has a user defined %select{getter|setter}1 (property should be marked 'atomic' if this is intended)
explicitly defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator is implicitly deleted
explicitly defaulted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 is implicitly deleted
constructor for %0 creates a delegation cycle
%select{delete|destructor}0 called on %1 that is abstract but has non-virtual destructor
'delete' applied to a pointer-to-array type %0 treated as 'delete[]'
deleting pointer to incomplete type %0 may cause undefined behavior
%select{delete|destructor}0 called on non-final %1 that has virtual functions but non-virtual destructor
comparison between two arrays is deprecated; to compare array addresses, use unary '+' to decay operands to pointers
%0 is deprecated
Current handling of vector bool and vector pixel types in this context are deprecated. The default behaviour will soon change to that implied by the '-altivec-compat=xl' option
'deprecated' attribute on anonymous namespace ignored
builtin %0 is deprecated; use %1 instead
top-level comma expression in array subscript is deprecated in C++20 and unsupported in C++23
definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-declared copy %select{assignment operator|constructor}1
definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-declared destructor
definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-provided copy %select{assignment operator|constructor}1
definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-provided destructor
implementing deprecated %select{method|class|category}0
%0 may be deprecated because the receiver type is unknown
%0 currently has no effect on a using declaration
%select{decrement|increment}0 of object of volatile-qualified type %1 is deprecated
Implicit conversion between vector types ('%0' and '%1') is deprecated. In the future, the behavior implied by '-fno-lax-vector-conversions' will be the default.
identifier %0 preceded by whitespace in a literal operator declaration is deprecated
%0 is deprecated: %1
the '[[_Noreturn]]' attribute spelling is deprecated in C2x; use '[[noreturn]]' instead
out-of-line definition of constexpr static data member is redundant in C++17 and is deprecated
'register' storage class specifier is deprecated and incompatible with C++17
use of result of assignment to object of volatile-qualified type %0 is deprecated
conversion from string literal to %0 is deprecated
implicit capture of 'this' with a capture default of '=' is deprecated
volatile-qualified parameter type %0 is deprecated
volatile-qualified return type %0 is deprecated
volatile qualifier in structured binding declaration is deprecated
dereferencing %0; was declared with a 'noderef' type
dereferencing expression marked as 'noderef'
explicit call to +initialize results in duplicate call to +initialize
instance variable %0 is being directly accessed
explicit call to [super initialize] should only be in implementation of +initialize
body of cpu_dispatch function will be ignored
expression does not compute the number of elements in this array; element type is %0, not %1
'%0' will return the size of the pointer, not the array itself
%q0 redeclared inline; %1 attribute ignored
double precision constant requires %select{cl_khr_fp64|cl_khr_fp64 and __opencl_c_fp64}0, casting to single precision
acquiring %0 '%1' that is already held
attribute %0 is already applied with different arguments
attribute %0 is already applied
duplicate code segment specifiers
element %0 has been implicitly assigned %1 which another element has been assigned
multiple declarations of method %0 found and ignored
duplicate protocol definition of %0 is ignored
%select{destination for|source of|first operand of|second operand of}0 this %1 call is a pointer to %select{|class containing a }2dynamic class %3; vtable pointer will be %select{overwritten|copied|moved|compared}4
for loop has empty body
format string is empty
if statement has empty body
empty parentheses interpreted as a function declaration
range-based for loop has empty body
switch statement has empty body
while loop has empty body
converting the enum constant to a boolean
overflow in enumeration value
equality comparison with extraneous parentheses
exception of type %0 will be caught by earlier handler
declaration requires an exit-time destructor
expecting %0 '%1' to be held at start of each loop
expecting %0 '%1' to be held at the end of function
the implementation of header units is in an experimental phase
explicit instantiation of %0 that occurs after an explicit specialization has no effect
explicit instantiation cannot be 'inline'
explicit instantiation of %0 must occur at global scope
explicit instantiation of %0 not in a namespace enclosing %1
explicit instantiation of %q0 must occur in namespace %1
'extern' variable has an initializer
non-void coroutine does not return a value
non-void function does not return a value
non-void lambda does not return a value
function declared 'noreturn' should not return
field %0 is uninitialized when used here
class with destructor marked '%select{final|sealed}0' cannot be inherited from
%select{indexing into|pointer arithmetic over}1 a __bidi_indexable local variable %2 %select{assigned|initialized}3 from __single %select{parameter|global|local variable|return value from call to|element from array|struct member|union member}0 %4 results in %select{a trap when the offset is non-zero|an out-of-bounds pointer%select{| if the offset is >= %6| if the offset is >= %6 or < 0| if the offset is < 0}5}1
%select{UNUSED|UNUSED|UNUSED|UNUSED|assigning from|returning|passing|casting}0 __bidi_indexable local variable %1 will %select{UNUSED|likely trap|trap|trap (unless %1 is null)|UNUSED}2%select{ | in a future compiler version }6when converting to %3 due to %1 having the bounds of a __single pointer%select{. If %1 is non-null then any %select{count|size}7 > %8 will trap%select{. If %1 is null then any %select{count|size}7 != 0 will trap|}5|}4
%select{indexing into|pointer arithmetic over}0 __bidi_indexable local variable %1 that is assigned from a __single pointer results in %select{a trap when the offset is non-zero|an out-of-bounds pointer%select{| if the offset is >= %3| if the offset is >= %3 or < 0| if the offset is < 0}2}0
%select{indexing|UNUSED|dereferencing|accessing field %3 through|assigning from|returning|passing|UNUSED}0 __bidi_indexable %1%select{ at offset zero|||||||}0 will %select{access out-of-bounds memory and will trap in a future compiler version|UNUSED|access out-of-bounds memory and will trap in a future compiler version|always trap|propagate an out-of-bounds pointer|return an out-of-bounds pointer|pass an out-of-bounds pointer|UNUSED}0. At runtime %1 is assigned a __single pointer that results in %1 having bounds smaller than a single %2
%select{explicit|implicit}0 cast of __bidi_indexable %1 to a larger pointee type creates an out-of-bounds pointer. Later uses of the result may trap
%select{explicit|implicit}0 cast of out-of-bounds __bidi_indexable to __single will trap in a future compiler version due to the bounds of %1 being too small to access a single element of type %2
%select{array|pointer}0 annotated with %select{__unsafe_indexable|__bidi_indexable|__indexable|__single|__terminated_by}1 multiple times. Annotate only once to remove this warning
array with '%select{__counted_by|__sized_by}0' and the argument of the attribute should be defined in the same translation unit
%select{%diff{assigning to%select{ __indexable| __bidi_indexable|}3 type $ from%select{ __single|}4 type $|assigning%select{ __indexable| __bidi_indexable|}3 type from%select{ __single|}4 type}0,1|%diff{passing%select{ __single|}4 type $ to parameter of%select{ __indexable| __bidi_indexable|}3 type $|passing%select{ __single|}4 type to parameter of%select{ __indexable| __bidi_indexable|}3 type}0,1|%diff{returning%select{ __single|}4 type $ from a function with%select{ __indexable| __bidi_indexable|}3 result type $|returning%select{ __single|}4 type from a function with%select{ __indexable| __bidi_indexable|}3 result type}0,1|%diff{converting%select{ __single|}4 type $ to%select{ __indexable| __bidi_indexable|}3 type $|converting%select{ __single|}4 type to%select{ __indexable| __bidi_indexable|}3 type}0,1|%diff{initializing%select{ __indexable| __bidi_indexable|}3 type $ with an expression of%select{ __single|}4 type $|initializing%select{ __indexable| __bidi_indexable|}3 type with an expression of%select{ __single|}4 type}0,1|%diff{sending%select{ __single|}4 type $ to parameter of%select{ __indexable| __bidi_indexable|}3 type $|sending%select{ __single|}4 type to parameter of%select{ __indexable| __bidi_indexable|}3 type}0,1|%diff{casting%select{ __single|}4 type $ to%select{ __indexable| __bidi_indexable|}3 type $|casting%select{ __single|}4 type to%select{ __indexable| __bidi_indexable|}3 type}0,1|}2 results in %select{an __indexable|a __bidi_indexable}5 pointer that will trap if a non-zero offset is dereferenced%select{|. consider adding '__counted_by' to '%7'}6
%select{%diff{assigning to $ from incompatible type $|assigning type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1|}2 is an unsafe operation; use '__unsafe_terminated_by_from_indexable()' or '__unsafe_forge_terminated_by()' to perform this conversion
%select{%diff{assigning to $ from incompatible type $|assigning type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1|}2 that adds '__terminated_by' attribute is not allowed
non-null initialization of %select{'__counted_by_or_null'|'__sized_by_or_null'}0 pointer%select{| field}2 %1 with %select{count|size}0 %3 always fails
implicit zero-initialization of %select{'__counted_by'|'__sized_by'|'__counted_by_or_null'|'__sized_by_or_null'}0 %select{count|size}2 %select{field|variable}3 %1 against non-null pointer creates a non-dereferenceable pointer
%select{|implicit }0zero-initialization of %select{'__counted_by'|'__sized_by'}1 pointer%select{| field}3 %2 with non-zero %select{count|size}1 never succeeds
%select{|implicitly }0initializing field %1 of type %2 to NULL while '%3' is initialized with a value rarely succeeds
accessing elements of an unannotated incomplete array always fails at runtime
casting %0 to %1 creates a '%select{__indexable|__bidi_indexable}2' pointer %select{with bounds containing only one %3|with zero length due to %3 having unknown size)}4
initializer %0 has a side effect; this may lead to an unexpected result because the evaluation order of initialization list expressions is indeterminate
%select{count|size}0 value is not statically known: conversion from %4 to a %select{__counted_by|__sized_by|__counted_by_or_null|__sized_by_or_null}2 pointer type is invalid for any %select{count other than 0 or 1|size greater than %3}0%select{| unless the pointer is null}1
enumeration value %0 is out of range of flags in enumeration type %1
floating-point comparison is always %select{true|false}0; constant cannot be represented exactly in type %1
magnitude of floating-point constant too large for type %0; maximum is %1
magnitude of floating-point constant too small for type %0; minimum is %1
comparing floating point with == or != is unsafe
'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17
loop variable %0 %diff{of type $ binds to a temporary constructed from type $|binds to a temporary constructed from a different type}1,2
loop variable %0 creates a copy from type %1
loop variable %0 binds to a temporary value produced by a range of type %1
using '%%P' format specifier without precision
%select{values of type|enum values with underlying type}2 '%0' should not be used as format arguments; add an explicit cast to %1 instead
%select{values of type|enum values with underlying type}2 '%0' should not be used as format arguments; add an explicit cast to %1 instead
using '%0' format specifier, but argument has boolean value
format specifies type %0 but the argument has %select{type|underlying type}2 %1
format specifies type %0 but the argument has %select{type|underlying type}2 %1
format specifies type %0 but the argument has %select{type|underlying type}2 %1
using '%0' format specifier annotation outside of os_log()/os_trace()
invalid conversion specifier '%0'
invalid position specified for %select{field width|field precision}0
cannot mix positional and non-positional arguments in format string
'%0' %select{length modifier|conversion specifier}1 is not supported by ISO C
using length modifier '%0' with conversion specifier '%1' is not supported by ISO C
positional arguments are not supported by ISO C
format string is not a string literal
format string is not a string literal (potentially insecure)
length modifier '%0' results in undefined behavior or no effect with '%1' conversion specifier
format string should not be a wide string
position arguments in format strings start counting at 1 (not 0)
'%0' may overflow; destination buffer in argument %1 has size %2, but the corresponding specifier may require size %3
'%0' will always overflow; destination buffer has size %1, but format string expands to at least %2
'%0' will always overflow; destination buffer has size %1, but size argument is %2
'%0' size argument is too large; destination buffer has size %1, but size argument is %2
'%0' will always overflow; destination buffer has size %1, but the source string has length %2 (including NUL byte)
redefinition of forward class %0 of a typedef name of an object type is ignored
calling '%0' with a nonzero argument is unsafe
attempt to call %0 on non-heap %select{object %2|object: block expression|object: lambda-to-function-pointer conversion}1
cannot call function '%1' while %0 '%2' is held
calling function %1 requires holding %0 %select{'%2'|'%2' exclusively}3
calling function %1 requires holding %0 %select{'%2'|'%2' exclusively}3
calling function %0 requires negative capability '%1'
instantiation of function %q0 required here, but no definition is available
attribute is ignored on this statement as it only applies to functions; use '%0' on statements
function definition inside an Objective-C container is deprecated
statement attribute %0 has higher precedence than function attribute '%select{always_inline|flatten|noinline}1'
Objective-C GC does not allow weak variables on the stack
GCC does not allow the %0 attribute to be written on a type
GCC requires a function with the %0 attribute to be variadic
declaration requires a global constructor
declaration requires a global destructor
'gnu_inline' attribute requires function to be marked 'inline', attribute ignored
'gnu_inline' attribute without 'extern' in C++ treated as externally available, this changed in Clang 10
arithmetic on a null pointer treated as a cast from integer to pointer is a GNU extension
passing variable %1 by reference requires holding %0 %select{'%2'|'%2' exclusively}3
HIP does not support OpenMP target directives; directive has been ignored
%select{instance variable|property}2 with %0 attribute must be an object type (invalid %1)
IBOutletCollection properties should be copy/strong and not assign
assigning %select{field|instance variable}0 to itself
inheritance model ignored on %select{primary template|partial specialization}0
'objc_externally_retained' can only be applied to local variables %select{of retainable type|with strong ownership}0
implicit cast from type %0 to type %1 drops __unaligned qualifier
implicit truncation from %2 to bit-field changes value from %0 to %1
initialization of pointer of type %0 to null from a constant boolean expression
implicit conversion discards imaginary component: %0 to %1
implicit conversion from constant value %0 to 'BOOL'; the only well defined values for 'BOOL' are YES and NO
implicit conversion from enumeration type %0 to different enumeration type %1
implicit conversion increases floating-point precision: %0 to %1
implicit conversion from %0 cannot fit within the range of values for %1
implicit conversion turns floating-point number into integer: %0 to %1
implicit conversion loses floating-point precision: %0 to %1
implicit conversion when assigning computation result loses floating-point precision: %0 to %1
implicit conversion from %0 to %1 changes value from %2 to %3
implicit conversion of out of range value from %0 to %1 is undefined
implicit conversion from %0 to %1 changes non-zero value from %2 to %3
implicit conversion from floating-point type %0 to 'BOOL'
implicit conversion turns floating-point number into bool: %0 to %1
higher order bits are zeroes after implicit conversion
implicit conversion from integral type %0 to 'BOOL'
implicit conversion loses integer precision: %0 to %1
implicit conversion from %0 to %1 may lose precision
implicit conversion from %2 to %3 changes value from %0 to %1
implicit conversion loses integer precision: %0 to %1
implicit conversion from %2 to %3 changes value from %0 to %1
implicit conversion changes signedness: %0 to %1
operand of ? changes signedness: %0 to %1
implicit conversion from %0 to %1 changes value from %2 to %3
implicit conversion of out of range value from %0 to %1 is undefined
the resulting value is always non-negative after implicit conversion
implicit conversion of %select{NULL|nullptr}0 constant to %1
implicit boolean conversion of Objective-C object literal always evaluates to true
address of%select{| function| array}0 '%1' will always evaluate to 'true'
implicit truncation from %2 to a one-bit wide bit-field changes value from %0 to %1
implicit conversion turns string literal into bool: %0 to %1
implicit conversion turns vector to scalar: %0 to %1
class property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this class implementation
class property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this category
default assign attribute on property %0 which implements NSCopying protocol is not appropriate with -fobjc-gc[-only]
property is assumed atomic by default
declaration of built-in function '%0' requires the declaration of the 'jmp_buf' type, commonly provided in the header <setjmp.h>.
declaration of built-in function '%1' requires inclusion of the header <%0>
implicit declaration of function %0
block implicitly retains 'self'; explicitly mention 'self' to indicate this is intended behavior
import %select{module|name}0 cannot be applied to a function with a definition
direct base %0 is inaccessible due to ambiguity:%1
target exception specification is not superset of source
%select{%diff{assigning to $ from incompatible type $|assigning to type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1}2
incompatible vector types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2
encoding of %0 type is incomplete because %1 component has unknown encoding
argument %0 of type %1 with mismatched bound
%0 overrides a destructor but is not marked 'override'
%0 overrides a member function but is not marked 'override'
incrementing expression of type bool is deprecated and incompatible with C++17
'objc_independent_class' attribute may be put on a typedef only; attribute is ignored
indirection of non-volatile null pointer will be deleted, not trap
all paths through this function will call itself
constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11
type %0 cannot be narrowed to %1 in initializer list in C++11
non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11
initializing pointer member %0 with the stack address of %select{variable|parameter}2 %1
%select{field|base class}0 %1 will be initialized after %select{field|base}2 %3
initializer %select{partially |}0overrides prior initialization of this subobject
inline namespace reopened as a non-inline namespace
instance method %objcinstance0 not found (return type defaults to 'id')
instance method %objcinstance0 not found (return type defaults to 'id'); did you mean %objcinstance2?
instance method %0 found instead of class method %1
cast to %1 from smaller integer type %0
cast to %1 from smaller integer type %0
converting the result of '?:' with integer constants to a boolean always evaluates to 'true'
'internal_linkage' attribute on a non-static local variable is ignored
%select{MIPS|MSP430|RISC-V}0 'interrupt' attribute only applies to functions that have %select{no parameters|a 'void' return type}1
invalid use of a cast in an inline asm context requiring an lvalue: accepted due to -fheinous-gnu-extensions, but clang may remove support for this in the future
invalid constructor from class in system header, should not be explicit
local declaration of %0 hides instance variable
declaration of instance variables in the interface is deprecated
jump out of __finally block has undefined behavior
ignored 'inline' attribute on kernel function %0
kernel function %0 is a member function; this may not be accepted by nvcc
converting the result of '<<' to a boolean always evaluates to %select{false|true}0
converting the result of '<<' to a boolean; did you mean '(%0) != 0'?
first argument to __builtin_load_member_function_pointer must have a type deriving from class where second argument was defined
second argument to __builtin_load_member_function_pointer must be the address of a C++ member function: for example '&Foo::func', not null
%0 '%1' is acquired exclusively and shared in the same scope
%0 '%1' is not held on every path through here
'&&' within '||'
use of logical '%0' with constant operand
logical not is only applied to the left hand side of this %select{comparison|bitwise operator}0
'%0' is bound to current loop, GCC binds it to the enclosing loop
state of variable '%0' must match at the entry and exit of loop
only one parameter on 'main' declaration
variable named 'main' with external linkage has undefined behavior
bool literal returned from 'main'
taking the max of %select{a value and unsigned zero|unsigned zero and a value}0 is always equal to the other value
capture host side class data member by this pointer in device or host device lambda function may result in invalid memory access if this pointer is not accessible on device side
non-void coroutine does not return a value in all control paths
non-void function does not return a value in all control paths
non-void lambda does not return a value in all control paths
variable %0 may be uninitialized when %select{used here|captured by block}1
%0 may not respond to %1
extra qualification on member %0
size argument in %0 call is a comparison
messaging unqualified id
'mig_server_routine' attribute only applies to routines that return a kern_return_t
availability does not match previous declaration
%select{|overriding }4method %select{introduced after|deprecated before|obsoleted before}0 %select{the protocol method it implements|overridden method}4 on %1 (%2 vs. %3)
%select{|overriding }1method cannot be unavailable on %0 when %select{the protocol method it implements|its overridden method}1 is available
'delete%select{|[]}0' applied to a pointer that was allocated with 'new%select{[]|}0'; did you mean 'delete%select{[]|}0'?
import %select{module|name}0 (%1) does not match the import %select{module|name}0 (%2) of the previous declaration
nullability specifier %0 conflicts with existing specifier %1
%select{codeseg|section}0 does not match previous declaration
use of OSPtr outside of a return type
suggest braces around initialization of subobject
%plural{1:enumeration value %1 not handled in switch|2:enumeration values %1 and %2 not handled in switch|3:enumeration values %1, %2, and %3 not handled in switch|:%0 enumeration values not handled in switch: %1, %2, %3...}0
no case matching constant switch condition '%0'
auto property synthesis is synthesizing property not explicitly synthesized
missing field %0 initializer
format string missing
method has no return type specified; defaults to 'id'
no previous prototype for function %0
%0 availability is ignored without a valid 'SDKSettings.json' in the SDK
missing sentinel in %select{function call|method dispatch|block call}0
no previous extern declaration for non-static variable %0
mixing declarations and code is incompatible with standards before C99
comparison of integers of different signs: %0 and %1
modifying constructor parameter %0 that shadows a field of %1
multiple methods named %0 found
several methods with selector %0 of mismatched types are found for the @selector expression
CPU list contains duplicate entries; attribute ignored
extra qualification on member %0
vector initializers are not compatible with NEON intrinsics in big endian mode
array backing %select{initializer list subobject of the allocated object|the allocated initializer list}0 will be destroyed at the end of the full-expression
temporary bound to reference member of allocated object will be destroyed at the end of the full-expression
auto property synthesis will not synthesize property %0 because it is 'readwrite' but it will be synthesized 'readonly' via another property
auto property synthesis will not synthesize property %0 because it cannot share an ivar with another synthesized property
%select{struct|interface|union|class|enum}0 %1 does not declare any constructor to initialize its non-modifiable members
dynamic_cast will not work since RTTI data is disabled by %select{-fno-rtti-data|/GR-}0
typeid will not work since RTTI data is disabled by %select{-fno-rtti-data|/GR-}0
enums in the Microsoft ABI are signed integers by default; consider giving the enum %0 an unsigned underlying type to make this code portable
%0 '%1' is still held at the end of function
'nocf_check' attribute ignored; use -fcf-protection to enable the attribute
'noderef' can only be used on an array or pointer type
casting to dereferenceable pointer removes 'noderef' attribute
under -fcoro-aligned-allocation, the non-aligned allocation function for the promise type %0 has higher precedence than the global aligned allocation function
conflicting parameter types in declaration of %0: %1 vs %2
conflicting parameter types in implementation of %0: %1 vs %2
conflicting return type in declaration of %0: %1 vs %2
conflicting return type in implementation of %0: %1 vs %2
expression which evaluates to zero treated as a null pointer constant of type %0
cannot pass %select{non-POD|non-trivial}0 object of type %1 to variadic %select{function|block|method|constructor}2; expected type from format string was %3
a function %select{declaration|definition}0 without a prototype is deprecated in all versions of C %select{and is not supported in C2x|and is treated as a zero-parameter prototype in C2x, conflicting with a %select{previous|subsequent}2 %select{declaration|definition}3}1
%0 has virtual functions but non-virtual destructor
comparison of nonnull %select{function call|parameter}0 '%1' %select{not |}2equal to a null pointer is '%select{true|false}2' on first encounter
function %0 declared 'noreturn' should not return
not a Doxygen trailing comment
use of unary operator that may be intended as compound assignment (%0=)
not enough variable arguments in %0 declaration to fit a sentinel
case value not in enumerated type %0
integer constant not in range of enumerated type %0
alignment of 16 bytes for a struct member is not binary compatible with IBM XL C/C++ for AIX 16.1.0 or older
'nothrow' attribute conflicts with exception specification; attribute ignored
%0 attribute only applies to %select{Objective-C object|pointer|pointer-to-CF-pointer|pointer/reference-to-OSObject-pointer}1 parameters
%0 attribute only applies to %select{functions|methods|properties}1 that return %select{an Objective-C object|a pointer|a non-retainable pointer}2
overriding method has mismatched ns_consumed attribute on its parameter
duplicate key in dictionary literal
'NSObject' attribute may be put on a typedef only; attribute is ignored
overriding method has mismatched ns_returns_%select{not_retained|retained}0 attributes
null passed to a callee that requires a non-null argument
use of NULL in arithmetic operation
comparison between NULL and non-pointer %select{(%1 and NULL)|(NULL and %1)}0
comparison of %select{address of|function|array}0 '%1' %select{not |}2equal to a null pointer is always %select{true|false}2
synthesized setter %0 for null_resettable property %1 does not handle nil
null returned from %select{function|method}0 that requires a non-null return value
nullability specifier %0 cannot be applied to non-pointer type %1; did you mean to apply the specifier to the %select{pointer|block pointer|member pointer|function pointer|member function pointer}2?
inferring '_Nonnull' for pointer type within %select{array|reference}0 is deprecated
implicit conversion from nullable pointer %0 to non-nullable pointer type %1
%select{pointer|block pointer|member pointer}0 is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified)
array parameter is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified)
string is ill-formed as UTF-8 and will become a null %0 when boxed
using %0 directive in %select{NSString|CFString}1 which is being passed as a formatting argument to the formatting %select{method|CFfunction}2
adding %0 to %1 might cause circular dependency in container
object of type %0 is not compatible with %select{array element type|dictionary key type|dictionary value type}1 %2
designated initializer missing a 'super' call to a designated initializer of the super class
designated initializer invoked a non-designated initializer
designated initializer should only invoke a designated initializer on 'super'
%0 attribute isn't implemented by this Objective-C runtime
direct attribute on property %0 ignored (not implemented by this Objective-C runtime)
method override for the designated initializer of the superclass %objcinstance0 not found
%0 bridges to %1, not %2
%0 cannot bridge to %1
assignment to Objective-C's isa is deprecated in favor of object_setClass()
direct access to Objective-C's isa is deprecated in favor of object_getClass()
direct comparison of %select{an array literal|a dictionary literal|a numeric literal|a boxed expression|}0 has undefined behavior
'+load' is called at app startup and can increase launch time; consider using '+initialize' instead
method possibly missing a [super %0] call
cannot catch an exception thrown with @throw in C++ in the non-unified exception model
bitmasking for introspection of Objective-C object pointers is strongly discouraged
bitmasking for introspection of Objective-C object pointers is strongly discouraged
objc_precise_lifetime is not meaningful for %select{__unsafe_unretained|__autoreleasing}0 objects
'assign' property of object type may become a dangling reference; consider using 'unsafe_unretained'
'copy' attribute must be specified for the block property when -fobjc-gc-only is specified
default property attribute 'assign' not appropriate for object
no 'assign', 'retain', or 'copy' attribute is specified - 'assign' is assumed
retain'ed block property does not copy the block - use copy attribute instead
setter cannot be specified for a readonly property
using %0 with a literal is redundant
parameterized class %0 already conforms to the protocols listed; did you forget a '*'?
%0 attribute cannot be applied to %select{methods in protocols|dealloc}1
class %0 defined without specifying a base class
convenience initializer missing a 'self' call to another initializer
convenience initializer should not invoke an initializer on 'super'
direct comparison of a string literal has undefined behavior
'objc_direct' attribute is ignored as 'objc_suppress_direct' attribute is applied
'objc_suppress_direct' attribute is ignored
%0 is incompatible with selectors that return a %select{struct|union|vector}1 type
the meaning of __weak has changed in manual reference-counting
%0 was declared with __weak, but __weak is ignored in files using manual reference counting
ignoring __weak in file using manual reference counting
use of old-style cast
aligned clause will be ignored because the requested alignment is not a power of 2
allocator with the 'thread' trait access has unspecified behavior on '%0' directive
declaration marked as declare target after first use, it may lead to incorrect results
'#pragma omp declare variant' cannot be applied to the function that was defined already; the original function might be used
'#pragma omp declare variant' cannot be applied for function after first usage; the original function might be used
variant function in '#pragma omp declare variant' is itself marked as '#pragma omp declare variant'
score expressions in the OpenMP context selector need to be constant; %0 is not and will be ignored
zero linear step (%0 %select{|and other variables in clause }1should probably be const)
OpenMP loop iteration variable cannot have more than 64 bits size and will be narrowed
minus(-) operator for reductions is deprecated; use + or user defined reduction instead
OpenMP only allows an ordered construct with the simd clause nested in a simd construct
Type %0 is not trivially copyable and not guaranteed to be mapped correctly
declaration is not declared in any declare target region
array section %select{lower bound|length}0 is of type 'char'
expected '#pragma omp end declare target' at end of file to match '#pragma omp %0'
allocate directive specifies %select{default|'%1'}0 allocator while previously used %select{default|'%3'}2
class implementation may not have super class
%0 attribute is deprecated and ignored in %1
passing non-generic address space pointer to %0 may cause dynamic conversion affecting performance
%0 should not return a null pointer unless it is declared 'throw()'%select{| or 'noexcept'}1
os_log() '%%n' format specifier is not allowed
result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4
type %0 requires %1 bytes of alignment and the default allocator only guarantees %2 bytes
overloaded operator %select{>>|<<}0 has higher precedence than comparison operator
%q0 hides overloaded virtual %select{function|functions}1
parameter of overriding method should be annotated with __attribute__((noescape))
passing %0-byte aligned argument to %1-byte aligned parameter %2%select{| of %4}3 may result in an unaligned pointer access
parameter '%0' not in expected state when the function returns: expected '%1', observed '%2'
argument not in expected state; expected '%0', observed '%1'
%0 is a large (%1 bytes) pass-by-value argument; pass it by reference instead ?
parentheses were disambiguated as a function declaration
parentheses were disambiguated as redundant parentheses around declaration of variable named %0
passing object of class type %0 through variadic %select{function|block|method|constructor}1%select{|; did you mean to call '%3'?}2
moving a temporary object prevents copy elision
moving a local object in a return statement prevents copy elision
taking the absolute value of %select{pointer|function|array}0 type %1 is suspicious
performing pointer arithmetic on a null pointer has undefined behavior%select{| if the offset is nonzero}0
comparing a pointer to a null character constant; did you mean to compare to %select{NULL|(void *)0}0?
dereference of type %1 that was reinterpret_cast from type %0 has undefined behavior
performing pointer subtraction with a null pointer %select{has|may have}0 undefined behavior
cast to smaller integer type %1 from %0
cast to smaller integer type %1 from %0
@selector expression formed with potentially direct selector %0
#pragma align(packed) may not be compatible with objects generated with AIX XL C/C++
unused attribute %0 in '#pragma clang attribute push' region
#pragma options align=reset failed: %0
expected #pragma pack parameter to be '1', '2', '4', '8', or '16'
the current #pragma pack alignment value is modified in the included file
unterminated '#pragma pack (push, ...)' at end of file
non-default #pragma pack value changes the alignment of struct or union members in the included file
specifying both a name and alignment to 'pop' is undefined
value of #pragma pack(show) == %0
#pragma %0(pop, ...) failed: %1
only variables can be arguments to '#pragma unused'
undeclared variable %0 used as an argument for '#pragma unused'
operator '?:' has lower precedence than '%0'; '%0' will be evaluated first
%0 has lower precedence than %1; %1 will be evaluated first
operator '?:' has lower precedence than '%0'; '%0' will be evaluated first
object format flags cannot be used with '%0' conversion specifier
'%select{*|.*}0' specified field %select{width|precision}0 is missing a matching 'int' argument
field %select{width|precision}0 should have type %1, but argument has type %2
data argument not used by format string
missing object format flag
format string contains '\0' within the string body
format string is not null-terminated
flag '%0' is ignored when flag '%1' is present
incomplete format specifier
more '%%' conversions than data arguments
'%0' is not a valid object format flag
'%%n' specifier not supported on this platform
flag '%0' results in undefined behavior with '%1' conversion specifier
%select{field width|precision}0 used with '%1' conversion specifier, resulting in undefined behavior
data argument position '%0' exceeds the number of data arguments (%1)
use of __private_extern__ on a declaration may not produce external symbol private to the linkage unit and is deprecated
property %0 not found on object of type %1; did you mean to access property %2?
property attribute in class extension does not match the primary class
'%1' attribute on property %0 does not match the property inherited from %2
property declared as returning non-retained objects; getter returning retained objects
primary property declaration is implicitly strong while redeclaration in class extension is weak
property access is using %0 method which is deprecated
getter name mismatch between property redeclaration (%1) and its original declaration (%0)
property type %0 is incompatible with type %1 inherited from %2
property %select{of type %1|with attribute '%1'|without attribute '%1'|with getter %1|with setter %1}0 was selected for synthesis
passing the value that %1 points to by reference requires holding %0 %select{'%2'|'%2' exclusively}3
the pointer incremented by %0 refers past the end of the array (that has type %1)
the pointer incremented by %0 refers past the last possible element for an array in %1-bit address space containing %2-bit (%3-byte) elements (max possible %4 element%s5)
the pointer decremented by %0 refers before the beginning of the array
'objc_independent_class' attribute may be put on Objective-C object pointer type only; attribute is ignored
authenticating a null pointer will almost certainly trap
signing a null pointer will yield a non-null pointer
'%0' type qualifier%s1 on return type %plural{1:has|:have}1 no effect
attribute 'readonly' of property %0 restricts attribute 'readwrite' of property inherited from %1
receiver %0 is a forward class and corresponding @interface may not exist
receiver type %0 for instance message is a forward declaration
incompatible redeclaration of library function %0
%q0 redeclared without %1 attribute: previous %1 ignored
%q0 redeclared without 'dllimport' attribute: 'dllexport' attribute added
#pragma redefine_extname is applicable to external C declarations only; not applied to %select{function|variable}0 %1
redefinition of %0 will not be visible outside of this function
variable %0 is %select{decremented|incremented}1 both in the loop header and in the loop body
redundant move in return statement
redundant parentheses surrounding declarator
reference %0 is not yet bound to a value when used here
'register' storage specifier on @catch parameter will be ignored
'reinterpret_cast' %select{from|to}3 class %0 %select{to|from}3 its %select{virtual base|base at non-zero offset}2 %1 behaves differently from 'static_cast'
method is expected to return an instance of its class type %diff{$, but is declared to return $|, but is declared to return different type}0,1
protocol method is expected to return an instance of the implementing class, but is declared to return %0
%select{remainder|division}0 by zero is undefined
'require_constant_initialization' attribute added after initialization of variable
identifier %0 is reserved because %select{<ERROR>|it starts with '_' at global scope|it starts with '_' and has C language linkage|it starts with '__'|it starts with '_' followed by a capital letter|it contains '__'}1
%0 is a reserved name for a module
returning address of label, which is local
returning %select{address of|reference to}0 local temporary object
%select{address of|reference to}0 stack memory associated with %select{local variable|parameter}2 %1 returned
manual %0 of an OSSharedPtr is error-prone
non-void %select{function|method}1 %0 should return a value
return state set for an unconsumable type '%0'
return value not in expected state; expected '%0', observed '%1'
return value of %0 is a large (%1 bytes) pass-by-value object; pass it by reference instead ?
%0 has C-linkage specified, but returns user-defined type %1 which is incompatible with C
%0 has C-linkage specified, but returns incomplete type %1 which could be incompatible with C
repeated RISC-V 'interrupt' attribute
instance method %0 is being used on 'Class' which is not in the root class
sampler initializer has invalid %0 bits
zero field width in scanf format string is unused
no closing ']' for '%%[' in scanf format string
second argument to 'va_start' is not the last named parameter
second argument to 'va_arg' is of promotable type %0; this va_arg has undefined behavior because arguments will be promoted to %1
second argument to 'va_arg' is of non-POD type %0
second argument to 'va_arg' is of ARC ownership-qualified type %0
explicitly assigning value of variable of type %0 to itself%select{|; did you mean to assign to member %2?}1
explicitly assigning value of variable of type %0 to itself%select{|; did you mean to assign to member %2?}1
explicitly moving variable of type %0 to itself%select{|; did you mean to move to member %2?}1
property %0 requires method %1 to be defined - use @synthesize, @dynamic or provide a method implementation in this class implementation
property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this category
%select{parameter|non-static data member}3 %0 %select{|of %1 }3shadows member inherited from type %2
shift count >= width of type
shifting a negative signed value is undefined
shift count is negative
signed shift result (%0) requires %1 bits to represent, but %2 only has %3 bits
signed shift result (%0) sets the sign bit of the shift expression's type (%1) and becomes negative
expression with side effects will be evaluated despite being used as an operand to 'typeid'
expression with side effects has no effect in an unevaluated context
signed bit-field %0 needs an extra bit to represent the largest positive enumerators of %1
sizeof on pointer operation will return size of %0 instead of %1
sizeof on array function parameter will return size of %0 instead of %1
'%0' call operates on objects of type %1 while the size is based on a different type %2
did you mean to %select{dereference the argument to 'sizeof' (and multiply it by the number of elements)|remove the addressof in the argument to 'sizeof' (and multiply it by the number of elements)|provide an explicit length}0?
argument to 'sizeof' in %0 call is the same pointer type %1 as the %select{destination|source}2; expected %3 or an explicit length
initializer order does not match the declaration order
variable %0 is %select{used|captured}1 uninitialized whenever %select{'%3' condition is %select{true|false}4|'%3' loop %select{is entered|exits because its condition is false}4|'%3' loop %select{condition is true|exits because its condition is false}4|switch %3 is taken|its declaration is reached|%3 is called}2
line splicing in Doxygen comments are not supported
'%0' ignored on this declaration
array argument is too small; %select{contains %0 elements|is of size %0}2, callee requires at least %1
the message in this static assertion is not a constant expression
non-constant static local variable in inline function may be different in different files
'main' should not be declared static
static variable %0 is suspiciously used within its own initialization
multiple methods named %0 found
@selector expression formed with potentially direct selector %0
a %select{function|block}0 declaration without a prototype is deprecated %select{in all versions of C|}0
passing arguments to %select{a function|%1}0 without a prototype is deprecated in all versions of C and is not supported in C2x
adding %0 to a string pointer does not append to the string
adding %0 to a string does not append to the string
result of comparison against %select{a string literal|@encode}0 is unspecified (use an explicit string comparison function instead)
size argument in %0 call appears to be size of the source; expected the size of the destination
the value of the size argument in 'strncat' is too large, might lead to a buffer overflow
size argument in 'strncat' call appears to be size of the source
the value of the size argument to 'strncat' is wrong
%2 defined as %select{a struct|an interface|a class}0%select{| template}1 here but previously declared as %select{a struct|an interface|a class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI
%select{struct|interface|class}0%select{| template}1 %2 was previously declared as a %select{struct|interface|class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI
subtraction of pointers to type %0 of zero size has undefined behavior
array subscript is of type 'char'
%0 overrides a destructor but is not marked 'override'
%0 overrides a member function but is not marked 'override'
block could be declared with attribute 'noreturn'
%select{function|method}0 %1 could be declared with attribute 'noreturn'
field %0 can overwrite instance variable %1 with variable sized type %2 in superclass %3
'size' argument to bzero is '0'
%select{'size' argument to memset is '0'|setting buffer to a 'sizeof' expression}0; did you mean to transpose the last two arguments?
'swift_newtype' attribute may be put on a typedef only; attribute is ignored
template parameter of a function template with the 'sycl_kernel' attribute cannot be a non-type template parameter
function template with 'sycl_kernel' attribute must have a single parameter
'sycl_kernel' attribute only applies to a function template with at least two template parameters
function template with 'sycl_kernel' attribute must have a 'void' return type
the semantics of this intrinsic changed with GCC version 4.4 - the newer semantics are provided here
taking address of packed member %0 of class or structure %q1 may result in an unaligned pointer value
version list contains duplicate entries
mixing 'target_clones' specifier mechanisms is permitted for GCC compatibility; use a comma separated sequence of string literals, or a string literal containing a comma-separated list of versions
version list contains entries that don't impact code generation
result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4
result of comparison of constant %0 with expression of type 'BOOL' is always %1, as the only well defined values for 'BOOL' are YES and NO
result of comparison of %select{%4|%1-bit %select{signed|unsigned}2 value}0 %3 %select{%1-bit %select{signed|unsigned}2 value|%4}0 is always %5
result of comparison %select{%3|%1}0 %2 %select{%1|%3}0 is always %4
overlapping comparisons always evaluate to %select{false|true}0
calling %0 is a violation of trusted computing base '%1'
non-type template argument with value '%0' converted to '%1' for unsigned template parameter of type %2
non-type template argument value '%0' truncated to '%1' for template parameter of type %2
exported templates are unsupported
dependent nested name specifier '%0' for friend template declaration is not supported; ignoring this friend declaration
dependent nested name specifier '%0' for friend class declaration is not supported; turning off access control for %1
extraneous template parameter list in template specialization
tentative array definition assumed to have one element
'this' pointer cannot be null in well-defined C++ code; pointer may be assumed to always convert to true
'this' pointer cannot be null in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0
%0 attribute requires arguments whose type is annotated with 'capability' attribute; type here is %1
%0 attribute can only be applied in a context annotated with 'capability' attribute
%0 only applies to pointer types; type here is %1
ignoring %0 attribute because its argument is invalid
%0 attribute without capability arguments refers to 'this', but %1 isn't annotated with 'capability' or 'scoped_lockable' attribute
%0 attribute without capability arguments can only be applied to non-static methods of a class
thread safety beta warning
thread safety verbose warning
%0 has a non-throwing exception specification but can still throw
underaligned exception object thrown
could not infer allocation type in call to '%0'
%select{alignment|size}0 of field %1 (%2 bits) does not match the %select{alignment|size}0 of the first field in transparent union; transparent_union attribute ignored
first field of a transparent union cannot have %select{floating point|vector}0 type %1; transparent_union attribute ignored
transparent_union attribute can only be applied to a union definition; attribute ignored
transparent union definition must contain at least one field; transparent_union attribute ignored
applying attribute %0 to a declaration is deprecated; apply it to the type instead
'%0' only applies to %select{function|pointer|Objective-C object or block pointer}1 types; type here is %2
specified %0 type tag requires a null pointer
argument type %0 doesn't match specified %1 type tag %select{that requires %3|}2
this type tag was not designed to be used with this function
incompatible function pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3
'%0' qualifier on function type %1 has no effect
'%0' qualifier on function type %1 has unspecified behavior
ordered comparison of function pointers (%0 and %1)
'%0' qualifier on reference type %1 has no effect
vector operands do not have the same elements sizes (%0 and %1)
unannotated fall-through between switch labels
unannotated fall-through between switch labels in partly-annotated function
implementing unavailable method
%0 may be unavailable because the receiver type is unknown
undeclared selector %0
undeclared selector %0; did you mean %1?
cannot find interface declaration for %0
cannot find interface declaration for %0; did you mean %1?
method definition for %0 not found
cannot find protocol definition for %0
inline function %q0 is not defined
%select{function|variable}0 %q1 has internal linkage but is not defined
reinterpret_cast from %0 to %1 has undefined behavior
%0 is only available on %1 %2 or newer
%0 is only available on %1 %2 or newer
__declspec attribute %0 is not supported
method %0 in protocol %1 not implemented
no method with selector %0 is implemented in this translation unit
block pointer variable %0 is %select{uninitialized|null}1 when captured by block
variable %0 is uninitialized when passed as a const reference argument here
variable %0 is uninitialized when used within its own initialization
reference %0 is not yet bound to a value when used within its own initialization
variable %0 is uninitialized when %select{used here|captured by block}1
unknown sanitizer '%0' ignored
releasing %0 '%1' that was not held
releasing %0 '%1' using %select{shared|exclusive}2 access, expected %select{shared|exclusive}3 access
%select{function|variable}0 %1 is not needed and will not be emitted
member function %0 is not needed and will not be emitted
'static' function %0 declared in header file should be declared 'static inline'
unqualified call to '%0'
code will never be executed
due to lvalue conversion of the controlling expression, association of type %0 will never be selected because it is %select{of array type|qualified}1
'break' will never be executed
default label in switch which covers all enumeration values
fallthrough annotation in unreachable code
loop will run at most once (loop increment never executed)
'return' will never be executed
%select{unsafe pointer operation|unsafe pointer arithmetic|unsafe buffer access|function introduces unsafe buffer manipulation|unsafe invocation of span::data}0
the two-parameter std::span construction is unsafe as it can introduce mismatch between buffer size and the bound information
%0 is an %select{unsafe pointer used for buffer access|unsafe buffer that does not perform bounds checks}1
multiple unsequenced modifications to %0
unsequenced modification and access to %0
taking the absolute value of unsigned type %0 has no effect
result of comparison of %select{%3|unsigned expression}0 %2 %select{unsigned expression|%3}0 is always %4
assigning value of signed enum type %1 to unsigned bit-field %0; negative enumerators of enum %1 will be converted to positive values
result of comparison of %select{%3|char expression}0 %2 %select{char expression|%3}0 is always %4, since char is interpreted as unsigned
result of comparison of %select{%3|unsigned enum expression}0 %2 %select{unsigned enum expression|%3}0 is always %4
unsupported branch protection specification '%0'
sorry, lifetime extension of %select{temporary|backing array of initializer list}0 created by aggregate initialization using default member initializer is not supported; lifetime of %select{temporary|backing array}0 will end at the end of the full-expression
%select{unsupported|duplicate|unknown}0%select{| CPU| tune CPU}1 '%2' in the '%select{target|target_clones|target_version}3' attribute string; '%select{target|target_clones|target_version}3' attribute ignored
parameter %0 set but not used
variable %0 set but not used
ignoring return value of function declared with %0 attribute
left operand of comma operator has no effect
%select{equality|inequality|relational|three-way}0 comparison result unused
unused variable %0
ignoring temporary created by a constructor declared with %0 attribute
ignoring temporary created by a constructor declared with %0 attribute: %1
container access result unused - container access should not be used for side effects
unused exception parameter %0
expression result unused
unused function %0
unused label %0
lambda capture %0 is not %select{used|required to be captured for this use}1
unused %select{typedef|type alias}0 %1
unused member function %0
unused parameter %0
private field %0 is not used
ivar %0 which backs the property is not referenced in this property's accessor
property access result unused - getters should not be used for side effects
ignoring return value of function declared with %0 attribute
ignoring return value of function declared with %0 attribute: %1
'[[%select{nodiscard|gnu::warn_unused_result}0]]' attribute ignored when applied to a typedef; consider using '__attribute__((warn_unused_result))' or '[[clang::warn_unused_result]]' instead
unused %select{function|variable}0 template %1
unused variable %0
expression result unused; should this cast be to 'void'?
expression result unused; assign into a variable to force a volatile load
invalid invocation of method '%0' on object '%1' while it is in the '%2' state
invalid invocation of method '%0' on a temporary object while it is in the '%1' state
%0 was marked unused but was used
user-defined literal suffixes %select{<ERROR>|not starting with '_'|containing '__'}0 are reserved%select{; no literal will invoke this operator|}1
using namespace directive in global context in header
passing %select{an object that undergoes default argument promotion|an object of reference type|a parameter declared with the 'register' keyword}0 to 'va_start' has undefined behavior
object of type %0 cannot be placed in read-only memory
%select{reading|writing}1 the value pointed to by %0 requires holding %select{any mutex|any mutex exclusively}1
%select{reading|writing}3 the value pointed to by %1 requires holding %0 %select{'%2'|'%2' exclusively}3
%select{reading|writing}3 the value pointed to by %1 requires holding %0 %select{'%2'|'%2' exclusively}3
instantiation of variable %q0 required here, but no definition is available
%select{reading|writing}1 variable %0 requires holding %select{any mutex|any mutex exclusively}1
%select{reading|writing}3 variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3
%select{reading|writing}3 variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3
field %0 with variable sized type %1 is not visible to subclasses and can conflict with their instance variables
variable%select{s| %1|s %1 and %2|s %1, %2, and %3|s %1, %2, %3, and %4}0 used in loop condition not modified in loop body
defaulted move assignment operator of %0 will move assign virtual base class %1 multiple times
Use of 'long' with '__vector' is deprecated
specifying vector types with the 'mode' attribute is deprecated; use the 'vector_size' attribute instead
variable length array used
cast to smaller integer type %1 from %0
cast to smaller integer type %1 from %0
dynamic exception specifications with types are currently ignored in wasm
weak identifier %0 never declared
an already-declared variable is made a weak_import declaration %0
this warning is no longer in use and will be removed in the next release
%0 has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit
using %select{integer|floating point|complex}1 absolute value function %0 when argument is of %select{integer|floating point|complex}2 type
result of '%0' is %1; did you mean exponentiation?
result of '%0' is %1; did you mean '%2'?
result of '%0' is %1; did you mean '%2' (%3)?
zero as null pointer constant
%select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++
%select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++
%0 is only available on %1 %2 and %3 %4 or newer
the selected methods are already implemented
method %0 cannot be renamed because it overrides a method declared in a system framework
no %select{implementation file|@implementation declaration}0 for the selected %select{declaration|@interface}0 %1; please add one and run the refactoring action again
the selected code is not a part of a function's / method's body
the selected expression can't be extracted
the selected expression is too simple to extract
refactoring action can't be initiated without a selection
the provided selection does not overlap with the AST nodes of interest
there is no symbol at the given location
%0 is a builtin function that cannot be renamed
%0 is declared in a %1 file; rename can be initiated in a %1 file only
%0 cannot be renamed because it is declared in a system header
caching backend error: %0
caching failed because the output can be non-deterministic
CAS cannot be initialized from the specified '-fcas-*' options: %0
CAS cannot load module with key '%0' from %1: %2
cannot load APINotes from include-tree-id '%0'
CAS cannot parse include-tree-id '%0'
CAS cannot parse root-id '%0' specified by -fcas-fs
CAS cannot parse root-id '%0' for module '%1'
Failed to establish connection with depscan daemon: %0
CAS-based dependency scan failed: %0
CAS filesystem cannot be initialized from root-id '%0': %1
CAS filesystem cannot set working directory to '%0' specified by -fcas-fs-working-directory
CAS missing expected include-tree '%0'
CAS missing expected root-id '%0'
failed to store to CAS: %0
clang-cache cannot find compiler binary %0
clang-cache failed to execute compiler: %0
missing compiler command for clang-cache
missing arguments for dep-scanning server mode
compile job cache backend did not find output '%0' for key '%1' (output ID: '%2')
compile job cache hit for '%0' => '%1'
compile job cache miss for '%0'
compile job cache miss for '%0' (result not found: '%1')
compile job cache skipped for '%0'
compile job cache backend key query time: %0
compile job cache backend key update time: %0
compile job cache backend load artifacts time: %0
compile job cache backend store artifacts time: %0
compile job dependency scanning time: %0
caching disabled because %0
77ooWWW7
7___ww????
'''''''
GGGG
!!!!!!!
!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@returns
@exports
@private
CCCCCCCCCCCCCCCCCCCCCCCCCC;
"4DTds
!,8-
@@@@@@@@@@@@@@@@@@D@@@@@@@@@@@DDD@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@DD^[
 ]*import[
 ]+(static[
 ]*)?([^
 ]*)[
 ]*;
// clang-format on
// clang-format off
assembly
property
%%%%%%%%%%%%%%%%
%%%%
%%%%%%
%%%%
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
)))))))
))))))))))))))))))
))))))))))))))))))))))))
pppppppppppppppppjpppppppppp
ppppppppppnpp
----------------8\--
PPPPPPPPPPP
PPPPP
PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
(((+(3(((((((((((((((((+
MMMM
i-33
33333333333U3[3
3333
3333
3333
-33333
33333333
3333333333333333333
3333333333333333333333
33333333
33333333333333333333333333`
6                                     3  
>G^[\t\ ]*#[\t\ ]*(import|include)[^"<]*(["<][^">]*[">])
,,..**
     
cccccccccccccccccccc\`^P
111111
iii:iiiiTiiiiiii
iiiiiiiiii
7Iaaaaaaaraaaaaaa
Alias for -help
Clang-format options
offset
Format a range starting at this byte offset.
Multiple ranges can be formatted by specifying
several -offset and -length pairs.
Can only be used with one input file.
length
Format a range of this length (in bytes).
Multiple ranges can be formatted by specifying
several -offset and -length pairs.
When only a single -offset is specified without
-length, clang-format will format up to the end
of the file.
Can only be used with one input file.
lines
<start line>:<end line> - format a range of
lines (both 1-based).
Multiple ranges can be formatted by specifying
several -lines arguments.
Can't be used with -offset and -length.
Can only be used with one input file.
style
fallback-style
The name of the predefined style used as a
fallback in case clang-format is invoked with
-style=file, but can not find the .clang-format
file to use. Defaults to 'LLVM'.
Use -fallback-style=none to skip formatting.
assume-filename
Set filename used to determine the language and to find
.clang-format file.
Only used when reading from stdin.
If this is not passed, the .clang-format file is searched
relative to the current working directory when reading stdin.
Unrecognized filenames are treated as C++.
supported:
  CSharp: .cs
  Java: .java
  JavaScript: .mjs .js .ts
  Json: .json
  Objective-C: .m .mm
  Proto: .proto .protodevel
  TableGen: .td
  TextProto: .textpb .pb.txt .textproto .asciipb
  Verilog: .sv .svh .v .vh
<stdin>
Inplace edit <file>s, if specified.
output-replacements-xml
Output replacements as XML.
dump-config
Dump configuration options to stdout and exit.
Can be used with -style option.
cursor
The position of the cursor when invoking
clang-format from an editor integration
sort-includes
If set, overrides the include sorting behavior
determined by the SortIncludes style flag
qualifier-alignment
If set, overrides the qualifier alignment style
determined by the QualifierAlignment style flag
files
A file containing a list of files to process, one per line.
filename
verbose
If set, shows the list of processed files
dry-run
If set, do not actually make the formatting changes
Alias for --dry-run
Wclang-format-violations
Warnings about individual formatting changes needed. Used only with --dry-run or -n
Wno-clang-format-violations
Do not warn about individual formatting changes needed. Used only with --dry-run or -n
ferror-limit
Set the maximum number of clang-format errors to emit
before stopping (0 = no limit).
Used only with --dry-run or -n
Werror
If set, changes formatting warnings to errors
Wno-error
If set don't error out on the specified warning type.
unknown
If set, unknown format options are only warned about.
This can be used to enable formatting, even if the
configuration contains unknown (newer) options.
Use with caution, as this might lead to dramatically
differing format depending on an option being
supported or not.
fcolor-diagnostics
If set, and on a color-capable terminal controls whether or not to print diagnostics in color
fno-color-diagnostics
[<file> ...]
A tool to format C/C++/Java/JavaScript/JSON/Objective-C/Protobuf/C# code.
If no arguments are specified, it formats the code from standard input
and writes the result to the standard output.
If <file>s are given, it reformats the files. If -i is specified
together with <file>s, the files are edited in-place. Otherwise, the
result is written to the standard output.
Clang-formating 
 files
error: -offset, -length and -lines can only be used for single file.
Formatting [
Cannot find option named '
clang-format
error: cannot use -i when reading from stdin.
error: encoding with unsupported byte order mark "
" detected
 in file '
error: empty filenames are not allowed
volatile
type
x = 
Bad Json variable insertion
{ "Cursor": 
, "IncompleteFormat": 
, "Line": 
<irrelevant>
error: cannot use -lines with -offset/-length
error: invalid <start line>:<end line> pair
error: start line should be at least 1
error: start line should not exceed end line
error: number of -offset and -length arguments must match.
error: offset 
 is outside the file
error: invalid length 
, offset + length (
) is outside the file.
code should be clang-formatted [-Wclang-format-violations]
<?xml version='1.0'?>
<replacements xml:space='preserve' incomplete_format='
 line='
<cursor>
</cursor>
</replacements>
<replacement 
offset='
length='
</replacement>
&#10;
&#13;
&lt;
&amp;
clang-format error:
cl::alias must only have one cl::aliasopt(...) specified!
cl::alias must have argument name specified!
cl::alias must have an cl::aliasopt(option) specified!
cl::alias must not have cl::sub(), aliased option's cl::sub() will be used!
0123456789abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
cannot not open file '
Could not convert UTF16 to UTF8
cannot not find configuration file: 
cannot get absolute path for: 
recursive expansion of: '
cannot open file: 
: for the 
 option: 
>...
' is invalid value for boolean argument! Try 0 or 1
' value invalid for uint argument!
' value invalid for ullong argument!
    
 (default: 
*no default*
= *cannot print option value*
General options
: CommandLine Error: Option '
' registered more than once!
inconsistency in registered CommandLine options
Cannot specify more than one option with cl::ConsumeAfter!
requires a value!
multi-valued option specified with ValueDisallowed modifier!
does not allow a value! '
' specified.
not enough values!
<CFGDIR>
error - this positional option will never be matched, because it does not Require a value, and a cl::ConsumeAfter option is active!
error - option can never match, because another positional argument will match an unbounded number of values, and this option does not require a value!
' is all messed up!
: Unknown command line argument '
'.  Try: '
 --help'
: Did you mean '
This argument does not take a value.
Instead, it consumes any positional arguments until the next recognized option.
: Not enough positional command line arguments specified!
Must specify at least 
 positional argument
: See: 
 --help
: Too many positional arguments specified!
Can specify at most 
 positional arguments: See: 
must be specified at least once!
may not occur within a group!
=<value>
<empty>
    =
Generic Options
help-list
Display list of available options (--help-list-hidden for more)
help-list-hidden
Display list of all available options
help
Display available options (--help-hidden for more)
Alias for --help
help-hidden
Display all available options
print-options
Print non-default options after command line parsing
print-all-options
Print all option values after command line parsing
version
Display the version of this program
  This option category has no options.
cl::location(x) specified more than once!
OVERVIEW: 
USAGE: 
 [subcommand]
 [options]
SUBCOMMAND '
SUBCOMMANDS:
  Type "
 <subcommand> --help" to get more help on a specific subcommand
OPTIONS:
Apple
LLVM
 version 
16.0.0
Optimized build
uint
ulong
string
DebugCounter Error: 
 does not have an = in it
 is not a number
 is not a registered counter
 does not end with -skip or -count
debug-counter
Comma separated list of debug counter skip and count
print-debug-counter
Print out debug counter info after all counters accumulated
cl::location(x) specified more than once!
 -   
Error
Multiple errors
Inconvertible error value. An error has occurred that could not be converted to a known std::error_code. Please file a bug.
A file error occurred.
Multiple errors:
line 
LLVM ERROR: 
LLVM ERROR: out of memory
Allocation failed
Allocation failed
view-background
Execute graph viewer in the background. Creates tmp file litter.
<stdin>
Program arguments: 
rng-seed
seed
Seed for the random number generator
Allocation failed
Allocation failed
SmallVector unable to grow. Requested capacity (
) is larger than maximum value for size type (
SmallVector capacity unable to grow. Already at maximum size 
Included from 
<unknown>
stats
Enable statistics output from program (available with Asserts)
stats-json
Display statistics as json data
Statistics are disabled.  
Build with asserts or with -DLLVM_FORCE_ENABLE_STATS
cl::location(x) specified more than once!
Allocation failed
Error opening info-output-file '
 for appending!
%9lld  
  Total Execution Time: %5.4f seconds (%5.4f wall clock)
   ---User Time---
   --System Time--
   --User+System--
   ---Wall Time---
  ---Mem---
  ---Instr---
  --- Name ---
Total
Miscellaneous Ungrouped Timers
        -----     
  %7.4f (%5.1f%%)
track-memory
Enable -time-passes memory tracking (this may be slow)
info-output-file
File to append -stats and -timer output to
sort-timers
In the report, sort the timers in each group in wall clock time order
treat-scalable-fixed-error-as-warning
Treat issues where a fixed-width property is requested from a scalable type as a warning, instead of an error
HANGUL JUNGSEONG O-E
HANGUL SYLLABLE 
CJK UNIFIED IDEOGRAPH-
TANGUT IDEOGRAPH-
KHITAN SMALL SCRIPT CHARACTER-
NUSHU CHARACTER-
CJK COMPATIBILITY IDEOGRAPH-
 _-ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789PER BODY TILTING FROM HIP JOINTS BETWEEN MIDDLE AND RING FINGERSFACE WITH SYMBOLS COVERING MOUTHLE-LINE EQUAL ABOVE GREATER-THANLE COMMA QUOTATION MARK ORNAMENTLAR SIGN WITH OVERLAID BACKSLASH BAR AT END OF HORIZONTAL STROKEWNWARDS ARROW WITH TIP LEFTWARDSLAGAB TIMES U OVER LAGAB TIMES UWO DOTS ABOVE AND TWO DOTS BELOWAND LEFTWARDS OPEN CIRCLE ARROWSFT-POINTING ANGLE QUOTATION MARKWO DOTS OVER ONE DOT PUNCTUATIONUPPER AND LOWER ONE EIGHTH BLOCKTRIANGLE-HEADED RIGHTWARDS ARROWAND MIDDLE RIGHT TO LOWER CENTRE SHADOWED WHITE RIGHTWARDS ARROWLOWER LEFT CURLY BRACKET SECTIONROFLEX CLICK WITH RETROFLEX HOOKL ARABIC LETTER TAH AND TWO DOTSRONG CENTRALIZATION STROKE BELOWOWNWARDS HARPOON WITH BARB RIGHTOWER RIGHT CURLY BRACKET SECTIONGREATER-THAN ABOVE SLANTED EQUALTOP HALF DIVIDED BY VERTICAL BARAISING BOTH HANDS IN CELEBRATION DOWNWARDS EQUILATERAL ARROWHEADUG2 OVER TUG2 TUG2 OVER TUG2 PAP DOWNWARDS TRIANGLE-HEADED ARROWLL BUT UPPER LEFT QUADRANT BLACKEN ARM ENDING IN ARROW POINTING DIFIER LETTER LABIALIZATION MARKDIC KASHMIRI INDEPENDENT SVARITARIGHT SEMICIRCLE WITH THREE DOTS CONTAINING SMALL WHITE TRIANGLE HORIZONTAL STROKES TO THE RIGHTER ARROWS CIRCLING ANTICLOCKWISEER IGI SHIR OVER SHIR UD OVER UDRONT-TILTED SHADOWED WHITE ARROWER TAB NI OVER NI DISH OVER DISHDED HIGH STOP WITH FILLED CENTRELEFTWARDS HARPOON WITH BARB DOWN KORANIC STOP SIGN ISOLATED FORMESS-THAN ABOVE DOUBLE-LINE EQUAL LEFTWARDS TRIANGLE-HEADED ARROW LETTER BYELORUSSIAN-UKRAINIAN IETALLED BLACK AND WHITE FLORETTE LOWER HALF INVERSE MEDIUM SHADERIGHTWARDS TRIANGLE-HEADED ARROWD ARROW WITH TRIANGLE ARROWHEADSHT-POINTING ANGLE QUOTATION MARKED ARABIC-INDIC DIGIT FOUR ABOVETER-THAN ABOVE DOUBLE-LINE EQUALNORMAL FACTOR SEMIDIRECT PRODUCTTICAL BAR DOUBLE RIGHT TURNSTILEE SQUARED LATIN CAPITAL LETTER PIRECT PRODUCT WITH BOTTOM CLOSEDROXIMATELY NOR ACTUALLY EQUAL TOIGHTWARDS HARPOON WITH BARB DOWNATHARVAVEDIC INDEPENDENT SVARITARIANGLE-HEADED OPEN CIRCLE ARROWINTING DOWNWARDS THEN NORTH EASTED ARABIC-INDIC DIGIT FOUR BELOWHUR KAZAKH KIRGHIZ ALEF MAKSURA THIRD WHITE RIGHT POINTING INDEXVED STEM PARAGRAPH SIGN ORNAMENTS VERTICALLY BELOW AND SMALL TAHIDE AND JOINED WITH INTERSECTIONE CONTAINING BLACK SMALL LOZENGEOF UPWARDS TRIANGLE-HEADED ARROWE-POINTED BLACK RIGHTWARDS ARROWE TO MIDDLE LEFT TO LOWER CENTRE-SHADOWED WHITE RIGHTWARDS ARROW-POINTING ANGLE BRACKET ORNAMENTSEMICIRCULAR ANTICLOCKWISE ARROWH HAMZA ABOVE WITH ALEF MAKSURA H HORIZONTAL MIDDLE BLACK STRIPEMARK WITH LEFT RIGHT ARROW ABOVESWIRL BIRGA WITH DOUBLE ORNAMENTH SUPERSCRIPT ALEF ISOLATED FORMTOM-LIGHTED RIGHTWARDS ARROWHEADVE LESS-THAN ABOVE SLANTED EQUALS AND UPWARDS OPEN CIRCLE ARROWS TORTOISE SHELL BRACKET ORNAMENT TRIANGULAR THREE QUARTERS BLOCKHAND WITH MIDDLE FINGER EXTENDEDEDIUM SHADE AND RIGHT HALF BLOCKM LEFT MEMBER OF DOUBLE VERTICALTION SIGN WITH CIRCUMFLEX ACCENTEDIUM SHADE AND LOWER HALF BLOCKARDROP-SPOKED PROPELLER ASTERISKARDS ARROW ABOVE LEFTWARDS ARROWED UPWARDS EQUILATERAL ARROWHEADARDS HARPOON WITH BARB DOWNWARDSTIMES ASH2 KU OVER HI TIMES ASH2OUBLE-LINE EQUAL ABOVE LESS-THANED COMMA QUOTATION MARK ORNAMENTONE HUNDRED THIRTY-FIVE DEGREESAISED HAND WITH FINGERS SPLAYEDLEFTWARDS EQUILATERAL ARROWHEADETALLED OUTLINED BLACK FLORETTERIGHTWARDS HARPOON WITH BARB UPRING OVER TWO RINGS PUNCTUATIONRINGS OVER ONE RING PUNCTUATIONAND MIDDLE LEFT TO LOWER CENTRETNAMESE ALTERNATE READING MARK UPWARDS HARPOON WITH BARB RIGHTIN WHITE CIRCLE IN BLACK SQUAREACK-TILTED SHADOWED WHITE ARROW CROSSING ASH OVER ASH OVER ASHINDEX THUMB CURVE THUMB INSIDEHT CENTRALIZATION STROKE BELOWDOWNWARDS AND RIGHTWARDS ARROW-HIRAGANA PROLONGED SOUND MARKAGGRAVATED INDEPENDENT SVARITAGREATER-THAN ABOVE EQUALS SIGNGHT FOUR POINTED PINWHEEL STARDOT BELOW AND THREE DOTS ABOVEEFT SEMICIRCLE WITH THREE DOTSOPEN CENTRE EIGHT POINTED STARAND JOINED BY DASH WITH SUBSETMODIFIER LETTER LEFT HALF RINGMINTON RACQUET AND SHUTTLECOCKQAF WITH LAM WITH ALEF MAKSURAMAKSURA WITH SUPERSCRIPT ALEF DIVIDED BY HORIZONTAL BAR AND HIGH-REVERSED-9 QUOTATION MARKSAD WITH LAM WITH ALEF MAKSURAEART EXCLAMATION MARK ORNAMENTON WITH RIGHTWARDS ARROW ABOVEDOWN HEAVY AND RIGHT UP LIGHTONAL INDICATOR SYMBOL LETTER DOT OVER TWO DOTS PUNCTUATION WITH REVERSED NEGATION SLASHDOWN MIDDLE THUMB INDEX CROSS DOWN INDEX THUMB HOOK MIDDLENS-SERIF INTERROBANG ORNAMENTCKED FACE WITH EXPLODING HEADEFTWARDS HARPOON WITH BARB UPOMBINING ANUSVARA ABOVE RIGHTCONTAINING BLACK SMALL CIRCLEUP HEAVY AND RIGHT DOWN LIGHT OVER RIGHTWARDS ARROW TO BARWITH RIGHTWARDS ARROW AT LEFTPUNCTUATION CHINOOK FULL STOPEXTENDED ARABIC-INDIC DIGIT TEVERSED LUNATE EPSILON SYMBOLSUPERSCRIPT ALEF INITIAL FORMSEMICIRCULAR PATH AROUND POLELIGHT FOUR POINTED BLACK CUSPEFT ARC GREATER-THAN BRACKETACE DIRECTION POSITION NOSE DOWN HEAVY AND LEFT UP LIGHTFTING POINT RIGHTWARDS ARROWEDGE-TAILED RIGHTWARDS ARROWLEFTWARDS OF DOWNWARDS ARROWUPPER CENTRE TO MIDDLE RIGHTDOUBLE ANUSVARA ANTARGOMUKHASALTIRE WITH ROUNDED CORNERSBESIDE AND JOINED WITH UNIONMONOGRAMMOS TESSERA DODEKATAUP HEAVY AND LEFT DOWN LIGHTLIQUID MEASURE FIRST SUBUNITHREE HUNDRED FIFTEEN DEGREESHADED WHITE RIGHTWARDS ARROWOUND-TIPPED RIGHTWARDS ARROWU ALAYHI WAAALIHEE WA-SALLAMASTERISKS ALIGNED VERTICALLYT LITTER IN ITS PLACE SYMBOLISMILLAH AR-RAHMAN AR-RAHEEMRECTANGULAR PATH AROUND POLEIBE SYLLABLE BOUNDARY MARKERMIDDLE RING LITTLE CONJOINEDUPWARDS AND RIGHTWARDS ARROWBRDA RNYING YIG MGO MDUN MAPPY PERSON RAISING ONE HANDBRDA RNYING YIG MGO SGAB MAFINGER COVERING CLOSED LIPSOUR BALLOON-SPOKED ASTERISKHEAD MARK WITH MOON AND SUNTALIC LATIN CAPITAL LETTER ZERO FOR ODD POWERS OF FOURCONTINUOUS UNDERLINE SYMBOL AND LEFT SEMICIRCLE ARROWSLOWER MIDDLE LEFT TO LOWER STRUMENTAL NOTATION SYMBOL-KATHAKA INDEPENDENT SVARITARIGHT ARC LESS-THAN BRACKETIDE ARC ANTICLOCKWISE ARROWCIRCLE WITH NORTHWEST ARROWIDE-HEADED RIGHTWARDS ARROWLOWER TONAL RANGE INDICATORBETWEEN TWO HORIZONTAL BARSEAVY WHITE RIGHTWARDS ARROWRIPLE VERTICAL BAR OPERATORPHARYNGEAL VOICED FRICATIVEWO DOTS BELOW AND DOT ABOVEFOUR FINGERS CONJOINED BENT-FEATHERED RIGHTWARDS ARROW BARREE WITH TWO DOTS BELOWHANDED INTERLACED PENTAGRAMLARGE EQUILATERAL ARROWHEADUPPER MIDDLE LEFT TO UPPER LIGHT CENTRALIZATION STROKEDOUBLE PRIME QUOTATION MARKDOUBLE ANGLE QUOTATION MARKTWO HUNDRED SEVENTY DEGREESWALLPLANE SHOULDER HIP MOVELESS-THAN ABOVE EQUALS SIGNEMICIRCULAR CLOCKWISE ARROW DIVIDED BY HORIZONTAL RULERIANGULAR ONE QUARTER BLOCKIMPERFECTUM CUM PROLATIONE ONE LARGE AND ONE SMALL EYEENTATION FORM FOR VERTICAL CRIPT LIGATURE ET ORNAMENTU REVERSED OVER U REVERSEDMEEM WITH HAH WITH TATWEELCAT FACE WITH SMILING EYESOORPLANE SHOULDER HIP MOVELINE FEED SEPARATOR SYMBOLMARRIED PARTNERSHIP SYMBOLUNEVEN EYES AND WAVY MOUTHRIGHT PARENTHESIS ORNAMENTMODIFIER FITZPATRICK TYPE-LLALLAHOU ALAYHE WASSALLAMRIPLE DOT PUNCTUATION MARKDROP-SHADOWED WHITE SQUARETHREE DOTS ABOVE DOWNWARDS OR APPROXIMATELY EQUAL TOSSIAN ASTROLOGICAL SYMBOL AND MIDDLE FINGERS CROSSEDCLOCKWISE ARROW WITH MINUSE ONE-WAY LEFT WAY TRAFFICIDEOGRAPHIC ITERATION MARKAND RIGHT ONE EIGHTH BLOCKLEFTWARDS OF UPWARDS ARROWJECT REPLACEMENT CHARACTERLANTED SOUTH ARROW WITH HOERSTRASS ELLIPTIC FUNCTIONDOTTED SUBSTITUTION MARKERBLE TENNIS PADDLE AND BALLALEF MAKSURA ISOLATED FORM GAD OVER GAD GAR OVER GARHTORA SKLIRON CHROMA VASISDOTTED LUNATE SIGMA SYMBOL LESS THAN THE DENOMINATORWITH LEFTWARDS ARROW ABOVEINDUSTRIAL STANDARD SYMBOLOCKED FEMALE AND MALE SIGN NEGATED WITH VERTICAL BARORTHOGONAL CROSSHATCH FILLONOMICAL SYMBOL FOR URANUSOTATED FLORAL HEART BULLETYAJURVEDIC MIDLINE SVARITA WITHIN TRIANGLE ARROWHEADSTROKE AND TWO DOTS ABOVETTED SUBSTITUTION BRACKETLEFTWARDS ARROW WITH HOOKRIGHT DIAGONAL HALF BLACKTAB OVER TAB GAR OVER GARDOUBLE CANDRABINDU VIRAMABUT NOT ACTUALLY EQUAL TODIAERESIS AND HOOK SYMBOLOLD ASSYRIAN WORD DIVIDERELD HOCKEY STICK AND BALLINVERTED EXCLAMATION MARKMULTIPLICATION SIGN BELOWLEFT PARENTHESIS ORNAMENTTERNION INTEGRAL OPERATORLOW QUILT SQUARE ORNAMENTBREVE WITH INVERTED BREVERIST CIRCLE HITTING WALL REE-HUNDRED-AND-TWENTIETHFECTIVENESS OR DISTORTION WITH DOUBLE VERTICAL BAR WITH DOUBLE GRAVE ACCENTMBINING CRYPTOGRAMMIC DOTCROSSING NORTH EAST ARROW OVER NUN LAGAR TIMES SALMEDIUM TRIANGLE ARROWHEADCAT FACE WITH CLOSED EYESOUTLINED RIGHTWARDS ARROWRANCH BANK IDENTIFICATION WITH CIRCLED ONE OVERLAYOUBLE BIRGA WITH ORNAMENTING ON THE FLOOR LAUGHINGDRY MEASURE FIRST SUBUNITONE UNDER EIGHTEEN SYMBOLNIVERSAL RECYCLING SYMBOLFFICULTY AT THE BEGINNING WITH DOUBLE MIDDLE TILDERIPLE BIRGA WITH ORNAMENTWELVE POINTED BLACK STARORIZONTAL BAR WITH NOTCHUPWARD POINTING TRIANGLEGLOTTAL STOP WITH STROKEWITH CANCELLATION STROKET BLACK RIGHTWARDS ARROWEQUAL TO OR GREATER-THANTED INTERPOLATION MARKERMALL CIRCLE TO THE RIGHTUPRIGHT RECTANGULAR ZEROHEAVY BLACK HEART BULLETDESCENDING MUSICAL NOTESARM CIRCLE HITTING WALL REVERSED NINE-LIKE BHALESMALL ARABIC LETTER TAH ISOSCELES RIGHT TRIANGLESYLLABLE REPETITION MARKBLIC ADDRESS LOUDSPEAKERTEARDROP-SPOKED ASTERISKARROW POINTING DIRECTLY OTTOM-SHADED WHITE ARROWGREATER-THAN OR EQUAL TOLICATION PROGRAM COMMANDOTTOM SHADED WHITE ARROWBUSINESS SUIT LEVITATINGDIAGONAL CROSSHATCH FILLDOWNSCALING FACTOR KIIZHBLACK LENTICULAR BRACKETSTROKE THROUGH DESCENDERINTERSECTION WITH SERIFSLINE HORIZONTAL ELLIPSISSINGLE-LINE NOT EQUAL TOPERSCRIPT ALEF MOKHASSASBERKANAN BEORC BJARKAN BING FACE WITH OPEN MOUTHWITH UPWARDS ARROW ABOVECOMPATIBILITY IDEOGRAPH- OVER TOP SQUARE BRACKETPOINTING DOWNWARDS ABOVEAND MALE AND FEMALE SIGNWO DOTS VERTICALLY ABOVE POINTING BACKHAND INDEXEYES AND HAND OVER MOUTHLY-RECYCLED PAPER SYMBOLCULINE ORDINAL INDICATORIGATURE OPEN ET ORNAMENTCONSECUTIVE EQUALS SIGNSDOUBLE HORIZONTAL STROKERIGHTWARDS THEN CURVING LARGE TRIANGLE ARROWHEADALTERNATE SECTION MARKERFINGER AND THUMB CROSSEDE PLUS A PLUS SU PLUS NAMTAVRULI CAPITAL LETTER ONE-HUNDRED-AND-SIXTIETHVOICED LARYNGEAL SPIRANTLEFT DIAGONAL HALF BLACKORAH WITH NINE BRANCHESPUNCTUATION END OF TEXTRIGHT DIAGONAL ELLIPSISIVE FINGERS SPREAD OPENGREEK SMALL LETTER IOTAWESTERN PWO KAREN TONE-RIGHT HORIZONTAL SECANTRIGHT-POINTING TRIANGLEISTED RIGHTWARDS ARROWSOVERLAPPING LOGICAL ANDOVER RIGHTWARDS HARPOON WITH HALF-CIRCLE BELOWIGHT-SHADED WHITE ARROWMITIAN CONJUGATE MATRIXRTOISE SHELL BRACKETED HREE POINTED BLACK STARSOLIDUS BINARY RELATIONHANKED RIGHTWARDS ARROWININE ORDINAL INDICATORLSCHREIBER PAUSE SYMBOLUBLE VERTICAL BAR BELOWAVOURING DELICIOUS FOODORIGINAL OF OR EQUAL TOBARBED RIGHTWARDS ARROWLEFT-SHADED WHITE ARROWDOWNWARDS THEN CURVING HT TRIFOLIATE SNOWFLAKERAISED OMISSION BRACKETARABIC LETTER TAH ABOVEESS OUTLINED WHITE STARCURRENT SYMBOL FORM TWOCLUSTER-INITIAL LETTER PA OVER PA GAR OVER GAR ROTATED NINETY DEGREESANG DEPARTING TONE MARKWO-WAY LEFT WAY TRAFFICUP SPREAD THUMB FORWARDZANTINE MUSICAL SYMBOL  CAKE WITH SWIRL DESIGN HUNDRED TWENTY-EIGHTH ASCENDING MUSICAL NOTESIDE ARC CLOCKWISE ARROW POINTING AT THE VIEWERAND WOMAN HOLDING HANDSSING DIAGONAL CROSSING CIRCUMFLEX ACCENT ABOVEREE VARIATION SELECTOR ARTY HORN AND PARTY HATDOT BELOW AND DOT ABOVEWHITE FOUR POINTED CUSPALEF MAKSURA FINAL FORMUPWARDS THEN NORTH WESTATTACHING VERTICAL OMETALGAMATION OR COPRODUCTVERTICAL BISECTING LINEP WITH EXCLAMATION MARKSHAPE WITH A DOT INSIDEWITH HORIZONTAL STROKEDOMAIN ANTIRESTRICTIONLONG HORIZONTAL STROKERECTILINEAR BLACK STARSHORT VERTICAL STROKESINVERTED SMALL V ABOVE WITH DECORATIVE COVERQUESTION MARK ORNAMENTLE BESIDE VERTICAL BARYIAKENG PUACHUE HMONG TWO HORIZONTAL STROKESINVERTED SMALL V BELOWNOT INCLUDING THE POLEUBSCRIPT SMALL LETTER ARMENIAN ETERNITY SIGNDOUBLE-LINED HEAD MARKDOUBLE VERTICAL STROKELEFT TRIANGLE OPERATORING HEAD IN SILHOUETTEPUNCTUATION KUNDDALIYAROUND A POINT OPERATOR WITH THREE DOTS ABOVEHORT HORIZONTAL STROKEWASALLAM ISOLATED FORMDOUBLE SOLIDUS OVERLAYCURLY BRACKET ORNAMENT WITH SINGLE ZAPYATAYAWITH JEEM INITIAL FORMHEXIFORM LONG ANUSVARAEAST-POINTING AIRPLANEIN DEPARTING TONE MARKUIGHUR KIRGHIZ YEH WITGREATER-THAN DIAERESISLOW PARAPHRASE BRACKETND RECORDING COPYRIGHTKEEPING STILL MOUNTAINCONSONANT SIGN MEDIAL CONSONANT MODIFIER BAR SYMBOL FOR LIGHTHOUSETRIPLE RIGHT TURNSTILEDOWN-POINTING TRIANGLE-ROTATED DIVISION SIGNUSTOMER ACCOUNT NUMBERI YFESIS TETARTIMORIONTRIPLE VERTICAL STROKEUPPER RIGHT AND LOWER REE-CIRCLE ALTERNATE ICJK UNIFIED IDEOGRAPH-RROW WITH ROUNDED HEADRIGHT-POINTING FLEURONREASE FONT SIZE SYMBOL OVER STAMPED ENVELOPEDRESSED TO THE SUBJECTSEMI-VOICED SOUND MARKMNYAM YIG GI MGO RGYANPRECEDED BY APOSTROPHEIGEL LONG-BRANCH-SOL S WITH CIRCUMFLEX ABOVESYMPTOTICALLY EQUAL TOINDIRECT QUESTION MARKDOWNWARDS ZIGZAG ARROW RIGHT ARROWHEAD ABOVEACKSLANTED SOUTH ARROWLATIN CAPITAL LETTER SWITH VOICED SOUND MARKSHORT RIGHTWARDS ARROWPERSET OF NOR EQUAL TOPOINTING UPWARDS BELOWBAR ABOVE INTERSECTIONOVER LEFTWARDS HARPOONOVER NU11 BUR OVER BUROVER SHIR BUR OVER BURUPPER ONE EIGHTH BLOCKMALE WITH STROKE SIGNBESIDE RIGHT TRIANGLETEEN POINTED ASTERISKINVERTED BRIDGE BELOWRELICT HOUSE BUILDINGOP SHADED WHITE ARROWOHAMMAD ISOLATED FORMHOUSAND MILLIONS SIGNINTERSECTION OPERATOROCAL NOTATION SYMBOL--SHAPED BAG DELIMITER-ROUND NOTEHEAD DOWN BOTTOM U-SHAPED ARROWTHICK LETTER SELECTORHORIZONTAL TABULATIONINTERSECTING LOGICAL YIG MGO TSHEG SHAD MAREVERSED FEATHER MARKOPPOSING AN PLUS NAGAMORPHOLOGICAL DIVIDERALLING DIAGONAL SLASHSIDE TO SIDE SCISSORSCTOR OR CROSS PRODUCTFINAL CONSONANT SIGN CRUCIFORM NUMBER FOURCROSSE STICK AND BALLVOICED ITERATION MARKLATTENED OPEN A ABOVEFLATTENED PARENTHESISSHORT LEFTWARDS ARROWRISING DIAGONAL SLASHTRIANGULAR HALF BLOCKDOWN HORIZONTAL HEAVYDOWN HORIZONTAL LIGHTAND VOWEL LENGTH MARKWO-CIRCLE ALTERNATE IPAP PLUS PAP PLUS LU3WO-CIRCLE NUKTA ABOVELESS-THAN OR EQUAL TOEIGHT SPOKED ASTERISKELATIONAL COMPOSITIONACUTE AND HOOK SYMBOLRATING SYSTEM COMMANDDIGRAMMOS EX DODEKATAEFT-POINTING TRIANGLELETTER SMALL CAPITAL EQUAL TO OR LESS-THANER RIGHT CORNER ANGLEINVERTED GLOTTAL STOPDELIMITER TSHEG BSTARAKIA TELOUS ICHIMATOSDOUBLE LEFT TURNSTILEEFT OPEN BOX OPERATORMIDDLE RING LITTLE ONQUADRANT CIRCULAR ARCEFT HORIZONTAL SECANTWITH INVERTED V ABOVEABOVE SHORT DOWN TACK AND SLANTED PARALLELDOWNWARDS ARROW ABOVEVERTICAL LINE OVERLAYXTRA SHORT VOWEL MARKBUT NOT EQUIVALENT TOGRUENT WITH DOT ABOVESH AMPERSAND ORNAMENTARYSTIAN FIVE HUNDREDND TELEPHONE RECEIVERARKENING OF THE LIGHTHALF TRIANGULAR COLONARD SHELL FLOPPY DISKVERY HEAVY BARB ARROWGHT OPEN BOX OPERATOR WITH VERTICAL STROKENTISTRY SYMBOL LIGHT HAND INTERIOR PRODUCTHOCKEY STICK AND PUCKGRAMMOS OKTO DODEKATA WITH SHORT RIGHT LEGTILDE OPERATOR ABOVE TOUCHING INSIDE MOUTHWITH FOUR DOTS ABOVELEFT-TO-RIGHT SECANTNIS RACQUET AND BALLARXIS KAI FTHORA VOUSINGLE DOT TONE MARKINVERSE WHITE CIRCLEINDEX RING LITTLE ONYIG MGO PHUR SHAD MASCRIPTION CHARACTER 79 OVER LAK-079 GUNUIRCLES HITTING WALL WARE-FUNCTION SYMBOLINVERTED CANDRABINDUE POINTED WHITE STARMULTIPLE PUNCTUATIONL FUNCTIONAL SYMBOL WET CULTIVATION SIGNANGE ANTIRESTRICTIONSTAR WITH MIDDLE DOTWORD REPETITION MARKAND SOUTH WEST ARROWAND SOUTH EAST ARROWAND NORTH WEST ARROWA- SHOG GI MGO RGYANAND NORTH EAST ARROWKHAMTI REDUPLICATIONSIDEWAYS NOON GHUNNAINSIDE MOUTH RELAXEDLASHING SWEAT SYMBOLLATALIZED HOOK BELOWINING OBLIQUE STROKEJUDEO-SPANISH VARIKAWITH SOROCHYA NOZHKASEPARATOR MIDDLE DOTLE WITH POPPING CORKSEPARATOR KEY SYMBOLLEFT AND LOWER RIGHTHIGH RATHA OR LOW PAHIGH TONE APOSTROPHERIGHT-POINTING ANGLERIGHT U-SHAPED ARROWOTLESS J WITH STROKEUBHAANAHU WA TAAALAABSET OF NOR EQUAL TOTHROUGH SMALL CIRCLEENARMONIOS ANTIFONIAHORIZONTAL BAR WITH RIGHT QUADRANT BLACKEVERSED ROTATED RANAEMESTVENNY ZADERZHKADOTLESS HEAD OF KHAHDOUBLE ANGLE BRACKETREAN STANDARD SYMBOLDOUBLE DOT TONE MARK BEGIN LOGOGRAM MARKHREE-DOT NUKTA ABOVEDOWN ARROWHEAD BELOWYRENAIC TWO DRACHMASCRESCENT MOON SYMBOLFOUR RAISED KNUCKLESCONSONANT SIGN HAARUPLUS GISH TIMES TAK4TRANSPOSITION MARKERGHTWARDS ARROW BELOWFORMS LIGHT VERTICALCHEMICAL SYMBOL FOR POTABLE WATER SYMBOL OVER TUR ZA OVER ZAGRA GCAN -CHAR RTAGSCHARACTER INTRODUCER WITH HORIZONTAL BARFIVE SPOKED ASTERISK OVER LAGAR GUNU SHEOVER LEFTWARDS ARROWCENTRE VERTICAL LINEFINAL CONSONANT MARKCURRENCY SYMBOL RIELCURVED ANGLE BRACKETHALF CIRCLE WITH DOTHAR2 TIMES GAL PLUS UP-POINTING TRIANGLERIGHT ANGLE WITH DOT ABOVE LEFT TRIANGLEE CONSONANT MODIFIERREVERSED ONE HUNDREDONCAVE-SIDED DIAMONDVAL WITH OVAL INSIDEIMAGE OF OR EQUAL TOONE MARK SGAW KAREN RUMAI PALAUNG TONE-5 AND DIAGONAL STROKEBETWEEN PALM FACINGSALTERNATE LAKH MARKSYMBOL FOR BEGINNERNETWORKED COMPUTERSVASTNESS OR WASTINGOVER E NUN OVER NUNSEVEN EIGHTHS BLOCKIMIDIA SEXTULA SIGNPREFIXED NASAL SIGNHURISAZ THURS THORNNE HUNDRED TWENTY PTO LOWER RIGHT FILLSH PLUS HU PLUS ASHNDRED POINTS SYMBOLFIVE FINGERS SPREADRROW NO-BREAK SPACED CIRCUMFLEX ACCENTEVEN POWERS OF FOURARENTHESIS NOTEHEADLEFT TO LOWER RIGHTLEFT POINTING INDEXQUADRUPLE CRESCENTSHEAD-SHAPED POINTERHAND COVERING MOUTHARABIC FORM SHAPINGDOWN AND HORIZONTALTWENTY-FIVE DEGREESTURNED SECTION MARKSEQUENCE INTRODUCERTURNED PADA PISELEHLEADING MCHAN RTAGSGAPPED CIRCLE ARROWTRANNO MALO POVYSHEVARIANT FORM ILIMMUTHANG LONG ANUSVARAPARAGRAPH SEPARATORCIRCLED SANS-SERIF IN CHEN SPUNGS SHADCIRCLED WHITE ARROWMOVES AGAINST CHEEKWOMEN HOLDING HANDSRY CULTIVATION SIGNLANTED EQUAL ABOVE MSHELL MOBILE PHONEFT-POINTING FLEURONA END LOGOGRAM MARKDOWN POINTING INDEXNAXIAN FIVE HUNDREDOW-9 QUOTATION MARKVARIATION INDICATORVARIANT WITH SQUARESLANTED NORTH ARROWANSPOSITION BRACKETANS-SERIF CAPITAL LILDING CONSTRUCTIONFLOORPLANE TWISTINGSTRATIAN FIFTY MNASSTRAIGHT THUMB BENTWITH YEH FINAL FORMGIBBOUS MOON SYMBOLKULL AND CROSSBONESREE-QUARTER CIRCLE RIGHT TO LOWER LEFTRAILING MCHAN RTAGSUBLE DOT WITHIN DOTOTATED ARDHAVISARGAING SHIRT WITH SASHVERSE FINAL BARLINEAHU ALAYHI WA-AALIHLF MADDA OVER MADDA AND PROSGEGRAMMENI WITH STRIKETHROUGHLUB-SPOKED ASTERISK IN A RECTANGLE BOXTIGHTLY-CLOSED EYESDENOMINATOR SIXTEENARTIAL DIFFERENTIALNORTH ARROW WITH HORIGHT MIDDLE STROKEBETWEEN MIDDLE RINGTART OF RUB EL HIZBOP SEMICIRCLE ARROWHORT STROKE OVERLAYINSIDE CIRCLE BELOWRATUM SUPER STRATUMIGATURE AYIN-DALETH LOVE YOU HAND SIGNATED TELLER MACHINE FLUTTERING IN WIND WITH VERTICAL TAIL AND RETROFLEX HOOKVERSAL INTERSECTIONISPUTED END OF AYAHUP HORIZONTAL HEAVYC DIGRAPH WITH CURLQUESTION MARK ABOVEUP HORIZONTAL LIGHTNOGRAPHIC FULL STOPITED LIABILITY SIGNET WITH WHITE CROSSVERTICAL TABULATIONURRENCY SYMBOL BAHTLEFT U-SHAPED ARROW KASKAL U GUNU DISHLOWER MIDDLE RIGHTCTLY EQUIVALENT TOSMALL RED TRIANGLE FOR SIMALUNGUN SAFORTY-FIVE DEGREESSOUL ISOLATED FORMLEFT MIDDLE STROKE AND SMASH PRODUCTQUARTER NOTE STEM TYPE A ELECTRONICSEVERSED CHELYUSTKA AND YPOGEGRAMMENICOPPER ANTIMONIATEUPPER MIDDLE RIGHTEVENTEEN FULL STOPCONTINUING OVERLAPLOSED CIRCLE ARROWBAARAKA WA-TAAALAACUP WITHOUT HANDLEDOUBLE PUNCTUATIONEAST POINTING LEAF AND NO DOTS ABOVESINGLE PUNCTUATIONERTICAL BAR VIRAMASMALL CIRCLE ABOVE OVER INVERTED SHUFIVE EIGHTHS BLOCKWEST POINTING LEAFWHITE VERTICAL BAREPIGRAPHIC LETTER FORKED PARAGRAPHOSPUNCTUATION BINDU UP ARROWHEAD BELOWABBREVIATION MARK DOWN-OUTPUT SYMBOLENTY-TWO POINT TWOENTERING TONE MARKU-SHAPED ORNAMENTSWITH STROKE SYMBOLMATHEMATICAL SPACE NOT LITTER SYMBOLUM WITH DRUMSTICKSLEFT-STEM TONE BARWITH JUSTIFICATIONHILOSOPHERS SULFURCANTILLATION SIGN VERY SMALL DIAMONDSYMMETRIC SWAPPINGHAIS LUS NTOG NTOGS PRESSED TOGETHERSEPTUPLE CRESCENTSNORMAL SUBGROUP OFARROW SHAFT WIDTH TO LOWER LEFT FILL WITH KAVYKA ABOVEJEEM ISOLATED FORMSET OVER BUILDINGSOU ALAYHE WASALLAMS INSIDE AND ABOVEOTLESS DALATH RISHIGATURE ZAYIN-YODHIRROR HORIZONTALLYKANTAJA NAASIKYAYAOUCHTONE TELEPHONE WITH FLOWING SANDBOTTOM RIGHT KASRAATIN SMALL LETTER HORIZONTALLY BELOWTILTING FROM WAISTORK ON THE DECAYEDNITE PART INTEGRALNISH VERSE DIVIDER THUMB INDEX THUMBITAN SMALL SCRIPT  WITH CROSSED-TAILHOUSANDS SEPARATOR WITH CIRCLE BELOW WITH CIRCLE ABOVEHUNDREDS UNIT MARKNINETEEN FULL STOPIX SPOKED ASTERISKINDEPENDENT VOWEL KOREAN CHARACTER OPACING CANDRABINDU SPREAD THUMB SIDEGGLY VERTICAL LINEBASELINE ROUND DOTASTED SWEET POTATOGATIVE ACKNOWLEDGEGISH CROSSING GISHTROFLEX HOOK BELOWRYUKOVAYA SVETLAYAATERRESTRIAL ALIENPERFIXED LETTER RAVARIANT FORM LIMMUYLLABLE LENGTHENERASTROLOGICAL SIGN IGSAW PUZZLE PIECEIN POSSESSION SIGNOW TONE APOSTROPHEYPTIAN HIEROGLYPH KBAR ISOLATED FORMHOLDING BACK TEARSAND LOW RIGHT RINGRIST CIRCLE FRONT NYET THYOOM TA-ROLUTLINED BLACK STARSHAN REDUPLICATIONTOP U-SHAPED ARROWNYOOGA NAAKSIKYAYAAEUM ONE PLETHRONBRACKET EXTENSIONEMICOLON UNDERBARVERAGE WITH SLASHHORIZONTAL SINGLEHORIZONTAL DOUBLETERSYLLABIC TSHEGRIATION SELECTOR-VARIANT FORM ASH9A PLUS HA PLUS DAVARIANT FORM IMINVARIANT FORM USSUEAR SCREEN SYMBOLINEAR ANNOTATION TEN THOUSAND SIGNBE WITH MERIDIANSIGHTEEN FULL STOPING POLE AND FISHABBREVIATION SIGNATHERING TOGETHERBERBER ACADEMY YAULAR MEDIUM SHADEVEE WITH UNDERBARINITIAL LETTER RAAUKAZ LAGU LOGR LIDEOGRAPHIC COMMAICTED LEFT ENTRY-IASTRE MARK ABOVEBOTTOM HALF BLACKTARTING FROM SIGNGENERIC MATERIALSCTION APPLICATIONAPLI DYO DODEKATAGREATER-THAN SIGNFINGER-POST ARROWLD PERMIC LETTER ALTERNATE NUMBER GREATER-THAN NOR CROSS PUNCTUATIONKE BOTTLE AND CUPAMBDA WITH STROKEFLICK ALTERNATINGVOCALIZATION MARKKHAH INITIAL FORMSTRAIGHT MOVEMENTCIRCLES WITH DOTSCONTOURED OUTLINEAMPHYLIAN DIGAMMALAPPING LESS-THANCONTINUATION SIGNCLOSED LITTLE YUSTRIPLE DASH ARROWCONSONANT SIGN PALAH ISOLATED FORMLAGOLITIC LETTER COMBINING NUMBER AND BLACK SQUARESFRACTION ONE HALFURNED DAMMA BELOWBRIGHTNESS SYMBOLASTERN PWO KAREN TAN ISOLATED FORMTHREE SOUND WAVESLIAN HIEROGLYPH ALHOUETTE OF JAPANTIAL ARTS UNIFORMHIRTEEN FULL STOPDENTAL PERCUSSIVEBUT RELIEVED FACEDELPHIC FIVE MNASUP AND HORIZONTALFROM SMALL CIRCLEINVERTED MCHU CANVRE TOURNOIS SIGNURNED COMMA ABOVECAL SYMBOL BOTTOMCANCELLATION MARKUP POINTING INDEXHEART-SHAPED EYESCANDRABINDU ABOVEVERY SMALL SQUAREFACING BABY CHICKSQUARED TIMES KURHAH ISOLATED FORMTONAL RANGE MARK MANENT PAPER SIGNY ON BLACK SQUAREREATIONAL VEHICLE LAGAB TIMES ASH2 LAGAR OVER LAGAR TO BLACK DIAMONDWITH NOT EQUAL TOMILITARY AIRPLANEQUAT REVERSED ESHMEEM INITIAL FORM WITH BULLET NOSE OVER ZU PLUS SARMALL WHITE CIRCLEYEH ISOLATED FORMONE EIGHTH BLOCK-0 WHEELED CHARIOT GRAVEYARD SYMBOLPINWHEEL ASTERISKRYBLION BASE SIGNRIGHT HALF CIRCLEOURTEEN FULL STOPNE EYEBROW RAISEDNEGATIVE CIRCLED MEDIUM BARB ARROW PLUS SHA3 PLUS AOWER NUMERAL SIGNWO VERTICAL DOTS NAUDIZ NYD NAUD NSIGN O WITH CROSSPRIZNAK MODIFIER NFORMATION SOURCE ALTERNATION MARKS REVOLVING LIGHT-HEIGHT LEFT HOOKSERVER EYE SYMBOL WITH TILDE ABOVEPRESSIONLESS FACEPUNCTUATION SIGN  WITH SOUND WAVESOPEN-HEADED ARROW-GAAHLAA TTUDDAAGPRECEDING SOLIDUS AND PALATAL HOOKNASALIZATION MARKWHITE PARENTHESISWHITE SHOGI PIECENG STROKE OVERLAYPLACEHOLDER MARKFLOORPLANE SPACESTRING FRETBOARDINDEPENDENT SHINFFERENCE BETWEENUPPER OVER LOWERVARIANT FORM ESHRIZONTAL ELLIPSEMIDDLE AND BELOWSTICKING OUT FARMIDDLE AND RIGHTMESTVENNY KLYUCHCOMPRESSED ARROWRISING TONE MARKFALLING DIAGONALPRECHGESANG STEMCREAMING IN FEARINES CONVERGING POSTPOSITION MENOLD TAMIL VIRAMAWITH CENTRED DOTPRECEDING SUBSETCORNER LEFTWARDSCORNER DOWNWARDSB2 TENU PLUS TABINDEX THUMB SIDESTRAIGHT STRETCHOLD WHITE CIRCLE OR THE IMAGE OF PLUS KAK PLUS ANAL DIGIT SHAPESYIR MKPARAQ MEUNPLE MEASURE RESTCONSONANT JOINERHMATULLAH ALAYHECASIAN ALBANIAN IFTEEN FULL STOP WITH BUNNY EARSSHU2 PLUS KASKALLD ASSYRIAN ONE  WITH DOT INSIDEIDED GREEK CROSS WITH HEADSTROKEHIGH SPACING DOTHOLDING TOGETHERHYPHENATION MARKANABAZAR SQUARE BOTTOM HALF RINGORIZONTAL JOINERBOLD GREEK CROSSSTERISK OPERATORPEN CENTRE CROSSVOWEL LENGTHENERWITH HAMZA ABOVEWITH HEARING AIDIMENSIONAL ANGLE SMALL ROTATIONSTRIPLE CRESCENTSLEFT HALF CIRCLEWITH LEFT UPTURN TIMES DISH TENUCH WITH UMBRELLALEFT ARROW ABOVEIGHTH NOTE STEM  TIMES GAN2 TENUTAKANA-HIRAGANA DOTTED CRESCENTSSMALL NOON ABOVESMALL CAPITAL ELRIGHT HALF BLACKUDLY CRYING FACENTAIGANA LETTER IRCLE X NOTEHEADRAYS AND DOTTED DITORIAL CORONIS AND LIGHT RIGHTEN MILLIONS SIGNIPPER-MOUTH FACE AND HEAVY RIGHTECIMAL SEPARATORWAVY HAMZA BELOWSANS-SERIF ARROWEND OF TEXT MARKRAIDO RAD REID RSTUCK-OUT TONGUEDVUMYA ZAPYATYMIRIGHT DOWN BARB LTERNATE HASANTADOWN RIGHT BARB EFORE COMPLETIONDOUBLE ZAPYATAYADOUBLE TURNSTILEREPETITION MARK-RECORD SEPARATOR CAPPED MOUNTAINISTOS DISC SIGN ULDERED OPEN BOXRESH-AYIN-DALETHIVE POINTED STARDOUBLE HEAD MARKDOUBLE DOT ABOVELOWER OVER UPPERDOUBLE CRESCENTSSITION INDICATORK PERMITTED HERERIGHT HALF BELOWVERY HEAVY SHAFTARENTHESES ABOVEO-MINOAN SIGN CM LIGHT MOON ARTAENTRE WHITE STARUP MIDDLE HINGEDQUALS SIGN BELOWUP-OUTPUT SYMBOLEVERSED VISARGA AFFRICATION MARKEVERY OTHER TIMESERIFS AT BOTTOMVIEWING CEREMONYSIGN RISING TONEWALLED ENCLOSURELIGHT BARB ARROWLIGHT AND RIGHT E PLUS GAN2 TENUUPERSCRIPT ALAPHQ WITH HOOK TAILMAGNIFYING GLASSENUMERATION SIGNUBJOINED LETTER ADIAN SYLLABICS DEWAYS U BRACKETUMBER SIGN ABOVEEPSILON UNDERBARYATHOS BASE SIGN INSERTION POINTERCURY SUBLIMATER PLUS GAN2 TENUNION WITH SERIFSSLANTED EQUAL TOLLOW PAN OF FOODBINDING BRACKETITH FINGERNAILSBAR ABOVE UNIONIDING ENCLOSURE-PIECE SWIMSUITNJOINING MACRONVERTICAL SECANTORIZONTAL COLONUSTER NOTEHEAD BLOCK DIAGONAL -NO-EVIL MONKEYTHREE DISH TENUIAMOND UNDERBARXTEEN FULL STOPINUS SIGN BELOWATA LINK ESCAPEINVERTED LAZY SNVERTED UBADAMA2 CHARIOT FRAMESALTER PAHLAVI OLIDUS OPERATORON TOP OF MODEMATINATE MYSLITEODIFIER DAMAGEDS ELEVATUS MARKS IN SILHOUETTEODO SOFT HYPHENING SYMBOL FOR OGOGRAM KHAMTI INGLE HEAD MARKNOT APPROXIMATEBENT OVER INDEXBELOW LONG DASHNOON FINAL FORMONTOUR INTEGRALBELGTHOR SYMBOLNOON WITH KASRAONJOINED HINGEDNO GOOD GESTUREIGN PALI VIRAMATAI LAING TONE-IZED WHEELCHAIRIRCUMFLEX BELOWOND PLACE MEDALIMISEOS CHRONOUIMPERFECTA RESTINVERTED STROKEYNCHRONOUS IDLERIGHT RERENGGANESIDE LESS-THANR WITH FISHHOOKERICAN FOOTBALLDESCENDING TONEDI ALLAHOU ANHUDIALYTIKA TONOSESSARON CHRONONUBLE RING BELOWDIGA AELA-PILLARIGHT HALF RINGDOING CARTWHEELEH INITIAL FORMRIGHTWARDS TICKPRISHTHAMATRA EPUT SYMBOL FOR TVIMADUR SYMBOLZERO WITH SLASH NEPOSTOYANNAYAEXPONENT SYMBOL DEYTEROU ICHOUQUADRUPLE ARROWQUADRUPLE DASH DAGESH OR MAPIQTWO WITH STROKEETIC VERSE SIGNRIGHTWARDS AND U PLUS U PLUS UULTIPLICATION XDOWNWARDS TREND AND LOWER LEFTREVERSE SOLIDUS AND BOTTOM ENDREVERSED OPEN EUMAI PALAUNG FAE ISOLATED FORME MUSICAL NOTES ALTERNATE FORME OVER INFINITYDOWN SEQUENTIALUGMENTATION DOTDOUBLE TRIANGLERECITATIVE MARKRECEPTIVE EARTHREAMY EYEBROWS  CLOUD AND RAINEFT REPEAT SIGNEFTWARDS ARROWS CORNER BRACKETHAKING PARALLELHEH MEDIAL FORM WITH DESCENDERTIP ON THE LEFTCAPITAL LETTERSHALF FILL SPACE TOUCHING INDEX WITH DIAERESIS TIMES IGI GUNUGROUP SEPARATORUR POINTED STAR THUMB STRAIGHT THROUGH CIRCLETHROWING A KISSHOUSAND STATERS-CARRIER LETTERORT EQUALS SIGNHORIZONTAL FILLBREAKING HYPHENHORIZONTAL DASHBROWS STRAIGHT OW-FALLING TONEHOOKED INDEX UP WITH RIGHT LEGOUBLE BACKSLASHTILDE DIAERESIS PLUS HI PLUS AFTER COMPLETIONFRACTION DIGIT FOUR ENCLOSURESFOUR DOTS WITH PERTHO PEORTH PPLUS SIGN BELOWFORWARD TILTING PARESTIGMENON CORNER WITH DOT OVER SIG4 SHU2FIVE-LIKE BHALE OVER MOUNTAINSHREE DOTS BELOWCLOSED BY CURVETRIANGULAR MARKRMAN PENNY SIGNPENSION RAILWAYPEN SQUARED DOTCKET CALCULATORRNAMENT STROKE-CIRCUIT-OUTPUT GEMINATION MARKGGLY LINE BELOWGHT REPEAT SIGNOWER HALF BLACKTOP RIGHT FATHAZAIN FINAL FORMVOWEL SHORTENERSTROKE NOT SIGNALMOST EQUAL TOACHES THE LIMITALIF LENGTHENERLEFT DOWN BARB ND OF PARAGRAPHLEFT HALF BELOWLEFT HAND INDEXVOWEL SEPARATORALAYHE ASSALLAMWITH RAIN DROPSMIDDLE DIAGONALWITH DOWN ARROWWHITE DOT RIGHTLETTER CAPITAL LOSED INSULAR GLEVEL TONE MARKLEVEN FULL STOPAI LAING DIGIT SSICAL BUILDINGNA DOUBLE HELIXSTERESIS SYMBOLN-ARY SUMMATIONAND PARALLEL TOSHITA PLUS GISHMURDA MAHAPRANAKTOVIK NUMERAL ST SYRIAC CROSSST QUARTER MOONLEFT HALF BLACKSHORT OVER LONGAMOUNT OF CHECKKISIM5 TIMES BISIXTEENTH NOTESNASALIZED TONE-LATION FUNCTIONAMARITAN SOURCEMARRYING MAIDENLD TAMIL SHORT LONG VOWEL SIGNLOOK OF TRIUMPHWALLPLANE SPACELMOST EQUAL TO MEEM FINAL FORMMALAKON CHROMA LONG HOOK BELOWLIGHT AND LEFT HIRD-STAGE HLIENDED MULTIMAPSMALL LETTER DOT TILDE ABOVETHREE POINTED MOTHETIC ABOVEOSITION SYMBOLAMNUC PII KUUHENNA WITH BARSTIMES OPERATOROUR OBOLS SIGNERTICAL JOINERSQUIGGLE ARROW WITH BACK YERLOWER DIAGONALMEDIUM DIAMONDTIMES SHU TENUERIAL ARAMAIC HESIVE BANDAGEERIC INDICATORREATIVE HEAVEN WITH LONG LEG-CURRENCY SIGNOTHERS CIRCLEDSMALL LETTER JDIAGONAL PATH THALAN ETHEL OTHAKA ANUDATTAEPENTHETIC YUTOOTNOTE MARKERTETARTOS ICHOSDEYTEROS ICHOSDIAGONAL MOUTHSHESHIG TIMES UNIT SEPARATORLACE OF SAJDAHBHATTIPROLU AAIGHTWARDS VANEUNION OPERATORTERMINAL MARK-IKHAYA PUTNAYATELPIECE CLOCKYOUTHFUL FOLLYONE SOUND WAVEDI ALLAAHU ANH HASER FOR VAVTHOUSANDS MARKOUSING THUNDERMRACHNOTIKHAYAUSPENSION MARKHREE-LEGGED TEUBHAYATO MUKHADOUBLE-STRUCK THOUSANDS SIGNORANGE DIAMONDBLADE SCISSORSBLACK TRIANGLEOPPOSING PIRIGTHER CHRISTMASREE-LINE STAFFRIGHT CROSSBARREH FINAL FORMAND COLD SWEATD-UP NEWSPAPERLETTER OVERLAPEMIVOWEL SIGN TWO ENCLOSURESDIRECTION FLIPFORWARD INDEX LESS-THAN NOR PLITTING APARTPPED MIDDLE UPPLETE INFINITYPLE WITH HEARTLEFTWARDS TICKMID-LEVEL TONEWITH DOT BELOWAFETY SCISSORSVRON SNOWFLAKEUP RIGHT BARB LEFTWARDS AND UNDER RELATIONFFICE BUILDINGEXTENDED BHALERING MEGAPHONETWO DOT LEADERUPPED INDEX UPSPEECH BUBBLESFATHATAN ABOVETURKIC LETTER FFED FLATBREADPROTECTED AREAAI LENGTH MARKFINAL ANUSVARALEVEN TWELFTHSLIGHTLY SMALL EXCLAMATION OHDIO MICROPHONELINE EXTENSIONCRIFICIAL WINEMENSION ORIGINCEPTER OF JOVEDASIA PNEUMATAQUINARIUS SIGNVONIC ASTERISKSMOKING SYMBOLRD PLACE MEDALCERTAINTY SIGNOVER GUD LUGALTOP HALF BLACKWITH LEFT HOOKCENTURIAL SIGNGUNU TIMES ASHGYPTOLOGICAL AROSS ON SHIELDEND OF SECTION CROSSING ESH2ALLAJALALOUHOUSIDE-DOWN FACEUAL WHEELCHAIRCOLON OPERATORUND MARK ABOVETWO WHITE DOTSWITH FATHATAN PEN MARK BELOWLITTLE SECTIONTRIANGLE WITH DOES NOT EXISTPARTMENT STOREZAH WITH MEEM PARATED SYMBOLLOTUS POSITIONGERED TREMOLO-TRANSMIT STATEPAO KAREN TONESMALL TRIANGLEGHT WITH STARSZAKAYA LANTERNSEPARATOR MARKALF TREE TRUNKREVERSED-SCHWAIRCULAR VIRAMAANGLE OPENING SHAN MEDIAL WAED SYMBOL FOR ISSION TICKETSIVE OBOLS SIGNSEL LOCOMOTIVEXO EKFONITIKONNORTH ARABIAN DUN3 GUNU GUNUOBLIQUE HYPHENVERTICAL COLONIWAZ TIR TYR TSECOND SUBUNITSURROUND FROM VERTICAL LIGHT1 OVER LAK-081VERTICAL HEAVYAROUND-PROFILEJOINED SQUARESING HANDS SIGNINOLOGICAL DOTINSERTION SIGNISED ROUND DOT AND DIAERESISIVE KEY SYMBOLINFINITY BELOWVERTICAL ABOVEOLD RESOLUTIONAU LENGTH MARKVENIENCE STOREITA PLUS GISH WORD SEPARATORBAG MEMBERSHIPINVERTED BIRGASTRONG ISOLATEINVERTED DAMMANYI ZLA NAA DAHINESE TONE YAUDATE CHRIVIWITH INTEGRAL WITH JEGOGANMARKS CHAPTERDOUBLE MUCAADSIGN AVAGRAHA WITH OVERBARUPWARDS TRENDLEFT CROSSBARVERGREEN TREEDOUBLE HYPHENHIEROGLYPHIC VEN POINT ONEMODIFIER MARKNUMERATOR ONETOP HALF RINGSSAGE WAITINGPLUS OPERATORCHRYSANTHEMUMARRED TRIDENTURNED W BELOW WITH INK PEN OF THE HORNSWITH ASTERISKBY DEFINITIONDOUBLE STROKEVERTICAL FILLCHECKER BOARDMESSENIAN TENLATERAL CLICKUPERIMPOSED XSIGN PAMUDPODFOREMENTIONEDOGOTYPE SIGN VERLAY MIDDLEITING THROUGH WITHOUT SNOWINVERTED TURNDIAERESIZED UEHU FEOH FE F DIRECTIONAL SAMYOK SANNYASMALL LETTERSK WORK SYMBOLUFFLE PRODUCTOTEHEAD BLACKUPONDIUS SIGNINVERTED FORKS KAI APOTHESS KRYZHEM ON VERTICAL BARSWAW-AYIN-RESH WITH TEE TOP BZHI MIG CAN TIMES KASKALGYA GRAM SHADHAM DIGIT ONEISH LIRA SIGNCROSSING MUSHEAVENLY EARTHMINUS SIMILARPAIRED ARROWS VARIANT FORMALL LOST SIGNPREPONDERANCEMINUS WHITE XGTER TSHEG MAFINAL SEMKATHTIRTA TUMETESMINDER RIBBONSAL PLUS TUG2OUT MIDDLE UPH-TYPE SYMBOLGIFT ENVELOPEDOTTED ZLAMA EMPHATIC TONEPPOSING LUGALCROSSING GABAYUUKALEAPINTU CROSSING KA2HAKASSIAN CHECROSSING GAN2OURTH SUBUNITPA NJI PIPAEMOBLIQUE LINE APPED PRESENTRIPLE SVARITACULATED LORRYKAPYEOUNPIEUPMOBILE PHONESMASORA CIRCLEINTEREST SIGNCRIPTION TAKEFIXED-FORM RAHERICAL ANGLENUMERIC SIGN RANKS CASKET DOUBLE CIRCLEFINAL LETTER S UP TOGETHERROTATED BIRGALVE FULL STOPVICE CONTROL ACCOMMODATIONW RING INSIDE OPPOSING KUR DIMINUTION-1TU WAS-SALAAMFICATION CARDARROW OVERLAYSIA-AUSTRALIACRIPTIONAL PARTABLE STEREOZHOU NUMERAL OLVING HEARTSUDDISA SIRRAHNTY FULL STOPIFI ROHINGYA OMAN NUMERAL FT ARROWHEAD AR WITH QUILLSTERTIUS SIGNOON NOTEHEAD NING MOVEMENTLOCATION SIGNSELECTED AREALVEOLAR CLICKSHESH PLUS KI-OFF CALENDARED PAPERCLIPSU WITH STROKECITATION MARKIOT SYLLABLE ARGOSYNTHETONGAW KAREN SHAIVE SLOW SIGNIGHT TWELFTHSIDE LOST SIGNERTION SYMBOLFROWNING FACEGAR FRACTION -OR-PLUS SIGN-PER-EM SPACERN PENTATHLONUPSILON WITH FULL SURROUNDEDIC ANUSVARAL-TYPE SYMBOLILE SEPARATORNG TERMINATOR AND SKI BOOTIMAGE BRACKETYOD YOD PATAHWO-LINE STAFFTED HAND SIGNLOSING SPIRALONAL COMPUTER HEADED ARROWRIZONTAL TAILBALL AND HOOPTROFLEX CLICKEELING PERSONER BOARD FILLRACKETS ABOVE AND YEN SIGNIRCLED INDEX YMBOL TAU RHOLOCK WITH KEYONGRATULATIONVOWEL SIGN PAVE-LINE STAFFONG-LEGGED DERIGHT HARPOONARCHAIC KOPPANINE TWELFTHSSYNDESMOS NEOONG RIGHT LEGILABIAL CLICKBASAN LETTER MELODIC QITSAEVERSED DAMMASILI PNEUMATAARLAUG SYMBOLEUROPE-AFRICAQUARTERS SIGNMAILBOX WITH BOWING DEEPLYED DOUBLE VERTE ORDER MARKANNED LEATHERLEGETOS ICHOSBOTTOM CORNERDVOECHELNAYA USHING UPWARDAMUHU ALAYNAAMALO POVYSHE USICAL LEIMMAAWELLEMET YAZAN RUPEE SIGN-ESASA DOTTEDHREE TWELFTHSBOHAIRIC KHEICIRCLE INSIDEDIC MARK SIGNOPPOSING NAGAWAVY LOW LINEMALL LETTER Z B BAR SYMBOLSTABLE SYMBOLI WITH STROKEUE OF LIBERTYMULTIOCULAR OMEDIUM SQUARERRIAGE RETURNTHIRD SUBUNITLISION SYMBOLIVE POINT ONERPENTRY PLANEWAVY OVERLINEJES SU NGA RO BAT AND BALLNAP PIZZICATOENT ARROW POIRTY-SECOND EMELY HEAVY FOLDED HANDSEMISOFT SIGNFORMING ARTSMIDDLE PIECELER CONSTANTUBSCRIPT TWOPOETRY MARK-FOUNTAIN PENNOTCHED HOOKVICTORY HANDKANA REPEAT FT RERENGGANPORT CONTROLRISTMAS TREESAZ IS ISS ISH ZIDA TENUSUR OVER SURNOTCHED TAIL LINE SYMBOLDE MARK SIGNAR DIAERESISLLE PATTERN MEDIUM SHAFTQUIRREL TAILSMALL TRIPLELL MODIFIER-DASHED ARROWDICTION SIGNETRETES SIGNNERSHIP SIGNLINKING MARKLINGING FIRENJALA GONDI QUARTER SIGNNEPOSTOYANNYNGLE BARLINEARALLELOGRAMRAFFIC LIGHTRIGHT SINGLERAH BEN YOMOMADDA ABOVE MEDARY CAMELENOS CHRONOUM NSHUT NYAMEVERING FACEDENTAL CLICK IN TRIANGLEXIRON KLASMASMILING FACEERPENDICULARIVE TWELFTHS KLYUCHEVAYADIGRAPH YORIRIAGE SYMBOLPROTOS ICHOSCROSSING NUNCROSSING LU2CROSSING KALCROSSING GI4ACUTE ACCENT OVER KISIM5FERENCE MARK OVER MIDDLEUPPER CORNERFLAG ON POSTEAGULL BELOWCRESCENT BARPOUTING FACENORTHERN TSE OVER TWO PIMETA STAVROUSECTION SIGNQUARED ARROWENARIUS SIGNAFU LEERAEWAT MONGKEUAEQLIMBS DIGITSLICKING LIPSRANCHING OUTRING OVERLAY OF ANTIMONYRIAL TRAMWAYFALLING DOTSRION CHRONONDIGRAPH KOTOFEMININE DOT ON PEDESTALING HAND FANKHAMTI TONE-BRATION MODELARGE TRIPLEKHMIMIC KHEIOID NOTEHEADOING TO MEETING OPERATORING HITTING OK HAND SIGNLARGE DOUBLETHREE HEARTSOHAZARD SIGN-DZUD RTAGS MPHASIS MARKMPTY CENTRE HREE FINGERSING ENVELOPES ABOVE SIGNLAM WITH YEHREVERSE MARKKLYUCHEVAYA BLUE DIAMONDBLOWING FACENARROW SHAFTUN WITH RAYSALTERNATING SS-THAN SIGNHIBITED SIGNLAYING CARDS WITH INDEX INTEGRATION BYSMAL WATERWDATA SQUAREBUTTON MOUSEDUG TIMES NIOTTOM HALF OLOWERED FLAGMANNAZ MAN MTHODOX CROSSSHORT RIKRIKUSEATED FACEBSCRIPT ALEFOGOGRAM NYAJRIGHT DOUBLEMONOGRAPH UKBRIDGE ABOVE WITH UPTURNROUNDED ZEROLATALIZATIONN ELEMENT OF-SIMPLIFIED IGATURE SHRIUTH-SLAVEY KSHED BARLINEREN CROSSINGEEPING SMALLYMBOL BINDU AND OPERATORBACK OF HANDBEHIND CLOUDSMALL DOUBLEONISHED FACE-SHAPED SIGNTERNATE AYININ MIDDLE UPYOUTHFULNESS AND TOP ENDLU PLUS ESH2ANG KHANG GYON US SYMBOLILLED CIRCLEVAKRAHASANYAYOD TRIANGLE AND PICTURETEARS OF JOYBAHIRGOMUKHAHYPHEN-MINUSTE SEPARATOROQ NSHUT YUMBLACK CIRCLEUGHT BALLOONDOWN HARPOONTHIC LETTER THETA SYMBOLBINING MARK -MAIL SYMBOLOPPOSING LU2INDEX MIDDLEREFACE COLONMALL SECTIONDOWN NEUTRALOPLE HUGGINGOPENING LEFTAND CRESCENTIDENTICAL TOBETWEEN LIPSMUM TIMES PAUTH ARABIAN UH PLUS GISHDOT OPERATORRCHAIC SAMPI SKEWED LEFTLEFT HARPOONTRAGRAM FOR ROLLING EYESTOP-LIGHTED LUS NOTEHEADCHARACTER-1BCHARACTER-18WIGGLY FENCECHAIR SYMBOLOVER KASKAL GREEN DRAGONGROUND SLIDEVOLTAGE SIGNPHEME JOINERTRIPLE FLAMETRIPLE DANDALEFT-LIGHTEDIRAGANA HOKANDING PERSONKAPPA SYMBOLCK-O-LANTERNRNAM BCAD MAGAW KAREN EUOUCHES THUMBEIGHTH NOTESGBY FOOTBALLNUITY SYMBOLCIRCLES AND AA AS-SALAAMCIRCLED PLUSGEBA KAREN ICIAN LETTER OUR TWELFTHSS SUBPUNCTISHAND FORMAT CALENDAR PAD WITH DAGESHDOUBLE ARROWATNAH HAFUKHULL NOTEHEADALT PAN SIGNOUGHT BUBBLEACE INTEGRALHASIS SYMBOLDOUBLE ARCH LOWER CORNERVER EQUAL TOHEAD-BANDAGEATTOOED HEADNCK CONSTANT CROSSING GUINUSOID SIGNINVERTEBRATECABBAGE-TREECENDING NODEMBELLISHMENTGUARDED AREAYAN NUMERAL UME INTEGRALNATURAL SIGNHAH WITH DALLEADING EYESALLPOINT PEN6 LONG NGGOOWITH SMALL VMING TO MEETHALF BRACKETENG DIGRAPHEDICAL MASKRIGHT GUARDRIGHT HEAVYME LONG CANUISHED FACEZZA WA JALLLOSED ENTRYMACING FACEMED RGYINGSRESPONDS TOLOTI NAGRI SMALL CLOUDE2 TIMES ANLU PLUS IGIEEZING FACELTED FLOWERULO TWO SUMLT OF CLOTHMBLER GLASSRANSMISSIONLUPOVODNAYAUG RTAGS GYRIGHT LIGHTEAVER DENE MBA BAYANNARAISED FLAGLTERNATE AALTERNATE YALOSING MARKSINGLE AND RCHAIC JNYAUBLE TONGUEE WITH VEILUETTE BREADREAKTHROUGHEN STRAIGHTSHEQEL SIGNOPPOSING IMOPPOSING ENTHAM DIGIT MUNCIA SIGNIEN MONSTERTH-THALATHATETRAFONIASMUUSIKATOANONIAN SIGN N THE VERGETENS DIGIT IL FRAGMENTILCROW SIGNILIQUA SIGNL TIMES LALL OF THREADSTEAMY ROOMSTERED SIGNRUNNING MANHREE BALUDATIEE SHEUOQHITE DRAGONHLETIC SHOEHOKHLOM ON LATIN CROSSMONOCULAR OTHREE TIMESHORA DIGIT MOVED BELOWORT BARLINERPOON ABOVEORCE SYMBOLOR OPERATORTHIRDS SIGNI TIMES BADI TIMES NUNLACKLETTER LACK SULFURIBLE-CREE YJOYOUS LAKENUMBER ZERONUMBER SIGNIPLE TONGUENTIMONY OREIRCLED TEXTKAARA POLLUNSE CHEEKS ISIGOTHIC ZTA EQUAL TOSHAAYATHIYASECOND MARKSVASTI SIGNJIHVAMULIYANITIAL IZHEIVERY TRUCKJECT SYMBOLIX TWELFTHSSYURA SASAKNIKOLSBURG NG LEFT LEGSYMBOL VIDJIMULTANEOUSIN EQUAL TOOMAN SIYAQ KTIESELSKABRYVNIA SIGNINDERGARTENSTORIC SITEINDICESIMA OLD NUBIAN SSANGKIYEOKOHINGYA YEHOF MASHFAATOF ENVELOPENBLENDED UKNYIS -KHYILND ODD SIGNND OF PIECENUSVARA ONENUN HAFUKHALETION MARKPUT MORTUUMSPEED TRAINTUNE COOKIEFGHANI SIGNFINAL SIGMALEU SATANGAFIRE ENGINERIPLE PRIMEMFON PIPAEMPOST OFFICESPIRATED FAMICAL HEARTPODCHASHIEMRISING DOTSMIDDLE BENTFOURTH ROOTRITING HANDESH DIGRAPHENTHESIZED EORGIAN NARLON SKEWED EPIDAUREAN RADITIONAL RACHMA SIGNRA SOMPENG ERCENT SIGNRIGHT-HAND RIGHT-LIGHTPHNAEK MUANQUIQUADRATEQUERED FLAGETEI MAYEK SIMILE SIGNEUNJOMNDEUQTY THOUSANDLINE FILLERTWO FINGERSRING LIQUIDHAWH HMONG GSUM -KHYILGUISED FACEROSS ACCENTOUTHERN TSETONAL MARK HAGGAR YAZHLEEP SYMBOLLEAF CLOVERHANG KHUDAMOVERSTRUCK OUNDED FACELD SCRIPT XHEATED FACEHEAVEN MARKLD POLISH OHEELED SHOELCE TSA CANOUBLE DANDAHIGH STROKEOUBLE ACUTETIGHT ACUTETRUNCATED AMIDDLE HOOKPERISPOMENIGAP FILLER-LEFT SYMBOLLEFT SINGLEGAYANUKITTATRIAN CAMELGE AT NIGHTMIDDLE STEMPARAKALESMAGENTLE WINDTRESVETLAYATRESS SIGN GHAIN WITH TRAIGHT WAWROKUTASTI ARONTHISMATAROR-BARRED GRAMMA SIGNGRAVE-ACUTELEFT DOUBLEAILLESS PHIAESHAE NYAMCK SEXTANT--OFF SYMBOLBETA SYMBOL PLUS NUNUZ PLUS MASH2AGAZ DAEG D DECORATIONUTH CORNERSAGONAL SIGNUTING WHALEBELOW RIGHT-MINUS SIGNCOMBINATIONXAGRAM FOR VYKA ABOVE VA V CHELNUCOND SCREENCONTAIN AS DIATONON DI0 FOOTSTOOLBANK SYMBOLDOUBLE AND  WRIST FLEXUSHING HANDACKED COMMABOTTOM MARKACTIVE SIGNACUTE-GRAVECHING CHICKDOUBLE SHADDOUBLE RINGDOUBLE MARKVAMAGOMUKHAWASLA ABOVE-COPPER OREWO TWELFTHS PROPORTIONDONG TSHUGSBLACK ARROWDOLLAR SIGNDOACHASHMEEAESCULAPIUSARM SPIRAL  I ZAPYATOYVISARGA ONEASE TO THE YEORINHIEUH OF FORTUNECURVED BENDXTINGUISHER OF FLOWERSARPEGGIATO DE KIKAKUI ARMS RAISEDZERO THIRDSUPADHMANIYAARAM GONDI DASH SYMBOLDALETH-RESHCROSSING URVARYS ICHOSCREDIT SIGNXESTES SIGNVE OF PEACEAWNING FACECROSSING BUUNIT DIGIT CROSSING ENCROSSING IMZIGZAG LINECROSSING PIWING NEEDLEDESK PERSONUNJO WYNN WCTION MARK CTION MARK- OVER IDIM  OVER BULUGATION SPACEATION POINT3 LONG NGGOXI RADICAL AMUSED FACEATH PRODUCTDENT EMBLEM WITH PLATEWHITE JOKER UPPER HALF WITH JACKSCCUMULATIONDYO CHRONON AND MACRONCELANDIC-YRWINKING EYECAN RGYINGSWITH GARDEN6 LONG NGGEDUATION CAP WITH DASIACARET TILDE TIMES ESH2 WITH CARON WITH COMMA WITH MAPIQCH AND LAMPCE OF PIZZA WITH TRILL WITH TITLO5 LONG MBOOBREVE BELOWUMAN FIGUREBZHI -KHYIL S ZAPYATOY SHOE STILEURRENT SIGN TACK BELOWBUMPY ABOVE WITH FLASHWE PALAUNG OUT INDEX  TIMES SHEVERAGE BOXHAAPRAANA CURLED WAWION BOTTLEASTERISCUSTAMAN SIGNASPIRATIONCURLY HAIR1 LONG MBE1 PLASTICSTIMES SIGNING-SHIFT OLING FACEC WITH DOTGUA PI MAOTOP CORNEROLON EQUALINHERENT AOUR FIFTHS WITH BASEUR YIG MGOCROSS MARKPPOPOTAMUSBA SATANGACROPHONIC HERMOMETERATRICHISMAATTY WITH OUTHERN TAOUTER JOINVEL SLIDER OVER KAD5FFICULTIESROEZENIAN FINAL HETHPRALINEAR INITIAL RAAUTOMOBILEDA SATANGAUP NEUTRALUP OR DOWNEUTRAL YERTWO THIRDSTWO SHORTSSYLLABLE MAR ECLIPSEHAN DIGIT DA PLUS HAOANDAKHIATIXTHS DISHEVERSED PED WITH DOTT AND BOLTZH DIGRAPHNTITY MARKNTO SHRINEKAI SYMBOLKA SATANGAK2 PLUS BUNUMBER TENTYPE COLON2 LONG MBOHAMZA MARKJONG TILE ISMUTH ORERING THUMBITH DIGIT IT MBAAKETF SHE-GOATYEH BARREE OF DHARMAHEAVY BEATFAHRENHEITOF HYGIEIACY MESSAGERING ABOVED KEYBOARDCAPITAL ETTAIL GLASSTING HEARTURIPIGMENTTWENTIETHSCIRCLED CAGBAKURUNENICAL TAPERCISIVENESS WITH PLUS WITH RAINPEDAL MARK-LUE KARANTRETCHED C POVODNAYAI ARCHAION SCHROEDERBLACK FLAGGAS BZUNG OPEN SHELF WITH LOW IED SHRIMPGANDA MARK PLUS SHU2IDEOGRAPH IDDLE MARK WITH PAGETHAPASCAN GOLUBCHIK ICK FIGURETHDAY CAKEHREE ABOVE WITH TAILGHT LIFTERHOOK ABOVEBOLD SHAFTBSTRUCTIONROUNDED ERORTHERN TAOSSED SHEI WITH TICKBROKEN BAROSTAL MARKHOTIC HOOKUSEL HORSEGGRAVATIONOTING STARTRESS AND GGING FACEURVED OMETTHMIKON N ZAR AMULET WITH RINGTREFACTIONRKING FACEOROME SIGNHUNGARIAN BLUE HEART RESUPINUS RGYA GRAMGREE SLASHFORMATTING WITH BELTCHAD RTAGSUPPER HOOKCH BALLOONILE FOLDEROUND OMEGAROAD OMEGACOMPONENT-COMPONENT TEMPLATIONIKRON ISONZEIRO SIGNINDU BELOWAYER BEADSYMBOL AIVAINDEX BENTOMMA BELOWPOUND SIGNGIMEL-HETHON MEDIAL FOR RECORDRUPEE MARKPOLICE CARPASSIMBANG-SHAPED HAUR CORNERSPLUS ERIN2TRIPLE DOTTESE CROSSRSI SYMBOL WITH EGGSPLUS BELOWG MUNDARI UTH OR SPYIGATURE OECHECK MARKIGATING RAOP NKAARAEGAGE CLAIMRUDIMENTA FRONT WALLTERNATIVE FTOGGOS OUCOLATE BAROON LILITHOON SELENAUR HUNDREDBELOW LEFTPLUS NAGA AB2 TIMES ENS SYMBOLABATA TREELEFT HEAVYLTIC CROSSXED BICEPSLEFT GUARDUBLE DASH SHMIRI YEHENTHUSIASM5 PLASTICSRESH BELOWEDESTRIANSLEFT SERIFACE FILLERDIATONIKI LOWER HOOKLEFT-HAND LPAPRAANA ENETRATIONMOTORCYCLEALEF LAMEDALEF WITH EEKING EYEALENT SIGNLEFT LIGHTLTERNATE URAGGISMATASSANGARAEAED FINGERSED FIGURE-MONOGRAM BRIGHT SIGNMONOFONIASA PLUS KURNGUAGE TAGA PLUS IGISSANGPIEUP AND KNIFEUNKIA SIGNMADDA MARKSELINE ESHWITH STRAWWITH SPOONM STALLION3 PLASTICSNGLICANA WLE-DELAYEDALLY MARK  AND MOUSEA TANG LAILE LETTER MONTH SIGNMONOSPACE SS OF MILKWITH WINGSEONGCHIEUMN NGGEUAETRED DRAGONLINDRICITYLOGICAL ORLIMITATION4 PLASTICSLIGHT BULBELT BUCKLELIGHT BEATNDA PA NJILHAG RTAGSNAKE BELOWRECIPITATESMILO SIGNLLOW HEARTEIGHTIETHSAEDA-PILLASPACE MARKSHARP SIGNNANGMONTHOEICH STARKNASPIRATEDRDHACANDRALEK ATTAK SGOR RTAGS DRAWINGS SMALL TAH LENDED YUSDIGIT ZERORIGHT HOOKAKKHANGYAONDU TEMPLERCHAIC KHAWO SHORTS LGIZ EOLHXLONG FINALAILED BIRDDIRGA MUREW OR MODELLONG OVER LET SYMBOLLONG TSHEGADDA WITH DOUBLE BARADAK BINDIY AND RICEQUISH QUADRHO SYMBOLSTRAL SIGNU2 PLUS BAUMAN EARTHSE-CREE SKKRYZHEVAYAEARLY FORMEARTH MARKANGKHANKHUDED PERSONUAM TSHOOJRGE SQUAREMILLE SIGNSIXTEENTHSRGE CIRCLEANDHI MARK KABA TENU2 PLUS ASHETTA-PILLAMEEM ABOVEVIE CAMERAMEL SYMBOLU CIN HAU E PLUS SUMWING HEART2 PLASTICSSTRUCTION SBUB -CHALSCAN LINE-STROM SIGNME PLUS ENEQUIHOPPERUM ROTUNDAKINDI MVOP LATE FORMNOTE WITH ANGULAR TO7 PLASTICSUP HARPOONEBENSTIMMEWHOLE NOTE AND ARROWLACK JOKERUARDEDNESSMINO TILE VIOUS PAGEST-FEEDINGST PALETTEREVERSED ISIDEWAYS IWHITE HAIR AND BREVEWHITE FLAGMALL ALEPHLANE MERGEDUOUS TREEXHEEJ CEEV6 PLASTICSLA USED AS AND ACUTEZU OVER ZUR2 PLUS SUMHANCHOLLROTATION-CAPITAL QADMA GDANHWAZ EH EHINOCEROSMETOBELUSCAPITAL ISMALL YUSMBROIDERYCAPITAL DLOND HAIRURNED GANURUZ UR UWASH TAILHARACTERSHARD SIGNMAEMGBIEEOUTH WINDOUT MOUTHBING CANE-KHYUD PAWING STARIALECT-P MUKPHRENGBITE LIPSHIMA SIMAIA SYMBOLBKHASIAN I PLUS LI TIMES UDMRACHNAYAOW KAVYKAM HE-GOAT5 CYPERUS TIMES HAMALL RINGBOTH BENTOURA SIGNHI SYMBOL TROMIKONOVER GAN2HOT SASAKSIVE FACEACE NOTE OTAL SIGNLOWER DOT5 LONG JOTIMES PAPABOVE TO BRUL SHADTIMES NA2HEADSCARFURNED AYBLVIN SIGNURLY LOOPRPORATIONCANG TE-U-AMMONIACA PLUS NAORT-TWIG-ORTH WINDZ DIGRAPHLONG TIP ADEG ADEGBO BAIMAIWITH FACE5 BATHTUBBO GYFU GOVER MUSHHREE FOR HOOK MARKHIYYAALAACARTRIDGEMARK SHADMARK CIM STAL BALLTANDSTILLVISARGAYATAKHALLUSLACKFOOT OF STIMMEIRST MARKNING SIGNAS MEMBERVINE LEAFISEN-ISENTABE SIGNL ME HANDYEH WITH ANEROSIS ODIASTOLESTEBASKETKYO TOWEROKED HEADVOETOCHIESEMICOLONNIGGAHITANIGHT OF VOCALIC RINNYIIYHESSANGSIOSVELOPMENTNIHSHVASAOKOUFISMAOKED TAILNO TELEIAATTACHED LARGEMENTVER LUGALXHAUSTIONS DIGRAPHATHAMASATLAN SIGN VERLONG AANTHAKHATKING BOOTVEUAENGAMVIGINTILE2 GARMENTJERUSALEMNVERTED RANSKRIT SANTAYALANNSERT AT NUSVARAYAKEMPHRENGAOS ICHOSK GESTUREVICE MARKNTERPRISENTESSENCEKA- SHOG NTRACTIONKAMEYTSA YEH ABOVEOCCLUSIONANG CITI ANGGEUAETKU RU KHA247 DIPTET ON BONEITRA SIGNT OF MEATY BLOSSOMKSTREPTON1 CHARIOTARM CLOCKARISTERA YEAR SIGNIVE-PULL-IVINATIONY-FOURTH ARCHAIC MY-FOURTHSSTRELNAYANDAILING WRINKLES IGH HAMZA-STACCATORTER MARKIGHTH ASHAINTBRUSHAISED DOTBEER MUGSWRY SMILEUTRA MARKSHAB CEEBRTS MEDALUURDHAJA SPIRITUS UVUZHAKKUIGN NUKTAIGN SAFHAIGN TOMPIOO DENNENAJANYALANBASE UNITIDEOGRAM NA KHONNALLABLE OM-LOW TONEICE CREAMLLABLE B0SOF PASUQ-MID TONELIVERANCELITTLE UPLISSANDO BICYCLISTBIAL SIGNXCITEMENTWORDSPACEIDEWAYS UAF PERSONAFFE FACELINE FACEYRANISMA LIGHTNINGNCLOSING OP HALF ONGER SHIPRWARI DDAALI GALI SEPTEMBERING CARD NGER ROOTING DOLLSING GLOVENG SANDAL3 PLUS ANOM SYMBOLING LANESING STONEAVE ARROWALPAPRANAINISHMENTNGUN SIGNONGSEONG ILE TILDETEH ABOVEAL RUNOUTILIPPINE ONG GRAVENFORZANDORUM CLEF-VRAKHIYA ONE THIRDONE MARK-TED PLANTALAYALAM LEFT TACK0 LONG LEVANAGARI LEFT RINGIN SQUAREON TEUAEQON GROUNDINAL NOTEINARBORASB DIGRAPHTRESVETLO APODEXIA RA OR RITREDECILEEEN WITH CHOSEONG  AND TAIL OF PAPERTUTEYASATDRAM SIGN RICKSHAWPROJECTORTUKWENTISCUBE ROOTDOWN SIGNZIR SASAKDOWN STEPCULTATIONENTRY SAWUNGLASSESUNGSEONG FEH WITH ULL BLANKED DIGIT D SALTIREUMED HEADRNEY PARAZAL SASAK AND CURLRO WIDTH CHAVIYANIDEPARTUREDUS RTAGS OF BLOOD FROM BARTRAIGHT UPENTASEMEZERO SIGNPENT SIGN GARSHUNIGITTARIUSED PLANETRCHAIC RAEMBEDDINGCRESCENDO PLUS GALFLAT SIGNCOIN SIGNEIGHT OF  PLUS GUDG IN HOLE PLUS KU3CLOSED PLUPPER DOTPPOINTED CORN FACEFOUR BENTELEGRAPH CONJOINERREAK HERE PLUS LALRDEL DKARCOMPLETEDELLOWSHIPUBSTITUTEPOSITIONSTTED STEMFROM WALLDOWN HAND PLUS TURFINAL NUNFINAL NGAREFORMED FINAL MEMUPTSTIMMEEFORMED TEFAIDRIN  PLUS ZA7 OVER BALZENE RINGPIDERY HAPLE HEART DIVIDERSRCHAIC IIUE MAEMBAPPOSITIONFISH TAILRED JOKERFACING UP OVER LUMREDNE ON  PLUS SAGEMPTY SET AND BELTZAKRYTAYAE AT LEFTETER SIGNRFUL FACE STREAMERDAD WITH DENT AND URAMAZDAAEAVY DOWNTO CORNERHAIKSUKI  SPARKLERQUADCOLONTONE MAI ERTY LINERIED FACEES AKURU EURO SIGNQUEEN OF ER BUBBLEP ELAMITEESAME DOTP DIGRAPHR PLUS RAERCIAL ATPANYANGGAETTI BALLROJECTIONETRASIMOUEBIT SIGNCHANICAL PAA-PILLAGRIK SIGNHALF SIGNQUSHSHAYAUR-DE-LISHALF NOTEHALSHELETGREATER YPADE SUITL-LAKUNATTO MARKEN NTEUM OTTAVA ING ROD XCELLENTAVY BANDDANTAJA OM NTEUMVE SASAKETA SIGN1 BARLEYING BELL OVER KGANE TREEKATAKANAKASRATANLESSER YAIYANNOIYIDDISH PRECEDESNEIFORM LESS SHANO SLASHOLLOWINGDIM GUNUSUCCEEDSUNG DASHNO THUMBDAMMATANFINAL THL POLISHETRASEMEFILE BOXNED FOODNAVIYANINCE SIGNFOR STOPBACKWARDUNDERDOTINAGARI WRINKLEDNOTE PAD LANTANGESH LOOP CURRENTCOUNCIL RDEL NAGSE WEDGEIMANSIS FLOURISHDDY BEARELEPHANTONE FOR COUNTERS OVER MULF RING AY-NIGHTOMANIAN ANS SIGNNRES TOSVERGENCEING BOWLWRITING ET SHOESSPERSIONW PRINTS OVER ZIY POPPEROMMA BARAZHAAKKUEST WINDQUINTILE KEMBANGDIT CARDLFWIDTH TTENTIONNOVEMBERSCRIPT GUNDERTIEY BEETLEUAREG YAOCK SALTEOUT BOXEVEN OF ER TRUTHUBJOINER NUTILLUYAMAKKANOCALIC M HANDLESSENTAGONPUSHPIKALEANING ARTYRIA ALLIANCESWIMMINGARSI YEHODESTONETAALUJA ERAL URNSQUEEZEDITA MFONARRIVINGOCUS OF UP TRUCKVESSEL BYBEYFILIJAVIYANIARCASITEUATRILLOEVERANCENINE OF NI ABOVEAR TSHESD BUBBLET NGGEETD CROSS QAIRTHRAARKLEAN LATION XOBOOFILIEXCHANGEAMS HORNSALT OF RILLIONSASTERN WTAR EYESEREVODKARASMIAN AST WINDEUFEUAET1 HELMETCURLICUEERDIGRISFEBRUARYOHM SIGNLA LENGARAUGHTS SANYAKA 3 ARMOURSUPERSETJUNCTIONDIFONIASATH MARKJACK OF PROSTAYAATEBOARDATE MARKATAKANA APITAL FPUN IYEK FACING PUB DAWBCURSIVE YENISEI TAI LUE RAMMA GGVOMITING ON LEFTVOLUTION OF YARNIS FORM IS WHEELIS-PILLAYESIEUNGNITIAL ZTURNED MENICIAN NG RTAGSKAIYARAAANC SIGNYER YAGHIRD MARKS OCHKOM ANTENNAMARRATANABAAFILILTRY LEGBLINEAR  RASWADITHOSCOPEBLED CAROVER BU PAKPAK EBLE SIGNABOAFILIPAIRTHRAHREE OF WO ABOVESMA SIGNCHINESE ROSHTHI CEILING  YUQ NAEBOL SIGNPALOCHKALUB SUITSHOE JOTTRI DISHOREHEAD THIOPIC LOW STOPHAGALL HLOW DOUBCANDICUSYRILLIC BINOVILEWBOY HATORM FEEDCAL DISCZWARAKAYLOZHITIERIYOOSAN-CREE TH-EM DASHOVER GA2BOT FACEGENITIVEUKEUTNDAOVER GI4I SHAKTISHKIR KATO-LEFT TICK IN BUNDANCECER BALLMON TIMEED BRICK TTUDDAG SCOTS S SATCHELDVANTAGEOTIFIED RESVETLYC SIYAQ DS-CREE  SLIDINGMIONIAN GREAT SAZAKRYTOEECH YIWNMALL AXECHATTAWAPAVIYANIMMATION EBEEFILIDUSHENNAGORAZDO HESPIAN MANDARINMANGALAMWN HEARTOT MBUAESHORT ERM ALLAAHCABLEWAYSIX DOTSA SIGN ATOWARDS 56 TURO2HOP BELLDVISVARAGLASNAYAULLS LEGROSSED OPENTAGONBRA FACEBOX TRAYME WITH HARMONICOVERRIDEHARBAHAYZWJ THAJAEN NYAMN-JOINERSNA LDANWON SIGNSIGN LAECOMBINEDDOCUMENT CEDILLATIRRUP RLOCATIVEWASH KAFCLIMBINGRED HAIRTRICOLONIGMOID SME BADGEBER POLECLOSED TV OVER MYPORROONBATBEIT FRAKTUR MEM-QOPHHAN-AKATTISMOS E-X BELOW TALENTSHALF GURE OF POO0 BRONZEEK ONKARNAMENNY 8 KANAKO PLUS DU PLUS DIOO TYPE NA METEKFRICAN D-KHIEUKHREATNESSUDAWADI TER FACELKULIZMYSOFTNESSCASSETTECK CHARTMY HOUSE AT DUSKGBASINNARSE DUNGLONG S TGARITIC BIEE FONOVER TIRLORRAINEOVER SAGOVER SHEICHAEAN BILLIONSEGORIAN  PLUS RUACKSPACE POLNAYALONG BAR-PHIEUPHSIFISTONREE MARKBEVERAGEMINGKALKOMBUVAKPAK WAMBOL B0ER THANLAMITE EAD ORETIVATE Y HEART9 CLOTHMEETORUEAVY YAKOQNDONECEMBERL SEGNODEAVOURMINIMA RDO RJE2 WOMANKYLISMAANGLED SIGN UDAN MARKKORONISERNIN AE DRINK7 NGGUAANGKUOQLAGIOS SEGMENTMARCATO3 EIGHT ISLANDXOPHONENJAEMLI9 NGGAAUM IYEKRA REPAAND END26 EYYYMERICAS KEFULASTERINGWIFRUITANDERERKUTAARU3 AREPALAK-050ST TUBEE GLASSMANCHU WIGNYANR2 GUNUMASSAGEY GREEN7 NGUANDYNAMICSEXTILEAD NECKLEUT KA BUTTONZQAPHA WO WAENLEYBALLWAZ EOHWO FOR SHIFT TWO MARKACTER TAELAENGSPRINGSLEK TOONESTED EN LEAFRAYANNALENGTH-NEQUDAAVYSOKO SOLDIERREATHY RD FACESHAKINGLIGHT XWORSHIPNAYANNARD DISK CHIKI UBUFILIAETMEUNNANCIALEL PUMPDISIMOUDIPLOUNLF FACELLYFISHEIGHT KDOFONONAHAPAKHSOV ROGLJUDIJE CER-WAED RICELAYANNAAM ALEFRESILLOALTILLOLYGISMASHORT ARAKHANGDRIL BUVOICINGLE LEAFSIDDHAMA -PHRUNIKAHITLASHES 6 NGGOOMAI SATA NAME 3 OMEGA3 MONTHDU NJAAMAAYYAA3 WHEELNG MASKUKKAKHARANGKEPENSHUETRARIETYDIARGONMUNGKAHSERPINAALLOT XDHALATHMRACHNYREREKAN3 SPICE5 NGGEEUN MEUT APLOUN3 SWORDWDRIVERALESMA GOLIAN VANESE BAIRKANVAPOURSYNAMIC POMOFO TORNADO PLOPHUHIUCHUS0 SPEARPECTIVECRACKERFLUENCEPAYEROKON FACEPAYANNA0 WHEATPOVODNYRIPPLE VAV YODOMERANGVAYANNA-WELSH IL DRUMONGONANBARREKHONG UEXCONTACTTSECHKAILLEANNCOPTIC RMUKHI PEGERMAFORKINGBUFFALOBAMBOOSIMILAR BULANCEFINAGH TIKRAMAAUNTLETOLAPUK OKRYTIEAULDRONTASHEELVEMENT-AU MARK SHAKERINNABARATH OF ATAEAN  WAAJIB OPEN-OASUTORUTTHACANVE DOT TCHFORKAY SIGNTAYANNAYMAIC LGRADUALAXIMATARY FACECHEINAPTTILIK PPROACHFINAL Y1 ARROWIBIFILITHIEUTHORCULUSIANGQI THESEOSBORZAYA-KIYEOKIC WAND-MACRONCHIEUCHGAYANNAICOPTERTRAINERBOURINGBIG YUSICYCLESCK LIMEHYAAUSHUSSYERUGHEUGHEORTIETH RAMBATPERVISEBOARDERTHKUQI ORKHON -CREE RI NTEUMGENERALI RTAGSRRECTUSBLACHKOPHUTHAOOREVMA RTHIAN CLOTHESGLAGOLI-SHIFT-COASTERTROLLEYPENGKALCOMING TRYASKAUYGHUR -THIRTYONTIEEN-TIKEUTIKHAHITUT TIME-MU-MO-OT NGOMCHEVRONTHALIYACLEAVEROT REPH WOLOSOPRENKHAIFIED EBREVIS BERRIESPLOYAN BERGINEOP MARKRISIMOUCLOSE E MUQDAMJIBWAY HEADINGCAYANNAVEW NOWSANGAN  MUOMAEHAYANNAUP MARK MENDUTP PIEETSANDHI CAP TENEULEUNGNUMBERSTYSCAPEQUARIUSJARATI T ASHESHAARKAAUP TACKYAYANNAUP STEPROGRESSSYNAGMADA FACEJAIN OMJAYANNAURATIONJECTIVESAMPHAOUP SIGNCANDRA JERAN JROKEN LQUEEZE DANESE KEUAERIURGLASSKHA YATSCOOTERESTIVAL TEDUNGOX BACKDANCINGURFACE OWILO SDAYANNAKKURUNIYA LAMPVILIK BVILLAINANGLONGANGOLATUP HAND LONSUMSUKUUDO MAELEE2 OLIVEAPEZIUM STRIDEHALANTAYAH LI YANMAR ETNAHTAKARO BANTAINS HANGUL OW ALEFSAYANNAKAYANNAOX LINECABINETISIBLE CELSIUSPURPLE PUSHPINTA MARKOVER ANS-SAJDAITALIC OCTOBEROCTAGONFATIGUEASH FROOGDIAN TAISYOUPANESE HEXAGONF SASAKOFFICEROF SOAPFAYANNAASHTRA OUT HUBPANSIOSAS SIGNYELLOW IVE OF ITON RATALL AASA VAH ARRED BD MADDAD MOUTHPALLAWAPSTICKSARDNESSOUR OF OVER DU OCLOCKARRED OHI SIGNPTHAHA  SLOWLYF DAVID5 WOOLMPLINGROCKETOSETTE6 TREEYSTICKOW TIE8 HOOUPECIALPBOARDPENCIL6 NGGERICORN7 MBEEPEAKS OTTED-7 MBUU6 HUAN SPLIT7 NDOO6 GUEI7 NGONPEPPERSICKLE AGUNG7 GUANWN BOXPALUTAWN BOW7 KAPO TIKHYPWATCHS SHOENGGONGS TENT1 WINERAKLITODHADH3 NGGAOCIETYOCENCE MURDAQAMATSQETANAOBELOSSAADIY1 GOLDNEUME  EPOCHOITIC  EQUID1 HORNRIISAP1 NDEEOGONEKOFOUNDNGBAT PUFFEDNTIIMUSAUCERNTEVMANSUZ ANOKHUKNSANAQ KAPALNOZHEKNOWMANNOR BUZHITSA LELET3 GBEEXIMIZEXO NEONIRUGU3 HEEIRACINGRAAKANYAKASHNISTER2 KPOO MELIKNIZKO 2 MBOO2 NGGUNKNOWNNTOGENOPEN PPIRIT WO OF YRENE OPITSARSENICN DASH-IEUNGOPEN D-PIEUPRSHANAN YANGRSIAN N-NISFOOPED RKAANU QATAN5 MERISHMAAMRENGTHRISEMEREMEDY-HIDET-HIEUHPICKET00-1024 MUANWRENCHON KEY4 KPEE DIPLINDA TA4 DEERNCH FR4 DARTYIN-DORBITSAX FACE1 GBOORAVEL-4 NYINOOMUUT CARETNACLESSHAYIMONOCLEWORKERYOMBO 0 NGGI0 NGGO4 NJOOPOKOJIPOMMEE4 NGEN0 NYON0 NYUNAPYRUSSWORDSGBASAQCKNESSGEADALGEDOLAARADDOSYNAFIARBUTAGGLINGKAYAH CODILESUCKEDCLOSETIYANNATRIKE APISMASURANGSURED APLI MGANGIAITABLEISSIMOISSHARISSANTARSEOSCHESS GLAZ HCHEMA TAIKHUIRINGUGNANT CHURCHIXTY PSYOUWAGHAMALIX OF TRAPLIVERTKAGHETTIGHEUAECHO CHCHIRETT NJAQITULUMITHER LAMADHLASTONFAMILYFATHA LAMEDHCUPPEDTUXEDOSSLESSTURBANCUMBERFF OF VIRIAMANCHORLAFRONEVENTHEXHALEEXISTSSTANCEEYANNAUPNAYAF CLEFLD MAPF MAREKNIFE KLITONANIMALSTROFOKILLERVILIANKEYCAPFORMEEFORTISKE PHOANUARYANGKATSTANCYKY WAYKUSHU2KTIKO STLERSKRISISSTOLI CREASECRAYONBETAN BGBIEETIMATEIDE ESHEUAEPHIBIT THAKKUC CLEFIB YAMIASMA BEFILICALATETERON IGGLESTEUWENHEISEIURNAMAIEVAN HERMESHO HOIHUMBS BLINK HIVETEBOFILIHUR PAHORT IBOWTIEBISCUSBISHOPHIMAHUTIKENOI MAIMI HOOKHINGE BURGERAUTUMNCEVITUTAU ROINHALETAUROSINSHIPGS-PA INGAATGURAMUTAMINGASHGABCHEIKHGO NGUGOBLINASSINGGORGONTOPBARTARGETGRASP ATTERYATTIC CHAMKOCHADINHAMILOILLAGETIRYAKILBOATCARIK HAMEDHHASHKAUZEIROUYANNAHE MGOUUMISHINDHI TE TSEINCUNXINAGMATE USEIN YEHBAFILICATAWACASTLEHALF HBANWA HAM AIENTIMAACINTHENIKI WBERRYDICINEAASHAEEN GHEUNGAAMWEORTHEMPUS EMASTIA-KARAUBLE XM BOARM BULLAGOGUEUAEQTUUP BOWDE DOGLIGIONLIGON SOUNAPAFFIX ERMATAUANGXIELLITELISHA AESURALITIKIDERMA LLIPOPAEMMAEEPACT DGEHOGLONG EEENTH-9 NJEE9 MUENED ICEED CAPDUCEUSME DIEWINDOWDVANCEMECHIK8 NYEN8 NYANEAHMUK8 MBEEE WAVESKAPI MADDAHMADR MUCIBLEUDARKAA HAAMEIGHTYSIXTHSDIESISDOKMAIMALGAMMALL FUGGAGEMANYA SPLIT U MBITSPADESLEVEL-ET KUTAKEUAEAJANI AK-668AILUREEUREUTEUNYAMAKABATEUAENASPITALSPATHIEU MBUESTAN AGRANTDAGGERZSEKAEIDON TELU CAPOEGL HDOTS-EGALIEGIONTINNEHAYINCANUSHATHIURINEFAAFUHASE-TUUMUFAIHUTIPPIHANNAEUAEM COATPSILIEKEETPAATOCCEPTCCOLIHADDATON AHAALUCECAKCECEKROGOMRDIONUBUTSGVANGTKAANHALQA TABSPTUNERONOSFEARNHALA TMAAUEISMACAUDACAUSEUDAATHAINU CHWVRIEENRILLAHISTIDWICHHIRIQTIGMAHIUTHRIEULEURAEEBALLOUNCEHIMELOTHAL MOODZYGOSBREW BSTERE GEEOTERI ALLOHOLARHOLAM AMPSEAGLERICEMDAIC RELAAUMMERF COWREPHAF EWEUKARARELA CAKESREIWACAKRAF SOWEESHIUGUSTREGIAURITYURTLEQAAFUEYBUSDSMANCALYAEYYALHI ROTILESCAANGHETHECKAGEET TUFLAGSPITERDEPTHGAZE-DENCEUNOO RACHYCKTIEGAMANPPAGEGAMALGALGA ICONGESH2TTOCK FUJIUNITYCHULA GORACHUTEDELTACIEUCRAIDA HAA PI RORITSIGEAN UBITODESTYTSERER-RUB KAWIDATUSTSEEBPOLI FLUTEFORCEU U UPONSEDBOATQUIRYESHE3 LACAESO E ILUTPLHAUCLIFFTRIOLGADOLCLONEZIDI FLICTEOPLEERINECLUBSERKHAPLUTAPLUTOPMUNKTSADIFSAAQPCHA EMLJAPASEQPATAKGORGIUNGBAPEAN UQUETTORSOGOGI TUEUMCTRICDLINGUBURUGULUSDKAR CEREK DEKARCHIDEMAKEZHAINCHADACUBEDEMBICCHESTZILDEENENGPEPETENJETCHIMEGHULUCROWNCHOOICHOOLGHNUTTTORUENUTOEO-EUPEN-PENANOEVAL  SARIPEITHRATERTOYORCHERYRASHATRACKENDEPTRAIFALLEY3 RA3NGENTALGARLEASE3 VEE3 WEI3-VASAMEKHLATIKNIEUN3 NDIVRIDOSENTONGUE LAYARALPHAALOG NGMANALLI AGMA 4 LEE4 LOO4 MBO4 MONNCORA4 NDO4 KPUWAQFANASHI4 TOO4 VOOSHANGSPINE32 JELENISVZMETNENOENEMKAWUAETNEGARWU3184 ABBWAAVU4 GBI2 PTEVIET NSYONKBALLNSUAEKERETNSIEEKESH22 POOKHAPHANNON2 SEEKNOBSNTXIV2 MBUK-0202 NJANUENG2 NJUKO LASUKUNNTHA KARORSAUILLAGUSLABORSEGOL3 BOO3 FOONNAN 3 HIN3 HONNINTHXING LAMDAVITAESTORMSTNUTSOLVEANGELKURONXYOOJKUSMAKWAENXW XWXTRA-L NETL-JUZ7 FUAMINDU9 WVE6 WEE9 WVA9 PU26-VASMALONWIANG9 NUNMIEUM7 GBE7 HUN7 JEEMAQAF9 NON7 MIN6 KOOMAI KMAIZESHTINMMOTHSICLE9 NDEMISRA6 RA26 SIA6 SOO9-VASMINGO9 YEE6 TA28 NWAWISAD8 RO28 FEEWINDUMEPET8 GBUMENOEMETEG8 NANSILA3MELON8 MANMEIZIWINJA8 KPOMEEMU8 KPE9 DEE7 NEN9 NDA9 MUN7 NIN9 MEN7 TWE9 KUAWIDE MADYA7-VASMI RO8-VASMETRYLOUREADULTLOMKAWATTOLOBE ACHKA5 KEEMUOY NABLA4 WOOSHAR2SHARA4 WUISHARUNADA 4-VASAEREENA POAEMAELOAN A UNAMPIREWFISHMPAREA YUE5-VASLWAY M RAMWLINESKATEMAAEHMAALA6 GBAMACUSAAMAEWBOAT5 MBI5 NDUMUHORMUCH 2-VASSHOOKMSHAEMROCKLURALAADHUAWAY IAUDAOMBIERRITOIARDS0-VASRYASOAVROSBISAHVATOROMMAEOQPENRUSH ICHONINTHUI KOIIPINGIPEHAATAF OJKI ATIYAI-RESBAARUOKARAOKEE THING1 FAN1 DWEINNA AUTHSOLD XYIZET0 DOOUTEUXVAAVU0 BEEBASA RULAIIKURUBASSATENSE-RINGIKARABENDEUTIESRUHUAIHVUSRUDAA-SIOSBEITHOPLETBACUS0 OILBALAGIMMERICRONIMMA 0 MANIMGBABHETHSUTUH0 JOO0 HEE0 HANBHADH0 GEEILVER0 GBORUMP-0 DWOILLU TEGEHOCADO2 HENORUTOARERU2 HOOYECEKJERVIOBYLAOSTERITUALHOUR HOTELITHI YSTERO KAIJANG SALADO BOXO PLAO RUASAKTAO ANGHROOMYURIISAKINNZEUMYAMOKBOOTSROWN BORZYAR AESADHEJUEUI2 KPIASAR HUMP -BEAMSURYAHUTA ASEIAJUDUL1 PEE1-VAS2 MBA2 MBEBLAKOIRACYASPER-ALAFISTLE1 YOO2 KPA1 WVIJUDGE1 TEEYENAPAPPLE1 TWOTFONZZY ULU UTTYSIKIROUTSLURRT TRSO-UHURRROIYWAAUMEAUNAHUGU URUSRPSESINKRIFYSHTAUSA UTANUTAESHYAYUKUZIZ2YUDHUNAVTURUVIYOSELFTUKISEEVZELOSEENVEDEROARVOS XEIAZETAROA YEUXTWAAXEYNVEUXVESTZATAVEUMSUABVIDAVEYZSA-IVUEQZAYNYAWNWAW ROOKSOKAZIETRUNGWDERRUISRUKUWAAKWAHAWAETTAXIRUTUTZELSEYEWULUUON SONGRUSIHEYSHEENHEEPHEROHERUHEYNHEYT2 VIHHWAHID HIINHILD2 YAHAVEHAYN2 NOHUB2HUEN2 QOHWAA2 PEHSHU2 L22 KAIANOIARA2 BU2 SOHMI 2 ROHOKEHOM HOSTHSDA3 MEFIRIFITAFFIN3 LE3 L33 KU3 MUEURI3 YU3 TAEZZO3 RI3 PA3 JOFAIBFAST3 MIFEEMFETHFEUQGORTGIDAGIEAGIR2GOALGIBAGROMGRU 3 A3FWAA3 JE3 EEGAMEGAMLGEDEGGWSGHOMGHWAKMA 1 INKOBAKOETKOKEKOKOKPEN1 HAKWAA1 GA1 DU1 DO1 DALAANKALIKAPHKCET1 KU1 KIKICKKINILFERLFIELIFULIUMLIWN028BLOLLKAKOILETILUYINORINY IPODIFATIGERIQAAIITOJOT 1 YIJEONJIIM1 VU1 SU1 SI1 SA1 RA1 QI1 POKAAFKAD31358ISI ARA3ARGIARUM7 BE7 EIAPAQAPON7 DD7 DA6 JO6 L6BAGSBALD6 LABASH6 JEBAYI6 HIBBIT6 HEATIMATYAAN X6 WU6 SE6 RU6 QA6 PO6 NAAAMU8 FO8 EN8 GU8 DU8 BO9 TU9 PA9 PI9 JA9 SE9 SI9 SO9 TA9 TOAFEL8 WE8 SU8 QEA IE8 PI8 KOA-HA8 JIALDAALTA7 JA7 VOAHAD7 ZA7 TI7 RE7 LU7 KI5 BB5 AU5 A2DZHAEAAEEEEEEENG4 ZE5 GI5 FEDGER5 FADIM2EESU5 DE4 DOEHEH4 WIEETA4 WA4 TU4 TE4 NEDEAD4 L44 KEEIPTEIRTEIWS4 FIEKAACASEBUOYBUNGCAYN5 WE5 WA5 VECHAU5 VACHEHBETH6 FUBERD6 DIBOOKBORE5 OOCWAA5 NU5 MO5 LIDAGSDAIR5 JUDDAKDDHI5 INCORE5 TOCOONHUVA5 TECRETMUINMWAA0 HOMVAT PODPLUGPLUMOPUSPOLOMUAS0 BINUUNNAG PHABNWAANAAUPHINORIIORAXOONUQASRMMU2QEF ODLEQHAU WEBMLYAQOPAO-YOOPOD0 JUMPET0 KOPRILNUNGOOTHOBATOBRO OHMNSHENHAYNGA2NSUBNNNA-ONEOXIANEO NJAMNOWCNPEANRUA-RAY-UM NCERNTOCPEEPNANANAM2PEUXOUBTPARDPAWNNTAANDAPPEEIOJOD0 NIREIARAFELUMNOJI MARULUISMARY0 PUMESOLOVO R SOFUMMFAARGU20 WI0 SAMIIMMIIN0 RA0 ZO C D0 YECIG5 UUEZ4 ECAICAHCA9UDYEIEDJAUMXUOPE80DA2D70D42RQACWIWOQDE64-0UKYZOOZJEZORQUFVOKVOYAL2VUUQARPUQQ00QIFQIGVNOQOFQOTA7A8 IZUP9E39818F0REXWI ZZEAG-72CWAU8 AXAUBIBB895-0BXGBUD550B575575B66D7POQAZUVAUAYD6-0AWX620AUJ155YOTIMNMU 14DI-IY00HOJHOXIHI18D0 E0 U0B9SJELK LJE0-0LULLFAYIT04ASUS1 XSUUJHAK00IWR1211-21-0JAHJAWJEUMAUKUGKAQSIIFOMOAYFLYTUJFAJ3 D3 IO YES-X0031CXANEOWOGHXEHEYKF14F8COIX3-0305NII2-020BGVENIBHAQXWVXWG2532DD3638G3830929171648401F1D494B4E1AL0HZP0VDC09990QWG0F3R7
InMemoryFileSystem
RealFileSystem using 
process
 CWD
Color Options
error: 
warning: 
note: 
remark: 
color
Use colors in output (default=autodetect)
Cannot consume non-ascii characters
Could not find expected : for simple key
Expected quote at end of scalar
Found unexpected ':' while scanning a plain scalar
Found invalid tab character in indentation
Got empty plain scalar
Got empty alias or anchor
Expected a line break after block scalar header
Leading all-spaces line must be smaller than the block indent
A text line is less indented than the block scalar
-?:,[]{}#&*!|>'"%@`
Unrecognized character while tokenizing.
Can only iterate over the stream once
Unknown tag handle 
tag:yaml.org,2002:null
tag:yaml.org,2002:str
tag:yaml.org,2002:map
tag:yaml.org,2002:seq
Unrecognized escape code
Null key in Key Value.
Unexpected token in Key Value.
Unexpected token. Expected Key or Block End
Unexpected token. Expected Key, Flow Entry, or Flow Mapping End.
Unexpected token. Expected Block Entry or Block End.
Could not find closing ]!
Expected , between entries!
tag:yaml.org,2002:
Already encountered an anchor for this node!
Already encountered a tag for this node!
Unexpected token
not a mapping
missing required key '
unknown key '
not a sequence
unknown enumerated scalar
expected sequence of bit values
unexpected scalar in sequence of bit values
unknown bit value
unexpected scalar
Map key must be a scalar
Map value must not be empty
duplicated mapping key '
unknown node kind
invalid call
                
true
false
invalid boolean
invalid number
out of range number
null
IO failure on output stream: 
.temp-stream-%%%%%%
[:<:]]
[:>:]]
alnum
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
alpha
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
blank
cntrl
digit
0123456789
graph
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
lower
abcdefghijklmnopqrstuvwxyz
print
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~ 
punct
!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
space
upper
ABCDEFGHIJKLMNOPQRSTUVWXYZ
xdigit
0123456789ABCDEFabcdef
alert
backspace
newline
vertical-tab
form-feed
carriage-return
exclamation-mark
quotation-mark
number-sign
dollar-sign
percent-sign
ampersand
apostrophe
left-parenthesis
right-parenthesis
asterisk
plus-sign
comma
hyphen
hyphen-minus
period
full-stop
slash
solidus
zero
three
four
five
seven
eight
nine
colon
semicolon
less-than-sign
equals-sign
greater-than-sign
question-mark
commercial-at
left-square-bracket
backslash
reverse-solidus
right-square-bracket
circumflex
circumflex-accent
underscore
low-line
grave-accent
left-brace
left-curly-bracket
vertical-line
right-brace
right-curly-bracket
tilde
REG_0x%x
REG_NOMATCH
llvm_regexec() failed to match
REG_BADPAT
invalid regular expression
REG_ECOLLATE
invalid collating element
REG_ECTYPE
invalid character class
REG_EESCAPE
trailing backslash (\)
REG_ESUBREG
invalid backreference number
REG_EBRACK
brackets ([ ]) not balanced
REG_EPAREN
parentheses not balanced
REG_EBRACE
braces not balanced
REG_BADBR
invalid repetition count(s)
REG_ERANGE
invalid character range
REG_ESPACE
out of memory
REG_BADRPT
repetition-operator operand invalid
REG_EMPTY
empty (sub)expression
REG_ASSERT
"can't happen" -- you found a bug
REG_INVARG
invalid argument to regex routine
*** unknown regexp error code ***
0123456789abcdef
HOME
TMPDIR
TEMP
TEMPDIR
/var/tmp/
TERM
colors
PATH
input
output
llvm-symbolizer
LLVM_DISABLE_CRASH_REPORT
too many signal callbacks already registered
disable-symbolication
Disable symbolizing crash backtraces.
crash-diagnostics-dir
directory
Directory for crash diagnostic files.
__gnu__
_Clang
clang
sequence
aligned
assume
global
_Noreturn
called_once
cleanup
__const
deprecated
mig_server_routine
matrix_type
maybe_undef
min_vector_width
ns_consumed
ns_consumes_self
nouwtable
NSObject
packed
Pointer
pure
release_capability
release_handle
restrict
return_typestate
sycl_kernel
sycl_special_class
standalone_debug
swift_async
swiftasynccall
swift_error_result
test_typestate
thread
trivial_abi
try_acquire_capability
typed_memory_operation
unavailable
ptrauth_vtable_pointer
warn_unused_result
weak_import
property
not a builtin function
__builtin_atan2
__builtin_atan2f
__builtin_atan2l
LdLdLd
__builtin_atan2f128
LLdLLdLLd
__builtin_abs
__builtin_copysign
ncFE
__builtin_copysignf
__builtin_copysignf16
__builtin_copysignl
__builtin_copysignf128
__builtin_fabs
__builtin_fabsf
__builtin_fabsl
LdLd
__builtin_fabsf16
__builtin_fabsf128
LLdLLd
__builtin_fmod
__builtin_fmodf
__builtin_fmodf16
__builtin_fmodl
__builtin_fmodf128
__builtin_frexp
ddi*
__builtin_frexpf
ffi*
__builtin_frexpl
LdLdi*
__builtin_frexpf128
LLdLLdi*
__builtin_frexpf16
hhi*
__builtin_huge_val
__builtin_huge_valf
__builtin_huge_vall
__builtin_huge_valf16
__builtin_huge_valf128
__builtin_inf
__builtin_inff
__builtin_infl
__builtin_inff16
__builtin_inff128
__builtin_labs
LiLi
__builtin_llabs
LLiLLi
__builtin_ldexp
__builtin_ldexpf
__builtin_ldexpl
LdLdi
__builtin_ldexpf128
LLdLLdi
__builtin_ldexpf16
__builtin_modf
ddd*
__builtin_modff
fff*
__builtin_modfl
LdLdLd*
__builtin_modff128
LLdLLdLLd*
__builtin_nan
dcC*
FnUE
__builtin_nanf
fcC*
__builtin_nanl
LdcC*
__builtin_nanf16
xcC*
__builtin_nanf128
LLdcC*
__builtin_nans
__builtin_nansf
__builtin_nansl
__builtin_nansf16
__builtin_nansf128
__builtin_powi
__builtin_powif
__builtin_powil
__builtin_pow
__builtin_powf
__builtin_powf16
__builtin_powl
__builtin_powf128
__builtin_acos
__builtin_acosf
__builtin_acosl
__builtin_acosf128
__builtin_acosh
__builtin_acoshf
__builtin_acoshl
__builtin_acoshf128
__builtin_asin
__builtin_asinf
__builtin_asinl
__builtin_asinf128
__builtin_asinh
__builtin_asinhf
__builtin_asinhl
__builtin_asinhf128
__builtin_atan
__builtin_atanf
__builtin_atanl
__builtin_atanf128
__builtin_atanh
__builtin_atanhf
__builtin_atanhl
__builtin_atanhf128
__builtin_cbrt
__builtin_cbrtf
__builtin_cbrtl
__builtin_cbrtf128
__builtin_ceil
__builtin_ceilf
__builtin_ceilf16
__builtin_ceill
__builtin_ceilf128
__builtin_cos
__builtin_cosf
__builtin_cosf16
__builtin_cosh
__builtin_coshf
__builtin_coshl
__builtin_coshf128
__builtin_cosl
__builtin_cosf128
__builtin_erf
__builtin_erff
__builtin_erfl
__builtin_erff128
__builtin_erfc
__builtin_erfcf
__builtin_erfcl
__builtin_erfcf128
__builtin_exp
__builtin_expf
__builtin_expf16
__builtin_expl
__builtin_expf128
__builtin_exp2
__builtin_exp2f
__builtin_exp2f16
__builtin_exp2l
__builtin_exp2f128
__builtin_expm1
__builtin_expm1f
__builtin_expm1l
__builtin_expm1f128
__builtin_fdim
__builtin_fdimf
__builtin_fdiml
__builtin_fdimf128
__builtin_floor
__builtin_floorf
__builtin_floorf16
__builtin_floorl
__builtin_floorf128
__builtin_fma
dddd
__builtin_fmaf
ffff
__builtin_fmaf16
hhhh
__builtin_fmal
LdLdLdLd
__builtin_fmaf128
LLdLLdLLdLLd
__builtin_fmax
FncE
__builtin_fmaxf
__builtin_fmaxf16
__builtin_fmaxl
__builtin_fmaxf128
__builtin_fmin
__builtin_fminf
__builtin_fminf16
__builtin_fminl
__builtin_fminf128
__builtin_hypot
__builtin_hypotf
__builtin_hypotl
__builtin_hypotf128
__builtin_ilogb
__builtin_ilogbf
__builtin_ilogbl
__builtin_ilogbf128
iLLd
__builtin_lgamma
__builtin_lgammaf
__builtin_lgammal
__builtin_lgammaf128
__builtin_llrint
LLid
__builtin_llrintf
LLif
__builtin_llrintl
LLiLd
__builtin_llrintf128
LLiLLd
__builtin_llround
__builtin_llroundf
__builtin_llroundl
__builtin_llroundf128
__builtin_log
__builtin_log10
__builtin_log10f
__builtin_log10f16
__builtin_log10l
__builtin_log10f128
__builtin_log1p
__builtin_log1pf
__builtin_log1pl
__builtin_log1pf128
__builtin_log2
__builtin_log2f
__builtin_log2f16
__builtin_log2l
__builtin_log2f128
__builtin_logb
__builtin_logbf
__builtin_logbl
__builtin_logbf128
__builtin_logf
__builtin_logf16
__builtin_logl
__builtin_logf128
__builtin_lrint
__builtin_lrintf
__builtin_lrintl
LiLd
__builtin_lrintf128
LiLLd
__builtin_lround
__builtin_lroundf
__builtin_lroundl
__builtin_lroundf128
__builtin_nearbyint
__builtin_nearbyintf
__builtin_nearbyintl
__builtin_nearbyintf128
__builtin_nextafter
__builtin_nextafterf
__builtin_nextafterl
__builtin_nextafterf128
__builtin_nexttoward
ddLd
__builtin_nexttowardf
ffLd
__builtin_nexttowardl
__builtin_nexttowardf128
__builtin_remainder
__builtin_remainderf
__builtin_remainderl
__builtin_remainderf128
__builtin_remquo
dddi*
__builtin_remquof
fffi*
__builtin_remquol
LdLdLdi*
__builtin_remquof128
LLdLLdLLdi*
__builtin_rint
__builtin_rintf
__builtin_rintf16
__builtin_rintl
__builtin_rintf128
__builtin_round
__builtin_roundf
__builtin_roundf16
__builtin_roundl
__builtin_roundf128
__builtin_roundeven
__builtin_roundevenf
__builtin_roundevenf16
__builtin_roundevenl
__builtin_roundevenf128
__builtin_scalbln
ddLi
__builtin_scalblnf
ffLi
__builtin_scalblnl
LdLdLi
__builtin_scalblnf128
LLdLLdLi
__builtin_scalbn
__builtin_scalbnf
__builtin_scalbnl
__builtin_scalbnf128
__builtin_sin
__builtin_sinf
__builtin_sinf16
__builtin_sinh
__builtin_sinhf
__builtin_sinhl
__builtin_sinhf128
__builtin_sinl
__builtin_sinf128
__builtin_sqrt
__builtin_sqrtf
__builtin_sqrtf16
__builtin_sqrtl
__builtin_sqrtf128
__builtin_tan
__builtin_tanf
__builtin_tanh
__builtin_tanhf
__builtin_tanhl
__builtin_tanhf128
__builtin_tanl
__builtin_tanf128
__builtin_tgamma
__builtin_tgammaf
__builtin_tgammal
__builtin_tgammaf128
__builtin_trunc
__builtin_truncf
__builtin_truncl
__builtin_truncf128
__builtin_truncf16
__builtin_flt_rounds
__builtin_set_flt_rounds
__builtin_cabs
__builtin_cabsf
__builtin_cabsl
LdXLd
__builtin_cacos
XdXd
__builtin_cacosf
XfXf
__builtin_cacosh
__builtin_cacoshf
__builtin_cacoshl
XLdXLd
__builtin_cacosl
__builtin_carg
__builtin_cargf
__builtin_cargl
__builtin_casin
__builtin_casinf
__builtin_casinh
__builtin_casinhf
__builtin_casinhl
__builtin_casinl
__builtin_catan
__builtin_catanf
__builtin_catanh
__builtin_catanhf
__builtin_catanhl
__builtin_catanl
__builtin_ccos
__builtin_ccosf
__builtin_ccosl
__builtin_ccosh
__builtin_ccoshf
__builtin_ccoshl
__builtin_cexp
__builtin_cexpf
__builtin_cexpl
__builtin_cimag
__builtin_cimagf
__builtin_cimagl
__builtin_conj
__builtin_conjf
__builtin_conjl
__builtin_clog
__builtin_clogf
__builtin_clogl
__builtin_cproj
__builtin_cprojf
__builtin_cprojl
__builtin_cpow
XdXdXd
__builtin_cpowf
XfXfXf
__builtin_cpowl
XLdXLdXLd
__builtin_creal
__builtin_crealf
__builtin_creall
__builtin_csin
__builtin_csinf
__builtin_csinl
__builtin_csinh
__builtin_csinhf
__builtin_csinhl
__builtin_csqrt
__builtin_csqrtf
__builtin_csqrtl
__builtin_ctan
__builtin_ctanf
__builtin_ctanl
__builtin_ctanh
__builtin_ctanhf
__builtin_ctanhl
__builtin_complex
nctE
__builtin_isgreater
Fnct
__builtin_isgreaterequal
__builtin_isless
__builtin_islessequal
__builtin_islessgreater
__builtin_isunordered
__builtin_fpclassify
iiiiii.
FnctE
__builtin_isfinite
__builtin_isinf
__builtin_isinf_sign
__builtin_isnan
__builtin_isnormal
__builtin_isfpclass
__builtin_signbit
__builtin_signbitf
__builtin_signbitl
__builtin_canonicalize
__builtin_canonicalizef
__builtin_canonicalizef16
__builtin_canonicalizel
__builtin_clzs
__builtin_clz
__builtin_clzl
iULi
__builtin_clzll
iULLi
__builtin_ctzs
__builtin_ctz
__builtin_ctzl
__builtin_ctzll
__builtin_ffs
__builtin_ffsl
__builtin_ffsll
iLLi
__builtin_parity
__builtin_parityl
__builtin_parityll
__builtin_popcount
__builtin_popcountl
__builtin_popcountll
__builtin_clrsb
__builtin_clrsbl
__builtin_clrsbll
__builtin_bswap16
UsUs
__builtin_bswap32
UZiUZi
__builtin_bswap64
UWiUWi
__builtin_bitreverse8
UcUc
__builtin_bitreverse16
__builtin_bitreverse32
__builtin_bitreverse64
__builtin_rotateleft8
UcUcUc
__builtin_rotateleft16
UsUsUs
__builtin_rotateleft32
UZiUZiUZi
__builtin_rotateleft64
UWiUWiUWi
__builtin_rotateright8
__builtin_rotateright16
__builtin_rotateright32
__builtin_rotateright64
__builtin_calloc
v*zz
__builtin_constant_p
nctuE
__builtin_classify_type
__builtin___CFStringMakeConstantString
FC*cC*
__builtin___NSStringMakeConstantString
__builtin_va_start
__builtin_va_end
__builtin_va_copy
__builtin_stdarg_start
__builtin_assume_aligned
v*vC*z.
__builtin_bcmp
ivC*vC*z
__builtin_bcopy
vv*v*z
__builtin_bzero
vv*z
__builtin_free
__builtin_malloc
__builtin_memchr
v*vC*iz
__builtin_memcmp
__builtin_memcpy
v*v*vC*z
__builtin_memcpy_inline
vv*vC*Iz
__builtin_memmove
__builtin_mempcpy
__builtin_memset
v*v*iz
__builtin_memset_inline
vv*iIz
__builtin_stpcpy
c*c*cC*
__builtin_stpncpy
c*c*cC*z
__builtin_strcasecmp
icC*cC*
__builtin_strcat
__builtin_strchr
c*cC*i
__builtin_strcmp
__builtin_strcpy
__builtin_strcspn
zcC*cC*
__builtin_strdup
c*cC*
__builtin_strlen
zcC*
__builtin_strncasecmp
icC*cC*z
__builtin_strncat
__builtin_strncmp
__builtin_strncpy
__builtin_strndup
c*cC*z
__builtin_strpbrk
c*cC*cC*
__builtin_strrchr
__builtin_strspn
__builtin_strstr
__builtin_wcschr
w*wC*w
__builtin_wcscmp
iwC*wC*
__builtin_wcslen
zwC*
__builtin_wcsncmp
iwC*wC*z
__builtin_wmemchr
w*wC*wz
__builtin_wmemcmp
__builtin_wmemcpy
w*w*wC*z
__builtin_wmemmove
__builtin_realloc
v*v*z
__builtin_return_address
v*IUi
__builtin_extract_return_addr
v*v*
__builtin_frame_address
__builtin___clear_cache
vc*c*
__builtin_setjmp
iv**
__builtin_longjmp
vv**i
__builtin_unwind_init
__builtin_eh_return_data_regno
__builtin_fprintf
iP*RcC*R.
nFp:1:
__builtin_printf
icC*R.
nFp:0:
__builtin_sprintf
ic*RcC*R.
__builtin_snprintf
ic*RzcC*R.
nFp:2:
__builtin_vprintf
icC*Ra
nFP:0:
__builtin_vfprintf
iP*RcC*Ra
nFP:1:
__builtin_vsprintf
ic*RcC*Ra
__builtin_vsnprintf
ic*RzcC*Ra
nFP:2:
__builtin_fscanf
Fs:1:
__builtin_scanf
Fs:0:
__builtin_sscanf
icC*RcC*R.
__builtin_vfscanf
FS:1:
__builtin_vscanf
FS:0:
__builtin_vsscanf
icC*RcC*Ra
__builtin_thread_pointer
__builtin_launder
__builtin_is_constant_evaluated
__builtin_get_vtable_pointer
__builtin_eh_return
vzv*
__builtin_frob_return_addr
__builtin_dwarf_cfa
__builtin_init_dwarf_reg_size_table
__builtin_dwarf_sp_column
__builtin_extend_pointer
ULLiv*
__builtin_object_size
zvC*i
__builtin_dynamic_object_size
__builtin___memcpy_chk
v*v*vC*zz
__builtin___memccpy_chk
v*v*vC*izz
__builtin___memmove_chk
__builtin___mempcpy_chk
__builtin___memset_chk
v*v*izz
__builtin___stpcpy_chk
__builtin___strcat_chk
__builtin___strcpy_chk
__builtin___strlcat_chk
zc*cC*zz
__builtin___strlcpy_chk
__builtin___strncat_chk
c*c*cC*zz
__builtin___strncpy_chk
__builtin___stpncpy_chk
__builtin___snprintf_chk
ic*RzizcC*R.
Fp:4:
__builtin___sprintf_chk
ic*RizcC*R.
Fp:3:
__builtin___vsnprintf_chk
ic*RzizcC*Ra
FP:4:
__builtin___vsprintf_chk
ic*RizcC*Ra
FP:3:
__builtin___fprintf_chk
iP*RicC*R.
Fp:2:
__builtin___printf_chk
iicC*R.
Fp:1:
__builtin___vfprintf_chk
iP*RicC*Ra
FP:2:
__builtin___vprintf_chk
iicC*Ra
FP:1:
__builtin_unpredictable
__builtin_expect
LiLiLi
__builtin_expect_with_probability
LiLiLid
__builtin_prefetch
vvC*.
__builtin_readcyclecounter
ULLi
__builtin_trap
__builtin_verbose_trap
vcC*
__builtin_debugtrap
__builtin_unreachable
__builtin_shufflevector
__builtin_convertvector
__builtin_alloca
__builtin_alloca_uninitialized
__builtin_alloca_with_align
v*zIz
__builtin_alloca_with_align_uninitialized
__builtin_call_with_static_chain
__builtin_nondeterministic_value
__builtin_elementwise_abs
__builtin_elementwise_max
__builtin_elementwise_min
__builtin_elementwise_ceil
__builtin_elementwise_cos
__builtin_elementwise_exp
__builtin_elementwise_exp2
__builtin_elementwise_floor
__builtin_elementwise_log
__builtin_elementwise_log2
__builtin_elementwise_log10
__builtin_elementwise_pow
__builtin_elementwise_roundeven
__builtin_elementwise_round
__builtin_elementwise_rint
__builtin_elementwise_nearbyint
__builtin_elementwise_sin
__builtin_elementwise_trunc
__builtin_elementwise_canonicalize
__builtin_elementwise_copysign
__builtin_elementwise_fma
__builtin_elementwise_add_sat
__builtin_elementwise_sub_sat
__builtin_reduce_max
__builtin_reduce_min
__builtin_reduce_xor
__builtin_reduce_or
__builtin_reduce_and
__builtin_reduce_add
__builtin_reduce_mul
__builtin_matrix_transpose
__builtin_matrix_column_major_load
__builtin_matrix_column_major_store
__sync_fetch_and_add
__sync_fetch_and_add_1
ccD*c.
__sync_fetch_and_add_2
ssD*s.
__sync_fetch_and_add_4
iiD*i.
__sync_fetch_and_add_8
LLiLLiD*LLi.
__sync_fetch_and_add_16
LLLiLLLiD*LLLi.
__sync_fetch_and_sub
__sync_fetch_and_sub_1
__sync_fetch_and_sub_2
__sync_fetch_and_sub_4
__sync_fetch_and_sub_8
__sync_fetch_and_sub_16
__sync_fetch_and_or
__sync_fetch_and_or_1
__sync_fetch_and_or_2
__sync_fetch_and_or_4
__sync_fetch_and_or_8
__sync_fetch_and_or_16
__sync_fetch_and_and
__sync_fetch_and_and_1
__sync_fetch_and_and_2
__sync_fetch_and_and_4
__sync_fetch_and_and_8
__sync_fetch_and_and_16
__sync_fetch_and_xor
__sync_fetch_and_xor_1
__sync_fetch_and_xor_2
__sync_fetch_and_xor_4
__sync_fetch_and_xor_8
__sync_fetch_and_xor_16
__sync_fetch_and_nand
__sync_fetch_and_nand_1
__sync_fetch_and_nand_2
__sync_fetch_and_nand_4
__sync_fetch_and_nand_8
__sync_fetch_and_nand_16
__sync_add_and_fetch
__sync_add_and_fetch_1
__sync_add_and_fetch_2
__sync_add_and_fetch_4
__sync_add_and_fetch_8
__sync_add_and_fetch_16
__sync_sub_and_fetch
__sync_sub_and_fetch_1
__sync_sub_and_fetch_2
__sync_sub_and_fetch_4
__sync_sub_and_fetch_8
__sync_sub_and_fetch_16
__sync_or_and_fetch
__sync_or_and_fetch_1
__sync_or_and_fetch_2
__sync_or_and_fetch_4
__sync_or_and_fetch_8
__sync_or_and_fetch_16
__sync_and_and_fetch
__sync_and_and_fetch_1
__sync_and_and_fetch_2
__sync_and_and_fetch_4
__sync_and_and_fetch_8
__sync_and_and_fetch_16
__sync_xor_and_fetch
__sync_xor_and_fetch_1
__sync_xor_and_fetch_2
__sync_xor_and_fetch_4
__sync_xor_and_fetch_8
__sync_xor_and_fetch_16
__sync_nand_and_fetch
__sync_nand_and_fetch_1
__sync_nand_and_fetch_2
__sync_nand_and_fetch_4
__sync_nand_and_fetch_8
__sync_nand_and_fetch_16
__sync_bool_compare_and_swap
__sync_bool_compare_and_swap_1
bcD*cc.
__sync_bool_compare_and_swap_2
bsD*ss.
__sync_bool_compare_and_swap_4
biD*ii.
__sync_bool_compare_and_swap_8
bLLiD*LLiLLi.
__sync_bool_compare_and_swap_16
bLLLiD*LLLiLLLi.
__sync_val_compare_and_swap
__sync_val_compare_and_swap_1
ccD*cc.
__sync_val_compare_and_swap_2
ssD*ss.
__sync_val_compare_and_swap_4
iiD*ii.
__sync_val_compare_and_swap_8
LLiLLiD*LLiLLi.
__sync_val_compare_and_swap_16
LLLiLLLiD*LLLiLLLi.
__sync_lock_test_and_set
__sync_lock_test_and_set_1
__sync_lock_test_and_set_2
__sync_lock_test_and_set_4
__sync_lock_test_and_set_8
__sync_lock_test_and_set_16
__sync_lock_release
__sync_lock_release_1
vcD*.
__sync_lock_release_2
vsD*.
__sync_lock_release_4
viD*.
__sync_lock_release_8
vLLiD*.
__sync_lock_release_16
vLLLiD*.
__sync_swap
__sync_swap_1
__sync_swap_2
__sync_swap_4
__sync_swap_8
__sync_swap_16
__c11_atomic_init
__c11_atomic_load
__c11_atomic_store
__c11_atomic_exchange
__c11_atomic_compare_exchange_strong
__c11_atomic_compare_exchange_weak
__c11_atomic_fetch_add
__c11_atomic_fetch_sub
__c11_atomic_fetch_and
__c11_atomic_fetch_or
__c11_atomic_fetch_xor
__c11_atomic_fetch_nand
__c11_atomic_fetch_max
__c11_atomic_fetch_min
__c11_atomic_thread_fence
__c11_atomic_signal_fence
__c11_atomic_is_lock_free
__atomic_load
__atomic_load_n
__atomic_store
__atomic_store_n
__atomic_exchange
__atomic_exchange_n
__atomic_compare_exchange
__atomic_compare_exchange_n
__atomic_fetch_add
__atomic_fetch_sub
__atomic_fetch_and
__atomic_fetch_or
__atomic_fetch_xor
__atomic_fetch_nand
__atomic_add_fetch
__atomic_sub_fetch
__atomic_and_fetch
__atomic_or_fetch
__atomic_xor_fetch
__atomic_max_fetch
__atomic_min_fetch
__atomic_nand_fetch
__atomic_test_and_set
bvD*i
__atomic_clear
vvD*i
__atomic_thread_fence
__atomic_signal_fence
__atomic_always_lock_free
bzvCD*
__atomic_is_lock_free
__opencl_atomic_init
__opencl_atomic_load
__opencl_atomic_store
__opencl_atomic_exchange
__opencl_atomic_compare_exchange_strong
__opencl_atomic_compare_exchange_weak
__opencl_atomic_fetch_add
__opencl_atomic_fetch_sub
__opencl_atomic_fetch_and
__opencl_atomic_fetch_or
__opencl_atomic_fetch_xor
__opencl_atomic_fetch_min
__opencl_atomic_fetch_max
__atomic_fetch_min
__atomic_fetch_max
__hip_atomic_load
__hip_atomic_store
__hip_atomic_compare_exchange_weak
__hip_atomic_compare_exchange_strong
__hip_atomic_exchange
__hip_atomic_fetch_add
__hip_atomic_fetch_sub
__hip_atomic_fetch_and
__hip_atomic_fetch_or
__hip_atomic_fetch_xor
__hip_atomic_fetch_min
__hip_atomic_fetch_max
__sync_synchronize
__sync_fetch_and_min
iiD*i
__sync_fetch_and_max
__sync_fetch_and_umin
UiUiD*Ui
__sync_fetch_and_umax
__builtin_abort
__builtin_index
__builtin_rindex
__warn_memset_zero_len
_alloca
__annotation
wC*.
__assume
_bittest
UcNiC*Ni
_bittestandcomplement
UcNi*Ni
_bittestandreset
_bittestandset
_bittest64
UcWiC*Wi
_bittestandcomplement64
UcWi*Wi
_bittestandreset64
_bittestandset64
_byteswap_ushort
_byteswap_ulong
UNiUNi
_byteswap_uint64
ULLiULLi
__debugbreak
__exception_code
_exception_code
__exception_info
_exception_info
__abnormal_termination
_abnormal_termination
__GetExceptionInfo
zntu
_InterlockedAnd8
ccD*c
_InterlockedAnd16
ssD*s
_InterlockedAnd
NiNiD*Ni
_InterlockedCompareExchange8
ccD*cc
_InterlockedCompareExchange16
ssD*ss
_InterlockedCompareExchange
NiNiD*NiNi
_InterlockedCompareExchange64
LLiLLiD*LLiLLi
_InterlockedCompareExchangePointer
v*v*D*v*v*
_InterlockedCompareExchangePointer_nf
_InterlockedDecrement16
ssD*
_InterlockedDecrement
NiNiD*
_InterlockedExchange
_InterlockedExchange8
_InterlockedExchange16
_InterlockedExchangeAdd8
_InterlockedExchangeAdd16
_InterlockedExchangeAdd
_InterlockedExchangePointer
v*v*D*v*
_InterlockedExchangeSub8
_InterlockedExchangeSub16
_InterlockedExchangeSub
_InterlockedIncrement16
_InterlockedIncrement
_InterlockedOr8
_InterlockedOr16
_InterlockedOr
_InterlockedXor8
_InterlockedXor16
_InterlockedXor
_interlockedbittestandreset
UcNiD*Ni
_interlockedbittestandreset64
UcWiD*Wi
_interlockedbittestandreset_acq
_interlockedbittestandreset_nf
_interlockedbittestandreset_rel
_interlockedbittestandset
_interlockedbittestandset64
_interlockedbittestandset_acq
_interlockedbittestandset_nf
_interlockedbittestandset_rel
__iso_volatile_load8
ccCD*
__iso_volatile_load16
ssCD*
__iso_volatile_load32
iiCD*
__iso_volatile_load64
LLiLLiCD*
__iso_volatile_store8
vcD*c
__iso_volatile_store16
vsD*s
__iso_volatile_store32
viD*i
__iso_volatile_store64
vLLiD*LLi
__noop
__lzcnt16
__lzcnt
UiUi
__lzcnt64
__popcnt16
__popcnt
__popcnt64
_ReturnAddress
_rotl8
_rotl16
UsUsUc
_rotl
UiUii
_lrotl
UNiUNii
_rotl64
UWiUWii
_rotr8
_rotr16
_rotr
_lrotr
_rotr64
__va_start
vc**.
__fastfail
_setjmpex
va_start
va_end
va_copy
abort
calloc
exit
_Exit
malloc
realloc
free
strtod
dcC*c**
strtof
fcC*c**
strtold
LdcC*c**
strtol
LicC*c**i
strtoll
LLicC*c**i
strtoul
ULicC*c**i
strtoull
ULLicC*c**i
aligned_alloc
memcpy
memcmp
memmove
strcpy
strncpy
strcmp
strncmp
strcat
strncat
strxfrm
zc*cC*z
memchr
strchr
strcspn
strpbrk
strrchr
strspn
strstr
strtok
memset
strerror
strlen
printf
icC*.
fp:0:
fprintf
iP*cC*.
fp:1:
snprintf
ic*zcC*.
fp:2:
sprintf
ic*cC*.
vprintf
icC*a
fP:0:
vfprintf
iP*cC*a
fP:1:
vsnprintf
ic*zcC*a
fP:2:
vsprintf
ic*cC*a
scanf
fs:0:
fscanf
fs:1:
sscanf
vscanf
fS:0:
vfscanf
fS:1:
vsscanf
fopen
P*cC*cC*
fread
zv*zzP*
fwrite
zvC*zzP*
isalnum
isalpha
isblank
iscntrl
isdigit
isgraph
islower
isprint
ispunct
isspace
isupper
isxdigit
tolower
toupper
wcschr
wcscmp
wcslen
wcsncmp
wmemchr
wmemcmp
wmemcpy
wmemmove
setjmp
longjmp
alloca
memalign
memccpy
v*v*vC*iz
mempcpy
stpcpy
stpncpy
strdup
strndup
index
rindex
bzero
bcmp
strcasecmp
strncasecmp
_exit
vfork
pthread_create
fC<2,3>
_setjmp
__sigsetjmp
iSJi
sigsetjmp
savectx
getcontext
_longjmp
siglongjmp
vSJi
strlcpy
strlcat
objc_msgSend
GGH.
objc_msgSend_fpret
LdGH.
objc_msgSend_fp2ret
XLdGH.
objc_msgSend_stret
vGH.
objc_msgSendSuper
GM*H.
objc_msgSendSuper_stret
vM*H.
objc_getClass
GcC*
objc_getMetaClass
objc_enumerationMutation
objc_read_weak
objc_assign_weak
GGG*
objc_assign_ivar
GGGY
objc_assign_global
objc_assign_strongCast
objc_exception_extract
objc_exception_try_enter
objc_exception_try_exit
objc_exception_match
objc_exception_throw
objc_sync_enter
objc_sync_exit
__builtin_objc_memmove_collectable
NSLog
NSLogv
atan2
atan2f
atan2l
labs
llabs
copysign
copysignf
copysignl
fabs
fabsf
fabsl
finite
finitef
finitel
__finite
__finitef
__finitel
fmod
fmodf
fmodl
frexp
frexpf
frexpl
ldexp
ldexpf
ldexpl
modf
modff
modfl
nanf
nanl
powf
powl
acos
acosf
acosl
acosh
acoshf
acoshl
asin
asinf
asinl
asinh
asinhf
asinhl
atan
atanf
atanl
atanh
atanhf
atanhl
cbrt
cbrtf
cbrtl
ceil
ceilf
ceill
cosf
cosl
cosh
coshf
coshl
erff
erfl
erfc
erfcf
erfcl
expf
expl
exp2
exp2f
exp2l
expm1
expm1f
expm1l
fdim
fdimf
fdiml
floor
floorf
floorl
fmaf
fmal
fmax
fmaxf
fmaxl
fmin
fminf
fminl
hypot
hypotf
hypotl
ilogb
ilogbf
ilogbl
lgamma
lgammaf
lgammal
llrint
llrintf
llrintl
llround
llroundf
llroundl
logf
logl
log10
log10f
log10l
log1p
log1pf
log1pl
log2
log2f
log2l
logb
logbf
logbl
lrint
lrintf
lrintl
lround
lroundf
lroundl
nearbyint
nearbyintf
nearbyintl
nextafter
nextafterf
nextafterl
nexttoward
nexttowardf
nexttowardl
remainder
remainderf
remainderl
remquo
remquof
remquol
rint
rintf
rintl
round
roundf
roundl
roundeven
roundevenf
roundevenl
scalbln
scalblnf
scalblnl
scalbn
scalbnf
scalbnl
sinf
sinl
sinh
sinhf
sinhl
sqrt
sqrtf
sqrtl
tanf
tanl
tanh
tanhf
tanhl
tgamma
tgammaf
tgammal
trunc
truncf
truncl
cabs
cabsf
cabsl
cacos
cacosf
cacosl
cacosh
cacoshf
cacoshl
carg
cargf
cargl
casin
casinf
casinl
casinh
casinhf
casinhl
catan
catanf
catanl
catanh
catanhf
catanhl
ccos
ccosf
ccosl
ccosh
ccoshf
ccoshl
cexp
cexpf
cexpl
cimag
cimagf
cimagl
conj
conjf
conjl
clog
clogf
clogl
cproj
cprojf
cprojl
cpow
cpowf
cpowl
creal
crealf
creall
csin
csinf
csinl
csinh
csinhf
csinhl
csqrt
csqrtf
csqrtl
ctan
ctanf
ctanl
ctanh
ctanhf
ctanhl
__sinpi
__sinpif
__cospi
__cospif
__tanpi
__tanpif
__exp10
__exp10f
_Block_object_assign
vv*vC*iC
_Block_object_dispose
vvC*iC
addressof
v*v&
zfncThE
__addressof
zfncTE
as_const
v&v&
forward
forward_like
move
move_if_noexcept
__builtin_annotation
__builtin_assume
__builtin_assume_separate_storage
vvCD*vCD*
__builtin_addcb
UcUcCUcCUcCUc*
__builtin_addcs
UsUsCUsCUsCUs*
__builtin_addc
UiUiCUiCUiCUi*
__builtin_addcl
ULiULiCULiCULiCULi*
__builtin_addcll
ULLiULLiCULLiCULLiCULLi*
__builtin_subcb
__builtin_subcs
__builtin_subc
__builtin_subcl
__builtin_subcll
__builtin_add_overflow
__builtin_sub_overflow
__builtin_mul_overflow
__builtin_uadd_overflow
bUiCUiCUi*
__builtin_uaddl_overflow
bULiCULiCULi*
__builtin_uaddll_overflow
bULLiCULLiCULLi*
__builtin_usub_overflow
__builtin_usubl_overflow
__builtin_usubll_overflow
__builtin_umul_overflow
__builtin_umull_overflow
__builtin_umulll_overflow
__builtin_sadd_overflow
bSiCSiCSi*
__builtin_saddl_overflow
bSLiCSLiCSLi*
__builtin_saddll_overflow
bSLLiCSLLiCSLLi*
__builtin_ssub_overflow
__builtin_ssubl_overflow
__builtin_ssubll_overflow
__builtin_smul_overflow
__builtin_smull_overflow
__builtin_smulll_overflow
__builtin_addressof
__builtin_function_start
__builtin_operator_new
__builtin_operator_delete
__builtin_char_memchr
c*cC*iz
__builtin_dump_struct
__builtin_preserve_access_index
__builtin_is_aligned
bvC*z
__builtin_align_up
v*vC*z
__builtin_align_down
__builtin___get_unsafe_stack_start
__builtin___get_unsafe_stack_bottom
__builtin___get_unsafe_stack_top
__builtin___get_unsafe_stack_ptr
__builtin_nontemporal_store
__builtin_nontemporal_load
__builtin_coro_resume
__builtin_coro_destroy
__builtin_coro_done
__builtin_coro_promise
v*v*IiIb
__builtin_coro_size
__builtin_coro_align
__builtin_coro_frame
__builtin_coro_noop
__builtin_coro_free
__builtin_coro_id
v*Iiv*v*v*
__builtin_coro_alloc
__builtin_coro_begin
__builtin_coro_end
bv*Ib
__builtin_coro_suspend
__builtin_ptrauth_strip
v*v*i
__builtin_ptrauth_blend_discriminator
zv*i
__builtin_ptrauth_sign_constant
v*v*iv*
tncE
__builtin_ptrauth_sign_unauthenticated
__builtin_ptrauth_sign_generic_data
zv*v*
__builtin_ptrauth_auth_and_resign
v*v*iv*iv*
__builtin_ptrauth_auth
__builtin_ptrauth_string_discriminator
__builtin_virtual_member_address
v*v*v*
__builtin_load_member_function_pointer
read_pipe
write_pipe
reserve_read_pipe
reserve_write_pipe
commit_write_pipe
commit_read_pipe
sub_group_reserve_read_pipe
sub_group_reserve_write_pipe
sub_group_commit_read_pipe
sub_group_commit_write_pipe
work_group_reserve_read_pipe
work_group_reserve_write_pipe
work_group_commit_read_pipe
work_group_commit_write_pipe
get_pipe_num_packets
get_pipe_max_packets
enqueue_kernel
get_kernel_work_group_size
get_kernel_preferred_work_group_size_multiple
get_kernel_max_sub_group_size_for_ndrange
get_kernel_sub_group_count_for_ndrange
to_global
to_local
to_private
__builtin_store_half
vdh*
__builtin_store_halff
vfh*
__builtin_load_half
dhC*
__builtin_load_halff
fhC*
__builtin_os_log_format_buffer_size
zcC*.
p:0:nutE
__builtin_os_log_format
v*v*cC*.
p:0:nt
__builtin_get_device_side_mangled_name
cC*.
__builtin_hlsl_wave_active_count_bits
__builtin_hlsl_create_handle
v*Uc
__xray_customevent
vcC*z
__xray_typedevent
vzcC*z
__builtin_ms_va_start
vc*&.
__builtin_ms_va_end
vc*&
__builtin_ms_va_copy
vc*&c*&
__arithmetic_fence
__builtin_tmo_get_id
zvC*
__builtin_tmo_get_size
__builtin_tmo_get_flags
__builtin_tmo_get_version
__builtin_tmo_get_alignment
__builtin_tmo_get_xnu_description
cC*vC*
__builtin_tmo_get_json_description
(null)
<can't format argument>
identifier
Lexical or Preprocessor Issue
Semantic Issue
Lambda Issue
Parse Issue
ARC Semantic Issue
ARC and @properties
ARC Casting Rules
ARC Parse Issue
ARC Weak References
ARC Restrictions
OpenMP Issue
Inline Assembly Issue
AST Deserialization Issue
Firebloom Pointer Attributes Issue
Modules Issue
Coroutines Issue
Concepts Issue
Dependency Directive Source Scanner Issue
Backend Issue
SourceMgr Reported Issue
Refactoring Continuation Issue
API Notes Issue
Related Result Type Issue
Rename Issue
AST Serialization Issue
Nullability Issue
Generics Issue
User-Defined Issue
Refactoring Invocation Issue
VTable ABI Issue
Value Conversion Issue
Documentation Issue
ARC Retain Cycle
Deprecations
Format String Issue
Cocoa API Issue
#pragma message Directive
Instrumentation Issue
Unused Entity Issue
<scratch space>
More fine grained information about the stack layout is available by adding the
`-Rpass-analysis=stack-frame-layout` command-line flag to the compiler
invocation.
The diagnostic information can be saved to a file in a machine readable format,
like YAML by adding the `-foptimization-record-file=<file>` command-line flag.
Results can be filtered by function name by passing
`-mllvm -filter-print-funcs=foo`, where `foo` is the target function's name.
   .. code-block: console
      clang -c a.cpp -Rpass-analysis=stack-frame-layout -mllvm -filter-print-funcs=foo
   .. code-block: console
      clang -c a.cpp -Rpass-analysis=stack-frame-layout -foptimization-record-file=<file>
The warning is issued if the number of pre-processor tokens exceeds
the token limit, which can be set in three ways:
1. As a limit at a specific point in a file, using the ``clang max_tokens_here``
   pragma:
   .. code-block: c++
      #pragma clang max_tokens_here 1234
2. As a per-translation unit limit, using the ``-fmax-tokens=`` command-line
   flag:
   .. code-block: console
      clang -c a.cpp -fmax-tokens=1234
3. As a per-translation unit limit using the ``clang max_tokens_total`` pragma,
   which works like and overrides the ``-fmax-tokens=`` flag:
   .. code-block: c++
      #pragma clang max_tokens_total 1234
These limits can be helpful in limiting code growth through included files.
Setting a token limit of zero means no limit.
Note that the warning is disabled by default, so -Wmax-tokens must be used
in addition with the pragmas or -fmax-tokens flag to get any warnings.
**Note:** enabling this warning in C will change the semantic behavior of the
program by treating all string literals as having type ``const char *``
instead of ``char *``. This can cause unexpected behaviors with type-sensitive
constructs like ``_Generic``.
file-search
NumDirLookups
Number of directory lookups.
NumDirCacheMisses
Number of directory cache misses.
NumFileLookups
Number of file lookups.
NumFileCacheMisses
Number of file cache misses.
auto
char
default
else
float
goto
_ExtInt
_BitInt
long
return
sizeof
struct
typedef
union
unsigned
_Alignof
_Generic
_Static_assert
__objc_yes
catch
class
const_cast
dynamic_cast
export
mutable
namespace
operator
reinterpret_cast
this
typename
using
virtual
wchar_t
and_eq
bitand
bitor
compl
not_eq
or_eq
xor_eq
alignas
alignof
char16_t
constexpr
decltype
nullptr
static_assert
thread_local
co_return
co_yield
module
consteval
constinit
concept
char8_t
_Float16
typeof_unqual
_Accum
_Sat
_Decimal64
__alignof
__attribute
__builtin_choose_expr
__builtin_offsetof
__builtin_FILE_NAME
__builtin_FUNCTION
__builtin_COLUMN
__builtin_va_arg
__ibm128
__int128
__thread
__PRETTY_FUNCTION__
__auto_type
__FUNCDNAME__
__FUNCSIG__
L__FUNCTION__
L__FUNCSIG__
__is_sealed
__is_destructible
__is_trivially_destructible
__is_nothrow_destructible
__is_nothrow_assignable
__is_constructible
__is_assignable
__has_nothrow_move_assign
__has_trivial_move_assign
__has_trivial_move_constructor
__has_nothrow_copy
__has_trivial_copy
__has_virtual_destructor
__is_base_of
__is_convertible_to
__is_empty
__is_literal
__is_polymorphic
__is_trivial
__is_trivially_copyable
__is_union
__add_pointer
__add_rvalue_reference
__remove_const
__remove_extent
__remove_pointer
__remove_restrict
__remove_volatile
__underlying_type
__is_trivially_relocatable
__is_bounded_array
__is_nullptr
__is_referenceable
__reference_binds_to_temporary
__is_rvalue_expr
__is_void
__is_array
__is_lvalue_reference
__is_rvalue_reference
__is_fundamental
__is_member_object_pointer
__is_member_pointer
__is_const
__array_rank
__is_same_as
__module_private__
__builtin_ptrauth_struct_key
__builtin_ptrauth_schema_key
__builtin_ptrauth_schema_options
__builtin_xnu_type_summary
__builtin_tmo_get_type_data
__builtin_tmo_get_type_descriptor
__declspec
__thiscall
__forceinline
__unaligned
__super
__global
__private
__generic
generic
__kernel
__read_only
__write_only
read_only
write_only
__builtin_astype
image1d_t
image1d_array_t
image1d_buffer_t
image2d_array_msaa_t
image2d_array_msaa_depth_t
addrspace_cast
cbuffer
tbuffer
groupshared
__builtin_omp_required_simd_align
__pascal
__pixel
__bool
__bf16
__bridge
__alignof__
__asm
__asm__
__attribute__
__complex
__complex__
__const__
__decltype
__inline
__nullptr
__real__
__restrict__
__signed__
__typeof__
__volatile__
_Nullable
_Nullable_result
__uptr
__try
__finally
__leave
__int64
__if_exists
__if_not_exists
__single_inheritance
__virtual_inheritance
__interface
__int8
_alignof
_declspec
_fastcall
_finally
_inline
_int8
_int16
_int64
_multiple_inheritance
_ptr32
_restrict
_stdcall
_vectorcall
_unaligned
_w64
__char32_t
__builtin_available
__builtin_sycl_unique_stable_name
__arm_in
not_keyword
compatibility_alias
defs
encode
implementation
interface
protocol
selector
finally
synchronized
autoreleasepool
package
required
optional
synthesize
dynamic
available
FILE
jmp_buf
sigjmp_buf
ucontext_t
float_t
double_t
__unknown_anytype
__ieee128
elif
line
endif
ident
ifdef
undef
assert
ifndef
elifdef
elifndef
__public_macro
__private_macro
c++11
c++14
c++17
c++20
ptrauth
framework 
UTF-32 (BE)
UTF-32 (LE)
UTF-16 (BE)
UTF-16 (LE)
UTF-7
UTF-1
UTF-EBCDIC
SCSU
BOCU-1
GB-18030
<<<INVALID BUFFER>>
<<<<<INVALID SOURCE LOCATION>>>>>
<<<<INVALID BUFFER>>>>
<invalid loc>
<invalid buffer>
_REENTRANT
_GNU_SOURCE
mips64r6
future
_THREAD_SAFE
_XOPEN_SOURCE
_FILE_OFFSET_BITS
_LARGEFILE64_SOURCE
vector
small
rand
_FORTIFY_SOURCE
powerpc
ppc32
medium
i386
i486
i586
i686
auto
break
case
char
const
continue
default
double
else
enum
extern
float
goto
_ExtInt
_BitInt
long
register
return
short
signed
sizeof
static
struct
switch
typedef
union
unsigned
void
volatile
while
_Alignas
_Alignof
_Atomic
_Bool
_Complex
_Generic
_Imaginary
_Noreturn
_Static_assert
_Thread_local
__func__
__objc_yes
__objc_no
__ptrauth
__ptrauth_restricted_intptr
bool
catch
class
const_cast
delete
dynamic_cast
explicit
export
false
friend
mutable
namespace
operator
private
protected
public
reinterpret_cast
static_cast
template
this
throw
true
typename
typeid
using
virtual
wchar_t
restrict
inline
alignas
alignof
char16_t
char32_t
constexpr
decltype
noexcept
nullptr
static_assert
thread_local
co_await
co_return
co_yield
module
import
consteval
constinit
concept
requires
char8_t
_Float16
typeof
typeof_unqual
_Accum
_Fract
_Sat
_Decimal32
_Decimal64
_Decimal128
__null
__alignof
__attribute
__builtin_choose_expr
__builtin_offsetof
__builtin_FILE
__builtin_FILE_NAME
__builtin_FUNCTION
__builtin_FUNCSIG
__builtin_LINE
__builtin_COLUMN
__builtin_source_location
__builtin_types_compatible_p
__builtin_va_arg
__extension__
__float128
__ibm128
__imag
__int128
__label__
__real
__thread
__FUNCTION__
__PRETTY_FUNCTION__
__auto_type
__FUNCDNAME__
__FUNCSIG__
L__FUNCTION__
L__FUNCSIG__
__is_interface_class
__is_sealed
__is_destructible
__is_trivially_destructible
__is_nothrow_destructible
__is_nothrow_assignable
__is_constructible
__is_nothrow_constructible
__is_assignable
__has_nothrow_move_assign
__has_trivial_move_assign
__has_trivial_move_constructor
__has_nothrow_assign
__has_nothrow_copy
__has_nothrow_constructor
__has_trivial_assign
__has_trivial_copy
__has_trivial_constructor
__has_trivial_destructor
__has_virtual_destructor
__is_abstract
__is_aggregate
__is_base_of
__is_class
__is_convertible_to
__is_empty
__is_enum
__is_final
__is_literal
__is_pod
__is_polymorphic
__is_standard_layout
__is_trivial
__is_trivially_assignable
__is_trivially_constructible
__is_trivially_copyable
__is_union
__has_unique_object_representations
__add_lvalue_reference
__add_pointer
__add_rvalue_reference
__decay
__make_signed
__make_unsigned
__remove_all_extents
__remove_const
__remove_cv
__remove_cvref
__remove_extent
__remove_pointer
__remove_reference_t
__remove_restrict
__remove_volatile
__underlying_type
__is_trivially_relocatable
__is_trivially_equality_comparable
__is_bounded_array
__is_unbounded_array
__is_nullptr
__is_scoped_enum
__is_referenceable
__can_pass_in_regs
__reference_binds_to_temporary
__is_lvalue_expr
__is_rvalue_expr
__is_arithmetic
__is_floating_point
__is_integral
__is_complete_type
__is_void
__is_array
__is_function
__is_reference
__is_lvalue_reference
__is_rvalue_reference
__is_fundamental
__is_object
__is_scalar
__is_compound
__is_pointer
__is_member_object_pointer
__is_member_function_pointer
__is_member_pointer
__is_const
__is_volatile
__is_signed
__is_unsigned
__is_same
__is_convertible
__array_rank
__array_extent
__private_extern__
__module_private__
__builtin_ptrauth_type_discriminator
__builtin_ptrauth_struct_key
__builtin_ptrauth_struct_disc
__builtin_ptrauth_has_authentication
__builtin_ptrauth_schema_key
__builtin_ptrauth_schema_is_address_discriminated
__builtin_ptrauth_schema_extra_discriminator
__builtin_ptrauth_schema_options
__builtin_xnu_type_signature
__builtin_xnu_type_summary
__builtin_xnu_types_compatible
__builtin_tmo_get_type_data
__builtin_tmo_get_type_descriptor
__declspec
__cdecl
__stdcall
__fastcall
__thiscall
__regcall
__vectorcall
__forceinline
__unaligned
__super
__global
__local
__constant
__private
__generic
__kernel
__read_only
__write_only
__read_write
__builtin_astype
vec_step
image1d_t
image1d_array_t
image1d_buffer_t
image2d_t
image2d_array_t
image2d_depth_t
image2d_array_depth_t
image2d_msaa_t
image2d_array_msaa_t
image2d_msaa_depth_t
image2d_array_msaa_depth_t
image3d_t
pipe
addrspace_cast
__noinline__
cbuffer
tbuffer
groupshared
__builtin_omp_required_simd_align
__pascal
__vector
__pixel
__bool
__bf16
half
__bridge
__bridge_transfer
__bridge_retained
__bridge_retain
__covariant
__contravariant
__kindof
_Nonnull
_Nullable
_Nullable_result
_Null_unspecified
__funcref
__ptr64
__ptr32
__sptr
__uptr
__w64
__uuidof
__try
__finally
__leave
__int64
__if_exists
__if_not_exists
__single_inheritance
__multiple_inheritance
__virtual_inheritance
__interface
__builtin_convertvector
__builtin_bit_cast
__builtin_available
__builtin_sycl_unique_stable_name
__arm_in
__arm_inout
__arm_locally_streaming
__arm_new
__arm_out
__arm_preserves
__arm_streaming
__arm_streaming_compatible
__unknown_anytype
unknown
code_completion
comment
identifier
raw_identifier
numeric_constant
char_constant
wide_char_constant
utf8_char_constant
utf16_char_constant
utf32_char_constant
string_literal
wide_string_literal
header_name
utf8_string_literal
utf16_string_literal
utf32_string_literal
l_square
r_square
l_paren
r_paren
l_brace
r_brace
period
ellipsis
ampamp
ampequal
star
starequal
plus
plusplus
plusequal
minus
arrow
minusminus
minusequal
tilde
exclaim
exclaimequal
slash
slashequal
percent
percentequal
less
lessless
lessequal
lesslessequal
spaceship
greater
greatergreater
greaterequal
greatergreaterequal
caret
caretequal
pipepipe
pipeequal
question
colon
semi
equal
equalequal
comma
hash
hashhash
hashat
periodstar
arrowstar
coloncolon
lesslessless
greatergreatergreater
caretcaret
annot_cxxscope
annot_typename
annot_template_id
annot_non_type
annot_non_type_undeclared
annot_non_type_dependent
annot_overload_set
annot_primary_expr
annot_decltype
annot_pragma_unused
annot_pragma_vis
annot_pragma_pack
annot_pragma_parser_crash
annot_pragma_captured
annot_pragma_dump
annot_pragma_msstruct
annot_pragma_align
annot_pragma_weak
annot_pragma_weakalias
annot_pragma_redefine_extname
annot_pragma_fp_contract
annot_pragma_fenv_access
annot_pragma_fenv_access_ms
annot_pragma_fenv_round
annot_pragma_float_control
annot_pragma_ms_pointers_to_members
annot_pragma_ms_vtordisp
annot_pragma_ms_pragma
annot_pragma_opencl_extension
annot_attr_openmp
annot_pragma_openmp
annot_pragma_openmp_end
annot_pragma_loop_hint
annot_pragma_fp
annot_pragma_attribute
annot_pragma_riscv
annot_module_include
annot_module_begin
annot_module_end
annot_header_unit
annot_repl_input_end
clang-1600.0.20.10
Apple 
 version 16.0.0
clang-format on
clang-format off
@param
@return
@returns
@throws
@type
@template
@see
@deprecated
@define
@exports
@mods
@private
^[1-9][0-9]?\.
^[1-9][0-9]?\. 
///<
//!<
####
function
Failed to update the prefix delimiter of a raw string: 
Failed to update the suffix delimiter of a raw string: 
Failed to reformat raw string: 
_T("
clang-format.parse_error
Invalid argument
Unsuitable
trailing comma insertion cannot be used with bin packing
Invalid qualifier specified in QualifierOrder
Duplicate qualifier specified in QualifierOrder
Missing type in QualifierOrder
Missing QualifierOrder
__capability
^ IWYU pragma:
foreach
Q_FOREACH
BOOST_FOREACH
KJ_IF_MAYBE
^"(llvm|llvm-c|clang|clang-c)/
^(<|"(gtest|gmock|isl|json)/)
(Test)?$
QT_REQUIRE_VERSION
BOOST_PP_STRINGIZE
CF_SWIFT_NAME
NS_SWIFT_NAME
PP_STRINGIZE
STRINGIZE
^<ext/.*\.h>
([-_](test|unittest))?$
google
PARSE_PARTIAL_TEXT_PROTO
(taze:|^/[ 
]*<|tslint:|@see)
com.google.android.apps.chrome
org.chromium
chromium
mozilla
webkit
microsoft
R"([][A-Za-z0-9_{}#<>%:;.?*+/^&\$|~!=,'-]*)\(
Error adding replacements : 
Set coding style. <string> can be:
1. A preset: LLVM, GNU, Google, Chromium, Microsoft,
   Mozilla, WebKit.
2. 'file' to load style configuration from a
   .clang-format file in one of the parent directories
   of the source file (for stdin, see --assume-filename).
   If no .clang-format file is found, falls back to
   --fallback-style.
   --style=file is the default.
3. 'file:<format_file_path>' to explicitly specify
   the configuration file.
4. "{key: value, ...}" to set specific parameters, e.g.:
   --style="{BasedOnStyle: llvm, IndentWidth: 8}"
guess.h
file
Invalid fallback style "
<command-line>
Error parsing -style: 
Error reading 
Invalid value for -style
.clang-format
_clang-format
Configuration file(s) do(es) not support 
.json
.svh
CGFloat
CGPoint
CGPointMake
CGPointZero
CGRect
CGRectEdge
CGRectInfinite
CGRectMake
CGRectNull
CGRectZero
CGSize
CGSizeMake
CGVector
CGVectorMake
FOUNDATION_EXPORT
FOUNDATION_EXTERN
NSAffineTransform
NSArray
NSAttributedString
NSBlockOperation
NSBundle
NSCache
NSCalendar
NSCharacterSet
NSCountedSet
NSData
NSDataDetector
NSDecimal
NSDecimalNumber
NSDictionary
NSEdgeInsets
NSError
NSErrorDomain
NSHashTable
NSIndexPath
NSIndexSet
NSInteger
NSInvocationOperation
NSLocale
NSMapTable
NSMutableArray
NSMutableAttributedString
NSMutableCharacterSet
NSMutableData
NSMutableDictionary
NSMutableIndexSet
NSMutableOrderedSet
NSMutableSet
NSMutableString
NSNumber
NSNumberFormatter
NSOperation
NSOperationQueue
NSOperationQueuePriority
NSOrderedSet
NSPoint
NSPointerArray
NSQualityOfService
NSRange
NSRect
NSRegularExpression
NSSet
NSSize
NSString
NSTimeZone
NSUInteger
NSURL
NSURLComponents
NSURLQueryItem
NSUUID
NSValue
NS_ASSUME_NONNULL_BEGIN
UIImage
UIView
CSharp
Objective-C
Java
JavaScript
Json
Proto
TableGen
TextProto
Verilog
Unknown
/* clang-format on */
/* clang-format off */
Language
Google
Chromium
Mozilla
WebKit
Microsoft
# BasedOnStyle
BasedOnStyle
Unknown value for BasedOnStyle: 
AlignEscapedNewlinesLeft
AllowAllConstructorInitializersOnNextLine
BreakBeforeInheritanceComma
BreakConstructorInitializersBeforeComma
ConstructorInitializerAllOnOneLineOrOnePerLine
DeriveLineEnding
DerivePointerBinding
IndentFunctionDeclarationAfterType
IndentRequires
PointerBindsToType
SpaceAfterControlStatementKeyword
SpaceInEmptyParentheses
SpacesInConditionalStatement
SpacesInCStyleCastParentheses
SpacesInParentheses
UseCRLF
AccessModifierOffset
AlignAfterOpenBracket
AlignArrayOfStructures
AlignConsecutiveAssignments
AlignConsecutiveBitFields
AlignConsecutiveDeclarations
AlignConsecutiveMacros
AlignConsecutiveShortCaseStatements
AlignEscapedNewlines
AlignOperands
AlignTrailingComments
AllowAllArgumentsOnNextLine
AllowAllParametersOfDeclarationOnNextLine
AllowShortBlocksOnASingleLine
AllowShortCaseLabelsOnASingleLine
AllowShortEnumsOnASingleLine
AllowShortFunctionsOnASingleLine
AllowShortIfStatementsOnASingleLine
AllowShortLambdasOnASingleLine
AllowShortLoopsOnASingleLine
AlwaysBreakAfterDefinitionReturnType
AlwaysBreakAfterReturnType
AlwaysBreakBeforeMultilineStrings
AlwaysBreakTemplateDeclarations
AttributeMacros
BinPackArguments
BinPackParameters
BitFieldColonSpacing
BracedInitializerIndentWidth
BraceWrapping
BreakAfterAttributes
BreakAfterJavaFieldAnnotations
BreakArrays
BreakBeforeBinaryOperators
BreakBeforeConceptDeclarations
BreakBeforeBraces
BreakBeforeInlineASMColon
BreakBeforeTernaryOperators
BreakConstructorInitializers
BreakInheritanceList
BreakStringLiterals
ColumnLimit
CommentPragmas
CompactNamespaces
ConstructorInitializerIndentWidth
ContinuationIndentWidth
Cpp11BracedListStyle
DerivePointerAlignment
DisableFormat
EmptyLineAfterAccessModifier
EmptyLineBeforeAccessModifier
ExperimentalAutoDetectBinPacking
FixNamespaceComments
ForEachMacros
IfMacros
IncludeBlocks
IncludeCategories
IncludeIsMainRegex
IncludeIsMainSourceRegex
IndentAccessModifiers
IndentCaseBlocks
IndentCaseLabels
IndentExternBlock
IndentGotoLabels
IndentPPDirectives
IndentRequiresClause
IndentWidth
IndentWrappedFunctionNames
InsertBraces
InsertNewlineAtEOF
InsertTrailingCommas
IntegerLiteralSeparator
JavaImportGroups
JavaScriptQuotes
JavaScriptWrapImports
KeepEmptyLinesAtTheStartOfBlocks
KeepEmptyLinesAtEOF
LambdaBodyIndentation
LineEnding
MacroBlockBegin
MacroBlockEnd
MaxEmptyLinesToKeep
NamespaceIndentation
NamespaceMacros
ObjCBinPackProtocolList
ObjCBlockIndentWidth
ObjCBreakBeforeNestedBlockParam
ObjCSpaceAfterProperty
ObjCSpaceBeforeProtocolList
PackConstructorInitializers
PenaltyBreakAssignment
PenaltyBreakBeforeFirstCallParameter
PenaltyBreakComment
PenaltyBreakFirstLessLess
PenaltyBreakOpenParenthesis
PenaltyBreakString
PenaltyBreakTemplateDeclaration
PenaltyExcessCharacter
PenaltyIndentedWhitespace
PenaltyReturnTypeOnItsOwnLine
PointerAlignment
PPIndentWidth
QualifierAlignment
QualifierOrder
RawStringFormats
ReferenceAlignment
ReflowComments
RemoveBracesLLVM
RemoveParentheses
RemoveSemicolon
RequiresClausePosition
RequiresExpressionIndentation
SeparateDefinitionBlocks
ShortNamespaceLines
SortIncludes
SortJavaStaticImport
SortUsingDeclarations
SpaceAfterCStyleCast
SpaceAfterLogicalNot
SpaceAfterTemplateKeyword
SpaceAroundPointerQualifiers
SpaceBeforeAssignmentOperators
SpaceBeforeCaseColon
SpaceBeforeCpp11BracedList
SpaceBeforeCtorInitializerColon
SpaceBeforeInheritanceColon
SpaceBeforeJsonColon
SpaceBeforeParens
SpaceBeforeParensOptions
SpaceBeforeRangeBasedForLoopColon
SpaceBeforeSquareBrackets
SpaceInEmptyBlock
SpacesBeforeTrailingComments
SpacesInAngles
SpacesInContainerLiterals
SpacesInLineCommentPrefix
SpacesInParens
SpacesInParensOptions
SpacesInSquareBrackets
Standard
StatementAttributeLikeMacros
StatementMacros
TabWidth
TypeNames
TypenameMacros
UseTab
VerilogBreakBetweenInstancePorts
WhitespaceSensitiveMacros
Macros
ObjC
-?:\,[]{}#&*!|>'"%@`
0123456789abcdefABCDEF
DontAlign
Left
Right
Middle
Never
ControlStatements
ControlStatementsExceptControlMacros
NonEmptyParentheses
Always
Custom
ControlStatementsExceptForEachMacros
Align
AlwaysBreak
BlockIndent
None
Consecutive
AcrossEmptyLines
AcrossComments
AcrossEmptyLinesAndComments
Enabled
AlignCompound
PadOperators
AlignCaseColons
AlignAfterOperator
Leave
Kind
OverEmptyLines
Empty
Inline
InlineOnly
WithoutElse
OnlyFirstIf
AllIfsAndElse
TopLevel
TopLevelDefinitions
AllDefinitions
MultiLine
Both
Before
After
AfterCaseLabel
AfterClass
AfterControlStatement
AfterEnum
AfterExternBlock
AfterFunction
AfterNamespace
AfterObjCDeclaration
AfterStruct
AfterUnion
BeforeCatch
BeforeElse
BeforeLambdaBody
BeforeWhile
IndentBraces
SplitEmptyFunction
SplitEmptyRecord
SplitEmptyNamespace
NonAssignment
Allowed
Attach
Linux
Stroustrup
Allman
Whitesmiths
OnlyMultiline
BeforeColon
BeforeComma
AfterColon
AfterComma
LogicalBlock
Indent
NoIndent
AfterHash
BeforeHash
Wrapped
Binary
BinaryMinDigits
Decimal
DecimalMinDigits
HexMinDigits
Single
Double
Signature
OuterScope
CRLF
DeriveLF
DeriveCRLF
Inner
Auto
BinPack
CurrentLine
NextLine
NextLineOnly
Delimiters
EnclosingFunctions
CanonicalDelimiter
MultipleParentheses
ReturnStatement
OwnLine
WithPreceding
WithFollowing
SingleLine
Keyword
CaseInsensitive
CaseSensitive
Lexicographic
LexicographicNumeric
Default
AfterControlStatements
AfterForeachMacros
AfterFunctionDefinitionName
AfterFunctionDeclarationName
AfterIfMacros
AfterOverloadedOperator
AfterRequiresInClause
AfterRequiresInExpression
BeforeNonEmptyParentheses
Minimum
Maximum
InCStyleCasts
InConditionalStatements
InEmptyParentheses
Other
c++03
C++03
Cpp03
C++11
Latest
Cpp11
ForIndentation
ForContinuationAndIndentation
AlignWithSpaces
assembly
field
event
method
param
>>>>>>>
^s?[bdho]
^('|``?|\\(\\(
)|[^[:space:]])*)
final
override
CF_CLOSED_ENUM
CF_ENUM
CF_OPTIONS
NS_CLOSED_ENUM
NS_ENUM
NS_ERROR_ENUM
NS_OPTIONS
async
await
declare
from
infer
readonly
yield
abstract
extends
implements
instanceof
native
throws
__except
__has_include
__has_include_next
mark
region
extend
option
repeated
returns
signals
Q_SIGNALS
slots
Q_SLOTS
__CLANG_FORMAT_INTERNAL_IDENT_AFTER_DEFINE__
dollar
base
byte
checked
decimal
delegate
fixed
init
implicit
internal
lock
object
params
stackalloc
sbyte
sealed
unchecked
unsafe
ushort
when
where
always
always_comb
always_ff
always_latch
assign
automatic
before
begin
begin_keywords
bins
binsof
casex
casez
celldefine
checker
clocking
constraint
cover
covergroup
coverpoint
default_decay_time
default_nettype
default_trireg_strength
delay_mode_distributed
delay_mode_path
delay_mode_unit
delay_mode_zero
disable
dist
edge
elsif
end_keywords
endcase
endcelldefine
endchecker
endclass
endclocking
endfunction
endgenerate
endgroup
endinterface
endmodule
endpackage
endprimitive
endprogram
endproperty
endsequence
endspecify
endtable
endtask
forever
fork
generate
highz0
highz1
ifnone
ignore_bins
illegal_bins
initial
inout
inside
interconnect
intersect
join
join_any
join_none
large
localparam
macromodule
matches
negedge
nounconnected_drive
parameter
posedge
primitive
priority
program
pull0
pull1
randc
randcase
randsequence
repeat
resetall
sample
scalared
soft
solve
specify
specparam
strong0
strong1
supply0
supply1
table
tagged
task
timescale
tri0
tri1
triand
trior
trireg
unconnected_drive
undefineall
unique
unique0
uwire
vectored
wand
weak0
weak1
wildcard
wire
with
_himnsuyd
Error while updating namespace end comment: 
Error while adding namespace end comment: 
^/[/*] *(end (of )?)? *(anonymous|unnamed)? *namespace( +([a-zA-Z0-9:_]+))?\.? *(\*/)?$
^/[/*] *(end (of )?)? *(anonymous|unnamed)? *([a-zA-Z0-9_]+)\(([a-zA-Z0-9:_]*)\)\.? *(\*/)?$
^/[/*] *( +([a-zA-Z0-9:_]+))?\.? *(\*/)?$
Error while rearranging Qualifier : 
Error while sorting using declarations: 
typename 
unable to overwrite file %0: %1
New replacement: 
Existing replacement: 
Failed to apply a replacement.
The new replacement's file path is different from the file path of existing replacements
The new replacement overlaps with an existing replacement.
The new insertion has the same insert location as an existing replacement.
Regex
Priority
SortPriority
CaseSensitive
Preserve
Merge
Regroup
Private
.framework/
.system_framework
Frameworks/
PrivateHeaders/
Modules
module.modulemap
module.map
NumIncluded
Number of attempted #includes.
NumMultiIncludeFileOptzn
Number of #includes skipped due to the multi-include optimization.
NumFrameworkLookups
Number of framework lookups.
NumSubFrameworkLookups
Number of subframework lookups.
module_private.map
Headers
<<<<
Allocation failed
.framework
Frameworks
config_macros
conflict
exclude
explicit
export_as
extern
framework
header
link
private
requires
textual
umbrella
module.private.modulemap
size
mtime
framework module
exhaustive
extern_c
no_undeclared_includes
system
swift_infer_import_as_member
PrivateHeaders
break
case
const
continue
double
enum
register
short
signed
static
switch
void
while
_Alignas
_Atomic
_Bool
_Complex
_Imaginary
_Thread_local
__func__
__objc_no
__ptrauth
__ptrauth_restricted_intptr
bool
delete
false
friend
protected
public
static_cast
template
throw
true
typeid
inline
char32_t
noexcept
co_await
import
typeof
_Fract
_Decimal32
_Decimal128
__null
__builtin_FILE
__builtin_FUNCSIG
__builtin_LINE
__builtin_source_location
__builtin_types_compatible_p
__extension__
__float128
__imag
__label__
__real
__FUNCTION__
__is_interface_class
__is_nothrow_constructible
__has_nothrow_assign
__has_nothrow_constructor
__has_trivial_assign
__has_trivial_constructor
__has_trivial_destructor
__is_abstract
__is_aggregate
__is_class
__is_enum
__is_final
__is_literal_type
__is_pod
__is_standard_layout
__is_trivially_assignable
__is_trivially_constructible
__has_unique_object_representations
__add_lvalue_reference
__decay
__make_signed
__make_unsigned
__remove_all_extents
__remove_cv
__remove_cvref
__remove_reference_t
__is_trivially_equality_comparable
__is_unbounded_array
__is_scoped_enum
__can_pass_in_regs
__is_lvalue_expr
__is_arithmetic
__is_floating_point
__is_integral
__is_complete_type
__is_function
__is_reference
__is_object
__is_scalar
__is_compound
__is_pointer
__is_member_function_pointer
__is_volatile
__is_signed
__is_unsigned
__is_same
__is_convertible
__array_extent
__private_extern__
__builtin_ptrauth_type_discriminator
__builtin_ptrauth_struct_disc
__builtin_ptrauth_has_authentication
__builtin_ptrauth_schema_is_address_discriminated
__builtin_ptrauth_schema_extra_discriminator
__builtin_xnu_type_signature
__builtin_xnu_types_compatible
__cdecl
__stdcall
__fastcall
__regcall
__vectorcall
__local
__constant
local
constant
kernel
__read_write
read_write
vec_step
image2d_t
image2d_array_t
image2d_depth_t
image2d_array_depth_t
image2d_msaa_t
image2d_msaa_depth_t
image3d_t
pipe
__noinline__
__vector
__fp16
half
__bridge_transfer
__bridge_retained
__bridge_retain
__covariant
__contravariant
__kindof
__imag__
__inline__
__restrict
__signed
__typeof
__volatile
_Nonnull
_Null_unspecified
__funcref
__ptr64
__ptr32
__sptr
__w64
__uuidof
__multiple_inheritance
__int16
__int32
__wchar_t
__builtin_alignof
_asm
_cdecl
_forceinline
_int32
_leave
_ptr64
_thiscall
_try
_uptr
_uuidof
_virtual_inheritance
_pascal
__builtin_convertvector
__char16_t
__builtin_bit_cast
__arm_inout
__arm_locally_streaming
__arm_new
__arm_out
__arm_preserves
__arm_streaming
__arm_streaming_compatible
_ATFILE_SOURCE
_BSD_SOURCE
_CRT_NONSTDC_NO_WARNINGS
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES
_CRT_SECURE_NO_WARNINGS
_GLIBCXX_ASSERTIONS
_GLIBCXX_CONCEPT_CHECKS
_GLIBCXX_DEBUG
_GLIBCXX_DEBUG_PEDANTIC
_GLIBCXX_PARALLEL
_GLIBCXX_PARALLEL_ASSERTIONS
_GLIBCXX_SANITIZE_VECTOR
_GLIBCXX_USE_CXX11_ABI
_GLIBCXX_USE_DEPRECATED
_ISOC11_SOURCE
_ISOC95_SOURCE
_ISOC99_SOURCE
_POSIX_C_SOURCE
_SVID_SOURCE
_XOPEN_SOURCE_EXTENDED
__STDCPP_WANT_MATH_SPEC_FUNCS__
__STDC_FORMAT_MACROS
complex.h
ctype.h
errno.h
fenv.h
inttypes.h
iso646.h
limits.h
locale.h
setjmp.h
signal.h
stdalign.h
stdarg.h
stdbool.h
stddef.h
stdint.h
stdio.h
stdnoreturn.h
string.h
tgmath.h
threads.h
time.h
uchar.h
wchar.h
wctype.h
ccomplex
cctype
cerrno
cfenv
cinttypes
ciso646
climits
clocale
csetjmp
csignal
cstdalign
cstdarg
cstddef
cstdint
cstdio
cstdlib
ctgmath
ctime
cuchar
cwchar
fstream
list
regex
functional
locale
scoped_allocator
tuple
type_traits
initializer_list
memory
shared_mutex
typeindex
iomanip
mutex
sstream
typeinfo
stack
unordered_map
iosfwd
numeric
stdexcept
unordered_set
iostream
ostream
streambuf
utility
istream
queue
valarray
iterator
random
strstream
forward_list
limits
ratio
system_error
arpa/inet.h
cpio.h
dirent.h
dlfcn.h
fmtmsg.h
fnmatch.h
ftw.h
glob.h
iconv.h
langinfo.h
libgen.h
monetary.h
ndbm.h
net/if.h
netdb.h
netinet/in.h
nl_types.h
poll.h
pthread.h
pwd.h
sched.h
search.h
semaphore.h
spawn.h
stropts.h
sys/ipc.h
sys/mman.h
sys/msg.h
sys/select.h
sys/sem.h
sys/shm.h
sys/socket.h
sys/statvfs.h
sys/time.h
sys/times.h
sys/types.h
sys/un.h
sys/utsname.h
sys/wait.h
syslog.h
tar.h
termios.h
trace.h
ulimit.h
unistd.h
utime.h
utmpx.h
wordexp.h
'defined'
 to 
.hpp
__is_target_arch
__is_target_vendor
??? ??? ?? ??:??:?? ????
"%s %2d %4d"
??? ?? ????
"%02d:%02d:%02d"
??:??:??
attribute_diagnose_if_objc
__make_integer_seq
__type_pack_element
'__has_warning'
unknown-unknown-
pragma hdrstop
v5te
v6-m
v6kz
v7hl
v7-a
v7-r
v7-m
v7e-m
aarch64
arm64
v8-a
v8.1-a
v8.2-a
v8.3-a
v8.4-a
v8.5-a
v8.6-a
v8.7-a
v8.8-a
v8.9-a
v8-r
v9-a
v9.1-a
v9.2-a
v9.3-a
v9.4-a
v8-m.base
v8-m.main
v8.1-m.main
thumb
invalid
iwmmxt
xscale
armv4
armv4t
+v4t
armv5t
armv5te
+v5e
armv5tej
5TEJ
armv6
armv6k
+v6k
armv6t2
+v6t2
armv6kz
+v6kz
armv6-m
+v6m
armv7-a
armv7ve
+v7ve
armv7-r
+v7r
armv7-m
+v7m
armv7e-m
7E-M
+v7em
armv8-a
+v8a
armv8.1-a
8.1-A
+v8.1a
armv8.2-a
8.2-A
+v8.2a
armv8.3-a
8.3-A
+v8.3a
armv8.4-a
8.4-A
+v8.4a
armv8.5-a
8.5-A
+v8.5a
armv8.6-a
8.6-A
+v8.6a
armv8.7-a
8.7-A
+v8.7a
armv8.8-a
8.8-A
+v8.8a
armv8.9-a
8.9-A
+v8.9a
armv9-a
+v9a
armv9.1-a
9.1-A
+v9.1a
armv9.2-a
9.2-A
+v9.2a
armv9.3-a
9.3-A
+v9.3a
armv9.4-a
9.4-A
+v9.4a
armv8-r
+v8r
armv8-m.base
8-M.Baseline
+v8m.base
armv8-m.main
8-M.Mainline
+v8m.main
armv8.1-m.main
8.1-M.Mainline
+v8.1m.main
iwmmxt2
armv7s
+v7s
armv7k
+v7k
mipsel
mipsisa32r6
mipsisa32r6el
mipsisa64r6
mipsisa64r6el
mipsn32
mipsr6
mipsr6el
powerpcspe
mipseb
mipsallegrex
mipsallegrexel
mipsn32r6
mipsn32el
mips64r6el
mipsn32r6el
spirv32v1.2
spirv32v1.3
spirv32v1.4
spirv32v1.5
spirv64v1.2
spirv64v1.3
spirv64v1.4
spirv64v1.5
aV,m
F,C
Epr@
"jU7
#mGs/
@%uQO
i@)0T=
1E5L@+,T9
1@,F
M@,p
-AD 
@.$W)
@2)G
4`OdC
@6gB
7|RLt
D/G@7
;xKo
<+C\
<qG58
@=$Dm!
RNZ@>E
~@?3
@@EB
@@[F
9@@q
L@B4
@B@G
BvR+z
C@D?K@CLF
CXQV
@E#E
;@Hw
@IMB
J#QW(
JsMz
E(y@K
NaNn]
@OuL
@P8B
@R{C
TUG3
_8Mx
x@V+
0YEiL
(@Vk
W)SBF@W;
k@Xh
[WNt
^xHVa
\ G3
@\JC
@^BF
EF@^
@_9O
_EM&
XCFF
@cVC
@e_E
fuRJ|@f{G
@gfG
J)Gi
0@hv
XQS=
@lLJ
M{@mlK
oNFv
@oTKo
~@uo
RI\@v
uyKo
wlCh
@xnF
xzNs
z-B)
zWB2
zoB08
{AG*
@}tG
~GIV
@~MB
:@~c
Nm)@~
 EF
HFU-
Ob6@
O0Oj
T?]@
8D[
O-l@
G V@
iqQQr@
F)S@
WEA.@
uiJR
t)C?h@
qD{I@
`E>q
E1X@
AQE+
SEQ@
MzV@
9E?M@
SGK
DaI@
HB9<
B9<@
Ob'@
0GTo@
1HQU
0F7^
HQPb
71I8
GTo@
u9Ch
P]2@
PB08
yB08
"B08
o0QU
RAG3
RPOb
A#$C
A#bD
wA#~
A$rB
A')B
A(J#
NA1i
5xKo
7"Nq
74Nta
M0E'^A8
5A;uE
I~!AI
AVFI
JAVx
aGV)AY
D5KAZ
)QQaA[
hA^-
^CD"q
A_NE
,Ad*
e(T>
AePD[
PZBAe
)Ak:G
kFCE
Al^G
lAn*
Ao&G
rAvR
Ax[B
A},
MA}N
E@<A
U8SA
=B&QA
0I9(
xC]j
xXG}
3XO0
DqJo
0HDB
9F`K
)LRq
J_rA
OjLA
M;NA
NI8A
N!0A
9!D[A
5!QO
zAB-A
bB-A
DGK
^YA
;G!y
QM}bB
B6F
KQgB
VHVaB
$IHK
vB"a
B"yC
rB#}
E27B$
&aD"q
B&QB&
B'dE
,B+VG
,B+c
,B,'
,B-EG
,B-m
.PDd
!aDd
$aDb
=B4#
B4eC
B4}D
5'OgmB5E
B6+I
;xM{@B;~
=WFw.
G7qB>
CxO_
K0E+
A7F+
sPMz
PC?zBE
lBHf
q9Ch
BP9F
lBPQ
BQ5H
,BQS
RtJ8
BTBJu8
U1I-m
X"Od
X(LRqBX4P_r
7BXRE
VBXd
BXzE
BZ$D
B["H
B`EHm
[B`]
NB`u
Ba&I
BaxD
bcSB
b{D[Bb
cG"BcOB
*Bg
$BgV
`NI8
lBh7I
BhUP
oBhy
kBiC
mzI@2
uBo&
BoxF
;`I4$
y) Bye&
|xH<
O)E'
D:tB
EOCB
hU2
`@B#
y1G3
iC/S
0H"C
7B&Q
[D!1
H/8B
&C&QB
$iDb
m!BeB
F'B
XD.`
D.`B
IAuB
^Nh@
POh?B
;aGjb
FfB
CUE
GjbC
$IMkZC
21F/
PG9E
(C6;
P\bC
>C w
He3C 
7!E-
D.`C"
"2E-
"FF-
D.`C"
lC#6
#TE-
#^D.`C#hC
F?6C#
C$"C.a
lC$P
xC.a
%:D.`C%F
lC%v
JsMC%
JsMC%
&6F-
&pEQ
JsMC&
(@G;
*YI)
C*_I)
C*kI)
C*wI)
,(Cu
3C0#
kC;CF
<\G!y
kC>d
CBoD)
EcCl
CEoD
LhI;M
M'E<
'CRK
,CV6
29F/
kCY8
.CYrI
.CY~I
/C[%
C[1F 
}C[RF 
}C[p
lC]>
lC]\
lC]t
lC^ZC
^fC.aC^v
D.`C^
JsMC_
_XEQ
C_hD.`
C.aC_
oC``
lCa
`D.`
aNEQ
a|C.aCa
Cf3Q
VCfW
CzKCi
l,&ClH
l|"Cl
kCmnEA
CnBG:
CoeE
otF;
CpyF
ZiEw
VCsN
VCsZ
yCt>
KaD)
kCy2F
kCy>G
kCz7
C|]F
C|iL
EFC}?
C}WC
kC}{F
~*G~
$xGZ5
NJsMC
CUC
GLC
SD!C
`C.aC
FkmC
L{tC
lM~s
YFs{C
Iu9C
