%s%s
astrcat
iig.cpp
-1 != result
driverkit
.iig
implements
const
volatile
restrict
_param%d
%s:%3d [%03d]
 %s (%s)
                         type[%d] (%s)
                         comment[%d:%d] (%s)
IOReturn
kern_return_t
  %s attribute: %s
kernel
native
remote
local
localonly
serializable
extends=
Construct
other
OSMetaClassBase
void
%s::%s does not override
method:  (%s) %s::%s
overrides: (%s) %s::%s
  %s: attribute: %s
localhost
invokereply
reply
queuename=
type=
meth->typeMethod
error: types %s::%s != %s::%s
meth->oneway == meth->typeMethod->oneway
meth->mvirtual || meth->mstatic || meth->localonly
error: variadic method %s::%s not localonly
target
param->typeMethod
MACH_MSG_TYPE
OSAction
param->action
NULL == meth->target
%sCount
%s    ((%s) %s)
(in) 
(out)
meth->cls == cls
error: OSAction class not found
OSAction_%s_%s
actionName
Type-safe OSAction factory methods are available in DriverKit 20 and newer
EmitRPCTypes
meth->msgid
%s_%s_%s
struct %s_Content
    IORPCMessage __hdr;
    OSObjectRef  __object;
    %s * %s;
#if !defined(__LP64__)
    uint32_t __%sPad;
#endif /* !defined(__LP64__) */
OSObjectRef
    %s  %s;
    %s%s *  %s;
const 
    %s __%s[%d];
    uint64_t __replyBuffer[8];
#pragma pack(4)
struct %s
    IORPCMessageMach           mach;
    mach_msg_port_descriptor_t %s__descriptor;
__object
    mach_msg_port_descriptor_t %s__descriptor[%d];
    mach_msg_ool_descriptor_t  %s__descriptor;
    %s_Content content;
#pragma pack()
#define %s_ObjRefs (%d)
typedef union
    const IORPC rpc;
    struct
    {
        const struct %s_%s_Msg * message;
        struct %s_%s_Rpl       * reply;
        uint32_t sendSize;
        uint32_t replySize;
    };
%s_%s_Invocation;
#include %c%s%c  /* .iig include */
#include %c%s%c
CopyLines
false
    kern_return_t
    CreateAction%s(size_t referenceSize, OSAction ** action);
    %s%s
static 
virtual 
    %s(
        IORPC rpc%s
        
__attribute__((os_returns_retained)) 
%s **%s
 const
%s%s *
 = %s
        ...
        OSDispatchMethod supermethod = NULL
)%s%s%s;
 APPLE_KEXT_OVERRIDE
#define %s_Methods 
public:
    virtual kern_return_t
    Dispatch(const IORPC rpc) APPLE_KEXT_OVERRIDE;
    static kern_return_t
    _Dispatch(%s * self, const IORPC rpc);
protected:
    /* _Impl methods */
    %s_%s(%s_%s_Args)%s;
Call
Impl
public:
    /* _Invoke methods */
    typedef %s (*%s_Handler)(%s%s%s_%s_Args);
OSMetaClassBase * target
    %s_Invoke(const IORPC rpc,
        OSMetaClassBase * target,
        %s_Handler func,
        const OSMetaClass * targetActionClass);
        %s_Handler func);
#define %s_KernelMethods 
protected:
    /* _Impl methods */
    %s_%s(%s_%s_Args);
#define %s_VirtualMethods 
/* iig(%s) generated from %s */
DriverKit-286
/* %s:%d-%d */
/* source class %s %s:%d-%d */
#if __DOCUMENTATION__
#define KERNEL IIG_KERNEL
#undef KERNEL
#else /* __DOCUMENTATION__ */
/* generated class %s %s:%d-%d */
#endif /* !__DOCUMENTATION__ */
/* %s:%d- */
fprintpstrf
len < 256
"\%03o%s"
@iig end
/* %s */
/* @iig end */
/* iig(%s %s %s) generated from %s */
May 29 2024
16:04:02
#undef
IIG_IMPLEMENTATION
#define
IIG_IMPLEMENTATION 
#if KERNEL
#include <libkern/c++/OSString.h>
#else
#include <DriverKit/DriverKit.h>
#endif /* KERNEL */
#include <DriverKit/IOReturn.h>
#include <%s/%s.h>
#include "%s.h"
@iig implementation
#if __has_builtin(__builtin_load_member_function_pointer)
#define SimpleMemberFunctionCast(cfnty, self, func) (cfnty)__builtin_load_member_function_pointer(self, func)
#define SimpleMemberFunctionCast(cfnty, self, func) ({ union { typeof(func) memfun; cfnty cfun; } pair; pair.memfun = func; pair.cfun; })
#endif
#if !KERNEL
OSMetaClass
extern OSMetaClass * g%sMetaClass;
#endif /* !KERNEL */
IIG_TRACE_HEADERS
{"file":"%s",
"includes":[
"%s"
usage: %s --def <def input file> --header <header output file> --impl <implementation output file> [--edits <sed edits output file>] [--log <log file>] [--framework-name <name>] [--deployment-target <deployment target>] -- <clang args>
header
impl
edits
help
version
framework-name
deployment-target
h:i:s:
%u.%u.%u
-target
unknown-
error: -target is only permitted with an unknown arch
-arch
-triple
error: -arch, and -triple arguments are not permitted
arm64
clang_createTranslationUnitFromSourceFile error
compile failed
visit:
construct:
emit:
Version
numVersions <= 3
 __attribute__((availability(driverkit
availabilityAttribute
versionStr != NULL
,introduced=%s
,deprecated=%s
,obsoleted=%s
,message="%s"
%u.%u
EmitHeaderForClass
#define %s_%s_ID            0x%016qxULL
#define %s_%s_Args \
        const IORPC rpc%s
 %s%s
#if !KERNEL
extern OSMetaClass          * g%sMetaClass;
extern const OSClassLoadInformation %s_Class;
class %sMetaClass : public OSMetaClass
public:
    New(OSObject * instance) override;
    Dispatch(const IORPC rpc) override;
#endif /* !KERNEL */
class %sInterface : public OSInterface
public:
    %s%s(
_Call
        
)%s%s 
= 0;
 { return %s(
); };
struct %s_IVars;
struct %s_LocalIVars;
class%s %s : public %s, public %sInterface
    OSDeclareDefaultStructorsWithDispatch(%s);
#endif /* KERNEL */
    friend class %sMetaClass;
#ifdef %s_DECLARE_IVARS
%s_DECLARE_IVARS
#else /* %s_DECLARE_IVARS */
    union
        %s_IVars * ivars;
        %s_LocalIVars * lvars;
#endif /* %s_DECLARE_IVARS */
    static OSMetaClass *
    sGetMetaClass() { return g%sMetaClass; };
    virtual const OSMetaClass *
    getMetaClass() const APPLE_KEXT_OVERRIDE { return g%sMetaClass; };
    using super = %s;
    %s_Methods
    %s_VirtualMethods
OSDefineMetaClassAndStructors(%s, %s);
#define %s_QueueNames  ""
    
i24@?0r^v8r^v16
#define %s%s_MethodNames  ""
MetaClass
error: %s has no superclass.
struct OSClassDescription_%s_t
    OSClassDescription base;
    uint64_t           methodOptions[2 * %ld];
    uint64_t           metaMethodOptions[2 * %ld];
    char               queueNames[sizeof(%s_QueueNames)];
    char               methodNames[sizeof(%s_MethodNames)];
    char               metaMethodNames[sizeof(%sMetaClass_MethodNames)];
const struct OSClassDescription_%s_t
OSClassDescription_%s =
    .base =
        .descriptionSize         = sizeof(OSClassDescription_%s_t),
        .name                    = "%s",
        .superName               = "%s",
        .methodOptionsSize       = 2 * sizeof(uint64_t) * %ld,
        .methodOptionsOffset     = __builtin_offsetof(struct OSClassDescription_%s_t, methodOptions),
        .metaMethodOptionsSize   = 2 * sizeof(uint64_t) * %ld,
        .metaMethodOptionsOffset = __builtin_offsetof(struct OSClassDescription_%s_t, metaMethodOptions),
        .queueNamesSize       = sizeof(%s_QueueNames),
        .queueNamesOffset     = __builtin_offsetof(struct OSClassDescription_%s_t, queueNames),
        .methodNamesSize         = sizeof(%s_MethodNames),
        .methodNamesOffset       = __builtin_offsetof(struct OSClassDescription_%s_t, methodNames),
        .metaMethodNamesSize     = sizeof(%sMetaClass_MethodNames),
        .metaMethodNamesOffset   = __builtin_offsetof(struct OSClassDescription_%s_t, metaMethodNames),
        .flags                   = %d*kOSClassCanRemote,
    },
    .%sethodOptions =
metaM
    {
        0x%016qx,
        %s_%s_ID,
    },
    .queueNames      = %s_QueueNames,
    .methodNames     = %s_MethodNames,
    .metaMethodNames = %sMetaClass_MethodNames,
OSMetaClass * g%sMetaClass;
static kern_return_t
%s_New(OSMetaClass * instance);
const OSClassLoadInformation
%s_Class = 
    .description       = &OSClassDescription_%s.base,
    .metaPointer       = &g%sMetaClass,
    .version           = 1,
    .instanceSize      = sizeof(%s),
    .New               = &%s_New,
extern const void * const
g%s_Declaration;
const void * const
g%s_Declaration
__attribute__((visibility("hidden"),section("__DATA_CONST,__osclassinfo,regular,no_dead_strip"),no_sanitize("address")))
    = &%s_Class;
%s_New(OSMetaClass * instance)
    if (!new(instance) %sMetaClass) return (kIOReturnNoMemory);
    return (kIOReturnSuccess);
kern_return_t
%sMetaClass::New(OSObject * instance)
    return (kIOReturnUnderrun);
    if (!new(instance) %s) return (kIOReturnNoMemory);
kern_return_t
%s::Dispatch(const IORPC rpc)
    return _Dispatch(this, rpc);
kern_return_t
%s::MetaClass::Dispatch(const IORPC rpc)
#else /* KERNEL */
kern_return_t
%sMetaClass::Dispatch(const IORPC rpc)
kern_return_t
%s::_Dispatch(%s * self, const IORPC rpc)
    kern_return_t ret = kIOReturnUnsupported;
    IORPCMessage * msg = IORPCMessageFromMach(rpc.message, false);
    switch (msg->msgid)
        case %s_%s_ID:
            ret = %s::%s_Invoke(rpc, &%s::%s_Impl);
            break;
        if (self->IsRemote())
        {
            ret = self->OSMetaClassBase::Dispatch(rpc);
        }
        else
            if (__builtin_available(driverkit 20, *)) {
                ret = %s::%s_Invoke(rpc, self, SimpleMemberFunctionCast(%s::%s_Handler, *self, &%s::%s_Impl), OSTypeID(OSAction_%s_%s));
            } else {
                ret = %s::%s_Invoke(rpc, self, SimpleMemberFunctionCast(%s::%s_Handler, *self, &%s::%s_Impl));
            }
            ret = %s::%s_Invoke(rpc, self, SimpleMemberFunctionCast(%s::%s_Handler, *self, &%s::%s_Impl), OSTypeID(OSAction_%s_%s));
            ret = %s::%s_Invoke(rpc, self, SimpleMemberFunctionCast(%s::%s_Handler, *self, &%s::%s_Impl));
        default:
            ret = OSMetaClassBase::Dispatch(rpc);
            ret = %s::_Dispatch(self, rpc);
    }
    return (ret);
%s::CreateAction%s(size_t referenceSize, OSAction ** action)
    kern_return_t ret;
    if (__builtin_available(driverkit 20, *)) {
#if defined(IOKIT_ENABLE_SHARED_PTR)
        OSSharedPtr<OSString>
#else /* defined(IOKIT_ENABLE_SHARED_PTR) */
        OSString *
#endif /* !defined(IOKIT_ENABLE_SHARED_PTR) */
        typeName = OSString::withCString("OSAction_%s_%s");
        if (!typeName) {
            return kIOReturnNoMemory;
        ret = OSAction_%s_%s::CreateWithTypeName(this,
                               %s_%s_ID,
                               referenceSize,
                               typeName.get(),
                               typeName,
                               action);
#if !defined(IOKIT_ENABLE_SHARED_PTR)
        typeName->release();
    } else {
        ret = OSAction::Create(this, 
    OSSharedPtr<OSString>
    OSString *
    typeName = OSString::withCString("OSAction_%s_%s");
    if (!typeName) {
        return kIOReturnNoMemory;
    ret = OSAction_%s_%s::CreateWithTypeName(this,
                           %s_%s_ID,
                           referenceSize,
                           typeName.get(),
                           typeName,
                           action);
    typeName->release();
    return (ret);
%s::%s%s(
        OSDispatchMethod supermethod
    kern_return_t ret;
    struct %s_%s_Msg * msg = (typeof(msg)) rpc.reply;
        %s_%s_Msg msg;
        struct
            %s_%s_Rpl rpl;
            mach_msg_max_trailer_t trailer;
        } rpl;
    } buf;
    struct %s_%s_Msg * msg = &buf.msg;
    struct %s_%s_Rpl * rpl = &buf.rpl.rpl;
    memset(msg, 0, sizeof(struct %s_%s_Msg));
    msg->mach.msgh.msgh_id   = %s;
kIORPCVersion190615
    msg->mach.msgh.msgh_size = sizeof(*msg);
    msg->content.__hdr.flags = %d*kIORPCMessageOneway
                             | %d*kIORPCMessageSimpleReply
                             | %d*kIORPCMessageLocalHost
                             | %d*kIORPCMessageOnqueue;
    msg->content.__hdr.msgid = %s_%s_ID;
    msg->content.__object = (OSObjectRef) OSTypeID(%s);
    msg->content.__object = (OSObjectRef) %s;
this
    msg->content.__hdr.objectRefs = %s_%s_Msg_ObjRefs;
    msg->mach.msgh_body.msgh_descriptor_count = %d;
    msg->%s__descriptor.type = MACH_MSG_PORT_DESCRIPTOR;
    msg->%s__descriptor.type = MACH_MSG_PORT_DESCRIPTOR;
    msg->content.%s = (OSObjectRef) %s;
    for (unsigned int idx = 0; idx < %d; idx++) msg->%s__descriptor[idx].type = MACH_MSG_PORT_DESCRIPTOR;
    msg->%s__descriptor.disposition = %s;
    msg->%s__descriptor.name = %s;
    msg->%s__descriptor.type = MACH_MSG_OOL_DESCRIPTOR;
    msg->%s__descriptor.copy = MACH_MSG_VIRTUAL_COPY;
    msg->%s__descriptor.address = (void *) __builtin_offsetof(%s_%s_Msg_Content, %s);
    msg->content.%s = %s;
    msg->content.%s = %s%s;
    msg->content.%s = NULL;
error: %s::%s oneway with results
char
    strlcpy(&msg->content.__%s[0], %s, sizeof(msg->content.__%s));
    if (%sCount > (sizeof(msg->content.__%s) / sizeof(msg->content.__%s[0]))) return%s;
 kIOReturnOverrun
    bcopy(%s, &msg->content.__%s[0], %sCount * sizeof(msg->content.__%s[0]));
    if (*%sCount > (sizeof(rpl->content.__%s) / sizeof(rpl->content.__%s[0]))) return%s;
    msg->content.%sCount = *%sCount;
    ret = kIOReturnSuccess;
    IORPC rpc = { .message = &buf.msg.mach, .reply = NULL, .sendSize = sizeof(*msg), .replySize = 0 };
    IORPC rpc = { .message = &buf.msg.mach, .reply = &buf.rpl.rpl.mach, .sendSize = sizeof(buf.msg), .replySize = sizeof(buf.rpl) };
    ret = OSMTypeID(%s)->Invoke(rpc);
    ret = %s->Invoke(rpc);
    if (supermethod) ret = supermethod((OSObject *)this, rpc);
    else             ret = ((OSObject *)this)->Invoke(rpc);
    if (kIOReturnSuccess == ret)
    do {
        if (rpl->mach.msgh.msgh_size < 
(sizeof(IORPCMessageMach) + sizeof(IORPCMessage))) { ret = kIOReturnIPCError; break; };
        if (rpl->mach.msgh_body.msgh_descriptor_count >= 1)
            if (rpl->mach.msgh.msgh_size < 
(sizeof(IORPCMessageMach) + sizeof(mach_msg_port_descriptor_t) + sizeof(IORPCMessage))) { ret = kIOReturnIPCError; break; };
            if (rpl->mach.msgh.msgh_size                  != sizeof(*rpl)) { ret = kIOReturnIPCError; break; };
            if (rpl->content.__hdr.msgid                  != %s_%s_ID) { ret = kIOReturnIPCError; break; };
            if (rpl->mach.msgh_body.msgh_descriptor_count != %d) { ret = kIOReturnIPCError; break; };
            if (rpc.reply->%s__descriptor.type != MACH_MSG_PORT_DESCRIPTOR) { ret = kIOReturnIPCError; break; };
            if (rpc.reply->%s__descriptor.disposition != %s) { ret = kIOReturnIPCError; { ret = kIOReturnIPCError; break; }; };
            if (%s_%s_Rpl_ObjRefs   != rpl->content.__hdr.objectRefs) { ret = kIOReturnIPCError; break; };
    while (false);
        if (rpl->content.%sCount < *%sCount) *%sCount = rpl->content.%sCount;
        for (unsigned int idx = 0; idx < *%sCount; idx++)
           %s[idx] = OSDynamicCast(%s, (OSObject *) rpl->content.__%s[idx]);
        bcopy(&rpl->content.__%s[0], %s, *%sCount * sizeof(rpl->content.__%s[0]));
        *%s = OSDynamicCast(%s, (OSObject *) rpl->content.%s);
        if (rpl->content.%s && !*%s) ret = kIOReturnBadArgument;
        *%s = rpl->%s__descriptor.name;
        if (%s) *%s = rpl->content.%s;
        if (ret == kIOReturnSuccess) {
            IORPCMessage * message;
            OSObject     * object;
            message = IORPCMessageFromMach(rpc.reply, false);
            if ((rpc.reply->msgh_body.msgh_descriptor_count < 1) || !(kIORPCMessageOneway & message->flags)) {
               ret = kIOReturnIPCError;
              object  = (typeof(object)) message->objects[0];
              if (!object) ret = kIOReturnIPCError;
              else
              {
                  rpc.sendSize  = rpc.replySize;
                  rpc.replySize = 0;
                  rpc.reply     = NULL;
                  ret = object->Invoke(rpc);
              }
          }
    }
%s::%s_Invoke(const IORPC _rpc,
        %s_Handler func)
    return %s::%s_Invoke(_rpc, target, func, NULL);
    return %s::%s_Invoke(_rpc, func, NULL);
        const OSMetaClass * targetActionClass)
    %s_%s_Invocation rpc = { _rpc };
#if !__LP64__
    %s * %s[%d] = {};
#else /* !__LP64__ */
    %s ** %s;
#endif /* __LP64__ */
    %s %s = (sizeof(rpc.message->content.__%s) / sizeof(rpc.message->content.__%s[0]));
    %s %s = (sizeof(rpc.reply->content.__%s) / sizeof(rpc.reply->content.__%s[0]));
    if (%s > rpc.message->content.%s) %s = rpc.message->content.%s;
    if (%d != rpc.message->mach.msgh_body.msgh_descriptor_count) return (kIOReturnIPCError);
    if (%s_%s_Msg_ObjRefs != rpc.message->content.__hdr.objectRefs) return (kIOReturnIPCError);
    if (rpc.message != NULL && rpc.sendSize < sizeof(%s_%s_Msg)) return (kIOReturnIPCError);
    if (rpc.reply != NULL && rpc.replySize < sizeof(%s_%s_Rpl)) return (kIOReturnIPCError);
    if (((OSObject *) rpc.message->content.%s) != NULL && OSDynamicCast(%s, (OSObject *) rpc.message->content.%s) == NULL) { return kIOReturnBadArgument; } 
    if (targetActionClass) {
        %s = (OSAction *) OSMetaClassBase::safeMetaCast((OSObject *) rpc.message->content.%s, targetActionClass);
        %s = OSDynamicCast(OSAction, (OSObject *) rpc.message->content.%s);
    if (!%s && rpc.message->content.%s) return (kIOReturnBadArgument);
    for (unsigned int idx = 0; idx < %sCount; idx++)
        %s[idx] = (%s *)(uintptr_t)rpc.message->content.__%s[idx];
    %s = (%s **)(uintptr_t) &rpc.message->content.__%s[0];
        if (%s[idx] && !OSDynamicCast(%s, %s[idx])) return (kIOReturnBadArgument);
    %s = OSDynamicCast(%s, (OSObject *) rpc.message->content.%s);
#if __LP64__
    %s = (%s **)(uintptr_t) &rpc.reply->content.__%s[0];
    if (strnlen(&rpc.message->content.__%s[0], sizeof(rpc.message->content.__%s)) >= sizeof(rpc.message->content.__%s)) return kIOReturnBadArgument;
    %s(*func)(
ret = 
target%s
        rpc.rpc%s
        &rpc.message->content.__%s[0]
        &rpc.reply->content.__%s[0]
        %s
        rpc.message->%s__descriptor.name
        &rpc.message->content.%s
        rpc.message->content.%s
        &%s
        (%s **)&rpc.reply->content.%s
        &rpc.reply->%s__descriptor.name
        &rpc.reply->content.%s
    if (kIOReturnSuccess != ret) return (ret);
    IORPCMessage * message;
    message = IORPCMessageFromMach(rpc.rpc.reply, false);
    if ((rpc.rpc.reply->msgh_body.msgh_descriptor_count < 1)  || !(kIORPCMessageOneway & message->flags)) ret = kIOReturnIPCError;
    rpc.reply->content.__hdr.msgid = %s_%s_ID;
    rpc.reply->content.__hdr.flags = kIORPCMessageOneway;
    rpc.reply->mach.msgh.msgh_id   = %s;
kIORPCVersion190615Reply
    rpc.reply->mach.msgh.msgh_size = sizeof(*rpc.reply);
    rpc.reply->mach.msgh_body.msgh_descriptor_count = %d;
    rpc.reply->content.__hdr.objectRefs = %s_%s_Rpl_ObjRefs;
    rpc.reply->content.%s = %s;
    for (unsigned int idx = 0; idx < %d; idx++)
        rpc.reply->%s__descriptor[idx].type = MACH_MSG_PORT_DESCRIPTOR;
        rpc.reply->content.__%s[idx] = (OSObjectRef)(uintptr_t) %s[idx];
#endif /* !_LP64__ */
    rpc.reply->%s__descriptor.type = MACH_MSG_PORT_DESCRIPTOR;
    rpc.reply->%s__descriptor.type = MACH_MSG_OOL_DESCRIPTOR;
    rpc.reply->%s__descriptor.copy = MACH_MSG_VIRTUAL_COPY;
    rpc.reply->%s__descriptor.address = (void *) __builtin_offsetof(%s_%s_Rpl_Content, %s);
    rpc.reply->%s__descriptor.size = 0;
    rpc.reply->%s__descriptor.disposition = %s;
    return (%s);
kIOReturnSuccess
EmitEditsForClass
s/IMPL(%s, %s)/
%s::%s_Impl(%s
%s%s
astrcat
iig.cpp
-1 != result
driverkit
.iig
implements
const
volatile
restrict
_param%d
%s:%3d [%03d]
 %s (%s)
                         type[%d] (%s)
                         comment[%d:%d] (%s)
IOReturn
kern_return_t
  %s attribute: %s
kernel
native
remote
local
localonly
serializable
extends=
Construct
other
OSMetaClassBase
void
%s::%s does not override
method:  (%s) %s::%s
overrides: (%s) %s::%s
  %s: attribute: %s
localhost
invokereply
reply
queuename=
type=
meth->typeMethod
error: types %s::%s != %s::%s
meth->oneway == meth->typeMethod->oneway
meth->mvirtual || meth->mstatic || meth->localonly
error: variadic method %s::%s not localonly
target
param->typeMethod
MACH_MSG_TYPE
OSAction
param->action
NULL == meth->target
%sCount
%s    ((%s) %s)
(in) 
(out)
meth->cls == cls
error: OSAction class not found
OSAction_%s_%s
actionName
Type-safe OSAction factory methods are available in DriverKit 20 and newer
EmitRPCTypes
meth->msgid
%s_%s_%s
struct %s_Content
    IORPCMessage __hdr;
    OSObjectRef  __object;
    %s * %s;
#if !defined(__LP64__)
    uint32_t __%sPad;
#endif /* !defined(__LP64__) */
OSObjectRef
    %s  %s;
    %s%s *  %s;
const 
    %s __%s[%d];
    uint64_t __replyBuffer[8];
#pragma pack(4)
struct %s
    IORPCMessageMach           mach;
    mach_msg_port_descriptor_t %s__descriptor;
__object
    mach_msg_port_descriptor_t %s__descriptor[%d];
    mach_msg_ool_descriptor_t  %s__descriptor;
    %s_Content content;
#pragma pack()
#define %s_ObjRefs (%d)
typedef union
    const IORPC rpc;
    struct
    {
        const struct %s_%s_Msg * message;
        struct %s_%s_Rpl       * reply;
        uint32_t sendSize;
        uint32_t replySize;
    };
%s_%s_Invocation;
#include %c%s%c  /* .iig include */
#include %c%s%c
CopyLines
false
@iig
    kern_return_t
    CreateAction%s(size_t referenceSize, OSAction ** action);
    %s%s
static 
virtual 
    %s(
        IORPC rpc%s
        
__attribute__((os_returns_retained)) 
%s **%s
 const
%s%s *
 = %s
        ...
        OSDispatchMethod supermethod = NULL
)%s%s%s;
 APPLE_KEXT_OVERRIDE
#define %s_Methods 
public:
    virtual kern_return_t
    Dispatch(const IORPC rpc) APPLE_KEXT_OVERRIDE;
    static kern_return_t
    _Dispatch(%s * self, const IORPC rpc);
protected:
    /* _Impl methods */
    %s_%s(%s_%s_Args)%s;
Call
Impl
public:
    /* _Invoke methods */
    typedef %s (*%s_Handler)(%s%s%s_%s_Args);
OSMetaClassBase * target
    %s_Invoke(const IORPC rpc,
        OSMetaClassBase * target,
        %s_Handler func,
        const OSMetaClass * targetActionClass);
        %s_Handler func);
#define %s_KernelMethods 
protected:
    /* _Impl methods */
    %s_%s(%s_%s_Args);
#define %s_VirtualMethods 
/* iig(%s) generated from %s */
DriverKit-286
/* %s:%d-%d */
/* source class %s %s:%d-%d */
#if __DOCUMENTATION__
#define KERNEL IIG_KERNEL
#undef KERNEL
#else /* __DOCUMENTATION__ */
/* generated class %s %s:%d-%d */
#endif /* !__DOCUMENTATION__ */
/* %s:%d- */
fprintpstrf
len < 256
"\%03o%s"
@iig end
/* %s */
/* @iig end */
/* iig(%s %s %s) generated from %s */
May 29 2024
16:04:01
#undef
IIG_IMPLEMENTATION
#define
IIG_IMPLEMENTATION 
#if KERNEL
#include <libkern/c++/OSString.h>
#else
#include <DriverKit/DriverKit.h>
#endif /* KERNEL */
#include <DriverKit/IOReturn.h>
#include <%s/%s.h>
#include "%s.h"
@iig implementation
#if __has_builtin(__builtin_load_member_function_pointer)
#define SimpleMemberFunctionCast(cfnty, self, func) (cfnty)__builtin_load_member_function_pointer(self, func)
#define SimpleMemberFunctionCast(cfnty, self, func) ({ union { typeof(func) memfun; cfnty cfun; } pair; pair.memfun = func; pair.cfun; })
#endif
#if !KERNEL
OSMetaClass
extern OSMetaClass * g%sMetaClass;
#endif /* !KERNEL */
IIG_TRACE_HEADERS
{"file":"%s",
"includes":[
"%s"
usage: %s --def <def input file> --header <header output file> --impl <implementation output file> [--edits <sed edits output file>] [--log <log file>] [--framework-name <name>] [--deployment-target <deployment target>] -- <clang args>
header
impl
edits
help
version
framework-name
deployment-target
h:i:s:
%u.%u.%u
-target
unknown-
error: -target is only permitted with an unknown arch
-arch
-triple
error: -arch, and -triple arguments are not permitted
arm64
clang_createTranslationUnitFromSourceFile error
compile failed
visit:
construct:
emit:
Version
numVersions <= 3
 __attribute__((availability(driverkit
availabilityAttribute
versionStr != NULL
,introduced=%s
,deprecated=%s
,obsoleted=%s
,message="%s"
%u.%u
EmitHeaderForClass
#define %s_%s_ID            0x%016qxULL
#define %s_%s_Args \
        const IORPC rpc%s
 %s%s
#if !KERNEL
extern OSMetaClass          * g%sMetaClass;
extern const OSClassLoadInformation %s_Class;
class %sMetaClass : public OSMetaClass
public:
    New(OSObject * instance) override;
    Dispatch(const IORPC rpc) override;
#endif /* !KERNEL */
class %sInterface : public OSInterface
public:
    %s%s(
_Call
        
)%s%s 
= 0;
 { return %s(
); };
struct %s_IVars;
struct %s_LocalIVars;
class%s %s : public %s, public %sInterface
    OSDeclareDefaultStructorsWithDispatch(%s);
#endif /* KERNEL */
    friend class %sMetaClass;
#ifdef %s_DECLARE_IVARS
%s_DECLARE_IVARS
#else /* %s_DECLARE_IVARS */
    union
        %s_IVars * ivars;
        %s_LocalIVars * lvars;
#endif /* %s_DECLARE_IVARS */
    static OSMetaClass *
    sGetMetaClass() { return g%sMetaClass; };
    virtual const OSMetaClass *
    getMetaClass() const APPLE_KEXT_OVERRIDE { return g%sMetaClass; };
    using super = %s;
    %s_Methods
    %s_VirtualMethods
OSDefineMetaClassAndStructors(%s, %s);
#define %s_QueueNames  ""
    
i24@?0r^v8r^v16
#define %s%s_MethodNames  ""
MetaClass
error: %s has no superclass.
struct OSClassDescription_%s_t
    OSClassDescription base;
    uint64_t           methodOptions[2 * %ld];
    uint64_t           metaMethodOptions[2 * %ld];
    char               queueNames[sizeof(%s_QueueNames)];
    char               methodNames[sizeof(%s_MethodNames)];
    char               metaMethodNames[sizeof(%sMetaClass_MethodNames)];
const struct OSClassDescription_%s_t
OSClassDescription_%s =
    .base =
        .descriptionSize         = sizeof(OSClassDescription_%s_t),
        .name                    = "%s",
        .superName               = "%s",
        .methodOptionsSize       = 2 * sizeof(uint64_t) * %ld,
        .methodOptionsOffset     = __builtin_offsetof(struct OSClassDescription_%s_t, methodOptions),
        .metaMethodOptionsSize   = 2 * sizeof(uint64_t) * %ld,
        .metaMethodOptionsOffset = __builtin_offsetof(struct OSClassDescription_%s_t, metaMethodOptions),
        .queueNamesSize       = sizeof(%s_QueueNames),
        .queueNamesOffset     = __builtin_offsetof(struct OSClassDescription_%s_t, queueNames),
        .methodNamesSize         = sizeof(%s_MethodNames),
        .methodNamesOffset       = __builtin_offsetof(struct OSClassDescription_%s_t, methodNames),
        .metaMethodNamesSize     = sizeof(%sMetaClass_MethodNames),
        .metaMethodNamesOffset   = __builtin_offsetof(struct OSClassDescription_%s_t, metaMethodNames),
        .flags                   = %d*kOSClassCanRemote,
    },
    .%sethodOptions =
metaM
    {
        0x%016qx,
        %s_%s_ID,
    },
    .queueNames      = %s_QueueNames,
    .methodNames     = %s_MethodNames,
    .metaMethodNames = %sMetaClass_MethodNames,
OSMetaClass * g%sMetaClass;
static kern_return_t
%s_New(OSMetaClass * instance);
const OSClassLoadInformation
%s_Class = 
    .description       = &OSClassDescription_%s.base,
    .metaPointer       = &g%sMetaClass,
    .version           = 1,
    .instanceSize      = sizeof(%s),
    .New               = &%s_New,
extern const void * const
g%s_Declaration;
const void * const
g%s_Declaration
__attribute__((visibility("hidden"),section("__DATA_CONST,__osclassinfo,regular,no_dead_strip"),no_sanitize("address")))
    = &%s_Class;
%s_New(OSMetaClass * instance)
    if (!new(instance) %sMetaClass) return (kIOReturnNoMemory);
    return (kIOReturnSuccess);
kern_return_t
%sMetaClass::New(OSObject * instance)
    return (kIOReturnUnderrun);
    if (!new(instance) %s) return (kIOReturnNoMemory);
kern_return_t
%s::Dispatch(const IORPC rpc)
    return _Dispatch(this, rpc);
kern_return_t
%s::MetaClass::Dispatch(const IORPC rpc)
#else /* KERNEL */
kern_return_t
%sMetaClass::Dispatch(const IORPC rpc)
kern_return_t
%s::_Dispatch(%s * self, const IORPC rpc)
    kern_return_t ret = kIOReturnUnsupported;
    IORPCMessage * msg = IORPCMessageFromMach(rpc.message, false);
    switch (msg->msgid)
        case %s_%s_ID:
            ret = %s::%s_Invoke(rpc, &%s::%s_Impl);
            break;
        if (self->IsRemote())
        {
            ret = self->OSMetaClassBase::Dispatch(rpc);
        }
        else
            if (__builtin_available(driverkit 20, *)) {
                ret = %s::%s_Invoke(rpc, self, SimpleMemberFunctionCast(%s::%s_Handler, *self, &%s::%s_Impl), OSTypeID(OSAction_%s_%s));
            } else {
                ret = %s::%s_Invoke(rpc, self, SimpleMemberFunctionCast(%s::%s_Handler, *self, &%s::%s_Impl));
            }
            ret = %s::%s_Invoke(rpc, self, SimpleMemberFunctionCast(%s::%s_Handler, *self, &%s::%s_Impl), OSTypeID(OSAction_%s_%s));
            ret = %s::%s_Invoke(rpc, self, SimpleMemberFunctionCast(%s::%s_Handler, *self, &%s::%s_Impl));
        default:
            ret = OSMetaClassBase::Dispatch(rpc);
            ret = %s::_Dispatch(self, rpc);
    }
    return (ret);
%s::CreateAction%s(size_t referenceSize, OSAction ** action)
    kern_return_t ret;
    if (__builtin_available(driverkit 20, *)) {
#if defined(IOKIT_ENABLE_SHARED_PTR)
        OSSharedPtr<OSString>
#else /* defined(IOKIT_ENABLE_SHARED_PTR) */
        OSString *
#endif /* !defined(IOKIT_ENABLE_SHARED_PTR) */
        typeName = OSString::withCString("OSAction_%s_%s");
        if (!typeName) {
            return kIOReturnNoMemory;
        ret = OSAction_%s_%s::CreateWithTypeName(this,
                               %s_%s_ID,
                               referenceSize,
                               typeName.get(),
                               typeName,
                               action);
#if !defined(IOKIT_ENABLE_SHARED_PTR)
        typeName->release();
    } else {
        ret = OSAction::Create(this, 
    OSSharedPtr<OSString>
    OSString *
    typeName = OSString::withCString("OSAction_%s_%s");
    if (!typeName) {
        return kIOReturnNoMemory;
    ret = OSAction_%s_%s::CreateWithTypeName(this,
                           %s_%s_ID,
                           referenceSize,
                           typeName.get(),
                           typeName,
                           action);
    typeName->release();
    return (ret);
%s::%s%s(
        OSDispatchMethod supermethod
    kern_return_t ret;
    struct %s_%s_Msg * msg = (typeof(msg)) rpc.reply;
        %s_%s_Msg msg;
        struct
            %s_%s_Rpl rpl;
            mach_msg_max_trailer_t trailer;
        } rpl;
    } buf;
    struct %s_%s_Msg * msg = &buf.msg;
    struct %s_%s_Rpl * rpl = &buf.rpl.rpl;
    memset(msg, 0, sizeof(struct %s_%s_Msg));
    msg->mach.msgh.msgh_id   = %s;
kIORPCVersion190615
    msg->mach.msgh.msgh_size = sizeof(*msg);
    msg->content.__hdr.flags = %d*kIORPCMessageOneway
                             | %d*kIORPCMessageSimpleReply
                             | %d*kIORPCMessageLocalHost
                             | %d*kIORPCMessageOnqueue;
    msg->content.__hdr.msgid = %s_%s_ID;
    msg->content.__object = (OSObjectRef) OSTypeID(%s);
    msg->content.__object = (OSObjectRef) %s;
this
    msg->content.__hdr.objectRefs = %s_%s_Msg_ObjRefs;
    msg->mach.msgh_body.msgh_descriptor_count = %d;
    msg->%s__descriptor.type = MACH_MSG_PORT_DESCRIPTOR;
    msg->%s__descriptor.type = MACH_MSG_PORT_DESCRIPTOR;
    msg->content.%s = (OSObjectRef) %s;
    for (unsigned int idx = 0; idx < %d; idx++) msg->%s__descriptor[idx].type = MACH_MSG_PORT_DESCRIPTOR;
    msg->%s__descriptor.disposition = %s;
    msg->%s__descriptor.name = %s;
    msg->%s__descriptor.type = MACH_MSG_OOL_DESCRIPTOR;
    msg->%s__descriptor.copy = MACH_MSG_VIRTUAL_COPY;
    msg->%s__descriptor.address = (void *) __builtin_offsetof(%s_%s_Msg_Content, %s);
    msg->content.%s = %s;
    msg->content.%s = %s%s;
    msg->content.%s = NULL;
error: %s::%s oneway with results
char
    strlcpy(&msg->content.__%s[0], %s, sizeof(msg->content.__%s));
    if (%sCount > (sizeof(msg->content.__%s) / sizeof(msg->content.__%s[0]))) return%s;
 kIOReturnOverrun
    bcopy(%s, &msg->content.__%s[0], %sCount * sizeof(msg->content.__%s[0]));
    if (*%sCount > (sizeof(rpl->content.__%s) / sizeof(rpl->content.__%s[0]))) return%s;
    msg->content.%sCount = *%sCount;
    ret = kIOReturnSuccess;
    IORPC rpc = { .message = &buf.msg.mach, .reply = NULL, .sendSize = sizeof(*msg), .replySize = 0 };
    IORPC rpc = { .message = &buf.msg.mach, .reply = &buf.rpl.rpl.mach, .sendSize = sizeof(buf.msg), .replySize = sizeof(buf.rpl) };
    ret = OSMTypeID(%s)->Invoke(rpc);
    ret = %s->Invoke(rpc);
    if (supermethod) ret = supermethod((OSObject *)this, rpc);
    else             ret = ((OSObject *)this)->Invoke(rpc);
    if (kIOReturnSuccess == ret)
    do {
        if (rpl->mach.msgh.msgh_size < 
(sizeof(IORPCMessageMach) + sizeof(IORPCMessage))) { ret = kIOReturnIPCError; break; };
        if (rpl->mach.msgh_body.msgh_descriptor_count >= 1)
            if (rpl->mach.msgh.msgh_size < 
(sizeof(IORPCMessageMach) + sizeof(mach_msg_port_descriptor_t) + sizeof(IORPCMessage))) { ret = kIOReturnIPCError; break; };
            if (rpl->mach.msgh.msgh_size                  != sizeof(*rpl)) { ret = kIOReturnIPCError; break; };
            if (rpl->content.__hdr.msgid                  != %s_%s_ID) { ret = kIOReturnIPCError; break; };
            if (rpl->mach.msgh_body.msgh_descriptor_count != %d) { ret = kIOReturnIPCError; break; };
            if (rpc.reply->%s__descriptor.type != MACH_MSG_PORT_DESCRIPTOR) { ret = kIOReturnIPCError; break; };
            if (rpc.reply->%s__descriptor.disposition != %s) { ret = kIOReturnIPCError; { ret = kIOReturnIPCError; break; }; };
            if (%s_%s_Rpl_ObjRefs   != rpl->content.__hdr.objectRefs) { ret = kIOReturnIPCError; break; };
    while (false);
        if (rpl->content.%sCount < *%sCount) *%sCount = rpl->content.%sCount;
        for (unsigned int idx = 0; idx < *%sCount; idx++)
           %s[idx] = OSDynamicCast(%s, (OSObject *) rpl->content.__%s[idx]);
        bcopy(&rpl->content.__%s[0], %s, *%sCount * sizeof(rpl->content.__%s[0]));
        *%s = OSDynamicCast(%s, (OSObject *) rpl->content.%s);
        if (rpl->content.%s && !*%s) ret = kIOReturnBadArgument;
        *%s = rpl->%s__descriptor.name;
        if (%s) *%s = rpl->content.%s;
        if (ret == kIOReturnSuccess) {
            IORPCMessage * message;
            OSObject     * object;
            message = IORPCMessageFromMach(rpc.reply, false);
            if ((rpc.reply->msgh_body.msgh_descriptor_count < 1) || !(kIORPCMessageOneway & message->flags)) {
               ret = kIOReturnIPCError;
              object  = (typeof(object)) message->objects[0];
              if (!object) ret = kIOReturnIPCError;
              else
              {
                  rpc.sendSize  = rpc.replySize;
                  rpc.replySize = 0;
                  rpc.reply     = NULL;
                  ret = object->Invoke(rpc);
              }
          }
    }
%s::%s_Invoke(const IORPC _rpc,
        %s_Handler func)
    return %s::%s_Invoke(_rpc, target, func, NULL);
    return %s::%s_Invoke(_rpc, func, NULL);
        const OSMetaClass * targetActionClass)
    %s_%s_Invocation rpc = { _rpc };
#if !__LP64__
    %s * %s[%d] = {};
#else /* !__LP64__ */
    %s ** %s;
#endif /* __LP64__ */
    %s %s = (sizeof(rpc.message->content.__%s) / sizeof(rpc.message->content.__%s[0]));
    %s %s = (sizeof(rpc.reply->content.__%s) / sizeof(rpc.reply->content.__%s[0]));
    if (%s > rpc.message->content.%s) %s = rpc.message->content.%s;
    if (%d != rpc.message->mach.msgh_body.msgh_descriptor_count) return (kIOReturnIPCError);
    if (%s_%s_Msg_ObjRefs != rpc.message->content.__hdr.objectRefs) return (kIOReturnIPCError);
    if (rpc.message != NULL && rpc.sendSize < sizeof(%s_%s_Msg)) return (kIOReturnIPCError);
    if (rpc.reply != NULL && rpc.replySize < sizeof(%s_%s_Rpl)) return (kIOReturnIPCError);
    if (((OSObject *) rpc.message->content.%s) != NULL && OSDynamicCast(%s, (OSObject *) rpc.message->content.%s) == NULL) { return kIOReturnBadArgument; } 
    if (targetActionClass) {
        %s = (OSAction *) OSMetaClassBase::safeMetaCast((OSObject *) rpc.message->content.%s, targetActionClass);
        %s = OSDynamicCast(OSAction, (OSObject *) rpc.message->content.%s);
    if (!%s && rpc.message->content.%s) return (kIOReturnBadArgument);
    for (unsigned int idx = 0; idx < %sCount; idx++)
        %s[idx] = (%s *)(uintptr_t)rpc.message->content.__%s[idx];
    %s = (%s **)(uintptr_t) &rpc.message->content.__%s[0];
        if (%s[idx] && !OSDynamicCast(%s, %s[idx])) return (kIOReturnBadArgument);
    %s = OSDynamicCast(%s, (OSObject *) rpc.message->content.%s);
#if __LP64__
    %s = (%s **)(uintptr_t) &rpc.reply->content.__%s[0];
    if (strnlen(&rpc.message->content.__%s[0], sizeof(rpc.message->content.__%s)) >= sizeof(rpc.message->content.__%s)) return kIOReturnBadArgument;
    %s(*func)(
ret = 
target%s
        rpc.rpc%s
        &rpc.message->content.__%s[0]
        &rpc.reply->content.__%s[0]
        %s
        rpc.message->%s__descriptor.name
        &rpc.message->content.%s
        rpc.message->content.%s
        &%s
        (%s **)&rpc.reply->content.%s
        &rpc.reply->%s__descriptor.name
        &rpc.reply->content.%s
    if (kIOReturnSuccess != ret) return (ret);
    IORPCMessage * message;
    message = IORPCMessageFromMach(rpc.rpc.reply, false);
    if ((rpc.rpc.reply->msgh_body.msgh_descriptor_count < 1)  || !(kIORPCMessageOneway & message->flags)) ret = kIOReturnIPCError;
    rpc.reply->content.__hdr.msgid = %s_%s_ID;
    rpc.reply->content.__hdr.flags = kIORPCMessageOneway;
    rpc.reply->mach.msgh.msgh_id   = %s;
kIORPCVersion190615Reply
    rpc.reply->mach.msgh.msgh_size = sizeof(*rpc.reply);
    rpc.reply->mach.msgh_body.msgh_descriptor_count = %d;
    rpc.reply->content.__hdr.objectRefs = %s_%s_Rpl_ObjRefs;
    rpc.reply->content.%s = %s;
    for (unsigned int idx = 0; idx < %d; idx++)
        rpc.reply->%s__descriptor[idx].type = MACH_MSG_PORT_DESCRIPTOR;
        rpc.reply->content.__%s[idx] = (OSObjectRef)(uintptr_t) %s[idx];
#endif /* !_LP64__ */
    rpc.reply->%s__descriptor.type = MACH_MSG_PORT_DESCRIPTOR;
    rpc.reply->%s__descriptor.type = MACH_MSG_OOL_DESCRIPTOR;
    rpc.reply->%s__descriptor.copy = MACH_MSG_VIRTUAL_COPY;
    rpc.reply->%s__descriptor.address = (void *) __builtin_offsetof(%s_%s_Rpl_Content, %s);
    rpc.reply->%s__descriptor.size = 0;
    rpc.reply->%s__descriptor.disposition = %s;
    return (%s);
kIOReturnSuccess
EmitEditsForClass
s/IMPL(%s, %s)/
%s::%s_Impl(%s
