@(#)PROGRAM:flex  PROJECT:flex-35
Clex.%s.%s
lex.%s.tables
lex.backup
#line %d "%s"
@A7<8D>;
506=
 !"#$%&'()*+,-./
 !"#$%&'()
@/9:;
50>?@?B8C
 !"#$%&'()
,63857
y>?@
9:WX00
,/:A 
#`<=
EHIJKLMNOPQSRTUVWXY^Z[\_]BF+(
EFGHHHHIJJKKKLMMNNNNNNOOOPQQQQRSSSTTTUVVVVWWXYYYYYZZZZZZZZZZZZ[[[\\]]]]^^^^^^^^^^^^^^^^^^^^^^^^__
01=>?@ABCKxH
 !"#$%&'()*+,-./01234,56789
:;<=>?@ABCDEFGHI,JKLMNOPQ,RST
>;
v&fY
\Y7
$7Lav

State #%d is non-accepting -
dangerous trailing context
 associated rule line numbers:
 out-transitions: 
 jam-transitions: EOF 
consistency check failed in epsclosure()
DFA Dump:
{YYTD_ID_NXT, (void**)&yy_nxt, sizeof(%s)},
flex_int32_t
flex_int16_t
static const %s yy_nxt[][%d] =
    {
#undef YY_NXT_LOLEN
#define YY_NXT_LOLEN (%d)
static const %s *yy_nxt =0;
    {
    },
could not create unique end-of-buffer state
state # %d:
Could not write yynxt_tbl[][]
bad transition character detected in sympartition()
if ( yy_current_state[-1].yy_nxt )
if ( yy_accept[yy_current_state] )
YY_G(yy_last_accepting_state) = yy_current_state;
YY_G(yy_last_accepting_cpos) = yy_cp;
case 0: /* must back up */
/* undo the effects of YY_DO_BEFORE_ACTION */
*yy_cp = YY_G(yy_hold_char);
yy_cp = YY_G(yy_last_accepting_cpos) + 1;
yy_cp = YY_G(yy_last_accepting_cpos);
yy_current_state = YY_G(yy_last_accepting_state);
goto yy_find_action;
static const struct yy_trans_info yy_transition[%d] =
    {
static const struct yy_trans_info *yy_transition = 0;
    };
static const struct yy_trans_info *yy_start_state_list[%d] =
static const struct yy_trans_info **yy_start_state_list =0;
    &yy_transition[%d],
yy_ec
Equivalence Classes:
%4s = %-2d
yy_act = yy_current_state[-1].yy_nxt;
yy_act = yy_accept[yy_current_state];
yy_current_state = *--YY_G(yy_state_ptr);
YY_G(yy_lp) = yy_accept[yy_current_state];
m4_ifdef( [[M4_YY_USES_REJECT]],
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
for ( ; ; ) /* until we find what rule we matched */
if ( YY_G(yy_lp) && YY_G(yy_lp) < yy_accept[yy_current_state + 1] )
yy_act = yy_acclist[YY_G(yy_lp)];
if ( yy_act & YY_TRAILING_HEAD_MASK ||
     YY_G(yy_looking_for_trail_begin) )
if ( yy_act == YY_G(yy_looking_for_trail_begin) )
YY_G(yy_looking_for_trail_begin) = 0;
yy_act &= ~YY_TRAILING_HEAD_MASK;
break;
else if ( yy_act & YY_TRAILING_MASK )
YY_G(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
YY_G(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
YY_G(yy_full_match) = yy_cp;
YY_G(yy_full_state) = YY_G(yy_state_ptr);
YY_G(yy_full_lp) = YY_G(yy_lp);
else
++YY_G(yy_lp);
goto find_rule;
--yy_cp;
if ( yy_act == 0 )
{ /* have to back up */
state # %d accepts: [%d]
{YYTD_ID_ACCEPT, (void**)&yy_accept, sizeof(%s)},
yy_accept
YY_CHAR yy_c = %s;
while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
yy_current_state = (int) yy_def[yy_current_state];
if ( yy_current_state >= %d )
yy_c = yy_meta[yy_c];
yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
yy_ec[YY_SC_TO_UI(*yy_cp)] 
YY_SC_TO_UI(*yy_cp)
yy_ec[YY_SC_TO_UI(*++yy_cp)] 
YY_SC_TO_UI(*++yy_cp)
while ( (yy_current_state = yy_nxt[yy_current_state][ %s ]) > 0 )
while ( (yy_current_state = yy_nxt[yy_current_state*YY_NXT_LOLEN +  %s ]) > 0 )
++yy_cp;
yy_current_state = -yy_current_state;
const struct yy_trans_info *yy_trans_info;
YY_CHAR yy_c;
for ( yy_c = %s;
      (yy_trans_info = &yy_current_state[yy_c])->
yy_verify == yy_c;
      yy_c = %s )
yy_current_state += yy_trans_info->yy_nxt;
while ( yy_base[yy_current_state] != %d );
while ( yy_current_state != %d );
(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : %d)
(*yy_cp ? YY_SC_TO_UI(*yy_cp) : %d)
if ( *yy_cp )
yy_current_state = yy_nxt[yy_current_state][%s];
yy_current_state = yy_nxt[yy_current_state*YY_NXT_LOLEN + %s];
yy_current_state += yy_current_state[%s].yy_nxt;
yy_current_state = yy_NUL_trans[yy_current_state];
*YY_G(yy_state_ptr)++ = yy_current_state;
char *yy_cp = YY_G(yy_c_buf_p);
yy_is_jam = (yy_current_state == 0);
yy_current_state = yy_nxt[yy_current_state][%d];
yy_current_state = yy_nxt[yy_current_state*YY_NXT_LOLEN + %d];
yy_is_jam = (yy_current_state <= 0);
int yy_c = %d;
yy_trans_info = &yy_current_state[(unsigned int) yy_c];
yy_is_jam = (yy_trans_info->yy_verify != yy_c);
yy_is_jam = (yy_current_state == %d);
if ( ! yy_is_jam )
yy_current_state = yy_start_state_list[YY_G(yy_start) + YY_AT_BOL()];
yy_current_state = yy_start_state_list[YY_G(yy_start)];
yy_current_state = YY_G(yy_start);
yy_current_state += YY_AT_BOL();
YY_G(yy_state_ptr) = YY_G(yy_state_buf);
yy_acclist
{YYTD_ID_ACCLIST, (void**)&yy_acclist, sizeof(%s)},
state # %d accepts: 
[%d]
Could not write yyacclist_tbl
Could not write yyacc_tbl
Could not write ecstbl
Meta-Equivalence Classes:
yy_meta
{YYTD_ID_META, (void**)&yy_meta, sizeof(%s)},
YY_CHAR
%d = %d
Could not write yymeta_tbl
yy_base
{YYTD_ID_BASE, (void**)&yy_base, sizeof(%s)},
Could not write yybase_tbl
yy_def
{YYTD_ID_DEF, (void**)&yy_def, sizeof(%s)},
Could not write yydef_tbl
yy_nxt
Could not write yynxt_tbl
yy_chk
{YYTD_ID_CHK, (void**)&yy_chk, sizeof(%s)},
Could not write yychk_tbl
YY_G(yytext_ptr) -= YY_G(yy_more_len); \
yyleng = (yy_size_t) (yy_cp - YY_G(yytext_ptr)); \
yyleng = (yy_size_t) (yy_cp - yy_bp); \
if ( yyleng + YY_G(yy_more_offset) >= YYLMAX ) \
if ( yyleng >= YYLMAX ) \
YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
yy_flex_strncpy( &yytext[YY_G(yy_more_offset)], YY_G(yytext_ptr), yyleng + 1 M4_YY_CALL_LAST_ARG); \
yyleng += YY_G(yy_more_offset); \
YY_G(yy_prev_more_offset) = YY_G(yy_more_offset); \
YY_G(yy_more_offset) = 0; \
yy_flex_strncpy( yytext, YY_G(yytext_ptr), yyleng + 1 M4_YY_CALL_LAST_ARG); \
#define YY_NUM_RULES %d
#define YY_END_OF_BUFFER %d
struct yy_trans_info
%s yy_verify;
%s yy_nxt;
/* This struct is not used in this scanner,
   but its presence is necessary. */
flex_int32_t yy_verify;
flex_int32_t yy_nxt;
Could not write ftbl
Could not write ssltbl
Could not write eoltbl
static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;
yy_NUL_trans
{YYTD_ID_NUL_TRANS, (void**)&yy_NUL_trans, sizeof(%s)},
struct yy_trans_info*
Could not write yynultrans_tbl
extern int yy_flex_debug;
int yy_flex_debug = %s;
yy_rule_linenum
static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x%x
#define YY_TRAILING_HEAD_MASK 0x%x
#define REJECT \
*yy_cp = YY_G(yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = YY_G(yy_full_match); /* restore poss. backed-over text */ \
YY_G(yy_lp) = YY_G(yy_full_lp); /* restore orig. accepting pos. */ \
YY_G(yy_state_ptr) = YY_G(yy_full_state); /* restore orig. state */ \
yy_current_state = *YY_G(yy_state_ptr); /* restore curr. state */ \
++YY_G(yy_lp); \
goto find_rule; \
/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
#define REJECT reject_used_but_not_detected
static int yy_more_offset = 0;
static int yy_prev_more_offset = 0;
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() (YY_G(yy_more_offset) = yy_flex_strlen( yytext M4_YY_CALL_LAST_ARG))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
YY_G(yy_more_offset) = YY_G(yy_prev_more_offset); \
yyleng -= YY_G(yy_more_offset); \
#define yymore() (YY_G(yy_more_flag) = 1)
#define YY_MORE_ADJ YY_G(yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
#define yymore() yymore_used_but_not_detected
#ifndef YYLMAX
#define YYLMAX 8192
#endif
char yytext[YYLMAX];
char *yytext_ptr;
char *yytext;
errno=0; \
while ( (result = (int) read( fileno(yyin), buf, (yy_size_t) max_size )) < 0 ) \
if( errno != EINTR) \
YY_FATAL_ERROR( "input in flex scanner failed" ); \
break; \
errno=0; \
clearerr(yyin); \
if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
int c = '*'; \
yy_size_t n; \
for ( n = 0; n < max_size && \
     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
buf[n] = (char) c; \
if ( c == '\n' ) \
buf[n++] = (char) c; \
if ( c == EOF && ferror( yyin ) ) \
result = n; \
else \
while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
if( errno != EINTR) \
YY_FATAL_ERROR( "input in flex scanner failed" ); \
break; \
errno=0; \
clearerr(yyin); \
#define YY_RULE_SETUP \
if ( yyleng > 0 ) \
YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
(yytext[yyleng - 1] == '\n'); \
YY_USER_ACTION
YY_G(yy_more_len) = 0;
if ( YY_G(yy_more_flag) )
YY_G(yy_more_len) = (int) (YY_G(yy_c_buf_p) - YY_G(yytext_ptr));
YY_G(yy_more_flag) = 0;
yy_match:
m4_ifdef( [[M4_YY_USE_LINENO]],[[
if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
yy_size_t yyl;
for ( yyl = %s; yyl < yyleng; ++yyl )
YY_G(yy_prev_more_offset)
YY_G(yy_more_len)
if ( yytext[yyl] == '\n' )
M4_YY_INCR_LINENO();
if ( yy_flex_debug )
std::cerr << "--scanner backing up\n";
fprintf( stderr, "--scanner backing up\n" );
else if ( yy_act < %d )
std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
         "(\"" << yytext << "\")\n";
fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
         (long)yy_rule_linenum[yy_act], yytext );
else if ( yy_act == %d )
std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
fprintf( stderr, "--accepting default rule (\"%s\")\n",
         yytext );
std::cerr << "--(end of buffer or a NUL)\n";
fprintf( stderr, "--(end of buffer or a NUL)\n" );
std::cerr << "--EOF (start condition " << YY_START << ")\n";
fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
case YY_STATE_EOF(%s):
yyterminate();
yy_cp = YY_G(yy_c_buf_p);
YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
if ( c == '\n' )
m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl
static const YY_CHAR %s[%d] =
    {   0,
static const YY_CHAR * %s = 0;
static const flex_int32_t %s[%d] =
    {   0,
static const flex_int32_t * %s = 0;
static const flex_int16_t %s[%d] =
    {   0,
static const flex_int16_t * %s = 0;
{YYTD_ID_EC, (void**)&yy_ec, sizeof(%s)},
{YYTD_ID_TRANSITION, (void**)&yy_transition, sizeof(%s)},
{YYTD_ID_START_STATE_LIST, (void**)&yy_start_state_list, sizeof(%s)},
/* Table of booleans, true if rule could match eol. */
yy_rule_can_match_eol
%d, 
    
{YYTD_ID_RULE_CAN_MATCH_EOL, (void**)&yy_rule_can_match_eol, sizeof(%s)},
static const yy_state_type %s[%d] =
    {   0,
static const yy_state_type * %s = 0;
flex
]]M4_YY_NOOP[M4_YY_NOOP[M4_YY_NOOP[[
]]M4_YY_NOOP]M4_YY_NOOP]M4_YY_NOOP[[
rule cannot be matched
-s option given but default rule can be matched
Can't use -+ with -l option
Can't use -f or -F with -l option
Can't use --reentrant or --bison-bridge with -l option
-Cf/-CF and -Cm don't make sense together
-Cf/-CF and -I are incompatible
-Cf/-CF are incompatible with lex-compatibility mode
-Cf and -CF are mutually exclusive
Can't use -+ with -CF option
%array incompatible with -+ option
Options -+ and --reentrant are mutually exclusive.
bison bridge not supported for the C++ scanner.
M4_EXTRA_TYPE_DEFS
could not create %s
/usr/bin/gm4
PATH
M4_YY_TABLES_VERIFY
M4_YY_TABLES_EXTERNAL
%stables
could not write tables header
can't open skeleton file %s
M4_YY_REENTRANT
M4_YY_TEXT_IS_ARRAY
M4_YY_BISON_LVAL
<M4_YY_BISON_LLOC>
Prefix cannot include '[' or ']'
M4_YY_PREFIX
M4_YY_USE_LINENO
YY_INT_ALIGNED
long int
short int
#define %s %d
allocation of macro definition failed
M4_YY_SC_DEFS
#line 0 "M4_YY_OUTFILE_NAME"
input error reading skeleton file %s
error closing skeleton file %s
error writing output file %s
error closing output file %s
error deleting output file %s
No backing up.
%d backing up (non-accepting) states.
Compressed tables always back up.
error writing backup file %s
error closing backup file %s
%s version %s usage statistics:
  scanner options: -
--reentrant
--bison-bridge
--bison-locations
 -o%s
 -S%s
 -P%s
  %d/%d NFA states
  %d/%d DFA states (%d words)
  %d rules
  No backing up
  %d backing-up (non-accepting) states
  Compressed tables always back-up
  Beginning-of-line patterns used
  %d/%d start conditions
  %d epsilon states, %d double epsilon states
  no character classes
  %d/%d character classes needed %d/%d words of storage, %d reused
  %d state/nextstate pairs created
  %d/%d unique/duplicate transitions
  %d table entries
  %d/%d base-def entries created
  %d/%d (peak %d) nxt-chk entries created
  %d/%d (peak %d) template nxt-chk entries created
  %d empty table entries
  %d protos created
  %d templates created, %d uses
  %d/%d equivalence classes created
  %d/%d meta-equivalence classes created
  %d (%d saved) hash collisions, %d DFAs equal
  %d sets of reallocations needed
  %d total table entries needed
m4_changequote
m4_changequote([[, ]])
Internal error. flexopts are malformed.
Try `%s --help' for more information.
unknown -C option '%c'
YY_MAIN
M4_YY_NO_UNISTD_H
%s %s
M4_YY_ALWAYS_INTERACTIVE
M4_YY_NEVER_INTERACTIVE
#define 
M4_YY_STACK_USED
M4_YY_NO_PUSH_STATE
M4_YY_NO_POP_STATE
M4_YY_NO_TOP_STATE
M4_YY_NO_UNPUT
M4_YY_NO_SCAN_BUFFER
M4_YY_NO_SCAN_BYTES
M4_YY_NO_SCAN_STRING
M4_YY_NO_GET_EXTRA
M4_YY_NO_SET_EXTRA
M4_YY_NO_GET_LENG
M4_YY_NO_GET_TEXT
M4_YY_NO_GET_LINENO
M4_YY_NO_SET_LINENO
M4_YY_NO_GET_IN
M4_YY_NO_SET_IN
M4_YY_NO_GET_OUT
M4_YY_NO_SET_OUT
M4_YY_NO_GET_LVAL
M4_YY_NO_SET_LVAL
M4_YY_NO_GET_LLOC
M4_YY_NO_SET_LLOC
fatal parse error
POSIXLY_CORRECT
could not create backing-up info file %s
-l AT&T lex compatibility option entails a large performance penalty
 and may be the actual source of other reported performance penalties
%%option yylineno entails a performance penalty ONLY on rules that can match newline characters
-I (interactive) entails a minor performance penalty
yymore() entails a minor performance penalty
REJECT entails a large performance penalty
Variable trailing context rules entail a large performance penalty
REJECT cannot be used with -f or -F
%option yylineno cannot be used with REJECT
variable trailing context rules cannot be used with -f or -F
M4_YY_USES_REJECT
#define %swrap(yyscanner) (/*CONSTCOND*/1)
#define %swrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE
#ifdef VMS
#ifdef __VMS_POSIX
#define YY_STDINIT
#endif
#else
#ifndef __VMS_POSIX
typedef const struct yy_trans_info *yy_state_type;
typedef int yy_state_type;
#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;
#include <FlexLexer.h>
int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
return 0;
#define YY_DECL int %s::yylex()
extern char yytext[];
#define yytext_ptr yytext_r
extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
%option yyclass only meaningful for C++ scanners
Usage: %s [OPTIONS] [FILE]...
Generates programs that perform pattern-matching on text.
Table Compression:
  -Ca, --align      trade off larger tables for better memory alignment
  -Ce, --ecs        construct equivalence classes
  -Cf               do not compress tables; use -f representation
  -CF               do not compress tables; use -F representation
  -Cm, --meta-ecs   construct meta-equivalence classes
  -Cr, --read       use read() instead of stdio for scanner input
  -f, --full        generate fast, large scanner. Same as -Cfr
  -F, --fast        use alternate table representation. Same as -CFr
  -Cem              default compression (same as --ecs --meta-ecs)
Debugging:
  -d, --debug             enable debug mode in scanner
  -b, --backup            write backing-up information to %s
  -p, --perf-report       write performance report to stderr
  -s, --nodefault         suppress default rule to ECHO unmatched text
  -T, --trace             %s should run in trace mode
  -w, --nowarn            do not generate warnings
  -v, --verbose           write summary of scanner statistics to stdout
      --hex               use hexadecimal numbers instead of octal in debug outputs
Files:
  -o, --outfile=FILE      specify output filename
  -S, --skel=FILE         specify skeleton file
  -t, --stdout            write scanner on stdout instead of %s
      --yyclass=NAME      name of C++ class
      --header-file=FILE   create a C header file in addition to the scanner
      --tables-file[=FILE] write tables to FILE
Scanner behavior:
  -7, --7bit              generate 7-bit scanner
  -8, --8bit              generate 8-bit scanner
  -B, --batch             generate batch scanner (opposite of -I)
  -i, --case-insensitive  ignore case in patterns
  -l, --lex-compat        maximal compatibility with original lex
  -X, --posix-compat      maximal compatibility with POSIX lex
  -I, --interactive       generate interactive scanner (opposite of -B)
      --yylineno          track line count in yylineno
Generated code:
  -+,  --c++               generate C++ scanner class
  -Dmacro[=defn]           #define macro defn  (default defn is '1')
  -L,  --noline            suppress #line directives in scanner
  -P,  --prefix=STRING     use STRING as prefix instead of "yy"
  -R,  --reentrant         generate a reentrant C scanner
       --bison-bridge      scanner for bison pure parser.
       --bison-locations   include yylloc support.
       --stdinit           initialize yyin/yyout to stdin/stdout
       --nounistd          do not include <unistd.h>
       --noFUNCTION        do not generate a particular FUNCTION
Miscellaneous:
  -c                      do-nothing POSIX option
  -n                      do-nothing POSIX option
  -?
  -h, --help              produce this help message
  -V, --version           report %s version
name "%s" ridiculously long
memory allocation failed in allocate_array()
bad character '%s' detected in check_char()
scanner requires -8 flag to use the character %s
memory allocation failure in xstrdup()
    } ;
%s: %s
%s: fatal internal error, %s
M4_YY_OUTFILE_NAME
<stdin>
    
m4_define( [[%s]], [[%s]])m4_dnl
\x%.2x
\%.3o
attempt to increase array size failed
/* %s */\
/* %s */
%push
/*(state = (%s) */
true
false
%pop
%if-reentrant
%if-not-reentrant
%if-bison-bridge
%if-not-bison-bridge
%endif
%if-tables-serialization
%tables-yydmap
%define-yytables
#define YYTABLES_NAME "%s"
yytables
%if-c++-only
%if-c-only
%if-c-or-c++
%not-for-header
%ok-for-header
bad line in skeleton file
 {%4d,%4d },
memory allocation failed in yy_flex_xmalloc()
%s: fatal internal error at %s:%d %s
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/flex/src/misc.c
peek attempt when sko stack is empty
allocation of sko_stack failed
popped too many times in skeleton.
********** beginning dump of nfa with start state %d
state # %4d
%3d:  %4d, %4d
  [%d]
********** end of dump
empty machine in dupmachine()
case %d:
/* rule %d can match eol */
Variable trailing context rule at line %d
YY_G(yy_c_buf_p) = yy_cp
yy_bp
*yy_cp = YY_G(yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(%s + %d);
%s = %s + %d;
YY_LINENO_REWIND_TO(yy_cp - %d);
%s -= %d;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
bad state type in mark_beginning_as_normal()
input rules are too complicated (>= %d NFA states)
found too many transitions in mkxtion()
too many rules (> %d)!
--7bit
--8bit
--align
--noalign
--always-interactive
--array
--backup
--batch
--case-insensitive
-C[aefFmr]
Specify degree of table compression (default is -Cem)
--c++
--debug
--nodebug
--nodefault
--default
--ecs
--noecs
--fast
--full
--header-file[=FILE]
--help
--hex
--interactive
--lex-compat
--posix-compat
--preproc=NUM
--noline
--main
--nomain
--meta-ecs
--nometa-ecs
--never-interactive
-o FILE
--outfile=FILE
--perf-report
--pointer
-P PREFIX
--prefix=PREFIX
-Dmacro
--read
--noreentrant
--reject
--noreject
-S FILE
--skel=FILE
--stack
--stdinit
--nostdinit
--stdout
--trace
--tables-file[=FILE]
--tables-verify
--nounistd
--verbose
--version
--warn
--nowarn
--yyclass=NAME
--yylineno
--noyylineno
--yymore
--noyymore
--noyywrap
--yywrap
--nounput
--noyy_push_state
--noyy_pop_state
--noyy_top_state
--noyy_scan_buffer
--noyy_scan_bytes
--noyy_scan_string
--noyyget_extra
--noyyset_extra
--noyyget_leng
--noyyget_text
--noyyget_lineno
--noyyset_lineno
--noyyget_in
--noyyset_in
--noyyget_out
--noyyset_out
--noyyget_lval
--noyyset_lval
--noyyget_lloc
--noyyset_lloc
--unsafe-no-m4-sect3-escape
YY_FATAL_ERROR( "flex scanner jammed" )
ECHO
YY_BREAK]]
INITIAL
unknown error processing section 1
bad start condition list
Prefix must not contain [ or ]
'^' operator results in sub-optimal performance
all start conditions already have <<EOF>> rules
unrecognized rule
undeclared start condition %s
<%s> specified twice
trailing context made variable due to preceding '|' action
trailing context used twice
bad iteration values
iteration value must be positive
the character range [%c-%c] is ambiguous in a case-insensitive scanner
negative range in character class
[:^lower:] is ambiguous in case insensitive scanner
[:^upper:] ambiguous in case insensitive scanner
multiple <<EOF>> rules for start condition %s
warning, %s
%s:%d: %s
/*[[
malformed '%top' directive
unrecognized '%' directive
Definition name too long
Input line too long
*/]]
[]][[[]][[
]]][[]]][[
Unmatched '{'
Definition value for {%s} too long
incomplete name definition
YY_NO_INPUT
M4_YY_MAIN
YY_NO_UNISTD_H
M4_YY_NO_FLEX_ALLOC
M4_YY_NO_FLEX_REALLOC
M4_YY_NO_FLEX_FREE
M4_YY_NO_GET_DEBUG
M4_YY_NO_SET_DEBUG
Option line too long
unrecognized %%option: %s
/* Begin user sect3 */
undefined definition {%s}
unbalanced parenthesis
bad <start condition>: %s
missing quote
bad character class
bad character class expression: %s
bad character inside {}'s
missing }
YY_BREAK]]
EOF encountered inside an action
EOF encountered inside pattern
[[%s]]
bad character: %s
flex scanner jammed
fatal flex scanner internal error--no action found
out of dynamic memory in yy_create_buffer()
out of dynamic memory in yy_scan_buffer()
out of dynamic memory in yy_scan_bytes()
bad buffer in yy_scan_bytes()
can't open %s
fatal flex scanner internal error--end of buffer missed
fatal error - scanner input buffer overflow
input in flex scanner failed
out of dynamic memory in yy_get_next_buffer()
flex scanner push-back overflow
out of dynamic memory in yyensure_buffer_stack()
out of memory expanding start-condition stack
start-condition stack underflow
Unable to allocate %zu of stack
Usage: %s [OPTIONS]...
%.*s
COLUMNS
%s: 
option `%s' doesn't allow an argument
option `%s' requires an argument
option `%s' is ambiguous
Unrecognized option `%s'
Unknown error=(%d)
/* A lexical scanner generated by flex */
m4_changecom
m4_changequote
m4_changequote([[, ]])
m4_ifelse(M4_YY_PREFIX,yy,,
#define yy_create_buffer M4_YY_PREFIX[[_create_buffer]]
#define yy_delete_buffer M4_YY_PREFIX[[_delete_buffer]]
#define yy_scan_buffer M4_YY_PREFIX[[_scan_buffer]]
#define yy_scan_string M4_YY_PREFIX[[_scan_string]]
#define yy_scan_bytes M4_YY_PREFIX[[_scan_bytes]]
#define yy_init_buffer M4_YY_PREFIX[[_init_buffer]]
#define yy_flush_buffer M4_YY_PREFIX[[_flush_buffer]]
#define yy_load_buffer_state M4_YY_PREFIX[[_load_buffer_state]]
#define yy_switch_to_buffer M4_YY_PREFIX[[_switch_to_buffer]]
#define yypush_buffer_state M4_YY_PREFIX[[push_buffer_state]]
#define yypop_buffer_state M4_YY_PREFIX[[pop_buffer_state]]
#define yyensure_buffer_stack M4_YY_PREFIX[[ensure_buffer_stack]]
#define yy_flex_debug M4_YY_PREFIX[[_flex_debug]]
#define yyin M4_YY_PREFIX[[in]]
#define yyleng M4_YY_PREFIX[[leng]]
#define yylex M4_YY_PREFIX[[lex]]
#define yylineno M4_YY_PREFIX[[lineno]]
#define yyout M4_YY_PREFIX[[out]]
#define yyrestart M4_YY_PREFIX[[restart]]
#define yytext M4_YY_PREFIX[[text]]
#define yywrap M4_YY_PREFIX[[wrap]]
#define yyalloc M4_YY_PREFIX[[alloc]]
#define yyrealloc M4_YY_PREFIX[[realloc]]
#define yyfree M4_YY_PREFIX[[free]]
#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
m4_ifdef( [[M4_YY_IN_HEADER]], , [[m4_define([[M4_YY_NOT_IN_HEADER]], [[]])]])
m4_ifdef( [[M4_YY_REENTRANT]], , [[m4_define([[M4_YY_NOT_REENTRANT]], [[]])]])
m4_ifdef( [[M4_YY_STACK_USED]], [[m4_define([[M4_YY_HAS_START_STACK_VARS]])]])
m4_ifdef( [[M4_YY_REENTRANT]],  [[m4_define([[M4_YY_HAS_START_STACK_VARS]])]])
m4_ifdef( [[M4_YY_PREFIX]],, [[m4_define([[M4_YY_PREFIX]], [[yy]])]])
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer M4_YY_PREFIX[[FlexLexer]]
[[#ifdef yy_create_buffer
#define ]]M4_YY_PREFIX[[_create_buffer_ALREADY_DEFINED
#define yy_create_buffer ]]M4_YY_PREFIX[[_create_buffer
#endif]]
[[#ifdef yy_delete_buffer
#define ]]M4_YY_PREFIX[[_delete_buffer_ALREADY_DEFINED
#define yy_delete_buffer ]]M4_YY_PREFIX[[_delete_buffer
[[#ifdef yy_scan_buffer
#define ]]M4_YY_PREFIX[[_scan_buffer_ALREADY_DEFINED
#define yy_scan_buffer ]]M4_YY_PREFIX[[_scan_buffer
[[#ifdef yy_scan_string
#define ]]M4_YY_PREFIX[[_scan_string_ALREADY_DEFINED
#define yy_scan_string ]]M4_YY_PREFIX[[_scan_string
[[#ifdef yy_scan_bytes
#define ]]M4_YY_PREFIX[[_scan_bytes_ALREADY_DEFINED
#define yy_scan_bytes ]]M4_YY_PREFIX[[_scan_bytes
[[#ifdef yy_init_buffer
#define ]]M4_YY_PREFIX[[_init_buffer_ALREADY_DEFINED
#define yy_init_buffer ]]M4_YY_PREFIX[[_init_buffer
[[#ifdef yy_flush_buffer
#define ]]M4_YY_PREFIX[[_flush_buffer_ALREADY_DEFINED
#define yy_flush_buffer ]]M4_YY_PREFIX[[_flush_buffer
[[#ifdef yy_load_buffer_state
#define ]]M4_YY_PREFIX[[_load_buffer_state_ALREADY_DEFINED
#define yy_load_buffer_state ]]M4_YY_PREFIX[[_load_buffer_state
[[#ifdef yy_switch_to_buffer
#define ]]M4_YY_PREFIX[[_switch_to_buffer_ALREADY_DEFINED
#define yy_switch_to_buffer ]]M4_YY_PREFIX[[_switch_to_buffer
[[#ifdef yypush_buffer_state
#define ]]M4_YY_PREFIX[[push_buffer_state_ALREADY_DEFINED
#define yypush_buffer_state ]]M4_YY_PREFIX[[push_buffer_state
[[#ifdef yypop_buffer_state
#define ]]M4_YY_PREFIX[[pop_buffer_state_ALREADY_DEFINED
#define yypop_buffer_state ]]M4_YY_PREFIX[[pop_buffer_state
[[#ifdef yyensure_buffer_stack
#define ]]M4_YY_PREFIX[[ensure_buffer_stack_ALREADY_DEFINED
#define yyensure_buffer_stack ]]M4_YY_PREFIX[[ensure_buffer_stack
[[#ifdef yylex
#define ]]M4_YY_PREFIX[[lex_ALREADY_DEFINED
#define yylex ]]M4_YY_PREFIX[[lex
[[#ifdef yyrestart
#define ]]M4_YY_PREFIX[[restart_ALREADY_DEFINED
#define yyrestart ]]M4_YY_PREFIX[[restart
[[#ifdef yylex_init
#define ]]M4_YY_PREFIX[[lex_init_ALREADY_DEFINED
#define yylex_init ]]M4_YY_PREFIX[[lex_init
[[#ifdef yylex_init_extra
#define ]]M4_YY_PREFIX[[lex_init_extra_ALREADY_DEFINED
#define yylex_init_extra ]]M4_YY_PREFIX[[lex_init_extra
[[#ifdef yylex_destroy
#define ]]M4_YY_PREFIX[[lex_destroy_ALREADY_DEFINED
#define yylex_destroy ]]M4_YY_PREFIX[[lex_destroy
[[#ifdef yyget_debug
#define ]]M4_YY_PREFIX[[get_debug_ALREADY_DEFINED
#define yyget_debug ]]M4_YY_PREFIX[[get_debug
[[#ifdef yyset_debug
#define ]]M4_YY_PREFIX[[set_debug_ALREADY_DEFINED
#define yyset_debug ]]M4_YY_PREFIX[[set_debug
[[#ifdef yyget_extra
#define ]]M4_YY_PREFIX[[get_extra_ALREADY_DEFINED
#define yyget_extra ]]M4_YY_PREFIX[[get_extra
[[#ifdef yyset_extra
#define ]]M4_YY_PREFIX[[set_extra_ALREADY_DEFINED
#define yyset_extra ]]M4_YY_PREFIX[[set_extra
[[#ifdef yyget_in
#define ]]M4_YY_PREFIX[[get_in_ALREADY_DEFINED
#define yyget_in ]]M4_YY_PREFIX[[get_in
[[#ifdef yyset_in
#define ]]M4_YY_PREFIX[[set_in_ALREADY_DEFINED
#define yyset_in ]]M4_YY_PREFIX[[set_in
[[#ifdef yyget_out
#define ]]M4_YY_PREFIX[[get_out_ALREADY_DEFINED
#define yyget_out ]]M4_YY_PREFIX[[get_out
[[#ifdef yyset_out
#define ]]M4_YY_PREFIX[[set_out_ALREADY_DEFINED
#define yyset_out ]]M4_YY_PREFIX[[set_out
[[#ifdef yyget_leng
#define ]]M4_YY_PREFIX[[get_leng_ALREADY_DEFINED
#define yyget_leng ]]M4_YY_PREFIX[[get_leng
[[#ifdef yyget_text
#define ]]M4_YY_PREFIX[[get_text_ALREADY_DEFINED
#define yyget_text ]]M4_YY_PREFIX[[get_text
[[#ifdef yyget_lineno
#define ]]M4_YY_PREFIX[[get_lineno_ALREADY_DEFINED
#define yyget_lineno ]]M4_YY_PREFIX[[get_lineno
[[#ifdef yyset_lineno
#define ]]M4_YY_PREFIX[[set_lineno_ALREADY_DEFINED
#define yyset_lineno ]]M4_YY_PREFIX[[set_lineno
    m4_ifdef( [[M4_YY_REENTRANT]],
    [[
        
[[#ifdef yyget_column
#define ]]M4_YY_PREFIX[[get_column_ALREADY_DEFINED
#define yyget_column ]]M4_YY_PREFIX[[get_column
[[#ifdef yyset_column
#define ]]M4_YY_PREFIX[[set_column_ALREADY_DEFINED
#define yyset_column ]]M4_YY_PREFIX[[set_column
    ]])
[[#ifdef yywrap
#define ]]M4_YY_PREFIX[[wrap_ALREADY_DEFINED
#define yywrap ]]M4_YY_PREFIX[[wrap
m4_ifdef( [[M4_YY_BISON_LVAL]],
[[#ifdef yyget_lval
#define ]]M4_YY_PREFIX[[get_lval_ALREADY_DEFINED
#define yyget_lval ]]M4_YY_PREFIX[[get_lval
[[#ifdef yyset_lval
#define ]]M4_YY_PREFIX[[set_lval_ALREADY_DEFINED
#define yyset_lval ]]M4_YY_PREFIX[[set_lval
m4_ifdef( [[<M4_YY_BISON_LLOC>]],
[[#ifdef yyget_lloc
#define ]]M4_YY_PREFIX[[get_lloc_ALREADY_DEFINED
#define yyget_lloc ]]M4_YY_PREFIX[[get_lloc
[[#ifdef yyset_lloc
#define ]]M4_YY_PREFIX[[set_lloc_ALREADY_DEFINED
#define yyset_lloc ]]M4_YY_PREFIX[[set_lloc
[[#ifdef yyalloc
#define ]]M4_YY_PREFIX[[alloc_ALREADY_DEFINED
#define yyalloc ]]M4_YY_PREFIX[[alloc
[[#ifdef yyrealloc
#define ]]M4_YY_PREFIX[[realloc_ALREADY_DEFINED
#define yyrealloc ]]M4_YY_PREFIX[[realloc
[[#ifdef yyfree
#define ]]M4_YY_PREFIX[[free_ALREADY_DEFINED
#define yyfree ]]M4_YY_PREFIX[[free
m4_ifdef( [[M4_YY_NOT_REENTRANT]],
[[#ifdef yytext
#define ]]M4_YY_PREFIX[[text_ALREADY_DEFINED
#define yytext ]]M4_YY_PREFIX[[text
[[#ifdef yyleng
#define ]]M4_YY_PREFIX[[leng_ALREADY_DEFINED
#define yyleng ]]M4_YY_PREFIX[[leng
[[#ifdef yyin
#define ]]M4_YY_PREFIX[[in_ALREADY_DEFINED
#define yyin ]]M4_YY_PREFIX[[in
[[#ifdef yyout
#define ]]M4_YY_PREFIX[[out_ALREADY_DEFINED
#define yyout ]]M4_YY_PREFIX[[out
[[#ifdef yy_flex_debug
#define ]]M4_YY_PREFIX[[_flex_debug_ALREADY_DEFINED
#define yy_flex_debug ]]M4_YY_PREFIX[[_flex_debug
[[#ifdef yylineno
#define ]]M4_YY_PREFIX[[lineno_ALREADY_DEFINED
#define yylineno ]]M4_YY_PREFIX[[lineno
m4_ifdef( [[M4_YY_TABLES_EXTERNAL]],
[[#ifdef yytables_fload
#define ]]M4_YY_PREFIX[[tables_fload_ALREADY_DEFINED
#define yytables_fload ]]M4_YY_PREFIX[[tables_fload
[[#ifdef yytables_destroy
#define ]]M4_YY_PREFIX[[tables_destroy_ALREADY_DEFINED
#define yytables_destroy ]]M4_YY_PREFIX[[tables_destroy
[[#ifdef yyTABLES_NAME
#define ]]M4_YY_PREFIX[[TABLES_NAME_ALREADY_DEFINED
#define yyTABLES_NAME ]]M4_YY_PREFIX[[TABLES_NAME
/* First, we deal with  platform-specific or compiler-specific issues. */
/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
#include <sys/types.h>
#include <netinet/in.h>
/* end standard C headers. */
/* flex integer type definitions */
#ifndef FLEXINT_H
#define FLEXINT_H
/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#ifndef INT8_MAX
#define INT8_MAX               (127)
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif /* ! C99 */
#endif /* ! FLEXINT_H */
/* begin standard C++ headers. */
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* TODO: this is always defined, so inline it */
#define yyconst const
#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#define yynoreturn
/* Returned upon end-of-file. */
#define YY_NULL 0
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
m4_define( [[M4_YY_DECL_GUTS_VAR]], [[struct yyguts_t * yyg = (struct yyguts_t*)yyscanner]])
m4_define( [[M4_YY_NOOP_GUTS_VAR]], [[(void)yyg]])
m4_define( [[YY_G]], [[yyg->$1]])
m4_define( [[M4_YY_PROTO_LAST_ARG]],  [[, yyscan_t yyscanner]])
m4_define( [[M4_YY_PROTO_ONLY_ARG]],  [[yyscan_t yyscanner]])
m4_define( [[M4_YY_DEF_LAST_ARG]],  [[, yyscan_t yyscanner]])
m4_define( [[M4_YY_DEF_ONLY_ARG]],  [[yyscan_t yyscanner]])
m4_define( [[M4_YY_DECL_LAST_ARG]],  [[yyscan_t yyscanner;]])
m4_define( [[M4_YY_CALL_LAST_ARG]], [[, yyscanner]])
m4_define( [[M4_YY_CALL_ONLY_ARG]], [[yyscanner]])
m4_define( [[M4_YY_DOC_PARAM]], [[@param yyscanner The scanner object.]])
/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin YY_G(yyin_r)
#define yyout YY_G(yyout_r)
#define yyextra YY_G(yyextra_r)
#define yyleng YY_G(yyleng_r)
#define yytext YY_G(yytext_r)
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug YY_G(yy_flex_debug_r)
m4_define( [[M4_YY_INCR_LINENO]],
    do{ yylineno++;
        yycolumn=0;
    }while(0)
    yylineno++;
m4_define( [[M4_YY_DECL_GUTS_VAR]], [[m4_dnl]])
m4_define( [[M4_YY_NOOP_GUTS_VAR]], [[m4_dnl]])
m4_define( [[YY_G]], [[($1)]])
m4_define( [[M4_YY_PROTO_LAST_ARG]])
m4_define( [[M4_YY_PROTO_ONLY_ARG]],  [[void]])
m4_define( [[M4_YY_DEF_LAST_ARG]])
m4_define( [[M4_YY_DEF_ONLY_ARG]],  [[void]])
m4_define([[M4_YY_DECL_LAST_ARG]])
m4_define([[M4_YY_CALL_LAST_ARG]])
m4_define([[M4_YY_CALL_ONLY_ARG]])
m4_define( [[M4_YY_DOC_PARAM]], )
m4_define( [[YYFARGS1]], [[($1 $2 M4_YY_DEF_LAST_ARG)]])
m4_define( [[YYFARGS2]], [[($1 $2, $3 $4 M4_YY_DEF_LAST_ARG)]])
m4_define( [[YYFARGS3]], [[($1 $2, $3 $4, $5 $6 M4_YY_DEF_LAST_ARG)]])
m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
#define BEGIN YY_G(yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
#define YY_START ((YY_G(yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin M4_YY_CALL_LAST_ARG )
#define YY_END_OF_BUFFER_CHAR 0
/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
#define YY_BUF_SIZE 32768
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
/* The state buf must be large enough to hold one state per character in the main buffer.
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
extern yy_size_t yyleng;
extern FILE *yyin, *yyout;
#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    m4_ifdef( [[M4_YY_USE_LINENO]],
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
    ]],
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
do \
/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
*yy_cp = YY_G(yy_hold_char); \
YY_RESTORE_YY_MORE_OFFSET \
YY_G(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
YY_DO_BEFORE_ACTION; /* set up yytext again */ \
while ( 0 )
#define unput(c) yyunput( c, YY_G(yytext_ptr) M4_YY_CALL_LAST_ARG )
#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
FILE *yy_input_file;
std::streambuf* yy_input_file;
char *yy_ch_buf;
/* input buffer */
char *yy_buf_pos;
/* current position in input buffer */
/* Size of input buffer in bytes, not including room for EOB
 * characters.
int yy_buf_size;
/* Number of characters read into yy_ch_buf, not including EOB
yy_size_t yy_n_chars;
/* Whether we "own" the buffer - i.e., we know we created it,
 * and can realloc() it to grow it, and should free() it to
 * delete it.
int yy_is_our_buffer;
/* Whether this is an "interactive" input source; if so, and
 * if we're using stdio for input, then we want to use getc()
 * instead of fread(), to make sure we stop fetching input after
 * each newline.
int yy_is_interactive;
/* Whether we're considered to be at the beginning of a line.
 * If so, '^' rules will be active on the next match, otherwise
 * not.
int yy_at_bol;
    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
/* Whether to try to fill the input buffer when we reach the
 * end of it.
int yy_fill_buffer;
int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
/* When an EOF's been seen but there's still some text to process
 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
 * shouldn't try reading from the input source any more.  We might
 * still have a bunch of tokens to match, though, because of
 * possible backing-up.
 * When we actually see the EOF, we change the status to "new"
 * (via yyrestart()), so that the user can continue scanning by
 * just pointing yyin at a new input file.
#define YY_BUFFER_EOF_PENDING 2
#endif /* !YY_STRUCT_YY_BUFFER_STATE */
%if-c-only Standard (non-C++) definition
/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 * Returns the top of the stack, or NULL.
#define YY_CURRENT_BUFFER ( YY_G(yy_buffer_stack) \
                          ? YY_G(yy_buffer_stack)[YY_G(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
#define YY_CURRENT_BUFFER_LVALUE YY_G(yy_buffer_stack)[YY_G(yy_buffer_stack_top)]
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;
/* number of characters read into yy_ch_buf */
yy_size_t yyleng;
/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;
/* whether we need to initialize */
static int yy_start = 0;
/* start state number */
/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
static int yy_did_buffer_switch_on_eof;
void yyrestart ( FILE *input_file M4_YY_PROTO_LAST_ARG );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer M4_YY_PROTO_LAST_ARG );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size M4_YY_PROTO_LAST_ARG );
void yy_delete_buffer ( YY_BUFFER_STATE b M4_YY_PROTO_LAST_ARG );
void yy_flush_buffer ( YY_BUFFER_STATE b M4_YY_PROTO_LAST_ARG );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer M4_YY_PROTO_LAST_ARG );
void yypop_buffer_state ( M4_YY_PROTO_ONLY_ARG );
static void yyensure_buffer_stack ( M4_YY_PROTO_ONLY_ARG );
static void yy_load_buffer_state ( M4_YY_PROTO_ONLY_ARG );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file M4_YY_PROTO_LAST_ARG );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER M4_YY_CALL_LAST_ARG)
YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size M4_YY_PROTO_LAST_ARG );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str M4_YY_PROTO_LAST_ARG );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, yy_size_t len M4_YY_PROTO_LAST_ARG );
void *yyalloc ( yy_size_t M4_YY_PROTO_LAST_ARG );
void *yyrealloc ( void *, yy_size_t M4_YY_PROTO_LAST_ARG );
void yyfree ( void * M4_YY_PROTO_LAST_ARG );
#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (M4_YY_CALL_ONLY_ARG); \
YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE M4_YY_CALL_LAST_ARG); \
YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
#define yy_set_bol(at_bol) \
if ( ! YY_CURRENT_BUFFER ){\
YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
%% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here
%% [1.5] DFA
static yy_state_type yy_get_previous_state ( M4_YY_PROTO_ONLY_ARG );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  M4_YY_PROTO_LAST_ARG);
static int yy_get_next_buffer ( M4_YY_PROTO_ONLY_ARG );
static void yynoreturn yy_fatal_error ( const char* msg M4_YY_PROTO_LAST_ARG );
/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
#define YY_DO_BEFORE_ACTION \
YY_G(yytext_ptr) = yy_bp; \
%% [2.0] code to fiddle yytext and yyleng for yymore() goes here \
YY_G(yy_hold_char) = *yy_cp; \
*yy_cp = '\0'; \
%% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \
YY_G(yy_c_buf_p) = yy_cp;
%% [4.0] data tables for the DFA and the user's section 1 definitions go here
m4_ifdef( [[M4_YY_IN_HEADER]], [[#ifdef YY_HEADER_EXPORT_START_CONDITIONS]])
m4_ifdef( [[M4_YY_IN_HEADER]], [[#endif]])
m4_ifdef( [[M4_YY_NO_UNISTD_H]],,
#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
#include <unistd.h>
m4_ifdef( [[M4_EXTRA_TYPE_DEFS]],
#define YY_EXTRA_TYPE M4_EXTRA_TYPE_DEFS
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
%if-c-only Reentrant structure and macros (non-C++).
/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;
    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;
    int yylineno_r;
    int yy_flex_debug_r;
m4_ifdef( [[M4_YY_USES_REJECT]],
    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;
    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;
m4_ifdef( [[M4_YY_TEXT_IS_ARRAY]],
    char yytext_r[YYLMAX];
    char *yytext_ptr;
    int yy_more_offset;
    int yy_prev_more_offset;
    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;
    YYSTYPE * yylval_r;
    YYLTYPE * yylloc_r;
    }; /* end struct yyguts_t */
static int yy_init_globals ( M4_YY_PROTO_ONLY_ARG );
    m4_ifdef( [[M4_YY_BISON_LVAL]],
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval YY_G(yylval_r)
    m4_ifdef( [[<M4_YY_BISON_LLOC>]],
    #    define yylloc YY_G(yylloc_r)
int yylex_init (yyscan_t* scanner);
int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);
%endif End reentrant structures and macros.
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */
m4_ifdef( [[M4_YY_NO_DESTROY]],,
int yylex_destroy ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_NO_GET_DEBUG]],,
int yyget_debug ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_NO_SET_DEBUG]],,
void yyset_debug ( int debug_flag M4_YY_PROTO_LAST_ARG );
m4_ifdef( [[M4_YY_NO_GET_EXTRA]],,
YY_EXTRA_TYPE yyget_extra ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_NO_SET_EXTRA]],,
void yyset_extra ( YY_EXTRA_TYPE user_defined M4_YY_PROTO_LAST_ARG );
m4_ifdef( [[M4_YY_NO_GET_IN]],,
FILE *yyget_in ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_NO_SET_IN]],,
void yyset_in  ( FILE * _in_str M4_YY_PROTO_LAST_ARG );
m4_ifdef( [[M4_YY_NO_GET_OUT]],,
FILE *yyget_out ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_NO_SET_OUT]],,
void yyset_out  ( FILE * _out_str M4_YY_PROTO_LAST_ARG );
m4_ifdef( [[M4_YY_NO_GET_LENG]],,
yy_size_t yyget_leng ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_NO_GET_TEXT]],,
char *yyget_text ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_NO_GET_LINENO]],,
int yyget_lineno ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_NO_SET_LINENO]],,
void yyset_lineno ( int _line_number M4_YY_PROTO_LAST_ARG );
m4_ifdef( [[M4_YY_REENTRANT]],
m4_ifdef( [[M4_YY_NO_GET_COLUMN]],,
int yyget_column  ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_NO_SET_COLUMN]],,
void yyset_column ( int _column_no M4_YY_PROTO_LAST_ARG );
m4_ifdef( [[M4_YY_NO_GET_LVAL]],,
YYSTYPE * yyget_lval ( M4_YY_PROTO_ONLY_ARG );
void yyset_lval ( YYSTYPE * yylval_param M4_YY_PROTO_LAST_ARG );
    m4_ifdef( [[M4_YY_NO_GET_LLOC]],,
       YYLTYPE *yyget_lloc ( M4_YY_PROTO_ONLY_ARG );
    m4_ifdef( [[M4_YY_NO_SET_LLOC]],,
        void yyset_lloc ( YYLTYPE * yylloc_param M4_YY_PROTO_LAST_ARG );
/* Macros after this point can all be overridden by user definitions in
 * section 1.
#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( M4_YY_PROTO_ONLY_ARG );
extern int yywrap ( M4_YY_PROTO_ONLY_ARG );
#ifndef YY_NO_UNPUT
    m4_ifdef( [[M4_YY_NO_UNPUT]],,
    static void yyunput ( int c, char *buf_ptr  M4_YY_PROTO_LAST_ARG);
#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int M4_YY_PROTO_LAST_ARG);
#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * M4_YY_PROTO_LAST_ARG);
#ifndef YY_NO_INPUT
static int yyinput ( M4_YY_PROTO_ONLY_ARG );
static int input ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_STACK_USED]],
    m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    m4_ifdef( [[M4_YY_NO_PUSH_STATE]],,
    static void yy_push_state ( int _new_state M4_YY_PROTO_LAST_ARG);
    m4_ifdef( [[M4_YY_NO_POP_STATE]],,
    static void yy_pop_state ( M4_YY_PROTO_ONLY_ARG );
    m4_ifdef( [[M4_YY_NO_TOP_STATE]],,
    static int yy_top_state ( M4_YY_PROTO_ONLY_ARG );
m4_define( [[M4_YY_NO_PUSH_STATE]])
m4_define( [[M4_YY_NO_POP_STATE]])
m4_define( [[M4_YY_NO_TOP_STATE]])
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#define YY_READ_BUF_SIZE 8192
/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
%if-c++-only C++ definition
#define ECHO LexerOutput( yytext, yyleng )
/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
%% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \
%if-c++-only C++ definition \
if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
YY_FATAL_ERROR( "input in flex scanner failed" );
/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
#ifndef yyterminate
#define yyterminate() return YY_NULL
/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg M4_YY_CALL_LAST_ARG)
#define YY_FATAL_ERROR(msg) LexerError( msg )
%if-tables-serialization structures and prototypes
#ifdef FLEX_SCANNER
dnl  tables_shared.h - tables serialization header
dnl  Copyright (c) 1990 The Regents of the University of California.
dnl  All rights reserved.
dnl  This code is derived from software contributed to Berkeley by
dnl  Vern Paxson.
dnl  The United States Government has rights in this work pursuant
dnl  to contract no. DE-AC03-76SF00098 between the United States
dnl  Department of Energy and the University of California.
dnl  This file is part of flex.
dnl  Redistribution and use in source and binary forms, with or without
dnl  modification, are permitted provided that the following conditions
dnl  are met:
dnl  1. Redistributions of source code must retain the above copyright
dnl     notice, this list of conditions and the following disclaimer.
dnl  2. Redistributions in binary form must reproduce the above copyright
dnl     notice, this list of conditions and the following disclaimer in the
dnl     documentation and/or other materials provided with the distribution.
dnl  Neither the name of the University nor the names of its contributors
dnl  may be used to endorse or promote products derived from this software
dnl  without specific prior written permission.
dnl  THIS SOFTWARE IS PROVIDED `AS IS' AND WITHOUT ANY EXPRESS OR
dnl  IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
dnl  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
dnl  PURPOSE.
dnl  This file is meant to be included in both the skeleton and the actual
dnl  flex code (hence the name "_shared").
#ifndef yyskel_static
#define yyskel_static static
#define yyskel_static
/* Structures and prototypes for serializing flex tables.  The
 * binary format is documented in the manual.
 * Design considerations:
 *  -  The format allows many tables per file.
 *  -  The tables can be streamed.
 *  -  All data is stored in network byte order.
 *  -  We do not hinder future unicode support.
 *  -  We can lookup tables by name.
/** Magic number for serialized format. */
#ifndef YYTBL_MAGIC
#define YYTBL_MAGIC 0xF13C57B1
/** Calculate (0-7) = number bytes needed to pad n to next 64-bit boundary. */
#ifndef yypad64
#define yypad64(n) ((8-((n)%8))%8)
#ifndef YYTABLES_TYPES
#define YYTABLES_TYPES
/** Possible values for td_id field. Each one corresponds to a
 *  scanner table of the same name.
enum yytbl_id {
YYTD_ID_ACCEPT = 0x01,
/**< 1-dim ints */
YYTD_ID_BASE = 0x02,
/**< 1-dim ints */
YYTD_ID_CHK = 0x03,
/**< 1-dim ints */
YYTD_ID_DEF = 0x04,
/**< 1-dim ints */
YYTD_ID_EC = 0x05,
/**< 1-dim ints */
YYTD_ID_META = 0x06,
/**< 1-dim ints */
YYTD_ID_NUL_TRANS = 0x07,
/**< 1-dim ints, maybe indices */
YYTD_ID_NXT = 0x08,
/**< may be 2 dimensional ints */
YYTD_ID_RULE_CAN_MATCH_EOL = 0x09, /**< 1-dim ints */
YYTD_ID_START_STATE_LIST = 0x0A,
/**< 1-dim indices into trans tbl  */
YYTD_ID_TRANSITION = 0x0B,
/**< structs */
YYTD_ID_ACCLIST = 0x0C
/**< 1-dim ints */
/** bit flags for t_flags field of struct yytbl_data */
enum yytbl_flags {
/* These first three are mutually exclusive */
YYTD_DATA8 = 0x01,   /**< data is an array of type flex_int8_t */
YYTD_DATA16 = 0x02,  /**< data is an array of type flex_int16_t */
YYTD_DATA32 = 0x04,  /**< data is an array of type flex_int32_t */
/* These two are mutually exclusive. */
YYTD_PTRANS = 0x08,  /**< data is a list of indexes of entries
                                 into the expanded yy_transition
                                 array. See notes in manual. */
YYTD_STRUCT = 0x10  /**< data consists of yy_trans_info structs */
/* The serialized tables header. */
struct yytbl_hdr {
flex_uint32_t th_magic;  /**< Must be 0xF13C57B1 (comes from "Flex Table") */
flex_uint32_t th_hsize;  /**< Size of this header in bytes. */
flex_uint32_t th_ssize;  /**< Size of this dataset, in bytes, including header. */
flex_uint16_t th_flags;  /**< Currently unused, must be 0 */
char   *th_version; /**< Flex version string. NUL terminated. */
char   *th_name;    /**< The name of this table set. NUL terminated. */
/** A single serialized table */
struct yytbl_data {
flex_uint16_t td_id;      /**< enum yytbl_id table identifier */
flex_uint16_t td_flags;   /**< how to interpret this data */
flex_uint32_t td_hilen;   /**< num elements in highest dimension array */
flex_uint32_t td_lolen;   /**< num elements in lowest dimension array */
void   *td_data;     /**< table data */
/** Extract corresponding data size_t from td_flags */
#ifndef YYTDFLAGS2BYTES
#define YYTDFLAGS2BYTES(td_flags)\
        (((td_flags) & YYTD_DATA8)\
            ? sizeof(flex_int8_t)\
            :(((td_flags) & YYTD_DATA16)\
                ? sizeof(flex_int16_t)\
                :sizeof(flex_int32_t)))
yyskel_static flex_int32_t yytbl_calc_total_len (const struct yytbl_data *tbl);
/* vim:set noexpandtab cindent tabstop=8 softtabstop=0 shiftwidth=8 textwidth=0: */
/* Load the DFA tables from the given stream.  */
int yytables_fload (FILE * fp M4_YY_PROTO_LAST_ARG);
/* Unload the tables from memory. */
int yytables_destroy (M4_YY_PROTO_ONLY_ARG);
/** Describes a mapping from a serialized table id to its deserialized state in
 * this scanner.  This is the bridge between our "generic" deserialization code
 * and the specifics of this scanner.
struct yytbl_dmap {
enum yytbl_id dm_id;/**< table identifier */
void  **dm_arr;
/**< address of pointer to store the deserialized table. */
size_t  dm_sz;
/**< local sizeof() each element in table. */
/** A {0,0,0}-terminated list of structs, forming the map */
static struct yytbl_dmap yydmap[] =
%tables-yydmap generated elements
    {0,0,0}
/** A tables-reader object to maintain some state in the read. */
struct yytbl_reader {
    FILE * fp; /**< input stream */
    flex_uint32_t bread; /**< bytes read since beginning of current tableset */
/* end tables serialization structures and prototypes */
/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
m4_define( [[M4_YY_LEX_PROTO]], [[(M4_YY_PROTO_ONLY_ARG)]])
m4_define( [[M4_YY_LEX_DECLARATION]], [[(M4_YY_DEF_ONLY_ARG)]])
    m4_dnl  The bison pure parser is used. Redefine yylex to
    m4_dnl  accept the lval parameter.
    m4_define( [[M4_YY_LEX_PROTO]], [[\]]
               [[(YYSTYPE * yylval_param M4_YY_PROTO_LAST_ARG)]])
    m4_define( [[M4_YY_LEX_DECLARATION]], [[\]]
               [[YYFARGS1(YYSTYPE *,yylval_param)]])
    m4_dnl  Locations are used. yylex should also accept the ylloc parameter.
               [[(YYSTYPE * yylval_param, YYLTYPE * yylloc_param M4_YY_PROTO_LAST_ARG)]])
               [[YYFARGS2(YYSTYPE *,yylval_param, YYLTYPE *,yylloc_param)]])
extern int yylex M4_YY_LEX_PROTO;
#define YY_DECL int yylex M4_YY_LEX_DECLARATION
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */
/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
%% [6.0] YY_RULE_SETUP definition goes here
/** The main scanner function which does all the work.
YY_DECL
yy_state_type yy_current_state;
char *yy_cp, *yy_bp;
int yy_act;
    M4_YY_DECL_GUTS_VAR();
        YYSTYPE * yylval;
        YYLTYPE * yylloc;
    yylval = yylval_param;
    yylloc = yylloc_param;
if ( !YY_G(yy_init) )
YY_G(yy_init) = 1;
#ifdef YY_USER_INIT
YY_USER_INIT;
        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! YY_G(yy_state_buf) )
            YY_G(yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  M4_YY_CALL_LAST_ARG);
            if ( ! YY_G(yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
if ( ! YY_G(yy_start) )
YY_G(yy_start) = 1;
/* first start state */
if ( ! yyin )
yyin = stdin;
yyin.rdbuf(std::cin.rdbuf());
if ( ! yyout )
yyout = stdout;
yyout.rdbuf(std::cout.rdbuf());
if ( ! YY_CURRENT_BUFFER ) {
yyensure_buffer_stack (M4_YY_CALL_ONLY_ARG);
YY_CURRENT_BUFFER_LVALUE =
yy_create_buffer( yyin, YY_BUF_SIZE M4_YY_CALL_LAST_ARG);
yy_load_buffer_state( M4_YY_CALL_ONLY_ARG );
%% [7.0] user's declarations go here
while ( /*CONSTCOND*/1 )
/* loops until end-of-file is reached */
%% [8.0] yymore()-related code goes here
yy_cp = YY_G(yy_c_buf_p);
/* Support of yytext. */
*yy_cp = YY_G(yy_hold_char);
/* yy_bp points to the position in yy_ch_buf of the start of
 * the current run.
yy_bp = yy_cp;
%% [9.0] code to set up and find next match goes here
yy_find_action:
%% [10.0] code to find the action number goes here
YY_DO_BEFORE_ACTION;
%% [11.0] code for yylineno update goes here
do_action:
/* This label is used only to access EOF actions. */
%% [12.0] debug code goes here
switch ( yy_act )
{ /* beginning of action switch */
%% [13.0] actions go here
case YY_END_OF_BUFFER:
/* Amount of text matched not including the EOB char. */
int yy_amount_of_matched_text = (int) (yy_cp - YY_G(yytext_ptr)) - 1;
/* Undo the effects of YY_DO_BEFORE_ACTION. */
YY_RESTORE_YY_MORE_OFFSET
if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
/* We're scanning a new file or input source.  It's
 * possible that this happened because the user
 * just pointed yyin at a new source and called
 * yylex().  If so, then we have to assure
 * consistency between YY_CURRENT_BUFFER and our
 * globals.  Here is the right place to do so, because
 * this is the first action (other than possibly a
 * back-up) that will match for the new input source.
YY_G(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
/* Note that here we test for yy_c_buf_p "<=" to the position
 * of the first EOB in the buffer, since yy_c_buf_p will
 * already have been incremented past the NUL character
 * (since all states make transitions on EOB to the
 * end-of-buffer state).  Contrast this with the test
 * in input().
if ( YY_G(yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars)] )
{ /* This was really a NUL. */
yy_state_type yy_next_state;
YY_G(yy_c_buf_p) = YY_G(yytext_ptr) + yy_amount_of_matched_text;
yy_current_state = yy_get_previous_state( M4_YY_CALL_ONLY_ARG );
/* Okay, we're now positioned to make the NUL
 * transition.  We couldn't have
 * yy_get_previous_state() go ahead and do it
 * for us because it doesn't know how to deal
 * with the possibility of jamming (and we don't
 * want to build jamming into it because then it
 * will run more slowly).
yy_next_state = yy_try_NUL_trans( yy_current_state M4_YY_CALL_LAST_ARG);
yy_bp = YY_G(yytext_ptr) + YY_MORE_ADJ;
if ( yy_next_state )
/* Consume the NUL. */
yy_cp = ++YY_G(yy_c_buf_p);
yy_current_state = yy_next_state;
goto yy_match;
else
%% [14.0] code to do back-up for compressed tables and set up yy_cp goes here
goto yy_find_action;
else switch ( yy_get_next_buffer( M4_YY_CALL_ONLY_ARG ) )
case EOB_ACT_END_OF_FILE:
YY_G(yy_did_buffer_switch_on_eof) = 0;
if ( yywrap( M4_YY_CALL_ONLY_ARG ) )
/* Note: because we've taken care in
 * yy_get_next_buffer() to have set up
 * yytext, we can now set up
 * yy_c_buf_p so that if some total
 * hoser (like flex itself) wants to
 * call the scanner after we return the
 * YY_NULL, it'll still work - another
 * YY_NULL will get returned.
YY_G(yy_c_buf_p) = YY_G(yytext_ptr) + YY_MORE_ADJ;
yy_act = YY_STATE_EOF(YY_START);
goto do_action;
else
if ( ! YY_G(yy_did_buffer_switch_on_eof) )
YY_NEW_FILE;
break;
case EOB_ACT_CONTINUE_SCAN:
YY_G(yy_c_buf_p) =
YY_G(yytext_ptr) + yy_amount_of_matched_text;
yy_current_state = yy_get_previous_state( M4_YY_CALL_ONLY_ARG );
yy_cp = YY_G(yy_c_buf_p);
yy_bp = YY_G(yytext_ptr) + YY_MORE_ADJ;
case EOB_ACT_LAST_MATCH:
&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars)];
break;
default:
YY_FATAL_ERROR(
"fatal flex scanner internal error--no action found" );
} /* end of action switch */
} /* end of scanning one token */
} /* end of user's declarations */
} /* end of yylex */
/* The contents of this function are C++ specific, so the YY_G macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
ctor_common();
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
yyin(arg_yyin.rdbuf()),
yyout(arg_yyout.rdbuf())
void yyFlexLexer::ctor_common()
yy_c_buf_p = 0;
yy_init = 0;
yy_start = 0;
yy_flex_debug = 0;
yylineno = 1;
// this will only get updated if %option yylineno
yy_did_buffer_switch_on_eof = 0;
yy_looking_for_trail_begin = 0;
yy_more_flag = 0;
yy_more_len = 0;
yy_more_offset = yy_prev_more_offset = 0;
yy_start_stack_ptr = yy_start_stack_depth = 0;
yy_start_stack = NULL;
yy_buffer_stack = NULL;
yy_buffer_stack_top = 0;
yy_buffer_stack_max = 0;
yy_state_buf = new yy_state_type[YY_STATE_BUF_SIZE];
yy_state_buf = 0;
yyFlexLexer::~yyFlexLexer()
delete [] yy_state_buf;
yyfree( yy_start_stack M4_YY_CALL_LAST_ARG );
yy_delete_buffer( YY_CURRENT_BUFFER M4_YY_CALL_LAST_ARG);
yyfree( yy_buffer_stack M4_YY_CALL_LAST_ARG );
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
// was if( new_in )
yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  M4_YY_CALL_LAST_ARG) M4_YY_CALL_LAST_ARG);
// was if( new_out )
yyout.rdbuf(new_out.rdbuf());
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
if( ! new_in ) {
new_in = &yyin;
if ( ! new_out ) {
new_out = &yyout;
switch_streams(*new_in, *new_out);
#ifdef YY_INTERACTIVE
size_t yyFlexLexer::LexerInput( char* buf, size_t /* max_size */ )
size_t yyFlexLexer::LexerInput( char* buf, size_t max_size )
if ( yyin.eof() || yyin.fail() )
return 0;
yyin.get( buf[0] );
if ( yyin.eof() )
if ( yyin.bad() )
return -1;
return 1;
(void) yyin.read( buf, max_size );
else
return yyin.gcount();
void yyFlexLexer::LexerOutput( const char* buf, size_t size )
(void) yyout.write( buf, size );
/* yy_get_next_buffer - try to read in a new buffer
 * Returns a code representing an action:
EOB_ACT_LAST_MATCH -
EOB_ACT_CONTINUE_SCAN - continue scanning from current position
EOB_ACT_END_OF_FILE - end of file
static int yy_get_next_buffer (M4_YY_DEF_ONLY_ARG)
int yyFlexLexer::yy_get_next_buffer()
char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
char *source = YY_G(yytext_ptr);
int number_to_move, i;
int ret_val;
if ( YY_G(yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars) + 1] )
"fatal flex scanner internal error--end of buffer missed" );
if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
{ /* Don't try to fill the buffer, so this is an EOF. */
if ( YY_G(yy_c_buf_p) - YY_G(yytext_ptr) - YY_MORE_ADJ == 1 )
/* We matched a single character, the EOB, so
 * treat this as a final EOF.
return EOB_ACT_END_OF_FILE;
else
/* We matched some text prior to the EOB, first
 * process it.
return EOB_ACT_LAST_MATCH;
/* Try to read more data. */
/* First move last chars to start of buffer. */
number_to_move = (int) (YY_G(yy_c_buf_p) - YY_G(yytext_ptr) - 1);
for ( i = 0; i < number_to_move; ++i )
*(dest++) = *(source++);
if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
/* don't do the read, it's not guaranteed to return an EOF,
 * just force an EOF
YY_CURRENT_BUFFER_LVALUE->yy_n_chars = YY_G(yy_n_chars) = 0;
yy_size_t num_to_read =
YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
while ( num_to_read <= 0 )
{ /* Not enough room in the buffer - grow it. */
YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
/* just a shorter name for the current buffer */
YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;
int yy_c_buf_p_offset =
(int) (YY_G(yy_c_buf_p) - b->yy_ch_buf);
if ( b->yy_is_our_buffer )
yy_size_t new_size = b->yy_buf_size * 2;
if ( new_size <= 0 )
b->yy_buf_size += b->yy_buf_size / 8;
b->yy_buf_size *= 2;
b->yy_ch_buf = (char *)
/* Include room in for 2 EOB chars. */
yyrealloc( (void *) b->yy_ch_buf,
 (yy_size_t) (b->yy_buf_size + 2) M4_YY_CALL_LAST_ARG );
/* Can't grow it, we don't own it. */
b->yy_ch_buf = NULL;
if ( ! b->yy_ch_buf )
YY_FATAL_ERROR(
"fatal error - scanner input buffer overflow" );
YY_G(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];
num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
number_to_move - 1;
if ( num_to_read > YY_READ_BUF_SIZE )
num_to_read = YY_READ_BUF_SIZE;
/* Read in more data. */
YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
YY_G(yy_n_chars), num_to_read );
YY_CURRENT_BUFFER_LVALUE->yy_n_chars = YY_G(yy_n_chars);
if ( YY_G(yy_n_chars) == 0 )
if ( number_to_move == YY_MORE_ADJ )
ret_val = EOB_ACT_END_OF_FILE;
yyrestart( yyin  M4_YY_CALL_LAST_ARG);
ret_val = EOB_ACT_LAST_MATCH;
YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
YY_BUFFER_EOF_PENDING;
ret_val = EOB_ACT_CONTINUE_SCAN;
if ((YY_G(yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
/* Extend the array by 50%, plus the number we really need. */
yy_size_t new_size = YY_G(yy_n_chars) + number_to_move + (YY_G(yy_n_chars) >> 1);
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size M4_YY_CALL_LAST_ARG );
if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
/* "- 2" to take care of EOB's */
YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
YY_G(yy_n_chars) += number_to_move;
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
YY_G(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
return ret_val;
/* yy_get_previous_state - get the state just before the EOB char was reached */
    static yy_state_type yy_get_previous_state (M4_YY_DEF_ONLY_ARG)
    yy_state_type yyFlexLexer::yy_get_previous_state()
char *yy_cp;
%% [15.0] code to get the start state into yy_current_state goes here
for ( yy_cp = YY_G(yytext_ptr) + YY_MORE_ADJ; yy_cp < YY_G(yy_c_buf_p); ++yy_cp )
%% [16.0] code to find the next state goes here
return yy_current_state;
/* yy_try_NUL_trans - try to make a transition on the NUL character
 * synopsis
next_state = yy_try_NUL_trans( current_state );
    static yy_state_type yy_try_NUL_trans  YYFARGS1( yy_state_type, yy_current_state)
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
int yy_is_jam;
    M4_YY_DECL_GUTS_VAR(); /* This var may be unused depending upon options. */
%% [17.0] code to find the next state, and perhaps do backing up, goes here
M4_YY_NOOP_GUTS_VAR();
return yy_is_jam ? 0 : yy_current_state;
m4_ifdef( [[M4_YY_NO_UNPUT]],,
    static void yyunput YYFARGS2( int,c, char *,yy_bp)
    void yyFlexLexer::yyunput( int c, char* yy_bp)
    yy_cp = YY_G(yy_c_buf_p);
/* undo effects of setting up yytext */
*yy_cp = YY_G(yy_hold_char);
if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
{ /* need to shift things up to make room */
/* +2 for EOB chars. */
yy_size_t number_to_move = YY_G(yy_n_chars) + 2;
char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
char *source =
&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];
while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
*--dest = *--source;
yy_cp += (int) (dest - source);
yy_bp += (int) (dest - source);
YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
YY_G(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;
if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
YY_FATAL_ERROR( "flex scanner push-back overflow" );
*--yy_cp = (char) c;
%% [18.0] update yylineno here
m4_ifdef( [[M4_YY_USE_LINENO]],
    if ( c == '\n' ){
        --yylineno;
    }
YY_G(yytext_ptr) = yy_bp;
YY_G(yy_hold_char) = *yy_cp;
    static int yyinput (M4_YY_DEF_ONLY_ARG)
    static int input  (M4_YY_DEF_ONLY_ARG)
    int yyFlexLexer::yyinput()
int c;
*YY_G(yy_c_buf_p) = YY_G(yy_hold_char);
if ( *YY_G(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
/* yy_c_buf_p now points to the character we want to return.
 * If this occurs *before* the EOB characters, then it's a
 * valid NUL; if not, then we've hit the end of the buffer.
if ( YY_G(yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars)] )
/* This was really a NUL. */
*YY_G(yy_c_buf_p) = '\0';
{ /* need more input */
yy_size_t offset = YY_G(yy_c_buf_p) - YY_G(yytext_ptr);
++YY_G(yy_c_buf_p);
switch ( yy_get_next_buffer( M4_YY_CALL_ONLY_ARG ) )
case EOB_ACT_LAST_MATCH:
/* This happens because yy_g_n_b()
 * sees that we've accumulated a
 * token and flags that we need to
 * try matching the token before
 * proceeding.  But for input(),
 * there's no matching to consider.
 * So convert the EOB_ACT_LAST_MATCH
 * to EOB_ACT_END_OF_FILE.
/* Reset buffer status. */
yyrestart( yyin M4_YY_CALL_LAST_ARG);
/*FALLTHROUGH*/
case EOB_ACT_END_OF_FILE:
if ( yywrap( M4_YY_CALL_ONLY_ARG ) )
return 0;
return yyinput(M4_YY_CALL_ONLY_ARG);
return input(M4_YY_CALL_ONLY_ARG);
case EOB_ACT_CONTINUE_SCAN:
YY_G(yy_c_buf_p) = YY_G(yytext_ptr) + offset;
break;
c = *(unsigned char *) YY_G(yy_c_buf_p);
/* cast for 8-bit char's */
*YY_G(yy_c_buf_p) = '\0';
/* preserve yytext */
YY_G(yy_hold_char) = *++YY_G(yy_c_buf_p);
%% [19.0] update BOL and yylineno
return c;
#endif
/* ifndef YY_NO_INPUT */
/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * M4_YY_DOC_PARAM
 * @note This function does not reset the start condition to @c INITIAL .
    void yyrestart  YYFARGS1( FILE *,input_file)
    void yyFlexLexer::yyrestart( std::istream& input_file )
if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (M4_YY_CALL_ONLY_ARG);
YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE M4_YY_CALL_LAST_ARG);
yy_init_buffer( YY_CURRENT_BUFFER, input_file M4_YY_CALL_LAST_ARG);
yy_load_buffer_state( M4_YY_CALL_ONLY_ARG );
/** Delegate to the new version that takes an istream reference.
void yyFlexLexer::yyrestart( std::istream* input_file )
if( ! input_file ) {
input_file = &yyin;
yyrestart( *input_file );
/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
    void yy_switch_to_buffer  YYFARGS1( YY_BUFFER_STATE ,new_buffer)
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* TODO. We should be able to replace this entire function body
 * with
yypop_buffer_state();
yypush_buffer_state(new_buffer);
yyensure_buffer_stack (M4_YY_CALL_ONLY_ARG);
if ( YY_CURRENT_BUFFER == new_buffer )
return;
if ( YY_CURRENT_BUFFER )
/* Flush out information for old buffer. */
*YY_G(yy_c_buf_p) = YY_G(yy_hold_char);
YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = YY_G(yy_c_buf_p);
YY_CURRENT_BUFFER_LVALUE = new_buffer;
/* We don't actually know whether we did this switch during
 * EOF (yywrap()) processing, but the only time this flag
 * is looked at is after yywrap() is called, so it's safe
 * to go ahead and always set it.
YY_G(yy_did_buffer_switch_on_eof) = 1;
static void yy_load_buffer_state  (M4_YY_DEF_ONLY_ARG)
    void yyFlexLexer::yy_load_buffer_state()
YY_G(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
YY_G(yytext_ptr) = YY_G(yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
YY_G(yy_hold_char) = *YY_G(yy_c_buf_p);
/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @return the allocated buffer state.
    YY_BUFFER_STATE yy_create_buffer  YYFARGS2( FILE *,file, int ,size)
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
YY_BUFFER_STATE b;
    m4_dnl M4_YY_DECL_GUTS_VAR();
b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) M4_YY_CALL_LAST_ARG );
if ( ! b )
YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
b->yy_buf_size = size;
/* yy_ch_buf has to be 2 characters longer than the size given because
 * we need to put in 2 end-of-buffer characters.
b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) M4_YY_CALL_LAST_ARG );
if ( ! b->yy_ch_buf )
b->yy_is_our_buffer = 1;
yy_init_buffer( b, file M4_YY_CALL_LAST_ARG);
return b;
/** Delegate creation of buffers to the new version that takes an istream reference.
YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
return yy_create_buffer( *file, size );
/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
    void yy_delete_buffer YYFARGS1( YY_BUFFER_STATE ,b)
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
if ( b->yy_is_our_buffer )
yyfree( (void *) b->yy_ch_buf M4_YY_CALL_LAST_ARG );
yyfree( (void *) b M4_YY_CALL_LAST_ARG );
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
    static void yy_init_buffer  YYFARGS2( YY_BUFFER_STATE ,b, FILE *,file)
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
int oerrno = errno;
yy_flush_buffer( b M4_YY_CALL_LAST_ARG);
b->yy_input_file = file;
b->yy_input_file = file.rdbuf();
b->yy_fill_buffer = 1;
    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
m4_ifdef( [[M4_YY_ALWAYS_INTERACTIVE]],
b->yy_is_interactive = 1;
    m4_ifdef( [[M4_YY_NEVER_INTERACTIVE]],
        b->yy_is_interactive = 0;
        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
b->yy_is_interactive = 0;
errno = oerrno;
/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
    void yy_flush_buffer YYFARGS1( YY_BUFFER_STATE ,b)
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
b->yy_n_chars = 0;
/* We always need two end-of-buffer characters.  The first causes
 * a transition to the end-of-buffer state.  The second causes
 * a jam in that state.
b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
b->yy_buf_pos = &b->yy_ch_buf[0];
b->yy_at_bol = 1;
b->yy_buffer_status = YY_BUFFER_NEW;
if ( b == YY_CURRENT_BUFFER )
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  M4_YY_DOC_PARAM
void yypush_buffer_state YYFARGS1(YY_BUFFER_STATE,new_buffer)
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
if (new_buffer == NULL)
yyensure_buffer_stack(M4_YY_CALL_ONLY_ARG);
/* This block is copied from yy_switch_to_buffer. */
/* Only push if top exists. Otherwise, replace top. */
if (YY_CURRENT_BUFFER)
YY_G(yy_buffer_stack_top)++;
/* copied from yy_switch_to_buffer. */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
void yypop_buffer_state (M4_YY_DEF_ONLY_ARG)
void yyFlexLexer::yypop_buffer_state (void)
if (!YY_CURRENT_BUFFER)
yy_delete_buffer(YY_CURRENT_BUFFER M4_YY_CALL_LAST_ARG);
YY_CURRENT_BUFFER_LVALUE = NULL;
if (YY_G(yy_buffer_stack_top) > 0)
--YY_G(yy_buffer_stack_top);
if (YY_CURRENT_BUFFER) {
YY_G(yy_did_buffer_switch_on_eof) = 1;
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
static void yyensure_buffer_stack (M4_YY_DEF_ONLY_ARG)
void yyFlexLexer::yyensure_buffer_stack(void)
yy_size_t num_to_alloc;
if (!YY_G(yy_buffer_stack)) {
/* First allocation is just for 2 elements, since we don't know if this
 * scanner will even need a stack. We use 2 instead of 1 to avoid an
 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
YY_G(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
(num_to_alloc * sizeof(struct yy_buffer_state*)
M4_YY_CALL_LAST_ARG);
if ( ! YY_G(yy_buffer_stack) )
YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
memset(YY_G(yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
YY_G(yy_buffer_stack_max) = num_to_alloc;
YY_G(yy_buffer_stack_top) = 0;
if (YY_G(yy_buffer_stack_top) >= (YY_G(yy_buffer_stack_max)) - 1){
/* Increase the buffer to prepare for a possible push. */
yy_size_t grow_size = 8 /* arbitrary grow size */;
num_to_alloc = YY_G(yy_buffer_stack_max) + grow_size;
YY_G(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
(YY_G(yy_buffer_stack),
num_to_alloc * sizeof(struct yy_buffer_state*)
/* zero only the new slots.*/
memset(YY_G(yy_buffer_stack) + YY_G(yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
m4_ifdef( [[M4_YY_NO_SCAN_BUFFER]],,
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @return the newly allocated buffer state object.
YY_BUFFER_STATE yy_scan_buffer  YYFARGS2( char *,base, yy_size_t ,size)
if ( size < 2 ||
     base[size-2] != YY_END_OF_BUFFER_CHAR ||
     base[size-1] != YY_END_OF_BUFFER_CHAR )
/* They forgot to leave room for the EOB's. */
return NULL;
YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
b->yy_buf_size = (int) (size - 2);
/* "- 2" to take care of EOB's */
b->yy_buf_pos = b->yy_ch_buf = base;
b->yy_is_our_buffer = 0;
b->yy_input_file = NULL;
b->yy_n_chars = b->yy_buf_size;
b->yy_fill_buffer = 0;
yy_switch_to_buffer( b M4_YY_CALL_LAST_ARG );
m4_ifdef( [[M4_YY_NO_SCAN_STRING]],,
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
YY_BUFFER_STATE yy_scan_string YYFARGS1( const char *, yystr)
return yy_scan_bytes( yystr, (int) strlen(yystr) M4_YY_CALL_LAST_ARG);
m4_ifdef( [[M4_YY_NO_SCAN_BYTES]],,
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
YY_BUFFER_STATE yy_scan_bytes  YYFARGS2( const char *,yybytes, yy_size_t ,_yybytes_len)
char *buf;
yy_size_t n;
yy_size_t i;
/* Get memory for full buffer, including space for trailing EOB's. */
n = (yy_size_t) (_yybytes_len + 2);
buf = (char *) yyalloc( n M4_YY_CALL_LAST_ARG );
if ( ! buf )
YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
for ( i = 0; i < _yybytes_len; ++i )
buf[i] = yybytes[i];
buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
b = yy_scan_buffer( buf, n M4_YY_CALL_LAST_ARG);
YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
/* It's okay to grow etc. this buffer, and we should throw it
 * away when we're done.
m4_ifdef( [[M4_YY_NO_PUSH_STATE]],,
    static void yy_push_state YYFARGS1( int ,_new_state)
    void yyFlexLexer::yy_push_state( int _new_state )
if ( YY_G(yy_start_stack_ptr) >= YY_G(yy_start_stack_depth) )
yy_size_t new_size;
YY_G(yy_start_stack_depth) += YY_START_STACK_INCR;
new_size = (yy_size_t) YY_G(yy_start_stack_depth) * sizeof( int );
if ( ! YY_G(yy_start_stack) )
YY_G(yy_start_stack) = (int *) yyalloc( new_size M4_YY_CALL_LAST_ARG );
YY_G(yy_start_stack) = (int *) yyrealloc(
(void *) YY_G(yy_start_stack), new_size M4_YY_CALL_LAST_ARG );
YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr)++] = YY_START;
BEGIN(_new_state);
m4_ifdef( [[M4_YY_NO_POP_STATE]],,
    static void yy_pop_state  (M4_YY_DEF_ONLY_ARG)
    void yyFlexLexer::yy_pop_state()
if ( --YY_G(yy_start_stack_ptr) < 0 )
YY_FATAL_ERROR( "start-condition stack underflow" );
BEGIN(YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr)]);
m4_ifdef( [[M4_YY_NO_TOP_STATE]],,
    static int yy_top_state  (M4_YY_DEF_ONLY_ARG)
    int yyFlexLexer::yy_top_state()
return YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr) - 1];
#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
static void yynoreturn yy_fatal_error YYFARGS1(const char*, msg)
M4_YY_DECL_GUTS_VAR();
fprintf( stderr, "%s\n", msg );
exit( YY_EXIT_FAILURE );
void yyFlexLexer::LexerError( const char* msg )
std::cerr << msg << std::endl;
/* Redefine yyless() so it works in section 3 code. */
#undef yyless
        yy_size_t yyless_macro_arg = (n); \
yytext[yyleng] = YY_G(yy_hold_char); \
YY_G(yy_c_buf_p) = yytext + yyless_macro_arg; \
YY_G(yy_hold_char) = *YY_G(yy_c_buf_p); \
*YY_G(yy_c_buf_p) = '\0'; \
yyleng = yyless_macro_arg; \
/* Accessor  methods (get/set functions) to struct members. */
/** Get the user-defined data for this scanner.
YY_EXTRA_TYPE yyget_extra  (M4_YY_DEF_ONLY_ARG)
    return yyextra;
/** Get the current line number.
int yyget_lineno  (M4_YY_DEF_ONLY_ARG)
        if (! YY_CURRENT_BUFFER)
            return 0;
    return yylineno;
/** Get the current column number.
int yyget_column  (M4_YY_DEF_ONLY_ARG)
    return yycolumn;
/** Get the input stream.
FILE *yyget_in  (M4_YY_DEF_ONLY_ARG)
    return yyin;
/** Get the output stream.
FILE *yyget_out  (M4_YY_DEF_ONLY_ARG)
    return yyout;
/** Get the length of the current token.
yy_size_t yyget_leng  (M4_YY_DEF_ONLY_ARG)
    return yyleng;
/** Get the current token.
char *yyget_text  (M4_YY_DEF_ONLY_ARG)
    return yytext;
/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
void yyset_extra YYFARGS1( YY_EXTRA_TYPE ,user_defined)
    yyextra = user_defined ;
/** Set the current line number.
 * @param _line_number line number
void yyset_lineno YYFARGS1( int ,_line_number)
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    yylineno = _line_number;
/** Set the current column.
 * @param _column_no column number
void yyset_column YYFARGS1( int , _column_no)
        /* column is only valid if an input buffer exists. */
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    yycolumn = _column_no;
/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @see yy_switch_to_buffer
void yyset_in YYFARGS1( FILE * ,_in_str)
    yyin = _in_str ;
void yyset_out YYFARGS1( FILE * ,_out_str)
    yyout = _out_str ;
int yyget_debug  (M4_YY_DEF_ONLY_ARG)
    return yy_flex_debug;
void yyset_debug YYFARGS1( int ,_bdebug)
    yy_flex_debug = _bdebug ;
/* Accessor methods for yylval and yylloc */
YYSTYPE * yyget_lval  (M4_YY_DEF_ONLY_ARG)
    return yylval;
m4_ifdef( [[M4_YY_NO_SET_LVAL]],,
void yyset_lval YYFARGS1( YYSTYPE * ,yylval_param)
YYLTYPE *yyget_lloc  (M4_YY_DEF_ONLY_ARG)
    return yylloc;
void yyset_lloc YYFARGS1( YYLTYPE * ,yylloc_param)
/* User-visible API */
/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
int yylex_init(yyscan_t* ptr_yy_globals)
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    return yy_init_globals ( *ptr_yy_globals );
/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
    struct yyguts_t dummy_yyguts;
    yyset_extra (yy_user_defined, &dummy_yyguts);
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    yyset_extra (yy_user_defined, *ptr_yy_globals);
%endif if-c-only
static int yy_init_globals (M4_YY_DEF_ONLY_ARG)
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
    m4_ifdef( [[M4_YY_NOT_REENTRANT]],
    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    YY_G(yy_buffer_stack) = NULL;
    YY_G(yy_buffer_stack_top) = 0;
    YY_G(yy_buffer_stack_max) = 0;
    YY_G(yy_c_buf_p) = NULL;
    YY_G(yy_init) = 0;
    YY_G(yy_start) = 0;
m4_ifdef( [[M4_YY_HAS_START_STACK_VARS]],
    YY_G(yy_start_stack_ptr) = 0;
    YY_G(yy_start_stack_depth) = 0;
    YY_G(yy_start_stack) =  NULL;
    YY_G(yy_state_buf) = 0;
    YY_G(yy_state_ptr) = 0;
    YY_G(yy_full_match) = 0;
    YY_G(yy_lp) = 0;
    YY_G(yytext_ptr) = 0;
    YY_G(yy_more_offset) = 0;
    YY_G(yy_prev_more_offset) = 0;
/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
    yyin = NULL;
    yyout = NULL;
    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
    return 0;
%if-c-only SNIP! this currently causes conflicts with the c++ scanner
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (M4_YY_DEF_ONLY_ARG)
    /* Pop the buffer stack, destroying each element. */
while(YY_CURRENT_BUFFER){
yy_delete_buffer( YY_CURRENT_BUFFER M4_YY_CALL_LAST_ARG );
YY_CURRENT_BUFFER_LVALUE = NULL;
yypop_buffer_state(M4_YY_CALL_ONLY_ARG);
/* Destroy the stack itself. */
yyfree(YY_G(yy_buffer_stack) M4_YY_CALL_LAST_ARG);
YY_G(yy_buffer_stack) = NULL;
    /* Destroy the start condition stack. */
        yyfree( YY_G(yy_start_stack) M4_YY_CALL_LAST_ARG );
        YY_G(yy_start_stack) = NULL;
    yyfree ( YY_G(yy_state_buf) M4_YY_CALL_LAST_ARG);
    YY_G(yy_state_buf)  = NULL;
    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( M4_YY_CALL_ONLY_ARG);
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner M4_YY_CALL_LAST_ARG );
    yyscanner = NULL;
 * Internal utility routines.
static void yy_flex_strncpy YYFARGS3( char*,s1, const char *,s2, int,n)
int i;
for ( i = 0; i < n; ++i )
s1[i] = s2[i];
static int yy_flex_strlen YYFARGS1( const char *,s)
int n;
for ( n = 0; s[n]; ++n )
return n;
m4_ifdef( [[M4_YY_NO_FLEX_ALLOC]],,
void *yyalloc YYFARGS1( yy_size_t ,size)
return malloc(size);
m4_ifdef( [[M4_YY_NO_FLEX_REALLOC]],,
void *yyrealloc  YYFARGS2( void *,ptr, yy_size_t ,size)
/* The cast to (char *) in the following accommodates both
 * implementations that use char* generic pointers, and those
 * that use void* generic pointers.  It works with the latter
 * because both ANSI C and C++ allow castless assignment from
 * any pointer type to void*, and deal with argument conversions
 * as though doing an assignment.
return realloc(ptr, size);
m4_ifdef( [[M4_YY_NO_FLEX_FREE]],,
void yyfree YYFARGS1( void *,ptr)
free( (char *) ptr );
/* see yyrealloc() for (char *) cast */
%if-tables-serialization definitions
dnl   tables_shared.c - tables serialization code
dnl 
dnl   Copyright (c) 1990 The Regents of the University of California.
dnl   All rights reserved.
dnl   This code is derived from software contributed to Berkeley by
dnl   Vern Paxson.
dnl   The United States Government has rights in this work pursuant
dnl   to contract no. DE-AC03-76SF00098 between the United States
dnl   Department of Energy and the University of California.
dnl   This file is part of flex.
dnl   Redistribution and use in source and binary forms, with or without
dnl   modification, are permitted provided that the following conditions
dnl   are met:
dnl   1. Redistributions of source code must retain the above copyright
dnl      notice, this list of conditions and the following disclaimer.
dnl   2. Redistributions in binary form must reproduce the above copyright
dnl      notice, this list of conditions and the following disclaimer in the
dnl      documentation and/or other materials provided with the distribution.
dnl   Neither the name of the University nor the names of its contributors
dnl   may be used to endorse or promote products derived from this software
dnl   without specific prior written permission.
dnl   THIS SOFTWARE IS PROVIDED `AS IS' AND WITHOUT ANY EXPRESS OR
dnl   IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
dnl   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
dnl   PURPOSE.
/* This file is meant to be included in both the skeleton and the actual
 * flex code (hence the name "_shared"). 
#include "flexdef.h"
#include "tables.h"
/** Get the number of integers in this table. This is NOT the
 *  same thing as the number of elements.
 *  @param tbl the table
 *  @return the number of integers in the table
yyskel_static flex_int32_t yytbl_calc_total_len (const struct yytbl_data *tbl)
flex_uint32_t n;
/* total number of ints */
n = tbl->td_lolen;
if (tbl->td_hilen > 0)
n *= tbl->td_hilen;
if (tbl->td_id == YYTD_ID_TRANSITION)
n *= 2;
return (flex_int32_t) n;
static int yytbl_read8 (void *v, struct yytbl_reader * rd)
    errno = 0;
    if (fread (v, sizeof (flex_uint8_t), 1, rd->fp) != 1){
        errno = EIO;
        return -1;
    rd->bread += (flex_uint32_t) sizeof(flex_uint8_t);
static int yytbl_read16 (void *v, struct yytbl_reader * rd)
    if (fread (v, sizeof (flex_uint16_t), 1, rd->fp) != 1){
    *((flex_uint16_t *) v) = ntohs (*((flex_uint16_t *) v));
    rd->bread += (flex_uint32_t) sizeof(flex_uint16_t);
static int yytbl_read32 (void *v, struct yytbl_reader * rd)
    if (fread (v, sizeof (flex_uint32_t), 1, rd->fp) != 1){
    *((flex_uint32_t *) v) = ntohl (*((flex_uint32_t *) v));
    rd->bread += (flex_uint32_t) sizeof(flex_uint32_t);
/** Read the header */
static int yytbl_hdr_read YYFARGS2(struct yytbl_hdr *, th, struct yytbl_reader *, rd)
    size_t  bytes;
    memset (th, 0, sizeof (struct yytbl_hdr));
    if (yytbl_read32 (&(th->th_magic), rd) != 0)
    if (th->th_magic != YYTBL_MAGIC){
        YY_FATAL_ERROR( "bad magic number" );   /* TODO: not fatal. */
    if (yytbl_read32 (&(th->th_hsize), rd) != 0
        || yytbl_read32 (&(th->th_ssize), rd) != 0
        || yytbl_read16 (&(th->th_flags), rd) != 0)
    /* Sanity check on header size. Greater than 1k suggests some funny business. */
    if (th->th_hsize < 16 || th->th_hsize > 1024){
        YY_FATAL_ERROR( "insane header size detected" );   /* TODO: not fatal. */
    /* Allocate enough space for the version and name fields */
    bytes = th->th_hsize - 14;
    th->th_version = (char *) yyalloc (bytes M4_YY_CALL_LAST_ARG);
    if ( ! th->th_version )
        YY_FATAL_ERROR( "out of dynamic memory in yytbl_hdr_read()" );
    /* we read it all into th_version, and point th_name into that data */
    if (fread (th->th_version, 1, bytes, rd->fp) != bytes){
        yyfree(th->th_version M4_YY_CALL_LAST_ARG);
        th->th_version = NULL;
    else
        rd->bread += (flex_uint32_t) bytes;
    th->th_name = th->th_version + strlen (th->th_version) + 1;
/** lookup id in the dmap list.
 *  @param dmap pointer to first element in list
 *  @return NULL if not found.
static struct yytbl_dmap *yytbl_dmap_lookup YYFARGS2(struct yytbl_dmap *, dmap,
                                                      int, id)
    while (dmap->dm_id)
        if ((int)(dmap->dm_id) == id)
            return dmap;
        else
            dmap++;
    return NULL;
/** Read a table while mapping its contents to the local array.
 *  @param dmap used to performing mapping
 *  @return 0 on success
static int yytbl_data_load YYFARGS2(struct yytbl_dmap *, dmap, struct yytbl_reader*, rd)
    struct yytbl_data td;
    struct yytbl_dmap *transdmap=0;
    int     len, i, rv, inner_loop_count;
    void   *p=0;
    memset (&td, 0, sizeof (struct yytbl_data));
    if (yytbl_read16 (&td.td_id, rd) != 0
        || yytbl_read16 (&td.td_flags, rd) != 0
        || yytbl_read32 (&td.td_hilen, rd) != 0
        || yytbl_read32 (&td.td_lolen, rd) != 0)
    /* Lookup the map for the transition table so we have it in case we need it
     * inside the loop below. This scanner might not even have a transition
     * table, which is ok.
    transdmap = yytbl_dmap_lookup (dmap, YYTD_ID_TRANSITION M4_YY_CALL_LAST_ARG);
    if ((dmap = yytbl_dmap_lookup (dmap, td.td_id M4_YY_CALL_LAST_ARG)) == NULL){
        YY_FATAL_ERROR( "table id not found in map." );   /* TODO: not fatal. */
    /* Allocate space for table.
     * The --full yy_transition table is a special case, since we
     * need the dmap.dm_sz entry to tell us the sizeof the individual
     * struct members.
    if ((td.td_flags & YYTD_STRUCT))
        bytes = sizeof(struct yy_trans_info) * td.td_lolen * (td.td_hilen ? td.td_hilen : 1);
        bytes = td.td_lolen * (td.td_hilen ? td.td_hilen : 1) * dmap->dm_sz;
    if(M4_YY_TABLES_VERIFY)
        /* We point to the array itself */
        p = dmap->dm_arr;
        /* We point to the address of a pointer. */
        *dmap->dm_arr = p = (void *) yyalloc (bytes M4_YY_CALL_LAST_ARG);
        if ( ! p )
            YY_FATAL_ERROR( "out of dynamic memory in yytbl_data_load()" );
    /* If it's a struct, we read 2 integers to get one element */
    if ((td.td_flags & YYTD_STRUCT) != 0)
        inner_loop_count = 2;
        inner_loop_count = 1;
    /* read and map each element.
     * This loop iterates once for each element of the td_data array.
     * Notice that we increment 'i' in the inner loop.
    len = yytbl_calc_total_len (&td);
    for (i = 0; i < len; ){
        int    j;
        /* This loop really executes exactly 1 or 2 times.
         * The second time is to handle the second member of the
         * YYTD_STRUCT for the yy_transition array.
        for (j = 0; j < inner_loop_count; j++, i++) {
            flex_int32_t t32;
            /* read into t32 no matter what the real size is. */
            {
            flex_int16_t t16;
            flex_int8_t  t8;
            switch (YYTDFLAGS2BYTES (td.td_flags)) {
            case sizeof (flex_int32_t):
                rv = yytbl_read32 (&t32, rd);
                break;
            case sizeof (flex_int16_t):
                rv = yytbl_read16 (&t16, rd);
                t32 = t16;
            case sizeof (flex_int8_t):
                rv = yytbl_read8 (&t8, rd);
                t32 = t8;
            default:
                YY_FATAL_ERROR( "invalid td_flags" );   /* TODO: not fatal. */
                return -1;
            }
            if (rv != 0)
            /* copy into the deserialized array... */
            if ((td.td_flags & YYTD_STRUCT)) {
                /* t32 is the j'th member of a two-element struct. */
                void   *v;
                v = j == 0 ? &(((struct yy_trans_info *) p)->yy_verify)
                    : &(((struct yy_trans_info *) p)->yy_nxt);
                switch (dmap->dm_sz) {
                case sizeof (flex_int32_t):
                    if (M4_YY_TABLES_VERIFY){
                        if( ((flex_int32_t *) v)[0] != (flex_int32_t) t32)
                           YY_FATAL_ERROR( "tables verification failed at YYTD_STRUCT flex_int32_t" );
                    }else
                        ((flex_int32_t *) v)[0] = (flex_int32_t) t32;
                    break;
                case sizeof (flex_int16_t):
                    if (M4_YY_TABLES_VERIFY ){
                        if(((flex_int16_t *) v)[0] != (flex_int16_t) t32)
                        YY_FATAL_ERROR( "tables verification failed at YYTD_STRUCT flex_int16_t" );
                        ((flex_int16_t *) v)[0] = (flex_int16_t) t32;
                case sizeof(flex_int8_t):
                         if( ((flex_int8_t *) v)[0] != (flex_int8_t) t32)
                        YY_FATAL_ERROR( "tables verification failed at YYTD_STRUCT flex_int8_t" );
                        ((flex_int8_t *) v)[0] = (flex_int8_t) t32;
                default:
                    YY_FATAL_ERROR( "invalid dmap->dm_sz for struct" );   /* TODO: not fatal. */
                    return -1;
                }
                /* if we're done with j, increment p */
                if (j == 1)
                    p = (struct yy_trans_info *) p + 1;
            else if ((td.td_flags & YYTD_PTRANS)) {
                /* t32 is an index into the transition array. */
                struct yy_trans_info *v;
                if (!transdmap){
                    YY_FATAL_ERROR( "transition table not found" );   /* TODO: not fatal. */
                if( M4_YY_TABLES_VERIFY)
                    v = &(((struct yy_trans_info *) (transdmap->dm_arr))[t32]);
                else
                    v = &((*((struct yy_trans_info **) (transdmap->dm_arr)))[t32]);
                if(M4_YY_TABLES_VERIFY ){
                    if( ((struct yy_trans_info **) p)[0] != v)
                        YY_FATAL_ERROR( "tables verification failed at YYTD_PTRANS" );
                }else
                    ((struct yy_trans_info **) p)[0] = v;
                /* increment p */
                p = (struct yy_trans_info **) p + 1;
            else {
                /* t32 is a plain int. copy data, then incrememnt p. */
                    if(M4_YY_TABLES_VERIFY ){
                        if( ((flex_int32_t *) p)[0] != (flex_int32_t) t32)
                        YY_FATAL_ERROR( "tables verification failed at flex_int32_t" );
                        ((flex_int32_t *) p)[0] = (flex_int32_t) t32;
                    p = ((flex_int32_t *) p) + 1;
                        if( ((flex_int16_t *) p)[0] != (flex_int16_t) t32)
                        YY_FATAL_ERROR( "tables verification failed at flex_int16_t" );
                        ((flex_int16_t *) p)[0] = (flex_int16_t) t32;
                    p = ((flex_int16_t *) p) + 1;
                case sizeof (flex_int8_t):
                        if( ((flex_int8_t *) p)[0] != (flex_int8_t) t32)
                        YY_FATAL_ERROR( "tables verification failed at flex_int8_t" );
                        ((flex_int8_t *) p)[0] = (flex_int8_t) t32;
                    p = ((flex_int8_t *) p) + 1;
                    YY_FATAL_ERROR( "invalid dmap->dm_sz for plain int" );   /* TODO: not fatal. */
        }
    /* Now eat padding. */
        int pad;
        pad = yypad64(rd->bread);
        while(--pad >= 0){
            flex_int8_t t8;
            if(yytbl_read8(&t8,rd) != 0)
%define-yytables   The name for this specific scanner's tables.
/* Find the key and load the DFA tables from the given stream.  */
static int yytbl_fload YYFARGS2(FILE *, fp, const char *, key)
    int rv=0;
    struct yytbl_hdr th;
    struct yytbl_reader rd;
    rd.fp = fp;
    th.th_version = NULL;
    /* Keep trying until we find the right set of tables or end of file. */
    while (!feof(rd.fp)) {
        rd.bread = 0;
        if (yytbl_hdr_read (&th, &rd M4_YY_CALL_LAST_ARG) != 0){
            rv = -1;
            goto return_rv;
        /* A NULL key means choose the first set of tables. */
        if (key == NULL)
            break;
        if (strcmp(th.th_name,key) != 0){
            /* Skip ahead to next set */
            fseek(rd.fp, th.th_ssize - th.th_hsize, SEEK_CUR);
            yyfree(th.th_version M4_YY_CALL_LAST_ARG);
            th.th_version = NULL;
    while (rd.bread < th.th_ssize){
        /* Load the data tables */
        if(yytbl_data_load (yydmap,&rd M4_YY_CALL_LAST_ARG) != 0){
return_rv:
    if(th.th_version){
        yyfree(th.th_version M4_YY_CALL_LAST_ARG);
        th.th_version = NULL;
    return rv;
/** Load the DFA tables for this scanner from the given stream.  */
int yytables_fload YYFARGS1(FILE *, fp)
    if( yytbl_fload(fp, YYTABLES_NAME M4_YY_CALL_LAST_ARG) != 0)
/** Destroy the loaded tables, freeing memory, etc.. */
int yytables_destroy (M4_YY_DEF_ONLY_ARG)
    struct yytbl_dmap *dmap=0;
    if(!M4_YY_TABLES_VERIFY){
        /* Walk the dmap, freeing the pointers */
        for(dmap=yydmap; dmap->dm_id; dmap++) {
            void * v;
            v = dmap->dm_arr;
            if(v && *(char**)v){
                    yyfree(*(char**)v M4_YY_CALL_LAST_ARG);
                    *(char**)v = NULL;
/* end table serialization code definitions */
m4_ifdef([[M4_YY_MAIN]], [[
int main (void);
int main ()
    yyscan_t lexer;
    yylex_init(&lexer);
    yylex( lexer );
    yylex_destroy( lexer);
yylex();
m4_ifdef( [[M4_YY_IN_HEADER]],
#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef YY_DO_BEFORE_ACTION
#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
[[#ifndef ]]M4_YY_PREFIX[[_create_buffer_ALREADY_DEFINED
#undef yy_create_buffer
[[#ifndef ]]M4_YY_PREFIX[[_delete_buffer_ALREADY_DEFINED
#undef yy_delete_buffer
[[#ifndef ]]M4_YY_PREFIX[[_scan_buffer_ALREADY_DEFINED
#undef yy_scan_buffer
[[#ifndef ]]M4_YY_PREFIX[[_scan_string_ALREADY_DEFINED
#undef yy_scan_string
[[#ifndef ]]M4_YY_PREFIX[[_scan_bytes_ALREADY_DEFINED
#undef yy_scan_bytes
[[#ifndef ]]M4_YY_PREFIX[[_init_buffer_ALREADY_DEFINED
#undef yy_init_buffer
[[#ifndef ]]M4_YY_PREFIX[[_flush_buffer_ALREADY_DEFINED
#undef yy_flush_buffer
[[#ifndef ]]M4_YY_PREFIX[[_load_buffer_state_ALREADY_DEFINED
#undef yy_load_buffer_state
[[#ifndef ]]M4_YY_PREFIX[[_switch_to_buffer_ALREADY_DEFINED
#undef yy_switch_to_buffer
[[#ifndef ]]M4_YY_PREFIX[[push_buffer_state_ALREADY_DEFINED
#undef yypush_buffer_state
[[#ifndef ]]M4_YY_PREFIX[[pop_buffer_state_ALREADY_DEFINED
#undef yypop_buffer_state
[[#ifndef ]]M4_YY_PREFIX[[ensure_buffer_stack_ALREADY_DEFINED
#undef yyensure_buffer_stack
[[#ifndef ]]M4_YY_PREFIX[[lex_ALREADY_DEFINED
#undef yylex
[[#ifndef ]]M4_YY_PREFIX[[restart_ALREADY_DEFINED
#undef yyrestart
[[#ifndef ]]M4_YY_PREFIX[[lex_init_ALREADY_DEFINED
#undef yylex_init
[[#ifndef ]]M4_YY_PREFIX[[lex_init_extra_ALREADY_DEFINED
#undef yylex_init_extra
[[#ifndef ]]M4_YY_PREFIX[[lex_destroy_ALREADY_DEFINED
#undef yylex_destroy
[[#ifndef ]]M4_YY_PREFIX[[get_debug_ALREADY_DEFINED
#undef yyget_debug
[[#ifndef ]]M4_YY_PREFIX[[set_debug_ALREADY_DEFINED
#undef yyset_debug
[[#ifndef ]]M4_YY_PREFIX[[get_extra_ALREADY_DEFINED
#undef yyget_extra
[[#ifndef ]]M4_YY_PREFIX[[set_extra_ALREADY_DEFINED
#undef yyset_extra
[[#ifndef ]]M4_YY_PREFIX[[get_in_ALREADY_DEFINED
#undef yyget_in
[[#ifndef ]]M4_YY_PREFIX[[set_in_ALREADY_DEFINED
#undef yyset_in
[[#ifndef ]]M4_YY_PREFIX[[get_out_ALREADY_DEFINED
#undef yyget_out
[[#ifndef ]]M4_YY_PREFIX[[set_out_ALREADY_DEFINED
#undef yyset_out
[[#ifndef ]]M4_YY_PREFIX[[get_leng_ALREADY_DEFINED
#undef yyget_leng
[[#ifndef ]]M4_YY_PREFIX[[get_text_ALREADY_DEFINED
#undef yyget_text
[[#ifndef ]]M4_YY_PREFIX[[get_lineno_ALREADY_DEFINED
#undef yyget_lineno
[[#ifndef ]]M4_YY_PREFIX[[set_lineno_ALREADY_DEFINED
#undef yyset_lineno
[[#ifndef ]]M4_YY_PREFIX[[get_column_ALREADY_DEFINED
#undef yyget_column
[[#ifndef ]]M4_YY_PREFIX[[set_column_ALREADY_DEFINED
#undef yyset_column
[[#ifndef ]]M4_YY_PREFIX[[wrap_ALREADY_DEFINED
#undef yywrap
[[#ifndef ]]M4_YY_PREFIX[[get_lval_ALREADY_DEFINED
#undef yyget_lval
[[#ifndef ]]M4_YY_PREFIX[[set_lval_ALREADY_DEFINED
#undef yyset_lval
[[#ifndef ]]M4_YY_PREFIX[[get_lloc_ALREADY_DEFINED
#undef yyget_lloc
[[#ifndef ]]M4_YY_PREFIX[[set_lloc_ALREADY_DEFINED
#undef yyset_lloc
[[#ifndef ]]M4_YY_PREFIX[[alloc_ALREADY_DEFINED
#undef yyalloc
[[#ifndef ]]M4_YY_PREFIX[[realloc_ALREADY_DEFINED
#undef yyrealloc
[[#ifndef ]]M4_YY_PREFIX[[free_ALREADY_DEFINED
#undef yyfree
[[#ifndef ]]M4_YY_PREFIX[[text_ALREADY_DEFINED
#undef yytext
[[#ifndef ]]M4_YY_PREFIX[[leng_ALREADY_DEFINED
#undef yyleng
[[#ifndef ]]M4_YY_PREFIX[[in_ALREADY_DEFINED
#undef yyin
[[#ifndef ]]M4_YY_PREFIX[[out_ALREADY_DEFINED
#undef yyout
[[#ifndef ]]M4_YY_PREFIX[[_flex_debug_ALREADY_DEFINED
#undef yy_flex_debug
[[#ifndef ]]M4_YY_PREFIX[[lineno_ALREADY_DEFINED
#undef yylineno
[[#ifndef ]]M4_YY_PREFIX[[tables_fload_ALREADY_DEFINED
#undef yytables_fload
[[#ifndef ]]M4_YY_PREFIX[[tables_destroy_ALREADY_DEFINED
#undef yytables_destroy
[[#ifndef ]]M4_YY_PREFIX[[TABLES_NAME_ALREADY_DEFINED
#undef yyTABLES_NAME
name defined twice
start condition %s declared twice
symbol table memory allocation failed
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/flex/src/tables.c
th_magic|th_hsize write32 failed
fgetpos failed
th_ssize|th_flags write failed
th_version writen failed
th_name writen failed
pad64 failed
invalid td_flags detected
error while writing tables
insanity detected
get|set|fwrite32 failed
detected negative compression
premature EOF
'%s'
\x%02x
<<EOF>>
End Marker
*Something Weird* - tok: %d val: %d
malloc failed (f) in filter_create_ext
malloc failed (f->argv) in filter_create_ext
malloc failed in filter_create_int
pipe failed
fork failed
dup2(pipes[0],0)
filter_func failed
exec of %s failed
dup2(pipes[1],1)
dup(1) failed
freopen(headerfilename) failed
m4_changecom`'m4_dnl
m4_changequote`'m4_dnl
m4_changequote([[,]])[[]]m4_dnl
m4_define([[M4_YY_NOOP]])[[]]m4_dnl
m4_define( [[M4_YY_IN_HEADER]],[[]])m4_dnl
#ifndef %sHEADER_H
#define %sHEADER_H 1
#define %sIN_HEADER 1
m4_define( [[M4_YY_OUTFILE_NAME]],[[%s]])m4_dnl
<stdout>
malloc failed in filter_tee_header
#line 4000 "M4_YY_OUTFILE_NAME"
#undef %sIN_HEADER
#endif /* %sHEADER_H */
m4_undefine( [[M4_YY_IN_HEADER]])m4_dnl
malloc failed in filter_fix_linedirs
#line %d "%s"
m4_dnl ifdef(`__gnu__', ,`errprint(Flex requires GNU M4. Set the PATH or set the M4 environment variable to its path name.) m4exit(2)')
Unable to allocate buffer to report regcomp
regcomp for "%s" failed: 
Unable to allocate a copy of the match
^#line ([[:digit:]]+) "(.*)"
^[[:space:]]*$
Allocation of buffer to print string failed
Allocation of buffer for line directive failed
#line %d "
m4_define( [[%s]], [[[[%s]]]])m4_dnl
Allocation of buffer for m4 def failed
m4_undefine( [[%s]])m4_dnl
Allocation of buffer for m4 undef failed
2.6.4 Apple(flex-35)
FILE *yyin = stdin, *yyout = stdout;
FILE *yyin = NULL, *yyout = NULL;
@(#)PROGRAM:flex  PROJECT:flex-35
lex.%s.%s
lex.%s.tables
lex.backup
 #line %d "%s"
@A7<8D>;
506=
 !"#$%&'()*+,-./
 !"#$%&'()
@/9:;
50>?@?B8C
 !"#$%&'()
,63857
y>?@
9:WX00
,/:A 
#`<=
EHIJKLMNOPQSRTUVWXY^Z[\_]BF+(
EFGHHHHIJJKKKLMMNNNNNNOOOPQQQQRSSSTTTUVVVVWWXYYYYYZZZZZZZZZZZZ[[[\\]]]]^^^^^^^^^^^^^^^^^^^^^^^^__
01=>?@ABCKxH
AY
 !"#$%&'()*+,-./01234,56789
:;<=>?@ABCDEFGHI,JKLMNOPQ,RST
>;
v&fY
\Y7
$7Lav

))))
State #%d is non-accepting -
dangerous trailing context
 associated rule line numbers:
 out-transitions: 
 jam-transitions: EOF 
consistency check failed in epsclosure()
DFA Dump:
{YYTD_ID_NXT, (void**)&yy_nxt, sizeof(%s)},
flex_int32_t
flex_int16_t
static const %s yy_nxt[][%d] =
    {
#undef YY_NXT_LOLEN
#define YY_NXT_LOLEN (%d)
static const %s *yy_nxt =0;
    {
    },
could not create unique end-of-buffer state
state # %d:
Could not write yynxt_tbl[][]
bad transition character detected in sympartition()
if ( yy_current_state[-1].yy_nxt )
if ( yy_accept[yy_current_state] )
YY_G(yy_last_accepting_state) = yy_current_state;
YY_G(yy_last_accepting_cpos) = yy_cp;
case 0: /* must back up */
/* undo the effects of YY_DO_BEFORE_ACTION */
*yy_cp = YY_G(yy_hold_char);
yy_cp = YY_G(yy_last_accepting_cpos) + 1;
yy_cp = YY_G(yy_last_accepting_cpos);
yy_current_state = YY_G(yy_last_accepting_state);
goto yy_find_action;
static const struct yy_trans_info yy_transition[%d] =
    {
static const struct yy_trans_info *yy_transition = 0;
    };
static const struct yy_trans_info *yy_start_state_list[%d] =
static const struct yy_trans_info **yy_start_state_list =0;
    &yy_transition[%d],
yy_ec
Equivalence Classes:
%4s = %-2d
yy_act = yy_current_state[-1].yy_nxt;
yy_act = yy_accept[yy_current_state];
yy_current_state = *--YY_G(yy_state_ptr);
YY_G(yy_lp) = yy_accept[yy_current_state];
m4_ifdef( [[M4_YY_USES_REJECT]],
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
for ( ; ; ) /* until we find what rule we matched */
if ( YY_G(yy_lp) && YY_G(yy_lp) < yy_accept[yy_current_state + 1] )
yy_act = yy_acclist[YY_G(yy_lp)];
if ( yy_act & YY_TRAILING_HEAD_MASK ||
     YY_G(yy_looking_for_trail_begin) )
if ( yy_act == YY_G(yy_looking_for_trail_begin) )
YY_G(yy_looking_for_trail_begin) = 0;
yy_act &= ~YY_TRAILING_HEAD_MASK;
break;
else if ( yy_act & YY_TRAILING_MASK )
YY_G(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
YY_G(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
YY_G(yy_full_match) = yy_cp;
YY_G(yy_full_state) = YY_G(yy_state_ptr);
YY_G(yy_full_lp) = YY_G(yy_lp);
else
++YY_G(yy_lp);
goto find_rule;
--yy_cp;
if ( yy_act == 0 )
{ /* have to back up */
state # %d accepts: [%d]
{YYTD_ID_ACCEPT, (void**)&yy_accept, sizeof(%s)},
yy_accept
YY_CHAR yy_c = %s;
while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
yy_current_state = (int) yy_def[yy_current_state];
if ( yy_current_state >= %d )
yy_c = yy_meta[yy_c];
yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
yy_ec[YY_SC_TO_UI(*yy_cp)] 
YY_SC_TO_UI(*yy_cp)
yy_ec[YY_SC_TO_UI(*++yy_cp)] 
YY_SC_TO_UI(*++yy_cp)
while ( (yy_current_state = yy_nxt[yy_current_state][ %s ]) > 0 )
while ( (yy_current_state = yy_nxt[yy_current_state*YY_NXT_LOLEN +  %s ]) > 0 )
++yy_cp;
yy_current_state = -yy_current_state;
const struct yy_trans_info *yy_trans_info;
YY_CHAR yy_c;
for ( yy_c = %s;
      (yy_trans_info = &yy_current_state[yy_c])->
yy_verify == yy_c;
      yy_c = %s )
yy_current_state += yy_trans_info->yy_nxt;
while ( yy_base[yy_current_state] != %d );
while ( yy_current_state != %d );
(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : %d)
(*yy_cp ? YY_SC_TO_UI(*yy_cp) : %d)
if ( *yy_cp )
yy_current_state = yy_nxt[yy_current_state][%s];
yy_current_state = yy_nxt[yy_current_state*YY_NXT_LOLEN + %s];
yy_current_state += yy_current_state[%s].yy_nxt;
yy_current_state = yy_NUL_trans[yy_current_state];
*YY_G(yy_state_ptr)++ = yy_current_state;
char *yy_cp = YY_G(yy_c_buf_p);
yy_is_jam = (yy_current_state == 0);
yy_current_state = yy_nxt[yy_current_state][%d];
yy_current_state = yy_nxt[yy_current_state*YY_NXT_LOLEN + %d];
yy_is_jam = (yy_current_state <= 0);
int yy_c = %d;
yy_trans_info = &yy_current_state[(unsigned int) yy_c];
yy_is_jam = (yy_trans_info->yy_verify != yy_c);
yy_is_jam = (yy_current_state == %d);
if ( ! yy_is_jam )
yy_current_state = yy_start_state_list[YY_G(yy_start) + YY_AT_BOL()];
yy_current_state = yy_start_state_list[YY_G(yy_start)];
yy_current_state = YY_G(yy_start);
yy_current_state += YY_AT_BOL();
YY_G(yy_state_ptr) = YY_G(yy_state_buf);
yy_acclist
{YYTD_ID_ACCLIST, (void**)&yy_acclist, sizeof(%s)},
state # %d accepts: 
[%d]
Could not write yyacclist_tbl
Could not write yyacc_tbl
Could not write ecstbl
Meta-Equivalence Classes:
yy_meta
{YYTD_ID_META, (void**)&yy_meta, sizeof(%s)},
YY_CHAR
%d = %d
Could not write yymeta_tbl
yy_base
{YYTD_ID_BASE, (void**)&yy_base, sizeof(%s)},
Could not write yybase_tbl
yy_def
{YYTD_ID_DEF, (void**)&yy_def, sizeof(%s)},
Could not write yydef_tbl
yy_nxt
Could not write yynxt_tbl
yy_chk
{YYTD_ID_CHK, (void**)&yy_chk, sizeof(%s)},
Could not write yychk_tbl
YY_G(yytext_ptr) -= YY_G(yy_more_len); \
yyleng = (yy_size_t) (yy_cp - YY_G(yytext_ptr)); \
yyleng = (yy_size_t) (yy_cp - yy_bp); \
if ( yyleng + YY_G(yy_more_offset) >= YYLMAX ) \
if ( yyleng >= YYLMAX ) \
YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
yy_flex_strncpy( &yytext[YY_G(yy_more_offset)], YY_G(yytext_ptr), yyleng + 1 M4_YY_CALL_LAST_ARG); \
yyleng += YY_G(yy_more_offset); \
YY_G(yy_prev_more_offset) = YY_G(yy_more_offset); \
YY_G(yy_more_offset) = 0; \
yy_flex_strncpy( yytext, YY_G(yytext_ptr), yyleng + 1 M4_YY_CALL_LAST_ARG); \
#define YY_NUM_RULES %d
#define YY_END_OF_BUFFER %d
struct yy_trans_info
%s yy_verify;
%s yy_nxt;
/* This struct is not used in this scanner,
   but its presence is necessary. */
flex_int32_t yy_verify;
flex_int32_t yy_nxt;
Could not write ftbl
Could not write ssltbl
Could not write eoltbl
static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;
yy_NUL_trans
{YYTD_ID_NUL_TRANS, (void**)&yy_NUL_trans, sizeof(%s)},
struct yy_trans_info*
Could not write yynultrans_tbl
extern int yy_flex_debug;
int yy_flex_debug = %s;
yy_rule_linenum
static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x%x
#define YY_TRAILING_HEAD_MASK 0x%x
#define REJECT \
*yy_cp = YY_G(yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = YY_G(yy_full_match); /* restore poss. backed-over text */ \
YY_G(yy_lp) = YY_G(yy_full_lp); /* restore orig. accepting pos. */ \
YY_G(yy_state_ptr) = YY_G(yy_full_state); /* restore orig. state */ \
yy_current_state = *YY_G(yy_state_ptr); /* restore curr. state */ \
++YY_G(yy_lp); \
goto find_rule; \
/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
#define REJECT reject_used_but_not_detected
static int yy_more_offset = 0;
static int yy_prev_more_offset = 0;
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() (YY_G(yy_more_offset) = yy_flex_strlen( yytext M4_YY_CALL_LAST_ARG))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
YY_G(yy_more_offset) = YY_G(yy_prev_more_offset); \
yyleng -= YY_G(yy_more_offset); \
#define yymore() (YY_G(yy_more_flag) = 1)
#define YY_MORE_ADJ YY_G(yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
#define yymore() yymore_used_but_not_detected
#ifndef YYLMAX
#define YYLMAX 8192
#endif
char yytext[YYLMAX];
char *yytext_ptr;
char *yytext;
errno=0; \
while ( (result = (int) read( fileno(yyin), buf, (yy_size_t) max_size )) < 0 ) \
if( errno != EINTR) \
YY_FATAL_ERROR( "input in flex scanner failed" ); \
break; \
errno=0; \
clearerr(yyin); \
if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
int c = '*'; \
yy_size_t n; \
for ( n = 0; n < max_size && \
     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
buf[n] = (char) c; \
if ( c == '\n' ) \
buf[n++] = (char) c; \
if ( c == EOF && ferror( yyin ) ) \
result = n; \
else \
while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
if( errno != EINTR) \
YY_FATAL_ERROR( "input in flex scanner failed" ); \
break; \
errno=0; \
clearerr(yyin); \
#define YY_RULE_SETUP \
if ( yyleng > 0 ) \
YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
(yytext[yyleng - 1] == '\n'); \
YY_USER_ACTION
YY_G(yy_more_len) = 0;
if ( YY_G(yy_more_flag) )
YY_G(yy_more_len) = (int) (YY_G(yy_c_buf_p) - YY_G(yytext_ptr));
YY_G(yy_more_flag) = 0;
yy_match:
m4_ifdef( [[M4_YY_USE_LINENO]],[[
if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
yy_size_t yyl;
for ( yyl = %s; yyl < yyleng; ++yyl )
YY_G(yy_prev_more_offset)
YY_G(yy_more_len)
if ( yytext[yyl] == '\n' )
M4_YY_INCR_LINENO();
if ( yy_flex_debug )
std::cerr << "--scanner backing up\n";
fprintf( stderr, "--scanner backing up\n" );
else if ( yy_act < %d )
std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
         "(\"" << yytext << "\")\n";
fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
         (long)yy_rule_linenum[yy_act], yytext );
else if ( yy_act == %d )
std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
fprintf( stderr, "--accepting default rule (\"%s\")\n",
         yytext );
std::cerr << "--(end of buffer or a NUL)\n";
fprintf( stderr, "--(end of buffer or a NUL)\n" );
std::cerr << "--EOF (start condition " << YY_START << ")\n";
fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
case YY_STATE_EOF(%s):
yyterminate();
yy_cp = YY_G(yy_c_buf_p);
YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
if ( c == '\n' )
m4_ifdef( [[M4_YY_IN_HEADER]],,[[m4_dnl
static const YY_CHAR %s[%d] =
    {   0,
static const YY_CHAR * %s = 0;
static const flex_int32_t %s[%d] =
    {   0,
static const flex_int32_t * %s = 0;
static const flex_int16_t %s[%d] =
    {   0,
static const flex_int16_t * %s = 0;
{YYTD_ID_EC, (void**)&yy_ec, sizeof(%s)},
{YYTD_ID_TRANSITION, (void**)&yy_transition, sizeof(%s)},
{YYTD_ID_START_STATE_LIST, (void**)&yy_start_state_list, sizeof(%s)},
/* Table of booleans, true if rule could match eol. */
yy_rule_can_match_eol
%d, 
    
{YYTD_ID_RULE_CAN_MATCH_EOL, (void**)&yy_rule_can_match_eol, sizeof(%s)},
static const yy_state_type %s[%d] =
    {   0,
static const yy_state_type * %s = 0;
flex
]]M4_YY_NOOP[M4_YY_NOOP[M4_YY_NOOP[[
]]M4_YY_NOOP]M4_YY_NOOP]M4_YY_NOOP[[
rule cannot be matched
-s option given but default rule can be matched
Can't use -+ with -l option
Can't use -f or -F with -l option
Can't use --reentrant or --bison-bridge with -l option
-Cf/-CF and -Cm don't make sense together
-Cf/-CF and -I are incompatible
-Cf/-CF are incompatible with lex-compatibility mode
-Cf and -CF are mutually exclusive
Can't use -+ with -CF option
%array incompatible with -+ option
Options -+ and --reentrant are mutually exclusive.
bison bridge not supported for the C++ scanner.
M4_EXTRA_TYPE_DEFS
could not create %s
/usr/bin/gm4
PATH
M4_YY_TABLES_VERIFY
M4_YY_TABLES_EXTERNAL
%stables
could not write tables header
can't open skeleton file %s
M4_YY_REENTRANT
M4_YY_TEXT_IS_ARRAY
M4_YY_BISON_LVAL
<M4_YY_BISON_LLOC>
Prefix cannot include '[' or ']'
M4_YY_PREFIX
M4_YY_USE_LINENO
YY_INT_ALIGNED
long int
short int
#define %s %d
allocation of macro definition failed
M4_YY_SC_DEFS
#line 0 "M4_YY_OUTFILE_NAME"
input error reading skeleton file %s
error closing skeleton file %s
error writing output file %s
error closing output file %s
error deleting output file %s
No backing up.
%d backing up (non-accepting) states.
Compressed tables always back up.
error writing backup file %s
error closing backup file %s
%s version %s usage statistics:
  scanner options: -
--reentrant
--bison-bridge
--bison-locations
 -o%s
 -S%s
 -P%s
  %d/%d NFA states
  %d/%d DFA states (%d words)
  %d rules
  No backing up
  %d backing-up (non-accepting) states
  Compressed tables always back-up
  Beginning-of-line patterns used
  %d/%d start conditions
  %d epsilon states, %d double epsilon states
  no character classes
  %d/%d character classes needed %d/%d words of storage, %d reused
  %d state/nextstate pairs created
  %d/%d unique/duplicate transitions
  %d table entries
  %d/%d base-def entries created
  %d/%d (peak %d) nxt-chk entries created
  %d/%d (peak %d) template nxt-chk entries created
  %d empty table entries
  %d protos created
  %d templates created, %d uses
  %d/%d equivalence classes created
  %d/%d meta-equivalence classes created
  %d (%d saved) hash collisions, %d DFAs equal
  %d sets of reallocations needed
  %d total table entries needed
m4_changequote
m4_changequote([[, ]])
Internal error. flexopts are malformed.
Try `%s --help' for more information.
unknown -C option '%c'
YY_MAIN
M4_YY_NO_UNISTD_H
%s %s
M4_YY_ALWAYS_INTERACTIVE
M4_YY_NEVER_INTERACTIVE
#define 
M4_YY_STACK_USED
M4_YY_NO_PUSH_STATE
M4_YY_NO_POP_STATE
M4_YY_NO_TOP_STATE
M4_YY_NO_UNPUT
M4_YY_NO_SCAN_BUFFER
M4_YY_NO_SCAN_BYTES
M4_YY_NO_SCAN_STRING
M4_YY_NO_GET_EXTRA
M4_YY_NO_SET_EXTRA
M4_YY_NO_GET_LENG
M4_YY_NO_GET_TEXT
M4_YY_NO_GET_LINENO
M4_YY_NO_SET_LINENO
M4_YY_NO_GET_IN
M4_YY_NO_SET_IN
M4_YY_NO_GET_OUT
M4_YY_NO_SET_OUT
M4_YY_NO_GET_LVAL
M4_YY_NO_SET_LVAL
M4_YY_NO_GET_LLOC
M4_YY_NO_SET_LLOC
fatal parse error
POSIXLY_CORRECT
could not create backing-up info file %s
-l AT&T lex compatibility option entails a large performance penalty
 and may be the actual source of other reported performance penalties
%%option yylineno entails a performance penalty ONLY on rules that can match newline characters
-I (interactive) entails a minor performance penalty
yymore() entails a minor performance penalty
REJECT entails a large performance penalty
Variable trailing context rules entail a large performance penalty
REJECT cannot be used with -f or -F
%option yylineno cannot be used with REJECT
variable trailing context rules cannot be used with -f or -F
M4_YY_USES_REJECT
#define %swrap(yyscanner) (/*CONSTCOND*/1)
#define %swrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE
#ifdef VMS
#ifdef __VMS_POSIX
#define YY_STDINIT
#endif
#else
#ifndef __VMS_POSIX
typedef const struct yy_trans_info *yy_state_type;
typedef int yy_state_type;
#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;
#include <FlexLexer.h>
int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
return 0;
#define YY_DECL int %s::yylex()
extern char yytext[];
#define yytext_ptr yytext_r
extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
%option yyclass only meaningful for C++ scanners
Usage: %s [OPTIONS] [FILE]...
Generates programs that perform pattern-matching on text.
Table Compression:
  -Ca, --align      trade off larger tables for better memory alignment
  -Ce, --ecs        construct equivalence classes
  -Cf               do not compress tables; use -f representation
  -CF               do not compress tables; use -F representation
  -Cm, --meta-ecs   construct meta-equivalence classes
  -Cr, --read       use read() instead of stdio for scanner input
  -f, --full        generate fast, large scanner. Same as -Cfr
  -F, --fast        use alternate table representation. Same as -CFr
  -Cem              default compression (same as --ecs --meta-ecs)
Debugging:
  -d, --debug             enable debug mode in scanner
  -b, --backup            write backing-up information to %s
  -p, --perf-report       write performance report to stderr
  -s, --nodefault         suppress default rule to ECHO unmatched text
  -T, --trace             %s should run in trace mode
  -w, --nowarn            do not generate warnings
  -v, --verbose           write summary of scanner statistics to stdout
      --hex               use hexadecimal numbers instead of octal in debug outputs
Files:
  -o, --outfile=FILE      specify output filename
  -S, --skel=FILE         specify skeleton file
  -t, --stdout            write scanner on stdout instead of %s
      --yyclass=NAME      name of C++ class
      --header-file=FILE   create a C header file in addition to the scanner
      --tables-file[=FILE] write tables to FILE
Scanner behavior:
  -7, --7bit              generate 7-bit scanner
  -8, --8bit              generate 8-bit scanner
  -B, --batch             generate batch scanner (opposite of -I)
  -i, --case-insensitive  ignore case in patterns
  -l, --lex-compat        maximal compatibility with original lex
  -X, --posix-compat      maximal compatibility with POSIX lex
  -I, --interactive       generate interactive scanner (opposite of -B)
      --yylineno          track line count in yylineno
Generated code:
  -+,  --c++               generate C++ scanner class
  -Dmacro[=defn]           #define macro defn  (default defn is '1')
  -L,  --noline            suppress #line directives in scanner
  -P,  --prefix=STRING     use STRING as prefix instead of "yy"
  -R,  --reentrant         generate a reentrant C scanner
       --bison-bridge      scanner for bison pure parser.
       --bison-locations   include yylloc support.
       --stdinit           initialize yyin/yyout to stdin/stdout
       --nounistd          do not include <unistd.h>
       --noFUNCTION        do not generate a particular FUNCTION
Miscellaneous:
  -c                      do-nothing POSIX option
  -n                      do-nothing POSIX option
  -?
  -h, --help              produce this help message
  -V, --version           report %s version
name "%s" ridiculously long
memory allocation failed in allocate_array()
bad character '%s' detected in check_char()
scanner requires -8 flag to use the character %s
memory allocation failure in xstrdup()
    } ;
%s: %s
%s: fatal internal error, %s
M4_YY_OUTFILE_NAME
<stdin>
    
m4_define( [[%s]], [[%s]])m4_dnl
\x%.2x
\%.3o
attempt to increase array size failed
/* %s */\
/* %s */
%push
/*(state = (%s) */
true
false
%pop
%if-reentrant
%if-not-reentrant
%if-bison-bridge
%if-not-bison-bridge
%endif
%if-tables-serialization
%tables-yydmap
%define-yytables
#define YYTABLES_NAME "%s"
yytables
%if-c++-only
%if-c-only
%if-c-or-c++
%not-for-header
%ok-for-header
bad line in skeleton file
 {%4d,%4d },
memory allocation failed in yy_flex_xmalloc()
%s: fatal internal error at %s:%d %s
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/flex/src/misc.c
peek attempt when sko stack is empty
allocation of sko_stack failed
popped too many times in skeleton.
********** beginning dump of nfa with start state %d
state # %4d
%3d:  %4d, %4d
  [%d]
********** end of dump
empty machine in dupmachine()
case %d:
/* rule %d can match eol */
Variable trailing context rule at line %d
YY_G(yy_c_buf_p) = yy_cp
yy_bp
*yy_cp = YY_G(yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(%s + %d);
%s = %s + %d;
YY_LINENO_REWIND_TO(yy_cp - %d);
%s -= %d;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
bad state type in mark_beginning_as_normal()
input rules are too complicated (>= %d NFA states)
found too many transitions in mkxtion()
too many rules (> %d)!
--7bit
--8bit
--align
--noalign
--always-interactive
--array
--backup
--batch
--case-insensitive
-C[aefFmr]
Specify degree of table compression (default is -Cem)
--c++
--debug
--nodebug
--nodefault
--default
--ecs
--noecs
--fast
--full
--header-file[=FILE]
--help
--hex
--interactive
--lex-compat
--posix-compat
--preproc=NUM
--noline
--main
--nomain
--meta-ecs
--nometa-ecs
--never-interactive
-o FILE
--outfile=FILE
--perf-report
--pointer
-P PREFIX
--prefix=PREFIX
-Dmacro
--read
--noreentrant
--reject
--noreject
-S FILE
--skel=FILE
--stack
--stdinit
--nostdinit
--stdout
--trace
--tables-file[=FILE]
--tables-verify
--nounistd
--verbose
--version
--warn
--nowarn
--yyclass=NAME
--yylineno
--noyylineno
--yymore
--noyymore
--noyywrap
--yywrap
--nounput
--noyy_push_state
--noyy_pop_state
--noyy_top_state
--noyy_scan_buffer
--noyy_scan_bytes
--noyy_scan_string
--noyyget_extra
--noyyset_extra
--noyyget_leng
--noyyget_text
--noyyget_lineno
--noyyset_lineno
--noyyget_in
--noyyset_in
--noyyget_out
--noyyset_out
--noyyget_lval
--noyyset_lval
--noyyget_lloc
--noyyset_lloc
--unsafe-no-m4-sect3-escape
YY_FATAL_ERROR( "flex scanner jammed" )
ECHO
YY_BREAK]]
INITIAL
unknown error processing section 1
bad start condition list
Prefix must not contain [ or ]
'^' operator results in sub-optimal performance
all start conditions already have <<EOF>> rules
unrecognized rule
undeclared start condition %s
<%s> specified twice
trailing context made variable due to preceding '|' action
trailing context used twice
bad iteration values
iteration value must be positive
the character range [%c-%c] is ambiguous in a case-insensitive scanner
negative range in character class
[:^lower:] is ambiguous in case insensitive scanner
[:^upper:] ambiguous in case insensitive scanner
multiple <<EOF>> rules for start condition %s
warning, %s
%s:%d: %s
/*[[
malformed '%top' directive
unrecognized '%' directive
Definition name too long
Input line too long
*/]]
[]][[[]][[
]]][[]]][[
Unmatched '{'
Definition value for {%s} too long
incomplete name definition
YY_NO_INPUT
M4_YY_MAIN
YY_NO_UNISTD_H
M4_YY_NO_FLEX_ALLOC
M4_YY_NO_FLEX_REALLOC
M4_YY_NO_FLEX_FREE
M4_YY_NO_GET_DEBUG
M4_YY_NO_SET_DEBUG
Option line too long
unrecognized %%option: %s
/* Begin user sect3 */
undefined definition {%s}
unbalanced parenthesis
bad <start condition>: %s
missing quote
bad character class
bad character class expression: %s
bad character inside {}'s
missing }
YY_BREAK]]
EOF encountered inside an action
EOF encountered inside pattern
[[%s]]
bad character: %s
flex scanner jammed
fatal flex scanner internal error--no action found
out of dynamic memory in yy_create_buffer()
out of dynamic memory in yy_scan_buffer()
out of dynamic memory in yy_scan_bytes()
bad buffer in yy_scan_bytes()
can't open %s
fatal flex scanner internal error--end of buffer missed
fatal error - scanner input buffer overflow
input in flex scanner failed
out of dynamic memory in yy_get_next_buffer()
flex scanner push-back overflow
out of dynamic memory in yyensure_buffer_stack()
out of memory expanding start-condition stack
start-condition stack underflow
Unable to allocate %zu of stack
Usage: %s [OPTIONS]...
%.*s
COLUMNS
%s: 
option `%s' doesn't allow an argument
option `%s' requires an argument
option `%s' is ambiguous
Unrecognized option `%s'
Unknown error=(%d)
/* A lexical scanner generated by flex */
m4_changecom
m4_changequote
m4_changequote([[, ]])
m4_ifelse(M4_YY_PREFIX,yy,,
#define yy_create_buffer M4_YY_PREFIX[[_create_buffer]]
#define yy_delete_buffer M4_YY_PREFIX[[_delete_buffer]]
#define yy_scan_buffer M4_YY_PREFIX[[_scan_buffer]]
#define yy_scan_string M4_YY_PREFIX[[_scan_string]]
#define yy_scan_bytes M4_YY_PREFIX[[_scan_bytes]]
#define yy_init_buffer M4_YY_PREFIX[[_init_buffer]]
#define yy_flush_buffer M4_YY_PREFIX[[_flush_buffer]]
#define yy_load_buffer_state M4_YY_PREFIX[[_load_buffer_state]]
#define yy_switch_to_buffer M4_YY_PREFIX[[_switch_to_buffer]]
#define yypush_buffer_state M4_YY_PREFIX[[push_buffer_state]]
#define yypop_buffer_state M4_YY_PREFIX[[pop_buffer_state]]
#define yyensure_buffer_stack M4_YY_PREFIX[[ensure_buffer_stack]]
#define yy_flex_debug M4_YY_PREFIX[[_flex_debug]]
#define yyin M4_YY_PREFIX[[in]]
#define yyleng M4_YY_PREFIX[[leng]]
#define yylex M4_YY_PREFIX[[lex]]
#define yylineno M4_YY_PREFIX[[lineno]]
#define yyout M4_YY_PREFIX[[out]]
#define yyrestart M4_YY_PREFIX[[restart]]
#define yytext M4_YY_PREFIX[[text]]
#define yywrap M4_YY_PREFIX[[wrap]]
#define yyalloc M4_YY_PREFIX[[alloc]]
#define yyrealloc M4_YY_PREFIX[[realloc]]
#define yyfree M4_YY_PREFIX[[free]]
#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
m4_ifdef( [[M4_YY_IN_HEADER]], , [[m4_define([[M4_YY_NOT_IN_HEADER]], [[]])]])
m4_ifdef( [[M4_YY_REENTRANT]], , [[m4_define([[M4_YY_NOT_REENTRANT]], [[]])]])
m4_ifdef( [[M4_YY_STACK_USED]], [[m4_define([[M4_YY_HAS_START_STACK_VARS]])]])
m4_ifdef( [[M4_YY_REENTRANT]],  [[m4_define([[M4_YY_HAS_START_STACK_VARS]])]])
m4_ifdef( [[M4_YY_PREFIX]],, [[m4_define([[M4_YY_PREFIX]], [[yy]])]])
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer M4_YY_PREFIX[[FlexLexer]]
[[#ifdef yy_create_buffer
#define ]]M4_YY_PREFIX[[_create_buffer_ALREADY_DEFINED
#define yy_create_buffer ]]M4_YY_PREFIX[[_create_buffer
#endif]]
[[#ifdef yy_delete_buffer
#define ]]M4_YY_PREFIX[[_delete_buffer_ALREADY_DEFINED
#define yy_delete_buffer ]]M4_YY_PREFIX[[_delete_buffer
[[#ifdef yy_scan_buffer
#define ]]M4_YY_PREFIX[[_scan_buffer_ALREADY_DEFINED
#define yy_scan_buffer ]]M4_YY_PREFIX[[_scan_buffer
[[#ifdef yy_scan_string
#define ]]M4_YY_PREFIX[[_scan_string_ALREADY_DEFINED
#define yy_scan_string ]]M4_YY_PREFIX[[_scan_string
[[#ifdef yy_scan_bytes
#define ]]M4_YY_PREFIX[[_scan_bytes_ALREADY_DEFINED
#define yy_scan_bytes ]]M4_YY_PREFIX[[_scan_bytes
[[#ifdef yy_init_buffer
#define ]]M4_YY_PREFIX[[_init_buffer_ALREADY_DEFINED
#define yy_init_buffer ]]M4_YY_PREFIX[[_init_buffer
[[#ifdef yy_flush_buffer
#define ]]M4_YY_PREFIX[[_flush_buffer_ALREADY_DEFINED
#define yy_flush_buffer ]]M4_YY_PREFIX[[_flush_buffer
[[#ifdef yy_load_buffer_state
#define ]]M4_YY_PREFIX[[_load_buffer_state_ALREADY_DEFINED
#define yy_load_buffer_state ]]M4_YY_PREFIX[[_load_buffer_state
[[#ifdef yy_switch_to_buffer
#define ]]M4_YY_PREFIX[[_switch_to_buffer_ALREADY_DEFINED
#define yy_switch_to_buffer ]]M4_YY_PREFIX[[_switch_to_buffer
[[#ifdef yypush_buffer_state
#define ]]M4_YY_PREFIX[[push_buffer_state_ALREADY_DEFINED
#define yypush_buffer_state ]]M4_YY_PREFIX[[push_buffer_state
[[#ifdef yypop_buffer_state
#define ]]M4_YY_PREFIX[[pop_buffer_state_ALREADY_DEFINED
#define yypop_buffer_state ]]M4_YY_PREFIX[[pop_buffer_state
[[#ifdef yyensure_buffer_stack
#define ]]M4_YY_PREFIX[[ensure_buffer_stack_ALREADY_DEFINED
#define yyensure_buffer_stack ]]M4_YY_PREFIX[[ensure_buffer_stack
[[#ifdef yylex
#define ]]M4_YY_PREFIX[[lex_ALREADY_DEFINED
#define yylex ]]M4_YY_PREFIX[[lex
[[#ifdef yyrestart
#define ]]M4_YY_PREFIX[[restart_ALREADY_DEFINED
#define yyrestart ]]M4_YY_PREFIX[[restart
[[#ifdef yylex_init
#define ]]M4_YY_PREFIX[[lex_init_ALREADY_DEFINED
#define yylex_init ]]M4_YY_PREFIX[[lex_init
[[#ifdef yylex_init_extra
#define ]]M4_YY_PREFIX[[lex_init_extra_ALREADY_DEFINED
#define yylex_init_extra ]]M4_YY_PREFIX[[lex_init_extra
[[#ifdef yylex_destroy
#define ]]M4_YY_PREFIX[[lex_destroy_ALREADY_DEFINED
#define yylex_destroy ]]M4_YY_PREFIX[[lex_destroy
[[#ifdef yyget_debug
#define ]]M4_YY_PREFIX[[get_debug_ALREADY_DEFINED
#define yyget_debug ]]M4_YY_PREFIX[[get_debug
[[#ifdef yyset_debug
#define ]]M4_YY_PREFIX[[set_debug_ALREADY_DEFINED
#define yyset_debug ]]M4_YY_PREFIX[[set_debug
[[#ifdef yyget_extra
#define ]]M4_YY_PREFIX[[get_extra_ALREADY_DEFINED
#define yyget_extra ]]M4_YY_PREFIX[[get_extra
[[#ifdef yyset_extra
#define ]]M4_YY_PREFIX[[set_extra_ALREADY_DEFINED
#define yyset_extra ]]M4_YY_PREFIX[[set_extra
[[#ifdef yyget_in
#define ]]M4_YY_PREFIX[[get_in_ALREADY_DEFINED
#define yyget_in ]]M4_YY_PREFIX[[get_in
[[#ifdef yyset_in
#define ]]M4_YY_PREFIX[[set_in_ALREADY_DEFINED
#define yyset_in ]]M4_YY_PREFIX[[set_in
[[#ifdef yyget_out
#define ]]M4_YY_PREFIX[[get_out_ALREADY_DEFINED
#define yyget_out ]]M4_YY_PREFIX[[get_out
[[#ifdef yyset_out
#define ]]M4_YY_PREFIX[[set_out_ALREADY_DEFINED
#define yyset_out ]]M4_YY_PREFIX[[set_out
[[#ifdef yyget_leng
#define ]]M4_YY_PREFIX[[get_leng_ALREADY_DEFINED
#define yyget_leng ]]M4_YY_PREFIX[[get_leng
[[#ifdef yyget_text
#define ]]M4_YY_PREFIX[[get_text_ALREADY_DEFINED
#define yyget_text ]]M4_YY_PREFIX[[get_text
[[#ifdef yyget_lineno
#define ]]M4_YY_PREFIX[[get_lineno_ALREADY_DEFINED
#define yyget_lineno ]]M4_YY_PREFIX[[get_lineno
[[#ifdef yyset_lineno
#define ]]M4_YY_PREFIX[[set_lineno_ALREADY_DEFINED
#define yyset_lineno ]]M4_YY_PREFIX[[set_lineno
    m4_ifdef( [[M4_YY_REENTRANT]],
    [[
        
[[#ifdef yyget_column
#define ]]M4_YY_PREFIX[[get_column_ALREADY_DEFINED
#define yyget_column ]]M4_YY_PREFIX[[get_column
[[#ifdef yyset_column
#define ]]M4_YY_PREFIX[[set_column_ALREADY_DEFINED
#define yyset_column ]]M4_YY_PREFIX[[set_column
    ]])
[[#ifdef yywrap
#define ]]M4_YY_PREFIX[[wrap_ALREADY_DEFINED
#define yywrap ]]M4_YY_PREFIX[[wrap
m4_ifdef( [[M4_YY_BISON_LVAL]],
[[#ifdef yyget_lval
#define ]]M4_YY_PREFIX[[get_lval_ALREADY_DEFINED
#define yyget_lval ]]M4_YY_PREFIX[[get_lval
[[#ifdef yyset_lval
#define ]]M4_YY_PREFIX[[set_lval_ALREADY_DEFINED
#define yyset_lval ]]M4_YY_PREFIX[[set_lval
m4_ifdef( [[<M4_YY_BISON_LLOC>]],
[[#ifdef yyget_lloc
#define ]]M4_YY_PREFIX[[get_lloc_ALREADY_DEFINED
#define yyget_lloc ]]M4_YY_PREFIX[[get_lloc
[[#ifdef yyset_lloc
#define ]]M4_YY_PREFIX[[set_lloc_ALREADY_DEFINED
#define yyset_lloc ]]M4_YY_PREFIX[[set_lloc
[[#ifdef yyalloc
#define ]]M4_YY_PREFIX[[alloc_ALREADY_DEFINED
#define yyalloc ]]M4_YY_PREFIX[[alloc
[[#ifdef yyrealloc
#define ]]M4_YY_PREFIX[[realloc_ALREADY_DEFINED
#define yyrealloc ]]M4_YY_PREFIX[[realloc
[[#ifdef yyfree
#define ]]M4_YY_PREFIX[[free_ALREADY_DEFINED
#define yyfree ]]M4_YY_PREFIX[[free
m4_ifdef( [[M4_YY_NOT_REENTRANT]],
[[#ifdef yytext
#define ]]M4_YY_PREFIX[[text_ALREADY_DEFINED
#define yytext ]]M4_YY_PREFIX[[text
[[#ifdef yyleng
#define ]]M4_YY_PREFIX[[leng_ALREADY_DEFINED
#define yyleng ]]M4_YY_PREFIX[[leng
[[#ifdef yyin
#define ]]M4_YY_PREFIX[[in_ALREADY_DEFINED
#define yyin ]]M4_YY_PREFIX[[in
[[#ifdef yyout
#define ]]M4_YY_PREFIX[[out_ALREADY_DEFINED
#define yyout ]]M4_YY_PREFIX[[out
[[#ifdef yy_flex_debug
#define ]]M4_YY_PREFIX[[_flex_debug_ALREADY_DEFINED
#define yy_flex_debug ]]M4_YY_PREFIX[[_flex_debug
[[#ifdef yylineno
#define ]]M4_YY_PREFIX[[lineno_ALREADY_DEFINED
#define yylineno ]]M4_YY_PREFIX[[lineno
m4_ifdef( [[M4_YY_TABLES_EXTERNAL]],
[[#ifdef yytables_fload
#define ]]M4_YY_PREFIX[[tables_fload_ALREADY_DEFINED
#define yytables_fload ]]M4_YY_PREFIX[[tables_fload
[[#ifdef yytables_destroy
#define ]]M4_YY_PREFIX[[tables_destroy_ALREADY_DEFINED
#define yytables_destroy ]]M4_YY_PREFIX[[tables_destroy
[[#ifdef yyTABLES_NAME
#define ]]M4_YY_PREFIX[[TABLES_NAME_ALREADY_DEFINED
#define yyTABLES_NAME ]]M4_YY_PREFIX[[TABLES_NAME
/* First, we deal with  platform-specific or compiler-specific issues. */
/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
#include <sys/types.h>
#include <netinet/in.h>
/* end standard C headers. */
/* flex integer type definitions */
#ifndef FLEXINT_H
#define FLEXINT_H
/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#ifndef INT8_MAX
#define INT8_MAX               (127)
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif /* ! C99 */
#endif /* ! FLEXINT_H */
/* begin standard C++ headers. */
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* TODO: this is always defined, so inline it */
#define yyconst const
#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#define yynoreturn
/* Returned upon end-of-file. */
#define YY_NULL 0
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
m4_define( [[M4_YY_DECL_GUTS_VAR]], [[struct yyguts_t * yyg = (struct yyguts_t*)yyscanner]])
m4_define( [[M4_YY_NOOP_GUTS_VAR]], [[(void)yyg]])
m4_define( [[YY_G]], [[yyg->$1]])
m4_define( [[M4_YY_PROTO_LAST_ARG]],  [[, yyscan_t yyscanner]])
m4_define( [[M4_YY_PROTO_ONLY_ARG]],  [[yyscan_t yyscanner]])
m4_define( [[M4_YY_DEF_LAST_ARG]],  [[, yyscan_t yyscanner]])
m4_define( [[M4_YY_DEF_ONLY_ARG]],  [[yyscan_t yyscanner]])
m4_define( [[M4_YY_DECL_LAST_ARG]],  [[yyscan_t yyscanner;]])
m4_define( [[M4_YY_CALL_LAST_ARG]], [[, yyscanner]])
m4_define( [[M4_YY_CALL_ONLY_ARG]], [[yyscanner]])
m4_define( [[M4_YY_DOC_PARAM]], [[@param yyscanner The scanner object.]])
/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin YY_G(yyin_r)
#define yyout YY_G(yyout_r)
#define yyextra YY_G(yyextra_r)
#define yyleng YY_G(yyleng_r)
#define yytext YY_G(yytext_r)
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug YY_G(yy_flex_debug_r)
m4_define( [[M4_YY_INCR_LINENO]],
    do{ yylineno++;
        yycolumn=0;
    }while(0)
    yylineno++;
m4_define( [[M4_YY_DECL_GUTS_VAR]], [[m4_dnl]])
m4_define( [[M4_YY_NOOP_GUTS_VAR]], [[m4_dnl]])
m4_define( [[YY_G]], [[($1)]])
m4_define( [[M4_YY_PROTO_LAST_ARG]])
m4_define( [[M4_YY_PROTO_ONLY_ARG]],  [[void]])
m4_define( [[M4_YY_DEF_LAST_ARG]])
m4_define( [[M4_YY_DEF_ONLY_ARG]],  [[void]])
m4_define([[M4_YY_DECL_LAST_ARG]])
m4_define([[M4_YY_CALL_LAST_ARG]])
m4_define([[M4_YY_CALL_ONLY_ARG]])
m4_define( [[M4_YY_DOC_PARAM]], )
m4_define( [[YYFARGS1]], [[($1 $2 M4_YY_DEF_LAST_ARG)]])
m4_define( [[YYFARGS2]], [[($1 $2, $3 $4 M4_YY_DEF_LAST_ARG)]])
m4_define( [[YYFARGS3]], [[($1 $2, $3 $4, $5 $6 M4_YY_DEF_LAST_ARG)]])
m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
#define BEGIN YY_G(yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
#define YY_START ((YY_G(yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin M4_YY_CALL_LAST_ARG )
#define YY_END_OF_BUFFER_CHAR 0
/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
#define YY_BUF_SIZE 32768
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
/* The state buf must be large enough to hold one state per character in the main buffer.
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))
#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
extern yy_size_t yyleng;
extern FILE *yyin, *yyout;
#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    m4_ifdef( [[M4_YY_USE_LINENO]],
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
    ]],
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
do \
/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
*yy_cp = YY_G(yy_hold_char); \
YY_RESTORE_YY_MORE_OFFSET \
YY_G(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
YY_DO_BEFORE_ACTION; /* set up yytext again */ \
while ( 0 )
#define unput(c) yyunput( c, YY_G(yytext_ptr) M4_YY_CALL_LAST_ARG )
#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
FILE *yy_input_file;
std::streambuf* yy_input_file;
char *yy_ch_buf;
/* input buffer */
char *yy_buf_pos;
/* current position in input buffer */
/* Size of input buffer in bytes, not including room for EOB
 * characters.
int yy_buf_size;
/* Number of characters read into yy_ch_buf, not including EOB
yy_size_t yy_n_chars;
/* Whether we "own" the buffer - i.e., we know we created it,
 * and can realloc() it to grow it, and should free() it to
 * delete it.
int yy_is_our_buffer;
/* Whether this is an "interactive" input source; if so, and
 * if we're using stdio for input, then we want to use getc()
 * instead of fread(), to make sure we stop fetching input after
 * each newline.
int yy_is_interactive;
/* Whether we're considered to be at the beginning of a line.
 * If so, '^' rules will be active on the next match, otherwise
 * not.
int yy_at_bol;
    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
/* Whether to try to fill the input buffer when we reach the
 * end of it.
int yy_fill_buffer;
int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
/* When an EOF's been seen but there's still some text to process
 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
 * shouldn't try reading from the input source any more.  We might
 * still have a bunch of tokens to match, though, because of
 * possible backing-up.
 * When we actually see the EOF, we change the status to "new"
 * (via yyrestart()), so that the user can continue scanning by
 * just pointing yyin at a new input file.
#define YY_BUFFER_EOF_PENDING 2
#endif /* !YY_STRUCT_YY_BUFFER_STATE */
%if-c-only Standard (non-C++) definition
/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 * Returns the top of the stack, or NULL.
#define YY_CURRENT_BUFFER ( YY_G(yy_buffer_stack) \
                          ? YY_G(yy_buffer_stack)[YY_G(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
#define YY_CURRENT_BUFFER_LVALUE YY_G(yy_buffer_stack)[YY_G(yy_buffer_stack_top)]
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;
/* number of characters read into yy_ch_buf */
yy_size_t yyleng;
/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;
/* whether we need to initialize */
static int yy_start = 0;
/* start state number */
/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
static int yy_did_buffer_switch_on_eof;
void yyrestart ( FILE *input_file M4_YY_PROTO_LAST_ARG );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer M4_YY_PROTO_LAST_ARG );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size M4_YY_PROTO_LAST_ARG );
void yy_delete_buffer ( YY_BUFFER_STATE b M4_YY_PROTO_LAST_ARG );
void yy_flush_buffer ( YY_BUFFER_STATE b M4_YY_PROTO_LAST_ARG );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer M4_YY_PROTO_LAST_ARG );
void yypop_buffer_state ( M4_YY_PROTO_ONLY_ARG );
static void yyensure_buffer_stack ( M4_YY_PROTO_ONLY_ARG );
static void yy_load_buffer_state ( M4_YY_PROTO_ONLY_ARG );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file M4_YY_PROTO_LAST_ARG );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER M4_YY_CALL_LAST_ARG)
YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size M4_YY_PROTO_LAST_ARG );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str M4_YY_PROTO_LAST_ARG );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, yy_size_t len M4_YY_PROTO_LAST_ARG );
void *yyalloc ( yy_size_t M4_YY_PROTO_LAST_ARG );
void *yyrealloc ( void *, yy_size_t M4_YY_PROTO_LAST_ARG );
void yyfree ( void * M4_YY_PROTO_LAST_ARG );
#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (M4_YY_CALL_ONLY_ARG); \
YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE M4_YY_CALL_LAST_ARG); \
YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
#define yy_set_bol(at_bol) \
if ( ! YY_CURRENT_BUFFER ){\
YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
%% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here
%% [1.5] DFA
static yy_state_type yy_get_previous_state ( M4_YY_PROTO_ONLY_ARG );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  M4_YY_PROTO_LAST_ARG);
static int yy_get_next_buffer ( M4_YY_PROTO_ONLY_ARG );
static void yynoreturn yy_fatal_error ( const char* msg M4_YY_PROTO_LAST_ARG );
/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
#define YY_DO_BEFORE_ACTION \
YY_G(yytext_ptr) = yy_bp; \
%% [2.0] code to fiddle yytext and yyleng for yymore() goes here \
YY_G(yy_hold_char) = *yy_cp; \
*yy_cp = '\0'; \
%% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \
YY_G(yy_c_buf_p) = yy_cp;
%% [4.0] data tables for the DFA and the user's section 1 definitions go here
m4_ifdef( [[M4_YY_IN_HEADER]], [[#ifdef YY_HEADER_EXPORT_START_CONDITIONS]])
m4_ifdef( [[M4_YY_IN_HEADER]], [[#endif]])
m4_ifdef( [[M4_YY_NO_UNISTD_H]],,
#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
#include <unistd.h>
m4_ifdef( [[M4_EXTRA_TYPE_DEFS]],
#define YY_EXTRA_TYPE M4_EXTRA_TYPE_DEFS
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
%if-c-only Reentrant structure and macros (non-C++).
/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;
    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;
    int yylineno_r;
    int yy_flex_debug_r;
m4_ifdef( [[M4_YY_USES_REJECT]],
    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;
    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;
m4_ifdef( [[M4_YY_TEXT_IS_ARRAY]],
    char yytext_r[YYLMAX];
    char *yytext_ptr;
    int yy_more_offset;
    int yy_prev_more_offset;
    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;
    YYSTYPE * yylval_r;
    YYLTYPE * yylloc_r;
    }; /* end struct yyguts_t */
static int yy_init_globals ( M4_YY_PROTO_ONLY_ARG );
    m4_ifdef( [[M4_YY_BISON_LVAL]],
    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval YY_G(yylval_r)
    m4_ifdef( [[<M4_YY_BISON_LLOC>]],
    #    define yylloc YY_G(yylloc_r)
int yylex_init (yyscan_t* scanner);
int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);
%endif End reentrant structures and macros.
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */
m4_ifdef( [[M4_YY_NO_DESTROY]],,
int yylex_destroy ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_NO_GET_DEBUG]],,
int yyget_debug ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_NO_SET_DEBUG]],,
void yyset_debug ( int debug_flag M4_YY_PROTO_LAST_ARG );
m4_ifdef( [[M4_YY_NO_GET_EXTRA]],,
YY_EXTRA_TYPE yyget_extra ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_NO_SET_EXTRA]],,
void yyset_extra ( YY_EXTRA_TYPE user_defined M4_YY_PROTO_LAST_ARG );
m4_ifdef( [[M4_YY_NO_GET_IN]],,
FILE *yyget_in ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_NO_SET_IN]],,
void yyset_in  ( FILE * _in_str M4_YY_PROTO_LAST_ARG );
m4_ifdef( [[M4_YY_NO_GET_OUT]],,
FILE *yyget_out ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_NO_SET_OUT]],,
void yyset_out  ( FILE * _out_str M4_YY_PROTO_LAST_ARG );
m4_ifdef( [[M4_YY_NO_GET_LENG]],,
yy_size_t yyget_leng ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_NO_GET_TEXT]],,
char *yyget_text ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_NO_GET_LINENO]],,
int yyget_lineno ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_NO_SET_LINENO]],,
void yyset_lineno ( int _line_number M4_YY_PROTO_LAST_ARG );
m4_ifdef( [[M4_YY_REENTRANT]],
m4_ifdef( [[M4_YY_NO_GET_COLUMN]],,
int yyget_column  ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_NO_SET_COLUMN]],,
void yyset_column ( int _column_no M4_YY_PROTO_LAST_ARG );
m4_ifdef( [[M4_YY_NO_GET_LVAL]],,
YYSTYPE * yyget_lval ( M4_YY_PROTO_ONLY_ARG );
void yyset_lval ( YYSTYPE * yylval_param M4_YY_PROTO_LAST_ARG );
    m4_ifdef( [[M4_YY_NO_GET_LLOC]],,
       YYLTYPE *yyget_lloc ( M4_YY_PROTO_ONLY_ARG );
    m4_ifdef( [[M4_YY_NO_SET_LLOC]],,
        void yyset_lloc ( YYLTYPE * yylloc_param M4_YY_PROTO_LAST_ARG );
/* Macros after this point can all be overridden by user definitions in
 * section 1.
#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( M4_YY_PROTO_ONLY_ARG );
extern int yywrap ( M4_YY_PROTO_ONLY_ARG );
#ifndef YY_NO_UNPUT
    m4_ifdef( [[M4_YY_NO_UNPUT]],,
    static void yyunput ( int c, char *buf_ptr  M4_YY_PROTO_LAST_ARG);
#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int M4_YY_PROTO_LAST_ARG);
#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * M4_YY_PROTO_LAST_ARG);
#ifndef YY_NO_INPUT
static int yyinput ( M4_YY_PROTO_ONLY_ARG );
static int input ( M4_YY_PROTO_ONLY_ARG );
m4_ifdef( [[M4_YY_STACK_USED]],
    m4_ifdef( [[M4_YY_NOT_IN_HEADER]],
        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    m4_ifdef( [[M4_YY_NO_PUSH_STATE]],,
    static void yy_push_state ( int _new_state M4_YY_PROTO_LAST_ARG);
    m4_ifdef( [[M4_YY_NO_POP_STATE]],,
    static void yy_pop_state ( M4_YY_PROTO_ONLY_ARG );
    m4_ifdef( [[M4_YY_NO_TOP_STATE]],,
    static int yy_top_state ( M4_YY_PROTO_ONLY_ARG );
m4_define( [[M4_YY_NO_PUSH_STATE]])
m4_define( [[M4_YY_NO_POP_STATE]])
m4_define( [[M4_YY_NO_TOP_STATE]])
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#define YY_READ_BUF_SIZE 8192
/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
%if-c++-only C++ definition
#define ECHO LexerOutput( yytext, yyleng )
/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
%% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \
%if-c++-only C++ definition \
if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
YY_FATAL_ERROR( "input in flex scanner failed" );
/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
#ifndef yyterminate
#define yyterminate() return YY_NULL
/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg M4_YY_CALL_LAST_ARG)
#define YY_FATAL_ERROR(msg) LexerError( msg )
%if-tables-serialization structures and prototypes
#ifdef FLEX_SCANNER
dnl  tables_shared.h - tables serialization header
dnl  Copyright (c) 1990 The Regents of the University of California.
dnl  All rights reserved.
dnl  This code is derived from software contributed to Berkeley by
dnl  Vern Paxson.
dnl  The United States Government has rights in this work pursuant
dnl  to contract no. DE-AC03-76SF00098 between the United States
dnl  Department of Energy and the University of California.
dnl  This file is part of flex.
dnl  Redistribution and use in source and binary forms, with or without
dnl  modification, are permitted provided that the following conditions
dnl  are met:
dnl  1. Redistributions of source code must retain the above copyright
dnl     notice, this list of conditions and the following disclaimer.
dnl  2. Redistributions in binary form must reproduce the above copyright
dnl     notice, this list of conditions and the following disclaimer in the
dnl     documentation and/or other materials provided with the distribution.
dnl  Neither the name of the University nor the names of its contributors
dnl  may be used to endorse or promote products derived from this software
dnl  without specific prior written permission.
dnl  THIS SOFTWARE IS PROVIDED `AS IS' AND WITHOUT ANY EXPRESS OR
dnl  IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
dnl  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
dnl  PURPOSE.
dnl  This file is meant to be included in both the skeleton and the actual
dnl  flex code (hence the name "_shared").
#ifndef yyskel_static
#define yyskel_static static
#define yyskel_static
/* Structures and prototypes for serializing flex tables.  The
 * binary format is documented in the manual.
 * Design considerations:
 *  -  The format allows many tables per file.
 *  -  The tables can be streamed.
 *  -  All data is stored in network byte order.
 *  -  We do not hinder future unicode support.
 *  -  We can lookup tables by name.
/** Magic number for serialized format. */
#ifndef YYTBL_MAGIC
#define YYTBL_MAGIC 0xF13C57B1
/** Calculate (0-7) = number bytes needed to pad n to next 64-bit boundary. */
#ifndef yypad64
#define yypad64(n) ((8-((n)%8))%8)
#ifndef YYTABLES_TYPES
#define YYTABLES_TYPES
/** Possible values for td_id field. Each one corresponds to a
 *  scanner table of the same name.
enum yytbl_id {
YYTD_ID_ACCEPT = 0x01,
/**< 1-dim ints */
YYTD_ID_BASE = 0x02,
/**< 1-dim ints */
YYTD_ID_CHK = 0x03,
/**< 1-dim ints */
YYTD_ID_DEF = 0x04,
/**< 1-dim ints */
YYTD_ID_EC = 0x05,
/**< 1-dim ints */
YYTD_ID_META = 0x06,
/**< 1-dim ints */
YYTD_ID_NUL_TRANS = 0x07,
/**< 1-dim ints, maybe indices */
YYTD_ID_NXT = 0x08,
/**< may be 2 dimensional ints */
YYTD_ID_RULE_CAN_MATCH_EOL = 0x09, /**< 1-dim ints */
YYTD_ID_START_STATE_LIST = 0x0A,
/**< 1-dim indices into trans tbl  */
YYTD_ID_TRANSITION = 0x0B,
/**< structs */
YYTD_ID_ACCLIST = 0x0C
/**< 1-dim ints */
/** bit flags for t_flags field of struct yytbl_data */
enum yytbl_flags {
/* These first three are mutually exclusive */
YYTD_DATA8 = 0x01,   /**< data is an array of type flex_int8_t */
YYTD_DATA16 = 0x02,  /**< data is an array of type flex_int16_t */
YYTD_DATA32 = 0x04,  /**< data is an array of type flex_int32_t */
/* These two are mutually exclusive. */
YYTD_PTRANS = 0x08,  /**< data is a list of indexes of entries
                                 into the expanded yy_transition
                                 array. See notes in manual. */
YYTD_STRUCT = 0x10  /**< data consists of yy_trans_info structs */
/* The serialized tables header. */
struct yytbl_hdr {
flex_uint32_t th_magic;  /**< Must be 0xF13C57B1 (comes from "Flex Table") */
flex_uint32_t th_hsize;  /**< Size of this header in bytes. */
flex_uint32_t th_ssize;  /**< Size of this dataset, in bytes, including header. */
flex_uint16_t th_flags;  /**< Currently unused, must be 0 */
char   *th_version; /**< Flex version string. NUL terminated. */
char   *th_name;    /**< The name of this table set. NUL terminated. */
/** A single serialized table */
struct yytbl_data {
flex_uint16_t td_id;      /**< enum yytbl_id table identifier */
flex_uint16_t td_flags;   /**< how to interpret this data */
flex_uint32_t td_hilen;   /**< num elements in highest dimension array */
flex_uint32_t td_lolen;   /**< num elements in lowest dimension array */
void   *td_data;     /**< table data */
/** Extract corresponding data size_t from td_flags */
#ifndef YYTDFLAGS2BYTES
#define YYTDFLAGS2BYTES(td_flags)\
        (((td_flags) & YYTD_DATA8)\
            ? sizeof(flex_int8_t)\
            :(((td_flags) & YYTD_DATA16)\
                ? sizeof(flex_int16_t)\
                :sizeof(flex_int32_t)))
yyskel_static flex_int32_t yytbl_calc_total_len (const struct yytbl_data *tbl);
/* vim:set noexpandtab cindent tabstop=8 softtabstop=0 shiftwidth=8 textwidth=0: */
/* Load the DFA tables from the given stream.  */
int yytables_fload (FILE * fp M4_YY_PROTO_LAST_ARG);
/* Unload the tables from memory. */
int yytables_destroy (M4_YY_PROTO_ONLY_ARG);
/** Describes a mapping from a serialized table id to its deserialized state in
 * this scanner.  This is the bridge between our "generic" deserialization code
 * and the specifics of this scanner.
struct yytbl_dmap {
enum yytbl_id dm_id;/**< table identifier */
void  **dm_arr;
/**< address of pointer to store the deserialized table. */
size_t  dm_sz;
/**< local sizeof() each element in table. */
/** A {0,0,0}-terminated list of structs, forming the map */
static struct yytbl_dmap yydmap[] =
%tables-yydmap generated elements
    {0,0,0}
/** A tables-reader object to maintain some state in the read. */
struct yytbl_reader {
    FILE * fp; /**< input stream */
    flex_uint32_t bread; /**< bytes read since beginning of current tableset */
/* end tables serialization structures and prototypes */
/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
m4_define( [[M4_YY_LEX_PROTO]], [[(M4_YY_PROTO_ONLY_ARG)]])
m4_define( [[M4_YY_LEX_DECLARATION]], [[(M4_YY_DEF_ONLY_ARG)]])
    m4_dnl  The bison pure parser is used. Redefine yylex to
    m4_dnl  accept the lval parameter.
    m4_define( [[M4_YY_LEX_PROTO]], [[\]]
               [[(YYSTYPE * yylval_param M4_YY_PROTO_LAST_ARG)]])
    m4_define( [[M4_YY_LEX_DECLARATION]], [[\]]
               [[YYFARGS1(YYSTYPE *,yylval_param)]])
    m4_dnl  Locations are used. yylex should also accept the ylloc parameter.
               [[(YYSTYPE * yylval_param, YYLTYPE * yylloc_param M4_YY_PROTO_LAST_ARG)]])
               [[YYFARGS2(YYSTYPE *,yylval_param, YYLTYPE *,yylloc_param)]])
extern int yylex M4_YY_LEX_PROTO;
#define YY_DECL int yylex M4_YY_LEX_DECLARATION
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */
/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
%% [6.0] YY_RULE_SETUP definition goes here
/** The main scanner function which does all the work.
YY_DECL
yy_state_type yy_current_state;
char *yy_cp, *yy_bp;
int yy_act;
    M4_YY_DECL_GUTS_VAR();
        YYSTYPE * yylval;
        YYLTYPE * yylloc;
    yylval = yylval_param;
    yylloc = yylloc_param;
if ( !YY_G(yy_init) )
YY_G(yy_init) = 1;
#ifdef YY_USER_INIT
YY_USER_INIT;
        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! YY_G(yy_state_buf) )
            YY_G(yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  M4_YY_CALL_LAST_ARG);
            if ( ! YY_G(yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
if ( ! YY_G(yy_start) )
YY_G(yy_start) = 1;
/* first start state */
if ( ! yyin )
yyin = stdin;
yyin.rdbuf(std::cin.rdbuf());
if ( ! yyout )
yyout = stdout;
yyout.rdbuf(std::cout.rdbuf());
if ( ! YY_CURRENT_BUFFER ) {
yyensure_buffer_stack (M4_YY_CALL_ONLY_ARG);
YY_CURRENT_BUFFER_LVALUE =
yy_create_buffer( yyin, YY_BUF_SIZE M4_YY_CALL_LAST_ARG);
yy_load_buffer_state( M4_YY_CALL_ONLY_ARG );
%% [7.0] user's declarations go here
while ( /*CONSTCOND*/1 )
/* loops until end-of-file is reached */
%% [8.0] yymore()-related code goes here
yy_cp = YY_G(yy_c_buf_p);
/* Support of yytext. */
*yy_cp = YY_G(yy_hold_char);
/* yy_bp points to the position in yy_ch_buf of the start of
 * the current run.
yy_bp = yy_cp;
%% [9.0] code to set up and find next match goes here
yy_find_action:
%% [10.0] code to find the action number goes here
YY_DO_BEFORE_ACTION;
%% [11.0] code for yylineno update goes here
do_action:
/* This label is used only to access EOF actions. */
%% [12.0] debug code goes here
switch ( yy_act )
{ /* beginning of action switch */
%% [13.0] actions go here
case YY_END_OF_BUFFER:
/* Amount of text matched not including the EOB char. */
int yy_amount_of_matched_text = (int) (yy_cp - YY_G(yytext_ptr)) - 1;
/* Undo the effects of YY_DO_BEFORE_ACTION. */
YY_RESTORE_YY_MORE_OFFSET
if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
/* We're scanning a new file or input source.  It's
 * possible that this happened because the user
 * just pointed yyin at a new source and called
 * yylex().  If so, then we have to assure
 * consistency between YY_CURRENT_BUFFER and our
 * globals.  Here is the right place to do so, because
 * this is the first action (other than possibly a
 * back-up) that will match for the new input source.
YY_G(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
/* Note that here we test for yy_c_buf_p "<=" to the position
 * of the first EOB in the buffer, since yy_c_buf_p will
 * already have been incremented past the NUL character
 * (since all states make transitions on EOB to the
 * end-of-buffer state).  Contrast this with the test
 * in input().
if ( YY_G(yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars)] )
{ /* This was really a NUL. */
yy_state_type yy_next_state;
YY_G(yy_c_buf_p) = YY_G(yytext_ptr) + yy_amount_of_matched_text;
yy_current_state = yy_get_previous_state( M4_YY_CALL_ONLY_ARG );
/* Okay, we're now positioned to make the NUL
 * transition.  We couldn't have
 * yy_get_previous_state() go ahead and do it
 * for us because it doesn't know how to deal
 * with the possibility of jamming (and we don't
 * want to build jamming into it because then it
 * will run more slowly).
yy_next_state = yy_try_NUL_trans( yy_current_state M4_YY_CALL_LAST_ARG);
yy_bp = YY_G(yytext_ptr) + YY_MORE_ADJ;
if ( yy_next_state )
/* Consume the NUL. */
yy_cp = ++YY_G(yy_c_buf_p);
yy_current_state = yy_next_state;
goto yy_match;
else
%% [14.0] code to do back-up for compressed tables and set up yy_cp goes here
goto yy_find_action;
else switch ( yy_get_next_buffer( M4_YY_CALL_ONLY_ARG ) )
case EOB_ACT_END_OF_FILE:
YY_G(yy_did_buffer_switch_on_eof) = 0;
if ( yywrap( M4_YY_CALL_ONLY_ARG ) )
/* Note: because we've taken care in
 * yy_get_next_buffer() to have set up
 * yytext, we can now set up
 * yy_c_buf_p so that if some total
 * hoser (like flex itself) wants to
 * call the scanner after we return the
 * YY_NULL, it'll still work - another
 * YY_NULL will get returned.
YY_G(yy_c_buf_p) = YY_G(yytext_ptr) + YY_MORE_ADJ;
yy_act = YY_STATE_EOF(YY_START);
goto do_action;
else
if ( ! YY_G(yy_did_buffer_switch_on_eof) )
YY_NEW_FILE;
break;
case EOB_ACT_CONTINUE_SCAN:
YY_G(yy_c_buf_p) =
YY_G(yytext_ptr) + yy_amount_of_matched_text;
yy_current_state = yy_get_previous_state( M4_YY_CALL_ONLY_ARG );
yy_cp = YY_G(yy_c_buf_p);
yy_bp = YY_G(yytext_ptr) + YY_MORE_ADJ;
case EOB_ACT_LAST_MATCH:
&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars)];
break;
default:
YY_FATAL_ERROR(
"fatal flex scanner internal error--no action found" );
} /* end of action switch */
} /* end of scanning one token */
} /* end of user's declarations */
} /* end of yylex */
/* The contents of this function are C++ specific, so the YY_G macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
ctor_common();
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
yyin(arg_yyin.rdbuf()),
yyout(arg_yyout.rdbuf())
void yyFlexLexer::ctor_common()
yy_c_buf_p = 0;
yy_init = 0;
yy_start = 0;
yy_flex_debug = 0;
yylineno = 1;
// this will only get updated if %option yylineno
yy_did_buffer_switch_on_eof = 0;
yy_looking_for_trail_begin = 0;
yy_more_flag = 0;
yy_more_len = 0;
yy_more_offset = yy_prev_more_offset = 0;
yy_start_stack_ptr = yy_start_stack_depth = 0;
yy_start_stack = NULL;
yy_buffer_stack = NULL;
yy_buffer_stack_top = 0;
yy_buffer_stack_max = 0;
yy_state_buf = new yy_state_type[YY_STATE_BUF_SIZE];
yy_state_buf = 0;
yyFlexLexer::~yyFlexLexer()
delete [] yy_state_buf;
yyfree( yy_start_stack M4_YY_CALL_LAST_ARG );
yy_delete_buffer( YY_CURRENT_BUFFER M4_YY_CALL_LAST_ARG);
yyfree( yy_buffer_stack M4_YY_CALL_LAST_ARG );
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
// was if( new_in )
yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  M4_YY_CALL_LAST_ARG) M4_YY_CALL_LAST_ARG);
// was if( new_out )
yyout.rdbuf(new_out.rdbuf());
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
if( ! new_in ) {
new_in = &yyin;
if ( ! new_out ) {
new_out = &yyout;
switch_streams(*new_in, *new_out);
#ifdef YY_INTERACTIVE
size_t yyFlexLexer::LexerInput( char* buf, size_t /* max_size */ )
size_t yyFlexLexer::LexerInput( char* buf, size_t max_size )
if ( yyin.eof() || yyin.fail() )
return 0;
yyin.get( buf[0] );
if ( yyin.eof() )
if ( yyin.bad() )
return -1;
return 1;
(void) yyin.read( buf, max_size );
else
return yyin.gcount();
void yyFlexLexer::LexerOutput( const char* buf, size_t size )
(void) yyout.write( buf, size );
/* yy_get_next_buffer - try to read in a new buffer
 * Returns a code representing an action:
EOB_ACT_LAST_MATCH -
EOB_ACT_CONTINUE_SCAN - continue scanning from current position
EOB_ACT_END_OF_FILE - end of file
static int yy_get_next_buffer (M4_YY_DEF_ONLY_ARG)
int yyFlexLexer::yy_get_next_buffer()
char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
char *source = YY_G(yytext_ptr);
int number_to_move, i;
int ret_val;
if ( YY_G(yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars) + 1] )
"fatal flex scanner internal error--end of buffer missed" );
if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
{ /* Don't try to fill the buffer, so this is an EOF. */
if ( YY_G(yy_c_buf_p) - YY_G(yytext_ptr) - YY_MORE_ADJ == 1 )
/* We matched a single character, the EOB, so
 * treat this as a final EOF.
return EOB_ACT_END_OF_FILE;
else
/* We matched some text prior to the EOB, first
 * process it.
return EOB_ACT_LAST_MATCH;
/* Try to read more data. */
/* First move last chars to start of buffer. */
number_to_move = (int) (YY_G(yy_c_buf_p) - YY_G(yytext_ptr) - 1);
for ( i = 0; i < number_to_move; ++i )
*(dest++) = *(source++);
if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
/* don't do the read, it's not guaranteed to return an EOF,
 * just force an EOF
YY_CURRENT_BUFFER_LVALUE->yy_n_chars = YY_G(yy_n_chars) = 0;
yy_size_t num_to_read =
YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
while ( num_to_read <= 0 )
{ /* Not enough room in the buffer - grow it. */
YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
/* just a shorter name for the current buffer */
YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;
int yy_c_buf_p_offset =
(int) (YY_G(yy_c_buf_p) - b->yy_ch_buf);
if ( b->yy_is_our_buffer )
yy_size_t new_size = b->yy_buf_size * 2;
if ( new_size <= 0 )
b->yy_buf_size += b->yy_buf_size / 8;
b->yy_buf_size *= 2;
b->yy_ch_buf = (char *)
/* Include room in for 2 EOB chars. */
yyrealloc( (void *) b->yy_ch_buf,
 (yy_size_t) (b->yy_buf_size + 2) M4_YY_CALL_LAST_ARG );
/* Can't grow it, we don't own it. */
b->yy_ch_buf = NULL;
if ( ! b->yy_ch_buf )
YY_FATAL_ERROR(
"fatal error - scanner input buffer overflow" );
YY_G(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];
num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
number_to_move - 1;
if ( num_to_read > YY_READ_BUF_SIZE )
num_to_read = YY_READ_BUF_SIZE;
/* Read in more data. */
YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
YY_G(yy_n_chars), num_to_read );
YY_CURRENT_BUFFER_LVALUE->yy_n_chars = YY_G(yy_n_chars);
if ( YY_G(yy_n_chars) == 0 )
if ( number_to_move == YY_MORE_ADJ )
ret_val = EOB_ACT_END_OF_FILE;
yyrestart( yyin  M4_YY_CALL_LAST_ARG);
ret_val = EOB_ACT_LAST_MATCH;
YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
YY_BUFFER_EOF_PENDING;
ret_val = EOB_ACT_CONTINUE_SCAN;
if ((YY_G(yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
/* Extend the array by 50%, plus the number we really need. */
yy_size_t new_size = YY_G(yy_n_chars) + number_to_move + (YY_G(yy_n_chars) >> 1);
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size M4_YY_CALL_LAST_ARG );
if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
/* "- 2" to take care of EOB's */
YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
YY_G(yy_n_chars) += number_to_move;
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
YY_G(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
return ret_val;
/* yy_get_previous_state - get the state just before the EOB char was reached */
    static yy_state_type yy_get_previous_state (M4_YY_DEF_ONLY_ARG)
    yy_state_type yyFlexLexer::yy_get_previous_state()
char *yy_cp;
%% [15.0] code to get the start state into yy_current_state goes here
for ( yy_cp = YY_G(yytext_ptr) + YY_MORE_ADJ; yy_cp < YY_G(yy_c_buf_p); ++yy_cp )
%% [16.0] code to find the next state goes here
return yy_current_state;
/* yy_try_NUL_trans - try to make a transition on the NUL character
 * synopsis
next_state = yy_try_NUL_trans( current_state );
    static yy_state_type yy_try_NUL_trans  YYFARGS1( yy_state_type, yy_current_state)
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
int yy_is_jam;
    M4_YY_DECL_GUTS_VAR(); /* This var may be unused depending upon options. */
%% [17.0] code to find the next state, and perhaps do backing up, goes here
M4_YY_NOOP_GUTS_VAR();
return yy_is_jam ? 0 : yy_current_state;
m4_ifdef( [[M4_YY_NO_UNPUT]],,
    static void yyunput YYFARGS2( int,c, char *,yy_bp)
    void yyFlexLexer::yyunput( int c, char* yy_bp)
    yy_cp = YY_G(yy_c_buf_p);
/* undo effects of setting up yytext */
*yy_cp = YY_G(yy_hold_char);
if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
{ /* need to shift things up to make room */
/* +2 for EOB chars. */
yy_size_t number_to_move = YY_G(yy_n_chars) + 2;
char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
char *source =
&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];
while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
*--dest = *--source;
yy_cp += (int) (dest - source);
yy_bp += (int) (dest - source);
YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
YY_G(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;
if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
YY_FATAL_ERROR( "flex scanner push-back overflow" );
*--yy_cp = (char) c;
%% [18.0] update yylineno here
m4_ifdef( [[M4_YY_USE_LINENO]],
    if ( c == '\n' ){
        --yylineno;
    }
YY_G(yytext_ptr) = yy_bp;
YY_G(yy_hold_char) = *yy_cp;
    static int yyinput (M4_YY_DEF_ONLY_ARG)
    static int input  (M4_YY_DEF_ONLY_ARG)
    int yyFlexLexer::yyinput()
int c;
*YY_G(yy_c_buf_p) = YY_G(yy_hold_char);
if ( *YY_G(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
/* yy_c_buf_p now points to the character we want to return.
 * If this occurs *before* the EOB characters, then it's a
 * valid NUL; if not, then we've hit the end of the buffer.
if ( YY_G(yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_G(yy_n_chars)] )
/* This was really a NUL. */
*YY_G(yy_c_buf_p) = '\0';
{ /* need more input */
yy_size_t offset = YY_G(yy_c_buf_p) - YY_G(yytext_ptr);
++YY_G(yy_c_buf_p);
switch ( yy_get_next_buffer( M4_YY_CALL_ONLY_ARG ) )
case EOB_ACT_LAST_MATCH:
/* This happens because yy_g_n_b()
 * sees that we've accumulated a
 * token and flags that we need to
 * try matching the token before
 * proceeding.  But for input(),
 * there's no matching to consider.
 * So convert the EOB_ACT_LAST_MATCH
 * to EOB_ACT_END_OF_FILE.
/* Reset buffer status. */
yyrestart( yyin M4_YY_CALL_LAST_ARG);
/*FALLTHROUGH*/
case EOB_ACT_END_OF_FILE:
if ( yywrap( M4_YY_CALL_ONLY_ARG ) )
return 0;
return yyinput(M4_YY_CALL_ONLY_ARG);
return input(M4_YY_CALL_ONLY_ARG);
case EOB_ACT_CONTINUE_SCAN:
YY_G(yy_c_buf_p) = YY_G(yytext_ptr) + offset;
break;
c = *(unsigned char *) YY_G(yy_c_buf_p);
/* cast for 8-bit char's */
*YY_G(yy_c_buf_p) = '\0';
/* preserve yytext */
YY_G(yy_hold_char) = *++YY_G(yy_c_buf_p);
%% [19.0] update BOL and yylineno
return c;
#endif
/* ifndef YY_NO_INPUT */
/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * M4_YY_DOC_PARAM
 * @note This function does not reset the start condition to @c INITIAL .
    void yyrestart  YYFARGS1( FILE *,input_file)
    void yyFlexLexer::yyrestart( std::istream& input_file )
if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (M4_YY_CALL_ONLY_ARG);
YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE M4_YY_CALL_LAST_ARG);
yy_init_buffer( YY_CURRENT_BUFFER, input_file M4_YY_CALL_LAST_ARG);
yy_load_buffer_state( M4_YY_CALL_ONLY_ARG );
/** Delegate to the new version that takes an istream reference.
void yyFlexLexer::yyrestart( std::istream* input_file )
if( ! input_file ) {
input_file = &yyin;
yyrestart( *input_file );
/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
    void yy_switch_to_buffer  YYFARGS1( YY_BUFFER_STATE ,new_buffer)
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* TODO. We should be able to replace this entire function body
 * with
yypop_buffer_state();
yypush_buffer_state(new_buffer);
yyensure_buffer_stack (M4_YY_CALL_ONLY_ARG);
if ( YY_CURRENT_BUFFER == new_buffer )
return;
if ( YY_CURRENT_BUFFER )
/* Flush out information for old buffer. */
*YY_G(yy_c_buf_p) = YY_G(yy_hold_char);
YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = YY_G(yy_c_buf_p);
YY_CURRENT_BUFFER_LVALUE = new_buffer;
/* We don't actually know whether we did this switch during
 * EOF (yywrap()) processing, but the only time this flag
 * is looked at is after yywrap() is called, so it's safe
 * to go ahead and always set it.
YY_G(yy_did_buffer_switch_on_eof) = 1;
static void yy_load_buffer_state  (M4_YY_DEF_ONLY_ARG)
    void yyFlexLexer::yy_load_buffer_state()
YY_G(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
YY_G(yytext_ptr) = YY_G(yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
YY_G(yy_hold_char) = *YY_G(yy_c_buf_p);
/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @return the allocated buffer state.
    YY_BUFFER_STATE yy_create_buffer  YYFARGS2( FILE *,file, int ,size)
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
YY_BUFFER_STATE b;
    m4_dnl M4_YY_DECL_GUTS_VAR();
b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) M4_YY_CALL_LAST_ARG );
if ( ! b )
YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
b->yy_buf_size = size;
/* yy_ch_buf has to be 2 characters longer than the size given because
 * we need to put in 2 end-of-buffer characters.
b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) M4_YY_CALL_LAST_ARG );
if ( ! b->yy_ch_buf )
b->yy_is_our_buffer = 1;
yy_init_buffer( b, file M4_YY_CALL_LAST_ARG);
return b;
/** Delegate creation of buffers to the new version that takes an istream reference.
YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
return yy_create_buffer( *file, size );
/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
    void yy_delete_buffer YYFARGS1( YY_BUFFER_STATE ,b)
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
if ( b->yy_is_our_buffer )
yyfree( (void *) b->yy_ch_buf M4_YY_CALL_LAST_ARG );
yyfree( (void *) b M4_YY_CALL_LAST_ARG );
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
    static void yy_init_buffer  YYFARGS2( YY_BUFFER_STATE ,b, FILE *,file)
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
int oerrno = errno;
yy_flush_buffer( b M4_YY_CALL_LAST_ARG);
b->yy_input_file = file;
b->yy_input_file = file.rdbuf();
b->yy_fill_buffer = 1;
    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
m4_ifdef( [[M4_YY_ALWAYS_INTERACTIVE]],
b->yy_is_interactive = 1;
    m4_ifdef( [[M4_YY_NEVER_INTERACTIVE]],
        b->yy_is_interactive = 0;
        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
b->yy_is_interactive = 0;
errno = oerrno;
/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
    void yy_flush_buffer YYFARGS1( YY_BUFFER_STATE ,b)
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
b->yy_n_chars = 0;
/* We always need two end-of-buffer characters.  The first causes
 * a transition to the end-of-buffer state.  The second causes
 * a jam in that state.
b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
b->yy_buf_pos = &b->yy_ch_buf[0];
b->yy_at_bol = 1;
b->yy_buffer_status = YY_BUFFER_NEW;
if ( b == YY_CURRENT_BUFFER )
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  M4_YY_DOC_PARAM
void yypush_buffer_state YYFARGS1(YY_BUFFER_STATE,new_buffer)
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
if (new_buffer == NULL)
yyensure_buffer_stack(M4_YY_CALL_ONLY_ARG);
/* This block is copied from yy_switch_to_buffer. */
/* Only push if top exists. Otherwise, replace top. */
if (YY_CURRENT_BUFFER)
YY_G(yy_buffer_stack_top)++;
/* copied from yy_switch_to_buffer. */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
void yypop_buffer_state (M4_YY_DEF_ONLY_ARG)
void yyFlexLexer::yypop_buffer_state (void)
if (!YY_CURRENT_BUFFER)
yy_delete_buffer(YY_CURRENT_BUFFER M4_YY_CALL_LAST_ARG);
YY_CURRENT_BUFFER_LVALUE = NULL;
if (YY_G(yy_buffer_stack_top) > 0)
--YY_G(yy_buffer_stack_top);
if (YY_CURRENT_BUFFER) {
YY_G(yy_did_buffer_switch_on_eof) = 1;
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
static void yyensure_buffer_stack (M4_YY_DEF_ONLY_ARG)
void yyFlexLexer::yyensure_buffer_stack(void)
yy_size_t num_to_alloc;
if (!YY_G(yy_buffer_stack)) {
/* First allocation is just for 2 elements, since we don't know if this
 * scanner will even need a stack. We use 2 instead of 1 to avoid an
 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
YY_G(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
(num_to_alloc * sizeof(struct yy_buffer_state*)
M4_YY_CALL_LAST_ARG);
if ( ! YY_G(yy_buffer_stack) )
YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
memset(YY_G(yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
YY_G(yy_buffer_stack_max) = num_to_alloc;
YY_G(yy_buffer_stack_top) = 0;
if (YY_G(yy_buffer_stack_top) >= (YY_G(yy_buffer_stack_max)) - 1){
/* Increase the buffer to prepare for a possible push. */
yy_size_t grow_size = 8 /* arbitrary grow size */;
num_to_alloc = YY_G(yy_buffer_stack_max) + grow_size;
YY_G(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
(YY_G(yy_buffer_stack),
num_to_alloc * sizeof(struct yy_buffer_state*)
/* zero only the new slots.*/
memset(YY_G(yy_buffer_stack) + YY_G(yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
m4_ifdef( [[M4_YY_NO_SCAN_BUFFER]],,
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @return the newly allocated buffer state object.
YY_BUFFER_STATE yy_scan_buffer  YYFARGS2( char *,base, yy_size_t ,size)
if ( size < 2 ||
     base[size-2] != YY_END_OF_BUFFER_CHAR ||
     base[size-1] != YY_END_OF_BUFFER_CHAR )
/* They forgot to leave room for the EOB's. */
return NULL;
YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
b->yy_buf_size = (int) (size - 2);
/* "- 2" to take care of EOB's */
b->yy_buf_pos = b->yy_ch_buf = base;
b->yy_is_our_buffer = 0;
b->yy_input_file = NULL;
b->yy_n_chars = b->yy_buf_size;
b->yy_fill_buffer = 0;
yy_switch_to_buffer( b M4_YY_CALL_LAST_ARG );
m4_ifdef( [[M4_YY_NO_SCAN_STRING]],,
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
YY_BUFFER_STATE yy_scan_string YYFARGS1( const char *, yystr)
return yy_scan_bytes( yystr, (int) strlen(yystr) M4_YY_CALL_LAST_ARG);
m4_ifdef( [[M4_YY_NO_SCAN_BYTES]],,
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
YY_BUFFER_STATE yy_scan_bytes  YYFARGS2( const char *,yybytes, yy_size_t ,_yybytes_len)
char *buf;
yy_size_t n;
yy_size_t i;
/* Get memory for full buffer, including space for trailing EOB's. */
n = (yy_size_t) (_yybytes_len + 2);
buf = (char *) yyalloc( n M4_YY_CALL_LAST_ARG );
if ( ! buf )
YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
for ( i = 0; i < _yybytes_len; ++i )
buf[i] = yybytes[i];
buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;
b = yy_scan_buffer( buf, n M4_YY_CALL_LAST_ARG);
YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
/* It's okay to grow etc. this buffer, and we should throw it
 * away when we're done.
m4_ifdef( [[M4_YY_NO_PUSH_STATE]],,
    static void yy_push_state YYFARGS1( int ,_new_state)
    void yyFlexLexer::yy_push_state( int _new_state )
if ( YY_G(yy_start_stack_ptr) >= YY_G(yy_start_stack_depth) )
yy_size_t new_size;
YY_G(yy_start_stack_depth) += YY_START_STACK_INCR;
new_size = (yy_size_t) YY_G(yy_start_stack_depth) * sizeof( int );
if ( ! YY_G(yy_start_stack) )
YY_G(yy_start_stack) = (int *) yyalloc( new_size M4_YY_CALL_LAST_ARG );
YY_G(yy_start_stack) = (int *) yyrealloc(
(void *) YY_G(yy_start_stack), new_size M4_YY_CALL_LAST_ARG );
YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr)++] = YY_START;
BEGIN(_new_state);
m4_ifdef( [[M4_YY_NO_POP_STATE]],,
    static void yy_pop_state  (M4_YY_DEF_ONLY_ARG)
    void yyFlexLexer::yy_pop_state()
if ( --YY_G(yy_start_stack_ptr) < 0 )
YY_FATAL_ERROR( "start-condition stack underflow" );
BEGIN(YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr)]);
m4_ifdef( [[M4_YY_NO_TOP_STATE]],,
    static int yy_top_state  (M4_YY_DEF_ONLY_ARG)
    int yyFlexLexer::yy_top_state()
return YY_G(yy_start_stack)[YY_G(yy_start_stack_ptr) - 1];
#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
static void yynoreturn yy_fatal_error YYFARGS1(const char*, msg)
M4_YY_DECL_GUTS_VAR();
fprintf( stderr, "%s\n", msg );
exit( YY_EXIT_FAILURE );
void yyFlexLexer::LexerError( const char* msg )
std::cerr << msg << std::endl;
/* Redefine yyless() so it works in section 3 code. */
#undef yyless
        yy_size_t yyless_macro_arg = (n); \
yytext[yyleng] = YY_G(yy_hold_char); \
YY_G(yy_c_buf_p) = yytext + yyless_macro_arg; \
YY_G(yy_hold_char) = *YY_G(yy_c_buf_p); \
*YY_G(yy_c_buf_p) = '\0'; \
yyleng = yyless_macro_arg; \
/* Accessor  methods (get/set functions) to struct members. */
/** Get the user-defined data for this scanner.
YY_EXTRA_TYPE yyget_extra  (M4_YY_DEF_ONLY_ARG)
    return yyextra;
/** Get the current line number.
int yyget_lineno  (M4_YY_DEF_ONLY_ARG)
        if (! YY_CURRENT_BUFFER)
            return 0;
    return yylineno;
/** Get the current column number.
int yyget_column  (M4_YY_DEF_ONLY_ARG)
    return yycolumn;
/** Get the input stream.
FILE *yyget_in  (M4_YY_DEF_ONLY_ARG)
    return yyin;
/** Get the output stream.
FILE *yyget_out  (M4_YY_DEF_ONLY_ARG)
    return yyout;
/** Get the length of the current token.
yy_size_t yyget_leng  (M4_YY_DEF_ONLY_ARG)
    return yyleng;
/** Get the current token.
char *yyget_text  (M4_YY_DEF_ONLY_ARG)
    return yytext;
/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
void yyset_extra YYFARGS1( YY_EXTRA_TYPE ,user_defined)
    yyextra = user_defined ;
/** Set the current line number.
 * @param _line_number line number
void yyset_lineno YYFARGS1( int ,_line_number)
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    yylineno = _line_number;
/** Set the current column.
 * @param _column_no column number
void yyset_column YYFARGS1( int , _column_no)
        /* column is only valid if an input buffer exists. */
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    yycolumn = _column_no;
/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @see yy_switch_to_buffer
void yyset_in YYFARGS1( FILE * ,_in_str)
    yyin = _in_str ;
void yyset_out YYFARGS1( FILE * ,_out_str)
    yyout = _out_str ;
int yyget_debug  (M4_YY_DEF_ONLY_ARG)
    return yy_flex_debug;
void yyset_debug YYFARGS1( int ,_bdebug)
    yy_flex_debug = _bdebug ;
/* Accessor methods for yylval and yylloc */
YYSTYPE * yyget_lval  (M4_YY_DEF_ONLY_ARG)
    return yylval;
m4_ifdef( [[M4_YY_NO_SET_LVAL]],,
void yyset_lval YYFARGS1( YYSTYPE * ,yylval_param)
YYLTYPE *yyget_lloc  (M4_YY_DEF_ONLY_ARG)
    return yylloc;
void yyset_lloc YYFARGS1( YYLTYPE * ,yylloc_param)
/* User-visible API */
/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
int yylex_init(yyscan_t* ptr_yy_globals)
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    return yy_init_globals ( *ptr_yy_globals );
/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
    struct yyguts_t dummy_yyguts;
    yyset_extra (yy_user_defined, &dummy_yyguts);
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    yyset_extra (yy_user_defined, *ptr_yy_globals);
%endif if-c-only
static int yy_init_globals (M4_YY_DEF_ONLY_ARG)
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
    m4_ifdef( [[M4_YY_NOT_REENTRANT]],
    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    YY_G(yy_buffer_stack) = NULL;
    YY_G(yy_buffer_stack_top) = 0;
    YY_G(yy_buffer_stack_max) = 0;
    YY_G(yy_c_buf_p) = NULL;
    YY_G(yy_init) = 0;
    YY_G(yy_start) = 0;
m4_ifdef( [[M4_YY_HAS_START_STACK_VARS]],
    YY_G(yy_start_stack_ptr) = 0;
    YY_G(yy_start_stack_depth) = 0;
    YY_G(yy_start_stack) =  NULL;
    YY_G(yy_state_buf) = 0;
    YY_G(yy_state_ptr) = 0;
    YY_G(yy_full_match) = 0;
    YY_G(yy_lp) = 0;
    YY_G(yytext_ptr) = 0;
    YY_G(yy_more_offset) = 0;
    YY_G(yy_prev_more_offset) = 0;
/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
    yyin = NULL;
    yyout = NULL;
    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
    return 0;
%if-c-only SNIP! this currently causes conflicts with the c++ scanner
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (M4_YY_DEF_ONLY_ARG)
    /* Pop the buffer stack, destroying each element. */
while(YY_CURRENT_BUFFER){
yy_delete_buffer( YY_CURRENT_BUFFER M4_YY_CALL_LAST_ARG );
YY_CURRENT_BUFFER_LVALUE = NULL;
yypop_buffer_state(M4_YY_CALL_ONLY_ARG);
/* Destroy the stack itself. */
yyfree(YY_G(yy_buffer_stack) M4_YY_CALL_LAST_ARG);
YY_G(yy_buffer_stack) = NULL;
    /* Destroy the start condition stack. */
        yyfree( YY_G(yy_start_stack) M4_YY_CALL_LAST_ARG );
        YY_G(yy_start_stack) = NULL;
    yyfree ( YY_G(yy_state_buf) M4_YY_CALL_LAST_ARG);
    YY_G(yy_state_buf)  = NULL;
    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( M4_YY_CALL_ONLY_ARG);
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner M4_YY_CALL_LAST_ARG );
    yyscanner = NULL;
 * Internal utility routines.
static void yy_flex_strncpy YYFARGS3( char*,s1, const char *,s2, int,n)
int i;
for ( i = 0; i < n; ++i )
s1[i] = s2[i];
static int yy_flex_strlen YYFARGS1( const char *,s)
int n;
for ( n = 0; s[n]; ++n )
return n;
m4_ifdef( [[M4_YY_NO_FLEX_ALLOC]],,
void *yyalloc YYFARGS1( yy_size_t ,size)
return malloc(size);
m4_ifdef( [[M4_YY_NO_FLEX_REALLOC]],,
void *yyrealloc  YYFARGS2( void *,ptr, yy_size_t ,size)
/* The cast to (char *) in the following accommodates both
 * implementations that use char* generic pointers, and those
 * that use void* generic pointers.  It works with the latter
 * because both ANSI C and C++ allow castless assignment from
 * any pointer type to void*, and deal with argument conversions
 * as though doing an assignment.
return realloc(ptr, size);
m4_ifdef( [[M4_YY_NO_FLEX_FREE]],,
void yyfree YYFARGS1( void *,ptr)
free( (char *) ptr );
/* see yyrealloc() for (char *) cast */
%if-tables-serialization definitions
dnl   tables_shared.c - tables serialization code
dnl 
dnl   Copyright (c) 1990 The Regents of the University of California.
dnl   All rights reserved.
dnl   This code is derived from software contributed to Berkeley by
dnl   Vern Paxson.
dnl   The United States Government has rights in this work pursuant
dnl   to contract no. DE-AC03-76SF00098 between the United States
dnl   Department of Energy and the University of California.
dnl   This file is part of flex.
dnl   Redistribution and use in source and binary forms, with or without
dnl   modification, are permitted provided that the following conditions
dnl   are met:
dnl   1. Redistributions of source code must retain the above copyright
dnl      notice, this list of conditions and the following disclaimer.
dnl   2. Redistributions in binary form must reproduce the above copyright
dnl      notice, this list of conditions and the following disclaimer in the
dnl      documentation and/or other materials provided with the distribution.
dnl   Neither the name of the University nor the names of its contributors
dnl   may be used to endorse or promote products derived from this software
dnl   without specific prior written permission.
dnl   THIS SOFTWARE IS PROVIDED `AS IS' AND WITHOUT ANY EXPRESS OR
dnl   IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
dnl   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
dnl   PURPOSE.
/* This file is meant to be included in both the skeleton and the actual
 * flex code (hence the name "_shared"). 
#include "flexdef.h"
#include "tables.h"
/** Get the number of integers in this table. This is NOT the
 *  same thing as the number of elements.
 *  @param tbl the table
 *  @return the number of integers in the table
yyskel_static flex_int32_t yytbl_calc_total_len (const struct yytbl_data *tbl)
flex_uint32_t n;
/* total number of ints */
n = tbl->td_lolen;
if (tbl->td_hilen > 0)
n *= tbl->td_hilen;
if (tbl->td_id == YYTD_ID_TRANSITION)
n *= 2;
return (flex_int32_t) n;
static int yytbl_read8 (void *v, struct yytbl_reader * rd)
    errno = 0;
    if (fread (v, sizeof (flex_uint8_t), 1, rd->fp) != 1){
        errno = EIO;
        return -1;
    rd->bread += (flex_uint32_t) sizeof(flex_uint8_t);
static int yytbl_read16 (void *v, struct yytbl_reader * rd)
    if (fread (v, sizeof (flex_uint16_t), 1, rd->fp) != 1){
    *((flex_uint16_t *) v) = ntohs (*((flex_uint16_t *) v));
    rd->bread += (flex_uint32_t) sizeof(flex_uint16_t);
static int yytbl_read32 (void *v, struct yytbl_reader * rd)
    if (fread (v, sizeof (flex_uint32_t), 1, rd->fp) != 1){
    *((flex_uint32_t *) v) = ntohl (*((flex_uint32_t *) v));
    rd->bread += (flex_uint32_t) sizeof(flex_uint32_t);
/** Read the header */
static int yytbl_hdr_read YYFARGS2(struct yytbl_hdr *, th, struct yytbl_reader *, rd)
    size_t  bytes;
    memset (th, 0, sizeof (struct yytbl_hdr));
    if (yytbl_read32 (&(th->th_magic), rd) != 0)
    if (th->th_magic != YYTBL_MAGIC){
        YY_FATAL_ERROR( "bad magic number" );   /* TODO: not fatal. */
    if (yytbl_read32 (&(th->th_hsize), rd) != 0
        || yytbl_read32 (&(th->th_ssize), rd) != 0
        || yytbl_read16 (&(th->th_flags), rd) != 0)
    /* Sanity check on header size. Greater than 1k suggests some funny business. */
    if (th->th_hsize < 16 || th->th_hsize > 1024){
        YY_FATAL_ERROR( "insane header size detected" );   /* TODO: not fatal. */
    /* Allocate enough space for the version and name fields */
    bytes = th->th_hsize - 14;
    th->th_version = (char *) yyalloc (bytes M4_YY_CALL_LAST_ARG);
    if ( ! th->th_version )
        YY_FATAL_ERROR( "out of dynamic memory in yytbl_hdr_read()" );
    /* we read it all into th_version, and point th_name into that data */
    if (fread (th->th_version, 1, bytes, rd->fp) != bytes){
        yyfree(th->th_version M4_YY_CALL_LAST_ARG);
        th->th_version = NULL;
    else
        rd->bread += (flex_uint32_t) bytes;
    th->th_name = th->th_version + strlen (th->th_version) + 1;
/** lookup id in the dmap list.
 *  @param dmap pointer to first element in list
 *  @return NULL if not found.
static struct yytbl_dmap *yytbl_dmap_lookup YYFARGS2(struct yytbl_dmap *, dmap,
                                                      int, id)
    while (dmap->dm_id)
        if ((int)(dmap->dm_id) == id)
            return dmap;
        else
            dmap++;
    return NULL;
/** Read a table while mapping its contents to the local array.
 *  @param dmap used to performing mapping
 *  @return 0 on success
static int yytbl_data_load YYFARGS2(struct yytbl_dmap *, dmap, struct yytbl_reader*, rd)
    struct yytbl_data td;
    struct yytbl_dmap *transdmap=0;
    int     len, i, rv, inner_loop_count;
    void   *p=0;
    memset (&td, 0, sizeof (struct yytbl_data));
    if (yytbl_read16 (&td.td_id, rd) != 0
        || yytbl_read16 (&td.td_flags, rd) != 0
        || yytbl_read32 (&td.td_hilen, rd) != 0
        || yytbl_read32 (&td.td_lolen, rd) != 0)
    /* Lookup the map for the transition table so we have it in case we need it
     * inside the loop below. This scanner might not even have a transition
     * table, which is ok.
    transdmap = yytbl_dmap_lookup (dmap, YYTD_ID_TRANSITION M4_YY_CALL_LAST_ARG);
    if ((dmap = yytbl_dmap_lookup (dmap, td.td_id M4_YY_CALL_LAST_ARG)) == NULL){
        YY_FATAL_ERROR( "table id not found in map." );   /* TODO: not fatal. */
    /* Allocate space for table.
     * The --full yy_transition table is a special case, since we
     * need the dmap.dm_sz entry to tell us the sizeof the individual
     * struct members.
    if ((td.td_flags & YYTD_STRUCT))
        bytes = sizeof(struct yy_trans_info) * td.td_lolen * (td.td_hilen ? td.td_hilen : 1);
        bytes = td.td_lolen * (td.td_hilen ? td.td_hilen : 1) * dmap->dm_sz;
    if(M4_YY_TABLES_VERIFY)
        /* We point to the array itself */
        p = dmap->dm_arr;
        /* We point to the address of a pointer. */
        *dmap->dm_arr = p = (void *) yyalloc (bytes M4_YY_CALL_LAST_ARG);
        if ( ! p )
            YY_FATAL_ERROR( "out of dynamic memory in yytbl_data_load()" );
    /* If it's a struct, we read 2 integers to get one element */
    if ((td.td_flags & YYTD_STRUCT) != 0)
        inner_loop_count = 2;
        inner_loop_count = 1;
    /* read and map each element.
     * This loop iterates once for each element of the td_data array.
     * Notice that we increment 'i' in the inner loop.
    len = yytbl_calc_total_len (&td);
    for (i = 0; i < len; ){
        int    j;
        /* This loop really executes exactly 1 or 2 times.
         * The second time is to handle the second member of the
         * YYTD_STRUCT for the yy_transition array.
        for (j = 0; j < inner_loop_count; j++, i++) {
            flex_int32_t t32;
            /* read into t32 no matter what the real size is. */
            {
            flex_int16_t t16;
            flex_int8_t  t8;
            switch (YYTDFLAGS2BYTES (td.td_flags)) {
            case sizeof (flex_int32_t):
                rv = yytbl_read32 (&t32, rd);
                break;
            case sizeof (flex_int16_t):
                rv = yytbl_read16 (&t16, rd);
                t32 = t16;
            case sizeof (flex_int8_t):
                rv = yytbl_read8 (&t8, rd);
                t32 = t8;
            default:
                YY_FATAL_ERROR( "invalid td_flags" );   /* TODO: not fatal. */
                return -1;
            }
            if (rv != 0)
            /* copy into the deserialized array... */
            if ((td.td_flags & YYTD_STRUCT)) {
                /* t32 is the j'th member of a two-element struct. */
                void   *v;
                v = j == 0 ? &(((struct yy_trans_info *) p)->yy_verify)
                    : &(((struct yy_trans_info *) p)->yy_nxt);
                switch (dmap->dm_sz) {
                case sizeof (flex_int32_t):
                    if (M4_YY_TABLES_VERIFY){
                        if( ((flex_int32_t *) v)[0] != (flex_int32_t) t32)
                           YY_FATAL_ERROR( "tables verification failed at YYTD_STRUCT flex_int32_t" );
                    }else
                        ((flex_int32_t *) v)[0] = (flex_int32_t) t32;
                    break;
                case sizeof (flex_int16_t):
                    if (M4_YY_TABLES_VERIFY ){
                        if(((flex_int16_t *) v)[0] != (flex_int16_t) t32)
                        YY_FATAL_ERROR( "tables verification failed at YYTD_STRUCT flex_int16_t" );
                        ((flex_int16_t *) v)[0] = (flex_int16_t) t32;
                case sizeof(flex_int8_t):
                         if( ((flex_int8_t *) v)[0] != (flex_int8_t) t32)
                        YY_FATAL_ERROR( "tables verification failed at YYTD_STRUCT flex_int8_t" );
                        ((flex_int8_t *) v)[0] = (flex_int8_t) t32;
                default:
                    YY_FATAL_ERROR( "invalid dmap->dm_sz for struct" );   /* TODO: not fatal. */
                    return -1;
                }
                /* if we're done with j, increment p */
                if (j == 1)
                    p = (struct yy_trans_info *) p + 1;
            else if ((td.td_flags & YYTD_PTRANS)) {
                /* t32 is an index into the transition array. */
                struct yy_trans_info *v;
                if (!transdmap){
                    YY_FATAL_ERROR( "transition table not found" );   /* TODO: not fatal. */
                if( M4_YY_TABLES_VERIFY)
                    v = &(((struct yy_trans_info *) (transdmap->dm_arr))[t32]);
                else
                    v = &((*((struct yy_trans_info **) (transdmap->dm_arr)))[t32]);
                if(M4_YY_TABLES_VERIFY ){
                    if( ((struct yy_trans_info **) p)[0] != v)
                        YY_FATAL_ERROR( "tables verification failed at YYTD_PTRANS" );
                }else
                    ((struct yy_trans_info **) p)[0] = v;
                /* increment p */
                p = (struct yy_trans_info **) p + 1;
            else {
                /* t32 is a plain int. copy data, then incrememnt p. */
                    if(M4_YY_TABLES_VERIFY ){
                        if( ((flex_int32_t *) p)[0] != (flex_int32_t) t32)
                        YY_FATAL_ERROR( "tables verification failed at flex_int32_t" );
                        ((flex_int32_t *) p)[0] = (flex_int32_t) t32;
                    p = ((flex_int32_t *) p) + 1;
                        if( ((flex_int16_t *) p)[0] != (flex_int16_t) t32)
                        YY_FATAL_ERROR( "tables verification failed at flex_int16_t" );
                        ((flex_int16_t *) p)[0] = (flex_int16_t) t32;
                    p = ((flex_int16_t *) p) + 1;
                case sizeof (flex_int8_t):
                        if( ((flex_int8_t *) p)[0] != (flex_int8_t) t32)
                        YY_FATAL_ERROR( "tables verification failed at flex_int8_t" );
                        ((flex_int8_t *) p)[0] = (flex_int8_t) t32;
                    p = ((flex_int8_t *) p) + 1;
                    YY_FATAL_ERROR( "invalid dmap->dm_sz for plain int" );   /* TODO: not fatal. */
        }
    /* Now eat padding. */
        int pad;
        pad = yypad64(rd->bread);
        while(--pad >= 0){
            flex_int8_t t8;
            if(yytbl_read8(&t8,rd) != 0)
%define-yytables   The name for this specific scanner's tables.
/* Find the key and load the DFA tables from the given stream.  */
static int yytbl_fload YYFARGS2(FILE *, fp, const char *, key)
    int rv=0;
    struct yytbl_hdr th;
    struct yytbl_reader rd;
    rd.fp = fp;
    th.th_version = NULL;
    /* Keep trying until we find the right set of tables or end of file. */
    while (!feof(rd.fp)) {
        rd.bread = 0;
        if (yytbl_hdr_read (&th, &rd M4_YY_CALL_LAST_ARG) != 0){
            rv = -1;
            goto return_rv;
        /* A NULL key means choose the first set of tables. */
        if (key == NULL)
            break;
        if (strcmp(th.th_name,key) != 0){
            /* Skip ahead to next set */
            fseek(rd.fp, th.th_ssize - th.th_hsize, SEEK_CUR);
            yyfree(th.th_version M4_YY_CALL_LAST_ARG);
            th.th_version = NULL;
    while (rd.bread < th.th_ssize){
        /* Load the data tables */
        if(yytbl_data_load (yydmap,&rd M4_YY_CALL_LAST_ARG) != 0){
return_rv:
    if(th.th_version){
        yyfree(th.th_version M4_YY_CALL_LAST_ARG);
        th.th_version = NULL;
    return rv;
/** Load the DFA tables for this scanner from the given stream.  */
int yytables_fload YYFARGS1(FILE *, fp)
    if( yytbl_fload(fp, YYTABLES_NAME M4_YY_CALL_LAST_ARG) != 0)
/** Destroy the loaded tables, freeing memory, etc.. */
int yytables_destroy (M4_YY_DEF_ONLY_ARG)
    struct yytbl_dmap *dmap=0;
    if(!M4_YY_TABLES_VERIFY){
        /* Walk the dmap, freeing the pointers */
        for(dmap=yydmap; dmap->dm_id; dmap++) {
            void * v;
            v = dmap->dm_arr;
            if(v && *(char**)v){
                    yyfree(*(char**)v M4_YY_CALL_LAST_ARG);
                    *(char**)v = NULL;
/* end table serialization code definitions */
m4_ifdef([[M4_YY_MAIN]], [[
int main (void);
int main ()
    yyscan_t lexer;
    yylex_init(&lexer);
    yylex( lexer );
    yylex_destroy( lexer);
yylex();
m4_ifdef( [[M4_YY_IN_HEADER]],
#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef YY_DO_BEFORE_ACTION
#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
[[#ifndef ]]M4_YY_PREFIX[[_create_buffer_ALREADY_DEFINED
#undef yy_create_buffer
[[#ifndef ]]M4_YY_PREFIX[[_delete_buffer_ALREADY_DEFINED
#undef yy_delete_buffer
[[#ifndef ]]M4_YY_PREFIX[[_scan_buffer_ALREADY_DEFINED
#undef yy_scan_buffer
[[#ifndef ]]M4_YY_PREFIX[[_scan_string_ALREADY_DEFINED
#undef yy_scan_string
[[#ifndef ]]M4_YY_PREFIX[[_scan_bytes_ALREADY_DEFINED
#undef yy_scan_bytes
[[#ifndef ]]M4_YY_PREFIX[[_init_buffer_ALREADY_DEFINED
#undef yy_init_buffer
[[#ifndef ]]M4_YY_PREFIX[[_flush_buffer_ALREADY_DEFINED
#undef yy_flush_buffer
[[#ifndef ]]M4_YY_PREFIX[[_load_buffer_state_ALREADY_DEFINED
#undef yy_load_buffer_state
[[#ifndef ]]M4_YY_PREFIX[[_switch_to_buffer_ALREADY_DEFINED
#undef yy_switch_to_buffer
[[#ifndef ]]M4_YY_PREFIX[[push_buffer_state_ALREADY_DEFINED
#undef yypush_buffer_state
[[#ifndef ]]M4_YY_PREFIX[[pop_buffer_state_ALREADY_DEFINED
#undef yypop_buffer_state
[[#ifndef ]]M4_YY_PREFIX[[ensure_buffer_stack_ALREADY_DEFINED
#undef yyensure_buffer_stack
[[#ifndef ]]M4_YY_PREFIX[[lex_ALREADY_DEFINED
#undef yylex
[[#ifndef ]]M4_YY_PREFIX[[restart_ALREADY_DEFINED
#undef yyrestart
[[#ifndef ]]M4_YY_PREFIX[[lex_init_ALREADY_DEFINED
#undef yylex_init
[[#ifndef ]]M4_YY_PREFIX[[lex_init_extra_ALREADY_DEFINED
#undef yylex_init_extra
[[#ifndef ]]M4_YY_PREFIX[[lex_destroy_ALREADY_DEFINED
#undef yylex_destroy
[[#ifndef ]]M4_YY_PREFIX[[get_debug_ALREADY_DEFINED
#undef yyget_debug
[[#ifndef ]]M4_YY_PREFIX[[set_debug_ALREADY_DEFINED
#undef yyset_debug
[[#ifndef ]]M4_YY_PREFIX[[get_extra_ALREADY_DEFINED
#undef yyget_extra
[[#ifndef ]]M4_YY_PREFIX[[set_extra_ALREADY_DEFINED
#undef yyset_extra
[[#ifndef ]]M4_YY_PREFIX[[get_in_ALREADY_DEFINED
#undef yyget_in
[[#ifndef ]]M4_YY_PREFIX[[set_in_ALREADY_DEFINED
#undef yyset_in
[[#ifndef ]]M4_YY_PREFIX[[get_out_ALREADY_DEFINED
#undef yyget_out
[[#ifndef ]]M4_YY_PREFIX[[set_out_ALREADY_DEFINED
#undef yyset_out
[[#ifndef ]]M4_YY_PREFIX[[get_leng_ALREADY_DEFINED
#undef yyget_leng
[[#ifndef ]]M4_YY_PREFIX[[get_text_ALREADY_DEFINED
#undef yyget_text
[[#ifndef ]]M4_YY_PREFIX[[get_lineno_ALREADY_DEFINED
#undef yyget_lineno
[[#ifndef ]]M4_YY_PREFIX[[set_lineno_ALREADY_DEFINED
#undef yyset_lineno
[[#ifndef ]]M4_YY_PREFIX[[get_column_ALREADY_DEFINED
#undef yyget_column
[[#ifndef ]]M4_YY_PREFIX[[set_column_ALREADY_DEFINED
#undef yyset_column
[[#ifndef ]]M4_YY_PREFIX[[wrap_ALREADY_DEFINED
#undef yywrap
[[#ifndef ]]M4_YY_PREFIX[[get_lval_ALREADY_DEFINED
#undef yyget_lval
[[#ifndef ]]M4_YY_PREFIX[[set_lval_ALREADY_DEFINED
#undef yyset_lval
[[#ifndef ]]M4_YY_PREFIX[[get_lloc_ALREADY_DEFINED
#undef yyget_lloc
[[#ifndef ]]M4_YY_PREFIX[[set_lloc_ALREADY_DEFINED
#undef yyset_lloc
[[#ifndef ]]M4_YY_PREFIX[[alloc_ALREADY_DEFINED
#undef yyalloc
[[#ifndef ]]M4_YY_PREFIX[[realloc_ALREADY_DEFINED
#undef yyrealloc
[[#ifndef ]]M4_YY_PREFIX[[free_ALREADY_DEFINED
#undef yyfree
[[#ifndef ]]M4_YY_PREFIX[[text_ALREADY_DEFINED
#undef yytext
[[#ifndef ]]M4_YY_PREFIX[[leng_ALREADY_DEFINED
#undef yyleng
[[#ifndef ]]M4_YY_PREFIX[[in_ALREADY_DEFINED
#undef yyin
[[#ifndef ]]M4_YY_PREFIX[[out_ALREADY_DEFINED
#undef yyout
[[#ifndef ]]M4_YY_PREFIX[[_flex_debug_ALREADY_DEFINED
#undef yy_flex_debug
[[#ifndef ]]M4_YY_PREFIX[[lineno_ALREADY_DEFINED
#undef yylineno
[[#ifndef ]]M4_YY_PREFIX[[tables_fload_ALREADY_DEFINED
#undef yytables_fload
[[#ifndef ]]M4_YY_PREFIX[[tables_destroy_ALREADY_DEFINED
#undef yytables_destroy
[[#ifndef ]]M4_YY_PREFIX[[TABLES_NAME_ALREADY_DEFINED
#undef yyTABLES_NAME
name defined twice
start condition %s declared twice
symbol table memory allocation failed
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/flex/src/tables.c
th_magic|th_hsize write32 failed
fgetpos failed
th_ssize|th_flags write failed
th_version writen failed
th_name writen failed
pad64 failed
invalid td_flags detected
error while writing tables
insanity detected
get|set|fwrite32 failed
detected negative compression
premature EOF
'%s'
\x%02x
<<EOF>>
End Marker
*Something Weird* - tok: %d val: %d
malloc failed (f) in filter_create_ext
malloc failed (f->argv) in filter_create_ext
malloc failed in filter_create_int
pipe failed
fork failed
dup2(pipes[0],0)
filter_func failed
exec of %s failed
dup2(pipes[1],1)
dup(1) failed
freopen(headerfilename) failed
m4_changecom`'m4_dnl
m4_changequote`'m4_dnl
m4_changequote([[,]])[[]]m4_dnl
m4_define([[M4_YY_NOOP]])[[]]m4_dnl
m4_define( [[M4_YY_IN_HEADER]],[[]])m4_dnl
#ifndef %sHEADER_H
#define %sHEADER_H 1
#define %sIN_HEADER 1
m4_define( [[M4_YY_OUTFILE_NAME]],[[%s]])m4_dnl
<stdout>
malloc failed in filter_tee_header
#line 4000 "M4_YY_OUTFILE_NAME"
#undef %sIN_HEADER
#endif /* %sHEADER_H */
m4_undefine( [[M4_YY_IN_HEADER]])m4_dnl
malloc failed in filter_fix_linedirs
#line %d "%s"
m4_dnl ifdef(`__gnu__', ,`errprint(Flex requires GNU M4. Set the PATH or set the M4 environment variable to its path name.) m4exit(2)')
Unable to allocate buffer to report regcomp
regcomp for "%s" failed: 
Unable to allocate a copy of the match
^#line ([[:digit:]]+) "(.*)"
^[[:space:]]*$
Allocation of buffer to print string failed
Allocation of buffer for line directive failed
#line %d "
m4_define( [[%s]], [[[[%s]]]])m4_dnl
Allocation of buffer for m4 def failed
m4_undefine( [[%s]])m4_dnl
Allocation of buffer for m4 undef failed
2.6.4 Apple(flex-35)
FILE *yyin = stdin, *yyout = stdout;
FILE *yyin = NULL, *yyout = NULL;
