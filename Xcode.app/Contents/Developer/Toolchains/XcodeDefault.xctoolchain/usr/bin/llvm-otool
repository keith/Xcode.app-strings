OTOOL_PATH
--version
llvm-otool(1): Apple Inc. version %s
-arch
missing argument(s) to %s option
unknown architecture specification flag: %s %s
-llvm-mc
-function_offsets
-bind_info
-dyld_info
-dyld_opcodes
-chained_fixups
-fixup_chains
-mcpu=
missing argument to -mcpu=
-addr_slide=
missing argument to -addr_slide= (amount to slide addresses when printing pointers)
-addr_slide
-addr_slide requires an argument (amount to slide addresses when printing pointers)
-no-show-raw-insn
-no-show-latency
-p requires an argument (a text symbol name)
only one -p flag can be specified
-show-objdump-command
-object-tool-path
-object-tool-path requires an argument (path to an objdump or otool tool)
-objdump
objdump
-s requires two arguments (a segment name and a section name)
only one -s flag can be specified
unknown char `%c' in flag %s
one of -fahlLtdoOrTMRIHCGScisPx or --version must be specified
can't specify both -q and -Q
at least one file must be specified
__TEXT
__text
__fvmlib_init0
__info_plist
otool
otool-classic
Usage: %s [-arch arch_type] [-fahlLDtdorSTMRIHGvVcXmqQjCP] [-mcpu=arg] [--version] <object file> ...
-f print the fat headers
-a print the archive header
-h print the mach header
-l print the load commands
-L print shared libraries used
-D print shared library id name
-t print the text section (disassemble with -v)
-x print all text sections (disassemble with -v)
-p <routine name>  start dissassemble from routine name
-s <segname> <sectname> print contents of section
-d print the data section
-o print the Objective-C segment
-r print the relocation entries
-S print the table of contents of a library
 (obsolete)
-T print the table of contents of a dynamic shared library
-M print the module table of a dynamic shared library
-R print the reference table of a dynamic shared library
-I print the indirect symbol table
-H print the two-level hints table
-G print the data in code table
-v print verbosely (symbolically) when possible
-V print disassembled operands symbolically
-c print argument strings of a core file
-X print no leading addresses or headers
-m don't use archive(member) syntax
-B force Thumb disassembly (ARM objects only)
-q use llvm's disassembler (the default)
-Q use otool(1)'s disassembler
-mcpu=arg use `arg' as the cpu for disassembly
-j print opcode bytes
-P print the info plist section as strings
-C print linker optimization hints
--version print the version of %s
llvm-objdump
--macho
--universal-headers
--archive-headers
--archive-member-offsets
--private-header
--private-headers
--disassemble-all
--section
,__text
--disassemble
__TEXT,__text
--full-leading-addr
--print-imm-hex
--dis-symname
--mcpu=
--indirect-symbols
--data-in-code
--link-opt-hints
--info-plist
__DATA,__data
--reloc
for -S functionality, use llvm-nm with -print-armap
--bind
--dylibs-used
--dylib-id
--objc-meta-data
--non-verbose
--no-symbolic-operands
--no-show-raw-insn
--no-leading-addr
--no-leading-headers
--arch
-B functionality not implemented in objdump(1)
-c functionality not implemented in objdump(1)
-W functionality not implemented in objdump(1)
-function-offsets functionality not implemented in objdump(1)
-O functionality obsolete
-T functionality obsolete
-M functionality obsolete
-R functionality obsolete
-i functionality obsolete
-Q functionality obsolete
little
arm64_32
arm64e
arm64v8
arm64
armv7em
armv7m
armv7k
armv7s
armv7f
armv7
armv6m
armv6
xscale
armv5
armv4t
sparc
hppa
veo4
veo3
veo2
veo1
ppc970-64
ppc64
ppc970
ppc7450
ppc7400
ppc750
ppc604e
ppc604
ppc603ev
ppc603e
ppc603
ppc601
i860
x86_64h
x86_64
pentIIm5
pentIIm3
pentpro
pentium
i486SX
i486
i386
m88k
m68040
m68030
m68k
%s: known architecture flags are:
i586
i686
pentium4
hppa7100LC
fatal error: %s: 
 (%s)
 (%s)
warning: %s: 
error: %s: 
virtual memory exhausted (malloc failed)
virtual memory exhausted (realloc failed)
<dict>
  <key>tool</key>
  <string>%s</string>
  <key>args</key>
  <key>diagnostics</key>
  <array>
    <dict>
      <key>level</key>
      <string>%s</string>
      <key>message</key>
    </dict>
  </array>
</dict>
error: cannot open file at %s: %s
warning
error
fatal error
+ %s 
can't fork a new process to execute: %s
can't find or exec: %s
wait on forked process %d failed
fatal error in %s
cctools-1021.4
cctools-1021.4
OTOOL_PATH
--version
llvm-otool(1): Apple Inc. version %s
-arch
missing argument(s) to %s option
unknown architecture specification flag: %s %s
-llvm-mc
-function_offsets
-bind_info
-dyld_info
-dyld_opcodes
-chained_fixups
-fixup_chains
-mcpu=
missing argument to -mcpu=
-addr_slide=
missing argument to -addr_slide= (amount to slide addresses when printing pointers)
-addr_slide
-addr_slide requires an argument (amount to slide addresses when printing pointers)
-no-show-raw-insn
-no-show-latency
-p requires an argument (a text symbol name)
only one -p flag can be specified
-show-objdump-command
-object-tool-path
-object-tool-path requires an argument (path to an objdump or otool tool)
-objdump
objdump
-s requires two arguments (a segment name and a section name)
only one -s flag can be specified
unknown char `%c' in flag %s
one of -fahlLtdoOrTMRIHCGScisPx or --version must be specified
can't specify both -q and -Q
at least one file must be specified
__TEXT
__text
__fvmlib_init0
__info_plist
otool
otool-classic
Usage: %s [-arch arch_type] [-fahlLDtdorSTMRIHGvVcXmqQjCP] [-mcpu=arg] [--version] <object file> ...
-f print the fat headers
-a print the archive header
-h print the mach header
-l print the load commands
-L print shared libraries used
-D print shared library id name
-t print the text section (disassemble with -v)
-x print all text sections (disassemble with -v)
-p <routine name>  start dissassemble from routine name
-s <segname> <sectname> print contents of section
-d print the data section
-o print the Objective-C segment
-r print the relocation entries
-S print the table of contents of a library
 (obsolete)
-T print the table of contents of a dynamic shared library
-M print the module table of a dynamic shared library
-R print the reference table of a dynamic shared library
-I print the indirect symbol table
-H print the two-level hints table
-G print the data in code table
-v print verbosely (symbolically) when possible
-V print disassembled operands symbolically
-c print argument strings of a core file
-X print no leading addresses or headers
-m don't use archive(member) syntax
-B force Thumb disassembly (ARM objects only)
-q use llvm's disassembler (the default)
-Q use otool(1)'s disassembler
-mcpu=arg use `arg' as the cpu for disassembly
-j print opcode bytes
-P print the info plist section as strings
-C print linker optimization hints
--version print the version of %s
llvm-objdump
--macho
--universal-headers
--archive-headers
--archive-member-offsets
--private-header
--private-headers
--disassemble-all
--section
,__text
--disassemble
__TEXT,__text
--full-leading-addr
--print-imm-hex
--dis-symname
--mcpu=
--indirect-symbols
--data-in-code
--link-opt-hints
--info-plist
__DATA,__data
--reloc
for -S functionality, use llvm-nm with -print-armap
--bind
--dylibs-used
--dylib-id
--objc-meta-data
--non-verbose
--no-symbolic-operands
--no-show-raw-insn
--no-leading-addr
--no-leading-headers
--arch
-B functionality not implemented in objdump(1)
-c functionality not implemented in objdump(1)
-W functionality not implemented in objdump(1)
-function-offsets functionality not implemented in objdump(1)
-O functionality obsolete
-T functionality obsolete
-M functionality obsolete
-R functionality obsolete
-i functionality obsolete
-Q functionality obsolete
little
arm64_32
arm64e
arm64v8
arm64
armv7em
armv7m
armv7k
armv7s
armv7f
armv7
armv6m
armv6
xscale
armv5
armv4t
sparc
hppa
veo4
veo3
veo2
veo1
ppc970-64
ppc64
ppc970
ppc7450
ppc7400
ppc750
ppc604e
ppc604
ppc603ev
ppc603e
ppc603
ppc601
i860
x86_64h
x86_64
pentIIm5
pentIIm3
pentpro
pentium
i486SX
i486
i386
m88k
m68040
m68030
m68k
%s: known architecture flags are:
i586
i686
pentium4
hppa7100LC
fatal error: %s: 
 (%s)
 (%s)
warning: %s: 
error: %s: 
virtual memory exhausted (malloc failed)
virtual memory exhausted (realloc failed)
<dict>
  <key>tool</key>
  <string>%s</string>
  <key>args</key>
  <key>diagnostics</key>
  <array>
    <dict>
      <key>level</key>
      <string>%s</string>
      <key>message</key>
    </dict>
  </array>
</dict>
error: cannot open file at %s: %s
warning
error
fatal error
+ %s 
can't fork a new process to execute: %s
can't find or exec: %s
wait on forked process %d failed
fatal error in %s
