@(#)PROGRAM:ld-classic  PROJECT:ld64-954.16
N2ld6passes5dedup14DeDupAliasAtomE
N2ld6passes13thread_starts13RebaseRLEAtomE
N2ld6passes13thread_starts16ThreadStartsAtomE
N2ld6passes13thread_starts15ChainStartsAtomE
N8textstub5dylib4FileI6x86_64EE
N2ld7BitcodeE
N8textstub5dylib4FileI3x86EE
N8textstub5dylib4FileI3armEE
N8textstub5dylib4FileI5arm64EE
N8textstub5dylib4FileI8arm64_32EE
13InternalState
N2ld8InternalE
modules>
<swift-imported-
N6mach_o11relocatable4FileI6x86_64EE
N2ld12ClangBitcodeE
N2ld11LLVMBitcodeE
N2ld12SwiftBitcodeE
N2ld10AsmBitcodeE
N6mach_o11relocatable15Literal4SectionI6x86_64EE
N6mach_o11relocatable16FixedSizeSectionI6x86_64EE
N6mach_o11relocatable19ImplicitSizeSectionI6x86_64EE
N6mach_o11relocatable7SectionI6x86_64EE
N2ld7SectionE
N6mach_o11relocatable4AtomI6x86_64EE
N6mach_o11relocatable15Literal8SectionI6x86_64EE
N6mach_o11relocatable16Literal16SectionI6x86_64EE
N6mach_o11relocatable21NonLazyPointerSectionI6x86_64EE
N6mach_o11relocatable17TLVPointerSectionI6x86_64EE
N6mach_o11relocatable10CFISectionI6x86_64EE
N6mach_o11relocatable14CStringSectionI6x86_64EE
N6mach_o11relocatable23PointerToCStringSectionI6x86_64EE
N6mach_o11relocatable20Objc1ClassReferencesI6x86_64EE
N6mach_o11relocatable18UTF16StringSectionI6x86_64EE
N6mach_o11relocatable15SymboledSectionI6x86_64EE
N6mach_o11relocatable15CFStringSectionI6x86_64EE
N6mach_o11relocatable21ObjC2ClassRefsSectionI6x86_64EE
N6mach_o11relocatable31ObjC2ClassOrCategoryListSectionI6x86_64EE
N6mach_o11relocatable17ObjC1ClassSectionI6x86_64EE
N6mach_o11relocatable14TLVDefsSectionI6x86_64EE
N6mach_o11relocatable9CUSectionI6x86_64EE
N6mach_o11relocatable26TentativeDefinitionSectionI6x86_64EE
N6mach_o11relocatable21AbsoluteSymbolSectionI6x86_64EE
N6mach_o11relocatable9AliasAtomE
N6mach_o11relocatable4FileI3x86EE
N6mach_o11relocatable15Literal4SectionI3x86EE
N6mach_o11relocatable16FixedSizeSectionI3x86EE
N6mach_o11relocatable19ImplicitSizeSectionI3x86EE
N6mach_o11relocatable7SectionI3x86EE
N6mach_o11relocatable4AtomI3x86EE
N6mach_o11relocatable15Literal8SectionI3x86EE
N6mach_o11relocatable16Literal16SectionI3x86EE
N6mach_o11relocatable21NonLazyPointerSectionI3x86EE
N6mach_o11relocatable17TLVPointerSectionI3x86EE
N6mach_o11relocatable10CFISectionI3x86EE
N6mach_o11relocatable14CStringSectionI3x86EE
N6mach_o11relocatable23PointerToCStringSectionI3x86EE
N6mach_o11relocatable20Objc1ClassReferencesI3x86EE
N6mach_o11relocatable18UTF16StringSectionI3x86EE
N6mach_o11relocatable15SymboledSectionI3x86EE
N6mach_o11relocatable15CFStringSectionI3x86EE
N6mach_o11relocatable21ObjC2ClassRefsSectionI3x86EE
N6mach_o11relocatable31ObjC2ClassOrCategoryListSectionI3x86EE
N6mach_o11relocatable17ObjC1ClassSectionI3x86EE
N6mach_o11relocatable14TLVDefsSectionI3x86EE
N6mach_o11relocatable9CUSectionI3x86EE
N6mach_o11relocatable26TentativeDefinitionSectionI3x86EE
N6mach_o11relocatable21AbsoluteSymbolSectionI3x86EE
N6mach_o11relocatable4FileI3armEE
N6mach_o11relocatable15Literal4SectionI3armEE
N6mach_o11relocatable16FixedSizeSectionI3armEE
N6mach_o11relocatable19ImplicitSizeSectionI3armEE
N6mach_o11relocatable7SectionI3armEE
N6mach_o11relocatable4AtomI3armEE
N6mach_o11relocatable15Literal8SectionI3armEE
N6mach_o11relocatable16Literal16SectionI3armEE
N6mach_o11relocatable21NonLazyPointerSectionI3armEE
N6mach_o11relocatable17TLVPointerSectionI3armEE
N6mach_o11relocatable10CFISectionI3armEE
N6mach_o11relocatable14CStringSectionI3armEE
N6mach_o11relocatable23PointerToCStringSectionI3armEE
N6mach_o11relocatable20Objc1ClassReferencesI3armEE
N6mach_o11relocatable18UTF16StringSectionI3armEE
N6mach_o11relocatable15SymboledSectionI3armEE
N6mach_o11relocatable15CFStringSectionI3armEE
N6mach_o11relocatable21ObjC2ClassRefsSectionI3armEE
N6mach_o11relocatable31ObjC2ClassOrCategoryListSectionI3armEE
N6mach_o11relocatable17ObjC1ClassSectionI3armEE
N6mach_o11relocatable14TLVDefsSectionI3armEE
N6mach_o11relocatable9CUSectionI3armEE
N6mach_o11relocatable26TentativeDefinitionSectionI3armEE
N6mach_o11relocatable21AbsoluteSymbolSectionI3armEE
N6mach_o11relocatable4FileI5arm64EE
N6mach_o11relocatable15Literal4SectionI5arm64EE
N6mach_o11relocatable16FixedSizeSectionI5arm64EE
N6mach_o11relocatable19ImplicitSizeSectionI5arm64EE
N6mach_o11relocatable7SectionI5arm64EE
N6mach_o11relocatable4AtomI5arm64EE
N6mach_o11relocatable15Literal8SectionI5arm64EE
N6mach_o11relocatable16Literal16SectionI5arm64EE
N6mach_o11relocatable21NonLazyPointerSectionI5arm64EE
N6mach_o11relocatable17TLVPointerSectionI5arm64EE
N6mach_o11relocatable10CFISectionI5arm64EE
N6mach_o11relocatable14CStringSectionI5arm64EE
N6mach_o11relocatable23PointerToCStringSectionI5arm64EE
N6mach_o11relocatable20Objc1ClassReferencesI5arm64EE
N6mach_o11relocatable18UTF16StringSectionI5arm64EE
N6mach_o11relocatable15SymboledSectionI5arm64EE
N6mach_o11relocatable15CFStringSectionI5arm64EE
N6mach_o11relocatable21ObjC2ClassRefsSectionI5arm64EE
N6mach_o11relocatable31ObjC2ClassOrCategoryListSectionI5arm64EE
N6mach_o11relocatable17ObjC1ClassSectionI5arm64EE
N6mach_o11relocatable14TLVDefsSectionI5arm64EE
N6mach_o11relocatable9CUSectionI5arm64EE
N6mach_o11relocatable26TentativeDefinitionSectionI5arm64EE
N6mach_o11relocatable21AbsoluteSymbolSectionI5arm64EE
N6mach_o11relocatable4FileI8arm64_32EE
N6mach_o11relocatable15Literal4SectionI8arm64_32EE
N6mach_o11relocatable16FixedSizeSectionI8arm64_32EE
N6mach_o11relocatable19ImplicitSizeSectionI8arm64_32EE
N6mach_o11relocatable7SectionI8arm64_32EE
N6mach_o11relocatable4AtomI8arm64_32EE
N6mach_o11relocatable15Literal8SectionI8arm64_32EE
N6mach_o11relocatable16Literal16SectionI8arm64_32EE
N6mach_o11relocatable21NonLazyPointerSectionI8arm64_32EE
N6mach_o11relocatable17TLVPointerSectionI8arm64_32EE
N6mach_o11relocatable10CFISectionI8arm64_32EE
N6mach_o11relocatable14CStringSectionI8arm64_32EE
N6mach_o11relocatable23PointerToCStringSectionI8arm64_32EE
N6mach_o11relocatable20Objc1ClassReferencesI8arm64_32EE
N6mach_o11relocatable18UTF16StringSectionI8arm64_32EE
N6mach_o11relocatable15SymboledSectionI8arm64_32EE
N6mach_o11relocatable15CFStringSectionI8arm64_32EE
N6mach_o11relocatable21ObjC2ClassRefsSectionI8arm64_32EE
N6mach_o11relocatable31ObjC2ClassOrCategoryListSectionI8arm64_32EE
N6mach_o11relocatable17ObjC1ClassSectionI8arm64_32EE
N6mach_o11relocatable14TLVDefsSectionI8arm64_32EE
N6mach_o11relocatable9CUSectionI8arm64_32EE
N6mach_o11relocatable26TentativeDefinitionSectionI8arm64_32EE
N6mach_o11relocatable21AbsoluteSymbolSectionI8arm64_32EE
__.SYMDEF_64 SOR
N7archive4FileI6x86_64EE
N2ld4FileE
N7archive24CheckIsDataSymbolHandlerE
N2ld4File11AtomHandlerE
N7archive4FileI3x86EE
N7archive4FileI3armEE
N7archive4FileI5arm64EE
N7archive4FileI8arm64_32EE
N3lto6Parser10AtomSyncerE
N3lto4FileE
N3lto12InternalAtomE
N3lto4AtomE
N6mach_o5dylib4FileI6x86_64EE
N6mach_o5dylib4FileI3x86EE
N6mach_o5dylib4FileI3armEE
N6mach_o5dylib4FileI5arm64EE
N6mach_o5dylib4FileI8arm64_32EE
N2ld5dylib4FileE
N2ld7archive4FileE
N2ld4tool10InputFilesE
N2ld5dylib4File12DylibHandlerE
N2ld4tool13DSOHandleAtomE
N2ld4tool11IgnoredFileE
N2ld4tool12PageZeroAtomE
N2ld4tool15CustomStackAtomE
N2ld4tool11SymbolTableE
N2ld20IndirectBindingTableE
.objc_class_name_
N2ld4tool8ResolverE
N2ld4tool19SectionBoundaryAtomE
N2ld4AtomE
N2ld4tool19SegmentBoundaryAtomE
N2ld4tool9AliasAtomE
N2ld4tool18UndefinedProxyAtomE
N2ld4File15AtomSinkHandlerE
N2ld11relocatable4FileE
N2ld4tool12LinkEditAtomE
N2ld4tool17CodeSignatureAtomE
N2ld4tool14StringPoolAtomE
N2ld4tool19ClassicLinkEditAtomE
N2ld4tool20LocalRelocationsAtomI3x86EE
N2ld4tool23RelocationsAtomAbstractE
N2ld4tool23ExternalRelocationsAtomI3x86EE
N2ld4tool14DataInCodeAtomI6x86_64EE
N2ld4tool23IndirectSymbolTableAtomI3x86EE
N2ld4tool15SymbolTableAtomI3x86EE
N2ld4tool20LocalRelocationsAtomI6x86_64EE
N2ld4tool23ExternalRelocationsAtomI6x86_64EE
N2ld4tool23IndirectSymbolTableAtomI6x86_64EE
N2ld4tool15SymbolTableAtomI6x86_64EE
N2ld4tool20LocalRelocationsAtomI3armEE
N2ld4tool23ExternalRelocationsAtomI3armEE
N2ld4tool14DataInCodeAtomI3armEE
N2ld4tool23IndirectSymbolTableAtomI3armEE
N2ld4tool15SymbolTableAtomI3armEE
N2ld4tool20LocalRelocationsAtomI5arm64EE
N2ld4tool23ExternalRelocationsAtomI5arm64EE
N2ld4tool23IndirectSymbolTableAtomI5arm64EE
N2ld4tool15SymbolTableAtomI5arm64EE
N2ld4tool20LocalRelocationsAtomI8arm64_32EE
N2ld4tool23ExternalRelocationsAtomI8arm64_32EE
N2ld4tool23IndirectSymbolTableAtomI8arm64_32EE
N2ld4tool15SymbolTableAtomI8arm64_32EE
N2ld4tool22SectionRelocationsAtomI3x86EE
N2ld4tool15ChainedInfoAtomI3x86EE
N2ld4tool14ExportInfoAtomI3x86EE
N2ld4tool14RebaseInfoAtomI3x86EE
N2ld4tool15BindingInfoAtomI3x86EE
N2ld4tool19WeakBindingInfoAtomI3x86EE
N2ld4tool19LazyBindingInfoAtomI3x86EE
N2ld4tool18SplitSegInfoV2AtomI3x86EE
N2ld4tool18SplitSegInfoV1AtomI3x86EE
N2ld4tool18FunctionStartsAtomI3x86EE
N2ld4tool14DataInCodeAtomI3x86EE
N2ld4tool21OptimizationHintsAtomI3x86EE
N2ld4tool22SectionRelocationsAtomI6x86_64EE
N2ld4tool15ChainedInfoAtomI6x86_64EE
N2ld4tool14ExportInfoAtomI6x86_64EE
N2ld4tool14RebaseInfoAtomI6x86_64EE
N2ld4tool15BindingInfoAtomI6x86_64EE
N2ld4tool19WeakBindingInfoAtomI6x86_64EE
N2ld4tool19LazyBindingInfoAtomI6x86_64EE
N2ld4tool18SplitSegInfoV2AtomI6x86_64EE
N2ld4tool18SplitSegInfoV1AtomI6x86_64EE
N2ld4tool18FunctionStartsAtomI6x86_64EE
N2ld4tool21OptimizationHintsAtomI6x86_64EE
N2ld4tool22SectionRelocationsAtomI3armEE
N2ld4tool15ChainedInfoAtomI3armEE
N2ld4tool14ExportInfoAtomI3armEE
N2ld4tool14RebaseInfoAtomI3armEE
N2ld4tool15BindingInfoAtomI3armEE
N2ld4tool19WeakBindingInfoAtomI3armEE
N2ld4tool19LazyBindingInfoAtomI3armEE
N2ld4tool18SplitSegInfoV2AtomI3armEE
N2ld4tool18SplitSegInfoV1AtomI3armEE
N2ld4tool18FunctionStartsAtomI3armEE
N2ld4tool21OptimizationHintsAtomI3armEE
N2ld4tool22SectionRelocationsAtomI5arm64EE
N2ld4tool15ChainedInfoAtomI5arm64EE
N2ld4tool14ExportInfoAtomI5arm64EE
N2ld4tool14RebaseInfoAtomI5arm64EE
N2ld4tool15BindingInfoAtomI5arm64EE
N2ld4tool19WeakBindingInfoAtomI5arm64EE
N2ld4tool19LazyBindingInfoAtomI5arm64EE
N2ld4tool18SplitSegInfoV2AtomI5arm64EE
N2ld4tool18SplitSegInfoV1AtomI5arm64EE
N2ld4tool18FunctionStartsAtomI5arm64EE
N2ld4tool14DataInCodeAtomI5arm64EE
N2ld4tool21OptimizationHintsAtomI5arm64EE
N2ld4tool22SectionRelocationsAtomI8arm64_32EE
N2ld4tool15ChainedInfoAtomI8arm64_32EE
N2ld4tool14ExportInfoAtomI8arm64_32EE
N2ld4tool14RebaseInfoAtomI8arm64_32EE
N2ld4tool15BindingInfoAtomI8arm64_32EE
N2ld4tool19WeakBindingInfoAtomI8arm64_32EE
N2ld4tool19LazyBindingInfoAtomI8arm64_32EE
N2ld4tool18SplitSegInfoV2AtomI8arm64_32EE
N2ld4tool18SplitSegInfoV1AtomI8arm64_32EE
N2ld4tool18FunctionStartsAtomI8arm64_32EE
N2ld4tool14DataInCodeAtomI8arm64_32EE
N2ld4tool21OptimizationHintsAtomI8arm64_32EE
N2ld4tool25HeaderAndLoadCommandsAtomI6x86_64EE
N2ld4tool28HeaderAndLoadCommandsAbtractE
N2ld4tool25HeaderAndLoadCommandsAtomI3armEE
N2ld4tool25HeaderAndLoadCommandsAtomI5arm64EE
N2ld4tool25HeaderAndLoadCommandsAtomI8arm64_32EE
N2ld4tool25HeaderAndLoadCommandsAtomI3x86EE
N2ld6passes5stubs3x8615NonLazyStubAtomE
N2ld6passes5stubs3x8618NonLazyPointerAtomE
N2ld6passes5stubs3x8618ResolverHelperAtomE
N2ld6passes5stubs3x868StubAtomE
N2ld6passes5stubs3x8615LazyPointerAtomE
N2ld6passes5stubs3x8614StubHelperAtomE
N2ld6passes5stubs3x8620StubHelperHelperAtomE
N2ld6passes5stubs3x8621ImageCachePointerAtomE
N2ld6passes5stubs3x8622FastBindingPointerAtomE
N2ld6passes5stubs3x867classic8StubAtomE
N2ld6passes5stubs3x867classic15LazyPointerAtomE
N2ld6passes5stubs3x867classic14StubHelperAtomE
N2ld6passes5stubs6x86_6415NonLazyStubAtomE
N2ld6passes5stubs6x86_6418NonLazyPointerAtomE
N2ld6passes5stubs6x86_648StubAtomE
N2ld6passes5stubs6x86_6415LazyPointerAtomE
N2ld6passes5stubs6x86_6414StubHelperAtomE
N2ld6passes5stubs6x86_6420StubHelperHelperAtomE
N2ld6passes5stubs6x86_6421ImageCachePointerAtomE
N2ld6passes5stubs6x86_6422FastBindingPointerAtomE
N2ld6passes5stubs6x86_6418ResolverHelperAtomE
N2ld6passes5stubs6x86_647classic8StubAtomE
N2ld6passes5stubs6x86_647classic15LazyPointerAtomE
N2ld6passes5stubs6x86_647classic14StubHelperAtomE
N2ld6passes5stubs3arm15StubPICKextAtomE
N2ld6passes5stubs3arm18NonLazyPointerAtomE
N2ld6passes5stubs3arm16ThumbStubPICAtomE
N2ld6passes5stubs3arm11StubPICAtomE
N2ld6passes5stubs3arm15LazyPointerAtomE
N2ld6passes5stubs3arm14StubHelperAtomE
N2ld6passes5stubs3arm20StubHelperHelperAtomE
N2ld6passes5stubs3arm21ImageCachePointerAtomE
N2ld6passes5stubs3arm22FastBindingPointerAtomE
N2ld6passes5stubs3arm18ResolverHelperAtomE
N2ld6passes5stubs3arm18NonLazyStubPICAtomE
N2ld6passes5stubs3arm13StubCloseAtomE
N2ld6passes5stubs3arm13StubNoPICAtomE
N2ld6passes5stubs3arm18ThumbStubNoPICAtomE
N2ld6passes5stubs3arm7classic11StubPICAtomE
N2ld6passes5stubs3arm7classic15LazyPointerAtomE
N2ld6passes5stubs3arm7classic13StubNoPICAtomE
N2ld6passes5stubs6arm64e15NonLazyStubAtomE
N2ld6passes5stubs6arm64e18NonLazyPointerAtomE
N2ld6passes5stubs6arm64e8StubAtomE
N2ld6passes5stubs6arm64e15LazyPointerAtomE
N2ld6passes5stubs6arm64e18ResolverHelperAtomE
N2ld6passes5stubs5arm6415NonLazyStubAtomE
N2ld6passes5stubs5arm6418NonLazyPointerAtomE
N2ld6passes5stubs5arm648StubAtomE
N2ld6passes5stubs5arm6415LazyPointerAtomE
N2ld6passes5stubs5arm6414StubHelperAtomE
N2ld6passes5stubs5arm6420StubHelperHelperAtomE
N2ld6passes5stubs5arm6421ImageCachePointerAtomE
N2ld6passes5stubs5arm6422FastBindingPointerAtomE
N2ld6passes5stubs5arm6418ResolverHelperAtomE
N2ld6passes5stubs8arm64_3215NonLazyStubAtomE
N2ld6passes5stubs8arm64_3218NonLazyPointerAtomE
N2ld6passes5stubs8arm64_328StubAtomE
N2ld6passes5stubs8arm64_3215LazyPointerAtomE
N2ld6passes5stubs8arm64_3214StubHelperAtomE
N2ld6passes5stubs8arm64_3220StubHelperHelperAtomE
N2ld6passes5stubs8arm64_3221ImageCachePointerAtomE
N2ld6passes5stubs8arm64_3222FastBindingPointerAtomE
N2ld6passes5stubs8arm64_3218ResolverHelperAtomE
N14opaque_section4AtomE
N14opaque_section4FileE
N2ld6passes6dtrace4AtomE
N2ld6passes6dtrace4FileE
N2ld6passes14compact_unwind17CompactUnwindAtomI6x86_64EE
N2ld6passes14compact_unwind17CompactUnwindAtomI3x86EE
N2ld6passes14compact_unwind17CompactUnwindAtomI5arm64EE
N2ld6passes14compact_unwind17CompactUnwindAtomI8arm64_32EE
N2ld6passes14compact_unwind17CompactUnwindAtomI3armEE
N2ld6passes14compact_unwind14UnwindInfoAtomI6x86_64EE
N2ld6passes14compact_unwind14UnwindInfoAtomI3x86EE
N2ld6passes14compact_unwind14UnwindInfoAtomI5arm64EE
N2ld6passes14compact_unwind14UnwindInfoAtomI8arm64_32EE
N2ld6passes14compact_unwind14UnwindInfoAtomI3armEE
N2ld6passes3got12GOTEntryAtomE
N2ld6passes3got16GOTAuthEntryAtomE
N2ld6passes4huge11DataPadAtomE
N2ld6passes5inits14InitOffsetAtomE
N7generic5dylib4FileE
N7generic5dylib10ExportAtomE
N7generic5dylib10ImportAtomE
N2ld6passes13branch_island37Thumb2toThumbBranchAbsoluteIslandAtomE
N2ld6passes13branch_island29Thumb2toThumbBranchIslandAtomE
N2ld6passes13branch_island29Thumb1toThumbBranchIslandAtomE
N2ld6passes13branch_island34NoPicThumb1toThumbBranchIslandAtomE
N2ld6passes13branch_island24ARMtoARMBranchIslandAtomE
N2ld6passes13branch_island21ARM64BranchIslandAtomE
N2ld6passes4objc14MethodListAtomI6x86_64EE
N2ld6passes4objc10SelRefAtomE
N2ld6passes4objc18ClassROOverlayAtomI6x86_64EE
N2ld6passes4objc15ObjCOverlayAtomI6x86_64EE
N2ld6passes4objc16ProtocolListAtomI6x86_64EE
N2ld6passes4objc16PropertyListAtomI6x86_64EE
N2ld6passes4objc20NonLazyClassListAtomE
N2ld6passes4objc19CategoryOverlayAtomI6x86_64EE
N2ld6passes4objc17ObjCImageInfoAtomI6x86_64EE
N2ld6passes4objc14MethodListAtomI3x86EE
N2ld6passes4objc18ClassROOverlayAtomI3x86EE
N2ld6passes4objc15ObjCOverlayAtomI3x86EE
N2ld6passes4objc16ProtocolListAtomI3x86EE
N2ld6passes4objc16PropertyListAtomI3x86EE
N2ld6passes4objc19CategoryOverlayAtomI3x86EE
N2ld6passes4objc17ObjCImageInfoAtomI3x86EE
N2ld6passes4objc14MethodListAtomI3armEE
N2ld6passes4objc18ClassROOverlayAtomI3armEE
N2ld6passes4objc15ObjCOverlayAtomI3armEE
N2ld6passes4objc16ProtocolListAtomI3armEE
N2ld6passes4objc16PropertyListAtomI3armEE
N2ld6passes4objc19CategoryOverlayAtomI3armEE
N2ld6passes4objc17ObjCImageInfoAtomI3armEE
N2ld6passes4objc14MethodListAtomI6arm64eEE
N2ld6passes4objc18ClassROOverlayAtomI6arm64eEE
N2ld6passes4objc15ObjCOverlayAtomI6arm64eEE
N2ld6passes4objc16ProtocolListAtomI6arm64eEE
N2ld6passes4objc16PropertyListAtomI6arm64eEE
N2ld6passes4objc19CategoryOverlayAtomI6arm64eEE
N2ld6passes4objc17ObjCImageInfoAtomI6arm64eEE
N2ld6passes4objc14MethodListAtomI5arm64EE
N2ld6passes4objc18ClassROOverlayAtomI5arm64EE
N2ld6passes4objc15ObjCOverlayAtomI5arm64EE
N2ld6passes4objc16ProtocolListAtomI5arm64EE
N2ld6passes4objc16PropertyListAtomI5arm64EE
N2ld6passes4objc19CategoryOverlayAtomI5arm64EE
N2ld6passes4objc17ObjCImageInfoAtomI5arm64EE
N2ld6passes4objc14MethodListAtomI8arm64_32EE
N2ld6passes4objc18ClassROOverlayAtomI8arm64_32EE
N2ld6passes4objc15ObjCOverlayAtomI8arm64_32EE
N2ld6passes4objc16ProtocolListAtomI8arm64_32EE
N2ld6passes4objc16PropertyListAtomI8arm64_32EE
N2ld6passes4objc19CategoryOverlayAtomI8arm64_32EE
N2ld6passes4objc17ObjCImageInfoAtomI8arm64_32EE
N2ld6passes6dylibs17SoftLinkAuditAtomE
N2ld6passes6dylibs11CStringAtomE
N2ld6passes4tlvp12TLVEntryAtomE
N2ld6passes11branch_shim24NoPICThumb2ToArmShimAtomE
N2ld6passes11branch_shim19Thumb2ToArmShimAtomE
N2ld6passes11branch_shim19Thumb1ToArmShimAtomE
N2ld6passes11branch_shim23NoPICARMtoThumbShimAtomE
N2ld6passes11branch_shim18ARMtoThumbShimAtomE
N2ld13BundleBitcodeE
N2ld6passes14bitcode_bundle11FileHandlerE
N2ld6passes14bitcode_bundle13BundleHandlerE
N2ld6passes14bitcode_bundle14BitcodeHandlerE
N2ld6passes14bitcode_bundle13ObjectHandlerE
N2ld6passes14bitcode_bundle17SymbolListHandlerE
N2ld6passes14bitcode_bundle11BitcodeAtomE
N2ld6passes10objc_stubs12ObjcStubAtomE
N2ld6passes10objc_stubs14MethodNameAtomE
N2ld6passes10objc_stubs10SelRefAtomE
N2ld6passes10objc_stubs11AuthGOTAtomE
N2ld6passes10objc_stubs7GOTAtomE
__text
deduplicate the following %lu functions (%llu bytes apiece):
    %s
deduplication saved %llu bytes of __text
v16@?0Q8
vector
__TEXT
__thread_starts
__chain_starts
__rebase_info
misaligned pointer at 0x%08X in %s
sectionOffset
_mode == modeSectionOffset
pointer not aligned at address 0x%llX (%s + %d from %s)
<internal>
threadStartsCountInSection
thread_starts.cpp
(delta & (minAlignment - 1)) == 0
thread starts
chain starts
rebase RLE
architecture %s not present in TBD %s, attempting fallback
unsupported architecture for tbd file
unsupported libtapi API version '%i.%i'
_versions.find(platformVersion) == _versions.end()
LookupBucketFor
llvm-DenseMap.h
!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && "Empty/Tombstone value shouldn't be inserted into map!"
Hash table corrupted. This is probably a memory error somewhere. (table at %p, buckets at %p (%zu bytes), %u buckets, %u entries, %u tombstones, data %p %p %p %p)
InsertIntoBucketImpl
Buckets
initEmpty
(getNumBuckets() & (getNumBuckets()-1)) == 0 && "# initial buckets must be a power of two!"
moveFromOldBuckets
ld: building hashtable from text-stub info in %s
ld: warning: 
a.out
unknown
/usr/lib/dyld
internal error
__TEXT_EXEC
__PAGEZERO
__LINKEDIT
__DATA_CONST
__UNIXSTACK
__oslogstring
missing line-end at end of file "%s"
can't process auto zipper file: %s
setInferredArch
Options.cpp
fArchitecture == 0
LD_DYLIB_ARCH_FALLBACK
-arch must be followed by an architecture string
unknown/unsupported architecture name for: -arch %s
[Logging for XBS]%sfound library: '%s'
 not 
%s/%s
/lib
.dylib
.tbd
%s/lib%s.so
%s/lib%s.a
library not found for -l%s
-framework missing next argument
.framework/
Versions/Current/
framework not found %s
.sdk/
/SDKs/Xcode.Internal
text-based stub file %s and library file %s unexpectedly found. Falling back to library file for linking.
@executable_path/
file not found: %s
v28@?0i8I12I16^B20
Inlined framework/dylib mismatch: %s (%s and %s)
-filelist file '%s' could not be opened, errno=%d (%s)
%s:%s
missing file after %s
can't open %s file: %s
can't process %s file: %s
can't read %s file: %s
can't open alias file: %s
can't process alias file: %s
can't read alias file: %s
line needs two symbols but has only one at line #%d in "%s"
-undefined missing [ warning | error | suppress | dynamic_lookup ]
warning
error
suppress
dynamic_lookup
invalid option to -undefined [ warning | error | suppress | dynamic_lookup ]
-weak_reference_mismatches missing [ error | weak | non-weak ]
weak
non-weak
invalid option to -weak_reference_mismatches [ error | weak | non-weak ]
-commons missing [ ignore_dylibs | use_dylibs | error ]
ignore_dylibs
use_dylibs
invalid option to -commons [ ignore_dylibs | use_dylibs | error ]
-dylib_file must followed by two colon separated paths
unknown -segprot letter in %s
malformed 64-bit a.b.c.d.e version number: %s
truncating -current_version to fit in 32-bit space used by old mach-o format
malformed 32-bit x.y.z version number: %s
can't open order file: %s
can't process order file: %s
can't read order file: %s
ppc:
ppc64:
i386:
x86_64:
arm:
arm64:
.o):
__cstring
__literal
sorting of __literal[4,8,16] sections not supported
-seccreate segment name max 16 chars
-seccreate section name (%s) truncated to 16 chars (%s)
can't open -sectcreate file: %s
can't read -sectcreate file: %s, errno=%d
-rename_section segment name max 16 chars
-rename_section section name max 16 chars
-rename_segment segment name max 16 chars
%s segment name max 16 chars
-sectalign segment name max 16 chars
-sectalign section name max 16 chars
argument for -sectalign is not a hexadecimal number
argument for -sectalign must be less than or equal to 0x8000
zero is not a valid -sectalign
alignment for -sectalign %s %s is not a power of two, using 0x%X
option %s is obsolete and being ignored
%s and -bitcode_bundle (Xcode setting ENABLE_BITCODE=YES) cannot be used together
-dylib
-compatibility_version
-current_version
-install_name
-execute
could not write bitcode options file output kind
-no_implicit_dylibs
-platform_version
-rpath
-objc_abi_version
-executable_path
-dead_strip
-remove_swift_reflection_metadata_sections
-export_dynamic
-application_extension
-add_source_version
-source_version
-sectalign
-no_objc_category_merging
missing argument for %s
argument missing after %s
%s missing version argument
[Logging ld64 options]
-iphoneos_version_min
-ios_version_min
-macosx_version_min
-macos_version_min
-iosmac_version_min
-uikitformac_version_min
-maccatalyst_version_min
--help
-help
ld64: For information on command line options please use 'man ld'.
-arch
-dynamic
-static
-bundle
-dylinker
-preload
-kext
-kernel
-kext_objects_dir
-no_kext_objects
can't write output file to '%s' because that path is a directory
-ld_classic
-ld64
-ld64 is deprecated, use -ld_classic instead
-no_warn_duplicate_libraries
-warn_duplicate_libraries
-lazy-l
-lazy-l is deprecated, changing to regular link
-lto_library
missing argument to -lto_library
-lto_softload_runtime_symbols
-no_lto_softload_runtime_symbols
-cache_path_lto
missing argument to -cache_path_lto
-prune_interval_lto
missing argument to -prune_interval_lto
invalid argument for -prune_interval_lto
-prune_after_lto
missing argument to -prune_after_lto
invalid argument for -prune_after_lto
-max_relative_cache_size_lto
missing argument to -max_relative_cache_size_lto
invalid argument for -max_relative_cache_size_lto
Expect a value between 0 and 100 for -max_relative_cache_size_lto
-lazy_
-load_hidden
missing -l argument
Csu support file %s not found, changing to target %s %s where it is not needed
-weak-l
-needed-l
-bind_at_load
-twolevel_namespace
-flat_namespace
-force_flat_namespace
-force_flat_namespace is no longer supported, using -flat_namespace instead
-all_load
-noall_load
-ObjC
-force_load
-hidden-l
-dylib_compatibility_version
-dylib_compatibility_version missing <version>
-dylib_current_version
-dylib_current_version missing <version>
-sectorder
-sectorder missing <segment> <section> <file-path>
-order_file
-order_file_statistics
-sectcreate
-segcreate
-sectcreate missing <segment> <section> <file-path>
-add_empty_section
-add_empty_section missing <segment> <section>
-dylib_install_name
-dylinker_install_name
-install_name missing <path>
double slash removed from -install_name (%s)
-seg1addr
-image_base
%s missing <address>
-seg1addr not %lld byte aligned, rounding up
-filelist
-filelist missing <path>
-keep_private_externs
-final_output
-final_output missing <name>
-interposable
-multi_module
-interposable_list
-single_module
-exported_symbols_list
can't use -exported_symbols_list and -unexported_symbols_list
-unexported_symbols_list
can't use -unexported_symbols_list and -exported_symbols_list
-exported_symbol
can't use -exported_symbol and -unexported_symbols
-unexported_symbol
can't use -unexported_symbol and -exported_symbol
-no_exported_symbols
can't use -no_exported_symbols and -[un]exported_symbol[s_list]
-non_global_symbols_no_strip_list
can't use -non_global_symbols_no_strip_list and -non_global_symbols_strip_list
-non_global_symbols_strip_list
-no_arch_warnings
-force_cpusubtype_ALL
-weak_library
-lazy_library
-lazy_library is deprecated, changing to regular link
-needed_library
-search_in_sparse_frameworks
-image_suffix
-framework
-weak_framework
-lazy_framework
-lazy_framework is deprecated, changing to regular link
-needed_framework
-search_paths_first
-search_dylibs_first
-undefined
-arch_multiple
-read_only_relocs
-read_only_relocs missing [ warning | error | suppress ]
-unaligned_pointers
-unaligned_pointers missing [ warning | error | suppress ]
-sect_diff_relocs
-weak_reference_mismatches
-prebind
-noprebind
-prebind_allow_overlap
-prebind_all_twolevel_modules
-noprebind_all_twolevel_modules
-nofixprebinding
-dylib_file
-executable_path missing <path>
-segalign
-segalign missing <size>
alignment for -segalign %s is not a power of two, using 0x%X
-segaddr
-segaddr missing segName Adddress
-segaddr %s not %lld byte aligned
-segs_read_only_addr
-segs_read_write_addr
-seg_addr_table
-seg_addr_table missing argument
-seg_addr_table_filename
-segprot
-segprot missing segName max-prot init-prot
-segprot cannot be used to modify __LINKEDIT protections
-pagezero_size
-pagezero_size missing <size>
-pagezero_size not page aligned, rounding down
-implicit_pagezero
-stack_addr
-stack_addr missing <address>
-stack_size
-stack_size missing <address>
-allow_stack_execute
the target architecture doesn't support executable stacks
-allow_heap_execute
-sectalign missing <segment> <section> <hexadecimal-number>
-sectorder_detail
-sectobjectsymbols
-bundle_loader
-bundle_loader missing <path>
-private_bundle
-twolevel_namespace_hints
platform and versions must be specified
%s passed unknown platform name '%s'
%s min version malformed: '%s'
%s sdk version malformed: '%s'
passed two min versions (%s, %s) for platform %s. Using %s.
%s value malformed: '%s'
changing %s minOS version from %s to %s
building for %s %s is deprecated
-multiply_defined
-multiply_defined_unused
-nomultidefs
-why_load
-whyload
-why_live
-why_live missing symbol name argument
-u missing argument
-U missing argument
-no_dead_strip_inits_and_terms
-fatal_warnings
-arch_errors_fatal
-headerpad
-headerpad missing argument
-headerpad_max_install_names
-headerpad_max_install_names is ignored when used with -bitcode_bundle (Xcode setting ENABLE_BITCODE=YES)
-umbrella
-umbrella missing argument
-allowable_client
-allowable_client missing argument
-client_name
-client_name missing argument
-sub_umbrella
-sub_umbrella missing argument
-sub_library
-sub_library missing argument
-init
-init missing argument
-dot
-dot missing argument
-warn_commons
-commons
-keep_relocs
-warn_stabs
-pause
-print_statistics
-syslibroot
-bitcode_bundle
-no_uuid
-random_uuid
-dtrace
-dtrace missing argument
-root_safe
-setuid_safe
-alias
-alias_list
-save-temps
-bitcode_hide_symbols
-bitcode_verify
-bitcode_symbol_map
%s/XXXXXX
could not write file to symbol map directory: %s
-flto-codegen-only
-ignore_auto_link
-allow_dead_duplicates
-bitcode_process_mode
strip
marker
data
bitcode
unknown argument to -bitcode_process_mode {strip,marker,data,bitcode}
-read_only_stubs
-slow_stubs
-map
-pie
-no_pie
-reexport-l
-reexport_library
-reexport_framework
-upward-l
-upward_library
-upward_framework
-dead_strip_dylibs
-new_linker
-no_encryption
-encryptable
-no_compact_unwind
-no_dwarf_unwind
-mllvm
-mcpu
-no_order_inits
-seg_page_size
-seg_page_size missing segName Adddress
-seg_page_size %s not 4K aligned, rounding down
-mark_dead_strippable_dylib
-exported_symbols_order
-no_compact_linkedit
-no_eh_labels
-warn_compact_unwind
-allow_sub_type_mismatches
-no_zero_fill_sections
-merge_zero_fill_sections
ignoring unrecognized argument (%s) to -objc_abi_version
-warn_unused_dylibs
-no_warn_unused_dylibs
-objc_relative_method_lists
-no_objc_relative_method_lists
-warn_weak_exports
-no_weak_exports
-objc_gc_compaction
-objc_gc
-objc_gc_only
-objc_stubs_small
-objc_stubs_fast
-no_huge
-demangle
-version_load_command
-function_starts
-no_function_starts
-no_data_in_code_info
-data_in_code_info
-object_path_lto
-force_symbols_weak_list
-force_symbols_not_weak_list
-force_symbol_weak
-force_symbol_weak missing <symbol>
-force_symbol_not_weak
-force_symbol_not_weak missing <symbol>
-reexported_symbols_list
can't use -exported_symbols_list and -reexported_symbols_list
-dyld_env
-dyld_env missing ENV=VALUE
-page_align_data_atoms
-debug_snapshot
-snapshot_dir
-snapshot_dir missing path
-source_version missing <version>
-no_source_version
-sdk_version
-sdk_version missing <version>
-dependent_dr_info
-no_dependent_dr_info
-kexts_use_stubs
-dependency_info
-force_symbols_coalesce_list
-add_linker_option
-add_linker_option missing <option>
-allow_simulator_linking_to_macosx_dylibs
-simulator_support
-keep_dwarf_unwind
-no_keep_dwarf_unwind
-verbose_optimization_hints
-ignore_optimization_hints
-no_dtrace_dof
-rename_section
-rename_section missing <segment> <section> <segment> <section>
-rename_segment
-rename_segment missing <existing-segment> <new-segment>
-move_to_ro_segment
-move_to_ro_segment missing <segment> <symbol-list-file>
-move_to_rw_segment
-move_to_rw_segment missing <segment> <symbol-list-file>
-trace_symbol_layout
-no_branch_islands
-segment_order
-segment_order missing colon separated <segment-list>
-segment_order used more than once
-section_order
-section_order missing <segment> <section-list>
-section_order %s ... used more than once
-no_application_extension
-add_ast_path
-add_ast_path missing <option>
-force_load_swift_libs
-not_for_dyld_shared_cache
-no_shared_cache_eligible
-dirty_data_list
-dirty_data_list missing <symbol-list-file>
__DATA_DIRTY
-data_const
-no_data_const
-const_selrefs
-no_const_selrefs
-text_exec
-add_split_seg_info
-no_auth_data
-no_deduplicate
-verbose_deduplicate
-max_default_common_align
-max_default_common_align missing <align-value>
argument for -max_default_common_align is not a hexadecimal number
argument for -max_default_common_align must be less than or equal to 0x8000
zero is not a valid -max_default_common_align
alignment for -max_default_common_align is not a power of two, using 0x%X
-no_weak_imports
-no_inits
-no_warn_inits
-threaded_starts_section
-fixup_chains_section
-fixup_chains_section_vm
-fixup_chains
-no_fixup_chains
-fixup_chains_steal_pointers
-rebase_section
-debug_variant
-no_new_main
-init_offsets
-adhoc_codesign
-no_adhoc_codesign
-oso_prefix
-oso_prefix missing <path>
-oso_prefix path '.' cannot be expanded
-reproducible
-objc_class_ro_signing_mismatch
warn
unknown option: %s
-L missing argument
-L must be immediately followed by a directory path (no space)
-F missing argument
-F must be immediately followed by a directory path (no space)
BUILD 06:58:39 Aug 10 2024
configured to support archs: %s
LTO support using: %s (static support for %d, runtime is %d)
TAPI support using: %s
-version_details
"version": "%s",
954.16
"architectures": [
armv6 armv7 armv7s arm64 arm64e arm64_32 i386 x86_64 x86_64h armv6m armv7k armv7m armv7em
"%s"
"lto": {
"runtime_api_version": %d,
"static_api_version": %d,
"version_string": "%s"
"tapi": {
"version": "%s",
-syslibroot missing argument
-dependency_info missing <path>
/System/DriverKit/usr/lib
/System/DriverKit/System/Library/Frameworks/
/System/KernelKit/usr/lib
/System/KernelKit/System/Library/Frameworks/
/usr/lib
/usr/local/lib
/Library/Frameworks/
/System/Library/Frameworks/
-syslibroot and -L combined path '%s' is not a directory
-L path '%s' is not a directory
directory not found for option '-L%s'
-syslibroot and -F combined path '%s' is not a directory
-F path '%s' is not a directory
directory not found for option '-F%s'
Library search paths:
Framework search paths:
LD_FORCE_LEGACY_VERSION_LOAD_CMDS
LD_TRACE_ARCHIVES
RC_TRACE_ARCHIVES
LD_TRACE_DYLIBS
RC_TRACE_DYLIBS
LD_TRACE_DEPENDENTS
RC_TRACE_DYLIB_SEARCHING
LD_PRINT_OPTIONS
LD_TRACE_FILE
LD_PRINT_ORDER_FILE_STATISTICS
LD_NO_ENCRYPT
LD_APPLICATION_EXTENSION_SAFE
LD_ALLOW_CPU_SUBTYPE_MISMATCHES
LD_DYLIB_CPU_SUBTYPES_MUST_MATCH
LD_WARN_ON_SWIFT_ABI_VERSION_MISMATCHES
LD_OBJC_CLASS_RO_SIGNING_MISMATCH
LD_WARN_FILE
LD_DYLD_PATH
LD_DEBUG_SNAPSHOT
LD_PIPELINE_FIFO
ZERO_AR_DATE
/Developer/Toolchains/
RC_UUID_SALT
LD_PREFER_TAPI_FILE
RC_XBS
RC_BUILDIT
RC_ProjectName
SiValFactoryTests
AppleAVE2FW
AppleAneFW
AppleH13ISPFirmware
AppleISPFirmware
USBCFW_D52_D53_D54
GPUToolsDevice_Sim
Watchtower
LD_DEAD_STRIP
LD_WARN_COMMONS
RC_ProjectSourceVersion
/usr/lib/
/System/Library/
/System/DriverKit/
/Library/Apple/usr/lib/
/Library/Apple/System/Library/
/System/iOSSupport/System/Library/
/System/iOSSupport/usr/lib/
/AppleInternal/
No platform min-version specified on command line
%s env var malformed: '%s'
v24@?0r^{PlatformInfo=ii***IIIBBii}8^B16
changing Mac Catalyst minOS version from %s to %s
/System/Library/UserEventPlugins/
/System/ExclaveKit/
/AppleInternal/DirtyDataFiles
.dirty
/AppleInternal/AccessibilityLinkerSymbols
.axsymbols
/AppleInternal/OrderFiles/
.order
/usr/lib/swift/
/usr/lib/swift
/usr/lib/system/libxpc
/usr/lib/system/libdispatch
/usr/lib/system/introspection/libdispatch
/usr/libexec/locationd
/usr/libexec/terminusd
__DATA
__got
__auth_got
__auth_ptr
__nl_symbol_ptr
__const
__cfstring
__objc_intobj
__objc_floatobj
__objc_doubleobj
__objc_dataobj
__objc_dateobj
__objc_dictobj
__objc_arrayobj
__objc_arraydata
__mod_init_func
__mod_term_func
__objc_classlist
__objc_nlclslist
__objc_catlist
__objc_catlist2
__objc_nlcatlist
__objc_protolist
__objc_imageinfo
__const_cfobj2
__la_symbol_ptr
__objc_const
__objc_selrefs
__objc_classrefs
__objc_superrefs
__objc_protorefs
__stubs
__auth_stubs
-allow_sub_type_mismatches overrides LD_DYLIB_CPU_SUBTYPES_MUST_MATCH
-threaded_starts_section ignored ignored for non-arm64
-threaded_starts_section ignored for binaries other than -static or -preload
BristolOS
AppleACPIPlatform_executables
Sandbox_executables
DiskImages2
-rebase_section can only be used with 32-bit arm and -preload output type
-pie and -no_pie can't be used together
reconfigureDefaults
fNoLazyBinding
-no_pie is deprecated when targeting new OS versions
-no_pie ignored for arm64
kernelKit can only be used with -r, -kext and -static
_main
start
Ignoring '-e start' because entry point 'start' is not used for the targeted OS version
-sdk_version may not be used for zippered binaries
-sdk_version and -platform_version are not compatible, ignoring -sdk_version
MACOSX_DEPLOYMENT_TARGET
resetting alignment for arm firmware
base address 0x%llX is not properly aligned. Changing it to 0x%llX
Linking with PIE, -image_base will be ignored
ignoring -seg1addr 0x%08llX.  Address out of range.
prefered load addresses (-seg1addr) are disabled with chained fixups
OS dylibs should not add rpaths (linker option: -rpath) (Xcode build setting: LD_RUNPATH_SEARCH_PATHS)
@rpath
OS dylibs should not use @rpath for -install_name.  Use absolute path instead
OS dylibs -install_name should match its real absolute path
for arm64e unaligned pointer errors are fatal
-undefined dynamic_lookup is deprecated on %s
can't use -undefined warning or suppress with -twolevel_namespace
-sub_umbrella %s does not match a supplied dylib
-sub_library %s does not match a supplied dylib
-flat_namespace is deprecated on %s
-stack_addr must be < 4G for 32-bit processes
-stack_addr must be multiples of 4K
-stack_addr must be used with -stack_size
-stack_size must be < 4GB for 32-bit processes
custom stack placement overlaps and will disable shared region
-stack_size must be < 496MB
-stack_addr must be < 0x20000000 for arm
-stack_size must be <= 1TB
-stack_size must be <= 512MB
-stack_size must be < 512MB
-stack_size must be multiple of segment alignment (%lldKB)
-stack_size option can only be used when linking a main executable
-stack_size (0x%08llX) must be smaller than -stack_addr (0x%08llX)
-allow_stack_execute option can only be used when linking a main executable
-allow_heap_execute option can only be used when linking for i386
-allow_heap_execute option can only be used when linking a main executable
-client_name can only be used with -bundle
-init can only be used with -dynamiclib
-bundle_loader can only be used with -bundle
-dtrace can only be used when creating final linked images
-d can only be used with -r
-root_safe cannot be used with -r
-setuid_safe cannot be used with -r
.objc_category_name_
ignoring %s in export list
_OBJC_CLASS_$
ignoring Objc2 Class symbol %s in i386 export list
.objc_class_name_
_OBJC_CLASS_$_%s
_OBJC_METACLASS_$_%s
-kernel must be used with -static
-pagezero_size is too large, setting it to 4GB
to use chained fixups with static executables, use -fixup_chains_section
chained fixups cannot be used with relocatable object files
ignoring -pagezero_size, it's incompatible with the platform
non-standard -pagezero_size is deprecated when targeting macOS 13.0 or later
-pagezero_size not aligned, rounded up to: %#llx, use -segalign to change the alignment
-pagezero_size option can only be used when linking a main executable
-segaddr %s 0x%llX conflicts with -pagezero_size
duplicate -segaddr addresses for %s and %s
-r and -dead_strip cannot be used together
-rpath can only be used when targeting Mac OS X 10.5 or later
-rpath can only be used when creating a dynamic final linked image
-pie requires targetting a newer minimum version
-pie being ignored. It is only used when linking a main executable
-pie can only be used when linking a main executable
-read_only_relocs cannot be used with x86_64
-read_only_relocs cannot be used with arm64
-read_only_relocs cannot be used with arm64_32
-mark_auto_dead_strip can only be used when creating a dylib
-force_cpusubtype_ALL will become unsupported for ARM architectures
-reexported_symbols_list can only used used when created dynamic libraries
targeted OS version does not support -reexported_symbols_list
-dyld_env can only used used when created main executables
-segment_order can only used used with -preload output
-bitcode_verify is ignored without -bitcode_bundle
-bitcode_hide_symbols is ignored without -bitcode_bundle
-bitcode_symbol_map can only be used with -bitcode_hide_symbols
embedded dylibs/frameworks only run on iOS 8 or later
no object files specified
/AppleInternal/LinkerAutoZipperList.txt
Illegal platform count.  Only 2 platforms at a maximum can be specified
%s platform version must be at least 13.0
Only dylibs and bundles can be zippered, changing output to be macOS only.
The i386 architecture is deprecated for macOS (remove from the Xcode build setting: ARCHS)
/System/iOSSupport
AdLib
AVKit_iosmac
AuthKitUI_iosmac
Feldspar
OpenGL_iosmac
PassKitServices
SceneKit_swiftoverlay_SwiftUI_macCatalyst
Stocks
Frameworks installed in /System/iOSSupport can only have a macCatalyst LC_BUILD_VERSION
Chrono_iosmac
FCFEncoder_iosmac
GreenTorch
MaterialKit
ShareSheet_iosmac
UIKitSystemApp
VisualTestKit_iosmac
macCatalyst dylib found outside /System/iOSSupport. It should be in there or be zippered
%s in %s
platform not specified
-arch not specified
SRCROOT
ld64-954.16
Could not open or create -dependency_info file: %s
write() to -dependency_info failed, errno=%d
Could not open or create trace file (errno=%d): %s
x86_64
x86_64-
x86_64h
x86_64h-
i386
i386-
armv6
armv6-
armv7
thumbv7-
armv7-
armv7k
thumbv7k-
armv7s
thumbv7s-
armv6m
thumbv6m-
armv7m
thumbv7m-
armv7em
thumbv7em-
arm64
arm64-
aarch64-
arm64e
arm64e-
aarch64e-
arm64_32
arm64_32-
aarch64_32-
basic_string
nextMinorIndex
ld.hpp
minorIndex() < 0xffff
cstring=%s
copyFrom
&other != this
getNumBuckets() == other.getNumBuckets()
insert
/libclang_rt
/libcompiler-rt
AdvancePastEmptyBuckets
Ptr <= End
TheBucket
ValueInfoT::isPurgeable(TheBucket->getSecond())
grow
!FoundVal && "Key already in new map?"
reallocf failed
recursively loading %s
can't open %s: %s
can't stat %s: %s
can't malloc %s: %s
can't read the content of %s: %s
can't close %s: %s
v8@?0
%s: No read page method set
libcd_serialize_as_type
%s: No write method set
%s: nothing to serialize
%s: serialize superblob header failed
libcodedirectory.c
s->hash_types_count <= CSSLOT_ALTERNATE_CODEDIRECTORY_MAX
%s: serialize superblob indices failed
%s: serialize code directory type %d failed, error %d
%s: serialize raw blob data, slot %#x, failed
%s: serialize signature space(%zu) failed allocating space (%d)
%s: Failed to generate signature
%s: serialize signature space (%zu) failed
libcd_log
%s: unknown hash type %d (>= %d)
_libcd_get_hash_info
%s: internal error, hash len (%d) is larger than max known hash len (%d)
%s: write beyond end: %zu > %zu
_libcd_write_mem
%s: Failed to allocate temporary memory for code directory
_libcd_serialize_cd
%s: serialize page hashes failed
%s: failed to write directory
%s: Failed to allocated memory for cdhash
%s: read page %d at pos %zu failed (pages: %d)
_libcd_hash_page
object file (%s) was built for newer %s version (%s) than being linked (%s)
building for %s, but linking in object file (%s) built for %s,
building for %s, but linking in object file (%s) built for %s
building for %s, but linking in object file built for %s,
dylib (%s) was built for newer %s version (%s) than being linked (%s)
/usr/lib/system/libsystem_kernel.dylib
/usr/lib/system/libsystem_platform.dylib
/usr/lib/system/libsystem_pthread.dylib
building for %s, but linking in %s file (%s) built for %s,
QuickLookPlugins
building zippered for %s, but linking in unzippered twin %s file (%s) built for %s
building for %s, but linking in %s file (%s) built for %s
building zippered for %s, but linking in in unzippered twin %s built for %s,
building for %s, but linking in %s built for %s,
platform=%u
%d.%d.%d
%d.%d
macOS
IPHONEOS_DEPLOYMENT_TARGET
tvOS
-tvos_version_min
TVOS_DEPLOYMENT_TARGET
watchOS
-watchos_version_min
WATCHOS_DEPLOYMENT_TARGET
bridgeOS
-bridgeos_version_min
BRIDGEOS_DEPLOYMENT_TARGET
Mac Catalyst
iOS Simulator
-ios_simulator_version_min
tvOS Simulator
-tvos_simulator_version_min
watchOS Simulator
-watchos_simulator_version_min
DriverKit
-driverkit_version_min
sepOS
xrOS
XROS_DEPLOYMENT_TARGET
xrOS Simulator
free standing
macOS KernelKit
iOS KernelKit
tvOS KernelKit
watchOS KernelKit
xrOS KernelKit
bridgeOS KernelKit
__data
__common
__zerofill
__datacoal_nt
__const_coal
__textcoal_nt
__StaticInit
__IMPORT
__pointers
__comm/tent
__HEADER
__AUTH_CONST
__AUTH
__OBJC
__objc_classname
__objc_methname
__objc_methtype
__objc_methlist
__huge
__objc_msgrefs
__objc_ivar
__objc_data
__objc_const_ax
__llvm_prf_cnts
__llvm_prf_data
cannot move symbol '%s' from file %s to segment '%s' because symbol is not data (is %d)
symbol '%s', -move_to_rw_segment mapped it to %s/%s
__OBJC_$_INSTANCE_METHODS_
symbol '%s', .axsymbol mapped it to %s/%s
__OBJC_$_CLASS_METHODS_
cannot move symbol '%s' from file %s to segment '%s' because symbol is not code (is %d)
symbol '%s', -move_to_ro_segment mapped it to %s/%s
l_OBJC_$_INSTANCE_METHODS_
l_OBJC_$_CLASS_METHODS_
symbol '%s', -rename_section mapped it to %s/%s
symbol '%s', -rename_segment mapped it to %s/%s
symbol '%s', contains authenticated pointers, so mapped it to __AUTH/%s
symbol '%s', use default mapping to %s/%s
sortSections
ld.cpp
(sections[0]->type() == ld::Section::typeMachHeader) || ((sections[0]->type() == ld::Section::typeFirstSection) && (sections[1]->type() == ld::Section::typeMachHeader)) || ((sections[0]->type() == ld::Section::typePageZero) && (sections[1]->type() == ld::Section::typeMachHeader)) || ((sections[0]->type() == ld::Section::typePageZero) && (sections[1]->type() == ld::Section::typeFirstSection) && (sections[2]->type() == ld::Section::typeMachHeader))
__objc_
weak external symbol: %s
-sectalign is reducing the alignment of %s,%s from 2^%u to 2^%u
section %s (address=0x%08llX, size=%llu) would make the output executable exceed available address range
assignFileOffsets
prevSect->size == 0
Section layout:
  address:0x%08llX, alignment:2^%d, size:0x%08llX, padBytes:%d, section:%s/%s
Section (%s/%s) overlaps fixed address section (%s/%s)
ld total time
 option parsing time
 object file processing
 resolve symbols
 build atom list
 passess
 write output
pageins=%u, pageouts=%u, faults=%u
memory active: %lu, wired: %lu
processed %3u object files,  totaling %15s bytes
processed %3u archive files, totaling %15s bytes
processed %3u dylib files
wrote output file            totaling %15s bytes
ld: fatal warning(s) induced error (-fatal_warnings)
malformed
ld: %s
ld: %s for architecture %s
Assertion failed: (%s), function %s, file %s, line %d.
%d  %p  %s + %ld
A linker snapshot was created at:
ld: Assertion failed: (%s), function %s, file %s, line %d.
validateFixups
(fit->offsetInAtom <= atom.size()) || (fit->offsetInAtom == 0)
lastWasClusterEnd
!lastWasClusterEnd
fit->offsetInAtom == curClusterOffsetInAtom
fit->u.target != NULL
0 && "last fixup was not end of cluster"
setSectionOffset
%24s: % 4d.%d milliseconds (% 4d.%d%%)
%24s: % 4d.%d seconds (% 4d.%d%%)
%llu
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/ld64/src/ld/parsers/libunwind/AddressSpace.hpp
DW_EH_PE_textrel pointer encoding not supported
DW_EH_PE_datarel pointer encoding not supported
DW_EH_PE_funcrel pointer encoding not supported
DW_EH_PE_aligned pointer encoding not supported
ARM function not 4-byte aligned: %s from %s
arm64 function not 4-byte aligned: %s from %s
__LD
__aliases
x86_64??
arm???
relocations for section %s/%s extends beyond end of file,
CFISection::cfiParse() unexpected relocation type at r_address=0x%08X
malformed __eh_frame relocation, offset (0x%08X) is beyond end of section,
CFISection::cfiParse() unexpected relocation size at r_address=0x%08X
malformed __eh_frame section: %s
cfiParse
macho_relocatable_file.cpp
count == 0
unsupported address encoding (%02X) of personality function in CIE
addCiePersonalityFixups
nlpAtom->contentType() == ld::Atom::typeNonLazyPointer
personalityName
(reloc->r_type() == X86_64_RELOC_UNSIGNED) && "wrong reloc type on personality column in __compact_unwind section"
(parser.sectionForAddress(personalityAddr)->type() == ld::Section::typeCode) && "personality column in __compact_unwind section is not pointer to function"
(reloc->r_type() == GENERIC_RELOC_VANILLA) && "wrong reloc type on personality column in __compact_unwind section"
(reloc->r_type() == ARM64_RELOC_UNSIGNED) && "wrong reloc type on personality column in __compact_unwind section"
(personalitySection->type() == ld::Section::typeCode) && "personality column in __compact_unwind section is not pointer to function"
(reloc->r_type() == ARM_RELOC_VANILLA) && "wrong reloc type on personality column in __compact_unwind section"
makeFixups
0 && "x86_64 should not have non-lazy-pointer sections in .o files"
target.atom->contentType() == ld::Atom::ContentType::typeTLV
unexpected pointer to local symbol in section %s
src.atom->combine() == ld::Atom::combineByNameAndReferences
malformed mach-o, relocations not supported on section %s
malformed mach-o, reloc addr 0x%llX not in any atom
pcrel and X86_64_RELOC_UNSIGNED not supported
length < 2 and X86_64_RELOC_UNSIGNED not supported
alignment (%llu) of atom '%s' is too small and may result in unaligned pointers 
not pcrel and X86_64_RELOC_SIGNED* not supported
length != 2 and X86_64_RELOC_SIGNED* not supported
not pcrel and X86_64_RELOC_BRANCH not supported
___dtrace_probe$
___dtrace_isenabled$
length=%d and X86_64_RELOC_BRANCH not supported
not extern and X86_64_RELOC_GOT not supported
not pcrel and X86_64_RELOC_GOT not supported
length != 2 and X86_64_RELOC_GOT not supported
not extern and X86_64_RELOC_GOT_LOAD not supported
not pcrel and X86_64_RELOC_GOT_LOAD not supported
length != 2 and X86_64_RELOC_GOT_LOAD not supported
X86_64_RELOC_SUBTRACTOR cannot be pc-relative
X86_64_RELOC_SUBTRACTOR must have r_length of 2 or 3
X86_64_RELOC_SUBTRACTOR must have r_extern=1
X86_64_RELOC_SUBTRACTOR must be followed by X86_64_RELOC_UNSIGNED
X86_64_RELOC_UNSIGNED following a X86_64_RELOC_SUBTRACTOR cannot be pc-relative
X86_64_RELOC_UNSIGNED following a X86_64_RELOC_SUBTRACTOR must have same r_length
not extern and X86_64_RELOC_TLV not supported
not pcrel and X86_64_RELOC_TLV not supported
length != 2 and X86_64_RELOC_TLV not supported
unknown relocation type %d
r_length=0 and r_pcrel=0 not supported
r_length=3 not supported
r_extern=0 and r_type=GENERIC_RLEOC_TLV not supported
r_length!=2 and r_type=GENERIC_RLEOC_TLV not supported
unsupported i386 relocation type (%d)
addRelocFixup
src.atom != NULL
unsupported r_length=3 for scattered pc-rel vanilla reloc
unsupported r_length=%d for scattered vanilla reloc
GENERIC_RELOC_SECTDIFF missing following pair
bad length for GENERIC_RELOC_SECTDIFF
bad length for ARM_RELOC_VANILLA
for ARM_RELOC_HALF, next reloc is not ARM_RELOC_PAIR
bad r_value (0x%08X) for ARM_RELOC_VANILLA
ARM_RELOC_SECTDIFF missing following pair
bad length for ARM_RELOC_SECTDIFF
ARM_RELOC_HALF_SECTDIFF reloc missing following pair
scattered ARM_RELOC_HALF reloc missing following pair
unknown ARM scattered relocation type %d
ARM64_RELOC_ADDEND r_address does not match next reloc's r_address
pcrel and ARM64_RELOC_UNSIGNED not supported
length < 2 and ARM64_RELOC_UNSIGNED not supported
not pcrel and ARM64_RELOC_BRANCH26 not supported
r_extern == 0 and ARM64_RELOC_BRANCH26 not supported
r_length != 2 and ARM64_RELOC_BRANCH26 not supported
branch26 instruction at 0x%08X has embedded addend. ARM64_RELOC_ADDEND should be used instead
branch26 instruction at 0x%08X has embedded addend and ARM64_RELOC_ADDEND also used
not pcrel and ARM64_RELOC_PAGE21 not supported
r_extern == 0 and ARM64_RELOC_PAGE21 not supported
length != 2 and ARM64_RELOC_PAGE21 not supported
adrp instruction at 0x%08X has embedded addend. ARM64_RELOC_ADDEND should be used instead
adrp instruction at 0x%08X has embedded addend and ARM64_RELOC_ADDEND also used
pcrel and ARM64_RELOC_PAGEOFF12 not supported
r_extern == 0 and ARM64_RELOC_PAGEOFF12 not supported
length != 2 and ARM64_RELOC_PAGEOFF12 not supported
pageoff12 instruction at 0x%08X has embedded addend. ARM64_RELOC_ADDEND should be used instead
pageoff12 instruction at 0x%08X has embedded addend and ARM64_RELOC_ADDEND also used
not pcrel and ARM64_RELOC_GOT_LOAD_PAGE21 not supported
r_extern == 0 and ARM64_RELOC_GOT_LOAD_PAGE21 not supported
length != 2 and ARM64_RELOC_GOT_LOAD_PAGE21 not supported
ARM64_RELOC_ADDEND followed by ARM64_RELOC_GOT_LOAD_PAGE21 not supported
non-zero addend with ARM64_RELOC_GOT_LOAD_PAGE21 is not supported
pcrel and ARM64_RELOC_GOT_LOAD_PAGEOFF12 not supported
r_extern == 0 and ARM64_RELOC_GOT_LOAD_PAGEOFF12 not supported
length != 2 and ARM64_RELOC_GOT_LOAD_PAGEOFF12 not supported
ARM64_RELOC_ADDEND followed by ARM64_RELOC_GOT_LOAD_PAGEOFF12 not supported
not pcrel and ARM64_RELOC_TLVP_LOAD_PAGE21 not supported
r_extern == 0 and ARM64_RELOC_TLVP_LOAD_PAGE21 not supported
length != 2 and ARM64_RELOC_TLVP_LOAD_PAGE21 not supported
ARM64_RELOC_ADDEND followed by ARM64_RELOC_TLVP_LOAD_PAGE21 not supported
non-zero addend with ARM64_RELOC_TLVP_LOAD_PAGE21 is not supported
pcrel and ARM64_RELOC_TLVP_LOAD_PAGEOFF12 not supported
r_extern == 0 and ARM64_RELOC_TLVP_LOAD_PAGEOFF12 not supported
length != 2 and ARM64_RELOC_TLVP_LOAD_PAGEOFF12 not supported
ARM64_RELOC_ADDEND followed by ARM64_RELOC_TLVP_LOAD_PAGEOFF12 not supported
ARM64_RELOC_SUBTRACTOR cannot be pc-relative
ARM64_RELOC_SUBTRACTOR must have r_length of 2 or 3
ARM64_RELOC_SUBTRACTOR must have r_extern=1
ARM64_RELOC_SUBTRACTOR must be followed by ARM64_RELOC_UNSIGNED
ARM64_RELOC_ADDEND followed by ARM64_RELOC_SUBTRACTOR not supported
ARM64_RELOC_UNSIGNED following a ARM64_RELOC_SUBTRACTOR cannot be pc-relative
ARM64_RELOC_UNSIGNED following a ARM64_RELOC_SUBTRACTOR must have same r_length
r_extern == 0 and ARM64_RELOC_POINTER_TO_GOT not supported
ARM64_RELOC_ADDEND followed by ARM64_RELOC_POINTER_TO_GOT not supported
r_length != 2 and r_extern = 1 and ARM64_RELOC_POINTER_TO_GOT not supported
r_length != 3 and r_extern = 0 and ARM64_RELOC_POINTER_TO_GOT not supported
pcrel and ARM64_RELOC_AUTHENTICATED_POINTER not supported
r_extern == 0 and ARM64_RELOC_AUTHENTICATED_POINTER not supported
stripping authenticated relocation as image uses -preload or -static
ARM64_RELOC_AUTHENTICATED_POINTER value must have authenticated bit set
length < 3 and ARM64_RELOC_AUTHENTICATED_POINTER not supported
PerfUtils
ARM64_RELOC_UNSIGNED with length=2 not supported (64-bit pointer in arm64_32)
ARM64_RELOC_SUBTRACTOR must have r_length of 2
r_length != 2 ARM64_RELOC_POINTER_TO_GOT not supported
reloc->r_length() == 2
! reloc->r_pcrel()
stringTarget.atom != NULL
stringTarget.atom->contentType() == ld::Atom::typeCString
(reloc->r_address() & R_SCATTERED) == 0
reloc->r_type() == GENERIC_RELOC_VANILLA
arm64 Linker Optimiztion Hint %d has wrong number of arguments
arm64 Linker Optimiztion Hint addresses are not in same atom: 0x%08llX and 0x%08llX
arm64 Linker Optimiztion Hint address is not 4-byte aligned: 0x%08llX
arm64 Linker Optimiztion Hint addresses are too far apart: 0x%08llX and 0x%08llX
getULEB128
truncated uleb128 expression
malformed uleb128 expression
__eh_frame parsing problem.  Can't find target of reference to address 0x%08llX
__objc_stringobj
__gcc_except_tab
symbol index out of range
no symbol table
too little space allocated for parseCFIs
CFI length too long
FDE points to CIE outside __eh_frame section
FDE found for zero size function
dwarf unwind instructions could not be parsed
CIE ID is not zero
CIE version is not 1 or 3
ObjectFileAddressSpace<A>::getEncodedP() encoding 0x%08X not supported
malformed DW_CFA_offset_extended dwarf unwind, reg too big
malformed DW_CFA_restore_extended dwarf unwind, reg too big
malformed DW_CFA_undefined dwarf unwind, reg too big
malformed DW_CFA_same_value dwarf unwind, reg too big
malformed DW_CFA_register dwarf unwind, reg too big
malformed DW_CFA_register dwarf unwind, reg2 too big
malformed DW_CFA_def_cfa dwarf unwind, reg too big
malformed DW_CFA_def_cfa_register dwarf unwind, reg too big
malformed DW_CFA_expression dwarf unwind, reg too big
malformed DW_CFA_offset_extended_sf dwarf unwind, reg too big
malformed DW_CFA_def_cfa_sf dwarf unwind, reg too big
malformed DW_CFA_val_offset_sf dwarf unwind, reg too big
malformed DW_CFA_val_expression dwarf unwind, reg too big
malformed DW_CFA_GNU_negative_offset_extended dwarf unwind, reg too big
register saved more than once (might be shrink wrap)
cfa had negative offset (dwarf might contain epilog)
dwarf uses DW_CFA_GNU_args_size
dwarf uses DW_CFA_same_value
does not use RBP or RSP based frame
register %d saved somewhere other than in frame
non-standard register %d being saved in prolog
offset of saved registers too far to encode
saved registers not contiguous
stack size is large but stack subq instruction not found
stack subq instruction is too different from dwarf stack size
r15 is saved too far from return address
r14 is saved too far from return address
r13 is saved too far from return address
r12 is saved too far from return address
rbx is saved too far from return address
rbp is saved too far from return address
registers not save contiguously in stack
could not create compact unwind for %s: %s
could not create compact unwind: %s
does not use EBP or ESP based frame
stack size is large but stack subl instruction not found
stack subl instruction is too different from dwarf stack size
ebx is saved too far from return address
ecx is saved too far from return address
edx is saved too far from return address
edi is saved too far from return address
esi is saved too far from return address
ebp is saved too far from return address
saved registers do not fit in stack size
stack size is not 16-byte multiple
stack size is too large for frameless function
does not use standard frame
non standard register %d saved in frame
registers %d and %d not saved contiguously in frame
registers %d not saved contiguously in frame
malformed nlist string offset
Fixup
name != NULL
too may fixups in %s
targetAtom != NULL
sectionForAddress(0x%llX) address not in any section
ltmp
section does not use indirect symbol table
indirect symbol index out of range
addFixups
cl == ld::Fixup::k2of4
combined
R_ABS reloc but no absolute symbol at target address
findTargetFromAddressAndSectionNum
symbolIndex != INDIRECT_SYMBOL_LOCAL
target.atom != NULL
sectionForNum(%u) section number not for any section
findTargetFromAddress
findAtomByAddressOrLocalTargetOfStub
(this->combineFromSymbol(sym) != ld::Atom::combineByName) || (this->scopeFromSymbol(sym) != ld::Atom::scopeGlobal)
STACK_ALLOC_IF_SMALL allocation overflow
parse
cfiStartsArray[i] != cfiStartsArray[i-1]
_file->_atomsArrayCount == computedAtomCount && "more atoms allocated than expected"
fixupOffset == _allFixups.size()
info->function != NULL
__LD,__compact_unwind entries for %s have a gap at offset 0x%0X
__LD,__compact_unwind entries for %s overlap at offset 0x%0X
load command #%d has a unaligned size
load command #%d extends beyond the end of the load commands
load command #%d extends beyond the end of the file
mach-o symbol table extends beyond end of file
mach-o string pool extends beyond end of file
indirect symbol table extends beyond end of file
LC_DATA_IN_CODE table extends beyond end of file
malformed LC_LINKER_OPTION
LC_LINKER_OPTIMIZATION_HINTS table extends beyond end of file
more than one LC_SEGMENT found in object file
section %s/%s address out of range
section %s/%s has type zero-fill but non-zero file offset
section %s/%s offset out of range
unknown load command 0
malformed mach-o file, load command #%d is outside size of load commands
missing LC_SEGMENT
LC_SEGMENT fileoff too large
LC_SEGMENT filesize too large
too many sections for size of LC_SEGMENT command
overlapping sections
section index out of range
___dtrace_
probe$
isenabled$
L$start$
bad n_sect in symbol table
makeSortedSymbolsArray
p == &array[_symbolsInSections] && "second pass over symbol table yield a different number of symbols"
section %s/%s extends beyond end of file,
__DWARF
__debug_info
__debug_abbrev
__debug_line
__debug_str
__debug_str_offs
__compact_unwind
__LLVM
__bitcode
__cmdline
__swift_cmdline
__bundle
__asm
__image_info
section %s/%s has unexpectedly large size %llu in %s
can't parse %s/%s section in %s
__TEXT/__text has wrong section type
__cls_refs
__eh_frame
__ustring
__class
unknown section type %d
Object file with bitcode missing cmdline options: %s
internal error uknown SectionType
clang
swift
__constructor
__dyld
__program_vars
alignment for symbol at address 0x%08llX in %s exceeds 2^16
Atom
_symbolTableInclusion != symbolTableIn
_scope != scopeGlobal
malformed .o file, symbol has address 0x%0llX which is outside range of its section
definitionFromSymbol() bad symbol
in section %s,%s reloc %u: %s
N_ALT_ENTRY bit set on first atom in section %s/%s
data$
code$
jt8$
jt16$
jt32$
jta32$
unknown L$start$ label %s in file %s
uknown LC_DATA_IN_CODE kind (%d) at offset 0x%08X
malformed uleb128 kind in LC_LINKER_OPTIMIZATION_HINTS
malformed uleb128 count in LC_LINKER_OPTIMIZATION_HINTS
address count > 3 in LC_LINKER_OPTIMIZATION_HINTS
p < &_endAtoms[-1]
p->_objAddress == targetOfAlias->_objAddress
canCoalesceWith
this->type() == rhs.section().type()
rhsAtom != NULL
4-byte-literal
8-byte-literal
16-byte-literal
contentHash
atom->combine() == ld::Atom::combineByNameAndReferences
targetName
atom->fixupCount() == 1
non_lazy_ptr
0 && "should not have thread-local-pointer sections in .o files"
tlv_lazy_ptr
unsupported encoding in FDE of pointer to function
unsupported encoding in FDE of pointer to LSDA
strcmp(this->sectionName(), rhs.section().sectionName())== 0
strcmp(this->segmentName(), rhs.section().segmentName())== 0
cstring
cstringContent != NULL
rhsCstringContent != NULL
pointer-to-literal-cstring
targetCString
0 && "unsupported reference to selector"
target != NULL
target->contentType() == ld::Atom::typeCString
0 && "needs template specialization"
pointer-to-literal-objc-class-name
atom->fixupCount() == 2
missing target named %s
__llvm_prf_
anon
targetContent
fit->offsetInAtom == 0
___CFConstantStringClassReference
strcmp(fit->u.name, "___CFConstantStringClassReference") == 0
0 && "bad binding type"
strcmp(this->sectionName(), "__cfstring") == 0
CFString
targetClassName
0 && "unsupported binding in objc2 class ref section"
className != NULL
objc-class-ref
objc-cat-list
unlabeledAtomName
(aSect->flags() & SECTION_TYPE) == S_CSTRING_LITERALS
0 && "obj class name not found in symbol table"
0 && "obj class name not found"
TentativeDefinitionSection::findAtomByAddress() should never be called
__abs
AbsoluteSymbolSection::findAtomByAddress() should never be called
malformed __LD,__compact_unwind section, bad length
no bits should be set in UNWIND_PERSONALITY_MASK of compact unwind encoding in __LD,__compact_unwind section
relocations beyond end of file
malformed __compact_unwind relocation, offset (0x%08X) is beyond end of section,
unexpected extern relocation to lsda in __compact_unwind section
unexpected extern relocation in __compact_unwind section
too many compact unwind infos in function %s
too many compact unwind infos (%d) in file
setUnwindInfoRange
(startIndex+count) <= sect().file()._unwindInfos.size() && "unwindinfo index out of range"
indirect symbol name offset too large
can't parse dwarf compilation unit info in %s
parseDebugInfo
liOffset == entries.size()
can't find atom for stabs BNSYM at %08llX in %s
__dtrace_probe$
can't find atom for N_GSYM stabs %s in %s
can't find atom for stabs FUN at %08llX in %s
unknown stabs type 0x%X in %s
can't find atom for stabs 0x%X at %08llX in %s
dwarf DW_FORM_strp (offset=0x%08X) is too big in %s
unknown dwarf string encoding (form=%lld) in %s
Unknown DWARF format in __debug_str_offs %s
Inconsistent size of __debug_str_offs in %s
dwarf DW_FORM_strx (index=%llu) is too big in %s
dwarf DW_FORM_strx (offset=0x%08llX) is too big in %s
unknown dwarf DW_FORM_ for DW_AT_stmt_list in %s
incrementLineInfoCount
roomForMoreLineInfoCount()
src.atom->combine() == ld::Atom::combineNever
__swift
__category
!<arch>
not an archive
malformed archive, perhaps wrong architecture
archive has no table of contents
malformed archive TOC entry for %s, offset %d is beyond end of file %lld
malformed archive TOC entry for %s, offset %lld is beyond end of file %lld
makeObjectFileForMember
archive_file.cpp
memberIndex != 0
corrupt archive, member starts past end of file
corrupt archive, member contents extends past end of file
archive member '%s' with length %d is not mach-o or llvm bitcode
in %s, %s
forced load of %s(%s)
_OBJC_CLASS_$_
-ObjC forced load of %s(%s)
%s forced load of %s(%s)
getName
bufsz >= len+1
bufsz >= 16+1
unknown bitcode architecture
/tmp/lto.o
LLVM LTO, file is not of required architecture
__TEXT_
__tmp_lto
could not parse object file %s: '%s', using libLTO version '%s'
unknown definition kind for symbol %s in bitcode file %s
unknown scope for symbol %s in bitcode file %s
mergeIntoGenerator
lto_file.cpp
!_module && "Expected module to be disposed"
could not reparse object file %s: '%s', using libLTO version '%s'
_module && "Expected module to stick around"
addToThinGenerator
ld: LTO remark: %s
could not produce merged bitcode file
could not create set codegen model: %s
could not do LTO optimization: '%s', using libLTO version '%s'
could not do LTO codegen: '%s', using libLTO version '%s'
could not write LTO temp file '%s', errno=%d
optimizeLTO
f->ordinal() > lastOrdinal
lto: could not merge in %s because '%s', using libLTO version '%s'
/lto.o
unable to create ThinLTO cache directory: %s
.thinlto.bcs/
unable to create ThinLTO output directory for temporary bitcode files: %s
init_thinlto_codegen
atom->scope() != ld::Atom::scopeTranslationUnit && "LTO should not expose static atoms"
llvmAtoms.find(atom->name()) == llvmAtoms.end() && "Unexpected llvmAtom with duplicate name"
lto: could not use -thinlto because libLTO is too old (version '%d', >=18 is required)
.thinlto.o.bc
unable to write temporary ThinLTO output: %s
could not do ThinLTO codegen (thinlto_codegen_process didn't produce any object): '%s', using libLTO version '%s'
.thinlto.o
unable to create ThinLTO output directory for temporary object files: %s
Ignoring empty buffer generated by ThinLTO
could not write ThinLTO temp file '%s', errno=%d
doAtom
fit->binding == ld::Fixup::bindingDirectlyBound
0 && "indirect binding found in initial mach-o file?"
set_library
!sLTOIsLoaded
lto_get_version
lto_module_has_objc_category
lto_module_create_from_memory_with_path
lto_module_create_in_local_context
lto_module_create_from_memory
lto_module_dispose
lto_module_get_num_symbols
lto_module_get_symbol_name
lto_module_get_symbol_attribute
lto_codegen_add_module
lto_module_is_thinlto
lto_codegen_set_module
thinlto_codegen_add_module
thinlto_codegen_add_must_preserve_symbol
thinlto_codegen_add_cross_referenced_symbol
thinlto_codegen_set_cache_dir
thinlto_codegen_set_cache_pruning_interval
thinlto_codegen_set_final_cache_size_relative_to_available_space
thinlto_codegen_set_cache_entry_expiration
thinlto_codegen_process
thinlto_module_get_num_objects
thinlto_module_get_object
thinlto_module_get_num_object_files
thinlto_module_get_object_file
thinlto_codegen_set_pic_model
thinlto_codegen_set_savetemps_dir
thinlto_set_generated_objects_dir
thinlto_codegen_disable_codegen
thinlto_codegen_set_codegen_only
thinlto_debug_options
lto_codegen_create_in_local_context
lto_codegen_set_diagnostic_handler
lto_codegen_create
lto_codegen_debug_options
lto_codegen_debug_options_array
lto_codegen_dispose
lto_codegen_set_assembler_path
thinlto_create_codegen
lto_api_version
lto_codegen_compile_optimized
lto_module_is_object_file_in_memory_for_target
lto_codegen_set_should_embed_uselists
lto_codegen_compile
lto_get_error_message
lto_module_create_in_codegen_context
lto_codegen_optimize
lto_codegen_write_merged_modules
lto_codegen_set_should_internalize
lto_codegen_set_cpu
lto_codegen_set_pic_model
lto_codegen_add_must_preserve_symbol
can't open thinlto file '%s', errno=%d
fstat thinlto file '%s' failed, errno=%d
ThinLTO file '%s' too small (length=%zu)
can't map file, errno=%d
@rpath/libLTO.dylib
import-atom
dyld_stub_binder
can't link with bundle (MH_BUNDLE) only dylibs (MH_DYLIB)
can't link with a main executable
architecture %s not present in dylib file %s, attempting fallback
mach-o string pool extends beyond end of file in %s
malformed mach-o: LC_ID_DYLIB load command has offset (%u) outside its size (%u)
malformed mach-o: LC_ID_DYLIB load command string extends beyond end of load command
subframework name offset (%u) outside its size (%u)
subclient name offset (%u) outside its size (%u)
segment %s load command size does not match nsects
section %s file offset too large
malformed dylb, load command #%d is outside size of load commands in %s
malformed mach-o: LC_*_DYLIB load command has offset (%u) outside its size (%u)
malformed mach-o: LC_*_DYLIB load command string extends beyond end of load command
malformed dylib has MH_NO_REEXPORTED_DYLIBS flag but no LC_REEXPORT_DYLIB load commands: %s
dylib %s missing LC_ID_DYLIB load command
binary missing LC_SYMTAB load command
binary missing LC_DYSYMTAB load command
malformed mach-o, symbol table not in __LINKEDIT
malformed mach-o, symbol table strings not in __LINKEDIT
malformed mach-o, indirect symbol table nextdefsym exceeds nsyms
ld: building hashtable from export trie in %s
malformed mach-o dylib, exports trie extends beyond end of file
malformed trie, node past end
malformed trie, terminalSize extends beyond trie data
malformed trie, childNodeOffset==0
malformed uleb128 extends beyond trie
uleb128 too big for 64-bits
ld: building hashtable of %u toc entries for %s
ld: building hashtable of %u entries for %s
/usr/lib/libSystem.B.dylib
$ld$
$os%d.%d$
hide$
  adding %s to ignore set for %s
add$
weak$
install_name$
/System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices
compatibility_version$
bad symbol action: %s in dylib %s
bad symbol condition: %s in dylib %s
__mach_header
___dso_handle
__mh_execute_header
__mh_dylib_header
__mh_bundle_header
__mh_dylinker_header
__mh_object_header
__mh_preload_header
__pagezero
__stack
text-stub
unsupported file format (
 0x%02X
could not find inlined dylib file: %s
could not parse inlined dylib file: %s(%s)
can't open file, errno=%d
fstat(%s) failed, errno=%d
file too small (length=%llu)
malformed universal file: %s
v40@?0I8I12r^v16Q24^B32
truncated fat file. Slice from %llu to %llu is past end of file with length %llu
can't re-map file, errno=%d
file is universal (%s) but does not contain the %s architecture: %s
lto file was built for %s which is not the architecture being linked (%s): %s
libLTO.dylib
/../lib/libLTO.dylib
could not process llvm bitcode object file, because %s could not be loaded
ignoring unexpected dylib file
ignoring unexpected dylib text stub file
building for %s-%s but attempting to link with file built for %s-%s
[Logging for XBS] Used upward dynamic library: %s
[Logging for XBS] Speculatively loaded dynamic library: %s
[Logging for XBS] Speculatively loaded indirect dynamic library: %s
[Logging for XBS] Used indirect dynamic library: %s
[Logging for XBS] Used dynamic library: %s
[Logging for XBS] Used static archive: %s
indirect dylib at %s is not a dylib
ignoring -dylib_file option, %s
in '%s', %s
framework linker option at %s is not a dylib and not an archive
but linking
%s '%s.framework'
linker option dylib at %s is not a dylib
%s '%s'
createIndirectDylibs
InputFiles.cpp
dylib->indirectLibrariesProcessed() && "Internal error, dylib has indirect libraries processed but it's not marked"
opaque_section
/CloudKitCode.framework
/CloudKitCodeProtobuf.framework
/Helix.framework
/NewsCore.framework
/NewsServicesInternal.framework
/NewsTransport.framework
/NewsUI.framework
/Silex.framework
%s did not mark %s as an allowable client
cannot link directly with %s.  Link against the umbrella framework '%s.framework' instead.
cannot link directly with dylib/framework, your binary is not an allowed client of %s
architecture
attempting to link
ignoring file %s, %s
ignoring unexpected
%s, %s
%s file '%s'
parseWorkerThread
slot < (int)files.size()
ignoring upward dylib option for %s
Unknown file type for %s
unexpected dylib (%s) on link line
exit-asm.o
/usr/lib/system/libsystem_pthread
/usr/lib/libobjc-trampolines.dylib
dynamic executables or dylibs must link with libSystem.dylib
nextCounter
counter() < 0xffff
/libswift
page zero
custom stack
duplicate symbol '%s' in:
%d duplicate symbol%s
duplicate symbol '
' in:
    
addByName
SymbolTable.cpp
newAtom.name() != NULL
&newAtom != existingAtom
atom.scope() != ld::Atom::scopeTranslationUnit
markCoalescedAway
removeDeadAtoms
atom != NULL
findSlotForContent
0 && "section type does not support coalescing by content"
findSlotForReferences
0 && "section type does not support coalescing by references"
indirectName
slot < _indirectBindingTable.size()
indirectAtom
tentative definition of '%s' with size %llu from '%s' is being replaced by real definition of smaller size %llu from '%s'
pickCommonsMode
dylib.definition() == ld::Atom::definitionTentative
proxy.definition() == ld::Atom::definitionProxy
using common symbol %s from %s and ignoring definition from dylib %s
replacing common symbol %s from %s with true definition from dylib %s
common symbol %s from %s conflicts with definition from dylib %s
symbol %s exported from both %s and %s
__import
malformed section$ symbol name: %s
__thread_bss
__thread_data
__thread_vars
reference to non-existent __zerofill section because -merge_zero_fill_sections option not used
grandfathering in old symbol '%s' as alias for 'section$%s$%s$%s'
malformed segment$ symbol name: %s
__start
__end
grandfathering in old symbol '%s' as alias for 'segment$%s$%s'
command line
unknown linker option from object file ignored: '%s' in %s
unknown linker option from object file ignored: '%s' '%s' from %s
unknown linker option from object file ignored, starting with: '%s' from %s
'%s' does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target.
all bitcode will be dropped because '%s' was built without bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. 
bitcode bundle could not be generated because '%s' was built without full bitcode. All object files and libraries for bitcode must be generated from Xcode Archive or Install build
'%s' was built with class_ro_t pointer signing enabled, but previous .o files were not
'%s' was not built with class_ro_t pointer signing enabled, but previous .o files were
%s compiled with newer version of Swift language (%s) than previous files (%s)
not all .o files built with same Swift language version. Started with (%s), now found (%s) in
%s compiled with older version of Swift language (%s) than previous files (%s)
CPU_SUBTYPE_ARM_ALL subtype is deprecated: %s
object file %s was built for different arm sub-type (%d) than link command line (%d)
object file %s was built for different x86_64 sub-type (%d) than link command line (%d)
object file built with an incompatible arm64e ABI: '%s'
kernel
user
object file was built for different arm64e ABI (%s version %u) than earlier object files (%s version %u): %s
all bitcode will be dropped because '%s' was built without bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target.
bitcode bundle could not be generated because '%s' was built without full bitcode. All frameworks and dylibs for bitcode must be generated from Xcode Archive or Install build
LD_DISALLOW_SWIFT_LINKING_SWIFT
/System/Library/PrivateFrameworks/Swift
embedded dylibs/frameworks are only supported on iOS 8.0 and later (%s)
doFile
Resolver.cpp
depInstallName != NULL
invalid -install_name (%s) in dependent dylib (%s). Dylibs/frameworks which might go in dyld shared cache cannot link with dylib that uses @rpath, @loader_path, etc.
invalid -install_name (%s) in dependent dylib (%s). Dylibs/frameworks which might go in dyld shared cache cannot link with dylibs that won't be in the shared cache
'%s' is implemented in bitcode, but it was loaded too late
__swift5_reflstr
__swift5_fieldmd
__swift5_assocty
cannot export hidden symbol %s
target OS does not support re-exporting symbol %s from %s
target OS does not support re-exporting symbol %s
cannot export hidden symbol %s from %s
requested re-export symbol %s is not from a dylib, but from %s
ignoring alias of itself '%s'
static initializer found in '%s'
static initializer found in '%s'. Use -no_inits to make this an error.  Use -no_warn_inits to suppress warning
convertReferencesToIndirect
0 && "wrong combine type for bind by content"
_objc_msgSend$
resolveAllUndefines
curAtom != NULL
_objc_msgSend
%s from %s
markLive
0 && "bad binding during dead stripping"
remainingUndefines
0 && "should not be by-name this late"
liveUndefines
      Dwarf Exception Unwind Info (__eh_frame) in %s
      %s in %s
      ...
B16@?0^v8
Could not find or use auto-linked library '%s'
Could not find or use auto-linked framework '%s'
Undefined symbols for architecture %s:
Undefined symbols:
  "%s", referenced from:
     -init command line option
     -exported_symbol[s_list] command line option
     -reexported_symbols_list command line option
     implicit entry/start for main executable
     -u command line option
     (maybe you meant: %s
, %s 
  NOTE: a missing vtable usually means the first non-inline virtual member function has no definition.
     (found %s in %s, declaration possibly missing extern "C")
symbol(s) not found
v20@?0r*8B16
entry point (%s) undefined.  Usually in crt1.o
entry point (%s) undefined.
-init function (%s) found in linked dylib, must be in dylib being linked
dyld_stub_binding_helper
linking swift frameworks against other swift frameworks (%s) is not permitted
syncAliases
atom->fixupsBegin() != atom->fixupsEnd()
fit->kind == ld::Fixup::kindNoneFollowOn
0 && "internal error: unexpected alias binding"
cannot force to be weak, non-external symbol %s
cannot force to be not-weak, non-external symbol %s
disabling chained fixups because of unaligned pointers
__dt_tests
output will be > 64MB, so chained fixups being disabled. Use -no_fixup_chains to silence this warning
binary is too big to use -fixup_chains
digraph dg
concentrate = true;
rankdir = LR;
addr%p [ shape = plaintext, label = "%s" ];
addr%p [ label = "string: '
\x%02hhx
'" ];
addr%p [ label = "%s" ];
addr%p -> addr%p;
{ rank = same; 
addr%p; 
could not write dot output file: %s
unknown ABI version 0x%02X
string_view::substr
undefined base symbol '%.*s' for alias '%s'
ignoring undefined symbol %.*s from -exported_symbols_list
ignoring undefined symbol %s from -exported_symbols_list
copyThreadsLoadCommand
HeaderAndLoadCommands.hpp
_state.entryPoint != NULL
size
LinkEdit.hpp
_encoded
copyRawContent
addSplitSegInfo
false
codegen at address 0x%08llX prevents image from working in dyld shared cache
extra < 16
authenticated pointer at address 0x%08llX prevents image from working in dyld shared cache
__code_sign
encode
codeSignSect->atoms[0] == this
can't determine codesign hash for output platform
hash
error code signing
__string_pool
internal error: atom is missing a symbolIndex(%s)
writable (__DATA) segment not found
LinkEditClassic.hpp
encodeSectionReloc
0 && "need to handle -r reloc"
entry.toAddend < 0x400000
entry.fromTarget == NULL
entry.hasAuthData
0 && "need to handle arm64 -r reloc"
updateLINKEDITAddresses
OutputFile.cpp
_codeSignatureAtom != NULL
setLoadCommandsPadding
strcmp(state.sections[1]->sectionName(),"__text") == 0
unexpected binding
unexpected bindingNone
unexpected bindingByNameUnbound
reference to bitcode symbol '%s' which LTO has not compiled
reference to symbol (which has not been assigned an address) %s
sectionOffsetOf
section not found for section offset
tlvTemplateOffsetOf
section not found for tlvTemplateOffsetOf
final section layout:
    %s/%s addr=0x%08llX, size=0x%08llX, fileOffset=0x%08llX, type=%d
8-bit reference out of range (%lld max is +/-127B): from %s (0x%08llX) to %s (0x%08llX)
16-bit reference out of range (%lld max is +/-32KB): from %s (0x%08llX) to %s (0x%08llX)
32-bit branch out of range (%lld max is +/-2GB): from %s (0x%08llX) to %s (0x%08llX)
32-bit absolute address out of range (0x%08llX max is 4GB): from %s + 0x%08X (0x%08llX) to 0x%08llX
32-bit absolute address out of range (0x%08llX max is 4GB): from %s + 0x%08X (0x%08llX) to %s (0x%08llX)
32-bit RIP relative reference out of range (%lld max is +/-2GB): from %s (0x%08llX) to %s (0x%08llX)
ARM ldr 12-bit displacement out of range (%lld max is +/-4096B): from %s (0x%08llX) to %s (0x%08llX)
b/bl/blx ARM branch out of range (%lld max is +/-32MB): from %s (0x%08llX) to %s (0x%08llX)
b/bl/blx thumb2 branch out of range (%lld max is +/-16MB): from %s (0x%08llX) to %s (0x%08llX)
b/bl/blx thumb1 branch out of range (%lld max is +/-4MB): from %s (0x%08llX) to %s (0x%08llX)
b(l) ARM64 branch out of range (%lld max is +/-128MB): from %s (0x%08llX) to %s (0x%08llX)
ARM64 ADRP out of range (%lld max is +/-4GB): from %s (0x%08llX) to %s (0x%08llX)
setInfo
info->fixup->firstInCluster()
0 && "expected addend"
applyFixUps
_options.outputKind() != Options::kObjectFile
TLV load reloc does not point to a movl instruction
GOT load reloc does not point to a movq instruction
TLV load reloc does not point to a movq instruction
initializer '%s' is >4GB from start of image
(accumulator & 0xFFFFFFFF00000000ULL) == 0
_authenticatedFixupData.find(fixupOffset) == _authenticatedFixupData.end()
TLV load reloc does not point to a movl <abs-address>,<reg> instruction
no pc-rel bx arm instruction. Can't fix up branch to %s in %s
don't know how to convert instruction %x referencing %s to thumb
armv7 has no pc-rel bx thumb instruction. Can't fix up branch to %s in %s
don't know how to convert branch instruction %x referencing %s to bx
armv6 has no pc-rel bx thumb instruction. Can't fix up branch to %s in %s
128-bit LDR/STR not 16-byte aligned: from %s (0x%08llX) to %s (0x%08llX)
16-bit LDR/STR not 2-byte aligned: from %s (0x%08llX) to %s (0x%08llX)
32-bit LDR/STR not 4-byte aligned: from %s (0x%08llX) to %s (0x%08llX)
64-bit LDR/STR not 8-byte aligned: from %s (0x%08llX) to %s (0x%08llX)
Reloc does not point to an ADD instruction in %s
GOT load reloc does not point to a LDR instruction in %s
TLV load reloc does not point to a LDR instruction in %s
pos->second == NULL && "two fixups in same hint location"
ignoring linker optimization hint at %s+0x%X because alt.info.count == 1
ignoring linker optimization hint at %s+0x%X because isPageKind(infoA.fixup)
ignoring linker optimization hint at %s+0x%X because isPageOffsetKind(infoB.fixup)
ignoring linker optimization hint at %s+0x%X because infoA.target == infoB.target
ignoring linker optimization hint at %s+0x%X because infoA.targetAddress == infoB.targetAddress
ignoring linker optimization hint at %s+0x%X because isADRP
ignoring linker optimization hint at %s+0x%X because isLDR
ignoring linker optimization hint at %s+0x%X because ldrInfoB.baseReg == adrpInfoA.destReg
ignoring linker optimization hint at %s+0x%X because ldrInfoB.offset == (infoA.targetAddress & 0x00000FFF)
adrp-ldr at 0x%08llX transformed to LDR literal, usableSegment=%d usableSegment
adrp-ldr at 0x%08llX not transformed, isLDR=%d, literalableSize=%d, inRange=%d, usableSegment=%d, scaledOffset=%d
ignoring linker optimization hint at %s+0x%X because alt.info.count == 2
ignoring linker optimization hint at %s+0x%X because infoC.fixup == NULL
ignoring linker optimization hint at %s+0x%X because isADD
ignoring linker optimization hint at %s+0x%X because adrpInfoA.destReg == addInfoB.srcReg
ignoring linker optimization hint at %s+0x%X because addInfoB.destReg == ldrInfoC.baseReg
adrp-add-ldr at 0x%08llX T1 transformed to LDR literal
adrp-add-ldr at 0x%08llX T4 transformed to ADR/LDR
adrp-add-ldr at 0x%08llX T2 transformed to ADRP/LDR 
adrp-add-ldr at 0x%08llX could not be transformed, loadSize=%d, literalableSize=%d, inRange=%d, usableSegment=%d, targetFourByteAligned=%d, imm12=%d
adrp-add at 0x%08llX transformed to ADR
adrp-add at 0x%08llX not transformed, isAdd=%d, inRange=%d, usableSegment=%d
ignoring linker optimization hint at %s+0x%X because isPageKind(infoA.fixup, true)
ignoring linker optimization hint at %s+0x%X because isPageOffsetKind(infoB.fixup, true)
ignoring linker optimization hint at %s+0x%X because (_options.architecture() == CPU_TYPE_ARM64 && ldrInfoB.size == 8) || (_options.architecture() == CPU_TYPE_ARM64_32 && ldrInfoB.size == 4)
ignoring linker optimization hint at %s+0x%X because !ldrInfoB.isFloat
ignoring linker optimization hint at %s+0x%X because ldrInfoC.baseReg == ldrInfoB.reg
adrp-ldr-got-ldr at 0x%08llX T5 transformed to LDR literal of GOT plus LDR
adrp-ldr-got-ldr at 0x%08llX no optimization done
ignoring linker optimization hint at %s+0x%X because addInfoB.srcReg == adrpInfoA.destReg
adrp-ldr-got-ldr at 0x%08llX T1 transformed to LDR literal
adrp-ldr-got-ldr at 0x%08llX T4 transformed to ADR/LDR
adrp-ldr-got-ldr at 0x%08llX T2 transformed to ADRP/NOP/LDR
adrp-ldr-got-ldr at 0x%08llX T3 transformed to ADRP/ADD/LDR
adrp-ldr-got-ldr at 0x%08llX not ADD or LDR
ignoring linker optimization hint at %s+0x%X because isSTR
adrp-add-str at 0x%08llX T4 transformed to ADR/STR
adrp-add-str at 0x%08llX T2 transformed to ADRP/STR 
adrp-add-str at 0x%08llX could not be transformed, loadSize=%d, inRange=%d, usableSegment=%d, imm12=%d
adrp-ldr-got-str at 0x%08llX T5 transformed to LDR literal of GOT plus STR
adrp-ldr-got-str at 0x%08llX no optimization done
adrp-ldr-got-str at 0x%08llX T4 transformed to ADR/STR
adrp-ldr-got-str at 0x%08llX T4 transformed to ADRP/NOP/STR
adrp-ldr-got-str at 0x%08llX T3 transformed to ADRP/ADD/STR
adrp-ldr-got-str at 0x%08llX not ADD or LDR
adrp-ldr-got at 0x%08llX T5 transformed to NOP/LDR
adrp-ldr-got at 0x%08llX T4 transformed to ADR/STR
adrp-ldr-got at 0x%08llX not LDR or ADD
adrp-ldr-got at 0x%08llX not ADRP
unknown hint kind %d alt.info.kind at 0x%08llX
ignoring linker optimization hint at %s+0x%X because isPageKind(infoB.fixup)
may-reused-adrp at 0x%08llX no longer an ADRP, now 0x%08X
setFixup64
b->ordinal == bindOrdinal
reconstituted == accumulator
reconstituted == (accumulator - _options.machHeaderVmAddr())
chained binds not implemented yet
setFixup64e
r->target == vmOffset
setFixup32
r->target == accumulator
accumulator < _chainedFixupBinds.maxRebase()
%s in '%s' from %s
%s in '%s'
writeAtoms
_threadedRebaseBindIndices.empty()
threadStartsSection
binding address outside range of any segment
overflow in thread starts section
atom->size() == 0
threadStartsAtom == nullptr
offset < 0x100000000
0 && "unknown pointer format for chain starts"
pre-computed __chain_starts section too small
(((dyld_chained_ptr_arm64e_rebase*)prevLoc)->next * 8) == delta && "next out of range"
(((dyld_chained_ptr_arm64e_rebase*)prevLoc)->next * 4) == delta && "next out of range"
(((dyld_chained_ptr_64_rebase*)prevLoc)->next * 4) == delta && "next out of range"
0 && "unknown pointer format"
__chainfixups
nextOverflowSlot <= maxOverFlowCount
farthestChainableLocation
_chainedFixupBinds.maxRebase() < maxTargetOffset
chain32bitPointers
prevLoc->next == steps
curLoc->next == lastSteps
__symbol_table
computeContentUUID
firstStabNlistFileOffset <= firstStabStringFileOffset
checksumStart <= regionStart && regionStart <= regionEnd && "Region overlapped"
can't write output file: %s
LD_FORCE_PWRITE_FILE
can't open output file for writing '%s', errno=%d
not enough disk space for writing '%s'
can't grow file for writing '%s', errno=%d
can't create buffer of %llu bytes for output
can't open output file for writing: %s, errno=%d
can't set permissions on output file: %s, errno=%d
can't move output file in place, errno=%d
can't write to output file: %s, errno=%d
writeOutputFile
_options.hideSymbols() && _options.reverseSymbolMapPath() != NULL && "Must hide symbol and specify a path"
%s/%s.bcsymbolmap
could not create bcsymbolmap file: %s
partitionSymbolTable
resolver functions should be external, but '%s' is hidden
bad special linker symbol '%s'
linker symbol '%s' adds already existing symbol '%s'
linker symbol '%s' hides a non-existent symbol '%s'
-preload not supported
unknown architecture
dylibByOrdinal
ordinal > 0
ordinal <= _dylibsToLoad.size()
dylibToOrdinal
it != _dylibToOrdinal.end()
symbol '%s' re-exported from %s and %s
compressedOrdinalForAtom
0 && "dylib not assigned ordinal"
-undefined dynamic_lookup cannot be used to find '%s' in dylib in dyld shared cache
can't find ordinal for imported symbol '%s'
overrides weak external symbol: %s
buildLinkEditOpcodes
minusTarget != NULL
dylibs for dyld cache cannot use B key of auth-pointer, found in %s
unaligned pointer(s)
_sectionsRelocationsAtom != NULL
_rebasingInfoAtom != NULL
_bindingInfoAtom != NULL
_lazyBindingInfoAtom != NULL
_weakBindingInfoAtom != NULL
too many symbols (%lu) max %d
buildChainedFixupInfo
pointer not aligned at address 0x%llX ('%s' + %u from %s)
pointer not aligned at page boundary address 0x%llX ('%s' + %u from %s)
text reloc in %s to %s
Absolute addressing not allowed in arm64 code but used in '%s' referencing '%s'
PIE disabled. Absolute addressing (perhaps -mdynamic-no-pic) not allowed in code signed PIE, but used in %s from %s. To fix this warning, don't compile with -mdynamic-no-pic or link with -Wl,-no_pie
illegal text-relocoation (direct reference) to (global,weak) %s in %s from %s in %s
illegal text-relocation to '%s' in %s from '%s' in %s
illegal text reloc in '%s' (from %s) to '%s'
direct access in function '%s' from file '%s' to global weak symbol '%s' from file '%s' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.
addDyldInfo
minusTarget->definition() != ld::Atom::definitionProxy
target->definition() != ld::Atom::definitionProxy
fixupWithTarget->u.target == target
addend == 0
illegal data reference in %s to thread local variable %s in dylib %s
.objc_class_
!needsLazyBinding
data symbol %s from %s has pointer to %s + 0x%08llX. That large of an addend may disable %s from being put in the dyld shared cache.
pointer not aligned at address 0x%llX (%s + %lld from %s)
addend too large. '%s' contains a pointer to %s+%llu. Dylibs in dyld shared cache can have max addend of 31
addChainedFixupLocation
addThreadedRebaseInfo
pointer not aligned to at least 4-bytes at address 0x%llX (%s + %lld from %s)
addClassicRelocs
fixupWithTarget != NULL
pointer not aligned at address 0x%llX (%s -> %s)
Unhandled kind
no supported runtime lo16 relocation in %s from %s to %s
no supported runtime hi16 relocation in %s from %s to %s
authenticated pointer in atom %s from %s to %s is not supported
useExternalSectionReloc
addSectionRelocs
__interpose sections cannot be used in dylibs put in the dyld cache
makeSplitSegInfo
authenticated pointers are not supported in split seg v1
makeSplitSegInfoV2
!hadSubtract
toSectionIndex != 255
# Path: %s
# Arch: %s
v16@?0r*8
# Object files:
[%3u] %s
linker synthesized
# Sections:
# Address
Size    
Segment
Section
0x%08llX
0x%08llX
# Symbols:
# Address
Size    
File  Name
literal string: 
non-lazy-pointer
non-lazy-pointer-to: 
non-lazy-pointer-to-local: 
0x%08llX
0x%08llX
[%3u] %s
AppleMarconiWIFIPhyFirmware
# Dead Stripped Symbols:
#        
Size    
File  Name
<<dead>> 
0x%08llX
[%3u] %s
could not write map file: %s
"uuid":"
"name":"
"arch":"
,"dynamic":[
,"upward-dynamic":[
,"re-exports":[
,"weak":[
,"archives":[
,"bundle-loader":
,"order-file":
ordinal
it != _bindOrdinalsWithNoAddend.end()
0 && "bind ordinal missing"
__local_relocs
__extrn_relocs
__dataInCode
__ind_sym_tab
__sect_relocs
__export
__rebase
__binding
__weak_binding
__lazy_binding
__splitSegInfo
__funcStarts
__opt_hints
finalAddress
_mode == modeFinalAddress
setSectionStartAddress
NO BINDING
BAD BINDING
%s@0x%08llX
makeLoadOrStore
(info.offset % 2) == 0
(info.offset % 4) == 0
0 && "cannot use signed32 with 32-bit load/store"
(info.offset % 8) == 0
info.signEx == signedNot
(info.offset % 16) == 0
info.isFloat
0 && "bad load/store size"
imm12Bits < 4096
makeLDR_literal
delta < 1024*1024
delta > -1024*1024
(info.reg & 0xFFFFFFE0) == 0
(targetAddress & 0x3) == 0
(instructionAddress & 0x3) == 0
!info.isStore
0 && "invalid load size for literal"
makeADR
(destReg & 0xFFFFFFE0) == 0
chainedFixupBindAddendFitsInline
0 && "Binds are not supported"
0 && "Unknown pointer format"
operator()
addressA != addressB
(delta & (fixupAlignment - 1)) == 0
value == 0
accumulator >= baseAddress
((value & ~0xFF0003FFFFFFFFFF) == 0) || ((value & ~0xFF0003FFFFFFFFFF) == ~0xFF0003FFFFFFFFFF)
setMachoSection
x != 0
x < 256
CodeSignatureAtom
opts.outputKind() != Options::kObjectFile
machoSection
_machoSection != 0
code signature
string pool
scattered reloc r_address too large
local relocations
addPointerReloc
length == 4 || length == 8
external relocations
_pointerLocations.size() == 0
_callSiteLocations.size() == 0
data-in-code info
overlapping data-in-code in '%s' at offset 0x%04X
encodeEntry
0 && "bad L$start$ label to encode"
indirect symbol table
internal error: stub missing fixup to lazy pointer
symIndexOfLazyPointerAtom
internal error: lazy pointer missing fixupLazyTarget fixup
internal error: unexpected non-lazy pointer binding
symbol table
l%03u
addGlobal
addImport
classicOrdinalForProxy
atom->definition() == ld::Atom::definitionProxy
dylib != NULL
addLocal
atom->symbolTableInclusion() != ld::Atom::symbolTableNotIn
LC%u
EH_Frame1
func.eh
isAltEntry
chainStart != NULL
chainLeadsTo
nextAtom != NULL
callReloc
0 && "external call relocs not implemented"
section relocations
fixup chain info
encode_block_invoke
isBind
anImport.name_offset == nameOffset
(uint64_t)anImportA.addend == addend
anImportA.name_offset == nameOffset
v28@?0I8r^{Atom=^^?^{Section}QISCb2b2b1b1b1b1b5b3b2b2b1b1b1b1b1b8b2}12Q20
export info
not adding explicit re-export for symbol '%s' because it is already re-exported from dylib '%s'
aliasOf != NULL
{Export={basic_string_view<char, std::char_traits<char>>=*Q}QQQ{basic_string_view<char, std::char_traits<char>>=*Q}}16@?0Q8
error creating exports trie: %s
stubForResolverFunction
0 && "no stub for resolver function"
rebase info
unsupported rebase type with linked list opcodes
binding info
unsupported bind type with linked list opcodes
too many binds (%llu).  The limit is 65536
encodeV2
(address & 7) == 0
weak binding info
lazy binding info
lazy binding address outside range of any segment
split seg info
this->_encodedData.size() == 0
double split seg info for same address
function starts
addr != badAddress
OptimizationHintsAtom
opts.outputKind() == Options::kObjectFile
linker optimization hints
/%s.framework/
mach-o header and load commands
unknonwn mach-o file type
sectionFlags
0 && "typeTempLTO should not make it to final linked image"
0 && "typeAlias should not make it to final linked image"
0 && "typeAbsoluteSymbols should not make it to final linked image"
0 && "typeTentativeDefs should not make it to final linked image"
0 && "typeFirstSection should not make it to final linked image"
0 && "typeLastSection should not make it to final linked image"
copyChainedFixupsLoadCommand
_writer.chainInfoSection != nullptr
copyVersionLoadCommand
info.loadCommandIfNotUsingBuildVersionLC != 0 && "platform requires LC_BUILD_VERSION"
copyEntryPointLoadCommand
copyEncryptionLoadCommand
_writer.encryptedTextStartOffset() != 0
_writer.encryptedTextEndOffset() != 0
cannot weak upward link.  Dropping weak for %s
cannot weak re-export a dylib.  Dropping weak for %s
recopyUUIDCommand
_uuidCmdInOutputBuffer != NULL
__stub_helper
__la_resolver
__la_weak_ptr
__ld_symbol_ptr
__symbol_stub
__lazy_symbol
__stub
__picstub_thumb
__stub_thumb
__picsymbolstub4
__symbol_stub4
__symbolstub1
__picsymbolstub5
__resolver_help
stubableFixup
stubs.cpp
symbol dyld_stub_binder not found (normally in libSystem.dylib).  Needed to perform lazy binding to function %s
unsupported lazy PIC resolver for arm Thumb
unsupported arch for stub
resolver function '%s' not supported in type of output
mismatching weak references for symbol: %s
resolver functions (%s) can only be used in dylibs
resolver functions (%s) can only be used when targeting iOS 4.2 or later
resolver functions (%s) can only be used when targeting Mac OS X 10.6 or later
symbol dyld_stub_binding_helper not found, normally in crt1.o/dylib1.o/bundle1.o
process
info.stub != NULL && "stub not created"
mainStub != NULL
__dyld_private
fast binder pointer
helper helper
%s.stub
 stub helpers
LazyPointerAtom
stub_arm64e.hpp
stubToResolver || stubToGlobalWeakDef
unsupported arch for DOF
/usr/lib/libdtrace.dylib
couldn't dlopen() /usr/lib/libdtrace.dylib: %s
dtrace_ld_create_dof
couldn't find "dtrace_ld_create_dof" in /usr/lib/libdtrace.dylib: %s
__dtrace_dof_for_provider_%s
dtrace
offsetsInDOF[%d]=%0llX > dofSectionSize=%0lX
error creating dtrace DOF section
__unwind_info
CompactUnwindAtom
compact_unwind.cpp
fit->binding == ld::Fixup::bindingsIndirectlyBound
compact unwind info
makeFinalLinkedImageCompactUnwindSection
0 && "no compact unwind for arch"
getAllUnwindInfos
personalityPointer->section().type() == ld::Section::typeNonLazyPointer
cie->section().type() == ld::Section::typeCFI
too many personality routines for compact unwind to encode
UnwindInfoAtom
uniqueEntries.size() > 0
could not allocate space for compact unwind info
compressDuplicates() entries.size()=%lu, uniqueEntries.size()=%lu
makePersonalityIndexes() %lu personality routines used
findCommonEncoding() %lu common encodings found
makeLsdaIndex() %lu LSDAs found
makeCompressedSecondLevelPage(pageSize=%u, endIndex=%u)
makeCompressedSecondLevelPage(): funcIndex=%d, re-use commonEncodings[%d]=0x%08X
makeCompressedSecondLevelPage(): funcIndex=%d, re-use pageSpecificEncodings[%d]=0x%08X
makeCompressedSecondLevelPage(): funcIndex=%d, pageSpecificEncodings[%d]=0x%08X
end of compressed page with %u entries, %lu custom encodings because too many custom encodings
can't use compressed page with %u entries because function offset too big
end of compressed page with %u entries because full
makeCompressedSecondLevelPage
pageSpecificEncodings.find(info.encoding+i) != pageSpecificEncodings.end()
compressed page with %u entries, %lu custom encodings
regular page with %u entries
non-pointer is got entry
doPass
got.cpp
0 && "unsupported GOT reference kind"
0 && "unsupported GOT reference"
fitThatSetTarget != NULL
buildTrieBytes
ExportsTrie.cpp
node->trieOffset == _trieBytes.size() && "malformed trie node, computed node offset doesn't match buffer position"
duplicate symbol '%s'
{WriterEntry={basic_string_view<char, std::char_traits<char>>=*Q}{?=II}}16@?0Q8
padding
__init_offsets
symbol '%s' is useless because section transformed to __TEXT,__init_offsets
inits.cpp
0 && "fixup binding kind unsupported for initializer section"
index < orderedInitOffsetAtoms.size()
init-offset
__flat_dummy
/System/iOSSupport/
getJustInTimeAtomsFor: %s found in %s
previous$
  adding %s to hash table for %s
cycle in dylib re-exports with %s and %s
buildNameTable() _nameTable:
  %p <- %s
buildNameTable() _nameCollisionAtoms:
  %p, %s
%s specified in order_file but it exists in multiple .o files. Prefix symbol with .o filename in order_file to disambiguate
order.cpp
buildFollowOnTables
ref %p %s -> %p %s
_followOnNexts.count(atom) == 0
  start %s -> %s
_followOnStarts[a] == followOnAtom
  adjust start for %s -> %s
curPrevToFollowOnAtom != NULL
(atom->size() == 0) || (curPrevToFollowOnAtom->size() == 0)
start %s -> %s
next %s -> %s
null
override ordinal %u assigned to %s in cluster from %s
could not order %s as %u because it was already laid out earlier by %s as %u
override ordinal %u assigned to %s from %s
can't find match for order_file entry: %s
can't find match for order_file entry: %s/%s
only %u out of %lu order_file symbols were applicable
AliasComparer
alias->isAlias()
Unable to insert branch island. No insertion point available.
textSizeWhenMightNeedBranchIslands
branch_island.cpp
0 && "unexpected architecture"
maxDistanceBetweenIslands
%s.island
%s.island.%d
%s_plus_%d.island.%d
makeBranchIsland
0 && "unexpected branch kind"
objc.cpp
0 && "unknown objc arch"
Incompatible Objective-C category definitions. Some category metadata may be lost. '%s' and '%s built with different compilers
doit
catListAtom->size() == sizeof(pint_t)
classListAtom->size() == sizeof(pint_t)
selRefAtom->size() == sizeof(pint_t)
Unexpected binding kind in objc atom: %s
fixClassAliases
nextAtom != nullptr
getROData
classROAtom != NULL
__objc_empty_cache
v16@?0r^{MethodEntryInfo=*^{Atom}^{Atom}^{Atom}^{Atom}}8
__OBJC_$_CLASS_PROP_LIST_
__OBJC_$_PROP_LIST_
method '%s%s' in category from %s overrides method from class in %s
method '%s%s' in category from %s conflicts with same method from another category
forEachMethod
fit->binding == ld::Fixup::bindingsIndirectlyBound && "malformed method list"
selRefAtom->contentType() == ld::Atom::typeUnclassified && "malformed method list"
selRefFit->binding == ld::Fixup::bindingsIndirectlyBound && "malformed selector ref"
methodNameAtom->contentType() == ld::Atom::typeCString && "malformed method list"
fit->binding == ld::Fixup::bindingsIndirectlyBound && "malformed category method list"
methods[methodIndex].typeAtom->contentType() == ld::Atom::typeCString && "malformed category method list"
fit->binding == ld::Fixup::bindingDirectlyBound && "malformed method list"
methodNameAtom && "malformed category method list"
(methodNameAtom->contentType() == ld::Atom::typeCString) || (strcmp(methodNameAtom->section().segmentName(), "__TEXT") == 0)
0 && "malformed category method list"
malformed category method list (%s), type string not in __TEXT in %s
0 && "malformed method list"
methods[i].methodName && (methods[i].implAtom || isProtocolList) && (methods[i].selectorRefAtom || methods[i].selectorStringAtom)
appendMethod
method.selectorStringAtom != nullptr
setPointerInContent
0 && "could not update method list"
getMetaClass
metaClassAtom != NULL
__OBJC_CLASS_PROTOCOLS_$_
objc merged property list
optimizeCategories
!categoryToNlListElement.count(categoryAtom)
fit->u.target == originalCategoryAtom
selectorRefName
targetAtom != nullptr
targetAtom->contentType() == ld::Atom::typeCString
removeIneligiblePatching
'%s' is ineligible for dyld patching due to subtract fixup in '%s' from '%s'
'%s' is ineligible for dyld patching due to non-interposable reference in '%s' from '%s'
'%s' is unsupported size for dyld patching
'%s' is unsupported fixup location for dyld patching
'%s' has unsupported ISA fixup for dyld patching
objc image info
__dlopen_cstrs
%s is linking with itself
/usr/lib/libSystem.
/usr/lib/libc++.
/System/Library/Frameworks/Foundation.framework/
linking with (%s) but not using any symbols from it
weak import of symbol '%s' not supported because of option: -no_weak_imports
__swift_FORCE_LOAD_$_swift
softlink:
path:
/System/Library/PrivateFrameworks/
/System/Cryptex
softlinked '%s' is symlink to real framework location
softlinked '%s' does not exist in SDK
Frameworks/
Library
__objc_ptr
__thread_ptrs
targeted OS version does not support use of thread local variables in %s
illegal thread local variable reference to regular symbol %s
tlvp.cpp
0 && "bad store kind for TLV optimization"
tlvpAtom != NULL
fit->binding == ld::Fixup::bindingDirectlyBound && "thread variable def contains pointer to global"
0 && "bad kind for target in tlv defs"
0 && "wrong content type for target in tlv defs"
%s$shim
branch_shim.cpp
! _target->isThumb()
_target->isThumb()
only one snapshot supported
ld_snapshot
%s.%s.ld
%s-%4.4d-%2.2d-%2.2d-%2.2d%2.2d%2.2d.ld-snapshot
snapshot not created
/tmp
unable to create link snapshot directory: %s
cd %s
raw args not set
arch
filelist
-Fframeworks
framework
void 
__attribute__ ((weak)) 
(void){}
void s_%5.5d(void) __asm("%s");
void s_%5.5d(){}
files
compile_stubs
#!/bin/csh
# Attempt to find the architecture.
# First look through the command line args.
set arch=unknown
set link_cmd=(`cat link_command`)
while ( $#link_cmd > 0 )
if ( "$link_cmd[1]" == "-arch" ) then
set arch=$link_cmd[2]
endif
shift link_cmd
# look for an explicit arch file
if ( "$arch" == "unknown" ) then
if ( -e arch ) then
set arch=`cat arch`
endif
endif
if ( "$arch" == "unknown" ) then
echo "***** Unable to determine architecture."
exit 1
endif 
# Create .dylibs for each file in the dylib_stubs directory.
if ( -e dylib_stubs ) then
set files=`cd dylib_stubs ; echo *`
mkdir -p dylibs
foreach file ($files)
if ( ! -e dylibs/$file ) then
clang -arch $arch -c -fno-builtin -o tmp_object.o -x c dylib_stubs/$file
ld -arch $arch -dylib -macosx_version_min 10.1 -no_version_load_command -o dylibs/$file tmp_object.o
endif
endif
# Create .frameworks for each file in the framework_stubs directory.
if ( -e framework_stubs ) then
set files=`cd framework_stubs ; echo *`
foreach file ($files)
if ( ! -e frameworks/$file.framework ) then
clang -arch $arch -c -fno-builtin -o tmp_object.o -x c framework_stubs/$file
mkdir -p frameworks/$file.framework
ld -arch $arch -dylib -macosx_version_min 10.1 -no_version_load_command -o frameworks/$file.framework/$file tmp_object.o
endif
endif
# Clean up.
rm -f tmp_object.o
orig_command_line
link_command
data_files
objects
dylibs
framework_stubs
dylib_stubs
archive_files
frameworks
assert_info
could not unmap bitcode temp file
could not open bitcode temp file: %s
could not process bitcode temp file: %s, errno=%d
could not unmap temp file: %s, errno %d
could not remove temp file: %s
libLTO is not loaded
lto_codegen_hide_symbols
lto_codegen_write_symbol_reverse_map
lto_codegen_reset_context
lto_codegen_lookup_hidden_name
lto_module_get_num_asm_symbols
lto_module_get_asm_symbol_name
loaded libLTO doesn't support -bitcode_hide_symbols: %s
could not reparse object file %s in bitcode bundle: '%s', using libLTO version '%s'
could not delete temp file: %s
could not delete temp directory: %s
/tmp/ld.bundle.XXXXXX
%s.bundle.XXXXXX
could not write file to temp directory: %s
failed to write content to temp file: %s
malformed bundle format
could not aquire iterator for the bitcode bundle
file-type
could not get the file type for the bitcode bundle
Bundle
Object
Bitcode
Exports
OrderFile
clang/cmd
swift/cmd
version
hide-symbols
platform
sdkversion
swift-version
dylibs/lib
link-options/option
bitcode bundle temp file
could not reparse object file in bitcode bundle: '%s', using libLTO version '%s'
could not open output bundle to write %s
compression
none
could not disable compression for bitcode bundle
name
could not get the name of the file from bitcode bundle
could not set compression type for exports list
could not add file to the bundle
could not reset compression type for exports list
illegal export list found. Please rebuild your static library using -exported_symbol[s_list] with the newest Xcode
%s/bundle.xar
%%0%ud
bitcode_bundle.cpp
obj->getBitcode() != NULL && "File should contain bitcode"
%s/%s.bc
could not add bitcode from %s to bitcode bundle
could not set bitcode property for %s in bitcode bundle
could not set cmdline to XAR file
%s/%s.xar
search != handlerMap.end() && "Cannot find handler"
could not add bitcode from the bundle %s to bitcode bundle
could not set bundle property for %s in bitcode bundle
could not add obj file %s to bitcode bundle
could not set object property for %s in bitcode bundle
false && "Unknown bitcode"
lto.o.
%s/lto.bc
could not add lto file %s to bitcode bundle
could not encode sectcreate file %s into bitcode bundle
Section
could not set bitcode property for %s
exports.exp
gzip
could not add exports list to bitcode bundle
could not set exports property in bitcode bundle
unexports.exp
could not add unexports list to bitcode bundle
could not set compression type for order file
file.order
could not add order file to bitcode bundle
could not set order file property in bitcode bundle
could not reset compression type for order file
could not create XML in bitcode bundle
could not add version number to bitcode bundle
could not add achitecture name to bitcode bundle
could not add property to bitcode bundle
only one -syslibroot is accepted for bitcode bundle
could not add platform name to bitcode bundle
could not add SDK version to bitcode bundle
could not add swift version to bitcode bundle
%s has install name beginning with "/" but it is not from the specified SDK
dylibs/weak
could not add dylib options to bitcode bundle
rt-forceload
could not add compiler_rt force_load info to bitcode bundle
could not add link options to bitcode bundle
temp directory cannot be removed: %s
could not extract files from bitcode bundle
bitcode bundle
!<arch>
slice content is not mach-o or a static library
cpu type in slice does not match fat header
cpu subtype in slice does not match fat header
too many slices
slice extends beyond end of file
not a fat file
/usr/lib/libobjc.A.dylib
msgSendCallSite
objc_stubs.cpp
target != nullptr
__objc_stubs
objc_msgSend$ rewrite not support for this arch
makeObjCStub
strncmp(targetName, "_objc_msgSend$", 14) == 0
using Objective-C but missing -lobjc
info.stub != nullptr && "stub not created"
selector
Q c,
@(#)PROGRAM:ld-classic  PROJECT:ld64-954.16
N2ld6passes5dedup14DeDupAliasAtomE
N2ld6passes13thread_starts13RebaseRLEAtomE
N2ld6passes13thread_starts16ThreadStartsAtomE
N2ld6passes13thread_starts15ChainStartsAtomE
N8textstub5dylib4FileI6x86_64EE
N2ld7BitcodeE
N8textstub5dylib4FileI3x86EE
N8textstub5dylib4FileI3armEE
N8textstub5dylib4FileI5arm64EE
N8textstub5dylib4FileI8arm64_32EE
######
####
###########!
*6666
666666666666666666666660666666666666666666666666666626666
,666.6666666
),/258
!8$8888888888'*-0368888888888888888888888888888888888888888888888888888888888888888888889
\\\\
////////////8////DH/L//////
N///-//T//X//////////
13InternalState
N2ld8InternalE
SSSSSSS
SSSSSSS
SSSSSSS
SSSSSSS
SSSSSSS
+S;T
%')+-/\1
Z35ZZ79;=?
*******
******
%')+-/\1
Z35ZZ79;=?
*******
******
%')+-/\1
Z35ZZ79;=?
*******
******
%')+-/\1
Z35ZZ79;=?
*******
******
%')+-/\1
Z35ZZ79;=?
*******
******
N6mach_o11relocatable4FileI6x86_64EE
N2ld12ClangBitcodeE
N2ld11LLVMBitcodeE
N2ld12SwiftBitcodeE
N2ld10AsmBitcodeE
N6mach_o11relocatable15Literal4SectionI6x86_64EE
N6mach_o11relocatable16FixedSizeSectionI6x86_64EE
N6mach_o11relocatable19ImplicitSizeSectionI6x86_64EE
N6mach_o11relocatable7SectionI6x86_64EE
N2ld7SectionE
N6mach_o11relocatable4AtomI6x86_64EE
N6mach_o11relocatable15Literal8SectionI6x86_64EE
N6mach_o11relocatable16Literal16SectionI6x86_64EE
N6mach_o11relocatable21NonLazyPointerSectionI6x86_64EE
N6mach_o11relocatable17TLVPointerSectionI6x86_64EE
N6mach_o11relocatable10CFISectionI6x86_64EE
N6mach_o11relocatable14CStringSectionI6x86_64EE
N6mach_o11relocatable23PointerToCStringSectionI6x86_64EE
N6mach_o11relocatable20Objc1ClassReferencesI6x86_64EE
N6mach_o11relocatable18UTF16StringSectionI6x86_64EE
N6mach_o11relocatable15SymboledSectionI6x86_64EE
N6mach_o11relocatable15CFStringSectionI6x86_64EE
N6mach_o11relocatable21ObjC2ClassRefsSectionI6x86_64EE
N6mach_o11relocatable31ObjC2ClassOrCategoryListSectionI6x86_64EE
N6mach_o11relocatable17ObjC1ClassSectionI6x86_64EE
N6mach_o11relocatable14TLVDefsSectionI6x86_64EE
N6mach_o11relocatable9CUSectionI6x86_64EE
N6mach_o11relocatable26TentativeDefinitionSectionI6x86_64EE
N6mach_o11relocatable21AbsoluteSymbolSectionI6x86_64EE
N6mach_o11relocatable9AliasAtomE
N6mach_o11relocatable4FileI3x86EE
N6mach_o11relocatable15Literal4SectionI3x86EE
N6mach_o11relocatable16FixedSizeSectionI3x86EE
N6mach_o11relocatable19ImplicitSizeSectionI3x86EE
N6mach_o11relocatable7SectionI3x86EE
N6mach_o11relocatable4AtomI3x86EE
N6mach_o11relocatable15Literal8SectionI3x86EE
N6mach_o11relocatable16Literal16SectionI3x86EE
N6mach_o11relocatable21NonLazyPointerSectionI3x86EE
N6mach_o11relocatable17TLVPointerSectionI3x86EE
N6mach_o11relocatable10CFISectionI3x86EE
N6mach_o11relocatable14CStringSectionI3x86EE
N6mach_o11relocatable23PointerToCStringSectionI3x86EE
N6mach_o11relocatable20Objc1ClassReferencesI3x86EE
N6mach_o11relocatable18UTF16StringSectionI3x86EE
N6mach_o11relocatable15SymboledSectionI3x86EE
N6mach_o11relocatable15CFStringSectionI3x86EE
N6mach_o11relocatable21ObjC2ClassRefsSectionI3x86EE
N6mach_o11relocatable31ObjC2ClassOrCategoryListSectionI3x86EE
N6mach_o11relocatable17ObjC1ClassSectionI3x86EE
N6mach_o11relocatable14TLVDefsSectionI3x86EE
N6mach_o11relocatable9CUSectionI3x86EE
N6mach_o11relocatable26TentativeDefinitionSectionI3x86EE
N6mach_o11relocatable21AbsoluteSymbolSectionI3x86EE
N6mach_o11relocatable4FileI3armEE
N6mach_o11relocatable15Literal4SectionI3armEE
N6mach_o11relocatable16FixedSizeSectionI3armEE
N6mach_o11relocatable19ImplicitSizeSectionI3armEE
N6mach_o11relocatable7SectionI3armEE
N6mach_o11relocatable4AtomI3armEE
N6mach_o11relocatable15Literal8SectionI3armEE
N6mach_o11relocatable16Literal16SectionI3armEE
N6mach_o11relocatable21NonLazyPointerSectionI3armEE
N6mach_o11relocatable17TLVPointerSectionI3armEE
N6mach_o11relocatable10CFISectionI3armEE
N6mach_o11relocatable14CStringSectionI3armEE
N6mach_o11relocatable23PointerToCStringSectionI3armEE
N6mach_o11relocatable20Objc1ClassReferencesI3armEE
N6mach_o11relocatable18UTF16StringSectionI3armEE
N6mach_o11relocatable15SymboledSectionI3armEE
N6mach_o11relocatable15CFStringSectionI3armEE
N6mach_o11relocatable21ObjC2ClassRefsSectionI3armEE
N6mach_o11relocatable31ObjC2ClassOrCategoryListSectionI3armEE
N6mach_o11relocatable17ObjC1ClassSectionI3armEE
N6mach_o11relocatable14TLVDefsSectionI3armEE
N6mach_o11relocatable9CUSectionI3armEE
N6mach_o11relocatable26TentativeDefinitionSectionI3armEE
N6mach_o11relocatable21AbsoluteSymbolSectionI3armEE
N6mach_o11relocatable4FileI5arm64EE
N6mach_o11relocatable15Literal4SectionI5arm64EE
N6mach_o11relocatable16FixedSizeSectionI5arm64EE
N6mach_o11relocatable19ImplicitSizeSectionI5arm64EE
N6mach_o11relocatable7SectionI5arm64EE
N6mach_o11relocatable4AtomI5arm64EE
N6mach_o11relocatable15Literal8SectionI5arm64EE
N6mach_o11relocatable16Literal16SectionI5arm64EE
N6mach_o11relocatable21NonLazyPointerSectionI5arm64EE
N6mach_o11relocatable17TLVPointerSectionI5arm64EE
N6mach_o11relocatable10CFISectionI5arm64EE
N6mach_o11relocatable14CStringSectionI5arm64EE
N6mach_o11relocatable23PointerToCStringSectionI5arm64EE
N6mach_o11relocatable20Objc1ClassReferencesI5arm64EE
N6mach_o11relocatable18UTF16StringSectionI5arm64EE
N6mach_o11relocatable15SymboledSectionI5arm64EE
N6mach_o11relocatable15CFStringSectionI5arm64EE
N6mach_o11relocatable21ObjC2ClassRefsSectionI5arm64EE
N6mach_o11relocatable31ObjC2ClassOrCategoryListSectionI5arm64EE
N6mach_o11relocatable17ObjC1ClassSectionI5arm64EE
N6mach_o11relocatable14TLVDefsSectionI5arm64EE
N6mach_o11relocatable9CUSectionI5arm64EE
N6mach_o11relocatable26TentativeDefinitionSectionI5arm64EE
N6mach_o11relocatable21AbsoluteSymbolSectionI5arm64EE
N6mach_o11relocatable4FileI8arm64_32EE
N6mach_o11relocatable15Literal4SectionI8arm64_32EE
N6mach_o11relocatable16FixedSizeSectionI8arm64_32EE
N6mach_o11relocatable19ImplicitSizeSectionI8arm64_32EE
N6mach_o11relocatable7SectionI8arm64_32EE
N6mach_o11relocatable4AtomI8arm64_32EE
N6mach_o11relocatable15Literal8SectionI8arm64_32EE
N6mach_o11relocatable16Literal16SectionI8arm64_32EE
N6mach_o11relocatable21NonLazyPointerSectionI8arm64_32EE
N6mach_o11relocatable17TLVPointerSectionI8arm64_32EE
N6mach_o11relocatable10CFISectionI8arm64_32EE
N6mach_o11relocatable14CStringSectionI8arm64_32EE
N6mach_o11relocatable23PointerToCStringSectionI8arm64_32EE
N6mach_o11relocatable20Objc1ClassReferencesI8arm64_32EE
N6mach_o11relocatable18UTF16StringSectionI8arm64_32EE
N6mach_o11relocatable15SymboledSectionI8arm64_32EE
N6mach_o11relocatable15CFStringSectionI8arm64_32EE
N6mach_o11relocatable21ObjC2ClassRefsSectionI8arm64_32EE
N6mach_o11relocatable31ObjC2ClassOrCategoryListSectionI8arm64_32EE
N6mach_o11relocatable17ObjC1ClassSectionI8arm64_32EE
N6mach_o11relocatable14TLVDefsSectionI8arm64_32EE
N6mach_o11relocatable9CUSectionI8arm64_32EE
N6mach_o11relocatable26TentativeDefinitionSectionI8arm64_32EE
N6mach_o11relocatable21AbsoluteSymbolSectionI8arm64_32EE
N7archive4FileI6x86_64EE
N2ld4FileE
N7archive24CheckIsDataSymbolHandlerE
N2ld4File11AtomHandlerE
N7archive4FileI3x86EE
N7archive4FileI3armEE
N7archive4FileI5arm64EE
N7archive4FileI8arm64_32EE
N3lto6Parser10AtomSyncerE
N3lto4FileE
N3lto12InternalAtomE
N3lto4AtomE
N6mach_o5dylib4FileI6x86_64EE
N6mach_o5dylib4FileI3x86EE
N6mach_o5dylib4FileI3armEE
N6mach_o5dylib4FileI5arm64EE
N6mach_o5dylib4FileI8arm64_32EE
BRaYI_
7=mm
N2ld5dylib4FileE
N2ld7archive4FileE
N2ld4tool10InputFilesE
N2ld5dylib4File12DylibHandlerE
N2ld4tool13DSOHandleAtomE
N2ld4tool11IgnoredFileE
N2ld4tool12PageZeroAtomE
N2ld4tool15CustomStackAtomE
N2ld4tool11SymbolTableE
N2ld20IndirectBindingTableE



N2ld4tool8ResolverE
N2ld4tool19SectionBoundaryAtomE
N2ld4AtomE
N2ld4tool19SegmentBoundaryAtomE
N2ld4tool9AliasAtomE
N2ld4tool18UndefinedProxyAtomE
N2ld4File15AtomSinkHandlerE
PWWWWWWWW
WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
PWWWW
WWWWWWWWWWWWWWWWW
$^^^^^^^^^^^^^^^^^^^^^^^^^^^
^^^^
^^^^^^^^^^^^^^^^^^^^^$^^^^^^^^^^^^^^^^
^^^^^++
$ZZZZZZZZZZZZZZZZZZZZZZZZZZZ
ZZZZ
ZZZZZZZZZZZZZZZZZZZZZ$ZZZZZZZZZZZZZZZZ
uuu 
ooooooo 
oooo
`````
```````````````````````````````````````````````````````````A
```````````````````````````
9900$
 -bb
     
                     
         "                     ,
     
                     
         "                     ,
     
                     
         "                     ,
     
                     
         "                     ,
     
                     
         "                     ,
MZS-
jpw
jpw
jpw
jpw
jpw
N2ld11relocatable4FileE
N2ld4tool12LinkEditAtomE
N2ld4tool17CodeSignatureAtomE
N2ld4tool14StringPoolAtomE
N2ld4tool19ClassicLinkEditAtomE
N2ld4tool20LocalRelocationsAtomI3x86EE
N2ld4tool23RelocationsAtomAbstractE
N2ld4tool23ExternalRelocationsAtomI3x86EE
N2ld4tool14DataInCodeAtomI6x86_64EE
N2ld4tool23IndirectSymbolTableAtomI3x86EE
N2ld4tool15SymbolTableAtomI3x86EE
N2ld4tool20LocalRelocationsAtomI6x86_64EE
N2ld4tool23ExternalRelocationsAtomI6x86_64EE
N2ld4tool23IndirectSymbolTableAtomI6x86_64EE
N2ld4tool15SymbolTableAtomI6x86_64EE
N2ld4tool20LocalRelocationsAtomI3armEE
N2ld4tool23ExternalRelocationsAtomI3armEE
N2ld4tool14DataInCodeAtomI3armEE
N2ld4tool23IndirectSymbolTableAtomI3armEE
N2ld4tool15SymbolTableAtomI3armEE
N2ld4tool20LocalRelocationsAtomI5arm64EE
N2ld4tool23ExternalRelocationsAtomI5arm64EE
N2ld4tool23IndirectSymbolTableAtomI5arm64EE
N2ld4tool15SymbolTableAtomI5arm64EE
N2ld4tool20LocalRelocationsAtomI8arm64_32EE
N2ld4tool23ExternalRelocationsAtomI8arm64_32EE
N2ld4tool23IndirectSymbolTableAtomI8arm64_32EE
N2ld4tool15SymbolTableAtomI8arm64_32EE
N2ld4tool22SectionRelocationsAtomI3x86EE
N2ld4tool15ChainedInfoAtomI3x86EE
N2ld4tool14ExportInfoAtomI3x86EE
N2ld4tool14RebaseInfoAtomI3x86EE
N2ld4tool15BindingInfoAtomI3x86EE
N2ld4tool19WeakBindingInfoAtomI3x86EE
N2ld4tool19LazyBindingInfoAtomI3x86EE
N2ld4tool18SplitSegInfoV2AtomI3x86EE
N2ld4tool18SplitSegInfoV1AtomI3x86EE
N2ld4tool18FunctionStartsAtomI3x86EE
N2ld4tool14DataInCodeAtomI3x86EE
N2ld4tool21OptimizationHintsAtomI3x86EE
N2ld4tool22SectionRelocationsAtomI6x86_64EE
N2ld4tool15ChainedInfoAtomI6x86_64EE
N2ld4tool14ExportInfoAtomI6x86_64EE
N2ld4tool14RebaseInfoAtomI6x86_64EE
N2ld4tool15BindingInfoAtomI6x86_64EE
N2ld4tool19WeakBindingInfoAtomI6x86_64EE
N2ld4tool19LazyBindingInfoAtomI6x86_64EE
N2ld4tool18SplitSegInfoV2AtomI6x86_64EE
N2ld4tool18SplitSegInfoV1AtomI6x86_64EE
N2ld4tool18FunctionStartsAtomI6x86_64EE
N2ld4tool21OptimizationHintsAtomI6x86_64EE
N2ld4tool22SectionRelocationsAtomI3armEE
N2ld4tool15ChainedInfoAtomI3armEE
N2ld4tool14ExportInfoAtomI3armEE
N2ld4tool14RebaseInfoAtomI3armEE
N2ld4tool15BindingInfoAtomI3armEE
N2ld4tool19WeakBindingInfoAtomI3armEE
N2ld4tool19LazyBindingInfoAtomI3armEE
N2ld4tool18SplitSegInfoV2AtomI3armEE
N2ld4tool18SplitSegInfoV1AtomI3armEE
N2ld4tool18FunctionStartsAtomI3armEE
N2ld4tool21OptimizationHintsAtomI3armEE
N2ld4tool22SectionRelocationsAtomI5arm64EE
N2ld4tool15ChainedInfoAtomI5arm64EE
N2ld4tool14ExportInfoAtomI5arm64EE
N2ld4tool14RebaseInfoAtomI5arm64EE
N2ld4tool15BindingInfoAtomI5arm64EE
N2ld4tool19WeakBindingInfoAtomI5arm64EE
N2ld4tool19LazyBindingInfoAtomI5arm64EE
N2ld4tool18SplitSegInfoV2AtomI5arm64EE
N2ld4tool18SplitSegInfoV1AtomI5arm64EE
N2ld4tool18FunctionStartsAtomI5arm64EE
N2ld4tool14DataInCodeAtomI5arm64EE
N2ld4tool21OptimizationHintsAtomI5arm64EE
N2ld4tool22SectionRelocationsAtomI8arm64_32EE
N2ld4tool15ChainedInfoAtomI8arm64_32EE
N2ld4tool14ExportInfoAtomI8arm64_32EE
N2ld4tool14RebaseInfoAtomI8arm64_32EE
N2ld4tool15BindingInfoAtomI8arm64_32EE
N2ld4tool19WeakBindingInfoAtomI8arm64_32EE
N2ld4tool19LazyBindingInfoAtomI8arm64_32EE
N2ld4tool18SplitSegInfoV2AtomI8arm64_32EE
N2ld4tool18SplitSegInfoV1AtomI8arm64_32EE
N2ld4tool18FunctionStartsAtomI8arm64_32EE
N2ld4tool14DataInCodeAtomI8arm64_32EE
N2ld4tool21OptimizationHintsAtomI8arm64_32EE
N2ld4tool25HeaderAndLoadCommandsAtomI6x86_64EE
N2ld4tool28HeaderAndLoadCommandsAbtractE
N2ld4tool25HeaderAndLoadCommandsAtomI3armEE
N2ld4tool25HeaderAndLoadCommandsAtomI5arm64EE
N2ld4tool25HeaderAndLoadCommandsAtomI8arm64_32EE
N2ld4tool25HeaderAndLoadCommandsAtomI3x86EE
PWVRQAPAAYAXYZ^_
N2ld6passes5stubs3x8615NonLazyStubAtomE
N2ld6passes5stubs3x8618NonLazyPointerAtomE
N2ld6passes5stubs3x8618ResolverHelperAtomE
N2ld6passes5stubs3x868StubAtomE
N2ld6passes5stubs3x8615LazyPointerAtomE
N2ld6passes5stubs3x8614StubHelperAtomE
N2ld6passes5stubs3x8620StubHelperHelperAtomE
N2ld6passes5stubs3x8621ImageCachePointerAtomE
N2ld6passes5stubs3x8622FastBindingPointerAtomE
N2ld6passes5stubs3x867classic8StubAtomE
N2ld6passes5stubs3x867classic15LazyPointerAtomE
N2ld6passes5stubs3x867classic14StubHelperAtomE
N2ld6passes5stubs6x86_6415NonLazyStubAtomE
N2ld6passes5stubs6x86_6418NonLazyPointerAtomE
N2ld6passes5stubs6x86_648StubAtomE
N2ld6passes5stubs6x86_6415LazyPointerAtomE
N2ld6passes5stubs6x86_6414StubHelperAtomE
N2ld6passes5stubs6x86_6420StubHelperHelperAtomE
N2ld6passes5stubs6x86_6421ImageCachePointerAtomE
N2ld6passes5stubs6x86_6422FastBindingPointerAtomE
N2ld6passes5stubs6x86_6418ResolverHelperAtomE
N2ld6passes5stubs6x86_647classic8StubAtomE
N2ld6passes5stubs6x86_647classic15LazyPointerAtomE
N2ld6passes5stubs6x86_647classic14StubHelperAtomE
N2ld6passes5stubs3arm15StubPICKextAtomE
N2ld6passes5stubs3arm18NonLazyPointerAtomE
N2ld6passes5stubs3arm16ThumbStubPICAtomE
N2ld6passes5stubs3arm11StubPICAtomE
N2ld6passes5stubs3arm15LazyPointerAtomE
N2ld6passes5stubs3arm14StubHelperAtomE
N2ld6passes5stubs3arm20StubHelperHelperAtomE
N2ld6passes5stubs3arm21ImageCachePointerAtomE
N2ld6passes5stubs3arm22FastBindingPointerAtomE
N2ld6passes5stubs3arm18ResolverHelperAtomE
N2ld6passes5stubs3arm18NonLazyStubPICAtomE
N2ld6passes5stubs3arm13StubCloseAtomE
N2ld6passes5stubs3arm13StubNoPICAtomE
N2ld6passes5stubs3arm18ThumbStubNoPICAtomE
N2ld6passes5stubs3arm7classic11StubPICAtomE
N2ld6passes5stubs3arm7classic15LazyPointerAtomE
N2ld6passes5stubs3arm7classic13StubNoPICAtomE
N2ld6passes5stubs6arm64e15NonLazyStubAtomE
N2ld6passes5stubs6arm64e18NonLazyPointerAtomE
N2ld6passes5stubs6arm64e8StubAtomE
N2ld6passes5stubs6arm64e15LazyPointerAtomE
N2ld6passes5stubs6arm64e18ResolverHelperAtomE
N2ld6passes5stubs5arm6415NonLazyStubAtomE
N2ld6passes5stubs5arm6418NonLazyPointerAtomE
N2ld6passes5stubs5arm648StubAtomE
N2ld6passes5stubs5arm6415LazyPointerAtomE
N2ld6passes5stubs5arm6414StubHelperAtomE
N2ld6passes5stubs5arm6420StubHelperHelperAtomE
N2ld6passes5stubs5arm6421ImageCachePointerAtomE
N2ld6passes5stubs5arm6422FastBindingPointerAtomE
N2ld6passes5stubs5arm6418ResolverHelperAtomE
N2ld6passes5stubs8arm64_3215NonLazyStubAtomE
N2ld6passes5stubs8arm64_3218NonLazyPointerAtomE
N2ld6passes5stubs8arm64_328StubAtomE
N2ld6passes5stubs8arm64_3215LazyPointerAtomE
N2ld6passes5stubs8arm64_3214StubHelperAtomE
N2ld6passes5stubs8arm64_3220StubHelperHelperAtomE
N2ld6passes5stubs8arm64_3221ImageCachePointerAtomE
N2ld6passes5stubs8arm64_3222FastBindingPointerAtomE
N2ld6passes5stubs8arm64_3218ResolverHelperAtomE
N14opaque_section4AtomE
N14opaque_section4FileE
N2ld6passes6dtrace4AtomE
N2ld6passes6dtrace4FileE
N2ld6passes14compact_unwind17CompactUnwindAtomI6x86_64EE
N2ld6passes14compact_unwind17CompactUnwindAtomI3x86EE
N2ld6passes14compact_unwind17CompactUnwindAtomI5arm64EE
N2ld6passes14compact_unwind17CompactUnwindAtomI8arm64_32EE
N2ld6passes14compact_unwind17CompactUnwindAtomI3armEE
N2ld6passes14compact_unwind14UnwindInfoAtomI6x86_64EE
N2ld6passes14compact_unwind14UnwindInfoAtomI3x86EE
N2ld6passes14compact_unwind14UnwindInfoAtomI5arm64EE
N2ld6passes14compact_unwind14UnwindInfoAtomI8arm64_32EE
N2ld6passes14compact_unwind14UnwindInfoAtomI3armEE
N2ld6passes3got12GOTEntryAtomE
N2ld6passes3got16GOTAuthEntryAtomE
N2ld6passes4huge11DataPadAtomE
N2ld6passes5inits14InitOffsetAtomE
N7generic5dylib4FileE
N7generic5dylib10ExportAtomE
N7generic5dylib10ImportAtomE
N2ld6passes13branch_island37Thumb2toThumbBranchAbsoluteIslandAtomE
N2ld6passes13branch_island29Thumb2toThumbBranchIslandAtomE
N2ld6passes13branch_island29Thumb1toThumbBranchIslandAtomE
N2ld6passes13branch_island34NoPicThumb1toThumbBranchIslandAtomE
N2ld6passes13branch_island24ARMtoARMBranchIslandAtomE
N2ld6passes13branch_island21ARM64BranchIslandAtomE
N2ld6passes4objc14MethodListAtomI6x86_64EE
N2ld6passes4objc10SelRefAtomE
N2ld6passes4objc18ClassROOverlayAtomI6x86_64EE
N2ld6passes4objc15ObjCOverlayAtomI6x86_64EE
N2ld6passes4objc16ProtocolListAtomI6x86_64EE
N2ld6passes4objc16PropertyListAtomI6x86_64EE
N2ld6passes4objc20NonLazyClassListAtomE
N2ld6passes4objc19CategoryOverlayAtomI6x86_64EE
N2ld6passes4objc17ObjCImageInfoAtomI6x86_64EE
N2ld6passes4objc14MethodListAtomI3x86EE
N2ld6passes4objc18ClassROOverlayAtomI3x86EE
N2ld6passes4objc15ObjCOverlayAtomI3x86EE
N2ld6passes4objc16ProtocolListAtomI3x86EE
N2ld6passes4objc16PropertyListAtomI3x86EE
N2ld6passes4objc19CategoryOverlayAtomI3x86EE
N2ld6passes4objc17ObjCImageInfoAtomI3x86EE
N2ld6passes4objc14MethodListAtomI3armEE
N2ld6passes4objc18ClassROOverlayAtomI3armEE
N2ld6passes4objc15ObjCOverlayAtomI3armEE
N2ld6passes4objc16ProtocolListAtomI3armEE
N2ld6passes4objc16PropertyListAtomI3armEE
N2ld6passes4objc19CategoryOverlayAtomI3armEE
N2ld6passes4objc17ObjCImageInfoAtomI3armEE
N2ld6passes4objc14MethodListAtomI6arm64eEE
N2ld6passes4objc18ClassROOverlayAtomI6arm64eEE
N2ld6passes4objc15ObjCOverlayAtomI6arm64eEE
N2ld6passes4objc16ProtocolListAtomI6arm64eEE
N2ld6passes4objc16PropertyListAtomI6arm64eEE
N2ld6passes4objc19CategoryOverlayAtomI6arm64eEE
N2ld6passes4objc17ObjCImageInfoAtomI6arm64eEE
N2ld6passes4objc14MethodListAtomI5arm64EE
N2ld6passes4objc18ClassROOverlayAtomI5arm64EE
N2ld6passes4objc15ObjCOverlayAtomI5arm64EE
N2ld6passes4objc16ProtocolListAtomI5arm64EE
N2ld6passes4objc16PropertyListAtomI5arm64EE
N2ld6passes4objc19CategoryOverlayAtomI5arm64EE
N2ld6passes4objc17ObjCImageInfoAtomI5arm64EE
N2ld6passes4objc14MethodListAtomI8arm64_32EE
N2ld6passes4objc18ClassROOverlayAtomI8arm64_32EE
N2ld6passes4objc15ObjCOverlayAtomI8arm64_32EE
N2ld6passes4objc16ProtocolListAtomI8arm64_32EE
N2ld6passes4objc16PropertyListAtomI8arm64_32EE
N2ld6passes4objc19CategoryOverlayAtomI8arm64_32EE
N2ld6passes4objc17ObjCImageInfoAtomI8arm64_32EE
N2ld6passes6dylibs17SoftLinkAuditAtomE
N2ld6passes6dylibs11CStringAtomE
N2ld6passes4tlvp12TLVEntryAtomE
N2ld6passes11branch_shim24NoPICThumb2ToArmShimAtomE
N2ld6passes11branch_shim19Thumb2ToArmShimAtomE
N2ld6passes11branch_shim19Thumb1ToArmShimAtomE
N2ld6passes11branch_shim23NoPICARMtoThumbShimAtomE
N2ld6passes11branch_shim18ARMtoThumbShimAtomE
N2ld13BundleBitcodeE
N2ld6passes14bitcode_bundle11FileHandlerE
N2ld6passes14bitcode_bundle13BundleHandlerE
N2ld6passes14bitcode_bundle14BitcodeHandlerE
N2ld6passes14bitcode_bundle13ObjectHandlerE
N2ld6passes14bitcode_bundle17SymbolListHandlerE
N2ld6passes14bitcode_bundle11BitcodeAtomE
N2ld6passes10objc_stubs12ObjcStubAtomE
N2ld6passes10objc_stubs14MethodNameAtomE
N2ld6passes10objc_stubs10SelRefAtomE
N2ld6passes10objc_stubs11AuthGOTAtomE
N2ld6passes10objc_stubs7GOTAtomE
__text
deduplicate the following %lu functions (%llu bytes apiece):
    %s
deduplication saved %llu bytes of __text
v16@?0Q8
vector
__TEXT
__thread_starts
__chain_starts
__rebase_info
misaligned pointer at 0x%08X in %s
ld.hpp
sectionOffset
_mode == modeSectionOffset
pointer not aligned at address 0x%llX (%s + %d from %s)
<internal>
threadStartsCountInSection
thread_starts.cpp
(delta & (minAlignment - 1)) == 0
thread starts
chain starts
rebase RLE
architecture %s not present in TBD %s, attempting fallback
basic_string
unsupported architecture for tbd file
v28@?0i8I12I16^B20
unsupported libtapi API version '%i.%i'
.framework/
insert
_versions.find(platformVersion) == _versions.end()
LookupBucketFor
llvm-DenseMap.h
!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && "Empty/Tombstone value shouldn't be inserted into map!"
Hash table corrupted. This is probably a memory error somewhere. (table at %p, buckets at %p (%zu bytes), %u buckets, %u entries, %u tombstones, data %p %p %p %p)
InsertIntoBucketImpl
TheBucket
ValueInfoT::isPurgeable(TheBucket->getSecond())
grow
Buckets
initEmpty
(getNumBuckets() & (getNumBuckets()-1)) == 0 && "# initial buckets must be a power of two!"
moveFromOldBuckets
!FoundVal && "Key already in new map?"
ld: building hashtable from text-stub info in %s
ld: warning: 
a.out
unknown
/usr/lib/dyld
internal error
__TEXT_EXEC
__PAGEZERO
__LINKEDIT
__DATA_CONST
__UNIXSTACK
__oslogstring
missing line-end at end of file "%s"
can't process auto zipper file: %s
setInferredArch
Options.cpp
fArchitecture == 0
LD_DYLIB_ARCH_FALLBACK
-arch must be followed by an architecture string
unknown/unsupported architecture name for: -arch %s
[Logging for XBS]%sfound library: '%s'
 not 
%s/%s
/lib
.dylib
.tbd
%s/lib%s.so
%s/lib%s.a
library not found for -l%s
-framework missing next argument
Versions/Current/
framework not found %s
.sdk/
/SDKs/Xcode.Internal
text-based stub file %s and library file %s unexpectedly found. Falling back to library file for linking.
@executable_path/
@loader_path/
file not found: %s
Inlined framework/dylib mismatch: %s (%s and %s)
-filelist file '%s' could not be opened, errno=%d (%s)
%s:%s
missing file after %s
can't open %s file: %s
can't process %s file: %s
can't read %s file: %s
can't open alias file: %s
can't process alias file: %s
can't read alias file: %s
line needs two symbols but has only one at line #%d in "%s"
-undefined missing [ warning | error | suppress | dynamic_lookup ]
warning
error
suppress
dynamic_lookup
invalid option to -undefined [ warning | error | suppress | dynamic_lookup ]
-weak_reference_mismatches missing [ error | weak | non-weak ]
weak
non-weak
invalid option to -weak_reference_mismatches [ error | weak | non-weak ]
-commons missing [ ignore_dylibs | use_dylibs | error ]
ignore_dylibs
use_dylibs
invalid option to -commons [ ignore_dylibs | use_dylibs | error ]
-dylib_file must followed by two colon separated paths
unknown -segprot letter in %s
malformed 64-bit a.b.c.d.e version number: %s
truncating -current_version to fit in 32-bit space used by old mach-o format
malformed 32-bit x.y.z version number: %s
can't open order file: %s
can't process order file: %s
can't read order file: %s
ppc:
ppc64:
i386:
x86_64:
arm:
arm64:
.o):
__cstring
__literal
sorting of __literal[4,8,16] sections not supported
-seccreate segment name max 16 chars
-seccreate section name (%s) truncated to 16 chars (%s)
can't open -sectcreate file: %s
can't read -sectcreate file: %s, errno=%d
-rename_section segment name max 16 chars
-rename_section section name max 16 chars
-rename_segment segment name max 16 chars
%s segment name max 16 chars
-sectalign segment name max 16 chars
-sectalign section name max 16 chars
argument for -sectalign is not a hexadecimal number
argument for -sectalign must be less than or equal to 0x8000
zero is not a valid -sectalign
alignment for -sectalign %s %s is not a power of two, using 0x%X
option %s is obsolete and being ignored
%s and -bitcode_bundle (Xcode setting ENABLE_BITCODE=YES) cannot be used together
-dylib
-compatibility_version
-current_version
-install_name
-execute
could not write bitcode options file output kind
-no_implicit_dylibs
-platform_version
-rpath
-objc_abi_version
-executable_path
-dead_strip
-remove_swift_reflection_metadata_sections
-export_dynamic
-application_extension
-add_source_version
-source_version
-sectalign
-no_objc_category_merging
missing argument for %s
argument missing after %s
%s missing version argument
[Logging ld64 options]
-iphoneos_version_min
-ios_version_min
-macosx_version_min
-macos_version_min
-iosmac_version_min
-uikitformac_version_min
-maccatalyst_version_min
--help
-help
ld64: For information on command line options please use 'man ld'.
-arch
-dynamic
-static
-bundle
-dylinker
-preload
-kext
-kernel
-kext_objects_dir
-no_kext_objects
can't write output file to '%s' because that path is a directory
-ld_classic
-ld64
-ld64 is deprecated, use -ld_classic instead
-no_warn_duplicate_libraries
-warn_duplicate_libraries
-lazy-l
-lazy-l is deprecated, changing to regular link
-lto_library
missing argument to -lto_library
-lto_softload_runtime_symbols
-no_lto_softload_runtime_symbols
-cache_path_lto
missing argument to -cache_path_lto
-prune_interval_lto
missing argument to -prune_interval_lto
invalid argument for -prune_interval_lto
-prune_after_lto
missing argument to -prune_after_lto
invalid argument for -prune_after_lto
-max_relative_cache_size_lto
missing argument to -max_relative_cache_size_lto
invalid argument for -max_relative_cache_size_lto
Expect a value between 0 and 100 for -max_relative_cache_size_lto
-lazy_
-load_hidden
missing -l argument
Csu support file %s not found, changing to target %s %s where it is not needed
-weak-l
-needed-l
-bind_at_load
-twolevel_namespace
-flat_namespace
-force_flat_namespace
-force_flat_namespace is no longer supported, using -flat_namespace instead
-all_load
-noall_load
-ObjC
-force_load
-hidden-l
-dylib_compatibility_version
-dylib_compatibility_version missing <version>
-dylib_current_version
-dylib_current_version missing <version>
-sectorder
-sectorder missing <segment> <section> <file-path>
-order_file
-order_file_statistics
-sectcreate
-segcreate
-sectcreate missing <segment> <section> <file-path>
-add_empty_section
-add_empty_section missing <segment> <section>
-dylib_install_name
-dylinker_install_name
-install_name missing <path>
double slash removed from -install_name (%s)
-seg1addr
-image_base
%s missing <address>
-seg1addr not %lld byte aligned, rounding up
-filelist
-filelist missing <path>
-keep_private_externs
-final_output
-final_output missing <name>
-interposable
-multi_module
-interposable_list
-single_module
-exported_symbols_list
can't use -exported_symbols_list and -unexported_symbols_list
-unexported_symbols_list
can't use -unexported_symbols_list and -exported_symbols_list
-exported_symbol
can't use -exported_symbol and -unexported_symbols
-unexported_symbol
can't use -unexported_symbol and -exported_symbol
-no_exported_symbols
can't use -no_exported_symbols and -[un]exported_symbol[s_list]
-non_global_symbols_no_strip_list
can't use -non_global_symbols_no_strip_list and -non_global_symbols_strip_list
-non_global_symbols_strip_list
-no_arch_warnings
-force_cpusubtype_ALL
-weak_library
-lazy_library
-lazy_library is deprecated, changing to regular link
-needed_library
-search_in_sparse_frameworks
-image_suffix
-framework
-weak_framework
-lazy_framework
-lazy_framework is deprecated, changing to regular link
-needed_framework
-search_paths_first
-search_dylibs_first
-undefined
-arch_multiple
-read_only_relocs
-read_only_relocs missing [ warning | error | suppress ]
-unaligned_pointers
-unaligned_pointers missing [ warning | error | suppress ]
-sect_diff_relocs
-weak_reference_mismatches
-prebind
-noprebind
-prebind_allow_overlap
-prebind_all_twolevel_modules
-noprebind_all_twolevel_modules
-nofixprebinding
-dylib_file
-executable_path missing <path>
-segalign
-segalign missing <size>
alignment for -segalign %s is not a power of two, using 0x%X
-segaddr
-segaddr missing segName Adddress
-segaddr %s not %lld byte aligned
-segs_read_only_addr
-segs_read_write_addr
-seg_addr_table
-seg_addr_table missing argument
-seg_addr_table_filename
-segprot
-segprot missing segName max-prot init-prot
-segprot cannot be used to modify __LINKEDIT protections
-pagezero_size
-pagezero_size missing <size>
-pagezero_size not page aligned, rounding down
-implicit_pagezero
-stack_addr
-stack_addr missing <address>
-stack_size
-stack_size missing <address>
-allow_stack_execute
the target architecture doesn't support executable stacks
-allow_heap_execute
-sectalign missing <segment> <section> <hexadecimal-number>
-sectorder_detail
-sectobjectsymbols
-bundle_loader
-bundle_loader missing <path>
-private_bundle
-twolevel_namespace_hints
platform and versions must be specified
%s passed unknown platform name '%s'
%s min version malformed: '%s'
%s sdk version malformed: '%s'
passed two min versions (%s, %s) for platform %s. Using %s.
%s value malformed: '%s'
changing %s minOS version from %s to %s
building for %s %s is deprecated
-multiply_defined
-multiply_defined_unused
-nomultidefs
-why_load
-whyload
-why_live
-why_live missing symbol name argument
-u missing argument
-U missing argument
-no_dead_strip_inits_and_terms
-fatal_warnings
-arch_errors_fatal
-headerpad
-headerpad missing argument
-headerpad_max_install_names
-headerpad_max_install_names is ignored when used with -bitcode_bundle (Xcode setting ENABLE_BITCODE=YES)
-umbrella
-umbrella missing argument
-allowable_client
-allowable_client missing argument
-client_name
-client_name missing argument
-sub_umbrella
-sub_umbrella missing argument
-sub_library
-sub_library missing argument
-init
-init missing argument
-dot
-dot missing argument
-warn_commons
-commons
-keep_relocs
-warn_stabs
-pause
-print_statistics
-syslibroot
-bitcode_bundle
-no_uuid
-random_uuid
-dtrace
-dtrace missing argument
-root_safe
-setuid_safe
-alias
-alias_list
-save-temps
-bitcode_hide_symbols
-bitcode_verify
-bitcode_symbol_map
%s/XXXXXX
could not write file to symbol map directory: %s
-flto-codegen-only
-ignore_auto_link
-allow_dead_duplicates
-bitcode_process_mode
strip
marker
data
bitcode
unknown argument to -bitcode_process_mode {strip,marker,data,bitcode}
-read_only_stubs
-slow_stubs
-map
-pie
-no_pie
-reexport-l
-reexport_library
-reexport_framework
-upward-l
-upward_library
-upward_framework
-dead_strip_dylibs
-new_linker
-no_encryption
-encryptable
-no_compact_unwind
-no_dwarf_unwind
-mllvm
-mcpu
-no_order_inits
-seg_page_size
-seg_page_size missing segName Adddress
-seg_page_size %s not 4K aligned, rounding down
-mark_dead_strippable_dylib
-exported_symbols_order
-no_compact_linkedit
-no_eh_labels
-warn_compact_unwind
-allow_sub_type_mismatches
-no_zero_fill_sections
-merge_zero_fill_sections
ignoring unrecognized argument (%s) to -objc_abi_version
-warn_unused_dylibs
-no_warn_unused_dylibs
-objc_relative_method_lists
-no_objc_relative_method_lists
-warn_weak_exports
-no_weak_exports
-objc_gc_compaction
-objc_gc
-objc_gc_only
-objc_stubs_small
-objc_stubs_fast
-no_huge
-demangle
-version_load_command
-function_starts
-no_function_starts
-no_data_in_code_info
-data_in_code_info
-object_path_lto
-force_symbols_weak_list
-force_symbols_not_weak_list
-force_symbol_weak
-force_symbol_weak missing <symbol>
-force_symbol_not_weak
-force_symbol_not_weak missing <symbol>
-reexported_symbols_list
can't use -exported_symbols_list and -reexported_symbols_list
-dyld_env
-dyld_env missing ENV=VALUE
-page_align_data_atoms
-debug_snapshot
-snapshot_dir
-snapshot_dir missing path
-source_version missing <version>
-no_source_version
-sdk_version
-sdk_version missing <version>
-dependent_dr_info
-no_dependent_dr_info
-kexts_use_stubs
-dependency_info
-force_symbols_coalesce_list
-add_linker_option
-add_linker_option missing <option>
-allow_simulator_linking_to_macosx_dylibs
-simulator_support
-keep_dwarf_unwind
-no_keep_dwarf_unwind
-verbose_optimization_hints
-ignore_optimization_hints
-no_dtrace_dof
-rename_section
-rename_section missing <segment> <section> <segment> <section>
-rename_segment
-rename_segment missing <existing-segment> <new-segment>
-move_to_ro_segment
-move_to_ro_segment missing <segment> <symbol-list-file>
-move_to_rw_segment
-move_to_rw_segment missing <segment> <symbol-list-file>
-trace_symbol_layout
-no_branch_islands
-segment_order
-segment_order missing colon separated <segment-list>
-segment_order used more than once
-section_order
-section_order missing <segment> <section-list>
-section_order %s ... used more than once
-no_application_extension
-add_ast_path
-add_ast_path missing <option>
-force_load_swift_libs
-not_for_dyld_shared_cache
-no_shared_cache_eligible
-dirty_data_list
-dirty_data_list missing <symbol-list-file>
__DATA_DIRTY
-data_const
-no_data_const
-const_selrefs
-no_const_selrefs
-text_exec
-add_split_seg_info
-no_auth_data
-no_deduplicate
-verbose_deduplicate
-max_default_common_align
-max_default_common_align missing <align-value>
argument for -max_default_common_align is not a hexadecimal number
argument for -max_default_common_align must be less than or equal to 0x8000
zero is not a valid -max_default_common_align
alignment for -max_default_common_align is not a power of two, using 0x%X
-no_weak_imports
-no_inits
-no_warn_inits
-threaded_starts_section
-fixup_chains_section
-fixup_chains_section_vm
-fixup_chains
-no_fixup_chains
-fixup_chains_steal_pointers
-rebase_section
-debug_variant
-no_new_main
-init_offsets
-adhoc_codesign
-no_adhoc_codesign
-oso_prefix
-oso_prefix missing <path>
-oso_prefix path '.' cannot be expanded
-reproducible
-objc_class_ro_signing_mismatch
warn
unknown option: %s
-L missing argument
-L must be immediately followed by a directory path (no space)
-F missing argument
-F must be immediately followed by a directory path (no space)
BUILD 06:59:44 Aug 10 2024
configured to support archs: %s
LTO support using: %s (static support for %d, runtime is %d)
TAPI support using: %s
-version_details
"version": "%s",
954.16
"architectures": [
armv6 armv7 armv7s arm64 arm64e arm64_32 i386 x86_64 x86_64h armv6m armv7k armv7m armv7em
"%s"
"lto": {
"runtime_api_version": %d,
"static_api_version": %d,
"version_string": "%s"
"tapi": {
"version": "%s",
-syslibroot missing argument
-dependency_info missing <path>
/System/DriverKit/usr/lib
/System/DriverKit/System/Library/Frameworks/
/System/KernelKit/usr/lib
/System/KernelKit/System/Library/Frameworks/
/usr/lib
/usr/local/lib
/Library/Frameworks/
/System/Library/Frameworks/
-syslibroot and -L combined path '%s' is not a directory
-L path '%s' is not a directory
directory not found for option '-L%s'
-syslibroot and -F combined path '%s' is not a directory
-F path '%s' is not a directory
directory not found for option '-F%s'
Library search paths:
Framework search paths:
LD_FORCE_LEGACY_VERSION_LOAD_CMDS
LD_TRACE_ARCHIVES
RC_TRACE_ARCHIVES
LD_TRACE_DYLIBS
RC_TRACE_DYLIBS
LD_TRACE_DEPENDENTS
RC_TRACE_DYLIB_SEARCHING
LD_PRINT_OPTIONS
LD_TRACE_FILE
LD_PRINT_ORDER_FILE_STATISTICS
LD_NO_ENCRYPT
LD_APPLICATION_EXTENSION_SAFE
LD_ALLOW_CPU_SUBTYPE_MISMATCHES
LD_DYLIB_CPU_SUBTYPES_MUST_MATCH
LD_WARN_ON_SWIFT_ABI_VERSION_MISMATCHES
LD_OBJC_CLASS_RO_SIGNING_MISMATCH
LD_WARN_FILE
LD_DYLD_PATH
LD_DEBUG_SNAPSHOT
LD_PIPELINE_FIFO
ZERO_AR_DATE
/Developer/Toolchains/
RC_UUID_SALT
LD_PREFER_TAPI_FILE
RC_XBS
RC_BUILDIT
RC_ProjectName
SiValFactoryTests
AppleAVE2FW
AppleAneFW
AppleH13ISPFirmware
AppleISPFirmware
USBCFW_D52_D53_D54
GPUToolsDevice_Sim
Watchtower
LD_DEAD_STRIP
LD_WARN_COMMONS
RC_ProjectSourceVersion
/usr/lib/
/System/Library/
/System/DriverKit/
/Library/Apple/usr/lib/
/Library/Apple/System/Library/
/System/iOSSupport/System/Library/
/System/iOSSupport/usr/lib/
/AppleInternal/
No platform min-version specified on command line
%s env var malformed: '%s'
v24@?0r^{PlatformInfo=ii***IIIBBii}8^B16
changing Mac Catalyst minOS version from %s to %s
/System/Library/UserEventPlugins/
/System/ExclaveKit/
/AppleInternal/DirtyDataFiles
.dirty
/AppleInternal/AccessibilityLinkerSymbols
.axsymbols
/AppleInternal/OrderFiles/
.order
/usr/lib/swift/
/usr/lib/swift
/usr/lib/system/libxpc
/usr/lib/system/libdispatch
/usr/lib/system/introspection/libdispatch
/usr/libexec/locationd
/usr/libexec/terminusd
__DATA
__got
__auth_got
__auth_ptr
__nl_symbol_ptr
__const
__cfstring
__objc_intobj
__objc_floatobj
__objc_doubleobj
__objc_dataobj
__objc_dateobj
__objc_dictobj
__objc_arrayobj
__objc_arraydata
__mod_init_func
__mod_term_func
__objc_classlist
__objc_nlclslist
__objc_catlist
__objc_catlist2
__objc_nlcatlist
__objc_protolist
__objc_imageinfo
__const_cfobj2
__la_symbol_ptr
__objc_const
__objc_selrefs
__objc_classrefs
__objc_superrefs
__objc_protorefs
__stubs
__auth_stubs
-allow_sub_type_mismatches overrides LD_DYLIB_CPU_SUBTYPES_MUST_MATCH
-threaded_starts_section ignored ignored for non-arm64
-threaded_starts_section ignored for binaries other than -static or -preload
BristolOS
AppleACPIPlatform_executables
Sandbox_executables
DiskImages2
-rebase_section can only be used with 32-bit arm and -preload output type
-pie and -no_pie can't be used together
reconfigureDefaults
fNoLazyBinding
-no_pie is deprecated when targeting new OS versions
-no_pie ignored for arm64
kernelKit can only be used with -r, -kext and -static
_main
start
Ignoring '-e start' because entry point 'start' is not used for the targeted OS version
-sdk_version may not be used for zippered binaries
-sdk_version and -platform_version are not compatible, ignoring -sdk_version
MACOSX_DEPLOYMENT_TARGET
resetting alignment for arm firmware
base address 0x%llX is not properly aligned. Changing it to 0x%llX
Linking with PIE, -image_base will be ignored
ignoring -seg1addr 0x%08llX.  Address out of range.
prefered load addresses (-seg1addr) are disabled with chained fixups
OS dylibs should not add rpaths (linker option: -rpath) (Xcode build setting: LD_RUNPATH_SEARCH_PATHS)
@rpath
OS dylibs should not use @rpath for -install_name.  Use absolute path instead
OS dylibs -install_name should match its real absolute path
for arm64e unaligned pointer errors are fatal
-undefined dynamic_lookup is deprecated on %s
can't use -undefined warning or suppress with -twolevel_namespace
-sub_umbrella %s does not match a supplied dylib
-sub_library %s does not match a supplied dylib
-flat_namespace is deprecated on %s
-stack_addr must be < 4G for 32-bit processes
-stack_addr must be multiples of 4K
-stack_addr must be used with -stack_size
-stack_size must be < 4GB for 32-bit processes
custom stack placement overlaps and will disable shared region
-stack_size must be < 496MB
-stack_addr must be < 0x20000000 for arm
-stack_size must be <= 1TB
-stack_size must be <= 512MB
-stack_size must be < 512MB
-stack_size must be multiple of segment alignment (%lldKB)
-stack_size option can only be used when linking a main executable
-stack_size (0x%08llX) must be smaller than -stack_addr (0x%08llX)
-allow_stack_execute option can only be used when linking a main executable
-allow_heap_execute option can only be used when linking for i386
-allow_heap_execute option can only be used when linking a main executable
-client_name can only be used with -bundle
-init can only be used with -dynamiclib
-bundle_loader can only be used with -bundle
-dtrace can only be used when creating final linked images
-d can only be used with -r
-root_safe cannot be used with -r
-setuid_safe cannot be used with -r
.objc_category_name_
ignoring %s in export list
_OBJC_CLASS_$
ignoring Objc2 Class symbol %s in i386 export list
.objc_class_name_
_OBJC_CLASS_$_%s
_OBJC_METACLASS_$_%s
-kernel must be used with -static
-pagezero_size is too large, setting it to 4GB
to use chained fixups with static executables, use -fixup_chains_section
chained fixups cannot be used with relocatable object files
ignoring -pagezero_size, it's incompatible with the platform
non-standard -pagezero_size is deprecated when targeting macOS 13.0 or later
-pagezero_size not aligned, rounded up to: %#llx, use -segalign to change the alignment
-pagezero_size option can only be used when linking a main executable
-segaddr %s 0x%llX conflicts with -pagezero_size
duplicate -segaddr addresses for %s and %s
-r and -dead_strip cannot be used together
-rpath can only be used when targeting Mac OS X 10.5 or later
-rpath can only be used when creating a dynamic final linked image
-pie requires targetting a newer minimum version
-pie being ignored. It is only used when linking a main executable
-pie can only be used when linking a main executable
-read_only_relocs cannot be used with x86_64
-read_only_relocs cannot be used with arm64
-read_only_relocs cannot be used with arm64_32
-mark_auto_dead_strip can only be used when creating a dylib
-force_cpusubtype_ALL will become unsupported for ARM architectures
-reexported_symbols_list can only used used when created dynamic libraries
targeted OS version does not support -reexported_symbols_list
-dyld_env can only used used when created main executables
-segment_order can only used used with -preload output
-bitcode_verify is ignored without -bitcode_bundle
-bitcode_hide_symbols is ignored without -bitcode_bundle
-bitcode_symbol_map can only be used with -bitcode_hide_symbols
embedded dylibs/frameworks only run on iOS 8 or later
no object files specified
/AppleInternal/LinkerAutoZipperList.txt
Illegal platform count.  Only 2 platforms at a maximum can be specified
%s platform version must be at least 13.0
Only dylibs and bundles can be zippered, changing output to be macOS only.
The i386 architecture is deprecated for macOS (remove from the Xcode build setting: ARCHS)
/System/iOSSupport
AdLib
AVKit_iosmac
AuthKitUI_iosmac
Feldspar
OpenGL_iosmac
PassKitServices
SceneKit_swiftoverlay_SwiftUI_macCatalyst
Stocks
Frameworks installed in /System/iOSSupport can only have a macCatalyst LC_BUILD_VERSION
Chrono_iosmac
FCFEncoder_iosmac
GreenTorch
MaterialKit
ShareSheet_iosmac
UIKitSystemApp
VisualTestKit_iosmac
macCatalyst dylib found outside /System/iOSSupport. It should be in there or be zippered
%s in %s
platform not specified
-arch not specified
SRCROOT
SRCROOT=
ld64-954.16
Could not open or create -dependency_info file: %s
write() to -dependency_info failed, errno=%d
Could not open or create trace file (errno=%d): %s
x86_64
x86_64-
x86_64h
x86_64h-
i386
i386-
armv6
armv6-
armv7
thumbv7-
armv7-
armv7k
thumbv7k-
armv7s
thumbv7s-
armv6m
thumbv6m-
armv7m
thumbv7m-
armv7em
thumbv7em-
arm64
arm64-
aarch64-
arm64e
arm64e-
aarch64e-
arm64_32
arm64_32-
aarch64_32-
nextMinorIndex
minorIndex() < 0xffff
cstring=%s
copyFrom
&other != this
getNumBuckets() == other.getNumBuckets()
/libclang_rt
/libcompiler-rt
AdvancePastEmptyBuckets
Ptr <= End
reallocf failed
recursively loading %s
can't open %s: %s
can't stat %s: %s
can't malloc %s: %s
can't read the content of %s: %s
can't close %s: %s
v8@?0
%s: No read page method set
libcd_serialize_as_type
%s: No write method set
%s: nothing to serialize
%s: serialize superblob header failed
libcodedirectory.c
s->hash_types_count <= CSSLOT_ALTERNATE_CODEDIRECTORY_MAX
%s: serialize superblob indices failed
%s: serialize code directory type %d failed, error %d
%s: serialize raw blob data, slot %#x, failed
%s: serialize signature space(%zu) failed allocating space (%d)
%s: Failed to generate signature
%s: serialize signature space (%zu) failed
libcd_log
%s: unknown hash type %d (>= %d)
_libcd_get_hash_info
%s: internal error, hash len (%d) is larger than max known hash len (%d)
%s: write beyond end: %zu > %zu
_libcd_write_mem
%s: Failed to allocate temporary memory for code directory
_libcd_serialize_cd
%s: serialize page hashes failed
%s: failed to write directory
%s: Failed to allocated memory for cdhash
%s: read page %d at pos %zu failed (pages: %d)
_libcd_hash_page
object file (%s) was built for newer %s version (%s) than being linked (%s)
building for %s, but linking in object file (%s) built for %s,
building for %s, but linking in object file (%s) built for %s
building for %s, but linking in object file built for %s,
dylib (%s) was built for newer %s version (%s) than being linked (%s)
/usr/lib/system/libsystem_kernel.dylib
/usr/lib/system/libsystem_platform.dylib
/usr/lib/system/libsystem_pthread.dylib
building for %s, but linking in %s file (%s) built for %s,
QuickLookPlugins
building zippered for %s, but linking in unzippered twin %s file (%s) built for %s
building for %s, but linking in %s file (%s) built for %s
building zippered for %s, but linking in in unzippered twin %s built for %s,
building for %s, but linking in %s built for %s,
platform=%u
%d.%d.%d
%d.%d
macOS
IPHONEOS_DEPLOYMENT_TARGET
tvOS
-tvos_version_min
TVOS_DEPLOYMENT_TARGET
watchOS
-watchos_version_min
WATCHOS_DEPLOYMENT_TARGET
bridgeOS
-bridgeos_version_min
BRIDGEOS_DEPLOYMENT_TARGET
Mac Catalyst
iOS Simulator
-ios_simulator_version_min
tvOS Simulator
-tvos_simulator_version_min
watchOS Simulator
-watchos_simulator_version_min
DriverKit
-driverkit_version_min
sepOS
xrOS
XROS_DEPLOYMENT_TARGET
xrOS Simulator
free standing
macOS KernelKit
iOS KernelKit
tvOS KernelKit
watchOS KernelKit
xrOS KernelKit
bridgeOS KernelKit
__data
__common
__zerofill
__datacoal_nt
__const_coal
__textcoal_nt
__StaticInit
__IMPORT
__pointers
__comm/tent
__HEADER
__AUTH_CONST
__AUTH
__OBJC
__objc_classname
__objc_methname
__objc_methtype
__objc_methlist
__huge
__objc_msgrefs
__objc_ivar
__objc_data
__objc_const_ax
__llvm_prf_cnts
__llvm_prf_data
cannot move symbol '%s' from file %s to segment '%s' because symbol is not data (is %d)
symbol '%s', -move_to_rw_segment mapped it to %s/%s
__OBJC_$_INSTANCE_METHODS_
symbol '%s', .axsymbol mapped it to %s/%s
__OBJC_$_CLASS_METHODS_
cannot move symbol '%s' from file %s to segment '%s' because symbol is not code (is %d)
symbol '%s', -move_to_ro_segment mapped it to %s/%s
l_OBJC_$_INSTANCE_METHODS_
l_OBJC_$_CLASS_METHODS_
symbol '%s', -rename_section mapped it to %s/%s
symbol '%s', -rename_segment mapped it to %s/%s
symbol '%s', contains authenticated pointers, so mapped it to __AUTH/%s
symbol '%s', use default mapping to %s/%s
sortSections
ld.cpp
(sections[0]->type() == ld::Section::typeMachHeader) || ((sections[0]->type() == ld::Section::typeFirstSection) && (sections[1]->type() == ld::Section::typeMachHeader)) || ((sections[0]->type() == ld::Section::typePageZero) && (sections[1]->type() == ld::Section::typeMachHeader)) || ((sections[0]->type() == ld::Section::typePageZero) && (sections[1]->type() == ld::Section::typeFirstSection) && (sections[2]->type() == ld::Section::typeMachHeader))
__objc_
weak external symbol: %s
-sectalign is reducing the alignment of %s,%s from 2^%u to 2^%u
section %s (address=0x%08llX, size=%llu) would make the output executable exceed available address range
assignFileOffsets
prevSect->size == 0
Section layout:
  address:0x%08llX, alignment:2^%d, size:0x%08llX, padBytes:%d, section:%s/%s
Section (%s/%s) overlaps fixed address section (%s/%s)
ld total time
 option parsing time
 object file processing
 resolve symbols
 build atom list
 passess
 write output
pageins=%u, pageouts=%u, faults=%u
memory active: %lu, wired: %lu
processed %3u object files,  totaling %15s bytes
processed %3u archive files, totaling %15s bytes
processed %3u dylib files
wrote output file            totaling %15s bytes
ld: fatal warning(s) induced error (-fatal_warnings)
malformed
ld: %s
ld: %s for architecture %s
Assertion failed: (%s), function %s, file %s, line %d.
%d  %p  %s + %ld
A linker snapshot was created at:
ld: Assertion failed: (%s), function %s, file %s, line %d.
validateFixups
(fit->offsetInAtom <= atom.size()) || (fit->offsetInAtom == 0)
lastWasClusterEnd
!lastWasClusterEnd
fit->offsetInAtom == curClusterOffsetInAtom
fit->u.target != NULL
0 && "last fixup was not end of cluster"
setSectionOffset
%24s: % 4d.%d milliseconds (% 4d.%d%%)
%24s: % 4d.%d seconds (% 4d.%d%%)
%llu
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/ld64/src/ld/parsers/libunwind/AddressSpace.hpp
DW_EH_PE_textrel pointer encoding not supported
DW_EH_PE_datarel pointer encoding not supported
DW_EH_PE_funcrel pointer encoding not supported
DW_EH_PE_aligned pointer encoding not supported
ARM function not 4-byte aligned: %s from %s
arm64 function not 4-byte aligned: %s from %s
__LD
__aliases
x86_64??
arm???
relocations for section %s/%s extends beyond end of file,
CFISection::cfiParse() unexpected relocation type at r_address=0x%08X
malformed __eh_frame relocation, offset (0x%08X) is beyond end of section,
CFISection::cfiParse() unexpected relocation size at r_address=0x%08X
malformed __eh_frame section: %s
cfiParse
macho_relocatable_file.cpp
count == 0
unsupported address encoding (%02X) of personality function in CIE
addCiePersonalityFixups
nlpAtom->contentType() == ld::Atom::typeNonLazyPointer
personalityName
(reloc->r_type() == X86_64_RELOC_UNSIGNED) && "wrong reloc type on personality column in __compact_unwind section"
(parser.sectionForAddress(personalityAddr)->type() == ld::Section::typeCode) && "personality column in __compact_unwind section is not pointer to function"
(reloc->r_type() == GENERIC_RELOC_VANILLA) && "wrong reloc type on personality column in __compact_unwind section"
(reloc->r_type() == ARM64_RELOC_UNSIGNED) && "wrong reloc type on personality column in __compact_unwind section"
(personalitySection->type() == ld::Section::typeCode) && "personality column in __compact_unwind section is not pointer to function"
(reloc->r_type() == ARM_RELOC_VANILLA) && "wrong reloc type on personality column in __compact_unwind section"
makeFixups
0 && "x86_64 should not have non-lazy-pointer sections in .o files"
target.atom->contentType() == ld::Atom::ContentType::typeTLV
unexpected pointer to local symbol in section %s
src.atom->combine() == ld::Atom::combineByNameAndReferences
malformed mach-o, relocations not supported on section %s
malformed mach-o, reloc addr 0x%llX not in any atom
pcrel and X86_64_RELOC_UNSIGNED not supported
length < 2 and X86_64_RELOC_UNSIGNED not supported
alignment (%llu) of atom '%s' is too small and may result in unaligned pointers 
not pcrel and X86_64_RELOC_SIGNED* not supported
length != 2 and X86_64_RELOC_SIGNED* not supported
not pcrel and X86_64_RELOC_BRANCH not supported
___dtrace_probe$
___dtrace_isenabled$
length=%d and X86_64_RELOC_BRANCH not supported
not extern and X86_64_RELOC_GOT not supported
not pcrel and X86_64_RELOC_GOT not supported
length != 2 and X86_64_RELOC_GOT not supported
not extern and X86_64_RELOC_GOT_LOAD not supported
not pcrel and X86_64_RELOC_GOT_LOAD not supported
length != 2 and X86_64_RELOC_GOT_LOAD not supported
X86_64_RELOC_SUBTRACTOR cannot be pc-relative
X86_64_RELOC_SUBTRACTOR must have r_length of 2 or 3
X86_64_RELOC_SUBTRACTOR must have r_extern=1
X86_64_RELOC_SUBTRACTOR must be followed by X86_64_RELOC_UNSIGNED
X86_64_RELOC_UNSIGNED following a X86_64_RELOC_SUBTRACTOR cannot be pc-relative
X86_64_RELOC_UNSIGNED following a X86_64_RELOC_SUBTRACTOR must have same r_length
not extern and X86_64_RELOC_TLV not supported
not pcrel and X86_64_RELOC_TLV not supported
length != 2 and X86_64_RELOC_TLV not supported
unknown relocation type %d
r_length=0 and r_pcrel=0 not supported
r_length=3 not supported
r_extern=0 and r_type=GENERIC_RLEOC_TLV not supported
r_length!=2 and r_type=GENERIC_RLEOC_TLV not supported
unsupported i386 relocation type (%d)
addRelocFixup
src.atom != NULL
unsupported r_length=3 for scattered pc-rel vanilla reloc
unsupported r_length=%d for scattered vanilla reloc
GENERIC_RELOC_SECTDIFF missing following pair
bad length for GENERIC_RELOC_SECTDIFF
bad length for ARM_RELOC_VANILLA
for ARM_RELOC_HALF, next reloc is not ARM_RELOC_PAIR
bad r_value (0x%08X) for ARM_RELOC_VANILLA
ARM_RELOC_SECTDIFF missing following pair
bad length for ARM_RELOC_SECTDIFF
ARM_RELOC_HALF_SECTDIFF reloc missing following pair
scattered ARM_RELOC_HALF reloc missing following pair
unknown ARM scattered relocation type %d
ARM64_RELOC_ADDEND r_address does not match next reloc's r_address
pcrel and ARM64_RELOC_UNSIGNED not supported
length < 2 and ARM64_RELOC_UNSIGNED not supported
not pcrel and ARM64_RELOC_BRANCH26 not supported
r_extern == 0 and ARM64_RELOC_BRANCH26 not supported
r_length != 2 and ARM64_RELOC_BRANCH26 not supported
branch26 instruction at 0x%08X has embedded addend. ARM64_RELOC_ADDEND should be used instead
branch26 instruction at 0x%08X has embedded addend and ARM64_RELOC_ADDEND also used
not pcrel and ARM64_RELOC_PAGE21 not supported
r_extern == 0 and ARM64_RELOC_PAGE21 not supported
length != 2 and ARM64_RELOC_PAGE21 not supported
adrp instruction at 0x%08X has embedded addend. ARM64_RELOC_ADDEND should be used instead
adrp instruction at 0x%08X has embedded addend and ARM64_RELOC_ADDEND also used
pcrel and ARM64_RELOC_PAGEOFF12 not supported
r_extern == 0 and ARM64_RELOC_PAGEOFF12 not supported
length != 2 and ARM64_RELOC_PAGEOFF12 not supported
pageoff12 instruction at 0x%08X has embedded addend. ARM64_RELOC_ADDEND should be used instead
pageoff12 instruction at 0x%08X has embedded addend and ARM64_RELOC_ADDEND also used
not pcrel and ARM64_RELOC_GOT_LOAD_PAGE21 not supported
r_extern == 0 and ARM64_RELOC_GOT_LOAD_PAGE21 not supported
length != 2 and ARM64_RELOC_GOT_LOAD_PAGE21 not supported
ARM64_RELOC_ADDEND followed by ARM64_RELOC_GOT_LOAD_PAGE21 not supported
non-zero addend with ARM64_RELOC_GOT_LOAD_PAGE21 is not supported
pcrel and ARM64_RELOC_GOT_LOAD_PAGEOFF12 not supported
r_extern == 0 and ARM64_RELOC_GOT_LOAD_PAGEOFF12 not supported
length != 2 and ARM64_RELOC_GOT_LOAD_PAGEOFF12 not supported
ARM64_RELOC_ADDEND followed by ARM64_RELOC_GOT_LOAD_PAGEOFF12 not supported
not pcrel and ARM64_RELOC_TLVP_LOAD_PAGE21 not supported
r_extern == 0 and ARM64_RELOC_TLVP_LOAD_PAGE21 not supported
length != 2 and ARM64_RELOC_TLVP_LOAD_PAGE21 not supported
ARM64_RELOC_ADDEND followed by ARM64_RELOC_TLVP_LOAD_PAGE21 not supported
non-zero addend with ARM64_RELOC_TLVP_LOAD_PAGE21 is not supported
pcrel and ARM64_RELOC_TLVP_LOAD_PAGEOFF12 not supported
r_extern == 0 and ARM64_RELOC_TLVP_LOAD_PAGEOFF12 not supported
length != 2 and ARM64_RELOC_TLVP_LOAD_PAGEOFF12 not supported
ARM64_RELOC_ADDEND followed by ARM64_RELOC_TLVP_LOAD_PAGEOFF12 not supported
ARM64_RELOC_SUBTRACTOR cannot be pc-relative
ARM64_RELOC_SUBTRACTOR must have r_length of 2 or 3
ARM64_RELOC_SUBTRACTOR must have r_extern=1
ARM64_RELOC_SUBTRACTOR must be followed by ARM64_RELOC_UNSIGNED
ARM64_RELOC_ADDEND followed by ARM64_RELOC_SUBTRACTOR not supported
ARM64_RELOC_UNSIGNED following a ARM64_RELOC_SUBTRACTOR cannot be pc-relative
ARM64_RELOC_UNSIGNED following a ARM64_RELOC_SUBTRACTOR must have same r_length
r_extern == 0 and ARM64_RELOC_POINTER_TO_GOT not supported
ARM64_RELOC_ADDEND followed by ARM64_RELOC_POINTER_TO_GOT not supported
r_length != 2 and r_extern = 1 and ARM64_RELOC_POINTER_TO_GOT not supported
r_length != 3 and r_extern = 0 and ARM64_RELOC_POINTER_TO_GOT not supported
pcrel and ARM64_RELOC_AUTHENTICATED_POINTER not supported
r_extern == 0 and ARM64_RELOC_AUTHENTICATED_POINTER not supported
stripping authenticated relocation as image uses -preload or -static
ARM64_RELOC_AUTHENTICATED_POINTER value must have authenticated bit set
length < 3 and ARM64_RELOC_AUTHENTICATED_POINTER not supported
PerfUtils
ARM64_RELOC_UNSIGNED with length=2 not supported (64-bit pointer in arm64_32)
ARM64_RELOC_SUBTRACTOR must have r_length of 2
r_length != 2 ARM64_RELOC_POINTER_TO_GOT not supported
reloc->r_length() == 2
! reloc->r_pcrel()
stringTarget.atom != NULL
stringTarget.atom->contentType() == ld::Atom::typeCString
(reloc->r_address() & R_SCATTERED) == 0
reloc->r_type() == GENERIC_RELOC_VANILLA
arm64 Linker Optimiztion Hint %d has wrong number of arguments
arm64 Linker Optimiztion Hint addresses are not in same atom: 0x%08llX and 0x%08llX
arm64 Linker Optimiztion Hint address is not 4-byte aligned: 0x%08llX
arm64 Linker Optimiztion Hint addresses are too far apart: 0x%08llX and 0x%08llX
getULEB128
truncated uleb128 expression
malformed uleb128 expression
__eh_frame parsing problem.  Can't find target of reference to address 0x%08llX
__objc_stringobj
__gcc_except_tab
symbol index out of range
no symbol table
too little space allocated for parseCFIs
CFI length too long
FDE points to CIE outside __eh_frame section
FDE found for zero size function
dwarf unwind instructions could not be parsed
CIE ID is not zero
CIE version is not 1 or 3
ObjectFileAddressSpace<A>::getEncodedP() encoding 0x%08X not supported
malformed DW_CFA_offset_extended dwarf unwind, reg too big
malformed DW_CFA_restore_extended dwarf unwind, reg too big
malformed DW_CFA_undefined dwarf unwind, reg too big
malformed DW_CFA_same_value dwarf unwind, reg too big
malformed DW_CFA_register dwarf unwind, reg too big
malformed DW_CFA_register dwarf unwind, reg2 too big
malformed DW_CFA_def_cfa dwarf unwind, reg too big
malformed DW_CFA_def_cfa_register dwarf unwind, reg too big
malformed DW_CFA_expression dwarf unwind, reg too big
malformed DW_CFA_offset_extended_sf dwarf unwind, reg too big
malformed DW_CFA_def_cfa_sf dwarf unwind, reg too big
malformed DW_CFA_val_offset_sf dwarf unwind, reg too big
malformed DW_CFA_val_expression dwarf unwind, reg too big
malformed DW_CFA_GNU_negative_offset_extended dwarf unwind, reg too big
register saved more than once (might be shrink wrap)
cfa had negative offset (dwarf might contain epilog)
dwarf uses DW_CFA_GNU_args_size
dwarf uses DW_CFA_same_value
does not use RBP or RSP based frame
register %d saved somewhere other than in frame
non-standard register %d being saved in prolog
offset of saved registers too far to encode
saved registers not contiguous
stack size is large but stack subq instruction not found
stack subq instruction is too different from dwarf stack size
r15 is saved too far from return address
r14 is saved too far from return address
r13 is saved too far from return address
r12 is saved too far from return address
rbx is saved too far from return address
rbp is saved too far from return address
registers not save contiguously in stack
could not create compact unwind for %s: %s
could not create compact unwind: %s
does not use EBP or ESP based frame
stack size is large but stack subl instruction not found
stack subl instruction is too different from dwarf stack size
ebx is saved too far from return address
ecx is saved too far from return address
edx is saved too far from return address
edi is saved too far from return address
esi is saved too far from return address
ebp is saved too far from return address
saved registers do not fit in stack size
stack size is not 16-byte multiple
stack size is too large for frameless function
does not use standard frame
non standard register %d saved in frame
registers %d and %d not saved contiguously in frame
registers %d not saved contiguously in frame
malformed nlist string offset
Fixup
name != NULL
too may fixups in %s
targetAtom != NULL
sectionForAddress(0x%llX) address not in any section
ltmp
section does not use indirect symbol table
indirect symbol index out of range
addFixups
cl == ld::Fixup::k2of4
combined
R_ABS reloc but no absolute symbol at target address
findTargetFromAddressAndSectionNum
symbolIndex != INDIRECT_SYMBOL_LOCAL
target.atom != NULL
sectionForNum(%u) section number not for any section
findTargetFromAddress
findAtomByAddressOrLocalTargetOfStub
(this->combineFromSymbol(sym) != ld::Atom::combineByName) || (this->scopeFromSymbol(sym) != ld::Atom::scopeGlobal)
STACK_ALLOC_IF_SMALL allocation overflow
parse
cfiStartsArray[i] != cfiStartsArray[i-1]
_file->_atomsArrayCount == computedAtomCount && "more atoms allocated than expected"
fixupOffset == _allFixups.size()
info->function != NULL
__LD,__compact_unwind entries for %s have a gap at offset 0x%0X
__LD,__compact_unwind entries for %s overlap at offset 0x%0X
load command #%d has a unaligned size
load command #%d extends beyond the end of the load commands
load command #%d extends beyond the end of the file
mach-o symbol table extends beyond end of file
mach-o string pool extends beyond end of file
indirect symbol table extends beyond end of file
LC_DATA_IN_CODE table extends beyond end of file
malformed LC_LINKER_OPTION
LC_LINKER_OPTIMIZATION_HINTS table extends beyond end of file
more than one LC_SEGMENT found in object file
section %s/%s address out of range
section %s/%s has type zero-fill but non-zero file offset
section %s/%s offset out of range
unknown load command 0
malformed mach-o file, load command #%d is outside size of load commands
missing LC_SEGMENT
LC_SEGMENT fileoff too large
LC_SEGMENT filesize too large
too many sections for size of LC_SEGMENT command
overlapping sections
section index out of range
___dtrace_
probe$
isenabled$
L$start$
bad n_sect in symbol table
makeSortedSymbolsArray
p == &array[_symbolsInSections] && "second pass over symbol table yield a different number of symbols"
section %s/%s extends beyond end of file,
__DWARF
__debug_info
__debug_abbrev
__debug_line
__debug_str
__debug_str_offs
__compact_unwind
__LLVM
__bitcode
__cmdline
__swift_cmdline
__bundle
__asm
__image_info
section %s/%s has unexpectedly large size %llu in %s
can't parse %s/%s section in %s
__TEXT/__text has wrong section type
__cls_refs
__eh_frame
__ustring
__class
unknown section type %d
Object file with bitcode missing cmdline options: %s
internal error uknown SectionType
clang
swift
__constructor
__dyld
__program_vars
alignment for symbol at address 0x%08llX in %s exceeds 2^16
Atom
_symbolTableInclusion != symbolTableIn
_scope != scopeGlobal
malformed .o file, symbol has address 0x%0llX which is outside range of its section
definitionFromSymbol() bad symbol
in section %s,%s reloc %u: %s
N_ALT_ENTRY bit set on first atom in section %s/%s
data$
code$
jt8$
jt16$
jt32$
jta32$
unknown L$start$ label %s in file %s
uknown LC_DATA_IN_CODE kind (%d) at offset 0x%08X
malformed uleb128 kind in LC_LINKER_OPTIMIZATION_HINTS
malformed uleb128 count in LC_LINKER_OPTIMIZATION_HINTS
address count > 3 in LC_LINKER_OPTIMIZATION_HINTS
p < &_endAtoms[-1]
p->_objAddress == targetOfAlias->_objAddress
canCoalesceWith
this->type() == rhs.section().type()
rhsAtom != NULL
4-byte-literal
8-byte-literal
16-byte-literal
contentHash
atom->combine() == ld::Atom::combineByNameAndReferences
targetName
atom->fixupCount() == 1
non_lazy_ptr
0 && "should not have thread-local-pointer sections in .o files"
tlv_lazy_ptr
unsupported encoding in FDE of pointer to function
unsupported encoding in FDE of pointer to LSDA
strcmp(this->sectionName(), rhs.section().sectionName())== 0
strcmp(this->segmentName(), rhs.section().segmentName())== 0
cstring
cstringContent != NULL
rhsCstringContent != NULL
pointer-to-literal-cstring
targetCString
0 && "unsupported reference to selector"
target != NULL
target->contentType() == ld::Atom::typeCString
0 && "needs template specialization"
pointer-to-literal-objc-class-name
atom->fixupCount() == 2
missing target named %s
__llvm_prf_
anon
targetContent
fit->offsetInAtom == 0
___CFConstantStringClassReference
strcmp(fit->u.name, "___CFConstantStringClassReference") == 0
0 && "bad binding type"
strcmp(this->sectionName(), "__cfstring") == 0
CFString
targetClassName
0 && "unsupported binding in objc2 class ref section"
className != NULL
objc-class-ref
objc-cat-list
unlabeledAtomName
(aSect->flags() & SECTION_TYPE) == S_CSTRING_LITERALS
0 && "obj class name not found in symbol table"
0 && "obj class name not found"
TentativeDefinitionSection::findAtomByAddress() should never be called
__abs
AbsoluteSymbolSection::findAtomByAddress() should never be called
malformed __LD,__compact_unwind section, bad length
no bits should be set in UNWIND_PERSONALITY_MASK of compact unwind encoding in __LD,__compact_unwind section
relocations beyond end of file
malformed __compact_unwind relocation, offset (0x%08X) is beyond end of section,
unexpected extern relocation to lsda in __compact_unwind section
unexpected extern relocation in __compact_unwind section
too many compact unwind infos in function %s
too many compact unwind infos (%d) in file
setUnwindInfoRange
(startIndex+count) <= sect().file()._unwindInfos.size() && "unwindinfo index out of range"
indirect symbol name offset too large
can't parse dwarf compilation unit info in %s
parseDebugInfo
liOffset == entries.size()
can't find atom for stabs BNSYM at %08llX in %s
__dtrace_probe$
can't find atom for N_GSYM stabs %s in %s
can't find atom for stabs FUN at %08llX in %s
unknown stabs type 0x%X in %s
can't find atom for stabs 0x%X at %08llX in %s
dwarf DW_FORM_strp (offset=0x%08X) is too big in %s
unknown dwarf string encoding (form=%lld) in %s
Unknown DWARF format in __debug_str_offs %s
Inconsistent size of __debug_str_offs in %s
dwarf DW_FORM_strx (index=%llu) is too big in %s
dwarf DW_FORM_strx (offset=0x%08llX) is too big in %s
unknown dwarf DW_FORM_ for DW_AT_stmt_list in %s
incrementLineInfoCount
roomForMoreLineInfoCount()
src.atom->combine() == ld::Atom::combineNever
__swift
__category
!<arch>
not an archive
malformed archive, perhaps wrong architecture
archive has no table of contents
malformed archive TOC entry for %s, offset %d is beyond end of file %lld
malformed archive TOC entry for %s, offset %lld is beyond end of file %lld
makeObjectFileForMember
archive_file.cpp
memberIndex != 0
corrupt archive, member starts past end of file
corrupt archive, member contents extends past end of file
archive member '%s' with length %d is not mach-o or llvm bitcode
in %s, %s
forced load of %s(%s)
_OBJC_CLASS_$_
-ObjC forced load of %s(%s)
%s forced load of %s(%s)
getName
bufsz >= len+1
bufsz >= 16+1
unknown bitcode architecture
/tmp/lto.o
LLVM LTO, file is not of required architecture
__TEXT_
__tmp_lto
could not parse object file %s: '%s', using libLTO version '%s'
unknown definition kind for symbol %s in bitcode file %s
unknown scope for symbol %s in bitcode file %s
mergeIntoGenerator
lto_file.cpp
!_module && "Expected module to be disposed"
could not reparse object file %s: '%s', using libLTO version '%s'
_module && "Expected module to stick around"
addToThinGenerator
ld: LTO remark: %s
could not produce merged bitcode file
could not create set codegen model: %s
could not do LTO optimization: '%s', using libLTO version '%s'
.lto.opt.bc
could not do LTO codegen: '%s', using libLTO version '%s'
could not write LTO temp file '%s', errno=%d
optimizeLTO
f->ordinal() > lastOrdinal
lto: could not merge in %s because '%s', using libLTO version '%s'
/lto.o
unable to create ThinLTO cache directory: %s
.thinlto.bcs/
unable to create ThinLTO output directory for temporary bitcode files: %s
init_thinlto_codegen
atom->scope() != ld::Atom::scopeTranslationUnit && "LTO should not expose static atoms"
llvmAtoms.find(atom->name()) == llvmAtoms.end() && "Unexpected llvmAtom with duplicate name"
lto: could not use -thinlto because libLTO is too old (version '%d', >=18 is required)
.thinlto.o.bc
unable to write temporary ThinLTO output: %s
could not do ThinLTO codegen (thinlto_codegen_process didn't produce any object): '%s', using libLTO version '%s'
.thinlto.o
/tmp/thinlto.o
unable to create ThinLTO output directory for temporary object files: %s
Ignoring empty buffer generated by ThinLTO
could not write ThinLTO temp file '%s', errno=%d
doAtom
fit->binding == ld::Fixup::bindingDirectlyBound
0 && "indirect binding found in initial mach-o file?"
___udivdi3
___udivsi3
___divsi3
___muldi3
___sanitize_trap
set_library
!sLTOIsLoaded
lto_get_version
lto_module_has_objc_category
lto_module_create_from_memory_with_path
lto_module_create_in_local_context
lto_module_create_from_memory
lto_module_dispose
lto_module_get_num_symbols
lto_module_get_symbol_name
lto_module_get_symbol_attribute
lto_codegen_add_module
lto_module_is_thinlto
lto_codegen_set_module
thinlto_codegen_add_module
thinlto_codegen_add_must_preserve_symbol
thinlto_codegen_add_cross_referenced_symbol
thinlto_codegen_set_cache_dir
thinlto_codegen_set_cache_pruning_interval
thinlto_codegen_set_final_cache_size_relative_to_available_space
thinlto_codegen_set_cache_entry_expiration
thinlto_codegen_process
thinlto_module_get_num_objects
thinlto_module_get_object
thinlto_module_get_num_object_files
thinlto_module_get_object_file
thinlto_codegen_set_pic_model
thinlto_codegen_set_savetemps_dir
thinlto_set_generated_objects_dir
thinlto_codegen_disable_codegen
thinlto_codegen_set_codegen_only
thinlto_debug_options
lto_codegen_create_in_local_context
lto_codegen_set_diagnostic_handler
lto_codegen_create
lto_codegen_debug_options
lto_codegen_debug_options_array
lto_codegen_dispose
lto_codegen_set_assembler_path
thinlto_create_codegen
lto_api_version
lto_codegen_compile_optimized
lto_module_is_object_file_in_memory_for_target
lto_codegen_set_should_embed_uselists
lto_codegen_compile
lto_get_error_message
lto_module_create_in_codegen_context
lto_codegen_optimize
lto_codegen_write_merged_modules
lto_codegen_set_should_internalize
lto_codegen_set_cpu
lto_codegen_set_pic_model
lto_codegen_add_must_preserve_symbol
can't open thinlto file '%s', errno=%d
fstat thinlto file '%s' failed, errno=%d
ThinLTO file '%s' too small (length=%zu)
can't map file, errno=%d
@rpath/libLTO.dylib
import-atom
dyld_stub_binder
can't link with bundle (MH_BUNDLE) only dylibs (MH_DYLIB)
can't link with a main executable
architecture %s not present in dylib file %s, attempting fallback
mach-o string pool extends beyond end of file in %s
malformed mach-o: LC_ID_DYLIB load command has offset (%u) outside its size (%u)
malformed mach-o: LC_ID_DYLIB load command string extends beyond end of load command
subframework name offset (%u) outside its size (%u)
subclient name offset (%u) outside its size (%u)
segment %s load command size does not match nsects
section %s file offset too large
malformed dylb, load command #%d is outside size of load commands in %s
malformed mach-o: LC_*_DYLIB load command has offset (%u) outside its size (%u)
malformed mach-o: LC_*_DYLIB load command string extends beyond end of load command
malformed dylib has MH_NO_REEXPORTED_DYLIBS flag but no LC_REEXPORT_DYLIB load commands: %s
dylib %s missing LC_ID_DYLIB load command
binary missing LC_SYMTAB load command
binary missing LC_DYSYMTAB load command
malformed mach-o, symbol table not in __LINKEDIT
malformed mach-o, symbol table strings not in __LINKEDIT
malformed mach-o, indirect symbol table nextdefsym exceeds nsyms
ld: building hashtable from export trie in %s
malformed mach-o dylib, exports trie extends beyond end of file
malformed trie, node past end
malformed trie, terminalSize extends beyond trie data
malformed trie, childNodeOffset==0
malformed uleb128 extends beyond trie
uleb128 too big for 64-bits
ld: building hashtable of %u toc entries for %s
ld: building hashtable of %u entries for %s
/usr/lib/libSystem.B.dylib
$ld$
$os%d.%d$
hide$
  adding %s to ignore set for %s
add$
weak$
install_name$
/System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices
compatibility_version$
bad symbol action: %s in dylib %s
bad symbol condition: %s in dylib %s
__mach_header
___dso_handle
__mh_execute_header
__mh_dylib_header
__mh_bundle_header
__mh_dylinker_header
__mh_object_header
__mh_preload_header
__pagezero
__stack
text-stub
unsupported file format (
 0x%02X
could not find inlined dylib file: %s
could not parse inlined dylib file: %s(%s)
can't open file, errno=%d
fstat(%s) failed, errno=%d
file too small (length=%llu)
malformed universal file: %s
v40@?0I8I12r^v16Q24^B32
truncated fat file. Slice from %llu to %llu is past end of file with length %llu
can't re-map file, errno=%d
file is universal (%s) but does not contain the %s architecture: %s
lto file was built for %s which is not the architecture being linked (%s): %s
libLTO.dylib
/../lib/libLTO.dylib
could not process llvm bitcode object file, because %s could not be loaded
ignoring unexpected dylib file
ignoring unexpected dylib text stub file
building for %s-%s but attempting to link with file built for %s-%s
[Logging for XBS] Used upward dynamic library: %s
[Logging for XBS] Speculatively loaded dynamic library: %s
[Logging for XBS] Speculatively loaded indirect dynamic library: %s
[Logging for XBS] Used indirect dynamic library: %s
[Logging for XBS] Used dynamic library: %s
[Logging for XBS] Used static archive: %s
indirect dylib at %s is not a dylib
ignoring -dylib_file option, %s
in '%s', %s
framework linker option at %s is not a dylib and not an archive
but linking
%s '%s.framework'
linker option dylib at %s is not a dylib
%s '%s'
createIndirectDylibs
InputFiles.cpp
dylib->indirectLibrariesProcessed() && "Internal error, dylib has indirect libraries processed but it's not marked"
opaque_section
/CloudKitCode.framework
/CloudKitCodeProtobuf.framework
/Helix.framework
/NewsCore.framework
/NewsServicesInternal.framework
/NewsTransport.framework
/NewsUI.framework
/Silex.framework
%s did not mark %s as an allowable client
cannot link directly with %s.  Link against the umbrella framework '%s.framework' instead.
cannot link directly with dylib/framework, your binary is not an allowed client of %s
architecture
attempting to link
ignoring file %s, %s
ignoring unexpected
%s, %s
%s file '%s'
parseWorkerThread
slot < (int)files.size()
ignoring upward dylib option for %s
Unknown file type for %s
unexpected dylib (%s) on link line
exit-asm.o
/usr/lib/system/libsystem_pthread
/usr/lib/libobjc-trampolines.dylib
dynamic executables or dylibs must link with libSystem.dylib
nextCounter
counter() < 0xffff
/libswift
page zero
custom stack
duplicate symbol '%s' in:
%d duplicate symbol%s
duplicate symbol '
' in:
    
addByName
SymbolTable.cpp
newAtom.name() != NULL
&newAtom != existingAtom
atom.scope() != ld::Atom::scopeTranslationUnit
markCoalescedAway
removeDeadAtoms
atom != NULL
findSlotForContent
0 && "section type does not support coalescing by content"
findSlotForReferences
0 && "section type does not support coalescing by references"
indirectName
slot < _indirectBindingTable.size()
indirectAtom
tentative definition of '%s' with size %llu from '%s' is being replaced by real definition of smaller size %llu from '%s'
pickCommonsMode
dylib.definition() == ld::Atom::definitionTentative
proxy.definition() == ld::Atom::definitionProxy
using common symbol %s from %s and ignoring definition from dylib %s
replacing common symbol %s from %s with true definition from dylib %s
common symbol %s from %s conflicts with definition from dylib %s
symbol %s exported from both %s and %s
__import
malformed section$ symbol name: %s
__thread_bss
__thread_data
__thread_vars
reference to non-existent __zerofill section because -merge_zero_fill_sections option not used
grandfathering in old symbol '%s' as alias for 'section$%s$%s$%s'
malformed segment$ symbol name: %s
__start
__end
grandfathering in old symbol '%s' as alias for 'segment$%s$%s'
command line
unknown linker option from object file ignored: '%s' in %s
unknown linker option from object file ignored: '%s' '%s' from %s
unknown linker option from object file ignored, starting with: '%s' from %s
'%s' does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target.
all bitcode will be dropped because '%s' was built without bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. 
bitcode bundle could not be generated because '%s' was built without full bitcode. All object files and libraries for bitcode must be generated from Xcode Archive or Install build
'%s' was built with class_ro_t pointer signing enabled, but previous .o files were not
'%s' was not built with class_ro_t pointer signing enabled, but previous .o files were
%s compiled with newer version of Swift language (%s) than previous files (%s)
not all .o files built with same Swift language version. Started with (%s), now found (%s) in
%s compiled with older version of Swift language (%s) than previous files (%s)
CPU_SUBTYPE_ARM_ALL subtype is deprecated: %s
object file %s was built for different arm sub-type (%d) than link command line (%d)
object file %s was built for different x86_64 sub-type (%d) than link command line (%d)
object file built with an incompatible arm64e ABI: '%s'
kernel
user
object file was built for different arm64e ABI (%s version %u) than earlier object files (%s version %u): %s
all bitcode will be dropped because '%s' was built without bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target.
bitcode bundle could not be generated because '%s' was built without full bitcode. All frameworks and dylibs for bitcode must be generated from Xcode Archive or Install build
LD_DISALLOW_SWIFT_LINKING_SWIFT
/System/Library/PrivateFrameworks/Swift
embedded dylibs/frameworks are only supported on iOS 8.0 and later (%s)
doFile
Resolver.cpp
depInstallName != NULL
invalid -install_name (%s) in dependent dylib (%s). Dylibs/frameworks which might go in dyld shared cache cannot link with dylib that uses @rpath, @loader_path, etc.
invalid -install_name (%s) in dependent dylib (%s). Dylibs/frameworks which might go in dyld shared cache cannot link with dylibs that won't be in the shared cache
'%s' is implemented in bitcode, but it was loaded too late
__swift5_reflstr
__swift5_fieldmd
__swift5_assocty
cannot export hidden symbol %s
target OS does not support re-exporting symbol %s from %s
target OS does not support re-exporting symbol %s
cannot export hidden symbol %s from %s
requested re-export symbol %s is not from a dylib, but from %s
ignoring alias of itself '%s'
static initializer found in '%s'
static initializer found in '%s'. Use -no_inits to make this an error.  Use -no_warn_inits to suppress warning
convertReferencesToIndirect
0 && "wrong combine type for bind by content"
_objc_msgSend$
resolveAllUndefines
curAtom != NULL
_objc_msgSend
%s from %s
markLive
0 && "bad binding during dead stripping"
remainingUndefines
0 && "should not be by-name this late"
liveUndefines
      Dwarf Exception Unwind Info (__eh_frame) in %s
      %s in %s
      ...
B16@?0^v8
Could not find or use auto-linked library '%s'
Could not find or use auto-linked framework '%s'
Undefined symbols for architecture %s:
Undefined symbols:
  "%s", referenced from:
     -init command line option
     -exported_symbol[s_list] command line option
     -reexported_symbols_list command line option
     implicit entry/start for main executable
     -u command line option
     (maybe you meant: %s
, %s 
  NOTE: a missing vtable usually means the first non-inline virtual member function has no definition.
     (found %s in %s, declaration possibly missing extern "C")
symbol(s) not found
v20@?0r*8B16
entry point (%s) undefined.  Usually in crt1.o
entry point (%s) undefined.
-init function (%s) found in linked dylib, must be in dylib being linked
dyld_stub_binding_helper
linking swift frameworks against other swift frameworks (%s) is not permitted
syncAliases
atom->fixupsBegin() != atom->fixupsEnd()
fit->kind == ld::Fixup::kindNoneFollowOn
0 && "internal error: unexpected alias binding"
cannot force to be weak, non-external symbol %s
cannot force to be not-weak, non-external symbol %s
disabling chained fixups because of unaligned pointers
__dt_tests
output will be > 64MB, so chained fixups being disabled. Use -no_fixup_chains to silence this warning
binary is too big to use -fixup_chains
digraph dg
concentrate = true;
rankdir = LR;
addr%p [ shape = plaintext, label = "%s" ];
addr%p [ label = "string: '
\x%02hhx
'" ];
addr%p [ label = "%s" ];
addr%p -> addr%p;
{ rank = same; 
addr%p; 
could not write dot output file: %s
5 or later
unknown ABI version 0x%02X
string_view::substr
undefined base symbol '%.*s' for alias '%s'
ignoring undefined symbol %.*s from -exported_symbols_list
ignoring undefined symbol %s from -exported_symbols_list
copyThreadsLoadCommand
HeaderAndLoadCommands.hpp
_state.entryPoint != NULL
size
LinkEdit.hpp
_encoded
copyRawContent
addSplitSegInfo
false
codegen at address 0x%08llX prevents image from working in dyld shared cache
extra < 16
authenticated pointer at address 0x%08llX prevents image from working in dyld shared cache
__code_sign
encode
codeSignSect->atoms[0] == this
can't determine codesign hash for output platform
hash
error code signing
__string_pool
internal error: atom is missing a symbolIndex(%s)
writable (__DATA) segment not found
LinkEditClassic.hpp
encodeSectionReloc
0 && "need to handle -r reloc"
entry.toAddend < 0x400000
entry.fromTarget == NULL
entry.hasAuthData
0 && "need to handle arm64 -r reloc"
updateLINKEDITAddresses
OutputFile.cpp
_codeSignatureAtom != NULL
setLoadCommandsPadding
strcmp(state.sections[1]->sectionName(),"__text") == 0
unexpected binding
unexpected bindingNone
unexpected bindingByNameUnbound
reference to bitcode symbol '%s' which LTO has not compiled
reference to symbol (which has not been assigned an address) %s
sectionOffsetOf
section not found for section offset
tlvTemplateOffsetOf
section not found for tlvTemplateOffsetOf
final section layout:
    %s/%s addr=0x%08llX, size=0x%08llX, fileOffset=0x%08llX, type=%d
8-bit reference out of range (%lld max is +/-127B): from %s (0x%08llX) to %s (0x%08llX)
16-bit reference out of range (%lld max is +/-32KB): from %s (0x%08llX) to %s (0x%08llX)
32-bit branch out of range (%lld max is +/-2GB): from %s (0x%08llX) to %s (0x%08llX)
32-bit absolute address out of range (0x%08llX max is 4GB): from %s + 0x%08X (0x%08llX) to 0x%08llX
32-bit absolute address out of range (0x%08llX max is 4GB): from %s + 0x%08X (0x%08llX) to %s (0x%08llX)
32-bit RIP relative reference out of range (%lld max is +/-2GB): from %s (0x%08llX) to %s (0x%08llX)
ARM ldr 12-bit displacement out of range (%lld max is +/-4096B): from %s (0x%08llX) to %s (0x%08llX)
b/bl/blx ARM branch out of range (%lld max is +/-32MB): from %s (0x%08llX) to %s (0x%08llX)
b/bl/blx thumb2 branch out of range (%lld max is +/-16MB): from %s (0x%08llX) to %s (0x%08llX)
b/bl/blx thumb1 branch out of range (%lld max is +/-4MB): from %s (0x%08llX) to %s (0x%08llX)
b(l) ARM64 branch out of range (%lld max is +/-128MB): from %s (0x%08llX) to %s (0x%08llX)
ARM64 ADRP out of range (%lld max is +/-4GB): from %s (0x%08llX) to %s (0x%08llX)
setInfo
info->fixup->firstInCluster()
0 && "expected addend"
applyFixUps
_options.outputKind() != Options::kObjectFile
TLV load reloc does not point to a movl instruction
GOT load reloc does not point to a movq instruction
TLV load reloc does not point to a movq instruction
initializer '%s' is >4GB from start of image
(accumulator & 0xFFFFFFFF00000000ULL) == 0
_authenticatedFixupData.find(fixupOffset) == _authenticatedFixupData.end()
TLV load reloc does not point to a movl <abs-address>,<reg> instruction
no pc-rel bx arm instruction. Can't fix up branch to %s in %s
don't know how to convert instruction %x referencing %s to thumb
armv7 has no pc-rel bx thumb instruction. Can't fix up branch to %s in %s
don't know how to convert branch instruction %x referencing %s to bx
armv6 has no pc-rel bx thumb instruction. Can't fix up branch to %s in %s
128-bit LDR/STR not 16-byte aligned: from %s (0x%08llX) to %s (0x%08llX)
16-bit LDR/STR not 2-byte aligned: from %s (0x%08llX) to %s (0x%08llX)
32-bit LDR/STR not 4-byte aligned: from %s (0x%08llX) to %s (0x%08llX)
64-bit LDR/STR not 8-byte aligned: from %s (0x%08llX) to %s (0x%08llX)
Reloc does not point to an ADD instruction in %s
GOT load reloc does not point to a LDR instruction in %s
TLV load reloc does not point to a LDR instruction in %s
pos->second == NULL && "two fixups in same hint location"
ignoring linker optimization hint at %s+0x%X because alt.info.count == 1
ignoring linker optimization hint at %s+0x%X because isPageKind(infoA.fixup)
ignoring linker optimization hint at %s+0x%X because isPageOffsetKind(infoB.fixup)
ignoring linker optimization hint at %s+0x%X because infoA.target == infoB.target
ignoring linker optimization hint at %s+0x%X because infoA.targetAddress == infoB.targetAddress
ignoring linker optimization hint at %s+0x%X because isADRP
ignoring linker optimization hint at %s+0x%X because isLDR
ignoring linker optimization hint at %s+0x%X because ldrInfoB.baseReg == adrpInfoA.destReg
ignoring linker optimization hint at %s+0x%X because ldrInfoB.offset == (infoA.targetAddress & 0x00000FFF)
adrp-ldr at 0x%08llX transformed to LDR literal, usableSegment=%d usableSegment
adrp-ldr at 0x%08llX not transformed, isLDR=%d, literalableSize=%d, inRange=%d, usableSegment=%d, scaledOffset=%d
ignoring linker optimization hint at %s+0x%X because alt.info.count == 2
ignoring linker optimization hint at %s+0x%X because infoC.fixup == NULL
ignoring linker optimization hint at %s+0x%X because isADD
ignoring linker optimization hint at %s+0x%X because adrpInfoA.destReg == addInfoB.srcReg
ignoring linker optimization hint at %s+0x%X because addInfoB.destReg == ldrInfoC.baseReg
adrp-add-ldr at 0x%08llX T1 transformed to LDR literal
adrp-add-ldr at 0x%08llX T4 transformed to ADR/LDR
adrp-add-ldr at 0x%08llX T2 transformed to ADRP/LDR 
adrp-add-ldr at 0x%08llX could not be transformed, loadSize=%d, literalableSize=%d, inRange=%d, usableSegment=%d, targetFourByteAligned=%d, imm12=%d
adrp-add at 0x%08llX transformed to ADR
adrp-add at 0x%08llX not transformed, isAdd=%d, inRange=%d, usableSegment=%d
ignoring linker optimization hint at %s+0x%X because isPageKind(infoA.fixup, true)
ignoring linker optimization hint at %s+0x%X because isPageOffsetKind(infoB.fixup, true)
ignoring linker optimization hint at %s+0x%X because (_options.architecture() == CPU_TYPE_ARM64 && ldrInfoB.size == 8) || (_options.architecture() == CPU_TYPE_ARM64_32 && ldrInfoB.size == 4)
ignoring linker optimization hint at %s+0x%X because !ldrInfoB.isFloat
ignoring linker optimization hint at %s+0x%X because ldrInfoC.baseReg == ldrInfoB.reg
adrp-ldr-got-ldr at 0x%08llX T5 transformed to LDR literal of GOT plus LDR
adrp-ldr-got-ldr at 0x%08llX no optimization done
ignoring linker optimization hint at %s+0x%X because addInfoB.srcReg == adrpInfoA.destReg
adrp-ldr-got-ldr at 0x%08llX T1 transformed to LDR literal
adrp-ldr-got-ldr at 0x%08llX T4 transformed to ADR/LDR
adrp-ldr-got-ldr at 0x%08llX T2 transformed to ADRP/NOP/LDR
adrp-ldr-got-ldr at 0x%08llX T3 transformed to ADRP/ADD/LDR
adrp-ldr-got-ldr at 0x%08llX not ADD or LDR
ignoring linker optimization hint at %s+0x%X because isSTR
adrp-add-str at 0x%08llX T4 transformed to ADR/STR
adrp-add-str at 0x%08llX T2 transformed to ADRP/STR 
adrp-add-str at 0x%08llX could not be transformed, loadSize=%d, inRange=%d, usableSegment=%d, imm12=%d
adrp-ldr-got-str at 0x%08llX T5 transformed to LDR literal of GOT plus STR
adrp-ldr-got-str at 0x%08llX no optimization done
adrp-ldr-got-str at 0x%08llX T4 transformed to ADR/STR
adrp-ldr-got-str at 0x%08llX T4 transformed to ADRP/NOP/STR
adrp-ldr-got-str at 0x%08llX T3 transformed to ADRP/ADD/STR
adrp-ldr-got-str at 0x%08llX not ADD or LDR
adrp-ldr-got at 0x%08llX T5 transformed to NOP/LDR
adrp-ldr-got at 0x%08llX T4 transformed to ADR/STR
adrp-ldr-got at 0x%08llX not LDR or ADD
adrp-ldr-got at 0x%08llX not ADRP
unknown hint kind %d alt.info.kind at 0x%08llX
ignoring linker optimization hint at %s+0x%X because isPageKind(infoB.fixup)
may-reused-adrp at 0x%08llX no longer an ADRP, now 0x%08X
setFixup64
b->ordinal == bindOrdinal
reconstituted == accumulator
reconstituted == (accumulator - _options.machHeaderVmAddr())
chained binds not implemented yet
setFixup64e
r->target == vmOffset
setFixup32
r->target == accumulator
accumulator < _chainedFixupBinds.maxRebase()
%s in '%s' from %s
%s in '%s'
writeAtoms
_threadedRebaseBindIndices.empty()
threadStartsSection
binding address outside range of any segment
overflow in thread starts section
atom->size() == 0
threadStartsAtom == nullptr
offset < 0x100000000
0 && "unknown pointer format for chain starts"
pre-computed __chain_starts section too small
(((dyld_chained_ptr_arm64e_rebase*)prevLoc)->next * 8) == delta && "next out of range"
(((dyld_chained_ptr_arm64e_rebase*)prevLoc)->next * 4) == delta && "next out of range"
(((dyld_chained_ptr_64_rebase*)prevLoc)->next * 4) == delta && "next out of range"
0 && "unknown pointer format"
__chainfixups
nextOverflowSlot <= maxOverFlowCount
farthestChainableLocation
_chainedFixupBinds.maxRebase() < maxTargetOffset
chain32bitPointers
prevLoc->next == steps
curLoc->next == lastSteps
__symbol_table
computeContentUUID
firstStabNlistFileOffset <= firstStabStringFileOffset
checksumStart <= regionStart && regionStart <= regionEnd && "Region overlapped"
can't write output file: %s
LD_FORCE_PWRITE_FILE
can't create buffer of %llu bytes for output
can't open output file for writing: %s, errno=%d
can't write to output file: %s, errno=%d
writeOutputFile
_options.hideSymbols() && _options.reverseSymbolMapPath() != NULL && "Must hide symbol and specify a path"
%s/%s.bcsymbolmap
could not create bcsymbolmap file: %s
partitionSymbolTable
resolver functions should be external, but '%s' is hidden
bad special linker symbol '%s'
linker symbol '%s' adds already existing symbol '%s'
linker symbol '%s' hides a non-existent symbol '%s'
-preload not supported
unknown architecture
dylibByOrdinal
ordinal > 0
ordinal <= _dylibsToLoad.size()
dylibToOrdinal
it != _dylibToOrdinal.end()
symbol '%s' re-exported from %s and %s
compressedOrdinalForAtom
0 && "dylib not assigned ordinal"
-undefined dynamic_lookup cannot be used to find '%s' in dylib in dyld shared cache
can't find ordinal for imported symbol '%s'
overrides weak external symbol: %s
buildLinkEditOpcodes
minusTarget != NULL
dylibs for dyld cache cannot use B key of auth-pointer, found in %s
unaligned pointer(s)
_sectionsRelocationsAtom != NULL
_rebasingInfoAtom != NULL
_bindingInfoAtom != NULL
_lazyBindingInfoAtom != NULL
_weakBindingInfoAtom != NULL
too many symbols (%lu) max %d
buildChainedFixupInfo
pointer not aligned at address 0x%llX ('%s' + %u from %s)
pointer not aligned at page boundary address 0x%llX ('%s' + %u from %s)
text reloc in %s to %s
Absolute addressing not allowed in arm64 code but used in '%s' referencing '%s'
PIE disabled. Absolute addressing (perhaps -mdynamic-no-pic) not allowed in code signed PIE, but used in %s from %s. To fix this warning, don't compile with -mdynamic-no-pic or link with -Wl,-no_pie
illegal text-relocoation (direct reference) to (global,weak) %s in %s from %s in %s
illegal text-relocation to '%s' in %s from '%s' in %s
illegal text reloc in '%s' (from %s) to '%s'
direct access in function '%s' from file '%s' to global weak symbol '%s' from file '%s' means the weak symbol cannot be overridden at runtime. This was likely caused by different translation units being compiled with different visibility settings.
addDyldInfo
minusTarget->definition() != ld::Atom::definitionProxy
target->definition() != ld::Atom::definitionProxy
fixupWithTarget->u.target == target
addend == 0
illegal data reference in %s to thread local variable %s in dylib %s
.objc_class_
!needsLazyBinding
data symbol %s from %s has pointer to %s + 0x%08llX. That large of an addend may disable %s from being put in the dyld shared cache.
pointer not aligned at address 0x%llX (%s + %lld from %s)
addend too large. '%s' contains a pointer to %s+%llu. Dylibs in dyld shared cache can have max addend of 31
addChainedFixupLocation
addThreadedRebaseInfo
pointer not aligned to at least 4-bytes at address 0x%llX (%s + %lld from %s)
addClassicRelocs
fixupWithTarget != NULL
pointer not aligned at address 0x%llX (%s -> %s)
Unhandled kind
no supported runtime lo16 relocation in %s from %s to %s
no supported runtime hi16 relocation in %s from %s to %s
authenticated pointer in atom %s from %s to %s is not supported
useExternalSectionReloc
addSectionRelocs
__interpose sections cannot be used in dylibs put in the dyld cache
makeSplitSegInfo
authenticated pointers are not supported in split seg v1
makeSplitSegInfoV2
!hadSubtract
toSectionIndex != 255
# Path: %s
# Arch: %s
v16@?0r*8
# Object files:
[%3u] %s
linker synthesized
# Sections:
# Address
Size    
Segment
Section
0x%08llX
0x%08llX
# Symbols:
# Address
Size    
File  Name
literal string: 
FDE for: 
non-lazy-pointer
non-lazy-pointer-to: 
non-lazy-pointer-to-local: 
0x%08llX
0x%08llX
[%3u] %s
AppleMarconiWIFIPhyFirmware
# Dead Stripped Symbols:
#        
Size    
File  Name
<<dead>> 
0x%08llX
[%3u] %s
could not write map file: %s
"uuid":"
"name":"
"arch":"
,"dynamic":[
,"upward-dynamic":[
,"re-exports":[
,"weak":[
,"archives":[
,"bundle-loader":
,"order-file":
ordinal
it != _bindOrdinalsWithNoAddend.end()
0 && "bind ordinal missing"
__local_relocs
__extrn_relocs
__dataInCode
__ind_sym_tab
__sect_relocs
__export
__rebase
__binding
__weak_binding
__lazy_binding
__splitSegInfo
__funcStarts
__opt_hints
finalAddress
_mode == modeFinalAddress
setSectionStartAddress
NO BINDING
BAD BINDING
%s@0x%08llX
makeLoadOrStore
(info.offset % 2) == 0
(info.offset % 4) == 0
0 && "cannot use signed32 with 32-bit load/store"
(info.offset % 8) == 0
info.signEx == signedNot
(info.offset % 16) == 0
info.isFloat
0 && "bad load/store size"
imm12Bits < 4096
makeLDR_literal
delta < 1024*1024
delta > -1024*1024
(info.reg & 0xFFFFFFE0) == 0
(targetAddress & 0x3) == 0
(instructionAddress & 0x3) == 0
!info.isStore
0 && "invalid load size for literal"
makeADR
(destReg & 0xFFFFFFE0) == 0
chainedFixupBindAddendFitsInline
0 && "Binds are not supported"
0 && "Unknown pointer format"
operator()
addressA != addressB
(delta & (fixupAlignment - 1)) == 0
value == 0
accumulator >= baseAddress
((value & ~0xFF0003FFFFFFFFFF) == 0) || ((value & ~0xFF0003FFFFFFFFFF) == ~0xFF0003FFFFFFFFFF)
setMachoSection
x != 0
x < 256
CodeSignatureAtom
opts.outputKind() != Options::kObjectFile
machoSection
_machoSection != 0
code signature
string pool
scattered reloc r_address too large
local relocations
addPointerReloc
length == 4 || length == 8
external relocations
_pointerLocations.size() == 0
_callSiteLocations.size() == 0
data-in-code info
overlapping data-in-code in '%s' at offset 0x%04X
encodeEntry
0 && "bad L$start$ label to encode"
indirect symbol table
internal error: stub missing fixup to lazy pointer
symIndexOfLazyPointerAtom
internal error: lazy pointer missing fixupLazyTarget fixup
internal error: unexpected non-lazy pointer binding
symbol table
l%03u
addGlobal
addImport
classicOrdinalForProxy
atom->definition() == ld::Atom::definitionProxy
dylib != NULL
addLocal
atom->symbolTableInclusion() != ld::Atom::symbolTableNotIn
LC%u
EH_Frame1
func.eh
isAltEntry
chainStart != NULL
chainLeadsTo
nextAtom != NULL
callReloc
0 && "external call relocs not implemented"
section relocations
fixup chain info
encode_block_invoke
isBind
anImport.name_offset == nameOffset
(uint64_t)anImportA.addend == addend
anImportA.name_offset == nameOffset
v28@?0I8r^{Atom=^^?^{Section}QISCb2b2b1b1b1b1b5b3b2b2b1b1b1b1b1b8b2}12Q20
export info
not adding explicit re-export for symbol '%s' because it is already re-exported from dylib '%s'
aliasOf != NULL
{Export={basic_string_view<char, std::char_traits<char>>=*Q}QQQ{basic_string_view<char, std::char_traits<char>>=*Q}}16@?0Q8
error creating exports trie: %s
stubForResolverFunction
0 && "no stub for resolver function"
rebase info
unsupported rebase type with linked list opcodes
binding info
unsupported bind type with linked list opcodes
too many binds (%llu).  The limit is 65536
encodeV2
(address & 7) == 0
weak binding info
lazy binding info
lazy binding address outside range of any segment
split seg info
this->_encodedData.size() == 0
double split seg info for same address
function starts
addr != badAddress
OptimizationHintsAtom
opts.outputKind() == Options::kObjectFile
linker optimization hints
/%s.framework/
mach-o header and load commands
unknonwn mach-o file type
sectionFlags
0 && "typeTempLTO should not make it to final linked image"
0 && "typeAlias should not make it to final linked image"
0 && "typeAbsoluteSymbols should not make it to final linked image"
0 && "typeTentativeDefs should not make it to final linked image"
0 && "typeFirstSection should not make it to final linked image"
0 && "typeLastSection should not make it to final linked image"
copyChainedFixupsLoadCommand
_writer.chainInfoSection != nullptr
copyVersionLoadCommand
info.loadCommandIfNotUsingBuildVersionLC != 0 && "platform requires LC_BUILD_VERSION"
copyEntryPointLoadCommand
copyEncryptionLoadCommand
_writer.encryptedTextStartOffset() != 0
_writer.encryptedTextEndOffset() != 0
cannot weak upward link.  Dropping weak for %s
cannot weak re-export a dylib.  Dropping weak for %s
recopyUUIDCommand
_uuidCmdInOutputBuffer != NULL
__stub_helper
__la_resolver
__la_weak_ptr
__ld_symbol_ptr
__symbol_stub
__lazy_symbol
__stub
__picstub_thumb
__stub_thumb
__picsymbolstub4
__symbol_stub4
__symbolstub1
__picsymbolstub5
__resolver_help
stubableFixup
stubs.cpp
symbol dyld_stub_binder not found (normally in libSystem.dylib).  Needed to perform lazy binding to function %s
unsupported lazy PIC resolver for arm Thumb
unsupported arch for stub
resolver function '%s' not supported in type of output
mismatching weak references for symbol: %s
resolver functions (%s) can only be used in dylibs
resolver functions (%s) can only be used when targeting iOS 4.2 or later
resolver functions (%s) can only be used when targeting Mac OS X 10.6 or later
symbol dyld_stub_binding_helper not found, normally in crt1.o/dylib1.o/bundle1.o
process
info.stub != NULL && "stub not created"
mainStub != NULL
__dyld_private
fast binder pointer
helper helper
%s.stub
 stub helpers
LazyPointerAtom
stub_arm64e.hpp
stubToResolver || stubToGlobalWeakDef
unsupported arch for DOF
/usr/lib/libdtrace.dylib
couldn't dlopen() /usr/lib/libdtrace.dylib: %s
dtrace_ld_create_dof
couldn't find "dtrace_ld_create_dof" in /usr/lib/libdtrace.dylib: %s
__dtrace_dof_for_provider_%s
dtrace
offsetsInDOF[%d]=%0llX > dofSectionSize=%0lX
error creating dtrace DOF section
__unwind_info
CompactUnwindAtom
compact_unwind.cpp
fit->binding == ld::Fixup::bindingsIndirectlyBound
compact unwind info
makeFinalLinkedImageCompactUnwindSection
0 && "no compact unwind for arch"
getAllUnwindInfos
personalityPointer->section().type() == ld::Section::typeNonLazyPointer
cie->section().type() == ld::Section::typeCFI
too many personality routines for compact unwind to encode
UnwindInfoAtom
uniqueEntries.size() > 0
could not allocate space for compact unwind info
compressDuplicates() entries.size()=%lu, uniqueEntries.size()=%lu
makePersonalityIndexes() %lu personality routines used
findCommonEncoding() %lu common encodings found
makeLsdaIndex() %lu LSDAs found
makeCompressedSecondLevelPage(pageSize=%u, endIndex=%u)
makeCompressedSecondLevelPage(): funcIndex=%d, re-use commonEncodings[%d]=0x%08X
makeCompressedSecondLevelPage(): funcIndex=%d, re-use pageSpecificEncodings[%d]=0x%08X
makeCompressedSecondLevelPage(): funcIndex=%d, pageSpecificEncodings[%d]=0x%08X
end of compressed page with %u entries, %lu custom encodings because too many custom encodings
can't use compressed page with %u entries because function offset too big
end of compressed page with %u entries because full
makeCompressedSecondLevelPage
pageSpecificEncodings.find(info.encoding+i) != pageSpecificEncodings.end()
compressed page with %u entries, %lu custom encodings
regular page with %u entries
non-pointer is got entry
doPass
got.cpp
0 && "unsupported GOT reference kind"
0 && "unsupported GOT reference"
fitThatSetTarget != NULL
buildTrieBytes
ExportsTrie.cpp
node->trieOffset == _trieBytes.size() && "malformed trie node, computed node offset doesn't match buffer position"
duplicate symbol '%s'
{WriterEntry={basic_string_view<char, std::char_traits<char>>=*Q}{?=II}}16@?0Q8
padding
__init_offsets
symbol '%s' is useless because section transformed to __TEXT,__init_offsets
inits.cpp
0 && "fixup binding kind unsupported for initializer section"
index < orderedInitOffsetAtoms.size()
init-offset
__flat_dummy
/System/iOSSupport/
getJustInTimeAtomsFor: %s found in %s
previous$
  adding %s to hash table for %s
cycle in dylib re-exports with %s and %s
buildNameTable() _nameTable:
  %p <- %s
buildNameTable() _nameCollisionAtoms:
  %p, %s
%s specified in order_file but it exists in multiple .o files. Prefix symbol with .o filename in order_file to disambiguate
order.cpp
buildFollowOnTables
ref %p %s -> %p %s
_followOnNexts.count(atom) == 0
  start %s -> %s
_followOnStarts[a] == followOnAtom
  adjust start for %s -> %s
curPrevToFollowOnAtom != NULL
(atom->size() == 0) || (curPrevToFollowOnAtom->size() == 0)
start %s -> %s
next %s -> %s
null
override ordinal %u assigned to %s in cluster from %s
could not order %s as %u because it was already laid out earlier by %s as %u
override ordinal %u assigned to %s from %s
can't find match for order_file entry: %s
can't find match for order_file entry: %s/%s
only %u out of %lu order_file symbols were applicable
AliasComparer
alias->isAlias()
Unable to insert branch island. No insertion point available.
textSizeWhenMightNeedBranchIslands
branch_island.cpp
0 && "unexpected architecture"
maxDistanceBetweenIslands
%s.island
%s.island.%d
%s_plus_%d.island.%d
makeBranchIsland
0 && "unexpected branch kind"
objc.cpp
0 && "unknown objc arch"
Incompatible Objective-C category definitions. Some category metadata may be lost. '%s' and '%s built with different compilers
doit
catListAtom->size() == sizeof(pint_t)
classListAtom->size() == sizeof(pint_t)
selRefAtom->size() == sizeof(pint_t)
Unexpected binding kind in objc atom: %s
fixClassAliases
nextAtom != nullptr
getROData
classROAtom != NULL
__objc_empty_cache
v16@?0r^{MethodEntryInfo=*^{Atom}^{Atom}^{Atom}^{Atom}}8
__OBJC_$_CLASS_PROP_LIST_
__OBJC_$_PROP_LIST_
method '%s%s' in category from %s overrides method from class in %s
method '%s%s' in category from %s conflicts with same method from another category
forEachMethod
fit->binding == ld::Fixup::bindingsIndirectlyBound && "malformed method list"
selRefAtom->contentType() == ld::Atom::typeUnclassified && "malformed method list"
selRefFit->binding == ld::Fixup::bindingsIndirectlyBound && "malformed selector ref"
methodNameAtom->contentType() == ld::Atom::typeCString && "malformed method list"
fit->binding == ld::Fixup::bindingsIndirectlyBound && "malformed category method list"
methods[methodIndex].typeAtom->contentType() == ld::Atom::typeCString && "malformed category method list"
fit->binding == ld::Fixup::bindingDirectlyBound && "malformed method list"
methodNameAtom && "malformed category method list"
(methodNameAtom->contentType() == ld::Atom::typeCString) || (strcmp(methodNameAtom->section().segmentName(), "__TEXT") == 0)
0 && "malformed category method list"
malformed category method list (%s), type string not in __TEXT in %s
0 && "malformed method list"
methods[i].methodName && (methods[i].implAtom || isProtocolList) && (methods[i].selectorRefAtom || methods[i].selectorStringAtom)
appendMethod
method.selectorStringAtom != nullptr
setPointerInContent
0 && "could not update method list"
getMetaClass
metaClassAtom != NULL
__OBJC_CLASS_PROTOCOLS_$_
objc merged property list
optimizeCategories
!categoryToNlListElement.count(categoryAtom)
fit->u.target == originalCategoryAtom
selectorRefName
targetAtom != nullptr
targetAtom->contentType() == ld::Atom::typeCString
removeIneligiblePatching
'%s' is ineligible for dyld patching due to subtract fixup in '%s' from '%s'
'%s' is ineligible for dyld patching due to non-interposable reference in '%s' from '%s'
'%s' is unsupported size for dyld patching
'%s' is unsupported fixup location for dyld patching
'%s' has unsupported ISA fixup for dyld patching
objc image info
__dlopen_cstrs
%s is linking with itself
/usr/lib/libSystem.
/usr/lib/libc++.
/System/Library/Frameworks/Foundation.framework/
linking with (%s) but not using any symbols from it
weak import of symbol '%s' not supported because of option: -no_weak_imports
__swift_FORCE_LOAD_$_swift
softlink:
path:
/System/Library/PrivateFrameworks/
/System/Cryptex
softlinked '%s' is symlink to real framework location
softlinked '%s' does not exist in SDK
Frameworks/
Library
__objc_ptr
__thread_ptrs
targeted OS version does not support use of thread local variables in %s
illegal thread local variable reference to regular symbol %s
tlvp.cpp
0 && "bad store kind for TLV optimization"
tlvpAtom != NULL
fit->binding == ld::Fixup::bindingDirectlyBound && "thread variable def contains pointer to global"
0 && "bad kind for target in tlv defs"
0 && "wrong content type for target in tlv defs"
%s$shim
branch_shim.cpp
! _target->isThumb()
_target->isThumb()
only one snapshot supported
ld_snapshot
%s.%s.ld
%s-%4.4d-%2.2d-%2.2d-%2.2d%2.2d%2.2d.ld-snapshot
snapshot not created
/tmp
unable to create link snapshot directory: %s
cd %s
raw args not set
arch
filelist
-Fframeworks
framework
void 
__attribute__ ((weak)) 
(void){}
void s_%5.5d(void) __asm("%s");
void s_%5.5d(){}
.framework
files
compile_stubs
#!/bin/csh
# Attempt to find the architecture.
# First look through the command line args.
set arch=unknown
set link_cmd=(`cat link_command`)
while ( $#link_cmd > 0 )
if ( "$link_cmd[1]" == "-arch" ) then
set arch=$link_cmd[2]
endif
shift link_cmd
# look for an explicit arch file
if ( "$arch" == "unknown" ) then
if ( -e arch ) then
set arch=`cat arch`
endif
endif
if ( "$arch" == "unknown" ) then
echo "***** Unable to determine architecture."
exit 1
endif 
# Create .dylibs for each file in the dylib_stubs directory.
if ( -e dylib_stubs ) then
set files=`cd dylib_stubs ; echo *`
mkdir -p dylibs
foreach file ($files)
if ( ! -e dylibs/$file ) then
clang -arch $arch -c -fno-builtin -o tmp_object.o -x c dylib_stubs/$file
ld -arch $arch -dylib -macosx_version_min 10.1 -no_version_load_command -o dylibs/$file tmp_object.o
endif
endif
# Create .frameworks for each file in the framework_stubs directory.
if ( -e framework_stubs ) then
set files=`cd framework_stubs ; echo *`
foreach file ($files)
if ( ! -e frameworks/$file.framework ) then
clang -arch $arch -c -fno-builtin -o tmp_object.o -x c framework_stubs/$file
mkdir -p frameworks/$file.framework
ld -arch $arch -dylib -macosx_version_min 10.1 -no_version_load_command -o frameworks/$file.framework/$file tmp_object.o
endif
endif
# Clean up.
rm -f tmp_object.o
orig_command_line
link_command
data_files
objects
dylibs
framework_stubs
dylib_stubs
archive_files
frameworks
assert_info
could not unmap bitcode temp file
could not open bitcode temp file: %s
could not process bitcode temp file: %s, errno=%d
could not unmap temp file: %s, errno %d
could not remove temp file: %s
libLTO is not loaded
lto_codegen_hide_symbols
lto_codegen_write_symbol_reverse_map
lto_codegen_reset_context
lto_codegen_lookup_hidden_name
lto_module_get_num_asm_symbols
lto_module_get_asm_symbol_name
loaded libLTO doesn't support -bitcode_hide_symbols: %s
could not reparse object file %s in bitcode bundle: '%s', using libLTO version '%s'
/bundle.xar
could not delete temp file: %s
could not delete temp directory: %s
/tmp/ld.bundle.XXXXXX
%s.bundle.XXXXXX
could not write file to temp directory: %s
failed to write content to temp file: %s
malformed bundle format
could not aquire iterator for the bitcode bundle
file-type
could not get the file type for the bitcode bundle
Bundle
Object
Bitcode
Exports
OrderFile
clang/cmd
swift/cmd
version
hide-symbols
platform
sdkversion
swift-version
dylibs/lib
link-options/option
bitcode bundle temp file
could not reparse object file in bitcode bundle: '%s', using libLTO version '%s'
could not open output bundle to write %s
compression
none
could not disable compression for bitcode bundle
name
could not get the name of the file from bitcode bundle
could not set compression type for exports list
could not add file to the bundle
could not reset compression type for exports list
illegal export list found. Please rebuild your static library using -exported_symbol[s_list] with the newest Xcode
%s/bundle.xar
%%0%ud
bitcode_bundle.cpp
obj->getBitcode() != NULL && "File should contain bitcode"
%s/%s.bc
could not add bitcode from %s to bitcode bundle
could not set bitcode property for %s in bitcode bundle
could not set cmdline to XAR file
%s/%s.xar
search != handlerMap.end() && "Cannot find handler"
could not add bitcode from the bundle %s to bitcode bundle
could not set bundle property for %s in bitcode bundle
could not add obj file %s to bitcode bundle
could not set object property for %s in bitcode bundle
false && "Unknown bitcode"
lto.o.
%s/lto.bc
could not add lto file %s to bitcode bundle
could not encode sectcreate file %s into bitcode bundle
Section
could not set bitcode property for %s
exports.exp
gzip
could not add exports list to bitcode bundle
could not set exports property in bitcode bundle
unexports.exp
could not add unexports list to bitcode bundle
could not set compression type for order file
file.order
could not add order file to bitcode bundle
could not set order file property in bitcode bundle
could not reset compression type for order file
could not create XML in bitcode bundle
could not add version number to bitcode bundle
could not add achitecture name to bitcode bundle
could not add property to bitcode bundle
only one -syslibroot is accepted for bitcode bundle
could not add platform name to bitcode bundle
could not add SDK version to bitcode bundle
could not add swift version to bitcode bundle
%s has install name beginning with "/" but it is not from the specified SDK
{SDKPATH}
dylibs/weak
could not add dylib options to bitcode bundle
rt-forceload
could not add compiler_rt force_load info to bitcode bundle
could not add link options to bitcode bundle
temp directory cannot be removed: %s
could not extract files from bitcode bundle
bitcode bundle
!<arch>
slice content is not mach-o or a static library
cpu type in slice does not match fat header
cpu subtype in slice does not match fat header
too many slices
slice extends beyond end of file
not a fat file
/usr/lib/libobjc.A.dylib
msgSendCallSite
objc_stubs.cpp
target != nullptr
__objc_stubs
objc_msgSend$ rewrite not support for this arch
makeObjCStub
strncmp(targetName, "_objc_msgSend$", 14) == 0
using Objective-C but missing -lobjc
info.stub != nullptr && "stub not created"
selector
<
