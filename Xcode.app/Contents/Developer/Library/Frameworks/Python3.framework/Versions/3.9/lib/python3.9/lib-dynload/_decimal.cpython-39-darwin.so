Decimal(value="0", context=None)
Construct a new Decimal object. 'value' can be an integer, string, tuple,
or another Decimal object. If no value is given, return Decimal('0'). The
context does not affect the conversion and is only passed to determine if
the InvalidOperation trap is active.
exp($self, /, context=None)
Return the value of the (natural) exponential function e**x at the given
number.  The function always uses the ROUND_HALF_EVEN mode and the result
is correctly rounded.
ln($self, /, context=None)
Return the natural (base e) logarithm of the operand. The function always
uses the ROUND_HALF_EVEN mode and the result is correctly rounded.
log10($self, /, context=None)
Return the base ten logarithm of the operand. The function always uses the
ROUND_HALF_EVEN mode and the result is correctly rounded.
next_minus($self, /, context=None)
Return the largest number representable in the given context (or in the
current default context if no context is given) that is smaller than the
given operand.
next_plus($self, /, context=None)
Return the smallest number representable in the given context (or in the
current default context if no context is given) that is larger than the
given operand.
normalize($self, /, context=None)
Normalize the number by stripping the rightmost trailing zeros and
converting any result equal to Decimal('0') to Decimal('0e0').  Used
for producing canonical values for members of an equivalence class.
For example, Decimal('32.100') and Decimal('0.321000e+2') both normalize
to the equivalent value Decimal('32.1').
to_integral($self, /, rounding=None, context=None)
Identical to the to_integral_value() method.  The to_integral() name has been
kept for compatibility with older versions.
to_integral_exact($self, /, rounding=None, context=None)
Round to the nearest integer, signaling Inexact or Rounded as appropriate if
rounding occurs.  The rounding mode is determined by the rounding parameter
if given, else by the given context. If neither parameter is given, then the
rounding mode of the current default context is used.
to_integral_value($self, /, rounding=None, context=None)
Round to the nearest integer without signaling Inexact or Rounded.  The
rounding mode is determined by the rounding parameter if given, else by
the given context. If neither parameter is given, then the rounding mode
of the current default context is used.
sqrt($self, /, context=None)
Return the square root of the argument to full precision. The result is
correctly rounded using the ROUND_HALF_EVEN rounding mode.
compare($self, /, other, context=None)
Compare self to other.  Return a decimal value:
    a or b is a NaN ==> Decimal('NaN')
    a < b           ==> Decimal('-1')
    a == b          ==> Decimal('0')
    a > b           ==> Decimal('1')
compare_signal($self, /, other, context=None)
Identical to compare, except that all NaNs signal.
max($self, /, other, context=None)
Maximum of self and other.  If one operand is a quiet NaN and the other is
numeric, the numeric operand is returned.
max_mag($self, /, other, context=None)
Similar to the max() method, but the comparison is done using the absolute
values of the operands.
min($self, /, other, context=None)
Minimum of self and other. If one operand is a quiet NaN and the other is
numeric, the numeric operand is returned.
min_mag($self, /, other, context=None)
Similar to the min() method, but the comparison is done using the absolute
values of the operands.
next_toward($self, /, other, context=None)
If the two operands are unequal, return the number closest to the first
operand in the direction of the second operand.  If both operands are
numerically equal, return a copy of the first operand with the sign set
to be the same as the sign of the second operand.
quantize($self, /, exp, rounding=None, context=None)
Return a value equal to the first operand after rounding and having the
exponent of the second operand.
    >>> Decimal('1.41421356').quantize(Decimal('1.000'))
    Decimal('1.414')
Unlike other operations, if the length of the coefficient after the quantize
operation would be greater than precision, then an InvalidOperation is signaled.
This guarantees that, unless there is an error condition, the quantized exponent
is always equal to that of the right-hand operand.
Also unlike other operations, quantize never signals Underflow, even if the
result is subnormal and inexact.
If the exponent of the second operand is larger than that of the first, then
rounding may be necessary. In this case, the rounding mode is determined by the
rounding argument if given, else by the given context argument; if neither
argument is given, the rounding mode of the current thread's context is used.
remainder_near($self, /, other, context=None)
Return the remainder from dividing self by other.  This differs from
self % other in that the sign of the remainder is chosen so as to minimize
its absolute value. More precisely, the return value is self - n * other
where n is the integer nearest to the exact value of self / other, and
if two integers are equally near then the even one is chosen.
If the result is zero then its sign will be the sign of self.
fma($self, /, other, third, context=None)
Fused multiply-add.  Return self*other+third with no rounding of the
intermediate product self*other.
    >>> Decimal(2).fma(3, 5)
    Decimal('11')
is_canonical($self, /)
Return True if the argument is canonical and False otherwise.  Currently,
a Decimal instance is always canonical, so this operation always returns
True.
is_finite($self, /)
Return True if the argument is a finite number, and False if the argument
is infinite or a NaN.
is_infinite($self, /)
Return True if the argument is either positive or negative infinity and
False otherwise.
is_nan($self, /)
Return True if the argument is a (quiet or signaling) NaN and False
otherwise.
is_qnan($self, /)
Return True if the argument is a quiet NaN, and False otherwise.
is_snan($self, /)
Return True if the argument is a signaling NaN and False otherwise.
is_signed($self, /)
Return True if the argument has a negative sign and False otherwise.
Note that both zeros and NaNs can carry signs.
is_zero($self, /)
Return True if the argument is a (positive or negative) zero and False
otherwise.
is_normal($self, /, context=None)
Return True if the argument is a normal finite non-zero number with an
adjusted exponent greater than or equal to Emin. Return False if the
argument is zero, subnormal, infinite or a NaN.
is_subnormal($self, /, context=None)
Return True if the argument is subnormal, and False otherwise. A number is
subnormal if it is non-zero, finite, and has an adjusted exponent less
than Emin.
adjusted($self, /)
Return the adjusted exponent of the number.  Defined as exp + digits - 1.
canonical($self, /)
Return the canonical encoding of the argument.  Currently, the encoding
of a Decimal instance is always canonical, so this operation returns its
argument unchanged.
conjugate($self, /)
Return self.
radix($self, /)
Return Decimal(10), the radix (base) in which the Decimal class does
all its arithmetic. Included for compatibility with the specification.
copy_abs($self, /)
Return the absolute value of the argument.  This operation is unaffected by
context and is quiet: no flags are changed and no rounding is performed.
copy_negate($self, /)
Return the negation of the argument.  This operation is unaffected by context
and is quiet: no flags are changed and no rounding is performed.
logb($self, /, context=None)
For a non-zero number, return the adjusted exponent of the operand as a
Decimal instance.  If the operand is a zero, then Decimal('-Infinity') is
returned and the DivisionByZero condition is raised. If the operand is
an infinity then Decimal('Infinity') is returned.
logical_invert($self, /, context=None)
Return the digit-wise inversion of the (logical) operand.
number_class($self, /, context=None)
Return a string describing the class of the operand.  The returned value
is one of the following ten strings:
    * '-Infinity', indicating that the operand is negative infinity.
    * '-Normal', indicating that the operand is a negative normal number.
    * '-Subnormal', indicating that the operand is negative and subnormal.
    * '-Zero', indicating that the operand is a negative zero.
    * '+Zero', indicating that the operand is a positive zero.
    * '+Subnormal', indicating that the operand is positive and subnormal.
    * '+Normal', indicating that the operand is a positive normal number.
    * '+Infinity', indicating that the operand is positive infinity.
    * 'NaN', indicating that the operand is a quiet NaN (Not a Number).
    * 'sNaN', indicating that the operand is a signaling NaN.
to_eng_string($self, /, context=None)
Convert to an engineering-type string.  Engineering notation has an exponent
which is a multiple of 3, so there are up to 3 digits left of the decimal
place. For example, Decimal('123E+1') is converted to Decimal('1.23E+3').
The value of context.capitals determines whether the exponent sign is lower
or upper case. Otherwise, the context does not affect the operation.
compare_total($self, /, other, context=None)
Compare two operands using their abstract representation rather than
their numerical value.  Similar to the compare() method, but the result
gives a total ordering on Decimal instances.  Two Decimal instances with
the same numeric value but different representations compare unequal
in this ordering:
    >>> Decimal('12.0').compare_total(Decimal('12'))
    Decimal('-1')
Quiet and signaling NaNs are also included in the total ordering. The result
of this function is Decimal('0') if both operands have the same representation,
Decimal('-1') if the first operand is lower in the total order than the second,
and Decimal('1') if the first operand is higher in the total order than the
second operand. See the specification for details of the total order.
This operation is unaffected by context and is quiet: no flags are changed
and no rounding is performed. As an exception, the C version may raise
InvalidOperation if the second operand cannot be converted exactly.
compare_total_mag($self, /, other, context=None)
Compare two operands using their abstract representation rather than their
value as in compare_total(), but ignoring the sign of each operand.
x.compare_total_mag(y) is equivalent to x.copy_abs().compare_total(y.copy_abs()).
This operation is unaffected by context and is quiet: no flags are changed
and no rounding is performed. As an exception, the C version may raise
InvalidOperation if the second operand cannot be converted exactly.
copy_sign($self, /, other, context=None)
Return a copy of the first operand with the sign set to be the same as the
sign of the second operand. For example:
    >>> Decimal('2.3').copy_sign(Decimal('-1.5'))
    Decimal('-2.3')
This operation is unaffected by context and is quiet: no flags are changed
and no rounding is performed. As an exception, the C version may raise
InvalidOperation if the second operand cannot be converted exactly.
same_quantum($self, /, other, context=None)
Test whether self and other have the same exponent or whether both are NaN.
This operation is unaffected by context and is quiet: no flags are changed
and no rounding is performed. As an exception, the C version may raise
InvalidOperation if the second operand cannot be converted exactly.
logical_and($self, /, other, context=None)
Return the digit-wise 'and' of the two (logical) operands.
logical_or($self, /, other, context=None)
Return the digit-wise 'or' of the two (logical) operands.
logical_xor($self, /, other, context=None)
Return the digit-wise 'exclusive or' of the two (logical) operands.
rotate($self, /, other, context=None)
Return the result of rotating the digits of the first operand by an amount
specified by the second operand.  The second operand must be an integer in
the range -precision through precision. The absolute value of the second
operand gives the number of places to rotate. If the second operand is
positive then rotation is to the left; otherwise rotation is to the right.
The coefficient of the first operand is padded on the left with zeros to
length precision if necessary. The sign and exponent of the first operand are
unchanged.
scaleb($self, /, other, context=None)
Return the first operand with the exponent adjusted the second.  Equivalently,
return the first operand multiplied by 10**other. The second operand must be
an integer.
shift($self, /, other, context=None)
Return the result of shifting the digits of the first operand by an amount
specified by the second operand.  The second operand must be an integer in
the range -precision through precision. The absolute value of the second
operand gives the number of places to shift. If the second operand is
positive, then the shift is to the left; otherwise the shift is to the
right. Digits shifted into the coefficient are zeros. The sign and exponent
of the first operand are unchanged.
from_float($type, f, /)
Class method that converts a float to a decimal number, exactly.
Since 0.1 is not exactly representable in binary floating point,
Decimal.from_float(0.1) is not the same as Decimal('0.1').
    >>> Decimal.from_float(0.1)
    Decimal('0.1000000000000000055511151231257827021181583404541015625')
    >>> Decimal.from_float(float('nan'))
    Decimal('NaN')
    >>> Decimal.from_float(float('inf'))
    Decimal('Infinity')
    >>> Decimal.from_float(float('-inf'))
    Decimal('-Infinity')
as_tuple($self, /)
Return a tuple representation of the number.
as_integer_ratio($self, /)
Decimal.as_integer_ratio() -> (int, int)
Return a pair of integers, whose ratio is exactly equal to the original
Decimal and with a positive denominator. The ratio is in lowest terms.
Raise OverflowError on infinities and a ValueError on NaNs.
Context(prec=None, rounding=None, Emin=None, Emax=None, capitals=None, clamp=None, flags=None, traps=None)
The context affects almost all operations and controls rounding,
Over/Underflow, raising of exceptions and much more.  A new context
can be constructed as follows:
    >>> c = Context(prec=28, Emin=-425000000, Emax=425000000,
    ...             rounding=ROUND_HALF_EVEN, capitals=1, clamp=1,
    ...             traps=[InvalidOperation, DivisionByZero, Overflow],
    ...             flags=[])
    >>>
abs($self, x, /)
Return the absolute value of x.
exp($self, x, /)
Return e ** x.
ln($self, x, /)
Return the natural (base e) logarithm of x.
log10($self, x, /)
Return the base 10 logarithm of x.
minus($self, x, /)
Minus corresponds to the unary prefix minus operator in Python, but applies
the context to the result.
next_minus($self, x, /)
Return the largest representable number smaller than x.
next_plus($self, x, /)
Return the smallest representable number larger than x.
normalize($self, x, /)
Reduce x to its simplest form. Alias for reduce(x).
plus($self, x, /)
Plus corresponds to the unary prefix plus operator in Python, but applies
the context to the result.
to_integral($self, x, /)
Identical to to_integral_value(x).
to_integral_exact($self, x, /)
Round to an integer. Signal if the result is rounded or inexact.
to_integral_value($self, x, /)
Round to an integer.
sqrt($self, x, /)
Square root of a non-negative number to context precision.
add($self, x, y, /)
Return the sum of x and y.
compare($self, x, y, /)
Compare x and y numerically.
compare_signal($self, x, y, /)
Compare x and y numerically.  All NaNs signal.
divide($self, x, y, /)
Return x divided by y.
divide_int($self, x, y, /)
Return x divided by y, truncated to an integer.
divmod($self, x, y, /)
Return quotient and remainder of the division x / y.
max($self, x, y, /)
Compare the values numerically and return the maximum.
max_mag($self, x, y, /)
Compare the values numerically with their sign ignored.
min($self, x, y, /)
Compare the values numerically and return the minimum.
min_mag($self, x, y, /)
Compare the values numerically with their sign ignored.
multiply($self, x, y, /)
Return the product of x and y.
next_toward($self, x, y, /)
Return the number closest to x, in the direction towards y.
quantize($self, x, y, /)
Return a value equal to x (rounded), having the exponent of y.
remainder($self, x, y, /)
Return the remainder from integer division.  The sign of the result,
if non-zero, is the same as that of the original dividend.
remainder_near($self, x, y, /)
Return x - y * n, where n is the integer nearest the exact value of x / y
(if the result is 0 then its sign will be the sign of x).
subtract($self, x, y, /)
Return the difference between x and y.
power($self, /, a, b, modulo=None)
Compute a**b. If 'a' is negative, then 'b' must be integral. The result
will be inexact unless 'a' is integral and the result is finite and can
be expressed exactly in 'precision' digits.  In the Python version the
result is always correctly rounded, in the C version the result is almost
always correctly rounded.
If modulo is given, compute (a**b) % modulo. The following restrictions
hold:
    * all three arguments must be integral
    * 'b' must be nonnegative
    * at least one of 'a' or 'b' must be nonzero
    * modulo must be nonzero and less than 10**prec in absolute value
fma($self, x, y, z, /)
Return x multiplied by y, plus z.
Etiny($self, /)
Return a value equal to Emin - prec + 1, which is the minimum exponent value
for subnormal results.  When underflow occurs, the exponent is set to Etiny.
Etop($self, /)
Return a value equal to Emax - prec + 1.  This is the maximum exponent
if the _clamp field of the context is set to 1 (IEEE clamp mode).  Etop()
must not be negative.
radix($self, /)
Return 10.
is_canonical($self, x, /)
Return True if x is canonical, False otherwise.
is_finite($self, x, /)
Return True if x is finite, False otherwise.
is_infinite($self, x, /)
Return True if x is infinite, False otherwise.
is_nan($self, x, /)
Return True if x is a qNaN or sNaN, False otherwise.
is_normal($self, x, /)
Return True if x is a normal number, False otherwise.
is_qnan($self, x, /)
Return True if x is a quiet NaN, False otherwise.
is_signed($self, x, /)
Return True if x is negative, False otherwise.
is_snan($self, x, /)
Return True if x is a signaling NaN, False otherwise.
is_subnormal($self, x, /)
Return True if x is subnormal, False otherwise.
is_zero($self, x, /)
Return True if x is a zero, False otherwise.
canonical($self, x, /)
Return a new instance of x.
copy_abs($self, x, /)
Return a copy of x with the sign set to 0.
copy_decimal($self, x, /)
Return a copy of Decimal x.
copy_negate($self, x, /)
Return a copy of x with the sign inverted.
logb($self, x, /)
Return the exponent of the magnitude of the operand's MSD.
logical_invert($self, x, /)
Invert all digits of x.
number_class($self, x, /)
Return an indication of the class of x.
to_sci_string($self, x, /)
Convert a number to a string using scientific notation.
to_eng_string($self, x, /)
Convert a number to a string, using engineering notation.
compare_total($self, x, y, /)
Compare x and y using their abstract representation.
compare_total_mag($self, x, y, /)
Compare x and y using their abstract representation, ignoring sign.
copy_sign($self, x, y, /)
Copy the sign from y to x.
logical_and($self, x, y, /)
Digit-wise and of x and y.
logical_or($self, x, y, /)
Digit-wise or of x and y.
logical_xor($self, x, y, /)
Digit-wise xor of x and y.
rotate($self, x, y, /)
Return a copy of x, rotated by y places.
same_quantum($self, x, y, /)
Return True if the two operands have the same exponent.
scaleb($self, x, y, /)
Return the first operand after adding the second value to its exp.
shift($self, x, y, /)
Return a copy of x, shifted by y places.
clear_flags($self, /)
Reset all flags to False.
clear_traps($self, /)
Set all traps to False.
copy($self, /)
Return a duplicate of the context with all flags cleared.
create_decimal($self, num="0", /)
Create a new Decimal instance from num, using self as the context. Unlike the
Decimal constructor, this function observes the context limits.
create_decimal_from_float($self, f, /)
Create a new Decimal instance from float f.  Unlike the Decimal.from_float()
class method, this function observes the context limits.
C decimal arithmetic module
getcontext($module, /)
Get the current default context.
setcontext($module, context, /)
Set a new default context.
localcontext($module, /, ctx=None)
Return a context manager that will set the default context to a copy of ctx
on entry to the with-statement and restore the previous default context when
exiting the with-statement. If no context is specified, a copy of the current
default context is used.
]xEc
e@aB(
RwZsj_2
yK+[
(Ft=
[P)*
Ri83
f:\oG
hOeL
!o8%
as_integer_ratio
bit_length
decimal
__module__
numbers
Number
register
Rational
collections
namedtuple
(ss)
DecimalTuple
sign digits exponent
collections.abc
MutableMapping
s(OO){}
SignalDict
Decimal
Context
decimal.DecimalException
DecimalException
DefaultContext
decimal_context
HAVE_CONTEXTVAR
HAVE_THREADS
BasicContext
ExtendedContext
__version__
1.70
__libmpdec_version__
internal error: could not find method %s
decimal.Decimal
Decimal('%s')
conversion from %s to Decimal is not supported
argument must be an integer
internal error in flags_as_exception
(OO)
cannot convert NaN to integer
cannot convert Infinity to integer
cannot convert signaling NaN to float
-nan
Cannot hash a signaling NaN value
dec_hash: internal error: please report
argument must be int or float
numerator
denominator
exact conversion for comparison failed
log10
next_minus
next_plus
normalize
to_integral
to_integral_exact
to_integral_value
sqrt
compare
compare_signal
max_mag
min_mag
next_toward
quantize
remainder_near
is_canonical
is_finite
is_infinite
is_nan
is_qnan
is_snan
is_signed
is_zero
is_normal
is_subnormal
adjusted
canonical
conjugate
radix
copy_abs
copy_negate
logb
logical_invert
number_class
to_eng_string
compare_total
compare_total_mag
copy_sign
same_quantum
logical_and
logical_or
logical_xor
rotate
scaleb
shift
from_float
as_tuple
__copy__
__deepcopy__
__format__
__reduce__
__round__
__ceil__
__floor__
__trunc__
__complex__
__sizeof__
context
optional argument must be a context
rounding
internal error in PyDec_ToIntegralValue
valid values for rounding are:
  [ROUND_CEILING, ROUND_FLOOR, ROUND_UP, ROUND_DOWN,
   ROUND_HALF_UP, ROUND_HALF_DOWN, ROUND_HALF_EVEN,
   ROUND_05UP]
internal error in PyDec_ToIntegralExact
other
O|OO
internal error in dec_mpd_qquantize
third
OO|O
cannot convert NaN to integer ratio
cannot convert Infinity to integer ratio
format arg must be str
invalid format string
optional argument must be a dict
decimal_point
thousands_sep
grouping
invalid override dict
format specification exceeds internal limits of _decimal
invalid decimal point or unsupported combination of LC_CTYPE and LC_NUMERIC
O(O)
optional arg must be an integer
real
imag
value
argument must be a tuple or list
argument must be a sequence of length 3
sign must be an integer with the value 0 or 1
sNaN
string argument in the third position must be 'F', 'n' or 'N'
exponent must be an integer
coefficient must be a tuple of digits
internal error in dec_sequence_as_str
%lli
decimal.Context
internal error in context_repr
Context(prec=%zd, rounding=%s, Emin=%zd, Emax=%zd, capitals=%d, clamp=%d, flags=%s, traps=%s)
Clamped
InvalidOperation
DivisionByZero
Inexact
FloatOperation
Overflow
Rounded
Subnormal
Underflow
traps
flags
context attributes cannot be deleted
internal error in context_settraps_dict
argument must be a signal dict
invalid signal dict
internal error in context_setstatus_dict
minus
plus
divide
divide_int
divmod
multiply
remainder
subtract
power
Etiny
Etop
_apply
copy_decimal
to_sci_string
clear_flags
clear_traps
copy
create_decimal
create_decimal_from_float
modulo
argument must be a Decimal
O(nsnniiOO)
prec
Emax
Emin
capitals
clamp
valid range for prec is [1, MAX_PREC]
valid range for Emax is [0, MAX_EMAX]
valid range for Emin is [MIN_EMIN, 0]
internal error in context_setround
valid values for capitals are 0 or 1
valid values for clamp are 0 or 1
|OOOOOOOO
internal error in context_settraps_list
valid values for signals are:
  [InvalidOperation, FloatOperation, DivisionByZero,
   Overflow, Underflow, Subnormal, Inexact, Rounded,
   Clamped]
internal error in context_setstatus_list
decimal.ContextManager
__enter__
__exit__
argument must be a context
decimal.SignalDictMixin
True
False
{<class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s}
signal keys cannot be deleted
getcontext
setcontext
localcontext
decimal.InvalidOperation
decimal.FloatOperation
decimal.DivisionByZero
decimal.Overflow
decimal.Underflow
decimal.Subnormal
decimal.Inexact
decimal.Rounded
decimal.Clamped
ConversionSyntax
decimal.ConversionSyntax
DivisionImpossible
decimal.DivisionImpossible
DivisionUndefined
decimal.DivisionUndefined
InvalidContext
decimal.InvalidContext
MAX_PREC
MAX_EMAX
MIN_EMIN
MIN_ETINY
%s:%d: error: 
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Modules/_decimal/libmpdec/typearith.h
sub_size_t(): overflow: check the context
ROUND_UP
ROUND_DOWN
ROUND_CEILING
ROUND_FLOOR
ROUND_HALF_UP
ROUND_HALF_DOWN
ROUND_HALF_EVEN
ROUND_05UP
ROUND_TRUNC
CLAMP_DEFAULT
CLAMP_IEEE_754
%s:%d: warning: 
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Modules/_decimal/libmpdec/context.c
mpd_setminalloc: ignoring request to set MPD_MINALLOC a second time
illegal value for MPD_MINALLOC
%s, 
mpd_fprint: output error
Infinity
Conversion_syntax
Division_by_zero
Division_impossible
Division_undefined
Fpu_error
Invalid_context
Invalid_operation
Malloc_error
Not_implemented
IEEE_Invalid_operation
2.5.0
+Infinity
+Zero
+Normal
+Subnormal
-Infinity
-Zero
-Normal
-Subnormal
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Modules/_decimal/libmpdec/mpdecimal.c
libmpdec: internal error in _mpd_base_ndivmod: please report
add_size_t(): overflow: check the context
mul_size_t(): overflow: check the context
!$&),Decimal(value="0", context=None)
Construct a new Decimal object. 'value' can be an integer, string, tuple,
or another Decimal object. If no value is given, return Decimal('0'). The
context does not affect the conversion and is only passed to determine if
the InvalidOperation trap is active.
exp($self, /, context=None)
Return the value of the (natural) exponential function e**x at the given
number.  The function always uses the ROUND_HALF_EVEN mode and the result
is correctly rounded.
ln($self, /, context=None)
Return the natural (base e) logarithm of the operand. The function always
uses the ROUND_HALF_EVEN mode and the result is correctly rounded.
log10($self, /, context=None)
Return the base ten logarithm of the operand. The function always uses the
ROUND_HALF_EVEN mode and the result is correctly rounded.
next_minus($self, /, context=None)
Return the largest number representable in the given context (or in the
current default context if no context is given) that is smaller than the
given operand.
next_plus($self, /, context=None)
Return the smallest number representable in the given context (or in the
current default context if no context is given) that is larger than the
given operand.
normalize($self, /, context=None)
Normalize the number by stripping the rightmost trailing zeros and
converting any result equal to Decimal('0') to Decimal('0e0').  Used
for producing canonical values for members of an equivalence class.
For example, Decimal('32.100') and Decimal('0.321000e+2') both normalize
to the equivalent value Decimal('32.1').
to_integral($self, /, rounding=None, context=None)
Identical to the to_integral_value() method.  The to_integral() name has been
kept for compatibility with older versions.
to_integral_exact($self, /, rounding=None, context=None)
Round to the nearest integer, signaling Inexact or Rounded as appropriate if
rounding occurs.  The rounding mode is determined by the rounding parameter
if given, else by the given context. If neither parameter is given, then the
rounding mode of the current default context is used.
to_integral_value($self, /, rounding=None, context=None)
Round to the nearest integer without signaling Inexact or Rounded.  The
rounding mode is determined by the rounding parameter if given, else by
the given context. If neither parameter is given, then the rounding mode
of the current default context is used.
sqrt($self, /, context=None)
Return the square root of the argument to full precision. The result is
correctly rounded using the ROUND_HALF_EVEN rounding mode.
compare($self, /, other, context=None)
Compare self to other.  Return a decimal value:
    a or b is a NaN ==> Decimal('NaN')
    a < b           ==> Decimal('-1')
    a == b          ==> Decimal('0')
    a > b           ==> Decimal('1')
compare_signal($self, /, other, context=None)
Identical to compare, except that all NaNs signal.
max($self, /, other, context=None)
Maximum of self and other.  If one operand is a quiet NaN and the other is
numeric, the numeric operand is returned.
max_mag($self, /, other, context=None)
Similar to the max() method, but the comparison is done using the absolute
values of the operands.
min($self, /, other, context=None)
Minimum of self and other. If one operand is a quiet NaN and the other is
numeric, the numeric operand is returned.
min_mag($self, /, other, context=None)
Similar to the min() method, but the comparison is done using the absolute
values of the operands.
next_toward($self, /, other, context=None)
If the two operands are unequal, return the number closest to the first
operand in the direction of the second operand.  If both operands are
numerically equal, return a copy of the first operand with the sign set
to be the same as the sign of the second operand.
quantize($self, /, exp, rounding=None, context=None)
Return a value equal to the first operand after rounding and having the
exponent of the second operand.
    >>> Decimal('1.41421356').quantize(Decimal('1.000'))
    Decimal('1.414')
Unlike other operations, if the length of the coefficient after the quantize
operation would be greater than precision, then an InvalidOperation is signaled.
This guarantees that, unless there is an error condition, the quantized exponent
is always equal to that of the right-hand operand.
Also unlike other operations, quantize never signals Underflow, even if the
result is subnormal and inexact.
If the exponent of the second operand is larger than that of the first, then
rounding may be necessary. In this case, the rounding mode is determined by the
rounding argument if given, else by the given context argument; if neither
argument is given, the rounding mode of the current thread's context is used.
remainder_near($self, /, other, context=None)
Return the remainder from dividing self by other.  This differs from
self % other in that the sign of the remainder is chosen so as to minimize
its absolute value. More precisely, the return value is self - n * other
where n is the integer nearest to the exact value of self / other, and
if two integers are equally near then the even one is chosen.
If the result is zero then its sign will be the sign of self.
fma($self, /, other, third, context=None)
Fused multiply-add.  Return self*other+third with no rounding of the
intermediate product self*other.
    >>> Decimal(2).fma(3, 5)
    Decimal('11')
is_canonical($self, /)
Return True if the argument is canonical and False otherwise.  Currently,
a Decimal instance is always canonical, so this operation always returns
True.
is_finite($self, /)
Return True if the argument is a finite number, and False if the argument
is infinite or a NaN.
is_infinite($self, /)
Return True if the argument is either positive or negative infinity and
False otherwise.
is_nan($self, /)
Return True if the argument is a (quiet or signaling) NaN and False
otherwise.
is_qnan($self, /)
Return True if the argument is a quiet NaN, and False otherwise.
is_snan($self, /)
Return True if the argument is a signaling NaN and False otherwise.
is_signed($self, /)
Return True if the argument has a negative sign and False otherwise.
Note that both zeros and NaNs can carry signs.
is_zero($self, /)
Return True if the argument is a (positive or negative) zero and False
otherwise.
is_normal($self, /, context=None)
Return True if the argument is a normal finite non-zero number with an
adjusted exponent greater than or equal to Emin. Return False if the
argument is zero, subnormal, infinite or a NaN.
is_subnormal($self, /, context=None)
Return True if the argument is subnormal, and False otherwise. A number is
subnormal if it is non-zero, finite, and has an adjusted exponent less
than Emin.
adjusted($self, /)
Return the adjusted exponent of the number.  Defined as exp + digits - 1.
canonical($self, /)
Return the canonical encoding of the argument.  Currently, the encoding
of a Decimal instance is always canonical, so this operation returns its
argument unchanged.
conjugate($self, /)
Return self.
radix($self, /)
Return Decimal(10), the radix (base) in which the Decimal class does
all its arithmetic. Included for compatibility with the specification.
copy_abs($self, /)
Return the absolute value of the argument.  This operation is unaffected by
context and is quiet: no flags are changed and no rounding is performed.
copy_negate($self, /)
Return the negation of the argument.  This operation is unaffected by context
and is quiet: no flags are changed and no rounding is performed.
logb($self, /, context=None)
For a non-zero number, return the adjusted exponent of the operand as a
Decimal instance.  If the operand is a zero, then Decimal('-Infinity') is
returned and the DivisionByZero condition is raised. If the operand is
an infinity then Decimal('Infinity') is returned.
logical_invert($self, /, context=None)
Return the digit-wise inversion of the (logical) operand.
number_class($self, /, context=None)
Return a string describing the class of the operand.  The returned value
is one of the following ten strings:
    * '-Infinity', indicating that the operand is negative infinity.
    * '-Normal', indicating that the operand is a negative normal number.
    * '-Subnormal', indicating that the operand is negative and subnormal.
    * '-Zero', indicating that the operand is a negative zero.
    * '+Zero', indicating that the operand is a positive zero.
    * '+Subnormal', indicating that the operand is positive and subnormal.
    * '+Normal', indicating that the operand is a positive normal number.
    * '+Infinity', indicating that the operand is positive infinity.
    * 'NaN', indicating that the operand is a quiet NaN (Not a Number).
    * 'sNaN', indicating that the operand is a signaling NaN.
to_eng_string($self, /, context=None)
Convert to an engineering-type string.  Engineering notation has an exponent
which is a multiple of 3, so there are up to 3 digits left of the decimal
place. For example, Decimal('123E+1') is converted to Decimal('1.23E+3').
The value of context.capitals determines whether the exponent sign is lower
or upper case. Otherwise, the context does not affect the operation.
compare_total($self, /, other, context=None)
Compare two operands using their abstract representation rather than
their numerical value.  Similar to the compare() method, but the result
gives a total ordering on Decimal instances.  Two Decimal instances with
the same numeric value but different representations compare unequal
in this ordering:
    >>> Decimal('12.0').compare_total(Decimal('12'))
    Decimal('-1')
Quiet and signaling NaNs are also included in the total ordering. The result
of this function is Decimal('0') if both operands have the same representation,
Decimal('-1') if the first operand is lower in the total order than the second,
and Decimal('1') if the first operand is higher in the total order than the
second operand. See the specification for details of the total order.
This operation is unaffected by context and is quiet: no flags are changed
and no rounding is performed. As an exception, the C version may raise
InvalidOperation if the second operand cannot be converted exactly.
compare_total_mag($self, /, other, context=None)
Compare two operands using their abstract representation rather than their
value as in compare_total(), but ignoring the sign of each operand.
x.compare_total_mag(y) is equivalent to x.copy_abs().compare_total(y.copy_abs()).
This operation is unaffected by context and is quiet: no flags are changed
and no rounding is performed. As an exception, the C version may raise
InvalidOperation if the second operand cannot be converted exactly.
copy_sign($self, /, other, context=None)
Return a copy of the first operand with the sign set to be the same as the
sign of the second operand. For example:
    >>> Decimal('2.3').copy_sign(Decimal('-1.5'))
    Decimal('-2.3')
This operation is unaffected by context and is quiet: no flags are changed
and no rounding is performed. As an exception, the C version may raise
InvalidOperation if the second operand cannot be converted exactly.
same_quantum($self, /, other, context=None)
Test whether self and other have the same exponent or whether both are NaN.
This operation is unaffected by context and is quiet: no flags are changed
and no rounding is performed. As an exception, the C version may raise
InvalidOperation if the second operand cannot be converted exactly.
logical_and($self, /, other, context=None)
Return the digit-wise 'and' of the two (logical) operands.
logical_or($self, /, other, context=None)
Return the digit-wise 'or' of the two (logical) operands.
logical_xor($self, /, other, context=None)
Return the digit-wise 'exclusive or' of the two (logical) operands.
rotate($self, /, other, context=None)
Return the result of rotating the digits of the first operand by an amount
specified by the second operand.  The second operand must be an integer in
the range -precision through precision. The absolute value of the second
operand gives the number of places to rotate. If the second operand is
positive then rotation is to the left; otherwise rotation is to the right.
The coefficient of the first operand is padded on the left with zeros to
length precision if necessary. The sign and exponent of the first operand are
unchanged.
scaleb($self, /, other, context=None)
Return the first operand with the exponent adjusted the second.  Equivalently,
return the first operand multiplied by 10**other. The second operand must be
an integer.
shift($self, /, other, context=None)
Return the result of shifting the digits of the first operand by an amount
specified by the second operand.  The second operand must be an integer in
the range -precision through precision. The absolute value of the second
operand gives the number of places to shift. If the second operand is
positive, then the shift is to the left; otherwise the shift is to the
right. Digits shifted into the coefficient are zeros. The sign and exponent
of the first operand are unchanged.
from_float($type, f, /)
Class method that converts a float to a decimal number, exactly.
Since 0.1 is not exactly representable in binary floating point,
Decimal.from_float(0.1) is not the same as Decimal('0.1').
    >>> Decimal.from_float(0.1)
    Decimal('0.1000000000000000055511151231257827021181583404541015625')
    >>> Decimal.from_float(float('nan'))
    Decimal('NaN')
    >>> Decimal.from_float(float('inf'))
    Decimal('Infinity')
    >>> Decimal.from_float(float('-inf'))
    Decimal('-Infinity')
as_tuple($self, /)
Return a tuple representation of the number.
as_integer_ratio($self, /)
Decimal.as_integer_ratio() -> (int, int)
Return a pair of integers, whose ratio is exactly equal to the original
Decimal and with a positive denominator. The ratio is in lowest terms.
Raise OverflowError on infinities and a ValueError on NaNs.
Context(prec=None, rounding=None, Emin=None, Emax=None, capitals=None, clamp=None, flags=None, traps=None)
The context affects almost all operations and controls rounding,
Over/Underflow, raising of exceptions and much more.  A new context
can be constructed as follows:
    >>> c = Context(prec=28, Emin=-425000000, Emax=425000000,
    ...             rounding=ROUND_HALF_EVEN, capitals=1, clamp=1,
    ...             traps=[InvalidOperation, DivisionByZero, Overflow],
    ...             flags=[])
    >>>
abs($self, x, /)
Return the absolute value of x.
exp($self, x, /)
Return e ** x.
ln($self, x, /)
Return the natural (base e) logarithm of x.
log10($self, x, /)
Return the base 10 logarithm of x.
minus($self, x, /)
Minus corresponds to the unary prefix minus operator in Python, but applies
the context to the result.
next_minus($self, x, /)
Return the largest representable number smaller than x.
next_plus($self, x, /)
Return the smallest representable number larger than x.
normalize($self, x, /)
Reduce x to its simplest form. Alias for reduce(x).
plus($self, x, /)
Plus corresponds to the unary prefix plus operator in Python, but applies
the context to the result.
to_integral($self, x, /)
Identical to to_integral_value(x).
to_integral_exact($self, x, /)
Round to an integer. Signal if the result is rounded or inexact.
to_integral_value($self, x, /)
Round to an integer.
sqrt($self, x, /)
Square root of a non-negative number to context precision.
add($self, x, y, /)
Return the sum of x and y.
compare($self, x, y, /)
Compare x and y numerically.
compare_signal($self, x, y, /)
Compare x and y numerically.  All NaNs signal.
divide($self, x, y, /)
Return x divided by y.
divide_int($self, x, y, /)
Return x divided by y, truncated to an integer.
divmod($self, x, y, /)
Return quotient and remainder of the division x / y.
max($self, x, y, /)
Compare the values numerically and return the maximum.
max_mag($self, x, y, /)
Compare the values numerically with their sign ignored.
min($self, x, y, /)
Compare the values numerically and return the minimum.
min_mag($self, x, y, /)
Compare the values numerically with their sign ignored.
multiply($self, x, y, /)
Return the product of x and y.
next_toward($self, x, y, /)
Return the number closest to x, in the direction towards y.
quantize($self, x, y, /)
Return a value equal to x (rounded), having the exponent of y.
remainder($self, x, y, /)
Return the remainder from integer division.  The sign of the result,
if non-zero, is the same as that of the original dividend.
remainder_near($self, x, y, /)
Return x - y * n, where n is the integer nearest the exact value of x / y
(if the result is 0 then its sign will be the sign of x).
subtract($self, x, y, /)
Return the difference between x and y.
power($self, /, a, b, modulo=None)
Compute a**b. If 'a' is negative, then 'b' must be integral. The result
will be inexact unless 'a' is integral and the result is finite and can
be expressed exactly in 'precision' digits.  In the Python version the
result is always correctly rounded, in the C version the result is almost
always correctly rounded.
If modulo is given, compute (a**b) % modulo. The following restrictions
hold:
    * all three arguments must be integral
    * 'b' must be nonnegative
    * at least one of 'a' or 'b' must be nonzero
    * modulo must be nonzero and less than 10**prec in absolute value
fma($self, x, y, z, /)
Return x multiplied by y, plus z.
Etiny($self, /)
Return a value equal to Emin - prec + 1, which is the minimum exponent value
for subnormal results.  When underflow occurs, the exponent is set to Etiny.
Etop($self, /)
Return a value equal to Emax - prec + 1.  This is the maximum exponent
if the _clamp field of the context is set to 1 (IEEE clamp mode).  Etop()
must not be negative.
radix($self, /)
Return 10.
is_canonical($self, x, /)
Return True if x is canonical, False otherwise.
is_finite($self, x, /)
Return True if x is finite, False otherwise.
is_infinite($self, x, /)
Return True if x is infinite, False otherwise.
is_nan($self, x, /)
Return True if x is a qNaN or sNaN, False otherwise.
is_normal($self, x, /)
Return True if x is a normal number, False otherwise.
is_qnan($self, x, /)
Return True if x is a quiet NaN, False otherwise.
is_signed($self, x, /)
Return True if x is negative, False otherwise.
is_snan($self, x, /)
Return True if x is a signaling NaN, False otherwise.
is_subnormal($self, x, /)
Return True if x is subnormal, False otherwise.
is_zero($self, x, /)
Return True if x is a zero, False otherwise.
canonical($self, x, /)
Return a new instance of x.
copy_abs($self, x, /)
Return a copy of x with the sign set to 0.
copy_decimal($self, x, /)
Return a copy of Decimal x.
copy_negate($self, x, /)
Return a copy of x with the sign inverted.
logb($self, x, /)
Return the exponent of the magnitude of the operand's MSD.
logical_invert($self, x, /)
Invert all digits of x.
number_class($self, x, /)
Return an indication of the class of x.
to_sci_string($self, x, /)
Convert a number to a string using scientific notation.
to_eng_string($self, x, /)
Convert a number to a string, using engineering notation.
compare_total($self, x, y, /)
Compare x and y using their abstract representation.
compare_total_mag($self, x, y, /)
Compare x and y using their abstract representation, ignoring sign.
copy_sign($self, x, y, /)
Copy the sign from y to x.
logical_and($self, x, y, /)
Digit-wise and of x and y.
logical_or($self, x, y, /)
Digit-wise or of x and y.
logical_xor($self, x, y, /)
Digit-wise xor of x and y.
rotate($self, x, y, /)
Return a copy of x, rotated by y places.
same_quantum($self, x, y, /)
Return True if the two operands have the same exponent.
scaleb($self, x, y, /)
Return the first operand after adding the second value to its exp.
shift($self, x, y, /)
Return a copy of x, shifted by y places.
clear_flags($self, /)
Reset all flags to False.
clear_traps($self, /)
Set all traps to False.
copy($self, /)
Return a duplicate of the context with all flags cleared.
create_decimal($self, num="0", /)
Create a new Decimal instance from num, using self as the context. Unlike the
Decimal constructor, this function observes the context limits.
create_decimal_from_float($self, f, /)
Create a new Decimal instance from float f.  Unlike the Decimal.from_float()
class method, this function observes the context limits.
C decimal arithmetic module
getcontext($module, /)
Get the current default context.
setcontext($module, context, /)
Set a new default context.
localcontext($module, /, ctx=None)
Return a context manager that will set the default context to a copy of ctx
on entry to the with-statement and restore the previous default context when
exiting the with-statement. If no context is specified, a copy of the current
default context is used.
FNYd
]xEc
FNYd
e@aB(
RwZsj_2
yK+[
(Ft=
[P)*
Ri83
f:\oG
hOeL
!o8%
as_integer_ratio
bit_length
decimal
__module__
numbers
Number
register
Rational
collections
namedtuple
(ss)
DecimalTuple
sign digits exponent
collections.abc
MutableMapping
s(OO){}
SignalDict
Decimal
Context
decimal.DecimalException
DecimalException
DefaultContext
decimal_context
HAVE_CONTEXTVAR
HAVE_THREADS
BasicContext
ExtendedContext
__version__
1.70
__libmpdec_version__
internal error: could not find method %s
decimal.Decimal
Decimal('%s')
conversion from %s to Decimal is not supported
argument must be an integer
internal error in flags_as_exception
(OO)
cannot convert NaN to integer
cannot convert Infinity to integer
cannot convert signaling NaN to float
-nan
Cannot hash a signaling NaN value
dec_hash: internal error: please report
argument must be int or float
numerator
denominator
exact conversion for comparison failed
log10
next_minus
next_plus
normalize
to_integral
to_integral_exact
to_integral_value
sqrt
compare
compare_signal
max_mag
min_mag
next_toward
quantize
remainder_near
is_canonical
is_finite
is_infinite
is_nan
is_qnan
is_snan
is_signed
is_zero
is_normal
is_subnormal
adjusted
canonical
conjugate
radix
copy_abs
copy_negate
logb
logical_invert
number_class
to_eng_string
compare_total
compare_total_mag
copy_sign
same_quantum
logical_and
logical_or
logical_xor
rotate
scaleb
shift
from_float
as_tuple
__copy__
__deepcopy__
__format__
__reduce__
__round__
__ceil__
__floor__
__trunc__
__complex__
__sizeof__
context
optional argument must be a context
rounding
internal error in PyDec_ToIntegralValue
valid values for rounding are:
  [ROUND_CEILING, ROUND_FLOOR, ROUND_UP, ROUND_DOWN,
   ROUND_HALF_UP, ROUND_HALF_DOWN, ROUND_HALF_EVEN,
   ROUND_05UP]
internal error in PyDec_ToIntegralExact
other
O|OO
internal error in dec_mpd_qquantize
third
OO|O
cannot convert NaN to integer ratio
cannot convert Infinity to integer ratio
format arg must be str
invalid format string
optional argument must be a dict
decimal_point
thousands_sep
grouping
invalid override dict
format specification exceeds internal limits of _decimal
invalid decimal point or unsupported combination of LC_CTYPE and LC_NUMERIC
O(O)
optional arg must be an integer
real
imag
value
argument must be a tuple or list
argument must be a sequence of length 3
sign must be an integer with the value 0 or 1
sNaN
string argument in the third position must be 'F', 'n' or 'N'
exponent must be an integer
coefficient must be a tuple of digits
internal error in dec_sequence_as_str
%lli
decimal.Context
internal error in context_repr
Context(prec=%zd, rounding=%s, Emin=%zd, Emax=%zd, capitals=%d, clamp=%d, flags=%s, traps=%s)
Clamped
InvalidOperation
DivisionByZero
Inexact
FloatOperation
Overflow
Rounded
Subnormal
Underflow
traps
flags
context attributes cannot be deleted
internal error in context_settraps_dict
argument must be a signal dict
invalid signal dict
internal error in context_setstatus_dict
minus
plus
divide
divide_int
divmod
multiply
remainder
subtract
power
Etiny
Etop
_apply
copy_decimal
to_sci_string
clear_flags
clear_traps
copy
create_decimal
create_decimal_from_float
modulo
argument must be a Decimal
O(nsnniiOO)
prec
Emax
Emin
capitals
clamp
valid range for prec is [1, MAX_PREC]
valid range for Emax is [0, MAX_EMAX]
valid range for Emin is [MIN_EMIN, 0]
internal error in context_setround
valid values for capitals are 0 or 1
valid values for clamp are 0 or 1
|OOOOOOOO
internal error in context_settraps_list
valid values for signals are:
  [InvalidOperation, FloatOperation, DivisionByZero,
   Overflow, Underflow, Subnormal, Inexact, Rounded,
   Clamped]
internal error in context_setstatus_list
decimal.ContextManager
__enter__
__exit__
argument must be a context
decimal.SignalDictMixin
True
False
{<class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s}
signal keys cannot be deleted
getcontext
setcontext
localcontext
decimal.InvalidOperation
decimal.FloatOperation
decimal.DivisionByZero
decimal.Overflow
decimal.Underflow
decimal.Subnormal
decimal.Inexact
decimal.Rounded
decimal.Clamped
ConversionSyntax
decimal.ConversionSyntax
DivisionImpossible
decimal.DivisionImpossible
DivisionUndefined
decimal.DivisionUndefined
InvalidContext
decimal.InvalidContext
MAX_PREC
MAX_EMAX
MIN_EMIN
MIN_ETINY
%s:%d: error: 
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Modules/_decimal/libmpdec/typearith.h
sub_size_t(): overflow: check the context
ROUND_UP
ROUND_DOWN
ROUND_CEILING
ROUND_FLOOR
ROUND_HALF_UP
ROUND_HALF_DOWN
ROUND_HALF_EVEN
ROUND_05UP
ROUND_TRUNC
CLAMP_DEFAULT
CLAMP_IEEE_754
%s:%d: warning: 
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Modules/_decimal/libmpdec/context.c
mpd_setminalloc: ignoring request to set MPD_MINALLOC a second time
illegal value for MPD_MINALLOC
%s, 
mpd_fprint: output error
Infinity
Conversion_syntax
Division_by_zero
Division_impossible
Division_undefined
Fpu_error
Invalid_context
Invalid_operation
Malloc_error
Not_implemented
IEEE_Invalid_operation
2.5.0
+Infinity
+Zero
+Normal
+Subnormal
-Infinity
-Zero
-Normal
-Subnormal
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Modules/_decimal/libmpdec/mpdecimal.c
libmpdec: internal error in _mpd_base_ndivmod: please report
add_size_t(): overflow: check the context
mul_size_t(): overflow: check the context
