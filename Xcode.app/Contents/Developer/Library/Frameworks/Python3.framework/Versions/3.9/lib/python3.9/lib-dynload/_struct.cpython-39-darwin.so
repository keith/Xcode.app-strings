Functions to convert between Python values and C structs.
Python bytes objects are used to hold the data representing the C struct
and also as format strings (explained below) to describe the layout of data
in the C struct.
The optional first format char indicates byte order, size and alignment:
  @: native order, size & alignment (default)
  =: native order, std. size & alignment
  <: little-endian, std. size & alignment
  >: big-endian, std. size & alignment
  !: same as >
The remaining chars indicate types of args and must match exactly;
these can be preceded by a decimal repeat count:
  x: pad byte (no data); c:char; b:signed byte; B:unsigned byte;
  ?: _Bool (requires C99; if not available, char is used instead)
  h:short; H:unsigned short; i:int; I:unsigned int;
  l:long; L:unsigned long; f:float; d:double; e:half-float.
Special cases (preceding decimal count indicates length):
  s:string (array of char); p: pascal string (with count byte).
Special cases (only available in native format):
  n:ssize_t; N:size_t;
  P:an integer type that is wide enough to hold a pointer.
Special case (not in native mode unless 'long long' in platform C):
  q:long long; Q:unsigned long long
Whitespace between formats is ignored.
The variable struct.error is an exception raised on errors.
_clearcache($module, /)
Clear the internal cache.
calcsize($module, format, /)
Return size in bytes of the struct described by the format string.
iter_unpack($module, format, buffer, /)
Return an iterator yielding tuples unpacked from the given bytes.
The bytes are unpacked according to the format string, like
a repeated invocation of unpack_from().
Requires that the bytes length be a multiple of the format struct size.
pack(format, v1, v2, ...) -> bytes
Return a bytes object containing the values v1, v2, ... packed according
to the format string.  See help(struct) for more on format strings.
pack_into(format, buffer, offset, v1, v2, ...)
Pack the values v1, v2, ... according to the format string and write
the packed bytes into the writable buffer buf starting at offset.  Note
that the offset is a required argument.  See help(struct) for more
on format strings.
unpack($module, format, buffer, /)
Return a tuple containing values unpacked according to the format string.
The buffer's size in bytes must be calcsize(format).
See help(struct) for more on format strings.
unpack_from($module, format, /, buffer, offset=0)
Return a tuple containing values unpacked according to the format string.
The buffer's size, minus offset, must be at least calcsize(format).
See help(struct) for more on format strings.
Struct(fmt) --> compiled struct object
iter_unpack($self, buffer, /)
Return an iterator yielding tuples.
Tuples are unpacked from the given bytes source, like a repeated
invocation of unpack_from().
Requires that the bytes length be a multiple of the struct size.
S.pack(v1, v2, ...) -> bytes
Return a bytes object containing values v1, v2, ... packed according
to the format string S.format.  See help(struct) for more on format
strings.
S.pack_into(buffer, offset, v1, v2, ...)
Pack the values v1, v2, ... according to the format string S.format
and write the packed bytes into the writable buffer buf starting at
offset.  Note that the offset is a required argument.  See
help(struct) for more on format strings.
unpack($self, buffer, /)
Return a tuple containing unpacked values.
Unpack according to the format string Struct.format. The buffer's size
in bytes must be Struct.size.
See help(struct) for more on format strings.
unpack_from($self, /, buffer, offset=0)
Return a tuple containing unpacked values.
Values are unpacked according to the format string Struct.format.
The buffer's size in bytes, starting at position offset, must be
at least Struct.size.
See help(struct) for more on format strings.
S.__sizeof__() -> size of S in memory, in bytes
Cannot create '%.200s objects
Struct
struct.error
error
_struct
_clearcache
calcsize
iter_unpack
pack
pack_into
unpack
unpack_from
cannot iteratively unpack with a struct of length 0
iterative unpacking requires a buffer of a multiple of %zd bytes
missing format argument
pack expected %zd items for packing (got %zd)
argument for 's' must be a bytes object
argument for 'p' must be a bytes object
int too large to convert
pack_into expected buffer argument
pack_into expected offset argument
pack_into expected %zd items for packing (got %zd)
no space to pack %zd bytes at offset %zd
offset %zd out of range for %zd-byte buffer
pack_into requires a buffer of at least %zu bytes for packing %zd bytes at offset %zd (actual buffer size is %zd)
argument 2
contiguous buffer
unpack requires a buffer of %zd bytes
buffer
offset
argument 'buffer'
integer argument expected, got float
not enough data to unpack %zd bytes at offset %zd
unpack_from requires a buffer of at least %zu bytes for unpacking %zd bytes at offset %zd (actual buffer size is %zd)
_struct.Struct
__sizeof__
argument
__weaklistoffset__
format
struct format string
size
struct size in bytes
Struct() argument 1 must be a str or bytes object, not %.200s
embedded null character
repeat count given without format specifier
total struct size too long
byte format requires -128 <= number <= 127
argument out of range
required argument is not an integer
ubyte format requires 0 <= number <= 255
char format requires a bytes object of length 1
'%c' format requires 0 <= number <= %zu
'%c' format requires %zd <= number <= %zd
required argument is not a float
bad char in struct format
_struct.unpack_iterator
__length_hint__
short format requires (-32767 -1) <= number <= 32767
ushort format requires 0 <= number <= (32767 * 2 + 1)
Functions to convert between Python values and C structs.
Python bytes objects are used to hold the data representing the C struct
and also as format strings (explained below) to describe the layout of data
in the C struct.
The optional first format char indicates byte order, size and alignment:
  @: native order, size & alignment (default)
  =: native order, std. size & alignment
  <: little-endian, std. size & alignment
  >: big-endian, std. size & alignment
  !: same as >
The remaining chars indicate types of args and must match exactly;
these can be preceded by a decimal repeat count:
  x: pad byte (no data); c:char; b:signed byte; B:unsigned byte;
  ?: _Bool (requires C99; if not available, char is used instead)
  h:short; H:unsigned short; i:int; I:unsigned int;
  l:long; L:unsigned long; f:float; d:double; e:half-float.
Special cases (preceding decimal count indicates length):
  s:string (array of char); p: pascal string (with count byte).
Special cases (only available in native format):
  n:ssize_t; N:size_t;
  P:an integer type that is wide enough to hold a pointer.
Special case (not in native mode unless 'long long' in platform C):
  q:long long; Q:unsigned long long
Whitespace between formats is ignored.
The variable struct.error is an exception raised on errors.
_clearcache($module, /)
Clear the internal cache.
calcsize($module, format, /)
Return size in bytes of the struct described by the format string.
iter_unpack($module, format, buffer, /)
Return an iterator yielding tuples unpacked from the given bytes.
The bytes are unpacked according to the format string, like
a repeated invocation of unpack_from().
Requires that the bytes length be a multiple of the format struct size.
pack(format, v1, v2, ...) -> bytes
Return a bytes object containing the values v1, v2, ... packed according
to the format string.  See help(struct) for more on format strings.
pack_into(format, buffer, offset, v1, v2, ...)
Pack the values v1, v2, ... according to the format string and write
the packed bytes into the writable buffer buf starting at offset.  Note
that the offset is a required argument.  See help(struct) for more
on format strings.
unpack($module, format, buffer, /)
Return a tuple containing values unpacked according to the format string.
The buffer's size in bytes must be calcsize(format).
See help(struct) for more on format strings.
unpack_from($module, format, /, buffer, offset=0)
Return a tuple containing values unpacked according to the format string.
The buffer's size, minus offset, must be at least calcsize(format).
See help(struct) for more on format strings.
Struct(fmt) --> compiled struct object
iter_unpack($self, buffer, /)
Return an iterator yielding tuples.
Tuples are unpacked from the given bytes source, like a repeated
invocation of unpack_from().
Requires that the bytes length be a multiple of the struct size.
S.pack(v1, v2, ...) -> bytes
Return a bytes object containing values v1, v2, ... packed according
to the format string S.format.  See help(struct) for more on format
strings.
S.pack_into(buffer, offset, v1, v2, ...)
Pack the values v1, v2, ... according to the format string S.format
and write the packed bytes into the writable buffer buf starting at
offset.  Note that the offset is a required argument.  See
help(struct) for more on format strings.
unpack($self, buffer, /)
Return a tuple containing unpacked values.
Unpack according to the format string Struct.format. The buffer's size
in bytes must be Struct.size.
See help(struct) for more on format strings.
unpack_from($self, /, buffer, offset=0)
Return a tuple containing unpacked values.
Values are unpacked according to the format string Struct.format.
The buffer's size in bytes, starting at position offset, must be
at least Struct.size.
See help(struct) for more on format strings.
S.__sizeof__() -> size of S in memory, in bytes
Cannot create '%.200s objects
Struct
struct.error
error
_struct
_clearcache
calcsize
iter_unpack
pack
pack_into
unpack
unpack_from
cannot iteratively unpack with a struct of length 0
iterative unpacking requires a buffer of a multiple of %zd bytes
missing format argument
pack expected %zd items for packing (got %zd)
argument for 's' must be a bytes object
argument for 'p' must be a bytes object
int too large to convert
pack_into expected buffer argument
pack_into expected offset argument
pack_into expected %zd items for packing (got %zd)
no space to pack %zd bytes at offset %zd
offset %zd out of range for %zd-byte buffer
pack_into requires a buffer of at least %zu bytes for packing %zd bytes at offset %zd (actual buffer size is %zd)
argument 2
contiguous buffer
unpack requires a buffer of %zd bytes
buffer
offset
argument 'buffer'
integer argument expected, got float
not enough data to unpack %zd bytes at offset %zd
unpack_from requires a buffer of at least %zu bytes for unpacking %zd bytes at offset %zd (actual buffer size is %zd)
_struct.Struct
__sizeof__
argument
__weaklistoffset__
format
struct format string
size
struct size in bytes
Struct() argument 1 must be a str or bytes object, not %.200s
embedded null character
repeat count given without format specifier
total struct size too long
byte format requires -128 <= number <= 127
argument out of range
required argument is not an integer
ubyte format requires 0 <= number <= 255
char format requires a bytes object of length 1
'%c' format requires 0 <= number <= %zu
'%c' format requires %zd <= number <= %zd
required argument is not a float
bad char in struct format
_struct.unpack_iterator
__length_hint__
short format requires (-32767 -1) <= number <= 32767
ushort format requires 0 <= number <= (32767 * 2 + 1)
