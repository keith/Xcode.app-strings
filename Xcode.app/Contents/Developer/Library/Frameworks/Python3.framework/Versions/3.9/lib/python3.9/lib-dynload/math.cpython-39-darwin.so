7@#B
qqiA
{`Zj@
?This module provides access to the mathematical functions
defined by the C standard.
acos($module, x, /)
Return the arc cosine (measured in radians) of x.
The result is between 0 and pi.
acosh($module, x, /)
Return the inverse hyperbolic cosine of x.
asin($module, x, /)
Return the arc sine (measured in radians) of x.
The result is between -pi/2 and pi/2.
asinh($module, x, /)
Return the inverse hyperbolic sine of x.
atan($module, x, /)
Return the arc tangent (measured in radians) of x.
The result is between -pi/2 and pi/2.
atan2($module, y, x, /)
Return the arc tangent (measured in radians) of y/x.
Unlike atan(y/x), the signs of both x and y are considered.
atanh($module, x, /)
Return the inverse hyperbolic tangent of x.
ceil($module, x, /)
Return the ceiling of x as an Integral.
This is the smallest integer >= x.
copysign($module, x, y, /)
Return a float with the magnitude (absolute value) of x but the sign of y.
On platforms that support signed zeros, copysign(1.0, -0.0)
returns -1.0.
cos($module, x, /)
Return the cosine of x (measured in radians).
cosh($module, x, /)
Return the hyperbolic cosine of x.
degrees($module, x, /)
Convert angle x from radians to degrees.
dist($module, p, q, /)
Return the Euclidean distance between two points p and q.
The points should be specified as sequences (or iterables) of
coordinates.  Both inputs must have the same dimension.
Roughly equivalent to:
    sqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))
erf($module, x, /)
Error function at x.
erfc($module, x, /)
Complementary error function at x.
exp($module, x, /)
Return e raised to the power of x.
expm1($module, x, /)
Return exp(x)-1.
This function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.
fabs($module, x, /)
Return the absolute value of the float x.
factorial($module, x, /)
Find x!.
Raise a ValueError if x is negative or non-integral.
floor($module, x, /)
Return the floor of x as an Integral.
This is the largest integer <= x.
fmod($module, x, y, /)
Return fmod(x, y), according to platform C.
x % y may differ.
frexp($module, x, /)
Return the mantissa and exponent of x, as pair (m, e).
m is a float and e is an int, such that x = m * 2.**e.
If x is 0, m and e are both 0.  Else 0.5 <= abs(m) < 1.0.
fsum($module, seq, /)
Return an accurate floating point sum of values in the iterable seq.
Assumes IEEE-754 floating point arithmetic.
gamma($module, x, /)
Gamma function at x.
gcd($module, *integers)
Greatest Common Divisor.
hypot(*coordinates) -> value
Multidimensional Euclidean distance from the origin to a point.
Roughly equivalent to:
    sqrt(sum(x**2 for x in coordinates))
For a two dimensional point (x, y), gives the hypotenuse
using the Pythagorean theorem:  sqrt(x*x + y*y).
For example, the hypotenuse of a 3/4/5 right triangle is:
    >>> hypot(3.0, 4.0)
    5.0
isclose($module, /, a, b, *, rel_tol=1e-09, abs_tol=0.0)
Determine whether two floating point numbers are close in value.
  rel_tol
    maximum difference for being considered "close", relative to the
    magnitude of the input values
  abs_tol
    maximum difference for being considered "close", regardless of the
    magnitude of the input values
Return True if a is close in value to b, and False otherwise.
For the values to be considered close, the difference between them
must be smaller than at least one of the tolerances.
-inf, inf and NaN behave similarly to the IEEE 754 Standard.  That
is, NaN is not close to anything, even itself.  inf and -inf are
only close to themselves.
isfinite($module, x, /)
Return True if x is neither an infinity nor a NaN, and False otherwise.
isinf($module, x, /)
Return True if x is a positive or negative infinity, and False otherwise.
isnan($module, x, /)
Return True if x is a NaN (not a number), and False otherwise.
isqrt($module, n, /)
Return the integer part of the square root of the input.
lcm($module, *integers)
Least Common Multiple.
ldexp($module, x, i, /)
Return x * (2**i).
This is essentially the inverse of frexp().
lgamma($module, x, /)
Natural logarithm of absolute value of Gamma function at x.
log(x, [base=math.e])
Return the logarithm of x to the given base.
If the base not specified, returns the natural logarithm (base e) of x.
log1p($module, x, /)
Return the natural logarithm of 1+x (base e).
The result is computed in a way which is accurate for x near zero.
log10($module, x, /)
Return the base 10 logarithm of x.
log2($module, x, /)
Return the base 2 logarithm of x.
modf($module, x, /)
Return the fractional and integer parts of x.
Both results carry the sign of x and are floats.
pow($module, x, y, /)
Return x**y (x to the power of y).
radians($module, x, /)
Convert angle x from degrees to radians.
remainder($module, x, y, /)
Difference between x and the closest integer multiple of y.
Return x - n*y where n*y is the closest integer multiple of y.
In the case where x is exactly halfway between two multiples of
y, the nearest even value of n is used. The result is always exact.
sin($module, x, /)
Return the sine of x (measured in radians).
sinh($module, x, /)
Return the hyperbolic sine of x.
sqrt($module, x, /)
Return the square root of x.
tan($module, x, /)
Return the tangent of x (measured in radians).
tanh($module, x, /)
Return the hyperbolic tangent of x.
trunc($module, x, /)
Truncates the Real x to the nearest Integral toward 0.
Uses the __trunc__ magic method.
prod($module, iterable, /, *, start=1)
Calculate the product of all the elements in the input iterable.
The default start value for the product is 1.
When the iterable is empty, return the start value.  This function is
intended specifically for use with numeric values and may reject
non-numeric types.
perm($module, n, k=None, /)
Number of ways to choose k items from n items without repetition and with order.
Evaluates to n! / (n - k)! when k <= n and evaluates
to zero when k > n.
If k is not specified or is None, then k defaults to n
and the function returns n!.
Raises TypeError if either of the arguments are not integers.
Raises ValueError if either of the arguments are negative.
comb($module, n, k, /)
Number of ways to choose k items from n items without repetition and without order.
Evaluates to n! / (k! * (n - k)!) when k <= n and evaluates
to zero when k > n.
Also called the binomial coefficient because it is equivalent
to the coefficient of k-th term in polynomial expansion of the
expression (1 + x)**n.
Raises TypeError if either of the arguments are not integers.
Raises ValueError if either of the arguments are negative.
nextafter($module, x, y, /)
Return the next floating-point value after x towards y.
ulp($module, x, /)
Return the value of the least significant bit of the float x.
Xww0
(;L4B
YaRwND
math
acos
acosh
asin
asinh
atan
atan2
atanh
ceil
copysign
cosh
degrees
dist
erfc
expm1
fabs
factorial
floor
fmod
frexp
fsum
gamma
hypot
isclose
isfinite
isinf
isnan
isqrt
ldexp
lgamma
log1p
log10
log2
modf
radians
remainder
sinh
sqrt
tanh
trunc
prod
perm
comb
nextafter
math domain error
math range error
__ceil__
both points must have the same number of dimensions
Using factorial() with floats is deprecated
factorial() only accepts integral values
factorial() argument should not exceed %ld
factorial() not defined for negative values
__floor__
(di)
intermediate overflow in fsum
-inf + inf in fsum
math.fsum partials
rel_tol
abs_tol
tolerances must be non-negative
isqrt() argument must be nonnegative
Expected an int as second argument to ldexp.
O:log
OO:log
math.log requires 1 to 2 arguments
(dd)
__trunc__
type %.100s doesn't define __trunc__ method
start
n must be a non-negative integer
k must be a non-negative integer
k must not exceed %lld
min(n - k, k) must not exceed %lld
This module provides access to the mathematical functions
defined by the C standard.
acos($module, x, /)
Return the arc cosine (measured in radians) of x.
The result is between 0 and pi.
acosh($module, x, /)
Return the inverse hyperbolic cosine of x.
asin($module, x, /)
Return the arc sine (measured in radians) of x.
The result is between -pi/2 and pi/2.
asinh($module, x, /)
Return the inverse hyperbolic sine of x.
atan($module, x, /)
Return the arc tangent (measured in radians) of x.
The result is between -pi/2 and pi/2.
atan2($module, y, x, /)
Return the arc tangent (measured in radians) of y/x.
Unlike atan(y/x), the signs of both x and y are considered.
atanh($module, x, /)
Return the inverse hyperbolic tangent of x.
ceil($module, x, /)
Return the ceiling of x as an Integral.
This is the smallest integer >= x.
copysign($module, x, y, /)
Return a float with the magnitude (absolute value) of x but the sign of y.
On platforms that support signed zeros, copysign(1.0, -0.0)
returns -1.0.
cos($module, x, /)
Return the cosine of x (measured in radians).
cosh($module, x, /)
Return the hyperbolic cosine of x.
degrees($module, x, /)
Convert angle x from radians to degrees.
dist($module, p, q, /)
Return the Euclidean distance between two points p and q.
The points should be specified as sequences (or iterables) of
coordinates.  Both inputs must have the same dimension.
Roughly equivalent to:
    sqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))
erf($module, x, /)
Error function at x.
erfc($module, x, /)
Complementary error function at x.
exp($module, x, /)
Return e raised to the power of x.
expm1($module, x, /)
Return exp(x)-1.
This function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.
fabs($module, x, /)
Return the absolute value of the float x.
factorial($module, x, /)
Find x!.
Raise a ValueError if x is negative or non-integral.
floor($module, x, /)
Return the floor of x as an Integral.
This is the largest integer <= x.
fmod($module, x, y, /)
Return fmod(x, y), according to platform C.
x % y may differ.
frexp($module, x, /)
Return the mantissa and exponent of x, as pair (m, e).
m is a float and e is an int, such that x = m * 2.**e.
If x is 0, m and e are both 0.  Else 0.5 <= abs(m) < 1.0.
fsum($module, seq, /)
Return an accurate floating point sum of values in the iterable seq.
Assumes IEEE-754 floating point arithmetic.
gamma($module, x, /)
Gamma function at x.
gcd($module, *integers)
Greatest Common Divisor.
hypot(*coordinates) -> value
Multidimensional Euclidean distance from the origin to a point.
Roughly equivalent to:
    sqrt(sum(x**2 for x in coordinates))
For a two dimensional point (x, y), gives the hypotenuse
using the Pythagorean theorem:  sqrt(x*x + y*y).
For example, the hypotenuse of a 3/4/5 right triangle is:
    >>> hypot(3.0, 4.0)
    5.0
isclose($module, /, a, b, *, rel_tol=1e-09, abs_tol=0.0)
Determine whether two floating point numbers are close in value.
  rel_tol
    maximum difference for being considered "close", relative to the
    magnitude of the input values
  abs_tol
    maximum difference for being considered "close", regardless of the
    magnitude of the input values
Return True if a is close in value to b, and False otherwise.
For the values to be considered close, the difference between them
must be smaller than at least one of the tolerances.
-inf, inf and NaN behave similarly to the IEEE 754 Standard.  That
is, NaN is not close to anything, even itself.  inf and -inf are
only close to themselves.
isfinite($module, x, /)
Return True if x is neither an infinity nor a NaN, and False otherwise.
isinf($module, x, /)
Return True if x is a positive or negative infinity, and False otherwise.
isnan($module, x, /)
Return True if x is a NaN (not a number), and False otherwise.
isqrt($module, n, /)
Return the integer part of the square root of the input.
lcm($module, *integers)
Least Common Multiple.
ldexp($module, x, i, /)
Return x * (2**i).
This is essentially the inverse of frexp().
lgamma($module, x, /)
Natural logarithm of absolute value of Gamma function at x.
log(x, [base=math.e])
Return the logarithm of x to the given base.
If the base not specified, returns the natural logarithm (base e) of x.
log1p($module, x, /)
Return the natural logarithm of 1+x (base e).
The result is computed in a way which is accurate for x near zero.
log10($module, x, /)
Return the base 10 logarithm of x.
log2($module, x, /)
Return the base 2 logarithm of x.
modf($module, x, /)
Return the fractional and integer parts of x.
Both results carry the sign of x and are floats.
pow($module, x, y, /)
Return x**y (x to the power of y).
radians($module, x, /)
Convert angle x from degrees to radians.
remainder($module, x, y, /)
Difference between x and the closest integer multiple of y.
Return x - n*y where n*y is the closest integer multiple of y.
In the case where x is exactly halfway between two multiples of
y, the nearest even value of n is used. The result is always exact.
sin($module, x, /)
Return the sine of x (measured in radians).
sinh($module, x, /)
Return the hyperbolic sine of x.
sqrt($module, x, /)
Return the square root of x.
tan($module, x, /)
Return the tangent of x (measured in radians).
tanh($module, x, /)
Return the hyperbolic tangent of x.
trunc($module, x, /)
Truncates the Real x to the nearest Integral toward 0.
Uses the __trunc__ magic method.
prod($module, iterable, /, *, start=1)
Calculate the product of all the elements in the input iterable.
The default start value for the product is 1.
When the iterable is empty, return the start value.  This function is
intended specifically for use with numeric values and may reject
non-numeric types.
perm($module, n, k=None, /)
Number of ways to choose k items from n items without repetition and with order.
Evaluates to n! / (n - k)! when k <= n and evaluates
to zero when k > n.
If k is not specified or is None, then k defaults to n
and the function returns n!.
Raises TypeError if either of the arguments are not integers.
Raises ValueError if either of the arguments are negative.
comb($module, n, k, /)
Number of ways to choose k items from n items without repetition and without order.
Evaluates to n! / (k! * (n - k)!) when k <= n and evaluates
to zero when k > n.
Also called the binomial coefficient because it is equivalent
to the coefficient of k-th term in polynomial expansion of the
expression (1 + x)**n.
Raises TypeError if either of the arguments are not integers.
Raises ValueError if either of the arguments are negative.
nextafter($module, x, y, /)
Return the next floating-point value after x towards y.
ulp($module, x, /)
Return the value of the least significant bit of the float x.
Xww0
(;L4B
YaRwND
qqiA
{`Zj@
math
acos
acosh
asin
asinh
atan
atan2
atanh
ceil
copysign
cosh
degrees
dist
erfc
expm1
fabs
factorial
floor
fmod
frexp
fsum
gamma
hypot
isclose
isfinite
isinf
isnan
isqrt
ldexp
lgamma
log1p
log10
log2
modf
radians
remainder
sinh
sqrt
tanh
trunc
prod
perm
comb
nextafter
math domain error
math range error
__ceil__
both points must have the same number of dimensions
Using factorial() with floats is deprecated
factorial() only accepts integral values
factorial() argument should not exceed %ld
factorial() not defined for negative values
__floor__
(di)
intermediate overflow in fsum
-inf + inf in fsum
math.fsum partials
rel_tol
abs_tol
tolerances must be non-negative
isqrt() argument must be nonnegative
Expected an int as second argument to ldexp.
O:log
OO:log
math.log requires 1 to 2 arguments
(dd)
__trunc__
type %.100s doesn't define __trunc__ method
start
n must be a non-negative integer
k must be a non-negative integer
k must not exceed %lld
min(n - k, k) must not exceed %lld
