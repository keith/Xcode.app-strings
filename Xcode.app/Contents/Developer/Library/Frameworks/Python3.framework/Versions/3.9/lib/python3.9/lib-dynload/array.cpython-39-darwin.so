This module defines an object type which can efficiently represent
an array of basic values: characters, integers, floating point
numbers.  Arrays are sequence types and behave very much like lists,
except that the type of objects stored in them is constrained.
_array_reconstructor($module, arraytype, typecode, mformat_code, items,
                     /)
Internal. Used for pickling support.
array(typecode [, initializer]) -> array
Return a new array whose items are restricted by typecode, and
initialized from the optional initializer value, which must be a list,
string or iterable over elements of the appropriate type.
Arrays represent basic values and behave very much like lists, except
the type of objects stored in them is constrained. The type is specified
at object creation time by using a type code, which is a single character.
The following type codes are defined:
    Type code   C Type             Minimum size in bytes
    'b'         signed integer     1
    'B'         unsigned integer   1
    'u'         Unicode character  2 (see note)
    'h'         signed integer     2
    'H'         unsigned integer   2
    'i'         signed integer     2
    'I'         unsigned integer   2
    'l'         signed integer     4
    'L'         unsigned integer   4
    'q'         signed integer     8 (see note)
    'Q'         unsigned integer   8 (see note)
    'f'         floating point     4
    'd'         floating point     8
NOTE: The 'u' typecode corresponds to Python's unicode character. On
narrow builds this is 2-bytes on wide builds this is 4-bytes.
NOTE: The 'q' and 'Q' type codes are only available if the platform
C compiler used to build Python supports 'long long', or, on Windows,
'__int64'.
Methods:
append() -- append a new item to the end of the array
buffer_info() -- return information giving the current memory info
byteswap() -- byteswap all the items of the array
count() -- return number of occurrences of an object
extend() -- extend array by appending multiple elements from an iterable
fromfile() -- read items from a file object
fromlist() -- append items from the list
frombytes() -- append items from the string
index() -- return index of first occurrence of an object
insert() -- insert a new item into the array at a provided position
pop() -- remove and return item (default last)
remove() -- remove first occurrence of an object
reverse() -- reverse the order of the items in the array
tofile() -- write all items to a file object
tolist() -- return the array converted to an ordinary list
tobytes() -- return the array converted to a string
Attributes:
typecode -- the typecode character used to create the array
itemsize -- the length in bytes of one array item
__reduce__($self, /)
Return state information for pickling.
__setstate__($self, state, /)
Set state information for unpickling.
append($self, v, /)
Append new value v to the end of the array.
buffer_info($self, /)
Return a tuple (address, length) giving the current memory address and the length in items of the buffer used to hold array's contents.
The length should be multiplied by the itemsize attribute to calculate
the buffer length in bytes.
byteswap($self, /)
Byteswap all items of the array.
If the items in the array are not 1, 2, 4, or 8 bytes in size, RuntimeError is
raised.
__copy__($self, /)
Return a copy of the array.
count($self, v, /)
Return number of occurrences of v in the array.
__deepcopy__($self, unused, /)
Return a copy of the array.
extend($self, bb, /)
Append items to the end of the array.
fromfile($self, f, n, /)
Read n objects from the file object f and append them to the end of the array.
fromlist($self, list, /)
Append items to array from list.
frombytes($self, buffer, /)
Appends items from the string, interpreting it as an array of machine values, as if it had been read from a file using the fromfile() method).
fromunicode($self, ustr, /)
Extends this array with data from the unicode string ustr.
The array must be a unicode type array; otherwise a ValueError is raised.
Use array.frombytes(ustr.encode(...)) to append Unicode data to an array of
some other type.
index($self, v, /)
Return index of first occurrence of v in the array.
insert($self, i, v, /)
Insert a new item v into the array before position i.
pop($self, i=-1, /)
Return the i-th element and delete it from the array.
i defaults to -1.
__reduce_ex__($self, value, /)
Return state information for pickling.
remove($self, v, /)
Remove the first occurrence of v in the array.
reverse($self, /)
Reverse the order of the items in the array.
tofile($self, f, /)
Write all items (as machine values) to the file object f.
tolist($self, /)
Convert array to an ordinary list with the same items.
tobytes($self, /)
Convert the array to an array of machine values and return the bytes representation.
tounicode($self, /)
Extends this array with data from the unicode string ustr.
Convert the array to a unicode string.  The array must be a unicode type array;
otherwise a ValueError is raised.  Use array.tobytes().decode() to obtain a
unicode string from an array of some other type.
__sizeof__($self, /)
Size of the array in memory, in bytes.
array
_array_reconstructor
argument 2
a unicode character
integer argument expected, got float
first argument must be a type object, not %.200s
%.200s is not a subtype of %.200s
second argument must be a valid type code
third argument must be a valid machine format code.
fourth argument should be bytes, not %.200s
string length not a multiple of item size
strict
array.array
%s('%c')
%s('%c', %R)
tounicode() may only be called on unicode type arrays
can only append array (not "%.200s") to array
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/python3/Python/Modules/arraymodule.c
array index out of range
array assignment index out of range
cannot resize an array that is exporting buffers
can only extend array with array (not "%.200s")
can only extend with array of same kind
array indices must be integers
can only assign array (not "%.200s") to array slice
attempt to assign array of size %zd to extended slice of size %zd
array_buffer_getbuf: view==NULL argument is obsolete
arrayiterator
__reduce__
__setstate__
iter
N(())
N(O)n
append
buffer_info
byteswap
__copy__
count
__deepcopy__
extend
fromfile
fromlist
frombytes
fromunicode
index
insert
__reduce_ex__
remove
reverse
tofile
tolist
tobytes
tounicode
__sizeof__
don't know how to byteswap this array type
read
negative count
read() didn't return bytes
read() didn't return enough bytes
arg must be list
list changed size during iteration
argument
contiguous buffer
a bytes-like object is required
bytes length not a multiple of item size
fromunicode() may only be called on unicode type arrays
array.index(x): x not in array
pop from empty array
pop index out of range
__dict__
__reduce_ex__ argument should be an integer
O(CO)O
O(OCiN)O
array.remove(x): x not in array
write
typecode
the typecode character used to create the array
itemsize
the size, in bytes, of one array item
C|O:array
array.__new__
cannot use a str to initialize an array with typecode '%c'
cannot use a unicode array to initialize an array with typecode '%c'
bad typecode (must be b, B, u, h, H, i, I, l, L, q, Q, f or d)
h;array item must be integer
signed char is less than minimum
signed char is greater than maximum
b;array item must be integer
U;array item must be unicode character
array item must be unicode character
i;array item must be integer
unsigned short is less than minimum
unsigned short is greater than maximum
unsigned int is greater than maximum
array item must be integer
l;array item must be integer
L;array item must be integer
f;array item must be float
d;array item must be float
ArrayType
typecodes
FF``
<?`ck
3This module defines an object type which can efficiently represent
an array of basic values: characters, integers, floating point
numbers.  Arrays are sequence types and behave very much like lists,
except that the type of objects stored in them is constrained.
_array_reconstructor($module, arraytype, typecode, mformat_code, items,
                     /)
Internal. Used for pickling support.
array(typecode [, initializer]) -> array
Return a new array whose items are restricted by typecode, and
initialized from the optional initializer value, which must be a list,
string or iterable over elements of the appropriate type.
Arrays represent basic values and behave very much like lists, except
the type of objects stored in them is constrained. The type is specified
at object creation time by using a type code, which is a single character.
The following type codes are defined:
    Type code   C Type             Minimum size in bytes
    'b'         signed integer     1
    'B'         unsigned integer   1
    'u'         Unicode character  2 (see note)
    'h'         signed integer     2
    'H'         unsigned integer   2
    'i'         signed integer     2
    'I'         unsigned integer   2
    'l'         signed integer     4
    'L'         unsigned integer   4
    'q'         signed integer     8 (see note)
    'Q'         unsigned integer   8 (see note)
    'f'         floating point     4
    'd'         floating point     8
NOTE: The 'u' typecode corresponds to Python's unicode character. On
narrow builds this is 2-bytes on wide builds this is 4-bytes.
NOTE: The 'q' and 'Q' type codes are only available if the platform
C compiler used to build Python supports 'long long', or, on Windows,
'__int64'.
Methods:
append() -- append a new item to the end of the array
buffer_info() -- return information giving the current memory info
byteswap() -- byteswap all the items of the array
count() -- return number of occurrences of an object
extend() -- extend array by appending multiple elements from an iterable
fromfile() -- read items from a file object
fromlist() -- append items from the list
frombytes() -- append items from the string
index() -- return index of first occurrence of an object
insert() -- insert a new item into the array at a provided position
pop() -- remove and return item (default last)
remove() -- remove first occurrence of an object
reverse() -- reverse the order of the items in the array
tofile() -- write all items to a file object
tolist() -- return the array converted to an ordinary list
tobytes() -- return the array converted to a string
Attributes:
typecode -- the typecode character used to create the array
itemsize -- the length in bytes of one array item
__reduce__($self, /)
Return state information for pickling.
__setstate__($self, state, /)
Set state information for unpickling.
append($self, v, /)
Append new value v to the end of the array.
buffer_info($self, /)
Return a tuple (address, length) giving the current memory address and the length in items of the buffer used to hold array's contents.
The length should be multiplied by the itemsize attribute to calculate
the buffer length in bytes.
byteswap($self, /)
Byteswap all items of the array.
If the items in the array are not 1, 2, 4, or 8 bytes in size, RuntimeError is
raised.
__copy__($self, /)
Return a copy of the array.
count($self, v, /)
Return number of occurrences of v in the array.
__deepcopy__($self, unused, /)
Return a copy of the array.
extend($self, bb, /)
Append items to the end of the array.
fromfile($self, f, n, /)
Read n objects from the file object f and append them to the end of the array.
fromlist($self, list, /)
Append items to array from list.
frombytes($self, buffer, /)
Appends items from the string, interpreting it as an array of machine values, as if it had been read from a file using the fromfile() method).
fromunicode($self, ustr, /)
Extends this array with data from the unicode string ustr.
The array must be a unicode type array; otherwise a ValueError is raised.
Use array.frombytes(ustr.encode(...)) to append Unicode data to an array of
some other type.
index($self, v, /)
Return index of first occurrence of v in the array.
insert($self, i, v, /)
Insert a new item v into the array before position i.
pop($self, i=-1, /)
Return the i-th element and delete it from the array.
i defaults to -1.
__reduce_ex__($self, value, /)
Return state information for pickling.
remove($self, v, /)
Remove the first occurrence of v in the array.
reverse($self, /)
Reverse the order of the items in the array.
tofile($self, f, /)
Write all items (as machine values) to the file object f.
tolist($self, /)
Convert array to an ordinary list with the same items.
tobytes($self, /)
Convert the array to an array of machine values and return the bytes representation.
tounicode($self, /)
Extends this array with data from the unicode string ustr.
Convert the array to a unicode string.  The array must be a unicode type array;
otherwise a ValueError is raised.  Use array.tobytes().decode() to obtain a
unicode string from an array of some other type.
__sizeof__($self, /)
Size of the array in memory, in bytes.
bBuhHiIlLqQf
array
_array_reconstructor
argument 2
a unicode character
integer argument expected, got float
first argument must be a type object, not %.200s
%.200s is not a subtype of %.200s
second argument must be a valid type code
third argument must be a valid machine format code.
fourth argument should be bytes, not %.200s
string length not a multiple of item size
strict
array.array
%s('%c')
%s('%c', %R)
tounicode() may only be called on unicode type arrays
can only append array (not "%.200s") to array
/AppleInternal/Library/BuildRoots/c6e6effe-567b-11ef-8ae6-f643ac4f33b1/Library/Caches/com.apple.xbs/Sources/python3/Python/Modules/arraymodule.c
array index out of range
array assignment index out of range
cannot resize an array that is exporting buffers
can only extend array with array (not "%.200s")
can only extend with array of same kind
array indices must be integers
can only assign array (not "%.200s") to array slice
attempt to assign array of size %zd to extended slice of size %zd
array_buffer_getbuf: view==NULL argument is obsolete
arrayiterator
__reduce__
__setstate__
iter
N(())
N(O)n
append
buffer_info
byteswap
__copy__
count
__deepcopy__
extend
fromfile
fromlist
frombytes
fromunicode
index
insert
__reduce_ex__
remove
reverse
tofile
tolist
tobytes
tounicode
__sizeof__
don't know how to byteswap this array type
read
negative count
read() didn't return bytes
read() didn't return enough bytes
arg must be list
list changed size during iteration
argument
contiguous buffer
a bytes-like object is required
bytes length not a multiple of item size
fromunicode() may only be called on unicode type arrays
array.index(x): x not in array
pop from empty array
pop index out of range
__dict__
__reduce_ex__ argument should be an integer
O(CO)O
O(OCiN)O
array.remove(x): x not in array
write
typecode
the typecode character used to create the array
itemsize
the size, in bytes, of one array item
C|O:array
array.__new__
cannot use a str to initialize an array with typecode '%c'
cannot use a unicode array to initialize an array with typecode '%c'
bad typecode (must be b, B, u, h, H, i, I, l, L, q, Q, f or d)
h;array item must be integer
signed char is less than minimum
signed char is greater than maximum
b;array item must be integer
U;array item must be unicode character
array item must be unicode character
i;array item must be integer
unsigned short is less than minimum
unsigned short is greater than maximum
unsigned int is greater than maximum
array item must be integer
l;array item must be integer
L;array item must be integer
f;array item must be float
d;array item must be float
ArrayType
typecodes
