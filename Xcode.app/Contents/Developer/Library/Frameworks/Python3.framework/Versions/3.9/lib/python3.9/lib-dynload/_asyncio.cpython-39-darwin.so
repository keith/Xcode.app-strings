_all_tasks
_current_tasks
asyncio
context
asyncio.events
get_event_loop_policy
asyncio.base_futures
_future_repr_info
asyncio.exceptions
InvalidStateError
CancelledError
asyncio.base_tasks
_task_repr_info
_task_get_stack
_task_print_stack
asyncio.coroutines
iscoroutine
traceback
extract_stack
weakref
WeakSet
_asyncio.FutureIter
await wasn't used with future
Future object is not initialized.
Result is not set.
send
throw
close
O|OO
throw() third argument must be a traceback
instance exception may not have a separate value
exceptions must be classes deriving BaseException or instances of such a class
TaskStepMethWrapper
function takes no keyword arguments
function takes no positional arguments
Cannot enter into task %R while another task %R is being executed.
_step(): already done: %R %R
uninitialized Task object
yield was used instead of yield from for generator in task %R with %R
Task got bad yield: %R
Task cannot await on itself: %R
yield was used instead of yield from in task %R with %R
Task %R got Future %R attached to a different loop
call_soon
invalid state
invalid exception object
StopIteration interacts badly with generators and cannot be raised into a Future
uninitialized Future object
cancel
_asyncio_future_blocking
get_loop
_loop
add_done_callback
Leaving task %R does not match the current task %R.
__self__
TaskWakeupMethWrapper
result
_RunningLoopHolder
_asyncio
get_event_loop
get_running_loop
_get_running_loop
_set_running_loop
_register_task
_unregister_task
_enter_task
_leave_task
__asyncio_running_event_loop__
no running event loop
thread-local storage is not available
task
discard
loop
_asyncio.Future
_repr_info
<%s %U>
/AppleInternal/Library/BuildRoots/7e2bf0d3-4064-11ef-a538-e2437461156c/Library/Caches/com.apple.xbs/Sources/python3/Python/Modules/_asynciomodule.c
exception
set_result
set_exception
remove_done_callback
cancelled
done
_make_cancelled_error
__class_getitem__
Exception is not set.
_state
_callbacks
_result
_exception
_log_traceback
_source_traceback
_cancel_message
PENDING
CANCELLED
FINISHED
cannot delete attribute
_log_traceback can only be set to False
Future
get_debug
call_exception_handler
message
future
source_traceback
%s exception was never retrieved
_asyncio.Task
get_stack
print_stack
get_name
set_name
get_coro
Task does not support set_result operation
Task does not support set_exception operation
limit
file
_log_destroy_pending
_must_cancel
_coro
_fut_waiter
coro
name
Task
a coroutine was expected, got %R
Task-%llu
Task was destroyed but it is pending!
Accelerator module for asyncio
get_event_loop($module, /)
Return an asyncio event loop.
When called from a coroutine or a callback (e.g. scheduled with
call_soon or similar API), this function will always return the
running event loop.
If there is no running event loop set, the function will return
the result of `get_event_loop_policy().get_event_loop()` call.
get_running_loop($module, /)
Return the running event loop.  Raise a RuntimeError if there is none.
This function is thread-specific.
_get_running_loop($module, /)
Return the running event loop or None.
This is a low-level function intended to be used by event loops.
This function is thread-specific.
_set_running_loop($module, loop, /)
Set the running event loop.
This is a low-level function intended to be used by event loops.
This function is thread-specific.
_register_task($module, /, task)
Register a new task in asyncio as executed by loop.
Returns None.
_unregister_task($module, /, task)
Unregister a task.
Returns None.
_enter_task($module, /, loop, task)
Enter into task execution or resume suspended task.
Task belongs to loop.
Returns None.
_leave_task($module, /, loop, task)
Leave task execution or suspend a task.
Task belongs to loop.
Returns None.
Future(*, loop=None)
This class is *almost* compatible with concurrent.futures.Future.
    Differences:
    - result() and exception() do not take a timeout argument and
      raise an exception when the future isn't done yet.
    - Callbacks registered with add_done_callback() are always called
      via the event loop's call_soon_threadsafe().
    - This class is not compatible with the wait() and as_completed()
      methods in the concurrent.futures package.
result($self, /)
Return the result this future represents.
If the future has been cancelled, raises CancelledError.  If the
future's result isn't yet available, raises InvalidStateError.  If
the future is done and has an exception set, this exception is raised.
exception($self, /)
Return the exception that was set on this future.
The exception (or None if no exception was set) is returned only if
the future is done.  If the future has been cancelled, raises
CancelledError.  If the future isn't done yet, raises
InvalidStateError.
set_result($self, result, /)
Mark the future done and set its result.
If the future is already done when this method is called, raises
InvalidStateError.
set_exception($self, exception, /)
Mark the future done and set an exception.
If the future is already done when this method is called, raises
InvalidStateError.
add_done_callback($self, fn, /, *, context=<unrepresentable>)
Add a callback to be run when the future becomes done.
The callback is called with a single argument - the future object. If
the future is already done when this is called, the callback is
scheduled with call_soon.
remove_done_callback($self, fn, /)
Remove all instances of a callback from the "call when done" list.
Returns the number of callbacks removed.
cancel($self, /, msg=None)
Cancel the future and schedule callbacks.
If the future is already done or cancelled, return False.  Otherwise,
change the future's state to cancelled, schedule the callbacks and
return True.
cancelled($self, /)
Return True if the future was cancelled.
done($self, /)
Return True if the future is done.
Done means either that a result / exception are available, or that the
future was cancelled.
get_loop($self, /)
Return the event loop the Future is bound to.
_make_cancelled_error($self, /)
Create the CancelledError to raise if the Future is cancelled.
This should only be called once when handling a cancellation since
it erases the context exception value.
_repr_info($self, /)
Task(coro, *, loop=None, name=None)
A coroutine wrapped in a Future.
set_result($self, result, /)
set_exception($self, exception, /)
cancel($self, /, msg=None)
Request that this task cancel itself.
This arranges for a CancelledError to be thrown into the
wrapped coroutine on the next cycle through the event loop.
The coroutine then has a chance to clean up or even deny
the request using try/except/finally.
Unlike Future.cancel, this does not guarantee that the
task will be cancelled: the exception might be caught and
acted upon, delaying cancellation of the task or preventing
cancellation completely.  The task may also return a value or
raise a different exception.
Immediately after this method is called, Task.cancelled() will
not return True (unless the task was already cancelled).  A
task will be marked as cancelled when the wrapped coroutine
terminates with a CancelledError exception (even if cancel()
was not called).
get_stack($self, /, *, limit=None)
Return the list of stack frames for this task's coroutine.
If the coroutine is not done, this returns the stack where it is
suspended.  If the coroutine has completed successfully or was
cancelled, this returns an empty list.  If the coroutine was
terminated by an exception, this returns the list of traceback
frames.
The frames are always ordered from oldest to newest.
The optional limit gives the maximum number of frames to
return; by default all available frames are returned.  Its
meaning differs depending on whether a stack or a traceback is
returned: the newest frames of a stack are returned, but the
oldest frames of a traceback are returned.  (This matches the
behavior of the traceback module.)
For reasons beyond our control, only one stack frame is
returned for a suspended coroutine.
print_stack($self, /, *, limit=None, file=None)
Print the stack or traceback for this task's coroutine.
This produces output similar to that of the traceback module,
for the frames retrieved by get_stack().  The limit argument
is passed to get_stack().  The file argument is an I/O stream
to which the output is written; by default output is written
to sys.stderr.
_make_cancelled_error($self, /)
Create the CancelledError to raise if the Task is cancelled.
This should only be called once when handling a cancellation since
it erases the context exception value.
_repr_info($self, /)
get_name($self, /)
set_name($self, value, /)
get_coro($self, /)
Accelerator module for asyncio
get_event_loop($module, /)
Return an asyncio event loop.
When called from a coroutine or a callback (e.g. scheduled with
call_soon or similar API), this function will always return the
running event loop.
If there is no running event loop set, the function will return
the result of `get_event_loop_policy().get_event_loop()` call.
get_running_loop($module, /)
Return the running event loop.  Raise a RuntimeError if there is none.
This function is thread-specific.
_get_running_loop($module, /)
Return the running event loop or None.
This is a low-level function intended to be used by event loops.
This function is thread-specific.
_set_running_loop($module, loop, /)
Set the running event loop.
This is a low-level function intended to be used by event loops.
This function is thread-specific.
_register_task($module, /, task)
Register a new task in asyncio as executed by loop.
Returns None.
_unregister_task($module, /, task)
Unregister a task.
Returns None.
_enter_task($module, /, loop, task)
Enter into task execution or resume suspended task.
Task belongs to loop.
Returns None.
_leave_task($module, /, loop, task)
Leave task execution or suspend a task.
Task belongs to loop.
Returns None.
Future(*, loop=None)
This class is *almost* compatible with concurrent.futures.Future.
    Differences:
    - result() and exception() do not take a timeout argument and
      raise an exception when the future isn't done yet.
    - Callbacks registered with add_done_callback() are always called
      via the event loop's call_soon_threadsafe().
    - This class is not compatible with the wait() and as_completed()
      methods in the concurrent.futures package.
result($self, /)
Return the result this future represents.
If the future has been cancelled, raises CancelledError.  If the
future's result isn't yet available, raises InvalidStateError.  If
the future is done and has an exception set, this exception is raised.
exception($self, /)
Return the exception that was set on this future.
The exception (or None if no exception was set) is returned only if
the future is done.  If the future has been cancelled, raises
CancelledError.  If the future isn't done yet, raises
InvalidStateError.
set_result($self, result, /)
Mark the future done and set its result.
If the future is already done when this method is called, raises
InvalidStateError.
set_exception($self, exception, /)
Mark the future done and set an exception.
If the future is already done when this method is called, raises
InvalidStateError.
add_done_callback($self, fn, /, *, context=<unrepresentable>)
Add a callback to be run when the future becomes done.
The callback is called with a single argument - the future object. If
the future is already done when this is called, the callback is
scheduled with call_soon.
remove_done_callback($self, fn, /)
Remove all instances of a callback from the "call when done" list.
Returns the number of callbacks removed.
cancel($self, /, msg=None)
Cancel the future and schedule callbacks.
If the future is already done or cancelled, return False.  Otherwise,
change the future's state to cancelled, schedule the callbacks and
return True.
cancelled($self, /)
Return True if the future was cancelled.
done($self, /)
Return True if the future is done.
Done means either that a result / exception are available, or that the
future was cancelled.
get_loop($self, /)
Return the event loop the Future is bound to.
_make_cancelled_error($self, /)
Create the CancelledError to raise if the Future is cancelled.
This should only be called once when handling a cancellation since
it erases the context exception value.
_repr_info($self, /)
Task(coro, *, loop=None, name=None)
A coroutine wrapped in a Future.
set_result($self, result, /)
set_exception($self, exception, /)
cancel($self, /, msg=None)
Request that this task cancel itself.
This arranges for a CancelledError to be thrown into the
wrapped coroutine on the next cycle through the event loop.
The coroutine then has a chance to clean up or even deny
the request using try/except/finally.
Unlike Future.cancel, this does not guarantee that the
task will be cancelled: the exception might be caught and
acted upon, delaying cancellation of the task or preventing
cancellation completely.  The task may also return a value or
raise a different exception.
Immediately after this method is called, Task.cancelled() will
not return True (unless the task was already cancelled).  A
task will be marked as cancelled when the wrapped coroutine
terminates with a CancelledError exception (even if cancel()
was not called).
get_stack($self, /, *, limit=None)
Return the list of stack frames for this task's coroutine.
If the coroutine is not done, this returns the stack where it is
suspended.  If the coroutine has completed successfully or was
cancelled, this returns an empty list.  If the coroutine was
terminated by an exception, this returns the list of traceback
frames.
The frames are always ordered from oldest to newest.
The optional limit gives the maximum number of frames to
return; by default all available frames are returned.  Its
meaning differs depending on whether a stack or a traceback is
returned: the newest frames of a stack are returned, but the
oldest frames of a traceback are returned.  (This matches the
behavior of the traceback module.)
For reasons beyond our control, only one stack frame is
returned for a suspended coroutine.
print_stack($self, /, *, limit=None, file=None)
Print the stack or traceback for this task's coroutine.
This produces output similar to that of the traceback module,
for the frames retrieved by get_stack().  The limit argument
is passed to get_stack().  The file argument is an I/O stream
to which the output is written; by default output is written
to sys.stderr.
_make_cancelled_error($self, /)
Create the CancelledError to raise if the Task is cancelled.
This should only be called once when handling a cancellation since
it erases the context exception value.
_repr_info($self, /)
get_name($self, /)
set_name($self, value, /)
get_coro($self, /)
_all_tasks
_current_tasks
asyncio
context
asyncio.events
get_event_loop_policy
asyncio.base_futures
_future_repr_info
asyncio.exceptions
InvalidStateError
CancelledError
asyncio.base_tasks
_task_repr_info
_task_get_stack
_task_print_stack
asyncio.coroutines
iscoroutine
traceback
extract_stack
weakref
WeakSet
_asyncio.FutureIter
await wasn't used with future
Future object is not initialized.
Result is not set.
send
throw
close
O|OO
throw() third argument must be a traceback
instance exception may not have a separate value
exceptions must be classes deriving BaseException or instances of such a class
TaskStepMethWrapper
function takes no keyword arguments
function takes no positional arguments
Cannot enter into task %R while another task %R is being executed.
_step(): already done: %R %R
uninitialized Task object
yield was used instead of yield from for generator in task %R with %R
Task got bad yield: %R
Task cannot await on itself: %R
yield was used instead of yield from in task %R with %R
Task %R got Future %R attached to a different loop
call_soon
invalid state
invalid exception object
StopIteration interacts badly with generators and cannot be raised into a Future
uninitialized Future object
cancel
_asyncio_future_blocking
get_loop
_loop
add_done_callback
Leaving task %R does not match the current task %R.
__self__
TaskWakeupMethWrapper
result
_RunningLoopHolder
_asyncio
get_event_loop
get_running_loop
_get_running_loop
_set_running_loop
_register_task
_unregister_task
_enter_task
_leave_task
__asyncio_running_event_loop__
no running event loop
thread-local storage is not available
task
discard
loop
_asyncio.Future
_repr_info
<%s %U>
/AppleInternal/Library/BuildRoots/7e2bf0d3-4064-11ef-a538-e2437461156c/Library/Caches/com.apple.xbs/Sources/python3/Python/Modules/_asynciomodule.c
exception
set_result
set_exception
remove_done_callback
cancelled
done
_make_cancelled_error
__class_getitem__
Exception is not set.
_state
_callbacks
_result
_exception
_log_traceback
_source_traceback
_cancel_message
PENDING
CANCELLED
FINISHED
cannot delete attribute
_log_traceback can only be set to False
Future
get_debug
call_exception_handler
message
future
source_traceback
%s exception was never retrieved
_asyncio.Task
get_stack
print_stack
get_name
set_name
get_coro
Task does not support set_result operation
Task does not support set_exception operation
limit
file
_log_destroy_pending
_must_cancel
_coro
_fut_waiter
coro
name
Task
a coroutine was expected, got %R
Task-%llu
Task was destroyed but it is pending!
