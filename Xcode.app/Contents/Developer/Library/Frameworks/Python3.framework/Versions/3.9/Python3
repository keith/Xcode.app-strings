default
%s%s%s, %.20s, %.9s
Jul  4 2024
03:00:31
no mem to build parser accelerators
no mem to add parser accelerators
XXX ambiguity!
XXX too high nonterminal number!
XXX too many states!
EMPTY
NT%d
%.32s(%.32s)
PyGrammar_LabelRepr
invalid grammar label
s_push: parser stack overflow
ENDMARKER
NAME
NUMBER
STRING
NEWLINE
INDENT
DEDENT
LPAR
RPAR
LSQB
RSQB
COLON
COMMA
SEMI
PLUS
MINUS
STAR
SLASH
VBAR
AMPER
LESS
GREATER
EQUAL
PERCENT
LBRACE
RBRACE
EQEQUAL
NOTEQUAL
LESSEQUAL
GREATEREQUAL
TILDE
CIRCUMFLEX
LEFTSHIFT
RIGHTSHIFT
DOUBLESTAR
PLUSEQUAL
MINEQUAL
STAREQUAL
SLASHEQUAL
PERCENTEQUAL
AMPEREQUAL
VBAREQUAL
CIRCUMFLEXEQUAL
LEFTSHIFTEQUAL
RIGHTSHIFTEQUAL
DOUBLESTAREQUAL
DOUBLESLASH
DOUBLESLASHEQUAL
ATEQUAL
RARROW
ELLIPSIS
COLONEQUAL
AWAIT
ASYNC
TYPE_IGNORE
TYPE_COMMENT
<ERRORTOKEN>
<COMMENT>
<NL>
<ENCODING>
<N_TOKENS>
with Barry as BDFL, use '<>' instead of '!='
NFKC
unicodedata.normalize() must return a string, not %.200s
attribute
subscript
starred
name
list
tuple
lambda
function call
operator
generator expression
yield expression
await expression
list comprehension
set comprehension
dict comprehension
dict display
set display
f-string expression
None
False
True
Ellipsis
literal
comparison
conditional expression
named expression
unexpected expression in assignment %d (line %d)
f-string: 
replace
(OiiN)
Underscores in numeric literals are only supported in Python 3.6 and greater
error at start before reading any input
unexpected EOF while parsing
unexpected indent
unexpected unindent
invalid syntax
multiple statements found while compiling a single statement
cannot mix bytes and nonbytes literals
positional argument follows keyword argument unpacking
positional argument follows keyword argument
Generator expression must be parenthesized
unicodedata
normalize
unicode error
value error
(%s) %U
(%s) unknown error
invalid token
EOF while scanning triple-quoted string literal
EOL while scanning string literal
unindent does not match any outer indentation level
inconsistent use of tabs and spaces in indentation
too many levels of indentation
unexpected character after line continuation character
unknown parsing error
(OiiO)
pass
from
elif
else
with
raise
yield
break
while
class
return
assert
global
import
except
finally
continue
nonlocal
__peg_parser__
The '@' operator is
Await expressions are
Async comprehensions are
cannot assign to %s
cannot delete %s
iterable unpacking cannot be used in comprehension
expression cannot contain assignment, perhaps you meant "=="?
iterable argument unpacking follows keyword argument unpacking
You found it!
can't use starred expression here
dict unpacking cannot be used in dict comprehension
%s only supported in Python 3.%i and greater
non-default argument follows default argument
named arguments must follow bare *
cannot use assignment expressions with %s
Async functions are
bare * has associated type comment
Cannot have two type comments on def
expected an indented block
Async with statements are
Async for loops are
Variable annotation syntax is
Variable annotations syntax is
only single target (not %s) can be annotated
only single target (not tuple) can be annotated
illegal target for annotation
assignment to yield expression not possible
'%s' is an illegal expression for augmented assignment
trailing comma not allowed without surrounding parentheses
Format strings are only supported in Python 3.6 and greater
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Parser/pegen/parse_string.c
string to parse is too long
bytes can only contain ASCII literal characters.
f-string: unexpected end of string
f-string: expecting '}'
invalid escape sequence \%c
u005c
\U%08x
f-string: single '}' is not allowed
f-string: expressions nested too deeply
f-string expression part cannot include a backslash
f-string: too many nested parenthesis
f-string expression part cannot include '#'
f-string: unmatched '%c'
f-string: closing parenthesis '%c' does not match opening parenthesis '%c'
f-string: unterminated string
f-string: self documenting expressions are only supported in Python 3.8 and greater
f-string: invalid conversion character: expected 's', 'r', or 'a'
f-string: empty expression not allowed
compile
input line too long
can't re-enter readline
can't allocate lock
<string>
utf-8
encoding problem: %s
encoding problem: %s with BOM
coding
utf-8-
latin-1
iso-8859-1
iso-latin-1
latin-1-
iso-8859-1-
iso-latin-1-
ignore
async
await
invalid hexadecimal literal
invalid digit '%c' in octal literal
invalid octal literal
invalid digit '%c' in binary literal
invalid binary literal
invalid decimal literal
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers
too many nested parentheses
unmatched '%c'
closing parenthesis '%c' does not match opening parenthesis '%c' on line %d
closing parenthesis '%c' does not match opening parenthesis '%c'
Non-UTF-8 code starting with '\x%.2x' in file %U on line %i, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details
open
readline
isisOOO
tok_backup
tokenizer beginning of buffer
%04X
invalid character '%c' (U+%s)
invalid non-printable character U+%s
(O(OiiN))
__length_hint__
__length_hint__ must be an integer, not %.100s
__length_hint__() should return >= 0
sequence index must be integer, not '%.200s'
__class_getitem__
'%.200s' object is not subscriptable
'%.200s' object does not support item assignment
'%.200s' object does not support item deletion
expected a writable bytes-like object
a bytes-like object is required, not '%.100s'
struct
calcsize
both destination and source must be bytes-like objects
destination is too small to receive data from source
PyBuffer_FillInfo: view==NULL argument is obsolete
Object is not writable.
__format__
Format specifier must be a string, not %.200s
Type %.100s doesn't define __format__
__format__ must return a str, not %.200s
divmod()
bad operand type for unary -: '%.200s'
bad operand type for unary +: '%.200s'
bad operand type for unary ~: '%.200s'
bad operand type for abs(): '%.200s'
'%.200s' object cannot be interpreted as an integer
__index__ returned non-int (type %.200s)
__index__ returned non-int (type %.200s).  The ability to return an instance of a strict subclass of int is deprecated, and may be removed in a future version of Python.
cannot fit '%.200s' into an index-sized integer
__trunc__
__trunc__ returned non-Integral (type %.200s)
int() argument must be a string, a bytes-like object or a number, not '%.200s'
%.50s.__float__ returned non-float (type %.50s)
%.50s.__float__ returned non-float (type %.50s).  The ability to return an instance of a strict subclass of float is deprecated, and may be removed in a future version of Python.
PyNumber_ToBase: base must be 2, 8, 10 or 16
%.200s is not a sequence
object of type '%.200s' has no len()
'%.200s' object can't be concatenated
'%.200s' object can't be repeated
'%.200s' object does not support indexing
'%.200s' object is unsliceable
'%.200s' object doesn't support item deletion
'%.200s' object doesn't support slice assignment
'%.200s' object doesn't support slice deletion
argument of type '%.200s' is not iterable
count exceeds C integer size
index exceeds C integer size
sequence.index(x): x not in sequence
%.200s is not a mapping
keys
items
values
'%.200s' object is not iterable
iter() returned non-iterator of type '%.100s'
null argument to internal routine
print
unsupported operand type(s) for %.100s: '%.100s' and '%.100s'. Did you mean "print(<message>, file=<output_stream>)"?
unsupported operand type(s) for %.100s: '%.100s' and '%.100s'
can't multiply sequence by non-int of type '%.200s'
unsupported operand type(s) for ** or pow(): '%.100s' and '%.100s'
unsupported operand type(s) for pow(): '%.100s', '%.100s', '%.100s'
%.200s.%U() returned a non-iterable (type %.200s)
__instancecheck__
 in __instancecheck__
__subclasscheck__
 in __subclasscheck__
__class__
isinstance() arg 2 must be a type or tuple of types
__bases__
issubclass() arg 1 must be a class
issubclass() arg 2 must be a class or tuple of classes
bool
maketrans arguments must have same length
find
index
subsection not found
rfind
rindex
count
byte must be in range(0, 256)
startswith
endswith
argument should be integer or bytes-like object, not '%.200s'
%s first arg must be bytes or a tuple of bytes, not %s
Negative size passed to PyByteArray_FromStringAndSize
can't concat %.100s to %.100s
bytearray
bytearray_iterator
Existing exports of data: object cannot be re-sized
deallocated bytearray object has exported buffers
bytearray object is too large to make repr
bytearray index out of range
can't set bytearray slice from %.100s
bytearray indices must be integers or slices, not %.200s
can assign only bytes, buffers, or iterables of ints in range(0, 256)
attempt to assign bytes of size %zd to extended slice of size %zd
str() on a bytearray instance
bytearray_getbuffer: view==NULL argument is obsolete
Comparison between bytearray and string
__alloc__
__reduce__
__reduce_ex__
__sizeof__
append
capitalize
center
clear
copy
decode
expandtabs
extend
fromhex
insert
isalnum
isalpha
isascii
isdigit
islower
isspace
istitle
isupper
join
ljust
lower
lstrip
maketrans
partition
remove
removeprefix
removesuffix
reverse
rjust
rpartition
rsplit
rstrip
split
splitlines
strip
swapcase
title
translate
upper
zfill
__dict__
(O(Ns)N)
(O(y#)N)
(O()N)
integer argument expected, got float
cannot add more objects to bytearray
argument 2
a byte string of length 1
encoding
errors
argument 'encoding'
embedded null character
argument 'errors'
tabsize
result too long
can't extend bytearray with %.100s
argument
bytes_per_sep
can only join an iterable
sequence item %zd: expected a bytes-like object, %.80s found
join() result is too long
sequence changed size during iteration
argument 1
contiguous buffer
empty separator
pop from empty bytearray
pop index out of range
value not found in bytearray
replace bytes is too long
maxsplit
keepends
delete
translation table must be 256 characters long
source
|Oss:bytearray
encoding without a string argument
errors without a string argument
string argument without an encoding
negative count
cannot convert '%.200s' object to bytearray
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/bytearrayobject.c
__setstate__
iter
N(O)n
N(())
Negative size passed to PyBytes_FromStringAndSize
byte string is too long
PyBytes_FromFormatV(): %c format expects an integer in range [0; 255]
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/bytesobject.c
format requires a mapping
incomplete format key
* wants int
width too big
prec too big
incomplete format
unsupported format character '%c' (0x%x) at index %zd
not all arguments converted during bytes formatting
Trailing \ in string
strict
invalid \x escape at position %zd
decoding error; unknown error handling code: %.400s
invalid escape sequence '\%c'
expected bytes, %.200s found
embedded null byte
bytes object is too large to make repr
non-hexadecimal number found in fromhex() arg at position %zd
cannot convert '%.200s' object to bytes
bytes
bytes_iterator
byte string is too large
not enough arguments for format string
__bytes__ returned non-bytes (type %.200s)
%%b requires a bytes-like object, or an object that implements __bytes__, not '%.100s'
__bytes__
%%%c format: %s is required, not %.200s
an integer
a number
float argument required, not %.200s
%c arg not in range(256)
%c requires an integer in range(256) or a single byte
bytes must be in range(0, 256)
repeated bytes are too long
index out of range
byte indices must be integers or slices, not %.200s
str() on a bytes instance
Comparison between bytes and string
Comparison between bytes and int
__getnewargs__
(y#)
|Oss:bytes
%R returned NULL without setting an error
%s returned NULL without setting an error
%R returned a result with an error set
%s returned a result with an error set
'%.200s' object is not callable
 while calling a Python object
'%.200s' object does not support vectorcall
argument list must be a tuple
keyword list must be a dictionary
attribute of type '%.200s' is not callable
keywords must be strings
PyCapsule_New called with null pointer
PyCapsule_GetPointer called with invalid PyCapsule object
PyCapsule_GetPointer called with incorrect name
PyCapsule_GetName called with invalid PyCapsule object
PyCapsule_GetDestructor called with invalid PyCapsule object
PyCapsule_GetContext called with invalid PyCapsule object
PyCapsule_SetPointer called with null pointer
PyCapsule_SetPointer called with invalid PyCapsule object
PyCapsule_SetName called with invalid PyCapsule object
PyCapsule_SetDestructor called with invalid PyCapsule object
PyCapsule_SetContext called with invalid PyCapsule object
PyCapsule_Import could not import module "%s"
PyCapsule_Import "%s" is not valid
PyCapsule
NULL
<capsule object %s%s%s at %p>
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/cellobject.c
cell
<cell at %p: empty>
<cell at %p: %.80s object at %p>
cell_contents
Cell is empty
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/classobject.c
method
instancemethod
<bound method %V of %R>
__qualname__
__name__
getattr
N(ON)
__func__
the function (or other callable) implementing a method
__self__
the instance to which a method is bound
__doc__
first argument must be callable
self must not be None
<instancemethod %V at %p>
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/codeobject.c
co_code larger than INT_MAX
code: varnames is too small
code
non-string found in code slot
<code object %U at %p, file "%U", line %d>
<code object %U at %p, file ???, line %d>
co_argcount
co_posonlyargcount
co_kwonlyargcount
co_nlocals
co_stacksize
co_flags
co_firstlineno
co_code
co_consts
co_names
co_varnames
co_freevars
co_cellvars
co_filename
co_name
co_lnotab
argument 'co_code'
argument 'co_consts'
argument 'co_names'
argument 'co_varnames'
argument 'co_freevars'
argument 'co_cellvars'
argument 'co_filename'
argument 'co_name'
argument 'co_lnotab'
co_argcount must be a positive integer
co_posonlyargcount must be a positive integer
co_kwonlyargcount must be a positive integer
co_nlocals must be a positive integer
co_stacksize must be a positive integer
co_flags must be a positive integer
co_firstlineno must be a positive integer
code.__new__
OOOiiiiii
iiiiiiSO!O!O!UUiS|O!O!:code
code: argcount must not be negative
code: posonlyargcount must not be negative
code: kwonlyargcount must not be negative
code: nlocals must not be negative
name tuples must contain only strings, not '%.500s'
complex
__complex__
__complex__ returned non-complex (type %.200s)
__complex__ returned non-complex (type %.200s).  The ability to return an instance of a strict subclass of complex is deprecated, and may be removed in a future version of Python.
%s%s%sj%s
can't mod complex numbers.
can't take floor or mod of complex number.
complex modulo
0.0 to a negative or complex power
complex exponentiation
absolute value too large
can't convert complex to int
can't convert complex to float
can't take floor of complex number.
complex division by zero
conjugate
(dd)
U:__format__
real
the real part of a complex number
imag
the imaginary part of a complex number
complex() can't take second arg if first is a string
complex() second arg can't be a string
complex() first argument must be a string or a number, not '%.200s'
complex() second argument must be a number, not '%.200s'
complex() arg is a malformed string
method_descriptor
classmethod_descriptor
member_descriptor
getset_descriptor
wrapper_descriptor
%s() method: bad call flags
method-wrapper
mappingproxy
property
<method '%V' of '%s' objects>
N(OO)
__objclass__
__text_signature__
<descriptor>.__name__ is not a unicode object
<descriptor>.__objclass__.__qualname__ is not a unicode object
%S.%S
descriptor '%V' needs a type, not '%s', as arg 2
descriptor '%V' for '%.100s' objects doesn't apply to a '%.100s' object
descriptor '%V' of '%.100s' object needs an argument
descriptor '%V' for type '%.100s' needs either an object or a type
descriptor '%V' for type '%.100s' needs a type, not a '%.100s' as arg 2
descriptor '%V' requires a subtype of '%.100s' but received '%.100s'
<member '%V' of '%s' objects>
object.__getattr__
<attribute '%V' of '%s' objects>
attribute '%V' of '%.100s' objects is not readable
attribute '%V' of '%.100s' objects is not writable
<slot wrapper '%V' of '%s' objects>
descriptor '%V' requires a '%.100s' object but received a '%.100s'
wrapper %s() takes no keyword arguments
unbound method %U needs an argument
%U takes no keyword arguments
%U takes no arguments (%zd given)
%U takes exactly one argument (%zd given)
mappingproxy() argument must be a mapping, not %s
<method-wrapper '%s' of %s object at %p>
mappingproxy(%R)
'|=' is not supported by %s; use '|' instead
D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
D.keys() -> list of D's keys
D.values() -> list of D's values
D.items() -> list of D's (key, value) pairs, as 2-tuples
D.copy() -> a shallow copy of D
See PEP 585
__reversed__
D.__reversed__() -> reverse iterator
mapping
getter
setter
deleter
fget
fset
fdel
__isabstractmethod__
unreadable attribute
can't delete attribute
can't set attribute
enumerate
reversed
O(OO)
O(On)
iterable
start
O(O)n
O(())
'%.200s' object is not reversible
object
reason
su#nns
sy#nns
u#nns
Onns
_PyExc_Init
exceptions bootstrapping error.
Could not preallocate MemoryError object
Cannot allocate map from errnos to OSError subclasses
errmap insertion problem.
_PyBuiltins_AddExceptions
BaseException
Module dictionary insertion problem.
Exception
TypeError
StopAsyncIteration
StopIteration
GeneratorExit
SystemExit
KeyboardInterrupt
ImportError
ModuleNotFoundError
OSError
EnvironmentError
IOError
EOFError
RuntimeError
RecursionError
NotImplementedError
NameError
UnboundLocalError
AttributeError
SyntaxError
IndentationError
TabError
LookupError
IndexError
KeyError
ValueError
UnicodeError
UnicodeEncodeError
UnicodeDecodeError
UnicodeTranslateError
AssertionError
ArithmeticError
FloatingPointError
OverflowError
ZeroDivisionError
SystemError
ReferenceError
MemoryError
BufferError
Warning
UserWarning
DeprecationWarning
PendingDeprecationWarning
SyntaxWarning
RuntimeWarning
FutureWarning
ImportWarning
UnicodeWarning
BytesWarning
ResourceWarning
ConnectionError
BlockingIOError
BrokenPipeError
ChildProcessError
ConnectionAbortedError
ConnectionRefusedError
ConnectionResetError
FileExistsError
FileNotFoundError
IsADirectoryError
NotADirectoryError
InterruptedError
PermissionError
ProcessLookupError
TimeoutError
%U (%s: %S)
__traceback__ may not be deleted
__traceback__ must be a traceback or None
Common base class for all exceptions
%s(%R)
%s%R
with_traceback
state is not a dictionary
__suppress_context__
args
__traceback__
__context__
exception context
__cause__
exception cause
args may not be deleted
__context__ may not be deleted
exception context must be None or derive from BaseException
__cause__ may not be deleted
exception cause must be None or derive from BaseException
Common base class for all non-exit exceptions.
Inappropriate argument type.
Signal the end from iterator.__anext__().
Signal the end from iterator.__next__().
value
generator return value
Request that a generator exit.
Request to exit from the interpreter.
exception code
Program interrupted by user.
Import can't find module, or can't find name in module.
path
exception message
module name
module path
|$OO:ImportError
Module not found.
Base class for I/O related errors.
[Errno %S] %S: %R -> %R
[Errno %S] %S: %R
[Errno %S] %S
errno
POSIX exception code
strerror
exception strerror
filename
exception filename
filename2
second exception filename
characters_written
I/O operation would block.
Connection error.
Child process error.
Broken pipe.
Connection aborted.
Connection refused.
Connection reset.
File already exists.
File not found.
Operation doesn't work on directories.
Operation only works on directories.
Interrupted by signal.
Not enough permissions.
Process not found.
Timeout expired.
Read beyond end of file.
Unspecified run-time error.
Recursion limit exceeded.
Method or function hasn't been implemented yet.
Name not found globally.
Local name referenced but not bound to a value.
Attribute not found.
Invalid syntax.
%S (%U, line %ld)
%S (%U)
%S (line %ld)
exception msg
lineno
exception lineno
offset
exception offset
text
exception text
print_file_and_line
exception print_file_and_line
tuple index out of range
print 
exec 
Missing parentheses in call to 'exec'
 end=" "
Missing parentheses in call to 'print'. Did you mean print(%U%s)?
Improper indentation.
Improper mixture of spaces and tabs.
Base class for lookup errors.
Sequence index out of range.
Mapping key not found.
Inappropriate argument value (of correct type).
Unicode related error.
%.200s attribute not set
%.200s attribute must be unicode
%.200s attribute must be bytes
Unicode encoding error.
'%U' codec can't encode character '\x%02x' in position %zd: %U
'%U' codec can't encode character '\u%04x' in position %zd: %U
'%U' codec can't encode character '\U%08x' in position %zd: %U
'%U' codec can't encode characters in position %zd-%zd: %U
exception encoding
exception object
exception start
exception end
exception reason
UUnnU
Unicode decoding error.
'%U' codec can't decode byte 0x%02x in position %zd: %U
'%U' codec can't decode bytes in position %zd-%zd: %U
UOnnU
Unicode translation error.
can't translate character '\x%02x' in position %zd: %U
can't translate character '\u%04x' in position %zd: %U
can't translate character '\U%08x' in position %zd: %U
can't translate characters in position %zd-%zd: %U
UnnU
Assertion failed.
Base class for arithmetic errors.
Floating point operation failed.
Result too large to be represented.
Second argument to a division or modulo operation was zero.
Internal error in the Python interpreter.
Please report this to the Python maintainer, along with the traceback,
the Python version, and the hardware/OS platform and version.
Weak ref proxy used after referent went away.
Out of memory.
Buffer error.
Base class for warning categories.
Base class for warnings generated by user code.
Base class for warnings about deprecated features.
Base class for warnings about features which will be deprecated
in the future.
Base class for warnings about dubious syntax.
Base class for warnings about dubious runtime behavior.
Base class for warnings about constructs that will change semantically
in the future.
Base class for warnings about probable mistakes in module imports
Base class for warnings about Unicode related problems, mostly
related to conversion problems.
Base class for warnings about bytes and buffer related problems, mostly
related to conversion from str or comparing to str.
Base class for warnings about resource usage.
types.GenericAlias
Represent a PEP 585 generic type
E.g. for t = list[int], t.__origin__ is list and t.__args__ is (int,).
__module__
__origin__
__args__
builtins
There are no type variables left in %R
Too %s arguments for %R
many
__parameters__
TypeVar
typing
__orig_class__
__mro_entries__
__dir__
isinstance() argument 2 cannot be a parameterized generic
issubclass() argument 2 cannot be a parameterized generic
Type variables in the GenericAlias.
GenericAlias
generator
__await__() returned a coroutine
__await__() returned non-iterator of type '%.100s'
object %.100s can't be used in 'await' expression
coroutine
coroutine_wrapper
A wrapper object implementing __await__ for coroutines.
async_generator
async_generator_asend
async_generator_wrapped_value
async_generator_athrow
generator already executing
coroutine already executing
async generator already executing
cannot reuse already awaited coroutine
can't send non-None value to a just-started generator
can't send non-None value to a just-started async generator
generator raised StopIteration
coroutine raised StopIteration
async generator raised StopIteration
async generator raised StopAsyncIteration
can't send non-None value to a just-started coroutine
generator ignored GeneratorExit
coroutine ignored GeneratorExit
close
async generator ignored GeneratorExit
<generator object %S at %p>
send
throw
throw() third argument must be a traceback object
instance exception may not have a separate value
exceptions must be classes or instances deriving from BaseException, not %s
gi_frame
gi_running
gi_code
name of the generator
qualified name of the generator
gi_yieldfrom
object being iterated by yield from, or None
__name__ must be set to a string object
__qualname__ must be set to a string object
<coroutine object %S at %p>
cr_frame
cr_running
cr_code
cr_origin
name of the coroutine
qualified name of the coroutine
cr_await
object being awaited on, or None
<async_generator object %S at %p>
asend
athrow
aclose
ag_frame
ag_running
ag_code
name of the async generator
qualified name of the async generator
ag_await
cannot reuse already awaited __anext__()/asend()
anext(): asynchronous generator is already running
cannot reuse already awaited aclose()/athrow()
aclose(): asynchronous generator is already running
athrow(): asynchronous generator is already running
isisssO
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/fileobject.c
object.readline() returned non-string
EOF when reading a line
write
writeobject with NULL file
null file for PyFile_WriteString
fileno
fileno() returned a non-integer
argument must be an int, or have a fileno() method.
file descriptor cannot be a negative integer (%i)
stderrprinter
setopencodehook
failed to change existing open_code hook
'path' must be 'str', not '%.200s'
<stdprinter(fd=%d) object at %p>
flush
isatty
backslashreplace
closed
True if the file is closed
Encoding of the file
mode
String giving the file mode
cannot create 'stderrprinter' instances
float() argument must be a string or a number, not '%.200s'
float
must be real number, not %.50s
free PyFloatObject
frexp() result out of range
float too large to pack with e format
float too large to pack with f format
float too large to pack with d format
can't unpack IEEE 754 special value on non-IEEE platform
could not convert string to float: %R
float modulo
float divmod()
pow() 3rd argument not allowed unless all arguments are integers
0.0 cannot be raised to a negative power
float floor division by zero
float division by zero
__floor__
__ceil__
__round__
as_integer_ratio
is_integer
__getformat__
__set_format__
%s0%se%d
rounded value too large to represent
cannot convert Infinity to integer ratio
cannot convert NaN to integer ratio
hexadecimal value too large to represent as a float
invalid hexadecimal floating-point string
hexadecimal string too long to convert
-0x0.0p+0
0x0.0p+0
-0x%sp%c%d
0x%sp%c%d
double
__getformat__() argument 1 must be 'double' or 'float'
unknown
IEEE, little-endian
IEEE, big-endian
insane float_format or double_format
__setformat__() argument 1 must be 'double' or 'float'
__setformat__() argument 2 must be 'unknown', 'IEEE, little-endian' or 'IEEE, big-endian'
can only set %s format to 'unknown' or the detected platform value
sys.float_info
DBL_MAX -- maximum representable finite float
max_exp
DBL_MAX_EXP -- maximum int e such that radix**(e-1) is representable
max_10_exp
DBL_MAX_10_EXP -- maximum int e such that 10**e is representable
DBL_MIN -- Minimum positive normalized float
min_exp
DBL_MIN_EXP -- minimum int e such that radix**(e-1) is a normalized float
min_10_exp
DBL_MIN_10_EXP -- minimum int e such that 10**e is a normalized
DBL_DIG -- digits
mant_dig
DBL_MANT_DIG -- mantissa digits
epsilon
DBL_EPSILON -- Difference between 1 and the next representable float
radix
FLT_RADIX -- radix of exponent
rounds
FLT_ROUNDS -- rounding mode
frame
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/frameobject.c
PyFrame_BlockSetup
block stack overflow
PyFrame_BlockPop
block stack underflow
co_varnames must be a tuple, not %s
free PyFrameObject
<frame at %p, file %R, line %d, code %S>
cannot clear an executing frame
f_back
f_code
f_builtins
f_globals
f_lasti
f_trace_lines
f_trace_opcodes
f_locals
f_lineno
f_trace
cannot delete attribute
lineno must be an integer
can't jump from the 'call' trace event of a new frame
f_lineno can only be set by a trace function
can only jump from a 'line' trace event
lineno out of range
line %d comes before the current code block
line %d comes after the current code block
cannot find bytecode for specified line
code may be unreachable.
can't jump out of an 'except' block
can't jump into an 'except' block as there's no exception
can't jump into the body of a try statement
can't jump into the body of a with statement
can't jump into the body of a for loop
__builtins__
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/funcobject.c
non-tuple default args
non-dict keyword only default args
expected tuple for closure, got '%.100s'
non-dict annotations
function
classmethod
staticmethod
<function %U at %p>
__closure__
__globals__
__code__
__defaults__
__kwdefaults__
__annotations__
__code__ must be set to a code object
object.__setattr__
%U() requires a code object with %zd free vars, not %zd
__defaults__ must be set to a tuple object
object.__delattr__
__kwdefaults__ must be set to a dict object
__annotations__ must be set to a dict object
globals
argdefs
closure
argument 'code'
argument 'globals'
dict
arg 3 (name) must be None or string
arg 4 (defaults) must be None or tuple
arg 5 (closure) must be tuple
arg 5 (closure) must be None or tuple
%U requires closure of length %zd, not %zd
arg 5 (closure) expected cell, found %s
function.__new__
uninitialized classmethod object
uninitialized staticmethod object
InterpreterID
%s(%lld)
%lld
force
O&|$p:InterpreterID.__init__
interpreter ID must be a non-negative int, got %R
interpreter ID must be an int, got %.100s
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/iterobject.c
iterator
callable_iterator
iter index too large
free PyListObject
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/listobject.c
list index out of range
list assignment index out of range
list_iterator
list_reverseiterator
cannot add more objects to list
can only assign an iterable
argument must be iterable
list modified during sort
[...]
can only concatenate list (not "%.200s") to list
list indices must be integers or slices, not %.200s
must assign iterable to extended slice
attempt to assign sequence of size %zd to extended slice of size %zd
__getitem__
x.__getitem__(y) <==> x[y]
sort
pop from empty list
list.remove(x): x not in list
%R is not in list
N(N)
an integer is required (got type %.200s)
__int__ returned non-int (type %.200s)
__int__ returned non-int (type %.200s).  The ability to return an instance of a strict subclass of int is deprecated, and may be removed in a future version of Python.
an integer is required (got type %.200s).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.
too many digits in integer
cannot convert float infinity to integer
cannot convert float NaN to integer
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/longobject.c
Python int too large to convert to C long
Python int too large to convert to C int
an integer is required
Python int too large to convert to C ssize_t
can't convert negative value to unsigned int
Python int too large to convert to C unsigned long
can't convert negative value to size_t
Python int too large to convert to C size_t
int has too many bits to express in a platform size_t
byte array too long to convert to int
can't convert negative int to unsigned
int too big to convert
value must be positive
Python int too large for C unsigned short
Python int too large for C unsigned int
int() arg 2 must be >= 2 and <= 36
invalid literal for int() with base %d: %.200R
huge integer: number of bits overflows a Py_ssize_t
int too large to convert to float
non-integer arguments in division
int too large to format
int string too large to convert
integer division or modulo by zero
negative shift count
pow() 3rd argument cannot be 0
base is not invertible for the given modulus
division by zero
intermediate overflow during division
integer division result too large for a float
Returns self, the complex conjugate of any int.
bit_length
to_bytes
from_bytes
Truncating an Integral returns itself.
Flooring an Integral returns itself.
Ceiling of an Integral returns itself.
Rounding an Integral returns itself.
Rounding with an ndigits argument also returns an integer.
length
byteorder
signed
argument 'byteorder'
byteorder must be either 'little' or 'big'
length argument must be non-negative
little
numerator
the numerator of a rational number in lowest terms
denominator
the denominator of a rational number in lowest terms
base
int() missing string argument
int() base must be >= 2 and <= 36, or 0
int() can't convert non-string with explicit base
sys.int_info
bits_per_digit
size of a digit in bits
sizeof_digit
size in bytes of the C type used to represent a digit
free PyDictObject
PyType_HasFeature((((PyObject*)(op))->ob_type), (1UL << 29))
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/dictobject.c
_PyDict_CheckConsistency
0 <= mp->ma_used && mp->ma_used <= usable
(((keys->dk_size) & (keys->dk_size-1)) == 0)
0 <= keys->dk_usable && keys->dk_usable <= usable
0 <= keys->dk_nentries && keys->dk_nentries <= usable
keys->dk_usable + keys->dk_nentries <= usable
keys->dk_refcnt == 1
(-2) <= ix && ix <= usable
hash != -1
entry->me_hash == hash
entry->me_hash != -1
entry->me_value != ((void *)0)
entry->me_value == ((void *)0)
mp->ma_values[i] != ((void *)0)
cannot convert dictionary update sequence element #%zd to a sequence
dictionary update sequence element #%zd has length %zd; 2 is required
dict_keyiterator
dict_valueiterator
dict_itemiterator
dict_reversekeyiterator
dict_reverseitemiterator
dict_reversevalueiterator
%s() requires a dict argument, not '%s'
intersection
dict_keys
dict_items
dict_values
This object has no __dict__
dict mutated during update
{...}
__missing__
__contains__
setdefault
popitem
update
fromkeys
popitem(): dictionary is empty
dictionary changed size during iteration
dictionary keys changed during iteration
difference_update
symmetric_difference_update
isdisjoint
Not enough memory to allocate new values array
collections.OrderedDict
odict_iterator
odict_keys
odict_items
odict_values
%s()
need more than 0 values to unpack
need more than 1 value to unpack
too many values to unpack (expected 2)
move_to_end
O|O:pop
last
dictionary is empty
update() takes at most 1 positional argument (%zd given)
expected at most 1 arguments, got %zd
OrderedDict mutated during iteration
OrderedDict changed size during iteration
managedbuffer
PyMemoryView_FromBuffer(): info->buf must not be NULL
operation forbidden on released memoryview object
memoryview: a bytes-like object is required, not '%.200s'
underlying buffer is not writable
writable contiguous buffer requested for a non-contiguous object.
PyBuffer_ToContiguous: len != view->len
memoryview
memoryview: number of dimensions must not exceed 64
memoryview assignment: lvalue and rvalue have different structures
memoryview has %zd exported buffer%s
_memory_release(): negative export count
<released memory at %p>
<memory at %p>
invalid indexing of 0-dim memory
multi-dimensional sub-views are not implemented
memoryview: unsupported format %s
index out of bounds on dimension %d
memoryview: format %s not supported
multi-dimensional slicing is not implemented
memoryview: invalid slice key
sub-views are not implemented
cannot index %zd-dimension view with %zd-element tuple
cannot modify read-only memory
cannot delete memory
memoryview slice assignments are currently restricted to ndim = 1
memoryview: invalid type for format '%s'
memoryview: invalid value for format '%s'
cannot hash writable memoryview object
memoryview: hashing is restricted to formats 'B', 'b' or 'c'
memoryview: underlying buffer is not writable
memoryview: underlying buffer is not C-contiguous
memoryview: underlying buffer is not Fortran contiguous
memoryview: underlying buffer is not contiguous
memoryview: underlying buffer requires suboffsets
memoryview: cannot cast to unsigned bytes if the format flag is present
Struct
unpack_from
memoryview: internal error in richcompare
release
tobytes
tolist
cast
toreadonly
__enter__
__exit__
order
order must be 'C', 'F' or 'A'
format
shape
memoryview: format argument must be a string
memoryview: casts are restricted to C-contiguous views
memoryview: cannot cast view with zeros in shape or strides
shape must be a list or a tuple
memoryview: cast must be 1D -> ND or ND -> 1D
memoryview: destination format must be a native single character format prefixed with an optional '@'
memoryview: cannot cast between two non-byte formats
memoryview: length is not a multiple of itemsize
memoryview: internal error
memoryview: product(shape) * itemsize != buffer size
memoryview.cast(): elements of shape must be integers
memoryview.cast(): elements of shape must be integers > 0
memoryview.cast(): product(shape) > SSIZE_MAX
nbytes
readonly
itemsize
ndim
strides
suboffsets
c_contiguous
f_contiguous
contiguous
O:memoryview
attempting to create PyCMethod with a METH_METHOD flag but no class
attempting to create PyCFunction with class but no METH_METHOD flag
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/methodobject.c
builtin_function_or_method
builtin_method
<built-in function %s>
<built-in method %s of %s object at %p>
N(Os)
<method>.__class__.__qualname__ is not a unicode object
%S.%s
%.200s() takes no keyword arguments
moduledef
Python import machinery not initialized
module %s: PyModule_Create is incompatible with m_slots
module %s: m_size may not be negative for multi-phase initialization
module %s has multiple create slots
module %s uses unknown slot ID %i
creation of module %s failed without setting an exception
creation of module %s raised unreported exception
module %s is not a module object, but requests module state
module %s specifies execution slots, but did not create a ModuleType instance
execution of module %s failed without setting an exception
execution of module %s raised unreported exception
module %s initialized with unknown slot %i
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/moduleobject.c
nameless module
__file__
module filename missing
#   clear[1] %s
#   clear[2] %s
_initializing
module
__package__
__loader__
__spec__
Python C API version mismatch for module %.100s: This Python has API version %d, module %.100s has version %d.
module functions cannot set METH_CLASS or METH_STATIC
# destroy %U
_module_repr
__getattr__
partially initialized module '%U' has no attribute '%U' (most likely due to a circular import)
module '%U' has no attribute '%U'
module has no attribute '%U'
Exception ignored in m_clear of module%s%V
__dir__() -> list
specialized dir() implementation
%.200s.__dict__ is not a dictionary
argument 'name'
types.SimpleNamespace
namespace
%s(...)
%U=%R
%s(%S)
no positional arguments expected
!_PyObject_IsFreed(op)
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/object.c
_PyObject_CheckConsistency
(((PyObject*)(op))->ob_refcnt) >= 1
PyObject_CallFinalizerFromDealloc called on object with a non-zero refcount
PyObject_CallFinalizerFromDealloc
<nil>
<refcnt %ld at %p>
str() or repr() returned '%.100s'
<object at %p is freed>
object address  : %p
object refcount : %ld
object type     : %p
object type name: %s
object repr     : 
<NULL>
<%s object at %p>
 while getting the repr of an object
__repr__ returned non-string (type %.200s)
 while getting the str of an object
__str__ returned non-string (type %.200s)
%S.%S()
%S()
 in comparison
unhashable type: '%.200s'
attribute name must be string, not '%.200s'
'%.50s' object has no attribute '%U'
'%.100s' object has no attributes (%s .%U)
assign to
'%.100s' object has only read-only attributes (%s .%U)
'%.100s' object has no attribute '%U'
'%.50s' object attribute '%U' is read-only
cannot delete __dict__
__dict__ must be set to a dictionary, not a '%.200s'
NoneType
NotImplementedType
_PyTypes_Init
Can't initialize object type
Can't initialize type type
Can't initialize weakref type
Can't initialize callable weakref proxy type
Can't initialize weakref proxy type
Can't initialize int type
Can't initialize bool type
Can't initialize bytearray type
Can't initialize str type
Can't initialize list type
Can't initialize None type
Can't initialize NotImplemented type
Can't initialize traceback type
Can't initialize super type
Can't initialize range type
Can't initialize dict type
Can't initialize dict keys type
Can't initialize dict values type
Can't initialize dict items type
Can't initialize reversed dict keys type
Can't initialize reversed dict values type
Can't initialize reversed dict items type
Can't initialize OrderedDict type
Can't initialize odict_keys type
Can't initialize odict_items type
Can't initialize odict_values type
Can't initialize odict_keyiterator type
Can't initialize set type
Can't initialize slice type
Can't initialize static method type
Can't initialize complex type
Can't initialize float type
Can't initialize frozenset type
Can't initialize property type
Can't initialize managed buffer type
Can't initialize memoryview type
Can't initialize tuple type
Can't initialize enumerate type
Can't initialize reversed type
Can't initialize StdPrinter type
Can't initialize code type
Can't initialize frame type
Can't initialize builtin function type
Can't initialize builtin method type
Can't initialize method type
Can't initialize function type
Can't initialize dict proxy type
Can't initialize generator type
Can't initialize get-set descriptor type
Can't initialize wrapper type
Can't initialize method wrapper type
Can't initialize ellipsis type
Can't initialize member descriptor type
Can't initialize namespace type
Can't initialize capsule type
Can't initialize long range iterator type
Can't initialize cell type
Can't initialize instance method type
Can't initialize class method descr type
Can't initialize method descr type
Can't initialize call iter type
Can't initialize sequence iterator type
Can't initialize pickle.PickleBuffer type
Can't initialize coroutine type
Can't initialize coroutine wrapper type
Can't initialize interpreter ID type
%s:%d: 
%s: 
Assertion "%s" failed
Assertion failed
: %s
_PyObject_AssertFailed
'%s' not supported between instances of '%.100s' and '%.100s'
dir(): expected keys() of locals to be a list, not '%.200s'
object does not provide __dir__
none_dealloc
deallocating None
NoneType takes no arguments
notimplemented_dealloc
deallocating NotImplemented
NotImplemented
NotImplemented should not be used in a boolean context
NotImplementedType takes no arguments
Py_Repr
debug
pymalloc
pymalloc_debug
malloc
malloc_debug
%d %ss * %zd bytes each
%48s 
Small block threshold = %d, in %u size classes.
class   size   num pools   blocks in use  avail blocks
-----   ----   ---------   -------------  ------------
%5u %6u %11zu %15zu %13zu
# arenas allocated total
# arenas reclaimed
# arenas highwater mark
# arenas allocated current
%zu arenas * %d bytes/arena
# bytes in allocated blocks
# bytes in available blocks
%u unused pools * %d bytes
# bytes lost to pool headers
# bytes lost to quantization
# bytes lost to arena alignment
Total
PYTHONMALLOCSTATS
_PyMem_DebugRawFree
bad ID: Allocated using API '%c', verified using API '%c'
bad leading pad byte
bad trailing pad byte
Debug memory block at address p=%p:
 API '%c'
    %zu bytes originally requested
    The %d pad bytes at p-%d are 
FORBIDDENBYTE, as expected.
not all FORBIDDENBYTE (0x%02x):
        at p-%d: 0x%02x
 *** OUCH
    Because memory is corrupted at the start, the count of bytes requested
       may be bogus, and checking the trailing pad bytes may segfault.
    The %d pad bytes at tail=%p are 
        at tail+%d: 0x%02x
    Data at p:
 %02x
 ...
_PyMem_DebugRawRealloc
_PyMem_DebugMalloc
Python memory allocator called without holding the GIL
_PyMem_DebugCalloc
_PyMem_DebugFree
_PyMem_DebugRealloc
expected PickleBuffer, %.200s found
operation forbidden on released PickleBuffer object
pickle.PickleBuffer
Wrapper for potentially out-of-band buffers
cannot extract raw buffer from non-contiguous buffer
O:PickleBuffer
range
range_iterator
longrange_iterator
range(%R, %R)
range(%R, %R, %R)
range object index out of range
range indices must be integers or slices, not %.200s
range too large to represent as a range_iterator
(O(OOO))
%R is not in range
stop
step
range expected at least 1 argument, got 0
range expected at most 3 arguments, got %zd
range() arg 3 must not be zero
N(N)i
N(N)O
set_iterator
frozenset
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/setobject.c
Set changed size during iteration
%s({%U})
{%U}
discard
difference
intersection_update
issubset
issuperset
symmetric_difference
union
pop from an empty set
<dummy key> type
dummy_dealloc
deallocating <dummy key>
<dummy key>
ellipsis
slice step cannot be zero
slice
EllipsisType takes no arguments
slice indices must be integers or None or have an __index__ method
slice(%R, %R, %R)
indices
length should not be negative
(NNN)
O(OOO)
unnamed field
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/structseq.c
In structseq_repr(), member %zd name is NULL for type %.500s
(O(OO))
sequence
structseq
constructor requires a sequence
%.500s() takes a dict as second arg, if any
%.500s() takes an at least %zd-sequence (%zd-sequence given)
%.500s() takes an at most %zd-sequence (%zd-sequence given)
%.500s() takes a %zd-sequence (%zd-sequence given)
free %d-sized PyTupleObject
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/tupleobject.c
tuple assignment index out of range
tuple_iterator
(...)
can only concatenate tuple (not "%.200s") to tuple
tuple indices must be integers or slices, not %.200s
tuple.index(x): x not in tuple
!_PyObject_IsFreed((PyObject *)type)
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/typeobject.c
_PyType_CheckConsistency
(((PyObject*)(type))->ob_refcnt) >= 1
_PyType_Check(((PyObject*)(type)))
!(type->tp_flags & (1UL << 13))
type->tp_dict != ((void *)0)
metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases
__weaklistoffset__
__dictoffset__
__vectorcalloffset__
Type spec does not define the name field.
Py_tp_bases is not a tuple
bases is not a tuple
type '%.100s' is not an acceptable base type
invalid slot offset
builtin type %.200s has no __module__ attribute
PyType_GetModule: Type '%s' is not a heap type
PyType_GetModule: Type '%s' has no associated module
type
Type does not define the tp_name field.
type '%.100s' is not dynamically allocated but its base type '%.100s' is dynamically allocated
type '%.100s' participates in gc and is a base type but has inappropriate tp_free slot
_PyTypes_InitSlotDefs
memory allocation failed
super
bases must be types
multiple bases have instance lay-out conflict
<class '%U.%U'>
<class '%s'>
type() takes 1 or 3 arguments
cannot create '%.100s' instances
type object '%.50s' has no attribute '%U'
can't set attributes of built-in/extension type '%s'
Out of memory interning an attribute name
__new__() called with non-type 'self'
%s.__new__(): not enough arguments
%s.__new__(X): X is not a type object (%s)
%s.__new__(%s): %s is not a subtype of %s
%s.__new__(%s) is not safe, use %s.__new__()
__new__
type_traverse() called on non-heap type '%.100s'
type_traverse
__subclasses__
__prepare__
__prepare__() -> dict
used to create the namespace for the class statement
Cannot extend an incomplete type '%.100s'
duplicate base class %U
duplicate base class
Cannot create a consistent method resolution
order (MRO) for bases
__basicsize__
__itemsize__
__flags__
__weakrefoffset__
__base__
__mro__
__abstractmethods__
can only assign string to %s.__name__, not '%s'
type name must not contain null characters
can't set %s.%s
can't delete %s.%s
can only assign string to %s.__qualname__, not '%s'
can only assign tuple to %s.__bases__, not %s
can only assign non-empty tuple to %s.__bases__, not ()
%s.__bases__ must be tuple of classes, not '%s'
a __bases__ item causes an inheritance cycle
%s assignment: '%s' deallocator differs from '%s'
%s assignment: '%s' object layout differs from '%s'
type.__init__() takes no keyword arguments
type.__init__() takes 1 or 3 arguments
__slots__
__classcell__
UO!O!:type.__new__
type() doesn't support MRO entry resolution; use types.new_class()
nonempty __slots__ not supported for subtype of '%s'
__dict__ slot disallowed: we already got one
__weakref__
__weakref__ slot disallowed: either we already got one, or __itemsize__ != 0
%R in __slots__ conflicts with class variable
type __qualname__ must be a str, not %s
__classcell__ must be a nonlocal cell, not %.200R
__slots__ items must be strings, not '%.200s'
__slots__ must be identifiers
__init_subclass__
dictionary for instance variables (if defined)
list of weak references to the object (if defined)
this __dict__ descriptor does not support '%.200s' objects
This object has no __weakref__
Error calling __set_name__ on '%.100s' instance %R in '%.100s'
__set_name__
<%U.%U object at %p>
__subclasshook__
_reduce_ex
cannot pickle '%.200s' object
__newobj__
__newobj_ex__
__getnewargs_ex__
__getnewargs_ex__ should return a tuple, not '%.200s'
__getnewargs_ex__ should return a tuple of length 2, not %zd
first item of the tuple returned by __getnewargs_ex__ must be a tuple, not '%.200s'
second item of the tuple returned by __getnewargs_ex__ must be a dict, not '%.200s'
__getnewargs__ should return a tuple, not '%.200s'
__getstate__
__slotsname__ changed size during iteration
__slotnames__
_slotnames
%.200s.__slotnames__ should be a list or None, not %.200s
copyreg._slotnames didn't return a list or None
copyreg
unsupported format string passed to %.200s.__format__
the object's class
can't delete __class__ attribute
__class__ must be set to a class, not '%s' object
__class__ assignment only supported for heap types or ModuleType subclasses
object.__init__() takes exactly one argument (the instance to initialize)
%.200s.__init__() takes exactly one argument (the instance to initialize)
object.__new__() takes exactly one argument (the type to instantiate)
%.200s() takes no arguments
Can't instantiate abstract class %s with abstract method%s %U
method cannot be both class and static
mro() returned a non-class ('%.500s')
mro() returned base with unsuitable layout ('%.500s')
__eq__
__hash__
__getattribute__
__setattr__
__delattr__
__repr__
__repr__($self, /)
Return repr(self).
__hash__($self, /)
Return hash(self).
__call__
__call__($self, /, *args, **kwargs)
Call self as a function.
__str__
__str__($self, /)
Return str(self).
__getattribute__($self, name, /)
Return getattr(self, name).
__setattr__($self, name, value, /)
Implement setattr(self, name, value).
__delattr__($self, name, /)
Implement delattr(self, name).
__lt__
__lt__($self, value, /)
Return self<value.
__le__
__le__($self, value, /)
Return self<=value.
__eq__($self, value, /)
Return self==value.
__ne__
__ne__($self, value, /)
Return self!=value.
__gt__
__gt__($self, value, /)
Return self>value.
__ge__
__ge__($self, value, /)
Return self>=value.
__iter__
__iter__($self, /)
Implement iter(self).
__next__
__next__($self, /)
Implement next(self).
__get__
__get__($self, instance, owner, /)
Return an attribute of instance, which is of type owner.
__set__
__set__($self, instance, value, /)
Set an attribute of instance to value.
__delete__
__delete__($self, instance, /)
Delete an attribute of instance.
__init__
__init__($self, /, *args, **kwargs)
Initialize self.  See help(type(self)) for accurate signature.
__new__(type, /, *args, **kwargs)
Create and return new object.  See help(type) for accurate signature.
__del__
__await__
__await__($self, /)
Return an iterator to be used in await expression.
__aiter__
__aiter__($self, /)
Return an awaitable, that resolves in asynchronous iterator.
__anext__
__anext__($self, /)
Return a value or raise StopAsyncIteration.
__add__
__add__($self, value, /)
Return self+value.
__radd__
__radd__($self, value, /)
Return value+self.
__sub__
__sub__($self, value, /)
Return self-value.
__rsub__
__rsub__($self, value, /)
Return value-self.
__mul__
__mul__($self, value, /)
Return self*value.
__rmul__
__rmul__($self, value, /)
Return value*self.
__mod__
__mod__($self, value, /)
Return self%value.
__rmod__
__rmod__($self, value, /)
Return value%self.
__divmod__
__divmod__($self, value, /)
Return divmod(self, value).
__rdivmod__
__rdivmod__($self, value, /)
Return divmod(value, self).
__pow__
__pow__($self, value, mod=None, /)
Return pow(self, value, mod).
__rpow__
__rpow__($self, value, mod=None, /)
Return pow(value, self, mod).
__neg__
__neg__($self, /)
-self
__pos__
__pos__($self, /)
+self
__abs__
__abs__($self, /)
abs(self)
__bool__
__bool__($self, /)
self != 0
__invert__
__invert__($self, /)
~self
__lshift__
__lshift__($self, value, /)
Return self<<value.
__rlshift__
__rlshift__($self, value, /)
Return value<<self.
__rshift__
__rshift__($self, value, /)
Return self>>value.
__rrshift__
__rrshift__($self, value, /)
Return value>>self.
__and__
__and__($self, value, /)
Return self&value.
__rand__
__rand__($self, value, /)
Return value&self.
__xor__
__xor__($self, value, /)
Return self^value.
__rxor__
__rxor__($self, value, /)
Return value^self.
__or__
__or__($self, value, /)
Return self|value.
__ror__
__ror__($self, value, /)
Return value|self.
__int__
__int__($self, /)
int(self)
__float__
__float__($self, /)
float(self)
__iadd__
__iadd__($self, value, /)
Return self+=value.
__isub__
__isub__($self, value, /)
Return self-=value.
__imul__
__imul__($self, value, /)
Return self*=value.
__imod__
__imod__($self, value, /)
Return self%=value.
__ipow__
__ipow__($self, value, /)
Return self**=value.
__ilshift__
__ilshift__($self, value, /)
Return self<<=value.
__irshift__
__irshift__($self, value, /)
Return self>>=value.
__iand__
__iand__($self, value, /)
Return self&=value.
__ixor__
__ixor__($self, value, /)
Return self^=value.
__ior__
__ior__($self, value, /)
Return self|=value.
__floordiv__
__floordiv__($self, value, /)
Return self//value.
__rfloordiv__
__rfloordiv__($self, value, /)
Return value//self.
__truediv__
__truediv__($self, value, /)
Return self/value.
__rtruediv__
__rtruediv__($self, value, /)
Return value/self.
__ifloordiv__
__ifloordiv__($self, value, /)
Return self//=value.
__itruediv__
__itruediv__($self, value, /)
Return self/=value.
__index__
__index__($self, /)
Return self converted to an integer, if self is suitable for use as an index into a list.
__matmul__
__matmul__($self, value, /)
Return self@value.
__rmatmul__
__rmatmul__($self, value, /)
Return value@self.
__imatmul__
__imatmul__($self, value, /)
Return self@=value.
__len__
__len__($self, /)
Return len(self).
__getitem__($self, key, /)
Return self[key].
__setitem__
__setitem__($self, key, value, /)
Set self[key] to value.
__delitem__
__delitem__($self, key, /)
Delete self[key].
__contains__($self, key, /)
Return key in self.
__iadd__($self, value, /)
Implement self+=value.
__imul__($self, value, /)
Implement self*=value.
PyArg_UnpackTuple() argument list is not a tuple
expected %d argument%s, got %zd
__hash__ method should return an integer
can't apply this %s to %s object
__get__(None, None) is invalid
__init__() should return None, not '%.200s'
object %.50s does not have __await__ method
object %.50s does not have __aiter__ method
object %.50s does not have __anext__ method
__bool__ should return bool, returned %s
__len__() should return >= 0
'%.200s' object is not a container
__new__($type, *args, **kwargs)
Create and return a new object.  See help(type) for accurate signature.
<super: <class '%s'>, <%s object>>
<super: <class '%s'>, NULL>
__thisclass__
the class invoking super()
the instance invoking super(); may be None
__self_class__
the type of the instance invoking super(); may be None
super(type, obj): obj must be an instance or subtype of type
|O!O:super
super(): no current frame
super(): no arguments
super(): arg[0] deleted
super(): bad __class__ cell
super(): empty __class__ cell
super(): __class__ is not a type (%s)
super(): __class__ cell not found
surrogateescape
surrogatepass
xmlcharrefreplace
PyType_HasFeature((((PyObject*)(op))->ob_type), (1UL << 28))
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/unicodeobject.c
_PyUnicode_CheckConsistency
kind == PyUnicode_1BYTE_KIND
ascii->state.ready == 1
kind == PyUnicode_1BYTE_KIND || kind == PyUnicode_2BYTE_KIND || kind == PyUnicode_4BYTE_KIND
ascii->state.ascii == 0
compact->utf8 != data
ascii->length == 0
ascii->hash == -1
ascii->state.ready == 0
ascii->state.interned == 0
ascii->wstr != ((void *)0)
data == ((void *)0)
compact->utf8 == ((void *)0)
data != ((void *)0)
compact->utf8 == data
compact->utf8_length == ascii->length
ascii->wstr == data
compact->wstr_length == ascii->length
ascii->wstr != data
compact->utf8_length == 0
compact->wstr_length == 0
maxchar >= 128
maxchar <= 255
maxchar < 128
maxchar >= 0x100
maxchar <= 0xFFFF
maxchar >= 0x10000
maxchar <= 0x10ffff
((Py_UCS4) ((kind) == PyUnicode_1BYTE_KIND ? ((const Py_UCS1 *)(data))[(ascii->length)] : ((kind) == PyUnicode_2BYTE_KIND ? ((const Py_UCS2 *)(data))[(ascii->length)] : ((const Py_UCS4 *)(data))[(ascii->length)] ) )) == 0
invalid maximum character passed to PyUnicode_New
Negative size passed to PyUnicode_New
string index out of range
how_many cannot be negative
Cannot write %zi characters at %zi in a string of %zi characters
Cannot copy %s characters into a string of %s characters
Negative size passed to PyUnicode_FromStringAndSize
input too long
size must be positive
invalid kind
PyUnicode_FromFormatV() expects an ASCII-encoded format string, got a non-ASCII byte: 0x%02x
chr() arg not in range(0x110000)
Can't convert '%.100s' object to str implicitly
decoding str is not supported
decoding to str: need a bytes-like object, %.80s found
ascii
us_ascii
latin1
latin_1
iso_8859_1
iso8859_1
'%.400s' decoder returned '%.400s' instead of 'str'; use codecs.decode() to decode to arbitrary types
PyUnicode_AsDecodedObject() is deprecated; use PyCodec_Decode() to decode from str
PyUnicode_AsDecodedUnicode() is deprecated; use PyCodec_Decode() to decode from str to str
PyUnicode_AsEncodedObject() is deprecated; use PyUnicode_AsEncodedString() to encode from str to bytes or PyCodec_Encode() for generic encoding
encoder %s returned bytearray instead of bytes; use codecs.encode() to encode to arbitrary types
'%.400s' encoder returned '%.400s' instead of 'bytes'; use codecs.encode() to encode to arbitrary types
PyUnicode_AsEncodedUnicode() is deprecated; use PyCodec_Encode() to encode from str to str
'%.400s' encoder returned '%.400s' instead of 'str'; use codecs.encode() to encode to arbitrary types
path should be string, bytes, or os.PathLike, not %.200s
character out of range
partial character in shift sequence
non-zero padding bits in shift sequence
ill-formed sequence
unexpected special character
utf7
unterminated shift sequence
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
unexpected end of data
invalid start byte
invalid continuation byte
encoding error
utf-32-le
utf-32-be
code point in surrogate code point range(0xd800, 0xe000)
truncated data
code point not in range(0x110000)
utf-32
surrogates not allowed
utf-16-le
utf-16-be
illegal encoding
illegal UTF-16 surrogate
utf-16
\ at end of string
truncated \xXX escape
truncated \uXXXX escape
truncated \UXXXXXXXX escape
illegal Unicode character
unicodedata.ucnhash_CAPI
\N escapes not supported (can't load unicodedata module)
malformed \N character escape
unknown Unicode character name
unicodeescape
\Uxxxxxxxx out of range
rawunicodeescape
ordinal not in range(128)
decimal
invalid decimal Unicode string
separator: expected str instance, %.80s found
sequence item %zd: expected str instance, %.80s found
join() result is too long for a Python string
fill character is bigger than the string maximum character
Can't compare %.100s and %.100s
'in <string>' requires string as left operand, not %.100s
can only concatenate str (not "%.200s") to str
strings are too large to concat
precision too large
string too large in _PyUnicode_FormatLong
not all arguments converted during string formatting
_PyUnicode_Init
Can't create empty string
Can't initialize unicode type
Can't initialize encoding map type
Can't initialize field name iterator type
Can't initialize formatter iter type
str_iterator
Cannot modify a string currently used
wstr
legacy ascii
legacy latin1
legacy UCS2
legacy UCS4
<legacy invalid kind>
UCS2
UCS4
<invalid compact kind>
character U+%x is not in range [U+0000; U+%x]
Negative size passed to _PyUnicode_New
string is longer than the buffer
precision too big
character argument not in range(0x110000)
%llu
%lli
sOnns
locale
unsupported error handler
Un;decoding error handler must return (str, int) tuple
position %zd from error handler out of bounds
encoded result is too long for a Python string
&#%d;
On;encoding error handler must return (str/bytes, int) tuple
ordinal not in range(256)
charmap
character maps to <undefined>
character mapping must be in range(0x%x)
character mapping must return integer, None or str
EncodingMap
size
Return the size (in bytes) of this object
character mapping must be in range(256)
character mapping must return integer, bytes or None, not %.400s
Un;translating error handler must return (str, int) tuple
must be str, not %.100s
replace string is too long
%%%c format: an integer is required, not %.200s
%%%c format: a number is required, not %.200s
%c arg not in range(0x110000)
%c requires int or char
deletion of interned string failed
Immortal interned string died
unicode_dealloc
string is too long to generate repr
repeated string is too long
string indices must be integers
encode
casefold
isdecimal
isnumeric
isidentifier
isprintable
format_map
must be str or None, not %.100s
string is too long
The fill character must be a unicode character, not %.100s
The fill character must be exactly one character long
padded string is too long
new string is too long
substring not found
%s arg must be None or str
tuple for startswith must only contain str, not %.100s
startswith first arg must be str or a tuple of str, not %.100s
tuple for endswith must only contain str, not %.100s
endswith first arg must be str or a tuple of str, not %.100s
Max string recursion exceeded
Single '}' encountered in format string
Single '{' encountered in format string
unexpected '{' in field name
end of string while looking for conversion specifier
expected ':' after conversion specifier
unmatched '{' in format spec
expected '}' before end of string
Format string contains positional fields
Replacement index %zd out of range for positional args tuple
Too many decimal digits in format string
cannot switch from manual field specification to automatic field numbering
cannot switch from automatic field numbering to manual field specification
Only '.' or '[' may follow ']' in format field specifier
Empty attribute in format string
Missing ']' in format string
Unknown conversion specifier %c
Unknown conversion specifier \x%x
argument 3
first maketrans argument must be a string if there is a second argument
the first two maketrans arguments must have equal length
if you give only one argument to maketrans it must be a dict
string keys in translate table must be of length 1
keys in translate table must be strings or integers
|Oss:str
fieldnameiterator
formatteriterator
init_fs_encoding
failed to get the Python codec of the filesystem encoding
cannot initialize filesystem codec
stdio_encoding
cannot decode %s
filesystem_encoding
filesystem_errors
init_stdio_encoding
failed to get the Python codec name of the stdio encoding
_string
string helper module
formatter_field_name_split
split the argument as a field name
formatter_parser
parse the argument as a format string
expected str, got %s
weakref
weakproxy
weakcallableproxy
cannot create weak reference to '%s' object
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/weakrefobject.c
<weakref at %p; dead>
<weakref at %p; to '%s' at %p>
<weakref at %p; to '%s' at %p (%U)>
weak object has gone away
:__call__
__callback__
<weakproxy at %p to %s at %p>
weakly-referenced object no longer exists
_warn_unawaited_coroutine
coroutine '%S' was never awaited
_PyWarnings_InitState
can't initialize warnings
filters
_onceregistry
_defaultaction
__warningregistry__
importlib
_bootstrap
'registry' must be a dict or None
error
always
once
Unrecognized action (%R) in warnings.filters:
<unknown>
version
_warnings.filters must be a list
_warnings.filters item %zd isn't a 5-tuple
action must be a string, not '%.200s'
match
defaultaction
_warnings.defaultaction must be a string, not '%.200s'
onceregistry
_warnings.onceregistry must be a dict, not '%.200s'
_showwarnmsg
WarningMessage
warnings._showwarnmsg() must be set to a callable
unable to get warnings.WarningMessage
:%d: 
lost sys.stderr
stderr
warnings
__main__
_warnings
warn
warn_explicit
_filters_mutated
message
category
stacklevel
category must be a Warning subclass, not '%s'
registry
module_globals
OOUi|OOOO:warn_explicit
module_globals must be a dict, not '%.200s'
get_source
warnings_get_state: could not identify current interpreter
field 'body' is required for Expression
field 'returns' is required for FunctionType
field 'name' is required for FunctionDef
field 'args' is required for FunctionDef
field 'name' is required for AsyncFunctionDef
field 'args' is required for AsyncFunctionDef
field 'name' is required for ClassDef
field 'value' is required for Assign
field 'target' is required for AugAssign
field 'op' is required for AugAssign
field 'value' is required for AugAssign
field 'target' is required for AnnAssign
field 'annotation' is required for AnnAssign
field 'target' is required for For
field 'iter' is required for For
field 'target' is required for AsyncFor
field 'iter' is required for AsyncFor
field 'test' is required for While
field 'test' is required for If
field 'test' is required for Assert
field 'value' is required for Expr
field 'op' is required for BoolOp
field 'target' is required for NamedExpr
field 'value' is required for NamedExpr
field 'left' is required for BinOp
field 'op' is required for BinOp
field 'right' is required for BinOp
field 'op' is required for UnaryOp
field 'operand' is required for UnaryOp
field 'args' is required for Lambda
field 'body' is required for Lambda
field 'test' is required for IfExp
field 'body' is required for IfExp
field 'orelse' is required for IfExp
field 'elt' is required for ListComp
field 'elt' is required for SetComp
field 'key' is required for DictComp
field 'value' is required for DictComp
field 'elt' is required for GeneratorExp
field 'value' is required for Await
field 'value' is required for YieldFrom
field 'left' is required for Compare
field 'func' is required for Call
field 'value' is required for FormattedValue
field 'value' is required for Constant
field 'value' is required for Attribute
field 'attr' is required for Attribute
field 'ctx' is required for Attribute
field 'value' is required for Subscript
field 'slice' is required for Subscript
field 'ctx' is required for Subscript
field 'value' is required for Starred
field 'ctx' is required for Starred
field 'id' is required for Name
field 'ctx' is required for Name
field 'ctx' is required for List
field 'ctx' is required for Tuple
field 'target' is required for comprehension
field 'iter' is required for comprehension
field 'arg' is required for arg
field 'value' is required for keyword
field 'name' is required for alias
field 'context_expr' is required for withitem
field 'tag' is required for TypeIgnore
Module
Expression
Interactive
expected %s node, got %.400s
_ast
PyCF_ALLOW_TOP_LEVEL_AWAIT
PyCF_ONLY_AST
PyCF_TYPE_COMMENTS
FunctionType
stmt
FunctionDef
AsyncFunctionDef
ClassDef
Return
Delete
Assign
AugAssign
AnnAssign
AsyncFor
While
With
AsyncWith
Raise
Assert
Import
ImportFrom
Global
Nonlocal
Expr
Pass
Break
Continue
expr
BoolOp
NamedExpr
BinOp
UnaryOp
Lambda
IfExp
Dict
ListComp
SetComp
DictComp
GeneratorExp
Await
Yield
YieldFrom
Compare
Call
FormattedValue
JoinedStr
Constant
Attribute
Subscript
Starred
Name
List
Tuple
Slice
expr_context
Load
Store
boolop
Mult
MatMult
LShift
RShift
BitOr
BitXor
BitAnd
FloorDiv
unaryop
Invert
UAdd
USub
cmpop
NotEq
IsNot
NotIn
comprehension
excepthandler
ExceptHandler
arguments
keyword
alias
withitem
type_ignore
TypeIgnore
mod = Module(stmt* body, type_ignore* type_ignores)
    | Interactive(stmt* body)
    | Expression(expr body)
    | FunctionType(expr* argtypes, expr returns)
Module(stmt* body, type_ignore* type_ignores)
Interactive(stmt* body)
Expression(expr body)
FunctionType(expr* argtypes, expr returns)
stmt = FunctionDef(identifier name, arguments args, stmt* body, expr* decorator_list, expr? returns, string? type_comment)
     | AsyncFunctionDef(identifier name, arguments args, stmt* body, expr* decorator_list, expr? returns, string? type_comment)
     | ClassDef(identifier name, expr* bases, keyword* keywords, stmt* body, expr* decorator_list)
     | Return(expr? value)
     | Delete(expr* targets)
     | Assign(expr* targets, expr value, string? type_comment)
     | AugAssign(expr target, operator op, expr value)
     | AnnAssign(expr target, expr annotation, expr? value, int simple)
     | For(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)
     | AsyncFor(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)
     | While(expr test, stmt* body, stmt* orelse)
     | If(expr test, stmt* body, stmt* orelse)
     | With(withitem* items, stmt* body, string? type_comment)
     | AsyncWith(withitem* items, stmt* body, string? type_comment)
     | Raise(expr? exc, expr? cause)
     | Try(stmt* body, excepthandler* handlers, stmt* orelse, stmt* finalbody)
     | Assert(expr test, expr? msg)
     | Import(alias* names)
     | ImportFrom(identifier? module, alias* names, int? level)
     | Global(identifier* names)
     | Nonlocal(identifier* names)
     | Expr(expr value)
     | Pass
     | Break
     | Continue
FunctionDef(identifier name, arguments args, stmt* body, expr* decorator_list, expr? returns, string? type_comment)
AsyncFunctionDef(identifier name, arguments args, stmt* body, expr* decorator_list, expr? returns, string? type_comment)
ClassDef(identifier name, expr* bases, keyword* keywords, stmt* body, expr* decorator_list)
Return(expr? value)
Delete(expr* targets)
Assign(expr* targets, expr value, string? type_comment)
AugAssign(expr target, operator op, expr value)
AnnAssign(expr target, expr annotation, expr? value, int simple)
For(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)
AsyncFor(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)
While(expr test, stmt* body, stmt* orelse)
If(expr test, stmt* body, stmt* orelse)
With(withitem* items, stmt* body, string? type_comment)
AsyncWith(withitem* items, stmt* body, string? type_comment)
Raise(expr? exc, expr? cause)
Try(stmt* body, excepthandler* handlers, stmt* orelse, stmt* finalbody)
Assert(expr test, expr? msg)
Import(alias* names)
ImportFrom(identifier? module, alias* names, int? level)
Global(identifier* names)
Nonlocal(identifier* names)
Expr(expr value)
expr = BoolOp(boolop op, expr* values)
     | NamedExpr(expr target, expr value)
     | BinOp(expr left, operator op, expr right)
     | UnaryOp(unaryop op, expr operand)
     | Lambda(arguments args, expr body)
     | IfExp(expr test, expr body, expr orelse)
     | Dict(expr* keys, expr* values)
     | Set(expr* elts)
     | ListComp(expr elt, comprehension* generators)
     | SetComp(expr elt, comprehension* generators)
     | DictComp(expr key, expr value, comprehension* generators)
     | GeneratorExp(expr elt, comprehension* generators)
     | Await(expr value)
     | Yield(expr? value)
     | YieldFrom(expr value)
     | Compare(expr left, cmpop* ops, expr* comparators)
     | Call(expr func, expr* args, keyword* keywords)
     | FormattedValue(expr value, int? conversion, expr? format_spec)
     | JoinedStr(expr* values)
     | Constant(constant value, string? kind)
     | Attribute(expr value, identifier attr, expr_context ctx)
     | Subscript(expr value, expr slice, expr_context ctx)
     | Starred(expr value, expr_context ctx)
     | Name(identifier id, expr_context ctx)
     | List(expr* elts, expr_context ctx)
     | Tuple(expr* elts, expr_context ctx)
     | Slice(expr? lower, expr? upper, expr? step)
BoolOp(boolop op, expr* values)
NamedExpr(expr target, expr value)
BinOp(expr left, operator op, expr right)
UnaryOp(unaryop op, expr operand)
Lambda(arguments args, expr body)
IfExp(expr test, expr body, expr orelse)
Dict(expr* keys, expr* values)
Set(expr* elts)
ListComp(expr elt, comprehension* generators)
SetComp(expr elt, comprehension* generators)
DictComp(expr key, expr value, comprehension* generators)
GeneratorExp(expr elt, comprehension* generators)
Await(expr value)
Yield(expr? value)
YieldFrom(expr value)
Compare(expr left, cmpop* ops, expr* comparators)
Call(expr func, expr* args, keyword* keywords)
FormattedValue(expr value, int? conversion, expr? format_spec)
JoinedStr(expr* values)
Constant(constant value, string? kind)
Attribute(expr value, identifier attr, expr_context ctx)
Subscript(expr value, expr slice, expr_context ctx)
Starred(expr value, expr_context ctx)
Name(identifier id, expr_context ctx)
List(expr* elts, expr_context ctx)
Tuple(expr* elts, expr_context ctx)
Slice(expr? lower, expr? upper, expr? step)
expr_context = Load | Store | Del
boolop = And | Or
operator = Add | Sub | Mult | MatMult | Div | Mod | Pow | LShift | RShift | BitOr | BitXor | BitAnd | FloorDiv
unaryop = Invert | Not | UAdd | USub
cmpop = Eq | NotEq | Lt | LtE | Gt | GtE | Is | IsNot | In | NotIn
comprehension(expr target, expr iter, expr* ifs, int is_async)
excepthandler = ExceptHandler(expr? type, identifier? name, stmt* body)
ExceptHandler(expr? type, identifier? name, stmt* body)
arguments(arg* posonlyargs, arg* args, arg? vararg, arg* kwonlyargs, expr* kw_defaults, arg? kwarg, expr* defaults)
arg(identifier arg, expr? annotation, string? type_comment)
keyword(identifier? arg, expr value)
alias(identifier name, identifier? asname)
withitem(expr context_expr, expr? optional_vars)
type_ignore = TypeIgnore(int lineno, string tag)
TypeIgnore(int lineno, string tag)
_attributes
_fields
annotation
argtypes
asname
attr
bases
body
cause
col_offset
comparators
context_expr
conversion
decorator_list
defaults
elts
end_col_offset
end_lineno
finalbody
format_spec
func
generators
handlers
is_async
keywords
kind
kw_defaults
kwarg
kwonlyargs
left
level
names
operand
optional_vars
orelse
posonlyargs
returns
right
simple
target
targets
test
type_comment
type_ignores
vararg
ast.AST
O()N
%.400s constructor takes at most %zd positional argument%s
%.400s got multiple values for argument '%U'
s(O){OOOOOs}
required field "body" missing from Module
Module field "body" must be a list, not a %.200s
 while traversing 'Module' node
Module field "body" changed size during iteration
required field "type_ignores" missing from Module
Module field "type_ignores" must be a list, not a %.200s
Module field "type_ignores" changed size during iteration
required field "body" missing from Interactive
Interactive field "body" must be a list, not a %.200s
 while traversing 'Interactive' node
Interactive field "body" changed size during iteration
required field "body" missing from Expression
 while traversing 'Expression' node
required field "argtypes" missing from FunctionType
FunctionType field "argtypes" must be a list, not a %.200s
 while traversing 'FunctionType' node
FunctionType field "argtypes" changed size during iteration
required field "returns" missing from FunctionType
expected some sort of mod, but got %R
required field "lineno" missing from stmt
 while traversing 'stmt' node
required field "col_offset" missing from stmt
required field "name" missing from FunctionDef
 while traversing 'FunctionDef' node
required field "args" missing from FunctionDef
required field "body" missing from FunctionDef
FunctionDef field "body" must be a list, not a %.200s
FunctionDef field "body" changed size during iteration
required field "decorator_list" missing from FunctionDef
FunctionDef field "decorator_list" must be a list, not a %.200s
FunctionDef field "decorator_list" changed size during iteration
required field "name" missing from AsyncFunctionDef
 while traversing 'AsyncFunctionDef' node
required field "args" missing from AsyncFunctionDef
required field "body" missing from AsyncFunctionDef
AsyncFunctionDef field "body" must be a list, not a %.200s
AsyncFunctionDef field "body" changed size during iteration
required field "decorator_list" missing from AsyncFunctionDef
AsyncFunctionDef field "decorator_list" must be a list, not a %.200s
AsyncFunctionDef field "decorator_list" changed size during iteration
required field "name" missing from ClassDef
 while traversing 'ClassDef' node
required field "bases" missing from ClassDef
ClassDef field "bases" must be a list, not a %.200s
ClassDef field "bases" changed size during iteration
required field "keywords" missing from ClassDef
ClassDef field "keywords" must be a list, not a %.200s
ClassDef field "keywords" changed size during iteration
required field "body" missing from ClassDef
ClassDef field "body" must be a list, not a %.200s
ClassDef field "body" changed size during iteration
required field "decorator_list" missing from ClassDef
ClassDef field "decorator_list" must be a list, not a %.200s
ClassDef field "decorator_list" changed size during iteration
 while traversing 'Return' node
required field "targets" missing from Delete
Delete field "targets" must be a list, not a %.200s
 while traversing 'Delete' node
Delete field "targets" changed size during iteration
required field "targets" missing from Assign
Assign field "targets" must be a list, not a %.200s
 while traversing 'Assign' node
Assign field "targets" changed size during iteration
required field "value" missing from Assign
required field "target" missing from AugAssign
 while traversing 'AugAssign' node
required field "op" missing from AugAssign
required field "value" missing from AugAssign
required field "target" missing from AnnAssign
 while traversing 'AnnAssign' node
required field "annotation" missing from AnnAssign
required field "simple" missing from AnnAssign
required field "target" missing from For
 while traversing 'For' node
required field "iter" missing from For
required field "body" missing from For
For field "body" must be a list, not a %.200s
For field "body" changed size during iteration
required field "orelse" missing from For
For field "orelse" must be a list, not a %.200s
For field "orelse" changed size during iteration
required field "target" missing from AsyncFor
 while traversing 'AsyncFor' node
required field "iter" missing from AsyncFor
required field "body" missing from AsyncFor
AsyncFor field "body" must be a list, not a %.200s
AsyncFor field "body" changed size during iteration
required field "orelse" missing from AsyncFor
AsyncFor field "orelse" must be a list, not a %.200s
AsyncFor field "orelse" changed size during iteration
required field "test" missing from While
 while traversing 'While' node
required field "body" missing from While
While field "body" must be a list, not a %.200s
While field "body" changed size during iteration
required field "orelse" missing from While
While field "orelse" must be a list, not a %.200s
While field "orelse" changed size during iteration
required field "test" missing from If
 while traversing 'If' node
required field "body" missing from If
If field "body" must be a list, not a %.200s
If field "body" changed size during iteration
required field "orelse" missing from If
If field "orelse" must be a list, not a %.200s
If field "orelse" changed size during iteration
required field "items" missing from With
With field "items" must be a list, not a %.200s
 while traversing 'With' node
With field "items" changed size during iteration
required field "body" missing from With
With field "body" must be a list, not a %.200s
With field "body" changed size during iteration
required field "items" missing from AsyncWith
AsyncWith field "items" must be a list, not a %.200s
 while traversing 'AsyncWith' node
AsyncWith field "items" changed size during iteration
required field "body" missing from AsyncWith
AsyncWith field "body" must be a list, not a %.200s
AsyncWith field "body" changed size during iteration
 while traversing 'Raise' node
required field "body" missing from Try
Try field "body" must be a list, not a %.200s
 while traversing 'Try' node
Try field "body" changed size during iteration
required field "handlers" missing from Try
Try field "handlers" must be a list, not a %.200s
Try field "handlers" changed size during iteration
required field "orelse" missing from Try
Try field "orelse" must be a list, not a %.200s
Try field "orelse" changed size during iteration
required field "finalbody" missing from Try
Try field "finalbody" must be a list, not a %.200s
Try field "finalbody" changed size during iteration
required field "test" missing from Assert
 while traversing 'Assert' node
required field "names" missing from Import
Import field "names" must be a list, not a %.200s
 while traversing 'Import' node
Import field "names" changed size during iteration
 while traversing 'ImportFrom' node
required field "names" missing from ImportFrom
ImportFrom field "names" must be a list, not a %.200s
ImportFrom field "names" changed size during iteration
required field "names" missing from Global
Global field "names" must be a list, not a %.200s
 while traversing 'Global' node
Global field "names" changed size during iteration
required field "names" missing from Nonlocal
Nonlocal field "names" must be a list, not a %.200s
 while traversing 'Nonlocal' node
Nonlocal field "names" changed size during iteration
required field "value" missing from Expr
 while traversing 'Expr' node
expected some sort of stmt, but got %R
invalid integer value: %R
AST identifier must be of type str
required field "posonlyargs" missing from arguments
arguments field "posonlyargs" must be a list, not a %.200s
 while traversing 'arguments' node
arguments field "posonlyargs" changed size during iteration
required field "args" missing from arguments
arguments field "args" must be a list, not a %.200s
arguments field "args" changed size during iteration
required field "kwonlyargs" missing from arguments
arguments field "kwonlyargs" must be a list, not a %.200s
arguments field "kwonlyargs" changed size during iteration
required field "kw_defaults" missing from arguments
arguments field "kw_defaults" must be a list, not a %.200s
arguments field "kw_defaults" changed size during iteration
required field "defaults" missing from arguments
arguments field "defaults" must be a list, not a %.200s
arguments field "defaults" changed size during iteration
required field "arg" missing from arg
 while traversing 'arg' node
required field "lineno" missing from arg
required field "col_offset" missing from arg
AST string must be of type str
 while traversing 'keyword' node
required field "value" missing from keyword
required field "lineno" missing from keyword
required field "col_offset" missing from keyword
expected some sort of operator, but got %R
required field "context_expr" missing from withitem
 while traversing 'withitem' node
required field "lineno" missing from excepthandler
 while traversing 'excepthandler' node
required field "col_offset" missing from excepthandler
 while traversing 'ExceptHandler' node
required field "body" missing from ExceptHandler
ExceptHandler field "body" must be a list, not a %.200s
ExceptHandler field "body" changed size during iteration
expected some sort of excepthandler, but got %R
required field "name" missing from alias
 while traversing 'alias' node
required field "lineno" missing from TypeIgnore
 while traversing 'TypeIgnore' node
required field "tag" missing from TypeIgnore
expected some sort of type_ignore, but got %R
required field "lineno" missing from expr
 while traversing 'expr' node
required field "col_offset" missing from expr
required field "op" missing from BoolOp
 while traversing 'BoolOp' node
required field "values" missing from BoolOp
BoolOp field "values" must be a list, not a %.200s
BoolOp field "values" changed size during iteration
required field "target" missing from NamedExpr
 while traversing 'NamedExpr' node
required field "value" missing from NamedExpr
required field "left" missing from BinOp
 while traversing 'BinOp' node
required field "op" missing from BinOp
required field "right" missing from BinOp
required field "op" missing from UnaryOp
 while traversing 'UnaryOp' node
required field "operand" missing from UnaryOp
required field "args" missing from Lambda
 while traversing 'Lambda' node
required field "body" missing from Lambda
required field "test" missing from IfExp
 while traversing 'IfExp' node
required field "body" missing from IfExp
required field "orelse" missing from IfExp
required field "keys" missing from Dict
Dict field "keys" must be a list, not a %.200s
 while traversing 'Dict' node
Dict field "keys" changed size during iteration
required field "values" missing from Dict
Dict field "values" must be a list, not a %.200s
Dict field "values" changed size during iteration
required field "elts" missing from Set
Set field "elts" must be a list, not a %.200s
 while traversing 'Set' node
Set field "elts" changed size during iteration
required field "elt" missing from ListComp
 while traversing 'ListComp' node
required field "generators" missing from ListComp
ListComp field "generators" must be a list, not a %.200s
ListComp field "generators" changed size during iteration
required field "elt" missing from SetComp
 while traversing 'SetComp' node
required field "generators" missing from SetComp
SetComp field "generators" must be a list, not a %.200s
SetComp field "generators" changed size during iteration
required field "key" missing from DictComp
 while traversing 'DictComp' node
required field "value" missing from DictComp
required field "generators" missing from DictComp
DictComp field "generators" must be a list, not a %.200s
DictComp field "generators" changed size during iteration
required field "elt" missing from GeneratorExp
 while traversing 'GeneratorExp' node
required field "generators" missing from GeneratorExp
GeneratorExp field "generators" must be a list, not a %.200s
GeneratorExp field "generators" changed size during iteration
required field "value" missing from Await
 while traversing 'Await' node
 while traversing 'Yield' node
required field "value" missing from YieldFrom
 while traversing 'YieldFrom' node
required field "left" missing from Compare
 while traversing 'Compare' node
required field "ops" missing from Compare
Compare field "ops" must be a list, not a %.200s
Compare field "ops" changed size during iteration
required field "comparators" missing from Compare
Compare field "comparators" must be a list, not a %.200s
Compare field "comparators" changed size during iteration
required field "func" missing from Call
 while traversing 'Call' node
required field "args" missing from Call
Call field "args" must be a list, not a %.200s
Call field "args" changed size during iteration
required field "keywords" missing from Call
Call field "keywords" must be a list, not a %.200s
Call field "keywords" changed size during iteration
required field "value" missing from FormattedValue
 while traversing 'FormattedValue' node
required field "values" missing from JoinedStr
JoinedStr field "values" must be a list, not a %.200s
 while traversing 'JoinedStr' node
JoinedStr field "values" changed size during iteration
required field "value" missing from Constant
 while traversing 'Constant' node
required field "value" missing from Attribute
 while traversing 'Attribute' node
required field "attr" missing from Attribute
required field "ctx" missing from Attribute
required field "value" missing from Subscript
 while traversing 'Subscript' node
required field "slice" missing from Subscript
required field "ctx" missing from Subscript
required field "value" missing from Starred
 while traversing 'Starred' node
required field "ctx" missing from Starred
required field "id" missing from Name
 while traversing 'Name' node
required field "ctx" missing from Name
required field "elts" missing from List
List field "elts" must be a list, not a %.200s
 while traversing 'List' node
List field "elts" changed size during iteration
required field "ctx" missing from List
required field "elts" missing from Tuple
Tuple field "elts" must be a list, not a %.200s
 while traversing 'Tuple' node
Tuple field "elts" changed size during iteration
required field "ctx" missing from Tuple
 while traversing 'Slice' node
expected some sort of expr, but got %R
expected some sort of boolop, but got %R
expected some sort of unaryop, but got %R
required field "target" missing from comprehension
 while traversing 'comprehension' node
required field "iter" missing from comprehension
required field "ifs" missing from comprehension
comprehension field "ifs" must be a list, not a %.200s
comprehension field "ifs" changed size during iteration
required field "is_async" missing from comprehension
expected some sort of cmpop, but got %R
expected some sort of expr_context, but got %R
impossible module node
invalid node %d for PyAST_FromNode
None disallowed in statement list
AnnAssign with simple non-Name target
Raise with cause but no exception
Try has neither except handlers nor finalbody
Try has orelse but no except handlers
Negative ImportFrom level
unexpected statement
more positional defaults than args on arguments
length of kwonlyargs is not the same as kw_defaults on arguments
None disallowed in expression list
empty %s on %s
expression which can't be assigned to in %s context
expression must have %s context but has %s instead
BoolOp with less than 2 values
Dict doesn't have the same number of keys as values
Compare with no comparators
Compare has a different number of comparators and operands
unexpected expression
Name node can't be used with '%s' constant
comprehension with no generators
got an invalid type in Constant: %s
num_stmts
Non-statement found: %d %d
unhandled expr: %d
cannot %s %s
cannot assign to %U
__debug__
unexpected node in varargslist: %d @ %d
unexpected node
invalid comp_op: %s
invalid comp_op: %s %s
invalid comp_op: has %d children
The '@' operator is only supported in Python 3.5 and greater
unhandled factor: %d
Await expressions are only supported in Python 3.5 and greater
unhandled atom %d
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Python/ast.c
<fstring>
Async comprehensions are only supported in Python 3.6 and greater
logic error in count_comp_fors
unhandled small_stmt: TYPE=%d NCH=%d
unhandled compound_stmt: TYPE=%d NCH=%d
Variable annotation syntax is only supported in Python 3.6 and greater
only single target (not list) can be annotated
invalid augassign: %s
unexpected flow_stmt: %d
Unexpected node-type in from-import
unknown import statement: starts with command '%s'
unexpected import name: %d
improper number of parts to 'assert' statement: %d
unexpected token in 'if' statement: %s
wrong number of tokens for 'while' statement: %d
Async for loops are only supported in Python 3.5 and greater
malformed 'try' statement
wrong number of children for 'except' clause: %d
Async with statements are only supported in Python 3.5 and greater
Async functions are only supported in Python 3.5 and greater
invalid async stament: %s
1e%d
unknown expression kind
 and 
 or 
 << 
 >> 
 // 
 ** 
unknown binary operator
not 
unknown unary operator
lambda 
 if 
 else 
 async for 
 for 
 in 
(yield)
(yield 
(yield from 
await 
 == 
 != 
 <= 
 >= 
 is 
 is not 
 not in 
unexpected comparison kind
unknown expression kind inside f-string
unknown f-value conversion kind
 := 
filter
map() must have at least two arguments.
__build_class__
__import__
breakpoint
callable
delattr
divmod
eval
exec
hasattr
hash
input
isinstance
issubclass
locals
next
repr
round
setattr
sorted
vars
__build_class__: not enough arguments
__build_class__: func must be a function
__build_class__: name is not a string
%.200s.__prepare__() must return a mapping, not %.200s
<metaclass>
__orig_bases__
__class__ not set defining %.200R as %.200R. Was __classcell__ propagated to type.__new__?
__class__ set to %.200R defining %.200R as %.200R
__mro_entries__ must return a tuple
metaclass
fromlist
U|OOOi:__import__
breakpointhook
lost sys.breakpointhook
builtins.breakpoint
flags
dont_inherit
optimize
_feature_version
argument 'mode'
compile(): unrecognised flags
compile(): invalid optimize value
single
func_type
compile() mode 'func_type' requires flag PyCF_ONLY_AST
compile() mode must be 'exec', 'eval', 'single' or 'func_type'
compile() mode must be 'exec', 'eval' or 'single'
string, bytes or AST
locals must be a mapping
globals must be a real dict; try eval(expr, {}, mapping)
globals must be a dict
eval must be given globals and locals when called without a frame
code object passed to eval() may not contain free variables
string, bytes or code
globals and locals cannot be NULL
exec() globals must be a dict, not %.100s
locals must be a mapping or None, not %.100s
code object passed to exec() may not contain free variables
getattr(): attribute name must be string
hasattr(): attribute name must be string
builtins.id
input(): lost sys.stdin
input(): lost sys.stdout
input(): lost sys.stderr
builtins.input
input: input too long
builtins.input/result
stdin
stdout
iter(v, w): v must be callable
%s expected at least 1 argument, got 0
|$OO:min
|$OO:max
Cannot specify a default for %s() with multiple positional arguments
%s() arg is an empty sequence
'%.200s' object is not an iterator
ord() expected string of length 1, but %.200s found
ord() expected a character, but string of length %zd found
file
|OOOp:print
lost sys.stdout
sep must be None or a string, not %.200s
end must be None or a string, not %.200s
number
ndigits
type %.100s doesn't define __round__ method
sum() can't sum strings [use ''.join(seq) instead]
sum() can't sum bytes [use b''.join(seq) instead]
sum() can't sum bytearray [use b''.join(seq) instead]
vars() argument must have __dict__ attribute
the function must be called with the GIL held, but the GIL is released (the current Python thread state is NULL)
PyEval_AcquireLock
PyEval_AcquireThread
non-NULL old thread state
PyEval_ReleaseThread
wrong thread state
_PyEval_ReInitThreads
Can't initialize threads for pending calls
PyEval_SaveThread
PyEval_RestoreThread
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Python/ceval.c
_Py_CheckRecursiveCall
Cannot recover from stack overflow.
maximum recursion depth exceeded%s
_PyEval_EvalFrameDefault
local variable '%.200s' referenced before assignment
displayhook
lost sys.displayhook
bad RAISE_VARARGS oparg
'async for' requires an object with __aiter__ method, got %.100s
'async for' received an object from __aiter__ that does not implement __anext__: %.100s
'async for' requires an iterator with __anext__ method, got %.100s
'async for' received an invalid object from __anext__: %.100s
coroutine is being awaited already
popped block is not an except handler
__build_class__ not found
no locals found when storing %R
no locals when deleting %R
name '%.200s' is not defined
no locals when loading %R
Value after * must be an iterable, not %.200s
no locals found when setting up annotations
bad BUILD_CONST_KEY_MAP keys argument
'%.200s' object is not a mapping
catching classes that do not inherit from BaseException is not allowed
no locals found during 'import *'
cannot 'yield from' a coroutine object in a non-coroutine generator
__aenter__
__aexit__
XXX lineno: %d, opcode: %d
unknown opcode
error return without exception set
PyEval_EvalCodeEx: NULL globals
%U() keywords must be strings
%U() got an unexpected keyword argument '%S'
%U() got multiple values for argument '%S'
sys.setprofile
in PyEval_SetProfile
sys.settrace
in PyEval_SetTrace
sys.set_asyncgen_hook_firstiter
sys.set_asyncgen_hook_finalizer
frame does not exist
 object
slice indices must be integers or have an __index__ method
create_gil
PyMUTEX_INIT(gil->mutex) failed
PyMUTEX_INIT(gil->switch_mutex) failed
PyCOND_INIT(gil->cond) failed
PyCOND_INIT(gil->switch_cond) failed
take_gil
PyMUTEX_LOCK(gil->mutex) failed
PyCOND_WAIT(gil->cond) failed
PyMUTEX_UNLOCK(gil->mutex) failed
PyMUTEX_LOCK(gil->switch_mutex) failed
PyCOND_SIGNAL(gil->switch_cond) failed
PyMUTEX_UNLOCK(gil->switch_mutex) failed
destroy_gil
PyCOND_FINI(gil->cond) failed
PyMUTEX_FINI(gil->mutex) failed
PyCOND_FINI(gil->switch_cond) failed
PyMUTEX_FINI(gil->switch_mutex) failed
drop_gil
drop_gil: GIL is not locked
PyCOND_SIGNAL(gil->cond) failed
PyCOND_WAIT(gil->switch_cond) failed
eval_frame_handle_pending
tstate mix-up
orphan tstate
%U() got some positional-only arguments passed as keyword arguments: '%U'
from %zd to %zd
 positional argument%s (and %zd keyword-only argument%s)
%U() takes %U positional argument%s but %zd%U %s given
were
positional
keyword-only
%U and %U
, %U, and %U
%U() missing %i required %s argument%s: %U
No active exception to reraise
calling %R should have returned an instance of BaseException, not %R
exceptions must derive from BaseException
exception causes must derive from BaseException
cannot unpack non-iterable %.200s object
not enough values to unpack (expected %d, got %d)
not enough values to unpack (expected at least %d, got %d)
too many values to unpack (expected %d)
not enough values to unpack (expected at least %d, got %zd)
__import__ not found
%U.%U
<unknown module name>
cannot import name %R from %R (unknown location)
cannot import name %R from partially initialized module %R (most likely due to a circular import) (%S)
cannot import name %R from %R (%S)
__all__
from-import-* object has no __dict__ and no __all__
module __name__ must be a string, not %.100s
%s in %U.%s must be str, not %.100s
Item
%U argument after * must be an iterable, not %.200s
%U argument after ** must be a mapping, not %.200s
%U got multiple values for keyword argument '%S'
free variable '%.200s' referenced before assignment in enclosing scope
'async with' received an object from __aenter__ that does not implement __await__: %.100s
'async with' received an object from __aexit__ that does not implement __await__: %.100s
0123456789abcdef
argument must be callable
no codec search functions registered: can't find encoding
codec search functions must return 4-tuples
unknown encoding: %s
incrementaldecoder
incrementalencoder
_is_text_encoding
'%.400s' is not a text encoding; use %s to handle arbitrary codecs
handler must be callable
unknown error handler name '%.400s'
codec must pass exception instance
(Nn)
(Cn)
string is too large
_Py_normalize_encoding() failed
encoder must return a tuple (object, integer)
%s with '%s' codec failed
decoding
decoder must return a tuple (object,integer)
codecs.encode()
codecs.decode()
don't know how to handle %.200s in error callback
strict_errors
Implements the 'strict' error handling, which raises a UnicodeError on coding errors.
ignore_errors
Implements the 'ignore' error handling, which ignores malformed data and continues.
replace_errors
Implements the 'replace' error handling, which replaces malformed data with a replacement marker.
xmlcharrefreplace_errors
Implements the 'xmlcharrefreplace' error handling, which replaces an unencodable character with the appropriate XML character reference.
backslashreplace_errors
Implements the 'backslashreplace' error handling, which replaces malformed data with a backslashed escape sequence.
namereplace
namereplace_errors
Implements the 'namereplace' error handling, which replaces an unencodable character with a \N{...} escape sequence.
encodings
(On)
CP_UTF8
private identifier too large to be mangled
no symtable
<module>
module kind %d should not be possible
compile.c compiler unit
.<locals>
cannot assign to __debug__
(zO)
compiler_exit_scope
compiler_exit_scope()
compiler_make_closure
lookup %s in %s %d %d
freevars of %s: %s
get_ref_type
unknown scope for %.100s in %.100s(%s)
symbols: %s
locals: %s
globals: %s
keyword argument repeated: %U
'return' outside function
'return' with value in async generator
too many statically nested blocks
invalid node type (%d) for augmented assignment
inplace binary op %d should not be possible
invalid node type (%d) for annotated assignment
"is" with a literal. Did you mean "=="?
"is not" with a literal. Did you mean "!="?
default 'except:' must be last
assertion is always true, perhaps remove parentheses?
__future__
from __future__ imports must occur at the beginning of the file
'break' outside loop
'continue' not properly in loop
'async with' outside async function
'async for' outside async function
'yield' outside function
'yield from' inside async function
'await' outside function
'await' outside async function
starred assignment target must be in a list or tuple
binary op %d should not be possible
unary op %d should not be possible
<lambda>
<genexpr>
asynchronous comprehension outside of an asynchronous function
unknown comprehension type %d
<listcomp>
<setcomp>
<dictcomp>
'%.200s' object is not callable; perhaps you missed a comma?
Unrecognized conversion character %d
'%.200s' object is not subscriptable; perhaps you missed a comma?
%.200s indices must be integers or slices, not %.200s; perhaps you missed a comma?
too many expressions in star-unpacking assignment
multiple starred expressions in assignment
stackdepth
opcode = %d
an instance of Context was expected
an instance of ContextVar was expected
an instance of Token was expected
%R has already been used once
%R was created by a different ContextVar
%R was created in a different Context
Context
ContextVar
Token
Token.MISSING
MISSING
cannot enter context: %R is already entered
cannot exit context: %R has not been entered
cannot exit context: thread state references a different context object
a ContextVar key was expected, got %R
run() missing 1 required positional argument
Context() does not accept any arguments
context variable name must be a str
<ContextVar name=
 default=
 at %p>
reset
expected an instance of Token, got %R
O|$O:ContextVar
<Token
 used
 var=
old_value
Tokens can only be created by ContextVars
<Token.MISSING>
_PyErr_SetObject: exception %R is not a BaseException subclass
maximum recursion depth exceeded while normalizing an exception
_PyErr_NormalizeException
Cannot recover from MemoryErrors while normalizing exceptions.
Cannot recover from the recursive normalization of an exception.
_PyErr_ChainExceptions: exception %R is not a BaseException subclass
bad argument type for built-in operation
_PyErr_NoMemory
Out of memory and PyExc_MemoryError is not initialized yet
Error
(iOOiO)
(iOO)
(iO)
expected a subclass of ImportError
expected a message argument
%s:%d: bad argument to internal function
bad argument to internal function
PyErr_NewException: name must be module.class
_PyErr_Init
failed to initialize UnraisableHookArgs type
sys.unraisablehook argument type must be UnraisableHookArgs
_PyErr_WriteUnraisableMsg
Exception ignored %s
Exception ignored on building sys.unraisablehook arguments
unraisablehook
sys.unraisablehook
Exception ignored in audit hook
Exception ignored in sys.unraisablehook
UnraisableHookArgs
exc_type
Exception type
exc_value
Exception value
exc_traceback
Exception traceback
err_msg
Error message
Object causing the exception
Exception ignored in: 
<object repr() failed>
<exception str() failed>
out of memory
PYTHONINSPECT
PYTHONUNBUFFERED
Unable to decode the command line argument #%i
Python %s
Py_FrozenMain
the __main__ module is not frozen
<stdin>
nested_scopes
division
absolute_import
with_statement
print_function
unicode_literals
barry_as_FLUFL
generator_stop
annotations
braces
not a chance
future feature %.100s is not defined
%.200s() %.200s must be %.50s, not %.50s
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Python/getargs.c
%.200s%s takes at most %d %sargument%s (%zd given)
keyword 
%.200s%s takes no positional arguments
%.200s%s takes %s %d positional argument%s (%zd given)
at most
exactly
at least
%.200s%s missing required argument '%U' (pos %d)
argument for %.200s%s given by name ('%U') and position (%d)
'%S' is an invalid keyword argument for %.200s%s
this function
%.200s expected %s%zd argument%s, got %zd
at least 
unpacked tuple should have %s%zd element%s, but has %zd
at most 
%.200s() takes no positional arguments
%s() takes no keyword arguments
vgetargs1_impl
too many tuple nesting levels in argument format string
excess ')' in getargs format
missing ')' in getargs format
%.200s%s takes no arguments
%.200s%s takes at least one argument
old style getargs format uses new features
%.150s%s takes %s %d argument%s (%zd given)
bad format string: %.200s
must be %d-item sequence, not %.50s
must be sequence of length %d, not %zd
is not retrievable
unsigned byte integer is less than minimum
unsigned byte integer is greater than maximum
signed short integer is less than minimum
signed short integer is greater than maximum
signed integer is greater than maximum
signed integer is less than minimum
a unicode character
PY_SSIZE_T_CLEAN will be required for '#' formats
size does not fit in an int
(unicode conversion error)
str or None
(unknown parser marker combination)
(buffer is NULL)
(encoding failed)
str, bytes or bytearray
(buffer_len is NULL)
encoded string too long (%zd, maximum length %zd)
encoded string without null bytes
(unspecified)
(invalid use of 'w' format character)
read-write bytes-like object
(impossible<bad format char>)
%.100s
must be %.50s, not %.50s
bytes-like object
read-only bytes-like object
%.200s() 
argument %zd
, item %d
 %.256s
new style getargs format but argument is not a tuple
Empty keyword parameter name
Invalid format string (| specified twice)
Invalid format string ($ before |)
Invalid format string ($ specified twice)
Empty parameter name after $
More keyword list entries (%d) than format specifiers (%d)
%.200s%s missing required argument '%s' (pos %d)
%s: '%s'
more argument specifiers than keyword list entries (remaining format:'%s')
argument for %.200s%s given by name ('%s') and position (%d)
'%U' is an invalid keyword argument for %.200s%s
Unmatched left paren in format string
Unmatched right paren in format string
impossible<bad format char>
[Clang 16.0.0 (clang-1600.0.22.7)]
darwin
%.80s (%.80s) %.80s
3.9.6
single_input
file_input
eval_input
decorator
decorators
decorated
async_funcdef
funcdef
parameters
typedargslist
tfpdef
varargslist
vfpdef
simple_stmt
small_stmt
expr_stmt
annassign
testlist_star_expr
augassign
del_stmt
pass_stmt
flow_stmt
break_stmt
continue_stmt
return_stmt
yield_stmt
raise_stmt
import_stmt
import_name
import_from
import_as_name
dotted_as_name
import_as_names
dotted_as_names
dotted_name
global_stmt
nonlocal_stmt
assert_stmt
compound_stmt
async_stmt
if_stmt
while_stmt
for_stmt
try_stmt
with_stmt
with_item
except_clause
suite
namedexpr_test
test_nocond
lambdef
lambdef_nocond
or_test
and_test
not_test
comp_op
star_expr
xor_expr
and_expr
shift_expr
arith_expr
term
factor
power
atom_expr
atom
testlist_comp
trailer
subscriptlist
sliceop
exprlist
testlist
dictorsetmaker
classdef
arglist
comp_iter
sync_comp_for
comp_for
comp_if
encoding_decl
yield_expr
yield_arg
func_body_suite
func_type_input
typelist
hamt
hamt_array_node
hamt_bitmap_node
hamt_collision_node
meta_path
path_importer_cache
path_hooks
_PyImportHooks_Init
initializing sys.meta_path, sys.path_hooks, or path_importer_cache failed
unable to get sys.path_hooks
# installing zipimport hook
zipimport
# can't import zipimport
zipimporter
# can't import zipimport.zipimporter
# installed zipimport hook
_PyImportZip_Init
initializing zipimport failed
_PyImport_ReInitLock
failed to create a new lock
PyImport_GetModuleDict
interpreter has no modules dictionary
# clear builtins._
# clear sys.%s
# restore sys.%s
# cleanup[2] removing %U
# cleanup[3] wiping %U
# cleanup[3] wiping sys
# cleanup[3] wiping builtins
_bootstrap_external
_RAW_MAGIC_NUMBER
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Python/import.c
_get_sourcefile
PyImport_ExecCodeModuleWithPathnames
no current interpreter
_fix_up_module
Excluded frozen object named %R
frozen object %R is not a code object
__path__
_handle_fromlist
Empty module name
module name must be a string
level must be >= 0
%R not in sys.modules as expected
reload
{OO}
OOOOi
check_hash_based_pycs
argv
last_type
last_value
last_traceback
__interactivehook__
__stdin__
__stdout__
__stderr__
import %U # previously loaded (%R)
no import module dictionary
Loaded module %R not found in sys.modules
unable to get sys.modules
_lock_unlock_module
<frozen importlib._bootstrap>
<frozen importlib._bootstrap_external>
_call_with_frames_removed
parent
'__name__' not in globals
package must be a string
__package__ != __spec__.parent
__spec__.parent must be a string
can't resolve package from __spec__ or __package__, falling back on __name__ and __path__
__name__ must be a string
attempted relative import beyond top-level package
attempted relative import with no known parent package
_find_and_load
OOOOO
import time: self [us] | cumulative | imported package
import time: %9ld | %10ld | %*s%s
_imp
extension_suffixes
lock_held
acquire_lock
release_lock
get_frozen_object
is_frozen_package
create_builtin
init_frozen
is_builtin
is_frozen
create_dynamic
exec_dynamic
exec_builtin
_fix_co_filename
source_hash
not holding the import lock
No such frozen object named %R
origin
argument 'source'
spec.name must be a string
dynamic module does not define module export function (%s_%s)
initialization of %s failed without raising an exception
initialization of %s raised unreported exception
init function of %s returned uninitialized object
PyInitU
initialization of * did not return PyModuleDef
initialization of %s did not return an extension module
PyInit
punycode
PyWideStringList_Insert
PyWideStringList_Insert index must be >= 0
PyConfig_SetString
cannot decode string
_PyConfig_Copy
_PyConfig_Write
PyConfig_SetWideStringList
PyConfig_Read
global_config
pre_config
config
Python path configuration:
  PYTHONHOME = 
  PYTHONPATH = 
  program name = 
  isolated = %i
  environment = %i
  user site = %i
  import site = %i
_base_executable
  sys.%s = 
(not set)
base_prefix
base_exec_prefix
platlibdir
executable
prefix
exec_prefix
  sys.path = [
    %A,
config_set_bytes_string
core_read_precmdline
config_init_program_name
PYTHONEXECUTABLE
cannot decode PYTHONEXECUTABLE environment variable
__PYVENV_LAUNCHER__
cannot decode __PYVENV_LAUNCHER__ environment variable
config_parse_cmdline
--check-hash-based-pycs must be one of 'default', 'always', or 'never'
Python %s
Try `python -h' for more information.
<prefix>/lib/pythonX.X
config_run_filename_abspath
config_update_argv
PYTHONWARNINGS
cannot decode PYTHONWARNINGS
cannot decode PLATLIBDIR macro
PYTHONDEBUG
PYTHONVERBOSE
PYTHONOPTIMIZE
PYTHONDONTWRITEBYTECODE
PYTHONNOUSERSITE
PYTHONDUMPREFS
PYTHONPATH
cannot decode PYTHONPATH
PYTHONPLATLIBDIR
cannot decode PYTHONPLATLIBDIR
PYTHONHASHSEED
random
config_init_hash_seed
PYTHONHASHSEED must be "random" or an integer in range [0; 4294967295]
PYTHONFAULTHANDLER
PYTHONPROFILEIMPORTTIME
PYTHONOLDPARSER
PYTHONTRACEMALLOC
config_init_tracemalloc
PYTHONTRACEMALLOC: invalid number of frames
-X tracemalloc=NFRAME: invalid number of frames
config_init_pycache_prefix
PYTHONPYCACHEPREFIX
cannot decode PYTHONPYCACHEPREFIX
HOME
cannot decode HOME
PYTHONHOME
cannot decode PYTHONHOME
cannot decode _Py_StandardStreamEncoding
cannot decode _Py_StandardStreamErrors
PYTHONIOENCODING
config_init_stdio_encoding
cannot decode PYTHONIOENCODING environment variable
config_get_locale_encoding
failed to get the locale encoding: nl_langinfo(CODESET) failed
cannot decode nl_langinfo(CODESET)
POSIX
Py_FileSystemDefaultEncoding
Py_HasFileSystemDefaultEncoding
Py_FileSystemDefaultEncodeErrors
_Py_HasFileSystemDefaultEncodeErrors
Py_UTF8Mode
Py_DebugFlag
Py_VerboseFlag
Py_QuietFlag
Py_InteractiveFlag
Py_InspectFlag
Py_OptimizeFlag
Py_NoSiteFlag
Py_BytesWarningFlag
Py_FrozenFlag
Py_IgnoreEnvironmentFlag
Py_DontWriteBytecodeFlag
Py_NoUserSiteDirectory
Py_UnbufferedStdioFlag
Py_HashRandomizationFlag
Py_IsolatedFlag
_config_init
isolated
use_environment
dev_mode
_use_peg_parser
install_signal_handlers
use_hash_seed
hash_seed
faulthandler
tracemalloc
import_time
show_ref_count
dump_refs
malloc_stats
pycache_prefix
program_name
parse_argv
xoptions
warnoptions
pythonpath_env
home
module_search_paths
base_executable
site_import
bytes_warning
inspect
interactive
optimization_level
parser_debug
write_bytecode
verbose
quiet
user_site_directory
configure_c_stdio
buffered_stdio
stdio_errors
skip_source_first_line
run_command
run_module
run_filename
_install_importlib
check_hash_pycs_mode
pathconfig_warnings
_init_main
_isolated_interpreter
_orig_argv
\x%02x
\u%04x
unmarshallable object
object too deeply nested to marshal
too many objects
utf8
marshal data too short
readinto
read() returned too much data: %zd bytes requested, %zd returned
EOF read where not expected
EOF read where object expected
recursion limit exceeded
bad marshal data (bytes object size out of range)
bad marshal data (string size out of range)
bad marshal data (tuple size out of range)
NULL object in marshal data for tuple
bad marshal data (list size out of range)
NULL object in marshal data for list
bad marshal data (set size out of range)
NULL object in marshal data for set
bad marshal data (invalid reference)
bad marshal data (unknown type code)
bad marshal data (long size out of range)
bad marshal data (unnormalized long data)
bad marshal data (digit out of range in long)
bad marshal data (index list too large)
marshal
dump
load
dumps
loads
read
file.read() returned not bytes but %.100s
XXX readobject called with exception set
NULL object in marshal data for object
argument should be integer or None, not '%.200s'
PyModule_AddObject() needs module as first arg
PyModule_AddObject() needs non-NULL value
module '%s' has no __dict__
unmatched paren in format
string too long for Python string
string too long for Python bytes
NULL object passed to Py_BuildValue
bad format char passed to Py_BuildValue
Unmatched paren in format
Bad dict format
_PyConfig_InitPathConfig
Py_SetPath
Py_SetPythonHome
Py_SetProgramName
_Py_SetProgramFullPath
_Py_FindEnvConfigValue
pathconfig_set_from_config
config_calculate_pathconfig
pathconfig_copy
config_init_module_search_paths
out of memory
too many constants
_PyArgv_AsWstrList
cannot decode command line arguments
PYTHONDEVMODE
configure_locale
coerce_c_locale
coerce_c_locale_warn
utf8_mode
allocator
_PyPreConfig_Read
failed to LC_CTYPE locale
Encoding changed twice while reading the configuration
_PyPreConfig_Write
Unknown PYTHONMALLOC allocator
PYTHONCOERCECLOCALE
preconfig_init_utf8_mode
invalid -X utf8 option value
PYTHONUTF8
invalid PYTHONUTF8 environment variable value
PYTHONMALLOC
preconfig_init_allocator
PYTHONMALLOC: unknown allocator
siphash24
LC_ALL
_Py_PreInitializeFromPyArgv
preinitialization config is NULL
Py_InitializeFromConfig
initialization config is NULL
Py_EndInterpreter
thread is not current
thread still has a frame
not the last thread
Fatal Python error: 
Py_ExitStatusException() must not be called on success
C.UTF-8
C.utf8
UTF-8
LC_CTYPE
Error setting LC_CTYPE, skipping C locale coercion
pyinit_main
runtime core not initialized
_Py_ReconfigureMainInterpreter
fail to set sys.argv
init_interp_main
can't initialize time
can't finish initializing sys
can't initialize signals
can't initialize tracemalloc
'import warnings' failed; traceback:
_install_external_importers
init_importlib_external
external importer setup failed
init_sys_streams
<stdin> is a directory, cannot continue
encodings.utf_8
encodings.latin_1
<stdout>
<stderr>
can't initialize sys standard streams
TextIOWrapper
isiOOOO
OOOsOO
OpenWrapper
init_set_builtins_open
can't initialize io.open
add_main_module
can't create __main__ module
Failed to initialize __main__.__annotations__
Failed to retrieve builtins module
Failed to initialize __main__.__builtins__
BuiltinImporter
Failed to retrieve BuiltinImporter
Failed to initialize __main__.__loader__
site
init_import_site
Failed to import the site module
Python runtime initialized with LC_CTYPE=C (a locale with default ASCII encoding), which may cause Unicode compatibility problems. Using C.UTF-8, C.utf8, or UTF-8 (if available) as alternative Unicode-compatible locales is recommended.
pycore_init_runtime
main interpreter already initialized
pycore_create_interpreter
can't make main interpreter
can't make first thread
pycore_init_types
can't init longs
can't init float
can't initialize structseq
can't init context
pycore_init_builtins
can't initialize builtins module
_frozen_importlib
init_importlib
can't import _frozen_importlib
import _frozen_importlib # frozen
couldn't get _frozen_importlib from sys.modules
can't import _imp
import _imp # builtin
can't save _imp to sys.modules
_install
importlib install failed
pyinit_core_reconfigure
failed to read thread state
new_interpreter
Py_Initialize must be called first
<message not set>
Python runtime state: 
finalizing (tstate=%p)
initialized
core initialized
preinitialized
preinitializing
_shutdown
threading
_PyRuntimeState_ReInitThreads
Can't initialize lock for runtime interpreters
Can't initialize ID lock for main interpreter
Can't initialize lock for cross-interpreter data registry
_PyInterpreterState_Enable
Can't initialize threads for interpreter
cpython.PyInterpreterState_New
failed to get an interpreter ID
cpython.PyInterpreterState_Clear
PyInterpreterState_Delete
NULL interpreter
remaining threads
remaining subinterpreters
_PyInterpreterState_DeleteExceptMain
not main interpreter
missing main interpreter
PyInterpreterState_Get
no interpreter provided
unrecognized interpreter ID %lld
failed to create init interpreter ID mutex
interpreter not initialized
PyState_AddModule called on module with slots
PyState_AddModule
module definition is NULL
module %p already added
PyState_RemoveModule called on module with slots
PyState_RemoveModule
invalid module index
Interpreters module-list not accessible.
Module index out of bounds.
PyThreadState_Clear: warning: thread still has a frame
PyThreadState_Clear: warning: thread still has a generator
_PyThreadState_DeleteCurrent
PyThreadState_Get
sys._current_frames
_PyGILState_Init
_PyGILState_Reinit
Could not allocate TSS entry
Couldn't create autoTSSkey mapping
PyGILState_Ensure
Couldn't create thread-state for new thread
PyGILState_Release
auto-releasing thread-state, but no thread-state for this thread
thread state %p must be current when releasing
only classes may be registered
missing 'getdata' func
_PyRuntimeState_Init_impl
Can't initialize threads for cross-interpreter data registry
_PyThreadState_Delete
tstate %p is still current
tstate_delete_common
_PyGILState_NoteThreadState
%S does not support cross-interpreter data
missing interp
missing new_object func
_register_builtins_for_crossinterpreter_data
could not register None for cross-interpreter sharing
could not register int for cross-interpreter sharing
could not register bytes for cross-interpreter sharing
could not register str for cross-interpreter sharing
try sending as bytes
>>> 
... 
%s() arg 1 must be a %s object
source code string cannot contain null bytes
__cached__
python: Can't reopen .pyc file
SourcelessFileLoader
python: failed to set __main__.__loader__
SourceFileLoader
.pyc
Bad magic number in .pyc file
Bad code object in .pyc file
sys.excepthook
OOOO
in audit hook
Error in sys.excepthook:
Original exception was:
sys.excepthook is missing
excepthook
TypeError: print_exception(): Exception expected for value, 
 found
  File "%S", line %zd
: <exception str() failed>
    
expression too long
unknown decode error
error=%d
(OO)
(sO)
Invalid value NaN (not a number)
expect int, got %s
_PyTime_GetSystemClock
pygettimeofday() failed
_PyTime_GetMonotonicClock
pymonotonic() failed
_PyTime_GetPerfCounter
_PyTime_GetPerfCounterWithInfo() failed
timestamp out of range for platform time_t
timestamp too large to convert to C _PyTime_t
clock_gettime(CLOCK_REALTIME)
invalid mach_timebase_info
mach_timebase_info is too large
mach_absolute_time()
_Py_HashRandomization_Init
failed to get random numbers to initialize Python
negative argument not allowed
/dev/urandom
/dev/urandom (or equivalent) not found
Failed to read %zi bytes from /dev/urandom
bad memberdescr type
readonly attribute
can't delete numeric/char attribute
attribute value type must be bool
Truncation of value to char
Truncation of value to unsigned char
Truncation of value to short
Truncation of value to unsigned short
Truncation of value to int
Writing negative value into unsigned field
Truncation of value to unsigned int
bad memberdescr type for %s
symtable entry
this compiler does not handle FunctionTypes
symtable analysis recursion depth mismatch (before=%d, after=%d)
unknown symbol table entry
<symtable entry %U(%ld), line %d>
symbols
varnames
children
nested
name '%U' is nonlocal and global
nonlocal declaration not allowed at module level
no binding for nonlocal '%U' found
BUG: internal directive bookkeeping broken
maximum recursion depth exceeded during compilation
annotated name '%U' can't be global
annotated name '%U' can't be nonlocal
name '%U' is parameter and global
name '%U' is used prior to global declaration
name '%U' is assigned to before global declaration
name '%U' is parameter and nonlocal
name '%U' is used prior to nonlocal declaration
name '%U' is assigned to before nonlocal declaration
duplicate argument '%U' in function definition
comprehension inner loop cannot rebind assignment expression target '%U'
import * only allowed at module level
(Nii)
assignment expression cannot be used in a comprehension iterable expression
assignment expression cannot rebind comprehension iteration variable '%U'
assignment expression within a comprehension cannot be used in a class body
genexpr
'yield' inside list comprehension
'yield' inside set comprehension
'yield' inside dict comprehension
'yield' inside generator expression
listcomp
setcomp
dictcomp
# clear sys.audit hooks
cpython._PySys_ClearAuditHooks
sys.addaudithook
Type %.100s doesn't define __sizeof__
__sizeof__() should return >= 0
cpython
cpython-39
_xoptions
dont_write_bytecode
_PySys_Create
failed to create a module object
modules
can't initialize sys module
PySys_SetPath
can't create sys.path
can't assign sys.path
PySys_SetArgvEx
no mem for sys.argv
can't assign sys.argv
can't compute path0 from argv
can't prepend path0 to sys.path
__cantrace__
addaudithook
audit
_clear_type_cache
_current_frames
exc_info
exit
getdefaultencoding
getdlopenflags
getallocatedblocks
getfilesystemencoding
getfilesystemencodeerrors
getrefcount
getrecursionlimit
getsizeof
_getframe
intern
is_finalizing
setswitchinterval
getswitchinterval
setdlopenflags
setprofile
getprofile
setrecursionlimit
settrace
gettrace
call_tracing
_debugmallocstats
set_coroutine_origin_tracking_depth
get_coroutine_origin_tracking_depth
set_asyncgen_hooks
get_asyncgen_hooks
hook
sys_audit
audit() missing 1 required positional argument: 'event'
expected str for argument 'event'
expected str for argument 'event', not %.200s
PYTHONBREAKPOINT
pdb.set_trace
Ignoring unimportable $PYTHONBREAKPOINT: "%s"
lost builtins module
buffer
(OOO)
O|O:getsizeof
sys._getframe
call stack is not deep enough
can't intern %.400s
switch interval must be strictly positive
call
exception
line
c_call
c_exception
c_return
opcode
recursion limit must be greater or equal than 1
cannot set the recursion limit to %i at the recursion depth %i: the limit is too low
depth
depth must be >= 0
firstiter
finalizer
callable finalizer expected, got %.50s
callable firstiter expected, got %.50s
_PySys_SetPreliminaryStderr
can't set preliminary stderr
__displayhook__
__excepthook__
__breakpointhook__
__unraisablehook__
hexversion
(szz)
CPython
_git
Python3
_framework
api_version
copyright
platform
maxsize
float_info
int_info
hash_info
maxunicode
builtin_module_names
abiflags
version_info
implementation
short
float_repr_style
thread_info
_PySys_InitCore
failed to initialize a type
sys.hash_info
width
width of the type used for hashing, in bits
modulus
prime number giving the modulus on which the hash function is based
value to be used for hash of a positive infinity
value to be used for hash of a nan
multiplier used for the imaginary part of a complex number
algorithm
name of the algorithm for hashing of str, bytes and memoryviews
hash_bits
internal output size of hash algorithm
seed_bits
seed size of hash algorithm
cutoff
small string optimization cutoff
sys.version_info
major
Major release number
minor
Minor release number
micro
Patch release number
releaselevel
'alpha', 'beta', 'candidate', or 'final'
serial
Serial release number
final
cache_tag
_multiarch
sys.flags
-O or -OO
no_user_site
no_site
ignore_environment
hash_randomization
-X dev
-X utf8
asyncgen_hooks
Hook to intercept first iteration
Hook to intercept finalization
... truncated
%s: %s
pthread_mutex_init
pthread_cond_init
pthread_cond_destroy
pthread_mutex_destroy
pthread_mutex_trylock[1]
pthread_mutex_lock[1]
pthread_cond_timedwait
pthread_cond_wait
pthread_mutex_unlock[1]
pthread_mutex_lock[3]
pthread_cond_signal
pthread_mutex_unlock[3]
pthread
mutex+cond
sys.thread_info
name of the thread implementation
lock
name of the lock implementation
name and version of the thread library
traceback
          
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Python/traceback.c
tracebacklimit
Traceback (most recent call last):
unable to get the interpreter state
unable to get the thread head state
[ssss]
tb_frame
tb_next
tb_lasti
tb_lineno
can't delete tb_next attribute
expected traceback object, got '%s'
traceback loop detected
TracebackType
argument 'tb_frame'
expected traceback object or None, got '%s'
  [Previous line repeated %ld more times]
  [Previous line repeated %ld more time]
  File "%U", line %d, in %U
Stack (most recent call first):
<no Python frame>
  ...
  File 
, line 
Current thread 0x
Thread 0x
 (most recent call first):
expected long option
unknown option %ls
Argument expected for the %ls options
-J is reserved for Jython
Unknown option: -%c
Argument expected for the -%c option
could not convert string to float: '%.200s'
value too large to convert to float: '%.200s'
could not convert string to %s: %R
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Python/pystrtod.c
%+.02d
sep must be length 1.
sep must be ASCII.
sep must be str or bytes.
Format specifier missing precision
Invalid format specifier
Cannot specify both ',' and '_'.
Cannot specify '%c' with '%c'.
Cannot specify '%c' with '\x%x'.
Space not allowed in string format specifier
Sign not allowed in string format specifier
Alternate form (#) not allowed in string format specifier
'=' alignment not allowed in string format specifier
Unknown format code '%c' for object of type '%.200s'
Unknown format code '\x%x' for object of type '%.200s'
Precision not allowed in integer format specifier
Sign not allowed with integer format specifier 'c'
Alternate form (#) not allowed with integer format specifier 'c'
non-ascii grouped digit
Zero padding is not allowed in complex format specifier
'=' alignment flag is not allowed in complex format specifier
failed to get LC_CTYPE locale
decoding error
.cpython-39-darwin.so
.abi3.so
./%-.255s
%.20s_%.200s
unknown dlopen() error
posix
_sre
_codecs
_weakref
_functools
_operator
_collections
_abc
itertools
atexit
_signal
_stat
time
_thread
_locale
_tracemalloc
_peg_parser
_symtable
xxsubtype
PATH
calculate_init
cannot decode PATH environment variable
cannot decode PYTHONPATH macro
/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9
cannot decode PREFIX macro
cannot decode EXEC_PREFIX macro
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python
cannot decode VPATH macro
python3.9
cannot decode VERSION macro
Consider setting $PYTHONHOME to <prefix>[:<exec_prefix>]
calculate_program_impl
calculate_program_macos
cannot decode executable path
calculate_which
absolutize
copy_absolute
path configuration: path too long
joinpath
calculate_argv0_path
_Py_Initialize
calculate_argv0_path_framework
cannot decode framework location
ismodule
resolve_symlinks
maximum number of symbolic links reached
calculate_open_pyenv
Could not find platform independent libraries <prefix>
calculate_prefix
search_for_prefix
calculate_zip_path
Could not find platform dependent libraries <exec_prefix>
calculate_exec_prefix
search_for_exec_prefix
calculate_pybuilddir
cannot decode pybuilddir.txt
calculate_module_search_path
calculate_set_prefix
calculate_set_exec_prefix
Failed checking if argv[0] is an import path entry
unable to get sys.path
Python %s on %s
Type "help", "copyright", "credits" or "license" for more information.
cpython.run_command
Unable to decode the command from the command line:
cpython.run_module
runpy
Could not import runpy module
_run_module_as_main
Could not access runpy._run_module_as_main
Could not convert module name to unicode
Could not create arguments for runpy._run_module_as_main
cpython.run_file
<unprintable file name>
%ls: can't open file '%s': [Errno %d] %s
%ls: '%ls' is a directory, cannot continue
<filename encoding error>
cpython.run_stdin
PYTHONSTARTUP
cpython.run_startup
Could not open PYTHONSTARTUP
cpython.run_interactivehook
Failed calling sys.__interactivehook__
signal
_PyGC_Init
garbage
callbacks
DEBUG_STATS
DEBUG_COLLECTABLE
DEBUG_UNCOLLECTABLE
DEBUG_SAVEALL
DEBUG_LEAK
gc: %zd uncollectable objects at shutdown
gc: %zd uncollectable objects at shutdown; use gc.set_debug(gc.DEBUG_UNCOLLECTABLE) to list them
      %s
object already tracked by the garbage collector
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Modules/gcmodule.c
PyObject_GC_Track
enable
disable
isenabled
set_debug
get_debug
get_count
set_threshold
get_threshold
collect
get_objects
get_stats
is_tracked
is_finalized
get_referrers
get_referents
freeze
unfreeze
get_freeze_count
(iii)
i|ii:set_threshold
generation
invalid generation
gc.get_objects
generation parameter must be less than the number of available generations (%i)
generation parameter cannot be negative
{snsnsn}
collections
collected
uncollectable
gc.get_referrers
gc.get_referents
{sisnsn}
gc: collecting generation %d...
collectable
gc: done, %zd unreachable, %zd uncollectable, %.4fs elapsed
in garbage collection
 %zd
gc: objects in each generation:%s
gc: objects in permanent generation: %zd
gc: %s <%s %p>
in tp_clear of
PyOS_AfterFork_Parent
failed releasing import lock after fork
uid should be integer, not %.200s
uid is less than minimum
uid is greater than maximum
gid should be integer, not %.200s
gid is less than minimum
gid is greater than maximum
signal number %ld out of range
expected str, bytes or os.PathLike object, not %.200s
expected %.200s.__fspath__() to return str or bytes, not %.200s
__fspath__
stat
access
ttyname
chdir
chflags
chmod
fchmod
lchmod
chown
fchown
lchown
lchflags
chroot
ctermid
getcwd
getcwdb
link
listdir
lstat
mkdir
nice
getpriority
setpriority
posix_spawn
posix_spawnp
readlink
rename
rmdir
symlink
system
umask
uname
unlink
utime
times
_exit
_fcopyfile
execv
execve
fork
register_at_fork
sched_get_priority_max
sched_get_priority_min
sched_yield
openpty
forkpty
getegid
geteuid
getgid
getgrouplist
getgroups
getpid
getpgrp
getppid
getuid
getlogin
kill
killpg
setuid
seteuid
setreuid
setgid
setegid
setregid
setgroups
initgroups
getpgid
setpgrp
wait
wait3
wait4
waitpid
getsid
setsid
setpgid
tcgetpgrp
tcsetpgrp
closerange
device_encoding
dup2
lockf
lseek
readv
pread
preadv
writev
pwrite
pwritev
sendfile
fstat
pipe
mkfifo
mknod
makedev
ftruncate
truncate
putenv
unsetenv
fchdir
fsync
sync
WCOREDUMP
WIFCONTINUED
WIFSTOPPED
WIFSIGNALED
WIFEXITED
WEXITSTATUS
WTERMSIG
WSTOPSIG
fstatvfs
statvfs
confstr
sysconf
fpathconf
pathconf
abort
getloadavg
urandom
get_terminal_size
cpu_count
get_inheritable
set_inheritable
get_blocking
set_blocking
scandir
fspath
waitstatus_to_exitcode
dir_fd
follow_symlinks
%s%s%s should be %s, not %.200s
string, bytes, os.PathLike, integer or None
string, bytes, os.PathLike or integer
string, bytes, os.PathLike or None
string, bytes or os.PathLike
%s%sembedded null character in %s
fd is greater than maximum
fd is less than minimum
argument should be integer or None, not %.200s
%s: can't specify dir_fd without matching path
%s: can't specify both dir_fd and fd
%s: cannot use fd and follow_symlinks together
%s%s%s unavailable on this platform
effective_ids
os.chdir
argument 'flags'
os.chflags
os.chmod
%s: cannot use dir_fd and follow_symlinks together
os.chown
OIIi
iIIi
src_dir_fd
dst_dir_fd
link: src and dst must be the same type
os.link
OOii
os.listdir
os.mkdir
which
priority
file_actions
setpgroup
resetids
setsigmask
setsigdef
scheduler
%s: argv must be a tuple or list
%s: argv must not be empty
%s: environment must be a mapping object
%s: argv first element cannot be empty
os.posix_spawn
env.keys() or env.values() is not a list
illegal environment variable name
%s=%s
file_actions must be a sequence or None
Each file_actions element must be a non-empty tuple
OiO&ik;A open file_action tuple must have 5 elements
Oi;A close file_action tuple must have 2 elements
Oii;A dup2 file_action tuple must have 3 elements
Unknown file_actions identifier
The scheduler option is not supported in this system.
os.rename
%s: src and dst must be the same type
os.rmdir
target_is_directory
os.symlink
symlink: src and dst must be the same type
command
os.system
os.remove
utime: you may specify either 'times' or 'ns' but not both
utime: 'times' must be either a tuple of two ints or None
utime: 'ns' must be a tuple of two ints
os.utime
OOOi
%.200s.__divmod__() must return a 2-tuple, not %.200s
status
execv() arg 2 must be a tuple or list
execv() arg 2 must not be empty
execv() arg 2 first element cannot be empty
os.exec
execve: argv must be a tuple or list
execve: argv must not be empty
execve: environment must be a mapping object
execve: argv first element cannot be empty
fork not supported for isolated subinterpreters
os.fork
before
after_in_child
after_in_parent
At least one argument is required.
'%s' must be callable, not %s
policy
(ii)
fork not supported for subinterpreters
os.forkpty
(Ni)
unable to determine login name
in:kill
os.kill
ii:killpg
os.killpg
setgroups argument must be a sequence
too many groups
groups must be integers
i:getpgid
options
resource
ii:wait4
ii:waitpid
i:getsid
ii:setpgid
ii:tcsetpgrp
inheritable
os.lockf
readv() arg 2 must be a sequence
preadv2() arg 2 must be a sequence
preadv2
writev() arg 2 must be a sequence
pwritev() arg 2 must be a sequence
pwritev2
out_fd
in_fd
headers
trailers
sendfile() headers must be a sequence
sendfile() header is too large
sendfile() trailers must be a sequence
sendfile() trailer is too large
device
os.truncate
os.putenv
os.unsetenv
strerror() argument out of range
configuration names must be strings or integers
unrecognized configuration name
CS_PATH
CS_XBS5_ILP32_OFF32_CFLAGS
CS_XBS5_ILP32_OFF32_LDFLAGS
CS_XBS5_ILP32_OFF32_LIBS
CS_XBS5_ILP32_OFF32_LINTFLAGS
CS_XBS5_ILP32_OFFBIG_CFLAGS
CS_XBS5_ILP32_OFFBIG_LDFLAGS
CS_XBS5_ILP32_OFFBIG_LIBS
CS_XBS5_ILP32_OFFBIG_LINTFLAGS
CS_XBS5_LP64_OFF64_CFLAGS
CS_XBS5_LP64_OFF64_LDFLAGS
CS_XBS5_LP64_OFF64_LIBS
CS_XBS5_LP64_OFF64_LINTFLAGS
CS_XBS5_LPBIG_OFFBIG_CFLAGS
CS_XBS5_LPBIG_OFFBIG_LDFLAGS
CS_XBS5_LPBIG_OFFBIG_LIBS
CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
SC_2_CHAR_TERM
SC_2_C_BIND
SC_2_C_DEV
SC_2_FORT_DEV
SC_2_FORT_RUN
SC_2_LOCALEDEF
SC_2_SW_DEV
SC_2_UPE
SC_2_VERSION
SC_AIO_LISTIO_MAX
SC_AIO_MAX
SC_AIO_PRIO_DELTA_MAX
SC_ARG_MAX
SC_ASYNCHRONOUS_IO
SC_ATEXIT_MAX
SC_BC_BASE_MAX
SC_BC_DIM_MAX
SC_BC_SCALE_MAX
SC_BC_STRING_MAX
SC_CHILD_MAX
SC_CLK_TCK
SC_COLL_WEIGHTS_MAX
SC_DELAYTIMER_MAX
SC_EXPR_NEST_MAX
SC_FSYNC
SC_GETGR_R_SIZE_MAX
SC_GETPW_R_SIZE_MAX
SC_IOV_MAX
SC_JOB_CONTROL
SC_LINE_MAX
SC_LOGIN_NAME_MAX
SC_MAPPED_FILES
SC_MEMLOCK
SC_MEMLOCK_RANGE
SC_MEMORY_PROTECTION
SC_MESSAGE_PASSING
SC_MQ_OPEN_MAX
SC_MQ_PRIO_MAX
SC_NGROUPS_MAX
SC_NPROCESSORS_CONF
SC_NPROCESSORS_ONLN
SC_OPEN_MAX
SC_PAGESIZE
SC_PAGE_SIZE
SC_PASS_MAX
SC_PHYS_PAGES
SC_PRIORITIZED_IO
SC_PRIORITY_SCHEDULING
SC_REALTIME_SIGNALS
SC_RE_DUP_MAX
SC_RTSIG_MAX
SC_SAVED_IDS
SC_SEMAPHORES
SC_SEM_NSEMS_MAX
SC_SEM_VALUE_MAX
SC_SHARED_MEMORY_OBJECTS
SC_SIGQUEUE_MAX
SC_STREAM_MAX
SC_SYNCHRONIZED_IO
SC_THREADS
SC_THREAD_ATTR_STACKADDR
SC_THREAD_ATTR_STACKSIZE
SC_THREAD_DESTRUCTOR_ITERATIONS
SC_THREAD_KEYS_MAX
SC_THREAD_PRIORITY_SCHEDULING
SC_THREAD_PRIO_INHERIT
SC_THREAD_PRIO_PROTECT
SC_THREAD_PROCESS_SHARED
SC_THREAD_SAFE_FUNCTIONS
SC_THREAD_STACK_MIN
SC_THREAD_THREADS_MAX
SC_TIMERS
SC_TIMER_MAX
SC_TTY_NAME_MAX
SC_TZNAME_MAX
SC_VERSION
SC_XBS5_ILP32_OFF32
SC_XBS5_ILP32_OFFBIG
SC_XBS5_LP64_OFF64
SC_XBS5_LPBIG_OFFBIG
SC_XOPEN_CRYPT
SC_XOPEN_ENH_I18N
SC_XOPEN_LEGACY
SC_XOPEN_REALTIME
SC_XOPEN_REALTIME_THREADS
SC_XOPEN_SHM
SC_XOPEN_UNIX
SC_XOPEN_VERSION
SC_XOPEN_XCU_VERSION
PC_ASYNC_IO
PC_CHOWN_RESTRICTED
PC_FILESIZEBITS
PC_LINK_MAX
PC_MAX_CANON
PC_MAX_INPUT
PC_NAME_MAX
PC_NO_TRUNC
PC_PATH_MAX
PC_PIPE_BUF
PC_PRIO_IO
PC_SYNC_IO
PC_VDISABLE
PC_MIN_HOLE_SIZE
PC_ALLOC_SIZE_MIN
PC_REC_INCR_XFER_SIZE
PC_REC_MAX_XFER_SIZE
PC_REC_MIN_XFER_SIZE
PC_REC_XFER_ALIGN
PC_SYMLINK_MAX
Load averages are unobtainable
os.scandir
process stopped by delivery of signal %i
invalid wait status: %i
environ
os.stat_result
stat_result
os.statvfs_result
statvfs_result
terminal_size
DirEntry
posix.times_result
times_result
uname_result
struct_rusage
st_mode
_have_functions
F_OK
R_OK
W_OK
X_OK
NGROUPS_MAX
TMP_MAX
WCONTINUED
WNOHANG
WUNTRACED
O_RDONLY
O_WRONLY
O_RDWR
O_NDELAY
O_NONBLOCK
O_APPEND
O_DSYNC
O_SYNC
O_NOCTTY
O_CREAT
O_EXCL
O_TRUNC
O_SHLOCK
O_EXLOCK
O_EXEC
O_SEARCH
PRIO_PROCESS
PRIO_PGRP
PRIO_USER
O_CLOEXEC
O_ACCMODE
SEEK_HOLE
SEEK_DATA
O_ASYNC
O_DIRECTORY
O_NOFOLLOW
EX_OK
EX_USAGE
EX_DATAERR
EX_NOINPUT
EX_NOUSER
EX_NOHOST
EX_UNAVAILABLE
EX_SOFTWARE
EX_OSERR
EX_OSFILE
EX_CANTCREAT
EX_IOERR
EX_TEMPFAIL
EX_PROTOCOL
EX_NOPERM
EX_CONFIG
ST_RDONLY
ST_NOSUID
P_PID
P_PGID
P_ALL
WEXITED
WNOWAIT
WSTOPPED
CLD_EXITED
CLD_KILLED
CLD_DUMPED
CLD_TRAPPED
CLD_STOPPED
CLD_CONTINUED
F_LOCK
F_TLOCK
F_ULOCK
F_TEST
POSIX_SPAWN_OPEN
POSIX_SPAWN_CLOSE
POSIX_SPAWN_DUP2
SCHED_OTHER
SCHED_FIFO
SCHED_RR
RTLD_LAZY
RTLD_NOW
RTLD_GLOBAL
RTLD_LOCAL
RTLD_NODELETE
RTLD_NOLOAD
_COPYFILE_DATA
pathconf_names
confstr_names
sysconf_names
protection bits
st_ino
inode
st_dev
st_nlink
number of hard links
st_uid
user ID of owner
st_gid
group ID of owner
st_size
total size, in bytes
integer time of last access
integer time of last modification
integer time of last change
st_atime
time of last access
st_mtime
time of last modification
st_ctime
time of last change
st_atime_ns
time of last access in nanoseconds
st_mtime_ns
time of last modification in nanoseconds
st_ctime_ns
time of last change in nanoseconds
st_blksize
blocksize for filesystem I/O
st_blocks
number of blocks allocated
st_rdev
device type (if inode device)
st_flags
user defined flags for file
st_gen
generation number
st_birthtime
time of creation
f_bsize
f_frsize
f_blocks
f_bfree
f_bavail
f_files
f_ffree
f_favail
f_flag
f_namemax
f_fsid
os.terminal_size
columns
width of the terminal window in characters
lines
height of the terminal window in characters
posix.ScandirIterator
unclosed scandir iterator %R
posix.DirEntry
<DirEntry %R>
is_dir
is_file
is_symlink
|$p:is_dir
|$p:is_file
:is_symlink
|$p:stat
the entry's base filename, relative to scandir() "path" argument
the entry's full path name; equivalent to os.path.join(scandir_path, entry.name)
user
user time
system time
children_user
user time of children
children_system
system time of children
elapsed
elapsed time since an arbitrary point in the past
posix.uname_result
sysname
operating system name
nodename
name of machine on network (implementation-defined)
operating system release
operating system version
machine
hardware identifier
HAVE_FACCESSAT
HAVE_FCHDIR
HAVE_FCHMOD
HAVE_FCHMODAT
HAVE_FCHOWN
HAVE_FCHOWNAT
HAVE_FDOPENDIR
HAVE_FPATHCONF
HAVE_FSTATAT
HAVE_FSTATVFS
HAVE_FTRUNCATE
HAVE_FUTIMENS
HAVE_FUTIMES
HAVE_LINKAT
HAVE_LCHFLAGS
HAVE_LCHMOD
HAVE_LCHOWN
HAVE_LSTAT
HAVE_LUTIMES
HAVE_MKDIRAT
HAVE_OPENAT
HAVE_READLINKAT
HAVE_RENAMEAT
HAVE_SYMLINKAT
HAVE_UNLINKAT
HAVE_UTIMENSAT
errorcode
ENODEV
EHOSTUNREACH
ENOMSG
ENODATA
ENOTBLK
ENOSYS
EPIPE
EINVAL
EOVERFLOW
EINTR
EUSERS
ENOTEMPTY
ENOBUFS
EPROTO
EREMOTE
ECHILD
ELOOP
EXDEV
E2BIG
ESRCH
EMSGSIZE
EAFNOSUPPORT
EHOSTDOWN
EPFNOSUPPORT
ENOPROTOOPT
EBUSY
EWOULDBLOCK
EISCONN
ESHUTDOWN
EBADF
EMULTIHOP
EPROTOTYPE
ENOSPC
ENOEXEC
EALREADY
ENETDOWN
EACCES
EILSEQ
ENOTDIR
EPERM
EDOM
ECONNREFUSED
EISDIR
EPROTONOSUPPORT
EROFS
EADDRNOTAVAIL
EIDRM
EBADMSG
ENFILE
ESPIPE
ENOLINK
ENETRESET
ETIMEDOUT
ENOENT
EEXIST
EDQUOT
ENOSTR
EFAULT
EFBIG
EDEADLK
ENOTCONN
EDESTADDRREQ
ENOLCK
ECONNABORTED
ENETUNREACH
ESTALE
ENOSR
ENOMEM
ENOTSOCK
EMLINK
ERANGE
ECONNRESET
EADDRINUSE
EOPNOTSUPP
EAGAIN
ENAMETOOLONG
ENOTTY
ESOCKTNOSUPPORT
ETIME
ETOOMANYREFS
EMFILE
ETXTBSY
EINPROGRESS
ENXIO
ECANCELED
EOWNERDEAD
ENOTRECOVERABLE
ENOTSUP
EAUTH
EBADARCH
EBADEXEC
EBADMACHO
EBADRPC
EDEVERR
EFTYPE
ENEEDAUTH
ENOATTR
ENOPOLICY
EPROCLIM
EPROCUNAVAIL
EPROGMISMATCH
EPROGUNAVAIL
EPWROFF
ERPCMISMATCH
ESHLIBVERS
struct_passwd
getpwuid
getpwnam
getpwall
getpwuid(): uid not found
getpwuid(): uid not found: %S
getpwnam(): name not found: %R
pwd.struct_passwd
pw_name
user name
pw_passwd
password
pw_uid
user id
pw_gid
group id
pw_gecos
real name
pw_dir
home directory
pw_shell
shell program
MAGIC
CODESIZE
MAXREPEAT
MAXGROUPS
re.Pattern
re.TEMPLATE
re.IGNORECASE
re.LOCALE
re.MULTILINE
re.DOTALL
re.UNICODE
re.VERBOSE
re.DEBUG
re.ASCII
0x%x
re.compile(%.200R, %S)
re.compile(%.200R)
fullmatch
search
subn
findall
finditer
scanner
__copy__
__deepcopy__
string
endpos
cannot use a string pattern on a bytes-like object
cannot use a bytes pattern on a string-like object
expected string or bytes-like object
Buffer is NULL
maximum recursion limit exceeded
internal error in regular expression engine
repl
_subx
pattern
The pattern string from which the RE object was compiled.
The regex matching flags.
groups
The number of capturing groups in the pattern.
groupindex
A dictionary mapping group names to group numbers.
re.Match
<%s object; span=(%zd, %zd), match=%.50R>
no such group
group
span
groupdict
expand
template
_expand
The string passed to match() or search().
The regular expression object.
The index into the string at which the RE engine started looking for a match.
The index into the string beyond which the RE engine will not go.
lastindex
The integer index of the last matched capturing group.
lastgroup
The name of the last matched capturing group.
regs
_sre.SRE_Scanner
getcodesize
ascii_iscased
unicode_iscased
ascii_tolower
unicode_tolower
indexgroup
argument 'groupindex'
argument 'indexgroup'
regular expression code size limit exceeded
invalid SRE code
register
lookup
escape_encode
escape_decode
utf_8_encode
utf_8_decode
utf_7_encode
utf_7_decode
utf_16_encode
utf_16_le_encode
utf_16_be_encode
utf_16_decode
utf_16_le_decode
utf_16_be_decode
utf_16_ex_decode
utf_32_encode
utf_32_le_encode
utf_32_be_encode
utf_32_decode
utf_32_le_decode
utf_32_be_decode
utf_32_ex_decode
unicode_escape_encode
unicode_escape_decode
raw_unicode_escape_encode
raw_unicode_escape_decode
latin_1_encode
latin_1_decode
ascii_encode
ascii_decode
charmap_encode
charmap_decode
charmap_build
readbuffer_encode
register_error
lookup_error
_forget_codec
string is too large to encode
Weak-reference support module.
getweakrefcount
_remove_dead_weakref
getweakrefs
proxy
not a weakref
ReferenceType
ProxyType
CallableProxyType
reduce
cmp_to_key
reduce() arg 2 must support iteration
reduce() of empty sequence with no initial value
mycmp
O:cmp_to_key
functools.KeyWrapper
other argument must be K instance
Value wrapped by a key function.
functools.partial
%U, %R
%U, %S=%R
%s(%R%U)
O(O)(OOOO)
invalid partial state
function object to use in future partial calls
tuple of arguments to future partial calls
dictionary of keyword arguments to future partial calls
type 'partial' takes at least one argument
the first argument must be callable
functools._lru_cache_wrapper
cache_info
cache_clear
nnOn
nnnn
user_function
typed
cache_info_type
OOpO:lru_cache
maxsize should be integer or None
functools._lru_list_elem
truth
contains
indexOf
countOf
is_not
matmul
floordiv
truediv
invert
lshift
rshift
not_
and_
iadd
isub
imul
imatmul
ifloordiv
itruediv
imod
ilshift
irshift
iand
ixor
concat
iconcat
getitem
setitem
delitem
ipow
_compare_digest
length_hint
comparing strings with non-ASCII characters is not supported
unsupported operand types(s) or combination of types: '%.100s' and '%.100s'
Buffer must be single dimension
operator.itemgetter
itemgetter
O(O)
operator.attrgetter
attrgetter
attribute name must be a string
operator.methodcaller
keywords dict changed size during iteration
%s(%R, %U)
methodcaller
partial
functools
methodcaller needs at least one argument, the method name
method name must be a string
_count_elements
collections.deque
%s(%R, maxlen=%zd)
can only concatenate deque (not "%.200s") to deque
%.200s() must return a deque, not %.200s
pop from an empty deque
deque index out of range
deque mutated during iteration
appendleft
extendleft
popleft
rotate
O|O&O&:index
%R is not in deque
nO:insert
deque already at its maximum size
O()NN
O(()n)NN
deque mutated during remove().
deque.remove(x): x not in deque
|n:rotate
maxlen
maximum size of a deque or None if unbounded
|OO:deque
maxlen must be non-negative
collections.defaultdict
%s(%U, %U)
default_factory
Factory for default value called by __missing__().
first argument must be callable or None
_collections._deque_iterator
O!|n
_collections._deque_reverse_iterator
_collections._tuplegetter
%s(%zd, %R)
(O(nO))
descriptor for index '%zd' for tuple subclasses doesn't apply to '%s' object
_tuplegetter
get_cache_token
_abc_init
_reset_registry
_reset_caches
_get_dump
_abc_register
_abc_instancecheck
_abc_subclasscheck
items() returned non-iterable
items() returned item which size is not 2
__bases__ is not tuple
_abc_impl
_abc_impl is set to a wrong type
NNNK
Can only register classes
Refusing to create an inheritance cycle
_destroy
__subclasshook__ must return either False, True, or NotImplemented
__subclasses__() must return a list
_abc._abc_data
n must be >= 0
itertools._tee
cannot re-enter the tee iterator
O(())(Oi)
state is not a tuple
Index out of range
itertools._tee_dataobject
O(ONO)
teedataobject
Invalid arguments
_tee
itertools.accumulate
(O)O
O(NO)O
O(NiO)
O(OO)O
initial
accumulate
itertools.combinations
O(()n)
O(On)N
invalid arguments
combinations
r must be non-negative
itertools.combinations_with_replacement
combinations_with_replacement
itertools.cycle
O(N)(OO)
O(O)(OO)
cycle
itertools.dropwhile
O(OO)l
dropwhile
itertools.takewhile
takewhile
itertools.islice
O(Nn)n
O(OnNn)n
islice
Stop argument for islice() must be None or an integer: 0 <= x <= sys.maxsize.
Indices for islice() must be None or an integer: 0 <= x <= sys.maxsize.
Step for islice() must be a positive integer or None.
itertools.starmap
starmap
itertools.chain
from_iterable
O()(OO)
O()(O)
Arguments must be iterators.
chain
itertools.compress
data
selectors
compress
itertools.filterfalse
filterfalse
itertools.count
%s(%zd)
%s(%R, %R)
O(n)
a number is required
itertools.zip_longest
fillvalue
zip_longest() got an unexpected keyword argument
itertools.permutations
O(On)(NN)
O!O!
permutations
Expected int as r
itertools.product
repeat
|n:product
repeat argument cannot be negative
repeat argument too large
itertools.repeat
%s(%R, %zd)
len() of unsized object
O|n:repeat
itertools.groupby
O(OO)(OOO)
groupby
itertools._grouper
_grouper
_clear
unregister
_run_exitfuncs
_ncallbacks
register() takes at least 1 argument (0 given)
Error in atexit._run_exitfuncs:
SIG_DFL
SIG_IGN
NSIG
SIG_BLOCK
SIG_UNBLOCK
SIG_SETMASK
default_int_handler
SIGHUP
SIGINT
SIGQUIT
SIGILL
SIGTRAP
SIGIOT
SIGABRT
SIGEMT
SIGFPE
SIGKILL
SIGBUS
SIGSEGV
SIGSYS
SIGPIPE
SIGALRM
SIGTERM
SIGUSR1
SIGUSR2
SIGCHLD
SIGIO
SIGURG
SIGWINCH
SIGSTOP
SIGTSTP
SIGCONT
SIGTTIN
SIGTTOU
SIGVTALRM
SIGPROF
SIGXCPU
SIGXFSZ
SIGINFO
ITIMER_REAL
ITIMER_VIRTUAL
ITIMER_PROF
signal.ItimerError
ItimerError
Signal %i ignored due to race condition
_PyOS_InterruptOccurred
alarm
setitimer
getitimer
raise_signal
strsignal
getsignal
set_wakeup_fd
siginterrupt
pause
pthread_kill
pthread_sigmask
sigpending
sigwait
valid_signals
signal only works in main thread of the main interpreter
signal number out of range
signal handler must be signal.SIG_IGN, signal.SIG_DFL, or a callable object
Unknown signal
warn_on_full_buffer
i|$p:set_wakeup_fd
set_wakeup_fd only works in main thread of the main interpreter
the fd %i must be in non-blocking mode
signal.pthread_kill
Exception ignored when trying to write to the signal wakeup fd:
S_ISDIR
S_ISCHR
S_ISBLK
S_ISREG
S_ISFIFO
S_ISLNK
S_ISSOCK
S_ISDOOR
S_ISPORT
S_ISWHT
S_IMODE
S_IFMT
filemode
mode out of range
S_IFDIR
S_IFCHR
S_IFBLK
S_IFREG
S_IFIFO
S_IFLNK
S_IFSOCK
S_IFDOOR
S_IFPORT
S_IFWHT
S_ISUID
S_ISGID
S_ISVTX
S_ENFMT
S_IREAD
S_IWRITE
S_IEXEC
S_IRWXU
S_IRUSR
S_IWUSR
S_IXUSR
S_IRWXG
S_IRGRP
S_IWGRP
S_IXGRP
S_IRWXO
S_IROTH
S_IWOTH
S_IXOTH
UF_NODUMP
UF_IMMUTABLE
UF_APPEND
UF_OPAQUE
UF_NOUNLINK
UF_COMPRESSED
UF_HIDDEN
SF_ARCHIVED
SF_IMMUTABLE
SF_APPEND
SF_NOUNLINK
SF_SNAPSHOT
ST_MODE
ST_INO
ST_DEV
ST_NLINK
ST_UID
ST_GID
ST_SIZE
ST_ATIME
ST_MTIME
ST_CTIME
time_ns
clock_gettime
clock_gettime_ns
clock_settime
clock_settime_ns
clock_getres
sleep
gmtime
localtime
asctime
ctime
mktime
strftime
strptime
tzset
monotonic
monotonic_ns
process_time
process_time_ns
thread_time
thread_time_ns
perf_counter
perf_counter_ns
get_clock_info
i:clock_gettime
iO:clock_settime
i:clock_getres
sleep length must be non-negative
|O:gmtime
|O:localtime
iiiiiiiii;asctime(): illegal time tuple argument
Tuple or struct_time argument required
year out of range
month out of range
day of month out of range
hour out of range
minute out of range
seconds out of range
day of week out of range
day of year out of range
%s %s%3d %.2d:%.2d:%.2d %d
|O:ctime
iiiiiiiii;mktime(): illegal time tuple argument
mktime argument out of range
U|O:strftime
iiiiiiiii;strftime(): illegal time tuple argument
_strptime_time
_strptime
invalid GMT offset
timezone
altzone
daylight
(zz)
tzname
clock_gettime(CLOCK_PROCESS_CPUTIME_ID)
getrusage(RUSAGE_SELF)
_SC_CLK_TCK is too large
times()
clock()
the processor time used is not available or its value cannot be represented
clock_gettime(CLOCK_THREAD_CPUTIME_ID)
s:get_clock_info
unknown clock
adjustable
resolution
CLOCK_REALTIME
CLOCK_MONOTONIC
CLOCK_MONOTONIC_RAW
CLOCK_PROCESS_CPUTIME_ID
CLOCK_THREAD_CPUTIME_ID
CLOCK_UPTIME_RAW
_STRUCT_TM_ITEMS
struct_time
time.struct_time
The time value as returned by gmtime(), localtime(), and strptime(), and
 accepted by asctime(), mktime() and strftime().  May be considered as a
 sequence of 9 integers.
 Note that several fields' values are not the same as those defined by
 the C language standard for struct tm.  For example, the value of the
 field tm_year is the actual year, not year - 1900.  See individual
 fields' descriptions for details.
tm_year
year, for example, 1993
tm_mon
month of year, range [1, 12]
tm_mday
day of month, range [1, 31]
tm_hour
hours, range [0, 23]
tm_min
minutes, range [0, 59]
tm_sec
seconds, range [0, 61])
tm_wday
day of week, range [0, 6], Monday is 0
tm_yday
day of year, range [1, 366]
tm_isdst
1 if summer time is in effect, 0 if not, and -1 if unknown
tm_zone
abbreviation of timezone name
tm_gmtoff
offset from UTC in seconds
TIMEOUT_MAX
LockType
RLock
_local
_ExceptHookArgs
_thread._localdummy
Thread-local dummy
_thread._local
Thread-local data
Couldn't get thread-state dictionary
_localdummy_destroyed
Initialization arguments are not supported
thread.local.%p
_thread.lock
<%s %s object at %p>
locked
unlocked
acquire
locked_lock
_at_fork_reinit
blocking
timeout
|iO:acquire
can't specify a timeout for a non-blocking call
timeout value must be positive
timeout value is too large
release unlocked lock
failed to reinitialize lock at fork
_thread.RLock
<%s %s object owner=%ld count=%lu at %p>
_is_owned
_acquire_restore
_release_save
Internal lock count overflowed
cannot release un-acquired lock
(kk):_acquire_restore
couldn't acquire lock
_thread.ExceptHookArgs
thread
Thread
start_new_thread
start_new
allocate_lock
allocate
exit_thread
interrupt_main
get_ident
get_native_id
_count
stack_size
_set_sentinel
_excepthook
first arg must be callable
2nd arg must be a tuple
optional 3rd arg must be a dictionary
thread is not supported for isolated subinterpreters
can't start new thread
in thread started by
no current thread ident
|n:stack_size
size must be 0 or a positive value
size not valid: %zd bytes
setting stack size not supported
_thread.excepthook argument type must be ExceptHookArgs
_stderr
Exception in thread 
<failed to get thread name>
setlocale
localeconv
strcoll
strxfrm
nl_langinfo
i|z:setlocale
unsupported locale setting
locale query failed
mon_grouping
positive_sign
negative_sign
int_frac_digits
frac_digits
p_cs_precedes
p_sep_by_space
n_cs_precedes
n_sep_by_space
p_sign_posn
n_sign_posn
decimal_point
thousands_sep
grouping
int_curr_symbol
currency_symbol
mon_decimal_point
mon_thousands_sep
UU:strcoll
U:strxfrm
i:nl_langinfo
unsupported langinfo constant
DAY_1
DAY_2
DAY_3
DAY_4
DAY_5
DAY_6
DAY_7
ABDAY_1
ABDAY_2
ABDAY_3
ABDAY_4
ABDAY_5
ABDAY_6
ABDAY_7
MON_1
MON_2
MON_3
MON_4
MON_5
MON_6
MON_7
MON_8
MON_9
MON_10
MON_11
MON_12
ABMON_1
ABMON_2
ABMON_3
ABMON_4
ABMON_5
ABMON_6
ABMON_7
ABMON_8
ABMON_9
ABMON_10
ABMON_11
ABMON_12
RADIXCHAR
THOUSEP
CRNCYSTR
D_T_FMT
D_FMT
T_FMT
AM_STR
PM_STR
CODESET
T_FMT_AMPM
ERA_D_FMT
ERA_D_T_FMT
ERA_T_FMT
ALT_DIGITS
YESEXPR
NOEXPR
LC_TIME
LC_COLLATE
LC_MONETARY
LC_MESSAGES
LC_NUMERIC
CHAR_MAX
locale.Error
cannot fit '%.200s' into an offset-sized integer
could not find io module state (interpreter shutdown?)
_bootlocale
DEFAULT_BUFFER_SIZE
s(OO){}
UnsupportedOperation
getstate
newlines
peek
read1
readable
readall
seek
seekable
setstate
tell
writable
open_code
buffering
newline
closefd
opener
argument 'newline'
_blksize
invalid file: %R
invalid mode: '%s'
mode U cannot be combined with 'x', 'w', 'a', or '+'
'U' mode is deprecated
can't have text and binary mode at once
must have exactly one of create/read/write/append mode
binary mode doesn't take an encoding argument
binary mode doesn't take an errors argument
binary mode doesn't take a newline argument
line buffering (buffering=1) isn't supported in binary mode, the default buffer size will be used
OsOO
invalid buffering size
can't have unbuffered text I/O
unknown mode: '%s'
OsssO
argument 'path'
File or stream is not seekable.
File or stream is not readable.
File or stream is not writable.
_io._IOBase
_io._RawIOBase
I/O operation on closed file.
_checkClosed
_checkSeekable
_checkReadable
_checkWritable
readlines
writelines
__IOBase_closed
peek() should have returned a bytes object, not '%.200s'
read() should have returned a bytes object, not '%.200s'
_finalizing
read() should return bytes
_io.FileIO
<_io.FileIO [closed]>
<_io.FileIO fd=%d mode='%s' closefd=%s>
<_io.FileIO name=%R mode='%s' closefd=%s>
reentrant call inside %s.__repr__
_dealloc_warn
reading
I/O operation on closed file
File not open for %s
unbounded read returned more bytes than a Python bytes object can hold
writing
unclosed file %R
True if the file descriptor will be closed by close().
FileIO
negative file descriptor
Must have exactly one of create/read/write/append mode and at most one plus
invalid mode: %.200s
Cannot use closefd=False with file name
expected integer from opener
opener returned %d
_io.BytesIO
_io._BytesIOBuffer
deallocated BytesIO object has exported buffers
getbuffer
getvalue
new buffer size too large
integer argument expected, got '%s'
negative seek value %zd
new position too large
invalid whence (%i, should be 0, 1 or 2)
negative size value %zd
(OnN)
%.200s.__setstate__ argument should be 3-tuple, got %.200s
second item of state must be an integer, not %.200s
position value cannot be negative
third item of state should be a dict, got a %.200s
True if the file is closed.
initial_bytes
BytesIO
bytesiobuf_getbuffer: view==NULL argument is obsolete
_io._BufferedIOBase
_io.BufferedReader
_io.BufferedWriter
_io.BufferedRWPair
_io.BufferedRandom
detach
readinto1
<%s>
<%s name=%R>
raw stream has been detached
I/O operation on uninitialized object
readline() should have returned a bytes object, not '%.200s'
readline of closed file
reentrant call inside %R
_enter_buffered_busy
could not acquire lock for %s at interpreter shutdown, possibly due to daemon threads
<ascii(self) failed>
write could not complete without blocking
raw write() returned invalid length %zd (should have been between 0 and %zd)
Raw stream returned invalid position %zd
raw readinto() returned invalid length %zd (should have been between 0 and %zd)
read length must be non-negative or -1
read of closed file
readall() should return bytes
peek of closed file
readinto of closed file
whence value %d unsupported
seek of closed file
truncate of closed file
buffer_size
BufferedReader
buffer size must be strictly positive
can't allocate read lock
write to closed file
flush of closed file
BufferedWriter
the BufferedRWPair object is being garbage-collected
BufferedRWPair
BufferedRandom
_io._TextIOBase
IncrementalNewlineDecoder.__init__ not called
_io.IncrementalNewlineDecoder
_io.TextIOWrapper
decoder should return a string result, not '%.200s'
illegal decoder state
OK;illegal decoder state
state argument must be a tuple
OK;setstate(): illegal state argument
((OK))
decoder
IncrementalNewlineDecoder
<_io.TextIOWrapper
 name=%R
 mode=%R
%U encoding=%R>
underlying buffer has been detached
readline() should have returned a str object, not '%.200s'
not readable
OO;illegal decoder state
illegal decoder state: the first item should be a bytes object, not '%.200s'
underlying %s() should have returned a bytes-like object, not '%.200s'
reconfigure
line_buffering
write_through
It is not possible to set the encoding or newline of stream after the first read
illegal newline value: %s
codecs.open()
iso8859-1
not writable
encoder should return a bytes object, not '%.200s'
underlying stream is not seekable
can't do nonzero cur-relative seeks
can't do nonzero end-relative seeks
invalid whence (%d, should be %d, %d or %d)
negative seek position %R
underlying read() should have returned a bytes object, not '%.200s'
can't restore logical file position
((yi))
telling position disabled by next() call
Oi;illegal decoder state
can't reconstruct logical file position
_CHUNK_SIZE
a strictly positive integer is required
TextIOWrapper() argument 'errors' must be str or None, not %.50s
could not determine default encoding
embedded null character in errors
getpreferredencoding
_io.StringIO
Negative size value %zd
Invalid whence (%i, should be 0, 1 or 2)
Negative seek position %zd
Can't do nonzero cur-relative seeks
string argument expected, got '%s'
(OOnN)
%.200s.__setstate__ argument should be 4-tuple, got %.200s
third item of state must be an integer, got %.200s
fourth item of state should be a dict, got a %.200s
initial_value
StringIO
newline must be str or None, not %.200s
illegal newline value: %R
initial_value must be str or None, not %.200s
_PyFaulthandler_Init
failed to enable faulthandler
enable(file=sys.stderr, all_threads=True): enable the fault handler
disable(): disable the fault handler
is_enabled
is_enabled()->bool: check if the handler is enabled
dump_traceback
dump_traceback(file=sys.stderr, all_threads=True): dump the traceback of the current thread, or of all threads if all_threads is True, into file
dump_traceback_later
dump_traceback_later(timeout, repeat=False, file=sys.stderrn, exit=False):
dump the traceback of all threads in timeout seconds,
or each timeout seconds if repeat is True. If exit is True, call _exit(1) which is not safe.
cancel_dump_traceback_later
cancel_dump_traceback_later():
cancel the previous call to dump_traceback_later().
register(signum, file=sys.stderr, all_threads=True, chain=False): register a handler for the signal 'signum': dump the traceback of the current thread, or of all threads if all_threads is True, into file
unregister(signum): unregister the handler of the signal 'signum' registered by register()
_read_null
_read_null(): read from NULL, raise a SIGSEGV or SIGBUS signal depending on the platform
_sigsegv
_sigsegv(release_gil=False): raise a SIGSEGV signal
_fatal_error_c_thread
fatal_error_c_thread(): call Py_FatalError() in a new C thread.
_sigabrt
_sigabrt(): raise a SIGABRT signal
_sigfpe
_sigfpe(): raise a SIGFPE signal
_fatal_error
_fatal_error(message): call Py_FatalError(message)
_stack_overflow
_stack_overflow(): recursive call to raise a stack overflow
all_threads
|Oi:enable
unable to get sys.stderr
sys.stderr is None
file is not a valid file descripter
file.fileno() is not a valid file descriptor
unable to get the current thread state
Bus error
Illegal instruction
Floating point exception
Aborted
Segmentation fault
|Oi:dump_traceback
O|iOi:dump_traceback_later
timeout must be greater than 0
unable to start watchdog thread
Timeout (%lu:%02lu:%02lu.%06u)!
Timeout (%lu:%02lu:%02lu)!
signum
i|Oii:register
signal %i cannot be registered, use enable() instead
i:unregister
|i:_sigsegv
unable to start the thread
faulthandler_fatal_error_thread
in new thread
y|i:fatal_error
faulthandler_fatal_error_py
unable to raise a stack overflow (allocated %zu bytes on the stack, %zu recursive calls)
Enable tracemalloc to get the memory block allocation traceback
Memory block allocated at (most recent call first):
  File "
", line 
is_tracing
clear_traces
_get_traces
_get_object_traceback
get_traceback_limit
get_tracemalloc_memory
get_traced_memory
reset_peak
the tracemalloc module has been unloaded
cannot allocate lock
the number of frames must be in range [1; %lu]
tracemalloc_realloc
tracemalloc_realloc() failed to allocate a trace
oldparser
s|ssp
mode must be either 'exec' or 'eval' or 'single'
s|sspp
peg_parser
A parser.
parse_string
Parse a string, return an AST.
compile_string
Compile a string, return a code object.
DEF_GLOBAL
DEF_NONLOCAL
DEF_LOCAL
DEF_PARAM
DEF_FREE
DEF_FREE_CLASS
DEF_IMPORT
DEF_BOUND
DEF_ANNOT
TYPE_FUNCTION
TYPE_CLASS
TYPE_MODULE
LOCAL
GLOBAL_EXPLICIT
GLOBAL_IMPLICIT
FREE
CELL
SCOPE_OFF
SCOPE_MASK
symtable
string or bytes
symtable() arg 3 must be 'exec' or 'eval' or 'single'
bench
OU|i
spamlist
spamdict
xxsubtype.spamdict
getstate() -> state
setstate(state)
:getstate
i:setstate
state
an int variable for demonstration purposes
xxsubtype.spamlist
classmeth
classmeth(*args, **kw)
staticmeth
staticmeth(*args, **kw)
_frozen_importlib_external
__hello__
__phello__
__phello__.spam
bool(x) -> bool
Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
B.isspace() -> bool
Return True if all characters in B are whitespace
and there is at least one character in B, False otherwise.
B.isalpha() -> bool
Return True if all characters in B are alphabetic
and there is at least one character in B, False otherwise.
B.isalnum() -> bool
Return True if all characters in B are alphanumeric
and there is at least one character in B, False otherwise.
B.isascii() -> bool
Return True if B is empty or all characters in B are ASCII,
False otherwise.
B.isdigit() -> bool
Return True if all characters in B are digits
and there is at least one character in B, False otherwise.
B.islower() -> bool
Return True if all cased characters in B are lowercase and there is
at least one cased character in B, False otherwise.
B.isupper() -> bool
Return True if all cased characters in B are uppercase and there is
at least one cased character in B, False otherwise.
B.istitle() -> bool
Return True if B is a titlecased string and there is at least one
character in B, i.e. uppercase characters may only follow uncased
characters and lowercase characters only cased ones. Return False
otherwise.
B.lower() -> copy of B
Return a copy of B with all ASCII characters converted to lowercase.
B.upper() -> copy of B
Return a copy of B with all ASCII characters converted to uppercase.
B.title() -> copy of B
Return a titlecased version of B, i.e. ASCII words start with uppercase
characters, all remaining cased characters have lowercase.
B.capitalize() -> copy of B
Return a copy of B with only its first character capitalized (ASCII)
and the rest lower-cased.
B.swapcase() -> copy of B
Return a copy of B with uppercase ASCII characters converted
to lowercase ASCII and vice versa.
B.maketrans(frm, to) -> translation table
Return a translation table (a bytes object of length 256) suitable
for use in the bytes or bytearray translate method where each byte
in frm is mapped to the byte at the same position in to.
The bytes objects frm and to must be of the same length.
B.find(sub[, start[, end]]) -> int
Return the lowest index in B where subsection sub is found,
such that sub is contained within B[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
B.index(sub[, start[, end]]) -> int
Return the lowest index in B where subsection sub is found,
such that sub is contained within B[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Raises ValueError when the subsection is not found.
B.rfind(sub[, start[, end]]) -> int
Return the highest index in B where subsection sub is found,
such that sub is contained within B[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
B.rindex(sub[, start[, end]]) -> int
Return the highest index in B where subsection sub is found,
such that sub is contained within B[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Raise ValueError when the subsection is not found.
B.count(sub[, start[, end]]) -> int
Return the number of non-overlapping occurrences of subsection sub in
bytes B[start:end].  Optional arguments start and end are interpreted
as in slice notation.
B.startswith(prefix[, start[, end]]) -> bool
Return True if B starts with the specified prefix, False otherwise.
With optional start, test B beginning at that position.
With optional end, stop comparing B at that position.
prefix can also be a tuple of bytes to try.
B.endswith(suffix[, start[, end]]) -> bool
Return True if B ends with the specified suffix, False otherwise.
With optional start, test B beginning at that position.
With optional end, stop comparing B at that position.
suffix can also be a tuple of bytes to try.
bytearray(iterable_of_ints) -> bytearray
bytearray(string, encoding[, errors]) -> bytearray
bytearray(bytes_or_buffer) -> mutable copy of bytes_or_buffer
bytearray(int) -> bytes array of size given by the parameter initialized with null bytes
bytearray() -> empty bytes array
Construct a mutable bytearray object from:
  - an iterable yielding integers in range(256)
  - a text string encoded using the specified encoding
  - a bytes or a buffer object
  - any object implementing the buffer API.
  - an integer
B.__alloc__() -> int
Return the number of bytes actually allocated.
__reduce__($self, /)
Return state information for pickling.
__reduce_ex__($self, proto=0, /)
Return state information for pickling.
__sizeof__($self, /)
Returns the size of the bytearray object in memory, in bytes.
append($self, item, /)
Append a single item to the end of the bytearray.
  item
    The item to be appended.
center($self, width, fillchar=b' ', /)
Return a centered string of length width.
Padding is done using the specified fill character.
clear($self, /)
Remove all items from the bytearray.
copy($self, /)
Return a copy of B.
decode($self, /, encoding='utf-8', errors='strict')
Decode the bytearray using the codec registered for encoding.
  encoding
    The encoding with which to decode the bytearray.
  errors
    The error handling scheme to use for the handling of decoding errors.
    The default is 'strict' meaning that decoding errors raise a
    UnicodeDecodeError. Other possible values are 'ignore' and 'replace'
    as well as any other name registered with codecs.register_error that
    can handle UnicodeDecodeErrors.
expandtabs($self, /, tabsize=8)
Return a copy where all tab characters are expanded using spaces.
If tabsize is not given, a tab size of 8 characters is assumed.
extend($self, iterable_of_ints, /)
Append all the items from the iterator or sequence to the end of the bytearray.
  iterable_of_ints
    The iterable of items to append.
fromhex($type, string, /)
Create a bytearray object from a string of hexadecimal numbers.
Spaces between two numbers are accepted.
Example: bytearray.fromhex('B9 01EF') -> bytearray(b'\\xb9\\x01\\xef')
hex($self, /, sep=<unrepresentable>, bytes_per_sep=1)
Create a str of hexadecimal numbers from a bytearray object.
  sep
    An optional single character or byte to separate hex bytes.
  bytes_per_sep
    How many bytes between separators.  Positive values count from the
    right, negative values count from the left.
Example:
>>> value = bytearray([0xb9, 0x01, 0xef])
>>> value.hex()
'b901ef'
>>> value.hex(':')
'b9:01:ef'
>>> value.hex(':', 2)
'b9:01ef'
>>> value.hex(':', -2)
'b901:ef'
insert($self, index, item, /)
Insert a single item into the bytearray before the given index.
  index
    The index where the value is to be inserted.
  item
    The item to be inserted.
join($self, iterable_of_bytes, /)
Concatenate any number of bytes/bytearray objects.
The bytearray whose method is called is inserted in between each pair.
The result is returned as a new bytearray object.
ljust($self, width, fillchar=b' ', /)
Return a left-justified string of length width.
Padding is done using the specified fill character.
lstrip($self, bytes=None, /)
Strip leading bytes contained in the argument.
If the argument is omitted or None, strip leading ASCII whitespace.
maketrans(frm, to, /)
Return a translation table useable for the bytes or bytearray translate method.
The returned table will be one where each byte in frm is mapped to the byte at
the same position in to.
The bytes objects frm and to must be of the same length.
partition($self, sep, /)
Partition the bytearray into three parts using the given separator.
This will search for the separator sep in the bytearray. If the separator is
found, returns a 3-tuple containing the part before the separator, the
separator itself, and the part after it as new bytearray objects.
If the separator is not found, returns a 3-tuple containing the copy of the
original bytearray object and two empty bytearray objects.
pop($self, index=-1, /)
Remove and return a single item from B.
  index
    The index from where to remove the item.
    -1 (the default value) means remove the last item.
If no index argument is given, will pop the last item.
remove($self, value, /)
Remove the first occurrence of a value in the bytearray.
  value
    The value to remove.
replace($self, old, new, count=-1, /)
Return a copy with all occurrences of substring old replaced by new.
  count
    Maximum number of occurrences to replace.
    -1 (the default value) means replace all occurrences.
If the optional argument count is given, only the first count occurrences are
replaced.
removeprefix($self, prefix, /)
Return a bytearray with the given prefix string removed if present.
If the bytearray starts with the prefix string, return
bytearray[len(prefix):].  Otherwise, return a copy of the original
bytearray.
removesuffix($self, suffix, /)
Return a bytearray with the given suffix string removed if present.
If the bytearray ends with the suffix string and that suffix is not
empty, return bytearray[:-len(suffix)].  Otherwise, return a copy of
the original bytearray.
reverse($self, /)
Reverse the order of the values in B in place.
rjust($self, width, fillchar=b' ', /)
Return a right-justified string of length width.
Padding is done using the specified fill character.
rpartition($self, sep, /)
Partition the bytearray into three parts using the given separator.
This will search for the separator sep in the bytearray, starting at the end.
If the separator is found, returns a 3-tuple containing the part before the
separator, the separator itself, and the part after it as new bytearray
objects.
If the separator is not found, returns a 3-tuple containing two empty bytearray
objects and the copy of the original bytearray object.
rsplit($self, /, sep=None, maxsplit=-1)
Return a list of the sections in the bytearray, using sep as the delimiter.
  sep
    The delimiter according which to split the bytearray.
    None (the default value) means split on ASCII whitespace characters
    (space, tab, return, newline, formfeed, vertical tab).
  maxsplit
    Maximum number of splits to do.
    -1 (the default value) means no limit.
Splitting is done starting at the end of the bytearray and working to the front.
rstrip($self, bytes=None, /)
Strip trailing bytes contained in the argument.
If the argument is omitted or None, strip trailing ASCII whitespace.
split($self, /, sep=None, maxsplit=-1)
Return a list of the sections in the bytearray, using sep as the delimiter.
  sep
    The delimiter according which to split the bytearray.
    None (the default value) means split on ASCII whitespace characters
    (space, tab, return, newline, formfeed, vertical tab).
  maxsplit
    Maximum number of splits to do.
    -1 (the default value) means no limit.
splitlines($self, /, keepends=False)
Return a list of the lines in the bytearray, breaking at line boundaries.
Line breaks are not included in the resulting list unless keepends is given and
true.
strip($self, bytes=None, /)
Strip leading and trailing bytes contained in the argument.
If the argument is omitted or None, strip leading and trailing ASCII whitespace.
translate($self, table, /, delete=b'')
Return a copy with each character mapped by the given translation table.
  table
    Translation table, which must be a bytes object of length 256.
All characters occurring in the optional argument delete are removed.
The remaining characters are mapped through the given translation table.
zfill($self, width, /)
Pad a numeric string with zeros on the left, to fill a field of the given width.
The original string is never truncated.
Private method returning an estimate of len(list(it)).
Set state information for unpickling.
bytes(iterable_of_ints) -> bytes
bytes(string, encoding[, errors]) -> bytes
bytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer
bytes(int) -> bytes object of size given by the parameter initialized with null bytes
bytes() -> empty bytes object
Construct an immutable array of bytes from:
  - an iterable yielding integers in range(256)
  - a text string encoded using the specified encoding
  - any object implementing the buffer API.
  - an integer
center($self, width, fillchar=b' ', /)
Return a centered string of length width.
Padding is done using the specified fill character.
decode($self, /, encoding='utf-8', errors='strict')
Decode the bytes using the codec registered for encoding.
  encoding
    The encoding with which to decode the bytes.
  errors
    The error handling scheme to use for the handling of decoding errors.
    The default is 'strict' meaning that decoding errors raise a
    UnicodeDecodeError. Other possible values are 'ignore' and 'replace'
    as well as any other name registered with codecs.register_error that
    can handle UnicodeDecodeErrors.
expandtabs($self, /, tabsize=8)
Return a copy where all tab characters are expanded using spaces.
If tabsize is not given, a tab size of 8 characters is assumed.
fromhex($type, string, /)
Create a bytes object from a string of hexadecimal numbers.
Spaces between two numbers are accepted.
Example: bytes.fromhex('B9 01EF') -> b'\\xb9\\x01\\xef'.
hex($self, /, sep=<unrepresentable>, bytes_per_sep=1)
Create a str of hexadecimal numbers from a bytes object.
  sep
    An optional single character or byte to separate hex bytes.
  bytes_per_sep
    How many bytes between separators.  Positive values count from the
    right, negative values count from the left.
Example:
>>> value = b'\xb9\x01\xef'
>>> value.hex()
'b901ef'
>>> value.hex(':')
'b9:01:ef'
>>> value.hex(':', 2)
'b9:01ef'
>>> value.hex(':', -2)
'b901:ef'
join($self, iterable_of_bytes, /)
Concatenate any number of bytes objects.
The bytes whose method is called is inserted in between each pair.
The result is returned as a new bytes object.
Example: b'.'.join([b'ab', b'pq', b'rs']) -> b'ab.pq.rs'.
ljust($self, width, fillchar=b' ', /)
Return a left-justified string of length width.
Padding is done using the specified fill character.
lstrip($self, bytes=None, /)
Strip leading bytes contained in the argument.
If the argument is omitted or None, strip leading  ASCII whitespace.
maketrans(frm, to, /)
Return a translation table useable for the bytes or bytearray translate method.
The returned table will be one where each byte in frm is mapped to the byte at
the same position in to.
The bytes objects frm and to must be of the same length.
partition($self, sep, /)
Partition the bytes into three parts using the given separator.
This will search for the separator sep in the bytes. If the separator is found,
returns a 3-tuple containing the part before the separator, the separator
itself, and the part after it.
If the separator is not found, returns a 3-tuple containing the original bytes
object and two empty bytes objects.
replace($self, old, new, count=-1, /)
Return a copy with all occurrences of substring old replaced by new.
  count
    Maximum number of occurrences to replace.
    -1 (the default value) means replace all occurrences.
If the optional argument count is given, only the first count occurrences are
replaced.
removeprefix($self, prefix, /)
Return a bytes object with the given prefix string removed if present.
If the bytes starts with the prefix string, return bytes[len(prefix):].
Otherwise, return a copy of the original bytes.
removesuffix($self, suffix, /)
Return a bytes object with the given suffix string removed if present.
If the bytes ends with the suffix string and that suffix is not empty,
return bytes[:-len(prefix)].  Otherwise, return a copy of the original
bytes.
rjust($self, width, fillchar=b' ', /)
Return a right-justified string of length width.
Padding is done using the specified fill character.
rpartition($self, sep, /)
Partition the bytes into three parts using the given separator.
This will search for the separator sep in the bytes, starting at the end. If
the separator is found, returns a 3-tuple containing the part before the
separator, the separator itself, and the part after it.
If the separator is not found, returns a 3-tuple containing two empty bytes
objects and the original bytes object.
rsplit($self, /, sep=None, maxsplit=-1)
Return a list of the sections in the bytes, using sep as the delimiter.
  sep
    The delimiter according which to split the bytes.
    None (the default value) means split on ASCII whitespace characters
    (space, tab, return, newline, formfeed, vertical tab).
  maxsplit
    Maximum number of splits to do.
    -1 (the default value) means no limit.
Splitting is done starting at the end of the bytes and working to the front.
rstrip($self, bytes=None, /)
Strip trailing bytes contained in the argument.
If the argument is omitted or None, strip trailing ASCII whitespace.
split($self, /, sep=None, maxsplit=-1)
Return a list of the sections in the bytes, using sep as the delimiter.
  sep
    The delimiter according which to split the bytes.
    None (the default value) means split on ASCII whitespace characters
    (space, tab, return, newline, formfeed, vertical tab).
  maxsplit
    Maximum number of splits to do.
    -1 (the default value) means no limit.
splitlines($self, /, keepends=False)
Return a list of the lines in the bytes, breaking at line boundaries.
Line breaks are not included in the resulting list unless keepends is given and
true.
strip($self, bytes=None, /)
Strip leading and trailing bytes contained in the argument.
If the argument is omitted or None, strip leading and trailing ASCII whitespace.
translate($self, table, /, delete=b'')
Return a copy with each character mapped by the given translation table.
  table
    Translation table, which must be a bytes object of length 256.
All characters occurring in the optional argument delete are removed.
The remaining characters are mapped through the given translation table.
zfill($self, width, /)
Pad a numeric string with zeros on the left, to fill a field of the given width.
The original string is never truncated.
Private method returning an estimate of len(list(it)).
Return state information for pickling.
Set state information for unpickling.
Capsule objects let you wrap a C "void *" pointer in a Python
object.  They're a way of passing data through the Python interpreter
without creating your own custom type.
Capsules are used for communication between extension modules.
They provide a way for an extension module to export a C interface
to other extension modules, so that extension modules can use the
Python import mechanism to link to one another.
cell([contents])
Create a new cell object.
  contents
    the contents of the cell. If not specified, the cell will be empty,
    and 
 further attempts to access its cell_contents attribute will
    raise a ValueError.
method(function, instance)
Create a bound instance method object.
instancemethod(function)
Bind a function to a class.
code(argcount, posonlyargcount, kwonlyargcount, nlocals, stacksize,
      flags, codestring, constants, names, varnames, filename, name,
      firstlineno, lnotab[, freevars[, cellvars]])
Create a code object.  Not for the faint of heart.
replace($self, /, *, co_argcount=-1, co_posonlyargcount=-1,
        co_kwonlyargcount=-1, co_nlocals=-1, co_stacksize=-1,
        co_flags=-1, co_firstlineno=-1, co_code=None, co_consts=None,
        co_names=None, co_varnames=None, co_freevars=None,
        co_cellvars=None, co_filename=None, co_name=None,
        co_lnotab=None)
Return a copy of the code object with new values for the specified fields.
complex(real=0, imag=0)
Create a complex number from a real part and an optional imaginary part.
This is equivalent to (real + imag*1j) where imag defaults to 0.
complex.conjugate() -> complex
Return the complex conjugate of its argument. (3-4j).conjugate() == 3+4j.
complex.__format__() -> str
Convert to a string according to format_spec.
property(fget=None, fset=None, fdel=None, doc=None)
Property attribute.
  fget
    function to be used for getting an attribute value
  fset
    function to be used for setting an attribute value
  fdel
    function to be used for del'ing an attribute
  doc
    docstring
Typical use is to define a managed attribute x:
class C(object):
    def getx(self): return self._x
    def setx(self, value): self._x = value
    def delx(self): del self._x
    x = property(getx, setx, delx, "I'm the 'x' property.")
Decorators make defining new properties or modifying existing ones easy:
class C(object):
    @property
    def x(self):
        "I am the 'x' property."
        return self._x
    @x.setter
    def x(self, value):
        self._x = value
    @x.deleter
    def x(self):
        del self._x
Descriptor to change the getter on a property.
Descriptor to change the setter on a property.
Descriptor to change the deleter on a property.
enumerate(iterable, start=0)
Return an enumerate object.
  iterable
    an object supporting iteration
The enumerate object yields pairs containing a count (from start, which
defaults to zero) and a value yielded by the iterable argument.
enumerate is useful for obtaining an indexed list:
    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...
reversed(sequence, /)
Return a reverse iterator over the values of the given sequence.
Return state information for pickling.
Private method returning an estimate of len(list(it)).
Set state information for unpickling.
Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
send(arg) -> send 'arg' into generator,
return next yielded value or raise StopIteration.
throw(typ[,val[,tb]]) -> raise exception in generator,
return next yielded value or raise StopIteration.
close() -> raise GeneratorExit inside generator.
send(arg) -> send 'arg' into coroutine,
return next iterated value or raise StopIteration.
throw(typ[,val[,tb]]) -> raise exception in coroutine,
return next iterated value or raise StopIteration.
close() -> raise GeneratorExit inside coroutine.
asend(v) -> send 'v' in generator.
athrow(typ[,val[,tb]]) -> raise exception in generator.
aclose() -> raise GeneratorExit inside generator.
float(x=0, /)
Convert a string or number to a floating point number, if possible.
conjugate($self, /)
Return self, the complex conjugate of any float.
__trunc__($self, /)
Return the Integral closest to x between 0 and x.
__floor__($self, /)
Return the floor as an Integral.
__ceil__($self, /)
Return the ceiling as an Integral.
__round__($self, ndigits=None, /)
Return the Integral closest to x, rounding half toward even.
When an argument is passed, work like built-in round(x, ndigits).
as_integer_ratio($self, /)
Return integer ratio.
Return a pair of integers, whose ratio is exactly equal to the original float
and with a positive denominator.
Raise OverflowError on infinities and a ValueError on NaNs.
>>> (10.0).as_integer_ratio()
(10, 1)
>>> (0.0).as_integer_ratio()
(0, 1)
>>> (-.25).as_integer_ratio()
(-1, 4)
fromhex($type, string, /)
Create a floating-point number from a hexadecimal string.
>>> float.fromhex('0x1.ffffp10')
2047.984375
>>> float.fromhex('-0x1p-1074')
-5e-324
hex($self, /)
Return a hexadecimal representation of a floating-point number.
>>> (-0.1).hex()
'-0x1.999999999999ap-4'
>>> 3.14159.hex()
'0x1.921f9f01b866ep+1'
is_integer($self, /)
Return True if the float is an integer.
__getnewargs__($self, /)
__getformat__($type, typestr, /)
You probably don't want to use this function.
  typestr
    Must be 'double' or 'float'.
It exists mainly to be used in Python's test suite.
This function returns whichever of 'unknown', 'IEEE, big-endian' or 'IEEE,
little-endian' best describes the format of floating point numbers used by the
C type named by typestr.
__set_format__($type, typestr, fmt, /)
You probably don't want to use this function.
  typestr
    Must be 'double' or 'float'.
  fmt
    Must be one of 'unknown', 'IEEE, big-endian' or 'IEEE, little-endian',
    and in addition can only be one of the latter two if it appears to
    match the underlying C reality.
It exists mainly to be used in Python's test suite.
Override the automatic determination of C-level floating point type.
This affects how floats are converted to and from binary strings.
__format__($self, format_spec, /)
Formats the float according to format_spec.
sys.float_info
A named tuple holding information about the float type. It contains low level
information about the precision and internal representation. Please study
your system's :file:`float.h` for more information.
F.clear(): clear most references held by the frame
F.__sizeof__() -> size of F in memory, in bytes
function(code, globals, name=None, argdefs=None, closure=None)
Create a function object.
  code
    a code object
  globals
    the globals dictionary
  name
    a string that overrides the name from the code object
  argdefs
    a tuple that specifies the default argument values
  closure
    a tuple that supplies the bindings for free variables
classmethod(function) -> method
Convert a function to be a class method.
A class method receives the class as implicit first argument,
just like an instance method receives the instance.
To declare a class method, use this idiom:
  class C:
      @classmethod
      def f(cls, arg1, arg2, ...):
          ...
It can be called either on the class (e.g. C.f()) or on an instance
(e.g. C().f()).  The instance is ignored except for its class.
If a class method is called for a derived class, the derived class
object is passed as the implied first argument.
Class methods are different than C++ or Java static methods.
If you want those, see the staticmethod builtin.
staticmethod(function) -> method
Convert a function to be a static method.
A static method does not receive an implicit first argument.
To declare a static method, use this idiom:
     class C:
         @staticmethod
         def f(arg1, arg2, ...):
             ...
It can be called either on the class (e.g. C.f()) or on an instance
(e.g. C().f()). Both the class and the instance are ignored, and
neither is passed implicitly as the first argument to the method.
Static methods in Python are similar to those found in Java or C++.
For a more advanced concept, see the classmethod builtin.
A interpreter ID identifies a interpreter and may be used as an int.
Private method returning an estimate of len(list(it)).
Return state information for pickling.
Set state information for unpickling.
list(iterable=(), /)
Built-in mutable sequence.
If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.
__reversed__($self, /)
Return a reverse iterator over the list.
__sizeof__($self, /)
Return the size of the list in memory, in bytes.
clear($self, /)
Remove all items from list.
copy($self, /)
Return a shallow copy of the list.
append($self, object, /)
Append object to the end of the list.
insert($self, index, object, /)
Insert object before index.
extend($self, iterable, /)
Extend list by appending elements from the iterable.
pop($self, index=-1, /)
Remove and return item at index (default last).
Raises IndexError if list is empty or index is out of range.
remove($self, value, /)
Remove first occurrence of value.
Raises ValueError if the value is not present.
index($self, value, start=0, stop=sys.maxsize, /)
Return first index of value.
Raises ValueError if the value is not present.
count($self, value, /)
Return number of occurrences of value.
reverse($self, /)
Reverse *IN PLACE*.
sort($self, /, *, key=None, reverse=False)
Sort the list in ascending order and return None.
The sort is in-place (i.e. the list itself is modified) and stable (i.e. the
order of two equal elements is maintained).
If a key function is given, apply it once to each list item and sort them,
ascending or descending, according to their function values.
The reverse flag can be set to sort in descending order.
Private method returning an estimate of len(list(it)).
Return state information for pickling.
Set state information for unpickling.
00000000
0000
int([x]) -> integer
int(x, base=10) -> integer
Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.
If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
bit_length($self, /)
Number of bits necessary to represent self in binary.
>>> bin(37)
'0b100101'
>>> (37).bit_length()
to_bytes($self, /, length, byteorder, *, signed=False)
Return an array of bytes representing an integer.
  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.
from_bytes($type, /, bytes, byteorder, *, signed=False)
Return the integer represented by the given array of bytes.
  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.
as_integer_ratio($self, /)
Return integer ratio.
Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.
>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)
__getnewargs__($self, /)
__format__($self, format_spec, /)
__sizeof__($self, /)
Returns size in memory, in bytes.
sys.int_info
A named tuple that holds information about Python's
internal representation of integers.  The attributes are read only.
dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)
__contains__($self, key, /)
True if the dictionary has the specified key, else False.
x.__getitem__(y) <==> x[y]
D.__sizeof__() -> size of D in memory, in bytes
get($self, key, default=None, /)
Return the value for key if key is in the dictionary, else default.
setdefault($self, key, default=None, /)
Insert key with a value of default if key is not in the dictionary.
Return the value for key if key is in the dictionary, else default.
pop($self, key, default=<unrepresentable>, /)
D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
If key is not found, default is returned if given, otherwise KeyError is raised
popitem($self, /)
Remove and return a (key, value) pair as a 2-tuple.
Pairs are returned in LIFO (last-in, first-out) order.
Raises KeyError if the dict is empty.
D.keys() -> a set-like object providing a view on D's keys
D.items() -> a set-like object providing a view on D's items
D.values() -> an object providing a view on D's values
D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
In either case, this is followed by: for k in F:  D[k] = F[k]
fromkeys($type, iterable, value=None, /)
Create a new dictionary with keys from iterable and values set to value.
D.clear() -> None.  Remove all items from D.
D.copy() -> a shallow copy of D
__reversed__($self, /)
Return a reverse iterator over the dict keys.
Private method returning an estimate of len(list(it)).
Return state information for pickling.
Return True if the view and the given iterable have a null intersection.
Return a reverse iterator over the dict keys.
Return a reverse iterator over the dict items.
Return a reverse iterator over the dict values.
Dictionary that remembers insertion order
fromkeys($type, /, iterable, value=None)
Create a new ordered dictionary with keys from iterable and values set to value.
Return state information for pickling
setdefault($self, /, key, default=None)
Insert key with a value of default if key is not in the dictionary.
Return the value for key if key is in the dictionary, else default.
od.pop(k[,d]) -> v, remove specified key and return the corresponding
        value.  If key is not found, d is returned if given, otherwise KeyError
        is raised.
        
popitem($self, /, last=True)
Remove and return a (key, value) pair from the dictionary.
Pairs are returned in LIFO order if last is true or FIFO order if false.
od.clear() -> None.  Remove all items from od.
od.copy() -> a shallow copy of od
od.__reversed__() <==> reversed(od)
move_to_end($self, /, key, last=True)
Move an existing element to the end (or beginning if last is false).
Raise KeyError if the element does not exist.
Return state information for pickling
memoryview(object)
Create a new memoryview object which references the given object.
release($self, /)
Release the underlying buffer exposed by the memoryview object.
tobytes($self, /, order=None)
Return the data in the buffer as a byte string. Order can be {'C', 'F', 'A'}.
When order is 'C' or 'F', the data of the original array is converted to C or
Fortran order. For contiguous views, 'A' returns an exact copy of the physical
memory. In particular, in-memory Fortran order is preserved. For non-contiguous
views, the data is converted to C first. order=None is the same as order='C'.
hex($self, /, sep=<unrepresentable>, bytes_per_sep=1)
Return the data in the buffer as a str of hexadecimal numbers.
  sep
    An optional single character or byte to separate hex bytes.
  bytes_per_sep
    How many bytes between separators.  Positive values count from the
    right, negative values count from the left.
Example:
>>> value = memoryview(b'\xb9\x01\xef')
>>> value.hex()
'b901ef'
>>> value.hex(':')
'b9:01:ef'
>>> value.hex(':', 2)
'b9:01ef'
>>> value.hex(':', -2)
'b901:ef'
tolist($self, /)
Return the data in the buffer as a list of elements.
cast($self, /, format, *, shape)
Cast a memoryview to a new format or shape.
toreadonly($self, /)
Return a readonly version of the memoryview.
The underlying object of the memoryview.
The amount of space in bytes that the array would use in
 a contiguous representation.
A bool indicating whether the memory is read only.
The size in bytes of each element of the memoryview.
A string containing the format (in struct module style)
 for each element in the view.
An integer indicating how many dimensions of a multi-dimensional
 array the memory represents.
A tuple of ndim integers giving the shape of the memory
 as an N-dimensional array.
A tuple of ndim integers giving the size in bytes to access
 each element for each dimension of the array.
A tuple of integers used internally for PIL-style arrays.
A bool indicating whether the memory is C contiguous.
A bool indicating whether the memory is Fortran contiguous.
A bool indicating whether the memory is contiguous.
module(name, doc=None)
Create a module object.
The name must be a string; the optional doc argument can have any type.
A simple attribute-based namespace.
SimpleNamespace(**kwargs)
Return state information for pickling
raw($self, /)
Return a memoryview of the raw memory underlying this buffer.
Will raise BufferError is the buffer isn't contiguous.
release($self, /)
Release the underlying buffer exposed by the PickleBuffer object.
range(stop) -> range object
range(start, stop[, step]) -> range object
Return an object that produces a sequence of integers from start (inclusive)
to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.
start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.
These are exactly the valid indices for a list of 4 elements.
When step is given, it specifies the increment (or decrement).
Return a reverse iterator.
rangeobject.count(value) -> integer -- return number of occurrences of value
rangeobject.index(value) -> integer -- return index of value.
Raise ValueError if the value is not present.
Private method returning an estimate of len(list(it)).
Return state information for pickling.
Set state information for unpickling.
set() -> new empty set object
set(iterable) -> new set object
Build an unordered collection of unique elements.
frozenset() -> empty frozenset object
frozenset(iterable) -> frozenset object
Build an immutable unordered collection of unique elements.
Private method returning an estimate of len(list(it)).
Return state information for pickling.
Add an element to a set.
This has no effect if the element is already present.
Remove all elements from this set.
x.__contains__(y) <==> y in x.
Return a shallow copy of a set.
Remove an element from a set if it is a member.
If the element is not a member, do nothing.
Return the difference of two or more sets as a new set.
(i.e. all elements that are in this set but not the others.)
Remove all elements of another set from this set.
Return the intersection of two sets as a new set.
(i.e. all elements that are in both sets.)
Update a set with the intersection of itself and another.
Return True if two sets have a null intersection.
Report whether another set contains this set.
Report whether this set contains another set.
Remove and return an arbitrary set element.
Raises KeyError if the set is empty.
Remove an element from a set; it must be a member.
If the element is not a member, raise a KeyError.
S.__sizeof__() -> size of S in memory, in bytes
Return the symmetric difference of two sets as a new set.
(i.e. all elements that are in exactly one of the sets.)
Update a set with the symmetric difference of itself and another.
Return the union of sets as a new set.
(i.e. all elements that are in either set.)
Update a set with the union of itself and others.
slice(stop)
slice(start, stop[, step])
Create a slice object.  This is used for extended slicing (e.g. a[0:10:2]).
S.indices(len) -> (start, stop, stride)
Assuming a sequence of length len, calculate the start and stop
indices, and the stride length of the extended slice described by
S. Out of bounds indices are clipped in a manner consistent with the
handling of normal slices.
Return state information for pickling.
n_fields
n_sequence_fields
n_unnamed_fields
tuple(iterable=(), /)
Built-in immutable sequence.
If no argument is given, the constructor returns an empty tuple.
If iterable is specified the tuple is initialized from iterable's items.
If the argument is a tuple, the return value is the same object.
__getnewargs__($self, /)
index($self, value, start=0, stop=sys.maxsize, /)
Return first index of value.
Raises ValueError if the value is not present.
count($self, value, /)
Return number of occurrences of value.
Private method returning an estimate of len(list(it)).
Return state information for pickling.
Set state information for unpickling.
type(object_or_name, bases, dict)
type(object) -> the object's type
type(name, bases, dict) -> a new type
object()
The base class of the class hierarchy.
When called, it accepts no arguments and returns a new featureless
instance that has no instance attributes and cannot be given any.
super() -> same as super(__class__, <first argument>)
super(type) -> unbound super object
super(type, obj) -> bound super object; requires isinstance(obj, type)
super(type, type2) -> bound super object; requires issubclass(type2, type)
Typical use to call a cooperative superclass method:
class C(B):
    def meth(self, arg):
        super().meth(arg)
This works for class methods too:
class C(B):
    @classmethod
    def cmeth(cls, arg):
        super().cmeth(arg)
mro($self, /)
Return a type's method resolution order.
__subclasses__($self, /)
Return a list of immediate subclasses.
__instancecheck__($self, instance, /)
Check if an object is an instance.
__subclasscheck__($self, subclass, /)
Check if a class is a subclass.
__dir__($self, /)
Specialized __dir__ implementation for types.
__sizeof__($self, /)
Return memory consumption of the type object.
__reduce_ex__($self, protocol, /)
Helper for pickle.
__reduce__($self, /)
Helper for pickle.
Abstract classes can override this to customize issubclass().
This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).
This method is called when a class is subclassed.
The default implementation does nothing. It may be
overridden to extend subclasses.
__format__($self, format_spec, /)
Default object formatter.
__sizeof__($self, /)
Size of object in memory, in bytes.
__dir__($self, /)
Default dir() implementation.
????????????????????????
????
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str
Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.
encode($self, /, encoding='utf-8', errors='strict')
Encode the string using the codec registered for encoding.
  encoding
    The encoding in which to encode the string.
  errors
    The error handling scheme to use for encoding errors.
    The default is 'strict' meaning that encoding errors raise a
    UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
    'xmlcharrefreplace' as well as any other name registered with
    codecs.register_error that can handle UnicodeEncodeErrors.
replace($self, old, new, count=-1, /)
Return a copy with all occurrences of substring old replaced by new.
  count
    Maximum number of occurrences to replace.
    -1 (the default value) means replace all occurrences.
If the optional argument count is given, only the first count occurrences are
replaced.
split($self, /, sep=None, maxsplit=-1)
Return a list of the words in the string, using sep as the delimiter string.
  sep
    The delimiter according which to split the string.
    None (the default value) means split according to any whitespace,
    and discard empty strings from the result.
  maxsplit
    Maximum number of splits to do.
    -1 (the default value) means no limit.
rsplit($self, /, sep=None, maxsplit=-1)
Return a list of the words in the string, using sep as the delimiter string.
  sep
    The delimiter according which to split the string.
    None (the default value) means split according to any whitespace,
    and discard empty strings from the result.
  maxsplit
    Maximum number of splits to do.
    -1 (the default value) means no limit.
Splits are done starting at the end of the string and working to the front.
join($self, iterable, /)
Concatenate any number of strings.
The string whose method is called is inserted in between each given string.
The result is returned as a new string.
Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'
capitalize($self, /)
Return a capitalized version of the string.
More specifically, make the first character have upper case and the rest lower
case.
casefold($self, /)
Return a version of the string suitable for caseless comparisons.
title($self, /)
Return a version of the string where each word is titlecased.
More specifically, words start with uppercased characters and all remaining
cased characters have lower case.
center($self, width, fillchar=' ', /)
Return a centered string of length width.
Padding is done using the specified fill character (default is a space).
S.count(sub[, start[, end]]) -> int
Return the number of non-overlapping occurrences of substring sub in
string S[start:end].  Optional arguments start and end are
interpreted as in slice notation.
expandtabs($self, /, tabsize=8)
Return a copy where all tab characters are expanded using spaces.
If tabsize is not given, a tab size of 8 characters is assumed.
S.find(sub[, start[, end]]) -> int
Return the lowest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
partition($self, sep, /)
Partition the string into three parts using the given separator.
This will search for the separator in the string.  If the separator is found,
returns a 3-tuple containing the part before the separator, the separator
itself, and the part after it.
If the separator is not found, returns a 3-tuple containing the original string
and two empty strings.
S.index(sub[, start[, end]]) -> int
Return the lowest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Raises ValueError when the substring is not found.
ljust($self, width, fillchar=' ', /)
Return a left-justified string of length width.
Padding is done using the specified fill character (default is a space).
lower($self, /)
Return a copy of the string converted to lowercase.
lstrip($self, chars=None, /)
Return a copy of the string with leading whitespace removed.
If chars is given and not None, remove characters in chars instead.
S.rfind(sub[, start[, end]]) -> int
Return the highest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
S.rindex(sub[, start[, end]]) -> int
Return the highest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Raises ValueError when the substring is not found.
rjust($self, width, fillchar=' ', /)
Return a right-justified string of length width.
Padding is done using the specified fill character (default is a space).
rstrip($self, chars=None, /)
Return a copy of the string with trailing whitespace removed.
If chars is given and not None, remove characters in chars instead.
rpartition($self, sep, /)
Partition the string into three parts using the given separator.
This will search for the separator in the string, starting at the end. If
the separator is found, returns a 3-tuple containing the part before the
separator, the separator itself, and the part after it.
If the separator is not found, returns a 3-tuple containing two empty strings
and the original string.
splitlines($self, /, keepends=False)
Return a list of the lines in the string, breaking at line boundaries.
Line breaks are not included in the resulting list unless keepends is given and
true.
strip($self, chars=None, /)
Return a copy of the string with leading and trailing whitespace removed.
If chars is given and not None, remove characters in chars instead.
swapcase($self, /)
Convert uppercase characters to lowercase and lowercase characters to uppercase.
translate($self, table, /)
Replace each character in the string using the given translation table.
  table
    Translation table, which must be a mapping of Unicode ordinals to
    Unicode ordinals, strings, or None.
The table must implement lookup/indexing via __getitem__, for instance a
dictionary or list.  If this operation raises LookupError, the character is
left untouched.  Characters mapped to None are deleted.
upper($self, /)
Return a copy of the string converted to uppercase.
S.startswith(prefix[, start[, end]]) -> bool
Return True if S starts with the specified prefix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
prefix can also be a tuple of strings to try.
S.endswith(suffix[, start[, end]]) -> bool
Return True if S ends with the specified suffix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
suffix can also be a tuple of strings to try.
removeprefix($self, prefix, /)
Return a str with the given prefix string removed if present.
If the string starts with the prefix string, return string[len(prefix):].
Otherwise, return a copy of the original string.
removesuffix($self, suffix, /)
Return a str with the given suffix string removed if present.
If the string ends with the suffix string and that suffix is not empty,
return string[:-len(suffix)]. Otherwise, return a copy of the original
string.
isascii($self, /)
Return True if all characters in the string are ASCII, False otherwise.
ASCII characters have code points in the range U+0000-U+007F.
Empty string is ASCII too.
islower($self, /)
Return True if the string is a lowercase string, False otherwise.
A string is lowercase if all cased characters in the string are lowercase and
there is at least one cased character in the string.
isupper($self, /)
Return True if the string is an uppercase string, False otherwise.
A string is uppercase if all cased characters in the string are uppercase and
there is at least one cased character in the string.
istitle($self, /)
Return True if the string is a title-cased string, False otherwise.
In a title-cased string, upper- and title-case characters may only
follow uncased characters and lowercase characters only cased ones.
isspace($self, /)
Return True if the string is a whitespace string, False otherwise.
A string is whitespace if all characters in the string are whitespace and there
is at least one character in the string.
isdecimal($self, /)
Return True if the string is a decimal string, False otherwise.
A string is a decimal string if all characters in the string are decimal and
there is at least one character in the string.
isdigit($self, /)
Return True if the string is a digit string, False otherwise.
A string is a digit string if all characters in the string are digits and there
is at least one character in the string.
isnumeric($self, /)
Return True if the string is a numeric string, False otherwise.
A string is numeric if all characters in the string are numeric and there is at
least one character in the string.
isalpha($self, /)
Return True if the string is an alphabetic string, False otherwise.
A string is alphabetic if all characters in the string are alphabetic and there
is at least one character in the string.
isalnum($self, /)
Return True if the string is an alpha-numeric string, False otherwise.
A string is alpha-numeric if all characters in the string are alpha-numeric and
there is at least one character in the string.
isidentifier($self, /)
Return True if the string is a valid Python identifier, False otherwise.
Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
such as "def" or "class".
isprintable($self, /)
Return True if the string is printable, False otherwise.
A string is printable if all of its characters are considered printable in
repr() or if it is empty.
zfill($self, width, /)
Pad a numeric string with zeros on the left, to fill a field of the given width.
The string is never truncated.
S.format(*args, **kwargs) -> str
Return a formatted version of S, using substitutions from args and kwargs.
The substitutions are identified by braces ('{' and '}').
S.format_map(mapping) -> str
Return a formatted version of S, using substitutions from mapping.
The substitutions are identified by braces ('{' and '}').
__format__($self, format_spec, /)
Return a formatted version of the string as described by format_spec.
maketrans(x, y=<unrepresentable>, z=<unrepresentable>, /)
Return a translation table usable for str.translate().
If there is only one argument, it must be a dictionary mapping Unicode
ordinals (integers) or characters to Unicode ordinals, strings or None.
Character keys will be then converted to ordinals.
If there are two arguments, they must be strings of equal length, and
in the resulting dictionary, each character in x will be mapped to the
character at the same position in y. If there is a third argument, it
must be a string, whose characters will be mapped to None in the result.
__sizeof__($self, /)
Return the size of the string in memory, in bytes.
Private method returning an estimate of len(list(it)).
Return state information for pickling.
Set state information for unpickling.
@w+A
T@UUUUUU
?UUUUUU
>@333333
?333333
?333333
?UUUUUU
@UUUUUU
?UUUUUU
_warnings provides basic warning filtering support.
It is a helper module to speed up interpreter start-up.
warn($module, /, message, category=None, stacklevel=1, source=None)
Issue a warning, or maybe ignore it or raise an exception.
Low-level interface to warnings functionality.
filter(function or None, iterable) --> filter object
Return an iterator yielding those items of iterable for which function(item)
is true. If function is None, return the items that are true.
map(func, *iterables) --> map object
Make an iterator that computes the function using arguments from
each of the iterables.  Stops when the shortest iterable is exhausted.
zip(*iterables) --> A zip object yielding tuples until an input is exhausted.
   >>> list(zip('abcdefg', range(3), range(4)))
   [('a', 0, 0), ('b', 1, 1), ('c', 2, 2)]
The zip object yields n-length tuples, where n is the number of iterables
passed as positional arguments to zip().  The i-th element in every tuple
comes from the i-th iterable argument to zip().  This continues until the
shortest argument is exhausted.
Return state information for pickling.
Built-in functions, exceptions, and other objects.
Noteworthy: None is the `nil' object; Ellipsis represents `...' in slices.
__build_class__(func, name, /, *bases, [metaclass], **kwds) -> class
Internal helper function used by the class statement.
__import__(name, globals=None, locals=None, fromlist=(), level=0) -> module
Import a module. Because this function is meant for use by the Python
interpreter and not for general use, it is better to use
importlib.import_module() to programmatically import a module.
The globals argument is only used to determine the context;
they are not modified.  The locals argument is unused.  The fromlist
should be a list of names to emulate ``from name import ...'', or an
empty list to emulate ``import name''.
When importing a module from a package, note that __import__('A.B', ...)
returns package A when fromlist is empty, but its submodule B when
fromlist is not empty.  The level argument is used to determine whether to
perform absolute or relative imports: 0 is absolute, while a positive number
is the number of parent directories to search relative to the current module.
abs($module, x, /)
Return the absolute value of the argument.
all($module, iterable, /)
Return True if bool(x) is True for all values x in the iterable.
If the iterable is empty, return True.
any($module, iterable, /)
Return True if bool(x) is True for any x in the iterable.
If the iterable is empty, return False.
ascii($module, obj, /)
Return an ASCII-only representation of an object.
As repr(), return a string containing a printable representation of an
object, but escape the non-ASCII characters in the string returned by
repr() using \\x, \\u or \\U escapes. This generates a string similar
to that returned by repr() in Python 2.
bin($module, number, /)
Return the binary representation of an integer.
   >>> bin(2796202)
   '0b1010101010101010101010'
breakpoint(*args, **kws)
Call sys.breakpointhook(*args, **kws).  sys.breakpointhook() must accept
whatever arguments are passed.
By default, this drops you into the pdb debugger.
callable($module, obj, /)
Return whether the object is callable (i.e., some kind of function).
Note that classes are callable, as are instances of classes with a
__call__() method.
chr($module, i, /)
Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.
compile($module, /, source, filename, mode, flags=0,
        dont_inherit=False, optimize=-1, *, _feature_version=-1)
Compile source into a code object that can be executed by exec() or eval().
The source code may represent a Python module, statement or expression.
The filename will be used for run-time error messages.
The mode must be 'exec' to compile a module, 'single' to compile a
single (interactive) statement, or 'eval' to compile an expression.
The flags argument, if present, controls which future statements influence
the compilation of the code.
The dont_inherit argument, if true, stops the compilation inheriting
the effects of any future statements in effect in the code calling
compile; if absent or false these statements do influence the compilation,
in addition to any features explicitly specified.
delattr($module, obj, name, /)
Deletes the named attribute from the given object.
delattr(x, 'y') is equivalent to ``del x.y''
dir([object]) -> list of strings
If called without an argument, return the names in the current scope.
Else, return an alphabetized list of names comprising (some of) the attributes
of the given object, and of attributes reachable from it.
If the object supplies a method named __dir__, it will be used; otherwise
the default dir() logic is used and returns:
  for a module object: the module's attributes.
  for a class object:  its attributes, and recursively the attributes
    of its bases.
  for any other object: its attributes, its class's attributes, and
    recursively the attributes of its class's base classes.
divmod($module, x, y, /)
Return the tuple (x//y, x%y).  Invariant: div*y + mod == x.
eval($module, source, globals=None, locals=None, /)
Evaluate the given source in the context of globals and locals.
The source may be a string representing a Python expression
or a code object as returned by compile().
The globals must be a dictionary and locals can be any mapping,
defaulting to the current globals and locals.
If only globals is given, locals defaults to it.
exec($module, source, globals=None, locals=None, /)
Execute the given source in the context of globals and locals.
The source may be a string representing one or more Python statements
or a code object as returned by compile().
The globals must be a dictionary and locals can be any mapping,
defaulting to the current globals and locals.
If only globals is given, locals defaults to it.
format($module, value, format_spec='', /)
Return value.__format__(format_spec)
format_spec defaults to the empty string.
See the Format Specification Mini-Language section of help('FORMATTING') for
details.
getattr(object, name[, default]) -> value
Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y.
When a default argument is given, it is returned when the attribute doesn't
exist; without it, an exception is raised in that case.
globals($module, /)
Return the dictionary containing the current scope's global variables.
NOTE: Updates to this dictionary *will* affect name lookups in the current
global scope and vice-versa.
hasattr($module, obj, name, /)
Return whether the object has an attribute with the given name.
This is done by calling getattr(obj, name) and catching AttributeError.
hash($module, obj, /)
Return the hash value for the given object.
Two objects that compare equal must also have the same hash value, but the
reverse is not necessarily true.
hex($module, number, /)
Return the hexadecimal representation of an integer.
   >>> hex(12648430)
   '0xc0ffee'
id($module, obj, /)
Return the identity of an object.
This is guaranteed to be unique among simultaneously existing objects.
(CPython uses the object's memory address.)
input($module, prompt=None, /)
Read a string from standard input.  The trailing newline is stripped.
The prompt string, if given, is printed to standard output without a
trailing newline before reading input.
If the user hits EOF (*nix: Ctrl-D, Windows: Ctrl-Z+Return), raise EOFError.
On *nix systems, readline is used if available.
isinstance($module, obj, class_or_tuple, /)
Return whether an object is an instance of a class or of a subclass thereof.
A tuple, as in ``isinstance(x, (A, B, ...))``, may be given as the target to
check against. This is equivalent to ``isinstance(x, A) or isinstance(x, B)
or ...`` etc.
issubclass($module, cls, class_or_tuple, /)
Return whether 'cls' is a derived from another class or is the same class.
A tuple, as in ``issubclass(x, (A, B, ...))``, may be given as the target to
check against. This is equivalent to ``issubclass(x, A) or issubclass(x, B)
or ...`` etc.
iter(iterable) -> iterator
iter(callable, sentinel) -> iterator
Get an iterator from an object.  In the first form, the argument must
supply its own iterator, or be a sequence.
In the second form, the callable is called until it returns the sentinel.
len($module, obj, /)
Return the number of items in a container.
locals($module, /)
Return a dictionary containing the current scope's local variables.
NOTE: Whether or not updates to this dictionary will affect name lookups in
the local scope and vice-versa is *implementation dependent* and not
covered by any backwards compatibility guarantees.
max(iterable, *[, default=obj, key=func]) -> value
max(arg1, arg2, *args, *[, key=func]) -> value
With a single iterable argument, return its biggest item. The
default keyword-only argument specifies an object to return if
the provided iterable is empty.
With two or more arguments, return the largest argument.
min(iterable, *[, default=obj, key=func]) -> value
min(arg1, arg2, *args, *[, key=func]) -> value
With a single iterable argument, return its smallest item. The
default keyword-only argument specifies an object to return if
the provided iterable is empty.
With two or more arguments, return the smallest argument.
next(iterator[, default])
Return the next item from the iterator. If default is given and the iterator
is exhausted, it is returned instead of raising StopIteration.
oct($module, number, /)
Return the octal representation of an integer.
   >>> oct(342391)
   '0o1234567'
ord($module, c, /)
Return the Unicode code point for a one-character string.
pow($module, /, base, exp, mod=None)
Equivalent to base**exp with 2 arguments or base**exp % mod with 3 arguments
Some types, such as ints, are able to use a more efficient algorithm when
invoked using the three argument form.
print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
Prints the values to a stream, or to sys.stdout by default.
Optional keyword arguments:
file:  a file-like object (stream); defaults to the current sys.stdout.
sep:   string inserted between values, default a space.
end:   string appended after the last value, default a newline.
flush: whether to forcibly flush the stream.
repr($module, obj, /)
Return the canonical string representation of the object.
For many object types, including most builtins, eval(repr(obj)) == obj.
round($module, /, number, ndigits=None)
Round a number to a given precision in decimal digits.
The return value is an integer if ndigits is omitted or None.  Otherwise
the return value has the same type as the number.  ndigits may be negative.
setattr($module, obj, name, value, /)
Sets the named attribute on the given object to the specified value.
setattr(x, 'y', v) is equivalent to ``x.y = v''
sorted($module, iterable, /, *, key=None, reverse=False)
Return a new list containing all items from the iterable in ascending order.
A custom key function can be supplied to customize the sort order, and the
reverse flag can be set to request the result in descending order.
sum($module, iterable, /, start=0)
Return the sum of a 'start' value (default: 0) plus an iterable of numbers
When the iterable is empty, return the start value.
This function is intended specifically for use with numeric values and may
reject non-numeric types.
vars([object]) -> dictionary
Without arguments, equivalent to locals().
With an argument, equivalent to object.__dict__.
;CKLONM
get($self, key, default=None, /)
Return the value for `key` if `key` has the value in the context object.
If `key` does not exist, return `default`. If `default` is not given,
return None.
items($self, /)
Return all variables and their values in the context object.
The result is returned as a list of 2-tuples (variable, value).
keys($self, /)
Return a list of all variables in the context object.
values($self, /)
Return a list of all variables' values in the context object.
copy($self, /)
Return a shallow copy of the context object.
get($self, default=<unrepresentable>, /)
Return a value for the context variable for the current context.
If there is no value for the variable in the current context, the method will:
 * return the value of the default argument of the method, if provided; or
 * return the default value for the context variable, if it was created
   with one; or
 * raise a LookupError.
set($self, value, /)
Call to set a new value for the context variable in the current context.
The required value argument is the new value for the context variable.
Returns a Token object that can be used to restore the variable to its previous
value via the `ContextVar.reset()` method.
reset($self, token, /)
Reset the context variable.
The variable is reset to the value it had before the `ContextVar.set()` that
created the token was used.
UnraisableHookArgs
Type used to pass arguments to sys.unraisablehook.
Copyright (c) 2001-2021 Python Software Foundation.
All Rights Reserved.
Copyright (c) 2000 BeOpen.com.
All Rights Reserved.
Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.
Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved.
?(Extremely) low-level import machinery bits as used by importlib and imp.
extension_suffixes($module, /)
Returns the list of file suffixes used to identify extension modules.
lock_held($module, /)
Return True if the import lock is currently held, else False.
On platforms without threads, return False.
acquire_lock($module, /)
Acquires the interpreter's import lock for the current thread.
This lock should be used by import hooks to ensure thread-safety when importing
modules. On platforms without threads, this function does nothing.
release_lock($module, /)
Release the interpreter's import lock.
On platforms without threads, this function does nothing.
get_frozen_object($module, name, /)
Create a code object for a frozen module.
is_frozen_package($module, name, /)
Returns True if the module name is of a frozen package.
create_builtin($module, spec, /)
Create an extension module.
init_frozen($module, name, /)
Initializes a frozen module.
is_builtin($module, name, /)
Returns True if the module name corresponds to a built-in module.
is_frozen($module, name, /)
Returns True if the module name corresponds to a frozen module.
create_dynamic($module, spec, file=<unrepresentable>, /)
Create an extension module.
exec_dynamic($module, mod, /)
Initialize an extension module.
exec_builtin($module, mod, /)
Initialize a built-in module.
_fix_co_filename($module, code, path, /)
Changes code.co_filename to specify the passed-in file path.
  code
    Code object to change.
  path
    File path to use.
source_hash($module, /, key, source)
usage: %ls [option] ... [-c cmd | -m mod | file | -] [arg] ...
Options and arguments (and corresponding environment variables):
-b     : issue warnings about str(bytes_instance), str(bytearray_instance)
         and comparing bytes/bytearray with str. (-bb: issue errors)
-B     : don't write .pyc files on import; also PYTHONDONTWRITEBYTECODE=x
-c cmd : program passed in as string (terminates option list)
-d     : turn on parser debugging output (for experts only, only works on
         debug builds); also PYTHONDEBUG=x
-E     : ignore PYTHON* environment variables (such as PYTHONPATH)
-h     : print this help message and exit (also --help)
-i     : inspect interactively after running script; forces a prompt even
         if stdin does not appear to be a terminal; also PYTHONINSPECT=x
-I     : isolate Python from the user's environment (implies -E and -s)
-m mod : run library module as a script (terminates option list)
-O     : remove assert and __debug__-dependent statements; add .opt-1 before
         .pyc extension; also PYTHONOPTIMIZE=x
-OO    : do -O changes and also discard docstrings; add .opt-2 before
         .pyc extension
-q     : don't print version and copyright messages on interactive startup
-s     : don't add user site directory to sys.path; also PYTHONNOUSERSITE
-S     : don't imply 'import site' on initialization
-u     : force the stdout and stderr streams to be unbuffered;
         this option has no effect on stdin; also PYTHONUNBUFFERED=x
-v     : verbose (trace import statements); also PYTHONVERBOSE=x
         can be supplied multiple times to increase verbosity
-V     : print the Python version number and exit (also --version)
         when given twice, print more information about the build
-W arg : warning control; arg is action:message:category:module:lineno
         also PYTHONWARNINGS=arg
-x     : skip first line of source, allowing use of non-Unix forms of #!cmd
-X opt : set implementation-specific option. The following options are available:
         -X faulthandler: enable faulthandler
         -X oldparser: enable the traditional LL(1) parser; also PYTHONOLDPARSER
         -X showrefcount: output the total reference count and number of used
             memory blocks when the program finishes or after each statement in the
             interactive interpreter. This only works on debug builds
         -X tracemalloc: start tracing Python memory allocations using the
             tracemalloc module. By default, only the most recent frame is stored in a
             traceback of a trace. Use -X tracemalloc=NFRAME to start tracing with a
             traceback limit of NFRAME frames
         -X importtime: show how long each import takes. It shows module name,
             cumulative time (including nested imports) and self time (excluding
             nested imports). Note that its output may be broken in multi-threaded
             application. Typical usage is python3 -X importtime -c 'import asyncio'
         -X dev: enable CPython's "development mode", introducing additional runtime
             checks which are too expensive to be enabled by default. Effect of the
             developer mode:
                * Add default warning filter, as -W default
                * Install debug hooks on memory allocators: see the PyMem_SetupDebugHooks() C function
                * Enable the faulthandler module to dump the Python traceback on a crash
                * Enable asyncio debug mode
                * Set the dev_mode attribute of sys.flags to True
                * io.IOBase destructor logs close() exceptions
         -X utf8: enable UTF-8 mode for operating system interfaces, overriding the default
             locale-aware mode. -X utf8=0 explicitly disables UTF-8 mode (even when it would
             otherwise activate automatically)
         -X pycache_prefix=PATH: enable writing .pyc files to a parallel tree rooted at the
             given directory instead of to the code tree
--check-hash-based-pycs always|default|never:
    control how Python invalidates hash-based .pyc files
file   : program read from script file
-      : program read from stdin (default; interactive mode if a tty)
arg ...: arguments passed to program in sys.argv[1:]
Other environment variables:
PYTHONSTARTUP: file executed on interactive startup (no default)
PYTHONPATH   : '%lc'-separated list of directories prefixed to the
               default module search path.  The result is sys.path.
PYTHONHOME   : alternate <prefix> directory (or <prefix>%lc<exec_prefix>).
               The default module search path uses %s.
PYTHONPLATLIBDIR : override sys.platlibdir.
PYTHONCASEOK : ignore case in 'import' statements (Windows).
PYTHONUTF8: if set to 1, enable the UTF-8 mode.
PYTHONIOENCODING: Encoding[:errors] used for stdin/stdout/stderr.
PYTHONFAULTHANDLER: dump the Python traceback on fatal errors.
PYTHONHASHSEED: if this variable is set to 'random', a random value is used
   to seed the hashes of str and bytes objects.  It can also be set to an
   integer in the range [0,4294967295] to get hash values with a
   predictable seed.
PYTHONMALLOC: set the Python memory allocators and/or install debug hooks
   on Python memory allocators. Use PYTHONMALLOC=debug to install debug
   hooks.
PYTHONCOERCECLOCALE: if this variable is set to 0, it disables the locale
   coercion behavior. Use PYTHONCOERCECLOCALE=warn to request display of
   locale coercion and locale compatibility warnings on stderr.
PYTHONBREAKPOINT: if this variable is set to 0, it disables the default
   debugger. It can be set to the callable of your debugger of choice.
PYTHONDEVMODE: enable the development mode.
PYTHONPYCACHEPREFIX: root directory for bytecode cache (pyc) files.
This module contains functions that can read and write Python values in
a binary format. The format is specific to Python, but independent of
machine architecture issues.
Not all Python object types are supported; in general, only objects
whose value is independent from a particular invocation of Python can be
written and read by this module. The following types are supported:
None, integers, floating point numbers, strings, bytes, bytearrays,
tuples, lists, sets, dictionaries, and code objects, where it
should be understood that tuples, lists and dictionaries are only
supported as long as the values contained therein are themselves
supported; and recursive lists and dictionaries should not be written
(they will cause infinite loops).
Variables:
version -- indicates the format that the module uses. Version 0 is the
    historical format, version 1 shares interned strings and version 2
    uses a binary format for floating point numbers.
    Version 3 shares common object references (New in version 3.4).
Functions:
dump() -- write value to a file
load() -- read value from a file
dumps() -- marshal value as a bytes object
loads() -- read value from a bytes-like object
dump($module, value, file, version=version, /)
Write the value on the open file.
  value
    Must be a supported type.
  file
    Must be a writeable binary file.
  version
    Indicates the data format that dump should use.
If the value has (or contains an object that has) an unsupported type, a
ValueError exception is raised - but garbage data will also be written
to the file. The object will not be properly read back by load().
load($module, file, /)
Read one value from the open file and return it.
  file
    Must be readable binary file.
If no valid value is read (e.g. because the data has a different Python
version's incompatible marshal format), raise EOFError, ValueError or
TypeError.
Note: If an object containing an unsupported type was marshalled with
dump(), load() will substitute None for the unmarshallable type.
dumps($module, value, version=version, /)
Return the bytes object that would be written to a file by dump(value, file).
  value
    Must be a supported type.
  version
    Indicates the data format that dumps should use.
Raise a ValueError exception if value has (or contains an object that has) an
unsupported type.
loads($module, bytes, /)
Convert the bytes-like object to a value.
If no valid value is found, raise EOFError, ValueError or TypeError.  Extra
bytes in the input are ignored.
UUUUUUUU
?33333333
UUUUUUU
P^Cy
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~
Python detected LC_CTYPE=C: LC_CTYPE coerced to %.20s (set another locale or PYTHONCOERCECLOCALE=0 to disable this locale coercion behavior).
The above exception was the direct cause of the following exception:
During handling of the above exception, another exception occurred:
This module provides access to some objects used or maintained by the
interpreter and to functions that interact strongly with the interpreter.
Dynamic objects:
argv -- command line arguments; argv[0] is the script pathname if known
path -- module search path; path[0] is the script directory, else ''
modules -- dictionary of loaded modules
displayhook -- called to show results in an interactive session
excepthook -- called to handle any uncaught exception other than SystemExit
  To customize printing in an interactive session or to install a custom
  top-level exception handler, assign other functions to replace these.
stdin -- standard input file object; used by input()
stdout -- standard output file object; used by print()
stderr -- standard error object; used for error messages
  By assigning other file objects (or objects that behave like files)
  to these, it is possible to redirect all of the interpreter's I/O.
last_type -- type of last uncaught exception
last_value -- value of last uncaught exception
last_traceback -- traceback of last uncaught exception
  These three are only available in an interactive session after a
  traceback has been printed.
Static objects:
builtin_module_names -- tuple of module names built into this interpreter
copyright -- copyright notice pertaining to this interpreter
exec_prefix -- prefix used to find the machine-specific Python library
executable -- absolute path of the executable binary of the Python interpreter
float_info -- a named tuple with information about the float implementation.
float_repr_style -- string indicating the style of repr() output for floats
hash_info -- a named tuple with information about the hash algorithm.
hexversion -- version information encoded as a single integer
implementation -- Python implementation information.
int_info -- a named tuple with information about the int implementation.
maxsize -- the largest supported length of containers.
maxunicode -- the value of the largest Unicode code point
platform -- platform identifier
prefix -- prefix used to find the Python library
thread_info -- a named tuple with information about the thread implementation.
version -- the version of this interpreter as a string
version_info -- version information as a named tuple
__stdin__ -- the original stdin; don't touch!
__stdout__ -- the original stdout; don't touch!
__stderr__ -- the original stderr; don't touch!
__displayhook__ -- the original displayhook; don't touch!
__excepthook__ -- the original excepthook; don't touch!
Functions:
displayhook() -- print an object to the screen, and save it in builtins._
excepthook() -- print an exception and its traceback to sys.stderr
exc_info() -- return thread-safe information about the current exception
exit() -- exit the interpreter by raising SystemExit
getdlopenflags() -- returns flags to be used for dlopen() calls
getprofile() -- get the global profiling function
getrefcount() -- return the reference count for an object (plus one :-)
getrecursionlimit() -- return the max recursion depth for the interpreter
getsizeof() -- return the size of an object in bytes
gettrace() -- get the global debug tracing function
setdlopenflags() -- set the flags to be used for dlopen() calls
setprofile() -- set the global profiling function
setrecursionlimit() -- set the max recursion depth for the interpreter
settrace() -- set the global debug tracing function
addaudithook($module, /, hook)
Adds a new audit hook callback.
audit(event, *args)
Passes the event to any audit hooks that are attached.
breakpointhook(*args, **kws)
This hook function is called by built-in breakpoint().
_clear_type_cache($module, /)
Clear the internal type lookup cache.
_current_frames($module, /)
Return a dict mapping each thread's thread id to its current stack frame.
This function should be used for specialized purposes only.
displayhook($module, object, /)
Print an object to sys.stdout and also save it in builtins._
exc_info($module, /)
Return current exception information: (type, value, traceback).
Return information about the most recent exception caught by an except
clause in the current stack frame or in an older stack frame.
excepthook($module, exctype, value, traceback, /)
Handle an exception by displaying it with a traceback on sys.stderr.
exit($module, status=None, /)
Exit the interpreter by raising SystemExit(status).
If the status is omitted or None, it defaults to zero (i.e., success).
If the status is an integer, it will be used as the system exit status.
If it is another kind of object, it will be printed and the system
exit status will be one (i.e., failure).
getdefaultencoding($module, /)
Return the current default encoding used by the Unicode implementation.
getdlopenflags($module, /)
Return the current value of the flags that are used for dlopen calls.
The flag constants are defined in the os module.
getallocatedblocks($module, /)
Return the number of memory blocks currently allocated.
getfilesystemencoding($module, /)
Return the encoding used to convert Unicode filenames to OS filenames.
getfilesystemencodeerrors($module, /)
Return the error mode used Unicode to OS filename conversion.
getrefcount($module, object, /)
Return the reference count of object.
The count returned is generally one higher than you might expect,
because it includes the (temporary) reference as an argument to
getrefcount().
getrecursionlimit($module, /)
Return the current value of the recursion limit.
The recursion limit is the maximum depth of the Python interpreter
stack.  This limit prevents infinite recursion from causing an overflow
of the C stack and crashing Python.
getsizeof(object [, default]) -> int
Return the size of object in bytes.
_getframe($module, depth=0, /)
Return a frame object from the call stack.
If optional integer depth is given, return the frame object that many
calls below the top of the stack.  If that is deeper than the call
stack, ValueError is raised.  The default for depth is zero, returning
the frame at the top of the call stack.
This function should be used for internal and specialized purposes
only.
intern($module, string, /)
``Intern'' the given string.
This enters the string in the (global) table of interned strings whose
purpose is to speed up dictionary lookups. Return the string itself or
the previously interned string object with the same value.
is_finalizing($module, /)
Return True if Python is exiting.
setswitchinterval($module, interval, /)
Set the ideal thread switching delay inside the Python interpreter.
The actual frequency of switching threads can be lower if the
interpreter executes long sequences of uninterruptible code
(this is implementation-specific and workload-dependent).
The parameter must represent the desired switching delay in seconds
A typical value is 0.005 (5 milliseconds).
getswitchinterval($module, /)
Return the current thread switch interval; see sys.setswitchinterval().
setdlopenflags($module, flags, /)
Set the flags used by the interpreter for dlopen calls.
This is used, for example, when the interpreter loads extension
modules. Among other things, this will enable a lazy resolving of
symbols when importing a module, if called as sys.setdlopenflags(0).
To share symbols across extension modules, call as
sys.setdlopenflags(os.RTLD_GLOBAL).  Symbolic names for the flag
modules can be found in the os module (RTLD_xxx constants, e.g.
os.RTLD_LAZY).
setprofile(function)
Set the profiling function.  It will be called on each function call
and return.  See the profiler chapter in the library manual.
getprofile($module, /)
Return the profiling function set with sys.setprofile.
See the profiler chapter in the library manual.
setrecursionlimit($module, limit, /)
Set the maximum depth of the Python interpreter stack to n.
This limit prevents infinite recursion from causing an overflow of the C
stack and crashing Python.  The highest possible limit is platform-
dependent.
settrace(function)
Set the global debug tracing function.  It will be called on each
function call.  See the debugger chapter in the library manual.
gettrace($module, /)
Return the global debug tracing function set with sys.settrace.
See the debugger chapter in the library manual.
call_tracing($module, func, args, /)
Call func(*args), while tracing is enabled.
The tracing state is saved, and restored afterwards.  This is intended
to be called from a debugger from a checkpoint, to recursively debug
some other code.
_debugmallocstats($module, /)
Print summary info to stderr about the state of pymalloc's structures.
In Py_DEBUG mode, also perform some expensive internal consistency
checks.
set_coroutine_origin_tracking_depth($module, /, depth)
Enable or disable origin tracking for coroutine objects in this thread.
Coroutine objects will track 'depth' frames of traceback information
about where they came from, available in their cr_origin attribute.
Set a depth of 0 to disable.
get_coroutine_origin_tracking_depth($module, /)
Check status of origin tracking for coroutine objects in this thread.
set_asyncgen_hooks(* [, firstiter] [, finalizer])
Set a finalizer for async generators objects.
get_asyncgen_hooks($module, /)
Return the installed asynchronous generators hooks.
This returns a namedtuple of the form (firstiter, finalizer).
unraisablehook($module, unraisable, /)
Handle an unraisable exception.
The unraisable argument has the following attributes:
* exc_type: Exception type.
* exc_value: Exception value, can be None.
* exc_traceback: Exception traceback, can be None.
* err_msg: Error message, can be None.
* object: Object causing the exception, can be None.
hash_info
A named tuple providing parameters used for computing
hashes. The attributes are read only.
sys.version_info
Version information as a named tuple.
sys.flags
Flags provided through command line arguments or environment vars.
asyncgen_hooks
A named tuple providing information about asynchronous
generators hooks.  The attributes are read only.
sys.thread_info
A named tuple holding information about the thread implementation.
TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno)
Create a new traceback object.
aCoc
vH7B
W4vC
O8M2
[%Co
This module provides access to the garbage collector for reference cycles.
enable() -- Enable automatic garbage collection.
disable() -- Disable automatic garbage collection.
isenabled() -- Returns true if automatic collection is enabled.
collect() -- Do a full collection right now.
get_count() -- Return the current collection counts.
get_stats() -- Return list of dictionaries containing per-generation stats.
set_debug() -- Set debugging flags.
get_debug() -- Get debugging flags.
set_threshold() -- Set the collection thresholds.
get_threshold() -- Return the current the collection thresholds.
get_objects() -- Return a list of all objects tracked by the collector.
is_tracked() -- Returns true if a given object is tracked.
is_finalized() -- Returns true if a given object has been already finalized.
get_referrers() -- Return the list of objects that refer to an object.
get_referents() -- Return the list of objects that an object refers to.
freeze() -- Freeze all tracked objects and ignore them for future collections.
unfreeze() -- Unfreeze all objects in the permanent generation.
get_freeze_count() -- Return the number of objects in the permanent generation.
enable($module, /)
Enable automatic garbage collection.
disable($module, /)
Disable automatic garbage collection.
isenabled($module, /)
Returns true if automatic garbage collection is enabled.
set_debug($module, flags, /)
Set the garbage collection debugging flags.
  flags
    An integer that can have the following bits turned on:
      DEBUG_STATS - Print statistics during collection.
      DEBUG_COLLECTABLE - Print collectable objects found.
      DEBUG_UNCOLLECTABLE - Print unreachable but uncollectable objects
        found.
      DEBUG_SAVEALL - Save objects to gc.garbage rather than freeing them.
      DEBUG_LEAK - Debug leaking programs (everything but STATS).
Debugging information is written to sys.stderr.
get_debug($module, /)
Get the garbage collection debugging flags.
get_count($module, /)
Return a three-tuple of the current collection counts.
set_threshold(threshold0, [threshold1, threshold2]) -> None
Sets the collection thresholds.  Setting threshold0 to zero disables
collection.
get_threshold($module, /)
Return the current collection thresholds.
collect($module, /, generation=2)
Run the garbage collector.
With no arguments, run a full collection.  The optional argument
may be an integer specifying which generation to collect.  A ValueError
is raised if the generation number is invalid.
The number of unreachable objects is returned.
get_objects($module, /, generation=None)
Return a list of objects tracked by the collector (excluding the list returned).
  generation
    Generation to extract the objects from.
If generation is not None, return only the objects tracked by the collector
that are in that generation.
get_stats($module, /)
Return a list of dictionaries containing per-generation statistics.
is_tracked($module, obj, /)
Returns true if the object is tracked by the garbage collector.
Simple atomic objects will return false.
is_finalized($module, obj, /)
Returns true if the object has been already finalized by the GC.
get_referrers(*objs) -> list
Return the list of objects that directly refer to any of objs.
get_referents(*objs) -> list
Return the list of objects that are directly referred to by objs.
freeze($module, /)
Freeze all current tracked objects and ignore them for future collections.
This can be used before a POSIX fork() call to make the gc copy-on-write friendly.
Note: collection before a POSIX fork() call may free pages for future allocation
which can cause copy-on-write.
unfreeze($module, /)
Unfreeze all objects in the permanent generation.
Put all objects in the permanent generation back into oldest generation.
get_freeze_count($module, /)
Return the number of objects in the permanent generation.
This module provides access to operating system functionality that is
standardized by the C Standard and the POSIX standard (a thinly
disguised Unix interface).  Refer to the library manual and
corresponding Unix manual entries for more information on calls.
stat($module, /, path, *, dir_fd=None, follow_symlinks=True)
Perform a stat system call on the given path.
  path
    Path to be examined; can be string, bytes, a path-like object or
    open-file-descriptor int.
  dir_fd
    If not None, it should be a file descriptor open to a directory,
    and path should be a relative string; path will then be relative to
    that directory.
  follow_symlinks
    If False, and the last element of the path is a symbolic link,
    stat will examine the symbolic link itself instead of the file
    the link points to.
dir_fd and follow_symlinks may not be implemented
  on your platform.  If they are unavailable, using them will raise a
  NotImplementedError.
It's an error to use dir_fd or follow_symlinks when specifying path as
  an open file descriptor.
access($module, /, path, mode, *, dir_fd=None, effective_ids=False,
       follow_symlinks=True)
Use the real uid/gid to test for access to a path.
  path
    Path to be tested; can be string, bytes, or a path-like object.
  mode
    Operating-system mode bitfield.  Can be F_OK to test existence,
    or the inclusive-OR of R_OK, W_OK, and X_OK.
  dir_fd
    If not None, it should be a file descriptor open to a directory,
    and path should be relative; path will then be relative to that
    directory.
  effective_ids
    If True, access will use the effective uid/gid instead of
    the real uid/gid.
  follow_symlinks
    If False, and the last element of the path is a symbolic link,
    access will examine the symbolic link itself instead of the file
    the link points to.
dir_fd, effective_ids, and follow_symlinks may not be implemented
  on your platform.  If they are unavailable, using them will raise a
  NotImplementedError.
Note that most operations will use the effective uid/gid, therefore this
  routine can be used in a suid/sgid environment to test if the invoking user
  has the specified access to the path.
ttyname($module, fd, /)
Return the name of the terminal device connected to 'fd'.
  fd
    Integer file descriptor handle.
chdir($module, /, path)
Change the current working directory to the specified path.
path may always be specified as a string.
On some platforms, path may also be specified as an open file descriptor.
  If this functionality is unavailable, using it raises an exception.
chflags($module, /, path, flags, follow_symlinks=True)
Set file flags.
If follow_symlinks is False, and the last element of the path is a symbolic
  link, chflags will change flags on the symbolic link itself instead of the
  file the link points to.
follow_symlinks may not be implemented on your platform.  If it is
unavailable, using it will raise a NotImplementedError.
chmod($module, /, path, mode, *, dir_fd=None, follow_symlinks=True)
Change the access permissions of a file.
  path
    Path to be modified.  May always be specified as a str, bytes, or a path-like object.
    On some platforms, path may also be specified as an open file descriptor.
    If this functionality is unavailable, using it raises an exception.
  mode
    Operating-system mode bitfield.
  dir_fd
    If not None, it should be a file descriptor open to a directory,
    and path should be relative; path will then be relative to that
    directory.
  follow_symlinks
    If False, and the last element of the path is a symbolic link,
    chmod will modify the symbolic link itself instead of the file
    the link points to.
It is an error to use dir_fd or follow_symlinks when specifying path as
  an open file descriptor.
dir_fd and follow_symlinks may not be implemented on your platform.
  If they are unavailable, using them will raise a NotImplementedError.
fchmod($module, /, fd, mode)
Change the access permissions of the file given by file descriptor fd.
Equivalent to os.chmod(fd, mode).
lchmod($module, /, path, mode)
Change the access permissions of a file, without following symbolic links.
If path is a symlink, this affects the link itself rather than the target.
Equivalent to chmod(path, mode, follow_symlinks=False)."
chown($module, /, path, uid, gid, *, dir_fd=None, follow_symlinks=True)
Change the owner and group id of path to the numeric uid and gid.\
  path
    Path to be examined; can be string, bytes, a path-like object, or open-file-descriptor int.
  dir_fd
    If not None, it should be a file descriptor open to a directory,
    and path should be relative; path will then be relative to that
    directory.
  follow_symlinks
    If False, and the last element of the path is a symbolic link,
    stat will examine the symbolic link itself instead of the file
    the link points to.
path may always be specified as a string.
On some platforms, path may also be specified as an open file descriptor.
  If this functionality is unavailable, using it raises an exception.
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
If follow_symlinks is False, and the last element of the path is a symbolic
  link, chown will modify the symbolic link itself instead of the file the
  link points to.
It is an error to use dir_fd or follow_symlinks when specifying path as
  an open file descriptor.
dir_fd and follow_symlinks may not be implemented on your platform.
  If they are unavailable, using them will raise a NotImplementedError.
fchown($module, /, fd, uid, gid)
Change the owner and group id of the file specified by file descriptor.
Equivalent to os.chown(fd, uid, gid).
lchown($module, /, path, uid, gid)
Change the owner and group id of path to the numeric uid and gid.
This function will not follow symbolic links.
Equivalent to os.chown(path, uid, gid, follow_symlinks=False).
lchflags($module, /, path, flags)
Set file flags.
This function will not follow symbolic links.
Equivalent to chflags(path, flags, follow_symlinks=False).
chroot($module, /, path)
Change root directory to path.
ctermid($module, /)
Return the name of the controlling terminal for this process.
getcwd($module, /)
Return a unicode string representing the current working directory.
getcwdb($module, /)
Return a bytes string representing the current working directory.
link($module, /, src, dst, *, src_dir_fd=None, dst_dir_fd=None,
     follow_symlinks=True)
Create a hard link to a file.
If either src_dir_fd or dst_dir_fd is not None, it should be a file
  descriptor open to a directory, and the respective path string (src or dst)
  should be relative; the path will then be relative to that directory.
If follow_symlinks is False, and the last element of src is a symbolic
  link, link will create a link to the symbolic link itself instead of the
  file the link points to.
src_dir_fd, dst_dir_fd, and follow_symlinks may not be implemented on your
  platform.  If they are unavailable, using them will raise a
  NotImplementedError.
listdir($module, /, path=None)
Return a list containing the names of the files in the directory.
path can be specified as either str, bytes, or a path-like object.  If path is bytes,
  the filenames returned will also be bytes; in all other circumstances
  the filenames returned will be str.
If path is None, uses the path='.'.
On some platforms, path may also be specified as an open file descriptor;\
  the file descriptor must refer to a directory.
  If this functionality is unavailable, using it raises NotImplementedError.
The list is in arbitrary order.  It does not include the special
entries '.' and '..' even if they are present in the directory.
lstat($module, /, path, *, dir_fd=None)
Perform a stat system call on the given path, without following symbolic links.
Like stat(), but do not follow symbolic links.
Equivalent to stat(path, follow_symlinks=False).
mkdir($module, /, path, mode=511, *, dir_fd=None)
Create a directory.
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.
  If it is unavailable, using it will raise a NotImplementedError.
The mode argument is ignored on Windows.
nice($module, increment, /)
Add increment to the priority of process and return the new priority.
getpriority($module, /, which, who)
Return program scheduling priority.
setpriority($module, /, which, who, priority)
Set program scheduling priority.
posix_spawn($module, path, argv, env, /, *, file_actions=(),
            setpgroup=<unrepresentable>, resetids=False, setsid=False,
            setsigmask=(), setsigdef=(), scheduler=<unrepresentable>)
Execute the program specified by path in a new process.
  path
    Path of executable file.
  argv
    Tuple or list of strings.
  env
    Dictionary of strings mapping to strings.
  file_actions
    A sequence of file action tuples.
  setpgroup
    The pgroup to use with the POSIX_SPAWN_SETPGROUP flag.
  resetids
    If the value is `true` the POSIX_SPAWN_RESETIDS will be activated.
  setsid
    If the value is `true` the POSIX_SPAWN_SETSID or POSIX_SPAWN_SETSID_NP will be activated.
  setsigmask
    The sigmask to use with the POSIX_SPAWN_SETSIGMASK flag.
  setsigdef
    The sigmask to use with the POSIX_SPAWN_SETSIGDEF flag.
  scheduler
    A tuple with the scheduler policy (optional) and parameters.
posix_spawnp($module, path, argv, env, /, *, file_actions=(),
             setpgroup=<unrepresentable>, resetids=False, setsid=False,
             setsigmask=(), setsigdef=(), scheduler=<unrepresentable>)
Execute the program specified by path in a new process.
  path
    Path of executable file.
  argv
    Tuple or list of strings.
  env
    Dictionary of strings mapping to strings.
  file_actions
    A sequence of file action tuples.
  setpgroup
    The pgroup to use with the POSIX_SPAWN_SETPGROUP flag.
  resetids
    If the value is `True` the POSIX_SPAWN_RESETIDS will be activated.
  setsid
    If the value is `True` the POSIX_SPAWN_SETSID or POSIX_SPAWN_SETSID_NP will be activated.
  setsigmask
    The sigmask to use with the POSIX_SPAWN_SETSIGMASK flag.
  setsigdef
    The sigmask to use with the POSIX_SPAWN_SETSIGDEF flag.
  scheduler
    A tuple with the scheduler policy (optional) and parameters.
readlink($module, /, path, *, dir_fd=None)
Return a string representing the path to which the symbolic link points.
If dir_fd is not None, it should be a file descriptor open to a directory,
and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.  If it is unavailable,
using it will raise a NotImplementedError.
rename($module, /, src, dst, *, src_dir_fd=None, dst_dir_fd=None)
Rename a file or directory.
If either src_dir_fd or dst_dir_fd is not None, it should be a file
  descriptor open to a directory, and the respective path string (src or dst)
  should be relative; the path will then be relative to that directory.
src_dir_fd and dst_dir_fd, may not be implemented on your platform.
  If they are unavailable, using them will raise a NotImplementedError.
replace($module, /, src, dst, *, src_dir_fd=None, dst_dir_fd=None)
Rename a file or directory, overwriting the destination.
If either src_dir_fd or dst_dir_fd is not None, it should be a file
  descriptor open to a directory, and the respective path string (src or dst)
  should be relative; the path will then be relative to that directory.
src_dir_fd and dst_dir_fd, may not be implemented on your platform.
  If they are unavailable, using them will raise a NotImplementedError.
rmdir($module, /, path, *, dir_fd=None)
Remove a directory.
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.
  If it is unavailable, using it will raise a NotImplementedError.
symlink($module, /, src, dst, target_is_directory=False, *, dir_fd=None)
Create a symbolic link pointing to src named dst.
target_is_directory is required on Windows if the target is to be
  interpreted as a directory.  (On Windows, symlink requires
  Windows 6.0 or greater, and raises a NotImplementedError otherwise.)
  target_is_directory is ignored on non-Windows platforms.
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.
  If it is unavailable, using it will raise a NotImplementedError.
system($module, /, command)
Execute the command in a subshell.
umask($module, mask, /)
Set the current numeric umask and return the previous umask.
uname($module, /)
Return an object identifying the current operating system.
The object behaves like a named tuple with the following fields:
  (sysname, nodename, release, version, machine)
unlink($module, /, path, *, dir_fd=None)
Remove a file (same as remove()).
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.
  If it is unavailable, using it will raise a NotImplementedError.
remove($module, /, path, *, dir_fd=None)
Remove a file (same as unlink()).
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.
  If it is unavailable, using it will raise a NotImplementedError.
utime($module, /, path, times=None, *, ns=<unrepresentable>,
      dir_fd=None, follow_symlinks=True)
Set the access and modified time of path.
path may always be specified as a string.
On some platforms, path may also be specified as an open file descriptor.
  If this functionality is unavailable, using it raises an exception.
If times is not None, it must be a tuple (atime, mtime);
    atime and mtime should be expressed as float seconds since the epoch.
If ns is specified, it must be a tuple (atime_ns, mtime_ns);
    atime_ns and mtime_ns should be expressed as integer nanoseconds
    since the epoch.
If times is None and ns is unspecified, utime uses the current time.
Specifying tuples for both times and ns is an error.
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
If follow_symlinks is False, and the last element of the path is a symbolic
  link, utime will modify the symbolic link itself instead of the file the
  link points to.
It is an error to use dir_fd or follow_symlinks when specifying path
  as an open file descriptor.
dir_fd and follow_symlinks may not be available on your platform.
  If they are unavailable, using them will raise a NotImplementedError.
times($module, /)
Return a collection containing process timing information.
The object returned behaves like a named tuple with these fields:
  (utime, stime, cutime, cstime, elapsed_time)
All fields are floating point numbers.
_exit($module, /, status)
Exit to the system with specified status, without normal exit processing.
_fcopyfile($module, in_fd, out_fd, flags, /)
Efficiently copy content or metadata of 2 regular file descriptors (macOS).
execv($module, path, argv, /)
Execute an executable path with arguments, replacing current process.
  path
    Path of executable file.
  argv
    Tuple or list of strings.
execve($module, /, path, argv, env)
Execute an executable path with arguments, replacing current process.
  path
    Path of executable file.
  argv
    Tuple or list of strings.
  env
    Dictionary of strings mapping to strings.
fork($module, /)
Fork a child process.
Return 0 to child process and PID of child to parent process.
register_at_fork($module, /, *, before=<unrepresentable>,
                 after_in_child=<unrepresentable>,
                 after_in_parent=<unrepresentable>)
Register callables to be called when forking a new process.
  before
    A callable to be called in the parent before the fork() syscall.
  after_in_child
    A callable to be called in the child after fork().
  after_in_parent
    A callable to be called in the parent after fork().
'before' callbacks are called in reverse order.
'after_in_child' and 'after_in_parent' callbacks are called in order.
sched_get_priority_max($module, /, policy)
Get the maximum scheduling priority for policy.
sched_get_priority_min($module, /, policy)
Get the minimum scheduling priority for policy.
sched_yield($module, /)
Voluntarily relinquish the CPU.
openpty($module, /)
Open a pseudo-terminal.
Return a tuple of (master_fd, slave_fd) containing open file descriptors
for both the master and slave ends.
forkpty($module, /)
Fork a new process with a new pseudo-terminal as controlling tty.
Returns a tuple of (pid, master_fd).
Like fork(), return pid of 0 to the child process,
and pid of child to the parent process.
To both, return fd of newly opened pseudo-terminal.
getegid($module, /)
Return the current process's effective group id.
geteuid($module, /)
Return the current process's effective user id.
getgid($module, /)
Return the current process's group id.
getgrouplist($module, user, group, /)
Returns a list of groups to which a user belongs.
  user
    username to lookup
  group
    base group id of the user
getgroups($module, /)
Return list of supplemental group IDs for the process.
getpid($module, /)
Return the current process id.
getpgrp($module, /)
Return the current process group id.
getppid($module, /)
Return the parent's process id.
If the parent process has already exited, Windows machines will still
return its id; others systems will return the id of the 'init' process (1).
getuid($module, /)
Return the current process's user id.
getlogin($module, /)
Return the actual login name.
kill($module, pid, signal, /)
Kill a process with a signal.
killpg($module, pgid, signal, /)
Kill a process group with a signal.
setuid($module, uid, /)
Set the current process's user id.
seteuid($module, euid, /)
Set the current process's effective user id.
setreuid($module, ruid, euid, /)
Set the current process's real and effective user ids.
setgid($module, gid, /)
Set the current process's group id.
setegid($module, egid, /)
Set the current process's effective group id.
setregid($module, rgid, egid, /)
Set the current process's real and effective group ids.
setgroups($module, groups, /)
Set the groups of the current process to list.
initgroups($module, username, gid, /)
Initialize the group access list.
Call the system initgroups() to initialize the group access list with all of
the groups of which the specified username is a member, plus the specified
group id.
getpgid($module, /, pid)
Call the system call getpgid(), and return the result.
setpgrp($module, /)
Make the current process the leader of its process group.
wait($module, /)
Wait for completion of a child process.
Returns a tuple of information about the child process:
    (pid, status)
wait3($module, /, options)
Wait for completion of a child process.
Returns a tuple of information about the child process:
  (pid, status, rusage)
wait4($module, /, pid, options)
Wait for completion of a specific child process.
Returns a tuple of information about the child process:
  (pid, status, rusage)
waitpid($module, pid, options, /)
Wait for completion of a given child process.
Returns a tuple of information regarding the child process:
    (pid, status)
The options argument is ignored on Windows.
getsid($module, pid, /)
Call the system call getsid(pid) and return the result.
setsid($module, /)
Call the system call setsid().
setpgid($module, pid, pgrp, /)
Call the system call setpgid(pid, pgrp).
tcgetpgrp($module, fd, /)
Return the process group associated with the terminal specified by fd.
tcsetpgrp($module, fd, pgid, /)
Set the process group associated with the terminal specified by fd.
open($module, /, path, flags, mode=511, *, dir_fd=None)
Open a file for low level IO.  Returns a file descriptor (integer).
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.
  If it is unavailable, using it will raise a NotImplementedError.
close($module, /, fd)
Close a file descriptor.
closerange($module, fd_low, fd_high, /)
Closes all file descriptors in [fd_low, fd_high), ignoring errors.
device_encoding($module, /, fd)
Return a string describing the encoding of a terminal's file descriptor.
The file descriptor must be attached to a terminal.
If the device is not a terminal, return None.
dup($module, fd, /)
Return a duplicate of a file descriptor.
dup2($module, /, fd, fd2, inheritable=True)
Duplicate file descriptor.
lockf($module, fd, command, length, /)
Apply, test or remove a POSIX lock on an open file descriptor.
  fd
    An open file descriptor.
  command
    One of F_LOCK, F_TLOCK, F_ULOCK or F_TEST.
  length
    The number of bytes to lock, starting at the current position.
lseek($module, fd, position, how, /)
Set the position of a file descriptor.  Return the new position.
Return the new cursor position in number of bytes
relative to the beginning of the file.
read($module, fd, length, /)
Read from a file descriptor.  Returns a bytes object.
readv($module, fd, buffers, /)
Read from a file descriptor fd into an iterable of buffers.
The buffers should be mutable buffers accepting bytes.
readv will transfer data into each buffer until it is full
and then move on to the next buffer in the sequence to hold
the rest of the data.
readv returns the total number of bytes read,
which may be less than the total capacity of all the buffers.
pread($module, fd, length, offset, /)
Read a number of bytes from a file descriptor starting at a particular offset.
Read length bytes from file descriptor fd, starting at offset bytes from
the beginning of the file.  The file offset remains unchanged.
preadv($module, fd, buffers, offset, flags=0, /)
Reads from a file descriptor into a number of mutable bytes-like objects.
Combines the functionality of readv() and pread(). As readv(), it will
transfer data into each buffer until it is full and then move on to the next
buffer in the sequence to hold the rest of the data. Its fourth argument,
specifies the file offset at which the input operation is to be performed. It
will return the total number of bytes read (which can be less than the total
capacity of all the objects).
The flags argument contains a bitwise OR of zero or more of the following flags:
- RWF_HIPRI
- RWF_NOWAIT
Using non-zero flags requires Linux 4.6 or newer.
write($module, fd, data, /)
Write a bytes object to a file descriptor.
writev($module, fd, buffers, /)
Iterate over buffers, and write the contents of each to a file descriptor.
Returns the total number of bytes written.
buffers must be a sequence of bytes-like objects.
pwrite($module, fd, buffer, offset, /)
Write bytes to a file descriptor starting at a particular offset.
Write buffer to fd, starting at offset bytes from the beginning of
the file.  Returns the number of bytes writte.  Does not change the
current file offset.
pwritev($module, fd, buffers, offset, flags=0, /)
Writes the contents of bytes-like objects to a file descriptor at a given offset.
Combines the functionality of writev() and pwrite(). All buffers must be a sequence
of bytes-like objects. Buffers are processed in array order. Entire contents of first
buffer is written before proceeding to second, and so on. The operating system may
set a limit (sysconf() value SC_IOV_MAX) on the number of buffers that can be used.
This function writes the contents of each object to the file descriptor and returns
the total number of bytes written.
The flags argument contains a bitwise OR of zero or more of the following flags:
- RWF_DSYNC
- RWF_SYNC
Using non-zero flags requires Linux 4.7 or newer.
sendfile($module, /, out_fd, in_fd, offset, count, headers=(),
         trailers=(), flags=0)
Copy count bytes from file descriptor in_fd to file descriptor out_fd.
fstat($module, /, fd)
Perform a stat system call on the given file descriptor.
Like stat(), but for an open file descriptor.
Equivalent to os.stat(fd).
isatty($module, fd, /)
Return True if the fd is connected to a terminal.
Return True if the file descriptor is an open file descriptor
connected to the slave end of a terminal.
pipe($module, /)
Create a pipe.
Returns a tuple of two file descriptors:
  (read_fd, write_fd)
mkfifo($module, /, path, mode=438, *, dir_fd=None)
Create a "fifo" (a POSIX named pipe).
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.
  If it is unavailable, using it will raise a NotImplementedError.
mknod($module, /, path, mode=384, device=0, *, dir_fd=None)
Create a node in the file system.
Create a node in the file system (file, device special file or named pipe)
at path.  mode specifies both the permissions to use and the
type of node to be created, being combined (bitwise OR) with one of
S_IFREG, S_IFCHR, S_IFBLK, and S_IFIFO.  If S_IFCHR or S_IFBLK is set on mode,
device defines the newly created device special file (probably using
os.makedev()).  Otherwise device is ignored.
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.
  If it is unavailable, using it will raise a NotImplementedError.
major($module, device, /)
Extracts a device major number from a raw device number.
minor($module, device, /)
Extracts a device minor number from a raw device number.
makedev($module, major, minor, /)
Composes a raw device number from the major and minor device numbers.
ftruncate($module, fd, length, /)
Truncate a file, specified by file descriptor, to a specific length.
truncate($module, /, path, length)
Truncate a file, specified by path, to a specific length.
On some platforms, path may also be specified as an open file descriptor.
  If this functionality is unavailable, using it raises an exception.
putenv($module, name, value, /)
Change or add an environment variable.
unsetenv($module, name, /)
Delete an environment variable.
strerror($module, code, /)
Translate an error code to a message string.
fchdir($module, /, fd)
Change to the directory of the given file descriptor.
fd must be opened on a directory, not a file.
Equivalent to os.chdir(fd).
fsync($module, /, fd)
Force write of fd to disk.
sync($module, /)
Force write of everything to disk.
WCOREDUMP($module, status, /)
Return True if the process returning status was dumped to a core file.
WIFCONTINUED($module, /, status)
Return True if a particular process was continued from a job control stop.
Return True if the process returning status was continued from a
job control stop.
WIFSTOPPED($module, /, status)
Return True if the process returning status was stopped.
WIFSIGNALED($module, /, status)
Return True if the process returning status was terminated by a signal.
WIFEXITED($module, /, status)
Return True if the process returning status exited via the exit() system call.
WEXITSTATUS($module, /, status)
Return the process return code from status.
WTERMSIG($module, /, status)
Return the signal that terminated the process that provided the status value.
WSTOPSIG($module, /, status)
Return the signal that stopped the process that provided the status value.
fstatvfs($module, fd, /)
Perform an fstatvfs system call on the given fd.
Equivalent to statvfs(fd).
statvfs($module, /, path)
Perform a statvfs system call on the given path.
path may always be specified as a string.
On some platforms, path may also be specified as an open file descriptor.
  If this functionality is unavailable, using it raises an exception.
confstr($module, name, /)
Return a string-valued system configuration variable.
sysconf($module, name, /)
Return an integer-valued system configuration variable.
fpathconf($module, fd, name, /)
Return the configuration limit name for the file descriptor fd.
If there is no limit, return -1.
pathconf($module, /, path, name)
Return the configuration limit name for the file or directory path.
If there is no limit, return -1.
On some platforms, path may also be specified as an open file descriptor.
  If this functionality is unavailable, using it raises an exception.
abort($module, /)
Abort the interpreter immediately.
This function 'dumps core' or otherwise fails in the hardest way possible
on the hosting operating system.  This function never returns.
getloadavg($module, /)
Return average recent system load information.
Return the number of processes in the system run queue averaged over
the last 1, 5, and 15 minutes as a tuple of three floats.
Raises OSError if the load average was unobtainable.
urandom($module, size, /)
Return a bytes object containing random bytes suitable for cryptographic use.
get_terminal_size($module, fd=<unrepresentable>, /)
Return the size of the terminal window as (columns, lines).
The optional argument fd (default standard output) specifies
which file descriptor should be queried.
If the file descriptor is not connected to a terminal, an OSError
is thrown.
This function will only be defined if an implementation is
available for this system.
shutil.get_terminal_size is the high-level function which should
normally be used, os.get_terminal_size is the low-level implementation.
cpu_count($module, /)
Return the number of CPUs in the system; return None if indeterminable.
This number is not equivalent to the number of CPUs the current process can
use.  The number of usable CPUs can be obtained with
``len(os.sched_getaffinity(0))``
get_inheritable($module, fd, /)
Get the close-on-exe flag of the specified file descriptor.
set_inheritable($module, fd, inheritable, /)
Set the inheritable flag of the specified file descriptor.
get_blocking($module, fd, /)
Get the blocking mode of the file descriptor.
Return False if the O_NONBLOCK flag is set, True if the flag is cleared.
set_blocking($module, fd, blocking, /)
Set the blocking mode of the specified file descriptor.
Set the O_NONBLOCK flag if blocking is False,
clear the O_NONBLOCK flag otherwise.
scandir($module, /, path=None)
Return an iterator of DirEntry objects for given path.
path can be specified as either str, bytes, or a path-like object.  If path
is bytes, the names of yielded DirEntry objects will also be bytes; in
all other circumstances they will be str.
If path is None, uses the path='.'.
fspath($module, /, path)
Return the file system path representation of the object.
If the object is str or bytes, then allow it to pass through as-is. If the
object defines __fspath__(), then return the result of that method. All other
types raise a TypeError.
waitstatus_to_exitcode($module, /, status)
Convert a wait status to an exit code.
On Unix:
* If WIFEXITED(status) is true, return WEXITSTATUS(status).
* If WIFSIGNALED(status) is true, return -WTERMSIG(status).
* Otherwise, raise a ValueError.
On Windows, return status shifted right by 8 bits.
On Unix, if the process is being traced or if waitpid() was called with
WUNTRACED option, the caller must first check if WIFSTOPPED(status) is true.
This function must not be called if WIFSTOPPED(status) is true.
stat_result: Result from stat, fstat, or lstat.
This object may be accessed either as a tuple of
  (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime)
or via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.
Posix/windows: If your platform supports st_blksize, st_blocks, st_rdev,
or st_flags, they are available as attributes only.
See os.stat for more information.
statvfs_result: Result from statvfs or fstatvfs.
This object may be accessed either as a tuple of
  (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, namemax),
or via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.
See os.statvfs for more information.
A tuple of (columns, lines) for holding terminal window size
is_dir($self, /, *, follow_symlinks=True)
Return True if the entry is a directory; cached per entry.
is_file($self, /, *, follow_symlinks=True)
Return True if the entry is a file; cached per entry.
is_symlink($self, /)
Return True if the entry is a symbolic link; cached per entry.
stat($self, /, *, follow_symlinks=True)
Return stat_result object for the entry; cached per entry.
inode($self, /)
Return inode of the entry; cached per entry.
__fspath__($self, /)
Returns the path for the entry.
times_result: Result from os.times().
This object may be accessed either as a tuple of
  (user, system, children_user, children_system, elapsed),
or via the attributes user, system, children_user, children_system,
and elapsed.
See os.times for more information.
uname_result: Result from os.uname().
This object may be accessed either as a tuple of
  (sysname, nodename, release, version, machine),
or via the attributes sysname, nodename, release, version, and machine.
See os.uname for more information.
This module makes available standard errno system symbols.
The value of each symbol is the corresponding integer value,
e.g., on most systems, errno.ENOENT equals the integer 2.
The dictionary errno.errorcode maps numeric codes to symbol names,
e.g., errno.errorcode[2] could be the string 'ENOENT'.
Symbols that are not relevant to the underlying system are not defined.
To map error codes to error messages, use the function os.strerror(),
e.g. os.strerror(2) could return 'No such file or directory'.
This module provides access to the Unix password database.
It is available on all Unix versions.
Password database entries are reported as 7-tuples containing the following
items from the password database (see `<pwd.h>'), in order:
pw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir, pw_shell.
The uid and gid items are integers, all others are strings. An
exception is raised if the entry asked for cannot be found.
getpwuid($module, uidobj, /)
Return the password database entry for the given numeric user ID.
See `help(pwd)` for more on password database entries.
getpwnam($module, name, /)
Return the password database entry for the given user name.
See `help(pwd)` for more on password database entries.
getpwall($module, /)
Return a list of all available password database entries, in arbitrary order.
See help(pwd) for more on password database entries.
pwd.struct_passwd: Results from getpw*() routines.
This object may be accessed either as a tuple of
  (pw_name,pw_passwd,pw_uid,pw_gid,pw_gecos,pw_dir,pw_shell)
or via the object attributes as named in the above tuple.
 SRE 2.2.2 Copyright (c) 1997-2002 by Secret Labs AB 
Compiled regular expression object.
match($self, /, string, pos=0, endpos=sys.maxsize)
Matches zero or more characters at the beginning of the string.
fullmatch($self, /, string, pos=0, endpos=sys.maxsize)
Matches against all of the string.
search($self, /, string, pos=0, endpos=sys.maxsize)
Scan through string looking for a match, and return a corresponding match object instance.
Return None if no position in the string matches.
sub($self, /, repl, string, count=0)
Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl.
subn($self, /, repl, string, count=0)
Return the tuple (new_string, number_of_subs_made) found by replacing the leftmost non-overlapping occurrences of pattern with the replacement repl.
findall($self, /, string, pos=0, endpos=sys.maxsize)
Return a list of all non-overlapping matches of pattern in string.
split($self, /, string, maxsplit=0)
Split string by the occurrences of pattern.
finditer($self, /, string, pos=0, endpos=sys.maxsize)
Return an iterator over all non-overlapping matches for the RE pattern in string.
For each match, the iterator returns a match object.
scanner($self, /, string, pos=0, endpos=sys.maxsize)
__copy__($self, /)
__deepcopy__($self, memo, /)
The result of re.match() and re.search().
Match objects always have a boolean value of True.
group([group1, ...]) -> str or tuple.
    Return subgroup(s) of the match by indices or names.
    For 0 returns the entire match.
start($self, group=0, /)
Return index of the start of the substring matched by group.
end($self, group=0, /)
Return index of the end of the substring matched by group.
span($self, group=0, /)
For match object m, return the 2-tuple (m.start(group), m.end(group)).
groups($self, /, default=None)
Return a tuple containing all the subgroups of the match, from 1.
  default
    Is used for groups that did not participate in the match.
groupdict($self, /, default=None)
Return a dictionary containing all the named subgroups of the match, keyed by the subgroup name.
  default
    Is used for groups that did not participate in the match.
expand($self, /, template)
Return the string obtained by doing backslash substitution on the string template, as done by the sub() method.
__copy__($self, /)
__deepcopy__($self, memo, /)
match($self, /)
search($self, /)
compile($module, /, pattern, flags, code, groups, groupindex,
        indexgroup)
getcodesize($module, /)
ascii_iscased($module, character, /)
unicode_iscased($module, character, /)
ascii_tolower($module, character, /)
unicode_tolower($module, character, /)
register($module, search_function, /)
Register a codec search function.
Search functions are expected to take one argument, the encoding name in
all lower case letters, and either return None, or a tuple of functions
(encoder, decoder, stream_reader, stream_writer) (or a CodecInfo object).
lookup($module, encoding, /)
Looks up a codec tuple in the Python codec registry and returns a CodecInfo object.
encode($module, /, obj, encoding='utf-8', errors='strict')
Encodes obj using the codec registered for encoding.
The default encoding is 'utf-8'.  errors may be given to set a
different error handling scheme.  Default is 'strict' meaning that encoding
errors raise a ValueError.  Other possible values are 'ignore', 'replace'
and 'backslashreplace' as well as any other name registered with
codecs.register_error that can handle ValueErrors.
decode($module, /, obj, encoding='utf-8', errors='strict')
Decodes obj using the codec registered for encoding.
Default encoding is 'utf-8'.  errors may be given to set a
different error handling scheme.  Default is 'strict' meaning that encoding
errors raise a ValueError.  Other possible values are 'ignore', 'replace'
and 'backslashreplace' as well as any other name registered with
codecs.register_error that can handle ValueErrors.
escape_encode($module, data, errors=None, /)
escape_decode($module, data, errors=None, /)
utf_8_encode($module, str, errors=None, /)
utf_8_decode($module, data, errors=None, final=False, /)
utf_7_encode($module, str, errors=None, /)
utf_7_decode($module, data, errors=None, final=False, /)
utf_16_encode($module, str, errors=None, byteorder=0, /)
utf_16_le_encode($module, str, errors=None, /)
utf_16_be_encode($module, str, errors=None, /)
utf_16_decode($module, data, errors=None, final=False, /)
utf_16_le_decode($module, data, errors=None, final=False, /)
utf_16_be_decode($module, data, errors=None, final=False, /)
utf_16_ex_decode($module, data, errors=None, byteorder=0, final=False,
                 /)
utf_32_encode($module, str, errors=None, byteorder=0, /)
utf_32_le_encode($module, str, errors=None, /)
utf_32_be_encode($module, str, errors=None, /)
utf_32_decode($module, data, errors=None, final=False, /)
utf_32_le_decode($module, data, errors=None, final=False, /)
utf_32_be_decode($module, data, errors=None, final=False, /)
utf_32_ex_decode($module, data, errors=None, byteorder=0, final=False,
                 /)
unicode_escape_encode($module, str, errors=None, /)
unicode_escape_decode($module, data, errors=None, /)
raw_unicode_escape_encode($module, str, errors=None, /)
raw_unicode_escape_decode($module, data, errors=None, /)
latin_1_encode($module, str, errors=None, /)
latin_1_decode($module, data, errors=None, /)
ascii_encode($module, str, errors=None, /)
ascii_decode($module, data, errors=None, /)
charmap_encode($module, str, errors=None, mapping=None, /)
charmap_decode($module, data, errors=None, mapping=None, /)
charmap_build($module, map, /)
readbuffer_encode($module, data, errors=None, /)
register_error($module, errors, handler, /)
Register the specified error handler under the name errors.
handler must be a callable object, that will be called with an exception
instance containing information about the location of the encoding/decoding
error and must return a (replacement, new position) tuple.
lookup_error($module, name, /)
lookup_error(errors) -> handler
Return the error handler for the specified error handling name or raise a
LookupError, if no handler exists under this name.
_forget_codec($module, encoding, /)
Purge the named codec from the internal codec lookup cache
getweakrefcount($module, object, /)
Return the number of weak references to 'object'.
_remove_dead_weakref($module, dct, key, /)
Atomically remove key from dict if it points to a dead weakref.
getweakrefs(object) -- return a list of all weak reference objects
that point to 'object'.
proxy(object[, callback]) -- create a proxy object that weakly
references 'object'.  'callback', if given, is called with a
reference to the proxy when 'object' is about to be finalized.
Tools that operate on functions.
reduce(function, sequence[, initial]) -> value
Apply a function of two arguments cumulatively to the items of a sequence,
from left to right, so as to reduce the sequence to a single value.
For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates
((((1+2)+3)+4)+5).  If initial is present, it is placed before the items
of the sequence in the calculation, and serves as a default when the
sequence is empty.
Convert a cmp= function into a key= function.
partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
Create a cached callable that wraps another function.
user_function:      the function being cached
maxsize:  0         for no caching
          None      for unlimited cache size
          n         for a bounded cache
typed:    False     cache f(3) and f(3.0) as identical calls
          True      cache f(3) and f(3.0) as distinct calls
cache_info_type:    namedtuple class with the fields:
                        hits misses currsize maxsize
....
Operator interface.
This module exports a set of functions implemented in C corresponding
to the intrinsic operators of Python.  For example, operator.add(x, y)
is equivalent to the expression x+y.  The function names are those
used for special methods; variants without leading and trailing
'__' are also provided for convenience.
truth($module, a, /)
Return True if a is true, False otherwise.
contains($module, a, b, /)
Same as b in a (note reversed operands).
indexOf($module, a, b, /)
Return the first index of b in a.
countOf($module, a, b, /)
Return the number of times b occurs in a.
is_($module, a, b, /)
Same as a is b.
is_not($module, a, b, /)
Same as a is not b.
index($module, a, /)
Same as a.__index__()
add($module, a, b, /)
Same as a + b.
sub($module, a, b, /)
Same as a - b.
mul($module, a, b, /)
Same as a * b.
matmul($module, a, b, /)
Same as a @ b.
floordiv($module, a, b, /)
Same as a // b.
truediv($module, a, b, /)
Same as a / b.
mod($module, a, b, /)
Same as a % b.
neg($module, a, /)
Same as -a.
pos($module, a, /)
Same as +a.
abs($module, a, /)
Same as abs(a).
inv($module, a, /)
Same as ~a.
invert($module, a, /)
Same as ~a.
lshift($module, a, b, /)
Same as a << b.
rshift($module, a, b, /)
Same as a >> b.
not_($module, a, /)
Same as not a.
and_($module, a, b, /)
Same as a & b.
xor($module, a, b, /)
Same as a ^ b.
or_($module, a, b, /)
Same as a | b.
iadd($module, a, b, /)
Same as a += b.
isub($module, a, b, /)
Same as a -= b.
imul($module, a, b, /)
Same as a *= b.
imatmul($module, a, b, /)
Same as a @= b.
ifloordiv($module, a, b, /)
Same as a //= b.
itruediv($module, a, b, /)
Same as a /= b.
imod($module, a, b, /)
Same as a %= b.
ilshift($module, a, b, /)
Same as a <<= b.
irshift($module, a, b, /)
Same as a >>= b.
iand($module, a, b, /)
Same as a &= b.
ixor($module, a, b, /)
Same as a ^= b.
ior($module, a, b, /)
Same as a |= b.
concat($module, a, b, /)
Same as a + b, for a and b sequences.
iconcat($module, a, b, /)
Same as a += b, for a and b sequences.
getitem($module, a, b, /)
Same as a[b].
setitem($module, a, b, c, /)
Same as a[b] = c.
delitem($module, a, b, /)
Same as del a[b].
pow($module, a, b, /)
Same as a ** b.
ipow($module, a, b, /)
Same as a **= b.
eq($module, a, b, /)
Same as a == b.
ne($module, a, b, /)
Same as a != b.
lt($module, a, b, /)
Same as a < b.
le($module, a, b, /)
Same as a <= b.
gt($module, a, b, /)
Same as a > b.
ge($module, a, b, /)
Same as a >= b.
_compare_digest($module, a, b, /)
Return 'a == b'.
This function uses an approach designed to prevent
timing analysis, making it appropriate for cryptography.
a and b must both be of the same type: either str (ASCII only),
or any bytes-like object.
Note: If a and b are of different lengths, or if an error occurs,
a timing attack could theoretically reveal information about the
types and lengths of a and b--but not their values.
length_hint($module, obj, default=0, /)
Return an estimate of the number of items in obj.
This is useful for presizing containers when building from an iterable.
If the object supports len(), the result will be exact.
Otherwise, it may over- or under-estimate by an arbitrary amount.
The result will be an integer >= 0.
itemgetter(item, ...) --> itemgetter object
Return a callable object that fetches the given item(s) from its operand.
After f = itemgetter(2), the call f(r) returns r[2].
After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])
Return state information for pickling
attrgetter(attr, ...) --> attrgetter object
Return a callable object that fetches the given attribute(s) from its operand.
After f = attrgetter('name'), the call f(r) returns r.name.
After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).
After h = attrgetter('name.first', 'name.last'), the call h(r) returns
(r.name.first, r.name.last).
methodcaller(name, ...) --> methodcaller object
Return a callable object that calls the given method on its operand.
After f = methodcaller('name'), the call f(r) returns r.name().
After g = methodcaller('name', 'date', foo=1), the call g(r) returns
r.name('date', foo=1).
High performance data structures.
- deque:        ordered collection accessible from endpoints only
- defaultdict:  dict subclass with a default value factory
_count_elements($module, mapping, iterable, /)
Count elements in the iterable, updating the mapping
deque([iterable[, maxlen]]) --> deque object
A list-like sequence optimized for data accesses near its endpoints.
Add an element to the right side of the deque.
Add an element to the left side of the deque.
Remove all elements from the deque.
Return a shallow copy of a deque.
D.count(value) -> integer -- return number of occurrences of value
Extend the right side of the deque with elements from the iterable
Extend the left side of the deque with elements from the iterable
D.index(value, [start, [stop]]) -> integer -- return first index of value.
Raises ValueError if the value is not present.
D.insert(index, object) -- insert object before index
Remove and return the rightmost element.
Remove and return the leftmost element.
Return state information for pickling.
D.remove(value) -- remove first occurrence of value.
D.__reversed__() -- return a reverse iterator over the deque
D.reverse() -- reverse *IN PLACE*
Rotate the deque n steps to the right (default n=1).  If n is negative, rotates left.
D.__sizeof__() -- size of D in memory, in bytes
defaultdict(default_factory=None, /, [...]) --> dict with default factory
The default factory is called without arguments to produce
a new value when a key is not present, in __getitem__ only.
A defaultdict compares equal to a dict with the same items.
All remaining arguments are treated the same as if they were
passed to the dict constructor, including keyword arguments.
__missing__(key) # Called by __getitem__ for missing key; pseudo-code:
  if self.default_factory is None: raise KeyError((key,))
  self[key] = value = self.default_factory()
  return value
D.copy() -> a shallow copy of D.
Private method returning an estimate of len(list(it)).
Module contains faster C implementation of abc.ABCMeta
get_cache_token($module, /)
Returns the current ABC cache token.
The token is an opaque object (supporting equality testing) identifying the
current version of the ABC cache for virtual subclasses. The token changes
with every call to register() on any ABC.
_abc_init($module, self, /)
Internal ABC helper for class set-up. Should be never used outside abc module.
_reset_registry($module, self, /)
Internal ABC helper to reset registry of a given class.
Should be only used by refleak.py
_reset_caches($module, self, /)
Internal ABC helper to reset both caches of a given class.
Should be only used by refleak.py
_get_dump($module, self, /)
Internal ABC helper for cache and registry debugging.
Return shallow copies of registry, of both caches, and
negative cache version. Don't call this function directly,
instead use ABC._dump_registry() for a nice repr.
_abc_register($module, self, subclass, /)
Internal ABC helper for subclasss registration. Should be never used outside abc module.
_abc_instancecheck($module, self, instance, /)
Internal ABC helper for instance checks. Should be never used outside abc module.
_abc_subclasscheck($module, self, subclass, /)
Internal ABC helper for subclasss checks. Should be never used outside abc module.
Internal state held by ABC machinery.
Functional tools for creating and using iterators.
Infinite iterators:
count(start=0, step=1) --> start, start+step, start+2*step, ...
cycle(p) --> p0, p1, ... plast, p0, p1, ...
repeat(elem [,n]) --> elem, elem, elem, ... endlessly or up to n times
Iterators terminating on the shortest input sequence:
accumulate(p[, func]) --> p0, p0+p1, p0+p1+p2
chain(p, q, ...) --> p0, p1, ... plast, q0, q1, ...
chain.from_iterable([p, q, ...]) --> p0, p1, ... plast, q0, q1, ...
compress(data, selectors) --> (d[0] if s[0]), (d[1] if s[1]), ...
dropwhile(pred, seq) --> seq[n], seq[n+1], starting when pred fails
groupby(iterable[, keyfunc]) --> sub-iterators grouped by value of keyfunc(v)
filterfalse(pred, seq) --> elements of seq where pred(elem) is False
islice(seq, [start,] stop [, step]) --> elements from
       seq[start:stop:step]
starmap(fun, seq) --> fun(*seq[0]), fun(*seq[1]), ...
tee(it, n=2) --> (it1, it2 , ... itn) splits one iterator into n
takewhile(pred, seq) --> seq[0], seq[1], until pred fails
zip_longest(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ...
Combinatoric generators:
product(p, q, ... [repeat=1]) --> cartesian product
permutations(p[, r])
combinations(p, r)
combinations_with_replacement(p, r)
tee($module, iterable, n=2, /)
Returns a tuple of n independent iterators.
_tee(iterable, /)
Iterator wrapped to make it copyable.
Returns an independent iterator.
Return state information for pickling.
Set state information for unpickling.
teedataobject(iterable, values, next, /)
Data container common to multiple tee objects.
accumulate(iterable, func=None, *, initial=None)
Return series of accumulated sums (or other binary function results).
combinations(iterable, r)
Return successive r-length combinations of elements in the iterable.
combinations(range(4), 3) --> (0,1,2), (0,1,3), (0,2,3), (1,2,3)
Returns size in memory, in bytes.
combinations_with_replacement(iterable, r)
Return successive r-length combinations of elements in the iterable allowing individual elements to have successive repeats.
combinations_with_replacement('ABC', 2) --> AA AB AC BB BC CC"
cycle(iterable, /)
Return elements from the iterable until it is exhausted. Then repeat the sequence indefinitely.
dropwhile(predicate, iterable, /)
Drop items from the iterable while predicate(item) is true.
Afterwards, return every element until the iterable is exhausted.
takewhile(predicate, iterable, /)
Return successive entries from an iterable as long as the predicate evaluates to true for each entry.
islice(iterable, stop) --> islice object
islice(iterable, start, stop[, step]) --> islice object
Return an iterator whose next() method returns selected values from an
iterable.  If start is specified, will skip all preceding elements;
otherwise, start defaults to zero.  Step defaults to one.  If
specified as another value, step determines how many values are
skipped between successive calls.  Works like a slice() on a list
but returns an iterator.
starmap(function, iterable, /)
Return an iterator whose values are returned from the function evaluated with an argument tuple taken from the given sequence.
chain(*iterables) --> chain object
Return a chain object whose .__next__() method returns elements from the
first iterable until it is exhausted, then elements from the next
iterable, until all of the iterables are exhausted.
from_iterable($type, iterable, /)
Alternative chain() constructor taking a single iterable argument that evaluates lazily.
compress(data, selectors)
Return data elements corresponding to true selector elements.
Forms a shorter iterator from selected data elements using the selectors to
choose the data elements.
filterfalse(function, iterable, /)
Return those items of iterable for which function(item) is false.
If function is None, return the items that are false.
count(start=0, step=1)
Return a count object whose .__next__() method returns consecutive values.
Equivalent to:
    def count(firstval=0, step=1):
        x = firstval
        while 1:
            yield x
            x += step
zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> zip_longest object
Return a zip_longest object whose .__next__() method returns a tuple where
the i-th element comes from the i-th iterable argument.  The .__next__()
method continues until the longest iterable in the argument sequence
is exhausted and then it raises StopIteration.  When the shorter iterables
are exhausted, the fillvalue is substituted in their place.  The fillvalue
defaults to None or can be specified by a keyword argument.
permutations(iterable, r=None)
Return successive r-length permutations of elements in the iterable.
permutations(range(3), 2) --> (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)
product(*iterables, repeat=1) --> product object
Cartesian product of input iterables.  Equivalent to nested for-loops.
For example, product(A, B) returns the same as:  ((x,y) for x in A for y in B).
The leftmost iterators are in the outermost for-loop, so the output tuples
cycle in a manner similar to an odometer (with the rightmost element changing
on every iteration).
To compute the product of an iterable with itself, specify the number
of repetitions with the optional repeat keyword argument. For example,
product(A, repeat=4) means the same as product(A, A, A, A).
product('ab', range(3)) --> ('a',0) ('a',1) ('a',2) ('b',0) ('b',1) ('b',2)
product((0,1), (0,1), (0,1)) --> (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) ...
repeat(object [,times]) -> create an iterator which returns the object
for the specified number of times.  If not specified, returns the object
endlessly.
Private method returning an estimate of len(list(it)).
groupby(iterable, key=None)
make an iterator that returns consecutive keys and groups from the iterable
  iterable
    Elements to divide into groups according to the key function.
  key
    A function for computing the group category for each element.
    If the key function is not specified or is None, the element itself
    is used for grouping.
allow programmer to define multiple exit functions to be executedupon normal program termination.
Two public functions, register and unregister, are defined.
register(func, *args, **kwargs) -> func
Register a function to be executed upon normal program termination
    func - function to be called at exit
    args - optional arguments to pass to func
    kwargs - optional keyword arguments to pass to func
    func is returned to facilitate usage as a decorator.
_clear() -> None
Clear the list of previously registered exit functions.
unregister(func) -> None
Unregister an exit function which was previously registered using
atexit.register
    func - function to be unregistered
_run_exitfuncs() -> None
Run all registered exit functions.
_ncallbacks() -> int
Return the number of registered exit functions.
This module provides mechanisms to use signal handlers in Python.
Functions:
alarm() -- cause SIGALRM after a specified time [Unix only]
setitimer() -- cause a signal (described below) after a specified
               float time and the timer may restart then [Unix only]
getitimer() -- get current value of timer [Unix only]
signal() -- set the action for a given signal
getsignal() -- get the signal action for a given signal
pause() -- wait until a signal arrives [Unix only]
default_int_handler() -- default SIGINT handler
signal constants:
SIG_DFL -- used to refer to the system default handler
SIG_IGN -- used to ignore the signal
NSIG -- number of defined signals
SIGINT, SIGTERM, etc. -- signal numbers
itimer constants:
ITIMER_REAL -- decrements in real time, and delivers SIGALRM upon
               expiration
ITIMER_VIRTUAL -- decrements only when the process is executing,
               and delivers SIGVTALRM upon expiration
ITIMER_PROF -- decrements both when the process is executing and
               when the system is executing on behalf of the process.
               Coupled with ITIMER_VIRTUAL, this timer is usually
               used to profile the time spent by the application
               in user and kernel space. SIGPROF is delivered upon
               expiration.
*** IMPORTANT NOTICE ***
A signal handler function is called with two arguments:
the first is the signal number, the second is the interrupted stack frame.
default_int_handler(...)
The default handler for SIGINT installed by Python.
It raises KeyboardInterrupt.
alarm($module, seconds, /)
Arrange for SIGALRM to arrive after the given number of seconds.
setitimer($module, which, seconds, interval=0.0, /)
Sets given itimer (one of ITIMER_REAL, ITIMER_VIRTUAL or ITIMER_PROF).
The timer will fire after value seconds and after that every interval seconds.
The itimer can be cleared by setting seconds to zero.
Returns old values as a tuple: (delay, interval).
getitimer($module, which, /)
Returns current value of given itimer.
signal($module, signalnum, handler, /)
Set the action for the given signal.
The action can be SIG_DFL, SIG_IGN, or a callable Python object.
The previous action is returned.  See getsignal() for possible return values.
*** IMPORTANT NOTICE ***
A signal handler function is called with two arguments:
the first is the signal number, the second is the interrupted stack frame.
raise_signal($module, signalnum, /)
Send a signal to the executing process.
strsignal($module, signalnum, /)
Return the system description of the given signal.
The return values can be such as "Interrupt", "Segmentation fault", etc.
Returns None if the signal is not recognized.
getsignal($module, signalnum, /)
Return the current action for the given signal.
The return value can be:
  SIG_IGN -- if the signal is being ignored
  SIG_DFL -- if the default action for the signal is in effect
  None    -- if an unknown handler is in effect
  anything else -- the callable Python object used as a handler
set_wakeup_fd(fd, *, warn_on_full_buffer=True) -> fd
Sets the fd to be written to (with the signal number) when a signal
comes in.  A library can use this to wakeup select or poll.
The previous fd or -1 is returned.
The fd must be non-blocking.
siginterrupt($module, signalnum, flag, /)
Change system call restart behaviour.
If flag is False, system calls will be restarted when interrupted by
signal sig, else system calls will be interrupted.
pause($module, /)
Wait until a signal arrives.
pthread_kill($module, thread_id, signalnum, /)
Send a signal to a thread.
pthread_sigmask($module, how, mask, /)
Fetch and/or change the signal mask of the calling thread.
sigpending($module, /)
Examine pending signals.
Returns a set of signal numbers that are pending for delivery to
the calling thread.
sigwait($module, sigset, /)
Wait for a signal.
Suspend execution of the calling thread until the delivery of one of the
signals specified in the signal set sigset.  The function accepts the signal
and returns the signal number.
valid_signals($module, /)
Return a set of valid signal numbers on this platform.
The signal numbers returned by this function can be safely passed to
functions like `pthread_sigmask`.
S_IFMT_: file type bits
S_IFDIR: directory
S_IFCHR: character device
S_IFBLK: block device
S_IFREG: regular file
S_IFIFO: fifo (named pipe)
S_IFLNK: symbolic link
S_IFSOCK: socket file
S_IFDOOR: door
S_IFPORT: event port
S_IFWHT: whiteout
S_ISUID: set UID bit
S_ISGID: set GID bit
S_ENFMT: file locking enforcement
S_ISVTX: sticky bit
S_IREAD: Unix V7 synonym for S_IRUSR
S_IWRITE: Unix V7 synonym for S_IWUSR
S_IEXEC: Unix V7 synonym for S_IXUSR
S_IRWXU: mask for owner permissions
S_IRUSR: read by owner
S_IWUSR: write by owner
S_IXUSR: execute by owner
S_IRWXG: mask for group permissions
S_IRGRP: read by group
S_IWGRP: write by group
S_IXGRP: execute by group
S_IRWXO: mask for others (not in group) permissions
S_IROTH: read by others
S_IWOTH: write by others
S_IXOTH: execute by others
UF_NODUMP: do not dump file
UF_IMMUTABLE: file may not be changed
UF_APPEND: file may only be appended to
UF_OPAQUE: directory is opaque when viewed through a union stack
UF_NOUNLINK: file may not be renamed or deleted
UF_COMPRESSED: OS X: file is hfs-compressed
UF_HIDDEN: OS X: file should not be displayed
SF_ARCHIVED: file may be archived
SF_IMMUTABLE: file may not be changed
SF_APPEND: file may only be appended to
SF_NOUNLINK: file may not be renamed or deleted
SF_SNAPSHOT: file is a snapshot file
ST_MODE
ST_INO
ST_DEV
ST_NLINK
ST_UID
ST_GID
ST_SIZE
ST_ATIME
ST_MTIME
ST_CTIME
FILE_ATTRIBUTE_*: Windows file attribute constants
                   (only present on Windows)
S_ISDIR(mode) -> bool
Return True if mode is from a directory.
S_ISCHR(mode) -> bool
Return True if mode is from a character special device file.
S_ISBLK(mode) -> bool
Return True if mode is from a block special device file.
S_ISREG(mode) -> bool
Return True if mode is from a regular file.
S_ISFIFO(mode) -> bool
Return True if mode is from a FIFO (named pipe).
S_ISLNK(mode) -> bool
Return True if mode is from a symbolic link.
S_ISSOCK(mode) -> bool
Return True if mode is from a socket.
S_ISDOOR(mode) -> bool
Return True if mode is from a door.
S_ISPORT(mode) -> bool
Return True if mode is from an event port.
S_ISWHT(mode) -> bool
Return True if mode is from a whiteout.
Return the portion of the file's mode that can be set by os.chmod().
Return the portion of the file's mode that describes the file type.
Convert a file's mode to a string of the form '-rwxrwxrwx'
This module provides various functions to manipulate time values.
There are two standard representations of time.  One is the number
of seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer
or a floating point number (to represent fractions of seconds).
The Epoch is system-defined; on Unix, it is generally January 1st, 1970.
The actual value can be retrieved by calling gmtime(0).
The other representation is a tuple of 9 integers giving local time.
The tuple items are:
  year (including century, e.g. 1998)
  month (1-12)
  day (1-31)
  hours (0-23)
  minutes (0-59)
  seconds (0-59)
  weekday (0-6, Monday is 0)
  Julian day (day in the year, 1-366)
  DST (Daylight Savings Time) flag (-1, 0 or 1)
If the DST flag is 0, the time is given in the regular time zone;
if it is 1, the time is given in the DST time zone;
if it is -1, mktime() should guess based on the date and time.
time() -> floating point number
Return the current time in seconds since the Epoch.
Fractions of a second may be present if the system clock provides them.
time_ns() -> int
Return the current time in nanoseconds since the Epoch.
clock_gettime(clk_id) -> float
Return the time of the specified clock clk_id.
clock_gettime_ns(clk_id) -> int
Return the time of the specified clock clk_id as nanoseconds.
clock_settime(clk_id, time)
Set the time of the specified clock clk_id.
clock_settime_ns(clk_id, time)
Set the time of the specified clock clk_id with nanoseconds.
clock_getres(clk_id) -> floating point number
Return the resolution (precision) of the specified clock clk_id.
sleep(seconds)
Delay execution for a given number of seconds.  The argument may be
a floating point number for subsecond precision.
gmtime([seconds]) -> (tm_year, tm_mon, tm_mday, tm_hour, tm_min,
                       tm_sec, tm_wday, tm_yday, tm_isdst)
Convert seconds since the Epoch to a time tuple expressing UTC (a.k.a.
GMT).  When 'seconds' is not passed in, convert the current time instead.
If the platform supports the tm_gmtoff and tm_zone, they are available as
attributes only.
localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,
                          tm_sec,tm_wday,tm_yday,tm_isdst)
Convert seconds since the Epoch to a time tuple expressing local time.
When 'seconds' is not passed in, convert the current time instead.
asctime([tuple]) -> string
Convert a time tuple to a string, e.g. 'Sat Jun 06 16:26:11 1998'.
When the time tuple is not present, current time as returned by localtime()
is used.
ctime(seconds) -> string
Convert a time in seconds since the Epoch to a string in local time.
This is equivalent to asctime(localtime(seconds)). When the time tuple is
not present, current time as returned by localtime() is used.
mktime(tuple) -> floating point number
Convert a time tuple in local time to seconds since the Epoch.
Note that mktime(gmtime(0)) will not generally return zero for most
time zones; instead the returned value will either be equal to that
of the timezone or altzone attributes on the time module.
strftime(format[, tuple]) -> string
Convert a time tuple to a string according to a format specification.
See the library reference manual for formatting codes. When the time tuple
is not present, current time as returned by localtime() is used.
Commonly used format codes:
%Y  Year with century as a decimal number.
%m  Month as a decimal number [01,12].
%d  Day of the month as a decimal number [01,31].
%H  Hour (24-hour clock) as a decimal number [00,23].
%M  Minute as a decimal number [00,59].
%S  Second as a decimal number [00,61].
%z  Time zone offset from UTC.
%a  Locale's abbreviated weekday name.
%A  Locale's full weekday name.
%b  Locale's abbreviated month name.
%B  Locale's full month name.
%c  Locale's appropriate date and time representation.
%I  Hour (12-hour clock) as a decimal number [01,12].
%p  Locale's equivalent of either AM or PM.
Other codes may be available on your platform.  See documentation for
the C library strftime function.
strptime(string, format) -> struct_time
Parse a string to a time tuple according to a format specification.
See the library reference manual for formatting codes (same as
strftime()).
Commonly used format codes:
%Y  Year with century as a decimal number.
%m  Month as a decimal number [01,12].
%d  Day of the month as a decimal number [01,31].
%H  Hour (24-hour clock) as a decimal number [00,23].
%M  Minute as a decimal number [00,59].
%S  Second as a decimal number [00,61].
%z  Time zone offset from UTC.
%a  Locale's abbreviated weekday name.
%A  Locale's full weekday name.
%b  Locale's abbreviated month name.
%B  Locale's full month name.
%c  Locale's appropriate date and time representation.
%I  Hour (12-hour clock) as a decimal number [01,12].
%p  Locale's equivalent of either AM or PM.
Other codes may be available on your platform.  See documentation for
the C library strftime function.
tzset()
Initialize, or reinitialize, the local timezone to the value stored in
os.environ['TZ']. The TZ environment variable should be specified in
standard Unix timezone format as documented in the tzset man page
(eg. 'US/Eastern', 'Europe/Amsterdam'). Unknown timezones will silently
fall back to UTC. If the TZ environment variable is not set, the local
timezone is set to the systems best guess of wallclock time.
Changing the TZ environment variable without calling tzset *may* change
the local timezone used by methods such as localtime, but this behaviour
should not be relied on.
monotonic() -> float
Monotonic clock, cannot go backward.
monotonic_ns() -> int
Monotonic clock, cannot go backward, as nanoseconds.
process_time() -> float
Process time for profiling: sum of the kernel and user-space CPU time.
process_time() -> int
Process time for profiling as nanoseconds:
sum of the kernel and user-space CPU time.
thread_time() -> float
Thread time for profiling: sum of the kernel and user-space CPU time.
thread_time() -> int
Thread time for profiling as nanoseconds:
sum of the kernel and user-space CPU time.
perf_counter() -> float
Performance counter for benchmarking.
perf_counter_ns() -> int
Performance counter for benchmarking as nanoseconds.
get_clock_info(name: str) -> dict
Get information of the specified clock.
A lock object is a synchronization primitive.  To create a lock,
call threading.Lock().  Methods are:
acquire() -- lock the lock, possibly blocking until it can be obtained
release() -- unlock of the lock
locked() -- test whether the lock is currently locked
A lock is not owned by the thread that locked it; another thread may
unlock it.  A thread attempting to lock a lock that it has already locked
will block until another thread unlocks it.  Deadlocks may ensue.
acquire(blocking=True, timeout=-1) -> bool
(acquire_lock() is an obsolete synonym)
Lock the lock.  Without argument, this blocks if the lock is already
locked (even by the same thread), waiting for another thread to release
the lock, and return True once the lock is acquired.
With an argument, this will only block if the argument is true,
and the return value reflects whether the lock is acquired.
The blocking operation is interruptible.
release()
(release_lock() is an obsolete synonym)
Release the lock, allowing another thread that is blocked waiting for
the lock to acquire the lock.  The lock must be in the locked state,
but it needn't be locked by the same thread that unlocks it.
locked() -> bool
(locked_lock() is an obsolete synonym)
Return whether the lock is in the locked state.
acquire(blocking=True) -> bool
Lock the lock.  `blocking` indicates whether we should wait
for the lock to be available or not.  If `blocking` is False
and another thread holds the lock, the method will return False
immediately.  If `blocking` is True and another thread holds
the lock, the method will wait for the lock to be released,
take it and then return True.
(note: the blocking operation is interruptible.)
In all other cases, the method will return True immediately.
Precisely, if the current thread already holds the lock, its
internal counter is simply incremented. If nobody holds the lock,
the lock is taken and its internal counter initialized to 1.
release()
Release the lock, allowing another thread that is blocked waiting for
the lock to acquire the lock.  The lock must be in the locked state,
and must be locked by the same thread that unlocks it; otherwise a
`RuntimeError` is raised.
Do note that if the lock was acquire()d several times in a row by the
current thread, release() needs to be called as many times for the lock
to be available for other threads.
_is_owned() -> bool
For internal use by `threading.Condition`.
_acquire_restore(state) -> None
For internal use by `threading.Condition`.
_release_save() -> tuple
For internal use by `threading.Condition`.
ExceptHookArgs
Type used to pass arguments to threading.excepthook.
This module provides primitive operations to write multi-threaded programs.
The 'threading' module provides a more convenient interface.
start_new_thread(function, args[, kwargs])
(start_new() is an obsolete synonym)
Start a new thread and return its identifier.  The thread will call the
function with positional arguments from the tuple args and keyword arguments
taken from the optional dictionary kwargs.  The thread exits when the
function returns; the return value is ignored.  The thread will also exit
when the function raises an unhandled exception; a stack trace will be
printed unless the exception is SystemExit.
allocate_lock() -> lock object
(allocate() is an obsolete synonym)
Create a new lock object. See help(type(threading.Lock())) for
information about locks.
exit()
(exit_thread() is an obsolete synonym)
This is synonymous to ``raise SystemExit''.  It will cause the current
thread to exit silently unless the exception is caught.
interrupt_main()
Raise a KeyboardInterrupt in the main thread.
A subthread can use this function to interrupt the main thread.
get_ident() -> integer
Return a non-zero integer that uniquely identifies the current thread
amongst other threads that exist simultaneously.
This may be used to identify per-thread resources.
Even though on some platforms threads identities may appear to be
allocated consecutive numbers starting at 1, this behavior should not
be relied upon, and the number should be seen purely as a magic cookie.
A thread's identity may be reused for another thread after it exits.
get_native_id() -> integer
Return a non-negative integer identifying the thread as reported
by the OS (kernel). This may be used to uniquely identify a
particular thread within a system.
_count() -> integer
Return the number of currently running Python threads, excluding
the main thread. The returned number comprises all threads created
through `start_new_thread()` as well as `threading.Thread`, and not
yet finished.
This function is meant for internal and specialized purposes only.
In most applications `threading.enumerate()` should be used instead.
stack_size([size]) -> size
Return the thread stack size used when creating new threads.  The
optional size argument specifies the stack size (in bytes) to be used
for subsequently created threads, and must be 0 (use platform or
configured default) or a positive integer value of at least 32,768 (32k).
If changing the thread stack size is unsupported, a ThreadError
exception is raised.  If the specified size is invalid, a ValueError
exception is raised, and the stack size is unmodified.  32k bytes
 currently the minimum supported stack size value to guarantee
sufficient stack space for the interpreter itself.
Note that some platforms may have particular restrictions on values for
the stack size, such as requiring a minimum stack size larger than 32 KiB or
requiring allocation in multiples of the system memory page size
- platform documentation should be referred to for more information
(4 KiB pages are common; using multiples of 4096 for the stack size is
the suggested approach in the absence of more specific information).
_set_sentinel() -> lock
Set a sentinel lock that will be released when the current thread
state is finalized (after it is untied from the interpreter).
This is a private API for the threading module.
excepthook(exc_type, exc_value, exc_traceback, thread)
Handle uncaught Thread.run() exception.
Support for POSIX locales.
(integer,string=None) -> string. Activates/queries locale processing.
() -> dict. Returns numeric and monetary locale-specific parameters.
string,string -> int. Compares two strings according to the locale.
strxfrm(string) -> string.
Return a string that can be used as a key for locale-aware comparisons.
nl_langinfo(key) -> string
Return the value for the locale information associated with key.
The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.
At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an OSError if they do not support a given operation.
Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.
BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.
Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is an in-memory stream for text.
Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.
data:
DEFAULT_BUFFER_SIZE
   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.
open($module, /, file, mode='r', buffering=-1, encoding=None,
     errors=None, newline=None, closefd=True, opener=None)
Open file and return a stream.  Raise OSError upon failure.
file is either a text or byte string giving the name (and the path
if the file isn't in the current working directory) of the file to
be opened or an integer file descriptor of the file to be
wrapped. (If a file descriptor is given, it is closed when the
returned I/O object is closed, unless closefd is set to False.)
mode is an optional string that specifies the mode in which the file
is opened. It defaults to 'r' which means open for reading in text
mode.  Other common values are 'w' for writing (truncating the file if
it already exists), 'x' for creating and writing to a new file, and
'a' for appending (which on some Unix systems, means that all writes
append to the end of the file regardless of the current seek position).
In text mode, if encoding is not specified the encoding used is platform
dependent: locale.getpreferredencoding(False) is called to get the
current locale encoding. (For reading and writing raw bytes use binary
mode and leave encoding unspecified.) The available modes are:
========= ===============================================================
Character Meaning
--------- ---------------------------------------------------------------
'r'       open for reading (default)
'w'       open for writing, truncating the file first
'x'       create a new file and open it for writing
'a'       open for writing, appending to the end of the file if it exists
'b'       binary mode
't'       text mode (default)
'+'       open a disk file for updating (reading and writing)
'U'       universal newline mode (deprecated)
========= ===============================================================
The default mode is 'rt' (open for reading text). For binary random
access, the mode 'w+b' opens and truncates the file to 0 bytes, while
'r+b' opens the file without truncation. The 'x' mode implies 'w' and
raises an `FileExistsError` if the file already exists.
Python distinguishes between files opened in binary and text modes,
even when the underlying operating system doesn't. Files opened in
binary mode (appending 'b' to the mode argument) return contents as
bytes objects without any decoding. In text mode (the default, or when
't' is appended to the mode argument), the contents of the file are
returned as strings, the bytes having been first decoded using a
platform-dependent encoding or using the specified encoding if given.
'U' mode is deprecated and will raise an exception in future versions
of Python.  It has no effect in Python 3.  Use newline to control
universal newlines mode.
buffering is an optional integer used to set the buffering policy.
Pass 0 to switch buffering off (only allowed in binary mode), 1 to select
line buffering (only usable in text mode), and an integer > 1 to indicate
the size of a fixed-size chunk buffer.  When no buffering argument is
given, the default buffering policy works as follows:
* Binary files are buffered in fixed-size chunks; the size of the buffer
  is chosen using a heuristic trying to determine the underlying device's
  "block size" and falling back on `io.DEFAULT_BUFFER_SIZE`.
  On many systems, the buffer will typically be 4096 or 8192 bytes long.
* "Interactive" text files (files for which isatty() returns True)
  use line buffering.  Other text files use the policy described above
  for binary files.
encoding is the name of the encoding used to decode or encode the
file. This should only be used in text mode. The default encoding is
platform dependent, but any encoding supported by Python can be
passed.  See the codecs module for the list of supported encodings.
errors is an optional string that specifies how encoding errors are to
be handled---this argument should not be used in binary mode. Pass
'strict' to raise a ValueError exception if there is an encoding error
(the default of None has the same effect), or pass 'ignore' to ignore
errors. (Note that ignoring encoding errors can lead to data loss.)
See the documentation for codecs.register or run 'help(codecs.Codec)'
for a list of the permitted encoding error strings.
newline controls how universal newlines works (it only applies to text
mode). It can be None, '', '\n', '\r', and '\r\n'.  It works as
follows:
* On input, if newline is None, universal newlines mode is
  enabled. Lines in the input can end in '\n', '\r', or '\r\n', and
  these are translated into '\n' before being returned to the
  caller. If it is '', universal newline mode is enabled, but line
  endings are returned to the caller untranslated. If it has any of
  the other legal values, input lines are only terminated by the given
  string, and the line ending is returned to the caller untranslated.
* On output, if newline is None, any '\n' characters written are
  translated to the system default line separator, os.linesep. If
  newline is '' or '\n', no translation takes place. If newline is any
  of the other legal values, any '\n' characters written are translated
  to the given string.
If closefd is False, the underlying file descriptor will be kept open
when the file is closed. This does not work when a file name is given
and must be True in that case.
A custom opener can be used by passing a callable as *opener*. The
underlying file descriptor for the file object is then obtained by
calling *opener* with (*file*, *flags*). *opener* must return an open
file descriptor (passing os.open as *opener* results in functionality
similar to passing None).
open() returns a file object whose type depends on the mode, and
through which the standard file operations such as reading and writing
are performed. When open() is used to open a file in a text mode ('w',
'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open
a file in a binary mode, the returned class varies: in read binary
mode, it returns a BufferedReader; in write binary and append binary
modes, it returns a BufferedWriter, and in read/write mode, it returns
a BufferedRandom.
It is also possible to use a string or bytearray as a file for both
reading and writing. For strings StringIO can be used like a file
opened in a text mode, and for bytes a BytesIO can be used like a file
opened in a binary mode.
open_code($module, /, path)
Opens the provided file with the intent to import the contents.
This may perform extra validation beyond open(), but is otherwise interchangeable
with calling open(path, 'rb').
The abstract base class for all I/O classes, acting on streams of
bytes. There is no public constructor.
This class provides dummy implementations for many methods that
derived classes can override selectively; the default implementations
represent a file that cannot be read, written or seeked.
Even though IOBase does not declare read, readinto, or write because
their signatures will vary, implementations and clients should
consider those methods part of the interface. Also, implementations
may raise UnsupportedOperation when operations they do not support are
called.
The basic type used for binary data read from or written to a file is
bytes. Other bytes-like objects are accepted as method arguments too.
In some cases (such as readinto), a writable object is required. Text
I/O classes work with str data.
Note that calling any method (except additional calls to close(),
which are ignored) on a closed stream should raise a ValueError.
IOBase (and its subclasses) support the iterator protocol, meaning
that an IOBase object can be iterated over yielding the lines in a
stream.
IOBase also supports the :keyword:`with` statement. In this example,
fp is closed after the suite of the with statement is complete:
with open('spam.txt', 'r') as fp:
    fp.write('Spam and eggs!')
Base class for raw binary I/O.
Change stream position.
Change the stream position to the given byte offset. The offset is
interpreted relative to the position indicated by whence.  Values
for whence are:
* 0 -- start of stream (the default); offset should be zero or positive
* 1 -- current stream position; offset may be negative
* 2 -- end of stream; offset is usually negative
Return the new absolute position.
tell($self, /)
Return current stream position.
Truncate file to size bytes.
File pointer is left unchanged.  Size defaults to the current IO
position as reported by tell().  Returns the new size.
flush($self, /)
Flush write buffers, if applicable.
This is not implemented for read-only and non-blocking streams.
close($self, /)
Flush and close the IO object.
This method has no effect if the file is already closed.
seekable($self, /)
Return whether object supports random access.
If False, seek(), tell() and truncate() will raise OSError.
This method may need to do a test seek().
readable($self, /)
Return whether object was opened for reading.
If False, read() will raise OSError.
writable($self, /)
Return whether object was opened for writing.
If False, write() will raise OSError.
fileno($self, /)
Returns underlying file descriptor if one exists.
OSError is raised if the IO object does not use a file descriptor.
isatty($self, /)
Return whether this is an 'interactive' stream.
Return False if it can't be determined.
readline($self, size=-1, /)
Read and return a line from the stream.
If size is specified, at most size bytes will be read.
The line terminator is always b'\n' for binary files; for text
files, the newlines argument to open can be used to select the line
terminator(s) recognized.
readlines($self, hint=-1, /)
Return a list of lines from the stream.
hint can be specified to control the number of lines read: no more
lines will be read if the total size (in bytes/characters) of all
lines so far exceeds hint.
writelines($self, lines, /)
Write a list of lines to stream.
Line separators are not added, so it is usual for each of the
lines provided to have a line separator at the end.
read($self, size=-1, /)
readall($self, /)
Read until EOF, using multiple read() call.
FileIO(file, mode='r', closefd=True, opener=None)
Open a file.
The mode can be 'r' (default), 'w', 'x' or 'a' for reading,
writing, exclusive creation or appending.  The file will be created if it
doesn't exist when opened for writing or appending; it will be truncated
when opened for writing.  A FileExistsError will be raised if it already
exists when opened for creating. Opening a file for creating implies
writing so this mode behaves in a similar way to 'w'.Add a '+' to the mode
to allow simultaneous reading and writing. A custom opener can be used by
passing a callable as *opener*. The underlying file descriptor for the file
object is then obtained by calling opener with (*name*, *flags*).
*opener* must return an open file descriptor (passing os.open as *opener*
results in functionality similar to passing None).
read($self, size=-1, /)
Read at most size bytes, returned as bytes.
Only makes one system call, so less data may be returned than requested.
In non-blocking mode, returns None if no data is available.
Return an empty bytes object at EOF.
readall($self, /)
Read all data from the file, returned as bytes.
In non-blocking mode, returns as much as is immediately available,
or None if no data is available.  Return an empty bytes object at EOF.
readinto($self, buffer, /)
Same as RawIOBase.readinto().
write($self, b, /)
Write buffer b to file, return number of bytes written.
Only makes one system call, so not all of the data may be written.
The number of bytes actually written is returned.  In non-blocking mode,
returns None if the write would block.
seek($self, pos, whence=0, /)
Move to new file position and return the file position.
Argument offset is a byte count.  Optional argument whence defaults to
SEEK_SET or 0 (offset from start of file, offset should be >= 0); other values
are SEEK_CUR or 1 (move relative to current position, positive or negative),
and SEEK_END or 2 (move relative to end of file, usually negative, although
many platforms allow seeking beyond the end of a file).
Note that not all file objects are seekable.
tell($self, /)
Current file position.
Can raise OSError for non seekable files.
truncate($self, size=None, /)
Truncate the file to at most size bytes and return the truncated size.
Size defaults to the current file position, as returned by tell().
The current file position is changed to the value of size.
close($self, /)
Close the file.
A closed file cannot be used for further I/O operations.  close() may be
called more than once without error.
seekable($self, /)
True if file supports random-access.
readable($self, /)
True if file was opened in a read mode.
writable($self, /)
True if file was opened in a write mode.
fileno($self, /)
Return the underlying file descriptor (an integer).
isatty($self, /)
True if the file is connected to a TTY device.
BytesIO(initial_bytes=b'')
Buffered I/O implementation using an in-memory bytes buffer.
readable($self, /)
Returns True if the IO object can be read.
seekable($self, /)
Returns True if the IO object can be seeked.
writable($self, /)
Returns True if the IO object can be written.
close($self, /)
Disable all I/O operations.
flush($self, /)
Does nothing.
isatty($self, /)
Always returns False.
BytesIO objects are not connected to a TTY-like device.
tell($self, /)
Current file position, an integer.
write($self, b, /)
Write bytes to file.
Return the number of bytes written.
writelines($self, lines, /)
Write lines to the file.
Note that newlines are not added.  lines can be any iterable object
producing bytes-like objects. This is equivalent to calling write() for
each element.
read1($self, size=-1, /)
Read at most size bytes, returned as a bytes object.
If the size argument is negative or omitted, read until EOF is reached.
Return an empty bytes object at EOF.
readinto($self, buffer, /)
Read bytes into buffer.
Returns number of bytes read (0 for EOF), or None if the object
is set not to block and has no data to read.
readline($self, size=-1, /)
Next line from the file, as a bytes object.
Retain newline.  A non-negative size argument limits the maximum
number of bytes to return (an incomplete line may be returned then).
Return an empty bytes object at EOF.
readlines($self, size=None, /)
List of bytes objects, each a line from the file.
Call readline() repeatedly and return a list of the lines so read.
The optional size argument, if given, is an approximate bound on the
total number of bytes in the lines returned.
read($self, size=-1, /)
Read at most size bytes, returned as a bytes object.
If the size argument is negative, read until EOF is reached.
Return an empty bytes object at EOF.
getbuffer($self, /)
Get a read-write view over the contents of the BytesIO object.
getvalue($self, /)
Retrieve the entire contents of the BytesIO object.
seek($self, pos, whence=0, /)
Change stream position.
Seek to byte offset pos relative to position indicated by whence:
     0  Start of stream (the default).  pos should be >= 0;
     1  Current position - pos may be negative;
     2  End of stream - pos usually negative.
Returns the new absolute position.
truncate($self, size=None, /)
Truncate the file to at most size bytes.
Size defaults to the current file position, as returned by tell().
The current file position is unchanged.  Returns the new size.
Base class for buffered IO objects.
The main difference with RawIOBase is that the read() method
supports omitting the size argument, and does not have a default
implementation that defers to readinto().
In addition, read(), readinto() and write() may raise
BlockingIOError if the underlying raw stream is in non-blocking
mode and not ready; unlike their raw counterparts, they will never
return None.
A typical implementation should not inherit from a RawIOBase
implementation, but wrap one.
BufferedReader(raw, buffer_size=DEFAULT_BUFFER_SIZE)
Create a new buffered reader using the given readable raw IO object.
BufferedWriter(raw, buffer_size=DEFAULT_BUFFER_SIZE)
A buffer for a writeable sequential RawIO object.
The constructor creates a BufferedWriter for the given writeable raw
stream. If the buffer_size is not given, it defaults to
DEFAULT_BUFFER_SIZE.
BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE, /)
A buffered reader and writer object together.
A buffered reader object and buffered writer object put together to
form a sequential IO object that can read and write. This is typically
used with a socket or two-way pipe.
reader and writer are RawIOBase objects that are readable and
writeable respectively. If the buffer_size is omitted it defaults to
DEFAULT_BUFFER_SIZE.
BufferedRandom(raw, buffer_size=DEFAULT_BUFFER_SIZE)
A buffered interface to random access streams.
The constructor creates a reader and writer for a seekable stream,
raw, given in the first argument. If the buffer_size is omitted it
defaults to DEFAULT_BUFFER_SIZE.
detach($self, /)
Disconnect this buffer from its underlying raw stream and return it.
After the raw stream has been detached, the buffer is in an unusable
state.
Read and return up to n bytes.
If the argument is omitted, None, or negative, reads and
returns all data until EOF.
If the argument is positive, and the underlying raw stream is
not 'interactive', multiple raw reads may be issued to satisfy
the byte count (unless EOF is reached first).  But for
interactive raw streams (as well as sockets and pipes), at most
one raw read will be issued, and a short result does not imply
that EOF is imminent.
Returns an empty bytes object on EOF.
Returns None if the underlying raw stream was open in non-blocking
mode and no data is available at the moment.
Read and return up to n bytes, with at most one read() call
to the underlying raw stream. A short result does not imply
that EOF is imminent.
Returns an empty bytes object on EOF.
readinto($self, buffer, /)
readinto1($self, buffer, /)
Write the given buffer to the IO stream.
Returns the number of bytes written, which is always the length of b
in bytes.
Raises BlockingIOError if the buffer is full and the
underlying raw stream cannot accept more data at the moment.
read($self, size=-1, /)
peek($self, size=0, /)
read1($self, size=-1, /)
readinto($self, buffer, /)
readinto1($self, buffer, /)
readline($self, size=-1, /)
seek($self, target, whence=0, /)
truncate($self, pos=None, /)
write($self, buffer, /)
Base class for text I/O.
This class provides a character and line based interface to stream
I/O. There is no readinto method because Python's character strings
are immutable. There is no public constructor.
IncrementalNewlineDecoder(decoder, translate, errors='strict')
Codec used when reading a file in universal newlines mode.
It wraps another incremental decoder, translating \r\n and \r into \n.
It also records the types of newlines encountered.  When used with
translate=False, it ensures that the newline sequence is returned in
one piece. When used with decoder=None, it expects unicode strings as
decode input and translates newlines without first invoking an external
decoder.
TextIOWrapper(buffer, encoding=None, errors=None, newline=None,
              line_buffering=False, write_through=False)
Character and line based layer over a BufferedIOBase object, buffer.
encoding gives the name of the encoding that the stream will be
decoded or encoded with. It defaults to locale.getpreferredencoding(False).
errors determines the strictness of encoding and decoding (see
help(codecs.Codec) or the documentation for codecs.register) and
defaults to "strict".
newline controls how line endings are handled. It can be None, '',
'\n', '\r', and '\r\n'.  It works as follows:
* On input, if newline is None, universal newlines mode is
  enabled. Lines in the input can end in '\n', '\r', or '\r\n', and
  these are translated into '\n' before being returned to the
  caller. If it is '', universal newline mode is enabled, but line
  endings are returned to the caller untranslated. If it has any of
  the other legal values, input lines are only terminated by the given
  string, and the line ending is returned to the caller untranslated.
* On output, if newline is None, any '\n' characters written are
  translated to the system default line separator, os.linesep. If
  newline is '' or '\n', no translation takes place. If newline is any
  of the other legal values, any '\n' characters written are translated
  to the given string.
If line_buffering is True, a call to flush is implied when a call to
write contains a newline character.
Separate the underlying buffer from the TextIOBase and return it.
After the underlying buffer has been detached, the TextIO is in an
unusable state.
Read at most n characters from stream.
Read from underlying buffer until we have n characters or we hit EOF.
If n is negative or omitted, read until EOF.
Read until newline or EOF.
Returns an empty string if EOF is hit immediately.
Write string to stream.
Returns the number of characters written (which is always equal to
the length of the string).
Encoding of the text stream.
Subclasses should override.
Line endings translated so far.
Only line endings translated during reading are considered.
Subclasses should override.
The error setting of the decoder or encoder.
Subclasses should override.
decode($self, /, input, final=False)
getstate($self, /)
setstate($self, state, /)
reset($self, /)
detach($self, /)
reconfigure($self, /, *, encoding=None, errors=None, newline=None,
            line_buffering=None, write_through=None)
Reconfigure the text stream with new parameters.
This also does an implicit stream flush.
write($self, text, /)
read($self, size=-1, /)
readline($self, size=-1, /)
flush($self, /)
close($self, /)
fileno($self, /)
seekable($self, /)
readable($self, /)
writable($self, /)
isatty($self, /)
seek($self, cookie, whence=0, /)
tell($self, /)
truncate($self, pos=None, /)
StringIO(initial_value='', newline='\n')
Text I/O implementation using an in-memory buffer.
The initial_value argument sets the value of object.  The newline
argument is like the one of TextIOWrapper's constructor.
close($self, /)
Close the IO object.
Attempting any further operation after the object is closed
will raise a ValueError.
This method has no effect if the file is already closed.
getvalue($self, /)
Retrieve the entire contents of the object.
read($self, size=-1, /)
Read at most size characters, returned as a string.
If the argument is negative or omitted, read until EOF
is reached. Return an empty string at EOF.
readline($self, size=-1, /)
Read until newline or EOF.
Returns an empty string if EOF is hit immediately.
tell($self, /)
Tell the current file position.
truncate($self, pos=None, /)
Truncate size to pos.
The pos argument defaults to the current file position, as
returned by tell().  The current file position is unchanged.
Returns the new absolute position.
seek($self, pos, whence=0, /)
Change stream position.
Seek to character offset pos relative to position indicated by whence:
    0  Start of stream (the default).  pos should be >= 0;
    1  Current position - pos must be 0;
    2  End of stream - pos must be 0.
Returns the new absolute position.
write($self, s, /)
Write string to file.
Returns the number of characters written, which is always equal to
the length of the string.
seekable($self, /)
Returns True if the IO object can be seeked.
readable($self, /)
Returns True if the IO object can be read.
writable($self, /)
Returns True if the IO object can be written.
faulthandler module.
Debug module to trace memory blocks allocated by Python.
is_tracing($module, /)
Return True if the tracemalloc module is tracing Python memory allocations.
clear_traces($module, /)
Clear traces of memory blocks allocated by Python.
_get_traces($module, /)
Get traces of all memory blocks allocated by Python.
Return a list of (size: int, traceback: tuple) tuples.
traceback is a tuple of (filename: str, lineno: int) tuples.
Return an empty list if the tracemalloc module is disabled.
_get_object_traceback($module, obj, /)
Get the traceback where the Python object obj was allocated.
Return a tuple of (filename: str, lineno: int) tuples.
Return None if the tracemalloc module is disabled or did not
trace the allocation of the object.
start($module, nframe=1, /)
Start tracing Python memory allocations.
Also set the maximum number of frames stored in the traceback of a
trace to nframe.
stop($module, /)
Stop tracing Python memory allocations.
Also clear traces of memory blocks allocated by Python.
get_traceback_limit($module, /)
Get the maximum number of frames stored in the traceback of a trace.
By default, a trace of an allocated memory block only stores
the most recent frame: the limit is 1.
get_tracemalloc_memory($module, /)
Get the memory usage in bytes of the tracemalloc module.
This memory is used internally to trace memory allocations.
get_traced_memory($module, /)
Get the current size and peak size of memory blocks traced by tracemalloc.
Returns a tuple: (current: int, peak: int).
reset_peak($module, /)
Set the peak size of memory blocks traced by tracemalloc to the current size.
Do nothing if the tracemalloc module is not tracing memory allocations.
symtable($module, source, filename, startstr, /)
Return symbol and scope dictionaries used internally by compiler.
xxsubtype is an example module showing how to subtype builtin types from C.
test_descr.py in the standard test suite requires it in order to complete.
If you don't care about the examples, and don't intend to run the Python
test suite, you can recompile Python without Modules/xxsubtype.c.
d d!
d#d$
d^d%d&
d'd(
d)d*
d+d,
d-d.
d/d0
d1d2
d3d4
d5d6
d7d8
d9d:
d;d<
d=d>
Z d?d@
Z!d_dAdB
Z"dCdD
Z#dEZ$e$dF
Z%dGdH
Z&e'
Z(dIdJ
Z)d`dLdM
Z*d'dN
dOdP
Z+dQdR
Z,dadTdU
Z-dVdW
Z.dXdY
Z/dZd[
Z0d\d]
)baS
Core implementation of import.
This module is NOT meant to be directly imported! It has been designed such
that it can be bootstrapped into Python as the implementation of import. As
such it requires the injection of specific modules and attributes in order to
work. One should use importlib as the public-facing version of this module.
z/Simple substitute for functools.update_wrapper.)
__module__
__name__
__qualname__
__doc__N)
hasattr
setattr
getattr
__dict__
update)
newZ
replace
<frozen importlib._bootstrap>
_wrap
type
namer
_new_module#
_DeadlockErrorN)
_ModuleLockz
A recursive lock implementation which is able to detect deadlocks
    (e.g. thread 1 trying to take locks A then B, and thread 2 trying to
    take locks B then A).
    c
_threadZ
allocate_lock
lock
wakeupr
owner
count
waiters
selfr
__init__:
_ModuleLock.__init__c
NFT)
get_identr
_blocking_on
add)
tidZ
seenr
has_deadlockB
_ModuleLock.has_deadlockc
        Acquire the module lock.  If a potential deadlock is detected,
        a _DeadlockError is raised.
        Otherwise, the lock is always acquired and True is returned.
        r
deadlock detected by %rF)r
acquirer
release
_ModuleLock.acquirec
cannot release un-acquired lockr
RuntimeErrorr
_ModuleLock.releasec
_ModuleLock({!r}) at {}
formatr
__repr__}
_ModuleLock.__repr__N)
_DummyModuleLockzVA simple _ModuleLock equivalent for Python builds without
    multi-threading support.c
_DummyModuleLock.__init__c
_DummyModuleLock.acquirec
_DummyModuleLock.releasec
_DummyModuleLock({!r}) at {}r-
_DummyModuleLock.__repr__N)
_ModuleLockManagerc
_name
_lockr
_ModuleLockManager.__init__c
_get_module_lockr4
__enter__
_ModuleLockManager.__enter__c
argsZ
kwargsr
__exit__
_ModuleLockManager.__exit__N)
Get or create the module lock for a given module name.
    Acquire/release internally the global import lock to protect
    _module_locks.Nc
_imp
acquire_lock
_module_locksr#
release_lock)
refr
_get_module_lock.<locals>.cb)
KeyErrorr
_weakrefr>
Acquires then releases the module lock for a given module name.
    This is used to ensure a module is completely initialized, in the
    event it is being imported by another thread.
    N)
_lock_unlock_module
remove_importlib_frames in import.c will always remove sequences
    of importlib frames that end with a call to this function
    Use it instead of a normal call in places where including the importlib
    frames introduces unwanted noise into the traceback (e.g. when executing
    module code)
    r
kwdsr
_call_with_frames_removed
verbosityc
z=Print the message to stderr if -v/PYTHONVERBOSE is turned on.)
import z
fileN)
flags
verbose
startswith
printr.
stderr)
messagerE
_verbose_message
z1Decorator to verify the named module is built-in.c
{!r} is not a built-in moduler
builtin_module_names
ImportErrorr.
fullname
fxnr
_requires_builtin_wrapper
z4_requires_builtin.<locals>._requires_builtin_wrapper
_requires_builtin
z/Decorator to verify the named module is frozen.c
{!r} is not a frozen moduler
is_frozenrP
_requires_frozen_wrapper
z2_requires_frozen.<locals>._requires_frozen_wrapperrV
_requires_frozen
Load the specified module into sys.modules and return it.
    This method is deprecated.  Use loader.exec_module instead.
    N)
spec_from_loaderr
modules
_exec
_load)
spec
moduler
_load_module_shim
r6z|
__loader__
module_repr
<module {!r}>
<module {!r} ({!r})>
<module {!r} from {!r}>)
Exception
__spec__
AttributeError
_module_repr_from_specr
__file__r.
loaderr`
filenamer
_module_repr
ModuleSpeca
The specification for a module, used for loading.
    A module's spec is the source for information about the module.  For
    data associated with the module, including source, use the spec's
    loader.
    `name` is the absolute name of the module.  `loader` is the loader
    to use when loading the module.  `parent` is the name of the
    package the module is in.  The parent is derived from the name.
    `is_package` determines if the module is considered a package or
    not.  On modules this is reflected by the `__path__` attribute.
    `origin` is the specific location used by the loader from which to
    load the module, if that information is available.  When filename is
    set, origin will match.
    `has_location` indicates that a spec's "origin" reflects a location.
    When this is True, `__file__` attribute of the module is set.
    `cached` is the location of the cached bytecode file, if any.  It
    corresponds to the `__cached__` attribute.
    `submodule_search_locations` is the sequence of path entries to
    search when importing submodules.  If set, is_package should be
    True--and False otherwise.
    Packages are simply modules that (may) have submodules.  If a spec
    has a non-None value in `submodule_search_locations`, the import
    system will consider modules loaded from the spec as packages.
    Only finders (see importlib.abc.MetaPathFinder and
    importlib.abc.PathEntryFinder) should modify ModuleSpec instances.
    N)
origin
loader_state
is_packagec
submodule_search_locations
_set_fileattr
_cached)
ModuleSpec.__init__c
name={!r}z
loader={!r}z
origin={!r}z
submodule_search_locations={}z
{}({})z
appendru
__class__r
join)
ModuleSpec.__repr__c
cached
has_locationrk
NotImplemented)
otherZ
smslr
__eq__u
ModuleSpec.__eq__c
_bootstrap_external
NotImplementedErrorZ
_get_cachedr0
ModuleSpec.cachedc
z The name of the module's parent.N
rpartitionr0
parent
ModuleSpec.parentc
ModuleSpec.has_locationc
boolrv
valuer
propertyr{
setterr
z5Return a module spec based on various loader methods.Zget_filenameN)
spec_from_file_locationrt
searchr
_ORIGIN
__cached__
list
__path__rq
locationr{
_spec_from_module
overridec
r4z|
rFz|
__package__r
_NamespaceLoader
__new__Z
_pathrm
_init_module_attrs
z+Create a module based on the provided spec.N
create_module
exec_modulezBloaders that define exec_module() must also define create_module())
module_from_spec.
z&Return the repr to use for the module.Nre
<module {!r} ({})>)
zFExecute the spec's specified module in an existing module's namespace.z
module {!r} not in sys.modulesr
missing loaderTr
load_moduler
pop)
msgr
_load_backward_compatiblen
import {!r} # {!r}F)
_initializingr
_load_unlocked
Return a new module object, loaded by the spec's loader.
    The module is not added to its parent.
    If a module is already in sys.modules, that existing module gets
    clobbered.
    N)
BuiltinImporterz
Meta path import for built-in modules.
    All methods are either class or static methods to avoid the need to
    instantiate the class.
    z
built-inc
sReturn repr for the module.
        The method is deprecated.  The import machinery does the job itself.
        z
<module z
BuiltinImporter.module_reprNc
is_builtinr\
clsrR
path
targetr
find_spec
BuiltinImporter.find_specc
Find the built-in module.
        If 'path' is ever specified then the search is considered a failure.
        This method is deprecated.  Use find_spec() instead.
        N)
find_module
BuiltinImporter.find_modulec
Create a built-in modulerN
create_builtin)
BuiltinImporter.create_modulec
Exec a built-in moduleN)
Zexec_builtin)
BuiltinImporter.exec_modulec
z9Return None as built-in modules do not have code objects.Nr
get_code
BuiltinImporter.get_codec
z8Return None as built-in modules do not have source code.Nr
get_source
BuiltinImporter.get_sourcec
z4Return False as built-in modules are never packages.Fr
BuiltinImporter.is_package)
staticmethodrd
classmethodr
FrozenImporterz
Meta path import for frozen modules.
    All methods are either class or static methods to avoid the need to
    instantiate the class.
    Z
frozenc
FrozenImporter.module_reprNc
FrozenImporter.find_specc
z]Find a frozen module.
        This method is deprecated.  Use find_spec() instead.
        N)
FrozenImporter.find_modulec
z*Use default semantics for module creation.Nr
FrozenImporter.create_modulec
get_frozen_object
execr
coder
FrozenImporter.exec_modulec
z_Load a frozen module.
        This method is deprecated.  Use exec_module() instead.
        )
FrozenImporter.load_modulec
z-Return the code object for the frozen module.)
FrozenImporter.get_codec
z6Return None as frozen modules do not have source code.Nr
FrozenImporter.get_sourcec
z.Return True if the frozen module is a package.)
is_frozen_packager
FrozenImporter.is_package)
_ImportLockContextz$Context manager for the import lock.c
Acquire the import lock.N)
_ImportLockContext.__enter__c
z<Release the import lock regardless of any raised exceptions.N)
exc_type
exc_value
exc_tracebackr
_ImportLockContext.__exit__N)
z2Resolve a relative module name to an absolute one.r
z2attempted relative import beyond top-level packager
{}.{})
rsplit
lenrP
package
levelZ
bitsZ
baser
_resolve_names
finderr
_find_spec_legacy|
Find a module's spec.Nz5sys.meta_path is None, Python is likely shutting downz
sys.meta_path is empty)r
meta_pathrP
_warnings
warn
ImportWarningr]
is_reloadr
_find_spec
Verify arguments are "sane".z
module name must be str, not {}r
level must be >= 0z
__package__ not set to a stringz6attempted relative import with no known parent packagez
Empty module nameN)
isinstance
TypeErrorr.
ValueErrorrP
_sanity_check
No module named z
{!r}c
; {!r} is not a packager
Cannot set an attribute on z
 for child module )
_ERR_MSGr.
ModuleNotFoundErrorr
import_r
parent_moduler
childr
_find_and_load_unlocked
Find and load the module.Nz(import of {} halted; None in sys.modulesr
_NEEDS_LOADINGr
_find_and_load
Import and return the module based on its name, the package the call is
    being made from, and the level adjustment.
    This function represents the greatest common denominator of functionality
    between import_module and __import__. This includes setting __package__ if
    the loader did not.
    r
_gcd_importr
recursivec
Figure out what __import__ should return.
    The import_ parameter is a callable which takes the name of module to
    import. It is required to decouple the function from assuming importlib's
    import implementation is desired.
    z
.__all__z
``from list''z
Item in z
 must be str, not 
__all__Tr
_handle_fromlistr
fromlistr
whereZ
from_nameZ
excr
Calculate what __package__ should be.
    __package__ is not guaranteed to be defined or could be set to None
    to represent that its proper value is unknown.
    r
Nz __package__ != __spec__.parent (z
 != 
stacklevelzYcan't resolve package from __spec__ or __package__, falling back on __name__ and __path__r
globalsr
_calc___package__.
Import a module.
    The 'globals' argument is used to infer where the import is occurring from
    to handle relative imports. The 'locals' argument is ignored. The
    'fromlist' argument specifies what should exist as attributes on the module
    being imported (e.g. ``from module import <fromlist>``).  The 'level'
    argument represents the package location to import from in a relative
    import (e.g. ``from ..pkg import mod`` would have a 'level' of 2).
    r
partitionr
localsr
globals_r
cut_offr
__import__I
no built-in module named )
_builtin_from_namen
Setup importlib by importing needed built-in modules and injecting them
    into the global namespace.
    As sys is needed for sys.modules access and _imp is needed to load built-in
    modules, those two modules must be explicitly passed in.
    )
itemsr
sys_module
_imp_moduleZ
module_typer
self_moduleZbuiltin_nameZ
builtin_moduler
_setupu
z0Install importers for builtin and frozen modulesN)
_install
z9Install importers that require external filesystem accessr
_frozen_importlib_externalr
_install_external_importers
_ERR_MSG_PREFIXr
objectr
<module>
d d!
r$d"d#
d$d#
Z dod&d'
Z!e"e!j#
Z$d(
%d)d*
Z&e'
(e&d*
Z)d,Z*d-Z+d.g
Z,d/g
Z-e-
Z.Z/dpd
d1d2
Z0d3d4
Z1d5d6
Z2d7d8
Z3d9d:
Z4d;d<
Z5d=d>
Z6d?d@
Z7dAdB
Z8dCdD
Z9dqdEdF
Z:drdGdH
Z;dsdJdK
Z<dLdM
Z=e>
Z?dtd
e?dN
dOdP
dQdR
dSdT
dUdV
dVeB
dWdX
dYdZ
dZeDeC
d[d\
d\eDeB
d]d^
d^eDeB
d_d`
dadb
dcdd
dedf
ZLdudgdh
ZMdidj
ZNdkdl
ZOdmdn
)va^
Core implementation of path-based import.
This module is NOT meant to be directly imported! It has been designed such
that it can be bootstrapped into Python as the implementation of import. As
such it requires the injection of specific modules and attributes in order to
work. One should use importlib as the public-facing version of this module.
win32
&<frozen importlib._bootstrap_external>
<genexpr>+
<setcomp>/
win)
cygwinZ
darwinc
NZPYTHONCASEOKs
PYTHONCASEOKc
z^True if filenames must be checked case-insensitively and ignore environment flags are not set.)
flags
ignore_environment
_osZ
environr
keyr
_relax_case@
z%_make_relax_case.<locals>._relax_casec
z5True if filenames must be checked case-insensitively.Fr
platform
startswith
_CASE_INSENSITIVE_PLATFORMS
#_CASE_INSENSITIVE_PLATFORMS_STR_KEY)
_make_relax_case9
z*Convert a 32-bit integer to little-endian.
little)
to_bytes)
_pack_uint32J
z/Convert 4 bytes in little-endian to an integer.r"
from_bytes
datar
_unpack_uint32O
z/Convert 2 bytes in little-endian to an integer.
_unpack_uint16T
Replacement for os.path.join().r
rstrip
path_separators
<listcomp>r
_path_join.<locals>.<listcomp>)
mapr
_path_splitrootr
path_sep_tuple
endswithr1
path_sep
casefold
append
join)
path_parts
root
pathZ
new_root
tailr
_path_join[
partr
z Replacement for os.path.split().c
rfindr3
_path_split.<locals>.<genexpr>r
maxr2
_path_split
z~Stat the path.
    Made a separate function to make it easier to override in experiments
    (e.g. cache stat results).
    )
statrG
_path_stat
z1Test whether the path is the specified mode type.Fi
OSError
st_mode)
modeZ
stat_infor
_path_is_mode_type
Replacement for os.path.isfile.i
_path_isfile
Replacement for os.path.isdir.i
getcwdrO
_path_isdir
Replacement for os.path.isabs.Fr
replacer
_path_isabs
Best-effort function to write data to a path atomically.
    Be prepared to handle a FileExistsError if concurrent writing of the
    temporary file is attempted.
{}.{}rV
wbN)
format
openZ
O_EXCLZ
O_CREATZ
O_WRONLY
FileIO
writerT
unlink)
path_tmpZ
filer
_write_atomic
__pycache__z
opt-z
.pyz
.pyc)
optimizationc
Given the path to a .py file, return the path to its .pyc file.
    The .py file does not need to exist; this simply returns the path to the
    .pyc file calculated as if the .py file were imported.
    The 'optimization' parameter controls the presumed optimization level of
    the bytecode file. If 'optimization' is not None, the string representation
    of the argument is taken and verified to be alphanumeric (else ValueError
    is raised).
    The debug_override parameter is deprecated. If debug_override is not None,
    a True value is the same as setting 'optimization' to the empty string
    while a False value is equivalent to setting 'optimization' to '1'.
    If sys.implementation.cache_tag is None then NotImplementedError is raised.
    NzFthe debug_override parameter is deprecated; use 'optimization' insteadz2debug_override or optimization must be set to Noner
$sys.implementation.cache_tag is Noner
{!r} is not alphanumericz
{}.{}{}r
_warnings
warn
DeprecationWarning
TypeErrorr
fspathrJ
rpartitionr
implementation
cache_tag
NotImplementedErrorr>
optimize
isalnum
ValueErrorrX
_OPT
BYTECODE_SUFFIXES
pycache_prefixrU
lstrip
_PYCACHE)rA
debug_overrider_
message
headrB
baser
restZ
tagZ
almost_filename
filenamer
cache_from_sourcei
Given the path to a .pyc. file, return the path to its .py file.
    The .pyc file does not need to exist; this simply returns the path to
    the .py file calculated to correspond to the .pyc file.  If path does
    not conform to PEP 3147/488 format, ValueError will be raised. If
    sys.implementation.cache_tag is None then NotImplementedError is raised.
    Nra
 not bottom-level directory in r`
expected only 2 or 3 dots in ry
z5optimization portion of filename does not start with z
optimization level z
 is not an alphanumeric valuer
count
rsplitro
partitionrC
SOURCE_SUFFIXES)
pycache_filenameZ
found_in_pycache_prefixZ
stripped_pathZ
pycacheZ
dot_countr_
opt_levelZ
base_filenamer
source_from_cache
Convert a bytecode file path to a source path (if possible).
    This function exists purely for backwards-compatibility for
    PyImport_ExecCodeModuleWithFilenames() in the C API.
    r
lowerr
bytecode_pathrv
extension
source_pathr
_get_sourcefile
tupler~
_get_cached
z3Calculate the mode permissions for a bytecode file.rV
_calc_mode
Decorator to verify that the module being requested matches the one the
    loader can handle.
    The first argument (self) must define _name which the second argument is
    compared against. If the comparison fails then ImportError is raised.
    Nc
loader for %s cannot handle %s
name)
ImportError)
selfr
args
kwargs
methodr
_check_name_wrapper
z(_check_name.<locals>._check_name_wrapperc
__module__
__name__
__qualname__
__doc__)
hasattr
setattr
getattr
__dict__
update)
newZ
oldrT
_wrap
_check_name.<locals>._wrap)
_bootstrapr
NameError)
_check_name
Try to find a loader for the specified module by delegating to
    self.find_loader().
    This method is deprecated in favor of finder.find_spec().
    Nz,Not importing directory {}: missing __init__r
find_loaderr
ImportWarning)
fullname
loader
portions
msgr
_find_module_shim
)aT
Perform basic validity checking of a pyc header and return the flags field,
    which determines how the pyc should be further validated against the source.
    *data* is the contents of the pyc file. (Only the first 16 bytes are
    required, though.)
    *name* is the name of the module being imported. It is used for logging.
    *exc_details* is a dictionary passed to ImportError if it raised for
    improved debugging.
    ImportError is raised when the magic number is incorrect or when the flags
    field is invalid. EOFError is raised when the data is found to be truncated.
    Nr"
bad magic number in z
z(reached EOF while reading pyc header of 
invalid flags z
 in )
MAGIC_NUMBERr
_verbose_messager
EOFErrorr,
exc_detailsZ
magicrt
_classify_pyc0
Validate a pyc against the source last-modified time.
    *data* is the contents of the pyc file. (Only the first 16 bytes are
    required.)
    *source_mtime* is the last modified timestamp of the source file.
    *source_size* is None or the size of the source file in bytes.
    *name* is the name of the module being imported. It is used for logging.
    *exc_details* is a dictionary passed to ImportError if it raised for
    improved debugging.
    An ImportError is raised if the bytecode is stale.
    r
bytecode is stale for r
source_mtime
source_sizer
_validate_timestamp_pycQ
Validate a hash-based pyc by checking the real source hash against the one in
    the pyc header.
    *data* is the contents of the pyc file. (Only the first 16 bytes are
    required.)
    *source_hash* is the importlib.util.source_hash() of the source file.
    *name* is the name of the module being imported. It is used for logging.
    *exc_details* is a dictionary passed to ImportError if it raised for
    improved debugging.
    An ImportError is raised if the bytecode is stale.
    r
z.hash in bytecode doesn't match hash of source N)
source_hashr
_validate_hash_pycm
z#Compile bytecode as found in a pyc.z
code object from {!r}Nz
Non-code object in {!r}
marshalZ
loads
isinstance
_code_typer
_impZ
_fix_co_filenamer
coder
_compile_bytecode
z+Produce the data for a timestamp-based pyc.r
bytearrayr
extendr'
dumps)
mtimer
_code_to_timestamp_pyc
z&Produce the data for a hash-based pyc.r
checkedr+
_code_to_hash_pyc
zyDecode bytes representing source code and return the string.
    Universal newline support is used in the decoding.
    r
tokenizerZ
BytesIOZ
readlineZ
detect_encodingZ
IncrementalNewlineDecoder
decode)
source_bytesr
source_bytes_readline
encodingZ
newline_decoderr
decode_source
submodule_search_locationsc
Return a module spec based on a file location.
    To indicate that the module is a package, set
    submodule_search_locations to a list of directory paths.  An
    empty list is sufficient, though its not otherwise useful to the
    import system.
    The loader must take a spec as its only __init__() arg.
    Nz
<unknown>
get_filename
originT
is_packager
ModuleSpecZ
_set_fileattr
_get_supported_file_loadersr:
_POPULATEr
locationr
spec
loader_class
suffixesr
dirnamer
spec_from_file_location
WindowsRegistryFinderz>Meta path finder for modules declared in the Windows registry.z;Software\Python\PythonCore\{sys_version}\Modules\{fullname}zASoftware\Python\PythonCore\{sys_version}\Modules\{fullname}\DebugFc
winregZ
OpenKeyZ
HKEY_CURRENT_USERrL
HKEY_LOCAL_MACHINE)
clsr
_open_registry
z$WindowsRegistryFinder._open_registryc
%d.%dr-
sys_versionr
DEBUG_BUILD
REGISTRY_KEY_DEBUG
REGISTRY_KEYrX
version_infor
QueryValuerL
Zregistry_keyr
hkey
filepathr
_search_registry
z&WindowsRegistryFinder._search_registryNc
spec_from_loader)
targetr
find_spec
WindowsRegistryFinder.find_specc
zlFind module named in the registry.
        This method is deprecated.  Use exec_module() instead.
        N
find_module.
z!WindowsRegistryFinder.find_module)
N)r
classmethodr
_LoaderBasicszSBase class of common code needed by both SourceLoader and
    SourcelessFileLoader.c
Concrete implementation of InspectLoader.is_package by checking if
        the path returned by get_filename has a filename of '__init__.py'.r
__init__)
filename_baseZ
tail_namer
_LoaderBasics.is_packagec
z*Use default semantics for module creation.Nr
create_moduleI
_LoaderBasics.create_modulec
Execute the module.Nz4cannot load module {!r} when get_code() returns None)
get_coder
_call_with_frames_removed
execr
moduler
exec_moduleL
_LoaderBasics.exec_modulec
This module is deprecated.)
_load_module_shim
load_moduleT
_LoaderBasics.load_moduleN)
SourceLoaderc
Optional method that returns the modification time (an int) for the
        specified path (a str).
        Raises OSError when the path cannot be handled.
        N)
path_mtime[
SourceLoader.path_mtimec
Optional method returning a metadata dict for the specified
        path (a str).
        Possible keys:
        - 'mtime' (mandatory) is the numeric timestamp of last source
          code modification;
        - 'size' (optional) is the size in bytes of the source code.
        Implementing this method allows the loader to read bytecode files.
        Raises OSError when the path cannot be handled.
        r
path_statsc
SourceLoader.path_statsc
Optional method which writes data (bytes) to a file path (a str).
        Implementing this method allows for the writing of bytecode files.
        The source path is needed in order to correctly transfer permissions
        )
set_data)
cache_pathr+
_cache_bytecodeq
SourceLoader._cache_bytecodec
Optional method which writes data (bytes) to a file path (a str).
        Implementing this method allows for the writing of bytecode files.
        Nr
SourceLoader.set_datac
z4Concrete implementation of InspectLoader.get_source.z'source not available through get_data()r
get_datarL
excr
get_source
SourceLoader.get_sourcer
_optimizec
Return the code object compiled from source.
        The 'data' argument can be any object type that compile() supports.
        r
dont_inheritrk
compile)
source_to_code
SourceLoader.source_to_codec
Concrete implementation of InspectLoader.get_code.
        Reading of bytecode requires path_stats to be implemented. To write
        bytecode, set_data must also be implemented.
        NFTr
neverZ
always
sizez
{} matches {})
code object from {})
memoryviewr
check_hash_based_pycsr
_RAW_MAGIC_NUMBERr
dont_write_bytecoder
hash_basedZcheck_sourcer
str+
bytes_dataZ
code_objectr
SourceLoader.get_codeN)
FileLoaderzgBase file loader class which implements the loader protocol methods that
    require file system usage.c
zKCache the module name and the path to the file found by the
        finder.Nr
FileLoader.__init__c
__class__r
otherr
__eq__
FileLoader.__eq__c
hashr
__hash__
FileLoader.__hash__c
zdLoad a module from a file.
        This method is deprecated.  Use exec_module() instead.
        )
superr
FileLoader.load_modulec
z:Return the path to the source file as found by the finder.rG
FileLoader.get_filenamec
z'Return the data from path as raw bytes.N
ExtensionFileLoaderrZ
open_coderl
readr[
FileLoader.get_datac
get_resource_reader
FileLoader.get_resource_readerc
resourcerA
open_resource
FileLoader.open_resourcec
is_resource
FileNotFoundErrorrC
resource_path!
FileLoader.resource_pathc
FileLoader.is_resourcec
iterr
listdirrJ
contents-
FileLoader.contents)
__classcell__r
SourceFileLoaderz>Concrete implementation of SourceLoader using the file system.c
z!Return the metadata for the path.)
st_mtimeZ
st_size)
SourceFileLoader.path_statsc
_mode)
z SourceFileLoader._cache_bytecoderV
Write bytes data to a file.z
could not create {!r}: {!r}Nzcreated {!r})rJ
reversedrC
mkdir
FileExistsErrorrL
parentrw
SourceFileLoader.set_dataN)
SourcelessFileLoaderz-Loader which handles sourceless file imports.c
SourcelessFileLoader.get_codec
z'Return None as there is no source code.Nr
SourcelessFileLoader.get_sourceN)
z]Loader for extension modules.
    The constructor is designed to work with FileFinder.
    c
ExtensionFileLoader.__init__c
ExtensionFileLoader.__eq__c
ExtensionFileLoader.__hash__c
z&Create an unitialized extension modulez&extension module {!r} loaded from {!r})
create_dynamicr
z!ExtensionFileLoader.create_modulec
Initialize an extension modulez(extension module {!r} executed from {!r}N)
Zexec_dynamicr
ExtensionFileLoader.exec_modulec
z1Return True if the extension module is a package.r
suffix
file_namer
z1ExtensionFileLoader.is_package.<locals>.<genexpr>)
EXTENSION_SUFFIXESr
ExtensionFileLoader.is_packagec
z?Return None as an extension module cannot create a code object.Nr
ExtensionFileLoader.get_codec
z5Return None as extension modules have no source code.Nr
ExtensionFileLoader.get_sourcec
z ExtensionFileLoader.get_filenameN)
_NamespacePatha&
Represents a namespace package's path.  It uses the module name
    to find its parent module, and from there it looks up the parent's
    __path__.  When this changes, the module's own path is recomputed,
    using path_finder.  For top-level modules, the parent module's path
    is sys.path.c
_name
_pathr
_get_parent_path
_last_parent_path
_path_finder
path_finderr
_NamespacePath.__init__c
z>Returns a tuple of (parent-module-name, parent-path-attr-name)r`
__path__)
dotZ
_find_parent_path_names
z&_NamespacePath._find_parent_path_namesc
modules)
parent_module_nameZ
path_attr_namer
_NamespacePath._get_parent_pathc
parent_pathr
_recalculate
_NamespacePath._recalculatec
__iter__
_NamespacePath.__iter__c
indexr
__getitem__
_NamespacePath.__getitem__c
__setitem__
_NamespacePath.__setitem__c
__len__
_NamespacePath.__len__c
_NamespacePath({!r}))
__repr__
_NamespacePath.__repr__c
itemr
__contains__
_NamespacePath.__contains__c
_NamespacePath.appendN)
_NamespaceLoaderc
_NamespaceLoader.__init__c
zsReturn repr for the module.
        The method is deprecated.  The import machinery does the job itself.
        z
<module {!r} (namespace)>)
module_repr
_NamespaceLoader.module_reprc
_NamespaceLoader.is_packagec
_NamespaceLoader.get_sourcec
<string>r
_NamespaceLoader.get_codec
_NamespaceLoader.create_modulec
_NamespaceLoader.exec_modulec
zbLoad a namespace module.
        This method is deprecated.  Use exec_module() instead.
        z&namespace module loaded with path {!r})
_NamespaceLoader.load_moduleN)r
PathFinderz>Meta path finder for sys.path and package __path__ attributes.c
z}Call the invalidate_caches() method on all path entry finders
        stored in sys.path_importer_caches (where implemented).N
invalidate_caches)
listr
path_importer_cache
itemsr
finderr
PathFinder.invalidate_cachesc
z.Search sys.path_hooks for a finder for 'path'.Nz
sys.path_hooks is empty)
path_hooksrb
hookr
_path_hooks,
PathFinder._path_hooksc
r*zt
Get the finder for the path entry from sys.path_importer_cache.
        If the path entry is not in the cache, find the appropriate finder
        and cache it. If no finder is available, store None.
        r
KeyErrorrK
_path_importer_cache9
PathFinder._path_importer_cachec
_legacy_get_specO
PathFinder._legacy_get_specNc
z?Find the loader or namespace_path for this module/package name.Nr
spec missing loader)
bytesrM
namespace_pathZ
entryrI
_get_spec^
PathFinder._get_specc
Try to find a spec for 'fullname' on sys.path or 'path'.
        The search is based on sys.path_hooks and sys.path_importer_cache.
        N)
PathFinder.find_specc
find the module on sys.path or 'path' based on sys.path_hooks and
        sys.path_importer_cache.
        This method is deprecated.  Use find_spec() instead.
        Nr
PathFinder.find_modulec
        Find distributions.
        Return an iterable of all Distribution instances capable of
        loading the metadata for packages matching ``context.name``
        (or all names if ``None`` indicated) along the paths in the list
        of directories ``context.path``.
        r
MetadataPathFinder)
importlib.metadatarR
find_distributions)
PathFinder.find_distributions)
FileFinderz
File-based finder.
    Interactions with the file system are cached for performance, being
    refreshed when the directory the finder is handling has been modified.
    c
Initialize with the path to search on and a variable number of
        2-tuples containing the loader and the file suffixes the loader
        recognizes.c
z&FileFinder.__init__.<locals>.<genexpr>r`
_loadersrA
_path_mtime
_path_cache
_relaxed_path_cache)
loader_detailsZ
loadersr
FileFinder.__init__c
Invalidate the directory mtime.r
FileFinder.invalidate_cachesc
Try to find a loader for the specified module, or the namespace
        package portions. Returns (loader, list-of-portions).
        This method is deprecated.  Use find_spec() instead.
        N)
FileFinder.find_loaderc
smslr
FileFinder._get_specNc
zoTry to find a spec for the specified module.
        Returns the matching spec, or None if not found.
        Fr`
trying {})
verbosityz
possible namespace for {})
_fill_cacher
Zis_namespaceZ
tail_moduler
cacheZcache_moduleZ
base_pathr)
init_filenameZ
full_pathr
FileFinder.find_specc
zDFill the cache of potential modules and packages for this directory.r
z)FileFinder._fill_cache.<locals>.<setcomp>N)
PermissionError
NotADirectoryErrorr
addr
lower_suffix_contentsr@
new_namer
FileFinder._fill_cachec
A class method which returns a closure to use on sys.path_hook
        which will return an instance using the specified loaders and the path
        called on the closure.
        If the path called on the closure is not a directory, ImportError is
        raised.
        c
z-Path hook for importlib.machinery.FileFinder.z
only directories are supportedrG
path_hook_for_FileFinder=
z6FileFinder.path_hook.<locals>.path_hook_for_FileFinderr
path_hook3
FileFinder.path_hookc
FileFinder({!r}))
FileFinder.__repr__)
__loader__
__spec__rU
__file__Z
__cached__)
getr
Exception)
pathnameZ
cpathnamer
_fix_up_moduleK
z_Returns a list of file-based module loaders.
    Each item is a tuple (loader, suffixes).
    )
extension_suffixesr 
extensionsZ
sourceZ
bytecoder
Setup the path-based importers for importlib by importing needed
    built-in modules and injecting them into the global namespace.
    Other components are extracted from the core bootstrap module.
    
posixr
_setup.<locals>.<genexpr>r
importlib requires posix or ntr
_pathseps_with_colonc
_setup.<locals>.<setcomp>)
.pywz
_d.pydTN)
allZ
_builtin_from_namer
_bootstrap_moduleZ
self_moduleZ
os_detailsZ
builtin_osr2
os_moduleZ
builtin_namesZbuiltin_nameZ
builtin_moduler
_setupm
z)Install the path-based import components.N)
meta_pathr=
supported_loadersr
_install
NNN)
N)Qr
_MS_WINDOWSrj
Z%_CASE_INSENSITIVE_PLATFORMS_BYTES_KEYr
type
__code__r
DEBUG_BYTECODE_SUFFIXESZ
OPTIMIZED_BYTECODE_SUFFIXESrx
objectr
<module>
Z"d!d"
e#j$
Z%d#d$
Z&d%d&
Z'd'd(
Z(d)d*
Z)d+d,
Z*d-d.
d/d0
)1aP
zipimport provides support for importing Python modules from Zip archives.
This module exports three objects:
- zipimporter: a class; its constructor takes a path to a Zip archive.
- ZipImportError: exception raised by zipimporter objects. It's a
  subclass of ImportError, so it can be caught as ImportError, too.
- _zip_directory_cache: a dict, mapping archive paths to zip directory
  info dicts, as used in zipimporter._files.
It is usually not needed to use the zipimport module explicitly; it is
used by the builtin import mechanism for sys.path items that are paths
to Zip archives.
_unpack_uint16
_unpack_uint32
ZipImportError
zipimporter
__name__
__module__
__qualname__
<frozen zipimport>r
zipimporter(archivepath) -> zipimporter object
    Create a new zipimporter instance. 'archivepath' must be a path to
    a zipfile, or to a specific path inside a zipfile. For example, it can be
    '/tmp/myimport.zip', or '/tmp/myimport.zip/mydirectory', if mydirectory is a
    valid directory inside the archive.
    'ZipImportError is raised if 'archivepath' doesn't point to a valid Zip
    archive.
    The 'archive' attribute of zipimporter objects contains the name of the
    zipfile targeted.
    c
q@zt
archive path is empty
pathz
not a Zip filei
isinstance
fsdecoder
alt_path_sep
replace
path_sep
_bootstrap_externalZ
_path_stat
OSError
ValueErrorZ
_path_split
appendZ
st_mode
_zip_directory_cache
KeyError
_read_directory
_files
archive
_path_join
prefix)
selfr
dirnameZ
basename
filesr
__init__?
zipimporter.__init__Nc
find_loader(fullname, path=None) -> self, str or None.
        Search for a module specified by 'fullname'. 'fullname' must be the
        fully qualified (dotted) module name. It returns the zipimporter
        instance itself if the module was found, a string containing the
        full path name if it's possibly a portion of a namespace package,
        or None otherwise. The optional 'path' argument is ignored -- it's
        there for compatibility with the importer protocol.
        N)
_get_module_info
_get_module_path
_is_dirr
fullnamer
modpathr
find_loaderm
zipimporter.find_loaderc
find_module(fullname, path=None) -> self or None.
        Search for a module specified by 'fullname'. 'fullname' must be the
        fully qualified (dotted) module name. It returns the zipimporter
        instance itself if the module was found, or None if it wasn't.
        The optional 'path' argument is ignored -- it's there for compatibility
        with the importer protocol.
        r
find_module
zipimporter.find_modulec
get_code(fullname) -> code object.
        Return the code object for the specified module. Raise ZipImportError
        if the module couldn't be found.
        
_get_module_code
code
ispackager(
get_code
zipimporter.get_codec
get_data(pathname) -> string with file data.
        Return the data associated with 'pathname'. Raise OSError if
        the file wasn't found.
        Nr
startswithr
lenr
_get_data)
pathnameZ
toc_entryr
get_data
zipimporter.get_datac
zjget_filename(fullname) -> filename string.
        Return the filename for the specified module.
        r+
get_filename
zipimporter.get_filenamec
get_source(fullname) -> source string.
        Return the source code for the specified module. Raise ZipImportError
        if the module couldn't be found, return None if the archive does
        contain the module, but has no source for it.
        N
can't find module 
name
__init__.py
.py)
decode)
fullpathr6
get_source
zipimporter.get_sourcec
is_package(fullname) -> bool.
        Return True if the module specified by fullname is a package.
        Raise ZipImportError if the module couldn't be found.
        Nr9
is_package
zipimporter.is_packagec
load_module(fullname) -> module.
        Load the module specified by 'fullname'. 'fullname' must be the
        fully qualified (dotted) module name. It returns the imported
        module, or raises ZipImportError if it wasn't found.
        N
__builtins__z
Loaded module z
 not found in sys.modulesz
import {} # loaded from Zip {})
modules
getr
_module_type
__loader__r$
__path__
hasattrrB
_fix_up_module
__dict__
execr
ImportError
_bootstrap
_verbose_message)
modr
load_module
zipimporter.load_modulec
Return the ResourceReader for a package in a zip file.
        If 'fullname' is a package within the zip file, return the
        'ResourceReader' object for the package.  Otherwise return None.
        Nr
ResourceReaderT)
_ZipImportResourceReader
_registeredZ
importlib.abcrO
register)
get_resource_reader
zipimporter.get_resource_readerc
<zipimporter object "z
__repr__"
zipimporter.__repr__)
__doc__r"
z__init__.pycTr<
.pycTF)
rpartition)
dirpathr
_zip_searchorderr
suffix
isbytecoder/
|d 7
d!||
)"Nz
can't open Zip file: r
can't read Zip file: 
not a Zip file: z
corrupt Zip file: 
bad central directory size: z
bad central directory offset: z&bad central directory size or offset: 
EOF read where not expecteds
bad local header offset: i
asciiZ
latin1
z!zipimport: found {} names in {!r})
open_coder
seek
END_CENTRAL_DIR_SIZEZ
tell
readr3
STRING_END_ARCHIVE
MAX_COMMENT_LEN
rfindr
EOFErrorr
UnicodeDecodeError
translate
cp437_tabler
header_position
buffer
file_sizeZ
max_comment_start
dataZ
header_sizeZ
header_offsetZ
arc_offsetr!
count
flags
compress
time
date
data_size
name_size
extra_sizeZcomment_size
file_offsetr;
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
zipimport: zlib UNAVAILABLE
)can't decompress data; zlib not availableTr
decompressFz
zipimport: zlib available)
_importing_zlibrL
zlibr
Exceptionr
_get_decompress_func
negative data sizer\
bad local file header: 
zipimport: can't read datar
datapathr
raw_datar
abs)
_eq_mtimeA
neverZ
alwaysrc
bytecode is stale for z
compiled module z
 is not a code object)
_classify_pycrK
_impZ
check_hash_based_pycs
_get_pyc_source
source_hashZ
_RAW_MAGIC_NUMBERZ
_validate_hash_pyc
_get_mtime_and_size_of_sourcer
marshalZ
loadsr
_code_type
TypeError)
exc_detailsr
hash_basedZcheck_sourceZsource_bytesr
Zsource_mtimeZ
source_sizer.
_unmarshal_codeK
sourcer
_normalize_line_endings~
Zdont_inherit)
compile)
_compile_source
mktime)
_parse_dostime
IndexErrorr
uncompressed_sizer
trying {}{}{}rV
verbosityr
)r$
Private class used to support ZipImport.get_resource_reader().
    This class is allowed to reference all the innards and private parts of
    the zipimporter.
    Fc
z!_ZipImportResourceReader.__init__c
BytesIO)
FileNotFoundError)
resource
fullname_as_pathr
open_resource
z&_ZipImportResourceReader.open_resourcec
resource_path
z&_ZipImportResourceReader.resource_pathc
is_resource
z$_ZipImportResourceReader.is_resourcec
Pathr<
pathlibr
relative_tor
parent
setr
add)
fullname_pathZ
relative_pathZpackage_pathZsubdirs_seen
filenameZ
relativeZ
parent_namer
contents
z!_ZipImportResourceReader.contentsN)
)-rT
_frozen_importlib_externalr
_frozen_importlibrL
__all__r
path_separatorsr
typerF
__code__r
<module>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%
 !"#%%%%%%
 !"#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
TzHello world!N)
initialized
print
Tools/freeze/flag.py
<module>
default
%s%s%s, %.20s, %.9s
Jul  4 2024
03:00:31
no mem to build parser accelerators
no mem to add parser accelerators
XXX ambiguity!
XXX too high nonterminal number!
XXX too many states!
EMPTY
NT%d
%.32s(%.32s)
PyGrammar_LabelRepr
invalid grammar label
s_push: parser stack overflow
ENDMARKER
NAME
NUMBER
STRING
NEWLINE
INDENT
DEDENT
LPAR
RPAR
LSQB
RSQB
COLON
COMMA
SEMI
PLUS
MINUS
STAR
SLASH
VBAR
AMPER
LESS
GREATER
EQUAL
PERCENT
LBRACE
RBRACE
EQEQUAL
NOTEQUAL
LESSEQUAL
GREATEREQUAL
TILDE
CIRCUMFLEX
LEFTSHIFT
RIGHTSHIFT
DOUBLESTAR
PLUSEQUAL
MINEQUAL
STAREQUAL
SLASHEQUAL
PERCENTEQUAL
AMPEREQUAL
VBAREQUAL
CIRCUMFLEXEQUAL
LEFTSHIFTEQUAL
RIGHTSHIFTEQUAL
DOUBLESTAREQUAL
DOUBLESLASH
DOUBLESLASHEQUAL
ATEQUAL
RARROW
ELLIPSIS
COLONEQUAL
AWAIT
ASYNC
TYPE_IGNORE
TYPE_COMMENT
<ERRORTOKEN>
<COMMENT>
<NL>
<ENCODING>
<N_TOKENS>
with Barry as BDFL, use '<>' instead of '!='
NFKC
unicodedata.normalize() must return a string, not %.200s
attribute
subscript
starred
name
list
tuple
lambda
function call
operator
generator expression
yield expression
await expression
list comprehension
set comprehension
dict comprehension
dict display
set display
f-string expression
None
False
True
Ellipsis
literal
comparison
conditional expression
named expression
unexpected expression in assignment %d (line %d)
f-string: 
replace
(OiiN)
Underscores in numeric literals are only supported in Python 3.6 and greater
error at start before reading any input
unexpected EOF while parsing
unexpected indent
unexpected unindent
invalid syntax
multiple statements found while compiling a single statement
cannot mix bytes and nonbytes literals
positional argument follows keyword argument unpacking
positional argument follows keyword argument
Generator expression must be parenthesized
unicodedata
normalize
unicode error
value error
(%s) %U
(%s) unknown error
invalid token
EOF while scanning triple-quoted string literal
EOL while scanning string literal
unindent does not match any outer indentation level
inconsistent use of tabs and spaces in indentation
too many levels of indentation
unexpected character after line continuation character
unknown parsing error
(OiiO)
pass
from
elif
else
with
raise
yield
break
while
class
return
assert
global
import
except
finally
continue
nonlocal
__peg_parser__
The '@' operator is
Await expressions are
Async comprehensions are
cannot assign to %s
cannot delete %s
iterable unpacking cannot be used in comprehension
expression cannot contain assignment, perhaps you meant "=="?
iterable argument unpacking follows keyword argument unpacking
You found it!
can't use starred expression here
dict unpacking cannot be used in dict comprehension
%s only supported in Python 3.%i and greater
non-default argument follows default argument
named arguments must follow bare *
cannot use assignment expressions with %s
Async functions are
bare * has associated type comment
Cannot have two type comments on def
expected an indented block
Async with statements are
Async for loops are
Variable annotation syntax is
Variable annotations syntax is
only single target (not %s) can be annotated
only single target (not tuple) can be annotated
illegal target for annotation
assignment to yield expression not possible
'%s' is an illegal expression for augmented assignment
trailing comma not allowed without surrounding parentheses
Format strings are only supported in Python 3.6 and greater
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Parser/pegen/parse_string.c
string to parse is too long
bytes can only contain ASCII literal characters.
f-string: unexpected end of string
f-string: expecting '}'
invalid escape sequence \%c
u005c
\U%08x
f-string: single '}' is not allowed
f-string: expressions nested too deeply
f-string expression part cannot include a backslash
f-string: too many nested parenthesis
f-string expression part cannot include '#'
f-string: unmatched '%c'
f-string: closing parenthesis '%c' does not match opening parenthesis '%c'
f-string: unterminated string
f-string: self documenting expressions are only supported in Python 3.8 and greater
f-string: invalid conversion character: expected 's', 'r', or 'a'
f-string: empty expression not allowed
compile
input line too long
can't re-enter readline
can't allocate lock
<string>
utf-8
encoding problem: %s
encoding problem: %s with BOM
coding
utf-8-
latin-1
iso-8859-1
iso-latin-1
latin-1-
iso-8859-1-
iso-latin-1-
ignore
async
await
invalid hexadecimal literal
invalid digit '%c' in octal literal
invalid octal literal
invalid digit '%c' in binary literal
invalid binary literal
invalid decimal literal
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers
too many nested parentheses
unmatched '%c'
closing parenthesis '%c' does not match opening parenthesis '%c' on line %d
closing parenthesis '%c' does not match opening parenthesis '%c'
Non-UTF-8 code starting with '\x%.2x' in file %U on line %i, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details
open
readline
isisOOO
tok_backup
tokenizer beginning of buffer
%04X
invalid character '%c' (U+%s)
invalid non-printable character U+%s
(O(OiiN))
__length_hint__
__length_hint__ must be an integer, not %.100s
__length_hint__() should return >= 0
sequence index must be integer, not '%.200s'
__class_getitem__
'%.200s' object is not subscriptable
'%.200s' object does not support item assignment
'%.200s' object does not support item deletion
expected a writable bytes-like object
a bytes-like object is required, not '%.100s'
struct
calcsize
both destination and source must be bytes-like objects
destination is too small to receive data from source
PyBuffer_FillInfo: view==NULL argument is obsolete
Object is not writable.
__format__
Format specifier must be a string, not %.200s
Type %.100s doesn't define __format__
__format__ must return a str, not %.200s
divmod()
bad operand type for unary -: '%.200s'
bad operand type for unary +: '%.200s'
bad operand type for unary ~: '%.200s'
bad operand type for abs(): '%.200s'
'%.200s' object cannot be interpreted as an integer
__index__ returned non-int (type %.200s)
__index__ returned non-int (type %.200s).  The ability to return an instance of a strict subclass of int is deprecated, and may be removed in a future version of Python.
cannot fit '%.200s' into an index-sized integer
__trunc__
__trunc__ returned non-Integral (type %.200s)
int() argument must be a string, a bytes-like object or a number, not '%.200s'
%.50s.__float__ returned non-float (type %.50s)
%.50s.__float__ returned non-float (type %.50s).  The ability to return an instance of a strict subclass of float is deprecated, and may be removed in a future version of Python.
PyNumber_ToBase: base must be 2, 8, 10 or 16
%.200s is not a sequence
object of type '%.200s' has no len()
'%.200s' object can't be concatenated
'%.200s' object can't be repeated
'%.200s' object does not support indexing
'%.200s' object is unsliceable
'%.200s' object doesn't support item deletion
'%.200s' object doesn't support slice assignment
'%.200s' object doesn't support slice deletion
argument of type '%.200s' is not iterable
count exceeds C integer size
index exceeds C integer size
sequence.index(x): x not in sequence
%.200s is not a mapping
keys
items
values
'%.200s' object is not iterable
iter() returned non-iterator of type '%.100s'
null argument to internal routine
print
unsupported operand type(s) for %.100s: '%.100s' and '%.100s'. Did you mean "print(<message>, file=<output_stream>)"?
unsupported operand type(s) for %.100s: '%.100s' and '%.100s'
can't multiply sequence by non-int of type '%.200s'
unsupported operand type(s) for ** or pow(): '%.100s' and '%.100s'
unsupported operand type(s) for pow(): '%.100s', '%.100s', '%.100s'
%.200s.%U() returned a non-iterable (type %.200s)
__instancecheck__
 in __instancecheck__
__subclasscheck__
 in __subclasscheck__
__class__
isinstance() arg 2 must be a type or tuple of types
__bases__
issubclass() arg 1 must be a class
issubclass() arg 2 must be a class or tuple of classes
bool
maketrans arguments must have same length
find
index
subsection not found
rfind
rindex
count
byte must be in range(0, 256)
startswith
endswith
argument should be integer or bytes-like object, not '%.200s'
%s first arg must be bytes or a tuple of bytes, not %s
Negative size passed to PyByteArray_FromStringAndSize
can't concat %.100s to %.100s
bytearray
bytearray_iterator
Existing exports of data: object cannot be re-sized
deallocated bytearray object has exported buffers
bytearray object is too large to make repr
bytearray index out of range
can't set bytearray slice from %.100s
bytearray indices must be integers or slices, not %.200s
can assign only bytes, buffers, or iterables of ints in range(0, 256)
attempt to assign bytes of size %zd to extended slice of size %zd
str() on a bytearray instance
bytearray_getbuffer: view==NULL argument is obsolete
Comparison between bytearray and string
__alloc__
__reduce__
__reduce_ex__
__sizeof__
append
capitalize
center
clear
copy
decode
expandtabs
extend
fromhex
insert
isalnum
isalpha
isascii
isdigit
islower
isspace
istitle
isupper
join
ljust
lower
lstrip
maketrans
partition
remove
removeprefix
removesuffix
reverse
rjust
rpartition
rsplit
rstrip
split
splitlines
strip
swapcase
title
translate
upper
zfill
__dict__
(O(Ns)N)
(O(y#)N)
(O()N)
integer argument expected, got float
cannot add more objects to bytearray
argument 2
a byte string of length 1
encoding
errors
argument 'encoding'
embedded null character
argument 'errors'
tabsize
result too long
can't extend bytearray with %.100s
argument
bytes_per_sep
can only join an iterable
sequence item %zd: expected a bytes-like object, %.80s found
join() result is too long
sequence changed size during iteration
argument 1
contiguous buffer
empty separator
pop from empty bytearray
pop index out of range
value not found in bytearray
replace bytes is too long
maxsplit
keepends
delete
translation table must be 256 characters long
source
|Oss:bytearray
encoding without a string argument
errors without a string argument
string argument without an encoding
negative count
cannot convert '%.200s' object to bytearray
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/bytearrayobject.c
__setstate__
iter
N(O)n
N(())
Negative size passed to PyBytes_FromStringAndSize
byte string is too long
PyBytes_FromFormatV(): %c format expects an integer in range [0; 255]
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/bytesobject.c
format requires a mapping
incomplete format key
* wants int
width too big
prec too big
incomplete format
unsupported format character '%c' (0x%x) at index %zd
not all arguments converted during bytes formatting
Trailing \ in string
strict
invalid \x escape at position %zd
decoding error; unknown error handling code: %.400s
invalid escape sequence '\%c'
expected bytes, %.200s found
embedded null byte
bytes object is too large to make repr
non-hexadecimal number found in fromhex() arg at position %zd
cannot convert '%.200s' object to bytes
bytes
bytes_iterator
byte string is too large
not enough arguments for format string
__bytes__ returned non-bytes (type %.200s)
%%b requires a bytes-like object, or an object that implements __bytes__, not '%.100s'
__bytes__
%%%c format: %s is required, not %.200s
an integer
a number
float argument required, not %.200s
%c arg not in range(256)
%c requires an integer in range(256) or a single byte
bytes must be in range(0, 256)
repeated bytes are too long
index out of range
byte indices must be integers or slices, not %.200s
str() on a bytes instance
Comparison between bytes and string
Comparison between bytes and int
__getnewargs__
(y#)
|Oss:bytes
%R returned NULL without setting an error
%s returned NULL without setting an error
%R returned a result with an error set
%s returned a result with an error set
'%.200s' object is not callable
 while calling a Python object
'%.200s' object does not support vectorcall
argument list must be a tuple
keyword list must be a dictionary
attribute of type '%.200s' is not callable
keywords must be strings
PyCapsule_New called with null pointer
PyCapsule_GetPointer called with invalid PyCapsule object
PyCapsule_GetPointer called with incorrect name
PyCapsule_GetName called with invalid PyCapsule object
PyCapsule_GetDestructor called with invalid PyCapsule object
PyCapsule_GetContext called with invalid PyCapsule object
PyCapsule_SetPointer called with null pointer
PyCapsule_SetPointer called with invalid PyCapsule object
PyCapsule_SetName called with invalid PyCapsule object
PyCapsule_SetDestructor called with invalid PyCapsule object
PyCapsule_SetContext called with invalid PyCapsule object
PyCapsule_Import could not import module "%s"
PyCapsule_Import "%s" is not valid
PyCapsule
NULL
<capsule object %s%s%s at %p>
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/cellobject.c
cell
<cell at %p: empty>
<cell at %p: %.80s object at %p>
cell_contents
Cell is empty
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/classobject.c
method
instancemethod
<bound method %V of %R>
__qualname__
__name__
getattr
N(ON)
__func__
the function (or other callable) implementing a method
__self__
the instance to which a method is bound
__doc__
first argument must be callable
self must not be None
<instancemethod %V at %p>
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/codeobject.c
co_code larger than INT_MAX
code: varnames is too small
code
non-string found in code slot
<code object %U at %p, file "%U", line %d>
<code object %U at %p, file ???, line %d>
co_argcount
co_posonlyargcount
co_kwonlyargcount
co_nlocals
co_stacksize
co_flags
co_firstlineno
co_code
co_consts
co_names
co_varnames
co_freevars
co_cellvars
co_filename
co_name
co_lnotab
argument 'co_code'
argument 'co_consts'
argument 'co_names'
argument 'co_varnames'
argument 'co_freevars'
argument 'co_cellvars'
argument 'co_filename'
argument 'co_name'
argument 'co_lnotab'
co_argcount must be a positive integer
co_posonlyargcount must be a positive integer
co_kwonlyargcount must be a positive integer
co_nlocals must be a positive integer
co_stacksize must be a positive integer
co_flags must be a positive integer
co_firstlineno must be a positive integer
code.__new__
OOOiiiiii
iiiiiiSO!O!O!UUiS|O!O!:code
code: argcount must not be negative
code: posonlyargcount must not be negative
code: kwonlyargcount must not be negative
code: nlocals must not be negative
name tuples must contain only strings, not '%.500s'
complex
__complex__
__complex__ returned non-complex (type %.200s)
__complex__ returned non-complex (type %.200s).  The ability to return an instance of a strict subclass of complex is deprecated, and may be removed in a future version of Python.
%s%s%sj%s
can't mod complex numbers.
can't take floor or mod of complex number.
complex modulo
0.0 to a negative or complex power
complex exponentiation
absolute value too large
can't convert complex to int
can't convert complex to float
can't take floor of complex number.
complex division by zero
conjugate
(dd)
U:__format__
real
the real part of a complex number
imag
the imaginary part of a complex number
complex() can't take second arg if first is a string
complex() second arg can't be a string
complex() first argument must be a string or a number, not '%.200s'
complex() second argument must be a number, not '%.200s'
complex() arg is a malformed string
method_descriptor
classmethod_descriptor
member_descriptor
getset_descriptor
wrapper_descriptor
%s() method: bad call flags
method-wrapper
mappingproxy
property
<method '%V' of '%s' objects>
N(OO)
__objclass__
__text_signature__
<descriptor>.__name__ is not a unicode object
<descriptor>.__objclass__.__qualname__ is not a unicode object
%S.%S
descriptor '%V' needs a type, not '%s', as arg 2
descriptor '%V' for '%.100s' objects doesn't apply to a '%.100s' object
descriptor '%V' of '%.100s' object needs an argument
descriptor '%V' for type '%.100s' needs either an object or a type
descriptor '%V' for type '%.100s' needs a type, not a '%.100s' as arg 2
descriptor '%V' requires a subtype of '%.100s' but received '%.100s'
<member '%V' of '%s' objects>
object.__getattr__
<attribute '%V' of '%s' objects>
attribute '%V' of '%.100s' objects is not readable
attribute '%V' of '%.100s' objects is not writable
<slot wrapper '%V' of '%s' objects>
descriptor '%V' requires a '%.100s' object but received a '%.100s'
wrapper %s() takes no keyword arguments
unbound method %U needs an argument
%U takes no keyword arguments
%U takes no arguments (%zd given)
%U takes exactly one argument (%zd given)
mappingproxy() argument must be a mapping, not %s
<method-wrapper '%s' of %s object at %p>
mappingproxy(%R)
'|=' is not supported by %s; use '|' instead
D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
D.keys() -> list of D's keys
D.values() -> list of D's values
D.items() -> list of D's (key, value) pairs, as 2-tuples
D.copy() -> a shallow copy of D
See PEP 585
__reversed__
D.__reversed__() -> reverse iterator
mapping
getter
setter
deleter
fget
fset
fdel
__isabstractmethod__
unreadable attribute
can't delete attribute
can't set attribute
enumerate
reversed
O(OO)
O(On)
iterable
start
O(O)n
O(())
'%.200s' object is not reversible
object
reason
su#nns
sy#nns
u#nns
Onns
_PyExc_Init
exceptions bootstrapping error.
Could not preallocate MemoryError object
Cannot allocate map from errnos to OSError subclasses
errmap insertion problem.
_PyBuiltins_AddExceptions
BaseException
Module dictionary insertion problem.
Exception
TypeError
StopAsyncIteration
StopIteration
GeneratorExit
SystemExit
KeyboardInterrupt
ImportError
ModuleNotFoundError
OSError
EnvironmentError
IOError
EOFError
RuntimeError
RecursionError
NotImplementedError
NameError
UnboundLocalError
AttributeError
SyntaxError
IndentationError
TabError
LookupError
IndexError
KeyError
ValueError
UnicodeError
UnicodeEncodeError
UnicodeDecodeError
UnicodeTranslateError
AssertionError
ArithmeticError
FloatingPointError
OverflowError
ZeroDivisionError
SystemError
ReferenceError
MemoryError
BufferError
Warning
UserWarning
DeprecationWarning
PendingDeprecationWarning
SyntaxWarning
RuntimeWarning
FutureWarning
ImportWarning
UnicodeWarning
BytesWarning
ResourceWarning
ConnectionError
BlockingIOError
BrokenPipeError
ChildProcessError
ConnectionAbortedError
ConnectionRefusedError
ConnectionResetError
FileExistsError
FileNotFoundError
IsADirectoryError
NotADirectoryError
InterruptedError
PermissionError
ProcessLookupError
TimeoutError
%U (%s: %S)
__traceback__ may not be deleted
__traceback__ must be a traceback or None
Common base class for all exceptions
%s(%R)
%s%R
with_traceback
state is not a dictionary
__suppress_context__
args
__traceback__
__context__
exception context
__cause__
exception cause
args may not be deleted
__context__ may not be deleted
exception context must be None or derive from BaseException
__cause__ may not be deleted
exception cause must be None or derive from BaseException
Common base class for all non-exit exceptions.
Inappropriate argument type.
Signal the end from iterator.__anext__().
Signal the end from iterator.__next__().
value
generator return value
Request that a generator exit.
Request to exit from the interpreter.
exception code
Program interrupted by user.
Import can't find module, or can't find name in module.
path
exception message
module name
module path
|$OO:ImportError
Module not found.
Base class for I/O related errors.
[Errno %S] %S: %R -> %R
[Errno %S] %S: %R
[Errno %S] %S
errno
POSIX exception code
strerror
exception strerror
filename
exception filename
filename2
second exception filename
characters_written
I/O operation would block.
Connection error.
Child process error.
Broken pipe.
Connection aborted.
Connection refused.
Connection reset.
File already exists.
File not found.
Operation doesn't work on directories.
Operation only works on directories.
Interrupted by signal.
Not enough permissions.
Process not found.
Timeout expired.
Read beyond end of file.
Unspecified run-time error.
Recursion limit exceeded.
Method or function hasn't been implemented yet.
Name not found globally.
Local name referenced but not bound to a value.
Attribute not found.
Invalid syntax.
%S (%U, line %ld)
%S (%U)
%S (line %ld)
exception msg
lineno
exception lineno
offset
exception offset
text
exception text
print_file_and_line
exception print_file_and_line
tuple index out of range
print 
exec 
Missing parentheses in call to 'exec'
 end=" "
Missing parentheses in call to 'print'. Did you mean print(%U%s)?
Improper indentation.
Improper mixture of spaces and tabs.
Base class for lookup errors.
Sequence index out of range.
Mapping key not found.
Inappropriate argument value (of correct type).
Unicode related error.
%.200s attribute not set
%.200s attribute must be unicode
%.200s attribute must be bytes
Unicode encoding error.
'%U' codec can't encode character '\x%02x' in position %zd: %U
'%U' codec can't encode character '\u%04x' in position %zd: %U
'%U' codec can't encode character '\U%08x' in position %zd: %U
'%U' codec can't encode characters in position %zd-%zd: %U
exception encoding
exception object
exception start
exception end
exception reason
UUnnU
Unicode decoding error.
'%U' codec can't decode byte 0x%02x in position %zd: %U
'%U' codec can't decode bytes in position %zd-%zd: %U
UOnnU
Unicode translation error.
can't translate character '\x%02x' in position %zd: %U
can't translate character '\u%04x' in position %zd: %U
can't translate character '\U%08x' in position %zd: %U
can't translate characters in position %zd-%zd: %U
UnnU
Assertion failed.
Base class for arithmetic errors.
Floating point operation failed.
Result too large to be represented.
Second argument to a division or modulo operation was zero.
Internal error in the Python interpreter.
Please report this to the Python maintainer, along with the traceback,
the Python version, and the hardware/OS platform and version.
Weak ref proxy used after referent went away.
Out of memory.
Buffer error.
Base class for warning categories.
Base class for warnings generated by user code.
Base class for warnings about deprecated features.
Base class for warnings about features which will be deprecated
in the future.
Base class for warnings about dubious syntax.
Base class for warnings about dubious runtime behavior.
Base class for warnings about constructs that will change semantically
in the future.
Base class for warnings about probable mistakes in module imports
Base class for warnings about Unicode related problems, mostly
related to conversion problems.
Base class for warnings about bytes and buffer related problems, mostly
related to conversion from str or comparing to str.
Base class for warnings about resource usage.
types.GenericAlias
Represent a PEP 585 generic type
E.g. for t = list[int], t.__origin__ is list and t.__args__ is (int,).
__module__
__origin__
__args__
builtins
There are no type variables left in %R
Too %s arguments for %R
many
__parameters__
TypeVar
typing
__orig_class__
__mro_entries__
__dir__
isinstance() argument 2 cannot be a parameterized generic
issubclass() argument 2 cannot be a parameterized generic
Type variables in the GenericAlias.
GenericAlias
generator
__await__() returned a coroutine
__await__() returned non-iterator of type '%.100s'
object %.100s can't be used in 'await' expression
coroutine
coroutine_wrapper
A wrapper object implementing __await__ for coroutines.
async_generator
async_generator_asend
async_generator_wrapped_value
async_generator_athrow
generator already executing
coroutine already executing
async generator already executing
cannot reuse already awaited coroutine
can't send non-None value to a just-started generator
can't send non-None value to a just-started async generator
generator raised StopIteration
coroutine raised StopIteration
async generator raised StopIteration
async generator raised StopAsyncIteration
can't send non-None value to a just-started coroutine
generator ignored GeneratorExit
coroutine ignored GeneratorExit
close
async generator ignored GeneratorExit
<generator object %S at %p>
send
throw
throw() third argument must be a traceback object
instance exception may not have a separate value
exceptions must be classes or instances deriving from BaseException, not %s
gi_frame
gi_running
gi_code
name of the generator
qualified name of the generator
gi_yieldfrom
object being iterated by yield from, or None
__name__ must be set to a string object
__qualname__ must be set to a string object
<coroutine object %S at %p>
cr_frame
cr_running
cr_code
cr_origin
name of the coroutine
qualified name of the coroutine
cr_await
object being awaited on, or None
<async_generator object %S at %p>
asend
athrow
aclose
ag_frame
ag_running
ag_code
name of the async generator
qualified name of the async generator
ag_await
cannot reuse already awaited __anext__()/asend()
anext(): asynchronous generator is already running
cannot reuse already awaited aclose()/athrow()
aclose(): asynchronous generator is already running
athrow(): asynchronous generator is already running
isisssO
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/fileobject.c
object.readline() returned non-string
EOF when reading a line
write
writeobject with NULL file
null file for PyFile_WriteString
fileno
fileno() returned a non-integer
argument must be an int, or have a fileno() method.
file descriptor cannot be a negative integer (%i)
stderrprinter
setopencodehook
failed to change existing open_code hook
'path' must be 'str', not '%.200s'
<stdprinter(fd=%d) object at %p>
flush
isatty
backslashreplace
closed
True if the file is closed
Encoding of the file
mode
String giving the file mode
cannot create 'stderrprinter' instances
float() argument must be a string or a number, not '%.200s'
float
must be real number, not %.50s
free PyFloatObject
frexp() result out of range
float too large to pack with e format
float too large to pack with f format
float too large to pack with d format
can't unpack IEEE 754 special value on non-IEEE platform
could not convert string to float: %R
float modulo
float divmod()
pow() 3rd argument not allowed unless all arguments are integers
0.0 cannot be raised to a negative power
float floor division by zero
float division by zero
__floor__
__ceil__
__round__
as_integer_ratio
is_integer
__getformat__
__set_format__
%s0%se%d
rounded value too large to represent
cannot convert Infinity to integer ratio
cannot convert NaN to integer ratio
hexadecimal value too large to represent as a float
invalid hexadecimal floating-point string
hexadecimal string too long to convert
-0x0.0p+0
0x0.0p+0
-0x%sp%c%d
0x%sp%c%d
double
__getformat__() argument 1 must be 'double' or 'float'
unknown
IEEE, little-endian
IEEE, big-endian
insane float_format or double_format
__setformat__() argument 1 must be 'double' or 'float'
__setformat__() argument 2 must be 'unknown', 'IEEE, little-endian' or 'IEEE, big-endian'
can only set %s format to 'unknown' or the detected platform value
sys.float_info
DBL_MAX -- maximum representable finite float
max_exp
DBL_MAX_EXP -- maximum int e such that radix**(e-1) is representable
max_10_exp
DBL_MAX_10_EXP -- maximum int e such that 10**e is representable
DBL_MIN -- Minimum positive normalized float
min_exp
DBL_MIN_EXP -- minimum int e such that radix**(e-1) is a normalized float
min_10_exp
DBL_MIN_10_EXP -- minimum int e such that 10**e is a normalized
DBL_DIG -- digits
mant_dig
DBL_MANT_DIG -- mantissa digits
epsilon
DBL_EPSILON -- Difference between 1 and the next representable float
radix
FLT_RADIX -- radix of exponent
rounds
FLT_ROUNDS -- rounding mode
frame
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/frameobject.c
PyFrame_BlockSetup
block stack overflow
PyFrame_BlockPop
block stack underflow
co_varnames must be a tuple, not %s
free PyFrameObject
<frame at %p, file %R, line %d, code %S>
cannot clear an executing frame
f_back
f_code
f_builtins
f_globals
f_lasti
f_trace_lines
f_trace_opcodes
f_locals
f_lineno
f_trace
cannot delete attribute
lineno must be an integer
can't jump from the 'call' trace event of a new frame
f_lineno can only be set by a trace function
can only jump from a 'line' trace event
lineno out of range
line %d comes before the current code block
line %d comes after the current code block
cannot find bytecode for specified line
code may be unreachable.
can't jump out of an 'except' block
can't jump into an 'except' block as there's no exception
can't jump into the body of a try statement
can't jump into the body of a with statement
can't jump into the body of a for loop
__builtins__
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/funcobject.c
non-tuple default args
non-dict keyword only default args
expected tuple for closure, got '%.100s'
non-dict annotations
function
classmethod
staticmethod
<function %U at %p>
__closure__
__globals__
__code__
__defaults__
__kwdefaults__
__annotations__
__code__ must be set to a code object
object.__setattr__
%U() requires a code object with %zd free vars, not %zd
__defaults__ must be set to a tuple object
object.__delattr__
__kwdefaults__ must be set to a dict object
__annotations__ must be set to a dict object
globals
argdefs
closure
argument 'code'
argument 'globals'
dict
arg 3 (name) must be None or string
arg 4 (defaults) must be None or tuple
arg 5 (closure) must be tuple
arg 5 (closure) must be None or tuple
%U requires closure of length %zd, not %zd
arg 5 (closure) expected cell, found %s
function.__new__
uninitialized classmethod object
uninitialized staticmethod object
InterpreterID
%s(%lld)
%lld
force
O&|$p:InterpreterID.__init__
interpreter ID must be a non-negative int, got %R
interpreter ID must be an int, got %.100s
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/iterobject.c
iterator
callable_iterator
iter index too large
free PyListObject
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/listobject.c
list index out of range
list assignment index out of range
list_iterator
list_reverseiterator
cannot add more objects to list
can only assign an iterable
argument must be iterable
list modified during sort
[...]
can only concatenate list (not "%.200s") to list
list indices must be integers or slices, not %.200s
must assign iterable to extended slice
attempt to assign sequence of size %zd to extended slice of size %zd
__getitem__
x.__getitem__(y) <==> x[y]
sort
pop from empty list
list.remove(x): x not in list
%R is not in list
N(N)
an integer is required (got type %.200s)
__int__ returned non-int (type %.200s)
__int__ returned non-int (type %.200s).  The ability to return an instance of a strict subclass of int is deprecated, and may be removed in a future version of Python.
an integer is required (got type %.200s).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.
too many digits in integer
cannot convert float infinity to integer
cannot convert float NaN to integer
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/longobject.c
Python int too large to convert to C long
Python int too large to convert to C int
an integer is required
Python int too large to convert to C ssize_t
can't convert negative value to unsigned int
Python int too large to convert to C unsigned long
can't convert negative value to size_t
Python int too large to convert to C size_t
int has too many bits to express in a platform size_t
byte array too long to convert to int
can't convert negative int to unsigned
int too big to convert
value must be positive
Python int too large for C unsigned short
Python int too large for C unsigned int
int() arg 2 must be >= 2 and <= 36
invalid literal for int() with base %d: %.200R
huge integer: number of bits overflows a Py_ssize_t
int too large to convert to float
non-integer arguments in division
int too large to format
int string too large to convert
integer division or modulo by zero
negative shift count
pow() 3rd argument cannot be 0
base is not invertible for the given modulus
division by zero
intermediate overflow during division
integer division result too large for a float
Returns self, the complex conjugate of any int.
bit_length
to_bytes
from_bytes
Truncating an Integral returns itself.
Flooring an Integral returns itself.
Ceiling of an Integral returns itself.
Rounding an Integral returns itself.
Rounding with an ndigits argument also returns an integer.
length
byteorder
signed
argument 'byteorder'
byteorder must be either 'little' or 'big'
length argument must be non-negative
little
numerator
the numerator of a rational number in lowest terms
denominator
the denominator of a rational number in lowest terms
base
int() missing string argument
int() base must be >= 2 and <= 36, or 0
int() can't convert non-string with explicit base
sys.int_info
bits_per_digit
size of a digit in bits
sizeof_digit
size in bytes of the C type used to represent a digit
free PyDictObject
PyType_HasFeature((((PyObject*)(op))->ob_type), (1UL << 29))
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/dictobject.c
_PyDict_CheckConsistency
0 <= mp->ma_used && mp->ma_used <= usable
(((keys->dk_size) & (keys->dk_size-1)) == 0)
0 <= keys->dk_usable && keys->dk_usable <= usable
0 <= keys->dk_nentries && keys->dk_nentries <= usable
keys->dk_usable + keys->dk_nentries <= usable
keys->dk_refcnt == 1
(-2) <= ix && ix <= usable
hash != -1
entry->me_hash == hash
entry->me_hash != -1
entry->me_value != ((void *)0)
entry->me_value == ((void *)0)
mp->ma_values[i] != ((void *)0)
cannot convert dictionary update sequence element #%zd to a sequence
dictionary update sequence element #%zd has length %zd; 2 is required
dict_keyiterator
dict_valueiterator
dict_itemiterator
dict_reversekeyiterator
dict_reverseitemiterator
dict_reversevalueiterator
%s() requires a dict argument, not '%s'
intersection
dict_keys
dict_items
dict_values
This object has no __dict__
dict mutated during update
{...}
__missing__
__contains__
setdefault
popitem
update
fromkeys
popitem(): dictionary is empty
dictionary changed size during iteration
dictionary keys changed during iteration
difference_update
symmetric_difference_update
isdisjoint
Not enough memory to allocate new values array
collections.OrderedDict
odict_iterator
odict_keys
odict_items
odict_values
%s()
need more than 0 values to unpack
need more than 1 value to unpack
too many values to unpack (expected 2)
move_to_end
O|O:pop
last
dictionary is empty
update() takes at most 1 positional argument (%zd given)
expected at most 1 arguments, got %zd
OrderedDict mutated during iteration
OrderedDict changed size during iteration
managedbuffer
PyMemoryView_FromBuffer(): info->buf must not be NULL
operation forbidden on released memoryview object
memoryview: a bytes-like object is required, not '%.200s'
underlying buffer is not writable
writable contiguous buffer requested for a non-contiguous object.
PyBuffer_ToContiguous: len != view->len
memoryview
memoryview: number of dimensions must not exceed 64
memoryview assignment: lvalue and rvalue have different structures
memoryview has %zd exported buffer%s
_memory_release(): negative export count
<released memory at %p>
<memory at %p>
invalid indexing of 0-dim memory
multi-dimensional sub-views are not implemented
memoryview: unsupported format %s
index out of bounds on dimension %d
memoryview: format %s not supported
multi-dimensional slicing is not implemented
memoryview: invalid slice key
sub-views are not implemented
cannot index %zd-dimension view with %zd-element tuple
cannot modify read-only memory
cannot delete memory
memoryview slice assignments are currently restricted to ndim = 1
memoryview: invalid type for format '%s'
memoryview: invalid value for format '%s'
cannot hash writable memoryview object
memoryview: hashing is restricted to formats 'B', 'b' or 'c'
memoryview: underlying buffer is not writable
memoryview: underlying buffer is not C-contiguous
memoryview: underlying buffer is not Fortran contiguous
memoryview: underlying buffer is not contiguous
memoryview: underlying buffer requires suboffsets
memoryview: cannot cast to unsigned bytes if the format flag is present
Struct
unpack_from
memoryview: internal error in richcompare
release
tobytes
tolist
cast
toreadonly
__enter__
__exit__
order
order must be 'C', 'F' or 'A'
format
shape
memoryview: format argument must be a string
memoryview: casts are restricted to C-contiguous views
memoryview: cannot cast view with zeros in shape or strides
shape must be a list or a tuple
memoryview: cast must be 1D -> ND or ND -> 1D
memoryview: destination format must be a native single character format prefixed with an optional '@'
memoryview: cannot cast between two non-byte formats
memoryview: length is not a multiple of itemsize
memoryview: internal error
memoryview: product(shape) * itemsize != buffer size
memoryview.cast(): elements of shape must be integers
memoryview.cast(): elements of shape must be integers > 0
memoryview.cast(): product(shape) > SSIZE_MAX
nbytes
readonly
itemsize
ndim
strides
suboffsets
c_contiguous
f_contiguous
contiguous
O:memoryview
attempting to create PyCMethod with a METH_METHOD flag but no class
attempting to create PyCFunction with class but no METH_METHOD flag
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/methodobject.c
builtin_function_or_method
builtin_method
<built-in function %s>
<built-in method %s of %s object at %p>
N(Os)
<method>.__class__.__qualname__ is not a unicode object
%S.%s
%.200s() takes no keyword arguments
moduledef
Python import machinery not initialized
module %s: PyModule_Create is incompatible with m_slots
module %s: m_size may not be negative for multi-phase initialization
module %s has multiple create slots
module %s uses unknown slot ID %i
creation of module %s failed without setting an exception
creation of module %s raised unreported exception
module %s is not a module object, but requests module state
module %s specifies execution slots, but did not create a ModuleType instance
execution of module %s failed without setting an exception
execution of module %s raised unreported exception
module %s initialized with unknown slot %i
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/moduleobject.c
nameless module
__file__
module filename missing
#   clear[1] %s
#   clear[2] %s
_initializing
module
__package__
__loader__
__spec__
Python C API version mismatch for module %.100s: This Python has API version %d, module %.100s has version %d.
module functions cannot set METH_CLASS or METH_STATIC
# destroy %U
_module_repr
__getattr__
partially initialized module '%U' has no attribute '%U' (most likely due to a circular import)
module '%U' has no attribute '%U'
module has no attribute '%U'
Exception ignored in m_clear of module%s%V
__dir__() -> list
specialized dir() implementation
%.200s.__dict__ is not a dictionary
argument 'name'
types.SimpleNamespace
namespace
%s(...)
%U=%R
%s(%S)
no positional arguments expected
!_PyObject_IsFreed(op)
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/object.c
_PyObject_CheckConsistency
(((PyObject*)(op))->ob_refcnt) >= 1
PyObject_CallFinalizerFromDealloc called on object with a non-zero refcount
PyObject_CallFinalizerFromDealloc
<nil>
<refcnt %ld at %p>
str() or repr() returned '%.100s'
<object at %p is freed>
object address  : %p
object refcount : %ld
object type     : %p
object type name: %s
object repr     : 
<NULL>
<%s object at %p>
 while getting the repr of an object
__repr__ returned non-string (type %.200s)
 while getting the str of an object
__str__ returned non-string (type %.200s)
%S.%S()
%S()
 in comparison
unhashable type: '%.200s'
attribute name must be string, not '%.200s'
'%.50s' object has no attribute '%U'
'%.100s' object has no attributes (%s .%U)
assign to
'%.100s' object has only read-only attributes (%s .%U)
'%.100s' object has no attribute '%U'
'%.50s' object attribute '%U' is read-only
cannot delete __dict__
__dict__ must be set to a dictionary, not a '%.200s'
NoneType
NotImplementedType
_PyTypes_Init
Can't initialize object type
Can't initialize type type
Can't initialize weakref type
Can't initialize callable weakref proxy type
Can't initialize weakref proxy type
Can't initialize int type
Can't initialize bool type
Can't initialize bytearray type
Can't initialize str type
Can't initialize list type
Can't initialize None type
Can't initialize NotImplemented type
Can't initialize traceback type
Can't initialize super type
Can't initialize range type
Can't initialize dict type
Can't initialize dict keys type
Can't initialize dict values type
Can't initialize dict items type
Can't initialize reversed dict keys type
Can't initialize reversed dict values type
Can't initialize reversed dict items type
Can't initialize OrderedDict type
Can't initialize odict_keys type
Can't initialize odict_items type
Can't initialize odict_values type
Can't initialize odict_keyiterator type
Can't initialize set type
Can't initialize slice type
Can't initialize static method type
Can't initialize complex type
Can't initialize float type
Can't initialize frozenset type
Can't initialize property type
Can't initialize managed buffer type
Can't initialize memoryview type
Can't initialize tuple type
Can't initialize enumerate type
Can't initialize reversed type
Can't initialize StdPrinter type
Can't initialize code type
Can't initialize frame type
Can't initialize builtin function type
Can't initialize builtin method type
Can't initialize method type
Can't initialize function type
Can't initialize dict proxy type
Can't initialize generator type
Can't initialize get-set descriptor type
Can't initialize wrapper type
Can't initialize method wrapper type
Can't initialize ellipsis type
Can't initialize member descriptor type
Can't initialize namespace type
Can't initialize capsule type
Can't initialize long range iterator type
Can't initialize cell type
Can't initialize instance method type
Can't initialize class method descr type
Can't initialize method descr type
Can't initialize call iter type
Can't initialize sequence iterator type
Can't initialize pickle.PickleBuffer type
Can't initialize coroutine type
Can't initialize coroutine wrapper type
Can't initialize interpreter ID type
%s:%d: 
%s: 
Assertion "%s" failed
Assertion failed
: %s
_PyObject_AssertFailed
'%s' not supported between instances of '%.100s' and '%.100s'
dir(): expected keys() of locals to be a list, not '%.200s'
object does not provide __dir__
none_dealloc
deallocating None
NoneType takes no arguments
notimplemented_dealloc
deallocating NotImplemented
NotImplemented
NotImplemented should not be used in a boolean context
NotImplementedType takes no arguments
Py_Repr
debug
pymalloc
pymalloc_debug
malloc
malloc_debug
%d %ss * %zd bytes each
%48s 
Small block threshold = %d, in %u size classes.
class   size   num pools   blocks in use  avail blocks
-----   ----   ---------   -------------  ------------
%5u %6u %11zu %15zu %13zu
# arenas allocated total
# arenas reclaimed
# arenas highwater mark
# arenas allocated current
%zu arenas * %d bytes/arena
# bytes in allocated blocks
# bytes in available blocks
%u unused pools * %d bytes
# bytes lost to pool headers
# bytes lost to quantization
# bytes lost to arena alignment
Total
PYTHONMALLOCSTATS
_PyMem_DebugRawFree
bad ID: Allocated using API '%c', verified using API '%c'
bad leading pad byte
bad trailing pad byte
Debug memory block at address p=%p:
 API '%c'
    %zu bytes originally requested
    The %d pad bytes at p-%d are 
FORBIDDENBYTE, as expected.
not all FORBIDDENBYTE (0x%02x):
        at p-%d: 0x%02x
 *** OUCH
    Because memory is corrupted at the start, the count of bytes requested
       may be bogus, and checking the trailing pad bytes may segfault.
    The %d pad bytes at tail=%p are 
        at tail+%d: 0x%02x
    Data at p:
 %02x
 ...
_PyMem_DebugRawRealloc
_PyMem_DebugMalloc
Python memory allocator called without holding the GIL
_PyMem_DebugCalloc
_PyMem_DebugFree
_PyMem_DebugRealloc
expected PickleBuffer, %.200s found
operation forbidden on released PickleBuffer object
pickle.PickleBuffer
Wrapper for potentially out-of-band buffers
cannot extract raw buffer from non-contiguous buffer
O:PickleBuffer
range
range_iterator
longrange_iterator
range(%R, %R)
range(%R, %R, %R)
range object index out of range
range indices must be integers or slices, not %.200s
range too large to represent as a range_iterator
(O(OOO))
%R is not in range
stop
step
range expected at least 1 argument, got 0
range expected at most 3 arguments, got %zd
range() arg 3 must not be zero
N(N)i
N(N)O
set_iterator
frozenset
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/setobject.c
Set changed size during iteration
%s({%U})
{%U}
discard
difference
intersection_update
issubset
issuperset
symmetric_difference
union
pop from an empty set
<dummy key> type
dummy_dealloc
deallocating <dummy key>
<dummy key>
ellipsis
slice step cannot be zero
slice
EllipsisType takes no arguments
slice indices must be integers or None or have an __index__ method
slice(%R, %R, %R)
indices
length should not be negative
(NNN)
O(OOO)
unnamed field
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/structseq.c
In structseq_repr(), member %zd name is NULL for type %.500s
(O(OO))
sequence
structseq
constructor requires a sequence
%.500s() takes a dict as second arg, if any
%.500s() takes an at least %zd-sequence (%zd-sequence given)
%.500s() takes an at most %zd-sequence (%zd-sequence given)
%.500s() takes a %zd-sequence (%zd-sequence given)
free %d-sized PyTupleObject
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/tupleobject.c
tuple assignment index out of range
tuple_iterator
(...)
can only concatenate tuple (not "%.200s") to tuple
tuple indices must be integers or slices, not %.200s
tuple.index(x): x not in tuple
!_PyObject_IsFreed((PyObject *)type)
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/typeobject.c
_PyType_CheckConsistency
(((PyObject*)(type))->ob_refcnt) >= 1
_PyType_Check(((PyObject*)(type)))
!(type->tp_flags & (1UL << 13))
type->tp_dict != ((void *)0)
metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases
__weaklistoffset__
__dictoffset__
__vectorcalloffset__
Type spec does not define the name field.
Py_tp_bases is not a tuple
bases is not a tuple
type '%.100s' is not an acceptable base type
invalid slot offset
builtin type %.200s has no __module__ attribute
PyType_GetModule: Type '%s' is not a heap type
PyType_GetModule: Type '%s' has no associated module
type
Type does not define the tp_name field.
type '%.100s' is not dynamically allocated but its base type '%.100s' is dynamically allocated
type '%.100s' participates in gc and is a base type but has inappropriate tp_free slot
_PyTypes_InitSlotDefs
memory allocation failed
super
bases must be types
multiple bases have instance lay-out conflict
<class '%U.%U'>
<class '%s'>
type() takes 1 or 3 arguments
cannot create '%.100s' instances
type object '%.50s' has no attribute '%U'
can't set attributes of built-in/extension type '%s'
Out of memory interning an attribute name
__new__() called with non-type 'self'
%s.__new__(): not enough arguments
%s.__new__(X): X is not a type object (%s)
%s.__new__(%s): %s is not a subtype of %s
%s.__new__(%s) is not safe, use %s.__new__()
__new__
type_traverse() called on non-heap type '%.100s'
type_traverse
__subclasses__
__prepare__
__prepare__() -> dict
used to create the namespace for the class statement
Cannot extend an incomplete type '%.100s'
duplicate base class %U
duplicate base class
Cannot create a consistent method resolution
order (MRO) for bases
__basicsize__
__itemsize__
__flags__
__weakrefoffset__
__base__
__mro__
__abstractmethods__
can only assign string to %s.__name__, not '%s'
type name must not contain null characters
can't set %s.%s
can't delete %s.%s
can only assign string to %s.__qualname__, not '%s'
can only assign tuple to %s.__bases__, not %s
can only assign non-empty tuple to %s.__bases__, not ()
%s.__bases__ must be tuple of classes, not '%s'
a __bases__ item causes an inheritance cycle
%s assignment: '%s' deallocator differs from '%s'
%s assignment: '%s' object layout differs from '%s'
type.__init__() takes no keyword arguments
type.__init__() takes 1 or 3 arguments
__slots__
__classcell__
UO!O!:type.__new__
type() doesn't support MRO entry resolution; use types.new_class()
nonempty __slots__ not supported for subtype of '%s'
__dict__ slot disallowed: we already got one
__weakref__
__weakref__ slot disallowed: either we already got one, or __itemsize__ != 0
%R in __slots__ conflicts with class variable
type __qualname__ must be a str, not %s
__classcell__ must be a nonlocal cell, not %.200R
__slots__ items must be strings, not '%.200s'
__slots__ must be identifiers
__init_subclass__
dictionary for instance variables (if defined)
list of weak references to the object (if defined)
this __dict__ descriptor does not support '%.200s' objects
This object has no __weakref__
Error calling __set_name__ on '%.100s' instance %R in '%.100s'
__set_name__
<%U.%U object at %p>
__subclasshook__
_reduce_ex
cannot pickle '%.200s' object
__newobj__
__newobj_ex__
__getnewargs_ex__
__getnewargs_ex__ should return a tuple, not '%.200s'
__getnewargs_ex__ should return a tuple of length 2, not %zd
first item of the tuple returned by __getnewargs_ex__ must be a tuple, not '%.200s'
second item of the tuple returned by __getnewargs_ex__ must be a dict, not '%.200s'
__getnewargs__ should return a tuple, not '%.200s'
__getstate__
__slotsname__ changed size during iteration
__slotnames__
_slotnames
%.200s.__slotnames__ should be a list or None, not %.200s
copyreg._slotnames didn't return a list or None
copyreg
unsupported format string passed to %.200s.__format__
the object's class
can't delete __class__ attribute
__class__ must be set to a class, not '%s' object
__class__ assignment only supported for heap types or ModuleType subclasses
object.__init__() takes exactly one argument (the instance to initialize)
%.200s.__init__() takes exactly one argument (the instance to initialize)
object.__new__() takes exactly one argument (the type to instantiate)
%.200s() takes no arguments
Can't instantiate abstract class %s with abstract method%s %U
method cannot be both class and static
mro() returned a non-class ('%.500s')
mro() returned base with unsuitable layout ('%.500s')
__eq__
__hash__
__getattribute__
__setattr__
__delattr__
__repr__
__repr__($self, /)
Return repr(self).
__hash__($self, /)
Return hash(self).
__call__
__call__($self, /, *args, **kwargs)
Call self as a function.
__str__
__str__($self, /)
Return str(self).
__getattribute__($self, name, /)
Return getattr(self, name).
__setattr__($self, name, value, /)
Implement setattr(self, name, value).
__delattr__($self, name, /)
Implement delattr(self, name).
__lt__
__lt__($self, value, /)
Return self<value.
__le__
__le__($self, value, /)
Return self<=value.
__eq__($self, value, /)
Return self==value.
__ne__
__ne__($self, value, /)
Return self!=value.
__gt__
__gt__($self, value, /)
Return self>value.
__ge__
__ge__($self, value, /)
Return self>=value.
__iter__
__iter__($self, /)
Implement iter(self).
__next__
__next__($self, /)
Implement next(self).
__get__
__get__($self, instance, owner, /)
Return an attribute of instance, which is of type owner.
__set__
__set__($self, instance, value, /)
Set an attribute of instance to value.
__delete__
__delete__($self, instance, /)
Delete an attribute of instance.
__init__
__init__($self, /, *args, **kwargs)
Initialize self.  See help(type(self)) for accurate signature.
__new__(type, /, *args, **kwargs)
Create and return new object.  See help(type) for accurate signature.
__del__
__await__
__await__($self, /)
Return an iterator to be used in await expression.
__aiter__
__aiter__($self, /)
Return an awaitable, that resolves in asynchronous iterator.
__anext__
__anext__($self, /)
Return a value or raise StopAsyncIteration.
__add__
__add__($self, value, /)
Return self+value.
__radd__
__radd__($self, value, /)
Return value+self.
__sub__
__sub__($self, value, /)
Return self-value.
__rsub__
__rsub__($self, value, /)
Return value-self.
__mul__
__mul__($self, value, /)
Return self*value.
__rmul__
__rmul__($self, value, /)
Return value*self.
__mod__
__mod__($self, value, /)
Return self%value.
__rmod__
__rmod__($self, value, /)
Return value%self.
__divmod__
__divmod__($self, value, /)
Return divmod(self, value).
__rdivmod__
__rdivmod__($self, value, /)
Return divmod(value, self).
__pow__
__pow__($self, value, mod=None, /)
Return pow(self, value, mod).
__rpow__
__rpow__($self, value, mod=None, /)
Return pow(value, self, mod).
__neg__
__neg__($self, /)
-self
__pos__
__pos__($self, /)
+self
__abs__
__abs__($self, /)
abs(self)
__bool__
__bool__($self, /)
self != 0
__invert__
__invert__($self, /)
~self
__lshift__
__lshift__($self, value, /)
Return self<<value.
__rlshift__
__rlshift__($self, value, /)
Return value<<self.
__rshift__
__rshift__($self, value, /)
Return self>>value.
__rrshift__
__rrshift__($self, value, /)
Return value>>self.
__and__
__and__($self, value, /)
Return self&value.
__rand__
__rand__($self, value, /)
Return value&self.
__xor__
__xor__($self, value, /)
Return self^value.
__rxor__
__rxor__($self, value, /)
Return value^self.
__or__
__or__($self, value, /)
Return self|value.
__ror__
__ror__($self, value, /)
Return value|self.
__int__
__int__($self, /)
int(self)
__float__
__float__($self, /)
float(self)
__iadd__
__iadd__($self, value, /)
Return self+=value.
__isub__
__isub__($self, value, /)
Return self-=value.
__imul__
__imul__($self, value, /)
Return self*=value.
__imod__
__imod__($self, value, /)
Return self%=value.
__ipow__
__ipow__($self, value, /)
Return self**=value.
__ilshift__
__ilshift__($self, value, /)
Return self<<=value.
__irshift__
__irshift__($self, value, /)
Return self>>=value.
__iand__
__iand__($self, value, /)
Return self&=value.
__ixor__
__ixor__($self, value, /)
Return self^=value.
__ior__
__ior__($self, value, /)
Return self|=value.
__floordiv__
__floordiv__($self, value, /)
Return self//value.
__rfloordiv__
__rfloordiv__($self, value, /)
Return value//self.
__truediv__
__truediv__($self, value, /)
Return self/value.
__rtruediv__
__rtruediv__($self, value, /)
Return value/self.
__ifloordiv__
__ifloordiv__($self, value, /)
Return self//=value.
__itruediv__
__itruediv__($self, value, /)
Return self/=value.
__index__
__index__($self, /)
Return self converted to an integer, if self is suitable for use as an index into a list.
__matmul__
__matmul__($self, value, /)
Return self@value.
__rmatmul__
__rmatmul__($self, value, /)
Return value@self.
__imatmul__
__imatmul__($self, value, /)
Return self@=value.
__len__
__len__($self, /)
Return len(self).
__getitem__($self, key, /)
Return self[key].
__setitem__
__setitem__($self, key, value, /)
Set self[key] to value.
__delitem__
__delitem__($self, key, /)
Delete self[key].
__contains__($self, key, /)
Return key in self.
__iadd__($self, value, /)
Implement self+=value.
__imul__($self, value, /)
Implement self*=value.
PyArg_UnpackTuple() argument list is not a tuple
expected %d argument%s, got %zd
__hash__ method should return an integer
can't apply this %s to %s object
__get__(None, None) is invalid
__init__() should return None, not '%.200s'
object %.50s does not have __await__ method
object %.50s does not have __aiter__ method
object %.50s does not have __anext__ method
__bool__ should return bool, returned %s
__len__() should return >= 0
'%.200s' object is not a container
__new__($type, *args, **kwargs)
Create and return a new object.  See help(type) for accurate signature.
<super: <class '%s'>, <%s object>>
<super: <class '%s'>, NULL>
__thisclass__
the class invoking super()
the instance invoking super(); may be None
__self_class__
the type of the instance invoking super(); may be None
super(type, obj): obj must be an instance or subtype of type
|O!O:super
super(): no current frame
super(): no arguments
super(): arg[0] deleted
super(): bad __class__ cell
super(): empty __class__ cell
super(): __class__ is not a type (%s)
super(): __class__ cell not found
surrogateescape
surrogatepass
xmlcharrefreplace
PyType_HasFeature((((PyObject*)(op))->ob_type), (1UL << 28))
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/unicodeobject.c
_PyUnicode_CheckConsistency
kind == PyUnicode_1BYTE_KIND
ascii->state.ready == 1
kind == PyUnicode_1BYTE_KIND || kind == PyUnicode_2BYTE_KIND || kind == PyUnicode_4BYTE_KIND
ascii->state.ascii == 0
compact->utf8 != data
ascii->length == 0
ascii->hash == -1
ascii->state.ready == 0
ascii->state.interned == 0
ascii->wstr != ((void *)0)
data == ((void *)0)
compact->utf8 == ((void *)0)
data != ((void *)0)
compact->utf8 == data
compact->utf8_length == ascii->length
ascii->wstr == data
compact->wstr_length == ascii->length
ascii->wstr != data
compact->utf8_length == 0
compact->wstr_length == 0
maxchar >= 128
maxchar <= 255
maxchar < 128
maxchar >= 0x100
maxchar <= 0xFFFF
maxchar >= 0x10000
maxchar <= 0x10ffff
((Py_UCS4) ((kind) == PyUnicode_1BYTE_KIND ? ((const Py_UCS1 *)(data))[(ascii->length)] : ((kind) == PyUnicode_2BYTE_KIND ? ((const Py_UCS2 *)(data))[(ascii->length)] : ((const Py_UCS4 *)(data))[(ascii->length)] ) )) == 0
invalid maximum character passed to PyUnicode_New
Negative size passed to PyUnicode_New
string index out of range
how_many cannot be negative
Cannot write %zi characters at %zi in a string of %zi characters
Cannot copy %s characters into a string of %s characters
Negative size passed to PyUnicode_FromStringAndSize
input too long
size must be positive
invalid kind
PyUnicode_FromFormatV() expects an ASCII-encoded format string, got a non-ASCII byte: 0x%02x
chr() arg not in range(0x110000)
Can't convert '%.100s' object to str implicitly
decoding str is not supported
decoding to str: need a bytes-like object, %.80s found
ascii
us_ascii
latin1
latin_1
iso_8859_1
iso8859_1
'%.400s' decoder returned '%.400s' instead of 'str'; use codecs.decode() to decode to arbitrary types
PyUnicode_AsDecodedObject() is deprecated; use PyCodec_Decode() to decode from str
PyUnicode_AsDecodedUnicode() is deprecated; use PyCodec_Decode() to decode from str to str
PyUnicode_AsEncodedObject() is deprecated; use PyUnicode_AsEncodedString() to encode from str to bytes or PyCodec_Encode() for generic encoding
encoder %s returned bytearray instead of bytes; use codecs.encode() to encode to arbitrary types
'%.400s' encoder returned '%.400s' instead of 'bytes'; use codecs.encode() to encode to arbitrary types
PyUnicode_AsEncodedUnicode() is deprecated; use PyCodec_Encode() to encode from str to str
'%.400s' encoder returned '%.400s' instead of 'str'; use codecs.encode() to encode to arbitrary types
path should be string, bytes, or os.PathLike, not %.200s
character out of range
partial character in shift sequence
non-zero padding bits in shift sequence
ill-formed sequence
unexpected special character
utf7
unterminated shift sequence
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
unexpected end of data
invalid start byte
invalid continuation byte
encoding error
utf-32-le
utf-32-be
code point in surrogate code point range(0xd800, 0xe000)
truncated data
code point not in range(0x110000)
utf-32
surrogates not allowed
utf-16-le
utf-16-be
illegal encoding
illegal UTF-16 surrogate
utf-16
\ at end of string
truncated \xXX escape
truncated \uXXXX escape
truncated \UXXXXXXXX escape
illegal Unicode character
unicodedata.ucnhash_CAPI
\N escapes not supported (can't load unicodedata module)
malformed \N character escape
unknown Unicode character name
unicodeescape
\Uxxxxxxxx out of range
rawunicodeescape
ordinal not in range(128)
decimal
invalid decimal Unicode string
separator: expected str instance, %.80s found
sequence item %zd: expected str instance, %.80s found
join() result is too long for a Python string
fill character is bigger than the string maximum character
Can't compare %.100s and %.100s
'in <string>' requires string as left operand, not %.100s
can only concatenate str (not "%.200s") to str
strings are too large to concat
precision too large
string too large in _PyUnicode_FormatLong
not all arguments converted during string formatting
_PyUnicode_Init
Can't create empty string
Can't initialize unicode type
Can't initialize encoding map type
Can't initialize field name iterator type
Can't initialize formatter iter type
str_iterator
Cannot modify a string currently used
wstr
legacy ascii
legacy latin1
legacy UCS2
legacy UCS4
<legacy invalid kind>
UCS2
UCS4
<invalid compact kind>
character U+%x is not in range [U+0000; U+%x]
Negative size passed to _PyUnicode_New
string is longer than the buffer
precision too big
character argument not in range(0x110000)
%llu
%lli
sOnns
locale
unsupported error handler
Un;decoding error handler must return (str, int) tuple
position %zd from error handler out of bounds
encoded result is too long for a Python string
&#%d;
On;encoding error handler must return (str/bytes, int) tuple
ordinal not in range(256)
charmap
character maps to <undefined>
character mapping must be in range(0x%x)
character mapping must return integer, None or str
EncodingMap
size
Return the size (in bytes) of this object
character mapping must be in range(256)
character mapping must return integer, bytes or None, not %.400s
Un;translating error handler must return (str, int) tuple
must be str, not %.100s
replace string is too long
%%%c format: an integer is required, not %.200s
%%%c format: a number is required, not %.200s
%c arg not in range(0x110000)
%c requires int or char
deletion of interned string failed
Immortal interned string died
unicode_dealloc
string is too long to generate repr
repeated string is too long
string indices must be integers
encode
casefold
isdecimal
isnumeric
isidentifier
isprintable
format_map
must be str or None, not %.100s
string is too long
The fill character must be a unicode character, not %.100s
The fill character must be exactly one character long
padded string is too long
new string is too long
substring not found
%s arg must be None or str
tuple for startswith must only contain str, not %.100s
startswith first arg must be str or a tuple of str, not %.100s
tuple for endswith must only contain str, not %.100s
endswith first arg must be str or a tuple of str, not %.100s
Max string recursion exceeded
Single '}' encountered in format string
Single '{' encountered in format string
unexpected '{' in field name
end of string while looking for conversion specifier
expected ':' after conversion specifier
unmatched '{' in format spec
expected '}' before end of string
Format string contains positional fields
Replacement index %zd out of range for positional args tuple
Too many decimal digits in format string
cannot switch from manual field specification to automatic field numbering
cannot switch from automatic field numbering to manual field specification
Only '.' or '[' may follow ']' in format field specifier
Empty attribute in format string
Missing ']' in format string
Unknown conversion specifier %c
Unknown conversion specifier \x%x
argument 3
first maketrans argument must be a string if there is a second argument
the first two maketrans arguments must have equal length
if you give only one argument to maketrans it must be a dict
string keys in translate table must be of length 1
keys in translate table must be strings or integers
|Oss:str
fieldnameiterator
formatteriterator
init_fs_encoding
failed to get the Python codec of the filesystem encoding
cannot initialize filesystem codec
stdio_encoding
cannot decode %s
filesystem_encoding
filesystem_errors
init_stdio_encoding
failed to get the Python codec name of the stdio encoding
_string
string helper module
formatter_field_name_split
split the argument as a field name
formatter_parser
parse the argument as a format string
expected str, got %s
weakref
weakproxy
weakcallableproxy
cannot create weak reference to '%s' object
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Objects/weakrefobject.c
<weakref at %p; dead>
<weakref at %p; to '%s' at %p>
<weakref at %p; to '%s' at %p (%U)>
weak object has gone away
:__call__
__callback__
<weakproxy at %p to %s at %p>
weakly-referenced object no longer exists
_warn_unawaited_coroutine
coroutine '%S' was never awaited
_PyWarnings_InitState
can't initialize warnings
filters
_onceregistry
_defaultaction
__warningregistry__
importlib
_bootstrap
'registry' must be a dict or None
error
always
once
Unrecognized action (%R) in warnings.filters:
<unknown>
version
_warnings.filters must be a list
_warnings.filters item %zd isn't a 5-tuple
action must be a string, not '%.200s'
match
defaultaction
_warnings.defaultaction must be a string, not '%.200s'
onceregistry
_warnings.onceregistry must be a dict, not '%.200s'
_showwarnmsg
WarningMessage
warnings._showwarnmsg() must be set to a callable
unable to get warnings.WarningMessage
:%d: 
lost sys.stderr
stderr
warnings
__main__
_warnings
warn
warn_explicit
_filters_mutated
message
category
stacklevel
category must be a Warning subclass, not '%s'
registry
module_globals
OOUi|OOOO:warn_explicit
module_globals must be a dict, not '%.200s'
get_source
warnings_get_state: could not identify current interpreter
field 'body' is required for Expression
field 'returns' is required for FunctionType
field 'name' is required for FunctionDef
field 'args' is required for FunctionDef
field 'name' is required for AsyncFunctionDef
field 'args' is required for AsyncFunctionDef
field 'name' is required for ClassDef
field 'value' is required for Assign
field 'target' is required for AugAssign
field 'op' is required for AugAssign
field 'value' is required for AugAssign
field 'target' is required for AnnAssign
field 'annotation' is required for AnnAssign
field 'target' is required for For
field 'iter' is required for For
field 'target' is required for AsyncFor
field 'iter' is required for AsyncFor
field 'test' is required for While
field 'test' is required for If
field 'test' is required for Assert
field 'value' is required for Expr
field 'op' is required for BoolOp
field 'target' is required for NamedExpr
field 'value' is required for NamedExpr
field 'left' is required for BinOp
field 'op' is required for BinOp
field 'right' is required for BinOp
field 'op' is required for UnaryOp
field 'operand' is required for UnaryOp
field 'args' is required for Lambda
field 'body' is required for Lambda
field 'test' is required for IfExp
field 'body' is required for IfExp
field 'orelse' is required for IfExp
field 'elt' is required for ListComp
field 'elt' is required for SetComp
field 'key' is required for DictComp
field 'value' is required for DictComp
field 'elt' is required for GeneratorExp
field 'value' is required for Await
field 'value' is required for YieldFrom
field 'left' is required for Compare
field 'func' is required for Call
field 'value' is required for FormattedValue
field 'value' is required for Constant
field 'value' is required for Attribute
field 'attr' is required for Attribute
field 'ctx' is required for Attribute
field 'value' is required for Subscript
field 'slice' is required for Subscript
field 'ctx' is required for Subscript
field 'value' is required for Starred
field 'ctx' is required for Starred
field 'id' is required for Name
field 'ctx' is required for Name
field 'ctx' is required for List
field 'ctx' is required for Tuple
field 'target' is required for comprehension
field 'iter' is required for comprehension
field 'arg' is required for arg
field 'value' is required for keyword
field 'name' is required for alias
field 'context_expr' is required for withitem
field 'tag' is required for TypeIgnore
Module
Expression
Interactive
expected %s node, got %.400s
_ast
PyCF_ALLOW_TOP_LEVEL_AWAIT
PyCF_ONLY_AST
PyCF_TYPE_COMMENTS
FunctionType
stmt
FunctionDef
AsyncFunctionDef
ClassDef
Return
Delete
Assign
AugAssign
AnnAssign
AsyncFor
While
With
AsyncWith
Raise
Assert
Import
ImportFrom
Global
Nonlocal
Expr
Pass
Break
Continue
expr
BoolOp
NamedExpr
BinOp
UnaryOp
Lambda
IfExp
Dict
ListComp
SetComp
DictComp
GeneratorExp
Await
Yield
YieldFrom
Compare
Call
FormattedValue
JoinedStr
Constant
Attribute
Subscript
Starred
Name
List
Tuple
Slice
expr_context
Load
Store
boolop
Mult
MatMult
LShift
RShift
BitOr
BitXor
BitAnd
FloorDiv
unaryop
Invert
UAdd
USub
cmpop
NotEq
IsNot
NotIn
comprehension
excepthandler
ExceptHandler
arguments
keyword
alias
withitem
type_ignore
TypeIgnore
mod = Module(stmt* body, type_ignore* type_ignores)
    | Interactive(stmt* body)
    | Expression(expr body)
    | FunctionType(expr* argtypes, expr returns)
Module(stmt* body, type_ignore* type_ignores)
Interactive(stmt* body)
Expression(expr body)
FunctionType(expr* argtypes, expr returns)
stmt = FunctionDef(identifier name, arguments args, stmt* body, expr* decorator_list, expr? returns, string? type_comment)
     | AsyncFunctionDef(identifier name, arguments args, stmt* body, expr* decorator_list, expr? returns, string? type_comment)
     | ClassDef(identifier name, expr* bases, keyword* keywords, stmt* body, expr* decorator_list)
     | Return(expr? value)
     | Delete(expr* targets)
     | Assign(expr* targets, expr value, string? type_comment)
     | AugAssign(expr target, operator op, expr value)
     | AnnAssign(expr target, expr annotation, expr? value, int simple)
     | For(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)
     | AsyncFor(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)
     | While(expr test, stmt* body, stmt* orelse)
     | If(expr test, stmt* body, stmt* orelse)
     | With(withitem* items, stmt* body, string? type_comment)
     | AsyncWith(withitem* items, stmt* body, string? type_comment)
     | Raise(expr? exc, expr? cause)
     | Try(stmt* body, excepthandler* handlers, stmt* orelse, stmt* finalbody)
     | Assert(expr test, expr? msg)
     | Import(alias* names)
     | ImportFrom(identifier? module, alias* names, int? level)
     | Global(identifier* names)
     | Nonlocal(identifier* names)
     | Expr(expr value)
     | Pass
     | Break
     | Continue
FunctionDef(identifier name, arguments args, stmt* body, expr* decorator_list, expr? returns, string? type_comment)
AsyncFunctionDef(identifier name, arguments args, stmt* body, expr* decorator_list, expr? returns, string? type_comment)
ClassDef(identifier name, expr* bases, keyword* keywords, stmt* body, expr* decorator_list)
Return(expr? value)
Delete(expr* targets)
Assign(expr* targets, expr value, string? type_comment)
AugAssign(expr target, operator op, expr value)
AnnAssign(expr target, expr annotation, expr? value, int simple)
For(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)
AsyncFor(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)
While(expr test, stmt* body, stmt* orelse)
If(expr test, stmt* body, stmt* orelse)
With(withitem* items, stmt* body, string? type_comment)
AsyncWith(withitem* items, stmt* body, string? type_comment)
Raise(expr? exc, expr? cause)
Try(stmt* body, excepthandler* handlers, stmt* orelse, stmt* finalbody)
Assert(expr test, expr? msg)
Import(alias* names)
ImportFrom(identifier? module, alias* names, int? level)
Global(identifier* names)
Nonlocal(identifier* names)
Expr(expr value)
expr = BoolOp(boolop op, expr* values)
     | NamedExpr(expr target, expr value)
     | BinOp(expr left, operator op, expr right)
     | UnaryOp(unaryop op, expr operand)
     | Lambda(arguments args, expr body)
     | IfExp(expr test, expr body, expr orelse)
     | Dict(expr* keys, expr* values)
     | Set(expr* elts)
     | ListComp(expr elt, comprehension* generators)
     | SetComp(expr elt, comprehension* generators)
     | DictComp(expr key, expr value, comprehension* generators)
     | GeneratorExp(expr elt, comprehension* generators)
     | Await(expr value)
     | Yield(expr? value)
     | YieldFrom(expr value)
     | Compare(expr left, cmpop* ops, expr* comparators)
     | Call(expr func, expr* args, keyword* keywords)
     | FormattedValue(expr value, int? conversion, expr? format_spec)
     | JoinedStr(expr* values)
     | Constant(constant value, string? kind)
     | Attribute(expr value, identifier attr, expr_context ctx)
     | Subscript(expr value, expr slice, expr_context ctx)
     | Starred(expr value, expr_context ctx)
     | Name(identifier id, expr_context ctx)
     | List(expr* elts, expr_context ctx)
     | Tuple(expr* elts, expr_context ctx)
     | Slice(expr? lower, expr? upper, expr? step)
BoolOp(boolop op, expr* values)
NamedExpr(expr target, expr value)
BinOp(expr left, operator op, expr right)
UnaryOp(unaryop op, expr operand)
Lambda(arguments args, expr body)
IfExp(expr test, expr body, expr orelse)
Dict(expr* keys, expr* values)
Set(expr* elts)
ListComp(expr elt, comprehension* generators)
SetComp(expr elt, comprehension* generators)
DictComp(expr key, expr value, comprehension* generators)
GeneratorExp(expr elt, comprehension* generators)
Await(expr value)
Yield(expr? value)
YieldFrom(expr value)
Compare(expr left, cmpop* ops, expr* comparators)
Call(expr func, expr* args, keyword* keywords)
FormattedValue(expr value, int? conversion, expr? format_spec)
JoinedStr(expr* values)
Constant(constant value, string? kind)
Attribute(expr value, identifier attr, expr_context ctx)
Subscript(expr value, expr slice, expr_context ctx)
Starred(expr value, expr_context ctx)
Name(identifier id, expr_context ctx)
List(expr* elts, expr_context ctx)
Tuple(expr* elts, expr_context ctx)
Slice(expr? lower, expr? upper, expr? step)
expr_context = Load | Store | Del
boolop = And | Or
operator = Add | Sub | Mult | MatMult | Div | Mod | Pow | LShift | RShift | BitOr | BitXor | BitAnd | FloorDiv
unaryop = Invert | Not | UAdd | USub
cmpop = Eq | NotEq | Lt | LtE | Gt | GtE | Is | IsNot | In | NotIn
comprehension(expr target, expr iter, expr* ifs, int is_async)
excepthandler = ExceptHandler(expr? type, identifier? name, stmt* body)
ExceptHandler(expr? type, identifier? name, stmt* body)
arguments(arg* posonlyargs, arg* args, arg? vararg, arg* kwonlyargs, expr* kw_defaults, arg? kwarg, expr* defaults)
arg(identifier arg, expr? annotation, string? type_comment)
keyword(identifier? arg, expr value)
alias(identifier name, identifier? asname)
withitem(expr context_expr, expr? optional_vars)
type_ignore = TypeIgnore(int lineno, string tag)
TypeIgnore(int lineno, string tag)
_attributes
_fields
annotation
argtypes
asname
attr
bases
body
cause
col_offset
comparators
context_expr
conversion
decorator_list
defaults
elts
end_col_offset
end_lineno
finalbody
format_spec
func
generators
handlers
is_async
keywords
kind
kw_defaults
kwarg
kwonlyargs
left
level
names
operand
optional_vars
orelse
posonlyargs
returns
right
simple
target
targets
test
type_comment
type_ignores
vararg
ast.AST
O()N
%.400s constructor takes at most %zd positional argument%s
%.400s got multiple values for argument '%U'
s(O){OOOOOs}
required field "body" missing from Module
Module field "body" must be a list, not a %.200s
 while traversing 'Module' node
Module field "body" changed size during iteration
required field "type_ignores" missing from Module
Module field "type_ignores" must be a list, not a %.200s
Module field "type_ignores" changed size during iteration
required field "body" missing from Interactive
Interactive field "body" must be a list, not a %.200s
 while traversing 'Interactive' node
Interactive field "body" changed size during iteration
required field "body" missing from Expression
 while traversing 'Expression' node
required field "argtypes" missing from FunctionType
FunctionType field "argtypes" must be a list, not a %.200s
 while traversing 'FunctionType' node
FunctionType field "argtypes" changed size during iteration
required field "returns" missing from FunctionType
expected some sort of mod, but got %R
required field "lineno" missing from stmt
 while traversing 'stmt' node
required field "col_offset" missing from stmt
required field "name" missing from FunctionDef
 while traversing 'FunctionDef' node
required field "args" missing from FunctionDef
required field "body" missing from FunctionDef
FunctionDef field "body" must be a list, not a %.200s
FunctionDef field "body" changed size during iteration
required field "decorator_list" missing from FunctionDef
FunctionDef field "decorator_list" must be a list, not a %.200s
FunctionDef field "decorator_list" changed size during iteration
required field "name" missing from AsyncFunctionDef
 while traversing 'AsyncFunctionDef' node
required field "args" missing from AsyncFunctionDef
required field "body" missing from AsyncFunctionDef
AsyncFunctionDef field "body" must be a list, not a %.200s
AsyncFunctionDef field "body" changed size during iteration
required field "decorator_list" missing from AsyncFunctionDef
AsyncFunctionDef field "decorator_list" must be a list, not a %.200s
AsyncFunctionDef field "decorator_list" changed size during iteration
required field "name" missing from ClassDef
 while traversing 'ClassDef' node
required field "bases" missing from ClassDef
ClassDef field "bases" must be a list, not a %.200s
ClassDef field "bases" changed size during iteration
required field "keywords" missing from ClassDef
ClassDef field "keywords" must be a list, not a %.200s
ClassDef field "keywords" changed size during iteration
required field "body" missing from ClassDef
ClassDef field "body" must be a list, not a %.200s
ClassDef field "body" changed size during iteration
required field "decorator_list" missing from ClassDef
ClassDef field "decorator_list" must be a list, not a %.200s
ClassDef field "decorator_list" changed size during iteration
 while traversing 'Return' node
required field "targets" missing from Delete
Delete field "targets" must be a list, not a %.200s
 while traversing 'Delete' node
Delete field "targets" changed size during iteration
required field "targets" missing from Assign
Assign field "targets" must be a list, not a %.200s
 while traversing 'Assign' node
Assign field "targets" changed size during iteration
required field "value" missing from Assign
required field "target" missing from AugAssign
 while traversing 'AugAssign' node
required field "op" missing from AugAssign
required field "value" missing from AugAssign
required field "target" missing from AnnAssign
 while traversing 'AnnAssign' node
required field "annotation" missing from AnnAssign
required field "simple" missing from AnnAssign
required field "target" missing from For
 while traversing 'For' node
required field "iter" missing from For
required field "body" missing from For
For field "body" must be a list, not a %.200s
For field "body" changed size during iteration
required field "orelse" missing from For
For field "orelse" must be a list, not a %.200s
For field "orelse" changed size during iteration
required field "target" missing from AsyncFor
 while traversing 'AsyncFor' node
required field "iter" missing from AsyncFor
required field "body" missing from AsyncFor
AsyncFor field "body" must be a list, not a %.200s
AsyncFor field "body" changed size during iteration
required field "orelse" missing from AsyncFor
AsyncFor field "orelse" must be a list, not a %.200s
AsyncFor field "orelse" changed size during iteration
required field "test" missing from While
 while traversing 'While' node
required field "body" missing from While
While field "body" must be a list, not a %.200s
While field "body" changed size during iteration
required field "orelse" missing from While
While field "orelse" must be a list, not a %.200s
While field "orelse" changed size during iteration
required field "test" missing from If
 while traversing 'If' node
required field "body" missing from If
If field "body" must be a list, not a %.200s
If field "body" changed size during iteration
required field "orelse" missing from If
If field "orelse" must be a list, not a %.200s
If field "orelse" changed size during iteration
required field "items" missing from With
With field "items" must be a list, not a %.200s
 while traversing 'With' node
With field "items" changed size during iteration
required field "body" missing from With
With field "body" must be a list, not a %.200s
With field "body" changed size during iteration
required field "items" missing from AsyncWith
AsyncWith field "items" must be a list, not a %.200s
 while traversing 'AsyncWith' node
AsyncWith field "items" changed size during iteration
required field "body" missing from AsyncWith
AsyncWith field "body" must be a list, not a %.200s
AsyncWith field "body" changed size during iteration
 while traversing 'Raise' node
required field "body" missing from Try
Try field "body" must be a list, not a %.200s
 while traversing 'Try' node
Try field "body" changed size during iteration
required field "handlers" missing from Try
Try field "handlers" must be a list, not a %.200s
Try field "handlers" changed size during iteration
required field "orelse" missing from Try
Try field "orelse" must be a list, not a %.200s
Try field "orelse" changed size during iteration
required field "finalbody" missing from Try
Try field "finalbody" must be a list, not a %.200s
Try field "finalbody" changed size during iteration
required field "test" missing from Assert
 while traversing 'Assert' node
required field "names" missing from Import
Import field "names" must be a list, not a %.200s
 while traversing 'Import' node
Import field "names" changed size during iteration
 while traversing 'ImportFrom' node
required field "names" missing from ImportFrom
ImportFrom field "names" must be a list, not a %.200s
ImportFrom field "names" changed size during iteration
required field "names" missing from Global
Global field "names" must be a list, not a %.200s
 while traversing 'Global' node
Global field "names" changed size during iteration
required field "names" missing from Nonlocal
Nonlocal field "names" must be a list, not a %.200s
 while traversing 'Nonlocal' node
Nonlocal field "names" changed size during iteration
required field "value" missing from Expr
 while traversing 'Expr' node
expected some sort of stmt, but got %R
invalid integer value: %R
AST identifier must be of type str
required field "posonlyargs" missing from arguments
arguments field "posonlyargs" must be a list, not a %.200s
 while traversing 'arguments' node
arguments field "posonlyargs" changed size during iteration
required field "args" missing from arguments
arguments field "args" must be a list, not a %.200s
arguments field "args" changed size during iteration
required field "kwonlyargs" missing from arguments
arguments field "kwonlyargs" must be a list, not a %.200s
arguments field "kwonlyargs" changed size during iteration
required field "kw_defaults" missing from arguments
arguments field "kw_defaults" must be a list, not a %.200s
arguments field "kw_defaults" changed size during iteration
required field "defaults" missing from arguments
arguments field "defaults" must be a list, not a %.200s
arguments field "defaults" changed size during iteration
required field "arg" missing from arg
 while traversing 'arg' node
required field "lineno" missing from arg
required field "col_offset" missing from arg
AST string must be of type str
 while traversing 'keyword' node
required field "value" missing from keyword
required field "lineno" missing from keyword
required field "col_offset" missing from keyword
expected some sort of operator, but got %R
required field "context_expr" missing from withitem
 while traversing 'withitem' node
required field "lineno" missing from excepthandler
 while traversing 'excepthandler' node
required field "col_offset" missing from excepthandler
 while traversing 'ExceptHandler' node
required field "body" missing from ExceptHandler
ExceptHandler field "body" must be a list, not a %.200s
ExceptHandler field "body" changed size during iteration
expected some sort of excepthandler, but got %R
required field "name" missing from alias
 while traversing 'alias' node
required field "lineno" missing from TypeIgnore
 while traversing 'TypeIgnore' node
required field "tag" missing from TypeIgnore
expected some sort of type_ignore, but got %R
required field "lineno" missing from expr
 while traversing 'expr' node
required field "col_offset" missing from expr
required field "op" missing from BoolOp
 while traversing 'BoolOp' node
required field "values" missing from BoolOp
BoolOp field "values" must be a list, not a %.200s
BoolOp field "values" changed size during iteration
required field "target" missing from NamedExpr
 while traversing 'NamedExpr' node
required field "value" missing from NamedExpr
required field "left" missing from BinOp
 while traversing 'BinOp' node
required field "op" missing from BinOp
required field "right" missing from BinOp
required field "op" missing from UnaryOp
 while traversing 'UnaryOp' node
required field "operand" missing from UnaryOp
required field "args" missing from Lambda
 while traversing 'Lambda' node
required field "body" missing from Lambda
required field "test" missing from IfExp
 while traversing 'IfExp' node
required field "body" missing from IfExp
required field "orelse" missing from IfExp
required field "keys" missing from Dict
Dict field "keys" must be a list, not a %.200s
 while traversing 'Dict' node
Dict field "keys" changed size during iteration
required field "values" missing from Dict
Dict field "values" must be a list, not a %.200s
Dict field "values" changed size during iteration
required field "elts" missing from Set
Set field "elts" must be a list, not a %.200s
 while traversing 'Set' node
Set field "elts" changed size during iteration
required field "elt" missing from ListComp
 while traversing 'ListComp' node
required field "generators" missing from ListComp
ListComp field "generators" must be a list, not a %.200s
ListComp field "generators" changed size during iteration
required field "elt" missing from SetComp
 while traversing 'SetComp' node
required field "generators" missing from SetComp
SetComp field "generators" must be a list, not a %.200s
SetComp field "generators" changed size during iteration
required field "key" missing from DictComp
 while traversing 'DictComp' node
required field "value" missing from DictComp
required field "generators" missing from DictComp
DictComp field "generators" must be a list, not a %.200s
DictComp field "generators" changed size during iteration
required field "elt" missing from GeneratorExp
 while traversing 'GeneratorExp' node
required field "generators" missing from GeneratorExp
GeneratorExp field "generators" must be a list, not a %.200s
GeneratorExp field "generators" changed size during iteration
required field "value" missing from Await
 while traversing 'Await' node
 while traversing 'Yield' node
required field "value" missing from YieldFrom
 while traversing 'YieldFrom' node
required field "left" missing from Compare
 while traversing 'Compare' node
required field "ops" missing from Compare
Compare field "ops" must be a list, not a %.200s
Compare field "ops" changed size during iteration
required field "comparators" missing from Compare
Compare field "comparators" must be a list, not a %.200s
Compare field "comparators" changed size during iteration
required field "func" missing from Call
 while traversing 'Call' node
required field "args" missing from Call
Call field "args" must be a list, not a %.200s
Call field "args" changed size during iteration
required field "keywords" missing from Call
Call field "keywords" must be a list, not a %.200s
Call field "keywords" changed size during iteration
required field "value" missing from FormattedValue
 while traversing 'FormattedValue' node
required field "values" missing from JoinedStr
JoinedStr field "values" must be a list, not a %.200s
 while traversing 'JoinedStr' node
JoinedStr field "values" changed size during iteration
required field "value" missing from Constant
 while traversing 'Constant' node
required field "value" missing from Attribute
 while traversing 'Attribute' node
required field "attr" missing from Attribute
required field "ctx" missing from Attribute
required field "value" missing from Subscript
 while traversing 'Subscript' node
required field "slice" missing from Subscript
required field "ctx" missing from Subscript
required field "value" missing from Starred
 while traversing 'Starred' node
required field "ctx" missing from Starred
required field "id" missing from Name
 while traversing 'Name' node
required field "ctx" missing from Name
required field "elts" missing from List
List field "elts" must be a list, not a %.200s
 while traversing 'List' node
List field "elts" changed size during iteration
required field "ctx" missing from List
required field "elts" missing from Tuple
Tuple field "elts" must be a list, not a %.200s
 while traversing 'Tuple' node
Tuple field "elts" changed size during iteration
required field "ctx" missing from Tuple
 while traversing 'Slice' node
expected some sort of expr, but got %R
expected some sort of boolop, but got %R
expected some sort of unaryop, but got %R
required field "target" missing from comprehension
 while traversing 'comprehension' node
required field "iter" missing from comprehension
required field "ifs" missing from comprehension
comprehension field "ifs" must be a list, not a %.200s
comprehension field "ifs" changed size during iteration
required field "is_async" missing from comprehension
expected some sort of cmpop, but got %R
expected some sort of expr_context, but got %R
impossible module node
invalid node %d for PyAST_FromNode
None disallowed in statement list
AnnAssign with simple non-Name target
Raise with cause but no exception
Try has neither except handlers nor finalbody
Try has orelse but no except handlers
Negative ImportFrom level
unexpected statement
more positional defaults than args on arguments
length of kwonlyargs is not the same as kw_defaults on arguments
None disallowed in expression list
empty %s on %s
expression which can't be assigned to in %s context
expression must have %s context but has %s instead
BoolOp with less than 2 values
Dict doesn't have the same number of keys as values
Compare with no comparators
Compare has a different number of comparators and operands
unexpected expression
Name node can't be used with '%s' constant
comprehension with no generators
got an invalid type in Constant: %s
num_stmts
Non-statement found: %d %d
unhandled expr: %d
cannot %s %s
cannot assign to %U
__debug__
unexpected node in varargslist: %d @ %d
unexpected node
invalid comp_op: %s
invalid comp_op: %s %s
invalid comp_op: has %d children
The '@' operator is only supported in Python 3.5 and greater
unhandled factor: %d
Await expressions are only supported in Python 3.5 and greater
unhandled atom %d
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Python/ast.c
<fstring>
Async comprehensions are only supported in Python 3.6 and greater
logic error in count_comp_fors
unhandled small_stmt: TYPE=%d NCH=%d
unhandled compound_stmt: TYPE=%d NCH=%d
Variable annotation syntax is only supported in Python 3.6 and greater
only single target (not list) can be annotated
invalid augassign: %s
unexpected flow_stmt: %d
Unexpected node-type in from-import
unknown import statement: starts with command '%s'
unexpected import name: %d
improper number of parts to 'assert' statement: %d
unexpected token in 'if' statement: %s
wrong number of tokens for 'while' statement: %d
Async for loops are only supported in Python 3.5 and greater
malformed 'try' statement
wrong number of children for 'except' clause: %d
Async with statements are only supported in Python 3.5 and greater
Async functions are only supported in Python 3.5 and greater
invalid async stament: %s
1e%d
unknown expression kind
 and 
 or 
 << 
 >> 
 // 
 ** 
unknown binary operator
not 
unknown unary operator
lambda 
 if 
 else 
 async for 
 for 
 in 
(yield)
(yield 
(yield from 
await 
 == 
 != 
 <= 
 >= 
 is 
 is not 
 not in 
unexpected comparison kind
unknown expression kind inside f-string
unknown f-value conversion kind
 := 
filter
map() must have at least two arguments.
__build_class__
__import__
breakpoint
callable
delattr
divmod
eval
exec
hasattr
hash
input
isinstance
issubclass
locals
next
repr
round
setattr
sorted
vars
__build_class__: not enough arguments
__build_class__: func must be a function
__build_class__: name is not a string
%.200s.__prepare__() must return a mapping, not %.200s
<metaclass>
__orig_bases__
__class__ not set defining %.200R as %.200R. Was __classcell__ propagated to type.__new__?
__class__ set to %.200R defining %.200R as %.200R
__mro_entries__ must return a tuple
metaclass
fromlist
U|OOOi:__import__
breakpointhook
lost sys.breakpointhook
builtins.breakpoint
flags
dont_inherit
optimize
_feature_version
argument 'mode'
compile(): unrecognised flags
compile(): invalid optimize value
single
func_type
compile() mode 'func_type' requires flag PyCF_ONLY_AST
compile() mode must be 'exec', 'eval', 'single' or 'func_type'
compile() mode must be 'exec', 'eval' or 'single'
string, bytes or AST
locals must be a mapping
globals must be a real dict; try eval(expr, {}, mapping)
globals must be a dict
eval must be given globals and locals when called without a frame
code object passed to eval() may not contain free variables
string, bytes or code
globals and locals cannot be NULL
exec() globals must be a dict, not %.100s
locals must be a mapping or None, not %.100s
code object passed to exec() may not contain free variables
getattr(): attribute name must be string
hasattr(): attribute name must be string
builtins.id
input(): lost sys.stdin
input(): lost sys.stdout
input(): lost sys.stderr
builtins.input
input: input too long
builtins.input/result
stdin
stdout
iter(v, w): v must be callable
%s expected at least 1 argument, got 0
|$OO:min
|$OO:max
Cannot specify a default for %s() with multiple positional arguments
%s() arg is an empty sequence
'%.200s' object is not an iterator
ord() expected string of length 1, but %.200s found
ord() expected a character, but string of length %zd found
file
|OOOp:print
lost sys.stdout
sep must be None or a string, not %.200s
end must be None or a string, not %.200s
number
ndigits
type %.100s doesn't define __round__ method
sum() can't sum strings [use ''.join(seq) instead]
sum() can't sum bytes [use b''.join(seq) instead]
sum() can't sum bytearray [use b''.join(seq) instead]
vars() argument must have __dict__ attribute
the function must be called with the GIL held, but the GIL is released (the current Python thread state is NULL)
PyEval_AcquireLock
PyEval_AcquireThread
non-NULL old thread state
PyEval_ReleaseThread
wrong thread state
_PyEval_ReInitThreads
Can't initialize threads for pending calls
PyEval_SaveThread
PyEval_RestoreThread
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Python/ceval.c
_Py_CheckRecursiveCall
Cannot recover from stack overflow.
maximum recursion depth exceeded%s
_PyEval_EvalFrameDefault
local variable '%.200s' referenced before assignment
displayhook
lost sys.displayhook
bad RAISE_VARARGS oparg
'async for' requires an object with __aiter__ method, got %.100s
'async for' received an object from __aiter__ that does not implement __anext__: %.100s
'async for' requires an iterator with __anext__ method, got %.100s
'async for' received an invalid object from __anext__: %.100s
coroutine is being awaited already
popped block is not an except handler
__build_class__ not found
no locals found when storing %R
no locals when deleting %R
name '%.200s' is not defined
no locals when loading %R
Value after * must be an iterable, not %.200s
no locals found when setting up annotations
bad BUILD_CONST_KEY_MAP keys argument
'%.200s' object is not a mapping
catching classes that do not inherit from BaseException is not allowed
no locals found during 'import *'
cannot 'yield from' a coroutine object in a non-coroutine generator
__aenter__
__aexit__
XXX lineno: %d, opcode: %d
unknown opcode
error return without exception set
PyEval_EvalCodeEx: NULL globals
%U() keywords must be strings
%U() got an unexpected keyword argument '%S'
%U() got multiple values for argument '%S'
sys.setprofile
in PyEval_SetProfile
sys.settrace
in PyEval_SetTrace
sys.set_asyncgen_hook_firstiter
sys.set_asyncgen_hook_finalizer
frame does not exist
 object
slice indices must be integers or have an __index__ method
create_gil
PyMUTEX_INIT(gil->mutex) failed
PyMUTEX_INIT(gil->switch_mutex) failed
PyCOND_INIT(gil->cond) failed
PyCOND_INIT(gil->switch_cond) failed
take_gil
PyMUTEX_LOCK(gil->mutex) failed
PyCOND_WAIT(gil->cond) failed
PyMUTEX_UNLOCK(gil->mutex) failed
PyMUTEX_LOCK(gil->switch_mutex) failed
PyCOND_SIGNAL(gil->switch_cond) failed
PyMUTEX_UNLOCK(gil->switch_mutex) failed
destroy_gil
PyCOND_FINI(gil->cond) failed
PyMUTEX_FINI(gil->mutex) failed
PyCOND_FINI(gil->switch_cond) failed
PyMUTEX_FINI(gil->switch_mutex) failed
drop_gil
drop_gil: GIL is not locked
PyCOND_SIGNAL(gil->cond) failed
PyCOND_WAIT(gil->switch_cond) failed
eval_frame_handle_pending
tstate mix-up
orphan tstate
%U() got some positional-only arguments passed as keyword arguments: '%U'
from %zd to %zd
 positional argument%s (and %zd keyword-only argument%s)
%U() takes %U positional argument%s but %zd%U %s given
were
positional
keyword-only
%U and %U
, %U, and %U
%U() missing %i required %s argument%s: %U
No active exception to reraise
calling %R should have returned an instance of BaseException, not %R
exceptions must derive from BaseException
exception causes must derive from BaseException
cannot unpack non-iterable %.200s object
not enough values to unpack (expected %d, got %d)
not enough values to unpack (expected at least %d, got %d)
too many values to unpack (expected %d)
not enough values to unpack (expected at least %d, got %zd)
__import__ not found
%U.%U
<unknown module name>
cannot import name %R from %R (unknown location)
cannot import name %R from partially initialized module %R (most likely due to a circular import) (%S)
cannot import name %R from %R (%S)
__all__
from-import-* object has no __dict__ and no __all__
module __name__ must be a string, not %.100s
%s in %U.%s must be str, not %.100s
Item
%U argument after * must be an iterable, not %.200s
%U argument after ** must be a mapping, not %.200s
%U got multiple values for keyword argument '%S'
free variable '%.200s' referenced before assignment in enclosing scope
'async with' received an object from __aenter__ that does not implement __await__: %.100s
'async with' received an object from __aexit__ that does not implement __await__: %.100s
0123456789abcdef
argument must be callable
no codec search functions registered: can't find encoding
codec search functions must return 4-tuples
unknown encoding: %s
incrementaldecoder
incrementalencoder
_is_text_encoding
'%.400s' is not a text encoding; use %s to handle arbitrary codecs
handler must be callable
unknown error handler name '%.400s'
codec must pass exception instance
(Nn)
(Cn)
string is too large
_Py_normalize_encoding() failed
encoder must return a tuple (object, integer)
%s with '%s' codec failed
decoding
decoder must return a tuple (object,integer)
codecs.encode()
codecs.decode()
don't know how to handle %.200s in error callback
strict_errors
Implements the 'strict' error handling, which raises a UnicodeError on coding errors.
ignore_errors
Implements the 'ignore' error handling, which ignores malformed data and continues.
replace_errors
Implements the 'replace' error handling, which replaces malformed data with a replacement marker.
xmlcharrefreplace_errors
Implements the 'xmlcharrefreplace' error handling, which replaces an unencodable character with the appropriate XML character reference.
backslashreplace_errors
Implements the 'backslashreplace' error handling, which replaces malformed data with a backslashed escape sequence.
namereplace
namereplace_errors
Implements the 'namereplace' error handling, which replaces an unencodable character with a \N{...} escape sequence.
encodings
(On)
CP_UTF8
private identifier too large to be mangled
no symtable
<module>
module kind %d should not be possible
compile.c compiler unit
.<locals>
cannot assign to __debug__
(zO)
compiler_exit_scope
compiler_exit_scope()
compiler_make_closure
lookup %s in %s %d %d
freevars of %s: %s
get_ref_type
unknown scope for %.100s in %.100s(%s)
symbols: %s
locals: %s
globals: %s
keyword argument repeated: %U
'return' outside function
'return' with value in async generator
too many statically nested blocks
invalid node type (%d) for augmented assignment
inplace binary op %d should not be possible
invalid node type (%d) for annotated assignment
"is" with a literal. Did you mean "=="?
"is not" with a literal. Did you mean "!="?
default 'except:' must be last
assertion is always true, perhaps remove parentheses?
__future__
from __future__ imports must occur at the beginning of the file
'break' outside loop
'continue' not properly in loop
'async with' outside async function
'async for' outside async function
'yield' outside function
'yield from' inside async function
'await' outside function
'await' outside async function
starred assignment target must be in a list or tuple
binary op %d should not be possible
unary op %d should not be possible
<lambda>
<genexpr>
asynchronous comprehension outside of an asynchronous function
unknown comprehension type %d
<listcomp>
<setcomp>
<dictcomp>
'%.200s' object is not callable; perhaps you missed a comma?
Unrecognized conversion character %d
'%.200s' object is not subscriptable; perhaps you missed a comma?
%.200s indices must be integers or slices, not %.200s; perhaps you missed a comma?
too many expressions in star-unpacking assignment
multiple starred expressions in assignment
stackdepth
opcode = %d
an instance of Context was expected
an instance of ContextVar was expected
an instance of Token was expected
%R has already been used once
%R was created by a different ContextVar
%R was created in a different Context
Context
ContextVar
Token
Token.MISSING
MISSING
cannot enter context: %R is already entered
cannot exit context: %R has not been entered
cannot exit context: thread state references a different context object
a ContextVar key was expected, got %R
run() missing 1 required positional argument
Context() does not accept any arguments
context variable name must be a str
<ContextVar name=
 default=
 at %p>
reset
expected an instance of Token, got %R
O|$O:ContextVar
<Token
 used
 var=
old_value
Tokens can only be created by ContextVars
<Token.MISSING>
_PyErr_SetObject: exception %R is not a BaseException subclass
maximum recursion depth exceeded while normalizing an exception
_PyErr_NormalizeException
Cannot recover from MemoryErrors while normalizing exceptions.
Cannot recover from the recursive normalization of an exception.
_PyErr_ChainExceptions: exception %R is not a BaseException subclass
bad argument type for built-in operation
_PyErr_NoMemory
Out of memory and PyExc_MemoryError is not initialized yet
Error
(iOOiO)
(iOO)
(iO)
expected a subclass of ImportError
expected a message argument
%s:%d: bad argument to internal function
bad argument to internal function
PyErr_NewException: name must be module.class
_PyErr_Init
failed to initialize UnraisableHookArgs type
sys.unraisablehook argument type must be UnraisableHookArgs
_PyErr_WriteUnraisableMsg
Exception ignored %s
Exception ignored on building sys.unraisablehook arguments
unraisablehook
sys.unraisablehook
Exception ignored in audit hook
Exception ignored in sys.unraisablehook
UnraisableHookArgs
exc_type
Exception type
exc_value
Exception value
exc_traceback
Exception traceback
err_msg
Error message
Object causing the exception
Exception ignored in: 
<object repr() failed>
<exception str() failed>
out of memory
PYTHONINSPECT
PYTHONUNBUFFERED
Unable to decode the command line argument #%i
Python %s
Py_FrozenMain
the __main__ module is not frozen
<stdin>
nested_scopes
division
absolute_import
with_statement
print_function
unicode_literals
barry_as_FLUFL
generator_stop
annotations
braces
not a chance
future feature %.100s is not defined
%.200s() %.200s must be %.50s, not %.50s
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Python/getargs.c
%.200s%s takes at most %d %sargument%s (%zd given)
keyword 
%.200s%s takes no positional arguments
%.200s%s takes %s %d positional argument%s (%zd given)
at most
exactly
at least
%.200s%s missing required argument '%U' (pos %d)
argument for %.200s%s given by name ('%U') and position (%d)
'%S' is an invalid keyword argument for %.200s%s
this function
%.200s expected %s%zd argument%s, got %zd
at least 
unpacked tuple should have %s%zd element%s, but has %zd
at most 
%.200s() takes no positional arguments
%s() takes no keyword arguments
vgetargs1_impl
too many tuple nesting levels in argument format string
excess ')' in getargs format
missing ')' in getargs format
%.200s%s takes no arguments
%.200s%s takes at least one argument
old style getargs format uses new features
%.150s%s takes %s %d argument%s (%zd given)
bad format string: %.200s
must be %d-item sequence, not %.50s
must be sequence of length %d, not %zd
is not retrievable
unsigned byte integer is less than minimum
unsigned byte integer is greater than maximum
signed short integer is less than minimum
signed short integer is greater than maximum
signed integer is greater than maximum
signed integer is less than minimum
a unicode character
PY_SSIZE_T_CLEAN will be required for '#' formats
size does not fit in an int
(unicode conversion error)
str or None
(unknown parser marker combination)
(buffer is NULL)
(encoding failed)
str, bytes or bytearray
(buffer_len is NULL)
encoded string too long (%zd, maximum length %zd)
encoded string without null bytes
(unspecified)
(invalid use of 'w' format character)
read-write bytes-like object
(impossible<bad format char>)
%.100s
must be %.50s, not %.50s
bytes-like object
read-only bytes-like object
%.200s() 
argument %zd
, item %d
 %.256s
new style getargs format but argument is not a tuple
Empty keyword parameter name
Invalid format string (| specified twice)
Invalid format string ($ before |)
Invalid format string ($ specified twice)
Empty parameter name after $
More keyword list entries (%d) than format specifiers (%d)
%.200s%s missing required argument '%s' (pos %d)
%s: '%s'
more argument specifiers than keyword list entries (remaining format:'%s')
argument for %.200s%s given by name ('%s') and position (%d)
'%U' is an invalid keyword argument for %.200s%s
Unmatched left paren in format string
Unmatched right paren in format string
impossible<bad format char>
[Clang 16.0.0 (clang-1600.0.22.7)]
darwin
%.80s (%.80s) %.80s
3.9.6
single_input
file_input
eval_input
decorator
decorators
decorated
async_funcdef
funcdef
parameters
typedargslist
tfpdef
varargslist
vfpdef
simple_stmt
small_stmt
expr_stmt
annassign
testlist_star_expr
augassign
del_stmt
pass_stmt
flow_stmt
break_stmt
continue_stmt
return_stmt
yield_stmt
raise_stmt
import_stmt
import_name
import_from
import_as_name
dotted_as_name
import_as_names
dotted_as_names
dotted_name
global_stmt
nonlocal_stmt
assert_stmt
compound_stmt
async_stmt
if_stmt
while_stmt
for_stmt
try_stmt
with_stmt
with_item
except_clause
suite
namedexpr_test
test_nocond
lambdef
lambdef_nocond
or_test
and_test
not_test
comp_op
star_expr
xor_expr
and_expr
shift_expr
arith_expr
term
factor
power
atom_expr
atom
testlist_comp
trailer
subscriptlist
sliceop
exprlist
testlist
dictorsetmaker
classdef
arglist
comp_iter
sync_comp_for
comp_for
comp_if
encoding_decl
yield_expr
yield_arg
func_body_suite
func_type_input
typelist
hamt
hamt_array_node
hamt_bitmap_node
hamt_collision_node
meta_path
path_importer_cache
path_hooks
_PyImportHooks_Init
initializing sys.meta_path, sys.path_hooks, or path_importer_cache failed
unable to get sys.path_hooks
# installing zipimport hook
zipimport
# can't import zipimport
zipimporter
# can't import zipimport.zipimporter
# installed zipimport hook
_PyImportZip_Init
initializing zipimport failed
_PyImport_ReInitLock
failed to create a new lock
PyImport_GetModuleDict
interpreter has no modules dictionary
# clear builtins._
# clear sys.%s
# restore sys.%s
# cleanup[2] removing %U
# cleanup[3] wiping %U
# cleanup[3] wiping sys
# cleanup[3] wiping builtins
_bootstrap_external
_RAW_MAGIC_NUMBER
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Python/import.c
_get_sourcefile
PyImport_ExecCodeModuleWithPathnames
no current interpreter
_fix_up_module
Excluded frozen object named %R
frozen object %R is not a code object
__path__
_handle_fromlist
Empty module name
module name must be a string
level must be >= 0
%R not in sys.modules as expected
reload
{OO}
OOOOi
check_hash_based_pycs
argv
last_type
last_value
last_traceback
__interactivehook__
__stdin__
__stdout__
__stderr__
import %U # previously loaded (%R)
no import module dictionary
Loaded module %R not found in sys.modules
unable to get sys.modules
_lock_unlock_module
<frozen importlib._bootstrap>
<frozen importlib._bootstrap_external>
_call_with_frames_removed
parent
'__name__' not in globals
package must be a string
__package__ != __spec__.parent
__spec__.parent must be a string
can't resolve package from __spec__ or __package__, falling back on __name__ and __path__
__name__ must be a string
attempted relative import beyond top-level package
attempted relative import with no known parent package
_find_and_load
OOOOO
import time: self [us] | cumulative | imported package
import time: %9ld | %10ld | %*s%s
_imp
extension_suffixes
lock_held
acquire_lock
release_lock
get_frozen_object
is_frozen_package
create_builtin
init_frozen
is_builtin
is_frozen
create_dynamic
exec_dynamic
exec_builtin
_fix_co_filename
source_hash
not holding the import lock
No such frozen object named %R
origin
argument 'source'
spec.name must be a string
dynamic module does not define module export function (%s_%s)
initialization of %s failed without raising an exception
initialization of %s raised unreported exception
init function of %s returned uninitialized object
PyInitU
initialization of * did not return PyModuleDef
initialization of %s did not return an extension module
PyInit
punycode
PyWideStringList_Insert
PyWideStringList_Insert index must be >= 0
PyConfig_SetString
cannot decode string
_PyConfig_Copy
_PyConfig_Write
PyConfig_SetWideStringList
PyConfig_Read
global_config
pre_config
config
Python path configuration:
  PYTHONHOME = 
  PYTHONPATH = 
  program name = 
  isolated = %i
  environment = %i
  user site = %i
  import site = %i
_base_executable
  sys.%s = 
(not set)
base_prefix
base_exec_prefix
platlibdir
executable
prefix
exec_prefix
  sys.path = [
    %A,
config_set_bytes_string
core_read_precmdline
config_init_program_name
PYTHONEXECUTABLE
cannot decode PYTHONEXECUTABLE environment variable
__PYVENV_LAUNCHER__
cannot decode __PYVENV_LAUNCHER__ environment variable
config_parse_cmdline
--check-hash-based-pycs must be one of 'default', 'always', or 'never'
Python %s
Try `python -h' for more information.
<prefix>/lib/pythonX.X
config_run_filename_abspath
config_update_argv
PYTHONWARNINGS
cannot decode PYTHONWARNINGS
cannot decode PLATLIBDIR macro
PYTHONDEBUG
PYTHONVERBOSE
PYTHONOPTIMIZE
PYTHONDONTWRITEBYTECODE
PYTHONNOUSERSITE
PYTHONDUMPREFS
PYTHONPATH
cannot decode PYTHONPATH
PYTHONPLATLIBDIR
cannot decode PYTHONPLATLIBDIR
PYTHONHASHSEED
random
config_init_hash_seed
PYTHONHASHSEED must be "random" or an integer in range [0; 4294967295]
PYTHONFAULTHANDLER
PYTHONPROFILEIMPORTTIME
PYTHONOLDPARSER
PYTHONTRACEMALLOC
config_init_tracemalloc
PYTHONTRACEMALLOC: invalid number of frames
-X tracemalloc=NFRAME: invalid number of frames
config_init_pycache_prefix
PYTHONPYCACHEPREFIX
cannot decode PYTHONPYCACHEPREFIX
HOME
cannot decode HOME
PYTHONHOME
cannot decode PYTHONHOME
cannot decode _Py_StandardStreamEncoding
cannot decode _Py_StandardStreamErrors
PYTHONIOENCODING
config_init_stdio_encoding
cannot decode PYTHONIOENCODING environment variable
config_get_locale_encoding
failed to get the locale encoding: nl_langinfo(CODESET) failed
cannot decode nl_langinfo(CODESET)
POSIX
Py_FileSystemDefaultEncoding
Py_HasFileSystemDefaultEncoding
Py_FileSystemDefaultEncodeErrors
_Py_HasFileSystemDefaultEncodeErrors
Py_UTF8Mode
Py_DebugFlag
Py_VerboseFlag
Py_QuietFlag
Py_InteractiveFlag
Py_InspectFlag
Py_OptimizeFlag
Py_NoSiteFlag
Py_BytesWarningFlag
Py_FrozenFlag
Py_IgnoreEnvironmentFlag
Py_DontWriteBytecodeFlag
Py_NoUserSiteDirectory
Py_UnbufferedStdioFlag
Py_HashRandomizationFlag
Py_IsolatedFlag
_config_init
isolated
use_environment
dev_mode
_use_peg_parser
install_signal_handlers
use_hash_seed
hash_seed
faulthandler
tracemalloc
import_time
show_ref_count
dump_refs
malloc_stats
pycache_prefix
program_name
parse_argv
xoptions
warnoptions
pythonpath_env
home
module_search_paths
base_executable
site_import
bytes_warning
inspect
interactive
optimization_level
parser_debug
write_bytecode
verbose
quiet
user_site_directory
configure_c_stdio
buffered_stdio
stdio_errors
skip_source_first_line
run_command
run_module
run_filename
_install_importlib
check_hash_pycs_mode
pathconfig_warnings
_init_main
_isolated_interpreter
_orig_argv
\x%02x
\u%04x
unmarshallable object
object too deeply nested to marshal
too many objects
utf8
marshal data too short
readinto
read() returned too much data: %zd bytes requested, %zd returned
EOF read where not expected
EOF read where object expected
recursion limit exceeded
bad marshal data (bytes object size out of range)
bad marshal data (string size out of range)
bad marshal data (tuple size out of range)
NULL object in marshal data for tuple
bad marshal data (list size out of range)
NULL object in marshal data for list
bad marshal data (set size out of range)
NULL object in marshal data for set
bad marshal data (invalid reference)
bad marshal data (unknown type code)
bad marshal data (long size out of range)
bad marshal data (unnormalized long data)
bad marshal data (digit out of range in long)
bad marshal data (index list too large)
marshal
dump
load
dumps
loads
read
file.read() returned not bytes but %.100s
XXX readobject called with exception set
NULL object in marshal data for object
argument should be integer or None, not '%.200s'
PyModule_AddObject() needs module as first arg
PyModule_AddObject() needs non-NULL value
module '%s' has no __dict__
unmatched paren in format
string too long for Python string
string too long for Python bytes
NULL object passed to Py_BuildValue
bad format char passed to Py_BuildValue
Unmatched paren in format
Bad dict format
_PyConfig_InitPathConfig
Py_SetPath
Py_SetPythonHome
Py_SetProgramName
_Py_SetProgramFullPath
_Py_FindEnvConfigValue
pathconfig_set_from_config
config_calculate_pathconfig
pathconfig_copy
config_init_module_search_paths
out of memory
too many constants
_PyArgv_AsWstrList
cannot decode command line arguments
PYTHONDEVMODE
configure_locale
coerce_c_locale
coerce_c_locale_warn
utf8_mode
allocator
_PyPreConfig_Read
failed to LC_CTYPE locale
Encoding changed twice while reading the configuration
_PyPreConfig_Write
Unknown PYTHONMALLOC allocator
PYTHONCOERCECLOCALE
preconfig_init_utf8_mode
invalid -X utf8 option value
PYTHONUTF8
invalid PYTHONUTF8 environment variable value
PYTHONMALLOC
preconfig_init_allocator
PYTHONMALLOC: unknown allocator
siphash24
LC_ALL
_Py_PreInitializeFromPyArgv
preinitialization config is NULL
Py_InitializeFromConfig
initialization config is NULL
Py_EndInterpreter
thread is not current
thread still has a frame
not the last thread
Fatal Python error: 
Py_ExitStatusException() must not be called on success
C.UTF-8
C.utf8
UTF-8
LC_CTYPE
Error setting LC_CTYPE, skipping C locale coercion
pyinit_main
runtime core not initialized
_Py_ReconfigureMainInterpreter
fail to set sys.argv
init_interp_main
can't initialize time
can't finish initializing sys
can't initialize signals
can't initialize tracemalloc
'import warnings' failed; traceback:
_install_external_importers
init_importlib_external
external importer setup failed
init_sys_streams
<stdin> is a directory, cannot continue
encodings.utf_8
encodings.latin_1
<stdout>
<stderr>
can't initialize sys standard streams
TextIOWrapper
isiOOOO
OOOsOO
OpenWrapper
init_set_builtins_open
can't initialize io.open
add_main_module
can't create __main__ module
Failed to initialize __main__.__annotations__
Failed to retrieve builtins module
Failed to initialize __main__.__builtins__
BuiltinImporter
Failed to retrieve BuiltinImporter
Failed to initialize __main__.__loader__
site
init_import_site
Failed to import the site module
Python runtime initialized with LC_CTYPE=C (a locale with default ASCII encoding), which may cause Unicode compatibility problems. Using C.UTF-8, C.utf8, or UTF-8 (if available) as alternative Unicode-compatible locales is recommended.
pycore_init_runtime
main interpreter already initialized
pycore_create_interpreter
can't make main interpreter
can't make first thread
pycore_init_types
can't init longs
can't init float
can't initialize structseq
can't init context
pycore_init_builtins
can't initialize builtins module
_frozen_importlib
init_importlib
can't import _frozen_importlib
import _frozen_importlib # frozen
couldn't get _frozen_importlib from sys.modules
can't import _imp
import _imp # builtin
can't save _imp to sys.modules
_install
importlib install failed
pyinit_core_reconfigure
failed to read thread state
new_interpreter
Py_Initialize must be called first
<message not set>
Python runtime state: 
finalizing (tstate=%p)
initialized
core initialized
preinitialized
preinitializing
_shutdown
threading
_PyRuntimeState_ReInitThreads
Can't initialize lock for runtime interpreters
Can't initialize ID lock for main interpreter
Can't initialize lock for cross-interpreter data registry
_PyInterpreterState_Enable
Can't initialize threads for interpreter
cpython.PyInterpreterState_New
failed to get an interpreter ID
cpython.PyInterpreterState_Clear
PyInterpreterState_Delete
NULL interpreter
remaining threads
remaining subinterpreters
_PyInterpreterState_DeleteExceptMain
not main interpreter
missing main interpreter
PyInterpreterState_Get
no interpreter provided
unrecognized interpreter ID %lld
failed to create init interpreter ID mutex
interpreter not initialized
PyState_AddModule called on module with slots
PyState_AddModule
module definition is NULL
module %p already added
PyState_RemoveModule called on module with slots
PyState_RemoveModule
invalid module index
Interpreters module-list not accessible.
Module index out of bounds.
PyThreadState_Clear: warning: thread still has a frame
PyThreadState_Clear: warning: thread still has a generator
_PyThreadState_DeleteCurrent
PyThreadState_Get
sys._current_frames
_PyGILState_Init
_PyGILState_Reinit
Could not allocate TSS entry
Couldn't create autoTSSkey mapping
PyGILState_Ensure
Couldn't create thread-state for new thread
PyGILState_Release
auto-releasing thread-state, but no thread-state for this thread
thread state %p must be current when releasing
only classes may be registered
missing 'getdata' func
_PyRuntimeState_Init_impl
Can't initialize threads for cross-interpreter data registry
_PyThreadState_Delete
tstate %p is still current
tstate_delete_common
_PyGILState_NoteThreadState
%S does not support cross-interpreter data
missing interp
missing new_object func
_register_builtins_for_crossinterpreter_data
could not register None for cross-interpreter sharing
could not register int for cross-interpreter sharing
could not register bytes for cross-interpreter sharing
could not register str for cross-interpreter sharing
try sending as bytes
>>> 
... 
%s() arg 1 must be a %s object
source code string cannot contain null bytes
__cached__
python: Can't reopen .pyc file
SourcelessFileLoader
python: failed to set __main__.__loader__
SourceFileLoader
.pyc
Bad magic number in .pyc file
Bad code object in .pyc file
sys.excepthook
OOOO
in audit hook
Error in sys.excepthook:
Original exception was:
sys.excepthook is missing
excepthook
TypeError: print_exception(): Exception expected for value, 
 found
  File "%S", line %zd
: <exception str() failed>
    
expression too long
unknown decode error
error=%d
(OO)
(sO)
Invalid value NaN (not a number)
expect int, got %s
_PyTime_GetSystemClock
pygettimeofday() failed
_PyTime_GetMonotonicClock
pymonotonic() failed
_PyTime_GetPerfCounter
_PyTime_GetPerfCounterWithInfo() failed
timestamp out of range for platform time_t
timestamp too large to convert to C _PyTime_t
clock_gettime(CLOCK_REALTIME)
invalid mach_timebase_info
mach_timebase_info is too large
mach_absolute_time()
_Py_HashRandomization_Init
failed to get random numbers to initialize Python
negative argument not allowed
/dev/urandom
/dev/urandom (or equivalent) not found
Failed to read %zi bytes from /dev/urandom
bad memberdescr type
readonly attribute
can't delete numeric/char attribute
attribute value type must be bool
Truncation of value to char
Truncation of value to unsigned char
Truncation of value to short
Truncation of value to unsigned short
Truncation of value to int
Writing negative value into unsigned field
Truncation of value to unsigned int
bad memberdescr type for %s
symtable entry
this compiler does not handle FunctionTypes
symtable analysis recursion depth mismatch (before=%d, after=%d)
unknown symbol table entry
<symtable entry %U(%ld), line %d>
symbols
varnames
children
nested
name '%U' is nonlocal and global
nonlocal declaration not allowed at module level
no binding for nonlocal '%U' found
BUG: internal directive bookkeeping broken
maximum recursion depth exceeded during compilation
annotated name '%U' can't be global
annotated name '%U' can't be nonlocal
name '%U' is parameter and global
name '%U' is used prior to global declaration
name '%U' is assigned to before global declaration
name '%U' is parameter and nonlocal
name '%U' is used prior to nonlocal declaration
name '%U' is assigned to before nonlocal declaration
duplicate argument '%U' in function definition
comprehension inner loop cannot rebind assignment expression target '%U'
import * only allowed at module level
(Nii)
assignment expression cannot be used in a comprehension iterable expression
assignment expression cannot rebind comprehension iteration variable '%U'
assignment expression within a comprehension cannot be used in a class body
genexpr
'yield' inside list comprehension
'yield' inside set comprehension
'yield' inside dict comprehension
'yield' inside generator expression
listcomp
setcomp
dictcomp
# clear sys.audit hooks
cpython._PySys_ClearAuditHooks
sys.addaudithook
Type %.100s doesn't define __sizeof__
__sizeof__() should return >= 0
cpython
cpython-39
_xoptions
dont_write_bytecode
_PySys_Create
failed to create a module object
modules
can't initialize sys module
PySys_SetPath
can't create sys.path
can't assign sys.path
PySys_SetArgvEx
no mem for sys.argv
can't assign sys.argv
can't compute path0 from argv
can't prepend path0 to sys.path
__cantrace__
addaudithook
audit
_clear_type_cache
_current_frames
exc_info
exit
getdefaultencoding
getdlopenflags
getallocatedblocks
getfilesystemencoding
getfilesystemencodeerrors
getrefcount
getrecursionlimit
getsizeof
_getframe
intern
is_finalizing
setswitchinterval
getswitchinterval
setdlopenflags
setprofile
getprofile
setrecursionlimit
settrace
gettrace
call_tracing
_debugmallocstats
set_coroutine_origin_tracking_depth
get_coroutine_origin_tracking_depth
set_asyncgen_hooks
get_asyncgen_hooks
hook
sys_audit
audit() missing 1 required positional argument: 'event'
expected str for argument 'event'
expected str for argument 'event', not %.200s
PYTHONBREAKPOINT
pdb.set_trace
Ignoring unimportable $PYTHONBREAKPOINT: "%s"
lost builtins module
buffer
(OOO)
O|O:getsizeof
sys._getframe
call stack is not deep enough
can't intern %.400s
switch interval must be strictly positive
call
exception
line
c_call
c_exception
c_return
opcode
recursion limit must be greater or equal than 1
cannot set the recursion limit to %i at the recursion depth %i: the limit is too low
depth
depth must be >= 0
firstiter
finalizer
callable finalizer expected, got %.50s
callable firstiter expected, got %.50s
_PySys_SetPreliminaryStderr
can't set preliminary stderr
__displayhook__
__excepthook__
__breakpointhook__
__unraisablehook__
hexversion
(szz)
CPython
_git
Python3
_framework
api_version
copyright
platform
maxsize
float_info
int_info
hash_info
maxunicode
builtin_module_names
abiflags
version_info
implementation
short
float_repr_style
thread_info
_PySys_InitCore
failed to initialize a type
sys.hash_info
width
width of the type used for hashing, in bits
modulus
prime number giving the modulus on which the hash function is based
value to be used for hash of a positive infinity
value to be used for hash of a nan
multiplier used for the imaginary part of a complex number
algorithm
name of the algorithm for hashing of str, bytes and memoryviews
hash_bits
internal output size of hash algorithm
seed_bits
seed size of hash algorithm
cutoff
small string optimization cutoff
sys.version_info
major
Major release number
minor
Minor release number
micro
Patch release number
releaselevel
'alpha', 'beta', 'candidate', or 'final'
serial
Serial release number
final
cache_tag
_multiarch
sys.flags
-O or -OO
no_user_site
no_site
ignore_environment
hash_randomization
-X dev
-X utf8
asyncgen_hooks
Hook to intercept first iteration
Hook to intercept finalization
... truncated
%s: %s
pthread_mutex_init
pthread_cond_init
pthread_cond_destroy
pthread_mutex_destroy
pthread_mutex_trylock[1]
pthread_mutex_lock[1]
pthread_cond_timedwait
pthread_cond_wait
pthread_mutex_unlock[1]
pthread_mutex_lock[3]
pthread_cond_signal
pthread_mutex_unlock[3]
pthread
mutex+cond
sys.thread_info
name of the thread implementation
lock
name of the lock implementation
name and version of the thread library
traceback
          
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Python/traceback.c
tracebacklimit
Traceback (most recent call last):
unable to get the interpreter state
unable to get the thread head state
[ssss]
tb_frame
tb_next
tb_lasti
tb_lineno
can't delete tb_next attribute
expected traceback object, got '%s'
traceback loop detected
TracebackType
argument 'tb_frame'
expected traceback object or None, got '%s'
  [Previous line repeated %ld more times]
  [Previous line repeated %ld more time]
  File "%U", line %d, in %U
Stack (most recent call first):
<no Python frame>
  ...
  File 
, line 
Current thread 0x
Thread 0x
 (most recent call first):
expected long option
unknown option %ls
Argument expected for the %ls options
-J is reserved for Jython
Unknown option: -%c
Argument expected for the -%c option
could not convert string to float: '%.200s'
value too large to convert to float: '%.200s'
could not convert string to %s: %R
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Python/pystrtod.c
%+.02d
sep must be length 1.
sep must be ASCII.
sep must be str or bytes.
Format specifier missing precision
Invalid format specifier
Cannot specify both ',' and '_'.
Cannot specify '%c' with '%c'.
Cannot specify '%c' with '\x%x'.
Space not allowed in string format specifier
Sign not allowed in string format specifier
Alternate form (#) not allowed in string format specifier
'=' alignment not allowed in string format specifier
Unknown format code '%c' for object of type '%.200s'
Unknown format code '\x%x' for object of type '%.200s'
Precision not allowed in integer format specifier
Sign not allowed with integer format specifier 'c'
Alternate form (#) not allowed with integer format specifier 'c'
non-ascii grouped digit
Zero padding is not allowed in complex format specifier
'=' alignment flag is not allowed in complex format specifier
failed to get LC_CTYPE locale
decoding error
.cpython-39-darwin.so
.abi3.so
./%-.255s
%.20s_%.200s
unknown dlopen() error
posix
_sre
_codecs
_weakref
_functools
_operator
_collections
_abc
itertools
atexit
_signal
_stat
time
_thread
_locale
_tracemalloc
_peg_parser
_symtable
xxsubtype
PATH
calculate_init
cannot decode PATH environment variable
cannot decode PYTHONPATH macro
/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9
cannot decode PREFIX macro
cannot decode EXEC_PREFIX macro
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python
cannot decode VPATH macro
python3.9
cannot decode VERSION macro
Consider setting $PYTHONHOME to <prefix>[:<exec_prefix>]
calculate_program_impl
calculate_program_macos
cannot decode executable path
calculate_which
absolutize
copy_absolute
path configuration: path too long
joinpath
calculate_argv0_path
_Py_Initialize
calculate_argv0_path_framework
cannot decode framework location
ismodule
resolve_symlinks
maximum number of symbolic links reached
calculate_open_pyenv
Could not find platform independent libraries <prefix>
calculate_prefix
search_for_prefix
calculate_zip_path
Could not find platform dependent libraries <exec_prefix>
calculate_exec_prefix
search_for_exec_prefix
calculate_pybuilddir
cannot decode pybuilddir.txt
calculate_module_search_path
calculate_set_prefix
calculate_set_exec_prefix
Failed checking if argv[0] is an import path entry
unable to get sys.path
Python %s on %s
Type "help", "copyright", "credits" or "license" for more information.
cpython.run_command
Unable to decode the command from the command line:
cpython.run_module
runpy
Could not import runpy module
_run_module_as_main
Could not access runpy._run_module_as_main
Could not convert module name to unicode
Could not create arguments for runpy._run_module_as_main
cpython.run_file
<unprintable file name>
%ls: can't open file '%s': [Errno %d] %s
%ls: '%ls' is a directory, cannot continue
<filename encoding error>
cpython.run_stdin
PYTHONSTARTUP
cpython.run_startup
Could not open PYTHONSTARTUP
cpython.run_interactivehook
Failed calling sys.__interactivehook__
signal
_PyGC_Init
garbage
callbacks
DEBUG_STATS
DEBUG_COLLECTABLE
DEBUG_UNCOLLECTABLE
DEBUG_SAVEALL
DEBUG_LEAK
gc: %zd uncollectable objects at shutdown
gc: %zd uncollectable objects at shutdown; use gc.set_debug(gc.DEBUG_UNCOLLECTABLE) to list them
      %s
object already tracked by the garbage collector
/AppleInternal/Library/BuildRoots/6eda5a34-3946-11ef-a2f8-a2cee5656455/Library/Caches/com.apple.xbs/Sources/python3/Python/Modules/gcmodule.c
PyObject_GC_Track
enable
disable
isenabled
set_debug
get_debug
get_count
set_threshold
get_threshold
collect
get_objects
get_stats
is_tracked
is_finalized
get_referrers
get_referents
freeze
unfreeze
get_freeze_count
(iii)
i|ii:set_threshold
generation
invalid generation
gc.get_objects
generation parameter must be less than the number of available generations (%i)
generation parameter cannot be negative
{snsnsn}
collections
collected
uncollectable
gc.get_referrers
gc.get_referents
{sisnsn}
gc: collecting generation %d...
collectable
gc: done, %zd unreachable, %zd uncollectable, %.4fs elapsed
in garbage collection
 %zd
gc: objects in each generation:%s
gc: objects in permanent generation: %zd
gc: %s <%s %p>
in tp_clear of
PyOS_AfterFork_Parent
failed releasing import lock after fork
uid should be integer, not %.200s
uid is less than minimum
uid is greater than maximum
gid should be integer, not %.200s
gid is less than minimum
gid is greater than maximum
signal number %ld out of range
expected str, bytes or os.PathLike object, not %.200s
expected %.200s.__fspath__() to return str or bytes, not %.200s
__fspath__
stat
access
ttyname
chdir
chflags
chmod
fchmod
lchmod
chown
fchown
lchown
lchflags
chroot
ctermid
getcwd
getcwdb
link
listdir
lstat
mkdir
nice
getpriority
setpriority
posix_spawn
posix_spawnp
readlink
rename
rmdir
symlink
system
umask
uname
unlink
utime
times
_exit
_fcopyfile
execv
execve
fork
register_at_fork
sched_get_priority_max
sched_get_priority_min
sched_yield
openpty
forkpty
getegid
geteuid
getgid
getgrouplist
getgroups
getpid
getpgrp
getppid
getuid
getlogin
kill
killpg
setuid
seteuid
setreuid
setgid
setegid
setregid
setgroups
initgroups
getpgid
setpgrp
wait
wait3
wait4
waitpid
getsid
setsid
setpgid
tcgetpgrp
tcsetpgrp
closerange
device_encoding
dup2
lockf
lseek
readv
pread
preadv
writev
pwrite
pwritev
sendfile
fstat
pipe
mkfifo
mknod
makedev
ftruncate
truncate
putenv
unsetenv
fchdir
fsync
sync
WCOREDUMP
WIFCONTINUED
WIFSTOPPED
WIFSIGNALED
WIFEXITED
WEXITSTATUS
WTERMSIG
WSTOPSIG
fstatvfs
statvfs
confstr
sysconf
fpathconf
pathconf
abort
getloadavg
urandom
get_terminal_size
cpu_count
get_inheritable
set_inheritable
get_blocking
set_blocking
scandir
fspath
waitstatus_to_exitcode
dir_fd
follow_symlinks
%s%s%s should be %s, not %.200s
string, bytes, os.PathLike, integer or None
string, bytes, os.PathLike or integer
string, bytes, os.PathLike or None
string, bytes or os.PathLike
%s%sembedded null character in %s
fd is greater than maximum
fd is less than minimum
argument should be integer or None, not %.200s
%s: can't specify dir_fd without matching path
%s: can't specify both dir_fd and fd
%s: cannot use fd and follow_symlinks together
%s%s%s unavailable on this platform
effective_ids
os.chdir
argument 'flags'
os.chflags
os.chmod
%s: cannot use dir_fd and follow_symlinks together
os.chown
OIIi
iIIi
src_dir_fd
dst_dir_fd
link: src and dst must be the same type
os.link
OOii
os.listdir
os.mkdir
which
priority
file_actions
setpgroup
resetids
setsigmask
setsigdef
scheduler
%s: argv must be a tuple or list
%s: argv must not be empty
%s: environment must be a mapping object
%s: argv first element cannot be empty
os.posix_spawn
env.keys() or env.values() is not a list
illegal environment variable name
%s=%s
file_actions must be a sequence or None
Each file_actions element must be a non-empty tuple
OiO&ik;A open file_action tuple must have 5 elements
Oi;A close file_action tuple must have 2 elements
Oii;A dup2 file_action tuple must have 3 elements
Unknown file_actions identifier
The scheduler option is not supported in this system.
os.rename
%s: src and dst must be the same type
os.rmdir
target_is_directory
os.symlink
symlink: src and dst must be the same type
command
os.system
os.remove
utime: you may specify either 'times' or 'ns' but not both
utime: 'times' must be either a tuple of two ints or None
utime: 'ns' must be a tuple of two ints
os.utime
OOOi
%.200s.__divmod__() must return a 2-tuple, not %.200s
status
execv() arg 2 must be a tuple or list
execv() arg 2 must not be empty
execv() arg 2 first element cannot be empty
os.exec
execve: argv must be a tuple or list
execve: argv must not be empty
execve: environment must be a mapping object
execve: argv first element cannot be empty
fork not supported for isolated subinterpreters
os.fork
before
after_in_child
after_in_parent
At least one argument is required.
'%s' must be callable, not %s
policy
(ii)
fork not supported for subinterpreters
os.forkpty
(Ni)
unable to determine login name
in:kill
os.kill
ii:killpg
os.killpg
setgroups argument must be a sequence
too many groups
groups must be integers
i:getpgid
options
resource
ii:wait4
ii:waitpid
i:getsid
ii:setpgid
ii:tcsetpgrp
inheritable
os.lockf
readv() arg 2 must be a sequence
preadv2() arg 2 must be a sequence
preadv2
writev() arg 2 must be a sequence
pwritev() arg 2 must be a sequence
pwritev2
out_fd
in_fd
headers
trailers
sendfile() headers must be a sequence
sendfile() header is too large
sendfile() trailers must be a sequence
sendfile() trailer is too large
device
os.truncate
os.putenv
os.unsetenv
strerror() argument out of range
configuration names must be strings or integers
unrecognized configuration name
CS_PATH
CS_XBS5_ILP32_OFF32_CFLAGS
CS_XBS5_ILP32_OFF32_LDFLAGS
CS_XBS5_ILP32_OFF32_LIBS
CS_XBS5_ILP32_OFF32_LINTFLAGS
CS_XBS5_ILP32_OFFBIG_CFLAGS
CS_XBS5_ILP32_OFFBIG_LDFLAGS
CS_XBS5_ILP32_OFFBIG_LIBS
CS_XBS5_ILP32_OFFBIG_LINTFLAGS
CS_XBS5_LP64_OFF64_CFLAGS
CS_XBS5_LP64_OFF64_LDFLAGS
CS_XBS5_LP64_OFF64_LIBS
CS_XBS5_LP64_OFF64_LINTFLAGS
CS_XBS5_LPBIG_OFFBIG_CFLAGS
CS_XBS5_LPBIG_OFFBIG_LDFLAGS
CS_XBS5_LPBIG_OFFBIG_LIBS
CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
SC_2_CHAR_TERM
SC_2_C_BIND
SC_2_C_DEV
SC_2_FORT_DEV
SC_2_FORT_RUN
SC_2_LOCALEDEF
SC_2_SW_DEV
SC_2_UPE
SC_2_VERSION
SC_AIO_LISTIO_MAX
SC_AIO_MAX
SC_AIO_PRIO_DELTA_MAX
SC_ARG_MAX
SC_ASYNCHRONOUS_IO
SC_ATEXIT_MAX
SC_BC_BASE_MAX
SC_BC_DIM_MAX
SC_BC_SCALE_MAX
SC_BC_STRING_MAX
SC_CHILD_MAX
SC_CLK_TCK
SC_COLL_WEIGHTS_MAX
SC_DELAYTIMER_MAX
SC_EXPR_NEST_MAX
SC_FSYNC
SC_GETGR_R_SIZE_MAX
SC_GETPW_R_SIZE_MAX
SC_IOV_MAX
SC_JOB_CONTROL
SC_LINE_MAX
SC_LOGIN_NAME_MAX
SC_MAPPED_FILES
SC_MEMLOCK
SC_MEMLOCK_RANGE
SC_MEMORY_PROTECTION
SC_MESSAGE_PASSING
SC_MQ_OPEN_MAX
SC_MQ_PRIO_MAX
SC_NGROUPS_MAX
SC_NPROCESSORS_CONF
SC_NPROCESSORS_ONLN
SC_OPEN_MAX
SC_PAGESIZE
SC_PAGE_SIZE
SC_PASS_MAX
SC_PHYS_PAGES
SC_PRIORITIZED_IO
SC_PRIORITY_SCHEDULING
SC_REALTIME_SIGNALS
SC_RE_DUP_MAX
SC_RTSIG_MAX
SC_SAVED_IDS
SC_SEMAPHORES
SC_SEM_NSEMS_MAX
SC_SEM_VALUE_MAX
SC_SHARED_MEMORY_OBJECTS
SC_SIGQUEUE_MAX
SC_STREAM_MAX
SC_SYNCHRONIZED_IO
SC_THREADS
SC_THREAD_ATTR_STACKADDR
SC_THREAD_ATTR_STACKSIZE
SC_THREAD_DESTRUCTOR_ITERATIONS
SC_THREAD_KEYS_MAX
SC_THREAD_PRIORITY_SCHEDULING
SC_THREAD_PRIO_INHERIT
SC_THREAD_PRIO_PROTECT
SC_THREAD_PROCESS_SHARED
SC_THREAD_SAFE_FUNCTIONS
SC_THREAD_STACK_MIN
SC_THREAD_THREADS_MAX
SC_TIMERS
SC_TIMER_MAX
SC_TTY_NAME_MAX
SC_TZNAME_MAX
SC_VERSION
SC_XBS5_ILP32_OFF32
SC_XBS5_ILP32_OFFBIG
SC_XBS5_LP64_OFF64
SC_XBS5_LPBIG_OFFBIG
SC_XOPEN_CRYPT
SC_XOPEN_ENH_I18N
SC_XOPEN_LEGACY
SC_XOPEN_REALTIME
SC_XOPEN_REALTIME_THREADS
SC_XOPEN_SHM
SC_XOPEN_UNIX
SC_XOPEN_VERSION
SC_XOPEN_XCU_VERSION
PC_ASYNC_IO
PC_CHOWN_RESTRICTED
PC_FILESIZEBITS
PC_LINK_MAX
PC_MAX_CANON
PC_MAX_INPUT
PC_NAME_MAX
PC_NO_TRUNC
PC_PATH_MAX
PC_PIPE_BUF
PC_PRIO_IO
PC_SYNC_IO
PC_VDISABLE
PC_MIN_HOLE_SIZE
PC_ALLOC_SIZE_MIN
PC_REC_INCR_XFER_SIZE
PC_REC_MAX_XFER_SIZE
PC_REC_MIN_XFER_SIZE
PC_REC_XFER_ALIGN
PC_SYMLINK_MAX
Load averages are unobtainable
os.scandir
process stopped by delivery of signal %i
invalid wait status: %i
environ
os.stat_result
stat_result
os.statvfs_result
statvfs_result
terminal_size
DirEntry
posix.times_result
times_result
uname_result
struct_rusage
st_mode
_have_functions
F_OK
R_OK
W_OK
X_OK
NGROUPS_MAX
TMP_MAX
WCONTINUED
WNOHANG
WUNTRACED
O_RDONLY
O_WRONLY
O_RDWR
O_NDELAY
O_NONBLOCK
O_APPEND
O_DSYNC
O_SYNC
O_NOCTTY
O_CREAT
O_EXCL
O_TRUNC
O_SHLOCK
O_EXLOCK
O_EXEC
O_SEARCH
PRIO_PROCESS
PRIO_PGRP
PRIO_USER
O_CLOEXEC
O_ACCMODE
SEEK_HOLE
SEEK_DATA
O_ASYNC
O_DIRECTORY
O_NOFOLLOW
EX_OK
EX_USAGE
EX_DATAERR
EX_NOINPUT
EX_NOUSER
EX_NOHOST
EX_UNAVAILABLE
EX_SOFTWARE
EX_OSERR
EX_OSFILE
EX_CANTCREAT
EX_IOERR
EX_TEMPFAIL
EX_PROTOCOL
EX_NOPERM
EX_CONFIG
ST_RDONLY
ST_NOSUID
P_PID
P_PGID
P_ALL
WEXITED
WNOWAIT
WSTOPPED
CLD_EXITED
CLD_KILLED
CLD_DUMPED
CLD_TRAPPED
CLD_STOPPED
CLD_CONTINUED
F_LOCK
F_TLOCK
F_ULOCK
F_TEST
POSIX_SPAWN_OPEN
POSIX_SPAWN_CLOSE
POSIX_SPAWN_DUP2
SCHED_OTHER
SCHED_FIFO
SCHED_RR
RTLD_LAZY
RTLD_NOW
RTLD_GLOBAL
RTLD_LOCAL
RTLD_NODELETE
RTLD_NOLOAD
_COPYFILE_DATA
pathconf_names
confstr_names
sysconf_names
protection bits
st_ino
inode
st_dev
st_nlink
number of hard links
st_uid
user ID of owner
st_gid
group ID of owner
st_size
total size, in bytes
integer time of last access
integer time of last modification
integer time of last change
st_atime
time of last access
st_mtime
time of last modification
st_ctime
time of last change
st_atime_ns
time of last access in nanoseconds
st_mtime_ns
time of last modification in nanoseconds
st_ctime_ns
time of last change in nanoseconds
st_blksize
blocksize for filesystem I/O
st_blocks
number of blocks allocated
st_rdev
device type (if inode device)
st_flags
user defined flags for file
st_gen
generation number
st_birthtime
time of creation
f_bsize
f_frsize
f_blocks
f_bfree
f_bavail
f_files
f_ffree
f_favail
f_flag
f_namemax
f_fsid
os.terminal_size
columns
width of the terminal window in characters
lines
height of the terminal window in characters
posix.ScandirIterator
unclosed scandir iterator %R
posix.DirEntry
<DirEntry %R>
is_dir
is_file
is_symlink
|$p:is_dir
|$p:is_file
:is_symlink
|$p:stat
the entry's base filename, relative to scandir() "path" argument
the entry's full path name; equivalent to os.path.join(scandir_path, entry.name)
user
user time
system time
children_user
user time of children
children_system
system time of children
elapsed
elapsed time since an arbitrary point in the past
posix.uname_result
sysname
operating system name
nodename
name of machine on network (implementation-defined)
operating system release
operating system version
machine
hardware identifier
HAVE_FACCESSAT
HAVE_FCHDIR
HAVE_FCHMOD
HAVE_FCHMODAT
HAVE_FCHOWN
HAVE_FCHOWNAT
HAVE_FDOPENDIR
HAVE_FPATHCONF
HAVE_FSTATAT
HAVE_FSTATVFS
HAVE_FTRUNCATE
HAVE_FUTIMENS
HAVE_FUTIMES
HAVE_LINKAT
HAVE_LCHFLAGS
HAVE_LCHMOD
HAVE_LCHOWN
HAVE_LSTAT
HAVE_LUTIMES
HAVE_MKDIRAT
HAVE_OPENAT
HAVE_READLINKAT
HAVE_RENAMEAT
HAVE_SYMLINKAT
HAVE_UNLINKAT
HAVE_UTIMENSAT
errorcode
ENODEV
EHOSTUNREACH
ENOMSG
ENODATA
ENOTBLK
ENOSYS
EPIPE
EINVAL
EOVERFLOW
EINTR
EUSERS
ENOTEMPTY
ENOBUFS
EPROTO
EREMOTE
ECHILD
ELOOP
EXDEV
E2BIG
ESRCH
EMSGSIZE
EAFNOSUPPORT
EHOSTDOWN
EPFNOSUPPORT
ENOPROTOOPT
EBUSY
EWOULDBLOCK
EISCONN
ESHUTDOWN
EBADF
EMULTIHOP
EPROTOTYPE
ENOSPC
ENOEXEC
EALREADY
ENETDOWN
EACCES
EILSEQ
ENOTDIR
EPERM
EDOM
ECONNREFUSED
EISDIR
EPROTONOSUPPORT
EROFS
EADDRNOTAVAIL
EIDRM
EBADMSG
ENFILE
ESPIPE
ENOLINK
ENETRESET
ETIMEDOUT
ENOENT
EEXIST
EDQUOT
ENOSTR
EFAULT
EFBIG
EDEADLK
ENOTCONN
EDESTADDRREQ
ENOLCK
ECONNABORTED
ENETUNREACH
ESTALE
ENOSR
ENOMEM
ENOTSOCK
EMLINK
ERANGE
ECONNRESET
EADDRINUSE
EOPNOTSUPP
EAGAIN
ENAMETOOLONG
ENOTTY
ESOCKTNOSUPPORT
ETIME
ETOOMANYREFS
EMFILE
ETXTBSY
EINPROGRESS
ENXIO
ECANCELED
EOWNERDEAD
ENOTRECOVERABLE
ENOTSUP
EAUTH
EBADARCH
EBADEXEC
EBADMACHO
EBADRPC
EDEVERR
EFTYPE
ENEEDAUTH
ENOATTR
ENOPOLICY
EPROCLIM
EPROCUNAVAIL
EPROGMISMATCH
EPROGUNAVAIL
EPWROFF
ERPCMISMATCH
ESHLIBVERS
struct_passwd
getpwuid
getpwnam
getpwall
getpwuid(): uid not found
getpwuid(): uid not found: %S
getpwnam(): name not found: %R
pwd.struct_passwd
pw_name
user name
pw_passwd
password
pw_uid
user id
pw_gid
group id
pw_gecos
real name
pw_dir
home directory
pw_shell
shell program
MAGIC
CODESIZE
MAXREPEAT
MAXGROUPS
re.Pattern
re.TEMPLATE
re.IGNORECASE
re.LOCALE
re.MULTILINE
re.DOTALL
re.UNICODE
re.VERBOSE
re.DEBUG
re.ASCII
0x%x
re.compile(%.200R, %S)
re.compile(%.200R)
fullmatch
search
subn
findall
finditer
scanner
__copy__
__deepcopy__
string
endpos
cannot use a string pattern on a bytes-like object
cannot use a bytes pattern on a string-like object
expected string or bytes-like object
Buffer is NULL
maximum recursion limit exceeded
internal error in regular expression engine
repl
_subx
pattern
The pattern string from which the RE object was compiled.
The regex matching flags.
groups
The number of capturing groups in the pattern.
groupindex
A dictionary mapping group names to group numbers.
re.Match
<%s object; span=(%zd, %zd), match=%.50R>
no such group
group
span
groupdict
expand
template
_expand
The string passed to match() or search().
The regular expression object.
The index into the string at which the RE engine started looking for a match.
The index into the string beyond which the RE engine will not go.
lastindex
The integer index of the last matched capturing group.
lastgroup
The name of the last matched capturing group.
regs
_sre.SRE_Scanner
getcodesize
ascii_iscased
unicode_iscased
ascii_tolower
unicode_tolower
indexgroup
argument 'groupindex'
argument 'indexgroup'
regular expression code size limit exceeded
invalid SRE code
register
lookup
escape_encode
escape_decode
utf_8_encode
utf_8_decode
utf_7_encode
utf_7_decode
utf_16_encode
utf_16_le_encode
utf_16_be_encode
utf_16_decode
utf_16_le_decode
utf_16_be_decode
utf_16_ex_decode
utf_32_encode
utf_32_le_encode
utf_32_be_encode
utf_32_decode
utf_32_le_decode
utf_32_be_decode
utf_32_ex_decode
unicode_escape_encode
unicode_escape_decode
raw_unicode_escape_encode
raw_unicode_escape_decode
latin_1_encode
latin_1_decode
ascii_encode
ascii_decode
charmap_encode
charmap_decode
charmap_build
readbuffer_encode
register_error
lookup_error
_forget_codec
string is too large to encode
Weak-reference support module.
getweakrefcount
_remove_dead_weakref
getweakrefs
proxy
not a weakref
ReferenceType
ProxyType
CallableProxyType
reduce
cmp_to_key
reduce() arg 2 must support iteration
reduce() of empty sequence with no initial value
mycmp
O:cmp_to_key
functools.KeyWrapper
other argument must be K instance
Value wrapped by a key function.
functools.partial
%U, %R
%U, %S=%R
%s(%R%U)
O(O)(OOOO)
invalid partial state
function object to use in future partial calls
tuple of arguments to future partial calls
dictionary of keyword arguments to future partial calls
type 'partial' takes at least one argument
the first argument must be callable
functools._lru_cache_wrapper
cache_info
cache_clear
nnOn
nnnn
user_function
typed
cache_info_type
OOpO:lru_cache
maxsize should be integer or None
functools._lru_list_elem
truth
contains
indexOf
countOf
is_not
matmul
floordiv
truediv
invert
lshift
rshift
not_
and_
iadd
isub
imul
imatmul
ifloordiv
itruediv
imod
ilshift
irshift
iand
ixor
concat
iconcat
getitem
setitem
delitem
ipow
_compare_digest
length_hint
comparing strings with non-ASCII characters is not supported
unsupported operand types(s) or combination of types: '%.100s' and '%.100s'
Buffer must be single dimension
operator.itemgetter
itemgetter
O(O)
operator.attrgetter
attrgetter
attribute name must be a string
operator.methodcaller
keywords dict changed size during iteration
%s(%R, %U)
methodcaller
partial
functools
methodcaller needs at least one argument, the method name
method name must be a string
_count_elements
collections.deque
%s(%R, maxlen=%zd)
can only concatenate deque (not "%.200s") to deque
%.200s() must return a deque, not %.200s
pop from an empty deque
deque index out of range
deque mutated during iteration
appendleft
extendleft
popleft
rotate
O|O&O&:index
%R is not in deque
nO:insert
deque already at its maximum size
O()NN
O(()n)NN
deque mutated during remove().
deque.remove(x): x not in deque
|n:rotate
maxlen
maximum size of a deque or None if unbounded
|OO:deque
maxlen must be non-negative
collections.defaultdict
%s(%U, %U)
default_factory
Factory for default value called by __missing__().
first argument must be callable or None
_collections._deque_iterator
O!|n
_collections._deque_reverse_iterator
_collections._tuplegetter
%s(%zd, %R)
(O(nO))
descriptor for index '%zd' for tuple subclasses doesn't apply to '%s' object
_tuplegetter
get_cache_token
_abc_init
_reset_registry
_reset_caches
_get_dump
_abc_register
_abc_instancecheck
_abc_subclasscheck
items() returned non-iterable
items() returned item which size is not 2
__bases__ is not tuple
_abc_impl
_abc_impl is set to a wrong type
NNNK
Can only register classes
Refusing to create an inheritance cycle
_destroy
__subclasshook__ must return either False, True, or NotImplemented
__subclasses__() must return a list
_abc._abc_data
n must be >= 0
itertools._tee
cannot re-enter the tee iterator
O(())(Oi)
state is not a tuple
Index out of range
itertools._tee_dataobject
O(ONO)
teedataobject
Invalid arguments
_tee
itertools.accumulate
(O)O
O(NO)O
O(NiO)
O(OO)O
initial
accumulate
itertools.combinations
O(()n)
O(On)N
invalid arguments
combinations
r must be non-negative
itertools.combinations_with_replacement
combinations_with_replacement
itertools.cycle
O(N)(OO)
O(O)(OO)
cycle
itertools.dropwhile
O(OO)l
dropwhile
itertools.takewhile
takewhile
itertools.islice
O(Nn)n
O(OnNn)n
islice
Stop argument for islice() must be None or an integer: 0 <= x <= sys.maxsize.
Indices for islice() must be None or an integer: 0 <= x <= sys.maxsize.
Step for islice() must be a positive integer or None.
itertools.starmap
starmap
itertools.chain
from_iterable
O()(OO)
O()(O)
Arguments must be iterators.
chain
itertools.compress
data
selectors
compress
itertools.filterfalse
filterfalse
itertools.count
%s(%zd)
%s(%R, %R)
O(n)
a number is required
itertools.zip_longest
fillvalue
zip_longest() got an unexpected keyword argument
itertools.permutations
O(On)(NN)
O!O!
permutations
Expected int as r
itertools.product
repeat
|n:product
repeat argument cannot be negative
repeat argument too large
itertools.repeat
%s(%R, %zd)
len() of unsized object
O|n:repeat
itertools.groupby
O(OO)(OOO)
groupby
itertools._grouper
_grouper
_clear
unregister
_run_exitfuncs
_ncallbacks
register() takes at least 1 argument (0 given)
Error in atexit._run_exitfuncs:
SIG_DFL
SIG_IGN
NSIG
SIG_BLOCK
SIG_UNBLOCK
SIG_SETMASK
default_int_handler
SIGHUP
SIGINT
SIGQUIT
SIGILL
SIGTRAP
SIGIOT
SIGABRT
SIGEMT
SIGFPE
SIGKILL
SIGBUS
SIGSEGV
SIGSYS
SIGPIPE
SIGALRM
SIGTERM
SIGUSR1
SIGUSR2
SIGCHLD
SIGIO
SIGURG
SIGWINCH
SIGSTOP
SIGTSTP
SIGCONT
SIGTTIN
SIGTTOU
SIGVTALRM
SIGPROF
SIGXCPU
SIGXFSZ
SIGINFO
ITIMER_REAL
ITIMER_VIRTUAL
ITIMER_PROF
signal.ItimerError
ItimerError
Signal %i ignored due to race condition
_PyOS_InterruptOccurred
alarm
setitimer
getitimer
raise_signal
strsignal
getsignal
set_wakeup_fd
siginterrupt
pause
pthread_kill
pthread_sigmask
sigpending
sigwait
valid_signals
signal only works in main thread of the main interpreter
signal number out of range
signal handler must be signal.SIG_IGN, signal.SIG_DFL, or a callable object
Unknown signal
warn_on_full_buffer
i|$p:set_wakeup_fd
set_wakeup_fd only works in main thread of the main interpreter
the fd %i must be in non-blocking mode
signal.pthread_kill
Exception ignored when trying to write to the signal wakeup fd:
S_ISDIR
S_ISCHR
S_ISBLK
S_ISREG
S_ISFIFO
S_ISLNK
S_ISSOCK
S_ISDOOR
S_ISPORT
S_ISWHT
S_IMODE
S_IFMT
filemode
mode out of range
S_IFDIR
S_IFCHR
S_IFBLK
S_IFREG
S_IFIFO
S_IFLNK
S_IFSOCK
S_IFDOOR
S_IFPORT
S_IFWHT
S_ISUID
S_ISGID
S_ISVTX
S_ENFMT
S_IREAD
S_IWRITE
S_IEXEC
S_IRWXU
S_IRUSR
S_IWUSR
S_IXUSR
S_IRWXG
S_IRGRP
S_IWGRP
S_IXGRP
S_IRWXO
S_IROTH
S_IWOTH
S_IXOTH
UF_NODUMP
UF_IMMUTABLE
UF_APPEND
UF_OPAQUE
UF_NOUNLINK
UF_COMPRESSED
UF_HIDDEN
SF_ARCHIVED
SF_IMMUTABLE
SF_APPEND
SF_NOUNLINK
SF_SNAPSHOT
ST_MODE
ST_INO
ST_DEV
ST_NLINK
ST_UID
ST_GID
ST_SIZE
ST_ATIME
ST_MTIME
ST_CTIME
time_ns
clock_gettime
clock_gettime_ns
clock_settime
clock_settime_ns
clock_getres
sleep
gmtime
localtime
asctime
ctime
mktime
strftime
strptime
tzset
monotonic
monotonic_ns
process_time
process_time_ns
thread_time
thread_time_ns
perf_counter
perf_counter_ns
get_clock_info
i:clock_gettime
iO:clock_settime
i:clock_getres
sleep length must be non-negative
|O:gmtime
|O:localtime
iiiiiiiii;asctime(): illegal time tuple argument
Tuple or struct_time argument required
year out of range
month out of range
day of month out of range
hour out of range
minute out of range
seconds out of range
day of week out of range
day of year out of range
%s %s%3d %.2d:%.2d:%.2d %d
|O:ctime
iiiiiiiii;mktime(): illegal time tuple argument
mktime argument out of range
U|O:strftime
iiiiiiiii;strftime(): illegal time tuple argument
_strptime_time
_strptime
invalid GMT offset
timezone
altzone
daylight
(zz)
tzname
clock_gettime(CLOCK_PROCESS_CPUTIME_ID)
getrusage(RUSAGE_SELF)
_SC_CLK_TCK is too large
times()
clock()
the processor time used is not available or its value cannot be represented
clock_gettime(CLOCK_THREAD_CPUTIME_ID)
s:get_clock_info
unknown clock
adjustable
resolution
CLOCK_REALTIME
CLOCK_MONOTONIC
CLOCK_MONOTONIC_RAW
CLOCK_PROCESS_CPUTIME_ID
CLOCK_THREAD_CPUTIME_ID
CLOCK_UPTIME_RAW
_STRUCT_TM_ITEMS
struct_time
time.struct_time
The time value as returned by gmtime(), localtime(), and strptime(), and
 accepted by asctime(), mktime() and strftime().  May be considered as a
 sequence of 9 integers.
 Note that several fields' values are not the same as those defined by
 the C language standard for struct tm.  For example, the value of the
 field tm_year is the actual year, not year - 1900.  See individual
 fields' descriptions for details.
tm_year
year, for example, 1993
tm_mon
month of year, range [1, 12]
tm_mday
day of month, range [1, 31]
tm_hour
hours, range [0, 23]
tm_min
minutes, range [0, 59]
tm_sec
seconds, range [0, 61])
tm_wday
day of week, range [0, 6], Monday is 0
tm_yday
day of year, range [1, 366]
tm_isdst
1 if summer time is in effect, 0 if not, and -1 if unknown
tm_zone
abbreviation of timezone name
tm_gmtoff
offset from UTC in seconds
TIMEOUT_MAX
LockType
RLock
_local
_ExceptHookArgs
_thread._localdummy
Thread-local dummy
_thread._local
Thread-local data
Couldn't get thread-state dictionary
_localdummy_destroyed
Initialization arguments are not supported
thread.local.%p
_thread.lock
<%s %s object at %p>
locked
unlocked
acquire
locked_lock
_at_fork_reinit
blocking
timeout
|iO:acquire
can't specify a timeout for a non-blocking call
timeout value must be positive
timeout value is too large
release unlocked lock
failed to reinitialize lock at fork
_thread.RLock
<%s %s object owner=%ld count=%lu at %p>
_is_owned
_acquire_restore
_release_save
Internal lock count overflowed
cannot release un-acquired lock
(kk):_acquire_restore
couldn't acquire lock
_thread.ExceptHookArgs
thread
Thread
start_new_thread
start_new
allocate_lock
allocate
exit_thread
interrupt_main
get_ident
get_native_id
_count
stack_size
_set_sentinel
_excepthook
first arg must be callable
2nd arg must be a tuple
optional 3rd arg must be a dictionary
thread is not supported for isolated subinterpreters
can't start new thread
in thread started by
no current thread ident
|n:stack_size
size must be 0 or a positive value
size not valid: %zd bytes
setting stack size not supported
_thread.excepthook argument type must be ExceptHookArgs
_stderr
Exception in thread 
<failed to get thread name>
setlocale
localeconv
strcoll
strxfrm
nl_langinfo
i|z:setlocale
unsupported locale setting
locale query failed
mon_grouping
positive_sign
negative_sign
int_frac_digits
frac_digits
p_cs_precedes
p_sep_by_space
n_cs_precedes
n_sep_by_space
p_sign_posn
n_sign_posn
decimal_point
thousands_sep
grouping
int_curr_symbol
currency_symbol
mon_decimal_point
mon_thousands_sep
UU:strcoll
U:strxfrm
i:nl_langinfo
unsupported langinfo constant
DAY_1
DAY_2
DAY_3
DAY_4
DAY_5
DAY_6
DAY_7
ABDAY_1
ABDAY_2
ABDAY_3
ABDAY_4
ABDAY_5
ABDAY_6
ABDAY_7
MON_1
MON_2
MON_3
MON_4
MON_5
MON_6
MON_7
MON_8
MON_9
MON_10
MON_11
MON_12
ABMON_1
ABMON_2
ABMON_3
ABMON_4
ABMON_5
ABMON_6
ABMON_7
ABMON_8
ABMON_9
ABMON_10
ABMON_11
ABMON_12
RADIXCHAR
THOUSEP
CRNCYSTR
D_T_FMT
D_FMT
T_FMT
AM_STR
PM_STR
CODESET
T_FMT_AMPM
ERA_D_FMT
ERA_D_T_FMT
ERA_T_FMT
ALT_DIGITS
YESEXPR
NOEXPR
LC_TIME
LC_COLLATE
LC_MONETARY
LC_MESSAGES
LC_NUMERIC
CHAR_MAX
locale.Error
cannot fit '%.200s' into an offset-sized integer
could not find io module state (interpreter shutdown?)
_bootlocale
DEFAULT_BUFFER_SIZE
s(OO){}
UnsupportedOperation
getstate
newlines
peek
read1
readable
readall
seek
seekable
setstate
tell
writable
open_code
buffering
newline
closefd
opener
argument 'newline'
_blksize
invalid file: %R
invalid mode: '%s'
mode U cannot be combined with 'x', 'w', 'a', or '+'
'U' mode is deprecated
can't have text and binary mode at once
must have exactly one of create/read/write/append mode
binary mode doesn't take an encoding argument
binary mode doesn't take an errors argument
binary mode doesn't take a newline argument
line buffering (buffering=1) isn't supported in binary mode, the default buffer size will be used
OsOO
invalid buffering size
can't have unbuffered text I/O
unknown mode: '%s'
OsssO
argument 'path'
File or stream is not seekable.
File or stream is not readable.
File or stream is not writable.
_io._IOBase
_io._RawIOBase
I/O operation on closed file.
_checkClosed
_checkSeekable
_checkReadable
_checkWritable
readlines
writelines
__IOBase_closed
peek() should have returned a bytes object, not '%.200s'
read() should have returned a bytes object, not '%.200s'
_finalizing
read() should return bytes
_io.FileIO
<_io.FileIO [closed]>
<_io.FileIO fd=%d mode='%s' closefd=%s>
<_io.FileIO name=%R mode='%s' closefd=%s>
reentrant call inside %s.__repr__
_dealloc_warn
reading
I/O operation on closed file
File not open for %s
unbounded read returned more bytes than a Python bytes object can hold
writing
unclosed file %R
True if the file descriptor will be closed by close().
FileIO
negative file descriptor
Must have exactly one of create/read/write/append mode and at most one plus
invalid mode: %.200s
Cannot use closefd=False with file name
expected integer from opener
opener returned %d
_io.BytesIO
_io._BytesIOBuffer
deallocated BytesIO object has exported buffers
getbuffer
getvalue
new buffer size too large
integer argument expected, got '%s'
negative seek value %zd
new position too large
invalid whence (%i, should be 0, 1 or 2)
negative size value %zd
(OnN)
%.200s.__setstate__ argument should be 3-tuple, got %.200s
second item of state must be an integer, not %.200s
position value cannot be negative
third item of state should be a dict, got a %.200s
True if the file is closed.
initial_bytes
BytesIO
bytesiobuf_getbuffer: view==NULL argument is obsolete
_io._BufferedIOBase
_io.BufferedReader
_io.BufferedWriter
_io.BufferedRWPair
_io.BufferedRandom
detach
readinto1
<%s>
<%s name=%R>
raw stream has been detached
I/O operation on uninitialized object
readline() should have returned a bytes object, not '%.200s'
readline of closed file
reentrant call inside %R
_enter_buffered_busy
could not acquire lock for %s at interpreter shutdown, possibly due to daemon threads
<ascii(self) failed>
write could not complete without blocking
raw write() returned invalid length %zd (should have been between 0 and %zd)
Raw stream returned invalid position %zd
raw readinto() returned invalid length %zd (should have been between 0 and %zd)
read length must be non-negative or -1
read of closed file
readall() should return bytes
peek of closed file
readinto of closed file
whence value %d unsupported
seek of closed file
truncate of closed file
buffer_size
BufferedReader
buffer size must be strictly positive
can't allocate read lock
write to closed file
flush of closed file
BufferedWriter
the BufferedRWPair object is being garbage-collected
BufferedRWPair
BufferedRandom
_io._TextIOBase
IncrementalNewlineDecoder.__init__ not called
_io.IncrementalNewlineDecoder
_io.TextIOWrapper
decoder should return a string result, not '%.200s'
illegal decoder state
OK;illegal decoder state
state argument must be a tuple
OK;setstate(): illegal state argument
((OK))
decoder
IncrementalNewlineDecoder
<_io.TextIOWrapper
 name=%R
 mode=%R
%U encoding=%R>
underlying buffer has been detached
readline() should have returned a str object, not '%.200s'
not readable
OO;illegal decoder state
illegal decoder state: the first item should be a bytes object, not '%.200s'
underlying %s() should have returned a bytes-like object, not '%.200s'
reconfigure
line_buffering
write_through
It is not possible to set the encoding or newline of stream after the first read
illegal newline value: %s
codecs.open()
iso8859-1
not writable
encoder should return a bytes object, not '%.200s'
underlying stream is not seekable
can't do nonzero cur-relative seeks
can't do nonzero end-relative seeks
invalid whence (%d, should be %d, %d or %d)
negative seek position %R
underlying read() should have returned a bytes object, not '%.200s'
can't restore logical file position
((yi))
telling position disabled by next() call
Oi;illegal decoder state
can't reconstruct logical file position
_CHUNK_SIZE
a strictly positive integer is required
TextIOWrapper() argument 'errors' must be str or None, not %.50s
could not determine default encoding
embedded null character in errors
getpreferredencoding
_io.StringIO
Negative size value %zd
Invalid whence (%i, should be 0, 1 or 2)
Negative seek position %zd
Can't do nonzero cur-relative seeks
string argument expected, got '%s'
(OOnN)
%.200s.__setstate__ argument should be 4-tuple, got %.200s
third item of state must be an integer, got %.200s
fourth item of state should be a dict, got a %.200s
initial_value
StringIO
newline must be str or None, not %.200s
illegal newline value: %R
initial_value must be str or None, not %.200s
_PyFaulthandler_Init
failed to enable faulthandler
enable(file=sys.stderr, all_threads=True): enable the fault handler
disable(): disable the fault handler
is_enabled
is_enabled()->bool: check if the handler is enabled
dump_traceback
dump_traceback(file=sys.stderr, all_threads=True): dump the traceback of the current thread, or of all threads if all_threads is True, into file
dump_traceback_later
dump_traceback_later(timeout, repeat=False, file=sys.stderrn, exit=False):
dump the traceback of all threads in timeout seconds,
or each timeout seconds if repeat is True. If exit is True, call _exit(1) which is not safe.
cancel_dump_traceback_later
cancel_dump_traceback_later():
cancel the previous call to dump_traceback_later().
register(signum, file=sys.stderr, all_threads=True, chain=False): register a handler for the signal 'signum': dump the traceback of the current thread, or of all threads if all_threads is True, into file
unregister(signum): unregister the handler of the signal 'signum' registered by register()
_read_null
_read_null(): read from NULL, raise a SIGSEGV or SIGBUS signal depending on the platform
_sigsegv
_sigsegv(release_gil=False): raise a SIGSEGV signal
_fatal_error_c_thread
fatal_error_c_thread(): call Py_FatalError() in a new C thread.
_sigabrt
_sigabrt(): raise a SIGABRT signal
_sigfpe
_sigfpe(): raise a SIGFPE signal
_fatal_error
_fatal_error(message): call Py_FatalError(message)
_stack_overflow
_stack_overflow(): recursive call to raise a stack overflow
all_threads
|Oi:enable
unable to get sys.stderr
sys.stderr is None
file is not a valid file descripter
file.fileno() is not a valid file descriptor
unable to get the current thread state
Bus error
Illegal instruction
Floating point exception
Aborted
Segmentation fault
|Oi:dump_traceback
O|iOi:dump_traceback_later
timeout must be greater than 0
unable to start watchdog thread
Timeout (%lu:%02lu:%02lu.%06u)!
Timeout (%lu:%02lu:%02lu)!
signum
i|Oii:register
signal %i cannot be registered, use enable() instead
i:unregister
|i:_sigsegv
unable to start the thread
faulthandler_fatal_error_thread
in new thread
y|i:fatal_error
faulthandler_fatal_error_py
unable to raise a stack overflow (allocated %zu bytes on the stack, %zu recursive calls)
Enable tracemalloc to get the memory block allocation traceback
Memory block allocated at (most recent call first):
  File "
", line 
is_tracing
clear_traces
_get_traces
_get_object_traceback
get_traceback_limit
get_tracemalloc_memory
get_traced_memory
reset_peak
the tracemalloc module has been unloaded
cannot allocate lock
the number of frames must be in range [1; %lu]
tracemalloc_realloc
tracemalloc_realloc() failed to allocate a trace
oldparser
s|ssp
mode must be either 'exec' or 'eval' or 'single'
s|sspp
peg_parser
A parser.
parse_string
Parse a string, return an AST.
compile_string
Compile a string, return a code object.
DEF_GLOBAL
DEF_NONLOCAL
DEF_LOCAL
DEF_PARAM
DEF_FREE
DEF_FREE_CLASS
DEF_IMPORT
DEF_BOUND
DEF_ANNOT
TYPE_FUNCTION
TYPE_CLASS
TYPE_MODULE
LOCAL
GLOBAL_EXPLICIT
GLOBAL_IMPLICIT
FREE
CELL
SCOPE_OFF
SCOPE_MASK
symtable
string or bytes
symtable() arg 3 must be 'exec' or 'eval' or 'single'
bench
OU|i
spamlist
spamdict
xxsubtype.spamdict
getstate() -> state
setstate(state)
:getstate
i:setstate
state
an int variable for demonstration purposes
xxsubtype.spamlist
classmeth
classmeth(*args, **kw)
staticmeth
staticmeth(*args, **kw)
_frozen_importlib_external
__hello__
__phello__
__phello__.spam
&(*,
JJJ
J JJJJJJJJJJ'JC+/J7JJJJJJJJJJJJJJJJJJJJJJJJJJJJJ;JJJJJJJJJJJJJJJJJJJJJJJJJJJJJ?
 %*/49>CH
hhlhrxh
LLLL
ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
CCCCCCCCCCCCCCCCCCC
bool(x) -> bool
Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
O|OO
B.isspace() -> bool
Return True if all characters in B are whitespace
and there is at least one character in B, False otherwise.
B.isalpha() -> bool
Return True if all characters in B are alphabetic
and there is at least one character in B, False otherwise.
B.isalnum() -> bool
Return True if all characters in B are alphanumeric
and there is at least one character in B, False otherwise.
B.isascii() -> bool
Return True if B is empty or all characters in B are ASCII,
False otherwise.
B.isdigit() -> bool
Return True if all characters in B are digits
and there is at least one character in B, False otherwise.
B.islower() -> bool
Return True if all cased characters in B are lowercase and there is
at least one cased character in B, False otherwise.
B.isupper() -> bool
Return True if all cased characters in B are uppercase and there is
at least one cased character in B, False otherwise.
B.istitle() -> bool
Return True if B is a titlecased string and there is at least one
character in B, i.e. uppercase characters may only follow uncased
characters and lowercase characters only cased ones. Return False
otherwise.
B.lower() -> copy of B
Return a copy of B with all ASCII characters converted to lowercase.
B.upper() -> copy of B
Return a copy of B with all ASCII characters converted to uppercase.
B.title() -> copy of B
Return a titlecased version of B, i.e. ASCII words start with uppercase
characters, all remaining cased characters have lowercase.
B.capitalize() -> copy of B
Return a copy of B with only its first character capitalized (ASCII)
and the rest lower-cased.
B.swapcase() -> copy of B
Return a copy of B with uppercase ASCII characters converted
to lowercase ASCII and vice versa.
B.maketrans(frm, to) -> translation table
Return a translation table (a bytes object of length 256) suitable
for use in the bytes or bytearray translate method where each byte
in frm is mapped to the byte at the same position in to.
The bytes objects frm and to must be of the same length.
B.find(sub[, start[, end]]) -> int
Return the lowest index in B where subsection sub is found,
such that sub is contained within B[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
B.index(sub[, start[, end]]) -> int
Return the lowest index in B where subsection sub is found,
such that sub is contained within B[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Raises ValueError when the subsection is not found.
B.rfind(sub[, start[, end]]) -> int
Return the highest index in B where subsection sub is found,
such that sub is contained within B[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
B.rindex(sub[, start[, end]]) -> int
Return the highest index in B where subsection sub is found,
such that sub is contained within B[start,end].  Optional
arguments start and end are interpreted as in slice notation.
Raise ValueError when the subsection is not found.
B.count(sub[, start[, end]]) -> int
Return the number of non-overlapping occurrences of subsection sub in
bytes B[start:end].  Optional arguments start and end are interpreted
as in slice notation.
B.startswith(prefix[, start[, end]]) -> bool
Return True if B starts with the specified prefix, False otherwise.
With optional start, test B beginning at that position.
With optional end, stop comparing B at that position.
prefix can also be a tuple of bytes to try.
B.endswith(suffix[, start[, end]]) -> bool
Return True if B ends with the specified suffix, False otherwise.
With optional start, test B beginning at that position.
With optional end, stop comparing B at that position.
suffix can also be a tuple of bytes to try.
\x00
bytearray(iterable_of_ints) -> bytearray
bytearray(string, encoding[, errors]) -> bytearray
bytearray(bytes_or_buffer) -> mutable copy of bytes_or_buffer
bytearray(int) -> bytes array of size given by the parameter initialized with null bytes
bytearray() -> empty bytes array
Construct a mutable bytearray object from:
  - an iterable yielding integers in range(256)
  - a text string encoded using the specified encoding
  - a bytes or a buffer object
  - any object implementing the buffer API.
  - an integer
B.__alloc__() -> int
Return the number of bytes actually allocated.
__reduce__($self, /)
Return state information for pickling.
__reduce_ex__($self, proto=0, /)
Return state information for pickling.
__sizeof__($self, /)
Returns the size of the bytearray object in memory, in bytes.
append($self, item, /)
Append a single item to the end of the bytearray.
  item
    The item to be appended.
center($self, width, fillchar=b' ', /)
Return a centered string of length width.
Padding is done using the specified fill character.
clear($self, /)
Remove all items from the bytearray.
copy($self, /)
Return a copy of B.
decode($self, /, encoding='utf-8', errors='strict')
Decode the bytearray using the codec registered for encoding.
  encoding
    The encoding with which to decode the bytearray.
  errors
    The error handling scheme to use for the handling of decoding errors.
    The default is 'strict' meaning that decoding errors raise a
    UnicodeDecodeError. Other possible values are 'ignore' and 'replace'
    as well as any other name registered with codecs.register_error that
    can handle UnicodeDecodeErrors.
expandtabs($self, /, tabsize=8)
Return a copy where all tab characters are expanded using spaces.
If tabsize is not given, a tab size of 8 characters is assumed.
extend($self, iterable_of_ints, /)
Append all the items from the iterator or sequence to the end of the bytearray.
  iterable_of_ints
    The iterable of items to append.
fromhex($type, string, /)
Create a bytearray object from a string of hexadecimal numbers.
Spaces between two numbers are accepted.
Example: bytearray.fromhex('B9 01EF') -> bytearray(b'\\xb9\\x01\\xef')
hex($self, /, sep=<unrepresentable>, bytes_per_sep=1)
Create a str of hexadecimal numbers from a bytearray object.
  sep
    An optional single character or byte to separate hex bytes.
  bytes_per_sep
    How many bytes between separators.  Positive values count from the
    right, negative values count from the left.
Example:
>>> value = bytearray([0xb9, 0x01, 0xef])
>>> value.hex()
'b901ef'
>>> value.hex(':')
'b9:01:ef'
>>> value.hex(':', 2)
'b9:01ef'
>>> value.hex(':', -2)
'b901:ef'
insert($self, index, item, /)
Insert a single item into the bytearray before the given index.
  index
    The index where the value is to be inserted.
  item
    The item to be inserted.
join($self, iterable_of_bytes, /)
Concatenate any number of bytes/bytearray objects.
The bytearray whose method is called is inserted in between each pair.
The result is returned as a new bytearray object.
ljust($self, width, fillchar=b' ', /)
Return a left-justified string of length width.
Padding is done using the specified fill character.
lstrip($self, bytes=None, /)
Strip leading bytes contained in the argument.
If the argument is omitted or None, strip leading ASCII whitespace.
maketrans(frm, to, /)
Return a translation table useable for the bytes or bytearray translate method.
The returned table will be one where each byte in frm is mapped to the byte at
the same position in to.
The bytes objects frm and to must be of the same length.
partition($self, sep, /)
Partition the bytearray into three parts using the given separator.
This will search for the separator sep in the bytearray. If the separator is
found, returns a 3-tuple containing the part before the separator, the
separator itself, and the part after it as new bytearray objects.
If the separator is not found, returns a 3-tuple containing the copy of the
original bytearray object and two empty bytearray objects.
pop($self, index=-1, /)
Remove and return a single item from B.
  index
    The index from where to remove the item.
    -1 (the default value) means remove the last item.
If no index argument is given, will pop the last item.
remove($self, value, /)
Remove the first occurrence of a value in the bytearray.
  value
    The value to remove.
replace($self, old, new, count=-1, /)
Return a copy with all occurrences of substring old replaced by new.
  count
    Maximum number of occurrences to replace.
    -1 (the default value) means replace all occurrences.
If the optional argument count is given, only the first count occurrences are
replaced.
removeprefix($self, prefix, /)
Return a bytearray with the given prefix string removed if present.
If the bytearray starts with the prefix string, return
bytearray[len(prefix):].  Otherwise, return a copy of the original
bytearray.
removesuffix($self, suffix, /)
Return a bytearray with the given suffix string removed if present.
If the bytearray ends with the suffix string and that suffix is not
empty, return bytearray[:-len(suffix)].  Otherwise, return a copy of
the original bytearray.
reverse($self, /)
Reverse the order of the values in B in place.
rjust($self, width, fillchar=b' ', /)
Return a right-justified string of length width.
Padding is done using the specified fill character.
rpartition($self, sep, /)
Partition the bytearray into three parts using the given separator.
This will search for the separator sep in the bytearray, starting at the end.
If the separator is found, returns a 3-tuple containing the part before the
separator, the separator itself, and the part after it as new bytearray
objects.
If the separator is not found, returns a 3-tuple containing two empty bytearray
objects and the copy of the original bytearray object.
rsplit($self, /, sep=None, maxsplit=-1)
Return a list of the sections in the bytearray, using sep as the delimiter.
  sep
    The delimiter according which to split the bytearray.
    None (the default value) means split on ASCII whitespace characters
    (space, tab, return, newline, formfeed, vertical tab).
  maxsplit
    Maximum number of splits to do.
    -1 (the default value) means no limit.
Splitting is done starting at the end of the bytearray and working to the front.
rstrip($self, bytes=None, /)
Strip trailing bytes contained in the argument.
If the argument is omitted or None, strip trailing ASCII whitespace.
split($self, /, sep=None, maxsplit=-1)
Return a list of the sections in the bytearray, using sep as the delimiter.
  sep
    The delimiter according which to split the bytearray.
    None (the default value) means split on ASCII whitespace characters
    (space, tab, return, newline, formfeed, vertical tab).
  maxsplit
    Maximum number of splits to do.
    -1 (the default value) means no limit.
splitlines($self, /, keepends=False)
Return a list of the lines in the bytearray, breaking at line boundaries.
Line breaks are not included in the resulting list unless keepends is given and
true.
strip($self, bytes=None, /)
Strip leading and trailing bytes contained in the argument.
If the argument is omitted or None, strip leading and trailing ASCII whitespace.
translate($self, table, /, delete=b'')
Return a copy with each character mapped by the given translation table.
  table
    Translation table, which must be a bytes object of length 256.
All characters occurring in the optional argument delete are removed.
The remaining characters are mapped through the given translation table.
zfill($self, width, /)
Pad a numeric string with zeros on the left, to fill a field of the given width.
The original string is never truncated.
Private method returning an estimate of len(list(it)).
Set state information for unpickling.
***********************/****1********
************************************3****57***9*******;***=*?*A*C
)//,'
bytes(iterable_of_ints) -> bytes
bytes(string, encoding[, errors]) -> bytes
bytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer
bytes(int) -> bytes object of size given by the parameter initialized with null bytes
bytes() -> empty bytes object
Construct an immutable array of bytes from:
  - an iterable yielding integers in range(256)
  - a text string encoded using the specified encoding
  - any object implementing the buffer API.
  - an integer
center($self, width, fillchar=b' ', /)
Return a centered string of length width.
Padding is done using the specified fill character.
decode($self, /, encoding='utf-8', errors='strict')
Decode the bytes using the codec registered for encoding.
  encoding
    The encoding with which to decode the bytes.
  errors
    The error handling scheme to use for the handling of decoding errors.
    The default is 'strict' meaning that decoding errors raise a
    UnicodeDecodeError. Other possible values are 'ignore' and 'replace'
    as well as any other name registered with codecs.register_error that
    can handle UnicodeDecodeErrors.
expandtabs($self, /, tabsize=8)
Return a copy where all tab characters are expanded using spaces.
If tabsize is not given, a tab size of 8 characters is assumed.
fromhex($type, string, /)
Create a bytes object from a string of hexadecimal numbers.
Spaces between two numbers are accepted.
Example: bytes.fromhex('B9 01EF') -> b'\\xb9\\x01\\xef'.
hex($self, /, sep=<unrepresentable>, bytes_per_sep=1)
Create a str of hexadecimal numbers from a bytes object.
  sep
    An optional single character or byte to separate hex bytes.
  bytes_per_sep
    How many bytes between separators.  Positive values count from the
    right, negative values count from the left.
Example:
>>> value = b'\xb9\x01\xef'
>>> value.hex()
'b901ef'
>>> value.hex(':')
'b9:01:ef'
>>> value.hex(':', 2)
'b9:01ef'
>>> value.hex(':', -2)
'b901:ef'
join($self, iterable_of_bytes, /)
Concatenate any number of bytes objects.
The bytes whose method is called is inserted in between each pair.
The result is returned as a new bytes object.
Example: b'.'.join([b'ab', b'pq', b'rs']) -> b'ab.pq.rs'.
ljust($self, width, fillchar=b' ', /)
Return a left-justified string of length width.
Padding is done using the specified fill character.
lstrip($self, bytes=None, /)
Strip leading bytes contained in the argument.
If the argument is omitted or None, strip leading  ASCII whitespace.
maketrans(frm, to, /)
Return a translation table useable for the bytes or bytearray translate method.
The returned table will be one where each byte in frm is mapped to the byte at
the same position in to.
The bytes objects frm and to must be of the same length.
partition($self, sep, /)
Partition the bytes into three parts using the given separator.
This will search for the separator sep in the bytes. If the separator is found,
returns a 3-tuple containing the part before the separator, the separator
itself, and the part after it.
If the separator is not found, returns a 3-tuple containing the original bytes
object and two empty bytes objects.
replace($self, old, new, count=-1, /)
Return a copy with all occurrences of substring old replaced by new.
  count
    Maximum number of occurrences to replace.
    -1 (the default value) means replace all occurrences.
If the optional argument count is given, only the first count occurrences are
replaced.
removeprefix($self, prefix, /)
Return a bytes object with the given prefix string removed if present.
If the bytes starts with the prefix string, return bytes[len(prefix):].
Otherwise, return a copy of the original bytes.
removesuffix($self, suffix, /)
Return a bytes object with the given suffix string removed if present.
If the bytes ends with the suffix string and that suffix is not empty,
return bytes[:-len(prefix)].  Otherwise, return a copy of the original
bytes.
rjust($self, width, fillchar=b' ', /)
Return a right-justified string of length width.
Padding is done using the specified fill character.
rpartition($self, sep, /)
Partition the bytes into three parts using the given separator.
This will search for the separator sep in the bytes, starting at the end. If
the separator is found, returns a 3-tuple containing the part before the
separator, the separator itself, and the part after it.
If the separator is not found, returns a 3-tuple containing two empty bytes
objects and the original bytes object.
rsplit($self, /, sep=None, maxsplit=-1)
Return a list of the sections in the bytes, using sep as the delimiter.
  sep
    The delimiter according which to split the bytes.
    None (the default value) means split on ASCII whitespace characters
    (space, tab, return, newline, formfeed, vertical tab).
  maxsplit
    Maximum number of splits to do.
    -1 (the default value) means no limit.
Splitting is done starting at the end of the bytes and working to the front.
rstrip($self, bytes=None, /)
Strip trailing bytes contained in the argument.
If the argument is omitted or None, strip trailing ASCII whitespace.
split($self, /, sep=None, maxsplit=-1)
Return a list of the sections in the bytes, using sep as the delimiter.
  sep
    The delimiter according which to split the bytes.
    None (the default value) means split on ASCII whitespace characters
    (space, tab, return, newline, formfeed, vertical tab).
  maxsplit
    Maximum number of splits to do.
    -1 (the default value) means no limit.
splitlines($self, /, keepends=False)
Return a list of the lines in the bytes, breaking at line boundaries.
Line breaks are not included in the resulting list unless keepends is given and
true.
strip($self, bytes=None, /)
Strip leading and trailing bytes contained in the argument.
If the argument is omitted or None, strip leading and trailing ASCII whitespace.
translate($self, table, /, delete=b'')
Return a copy with each character mapped by the given translation table.
  table
    Translation table, which must be a bytes object of length 256.
All characters occurring in the optional argument delete are removed.
The remaining characters are mapped through the given translation table.
zfill($self, width, /)
Pad a numeric string with zeros on the left, to fill a field of the given width.
The original string is never truncated.
Private method returning an estimate of len(list(it)).
Return state information for pickling.
Set state information for unpickling.
Capsule objects let you wrap a C "void *" pointer in a Python
object.  They're a way of passing data through the Python interpreter
without creating your own custom type.
Capsules are used for communication between extension modules.
They provide a way for an extension module to export a C interface
to other extension modules, so that extension modules can use the
Python import mechanism to link to one another.
cell([contents])
Create a new cell object.
  contents
    the contents of the cell. If not specified, the cell will be empty,
    and 
 further attempts to access its cell_contents attribute will
    raise a ValueError.
method(function, instance)
Create a bound instance method object.
instancemethod(function)
Bind a function to a class.
code(argcount, posonlyargcount, kwonlyargcount, nlocals, stacksize,
      flags, codestring, constants, names, varnames, filename, name,
      firstlineno, lnotab[, freevars[, cellvars]])
Create a code object.  Not for the faint of heart.
replace($self, /, *, co_argcount=-1, co_posonlyargcount=-1,
        co_kwonlyargcount=-1, co_nlocals=-1, co_stacksize=-1,
        co_flags=-1, co_firstlineno=-1, co_code=None, co_consts=None,
        co_names=None, co_varnames=None, co_freevars=None,
        co_cellvars=None, co_filename=None, co_name=None,
        co_lnotab=None)
Return a copy of the code object with new values for the specified fields.
complex(real=0, imag=0)
Create a complex number from a real part and an optional imaginary part.
This is equivalent to (real + imag*1j) where imag defaults to 0.
complex.conjugate() -> complex
Return the complex conjugate of its argument. (3-4j).conjugate() == 3+4j.
complex.__format__() -> str
Convert to a string according to format_spec.
111
property(fget=None, fset=None, fdel=None, doc=None)
Property attribute.
  fget
    function to be used for getting an attribute value
  fset
    function to be used for setting an attribute value
  fdel
    function to be used for del'ing an attribute
  doc
    docstring
Typical use is to define a managed attribute x:
class C(object):
    def getx(self): return self._x
    def setx(self, value): self._x = value
    def delx(self): del self._x
    x = property(getx, setx, delx, "I'm the 'x' property.")
Decorators make defining new properties or modifying existing ones easy:
class C(object):
    @property
    def x(self):
        "I am the 'x' property."
        return self._x
    @x.setter
    def x(self, value):
        self._x = value
    @x.deleter
    def x(self):
        del self._x
Descriptor to change the getter on a property.
Descriptor to change the setter on a property.
Descriptor to change the deleter on a property.
enumerate(iterable, start=0)
Return an enumerate object.
  iterable
    an object supporting iteration
The enumerate object yields pairs containing a count (from start, which
defaults to zero) and a value yielded by the iterable argument.
enumerate is useful for obtaining an indexed list:
    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...
reversed(sequence, /)
Return a reverse iterator over the values of the given sequence.
Return state information for pickling.
Private method returning an estimate of len(list(it)).
Set state information for unpickling.
Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
send(arg) -> send 'arg' into generator,
return next yielded value or raise StopIteration.
throw(typ[,val[,tb]]) -> raise exception in generator,
return next yielded value or raise StopIteration.
close() -> raise GeneratorExit inside generator.
send(arg) -> send 'arg' into coroutine,
return next iterated value or raise StopIteration.
throw(typ[,val[,tb]]) -> raise exception in coroutine,
return next iterated value or raise StopIteration.
close() -> raise GeneratorExit inside coroutine.
asend(v) -> send 'v' in generator.
athrow(typ[,val[,tb]]) -> raise exception in generator.
aclose() -> raise GeneratorExit inside generator.
 #&)float(x=0, /)
Convert a string or number to a floating point number, if possible.
conjugate($self, /)
Return self, the complex conjugate of any float.
__trunc__($self, /)
Return the Integral closest to x between 0 and x.
__floor__($self, /)
Return the floor as an Integral.
__ceil__($self, /)
Return the ceiling as an Integral.
__round__($self, ndigits=None, /)
Return the Integral closest to x, rounding half toward even.
When an argument is passed, work like built-in round(x, ndigits).
as_integer_ratio($self, /)
Return integer ratio.
Return a pair of integers, whose ratio is exactly equal to the original float
and with a positive denominator.
Raise OverflowError on infinities and a ValueError on NaNs.
>>> (10.0).as_integer_ratio()
(10, 1)
>>> (0.0).as_integer_ratio()
(0, 1)
>>> (-.25).as_integer_ratio()
(-1, 4)
fromhex($type, string, /)
Create a floating-point number from a hexadecimal string.
>>> float.fromhex('0x1.ffffp10')
2047.984375
>>> float.fromhex('-0x1p-1074')
-5e-324
hex($self, /)
Return a hexadecimal representation of a floating-point number.
>>> (-0.1).hex()
'-0x1.999999999999ap-4'
>>> 3.14159.hex()
'0x1.921f9f01b866ep+1'
is_integer($self, /)
Return True if the float is an integer.
__getnewargs__($self, /)
__getformat__($type, typestr, /)
You probably don't want to use this function.
  typestr
    Must be 'double' or 'float'.
It exists mainly to be used in Python's test suite.
This function returns whichever of 'unknown', 'IEEE, big-endian' or 'IEEE,
little-endian' best describes the format of floating point numbers used by the
C type named by typestr.
__set_format__($type, typestr, fmt, /)
You probably don't want to use this function.
  typestr
    Must be 'double' or 'float'.
  fmt
    Must be one of 'unknown', 'IEEE, big-endian' or 'IEEE, little-endian',
    and in addition can only be one of the latter two if it appears to
    match the underlying C reality.
It exists mainly to be used in Python's test suite.
Override the automatic determination of C-level floating point type.
This affects how floats are converted to and from binary strings.
__format__($self, format_spec, /)
Formats the float according to format_spec.
sys.float_info
A named tuple holding information about the float type. It contains low level
information about the precision and internal representation. Please study
your system's :file:`float.h` for more information.
OM$MMMLMMMMMMMMMMMMM$MMMMMMMMMMMMMMOMMM&M&MMMWMMMMMMMMMMMMMMMMy
MMMMM
MMMMMMMOMMMMMMMMMMMM(MMMMMMMMMM(F.clear(): clear most references held by the frame
F.__sizeof__() -> size of F in memory, in bytes
function(code, globals, name=None, argdefs=None, closure=None)
Create a function object.
  code
    a code object
  globals
    the globals dictionary
  name
    a string that overrides the name from the code object
  argdefs
    a tuple that specifies the default argument values
  closure
    a tuple that supplies the bindings for free variables
classmethod(function) -> method
Convert a function to be a class method.
A class method receives the class as implicit first argument,
just like an instance method receives the instance.
To declare a class method, use this idiom:
  class C:
      @classmethod
      def f(cls, arg1, arg2, ...):
          ...
It can be called either on the class (e.g. C.f()) or on an instance
(e.g. C().f()).  The instance is ignored except for its class.
If a class method is called for a derived class, the derived class
object is passed as the implied first argument.
Class methods are different than C++ or Java static methods.
If you want those, see the staticmethod builtin.
staticmethod(function) -> method
Convert a function to be a static method.
A static method does not receive an implicit first argument.
To declare a static method, use this idiom:
     class C:
         @staticmethod
         def f(arg1, arg2, ...):
             ...
It can be called either on the class (e.g. C.f()) or on an instance
(e.g. C().f()). Both the class and the instance are ignored, and
neither is passed implicitly as the first argument to the method.
Static methods in Python are similar to those found in Java or C++.
For a more advanced concept, see the classmethod builtin.
A interpreter ID identifies a interpreter and may be used as an int.
Private method returning an estimate of len(list(it)).
Return state information for pickling.
Set state information for unpickling.
list(iterable=(), /)
Built-in mutable sequence.
If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.
__reversed__($self, /)
Return a reverse iterator over the list.
__sizeof__($self, /)
Return the size of the list in memory, in bytes.
clear($self, /)
Remove all items from list.
copy($self, /)
Return a shallow copy of the list.
append($self, object, /)
Append object to the end of the list.
insert($self, index, object, /)
Insert object before index.
extend($self, iterable, /)
Extend list by appending elements from the iterable.
pop($self, index=-1, /)
Remove and return item at index (default last).
Raises IndexError if list is empty or index is out of range.
remove($self, value, /)
Remove first occurrence of value.
Raises ValueError if the value is not present.
index($self, value, start=0, stop=sys.maxsize, /)
Return first index of value.
Raises ValueError if the value is not present.
count($self, value, /)
Return number of occurrences of value.
reverse($self, /)
Reverse *IN PLACE*.
sort($self, /, *, key=None, reverse=False)
Sort the list in ascending order and return None.
The sort is in-place (i.e. the list itself is modified) and stable (i.e. the
order of two equal elements is maintained).
If a key function is given, apply it once to each list item and sort them,
ascending or descending, according to their function values.
The reverse flag can be set to sort in descending order.
Private method returning an estimate of len(list(it)).
Return state information for pickling.
Set state information for unpickling.
int([x]) -> integer
int(x, base=10) -> integer
Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.
If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
bit_length($self, /)
Number of bits necessary to represent self in binary.
>>> bin(37)
'0b100101'
>>> (37).bit_length()
to_bytes($self, /, length, byteorder, *, signed=False)
Return an array of bytes representing an integer.
  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.
from_bytes($type, /, bytes, byteorder, *, signed=False)
Return the integer represented by the given array of bytes.
  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.
as_integer_ratio($self, /)
Return integer ratio.
Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.
>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)
__getnewargs__($self, /)
__format__($self, format_spec, /)
__sizeof__($self, /)
Returns size in memory, in bytes.
sys.int_info
A named tuple that holds information about Python's
internal representation of integers.  The attributes are read only.
%(dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)
__contains__($self, key, /)
True if the dictionary has the specified key, else False.
x.__getitem__(y) <==> x[y]
D.__sizeof__() -> size of D in memory, in bytes
get($self, key, default=None, /)
Return the value for key if key is in the dictionary, else default.
setdefault($self, key, default=None, /)
Insert key with a value of default if key is not in the dictionary.
Return the value for key if key is in the dictionary, else default.
pop($self, key, default=<unrepresentable>, /)
D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
If key is not found, default is returned if given, otherwise KeyError is raised
popitem($self, /)
Remove and return a (key, value) pair as a 2-tuple.
Pairs are returned in LIFO (last-in, first-out) order.
Raises KeyError if the dict is empty.
D.keys() -> a set-like object providing a view on D's keys
D.items() -> a set-like object providing a view on D's items
D.values() -> an object providing a view on D's values
D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
In either case, this is followed by: for k in F:  D[k] = F[k]
fromkeys($type, iterable, value=None, /)
Create a new dictionary with keys from iterable and values set to value.
D.clear() -> None.  Remove all items from D.
D.copy() -> a shallow copy of D
__reversed__($self, /)
Return a reverse iterator over the dict keys.
Private method returning an estimate of len(list(it)).
Return state information for pickling.
Return True if the view and the given iterable have a null intersection.
Return a reverse iterator over the dict keys.
Return a reverse iterator over the dict items.
Return a reverse iterator over the dict values.
Dictionary that remembers insertion order
fromkeys($type, /, iterable, value=None)
Create a new ordered dictionary with keys from iterable and values set to value.
Return state information for pickling
setdefault($self, /, key, default=None)
Insert key with a value of default if key is not in the dictionary.
Return the value for key if key is in the dictionary, else default.
od.pop(k[,d]) -> v, remove specified key and return the corresponding
        value.  If key is not found, d is returned if given, otherwise KeyError
        is raised.
        
popitem($self, /, last=True)
Remove and return a (key, value) pair from the dictionary.
Pairs are returned in LIFO order if last is true or FIFO order if false.
od.clear() -> None.  Remove all items from od.
od.copy() -> a shallow copy of od
od.__reversed__() <==> reversed(od)
move_to_end($self, /, key, last=True)
Move an existing element to the end (or beginning if last is false).
Raise KeyError if the element does not exist.
Return state information for pickling
MGOO
OOOOO
OVOahOOOOOOOOOOOOOOOO
s3O3O
O}OO
"""""
""""""""""""")""
I"R"
@EEZEEEEE_dEEiEnEsxEEEEEEEEEEEEEEEE
memoryview(object)
Create a new memoryview object which references the given object.
release($self, /)
Release the underlying buffer exposed by the memoryview object.
tobytes($self, /, order=None)
Return the data in the buffer as a byte string. Order can be {'C', 'F', 'A'}.
When order is 'C' or 'F', the data of the original array is converted to C or
Fortran order. For contiguous views, 'A' returns an exact copy of the physical
memory. In particular, in-memory Fortran order is preserved. For non-contiguous
views, the data is converted to C first. order=None is the same as order='C'.
hex($self, /, sep=<unrepresentable>, bytes_per_sep=1)
Return the data in the buffer as a str of hexadecimal numbers.
  sep
    An optional single character or byte to separate hex bytes.
  bytes_per_sep
    How many bytes between separators.  Positive values count from the
    right, negative values count from the left.
Example:
>>> value = memoryview(b'\xb9\x01\xef')
>>> value.hex()
'b901ef'
>>> value.hex(':')
'b9:01:ef'
>>> value.hex(':', 2)
'b9:01ef'
>>> value.hex(':', -2)
'b901:ef'
tolist($self, /)
Return the data in the buffer as a list of elements.
cast($self, /, format, *, shape)
Cast a memoryview to a new format or shape.
toreadonly($self, /)
Return a readonly version of the memoryview.
The underlying object of the memoryview.
The amount of space in bytes that the array would use in
 a contiguous representation.
A bool indicating whether the memory is read only.
The size in bytes of each element of the memoryview.
A string containing the format (in struct module style)
 for each element in the view.
An integer indicating how many dimensions of a multi-dimensional
 array the memory represents.
A tuple of ndim integers giving the shape of the memory
 as an N-dimensional array.
A tuple of ndim integers giving the size in bytes to access
 each element for each dimension of the array.
A tuple of integers used internally for PIL-style arrays.
A bool indicating whether the memory is C contiguous.
A bool indicating whether the memory is Fortran contiguous.
A bool indicating whether the memory is contiguous.
1ZZZ5module(name, doc=None)
Create a module object.
The name must be a string; the optional doc argument can have any type.
A simple attribute-based namespace.
SimpleNamespace(**kwargs)
Return state information for pickling
raw($self, /)
Return a memoryview of the raw memory underlying this buffer.
Will raise BufferError is the buffer isn't contiguous.
release($self, /)
Release the underlying buffer exposed by the PickleBuffer object.
+*range(stop) -> range object
range(start, stop[, step]) -> range object
Return an object that produces a sequence of integers from start (inclusive)
to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.
start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.
These are exactly the valid indices for a list of 4 elements.
When step is given, it specifies the increment (or decrement).
Return a reverse iterator.
rangeobject.count(value) -> integer -- return number of occurrences of value
rangeobject.index(value) -> integer -- return index of value.
Raise ValueError if the value is not present.
Private method returning an estimate of len(list(it)).
Return state information for pickling.
Set state information for unpickling.
/3set() -> new empty set object
set(iterable) -> new set object
Build an unordered collection of unique elements.
frozenset() -> empty frozenset object
frozenset(iterable) -> frozenset object
Build an immutable unordered collection of unique elements.
Private method returning an estimate of len(list(it)).
Return state information for pickling.
Add an element to a set.
This has no effect if the element is already present.
Remove all elements from this set.
x.__contains__(y) <==> y in x.
Return a shallow copy of a set.
Remove an element from a set if it is a member.
If the element is not a member, do nothing.
Return the difference of two or more sets as a new set.
(i.e. all elements that are in this set but not the others.)
Remove all elements of another set from this set.
Return the intersection of two sets as a new set.
(i.e. all elements that are in both sets.)
Update a set with the intersection of itself and another.
Return True if two sets have a null intersection.
Report whether another set contains this set.
Report whether this set contains another set.
Remove and return an arbitrary set element.
Raises KeyError if the set is empty.
Remove an element from a set; it must be a member.
If the element is not a member, raise a KeyError.
S.__sizeof__() -> size of S in memory, in bytes
Return the symmetric difference of two sets as a new set.
(i.e. all elements that are in exactly one of the sets.)
Update a set with the symmetric difference of itself and another.
Return the union of sets as a new set.
(i.e. all elements that are in either set.)
Update a set with the union of itself and others.
slice(stop)
slice(start, stop[, step])
Create a slice object.  This is used for extended slicing (e.g. a[0:10:2]).
S.indices(len) -> (start, stop, stride)
Assuming a sequence of length len, calculate the start and stop
indices, and the stride length of the extended slice described by
S. Out of bounds indices are clipped in a manner consistent with the
handling of normal slices.
Return state information for pickling.
n_fields
n_sequence_fields
n_unnamed_fields
$'tuple(iterable=(), /)
Built-in immutable sequence.
If no argument is given, the constructor returns an empty tuple.
If iterable is specified the tuple is initialized from iterable's items.
If the argument is a tuple, the return value is the same object.
__getnewargs__($self, /)
index($self, value, start=0, stop=sys.maxsize, /)
Return first index of value.
Raises ValueError if the value is not present.
count($self, value, /)
Return number of occurrences of value.
Private method returning an estimate of len(list(it)).
Return state information for pickling.
Set state information for unpickling.
type(object_or_name, bases, dict)
type(object) -> the object's type
type(name, bases, dict) -> a new type
object()
The base class of the class hierarchy.
When called, it accepts no arguments and returns a new featureless
instance that has no instance attributes and cannot be given any.
super() -> same as super(__class__, <first argument>)
super(type) -> unbound super object
super(type, obj) -> bound super object; requires isinstance(obj, type)
super(type, type2) -> bound super object; requires issubclass(type2, type)
Typical use to call a cooperative superclass method:
class C(B):
    def meth(self, arg):
        super().meth(arg)
This works for class methods too:
class C(B):
    @classmethod
    def cmeth(cls, arg):
        super().cmeth(arg)
mro($self, /)
Return a type's method resolution order.
__subclasses__($self, /)
Return a list of immediate subclasses.
__instancecheck__($self, instance, /)
Check if an object is an instance.
__subclasscheck__($self, subclass, /)
Check if a class is a subclass.
__dir__($self, /)
Specialized __dir__ implementation for types.
__sizeof__($self, /)
Return memory consumption of the type object.
__reduce_ex__($self, protocol, /)
Helper for pickle.
__reduce__($self, /)
Helper for pickle.
Abstract classes can override this to customize issubclass().
This is invoked early on by abc.ABCMeta.__subclasscheck__().
It should return True, False or NotImplemented.  If it returns
NotImplemented, the normal algorithm is used.  Otherwise, it
overrides the normal algorithm (and the outcome is cached).
This method is called when a class is subclassed.
The default implementation does nothing. It may be
overridden to extend subclasses.
__format__($self, format_spec, /)
Default object formatter.
__sizeof__($self, /)
Size of object in memory, in bytes.
__dir__($self, /)
Default dir() implementation.
 $(,048<
,FFFFFFFFFFFFFFFFFFFFFFFFFFFSFFFFFFFFFFFFFFFFZaFx}FFFFFFFFFFFF
FFFF
FFFFFF
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str
Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.
encode($self, /, encoding='utf-8', errors='strict')
Encode the string using the codec registered for encoding.
  encoding
    The encoding in which to encode the string.
  errors
    The error handling scheme to use for encoding errors.
    The default is 'strict' meaning that encoding errors raise a
    UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
    'xmlcharrefreplace' as well as any other name registered with
    codecs.register_error that can handle UnicodeEncodeErrors.
replace($self, old, new, count=-1, /)
Return a copy with all occurrences of substring old replaced by new.
  count
    Maximum number of occurrences to replace.
    -1 (the default value) means replace all occurrences.
If the optional argument count is given, only the first count occurrences are
replaced.
split($self, /, sep=None, maxsplit=-1)
Return a list of the words in the string, using sep as the delimiter string.
  sep
    The delimiter according which to split the string.
    None (the default value) means split according to any whitespace,
    and discard empty strings from the result.
  maxsplit
    Maximum number of splits to do.
    -1 (the default value) means no limit.
rsplit($self, /, sep=None, maxsplit=-1)
Return a list of the words in the string, using sep as the delimiter string.
  sep
    The delimiter according which to split the string.
    None (the default value) means split according to any whitespace,
    and discard empty strings from the result.
  maxsplit
    Maximum number of splits to do.
    -1 (the default value) means no limit.
Splits are done starting at the end of the string and working to the front.
join($self, iterable, /)
Concatenate any number of strings.
The string whose method is called is inserted in between each given string.
The result is returned as a new string.
Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'
capitalize($self, /)
Return a capitalized version of the string.
More specifically, make the first character have upper case and the rest lower
case.
casefold($self, /)
Return a version of the string suitable for caseless comparisons.
title($self, /)
Return a version of the string where each word is titlecased.
More specifically, words start with uppercased characters and all remaining
cased characters have lower case.
center($self, width, fillchar=' ', /)
Return a centered string of length width.
Padding is done using the specified fill character (default is a space).
S.count(sub[, start[, end]]) -> int
Return the number of non-overlapping occurrences of substring sub in
string S[start:end].  Optional arguments start and end are
interpreted as in slice notation.
expandtabs($self, /, tabsize=8)
Return a copy where all tab characters are expanded using spaces.
If tabsize is not given, a tab size of 8 characters is assumed.
S.find(sub[, start[, end]]) -> int
Return the lowest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
partition($self, sep, /)
Partition the string into three parts using the given separator.
This will search for the separator in the string.  If the separator is found,
returns a 3-tuple containing the part before the separator, the separator
itself, and the part after it.
If the separator is not found, returns a 3-tuple containing the original string
and two empty strings.
S.index(sub[, start[, end]]) -> int
Return the lowest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Raises ValueError when the substring is not found.
ljust($self, width, fillchar=' ', /)
Return a left-justified string of length width.
Padding is done using the specified fill character (default is a space).
lower($self, /)
Return a copy of the string converted to lowercase.
lstrip($self, chars=None, /)
Return a copy of the string with leading whitespace removed.
If chars is given and not None, remove characters in chars instead.
S.rfind(sub[, start[, end]]) -> int
Return the highest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Return -1 on failure.
S.rindex(sub[, start[, end]]) -> int
Return the highest index in S where substring sub is found,
such that sub is contained within S[start:end].  Optional
arguments start and end are interpreted as in slice notation.
Raises ValueError when the substring is not found.
rjust($self, width, fillchar=' ', /)
Return a right-justified string of length width.
Padding is done using the specified fill character (default is a space).
rstrip($self, chars=None, /)
Return a copy of the string with trailing whitespace removed.
If chars is given and not None, remove characters in chars instead.
rpartition($self, sep, /)
Partition the string into three parts using the given separator.
This will search for the separator in the string, starting at the end. If
the separator is found, returns a 3-tuple containing the part before the
separator, the separator itself, and the part after it.
If the separator is not found, returns a 3-tuple containing two empty strings
and the original string.
splitlines($self, /, keepends=False)
Return a list of the lines in the string, breaking at line boundaries.
Line breaks are not included in the resulting list unless keepends is given and
true.
strip($self, chars=None, /)
Return a copy of the string with leading and trailing whitespace removed.
If chars is given and not None, remove characters in chars instead.
swapcase($self, /)
Convert uppercase characters to lowercase and lowercase characters to uppercase.
translate($self, table, /)
Replace each character in the string using the given translation table.
  table
    Translation table, which must be a mapping of Unicode ordinals to
    Unicode ordinals, strings, or None.
The table must implement lookup/indexing via __getitem__, for instance a
dictionary or list.  If this operation raises LookupError, the character is
left untouched.  Characters mapped to None are deleted.
upper($self, /)
Return a copy of the string converted to uppercase.
S.startswith(prefix[, start[, end]]) -> bool
Return True if S starts with the specified prefix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
prefix can also be a tuple of strings to try.
S.endswith(suffix[, start[, end]]) -> bool
Return True if S ends with the specified suffix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
suffix can also be a tuple of strings to try.
removeprefix($self, prefix, /)
Return a str with the given prefix string removed if present.
If the string starts with the prefix string, return string[len(prefix):].
Otherwise, return a copy of the original string.
removesuffix($self, suffix, /)
Return a str with the given suffix string removed if present.
If the string ends with the suffix string and that suffix is not empty,
return string[:-len(suffix)]. Otherwise, return a copy of the original
string.
isascii($self, /)
Return True if all characters in the string are ASCII, False otherwise.
ASCII characters have code points in the range U+0000-U+007F.
Empty string is ASCII too.
islower($self, /)
Return True if the string is a lowercase string, False otherwise.
A string is lowercase if all cased characters in the string are lowercase and
there is at least one cased character in the string.
isupper($self, /)
Return True if the string is an uppercase string, False otherwise.
A string is uppercase if all cased characters in the string are uppercase and
there is at least one cased character in the string.
istitle($self, /)
Return True if the string is a title-cased string, False otherwise.
In a title-cased string, upper- and title-case characters may only
follow uncased characters and lowercase characters only cased ones.
isspace($self, /)
Return True if the string is a whitespace string, False otherwise.
A string is whitespace if all characters in the string are whitespace and there
is at least one character in the string.
isdecimal($self, /)
Return True if the string is a decimal string, False otherwise.
A string is a decimal string if all characters in the string are decimal and
there is at least one character in the string.
isdigit($self, /)
Return True if the string is a digit string, False otherwise.
A string is a digit string if all characters in the string are digits and there
is at least one character in the string.
isnumeric($self, /)
Return True if the string is a numeric string, False otherwise.
A string is numeric if all characters in the string are numeric and there is at
least one character in the string.
isalpha($self, /)
Return True if the string is an alphabetic string, False otherwise.
A string is alphabetic if all characters in the string are alphabetic and there
is at least one character in the string.
isalnum($self, /)
Return True if the string is an alpha-numeric string, False otherwise.
A string is alpha-numeric if all characters in the string are alpha-numeric and
there is at least one character in the string.
isidentifier($self, /)
Return True if the string is a valid Python identifier, False otherwise.
Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
such as "def" or "class".
isprintable($self, /)
Return True if the string is printable, False otherwise.
A string is printable if all of its characters are considered printable in
repr() or if it is empty.
zfill($self, width, /)
Pad a numeric string with zeros on the left, to fill a field of the given width.
The string is never truncated.
S.format(*args, **kwargs) -> str
Return a formatted version of S, using substitutions from args and kwargs.
The substitutions are identified by braces ('{' and '}').
S.format_map(mapping) -> str
Return a formatted version of S, using substitutions from mapping.
The substitutions are identified by braces ('{' and '}').
__format__($self, format_spec, /)
Return a formatted version of the string as described by format_spec.
maketrans(x, y=<unrepresentable>, z=<unrepresentable>, /)
Return a translation table usable for str.translate().
If there is only one argument, it must be a dictionary mapping Unicode
ordinals (integers) or characters to Unicode ordinals, strings or None.
Character keys will be then converted to ordinals.
If there are two arguments, they must be strings of equal length, and
in the resulting dictionary, each character in x will be mapped to the
character at the same position in y. If there is a third argument, it
must be a string, whose characters will be mapped to None in the result.
__sizeof__($self, /)
Return the size of the string in memory, in bytes.
Private method returning an estimate of len(list(it)).
Return state information for pickling.
Set state information for unpickling.
_warnings provides basic warning filtering support.
It is a helper module to speed up interpreter start-up.
warn($module, /, message, category=None, stacklevel=1, source=None)
Issue a warning, or maybe ignore it or raise an exception.
Low-level interface to warnings functionality.
$*06<BH
2WWWWWWWWWWW
MWWWWWWWWWWWWWWWWWWWWWWWW,WWWWWWWW
drPPP
PPPPPPPPPPPPPPPWPPPPPPPPPPPPPPPPPPPPPPPPPP
 #&),/2
;vQTWhk
 %*/49>CH
h/258;>AD
777777777777
7 7$77777777777777777777777777777/777777777777777777777777777773
48@]aeimq
filter(function or None, iterable) --> filter object
Return an iterator yielding those items of iterable for which function(item)
is true. If function is None, return the items that are true.
map(func, *iterables) --> map object
Make an iterator that computes the function using arguments from
each of the iterables.  Stops when the shortest iterable is exhausted.
zip(*iterables) --> A zip object yielding tuples until an input is exhausted.
   >>> list(zip('abcdefg', range(3), range(4)))
   [('a', 0, 0), ('b', 1, 1), ('c', 2, 2)]
The zip object yields n-length tuples, where n is the number of iterables
passed as positional arguments to zip().  The i-th element in every tuple
comes from the i-th iterable argument to zip().  This continues until the
shortest argument is exhausted.
Return state information for pickling.
Built-in functions, exceptions, and other objects.
Noteworthy: None is the `nil' object; Ellipsis represents `...' in slices.
__build_class__(func, name, /, *bases, [metaclass], **kwds) -> class
Internal helper function used by the class statement.
__import__(name, globals=None, locals=None, fromlist=(), level=0) -> module
Import a module. Because this function is meant for use by the Python
interpreter and not for general use, it is better to use
importlib.import_module() to programmatically import a module.
The globals argument is only used to determine the context;
they are not modified.  The locals argument is unused.  The fromlist
should be a list of names to emulate ``from name import ...'', or an
empty list to emulate ``import name''.
When importing a module from a package, note that __import__('A.B', ...)
returns package A when fromlist is empty, but its submodule B when
fromlist is not empty.  The level argument is used to determine whether to
perform absolute or relative imports: 0 is absolute, while a positive number
is the number of parent directories to search relative to the current module.
abs($module, x, /)
Return the absolute value of the argument.
all($module, iterable, /)
Return True if bool(x) is True for all values x in the iterable.
If the iterable is empty, return True.
any($module, iterable, /)
Return True if bool(x) is True for any x in the iterable.
If the iterable is empty, return False.
ascii($module, obj, /)
Return an ASCII-only representation of an object.
As repr(), return a string containing a printable representation of an
object, but escape the non-ASCII characters in the string returned by
repr() using \\x, \\u or \\U escapes. This generates a string similar
to that returned by repr() in Python 2.
bin($module, number, /)
Return the binary representation of an integer.
   >>> bin(2796202)
   '0b1010101010101010101010'
breakpoint(*args, **kws)
Call sys.breakpointhook(*args, **kws).  sys.breakpointhook() must accept
whatever arguments are passed.
By default, this drops you into the pdb debugger.
callable($module, obj, /)
Return whether the object is callable (i.e., some kind of function).
Note that classes are callable, as are instances of classes with a
__call__() method.
chr($module, i, /)
Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.
compile($module, /, source, filename, mode, flags=0,
        dont_inherit=False, optimize=-1, *, _feature_version=-1)
Compile source into a code object that can be executed by exec() or eval().
The source code may represent a Python module, statement or expression.
The filename will be used for run-time error messages.
The mode must be 'exec' to compile a module, 'single' to compile a
single (interactive) statement, or 'eval' to compile an expression.
The flags argument, if present, controls which future statements influence
the compilation of the code.
The dont_inherit argument, if true, stops the compilation inheriting
the effects of any future statements in effect in the code calling
compile; if absent or false these statements do influence the compilation,
in addition to any features explicitly specified.
delattr($module, obj, name, /)
Deletes the named attribute from the given object.
delattr(x, 'y') is equivalent to ``del x.y''
dir([object]) -> list of strings
If called without an argument, return the names in the current scope.
Else, return an alphabetized list of names comprising (some of) the attributes
of the given object, and of attributes reachable from it.
If the object supplies a method named __dir__, it will be used; otherwise
the default dir() logic is used and returns:
  for a module object: the module's attributes.
  for a class object:  its attributes, and recursively the attributes
    of its bases.
  for any other object: its attributes, its class's attributes, and
    recursively the attributes of its class's base classes.
divmod($module, x, y, /)
Return the tuple (x//y, x%y).  Invariant: div*y + mod == x.
eval($module, source, globals=None, locals=None, /)
Evaluate the given source in the context of globals and locals.
The source may be a string representing a Python expression
or a code object as returned by compile().
The globals must be a dictionary and locals can be any mapping,
defaulting to the current globals and locals.
If only globals is given, locals defaults to it.
exec($module, source, globals=None, locals=None, /)
Execute the given source in the context of globals and locals.
The source may be a string representing one or more Python statements
or a code object as returned by compile().
The globals must be a dictionary and locals can be any mapping,
defaulting to the current globals and locals.
If only globals is given, locals defaults to it.
format($module, value, format_spec='', /)
Return value.__format__(format_spec)
format_spec defaults to the empty string.
See the Format Specification Mini-Language section of help('FORMATTING') for
details.
getattr(object, name[, default]) -> value
Get a named attribute from an object; getattr(x, 'y') is equivalent to x.y.
When a default argument is given, it is returned when the attribute doesn't
exist; without it, an exception is raised in that case.
globals($module, /)
Return the dictionary containing the current scope's global variables.
NOTE: Updates to this dictionary *will* affect name lookups in the current
global scope and vice-versa.
hasattr($module, obj, name, /)
Return whether the object has an attribute with the given name.
This is done by calling getattr(obj, name) and catching AttributeError.
hash($module, obj, /)
Return the hash value for the given object.
Two objects that compare equal must also have the same hash value, but the
reverse is not necessarily true.
hex($module, number, /)
Return the hexadecimal representation of an integer.
   >>> hex(12648430)
   '0xc0ffee'
id($module, obj, /)
Return the identity of an object.
This is guaranteed to be unique among simultaneously existing objects.
(CPython uses the object's memory address.)
input($module, prompt=None, /)
Read a string from standard input.  The trailing newline is stripped.
The prompt string, if given, is printed to standard output without a
trailing newline before reading input.
If the user hits EOF (*nix: Ctrl-D, Windows: Ctrl-Z+Return), raise EOFError.
On *nix systems, readline is used if available.
isinstance($module, obj, class_or_tuple, /)
Return whether an object is an instance of a class or of a subclass thereof.
A tuple, as in ``isinstance(x, (A, B, ...))``, may be given as the target to
check against. This is equivalent to ``isinstance(x, A) or isinstance(x, B)
or ...`` etc.
issubclass($module, cls, class_or_tuple, /)
Return whether 'cls' is a derived from another class or is the same class.
A tuple, as in ``issubclass(x, (A, B, ...))``, may be given as the target to
check against. This is equivalent to ``issubclass(x, A) or issubclass(x, B)
or ...`` etc.
iter(iterable) -> iterator
iter(callable, sentinel) -> iterator
Get an iterator from an object.  In the first form, the argument must
supply its own iterator, or be a sequence.
In the second form, the callable is called until it returns the sentinel.
len($module, obj, /)
Return the number of items in a container.
locals($module, /)
Return a dictionary containing the current scope's local variables.
NOTE: Whether or not updates to this dictionary will affect name lookups in
the local scope and vice-versa is *implementation dependent* and not
covered by any backwards compatibility guarantees.
max(iterable, *[, default=obj, key=func]) -> value
max(arg1, arg2, *args, *[, key=func]) -> value
With a single iterable argument, return its biggest item. The
default keyword-only argument specifies an object to return if
the provided iterable is empty.
With two or more arguments, return the largest argument.
min(iterable, *[, default=obj, key=func]) -> value
min(arg1, arg2, *args, *[, key=func]) -> value
With a single iterable argument, return its smallest item. The
default keyword-only argument specifies an object to return if
the provided iterable is empty.
With two or more arguments, return the smallest argument.
next(iterator[, default])
Return the next item from the iterator. If default is given and the iterator
is exhausted, it is returned instead of raising StopIteration.
oct($module, number, /)
Return the octal representation of an integer.
   >>> oct(342391)
   '0o1234567'
ord($module, c, /)
Return the Unicode code point for a one-character string.
pow($module, /, base, exp, mod=None)
Equivalent to base**exp with 2 arguments or base**exp % mod with 3 arguments
Some types, such as ints, are able to use a more efficient algorithm when
invoked using the three argument form.
print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
Prints the values to a stream, or to sys.stdout by default.
Optional keyword arguments:
file:  a file-like object (stream); defaults to the current sys.stdout.
sep:   string inserted between values, default a space.
end:   string appended after the last value, default a newline.
flush: whether to forcibly flush the stream.
repr($module, obj, /)
Return the canonical string representation of the object.
For many object types, including most builtins, eval(repr(obj)) == obj.
round($module, /, number, ndigits=None)
Round a number to a given precision in decimal digits.
The return value is an integer if ndigits is omitted or None.  Otherwise
the return value has the same type as the number.  ndigits may be negative.
setattr($module, obj, name, value, /)
Sets the named attribute on the given object to the specified value.
setattr(x, 'y', v) is equivalent to ``x.y = v''
sorted($module, iterable, /, *, key=None, reverse=False)
Return a new list containing all items from the iterable in ascending order.
A custom key function can be supplied to customize the sort order, and the
reverse flag can be set to request the result in descending order.
sum($module, iterable, /, start=0)
Return the sum of a 'start' value (default: 0) plus an iterable of numbers
When the iterable is empty, return the start value.
This function is intended specifically for use with numeric values and may
reject non-numeric types.
vars([object]) -> dictionary
Without arguments, equivalent to locals().
With an argument, equivalent to object.__dict__.
)2
(5BV
!*789
;CKLONM
get($self, key, default=None, /)
Return the value for `key` if `key` has the value in the context object.
If `key` does not exist, return `default`. If `default` is not given,
return None.
items($self, /)
Return all variables and their values in the context object.
The result is returned as a list of 2-tuples (variable, value).
keys($self, /)
Return a list of all variables in the context object.
values($self, /)
Return a list of all variables' values in the context object.
copy($self, /)
Return a shallow copy of the context object.
get($self, default=<unrepresentable>, /)
Return a value for the context variable for the current context.
If there is no value for the variable in the current context, the method will:
 * return the value of the default argument of the method, if provided; or
 * return the default value for the context variable, if it was created
   with one; or
 * raise a LookupError.
set($self, value, /)
Call to set a new value for the context variable in the current context.
The required value argument is the new value for the context variable.
Returns a Token object that can be used to restore the variable to its previous
value via the `ContextVar.reset()` method.
reset($self, token, /)
Reset the context variable.
The variable is reset to the value it had before the `ContextVar.set()` that
created the token was used.
UnraisableHookArgs
Type used to pass arguments to sys.unraisablehook.
SSSSSSSSSSSSSSSSSSSSSSSS
.SSSSSSS
SS.S.S.S..Copyright (c) 2001-2021 Python Software Foundation.
All Rights Reserved.
Copyright (c) 2000 BeOpen.com.
All Rights Reserved.
Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.
Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved.
(Extremely) low-level import machinery bits as used by importlib and imp.
extension_suffixes($module, /)
Returns the list of file suffixes used to identify extension modules.
lock_held($module, /)
Return True if the import lock is currently held, else False.
On platforms without threads, return False.
acquire_lock($module, /)
Acquires the interpreter's import lock for the current thread.
This lock should be used by import hooks to ensure thread-safety when importing
modules. On platforms without threads, this function does nothing.
release_lock($module, /)
Release the interpreter's import lock.
On platforms without threads, this function does nothing.
get_frozen_object($module, name, /)
Create a code object for a frozen module.
is_frozen_package($module, name, /)
Returns True if the module name is of a frozen package.
create_builtin($module, spec, /)
Create an extension module.
init_frozen($module, name, /)
Initializes a frozen module.
is_builtin($module, name, /)
Returns True if the module name corresponds to a built-in module.
is_frozen($module, name, /)
Returns True if the module name corresponds to a frozen module.
create_dynamic($module, spec, file=<unrepresentable>, /)
Create an extension module.
exec_dynamic($module, mod, /)
Initialize an extension module.
exec_builtin($module, mod, /)
Initialize a built-in module.
_fix_co_filename($module, code, path, /)
Changes code.co_filename to specify the passed-in file path.
  code
    Code object to change.
  path
    File path to use.
source_hash($module, /, key, source)
usage: %ls [option] ... [-c cmd | -m mod | file | -] [arg] ...
Options and arguments (and corresponding environment variables):
-b     : issue warnings about str(bytes_instance), str(bytearray_instance)
         and comparing bytes/bytearray with str. (-bb: issue errors)
-B     : don't write .pyc files on import; also PYTHONDONTWRITEBYTECODE=x
-c cmd : program passed in as string (terminates option list)
-d     : turn on parser debugging output (for experts only, only works on
         debug builds); also PYTHONDEBUG=x
-E     : ignore PYTHON* environment variables (such as PYTHONPATH)
-h     : print this help message and exit (also --help)
-i     : inspect interactively after running script; forces a prompt even
         if stdin does not appear to be a terminal; also PYTHONINSPECT=x
-I     : isolate Python from the user's environment (implies -E and -s)
-m mod : run library module as a script (terminates option list)
-O     : remove assert and __debug__-dependent statements; add .opt-1 before
         .pyc extension; also PYTHONOPTIMIZE=x
-OO    : do -O changes and also discard docstrings; add .opt-2 before
         .pyc extension
-q     : don't print version and copyright messages on interactive startup
-s     : don't add user site directory to sys.path; also PYTHONNOUSERSITE
-S     : don't imply 'import site' on initialization
-u     : force the stdout and stderr streams to be unbuffered;
         this option has no effect on stdin; also PYTHONUNBUFFERED=x
-v     : verbose (trace import statements); also PYTHONVERBOSE=x
         can be supplied multiple times to increase verbosity
-V     : print the Python version number and exit (also --version)
         when given twice, print more information about the build
-W arg : warning control; arg is action:message:category:module:lineno
         also PYTHONWARNINGS=arg
-x     : skip first line of source, allowing use of non-Unix forms of #!cmd
-X opt : set implementation-specific option. The following options are available:
         -X faulthandler: enable faulthandler
         -X oldparser: enable the traditional LL(1) parser; also PYTHONOLDPARSER
         -X showrefcount: output the total reference count and number of used
             memory blocks when the program finishes or after each statement in the
             interactive interpreter. This only works on debug builds
         -X tracemalloc: start tracing Python memory allocations using the
             tracemalloc module. By default, only the most recent frame is stored in a
             traceback of a trace. Use -X tracemalloc=NFRAME to start tracing with a
             traceback limit of NFRAME frames
         -X importtime: show how long each import takes. It shows module name,
             cumulative time (including nested imports) and self time (excluding
             nested imports). Note that its output may be broken in multi-threaded
             application. Typical usage is python3 -X importtime -c 'import asyncio'
         -X dev: enable CPython's "development mode", introducing additional runtime
             checks which are too expensive to be enabled by default. Effect of the
             developer mode:
                * Add default warning filter, as -W default
                * Install debug hooks on memory allocators: see the PyMem_SetupDebugHooks() C function
                * Enable the faulthandler module to dump the Python traceback on a crash
                * Enable asyncio debug mode
                * Set the dev_mode attribute of sys.flags to True
                * io.IOBase destructor logs close() exceptions
         -X utf8: enable UTF-8 mode for operating system interfaces, overriding the default
             locale-aware mode. -X utf8=0 explicitly disables UTF-8 mode (even when it would
             otherwise activate automatically)
         -X pycache_prefix=PATH: enable writing .pyc files to a parallel tree rooted at the
             given directory instead of to the code tree
--check-hash-based-pycs always|default|never:
    control how Python invalidates hash-based .pyc files
file   : program read from script file
-      : program read from stdin (default; interactive mode if a tty)
arg ...: arguments passed to program in sys.argv[1:]
Other environment variables:
PYTHONSTARTUP: file executed on interactive startup (no default)
PYTHONPATH   : '%lc'-separated list of directories prefixed to the
               default module search path.  The result is sys.path.
PYTHONHOME   : alternate <prefix> directory (or <prefix>%lc<exec_prefix>).
               The default module search path uses %s.
PYTHONPLATLIBDIR : override sys.platlibdir.
PYTHONCASEOK : ignore case in 'import' statements (Windows).
PYTHONUTF8: if set to 1, enable the UTF-8 mode.
PYTHONIOENCODING: Encoding[:errors] used for stdin/stdout/stderr.
PYTHONFAULTHANDLER: dump the Python traceback on fatal errors.
PYTHONHASHSEED: if this variable is set to 'random', a random value is used
   to seed the hashes of str and bytes objects.  It can also be set to an
   integer in the range [0,4294967295] to get hash values with a
   predictable seed.
PYTHONMALLOC: set the Python memory allocators and/or install debug hooks
   on Python memory allocators. Use PYTHONMALLOC=debug to install debug
   hooks.
PYTHONCOERCECLOCALE: if this variable is set to 0, it disables the locale
   coercion behavior. Use PYTHONCOERCECLOCALE=warn to request display of
   locale coercion and locale compatibility warnings on stderr.
PYTHONBREAKPOINT: if this variable is set to 0, it disables the default
   debugger. It can be set to the callable of your debugger of choice.
PYTHONDEVMODE: enable the development mode.
PYTHONPYCACHEPREFIX: root directory for bytecode cache (pyc) files.
This module contains functions that can read and write Python values in
a binary format. The format is specific to Python, but independent of
machine architecture issues.
Not all Python object types are supported; in general, only objects
whose value is independent from a particular invocation of Python can be
written and read by this module. The following types are supported:
None, integers, floating point numbers, strings, bytes, bytearrays,
tuples, lists, sets, dictionaries, and code objects, where it
should be understood that tuples, lists and dictionaries are only
supported as long as the values contained therein are themselves
supported; and recursive lists and dictionaries should not be written
(they will cause infinite loops).
Variables:
version -- indicates the format that the module uses. Version 0 is the
    historical format, version 1 shares interned strings and version 2
    uses a binary format for floating point numbers.
    Version 3 shares common object references (New in version 3.4).
Functions:
dump() -- write value to a file
load() -- read value from a file
dumps() -- marshal value as a bytes object
loads() -- read value from a bytes-like object
dump($module, value, file, version=version, /)
Write the value on the open file.
  value
    Must be a supported type.
  file
    Must be a writeable binary file.
  version
    Indicates the data format that dump should use.
If the value has (or contains an object that has) an unsupported type, a
ValueError exception is raised - but garbage data will also be written
to the file. The object will not be properly read back by load().
load($module, file, /)
Read one value from the open file and return it.
  file
    Must be readable binary file.
If no valid value is read (e.g. because the data has a different Python
version's incompatible marshal format), raise EOFError, ValueError or
TypeError.
Note: If an object containing an unsupported type was marshalled with
dump(), load() will substitute None for the unmarshallable type.
dumps($module, value, version=version, /)
Return the bytes object that would be written to a file by dump(value, file).
  value
    Must be a supported type.
  version
    Indicates the data format that dumps should use.
Raise a ValueError exception if value has (or contains an object that has) an
unsupported type.
loads($module, bytes, /)
Convert the bytes-like object to a value.
If no valid value is found, raise EOFError, ValueError or TypeError.  Extra
bytes in the input are ignored.
%NN3NNNA
UUUUUUUU
?33333333
UUUUUUU
P^Cy
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~
Python detected LC_CTYPE=C: LC_CTYPE coerced to %.20s (set another locale or PYTHONCOERCECLOCALE=0 to disable this locale coercion behavior).
#*.5<GKO
The above exception was the direct cause of the following exception:
During handling of the above exception, another exception occurred:
%(+.14
7:CMPS
/?OU`
This module provides access to some objects used or maintained by the
interpreter and to functions that interact strongly with the interpreter.
Dynamic objects:
argv -- command line arguments; argv[0] is the script pathname if known
path -- module search path; path[0] is the script directory, else ''
modules -- dictionary of loaded modules
displayhook -- called to show results in an interactive session
excepthook -- called to handle any uncaught exception other than SystemExit
  To customize printing in an interactive session or to install a custom
  top-level exception handler, assign other functions to replace these.
stdin -- standard input file object; used by input()
stdout -- standard output file object; used by print()
stderr -- standard error object; used for error messages
  By assigning other file objects (or objects that behave like files)
  to these, it is possible to redirect all of the interpreter's I/O.
last_type -- type of last uncaught exception
last_value -- value of last uncaught exception
last_traceback -- traceback of last uncaught exception
  These three are only available in an interactive session after a
  traceback has been printed.
Static objects:
builtin_module_names -- tuple of module names built into this interpreter
copyright -- copyright notice pertaining to this interpreter
exec_prefix -- prefix used to find the machine-specific Python library
executable -- absolute path of the executable binary of the Python interpreter
float_info -- a named tuple with information about the float implementation.
float_repr_style -- string indicating the style of repr() output for floats
hash_info -- a named tuple with information about the hash algorithm.
hexversion -- version information encoded as a single integer
implementation -- Python implementation information.
int_info -- a named tuple with information about the int implementation.
maxsize -- the largest supported length of containers.
maxunicode -- the value of the largest Unicode code point
platform -- platform identifier
prefix -- prefix used to find the Python library
thread_info -- a named tuple with information about the thread implementation.
version -- the version of this interpreter as a string
version_info -- version information as a named tuple
__stdin__ -- the original stdin; don't touch!
__stdout__ -- the original stdout; don't touch!
__stderr__ -- the original stderr; don't touch!
__displayhook__ -- the original displayhook; don't touch!
__excepthook__ -- the original excepthook; don't touch!
Functions:
displayhook() -- print an object to the screen, and save it in builtins._
excepthook() -- print an exception and its traceback to sys.stderr
exc_info() -- return thread-safe information about the current exception
exit() -- exit the interpreter by raising SystemExit
getdlopenflags() -- returns flags to be used for dlopen() calls
getprofile() -- get the global profiling function
getrefcount() -- return the reference count for an object (plus one :-)
getrecursionlimit() -- return the max recursion depth for the interpreter
getsizeof() -- return the size of an object in bytes
gettrace() -- get the global debug tracing function
setdlopenflags() -- set the flags to be used for dlopen() calls
setprofile() -- set the global profiling function
setrecursionlimit() -- set the max recursion depth for the interpreter
settrace() -- set the global debug tracing function
addaudithook($module, /, hook)
Adds a new audit hook callback.
audit(event, *args)
Passes the event to any audit hooks that are attached.
breakpointhook(*args, **kws)
This hook function is called by built-in breakpoint().
_clear_type_cache($module, /)
Clear the internal type lookup cache.
_current_frames($module, /)
Return a dict mapping each thread's thread id to its current stack frame.
This function should be used for specialized purposes only.
displayhook($module, object, /)
Print an object to sys.stdout and also save it in builtins._
exc_info($module, /)
Return current exception information: (type, value, traceback).
Return information about the most recent exception caught by an except
clause in the current stack frame or in an older stack frame.
excepthook($module, exctype, value, traceback, /)
Handle an exception by displaying it with a traceback on sys.stderr.
exit($module, status=None, /)
Exit the interpreter by raising SystemExit(status).
If the status is omitted or None, it defaults to zero (i.e., success).
If the status is an integer, it will be used as the system exit status.
If it is another kind of object, it will be printed and the system
exit status will be one (i.e., failure).
getdefaultencoding($module, /)
Return the current default encoding used by the Unicode implementation.
getdlopenflags($module, /)
Return the current value of the flags that are used for dlopen calls.
The flag constants are defined in the os module.
getallocatedblocks($module, /)
Return the number of memory blocks currently allocated.
getfilesystemencoding($module, /)
Return the encoding used to convert Unicode filenames to OS filenames.
getfilesystemencodeerrors($module, /)
Return the error mode used Unicode to OS filename conversion.
getrefcount($module, object, /)
Return the reference count of object.
The count returned is generally one higher than you might expect,
because it includes the (temporary) reference as an argument to
getrefcount().
getrecursionlimit($module, /)
Return the current value of the recursion limit.
The recursion limit is the maximum depth of the Python interpreter
stack.  This limit prevents infinite recursion from causing an overflow
of the C stack and crashing Python.
getsizeof(object [, default]) -> int
Return the size of object in bytes.
_getframe($module, depth=0, /)
Return a frame object from the call stack.
If optional integer depth is given, return the frame object that many
calls below the top of the stack.  If that is deeper than the call
stack, ValueError is raised.  The default for depth is zero, returning
the frame at the top of the call stack.
This function should be used for internal and specialized purposes
only.
intern($module, string, /)
``Intern'' the given string.
This enters the string in the (global) table of interned strings whose
purpose is to speed up dictionary lookups. Return the string itself or
the previously interned string object with the same value.
is_finalizing($module, /)
Return True if Python is exiting.
setswitchinterval($module, interval, /)
Set the ideal thread switching delay inside the Python interpreter.
The actual frequency of switching threads can be lower if the
interpreter executes long sequences of uninterruptible code
(this is implementation-specific and workload-dependent).
The parameter must represent the desired switching delay in seconds
A typical value is 0.005 (5 milliseconds).
getswitchinterval($module, /)
Return the current thread switch interval; see sys.setswitchinterval().
setdlopenflags($module, flags, /)
Set the flags used by the interpreter for dlopen calls.
This is used, for example, when the interpreter loads extension
modules. Among other things, this will enable a lazy resolving of
symbols when importing a module, if called as sys.setdlopenflags(0).
To share symbols across extension modules, call as
sys.setdlopenflags(os.RTLD_GLOBAL).  Symbolic names for the flag
modules can be found in the os module (RTLD_xxx constants, e.g.
os.RTLD_LAZY).
setprofile(function)
Set the profiling function.  It will be called on each function call
and return.  See the profiler chapter in the library manual.
getprofile($module, /)
Return the profiling function set with sys.setprofile.
See the profiler chapter in the library manual.
setrecursionlimit($module, limit, /)
Set the maximum depth of the Python interpreter stack to n.
This limit prevents infinite recursion from causing an overflow of the C
stack and crashing Python.  The highest possible limit is platform-
dependent.
settrace(function)
Set the global debug tracing function.  It will be called on each
function call.  See the debugger chapter in the library manual.
gettrace($module, /)
Return the global debug tracing function set with sys.settrace.
See the debugger chapter in the library manual.
call_tracing($module, func, args, /)
Call func(*args), while tracing is enabled.
The tracing state is saved, and restored afterwards.  This is intended
to be called from a debugger from a checkpoint, to recursively debug
some other code.
_debugmallocstats($module, /)
Print summary info to stderr about the state of pymalloc's structures.
In Py_DEBUG mode, also perform some expensive internal consistency
checks.
set_coroutine_origin_tracking_depth($module, /, depth)
Enable or disable origin tracking for coroutine objects in this thread.
Coroutine objects will track 'depth' frames of traceback information
about where they came from, available in their cr_origin attribute.
Set a depth of 0 to disable.
get_coroutine_origin_tracking_depth($module, /)
Check status of origin tracking for coroutine objects in this thread.
set_asyncgen_hooks(* [, firstiter] [, finalizer])
Set a finalizer for async generators objects.
get_asyncgen_hooks($module, /)
Return the installed asynchronous generators hooks.
This returns a namedtuple of the form (firstiter, finalizer).
unraisablehook($module, unraisable, /)
Handle an unraisable exception.
The unraisable argument has the following attributes:
* exc_type: Exception type.
* exc_value: Exception value, can be None.
* exc_traceback: Exception traceback, can be None.
* err_msg: Error message, can be None.
* object: Object causing the exception, can be None.
hash_info
A named tuple providing parameters used for computing
hashes. The attributes are read only.
sys.version_info
Version information as a named tuple.
sys.flags
Flags provided through command line arguments or environment vars.
asyncgen_hooks
A named tuple providing information about asynchronous
generators hooks.  The attributes are read only.
sys.thread_info
A named tuple holding information about the thread implementation.
TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno)
Create a new traceback object.
JJJJJJJJJJJJJJJJJJJJJJJJJJJJJ
JJJJJJJJJJN
Infinity
vH7B
W4vC
O8M2
[%Co
************************************
*******************************
****************#*********#*
*******#********#
GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
GGGGGGGGGGGGGGGG
GGGGGGGGG
GGGGGG
GGGGGGGG
EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
This module provides access to the garbage collector for reference cycles.
enable() -- Enable automatic garbage collection.
disable() -- Disable automatic garbage collection.
isenabled() -- Returns true if automatic collection is enabled.
collect() -- Do a full collection right now.
get_count() -- Return the current collection counts.
get_stats() -- Return list of dictionaries containing per-generation stats.
set_debug() -- Set debugging flags.
get_debug() -- Get debugging flags.
set_threshold() -- Set the collection thresholds.
get_threshold() -- Return the current the collection thresholds.
get_objects() -- Return a list of all objects tracked by the collector.
is_tracked() -- Returns true if a given object is tracked.
is_finalized() -- Returns true if a given object has been already finalized.
get_referrers() -- Return the list of objects that refer to an object.
get_referents() -- Return the list of objects that an object refers to.
freeze() -- Freeze all tracked objects and ignore them for future collections.
unfreeze() -- Unfreeze all objects in the permanent generation.
get_freeze_count() -- Return the number of objects in the permanent generation.
enable($module, /)
Enable automatic garbage collection.
disable($module, /)
Disable automatic garbage collection.
isenabled($module, /)
Returns true if automatic garbage collection is enabled.
set_debug($module, flags, /)
Set the garbage collection debugging flags.
  flags
    An integer that can have the following bits turned on:
      DEBUG_STATS - Print statistics during collection.
      DEBUG_COLLECTABLE - Print collectable objects found.
      DEBUG_UNCOLLECTABLE - Print unreachable but uncollectable objects
        found.
      DEBUG_SAVEALL - Save objects to gc.garbage rather than freeing them.
      DEBUG_LEAK - Debug leaking programs (everything but STATS).
Debugging information is written to sys.stderr.
get_debug($module, /)
Get the garbage collection debugging flags.
get_count($module, /)
Return a three-tuple of the current collection counts.
set_threshold(threshold0, [threshold1, threshold2]) -> None
Sets the collection thresholds.  Setting threshold0 to zero disables
collection.
get_threshold($module, /)
Return the current collection thresholds.
collect($module, /, generation=2)
Run the garbage collector.
With no arguments, run a full collection.  The optional argument
may be an integer specifying which generation to collect.  A ValueError
is raised if the generation number is invalid.
The number of unreachable objects is returned.
get_objects($module, /, generation=None)
Return a list of objects tracked by the collector (excluding the list returned).
  generation
    Generation to extract the objects from.
If generation is not None, return only the objects tracked by the collector
that are in that generation.
get_stats($module, /)
Return a list of dictionaries containing per-generation statistics.
is_tracked($module, obj, /)
Returns true if the object is tracked by the garbage collector.
Simple atomic objects will return false.
is_finalized($module, obj, /)
Returns true if the object has been already finalized by the GC.
get_referrers(*objs) -> list
Return the list of objects that directly refer to any of objs.
get_referents(*objs) -> list
Return the list of objects that are directly referred to by objs.
freeze($module, /)
Freeze all current tracked objects and ignore them for future collections.
This can be used before a POSIX fork() call to make the gc copy-on-write friendly.
Note: collection before a POSIX fork() call may free pages for future allocation
which can cause copy-on-write.
unfreeze($module, /)
Unfreeze all objects in the permanent generation.
Put all objects in the permanent generation back into oldest generation.
get_freeze_count($module, /)
Return the number of objects in the permanent generation.
'4This module provides access to operating system functionality that is
standardized by the C Standard and the POSIX standard (a thinly
disguised Unix interface).  Refer to the library manual and
corresponding Unix manual entries for more information on calls.
stat($module, /, path, *, dir_fd=None, follow_symlinks=True)
Perform a stat system call on the given path.
  path
    Path to be examined; can be string, bytes, a path-like object or
    open-file-descriptor int.
  dir_fd
    If not None, it should be a file descriptor open to a directory,
    and path should be a relative string; path will then be relative to
    that directory.
  follow_symlinks
    If False, and the last element of the path is a symbolic link,
    stat will examine the symbolic link itself instead of the file
    the link points to.
dir_fd and follow_symlinks may not be implemented
  on your platform.  If they are unavailable, using them will raise a
  NotImplementedError.
It's an error to use dir_fd or follow_symlinks when specifying path as
  an open file descriptor.
access($module, /, path, mode, *, dir_fd=None, effective_ids=False,
       follow_symlinks=True)
Use the real uid/gid to test for access to a path.
  path
    Path to be tested; can be string, bytes, or a path-like object.
  mode
    Operating-system mode bitfield.  Can be F_OK to test existence,
    or the inclusive-OR of R_OK, W_OK, and X_OK.
  dir_fd
    If not None, it should be a file descriptor open to a directory,
    and path should be relative; path will then be relative to that
    directory.
  effective_ids
    If True, access will use the effective uid/gid instead of
    the real uid/gid.
  follow_symlinks
    If False, and the last element of the path is a symbolic link,
    access will examine the symbolic link itself instead of the file
    the link points to.
dir_fd, effective_ids, and follow_symlinks may not be implemented
  on your platform.  If they are unavailable, using them will raise a
  NotImplementedError.
Note that most operations will use the effective uid/gid, therefore this
  routine can be used in a suid/sgid environment to test if the invoking user
  has the specified access to the path.
ttyname($module, fd, /)
Return the name of the terminal device connected to 'fd'.
  fd
    Integer file descriptor handle.
chdir($module, /, path)
Change the current working directory to the specified path.
path may always be specified as a string.
On some platforms, path may also be specified as an open file descriptor.
  If this functionality is unavailable, using it raises an exception.
chflags($module, /, path, flags, follow_symlinks=True)
Set file flags.
If follow_symlinks is False, and the last element of the path is a symbolic
  link, chflags will change flags on the symbolic link itself instead of the
  file the link points to.
follow_symlinks may not be implemented on your platform.  If it is
unavailable, using it will raise a NotImplementedError.
chmod($module, /, path, mode, *, dir_fd=None, follow_symlinks=True)
Change the access permissions of a file.
  path
    Path to be modified.  May always be specified as a str, bytes, or a path-like object.
    On some platforms, path may also be specified as an open file descriptor.
    If this functionality is unavailable, using it raises an exception.
  mode
    Operating-system mode bitfield.
  dir_fd
    If not None, it should be a file descriptor open to a directory,
    and path should be relative; path will then be relative to that
    directory.
  follow_symlinks
    If False, and the last element of the path is a symbolic link,
    chmod will modify the symbolic link itself instead of the file
    the link points to.
It is an error to use dir_fd or follow_symlinks when specifying path as
  an open file descriptor.
dir_fd and follow_symlinks may not be implemented on your platform.
  If they are unavailable, using them will raise a NotImplementedError.
fchmod($module, /, fd, mode)
Change the access permissions of the file given by file descriptor fd.
Equivalent to os.chmod(fd, mode).
lchmod($module, /, path, mode)
Change the access permissions of a file, without following symbolic links.
If path is a symlink, this affects the link itself rather than the target.
Equivalent to chmod(path, mode, follow_symlinks=False)."
chown($module, /, path, uid, gid, *, dir_fd=None, follow_symlinks=True)
Change the owner and group id of path to the numeric uid and gid.\
  path
    Path to be examined; can be string, bytes, a path-like object, or open-file-descriptor int.
  dir_fd
    If not None, it should be a file descriptor open to a directory,
    and path should be relative; path will then be relative to that
    directory.
  follow_symlinks
    If False, and the last element of the path is a symbolic link,
    stat will examine the symbolic link itself instead of the file
    the link points to.
path may always be specified as a string.
On some platforms, path may also be specified as an open file descriptor.
  If this functionality is unavailable, using it raises an exception.
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
If follow_symlinks is False, and the last element of the path is a symbolic
  link, chown will modify the symbolic link itself instead of the file the
  link points to.
It is an error to use dir_fd or follow_symlinks when specifying path as
  an open file descriptor.
dir_fd and follow_symlinks may not be implemented on your platform.
  If they are unavailable, using them will raise a NotImplementedError.
fchown($module, /, fd, uid, gid)
Change the owner and group id of the file specified by file descriptor.
Equivalent to os.chown(fd, uid, gid).
lchown($module, /, path, uid, gid)
Change the owner and group id of path to the numeric uid and gid.
This function will not follow symbolic links.
Equivalent to os.chown(path, uid, gid, follow_symlinks=False).
lchflags($module, /, path, flags)
Set file flags.
This function will not follow symbolic links.
Equivalent to chflags(path, flags, follow_symlinks=False).
chroot($module, /, path)
Change root directory to path.
ctermid($module, /)
Return the name of the controlling terminal for this process.
getcwd($module, /)
Return a unicode string representing the current working directory.
getcwdb($module, /)
Return a bytes string representing the current working directory.
link($module, /, src, dst, *, src_dir_fd=None, dst_dir_fd=None,
     follow_symlinks=True)
Create a hard link to a file.
If either src_dir_fd or dst_dir_fd is not None, it should be a file
  descriptor open to a directory, and the respective path string (src or dst)
  should be relative; the path will then be relative to that directory.
If follow_symlinks is False, and the last element of src is a symbolic
  link, link will create a link to the symbolic link itself instead of the
  file the link points to.
src_dir_fd, dst_dir_fd, and follow_symlinks may not be implemented on your
  platform.  If they are unavailable, using them will raise a
  NotImplementedError.
listdir($module, /, path=None)
Return a list containing the names of the files in the directory.
path can be specified as either str, bytes, or a path-like object.  If path is bytes,
  the filenames returned will also be bytes; in all other circumstances
  the filenames returned will be str.
If path is None, uses the path='.'.
On some platforms, path may also be specified as an open file descriptor;\
  the file descriptor must refer to a directory.
  If this functionality is unavailable, using it raises NotImplementedError.
The list is in arbitrary order.  It does not include the special
entries '.' and '..' even if they are present in the directory.
lstat($module, /, path, *, dir_fd=None)
Perform a stat system call on the given path, without following symbolic links.
Like stat(), but do not follow symbolic links.
Equivalent to stat(path, follow_symlinks=False).
mkdir($module, /, path, mode=511, *, dir_fd=None)
Create a directory.
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.
  If it is unavailable, using it will raise a NotImplementedError.
The mode argument is ignored on Windows.
nice($module, increment, /)
Add increment to the priority of process and return the new priority.
getpriority($module, /, which, who)
Return program scheduling priority.
setpriority($module, /, which, who, priority)
Set program scheduling priority.
posix_spawn($module, path, argv, env, /, *, file_actions=(),
            setpgroup=<unrepresentable>, resetids=False, setsid=False,
            setsigmask=(), setsigdef=(), scheduler=<unrepresentable>)
Execute the program specified by path in a new process.
  path
    Path of executable file.
  argv
    Tuple or list of strings.
  env
    Dictionary of strings mapping to strings.
  file_actions
    A sequence of file action tuples.
  setpgroup
    The pgroup to use with the POSIX_SPAWN_SETPGROUP flag.
  resetids
    If the value is `true` the POSIX_SPAWN_RESETIDS will be activated.
  setsid
    If the value is `true` the POSIX_SPAWN_SETSID or POSIX_SPAWN_SETSID_NP will be activated.
  setsigmask
    The sigmask to use with the POSIX_SPAWN_SETSIGMASK flag.
  setsigdef
    The sigmask to use with the POSIX_SPAWN_SETSIGDEF flag.
  scheduler
    A tuple with the scheduler policy (optional) and parameters.
posix_spawnp($module, path, argv, env, /, *, file_actions=(),
             setpgroup=<unrepresentable>, resetids=False, setsid=False,
             setsigmask=(), setsigdef=(), scheduler=<unrepresentable>)
Execute the program specified by path in a new process.
  path
    Path of executable file.
  argv
    Tuple or list of strings.
  env
    Dictionary of strings mapping to strings.
  file_actions
    A sequence of file action tuples.
  setpgroup
    The pgroup to use with the POSIX_SPAWN_SETPGROUP flag.
  resetids
    If the value is `True` the POSIX_SPAWN_RESETIDS will be activated.
  setsid
    If the value is `True` the POSIX_SPAWN_SETSID or POSIX_SPAWN_SETSID_NP will be activated.
  setsigmask
    The sigmask to use with the POSIX_SPAWN_SETSIGMASK flag.
  setsigdef
    The sigmask to use with the POSIX_SPAWN_SETSIGDEF flag.
  scheduler
    A tuple with the scheduler policy (optional) and parameters.
readlink($module, /, path, *, dir_fd=None)
Return a string representing the path to which the symbolic link points.
If dir_fd is not None, it should be a file descriptor open to a directory,
and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.  If it is unavailable,
using it will raise a NotImplementedError.
rename($module, /, src, dst, *, src_dir_fd=None, dst_dir_fd=None)
Rename a file or directory.
If either src_dir_fd or dst_dir_fd is not None, it should be a file
  descriptor open to a directory, and the respective path string (src or dst)
  should be relative; the path will then be relative to that directory.
src_dir_fd and dst_dir_fd, may not be implemented on your platform.
  If they are unavailable, using them will raise a NotImplementedError.
replace($module, /, src, dst, *, src_dir_fd=None, dst_dir_fd=None)
Rename a file or directory, overwriting the destination.
If either src_dir_fd or dst_dir_fd is not None, it should be a file
  descriptor open to a directory, and the respective path string (src or dst)
  should be relative; the path will then be relative to that directory.
src_dir_fd and dst_dir_fd, may not be implemented on your platform.
  If they are unavailable, using them will raise a NotImplementedError.
rmdir($module, /, path, *, dir_fd=None)
Remove a directory.
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.
  If it is unavailable, using it will raise a NotImplementedError.
symlink($module, /, src, dst, target_is_directory=False, *, dir_fd=None)
Create a symbolic link pointing to src named dst.
target_is_directory is required on Windows if the target is to be
  interpreted as a directory.  (On Windows, symlink requires
  Windows 6.0 or greater, and raises a NotImplementedError otherwise.)
  target_is_directory is ignored on non-Windows platforms.
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.
  If it is unavailable, using it will raise a NotImplementedError.
system($module, /, command)
Execute the command in a subshell.
umask($module, mask, /)
Set the current numeric umask and return the previous umask.
uname($module, /)
Return an object identifying the current operating system.
The object behaves like a named tuple with the following fields:
  (sysname, nodename, release, version, machine)
unlink($module, /, path, *, dir_fd=None)
Remove a file (same as remove()).
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.
  If it is unavailable, using it will raise a NotImplementedError.
remove($module, /, path, *, dir_fd=None)
Remove a file (same as unlink()).
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.
  If it is unavailable, using it will raise a NotImplementedError.
utime($module, /, path, times=None, *, ns=<unrepresentable>,
      dir_fd=None, follow_symlinks=True)
Set the access and modified time of path.
path may always be specified as a string.
On some platforms, path may also be specified as an open file descriptor.
  If this functionality is unavailable, using it raises an exception.
If times is not None, it must be a tuple (atime, mtime);
    atime and mtime should be expressed as float seconds since the epoch.
If ns is specified, it must be a tuple (atime_ns, mtime_ns);
    atime_ns and mtime_ns should be expressed as integer nanoseconds
    since the epoch.
If times is None and ns is unspecified, utime uses the current time.
Specifying tuples for both times and ns is an error.
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
If follow_symlinks is False, and the last element of the path is a symbolic
  link, utime will modify the symbolic link itself instead of the file the
  link points to.
It is an error to use dir_fd or follow_symlinks when specifying path
  as an open file descriptor.
dir_fd and follow_symlinks may not be available on your platform.
  If they are unavailable, using them will raise a NotImplementedError.
times($module, /)
Return a collection containing process timing information.
The object returned behaves like a named tuple with these fields:
  (utime, stime, cutime, cstime, elapsed_time)
All fields are floating point numbers.
_exit($module, /, status)
Exit to the system with specified status, without normal exit processing.
_fcopyfile($module, in_fd, out_fd, flags, /)
Efficiently copy content or metadata of 2 regular file descriptors (macOS).
execv($module, path, argv, /)
Execute an executable path with arguments, replacing current process.
  path
    Path of executable file.
  argv
    Tuple or list of strings.
execve($module, /, path, argv, env)
Execute an executable path with arguments, replacing current process.
  path
    Path of executable file.
  argv
    Tuple or list of strings.
  env
    Dictionary of strings mapping to strings.
fork($module, /)
Fork a child process.
Return 0 to child process and PID of child to parent process.
register_at_fork($module, /, *, before=<unrepresentable>,
                 after_in_child=<unrepresentable>,
                 after_in_parent=<unrepresentable>)
Register callables to be called when forking a new process.
  before
    A callable to be called in the parent before the fork() syscall.
  after_in_child
    A callable to be called in the child after fork().
  after_in_parent
    A callable to be called in the parent after fork().
'before' callbacks are called in reverse order.
'after_in_child' and 'after_in_parent' callbacks are called in order.
sched_get_priority_max($module, /, policy)
Get the maximum scheduling priority for policy.
sched_get_priority_min($module, /, policy)
Get the minimum scheduling priority for policy.
sched_yield($module, /)
Voluntarily relinquish the CPU.
openpty($module, /)
Open a pseudo-terminal.
Return a tuple of (master_fd, slave_fd) containing open file descriptors
for both the master and slave ends.
forkpty($module, /)
Fork a new process with a new pseudo-terminal as controlling tty.
Returns a tuple of (pid, master_fd).
Like fork(), return pid of 0 to the child process,
and pid of child to the parent process.
To both, return fd of newly opened pseudo-terminal.
getegid($module, /)
Return the current process's effective group id.
geteuid($module, /)
Return the current process's effective user id.
getgid($module, /)
Return the current process's group id.
getgrouplist($module, user, group, /)
Returns a list of groups to which a user belongs.
  user
    username to lookup
  group
    base group id of the user
getgroups($module, /)
Return list of supplemental group IDs for the process.
getpid($module, /)
Return the current process id.
getpgrp($module, /)
Return the current process group id.
getppid($module, /)
Return the parent's process id.
If the parent process has already exited, Windows machines will still
return its id; others systems will return the id of the 'init' process (1).
getuid($module, /)
Return the current process's user id.
getlogin($module, /)
Return the actual login name.
kill($module, pid, signal, /)
Kill a process with a signal.
killpg($module, pgid, signal, /)
Kill a process group with a signal.
setuid($module, uid, /)
Set the current process's user id.
seteuid($module, euid, /)
Set the current process's effective user id.
setreuid($module, ruid, euid, /)
Set the current process's real and effective user ids.
setgid($module, gid, /)
Set the current process's group id.
setegid($module, egid, /)
Set the current process's effective group id.
setregid($module, rgid, egid, /)
Set the current process's real and effective group ids.
setgroups($module, groups, /)
Set the groups of the current process to list.
initgroups($module, username, gid, /)
Initialize the group access list.
Call the system initgroups() to initialize the group access list with all of
the groups of which the specified username is a member, plus the specified
group id.
getpgid($module, /, pid)
Call the system call getpgid(), and return the result.
setpgrp($module, /)
Make the current process the leader of its process group.
wait($module, /)
Wait for completion of a child process.
Returns a tuple of information about the child process:
    (pid, status)
wait3($module, /, options)
Wait for completion of a child process.
Returns a tuple of information about the child process:
  (pid, status, rusage)
wait4($module, /, pid, options)
Wait for completion of a specific child process.
Returns a tuple of information about the child process:
  (pid, status, rusage)
waitpid($module, pid, options, /)
Wait for completion of a given child process.
Returns a tuple of information regarding the child process:
    (pid, status)
The options argument is ignored on Windows.
getsid($module, pid, /)
Call the system call getsid(pid) and return the result.
setsid($module, /)
Call the system call setsid().
setpgid($module, pid, pgrp, /)
Call the system call setpgid(pid, pgrp).
tcgetpgrp($module, fd, /)
Return the process group associated with the terminal specified by fd.
tcsetpgrp($module, fd, pgid, /)
Set the process group associated with the terminal specified by fd.
open($module, /, path, flags, mode=511, *, dir_fd=None)
Open a file for low level IO.  Returns a file descriptor (integer).
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.
  If it is unavailable, using it will raise a NotImplementedError.
close($module, /, fd)
Close a file descriptor.
closerange($module, fd_low, fd_high, /)
Closes all file descriptors in [fd_low, fd_high), ignoring errors.
device_encoding($module, /, fd)
Return a string describing the encoding of a terminal's file descriptor.
The file descriptor must be attached to a terminal.
If the device is not a terminal, return None.
dup($module, fd, /)
Return a duplicate of a file descriptor.
dup2($module, /, fd, fd2, inheritable=True)
Duplicate file descriptor.
lockf($module, fd, command, length, /)
Apply, test or remove a POSIX lock on an open file descriptor.
  fd
    An open file descriptor.
  command
    One of F_LOCK, F_TLOCK, F_ULOCK or F_TEST.
  length
    The number of bytes to lock, starting at the current position.
lseek($module, fd, position, how, /)
Set the position of a file descriptor.  Return the new position.
Return the new cursor position in number of bytes
relative to the beginning of the file.
read($module, fd, length, /)
Read from a file descriptor.  Returns a bytes object.
readv($module, fd, buffers, /)
Read from a file descriptor fd into an iterable of buffers.
The buffers should be mutable buffers accepting bytes.
readv will transfer data into each buffer until it is full
and then move on to the next buffer in the sequence to hold
the rest of the data.
readv returns the total number of bytes read,
which may be less than the total capacity of all the buffers.
pread($module, fd, length, offset, /)
Read a number of bytes from a file descriptor starting at a particular offset.
Read length bytes from file descriptor fd, starting at offset bytes from
the beginning of the file.  The file offset remains unchanged.
preadv($module, fd, buffers, offset, flags=0, /)
Reads from a file descriptor into a number of mutable bytes-like objects.
Combines the functionality of readv() and pread(). As readv(), it will
transfer data into each buffer until it is full and then move on to the next
buffer in the sequence to hold the rest of the data. Its fourth argument,
specifies the file offset at which the input operation is to be performed. It
will return the total number of bytes read (which can be less than the total
capacity of all the objects).
The flags argument contains a bitwise OR of zero or more of the following flags:
- RWF_HIPRI
- RWF_NOWAIT
Using non-zero flags requires Linux 4.6 or newer.
write($module, fd, data, /)
Write a bytes object to a file descriptor.
writev($module, fd, buffers, /)
Iterate over buffers, and write the contents of each to a file descriptor.
Returns the total number of bytes written.
buffers must be a sequence of bytes-like objects.
pwrite($module, fd, buffer, offset, /)
Write bytes to a file descriptor starting at a particular offset.
Write buffer to fd, starting at offset bytes from the beginning of
the file.  Returns the number of bytes writte.  Does not change the
current file offset.
pwritev($module, fd, buffers, offset, flags=0, /)
Writes the contents of bytes-like objects to a file descriptor at a given offset.
Combines the functionality of writev() and pwrite(). All buffers must be a sequence
of bytes-like objects. Buffers are processed in array order. Entire contents of first
buffer is written before proceeding to second, and so on. The operating system may
set a limit (sysconf() value SC_IOV_MAX) on the number of buffers that can be used.
This function writes the contents of each object to the file descriptor and returns
the total number of bytes written.
The flags argument contains a bitwise OR of zero or more of the following flags:
- RWF_DSYNC
- RWF_SYNC
Using non-zero flags requires Linux 4.7 or newer.
sendfile($module, /, out_fd, in_fd, offset, count, headers=(),
         trailers=(), flags=0)
Copy count bytes from file descriptor in_fd to file descriptor out_fd.
fstat($module, /, fd)
Perform a stat system call on the given file descriptor.
Like stat(), but for an open file descriptor.
Equivalent to os.stat(fd).
isatty($module, fd, /)
Return True if the fd is connected to a terminal.
Return True if the file descriptor is an open file descriptor
connected to the slave end of a terminal.
pipe($module, /)
Create a pipe.
Returns a tuple of two file descriptors:
  (read_fd, write_fd)
mkfifo($module, /, path, mode=438, *, dir_fd=None)
Create a "fifo" (a POSIX named pipe).
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.
  If it is unavailable, using it will raise a NotImplementedError.
mknod($module, /, path, mode=384, device=0, *, dir_fd=None)
Create a node in the file system.
Create a node in the file system (file, device special file or named pipe)
at path.  mode specifies both the permissions to use and the
type of node to be created, being combined (bitwise OR) with one of
S_IFREG, S_IFCHR, S_IFBLK, and S_IFIFO.  If S_IFCHR or S_IFBLK is set on mode,
device defines the newly created device special file (probably using
os.makedev()).  Otherwise device is ignored.
If dir_fd is not None, it should be a file descriptor open to a directory,
  and path should be relative; path will then be relative to that directory.
dir_fd may not be implemented on your platform.
  If it is unavailable, using it will raise a NotImplementedError.
major($module, device, /)
Extracts a device major number from a raw device number.
minor($module, device, /)
Extracts a device minor number from a raw device number.
makedev($module, major, minor, /)
Composes a raw device number from the major and minor device numbers.
ftruncate($module, fd, length, /)
Truncate a file, specified by file descriptor, to a specific length.
truncate($module, /, path, length)
Truncate a file, specified by path, to a specific length.
On some platforms, path may also be specified as an open file descriptor.
  If this functionality is unavailable, using it raises an exception.
putenv($module, name, value, /)
Change or add an environment variable.
unsetenv($module, name, /)
Delete an environment variable.
strerror($module, code, /)
Translate an error code to a message string.
fchdir($module, /, fd)
Change to the directory of the given file descriptor.
fd must be opened on a directory, not a file.
Equivalent to os.chdir(fd).
fsync($module, /, fd)
Force write of fd to disk.
sync($module, /)
Force write of everything to disk.
WCOREDUMP($module, status, /)
Return True if the process returning status was dumped to a core file.
WIFCONTINUED($module, /, status)
Return True if a particular process was continued from a job control stop.
Return True if the process returning status was continued from a
job control stop.
WIFSTOPPED($module, /, status)
Return True if the process returning status was stopped.
WIFSIGNALED($module, /, status)
Return True if the process returning status was terminated by a signal.
WIFEXITED($module, /, status)
Return True if the process returning status exited via the exit() system call.
WEXITSTATUS($module, /, status)
Return the process return code from status.
WTERMSIG($module, /, status)
Return the signal that terminated the process that provided the status value.
WSTOPSIG($module, /, status)
Return the signal that stopped the process that provided the status value.
fstatvfs($module, fd, /)
Perform an fstatvfs system call on the given fd.
Equivalent to statvfs(fd).
statvfs($module, /, path)
Perform a statvfs system call on the given path.
path may always be specified as a string.
On some platforms, path may also be specified as an open file descriptor.
  If this functionality is unavailable, using it raises an exception.
confstr($module, name, /)
Return a string-valued system configuration variable.
sysconf($module, name, /)
Return an integer-valued system configuration variable.
fpathconf($module, fd, name, /)
Return the configuration limit name for the file descriptor fd.
If there is no limit, return -1.
pathconf($module, /, path, name)
Return the configuration limit name for the file or directory path.
If there is no limit, return -1.
On some platforms, path may also be specified as an open file descriptor.
  If this functionality is unavailable, using it raises an exception.
abort($module, /)
Abort the interpreter immediately.
This function 'dumps core' or otherwise fails in the hardest way possible
on the hosting operating system.  This function never returns.
getloadavg($module, /)
Return average recent system load information.
Return the number of processes in the system run queue averaged over
the last 1, 5, and 15 minutes as a tuple of three floats.
Raises OSError if the load average was unobtainable.
urandom($module, size, /)
Return a bytes object containing random bytes suitable for cryptographic use.
get_terminal_size($module, fd=<unrepresentable>, /)
Return the size of the terminal window as (columns, lines).
The optional argument fd (default standard output) specifies
which file descriptor should be queried.
If the file descriptor is not connected to a terminal, an OSError
is thrown.
This function will only be defined if an implementation is
available for this system.
shutil.get_terminal_size is the high-level function which should
normally be used, os.get_terminal_size is the low-level implementation.
cpu_count($module, /)
Return the number of CPUs in the system; return None if indeterminable.
This number is not equivalent to the number of CPUs the current process can
use.  The number of usable CPUs can be obtained with
``len(os.sched_getaffinity(0))``
get_inheritable($module, fd, /)
Get the close-on-exe flag of the specified file descriptor.
set_inheritable($module, fd, inheritable, /)
Set the inheritable flag of the specified file descriptor.
get_blocking($module, fd, /)
Get the blocking mode of the file descriptor.
Return False if the O_NONBLOCK flag is set, True if the flag is cleared.
set_blocking($module, fd, blocking, /)
Set the blocking mode of the specified file descriptor.
Set the O_NONBLOCK flag if blocking is False,
clear the O_NONBLOCK flag otherwise.
scandir($module, /, path=None)
Return an iterator of DirEntry objects for given path.
path can be specified as either str, bytes, or a path-like object.  If path
is bytes, the names of yielded DirEntry objects will also be bytes; in
all other circumstances they will be str.
If path is None, uses the path='.'.
fspath($module, /, path)
Return the file system path representation of the object.
If the object is str or bytes, then allow it to pass through as-is. If the
object defines __fspath__(), then return the result of that method. All other
types raise a TypeError.
waitstatus_to_exitcode($module, /, status)
Convert a wait status to an exit code.
On Unix:
* If WIFEXITED(status) is true, return WEXITSTATUS(status).
* If WIFSIGNALED(status) is true, return -WTERMSIG(status).
* Otherwise, raise a ValueError.
On Windows, return status shifted right by 8 bits.
On Unix, if the process is being traced or if waitpid() was called with
WUNTRACED option, the caller must first check if WIFSTOPPED(status) is true.
This function must not be called if WIFSTOPPED(status) is true.
stat_result: Result from stat, fstat, or lstat.
This object may be accessed either as a tuple of
  (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime)
or via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.
Posix/windows: If your platform supports st_blksize, st_blocks, st_rdev,
or st_flags, they are available as attributes only.
See os.stat for more information.
statvfs_result: Result from statvfs or fstatvfs.
This object may be accessed either as a tuple of
  (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, namemax),
or via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.
See os.statvfs for more information.
A tuple of (columns, lines) for holding terminal window size
is_dir($self, /, *, follow_symlinks=True)
Return True if the entry is a directory; cached per entry.
is_file($self, /, *, follow_symlinks=True)
Return True if the entry is a file; cached per entry.
is_symlink($self, /)
Return True if the entry is a symbolic link; cached per entry.
stat($self, /, *, follow_symlinks=True)
Return stat_result object for the entry; cached per entry.
inode($self, /)
Return inode of the entry; cached per entry.
__fspath__($self, /)
Returns the path for the entry.
times_result: Result from os.times().
This object may be accessed either as a tuple of
  (user, system, children_user, children_system, elapsed),
or via the attributes user, system, children_user, children_system,
and elapsed.
See os.times for more information.
uname_result: Result from os.uname().
This object may be accessed either as a tuple of
  (sysname, nodename, release, version, machine),
or via the attributes sysname, nodename, release, version, and machine.
See os.uname for more information.
This module makes available standard errno system symbols.
The value of each symbol is the corresponding integer value,
e.g., on most systems, errno.ENOENT equals the integer 2.
The dictionary errno.errorcode maps numeric codes to symbol names,
e.g., errno.errorcode[2] could be the string 'ENOENT'.
Symbols that are not relevant to the underlying system are not defined.
To map error codes to error messages, use the function os.strerror(),
e.g. os.strerror(2) could return 'No such file or directory'.
This module provides access to the Unix password database.
It is available on all Unix versions.
Password database entries are reported as 7-tuples containing the following
items from the password database (see `<pwd.h>'), in order:
pw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir, pw_shell.
The uid and gid items are integers, all others are strings. An
exception is raised if the entry asked for cannot be found.
getpwuid($module, uidobj, /)
Return the password database entry for the given numeric user ID.
See `help(pwd)` for more on password database entries.
getpwnam($module, name, /)
Return the password database entry for the given user name.
See `help(pwd)` for more on password database entries.
getpwall($module, /)
Return a list of all available password database entries, in arbitrary order.
See help(pwd) for more on password database entries.
pwd.struct_passwd: Results from getpw*() routines.
This object may be accessed either as a tuple of
  (pw_name,pw_passwd,pw_uid,pw_gid,pw_gecos,pw_dir,pw_shell)
or via the object attributes as named in the above tuple.
QSU`b
RTVbd
RTVbd
'3?DIVcgnv
688888888
88888
88881
8888888888888888!prrrrrrrr
rrrrr
rrrr4
rrrrrrrrrrrrrrrr$
688888888
88888
88881
8888888888888888!prrrrrrrr
rrrrr
rrrr4
rrrrrrrrrrrrrrrr$
3688888888
88888
88881
8888888888888888!prrrrrrrr
rrrrr
rrrr4
rrrrrrrrrrrrrrrr$
"88888
8888
8888888888888888
 SRE 2.2.2 Copyright (c) 1997-2002 by Secret Labs AB 
Compiled regular expression object.
match($self, /, string, pos=0, endpos=sys.maxsize)
Matches zero or more characters at the beginning of the string.
fullmatch($self, /, string, pos=0, endpos=sys.maxsize)
Matches against all of the string.
search($self, /, string, pos=0, endpos=sys.maxsize)
Scan through string looking for a match, and return a corresponding match object instance.
Return None if no position in the string matches.
sub($self, /, repl, string, count=0)
Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl.
subn($self, /, repl, string, count=0)
Return the tuple (new_string, number_of_subs_made) found by replacing the leftmost non-overlapping occurrences of pattern with the replacement repl.
findall($self, /, string, pos=0, endpos=sys.maxsize)
Return a list of all non-overlapping matches of pattern in string.
split($self, /, string, maxsplit=0)
Split string by the occurrences of pattern.
finditer($self, /, string, pos=0, endpos=sys.maxsize)
Return an iterator over all non-overlapping matches for the RE pattern in string.
For each match, the iterator returns a match object.
scanner($self, /, string, pos=0, endpos=sys.maxsize)
__copy__($self, /)
__deepcopy__($self, memo, /)
The result of re.match() and re.search().
Match objects always have a boolean value of True.
group([group1, ...]) -> str or tuple.
    Return subgroup(s) of the match by indices or names.
    For 0 returns the entire match.
start($self, group=0, /)
Return index of the start of the substring matched by group.
end($self, group=0, /)
Return index of the end of the substring matched by group.
span($self, group=0, /)
For match object m, return the 2-tuple (m.start(group), m.end(group)).
groups($self, /, default=None)
Return a tuple containing all the subgroups of the match, from 1.
  default
    Is used for groups that did not participate in the match.
groupdict($self, /, default=None)
Return a dictionary containing all the named subgroups of the match, keyed by the subgroup name.
  default
    Is used for groups that did not participate in the match.
expand($self, /, template)
Return the string obtained by doing backslash substitution on the string template, as done by the sub() method.
__copy__($self, /)
__deepcopy__($self, memo, /)
match($self, /)
search($self, /)
compile($module, /, pattern, flags, code, groups, groupindex,
        indexgroup)
getcodesize($module, /)
ascii_iscased($module, character, /)
unicode_iscased($module, character, /)
ascii_tolower($module, character, /)
unicode_tolower($module, character, /)
register($module, search_function, /)
Register a codec search function.
Search functions are expected to take one argument, the encoding name in
all lower case letters, and either return None, or a tuple of functions
(encoder, decoder, stream_reader, stream_writer) (or a CodecInfo object).
lookup($module, encoding, /)
Looks up a codec tuple in the Python codec registry and returns a CodecInfo object.
encode($module, /, obj, encoding='utf-8', errors='strict')
Encodes obj using the codec registered for encoding.
The default encoding is 'utf-8'.  errors may be given to set a
different error handling scheme.  Default is 'strict' meaning that encoding
errors raise a ValueError.  Other possible values are 'ignore', 'replace'
and 'backslashreplace' as well as any other name registered with
codecs.register_error that can handle ValueErrors.
decode($module, /, obj, encoding='utf-8', errors='strict')
Decodes obj using the codec registered for encoding.
Default encoding is 'utf-8'.  errors may be given to set a
different error handling scheme.  Default is 'strict' meaning that encoding
errors raise a ValueError.  Other possible values are 'ignore', 'replace'
and 'backslashreplace' as well as any other name registered with
codecs.register_error that can handle ValueErrors.
escape_encode($module, data, errors=None, /)
escape_decode($module, data, errors=None, /)
utf_8_encode($module, str, errors=None, /)
utf_8_decode($module, data, errors=None, final=False, /)
utf_7_encode($module, str, errors=None, /)
utf_7_decode($module, data, errors=None, final=False, /)
utf_16_encode($module, str, errors=None, byteorder=0, /)
utf_16_le_encode($module, str, errors=None, /)
utf_16_be_encode($module, str, errors=None, /)
utf_16_decode($module, data, errors=None, final=False, /)
utf_16_le_decode($module, data, errors=None, final=False, /)
utf_16_be_decode($module, data, errors=None, final=False, /)
utf_16_ex_decode($module, data, errors=None, byteorder=0, final=False,
                 /)
utf_32_encode($module, str, errors=None, byteorder=0, /)
utf_32_le_encode($module, str, errors=None, /)
utf_32_be_encode($module, str, errors=None, /)
utf_32_decode($module, data, errors=None, final=False, /)
utf_32_le_decode($module, data, errors=None, final=False, /)
utf_32_be_decode($module, data, errors=None, final=False, /)
utf_32_ex_decode($module, data, errors=None, byteorder=0, final=False,
                 /)
unicode_escape_encode($module, str, errors=None, /)
unicode_escape_decode($module, data, errors=None, /)
raw_unicode_escape_encode($module, str, errors=None, /)
raw_unicode_escape_decode($module, data, errors=None, /)
latin_1_encode($module, str, errors=None, /)
latin_1_decode($module, data, errors=None, /)
ascii_encode($module, str, errors=None, /)
ascii_decode($module, data, errors=None, /)
charmap_encode($module, str, errors=None, mapping=None, /)
charmap_decode($module, data, errors=None, mapping=None, /)
charmap_build($module, map, /)
readbuffer_encode($module, data, errors=None, /)
register_error($module, errors, handler, /)
Register the specified error handler under the name errors.
handler must be a callable object, that will be called with an exception
instance containing information about the location of the encoding/decoding
error and must return a (replacement, new position) tuple.
lookup_error($module, name, /)
lookup_error(errors) -> handler
Return the error handler for the specified error handling name or raise a
LookupError, if no handler exists under this name.
_forget_codec($module, encoding, /)
Purge the named codec from the internal codec lookup cache
getweakrefcount($module, object, /)
Return the number of weak references to 'object'.
_remove_dead_weakref($module, dct, key, /)
Atomically remove key from dict if it points to a dead weakref.
getweakrefs(object) -- return a list of all weak reference objects
that point to 'object'.
proxy(object[, callback]) -- create a proxy object that weakly
references 'object'.  'callback', if given, is called with a
reference to the proxy when 'object' is about to be finalized.
Tools that operate on functions.
reduce(function, sequence[, initial]) -> value
Apply a function of two arguments cumulatively to the items of a sequence,
from left to right, so as to reduce the sequence to a single value.
For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates
((((1+2)+3)+4)+5).  If initial is present, it is placed before the items
of the sequence in the calculation, and serves as a default when the
sequence is empty.
Convert a cmp= function into a key= function.
partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
Create a cached callable that wraps another function.
user_function:      the function being cached
maxsize:  0         for no caching
          None      for unlimited cache size
          n         for a bounded cache
typed:    False     cache f(3) and f(3.0) as identical calls
          True      cache f(3) and f(3.0) as distinct calls
cache_info_type:    namedtuple class with the fields:
                        hits misses currsize maxsize
Operator interface.
This module exports a set of functions implemented in C corresponding
to the intrinsic operators of Python.  For example, operator.add(x, y)
is equivalent to the expression x+y.  The function names are those
used for special methods; variants without leading and trailing
'__' are also provided for convenience.
truth($module, a, /)
Return True if a is true, False otherwise.
contains($module, a, b, /)
Same as b in a (note reversed operands).
indexOf($module, a, b, /)
Return the first index of b in a.
countOf($module, a, b, /)
Return the number of times b occurs in a.
is_($module, a, b, /)
Same as a is b.
is_not($module, a, b, /)
Same as a is not b.
index($module, a, /)
Same as a.__index__()
add($module, a, b, /)
Same as a + b.
sub($module, a, b, /)
Same as a - b.
mul($module, a, b, /)
Same as a * b.
matmul($module, a, b, /)
Same as a @ b.
floordiv($module, a, b, /)
Same as a // b.
truediv($module, a, b, /)
Same as a / b.
mod($module, a, b, /)
Same as a % b.
neg($module, a, /)
Same as -a.
pos($module, a, /)
Same as +a.
abs($module, a, /)
Same as abs(a).
inv($module, a, /)
Same as ~a.
invert($module, a, /)
Same as ~a.
lshift($module, a, b, /)
Same as a << b.
rshift($module, a, b, /)
Same as a >> b.
not_($module, a, /)
Same as not a.
and_($module, a, b, /)
Same as a & b.
xor($module, a, b, /)
Same as a ^ b.
or_($module, a, b, /)
Same as a | b.
iadd($module, a, b, /)
Same as a += b.
isub($module, a, b, /)
Same as a -= b.
imul($module, a, b, /)
Same as a *= b.
imatmul($module, a, b, /)
Same as a @= b.
ifloordiv($module, a, b, /)
Same as a //= b.
itruediv($module, a, b, /)
Same as a /= b.
imod($module, a, b, /)
Same as a %= b.
ilshift($module, a, b, /)
Same as a <<= b.
irshift($module, a, b, /)
Same as a >>= b.
iand($module, a, b, /)
Same as a &= b.
ixor($module, a, b, /)
Same as a ^= b.
ior($module, a, b, /)
Same as a |= b.
concat($module, a, b, /)
Same as a + b, for a and b sequences.
iconcat($module, a, b, /)
Same as a += b, for a and b sequences.
getitem($module, a, b, /)
Same as a[b].
setitem($module, a, b, c, /)
Same as a[b] = c.
delitem($module, a, b, /)
Same as del a[b].
pow($module, a, b, /)
Same as a ** b.
ipow($module, a, b, /)
Same as a **= b.
eq($module, a, b, /)
Same as a == b.
ne($module, a, b, /)
Same as a != b.
lt($module, a, b, /)
Same as a < b.
le($module, a, b, /)
Same as a <= b.
gt($module, a, b, /)
Same as a > b.
ge($module, a, b, /)
Same as a >= b.
_compare_digest($module, a, b, /)
Return 'a == b'.
This function uses an approach designed to prevent
timing analysis, making it appropriate for cryptography.
a and b must both be of the same type: either str (ASCII only),
or any bytes-like object.
Note: If a and b are of different lengths, or if an error occurs,
a timing attack could theoretically reveal information about the
types and lengths of a and b--but not their values.
length_hint($module, obj, default=0, /)
Return an estimate of the number of items in obj.
This is useful for presizing containers when building from an iterable.
If the object supports len(), the result will be exact.
Otherwise, it may over- or under-estimate by an arbitrary amount.
The result will be an integer >= 0.
itemgetter(item, ...) --> itemgetter object
Return a callable object that fetches the given item(s) from its operand.
After f = itemgetter(2), the call f(r) returns r[2].
After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])
Return state information for pickling
attrgetter(attr, ...) --> attrgetter object
Return a callable object that fetches the given attribute(s) from its operand.
After f = attrgetter('name'), the call f(r) returns r.name.
After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).
After h = attrgetter('name.first', 'name.last'), the call h(r) returns
(r.name.first, r.name.last).
methodcaller(name, ...) --> methodcaller object
Return a callable object that calls the given method on its operand.
After f = methodcaller('name'), the call f(r) returns r.name().
After g = methodcaller('name', 'date', foo=1), the call g(r) returns
r.name('date', foo=1).
.0368
High performance data structures.
- deque:        ordered collection accessible from endpoints only
- defaultdict:  dict subclass with a default value factory
_count_elements($module, mapping, iterable, /)
Count elements in the iterable, updating the mapping
deque([iterable[, maxlen]]) --> deque object
A list-like sequence optimized for data accesses near its endpoints.
Add an element to the right side of the deque.
Add an element to the left side of the deque.
Remove all elements from the deque.
Return a shallow copy of a deque.
D.count(value) -> integer -- return number of occurrences of value
Extend the right side of the deque with elements from the iterable
Extend the left side of the deque with elements from the iterable
D.index(value, [start, [stop]]) -> integer -- return first index of value.
Raises ValueError if the value is not present.
D.insert(index, object) -- insert object before index
Remove and return the rightmost element.
Remove and return the leftmost element.
Return state information for pickling.
D.remove(value) -- remove first occurrence of value.
D.__reversed__() -- return a reverse iterator over the deque
D.reverse() -- reverse *IN PLACE*
Rotate the deque n steps to the right (default n=1).  If n is negative, rotates left.
D.__sizeof__() -- size of D in memory, in bytes
defaultdict(default_factory=None, /, [...]) --> dict with default factory
The default factory is called without arguments to produce
a new value when a key is not present, in __getitem__ only.
A defaultdict compares equal to a dict with the same items.
All remaining arguments are treated the same as if they were
passed to the dict constructor, including keyword arguments.
__missing__(key) # Called by __getitem__ for missing key; pseudo-code:
  if self.default_factory is None: raise KeyError((key,))
  self[key] = value = self.default_factory()
  return value
D.copy() -> a shallow copy of D.
Private method returning an estimate of len(list(it)).
Module contains faster C implementation of abc.ABCMeta
get_cache_token($module, /)
Returns the current ABC cache token.
The token is an opaque object (supporting equality testing) identifying the
current version of the ABC cache for virtual subclasses. The token changes
with every call to register() on any ABC.
_abc_init($module, self, /)
Internal ABC helper for class set-up. Should be never used outside abc module.
_reset_registry($module, self, /)
Internal ABC helper to reset registry of a given class.
Should be only used by refleak.py
_reset_caches($module, self, /)
Internal ABC helper to reset both caches of a given class.
Should be only used by refleak.py
_get_dump($module, self, /)
Internal ABC helper for cache and registry debugging.
Return shallow copies of registry, of both caches, and
negative cache version. Don't call this function directly,
instead use ABC._dump_registry() for a nice repr.
_abc_register($module, self, subclass, /)
Internal ABC helper for subclasss registration. Should be never used outside abc module.
_abc_instancecheck($module, self, instance, /)
Internal ABC helper for instance checks. Should be never used outside abc module.
_abc_subclasscheck($module, self, subclass, /)
Internal ABC helper for subclasss checks. Should be never used outside abc module.
Internal state held by ABC machinery.
Functional tools for creating and using iterators.
Infinite iterators:
count(start=0, step=1) --> start, start+step, start+2*step, ...
cycle(p) --> p0, p1, ... plast, p0, p1, ...
repeat(elem [,n]) --> elem, elem, elem, ... endlessly or up to n times
Iterators terminating on the shortest input sequence:
accumulate(p[, func]) --> p0, p0+p1, p0+p1+p2
chain(p, q, ...) --> p0, p1, ... plast, q0, q1, ...
chain.from_iterable([p, q, ...]) --> p0, p1, ... plast, q0, q1, ...
compress(data, selectors) --> (d[0] if s[0]), (d[1] if s[1]), ...
dropwhile(pred, seq) --> seq[n], seq[n+1], starting when pred fails
groupby(iterable[, keyfunc]) --> sub-iterators grouped by value of keyfunc(v)
filterfalse(pred, seq) --> elements of seq where pred(elem) is False
islice(seq, [start,] stop [, step]) --> elements from
       seq[start:stop:step]
starmap(fun, seq) --> fun(*seq[0]), fun(*seq[1]), ...
tee(it, n=2) --> (it1, it2 , ... itn) splits one iterator into n
takewhile(pred, seq) --> seq[0], seq[1], until pred fails
zip_longest(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ...
Combinatoric generators:
product(p, q, ... [repeat=1]) --> cartesian product
permutations(p[, r])
combinations(p, r)
combinations_with_replacement(p, r)
tee($module, iterable, n=2, /)
Returns a tuple of n independent iterators.
_tee(iterable, /)
Iterator wrapped to make it copyable.
Returns an independent iterator.
Return state information for pickling.
Set state information for unpickling.
teedataobject(iterable, values, next, /)
Data container common to multiple tee objects.
accumulate(iterable, func=None, *, initial=None)
Return series of accumulated sums (or other binary function results).
combinations(iterable, r)
Return successive r-length combinations of elements in the iterable.
combinations(range(4), 3) --> (0,1,2), (0,1,3), (0,2,3), (1,2,3)
Returns size in memory, in bytes.
combinations_with_replacement(iterable, r)
Return successive r-length combinations of elements in the iterable allowing individual elements to have successive repeats.
combinations_with_replacement('ABC', 2) --> AA AB AC BB BC CC"
cycle(iterable, /)
Return elements from the iterable until it is exhausted. Then repeat the sequence indefinitely.
dropwhile(predicate, iterable, /)
Drop items from the iterable while predicate(item) is true.
Afterwards, return every element until the iterable is exhausted.
takewhile(predicate, iterable, /)
Return successive entries from an iterable as long as the predicate evaluates to true for each entry.
islice(iterable, stop) --> islice object
islice(iterable, start, stop[, step]) --> islice object
Return an iterator whose next() method returns selected values from an
iterable.  If start is specified, will skip all preceding elements;
otherwise, start defaults to zero.  Step defaults to one.  If
specified as another value, step determines how many values are
skipped between successive calls.  Works like a slice() on a list
but returns an iterator.
starmap(function, iterable, /)
Return an iterator whose values are returned from the function evaluated with an argument tuple taken from the given sequence.
chain(*iterables) --> chain object
Return a chain object whose .__next__() method returns elements from the
first iterable until it is exhausted, then elements from the next
iterable, until all of the iterables are exhausted.
from_iterable($type, iterable, /)
Alternative chain() constructor taking a single iterable argument that evaluates lazily.
compress(data, selectors)
Return data elements corresponding to true selector elements.
Forms a shorter iterator from selected data elements using the selectors to
choose the data elements.
filterfalse(function, iterable, /)
Return those items of iterable for which function(item) is false.
If function is None, return the items that are false.
count(start=0, step=1)
Return a count object whose .__next__() method returns consecutive values.
Equivalent to:
    def count(firstval=0, step=1):
        x = firstval
        while 1:
            yield x
            x += step
zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> zip_longest object
Return a zip_longest object whose .__next__() method returns a tuple where
the i-th element comes from the i-th iterable argument.  The .__next__()
method continues until the longest iterable in the argument sequence
is exhausted and then it raises StopIteration.  When the shorter iterables
are exhausted, the fillvalue is substituted in their place.  The fillvalue
defaults to None or can be specified by a keyword argument.
permutations(iterable, r=None)
Return successive r-length permutations of elements in the iterable.
permutations(range(3), 2) --> (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)
product(*iterables, repeat=1) --> product object
Cartesian product of input iterables.  Equivalent to nested for-loops.
For example, product(A, B) returns the same as:  ((x,y) for x in A for y in B).
The leftmost iterators are in the outermost for-loop, so the output tuples
cycle in a manner similar to an odometer (with the rightmost element changing
on every iteration).
To compute the product of an iterable with itself, specify the number
of repetitions with the optional repeat keyword argument. For example,
product(A, repeat=4) means the same as product(A, A, A, A).
product('ab', range(3)) --> ('a',0) ('a',1) ('a',2) ('b',0) ('b',1) ('b',2)
product((0,1), (0,1), (0,1)) --> (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) ...
repeat(object [,times]) -> create an iterator which returns the object
for the specified number of times.  If not specified, returns the object
endlessly.
Private method returning an estimate of len(list(it)).
groupby(iterable, key=None)
make an iterator that returns consecutive keys and groups from the iterable
  iterable
    Elements to divide into groups according to the key function.
  key
    A function for computing the group category for each element.
    If the key function is not specified or is None, the element itself
    is used for grouping.
allow programmer to define multiple exit functions to be executedupon normal program termination.
Two public functions, register and unregister, are defined.
register(func, *args, **kwargs) -> func
Register a function to be executed upon normal program termination
    func - function to be called at exit
    args - optional arguments to pass to func
    kwargs - optional keyword arguments to pass to func
    func is returned to facilitate usage as a decorator.
_clear() -> None
Clear the list of previously registered exit functions.
unregister(func) -> None
Unregister an exit function which was previously registered using
atexit.register
    func - function to be unregistered
_run_exitfuncs() -> None
Run all registered exit functions.
_ncallbacks() -> int
Return the number of registered exit functions.
This module provides mechanisms to use signal handlers in Python.
Functions:
alarm() -- cause SIGALRM after a specified time [Unix only]
setitimer() -- cause a signal (described below) after a specified
               float time and the timer may restart then [Unix only]
getitimer() -- get current value of timer [Unix only]
signal() -- set the action for a given signal
getsignal() -- get the signal action for a given signal
pause() -- wait until a signal arrives [Unix only]
default_int_handler() -- default SIGINT handler
signal constants:
SIG_DFL -- used to refer to the system default handler
SIG_IGN -- used to ignore the signal
NSIG -- number of defined signals
SIGINT, SIGTERM, etc. -- signal numbers
itimer constants:
ITIMER_REAL -- decrements in real time, and delivers SIGALRM upon
               expiration
ITIMER_VIRTUAL -- decrements only when the process is executing,
               and delivers SIGVTALRM upon expiration
ITIMER_PROF -- decrements both when the process is executing and
               when the system is executing on behalf of the process.
               Coupled with ITIMER_VIRTUAL, this timer is usually
               used to profile the time spent by the application
               in user and kernel space. SIGPROF is delivered upon
               expiration.
*** IMPORTANT NOTICE ***
A signal handler function is called with two arguments:
the first is the signal number, the second is the interrupted stack frame.
default_int_handler(...)
The default handler for SIGINT installed by Python.
It raises KeyboardInterrupt.
alarm($module, seconds, /)
Arrange for SIGALRM to arrive after the given number of seconds.
setitimer($module, which, seconds, interval=0.0, /)
Sets given itimer (one of ITIMER_REAL, ITIMER_VIRTUAL or ITIMER_PROF).
The timer will fire after value seconds and after that every interval seconds.
The itimer can be cleared by setting seconds to zero.
Returns old values as a tuple: (delay, interval).
getitimer($module, which, /)
Returns current value of given itimer.
signal($module, signalnum, handler, /)
Set the action for the given signal.
The action can be SIG_DFL, SIG_IGN, or a callable Python object.
The previous action is returned.  See getsignal() for possible return values.
*** IMPORTANT NOTICE ***
A signal handler function is called with two arguments:
the first is the signal number, the second is the interrupted stack frame.
raise_signal($module, signalnum, /)
Send a signal to the executing process.
strsignal($module, signalnum, /)
Return the system description of the given signal.
The return values can be such as "Interrupt", "Segmentation fault", etc.
Returns None if the signal is not recognized.
getsignal($module, signalnum, /)
Return the current action for the given signal.
The return value can be:
  SIG_IGN -- if the signal is being ignored
  SIG_DFL -- if the default action for the signal is in effect
  None    -- if an unknown handler is in effect
  anything else -- the callable Python object used as a handler
set_wakeup_fd(fd, *, warn_on_full_buffer=True) -> fd
Sets the fd to be written to (with the signal number) when a signal
comes in.  A library can use this to wakeup select or poll.
The previous fd or -1 is returned.
The fd must be non-blocking.
siginterrupt($module, signalnum, flag, /)
Change system call restart behaviour.
If flag is False, system calls will be restarted when interrupted by
signal sig, else system calls will be interrupted.
pause($module, /)
Wait until a signal arrives.
pthread_kill($module, thread_id, signalnum, /)
Send a signal to a thread.
pthread_sigmask($module, how, mask, /)
Fetch and/or change the signal mask of the calling thread.
sigpending($module, /)
Examine pending signals.
Returns a set of signal numbers that are pending for delivery to
the calling thread.
sigwait($module, sigset, /)
Wait for a signal.
Suspend execution of the calling thread until the delivery of one of the
signals specified in the signal set sigset.  The function accepts the signal
and returns the signal number.
valid_signals($module, /)
Return a set of valid signal numbers on this platform.
The signal numbers returned by this function can be safely passed to
functions like `pthread_sigmask`.
YS_IFMT_: file type bits
S_IFDIR: directory
S_IFCHR: character device
S_IFBLK: block device
S_IFREG: regular file
S_IFIFO: fifo (named pipe)
S_IFLNK: symbolic link
S_IFSOCK: socket file
S_IFDOOR: door
S_IFPORT: event port
S_IFWHT: whiteout
S_ISUID: set UID bit
S_ISGID: set GID bit
S_ENFMT: file locking enforcement
S_ISVTX: sticky bit
S_IREAD: Unix V7 synonym for S_IRUSR
S_IWRITE: Unix V7 synonym for S_IWUSR
S_IEXEC: Unix V7 synonym for S_IXUSR
S_IRWXU: mask for owner permissions
S_IRUSR: read by owner
S_IWUSR: write by owner
S_IXUSR: execute by owner
S_IRWXG: mask for group permissions
S_IRGRP: read by group
S_IWGRP: write by group
S_IXGRP: execute by group
S_IRWXO: mask for others (not in group) permissions
S_IROTH: read by others
S_IWOTH: write by others
S_IXOTH: execute by others
UF_NODUMP: do not dump file
UF_IMMUTABLE: file may not be changed
UF_APPEND: file may only be appended to
UF_OPAQUE: directory is opaque when viewed through a union stack
UF_NOUNLINK: file may not be renamed or deleted
UF_COMPRESSED: OS X: file is hfs-compressed
UF_HIDDEN: OS X: file should not be displayed
SF_ARCHIVED: file may be archived
SF_IMMUTABLE: file may not be changed
SF_APPEND: file may only be appended to
SF_NOUNLINK: file may not be renamed or deleted
SF_SNAPSHOT: file is a snapshot file
ST_MODE
ST_INO
ST_DEV
ST_NLINK
ST_UID
ST_GID
ST_SIZE
ST_ATIME
ST_MTIME
ST_CTIME
FILE_ATTRIBUTE_*: Windows file attribute constants
                   (only present on Windows)
S_ISDIR(mode) -> bool
Return True if mode is from a directory.
S_ISCHR(mode) -> bool
Return True if mode is from a character special device file.
S_ISBLK(mode) -> bool
Return True if mode is from a block special device file.
S_ISREG(mode) -> bool
Return True if mode is from a regular file.
S_ISFIFO(mode) -> bool
Return True if mode is from a FIFO (named pipe).
S_ISLNK(mode) -> bool
Return True if mode is from a symbolic link.
S_ISSOCK(mode) -> bool
Return True if mode is from a socket.
S_ISDOOR(mode) -> bool
Return True if mode is from a door.
S_ISPORT(mode) -> bool
Return True if mode is from an event port.
S_ISWHT(mode) -> bool
Return True if mode is from a whiteout.
Return the portion of the file's mode that can be set by os.chmod().
Return the portion of the file's mode that describes the file type.
Convert a file's mode to a string of the form '-rwxrwxrwx'
This module provides various functions to manipulate time values.
There are two standard representations of time.  One is the number
of seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer
or a floating point number (to represent fractions of seconds).
The Epoch is system-defined; on Unix, it is generally January 1st, 1970.
The actual value can be retrieved by calling gmtime(0).
The other representation is a tuple of 9 integers giving local time.
The tuple items are:
  year (including century, e.g. 1998)
  month (1-12)
  day (1-31)
  hours (0-23)
  minutes (0-59)
  seconds (0-59)
  weekday (0-6, Monday is 0)
  Julian day (day in the year, 1-366)
  DST (Daylight Savings Time) flag (-1, 0 or 1)
If the DST flag is 0, the time is given in the regular time zone;
if it is 1, the time is given in the DST time zone;
if it is -1, mktime() should guess based on the date and time.
time() -> floating point number
Return the current time in seconds since the Epoch.
Fractions of a second may be present if the system clock provides them.
time_ns() -> int
Return the current time in nanoseconds since the Epoch.
clock_gettime(clk_id) -> float
Return the time of the specified clock clk_id.
clock_gettime_ns(clk_id) -> int
Return the time of the specified clock clk_id as nanoseconds.
clock_settime(clk_id, time)
Set the time of the specified clock clk_id.
clock_settime_ns(clk_id, time)
Set the time of the specified clock clk_id with nanoseconds.
clock_getres(clk_id) -> floating point number
Return the resolution (precision) of the specified clock clk_id.
sleep(seconds)
Delay execution for a given number of seconds.  The argument may be
a floating point number for subsecond precision.
gmtime([seconds]) -> (tm_year, tm_mon, tm_mday, tm_hour, tm_min,
                       tm_sec, tm_wday, tm_yday, tm_isdst)
Convert seconds since the Epoch to a time tuple expressing UTC (a.k.a.
GMT).  When 'seconds' is not passed in, convert the current time instead.
If the platform supports the tm_gmtoff and tm_zone, they are available as
attributes only.
localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,
                          tm_sec,tm_wday,tm_yday,tm_isdst)
Convert seconds since the Epoch to a time tuple expressing local time.
When 'seconds' is not passed in, convert the current time instead.
asctime([tuple]) -> string
Convert a time tuple to a string, e.g. 'Sat Jun 06 16:26:11 1998'.
When the time tuple is not present, current time as returned by localtime()
is used.
ctime(seconds) -> string
Convert a time in seconds since the Epoch to a string in local time.
This is equivalent to asctime(localtime(seconds)). When the time tuple is
not present, current time as returned by localtime() is used.
mktime(tuple) -> floating point number
Convert a time tuple in local time to seconds since the Epoch.
Note that mktime(gmtime(0)) will not generally return zero for most
time zones; instead the returned value will either be equal to that
of the timezone or altzone attributes on the time module.
strftime(format[, tuple]) -> string
Convert a time tuple to a string according to a format specification.
See the library reference manual for formatting codes. When the time tuple
is not present, current time as returned by localtime() is used.
Commonly used format codes:
%Y  Year with century as a decimal number.
%m  Month as a decimal number [01,12].
%d  Day of the month as a decimal number [01,31].
%H  Hour (24-hour clock) as a decimal number [00,23].
%M  Minute as a decimal number [00,59].
%S  Second as a decimal number [00,61].
%z  Time zone offset from UTC.
%a  Locale's abbreviated weekday name.
%A  Locale's full weekday name.
%b  Locale's abbreviated month name.
%B  Locale's full month name.
%c  Locale's appropriate date and time representation.
%I  Hour (12-hour clock) as a decimal number [01,12].
%p  Locale's equivalent of either AM or PM.
Other codes may be available on your platform.  See documentation for
the C library strftime function.
strptime(string, format) -> struct_time
Parse a string to a time tuple according to a format specification.
See the library reference manual for formatting codes (same as
strftime()).
Commonly used format codes:
%Y  Year with century as a decimal number.
%m  Month as a decimal number [01,12].
%d  Day of the month as a decimal number [01,31].
%H  Hour (24-hour clock) as a decimal number [00,23].
%M  Minute as a decimal number [00,59].
%S  Second as a decimal number [00,61].
%z  Time zone offset from UTC.
%a  Locale's abbreviated weekday name.
%A  Locale's full weekday name.
%b  Locale's abbreviated month name.
%B  Locale's full month name.
%c  Locale's appropriate date and time representation.
%I  Hour (12-hour clock) as a decimal number [01,12].
%p  Locale's equivalent of either AM or PM.
Other codes may be available on your platform.  See documentation for
the C library strftime function.
tzset()
Initialize, or reinitialize, the local timezone to the value stored in
os.environ['TZ']. The TZ environment variable should be specified in
standard Unix timezone format as documented in the tzset man page
(eg. 'US/Eastern', 'Europe/Amsterdam'). Unknown timezones will silently
fall back to UTC. If the TZ environment variable is not set, the local
timezone is set to the systems best guess of wallclock time.
Changing the TZ environment variable without calling tzset *may* change
the local timezone used by methods such as localtime, but this behaviour
should not be relied on.
monotonic() -> float
Monotonic clock, cannot go backward.
monotonic_ns() -> int
Monotonic clock, cannot go backward, as nanoseconds.
process_time() -> float
Process time for profiling: sum of the kernel and user-space CPU time.
process_time() -> int
Process time for profiling as nanoseconds:
sum of the kernel and user-space CPU time.
thread_time() -> float
Thread time for profiling: sum of the kernel and user-space CPU time.
thread_time() -> int
Thread time for profiling as nanoseconds:
sum of the kernel and user-space CPU time.
perf_counter() -> float
Performance counter for benchmarking.
perf_counter_ns() -> int
Performance counter for benchmarking as nanoseconds.
get_clock_info(name: str) -> dict
Get information of the specified clock.
A lock object is a synchronization primitive.  To create a lock,
call threading.Lock().  Methods are:
acquire() -- lock the lock, possibly blocking until it can be obtained
release() -- unlock of the lock
locked() -- test whether the lock is currently locked
A lock is not owned by the thread that locked it; another thread may
unlock it.  A thread attempting to lock a lock that it has already locked
will block until another thread unlocks it.  Deadlocks may ensue.
acquire(blocking=True, timeout=-1) -> bool
(acquire_lock() is an obsolete synonym)
Lock the lock.  Without argument, this blocks if the lock is already
locked (even by the same thread), waiting for another thread to release
the lock, and return True once the lock is acquired.
With an argument, this will only block if the argument is true,
and the return value reflects whether the lock is acquired.
The blocking operation is interruptible.
release()
(release_lock() is an obsolete synonym)
Release the lock, allowing another thread that is blocked waiting for
the lock to acquire the lock.  The lock must be in the locked state,
but it needn't be locked by the same thread that unlocks it.
locked() -> bool
(locked_lock() is an obsolete synonym)
Return whether the lock is in the locked state.
acquire(blocking=True) -> bool
Lock the lock.  `blocking` indicates whether we should wait
for the lock to be available or not.  If `blocking` is False
and another thread holds the lock, the method will return False
immediately.  If `blocking` is True and another thread holds
the lock, the method will wait for the lock to be released,
take it and then return True.
(note: the blocking operation is interruptible.)
In all other cases, the method will return True immediately.
Precisely, if the current thread already holds the lock, its
internal counter is simply incremented. If nobody holds the lock,
the lock is taken and its internal counter initialized to 1.
release()
Release the lock, allowing another thread that is blocked waiting for
the lock to acquire the lock.  The lock must be in the locked state,
and must be locked by the same thread that unlocks it; otherwise a
`RuntimeError` is raised.
Do note that if the lock was acquire()d several times in a row by the
current thread, release() needs to be called as many times for the lock
to be available for other threads.
_is_owned() -> bool
For internal use by `threading.Condition`.
_acquire_restore(state) -> None
For internal use by `threading.Condition`.
_release_save() -> tuple
For internal use by `threading.Condition`.
ExceptHookArgs
Type used to pass arguments to threading.excepthook.
This module provides primitive operations to write multi-threaded programs.
The 'threading' module provides a more convenient interface.
start_new_thread(function, args[, kwargs])
(start_new() is an obsolete synonym)
Start a new thread and return its identifier.  The thread will call the
function with positional arguments from the tuple args and keyword arguments
taken from the optional dictionary kwargs.  The thread exits when the
function returns; the return value is ignored.  The thread will also exit
when the function raises an unhandled exception; a stack trace will be
printed unless the exception is SystemExit.
allocate_lock() -> lock object
(allocate() is an obsolete synonym)
Create a new lock object. See help(type(threading.Lock())) for
information about locks.
exit()
(exit_thread() is an obsolete synonym)
This is synonymous to ``raise SystemExit''.  It will cause the current
thread to exit silently unless the exception is caught.
interrupt_main()
Raise a KeyboardInterrupt in the main thread.
A subthread can use this function to interrupt the main thread.
get_ident() -> integer
Return a non-zero integer that uniquely identifies the current thread
amongst other threads that exist simultaneously.
This may be used to identify per-thread resources.
Even though on some platforms threads identities may appear to be
allocated consecutive numbers starting at 1, this behavior should not
be relied upon, and the number should be seen purely as a magic cookie.
A thread's identity may be reused for another thread after it exits.
get_native_id() -> integer
Return a non-negative integer identifying the thread as reported
by the OS (kernel). This may be used to uniquely identify a
particular thread within a system.
_count() -> integer
Return the number of currently running Python threads, excluding
the main thread. The returned number comprises all threads created
through `start_new_thread()` as well as `threading.Thread`, and not
yet finished.
This function is meant for internal and specialized purposes only.
In most applications `threading.enumerate()` should be used instead.
stack_size([size]) -> size
Return the thread stack size used when creating new threads.  The
optional size argument specifies the stack size (in bytes) to be used
for subsequently created threads, and must be 0 (use platform or
configured default) or a positive integer value of at least 32,768 (32k).
If changing the thread stack size is unsupported, a ThreadError
exception is raised.  If the specified size is invalid, a ValueError
exception is raised, and the stack size is unmodified.  32k bytes
 currently the minimum supported stack size value to guarantee
sufficient stack space for the interpreter itself.
Note that some platforms may have particular restrictions on values for
the stack size, such as requiring a minimum stack size larger than 32 KiB or
requiring allocation in multiples of the system memory page size
- platform documentation should be referred to for more information
(4 KiB pages are common; using multiples of 4096 for the stack size is
the suggested approach in the absence of more specific information).
_set_sentinel() -> lock
Set a sentinel lock that will be released when the current thread
state is finalized (after it is untied from the interpreter).
This is a private API for the threading module.
excepthook(exc_type, exc_value, exc_traceback, thread)
Handle uncaught Thread.run() exception.
Support for POSIX locales.
(integer,string=None) -> string. Activates/queries locale processing.
() -> dict. Returns numeric and monetary locale-specific parameters.
string,string -> int. Compares two strings according to the locale.
strxfrm(string) -> string.
Return a string that can be used as a key for locale-aware comparisons.
nl_langinfo(key) -> string
Return the value for the locale information associated with key.
The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.
At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an OSError if they do not support a given operation.
Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.
BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.
Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is an in-memory stream for text.
Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.
data:
DEFAULT_BUFFER_SIZE
   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.
open($module, /, file, mode='r', buffering=-1, encoding=None,
     errors=None, newline=None, closefd=True, opener=None)
Open file and return a stream.  Raise OSError upon failure.
file is either a text or byte string giving the name (and the path
if the file isn't in the current working directory) of the file to
be opened or an integer file descriptor of the file to be
wrapped. (If a file descriptor is given, it is closed when the
returned I/O object is closed, unless closefd is set to False.)
mode is an optional string that specifies the mode in which the file
is opened. It defaults to 'r' which means open for reading in text
mode.  Other common values are 'w' for writing (truncating the file if
it already exists), 'x' for creating and writing to a new file, and
'a' for appending (which on some Unix systems, means that all writes
append to the end of the file regardless of the current seek position).
In text mode, if encoding is not specified the encoding used is platform
dependent: locale.getpreferredencoding(False) is called to get the
current locale encoding. (For reading and writing raw bytes use binary
mode and leave encoding unspecified.) The available modes are:
========= ===============================================================
Character Meaning
--------- ---------------------------------------------------------------
'r'       open for reading (default)
'w'       open for writing, truncating the file first
'x'       create a new file and open it for writing
'a'       open for writing, appending to the end of the file if it exists
'b'       binary mode
't'       text mode (default)
'+'       open a disk file for updating (reading and writing)
'U'       universal newline mode (deprecated)
========= ===============================================================
The default mode is 'rt' (open for reading text). For binary random
access, the mode 'w+b' opens and truncates the file to 0 bytes, while
'r+b' opens the file without truncation. The 'x' mode implies 'w' and
raises an `FileExistsError` if the file already exists.
Python distinguishes between files opened in binary and text modes,
even when the underlying operating system doesn't. Files opened in
binary mode (appending 'b' to the mode argument) return contents as
bytes objects without any decoding. In text mode (the default, or when
't' is appended to the mode argument), the contents of the file are
returned as strings, the bytes having been first decoded using a
platform-dependent encoding or using the specified encoding if given.
'U' mode is deprecated and will raise an exception in future versions
of Python.  It has no effect in Python 3.  Use newline to control
universal newlines mode.
buffering is an optional integer used to set the buffering policy.
Pass 0 to switch buffering off (only allowed in binary mode), 1 to select
line buffering (only usable in text mode), and an integer > 1 to indicate
the size of a fixed-size chunk buffer.  When no buffering argument is
given, the default buffering policy works as follows:
* Binary files are buffered in fixed-size chunks; the size of the buffer
  is chosen using a heuristic trying to determine the underlying device's
  "block size" and falling back on `io.DEFAULT_BUFFER_SIZE`.
  On many systems, the buffer will typically be 4096 or 8192 bytes long.
* "Interactive" text files (files for which isatty() returns True)
  use line buffering.  Other text files use the policy described above
  for binary files.
encoding is the name of the encoding used to decode or encode the
file. This should only be used in text mode. The default encoding is
platform dependent, but any encoding supported by Python can be
passed.  See the codecs module for the list of supported encodings.
errors is an optional string that specifies how encoding errors are to
be handled---this argument should not be used in binary mode. Pass
'strict' to raise a ValueError exception if there is an encoding error
(the default of None has the same effect), or pass 'ignore' to ignore
errors. (Note that ignoring encoding errors can lead to data loss.)
See the documentation for codecs.register or run 'help(codecs.Codec)'
for a list of the permitted encoding error strings.
newline controls how universal newlines works (it only applies to text
mode). It can be None, '', '\n', '\r', and '\r\n'.  It works as
follows:
* On input, if newline is None, universal newlines mode is
  enabled. Lines in the input can end in '\n', '\r', or '\r\n', and
  these are translated into '\n' before being returned to the
  caller. If it is '', universal newline mode is enabled, but line
  endings are returned to the caller untranslated. If it has any of
  the other legal values, input lines are only terminated by the given
  string, and the line ending is returned to the caller untranslated.
* On output, if newline is None, any '\n' characters written are
  translated to the system default line separator, os.linesep. If
  newline is '' or '\n', no translation takes place. If newline is any
  of the other legal values, any '\n' characters written are translated
  to the given string.
If closefd is False, the underlying file descriptor will be kept open
when the file is closed. This does not work when a file name is given
and must be True in that case.
A custom opener can be used by passing a callable as *opener*. The
underlying file descriptor for the file object is then obtained by
calling *opener* with (*file*, *flags*). *opener* must return an open
file descriptor (passing os.open as *opener* results in functionality
similar to passing None).
open() returns a file object whose type depends on the mode, and
through which the standard file operations such as reading and writing
are performed. When open() is used to open a file in a text mode ('w',
'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open
a file in a binary mode, the returned class varies: in read binary
mode, it returns a BufferedReader; in write binary and append binary
modes, it returns a BufferedWriter, and in read/write mode, it returns
a BufferedRandom.
It is also possible to use a string or bytearray as a file for both
reading and writing. For strings StringIO can be used like a file
opened in a text mode, and for bytes a BytesIO can be used like a file
opened in a binary mode.
open_code($module, /, path)
Opens the provided file with the intent to import the contents.
This may perform extra validation beyond open(), but is otherwise interchangeable
with calling open(path, 'rb').
The abstract base class for all I/O classes, acting on streams of
bytes. There is no public constructor.
This class provides dummy implementations for many methods that
derived classes can override selectively; the default implementations
represent a file that cannot be read, written or seeked.
Even though IOBase does not declare read, readinto, or write because
their signatures will vary, implementations and clients should
consider those methods part of the interface. Also, implementations
may raise UnsupportedOperation when operations they do not support are
called.
The basic type used for binary data read from or written to a file is
bytes. Other bytes-like objects are accepted as method arguments too.
In some cases (such as readinto), a writable object is required. Text
I/O classes work with str data.
Note that calling any method (except additional calls to close(),
which are ignored) on a closed stream should raise a ValueError.
IOBase (and its subclasses) support the iterator protocol, meaning
that an IOBase object can be iterated over yielding the lines in a
stream.
IOBase also supports the :keyword:`with` statement. In this example,
fp is closed after the suite of the with statement is complete:
with open('spam.txt', 'r') as fp:
    fp.write('Spam and eggs!')
Base class for raw binary I/O.
Change stream position.
Change the stream position to the given byte offset. The offset is
interpreted relative to the position indicated by whence.  Values
for whence are:
* 0 -- start of stream (the default); offset should be zero or positive
* 1 -- current stream position; offset may be negative
* 2 -- end of stream; offset is usually negative
Return the new absolute position.
tell($self, /)
Return current stream position.
Truncate file to size bytes.
File pointer is left unchanged.  Size defaults to the current IO
position as reported by tell().  Returns the new size.
flush($self, /)
Flush write buffers, if applicable.
This is not implemented for read-only and non-blocking streams.
close($self, /)
Flush and close the IO object.
This method has no effect if the file is already closed.
seekable($self, /)
Return whether object supports random access.
If False, seek(), tell() and truncate() will raise OSError.
This method may need to do a test seek().
readable($self, /)
Return whether object was opened for reading.
If False, read() will raise OSError.
writable($self, /)
Return whether object was opened for writing.
If False, write() will raise OSError.
fileno($self, /)
Returns underlying file descriptor if one exists.
OSError is raised if the IO object does not use a file descriptor.
isatty($self, /)
Return whether this is an 'interactive' stream.
Return False if it can't be determined.
readline($self, size=-1, /)
Read and return a line from the stream.
If size is specified, at most size bytes will be read.
The line terminator is always b'\n' for binary files; for text
files, the newlines argument to open can be used to select the line
terminator(s) recognized.
readlines($self, hint=-1, /)
Return a list of lines from the stream.
hint can be specified to control the number of lines read: no more
lines will be read if the total size (in bytes/characters) of all
lines so far exceeds hint.
writelines($self, lines, /)
Write a list of lines to stream.
Line separators are not added, so it is usual for each of the
lines provided to have a line separator at the end.
read($self, size=-1, /)
readall($self, /)
Read until EOF, using multiple read() call.
$FileIO(file, mode='r', closefd=True, opener=None)
Open a file.
The mode can be 'r' (default), 'w', 'x' or 'a' for reading,
writing, exclusive creation or appending.  The file will be created if it
doesn't exist when opened for writing or appending; it will be truncated
when opened for writing.  A FileExistsError will be raised if it already
exists when opened for creating. Opening a file for creating implies
writing so this mode behaves in a similar way to 'w'.Add a '+' to the mode
to allow simultaneous reading and writing. A custom opener can be used by
passing a callable as *opener*. The underlying file descriptor for the file
object is then obtained by calling opener with (*name*, *flags*).
*opener* must return an open file descriptor (passing os.open as *opener*
results in functionality similar to passing None).
read($self, size=-1, /)
Read at most size bytes, returned as bytes.
Only makes one system call, so less data may be returned than requested.
In non-blocking mode, returns None if no data is available.
Return an empty bytes object at EOF.
readall($self, /)
Read all data from the file, returned as bytes.
In non-blocking mode, returns as much as is immediately available,
or None if no data is available.  Return an empty bytes object at EOF.
readinto($self, buffer, /)
Same as RawIOBase.readinto().
write($self, b, /)
Write buffer b to file, return number of bytes written.
Only makes one system call, so not all of the data may be written.
The number of bytes actually written is returned.  In non-blocking mode,
returns None if the write would block.
seek($self, pos, whence=0, /)
Move to new file position and return the file position.
Argument offset is a byte count.  Optional argument whence defaults to
SEEK_SET or 0 (offset from start of file, offset should be >= 0); other values
are SEEK_CUR or 1 (move relative to current position, positive or negative),
and SEEK_END or 2 (move relative to end of file, usually negative, although
many platforms allow seeking beyond the end of a file).
Note that not all file objects are seekable.
tell($self, /)
Current file position.
Can raise OSError for non seekable files.
truncate($self, size=None, /)
Truncate the file to at most size bytes and return the truncated size.
Size defaults to the current file position, as returned by tell().
The current file position is changed to the value of size.
close($self, /)
Close the file.
A closed file cannot be used for further I/O operations.  close() may be
called more than once without error.
seekable($self, /)
True if file supports random-access.
readable($self, /)
True if file was opened in a read mode.
writable($self, /)
True if file was opened in a write mode.
fileno($self, /)
Return the underlying file descriptor (an integer).
isatty($self, /)
True if the file is connected to a TTY device.
BytesIO(initial_bytes=b'')
Buffered I/O implementation using an in-memory bytes buffer.
readable($self, /)
Returns True if the IO object can be read.
seekable($self, /)
Returns True if the IO object can be seeked.
writable($self, /)
Returns True if the IO object can be written.
close($self, /)
Disable all I/O operations.
flush($self, /)
Does nothing.
isatty($self, /)
Always returns False.
BytesIO objects are not connected to a TTY-like device.
tell($self, /)
Current file position, an integer.
write($self, b, /)
Write bytes to file.
Return the number of bytes written.
writelines($self, lines, /)
Write lines to the file.
Note that newlines are not added.  lines can be any iterable object
producing bytes-like objects. This is equivalent to calling write() for
each element.
read1($self, size=-1, /)
Read at most size bytes, returned as a bytes object.
If the size argument is negative or omitted, read until EOF is reached.
Return an empty bytes object at EOF.
readinto($self, buffer, /)
Read bytes into buffer.
Returns number of bytes read (0 for EOF), or None if the object
is set not to block and has no data to read.
readline($self, size=-1, /)
Next line from the file, as a bytes object.
Retain newline.  A non-negative size argument limits the maximum
number of bytes to return (an incomplete line may be returned then).
Return an empty bytes object at EOF.
readlines($self, size=None, /)
List of bytes objects, each a line from the file.
Call readline() repeatedly and return a list of the lines so read.
The optional size argument, if given, is an approximate bound on the
total number of bytes in the lines returned.
read($self, size=-1, /)
Read at most size bytes, returned as a bytes object.
If the size argument is negative, read until EOF is reached.
Return an empty bytes object at EOF.
getbuffer($self, /)
Get a read-write view over the contents of the BytesIO object.
getvalue($self, /)
Retrieve the entire contents of the BytesIO object.
seek($self, pos, whence=0, /)
Change stream position.
Seek to byte offset pos relative to position indicated by whence:
     0  Start of stream (the default).  pos should be >= 0;
     1  Current position - pos may be negative;
     2  End of stream - pos usually negative.
Returns the new absolute position.
truncate($self, size=None, /)
Truncate the file to at most size bytes.
Size defaults to the current file position, as returned by tell().
The current file position is unchanged.  Returns the new size.
Base class for buffered IO objects.
The main difference with RawIOBase is that the read() method
supports omitting the size argument, and does not have a default
implementation that defers to readinto().
In addition, read(), readinto() and write() may raise
BlockingIOError if the underlying raw stream is in non-blocking
mode and not ready; unlike their raw counterparts, they will never
return None.
A typical implementation should not inherit from a RawIOBase
implementation, but wrap one.
BufferedReader(raw, buffer_size=DEFAULT_BUFFER_SIZE)
Create a new buffered reader using the given readable raw IO object.
BufferedWriter(raw, buffer_size=DEFAULT_BUFFER_SIZE)
A buffer for a writeable sequential RawIO object.
The constructor creates a BufferedWriter for the given writeable raw
stream. If the buffer_size is not given, it defaults to
DEFAULT_BUFFER_SIZE.
BufferedRWPair(reader, writer, buffer_size=DEFAULT_BUFFER_SIZE, /)
A buffered reader and writer object together.
A buffered reader object and buffered writer object put together to
form a sequential IO object that can read and write. This is typically
used with a socket or two-way pipe.
reader and writer are RawIOBase objects that are readable and
writeable respectively. If the buffer_size is omitted it defaults to
DEFAULT_BUFFER_SIZE.
BufferedRandom(raw, buffer_size=DEFAULT_BUFFER_SIZE)
A buffered interface to random access streams.
The constructor creates a reader and writer for a seekable stream,
raw, given in the first argument. If the buffer_size is omitted it
defaults to DEFAULT_BUFFER_SIZE.
detach($self, /)
Disconnect this buffer from its underlying raw stream and return it.
After the raw stream has been detached, the buffer is in an unusable
state.
Read and return up to n bytes.
If the argument is omitted, None, or negative, reads and
returns all data until EOF.
If the argument is positive, and the underlying raw stream is
not 'interactive', multiple raw reads may be issued to satisfy
the byte count (unless EOF is reached first).  But for
interactive raw streams (as well as sockets and pipes), at most
one raw read will be issued, and a short result does not imply
that EOF is imminent.
Returns an empty bytes object on EOF.
Returns None if the underlying raw stream was open in non-blocking
mode and no data is available at the moment.
Read and return up to n bytes, with at most one read() call
to the underlying raw stream. A short result does not imply
that EOF is imminent.
Returns an empty bytes object on EOF.
readinto($self, buffer, /)
readinto1($self, buffer, /)
Write the given buffer to the IO stream.
Returns the number of bytes written, which is always the length of b
in bytes.
Raises BlockingIOError if the buffer is full and the
underlying raw stream cannot accept more data at the moment.
read($self, size=-1, /)
peek($self, size=0, /)
read1($self, size=-1, /)
readinto($self, buffer, /)
readinto1($self, buffer, /)
readline($self, size=-1, /)
seek($self, target, whence=0, /)
truncate($self, pos=None, /)
write($self, buffer, /)
*Base class for text I/O.
This class provides a character and line based interface to stream
I/O. There is no readinto method because Python's character strings
are immutable. There is no public constructor.
IncrementalNewlineDecoder(decoder, translate, errors='strict')
Codec used when reading a file in universal newlines mode.
It wraps another incremental decoder, translating \r\n and \r into \n.
It also records the types of newlines encountered.  When used with
translate=False, it ensures that the newline sequence is returned in
one piece. When used with decoder=None, it expects unicode strings as
decode input and translates newlines without first invoking an external
decoder.
TextIOWrapper(buffer, encoding=None, errors=None, newline=None,
              line_buffering=False, write_through=False)
Character and line based layer over a BufferedIOBase object, buffer.
encoding gives the name of the encoding that the stream will be
decoded or encoded with. It defaults to locale.getpreferredencoding(False).
errors determines the strictness of encoding and decoding (see
help(codecs.Codec) or the documentation for codecs.register) and
defaults to "strict".
newline controls how line endings are handled. It can be None, '',
'\n', '\r', and '\r\n'.  It works as follows:
* On input, if newline is None, universal newlines mode is
  enabled. Lines in the input can end in '\n', '\r', or '\r\n', and
  these are translated into '\n' before being returned to the
  caller. If it is '', universal newline mode is enabled, but line
  endings are returned to the caller untranslated. If it has any of
  the other legal values, input lines are only terminated by the given
  string, and the line ending is returned to the caller untranslated.
* On output, if newline is None, any '\n' characters written are
  translated to the system default line separator, os.linesep. If
  newline is '' or '\n', no translation takes place. If newline is any
  of the other legal values, any '\n' characters written are translated
  to the given string.
If line_buffering is True, a call to flush is implied when a call to
write contains a newline character.
Separate the underlying buffer from the TextIOBase and return it.
After the underlying buffer has been detached, the TextIO is in an
unusable state.
Read at most n characters from stream.
Read from underlying buffer until we have n characters or we hit EOF.
If n is negative or omitted, read until EOF.
Read until newline or EOF.
Returns an empty string if EOF is hit immediately.
Write string to stream.
Returns the number of characters written (which is always equal to
the length of the string).
Encoding of the text stream.
Subclasses should override.
Line endings translated so far.
Only line endings translated during reading are considered.
Subclasses should override.
The error setting of the decoder or encoder.
Subclasses should override.
decode($self, /, input, final=False)
getstate($self, /)
setstate($self, state, /)
reset($self, /)
detach($self, /)
reconfigure($self, /, *, encoding=None, errors=None, newline=None,
            line_buffering=None, write_through=None)
Reconfigure the text stream with new parameters.
This also does an implicit stream flush.
write($self, text, /)
read($self, size=-1, /)
readline($self, size=-1, /)
flush($self, /)
close($self, /)
fileno($self, /)
seekable($self, /)
readable($self, /)
writable($self, /)
isatty($self, /)
seek($self, cookie, whence=0, /)
tell($self, /)
truncate($self, pos=None, /)
StringIO(initial_value='', newline='\n')
Text I/O implementation using an in-memory buffer.
The initial_value argument sets the value of object.  The newline
argument is like the one of TextIOWrapper's constructor.
close($self, /)
Close the IO object.
Attempting any further operation after the object is closed
will raise a ValueError.
This method has no effect if the file is already closed.
getvalue($self, /)
Retrieve the entire contents of the object.
read($self, size=-1, /)
Read at most size characters, returned as a string.
If the argument is negative or omitted, read until EOF
is reached. Return an empty string at EOF.
readline($self, size=-1, /)
Read until newline or EOF.
Returns an empty string if EOF is hit immediately.
tell($self, /)
Tell the current file position.
truncate($self, pos=None, /)
Truncate size to pos.
The pos argument defaults to the current file position, as
returned by tell().  The current file position is unchanged.
Returns the new absolute position.
seek($self, pos, whence=0, /)
Change stream position.
Seek to character offset pos relative to position indicated by whence:
    0  Start of stream (the default).  pos should be >= 0;
    1  Current position - pos must be 0;
    2  End of stream - pos must be 0.
Returns the new absolute position.
write($self, s, /)
Write string to file.
Returns the number of characters written, which is always equal to
the length of the string.
seekable($self, /)
Returns True if the IO object can be seeked.
readable($self, /)
Returns True if the IO object can be read.
writable($self, /)
Returns True if the IO object can be written.
faulthandler module.
Debug module to trace memory blocks allocated by Python.
is_tracing($module, /)
Return True if the tracemalloc module is tracing Python memory allocations.
clear_traces($module, /)
Clear traces of memory blocks allocated by Python.
_get_traces($module, /)
Get traces of all memory blocks allocated by Python.
Return a list of (size: int, traceback: tuple) tuples.
traceback is a tuple of (filename: str, lineno: int) tuples.
Return an empty list if the tracemalloc module is disabled.
_get_object_traceback($module, obj, /)
Get the traceback where the Python object obj was allocated.
Return a tuple of (filename: str, lineno: int) tuples.
Return None if the tracemalloc module is disabled or did not
trace the allocation of the object.
start($module, nframe=1, /)
Start tracing Python memory allocations.
Also set the maximum number of frames stored in the traceback of a
trace to nframe.
stop($module, /)
Stop tracing Python memory allocations.
Also clear traces of memory blocks allocated by Python.
get_traceback_limit($module, /)
Get the maximum number of frames stored in the traceback of a trace.
By default, a trace of an allocated memory block only stores
the most recent frame: the limit is 1.
get_tracemalloc_memory($module, /)
Get the memory usage in bytes of the tracemalloc module.
This memory is used internally to trace memory allocations.
get_traced_memory($module, /)
Get the current size and peak size of memory blocks traced by tracemalloc.
Returns a tuple: (current: int, peak: int).
reset_peak($module, /)
Set the peak size of memory blocks traced by tracemalloc to the current size.
Do nothing if the tracemalloc module is not tracing memory allocations.
symtable($module, source, filename, startstr, /)
Return symbol and scope dictionaries used internally by compiler.
xxsubtype is an example module showing how to subtype builtin types from C.
test_descr.py in the standard test suite requires it in order to complete.
If you don't care about the examples, and don't intend to run the Python
test suite, you can recompile Python without Modules/xxsubtype.c.
d d!
d#d$
d^d%d&
d'd(
d)d*
d+d,
d-d.
d/d0
d1d2
d3d4
d5d6
d7d8
d9d:
d;d<
d=d>
Z d?d@
Z!d_dAdB
Z"dCdD
Z#dEZ$e$dF
Z%dGdH
Z&e'
Z(dIdJ
Z)d`dLdM
Z*d'dN
dOdP
Z+dQdR
Z,dadTdU
Z-dVdW
Z.dXdY
Z/dZd[
Z0d\d]
)baS
Core implementation of import.
This module is NOT meant to be directly imported! It has been designed such
that it can be bootstrapped into Python as the implementation of import. As
such it requires the injection of specific modules and attributes in order to
work. One should use importlib as the public-facing version of this module.
z/Simple substitute for functools.update_wrapper.)
__module__
__name__
__qualname__
__doc__N)
hasattr
setattr
getattr
__dict__
update)
newZ
replace
<frozen importlib._bootstrap>
_wrap
type
namer
_new_module#
_DeadlockErrorN)
_ModuleLockz
A recursive lock implementation which is able to detect deadlocks
    (e.g. thread 1 trying to take locks A then B, and thread 2 trying to
    take locks B then A).
    c
_threadZ
allocate_lock
lock
wakeupr
owner
count
waiters
selfr
__init__:
_ModuleLock.__init__c
NFT)
get_identr
_blocking_on
add)
tidZ
seenr
has_deadlockB
_ModuleLock.has_deadlockc
        Acquire the module lock.  If a potential deadlock is detected,
        a _DeadlockError is raised.
        Otherwise, the lock is always acquired and True is returned.
        r
deadlock detected by %rF)r
acquirer
release
_ModuleLock.acquirec
cannot release un-acquired lockr
RuntimeErrorr
_ModuleLock.releasec
_ModuleLock({!r}) at {}
formatr
__repr__}
_ModuleLock.__repr__N)
_DummyModuleLockzVA simple _ModuleLock equivalent for Python builds without
    multi-threading support.c
_DummyModuleLock.__init__c
_DummyModuleLock.acquirec
_DummyModuleLock.releasec
_DummyModuleLock({!r}) at {}r-
_DummyModuleLock.__repr__N)
_ModuleLockManagerc
_name
_lockr
_ModuleLockManager.__init__c
_get_module_lockr4
__enter__
_ModuleLockManager.__enter__c
argsZ
kwargsr
__exit__
_ModuleLockManager.__exit__N)
Get or create the module lock for a given module name.
    Acquire/release internally the global import lock to protect
    _module_locks.Nc
_imp
acquire_lock
_module_locksr#
release_lock)
refr
_get_module_lock.<locals>.cb)
KeyErrorr
_weakrefr>
Acquires then releases the module lock for a given module name.
    This is used to ensure a module is completely initialized, in the
    event it is being imported by another thread.
    N)
_lock_unlock_module
remove_importlib_frames in import.c will always remove sequences
    of importlib frames that end with a call to this function
    Use it instead of a normal call in places where including the importlib
    frames introduces unwanted noise into the traceback (e.g. when executing
    module code)
    r
kwdsr
_call_with_frames_removed
verbosityc
z=Print the message to stderr if -v/PYTHONVERBOSE is turned on.)
import z
fileN)
flags
verbose
startswith
printr.
stderr)
messagerE
_verbose_message
z1Decorator to verify the named module is built-in.c
{!r} is not a built-in moduler
builtin_module_names
ImportErrorr.
fullname
fxnr
_requires_builtin_wrapper
z4_requires_builtin.<locals>._requires_builtin_wrapper
_requires_builtin
z/Decorator to verify the named module is frozen.c
{!r} is not a frozen moduler
is_frozenrP
_requires_frozen_wrapper
z2_requires_frozen.<locals>._requires_frozen_wrapperrV
_requires_frozen
Load the specified module into sys.modules and return it.
    This method is deprecated.  Use loader.exec_module instead.
    N)
spec_from_loaderr
modules
_exec
_load)
spec
moduler
_load_module_shim
r6z|
__loader__
module_repr
<module {!r}>
<module {!r} ({!r})>
<module {!r} from {!r}>)
Exception
__spec__
AttributeError
_module_repr_from_specr
__file__r.
loaderr`
filenamer
_module_repr
ModuleSpeca
The specification for a module, used for loading.
    A module's spec is the source for information about the module.  For
    data associated with the module, including source, use the spec's
    loader.
    `name` is the absolute name of the module.  `loader` is the loader
    to use when loading the module.  `parent` is the name of the
    package the module is in.  The parent is derived from the name.
    `is_package` determines if the module is considered a package or
    not.  On modules this is reflected by the `__path__` attribute.
    `origin` is the specific location used by the loader from which to
    load the module, if that information is available.  When filename is
    set, origin will match.
    `has_location` indicates that a spec's "origin" reflects a location.
    When this is True, `__file__` attribute of the module is set.
    `cached` is the location of the cached bytecode file, if any.  It
    corresponds to the `__cached__` attribute.
    `submodule_search_locations` is the sequence of path entries to
    search when importing submodules.  If set, is_package should be
    True--and False otherwise.
    Packages are simply modules that (may) have submodules.  If a spec
    has a non-None value in `submodule_search_locations`, the import
    system will consider modules loaded from the spec as packages.
    Only finders (see importlib.abc.MetaPathFinder and
    importlib.abc.PathEntryFinder) should modify ModuleSpec instances.
    N)
origin
loader_state
is_packagec
submodule_search_locations
_set_fileattr
_cached)
ModuleSpec.__init__c
name={!r}z
loader={!r}z
origin={!r}z
submodule_search_locations={}z
{}({})z
appendru
__class__r
join)
ModuleSpec.__repr__c
cached
has_locationrk
NotImplemented)
otherZ
smslr
__eq__u
ModuleSpec.__eq__c
_bootstrap_external
NotImplementedErrorZ
_get_cachedr0
ModuleSpec.cachedc
z The name of the module's parent.N
rpartitionr0
parent
ModuleSpec.parentc
ModuleSpec.has_locationc
boolrv
valuer
propertyr{
setterr
z5Return a module spec based on various loader methods.Zget_filenameN)
spec_from_file_locationrt
searchr
_ORIGIN
__cached__
list
__path__rq
locationr{
_spec_from_module
overridec
r4z|
rFz|
__package__r
_NamespaceLoader
__new__Z
_pathrm
_init_module_attrs
z+Create a module based on the provided spec.N
create_module
exec_modulezBloaders that define exec_module() must also define create_module())
module_from_spec.
z&Return the repr to use for the module.Nre
<module {!r} ({})>)
zFExecute the spec's specified module in an existing module's namespace.z
module {!r} not in sys.modulesr
missing loaderTr
load_moduler
pop)
msgr
_load_backward_compatiblen
import {!r} # {!r}F)
_initializingr
_load_unlocked
Return a new module object, loaded by the spec's loader.
    The module is not added to its parent.
    If a module is already in sys.modules, that existing module gets
    clobbered.
    N)
BuiltinImporterz
Meta path import for built-in modules.
    All methods are either class or static methods to avoid the need to
    instantiate the class.
    z
built-inc
sReturn repr for the module.
        The method is deprecated.  The import machinery does the job itself.
        z
<module z
BuiltinImporter.module_reprNc
is_builtinr\
clsrR
path
targetr
find_spec
BuiltinImporter.find_specc
Find the built-in module.
        If 'path' is ever specified then the search is considered a failure.
        This method is deprecated.  Use find_spec() instead.
        N)
find_module
BuiltinImporter.find_modulec
Create a built-in modulerN
create_builtin)
BuiltinImporter.create_modulec
Exec a built-in moduleN)
Zexec_builtin)
BuiltinImporter.exec_modulec
z9Return None as built-in modules do not have code objects.Nr
get_code
BuiltinImporter.get_codec
z8Return None as built-in modules do not have source code.Nr
get_source
BuiltinImporter.get_sourcec
z4Return False as built-in modules are never packages.Fr
BuiltinImporter.is_package)
staticmethodrd
classmethodr
FrozenImporterz
Meta path import for frozen modules.
    All methods are either class or static methods to avoid the need to
    instantiate the class.
    Z
frozenc
FrozenImporter.module_reprNc
FrozenImporter.find_specc
z]Find a frozen module.
        This method is deprecated.  Use find_spec() instead.
        N)
FrozenImporter.find_modulec
z*Use default semantics for module creation.Nr
FrozenImporter.create_modulec
get_frozen_object
execr
coder
FrozenImporter.exec_modulec
z_Load a frozen module.
        This method is deprecated.  Use exec_module() instead.
        )
FrozenImporter.load_modulec
z-Return the code object for the frozen module.)
FrozenImporter.get_codec
z6Return None as frozen modules do not have source code.Nr
FrozenImporter.get_sourcec
z.Return True if the frozen module is a package.)
is_frozen_packager
FrozenImporter.is_package)
_ImportLockContextz$Context manager for the import lock.c
Acquire the import lock.N)
_ImportLockContext.__enter__c
z<Release the import lock regardless of any raised exceptions.N)
exc_type
exc_value
exc_tracebackr
_ImportLockContext.__exit__N)
z2Resolve a relative module name to an absolute one.r
z2attempted relative import beyond top-level packager
{}.{})
rsplit
lenrP
package
levelZ
bitsZ
baser
_resolve_names
finderr
_find_spec_legacy|
Find a module's spec.Nz5sys.meta_path is None, Python is likely shutting downz
sys.meta_path is empty)r
meta_pathrP
_warnings
warn
ImportWarningr]
is_reloadr
_find_spec
Verify arguments are "sane".z
module name must be str, not {}r
level must be >= 0z
__package__ not set to a stringz6attempted relative import with no known parent packagez
Empty module nameN)
isinstance
TypeErrorr.
ValueErrorrP
_sanity_check
No module named z
{!r}c
; {!r} is not a packager
Cannot set an attribute on z
 for child module )
_ERR_MSGr.
ModuleNotFoundErrorr
import_r
parent_moduler
childr
_find_and_load_unlocked
Find and load the module.Nz(import of {} halted; None in sys.modulesr
_NEEDS_LOADINGr
_find_and_load
Import and return the module based on its name, the package the call is
    being made from, and the level adjustment.
    This function represents the greatest common denominator of functionality
    between import_module and __import__. This includes setting __package__ if
    the loader did not.
    r
_gcd_importr
recursivec
Figure out what __import__ should return.
    The import_ parameter is a callable which takes the name of module to
    import. It is required to decouple the function from assuming importlib's
    import implementation is desired.
    z
.__all__z
``from list''z
Item in z
 must be str, not 
__all__Tr
_handle_fromlistr
fromlistr
whereZ
from_nameZ
excr
Calculate what __package__ should be.
    __package__ is not guaranteed to be defined or could be set to None
    to represent that its proper value is unknown.
    r
Nz __package__ != __spec__.parent (z
 != 
stacklevelzYcan't resolve package from __spec__ or __package__, falling back on __name__ and __path__r
globalsr
_calc___package__.
Import a module.
    The 'globals' argument is used to infer where the import is occurring from
    to handle relative imports. The 'locals' argument is ignored. The
    'fromlist' argument specifies what should exist as attributes on the module
    being imported (e.g. ``from module import <fromlist>``).  The 'level'
    argument represents the package location to import from in a relative
    import (e.g. ``from ..pkg import mod`` would have a 'level' of 2).
    r
partitionr
localsr
globals_r
cut_offr
__import__I
no built-in module named )
_builtin_from_namen
Setup importlib by importing needed built-in modules and injecting them
    into the global namespace.
    As sys is needed for sys.modules access and _imp is needed to load built-in
    modules, those two modules must be explicitly passed in.
    )
itemsr
sys_module
_imp_moduleZ
module_typer
self_moduleZbuiltin_nameZ
builtin_moduler
_setupu
z0Install importers for builtin and frozen modulesN)
_install
z9Install importers that require external filesystem accessr
_frozen_importlib_externalr
_install_external_importers
_ERR_MSG_PREFIXr
objectr
<module>
d d!
r$d"d#
d$d#
Z dod&d'
Z!e"e!j#
Z$d(
%d)d*
Z&e'
(e&d*
Z)d,Z*d-Z+d.g
Z,d/g
Z-e-
Z.Z/dpd
d1d2
Z0d3d4
Z1d5d6
Z2d7d8
Z3d9d:
Z4d;d<
Z5d=d>
Z6d?d@
Z7dAdB
Z8dCdD
Z9dqdEdF
Z:drdGdH
Z;dsdJdK
Z<dLdM
Z=e>
Z?dtd
e?dN
dOdP
dQdR
dSdT
dUdV
dVeB
dWdX
dYdZ
dZeDeC
d[d\
d\eDeB
d]d^
d^eDeB
d_d`
dadb
dcdd
dedf
ZLdudgdh
ZMdidj
ZNdkdl
ZOdmdn
)va^
Core implementation of path-based import.
This module is NOT meant to be directly imported! It has been designed such
that it can be bootstrapped into Python as the implementation of import. As
such it requires the injection of specific modules and attributes in order to
work. One should use importlib as the public-facing version of this module.
win32
&<frozen importlib._bootstrap_external>
<genexpr>+
<setcomp>/
win)
cygwinZ
darwinc
NZPYTHONCASEOKs
PYTHONCASEOKc
z^True if filenames must be checked case-insensitively and ignore environment flags are not set.)
flags
ignore_environment
_osZ
environr
keyr
_relax_case@
z%_make_relax_case.<locals>._relax_casec
z5True if filenames must be checked case-insensitively.Fr
platform
startswith
_CASE_INSENSITIVE_PLATFORMS
#_CASE_INSENSITIVE_PLATFORMS_STR_KEY)
_make_relax_case9
z*Convert a 32-bit integer to little-endian.
little)
to_bytes)
_pack_uint32J
z/Convert 4 bytes in little-endian to an integer.r"
from_bytes
datar
_unpack_uint32O
z/Convert 2 bytes in little-endian to an integer.
_unpack_uint16T
Replacement for os.path.join().r
rstrip
path_separators
<listcomp>r
_path_join.<locals>.<listcomp>)
mapr
_path_splitrootr
path_sep_tuple
endswithr1
path_sep
casefold
append
join)
path_parts
root
pathZ
new_root
tailr
_path_join[
partr
z Replacement for os.path.split().c
rfindr3
_path_split.<locals>.<genexpr>r
maxr2
_path_split
z~Stat the path.
    Made a separate function to make it easier to override in experiments
    (e.g. cache stat results).
    )
statrG
_path_stat
z1Test whether the path is the specified mode type.Fi
OSError
st_mode)
modeZ
stat_infor
_path_is_mode_type
Replacement for os.path.isfile.i
_path_isfile
Replacement for os.path.isdir.i
getcwdrO
_path_isdir
Replacement for os.path.isabs.Fr
replacer
_path_isabs
Best-effort function to write data to a path atomically.
    Be prepared to handle a FileExistsError if concurrent writing of the
    temporary file is attempted.
{}.{}rV
wbN)
format
openZ
O_EXCLZ
O_CREATZ
O_WRONLY
FileIO
writerT
unlink)
path_tmpZ
filer
_write_atomic
__pycache__z
opt-z
.pyz
.pyc)
optimizationc
Given the path to a .py file, return the path to its .pyc file.
    The .py file does not need to exist; this simply returns the path to the
    .pyc file calculated as if the .py file were imported.
    The 'optimization' parameter controls the presumed optimization level of
    the bytecode file. If 'optimization' is not None, the string representation
    of the argument is taken and verified to be alphanumeric (else ValueError
    is raised).
    The debug_override parameter is deprecated. If debug_override is not None,
    a True value is the same as setting 'optimization' to the empty string
    while a False value is equivalent to setting 'optimization' to '1'.
    If sys.implementation.cache_tag is None then NotImplementedError is raised.
    NzFthe debug_override parameter is deprecated; use 'optimization' insteadz2debug_override or optimization must be set to Noner
$sys.implementation.cache_tag is Noner
{!r} is not alphanumericz
{}.{}{}r
_warnings
warn
DeprecationWarning
TypeErrorr
fspathrJ
rpartitionr
implementation
cache_tag
NotImplementedErrorr>
optimize
isalnum
ValueErrorrX
_OPT
BYTECODE_SUFFIXES
pycache_prefixrU
lstrip
_PYCACHE)rA
debug_overrider_
message
headrB
baser
restZ
tagZ
almost_filename
filenamer
cache_from_sourcei
Given the path to a .pyc. file, return the path to its .py file.
    The .pyc file does not need to exist; this simply returns the path to
    the .py file calculated to correspond to the .pyc file.  If path does
    not conform to PEP 3147/488 format, ValueError will be raised. If
    sys.implementation.cache_tag is None then NotImplementedError is raised.
    Nra
 not bottom-level directory in r`
expected only 2 or 3 dots in ry
z5optimization portion of filename does not start with z
optimization level z
 is not an alphanumeric valuer
count
rsplitro
partitionrC
SOURCE_SUFFIXES)
pycache_filenameZ
found_in_pycache_prefixZ
stripped_pathZ
pycacheZ
dot_countr_
opt_levelZ
base_filenamer
source_from_cache
Convert a bytecode file path to a source path (if possible).
    This function exists purely for backwards-compatibility for
    PyImport_ExecCodeModuleWithFilenames() in the C API.
    r
lowerr
bytecode_pathrv
extension
source_pathr
_get_sourcefile
tupler~
_get_cached
z3Calculate the mode permissions for a bytecode file.rV
_calc_mode
Decorator to verify that the module being requested matches the one the
    loader can handle.
    The first argument (self) must define _name which the second argument is
    compared against. If the comparison fails then ImportError is raised.
    Nc
loader for %s cannot handle %s
name)
ImportError)
selfr
args
kwargs
methodr
_check_name_wrapper
z(_check_name.<locals>._check_name_wrapperc
__module__
__name__
__qualname__
__doc__)
hasattr
setattr
getattr
__dict__
update)
newZ
oldrT
_wrap
_check_name.<locals>._wrap)
_bootstrapr
NameError)
_check_name
Try to find a loader for the specified module by delegating to
    self.find_loader().
    This method is deprecated in favor of finder.find_spec().
    Nz,Not importing directory {}: missing __init__r
find_loaderr
ImportWarning)
fullname
loader
portions
msgr
_find_module_shim
)aT
Perform basic validity checking of a pyc header and return the flags field,
    which determines how the pyc should be further validated against the source.
    *data* is the contents of the pyc file. (Only the first 16 bytes are
    required, though.)
    *name* is the name of the module being imported. It is used for logging.
    *exc_details* is a dictionary passed to ImportError if it raised for
    improved debugging.
    ImportError is raised when the magic number is incorrect or when the flags
    field is invalid. EOFError is raised when the data is found to be truncated.
    Nr"
bad magic number in z
z(reached EOF while reading pyc header of 
invalid flags z
 in )
MAGIC_NUMBERr
_verbose_messager
EOFErrorr,
exc_detailsZ
magicrt
_classify_pyc0
Validate a pyc against the source last-modified time.
    *data* is the contents of the pyc file. (Only the first 16 bytes are
    required.)
    *source_mtime* is the last modified timestamp of the source file.
    *source_size* is None or the size of the source file in bytes.
    *name* is the name of the module being imported. It is used for logging.
    *exc_details* is a dictionary passed to ImportError if it raised for
    improved debugging.
    An ImportError is raised if the bytecode is stale.
    r
bytecode is stale for r
source_mtime
source_sizer
_validate_timestamp_pycQ
Validate a hash-based pyc by checking the real source hash against the one in
    the pyc header.
    *data* is the contents of the pyc file. (Only the first 16 bytes are
    required.)
    *source_hash* is the importlib.util.source_hash() of the source file.
    *name* is the name of the module being imported. It is used for logging.
    *exc_details* is a dictionary passed to ImportError if it raised for
    improved debugging.
    An ImportError is raised if the bytecode is stale.
    r
z.hash in bytecode doesn't match hash of source N)
source_hashr
_validate_hash_pycm
z#Compile bytecode as found in a pyc.z
code object from {!r}Nz
Non-code object in {!r}
marshalZ
loads
isinstance
_code_typer
_impZ
_fix_co_filenamer
coder
_compile_bytecode
z+Produce the data for a timestamp-based pyc.r
bytearrayr
extendr'
dumps)
mtimer
_code_to_timestamp_pyc
z&Produce the data for a hash-based pyc.r
checkedr+
_code_to_hash_pyc
zyDecode bytes representing source code and return the string.
    Universal newline support is used in the decoding.
    r
tokenizerZ
BytesIOZ
readlineZ
detect_encodingZ
IncrementalNewlineDecoder
decode)
source_bytesr
source_bytes_readline
encodingZ
newline_decoderr
decode_source
submodule_search_locationsc
Return a module spec based on a file location.
    To indicate that the module is a package, set
    submodule_search_locations to a list of directory paths.  An
    empty list is sufficient, though its not otherwise useful to the
    import system.
    The loader must take a spec as its only __init__() arg.
    Nz
<unknown>
get_filename
originT
is_packager
ModuleSpecZ
_set_fileattr
_get_supported_file_loadersr:
_POPULATEr
locationr
spec
loader_class
suffixesr
dirnamer
spec_from_file_location
WindowsRegistryFinderz>Meta path finder for modules declared in the Windows registry.z;Software\Python\PythonCore\{sys_version}\Modules\{fullname}zASoftware\Python\PythonCore\{sys_version}\Modules\{fullname}\DebugFc
winregZ
OpenKeyZ
HKEY_CURRENT_USERrL
HKEY_LOCAL_MACHINE)
clsr
_open_registry
z$WindowsRegistryFinder._open_registryc
%d.%dr-
sys_versionr
DEBUG_BUILD
REGISTRY_KEY_DEBUG
REGISTRY_KEYrX
version_infor
QueryValuerL
Zregistry_keyr
hkey
filepathr
_search_registry
z&WindowsRegistryFinder._search_registryNc
spec_from_loader)
targetr
find_spec
WindowsRegistryFinder.find_specc
zlFind module named in the registry.
        This method is deprecated.  Use exec_module() instead.
        N
find_module.
z!WindowsRegistryFinder.find_module)
N)r
classmethodr
_LoaderBasicszSBase class of common code needed by both SourceLoader and
    SourcelessFileLoader.c
Concrete implementation of InspectLoader.is_package by checking if
        the path returned by get_filename has a filename of '__init__.py'.r
__init__)
filename_baseZ
tail_namer
_LoaderBasics.is_packagec
z*Use default semantics for module creation.Nr
create_moduleI
_LoaderBasics.create_modulec
Execute the module.Nz4cannot load module {!r} when get_code() returns None)
get_coder
_call_with_frames_removed
execr
moduler
exec_moduleL
_LoaderBasics.exec_modulec
This module is deprecated.)
_load_module_shim
load_moduleT
_LoaderBasics.load_moduleN)
SourceLoaderc
Optional method that returns the modification time (an int) for the
        specified path (a str).
        Raises OSError when the path cannot be handled.
        N)
path_mtime[
SourceLoader.path_mtimec
Optional method returning a metadata dict for the specified
        path (a str).
        Possible keys:
        - 'mtime' (mandatory) is the numeric timestamp of last source
          code modification;
        - 'size' (optional) is the size in bytes of the source code.
        Implementing this method allows the loader to read bytecode files.
        Raises OSError when the path cannot be handled.
        r
path_statsc
SourceLoader.path_statsc
Optional method which writes data (bytes) to a file path (a str).
        Implementing this method allows for the writing of bytecode files.
        The source path is needed in order to correctly transfer permissions
        )
set_data)
cache_pathr+
_cache_bytecodeq
SourceLoader._cache_bytecodec
Optional method which writes data (bytes) to a file path (a str).
        Implementing this method allows for the writing of bytecode files.
        Nr
SourceLoader.set_datac
z4Concrete implementation of InspectLoader.get_source.z'source not available through get_data()r
get_datarL
excr
get_source
SourceLoader.get_sourcer
_optimizec
Return the code object compiled from source.
        The 'data' argument can be any object type that compile() supports.
        r
dont_inheritrk
compile)
source_to_code
SourceLoader.source_to_codec
Concrete implementation of InspectLoader.get_code.
        Reading of bytecode requires path_stats to be implemented. To write
        bytecode, set_data must also be implemented.
        NFTr
neverZ
always
sizez
{} matches {})
code object from {})
memoryviewr
check_hash_based_pycsr
_RAW_MAGIC_NUMBERr
dont_write_bytecoder
hash_basedZcheck_sourcer
str+
bytes_dataZ
code_objectr
SourceLoader.get_codeN)
FileLoaderzgBase file loader class which implements the loader protocol methods that
    require file system usage.c
zKCache the module name and the path to the file found by the
        finder.Nr
FileLoader.__init__c
__class__r
otherr
__eq__
FileLoader.__eq__c
hashr
__hash__
FileLoader.__hash__c
zdLoad a module from a file.
        This method is deprecated.  Use exec_module() instead.
        )
superr
FileLoader.load_modulec
z:Return the path to the source file as found by the finder.rG
FileLoader.get_filenamec
z'Return the data from path as raw bytes.N
ExtensionFileLoaderrZ
open_coderl
readr[
FileLoader.get_datac
get_resource_reader
FileLoader.get_resource_readerc
resourcerA
open_resource
FileLoader.open_resourcec
is_resource
FileNotFoundErrorrC
resource_path!
FileLoader.resource_pathc
FileLoader.is_resourcec
iterr
listdirrJ
contents-
FileLoader.contents)
__classcell__r
SourceFileLoaderz>Concrete implementation of SourceLoader using the file system.c
z!Return the metadata for the path.)
st_mtimeZ
st_size)
SourceFileLoader.path_statsc
_mode)
z SourceFileLoader._cache_bytecoderV
Write bytes data to a file.z
could not create {!r}: {!r}Nzcreated {!r})rJ
reversedrC
mkdir
FileExistsErrorrL
parentrw
SourceFileLoader.set_dataN)
SourcelessFileLoaderz-Loader which handles sourceless file imports.c
SourcelessFileLoader.get_codec
z'Return None as there is no source code.Nr
SourcelessFileLoader.get_sourceN)
z]Loader for extension modules.
    The constructor is designed to work with FileFinder.
    c
ExtensionFileLoader.__init__c
ExtensionFileLoader.__eq__c
ExtensionFileLoader.__hash__c
z&Create an unitialized extension modulez&extension module {!r} loaded from {!r})
create_dynamicr
z!ExtensionFileLoader.create_modulec
Initialize an extension modulez(extension module {!r} executed from {!r}N)
Zexec_dynamicr
ExtensionFileLoader.exec_modulec
z1Return True if the extension module is a package.r
suffix
file_namer
z1ExtensionFileLoader.is_package.<locals>.<genexpr>)
EXTENSION_SUFFIXESr
ExtensionFileLoader.is_packagec
z?Return None as an extension module cannot create a code object.Nr
ExtensionFileLoader.get_codec
z5Return None as extension modules have no source code.Nr
ExtensionFileLoader.get_sourcec
z ExtensionFileLoader.get_filenameN)
_NamespacePatha&
Represents a namespace package's path.  It uses the module name
    to find its parent module, and from there it looks up the parent's
    __path__.  When this changes, the module's own path is recomputed,
    using path_finder.  For top-level modules, the parent module's path
    is sys.path.c
_name
_pathr
_get_parent_path
_last_parent_path
_path_finder
path_finderr
_NamespacePath.__init__c
z>Returns a tuple of (parent-module-name, parent-path-attr-name)r`
__path__)
dotZ
_find_parent_path_names
z&_NamespacePath._find_parent_path_namesc
modules)
parent_module_nameZ
path_attr_namer
_NamespacePath._get_parent_pathc
parent_pathr
_recalculate
_NamespacePath._recalculatec
__iter__
_NamespacePath.__iter__c
indexr
__getitem__
_NamespacePath.__getitem__c
__setitem__
_NamespacePath.__setitem__c
__len__
_NamespacePath.__len__c
_NamespacePath({!r}))
__repr__
_NamespacePath.__repr__c
itemr
__contains__
_NamespacePath.__contains__c
_NamespacePath.appendN)
_NamespaceLoaderc
_NamespaceLoader.__init__c
zsReturn repr for the module.
        The method is deprecated.  The import machinery does the job itself.
        z
<module {!r} (namespace)>)
module_repr
_NamespaceLoader.module_reprc
_NamespaceLoader.is_packagec
_NamespaceLoader.get_sourcec
<string>r
_NamespaceLoader.get_codec
_NamespaceLoader.create_modulec
_NamespaceLoader.exec_modulec
zbLoad a namespace module.
        This method is deprecated.  Use exec_module() instead.
        z&namespace module loaded with path {!r})
_NamespaceLoader.load_moduleN)r
PathFinderz>Meta path finder for sys.path and package __path__ attributes.c
z}Call the invalidate_caches() method on all path entry finders
        stored in sys.path_importer_caches (where implemented).N
invalidate_caches)
listr
path_importer_cache
itemsr
finderr
PathFinder.invalidate_cachesc
z.Search sys.path_hooks for a finder for 'path'.Nz
sys.path_hooks is empty)
path_hooksrb
hookr
_path_hooks,
PathFinder._path_hooksc
r*zt
Get the finder for the path entry from sys.path_importer_cache.
        If the path entry is not in the cache, find the appropriate finder
        and cache it. If no finder is available, store None.
        r
KeyErrorrK
_path_importer_cache9
PathFinder._path_importer_cachec
_legacy_get_specO
PathFinder._legacy_get_specNc
z?Find the loader or namespace_path for this module/package name.Nr
spec missing loader)
bytesrM
namespace_pathZ
entryrI
_get_spec^
PathFinder._get_specc
Try to find a spec for 'fullname' on sys.path or 'path'.
        The search is based on sys.path_hooks and sys.path_importer_cache.
        N)
PathFinder.find_specc
find the module on sys.path or 'path' based on sys.path_hooks and
        sys.path_importer_cache.
        This method is deprecated.  Use find_spec() instead.
        Nr
PathFinder.find_modulec
        Find distributions.
        Return an iterable of all Distribution instances capable of
        loading the metadata for packages matching ``context.name``
        (or all names if ``None`` indicated) along the paths in the list
        of directories ``context.path``.
        r
MetadataPathFinder)
importlib.metadatarR
find_distributions)
PathFinder.find_distributions)
FileFinderz
File-based finder.
    Interactions with the file system are cached for performance, being
    refreshed when the directory the finder is handling has been modified.
    c
Initialize with the path to search on and a variable number of
        2-tuples containing the loader and the file suffixes the loader
        recognizes.c
z&FileFinder.__init__.<locals>.<genexpr>r`
_loadersrA
_path_mtime
_path_cache
_relaxed_path_cache)
loader_detailsZ
loadersr
FileFinder.__init__c
Invalidate the directory mtime.r
FileFinder.invalidate_cachesc
Try to find a loader for the specified module, or the namespace
        package portions. Returns (loader, list-of-portions).
        This method is deprecated.  Use find_spec() instead.
        N)
FileFinder.find_loaderc
smslr
FileFinder._get_specNc
zoTry to find a spec for the specified module.
        Returns the matching spec, or None if not found.
        Fr`
trying {})
verbosityz
possible namespace for {})
_fill_cacher
Zis_namespaceZ
tail_moduler
cacheZcache_moduleZ
base_pathr)
init_filenameZ
full_pathr
FileFinder.find_specc
zDFill the cache of potential modules and packages for this directory.r
z)FileFinder._fill_cache.<locals>.<setcomp>N)
PermissionError
NotADirectoryErrorr
addr
lower_suffix_contentsr@
new_namer
FileFinder._fill_cachec
A class method which returns a closure to use on sys.path_hook
        which will return an instance using the specified loaders and the path
        called on the closure.
        If the path called on the closure is not a directory, ImportError is
        raised.
        c
z-Path hook for importlib.machinery.FileFinder.z
only directories are supportedrG
path_hook_for_FileFinder=
z6FileFinder.path_hook.<locals>.path_hook_for_FileFinderr
path_hook3
FileFinder.path_hookc
FileFinder({!r}))
FileFinder.__repr__)
__loader__
__spec__rU
__file__Z
__cached__)
getr
Exception)
pathnameZ
cpathnamer
_fix_up_moduleK
z_Returns a list of file-based module loaders.
    Each item is a tuple (loader, suffixes).
    )
extension_suffixesr 
extensionsZ
sourceZ
bytecoder
Setup the path-based importers for importlib by importing needed
    built-in modules and injecting them into the global namespace.
    Other components are extracted from the core bootstrap module.
    
posixr
_setup.<locals>.<genexpr>r
importlib requires posix or ntr
_pathseps_with_colonc
_setup.<locals>.<setcomp>)
.pywz
_d.pydTN)
allZ
_builtin_from_namer
_bootstrap_moduleZ
self_moduleZ
os_detailsZ
builtin_osr2
os_moduleZ
builtin_namesZbuiltin_nameZ
builtin_moduler
_setupm
z)Install the path-based import components.N)
meta_pathr=
supported_loadersr
_install
NNN)
N)Qr
_MS_WINDOWSrj
Z%_CASE_INSENSITIVE_PLATFORMS_BYTES_KEYr
type
__code__r
DEBUG_BYTECODE_SUFFIXESZ
OPTIMIZED_BYTECODE_SUFFIXESrx
objectr
<module>
Z"d!d"
e#j$
Z%d#d$
Z&d%d&
Z'd'd(
Z(d)d*
Z)d+d,
Z*d-d.
d/d0
)1aP
zipimport provides support for importing Python modules from Zip archives.
This module exports three objects:
- zipimporter: a class; its constructor takes a path to a Zip archive.
- ZipImportError: exception raised by zipimporter objects. It's a
  subclass of ImportError, so it can be caught as ImportError, too.
- _zip_directory_cache: a dict, mapping archive paths to zip directory
  info dicts, as used in zipimporter._files.
It is usually not needed to use the zipimport module explicitly; it is
used by the builtin import mechanism for sys.path items that are paths
to Zip archives.
_unpack_uint16
_unpack_uint32
ZipImportError
zipimporter
__name__
__module__
__qualname__
<frozen zipimport>r
zipimporter(archivepath) -> zipimporter object
    Create a new zipimporter instance. 'archivepath' must be a path to
    a zipfile, or to a specific path inside a zipfile. For example, it can be
    '/tmp/myimport.zip', or '/tmp/myimport.zip/mydirectory', if mydirectory is a
    valid directory inside the archive.
    'ZipImportError is raised if 'archivepath' doesn't point to a valid Zip
    archive.
    The 'archive' attribute of zipimporter objects contains the name of the
    zipfile targeted.
    c
q@zt
archive path is empty
pathz
not a Zip filei
isinstance
fsdecoder
alt_path_sep
replace
path_sep
_bootstrap_externalZ
_path_stat
OSError
ValueErrorZ
_path_split
appendZ
st_mode
_zip_directory_cache
KeyError
_read_directory
_files
archive
_path_join
prefix)
selfr
dirnameZ
basename
filesr
__init__?
zipimporter.__init__Nc
find_loader(fullname, path=None) -> self, str or None.
        Search for a module specified by 'fullname'. 'fullname' must be the
        fully qualified (dotted) module name. It returns the zipimporter
        instance itself if the module was found, a string containing the
        full path name if it's possibly a portion of a namespace package,
        or None otherwise. The optional 'path' argument is ignored -- it's
        there for compatibility with the importer protocol.
        N)
_get_module_info
_get_module_path
_is_dirr
fullnamer
modpathr
find_loaderm
zipimporter.find_loaderc
find_module(fullname, path=None) -> self or None.
        Search for a module specified by 'fullname'. 'fullname' must be the
        fully qualified (dotted) module name. It returns the zipimporter
        instance itself if the module was found, or None if it wasn't.
        The optional 'path' argument is ignored -- it's there for compatibility
        with the importer protocol.
        r
find_module
zipimporter.find_modulec
get_code(fullname) -> code object.
        Return the code object for the specified module. Raise ZipImportError
        if the module couldn't be found.
        
_get_module_code
code
ispackager(
get_code
zipimporter.get_codec
get_data(pathname) -> string with file data.
        Return the data associated with 'pathname'. Raise OSError if
        the file wasn't found.
        Nr
startswithr
lenr
_get_data)
pathnameZ
toc_entryr
get_data
zipimporter.get_datac
zjget_filename(fullname) -> filename string.
        Return the filename for the specified module.
        r+
get_filename
zipimporter.get_filenamec
get_source(fullname) -> source string.
        Return the source code for the specified module. Raise ZipImportError
        if the module couldn't be found, return None if the archive does
        contain the module, but has no source for it.
        N
can't find module 
name
__init__.py
.py)
decode)
fullpathr6
get_source
zipimporter.get_sourcec
is_package(fullname) -> bool.
        Return True if the module specified by fullname is a package.
        Raise ZipImportError if the module couldn't be found.
        Nr9
is_package
zipimporter.is_packagec
load_module(fullname) -> module.
        Load the module specified by 'fullname'. 'fullname' must be the
        fully qualified (dotted) module name. It returns the imported
        module, or raises ZipImportError if it wasn't found.
        N
__builtins__z
Loaded module z
 not found in sys.modulesz
import {} # loaded from Zip {})
modules
getr
_module_type
__loader__r$
__path__
hasattrrB
_fix_up_module
__dict__
execr
ImportError
_bootstrap
_verbose_message)
modr
load_module
zipimporter.load_modulec
Return the ResourceReader for a package in a zip file.
        If 'fullname' is a package within the zip file, return the
        'ResourceReader' object for the package.  Otherwise return None.
        Nr
ResourceReaderT)
_ZipImportResourceReader
_registeredZ
importlib.abcrO
register)
get_resource_reader
zipimporter.get_resource_readerc
<zipimporter object "z
__repr__"
zipimporter.__repr__)
__doc__r"
z__init__.pycTr<
.pycTF)
rpartition)
dirpathr
_zip_searchorderr
suffix
isbytecoder/
|d 7
d!||
)"Nz
can't open Zip file: r
can't read Zip file: 
not a Zip file: z
corrupt Zip file: 
bad central directory size: z
bad central directory offset: z&bad central directory size or offset: 
EOF read where not expecteds
bad local header offset: i
asciiZ
latin1
z!zipimport: found {} names in {!r})
open_coder
seek
END_CENTRAL_DIR_SIZEZ
tell
readr3
STRING_END_ARCHIVE
MAX_COMMENT_LEN
rfindr
EOFErrorr
UnicodeDecodeError
translate
cp437_tabler
header_position
buffer
file_sizeZ
max_comment_start
dataZ
header_sizeZ
header_offsetZ
arc_offsetr!
count
flags
compress
time
date
data_size
name_size
extra_sizeZcomment_size
file_offsetr;
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
zipimport: zlib UNAVAILABLE
)can't decompress data; zlib not availableTr
decompressFz
zipimport: zlib available)
_importing_zlibrL
zlibr
Exceptionr
_get_decompress_func
negative data sizer\
bad local file header: 
zipimport: can't read datar
datapathr
raw_datar
abs)
_eq_mtimeA
neverZ
alwaysrc
bytecode is stale for z
compiled module z
 is not a code object)
_classify_pycrK
_impZ
check_hash_based_pycs
_get_pyc_source
source_hashZ
_RAW_MAGIC_NUMBERZ
_validate_hash_pyc
_get_mtime_and_size_of_sourcer
marshalZ
loadsr
_code_type
TypeError)
exc_detailsr
hash_basedZcheck_sourceZsource_bytesr
Zsource_mtimeZ
source_sizer.
_unmarshal_codeK
sourcer
_normalize_line_endings~
Zdont_inherit)
compile)
_compile_source
mktime)
_parse_dostime
IndexErrorr
uncompressed_sizer
trying {}{}{}rV
verbosityr
)r$
Private class used to support ZipImport.get_resource_reader().
    This class is allowed to reference all the innards and private parts of
    the zipimporter.
    Fc
z!_ZipImportResourceReader.__init__c
BytesIO)
FileNotFoundError)
resource
fullname_as_pathr
open_resource
z&_ZipImportResourceReader.open_resourcec
resource_path
z&_ZipImportResourceReader.resource_pathc
is_resource
z$_ZipImportResourceReader.is_resourcec
Pathr<
pathlibr
relative_tor
parent
setr
add)
fullname_pathZ
relative_pathZpackage_pathZsubdirs_seen
filenameZ
relativeZ
parent_namer
contents
z!_ZipImportResourceReader.contentsN)
)-rT
_frozen_importlib_externalr
_frozen_importlibrL
__all__r
path_separatorsr
typerF
__code__r
<module>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%
 !"#%%%%%%
 !"#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
TzHello world!N)
initialized
print
Tools/freeze/flag.py
<module>
